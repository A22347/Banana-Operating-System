
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 c6 f8 00 00       	call   c000f8e6 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 23 8e 02 00       	call   c0028e48 <_init>
c0000025:	c3                   	ret    
c0000026:	bb de 9a 02 c0       	mov    ebx,0xc0029ade
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb ec 9a 02 c0    	cmp    ebx,0xc0029aec
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 e3 02 c0       	mov    eax,0xc002e3d8
c0000049:	3d d8 e3 02 c0       	cmp    eax,0xc002e3d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 e3 02 c0       	push   0xc002e3d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 e3 02 c0       	mov    eax,0xc002e3d8
c0000075:	2d d8 e3 02 c0       	sub    eax,0xc002e3d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 e3 02 c0       	push   0xc002e3d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea08,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f4 9a 02 c0       	mov    ebx,0xc0029af4
c00000bb:	81 eb f0 9a 02 c0    	sub    ebx,0xc0029af0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f0 9a 02 c0       	mov    esi,0xc0029af0
c00000ca:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 e3 02 c0       	push   0xc002e3d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea08,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 ea 02 c0       	push   0xc002ea10
c000012c:	68 d8 e3 02 c0       	push   0xc002e3d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 6d d5 01 00       	call   c001d910 <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 9e 22 01 00       	call   c0012659 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 4b d5 01 00       	call   c001d910 <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 f3 d9 01 00       	call   c001ddd7 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 51 e0 01 00       	call   c001e43e <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 50 ee 02 c0 	lgdtd  ds:0xc002ee50
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	fc                   	cld    
c00005dd:	e8 af 3f 01 00       	call   c0014591 <int_handler>
c00005e2:	81 c4 04 00 00 00    	add    esp,0x4
c00005e8:	0f a9                	pop    gs
c00005ea:	0f a1                	pop    fs
c00005ec:	07                   	pop    es
c00005ed:	1f                   	pop    ds
c00005ee:	61                   	popa   
c00005ef:	81 c4 08 00 00 00    	add    esp,0x8
c00005f5:	cf                   	iret   

c00005f6 <irq16>:
c00005f6:	fa                   	cli    
c00005f7:	6a 00                	push   0x0
c00005f9:	6a 30                	push   0x30
c00005fb:	e9 c4 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000600 <irq17>:
c0000600:	fa                   	cli    
c0000601:	6a 00                	push   0x0
c0000603:	6a 31                	push   0x31
c0000605:	e9 ba ff ff ff       	jmp    c00005c4 <int_common_stub>

c000060a <irq18>:
c000060a:	fa                   	cli    
c000060b:	6a 00                	push   0x0
c000060d:	6a 32                	push   0x32
c000060f:	e9 b0 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000614 <irq19>:
c0000614:	fa                   	cli    
c0000615:	6a 00                	push   0x0
c0000617:	6a 33                	push   0x33
c0000619:	e9 a6 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061e <irq20>:
c000061e:	fa                   	cli    
c000061f:	6a 00                	push   0x0
c0000621:	6a 34                	push   0x34
c0000623:	e9 9c ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000628 <irq21>:
c0000628:	fa                   	cli    
c0000629:	6a 00                	push   0x0
c000062b:	6a 35                	push   0x35
c000062d:	e9 92 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000632 <irq22>:
c0000632:	fa                   	cli    
c0000633:	6a 00                	push   0x0
c0000635:	6a 36                	push   0x36
c0000637:	e9 88 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063c <irq23>:
c000063c:	fa                   	cli    
c000063d:	6a 00                	push   0x0
c000063f:	6a 37                	push   0x37
c0000641:	e9 7e ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000646 <memcpy>:
c0000646:	e9 df de 00 00       	jmp    c000e52a <__not_memcpy>
c000064b:	90                   	nop

c000064c <memcmp>:
c000064c:	56                   	push   esi
c000064d:	53                   	push   ebx
c000064e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000652:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065a:	85 f6                	test   esi,esi
c000065c:	74 1d                	je     c000067b <memcmp+0x2f>
c000065e:	8a 08                	mov    cl,BYTE PTR [eax]
c0000660:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000663:	38 cb                	cmp    bl,cl
c0000665:	75 19                	jne    c0000680 <memcmp+0x34>
c0000667:	01 c6                	add    esi,eax
c0000669:	eb 0a                	jmp    c0000675 <memcmp+0x29>
c000066b:	90                   	nop
c000066c:	8a 08                	mov    cl,BYTE PTR [eax]
c000066e:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000671:	38 d9                	cmp    cl,bl
c0000673:	75 0b                	jne    c0000680 <memcmp+0x34>
c0000675:	40                   	inc    eax
c0000676:	42                   	inc    edx
c0000677:	39 f0                	cmp    eax,esi
c0000679:	75 f1                	jne    c000066c <memcmp+0x20>
c000067b:	31 c0                	xor    eax,eax
c000067d:	5b                   	pop    ebx
c000067e:	5e                   	pop    esi
c000067f:	c3                   	ret    
c0000680:	0f b6 c1             	movzx  eax,cl
c0000683:	29 d8                	sub    eax,ebx
c0000685:	5b                   	pop    ebx
c0000686:	5e                   	pop    esi
c0000687:	c3                   	ret    

c0000688 <memmove>:
c0000688:	55                   	push   ebp
c0000689:	57                   	push   edi
c000068a:	56                   	push   esi
c000068b:	53                   	push   ebx
c000068c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000690:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000694:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000698:	39 dd                	cmp    ebp,ebx
c000069a:	0f 83 80 00 00 00    	jae    c0000720 <memmove+0x98>
c00006a0:	85 d2                	test   edx,edx
c00006a2:	74 74                	je     c0000718 <memmove+0x90>
c00006a4:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006a7:	8d 75 04             	lea    esi,[ebp+0x4]
c00006aa:	39 cd                	cmp    ebp,ecx
c00006ac:	0f 93 c1             	setae  cl
c00006af:	39 f3                	cmp    ebx,esi
c00006b1:	0f 93 c0             	setae  al
c00006b4:	89 c6                	mov    esi,eax
c00006b6:	09 ce                	or     esi,ecx
c00006b8:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006bb:	89 f0                	mov    eax,esi
c00006bd:	83 f9 0c             	cmp    ecx,0xc
c00006c0:	0f 97 c1             	seta   cl
c00006c3:	84 c8                	test   al,cl
c00006c5:	74 75                	je     c000073c <memmove+0xb4>
c00006c7:	89 e9                	mov    ecx,ebp
c00006c9:	09 d9                	or     ecx,ebx
c00006cb:	83 e1 03             	and    ecx,0x3
c00006ce:	75 6c                	jne    c000073c <memmove+0xb4>
c00006d0:	89 d7                	mov    edi,edx
c00006d2:	89 d9                	mov    ecx,ebx
c00006d4:	83 e7 fc             	and    edi,0xfffffffc
c00006d7:	89 ee                	mov    esi,ebp
c00006d9:	01 df                	add    edi,ebx
c00006db:	90                   	nop
c00006dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006de:	83 c6 04             	add    esi,0x4
c00006e1:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006e4:	83 c1 04             	add    ecx,0x4
c00006e7:	39 f9                	cmp    ecx,edi
c00006e9:	75 f1                	jne    c00006dc <memmove+0x54>
c00006eb:	89 d1                	mov    ecx,edx
c00006ed:	89 d7                	mov    edi,edx
c00006ef:	83 e1 fc             	and    ecx,0xfffffffc
c00006f2:	29 cf                	sub    edi,ecx
c00006f4:	01 cb                	add    ebx,ecx
c00006f6:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006fa:	39 ca                	cmp    edx,ecx
c00006fc:	74 1a                	je     c0000718 <memmove+0x90>
c00006fe:	8a 03                	mov    al,BYTE PTR [ebx]
c0000700:	83 ff 01             	cmp    edi,0x1
c0000703:	88 06                	mov    BYTE PTR [esi],al
c0000705:	74 11                	je     c0000718 <memmove+0x90>
c0000707:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000070a:	83 ff 02             	cmp    edi,0x2
c000070d:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000710:	74 06                	je     c0000718 <memmove+0x90>
c0000712:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000715:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000718:	5b                   	pop    ebx
c0000719:	89 e8                	mov    eax,ebp
c000071b:	5e                   	pop    esi
c000071c:	5f                   	pop    edi
c000071d:	5d                   	pop    ebp
c000071e:	c3                   	ret    
c000071f:	90                   	nop
c0000720:	76 f6                	jbe    c0000718 <memmove+0x90>
c0000722:	85 d2                	test   edx,edx
c0000724:	74 f2                	je     c0000718 <memmove+0x90>
c0000726:	4b                   	dec    ebx
c0000727:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000072a:	66 90                	xchg   ax,ax
c000072c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000072f:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000732:	4a                   	dec    edx
c0000733:	75 f7                	jne    c000072c <memmove+0xa4>
c0000735:	5b                   	pop    ebx
c0000736:	89 e8                	mov    eax,ebp
c0000738:	5e                   	pop    esi
c0000739:	5f                   	pop    edi
c000073a:	5d                   	pop    ebp
c000073b:	c3                   	ret    
c000073c:	01 ea                	add    edx,ebp
c000073e:	89 e9                	mov    ecx,ebp
c0000740:	8a 03                	mov    al,BYTE PTR [ebx]
c0000742:	41                   	inc    ecx
c0000743:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000746:	43                   	inc    ebx
c0000747:	39 d1                	cmp    ecx,edx
c0000749:	75 f5                	jne    c0000740 <memmove+0xb8>
c000074b:	eb cb                	jmp    c0000718 <memmove+0x90>
c000074d:	8d 76 00             	lea    esi,[esi+0x0]

c0000750 <memset>:
c0000750:	57                   	push   edi
c0000751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000755:	85 c9                	test   ecx,ecx
c0000757:	74 0b                	je     c0000764 <memset+0x14>
c0000759:	fc                   	cld    
c000075a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000075e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000762:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000764:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000768:	5f                   	pop    edi
c0000769:	c3                   	ret    
c000076a:	66 90                	xchg   ax,ax

c000076c <strlen>:
c000076c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000770:	31 c0                	xor    eax,eax
c0000772:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000775:	74 09                	je     c0000780 <strlen+0x14>
c0000777:	90                   	nop
c0000778:	40                   	inc    eax
c0000779:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000077d:	75 f9                	jne    c0000778 <strlen+0xc>
c000077f:	c3                   	ret    
c0000780:	c3                   	ret    
c0000781:	8d 76 00             	lea    esi,[esi+0x0]

c0000784 <strpbrk>:
c0000784:	57                   	push   edi
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000078f:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000791:	84 db                	test   bl,bl
c0000793:	74 21                	je     c00007b6 <strpbrk+0x32>
c0000795:	8a 07                	mov    al,BYTE PTR [edi]
c0000797:	84 c0                	test   al,al
c0000799:	74 14                	je     c00007af <strpbrk+0x2b>
c000079b:	38 d8                	cmp    al,bl
c000079d:	74 19                	je     c00007b8 <strpbrk+0x34>
c000079f:	89 fa                	mov    edx,edi
c00007a1:	eb 05                	jmp    c00007a8 <strpbrk+0x24>
c00007a3:	90                   	nop
c00007a4:	38 d9                	cmp    cl,bl
c00007a6:	74 10                	je     c00007b8 <strpbrk+0x34>
c00007a8:	42                   	inc    edx
c00007a9:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007ab:	84 c9                	test   cl,cl
c00007ad:	75 f5                	jne    c00007a4 <strpbrk+0x20>
c00007af:	46                   	inc    esi
c00007b0:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b2:	84 db                	test   bl,bl
c00007b4:	75 e1                	jne    c0000797 <strpbrk+0x13>
c00007b6:	31 f6                	xor    esi,esi
c00007b8:	89 f0                	mov    eax,esi
c00007ba:	5b                   	pop    ebx
c00007bb:	5e                   	pop    esi
c00007bc:	5f                   	pop    edi
c00007bd:	c3                   	ret    
c00007be:	66 90                	xchg   ax,ax

c00007c0 <strtok>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	85 db                	test   ebx,ebx
c00007cc:	75 07                	jne    c00007d5 <strtok+0x15>
c00007ce:	eb 2c                	jmp    c00007fc <strtok+0x3c>
c00007d0:	43                   	inc    ebx
c00007d1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007d5:	56                   	push   esi
c00007d6:	53                   	push   ebx
c00007d7:	e8 a8 ff ff ff       	call   c0000784 <strpbrk>
c00007dc:	5a                   	pop    edx
c00007dd:	a3 28 ea 02 c0       	mov    ds:0xc002ea28,eax
c00007e2:	59                   	pop    ecx
c00007e3:	39 d8                	cmp    eax,ebx
c00007e5:	74 e9                	je     c00007d0 <strtok+0x10>
c00007e7:	85 c0                	test   eax,eax
c00007e9:	74 1b                	je     c0000806 <strtok+0x46>
c00007eb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007ee:	8d 50 01             	lea    edx,[eax+0x1]
c00007f1:	89 d8                	mov    eax,ebx
c00007f3:	89 15 28 ea 02 c0    	mov    DWORD PTR ds:0xc002ea28,edx
c00007f9:	5b                   	pop    ebx
c00007fa:	5e                   	pop    esi
c00007fb:	c3                   	ret    
c00007fc:	8b 1d 28 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea28
c0000802:	85 db                	test   ebx,ebx
c0000804:	75 cf                	jne    c00007d5 <strtok+0x15>
c0000806:	31 c0                	xor    eax,eax
c0000808:	5b                   	pop    ebx
c0000809:	5e                   	pop    esi
c000080a:	c3                   	ret    
c000080b:	90                   	nop

c000080c <strcpy>:
c000080c:	53                   	push   ebx
c000080d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000811:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000815:	89 c3                	mov    ebx,eax
c0000817:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000819:	84 d2                	test   dl,dl
c000081b:	74 0d                	je     c000082a <strcpy+0x1e>
c000081d:	8d 76 00             	lea    esi,[esi+0x0]
c0000820:	88 13                	mov    BYTE PTR [ebx],dl
c0000822:	41                   	inc    ecx
c0000823:	43                   	inc    ebx
c0000824:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000826:	84 d2                	test   dl,dl
c0000828:	75 f6                	jne    c0000820 <strcpy+0x14>
c000082a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000082d:	5b                   	pop    ebx
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncpy>:
c0000830:	55                   	push   ebp
c0000831:	57                   	push   edi
c0000832:	56                   	push   esi
c0000833:	53                   	push   ebx
c0000834:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000838:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000083c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000840:	85 c0                	test   eax,eax
c0000842:	74 39                	je     c000087d <strncpy+0x4d>
c0000844:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000846:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000849:	8d 55 01             	lea    edx,[ebp+0x1]
c000084c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000084f:	84 db                	test   bl,bl
c0000851:	74 31                	je     c0000884 <strncpy+0x54>
c0000853:	85 c9                	test   ecx,ecx
c0000855:	74 26                	je     c000087d <strncpy+0x4d>
c0000857:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000085a:	8d 48 fe             	lea    ecx,[eax-0x2]
c000085d:	8d 55 02             	lea    edx,[ebp+0x2]
c0000860:	8d 46 02             	lea    eax,[esi+0x2]
c0000863:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000866:	84 db                	test   bl,bl
c0000868:	75 0f                	jne    c0000879 <strncpy+0x49>
c000086a:	eb 18                	jmp    c0000884 <strncpy+0x54>
c000086c:	40                   	inc    eax
c000086d:	42                   	inc    edx
c000086e:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000871:	49                   	dec    ecx
c0000872:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000875:	84 db                	test   bl,bl
c0000877:	74 0b                	je     c0000884 <strncpy+0x54>
c0000879:	85 c9                	test   ecx,ecx
c000087b:	75 ef                	jne    c000086c <strncpy+0x3c>
c000087d:	5b                   	pop    ebx
c000087e:	89 e8                	mov    eax,ebp
c0000880:	5e                   	pop    esi
c0000881:	5f                   	pop    edi
c0000882:	5d                   	pop    ebp
c0000883:	c3                   	ret    
c0000884:	85 c9                	test   ecx,ecx
c0000886:	74 f5                	je     c000087d <strncpy+0x4d>
c0000888:	fc                   	cld    
c0000889:	31 c0                	xor    eax,eax
c000088b:	89 d7                	mov    edi,edx
c000088d:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000088f:	89 e8                	mov    eax,ebp
c0000891:	5b                   	pop    ebx
c0000892:	5e                   	pop    esi
c0000893:	5f                   	pop    edi
c0000894:	5d                   	pop    ebp
c0000895:	c3                   	ret    
c0000896:	66 90                	xchg   ax,ax

c0000898 <strcmp>:
c0000898:	56                   	push   esi
c0000899:	53                   	push   ebx
c000089a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000089e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008a2:	8a 16                	mov    dl,BYTE PTR [esi]
c00008a4:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008a7:	38 d1                	cmp    cl,dl
c00008a9:	75 1d                	jne    c00008c8 <strcmp+0x30>
c00008ab:	84 c9                	test   cl,cl
c00008ad:	74 21                	je     c00008d0 <strcmp+0x38>
c00008af:	b8 01 00 00 00       	mov    eax,0x1
c00008b4:	eb 07                	jmp    c00008bd <strcmp+0x25>
c00008b6:	66 90                	xchg   ax,ax
c00008b8:	40                   	inc    eax
c00008b9:	84 d2                	test   dl,dl
c00008bb:	74 13                	je     c00008d0 <strcmp+0x38>
c00008bd:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008c0:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008c4:	38 ca                	cmp    dl,cl
c00008c6:	74 f0                	je     c00008b8 <strcmp+0x20>
c00008c8:	0f b6 c2             	movzx  eax,dl
c00008cb:	5b                   	pop    ebx
c00008cc:	29 c8                	sub    eax,ecx
c00008ce:	5e                   	pop    esi
c00008cf:	c3                   	ret    
c00008d0:	31 c0                	xor    eax,eax
c00008d2:	5b                   	pop    ebx
c00008d3:	5e                   	pop    esi
c00008d4:	c3                   	ret    
c00008d5:	8d 76 00             	lea    esi,[esi+0x0]

c00008d8 <strchr>:
c00008d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008dc:	8a 10                	mov    dl,BYTE PTR [eax]
c00008de:	84 d2                	test   dl,dl
c00008e0:	74 15                	je     c00008f7 <strchr+0x1f>
c00008e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00008e6:	38 ca                	cmp    dl,cl
c00008e8:	75 06                	jne    c00008f0 <strchr+0x18>
c00008ea:	eb 0e                	jmp    c00008fa <strchr+0x22>
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 09                	je     c00008f9 <strchr+0x21>
c00008f0:	40                   	inc    eax
c00008f1:	8a 10                	mov    dl,BYTE PTR [eax]
c00008f3:	84 d2                	test   dl,dl
c00008f5:	75 f5                	jne    c00008ec <strchr+0x14>
c00008f7:	31 c0                	xor    eax,eax
c00008f9:	c3                   	ret    
c00008fa:	c3                   	ret    
c00008fb:	90                   	nop

c00008fc <strncmp>:
c00008fc:	57                   	push   edi
c00008fd:	56                   	push   esi
c00008fe:	53                   	push   ebx
c00008ff:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000903:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000907:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000090b:	85 ff                	test   edi,edi
c000090d:	74 28                	je     c0000937 <strncmp+0x3b>
c000090f:	8a 16                	mov    dl,BYTE PTR [esi]
c0000911:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000914:	38 d1                	cmp    cl,dl
c0000916:	75 28                	jne    c0000940 <strncmp+0x44>
c0000918:	8d 46 01             	lea    eax,[esi+0x1]
c000091b:	84 c9                	test   cl,cl
c000091d:	74 18                	je     c0000937 <strncmp+0x3b>
c000091f:	01 fe                	add    esi,edi
c0000921:	eb 0f                	jmp    c0000932 <strncmp+0x36>
c0000923:	90                   	nop
c0000924:	8a 10                	mov    dl,BYTE PTR [eax]
c0000926:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000929:	38 ca                	cmp    dl,cl
c000092b:	75 13                	jne    c0000940 <strncmp+0x44>
c000092d:	40                   	inc    eax
c000092e:	84 d2                	test   dl,dl
c0000930:	74 05                	je     c0000937 <strncmp+0x3b>
c0000932:	43                   	inc    ebx
c0000933:	39 c6                	cmp    esi,eax
c0000935:	75 ed                	jne    c0000924 <strncmp+0x28>
c0000937:	5b                   	pop    ebx
c0000938:	31 c0                	xor    eax,eax
c000093a:	5e                   	pop    esi
c000093b:	5f                   	pop    edi
c000093c:	c3                   	ret    
c000093d:	8d 76 00             	lea    esi,[esi+0x0]
c0000940:	5b                   	pop    ebx
c0000941:	0f b6 c2             	movzx  eax,dl
c0000944:	5e                   	pop    esi
c0000945:	29 c8                	sub    eax,ecx
c0000947:	5f                   	pop    edi
c0000948:	c3                   	ret    
c0000949:	8d 76 00             	lea    esi,[esi+0x0]

c000094c <strcat>:
c000094c:	56                   	push   esi
c000094d:	53                   	push   ebx
c000094e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000952:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000956:	89 c3                	mov    ebx,eax
c0000958:	eb 04                	jmp    c000095e <strcat+0x12>
c000095a:	66 90                	xchg   ax,ax
c000095c:	89 d3                	mov    ebx,edx
c000095e:	8d 53 01             	lea    edx,[ebx+0x1]
c0000961:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000965:	75 f5                	jne    c000095c <strcat+0x10>
c0000967:	31 d2                	xor    edx,edx
c0000969:	8d 76 00             	lea    esi,[esi+0x0]
c000096c:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000096f:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000972:	42                   	inc    edx
c0000973:	84 c9                	test   cl,cl
c0000975:	75 f5                	jne    c000096c <strcat+0x20>
c0000977:	5b                   	pop    ebx
c0000978:	5e                   	pop    esi
c0000979:	c3                   	ret    
c000097a:	66 90                	xchg   ax,ax

c000097c <strncat>:
c000097c:	56                   	push   esi
c000097d:	53                   	push   ebx
c000097e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000982:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000986:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000098a:	85 f6                	test   esi,esi
c000098c:	74 1e                	je     c00009ac <strncat+0x30>
c000098e:	89 c2                	mov    edx,eax
c0000990:	42                   	inc    edx
c0000991:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000995:	75 f9                	jne    c0000990 <strncat+0x14>
c0000997:	01 ce                	add    esi,ecx
c0000999:	eb 06                	jmp    c00009a1 <strncat+0x25>
c000099b:	90                   	nop
c000099c:	39 f1                	cmp    ecx,esi
c000099e:	74 10                	je     c00009b0 <strncat+0x34>
c00009a0:	42                   	inc    edx
c00009a1:	41                   	inc    ecx
c00009a2:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009a5:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009a8:	84 db                	test   bl,bl
c00009aa:	75 f0                	jne    c000099c <strncat+0x20>
c00009ac:	5b                   	pop    ebx
c00009ad:	5e                   	pop    esi
c00009ae:	c3                   	ret    
c00009af:	90                   	nop
c00009b0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009b3:	5b                   	pop    ebx
c00009b4:	5e                   	pop    esi
c00009b5:	c3                   	ret    
c00009b6:	66 90                	xchg   ax,ax

c00009b8 <strstr>:
c00009b8:	57                   	push   edi
c00009b9:	56                   	push   esi
c00009ba:	53                   	push   ebx
c00009bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009c3:	57                   	push   edi
c00009c4:	e8 a3 fd ff ff       	call   c000076c <strlen>
c00009c9:	59                   	pop    ecx
c00009ca:	85 c0                	test   eax,eax
c00009cc:	74 2a                	je     c00009f8 <strstr+0x40>
c00009ce:	89 c6                	mov    esi,eax
c00009d0:	eb 12                	jmp    c00009e4 <strstr+0x2c>
c00009d2:	66 90                	xchg   ax,ax
c00009d4:	56                   	push   esi
c00009d5:	57                   	push   edi
c00009d6:	53                   	push   ebx
c00009d7:	e8 70 fc ff ff       	call   c000064c <memcmp>
c00009dc:	83 c4 0c             	add    esp,0xc
c00009df:	85 c0                	test   eax,eax
c00009e1:	74 15                	je     c00009f8 <strstr+0x40>
c00009e3:	43                   	inc    ebx
c00009e4:	53                   	push   ebx
c00009e5:	e8 82 fd ff ff       	call   c000076c <strlen>
c00009ea:	5a                   	pop    edx
c00009eb:	39 f0                	cmp    eax,esi
c00009ed:	73 e5                	jae    c00009d4 <strstr+0x1c>
c00009ef:	5b                   	pop    ebx
c00009f0:	31 c0                	xor    eax,eax
c00009f2:	5e                   	pop    esi
c00009f3:	5f                   	pop    edi
c00009f4:	c3                   	ret    
c00009f5:	8d 76 00             	lea    esi,[esi+0x0]
c00009f8:	89 d8                	mov    eax,ebx
c00009fa:	5b                   	pop    ebx
c00009fb:	5e                   	pop    esi
c00009fc:	5f                   	pop    edi
c00009fd:	c3                   	ret    
c00009fe:	66 90                	xchg   ax,ax

c0000a00 <toupper>:
c0000a00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a04:	0f b6 d0             	movzx  edx,al
c0000a07:	f6 82 00 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd6500],0x2
c0000a0e:	74 03                	je     c0000a13 <toupper+0x13>
c0000a10:	83 e8 20             	sub    eax,0x20
c0000a13:	c3                   	ret    

c0000a14 <tolower>:
c0000a14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a18:	0f b6 d0             	movzx  edx,al
c0000a1b:	f6 82 00 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6500],0x1
c0000a22:	74 03                	je     c0000a27 <tolower+0x13>
c0000a24:	83 c0 20             	add    eax,0x20
c0000a27:	c3                   	ret    

c0000a28 <simple_strtoul>:
c0000a28:	55                   	push   ebp
c0000a29:	57                   	push   edi
c0000a2a:	56                   	push   esi
c0000a2b:	53                   	push   ebx
c0000a2c:	83 ec 08             	sub    esp,0x8
c0000a2f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a33:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a37:	90                   	nop
c0000a38:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a3b:	f6 82 00 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd6500],0x8
c0000a42:	75 05                	jne    c0000a49 <simple_strtoul+0x21>
c0000a44:	80 fa 09             	cmp    dl,0x9
c0000a47:	75 03                	jne    c0000a4c <simple_strtoul+0x24>
c0000a49:	41                   	inc    ecx
c0000a4a:	eb ec                	jmp    c0000a38 <simple_strtoul+0x10>
c0000a4c:	80 fa 2d             	cmp    dl,0x2d
c0000a4f:	0f 84 1b 01 00 00    	je     c0000b70 <simple_strtoul+0x148>
c0000a55:	80 fa 2b             	cmp    dl,0x2b
c0000a58:	0f 84 c2 00 00 00    	je     c0000b20 <simple_strtoul+0xf8>
c0000a5e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a66:	85 f6                	test   esi,esi
c0000a68:	0f 85 c3 00 00 00    	jne    c0000b31 <simple_strtoul+0x109>
c0000a6e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a70:	80 fa 30             	cmp    dl,0x30
c0000a73:	0f 84 47 01 00 00    	je     c0000bc0 <simple_strtoul+0x198>
c0000a79:	be 0a 00 00 00       	mov    esi,0xa
c0000a7e:	84 d2                	test   dl,dl
c0000a80:	0f 84 6f 01 00 00    	je     c0000bf5 <simple_strtoul+0x1cd>
c0000a86:	31 ed                	xor    ebp,ebp
c0000a88:	31 ff                	xor    edi,edi
c0000a8a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000a91:	eb 2b                	jmp    c0000abe <simple_strtoul+0x96>
c0000a93:	90                   	nop
c0000a94:	83 eb 30             	sub    ebx,0x30
c0000a97:	39 f3                	cmp    ebx,esi
c0000a99:	73 4d                	jae    c0000ae8 <simple_strtoul+0xc0>
c0000a9b:	31 d2                	xor    edx,edx
c0000a9d:	89 d8                	mov    eax,ebx
c0000a9f:	f7 d0                	not    eax
c0000aa1:	f7 f6                	div    esi
c0000aa3:	39 f8                	cmp    eax,edi
c0000aa5:	0f 82 b1 00 00 00    	jb     c0000b5c <simple_strtoul+0x134>
c0000aab:	0f af fe             	imul   edi,esi
c0000aae:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ab5:	01 df                	add    edi,ebx
c0000ab7:	41                   	inc    ecx
c0000ab8:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000aba:	84 d2                	test   dl,dl
c0000abc:	74 2a                	je     c0000ae8 <simple_strtoul+0xc0>
c0000abe:	0f b6 da             	movzx  ebx,dl
c0000ac1:	f6 83 00 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6500],0x4
c0000ac8:	75 ca                	jne    c0000a94 <simple_strtoul+0x6c>
c0000aca:	0f be d2             	movsx  edx,dl
c0000acd:	52                   	push   edx
c0000ace:	e8 2d ff ff ff       	call   c0000a00 <toupper>
c0000ad3:	5b                   	pop    ebx
c0000ad4:	0f b6 d0             	movzx  edx,al
c0000ad7:	f6 82 00 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd6500],0x1
c0000ade:	74 08                	je     c0000ae8 <simple_strtoul+0xc0>
c0000ae0:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000ae3:	39 f3                	cmp    ebx,esi
c0000ae5:	72 b4                	jb     c0000a9b <simple_strtoul+0x73>
c0000ae7:	90                   	nop
c0000ae8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aec:	85 c0                	test   eax,eax
c0000aee:	74 14                	je     c0000b04 <simple_strtoul+0xdc>
c0000af0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000af3:	09 f8                	or     eax,edi
c0000af5:	75 71                	jne    c0000b68 <simple_strtoul+0x140>
c0000af7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000afb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000aff:	31 ff                	xor    edi,edi
c0000b01:	89 30                	mov    DWORD PTR [eax],esi
c0000b03:	90                   	nop
c0000b04:	4d                   	dec    ebp
c0000b05:	75 05                	jne    c0000b0c <simple_strtoul+0xe4>
c0000b07:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b0c:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b11:	75 02                	jne    c0000b15 <simple_strtoul+0xed>
c0000b13:	f7 df                	neg    edi
c0000b15:	83 c4 08             	add    esp,0x8
c0000b18:	89 f8                	mov    eax,edi
c0000b1a:	5b                   	pop    ebx
c0000b1b:	5e                   	pop    esi
c0000b1c:	5f                   	pop    edi
c0000b1d:	5d                   	pop    ebp
c0000b1e:	c3                   	ret    
c0000b1f:	90                   	nop
c0000b20:	41                   	inc    ecx
c0000b21:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b29:	85 f6                	test   esi,esi
c0000b2b:	0f 84 3d ff ff ff    	je     c0000a6e <simple_strtoul+0x46>
c0000b31:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b34:	83 f8 22             	cmp    eax,0x22
c0000b37:	77 6a                	ja     c0000ba3 <simple_strtoul+0x17b>
c0000b39:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b3b:	83 fe 08             	cmp    esi,0x8
c0000b3e:	0f 84 a2 00 00 00    	je     c0000be6 <simple_strtoul+0x1be>
c0000b44:	83 fe 10             	cmp    esi,0x10
c0000b47:	0f 85 31 ff ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000b4d:	80 fa 30             	cmp    dl,0x30
c0000b50:	74 2c                	je     c0000b7e <simple_strtoul+0x156>
c0000b52:	be 10 00 00 00       	mov    esi,0x10
c0000b57:	e9 22 ff ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000b5c:	bd 01 00 00 00       	mov    ebp,0x1
c0000b61:	31 ff                	xor    edi,edi
c0000b63:	e9 4f ff ff ff       	jmp    c0000ab7 <simple_strtoul+0x8f>
c0000b68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b6c:	89 08                	mov    DWORD PTR [eax],ecx
c0000b6e:	eb 94                	jmp    c0000b04 <simple_strtoul+0xdc>
c0000b70:	41                   	inc    ecx
c0000b71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b79:	e9 e8 fe ff ff       	jmp    c0000a66 <simple_strtoul+0x3e>
c0000b7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b82:	88 04 24             	mov    BYTE PTR [esp],al
c0000b85:	50                   	push   eax
c0000b86:	e8 89 fe ff ff       	call   c0000a14 <tolower>
c0000b8b:	5e                   	pop    esi
c0000b8c:	83 f8 78             	cmp    eax,0x78
c0000b8f:	0f 84 84 00 00 00    	je     c0000c19 <simple_strtoul+0x1f1>
c0000b95:	41                   	inc    ecx
c0000b96:	be 10 00 00 00       	mov    esi,0x10
c0000b9b:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b9e:	e9 db fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000ba3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ba7:	85 ff                	test   edi,edi
c0000ba9:	74 5c                	je     c0000c07 <simple_strtoul+0x1df>
c0000bab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000baf:	85 c9                	test   ecx,ecx
c0000bb1:	75 4e                	jne    c0000c01 <simple_strtoul+0x1d9>
c0000bb3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bb9:	31 ff                	xor    edi,edi
c0000bbb:	e9 4c ff ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000bc0:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bc4:	88 04 24             	mov    BYTE PTR [esp],al
c0000bc7:	50                   	push   eax
c0000bc8:	e8 47 fe ff ff       	call   c0000a14 <tolower>
c0000bcd:	5d                   	pop    ebp
c0000bce:	83 f8 78             	cmp    eax,0x78
c0000bd1:	74 3b                	je     c0000c0e <simple_strtoul+0x1e6>
c0000bd3:	41                   	inc    ecx
c0000bd4:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bd7:	80 fa 30             	cmp    dl,0x30
c0000bda:	74 13                	je     c0000bef <simple_strtoul+0x1c7>
c0000bdc:	be 08 00 00 00       	mov    esi,0x8
c0000be1:	e9 98 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>
c0000be6:	80 fa 30             	cmp    dl,0x30
c0000be9:	0f 85 8f fe ff ff    	jne    c0000a7e <simple_strtoul+0x56>
c0000bef:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000bf2:	41                   	inc    ecx
c0000bf3:	eb e7                	jmp    c0000bdc <simple_strtoul+0x1b4>
c0000bf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bf9:	85 d2                	test   edx,edx
c0000bfb:	74 0a                	je     c0000c07 <simple_strtoul+0x1df>
c0000bfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c01:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c05:	89 30                	mov    DWORD PTR [eax],esi
c0000c07:	31 ff                	xor    edi,edi
c0000c09:	e9 fe fe ff ff       	jmp    c0000b0c <simple_strtoul+0xe4>
c0000c0e:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c11:	83 c1 02             	add    ecx,0x2
c0000c14:	e9 34 ff ff ff       	jmp    c0000b4d <simple_strtoul+0x125>
c0000c19:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c1c:	be 10 00 00 00       	mov    esi,0x10
c0000c21:	83 c1 02             	add    ecx,0x2
c0000c24:	e9 55 fe ff ff       	jmp    c0000a7e <simple_strtoul+0x56>

c0000c29 <largebin_index>:
c0000c29:	89 c2                	mov    edx,eax
c0000c2b:	c1 ea 08             	shr    edx,0x8
c0000c2e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c34:	77 10                	ja     c0000c46 <largebin_index+0x1d>
c0000c36:	0f bd d2             	bsr    edx,edx
c0000c39:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c3c:	d3 e8                	shr    eax,cl
c0000c3e:	83 e0 03             	and    eax,0x3
c0000c41:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c45:	c3                   	ret    
c0000c46:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c4b:	c3                   	ret    

c0000c4c <malloc_init_state>:
c0000c4c:	53                   	push   ebx
c0000c4d:	8d 50 34             	lea    edx,[eax+0x34]
c0000c50:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c56:	89 d1                	mov    ecx,edx
c0000c58:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c5b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c5e:	83 c2 08             	add    edx,0x8
c0000c61:	39 da                	cmp    edx,ebx
c0000c63:	75 f3                	jne    c0000c58 <malloc_init_state+0xc>
c0000c65:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c67:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c71:	83 e2 03             	and    edx,0x3
c0000c74:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c7e:	83 ca 48             	or     edx,0x48
c0000c81:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c8b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c95:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c9c:	89 10                	mov    DWORD PTR [eax],edx
c0000c9e:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ca1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cab:	5b                   	pop    ebx
c0000cac:	c3                   	ret    

c0000cad <malloc_consolidate>:
c0000cad:	8b 10                	mov    edx,DWORD PTR [eax]
c0000caf:	85 d2                	test   edx,edx
c0000cb1:	0f 84 d8 00 00 00    	je     c0000d8f <malloc_consolidate+0xe2>
c0000cb7:	55                   	push   ebp
c0000cb8:	83 e2 fd             	and    edx,0xfffffffd
c0000cbb:	57                   	push   edi
c0000cbc:	89 c5                	mov    ebp,eax
c0000cbe:	56                   	push   esi
c0000cbf:	8d 78 34             	lea    edi,[eax+0x34]
c0000cc2:	53                   	push   ebx
c0000cc3:	83 ec 10             	sub    esp,0x10
c0000cc6:	89 10                	mov    DWORD PTR [eax],edx
c0000cc8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ccc:	c1 ea 03             	shr    edx,0x3
c0000ccf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cd3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cd7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cda:	85 d2                	test   edx,edx
c0000cdc:	0f 84 98 00 00 00    	je     c0000d7a <malloc_consolidate+0xcd>
c0000ce2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ce9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cec:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cf3:	89 f9                	mov    ecx,edi
c0000cf5:	83 e1 fe             	and    ecx,0xfffffffe
c0000cf8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cfb:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cfe:	83 e3 fc             	and    ebx,0xfffffffc
c0000d01:	83 e7 01             	and    edi,0x1
c0000d04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d07:	75 14                	jne    c0000d1d <malloc_consolidate+0x70>
c0000d09:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d0b:	29 fa                	sub    edx,edi
c0000d0d:	01 f9                	add    ecx,edi
c0000d0f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d12:	89 fb                	mov    ebx,edi
c0000d14:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d17:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d1a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d1d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d20:	74 40                	je     c0000d62 <malloc_consolidate+0xb5>
c0000d22:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d25:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d28:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d2c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d2f:	83 e7 01             	and    edi,0x1
c0000d32:	75 0e                	jne    c0000d42 <malloc_consolidate+0x95>
c0000d34:	01 d9                	add    ecx,ebx
c0000d36:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d39:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d3c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d3f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d42:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d45:	89 ce                	mov    esi,ecx
c0000d47:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d4a:	83 ce 01             	or     esi,0x1
c0000d4d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d50:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d53:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d56:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d5a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d5d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d60:	eb 0c                	jmp    c0000d6e <malloc_consolidate+0xc1>
c0000d62:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d65:	83 c9 01             	or     ecx,0x1
c0000d68:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d6b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d72:	85 d2                	test   edx,edx
c0000d74:	0f 85 6f ff ff ff    	jne    c0000ce9 <malloc_consolidate+0x3c>
c0000d7a:	83 c5 04             	add    ebp,0x4
c0000d7d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d81:	0f 85 50 ff ff ff    	jne    c0000cd7 <malloc_consolidate+0x2a>
c0000d87:	83 c4 10             	add    esp,0x10
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	5d                   	pop    ebp
c0000d8e:	c3                   	ret    
c0000d8f:	e9 b8 fe ff ff       	jmp    c0000c4c <malloc_init_state>

c0000d94 <dlfree>:
c0000d94:	57                   	push   edi
c0000d95:	56                   	push   esi
c0000d96:	53                   	push   ebx
c0000d97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d9b:	85 db                	test   ebx,ebx
c0000d9d:	0f 84 e2 00 00 00    	je     c0000e85 <dlfree+0xf1>
c0000da3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000da6:	8b 0d 40 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea40
c0000dac:	89 f0                	mov    eax,esi
c0000dae:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000db1:	83 e0 fc             	and    eax,0xfffffffc
c0000db4:	39 c1                	cmp    ecx,eax
c0000db6:	72 24                	jb     c0000ddc <dlfree+0x48>
c0000db8:	83 c9 03             	or     ecx,0x3
c0000dbb:	c1 e8 03             	shr    eax,0x3
c0000dbe:	89 0d 40 ea 02 c0    	mov    DWORD PTR ds:0xc002ea40,ecx
c0000dc4:	83 e8 02             	sub    eax,0x2
c0000dc7:	8b 0c 85 44 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd15bc]
c0000dce:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dd0:	89 14 85 44 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd15bc],edx
c0000dd7:	e9 a9 00 00 00       	jmp    c0000e85 <dlfree+0xf1>
c0000ddc:	83 e6 02             	and    esi,0x2
c0000ddf:	0f 85 a0 00 00 00    	jne    c0000e85 <dlfree+0xf1>
c0000de5:	83 c9 01             	or     ecx,0x1
c0000de8:	8d 34 02             	lea    esi,[edx+eax*1]
c0000deb:	89 0d 40 ea 02 c0    	mov    DWORD PTR ds:0xc002ea40,ecx
c0000df1:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000df4:	83 e1 fc             	and    ecx,0xfffffffc
c0000df7:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dfb:	75 13                	jne    c0000e10 <dlfree+0x7c>
c0000dfd:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e00:	29 da                	sub    edx,ebx
c0000e02:	01 d8                	add    eax,ebx
c0000e04:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e07:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e0a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e0d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e10:	39 35 6c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea6c,esi
c0000e16:	74 40                	je     c0000e58 <dlfree+0xc4>
c0000e18:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e1c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e1f:	80 e3 01             	and    bl,0x1
c0000e22:	75 0e                	jne    c0000e32 <dlfree+0x9e>
c0000e24:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e27:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e2a:	01 c8                	add    eax,ecx
c0000e2c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e2f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e32:	8b 0d 7c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea7c
c0000e38:	c7 42 0c 74 ea 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ea74
c0000e3f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e42:	89 15 7c ea 02 c0    	mov    DWORD PTR ds:0xc002ea7c,edx
c0000e48:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e4b:	89 c1                	mov    ecx,eax
c0000e4d:	83 c9 01             	or     ecx,0x1
c0000e50:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e53:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e56:	eb 10                	jmp    c0000e68 <dlfree+0xd4>
c0000e58:	01 c8                	add    eax,ecx
c0000e5a:	89 c1                	mov    ecx,eax
c0000e5c:	83 c9 01             	or     ecx,0x1
c0000e5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e62:	89 15 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edx
c0000e68:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e6d:	76 16                	jbe    c0000e85 <dlfree+0xf1>
c0000e6f:	f6 05 40 ea 02 c0 02 	test   BYTE PTR ds:0xc002ea40,0x2
c0000e76:	74 0d                	je     c0000e85 <dlfree+0xf1>
c0000e78:	5b                   	pop    ebx
c0000e79:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0000e7e:	5e                   	pop    esi
c0000e7f:	5f                   	pop    edi
c0000e80:	e9 28 fe ff ff       	jmp    c0000cad <malloc_consolidate>
c0000e85:	5b                   	pop    ebx
c0000e86:	5e                   	pop    esi
c0000e87:	5f                   	pop    edi
c0000e88:	c3                   	ret    

c0000e89 <sYSMALLOc>:
c0000e89:	55                   	push   ebp
c0000e8a:	57                   	push   edi
c0000e8b:	56                   	push   esi
c0000e8c:	53                   	push   ebx
c0000e8d:	89 d3                	mov    ebx,edx
c0000e8f:	83 ec 2c             	sub    esp,0x2c
c0000e92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e96:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e9c:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e9f:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ea2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ea6:	74 1f                	je     c0000ec7 <sYSMALLOc+0x3e>
c0000ea8:	89 d8                	mov    eax,ebx
c0000eaa:	e8 fe fd ff ff       	call   c0000cad <malloc_consolidate>
c0000eaf:	83 ec 0c             	sub    esp,0xc
c0000eb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000eb6:	83 e8 07             	sub    eax,0x7
c0000eb9:	50                   	push   eax
c0000eba:	e8 30 02 00 00       	call   c00010ef <dlmalloc>
c0000ebf:	83 c4 10             	add    esp,0x10
c0000ec2:	e9 20 02 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000ec7:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000eca:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ed0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000ed3:	83 e0 fc             	and    eax,0xfffffffc
c0000ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eda:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ede:	83 c0 10             	add    eax,0x10
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000ee7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000eee:	74 04                	je     c0000ef4 <sYSMALLOc+0x6b>
c0000ef0:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ef4:	f7 da                	neg    edx
c0000ef6:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000efa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000efe:	21 d1                	and    ecx,edx
c0000f00:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f04:	7f 07                	jg     c0000f0d <sYSMALLOc+0x84>
c0000f06:	31 c0                	xor    eax,eax
c0000f08:	e9 da 01 00 00       	jmp    c00010e7 <sYSMALLOc+0x25e>
c0000f0d:	83 ec 0c             	sub    esp,0xc
c0000f10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f14:	e8 cf e7 00 00       	call   c000f6e8 <sbrk>
c0000f19:	83 c4 10             	add    esp,0x10
c0000f1c:	89 c6                	mov    esi,eax
c0000f1e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f21:	74 e3                	je     c0000f06 <sYSMALLOc+0x7d>
c0000f23:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f27:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f2b:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f2e:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f34:	39 f1                	cmp    ecx,esi
c0000f36:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f3c:	75 13                	jne    c0000f51 <sYSMALLOc+0xc8>
c0000f3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f42:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f46:	83 c8 01             	or     eax,0x1
c0000f49:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f4c:	e9 3e 01 00 00       	jmp    c000108f <sYSMALLOc+0x206>
c0000f51:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f57:	88 d0                	mov    al,dl
c0000f59:	83 e0 01             	and    eax,0x1
c0000f5c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f61:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f65:	0f 95 c0             	setne  al
c0000f68:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f6c:	39 f1                	cmp    ecx,esi
c0000f6e:	76 12                	jbe    c0000f82 <sYSMALLOc+0xf9>
c0000f70:	84 c0                	test   al,al
c0000f72:	74 0e                	je     c0000f82 <sYSMALLOc+0xf9>
c0000f74:	83 e2 fe             	and    edx,0xfffffffe
c0000f77:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f7d:	e9 83 00 00 00       	jmp    c0001005 <sYSMALLOc+0x17c>
c0000f82:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000f87:	74 7c                	je     c0001005 <sYSMALLOc+0x17c>
c0000f89:	84 c0                	test   al,al
c0000f8b:	74 0c                	je     c0000f99 <sYSMALLOc+0x110>
c0000f8d:	89 f0                	mov    eax,esi
c0000f8f:	29 c8                	sub    eax,ecx
c0000f91:	01 e8                	add    eax,ebp
c0000f93:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f99:	89 f2                	mov    edx,esi
c0000f9b:	83 e2 07             	and    edx,0x7
c0000f9e:	74 0c                	je     c0000fac <sYSMALLOc+0x123>
c0000fa0:	b8 08 00 00 00       	mov    eax,0x8
c0000fa5:	29 d0                	sub    eax,edx
c0000fa7:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000faa:	eb 04                	jmp    c0000fb0 <sYSMALLOc+0x127>
c0000fac:	89 f5                	mov    ebp,esi
c0000fae:	31 c0                	xor    eax,eax
c0000fb0:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fbc:	01 c1                	add    ecx,eax
c0000fbe:	83 ec 0c             	sub    esp,0xc
c0000fc1:	01 f1                	add    ecx,esi
c0000fc3:	01 ca                	add    edx,ecx
c0000fc5:	29 c8                	sub    eax,ecx
c0000fc7:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fcb:	01 c2                	add    edx,eax
c0000fcd:	52                   	push   edx
c0000fce:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fd2:	e8 11 e7 00 00       	call   c000f6e8 <sbrk>
c0000fd7:	83 c4 10             	add    esp,0x10
c0000fda:	83 f8 ff             	cmp    eax,0xffffffff
c0000fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe1:	75 0f                	jne    c0000ff2 <sYSMALLOc+0x169>
c0000fe3:	83 ec 0c             	sub    esp,0xc
c0000fe6:	6a 00                	push   0x0
c0000fe8:	e8 fb e6 00 00       	call   c000f6e8 <sbrk>
c0000fed:	83 c4 10             	add    esp,0x10
c0000ff0:	eb 30                	jmp    c0001022 <sYSMALLOc+0x199>
c0000ff2:	39 c6                	cmp    esi,eax
c0000ff4:	76 33                	jbe    c0001029 <sYSMALLOc+0x1a0>
c0000ff6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000ffa:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001001:	01 f0                	add    eax,esi
c0001003:	eb 1d                	jmp    c0001022 <sYSMALLOc+0x199>
c0001005:	83 ec 0c             	sub    esp,0xc
c0001008:	89 f5                	mov    ebp,esi
c000100a:	6a 00                	push   0x0
c000100c:	e8 d7 e6 00 00       	call   c000f6e8 <sbrk>
c0001011:	89 c2                	mov    edx,eax
c0001013:	29 f2                	sub    edx,esi
c0001015:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001019:	83 c4 10             	add    esp,0x10
c000101c:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001022:	31 d2                	xor    edx,edx
c0001024:	83 f8 ff             	cmp    eax,0xffffffff
c0001027:	74 66                	je     c000108f <sYSMALLOc+0x206>
c0001029:	29 e8                	sub    eax,ebp
c000102b:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000102e:	01 d0                	add    eax,edx
c0001030:	83 c8 01             	or     eax,0x1
c0001033:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001036:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001041:	74 4c                	je     c000108f <sYSMALLOc+0x206>
c0001043:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001047:	83 e8 0c             	sub    eax,0xc
c000104a:	83 e0 f8             	and    eax,0xfffffff8
c000104d:	89 c2                	mov    edx,eax
c000104f:	83 ca 01             	or     edx,0x1
c0001052:	83 f8 0f             	cmp    eax,0xf
c0001055:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001058:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001060:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001068:	76 25                	jbe    c000108f <sYSMALLOc+0x206>
c000106a:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001070:	83 ec 0c             	sub    esp,0xc
c0001073:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c000107d:	83 c7 08             	add    edi,0x8
c0001080:	57                   	push   edi
c0001081:	e8 0e fd ff ff       	call   c0000d94 <dlfree>
c0001086:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000108c:	83 c4 10             	add    esp,0x10
c000108f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001095:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000109b:	73 06                	jae    c00010a3 <sYSMALLOc+0x21a>
c000109d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010a3:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010a9:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010af:	73 06                	jae    c00010b7 <sYSMALLOc+0x22e>
c00010b1:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010b7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010ba:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010bd:	83 e2 fc             	and    edx,0xfffffffc
c00010c0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010c4:	0f 82 3c fe ff ff    	jb     c0000f06 <sYSMALLOc+0x7d>
c00010ca:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ce:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010d1:	29 fa                	sub    edx,edi
c00010d3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010d6:	83 ca 01             	or     edx,0x1
c00010d9:	89 fb                	mov    ebx,edi
c00010db:	83 c0 08             	add    eax,0x8
c00010de:	83 cb 01             	or     ebx,0x1
c00010e1:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010e4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010e7:	83 c4 2c             	add    esp,0x2c
c00010ea:	5b                   	pop    ebx
c00010eb:	5e                   	pop    esi
c00010ec:	5f                   	pop    edi
c00010ed:	5d                   	pop    ebp
c00010ee:	c3                   	ret    

c00010ef <dlmalloc>:
c00010ef:	55                   	push   ebp
c00010f0:	57                   	push   edi
c00010f1:	56                   	push   esi
c00010f2:	53                   	push   ebx
c00010f3:	83 ec 1c             	sub    esp,0x1c
c00010f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010fa:	83 f8 df             	cmp    eax,0xffffffdf
c00010fd:	0f 87 70 03 00 00    	ja     c0001473 <dlmalloc+0x384>
c0001103:	83 c0 0b             	add    eax,0xb
c0001106:	be 10 00 00 00       	mov    esi,0x10
c000110b:	83 f8 0f             	cmp    eax,0xf
c000110e:	76 05                	jbe    c0001115 <dlmalloc+0x26>
c0001110:	83 e0 f8             	and    eax,0xfffffff8
c0001113:	89 c6                	mov    esi,eax
c0001115:	8b 3d 40 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea40
c000111b:	f7 c7 01 00 00 00    	test   edi,0x1
c0001121:	75 17                	jne    c000113a <dlmalloc+0x4b>
c0001123:	85 ff                	test   edi,edi
c0001125:	0f 85 05 03 00 00    	jne    c0001430 <dlmalloc+0x341>
c000112b:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001130:	e8 78 fb ff ff       	call   c0000cad <malloc_consolidate>
c0001135:	e9 f6 02 00 00       	jmp    c0001430 <dlmalloc+0x341>
c000113a:	39 f7                	cmp    edi,esi
c000113c:	72 1f                	jb     c000115d <dlmalloc+0x6e>
c000113e:	89 f2                	mov    edx,esi
c0001140:	c1 ea 03             	shr    edx,0x3
c0001143:	83 ea 02             	sub    edx,0x2
c0001146:	8b 04 95 44 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15bc]
c000114d:	85 c0                	test   eax,eax
c000114f:	74 0c                	je     c000115d <dlmalloc+0x6e>
c0001151:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001154:	89 0c 95 44 ea 02 c0 	mov    DWORD PTR [edx*4-0x3ffd15bc],ecx
c000115b:	eb 30                	jmp    c000118d <dlmalloc+0x9e>
c000115d:	89 f0                	mov    eax,esi
c000115f:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001165:	77 2e                	ja     c0001195 <dlmalloc+0xa6>
c0001167:	c1 e8 03             	shr    eax,0x3
c000116a:	8d 14 c5 74 ea 02 c0 	lea    edx,[eax*8-0x3ffd158c]
c0001171:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001175:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001178:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c000117b:	39 c3                	cmp    ebx,eax
c000117d:	74 2e                	je     c00011ad <dlmalloc+0xbe>
c000117f:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001182:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001187:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000118a:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c000118d:	83 c0 08             	add    eax,0x8
c0001190:	e9 e0 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001195:	e8 8f fa ff ff       	call   c0000c29 <largebin_index>
c000119a:	83 e7 02             	and    edi,0x2
c000119d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011a1:	74 0a                	je     c00011ad <dlmalloc+0xbe>
c00011a3:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c00011a8:	e8 00 fb ff ff       	call   c0000cad <malloc_consolidate>
c00011ad:	8d 46 10             	lea    eax,[esi+0x10]
c00011b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011b4:	8b 1d 80 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea80
c00011ba:	81 fb 74 ea 02 c0    	cmp    ebx,0xc002ea74
c00011c0:	0f 84 13 01 00 00    	je     c00012d9 <dlmalloc+0x1ea>
c00011c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011c9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011cc:	83 e7 fc             	and    edi,0xfffffffc
c00011cf:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d5:	77 4c                	ja     c0001223 <dlmalloc+0x134>
c00011d7:	3d 74 ea 02 c0       	cmp    eax,0xc002ea74
c00011dc:	75 45                	jne    c0001223 <dlmalloc+0x134>
c00011de:	39 1d 70 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea70,ebx
c00011e4:	75 3d                	jne    c0001223 <dlmalloc+0x134>
c00011e6:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011ea:	73 37                	jae    c0001223 <dlmalloc+0x134>
c00011ec:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ef:	89 fa                	mov    edx,edi
c00011f1:	a3 7c ea 02 c0       	mov    ds:0xc002ea7c,eax
c00011f6:	a3 80 ea 02 c0       	mov    ds:0xc002ea80,eax
c00011fb:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c0001200:	29 f2                	sub    edx,esi
c0001202:	c7 40 08 74 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea74
c0001209:	c7 40 0c 74 ea 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ea74
c0001210:	83 ce 01             	or     esi,0x1
c0001213:	89 d1                	mov    ecx,edx
c0001215:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001218:	83 c9 01             	or     ecx,0x1
c000121b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000121e:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001221:	eb 15                	jmp    c0001238 <dlmalloc+0x149>
c0001223:	a3 80 ea 02 c0       	mov    ds:0xc002ea80,eax
c0001228:	39 fe                	cmp    esi,edi
c000122a:	c7 40 08 74 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea74
c0001231:	75 0d                	jne    c0001240 <dlmalloc+0x151>
c0001233:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001238:	8d 43 08             	lea    eax,[ebx+0x8]
c000123b:	e9 35 02 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001240:	89 f8                	mov    eax,edi
c0001242:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001248:	77 19                	ja     c0001263 <dlmalloc+0x174>
c000124a:	c1 e8 03             	shr    eax,0x3
c000124d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001250:	83 c2 0d             	add    edx,0xd
c0001253:	8d 2c 95 38 ea 02 c0 	lea    ebp,[edx*4-0x3ffd15c8]
c000125a:	8b 14 95 40 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15c0]
c0001261:	eb 46                	jmp    c00012a9 <dlmalloc+0x1ba>
c0001263:	e8 c1 f9 ff ff       	call   c0000c29 <largebin_index>
c0001268:	8d 14 00             	lea    edx,[eax+eax*1]
c000126b:	83 c2 0d             	add    edx,0xd
c000126e:	8d 0c 95 40 ea 02 c0 	lea    ecx,[edx*4-0x3ffd15c0]
c0001275:	8b 14 95 40 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15c0]
c000127c:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000127f:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001283:	89 d5                	mov    ebp,edx
c0001285:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001289:	74 1e                	je     c00012a9 <dlmalloc+0x1ba>
c000128b:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000128e:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001291:	77 12                	ja     c00012a5 <dlmalloc+0x1b6>
c0001293:	83 cf 01             	or     edi,0x1
c0001296:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001299:	76 05                	jbe    c00012a0 <dlmalloc+0x1b1>
c000129b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000129e:	eb f6                	jmp    c0001296 <dlmalloc+0x1a7>
c00012a0:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012a3:	eb 04                	jmp    c00012a9 <dlmalloc+0x1ba>
c00012a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012a9:	89 c7                	mov    edi,eax
c00012ab:	88 c1                	mov    cl,al
c00012ad:	c1 ff 05             	sar    edi,0x5
c00012b0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012b4:	bf 01 00 00 00       	mov    edi,0x1
c00012b9:	d3 e7                	shl    edi,cl
c00012bb:	89 f8                	mov    eax,edi
c00012bd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012c1:	09 04 bd 74 ed 02 c0 	or     DWORD PTR [edi*4-0x3ffd128c],eax
c00012c8:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012cb:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ce:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012d1:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012d4:	e9 db fe ff ff       	jmp    c00011b4 <dlmalloc+0xc5>
c00012d9:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012df:	76 78                	jbe    c0001359 <dlmalloc+0x26a>
c00012e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012e5:	8d 04 c5 74 ea 02 c0 	lea    eax,[eax*8-0x3ffd158c]
c00012ec:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ef:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012f2:	39 ca                	cmp    edx,ecx
c00012f4:	74 63                	je     c0001359 <dlmalloc+0x26a>
c00012f6:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012f9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012fc:	83 e3 fc             	and    ebx,0xfffffffc
c00012ff:	39 de                	cmp    esi,ebx
c0001301:	77 52                	ja     c0001355 <dlmalloc+0x266>
c0001303:	89 df                	mov    edi,ebx
c0001305:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001308:	29 f7                	sub    edi,esi
c000130a:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000130d:	01 d3                	add    ebx,edx
c000130f:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001312:	83 ff 0f             	cmp    edi,0xf
c0001315:	8d 42 08             	lea    eax,[edx+0x8]
c0001318:	77 09                	ja     c0001323 <dlmalloc+0x234>
c000131a:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000131e:	e9 52 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001323:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001326:	83 ce 01             	or     esi,0x1
c0001329:	89 0d 7c ea 02 c0    	mov    DWORD PTR ds:0xc002ea7c,ecx
c000132f:	89 0d 80 ea 02 c0    	mov    DWORD PTR ds:0xc002ea80,ecx
c0001335:	c7 41 08 74 ea 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ea74
c000133c:	c7 41 0c 74 ea 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ea74
c0001343:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001346:	89 fa                	mov    edx,edi
c0001348:	83 ca 01             	or     edx,0x1
c000134b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000134e:	89 3b                	mov    DWORD PTR [ebx],edi
c0001350:	e9 20 01 00 00       	jmp    c0001475 <dlmalloc+0x386>
c0001355:	89 c2                	mov    edx,eax
c0001357:	eb 99                	jmp    c00012f2 <dlmalloc+0x203>
c0001359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	41                   	inc    ecx
c0001363:	89 cb                	mov    ebx,ecx
c0001365:	8d 14 cd 6c ea 02 c0 	lea    edx,[ecx*8-0x3ffd1594]
c000136c:	c1 eb 05             	shr    ebx,0x5
c000136f:	d3 e0                	shl    eax,cl
c0001371:	8b 3c 9d 74 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd128c]
c0001378:	39 f8                	cmp    eax,edi
c000137a:	77 04                	ja     c0001380 <dlmalloc+0x291>
c000137c:	85 c0                	test   eax,eax
c000137e:	75 26                	jne    c00013a6 <dlmalloc+0x2b7>
c0001380:	43                   	inc    ebx
c0001381:	83 fb 02             	cmp    ebx,0x2
c0001384:	0f 87 a6 00 00 00    	ja     c0001430 <dlmalloc+0x341>
c000138a:	8b 3c 9d 74 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd128c]
c0001391:	85 ff                	test   edi,edi
c0001393:	74 eb                	je     c0001380 <dlmalloc+0x291>
c0001395:	89 d8                	mov    eax,ebx
c0001397:	c1 e0 06             	shl    eax,0x6
c000139a:	8d 14 85 6c ea 02 c0 	lea    edx,[eax*4-0x3ffd1594]
c00013a1:	b8 01 00 00 00       	mov    eax,0x1
c00013a6:	85 f8                	test   eax,edi
c00013a8:	75 07                	jne    c00013b1 <dlmalloc+0x2c2>
c00013aa:	83 c2 08             	add    edx,0x8
c00013ad:	01 c0                	add    eax,eax
c00013af:	eb f5                	jmp    c00013a6 <dlmalloc+0x2b7>
c00013b1:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013b4:	39 ca                	cmp    edx,ecx
c00013b6:	75 14                	jne    c00013cc <dlmalloc+0x2dd>
c00013b8:	89 c1                	mov    ecx,eax
c00013ba:	83 c2 08             	add    edx,0x8
c00013bd:	f7 d1                	not    ecx
c00013bf:	01 c0                	add    eax,eax
c00013c1:	21 cf                	and    edi,ecx
c00013c3:	89 3c 9d 74 ed 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd128c],edi
c00013ca:	eb ac                	jmp    c0001378 <dlmalloc+0x289>
c00013cc:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013cf:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013d2:	83 e0 fc             	and    eax,0xfffffffc
c00013d5:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013d8:	89 c3                	mov    ebx,eax
c00013da:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013dd:	29 f3                	sub    ebx,esi
c00013df:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013e2:	83 fb 0f             	cmp    ebx,0xf
c00013e5:	8d 41 08             	lea    eax,[ecx+0x8]
c00013e8:	77 09                	ja     c00013f3 <dlmalloc+0x304>
c00013ea:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013ee:	e9 82 00 00 00       	jmp    c0001475 <dlmalloc+0x386>
c00013f3:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013f6:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013fc:	89 3d 7c ea 02 c0    	mov    DWORD PTR ds:0xc002ea7c,edi
c0001402:	89 3d 80 ea 02 c0    	mov    DWORD PTR ds:0xc002ea80,edi
c0001408:	c7 47 08 74 ea 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ea74
c000140f:	c7 47 0c 74 ea 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ea74
c0001416:	77 06                	ja     c000141e <dlmalloc+0x32f>
c0001418:	89 3d 70 ea 02 c0    	mov    DWORD PTR ds:0xc002ea70,edi
c000141e:	83 ce 01             	or     esi,0x1
c0001421:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001424:	89 d9                	mov    ecx,ebx
c0001426:	83 c9 01             	or     ecx,0x1
c0001429:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000142c:	89 1a                	mov    DWORD PTR [edx],ebx
c000142e:	eb 45                	jmp    c0001475 <dlmalloc+0x386>
c0001430:	a1 6c ea 02 c0       	mov    eax,ds:0xc002ea6c
c0001435:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001438:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000143b:	83 e2 fc             	and    edx,0xfffffffc
c000143e:	39 d1                	cmp    ecx,edx
c0001440:	77 1e                	ja     c0001460 <dlmalloc+0x371>
c0001442:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001445:	89 f3                	mov    ebx,esi
c0001447:	89 0d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,ecx
c000144d:	83 cb 01             	or     ebx,0x1
c0001450:	29 f2                	sub    edx,esi
c0001452:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001455:	83 ca 01             	or     edx,0x1
c0001458:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000145b:	e9 2d fd ff ff       	jmp    c000118d <dlmalloc+0x9e>
c0001460:	83 c4 1c             	add    esp,0x1c
c0001463:	89 f0                	mov    eax,esi
c0001465:	5b                   	pop    ebx
c0001466:	ba 40 ea 02 c0       	mov    edx,0xc002ea40
c000146b:	5e                   	pop    esi
c000146c:	5f                   	pop    edi
c000146d:	5d                   	pop    ebp
c000146e:	e9 16 fa ff ff       	jmp    c0000e89 <sYSMALLOc>
c0001473:	31 c0                	xor    eax,eax
c0001475:	83 c4 1c             	add    esp,0x1c
c0001478:	5b                   	pop    ebx
c0001479:	5e                   	pop    esi
c000147a:	5f                   	pop    edi
c000147b:	5d                   	pop    ebp
c000147c:	c3                   	ret    

c000147d <iALLOc>:
c000147d:	55                   	push   ebp
c000147e:	89 c5                	mov    ebp,eax
c0001480:	57                   	push   edi
c0001481:	56                   	push   esi
c0001482:	53                   	push   ebx
c0001483:	83 ec 2c             	sub    esp,0x2c
c0001486:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000148a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000148e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001492:	83 3d 40 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea40,0x0
c0001499:	75 12                	jne    c00014ad <iALLOc+0x30>
c000149b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000149f:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c00014a4:	e8 04 f8 ff ff       	call   c0000cad <malloc_consolidate>
c00014a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014ad:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014b2:	74 12                	je     c00014c6 <iALLOc+0x49>
c00014b4:	85 ed                	test   ebp,ebp
c00014b6:	0f 84 64 01 00 00    	je     c0001620 <iALLOc+0x1a3>
c00014bc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014c4:	eb 33                	jmp    c00014f9 <iALLOc+0x7c>
c00014c6:	85 ed                	test   ebp,ebp
c00014c8:	75 14                	jne    c00014de <iALLOc+0x61>
c00014ca:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014d2:	83 c4 2c             	add    esp,0x2c
c00014d5:	5b                   	pop    ebx
c00014d6:	5e                   	pop    esi
c00014d7:	5f                   	pop    edi
c00014d8:	5d                   	pop    ebp
c00014d9:	e9 11 fc ff ff       	jmp    c00010ef <dlmalloc>
c00014de:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014e5:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014ed:	83 f8 0f             	cmp    eax,0xf
c00014f0:	76 07                	jbe    c00014f9 <iALLOc+0x7c>
c00014f2:	83 e0 f8             	and    eax,0xfffffff8
c00014f5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014fe:	75 09                	jne    c0001509 <iALLOc+0x8c>
c0001500:	89 d0                	mov    eax,edx
c0001502:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001505:	31 f6                	xor    esi,esi
c0001507:	eb 3b                	jmp    c0001544 <iALLOc+0xc7>
c0001509:	8b 02                	mov    eax,DWORD PTR [edx]
c000150b:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001513:	83 c0 0b             	add    eax,0xb
c0001516:	83 f8 0f             	cmp    eax,0xf
c0001519:	76 07                	jbe    c0001522 <iALLOc+0xa5>
c000151b:	83 e0 f8             	and    eax,0xfffffff8
c000151e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001522:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001526:	0f af f5             	imul   esi,ebp
c0001529:	eb 25                	jmp    c0001550 <iALLOc+0xd3>
c000152b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000152d:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001530:	bb 10 00 00 00       	mov    ebx,0x10
c0001535:	83 f9 0f             	cmp    ecx,0xf
c0001538:	76 05                	jbe    c000153f <iALLOc+0xc2>
c000153a:	83 e1 f8             	and    ecx,0xfffffff8
c000153d:	89 cb                	mov    ebx,ecx
c000153f:	01 de                	add    esi,ebx
c0001541:	83 c0 04             	add    eax,0x4
c0001544:	39 c7                	cmp    edi,eax
c0001546:	75 e3                	jne    c000152b <iALLOc+0xae>
c0001548:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001550:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001554:	8b 1d 94 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed94
c000155a:	83 ec 0c             	sub    esp,0xc
c000155d:	c7 05 94 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed94,0x0
c0001567:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000156b:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000156f:	50                   	push   eax
c0001570:	e8 7a fb ff ff       	call   c00010ef <dlmalloc>
c0001575:	83 c4 10             	add    esp,0x10
c0001578:	89 1d 94 ed 02 c0    	mov    DWORD PTR ds:0xc002ed94,ebx
c000157e:	85 c0                	test   eax,eax
c0001580:	0f 84 92 00 00 00    	je     c0001618 <iALLOc+0x19b>
c0001586:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001589:	8d 78 f8             	lea    edi,[eax-0x8]
c000158c:	83 e3 fc             	and    ebx,0xfffffffc
c000158f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001593:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001598:	74 1e                	je     c00015b8 <iALLOc+0x13b>
c000159a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000159e:	89 d9                	mov    ecx,ebx
c00015a0:	52                   	push   edx
c00015a1:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015a5:	83 e9 04             	sub    ecx,0x4
c00015a8:	51                   	push   ecx
c00015a9:	6a 00                	push   0x0
c00015ab:	50                   	push   eax
c00015ac:	e8 9f f1 ff ff       	call   c0000750 <memset>
c00015b1:	83 c4 10             	add    esp,0x10
c00015b4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015b8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015bd:	75 14                	jne    c00015d3 <iALLOc+0x156>
c00015bf:	8d 04 37             	lea    eax,[edi+esi*1]
c00015c2:	29 f3                	sub    ebx,esi
c00015c4:	8d 48 08             	lea    ecx,[eax+0x8]
c00015c7:	83 cb 01             	or     ebx,0x1
c00015ca:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015d1:	89 f3                	mov    ebx,esi
c00015d3:	31 c0                	xor    eax,eax
c00015d5:	4d                   	dec    ebp
c00015d6:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015dd:	39 c5                	cmp    ebp,eax
c00015df:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015e2:	74 2c                	je     c0001610 <iALLOc+0x193>
c00015e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015e8:	85 c9                	test   ecx,ecx
c00015ea:	75 15                	jne    c0001601 <iALLOc+0x184>
c00015ec:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ef:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015f2:	b9 10 00 00 00       	mov    ecx,0x10
c00015f7:	83 fe 0f             	cmp    esi,0xf
c00015fa:	76 05                	jbe    c0001601 <iALLOc+0x184>
c00015fc:	83 e6 f8             	and    esi,0xfffffff8
c00015ff:	89 f1                	mov    ecx,esi
c0001601:	89 ce                	mov    esi,ecx
c0001603:	29 cb                	sub    ebx,ecx
c0001605:	83 ce 01             	or     esi,0x1
c0001608:	40                   	inc    eax
c0001609:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000160c:	01 cf                	add    edi,ecx
c000160e:	eb c6                	jmp    c00015d6 <iALLOc+0x159>
c0001610:	83 cb 01             	or     ebx,0x1
c0001613:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001616:	eb 08                	jmp    c0001620 <iALLOc+0x1a3>
c0001618:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001620:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001624:	83 c4 2c             	add    esp,0x2c
c0001627:	5b                   	pop    ebx
c0001628:	5e                   	pop    esi
c0001629:	5f                   	pop    edi
c000162a:	5d                   	pop    ebp
c000162b:	c3                   	ret    

c000162c <dlrealloc>:
c000162c:	55                   	push   ebp
c000162d:	57                   	push   edi
c000162e:	56                   	push   esi
c000162f:	53                   	push   ebx
c0001630:	83 ec 1c             	sub    esp,0x1c
c0001633:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001637:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000163b:	85 db                	test   ebx,ebx
c000163d:	75 10                	jne    c000164f <dlrealloc+0x23>
c000163f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001643:	83 c4 1c             	add    esp,0x1c
c0001646:	5b                   	pop    ebx
c0001647:	5e                   	pop    esi
c0001648:	5f                   	pop    edi
c0001649:	5d                   	pop    ebp
c000164a:	e9 a0 fa ff ff       	jmp    c00010ef <dlmalloc>
c000164f:	83 f8 df             	cmp    eax,0xffffffdf
c0001652:	76 07                	jbe    c000165b <dlrealloc+0x2f>
c0001654:	31 db                	xor    ebx,ebx
c0001656:	e9 6a 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c000165b:	83 c0 0b             	add    eax,0xb
c000165e:	bd 10 00 00 00       	mov    ebp,0x10
c0001663:	83 f8 0f             	cmp    eax,0xf
c0001666:	76 05                	jbe    c000166d <dlrealloc+0x41>
c0001668:	83 e0 f8             	and    eax,0xfffffff8
c000166b:	89 c5                	mov    ebp,eax
c000166d:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001670:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001673:	89 c6                	mov    esi,eax
c0001675:	83 e6 fc             	and    esi,0xfffffffc
c0001678:	a8 02                	test   al,0x2
c000167a:	75 d8                	jne    c0001654 <dlrealloc+0x28>
c000167c:	39 f5                	cmp    ebp,esi
c000167e:	0f 86 04 01 00 00    	jbe    c0001788 <dlrealloc+0x15c>
c0001684:	8d 14 37             	lea    edx,[edi+esi*1]
c0001687:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000168a:	39 15 6c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea6c,edx
c0001690:	75 33                	jne    c00016c5 <dlrealloc+0x99>
c0001692:	83 e1 fc             	and    ecx,0xfffffffc
c0001695:	01 f1                	add    ecx,esi
c0001697:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000169b:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000169e:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016a2:	77 49                	ja     c00016ed <dlrealloc+0xc1>
c00016a4:	01 ef                	add    edi,ebp
c00016a6:	83 e0 01             	and    eax,0x1
c00016a9:	09 e8                	or     eax,ebp
c00016ab:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016ae:	89 3d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edi
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	29 e8                	sub    eax,ebp
c00016ba:	83 c8 01             	or     eax,0x1
c00016bd:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00016c0:	e9 00 01 00 00       	jmp    c00017c5 <dlrealloc+0x199>
c00016c5:	89 c8                	mov    eax,ecx
c00016c7:	83 e0 fe             	and    eax,0xfffffffe
c00016ca:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016cf:	75 1c                	jne    c00016ed <dlrealloc+0xc1>
c00016d1:	83 e1 fc             	and    ecx,0xfffffffc
c00016d4:	01 f1                	add    ecx,esi
c00016d6:	39 cd                	cmp    ebp,ecx
c00016d8:	77 13                	ja     c00016ed <dlrealloc+0xc1>
c00016da:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00016dd:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00016e0:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00016e3:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016e6:	89 ce                	mov    esi,ecx
c00016e8:	e9 9b 00 00 00       	jmp    c0001788 <dlrealloc+0x15c>
c00016ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016f1:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016f4:	83 ec 0c             	sub    esp,0xc
c00016f7:	50                   	push   eax
c00016f8:	e8 f2 f9 ff ff       	call   c00010ef <dlmalloc>
c00016fd:	83 c4 10             	add    esp,0x10
c0001700:	85 c0                	test   eax,eax
c0001702:	0f 84 4c ff ff ff    	je     c0001654 <dlrealloc+0x28>
c0001708:	8d 48 f8             	lea    ecx,[eax-0x8]
c000170b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000170f:	39 ca                	cmp    edx,ecx
c0001711:	75 0a                	jne    c000171d <dlrealloc+0xf1>
c0001713:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001716:	83 e0 fc             	and    eax,0xfffffffc
c0001719:	01 c6                	add    esi,eax
c000171b:	eb 6b                	jmp    c0001788 <dlrealloc+0x15c>
c000171d:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001720:	83 f9 27             	cmp    ecx,0x27
c0001723:	76 08                	jbe    c000172d <dlrealloc+0x101>
c0001725:	89 de                	mov    esi,ebx
c0001727:	89 c7                	mov    edi,eax
c0001729:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000172b:	eb 43                	jmp    c0001770 <dlrealloc+0x144>
c000172d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000172f:	83 f9 13             	cmp    ecx,0x13
c0001732:	89 10                	mov    DWORD PTR [eax],edx
c0001734:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001737:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000173a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000173d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001740:	76 2e                	jbe    c0001770 <dlrealloc+0x144>
c0001742:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001745:	83 f9 1b             	cmp    ecx,0x1b
c0001748:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000174b:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000174e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001751:	76 1d                	jbe    c0001770 <dlrealloc+0x144>
c0001753:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001756:	83 f9 23             	cmp    ecx,0x23
c0001759:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000175c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000175f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001762:	76 0c                	jbe    c0001770 <dlrealloc+0x144>
c0001764:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001767:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000176a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000176d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001770:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001774:	83 ec 0c             	sub    esp,0xc
c0001777:	53                   	push   ebx
c0001778:	e8 17 f6 ff ff       	call   c0000d94 <dlfree>
c000177d:	83 c4 10             	add    esp,0x10
c0001780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001784:	89 c3                	mov    ebx,eax
c0001786:	eb 3d                	jmp    c00017c5 <dlrealloc+0x199>
c0001788:	89 f2                	mov    edx,esi
c000178a:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c000178d:	29 ea                	sub    edx,ebp
c000178f:	83 e1 01             	and    ecx,0x1
c0001792:	8d 04 37             	lea    eax,[edi+esi*1]
c0001795:	83 fa 0f             	cmp    edx,0xf
c0001798:	77 0b                	ja     c00017a5 <dlrealloc+0x179>
c000179a:	09 ce                	or     esi,ecx
c000179c:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000179f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017a3:	eb 20                	jmp    c00017c5 <dlrealloc+0x199>
c00017a5:	01 ef                	add    edi,ebp
c00017a7:	83 ec 0c             	sub    esp,0xc
c00017aa:	09 cd                	or     ebp,ecx
c00017ac:	83 ca 01             	or     edx,0x1
c00017af:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00017b2:	83 c7 08             	add    edi,0x8
c00017b5:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00017b8:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017bc:	57                   	push   edi
c00017bd:	e8 d2 f5 ff ff       	call   c0000d94 <dlfree>
c00017c2:	83 c4 10             	add    esp,0x10
c00017c5:	83 c4 1c             	add    esp,0x1c
c00017c8:	89 d8                	mov    eax,ebx
c00017ca:	5b                   	pop    ebx
c00017cb:	5e                   	pop    esi
c00017cc:	5f                   	pop    edi
c00017cd:	5d                   	pop    ebp
c00017ce:	c3                   	ret    

c00017cf <dlmemalign>:
c00017cf:	55                   	push   ebp
c00017d0:	57                   	push   edi
c00017d1:	56                   	push   esi
c00017d2:	53                   	push   ebx
c00017d3:	83 ec 0c             	sub    esp,0xc
c00017d6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017de:	83 fa 08             	cmp    edx,0x8
c00017e1:	77 10                	ja     c00017f3 <dlmemalign+0x24>
c00017e3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017e7:	83 c4 0c             	add    esp,0xc
c00017ea:	5b                   	pop    ebx
c00017eb:	5e                   	pop    esi
c00017ec:	5f                   	pop    edi
c00017ed:	5d                   	pop    ebp
c00017ee:	e9 fc f8 ff ff       	jmp    c00010ef <dlmalloc>
c00017f3:	bf 10 00 00 00       	mov    edi,0x10
c00017f8:	83 fa 0f             	cmp    edx,0xf
c00017fb:	76 13                	jbe    c0001810 <dlmemalign+0x41>
c00017fd:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001800:	85 d1                	test   ecx,edx
c0001802:	75 04                	jne    c0001808 <dlmemalign+0x39>
c0001804:	89 d7                	mov    edi,edx
c0001806:	eb 08                	jmp    c0001810 <dlmemalign+0x41>
c0001808:	39 d7                	cmp    edi,edx
c000180a:	73 04                	jae    c0001810 <dlmemalign+0x41>
c000180c:	01 ff                	add    edi,edi
c000180e:	eb f8                	jmp    c0001808 <dlmemalign+0x39>
c0001810:	83 f8 df             	cmp    eax,0xffffffdf
c0001813:	76 07                	jbe    c000181c <dlmemalign+0x4d>
c0001815:	31 c0                	xor    eax,eax
c0001817:	e9 ce 00 00 00       	jmp    c00018ea <dlmemalign+0x11b>
c000181c:	83 c0 0b             	add    eax,0xb
c000181f:	bd 10 00 00 00       	mov    ebp,0x10
c0001824:	83 f8 0f             	cmp    eax,0xf
c0001827:	76 05                	jbe    c000182e <dlmemalign+0x5f>
c0001829:	83 e0 f8             	and    eax,0xfffffff8
c000182c:	89 c5                	mov    ebp,eax
c000182e:	83 ec 0c             	sub    esp,0xc
c0001831:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001835:	50                   	push   eax
c0001836:	e8 b4 f8 ff ff       	call   c00010ef <dlmalloc>
c000183b:	83 c4 10             	add    esp,0x10
c000183e:	89 c1                	mov    ecx,eax
c0001840:	85 c0                	test   eax,eax
c0001842:	74 d1                	je     c0001815 <dlmemalign+0x46>
c0001844:	31 d2                	xor    edx,edx
c0001846:	8d 70 f8             	lea    esi,[eax-0x8]
c0001849:	f7 f7                	div    edi
c000184b:	85 d2                	test   edx,edx
c000184d:	74 62                	je     c00018b1 <dlmemalign+0xe2>
c000184f:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001853:	89 f8                	mov    eax,edi
c0001855:	f7 d8                	neg    eax
c0001857:	21 c3                	and    ebx,eax
c0001859:	83 eb 08             	sub    ebx,0x8
c000185c:	89 d8                	mov    eax,ebx
c000185e:	29 f0                	sub    eax,esi
c0001860:	83 f8 0f             	cmp    eax,0xf
c0001863:	77 02                	ja     c0001867 <dlmemalign+0x98>
c0001865:	01 fb                	add    ebx,edi
c0001867:	89 d8                	mov    eax,ebx
c0001869:	29 f0                	sub    eax,esi
c000186b:	89 c6                	mov    esi,eax
c000186d:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001870:	89 c2                	mov    edx,eax
c0001872:	83 e2 fc             	and    edx,0xfffffffc
c0001875:	29 f2                	sub    edx,esi
c0001877:	a8 02                	test   al,0x2
c0001879:	74 10                	je     c000188b <dlmemalign+0xbc>
c000187b:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000187e:	83 ca 02             	or     edx,0x2
c0001881:	8d 43 08             	lea    eax,[ebx+0x8]
c0001884:	89 33                	mov    DWORD PTR [ebx],esi
c0001886:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001889:	eb 5f                	jmp    c00018ea <dlmemalign+0x11b>
c000188b:	83 ec 0c             	sub    esp,0xc
c000188e:	89 d0                	mov    eax,edx
c0001890:	83 c8 01             	or     eax,0x1
c0001893:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001896:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000189b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000189e:	83 e0 01             	and    eax,0x1
c00018a1:	09 f0                	or     eax,esi
c00018a3:	89 de                	mov    esi,ebx
c00018a5:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018a8:	51                   	push   ecx
c00018a9:	e8 e6 f4 ff ff       	call   c0000d94 <dlfree>
c00018ae:	83 c4 10             	add    esp,0x10
c00018b1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018b4:	a8 02                	test   al,0x2
c00018b6:	75 2f                	jne    c00018e7 <dlmemalign+0x118>
c00018b8:	83 e0 fc             	and    eax,0xfffffffc
c00018bb:	8d 55 10             	lea    edx,[ebp+0x10]
c00018be:	39 c2                	cmp    edx,eax
c00018c0:	73 25                	jae    c00018e7 <dlmemalign+0x118>
c00018c2:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	29 e8                	sub    eax,ebp
c00018ca:	83 c2 08             	add    edx,0x8
c00018cd:	83 c8 01             	or     eax,0x1
c00018d0:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018d3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018d6:	83 e0 01             	and    eax,0x1
c00018d9:	09 c5                	or     ebp,eax
c00018db:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018de:	52                   	push   edx
c00018df:	e8 b0 f4 ff ff       	call   c0000d94 <dlfree>
c00018e4:	83 c4 10             	add    esp,0x10
c00018e7:	8d 46 08             	lea    eax,[esi+0x8]
c00018ea:	83 c4 0c             	add    esp,0xc
c00018ed:	5b                   	pop    ebx
c00018ee:	5e                   	pop    esi
c00018ef:	5f                   	pop    edi
c00018f0:	5d                   	pop    ebp
c00018f1:	c3                   	ret    

c00018f2 <dlcalloc>:
c00018f2:	53                   	push   ebx
c00018f3:	83 ec 14             	sub    esp,0x14
c00018f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018fa:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018ff:	50                   	push   eax
c0001900:	e8 ea f7 ff ff       	call   c00010ef <dlmalloc>
c0001905:	83 c4 10             	add    esp,0x10
c0001908:	89 c3                	mov    ebx,eax
c000190a:	85 c0                	test   eax,eax
c000190c:	74 77                	je     c0001985 <dlcalloc+0x93>
c000190e:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001911:	89 d0                	mov    eax,edx
c0001913:	83 e0 fc             	and    eax,0xfffffffc
c0001916:	80 e2 02             	and    dl,0x2
c0001919:	75 5a                	jne    c0001975 <dlcalloc+0x83>
c000191b:	83 e8 04             	sub    eax,0x4
c000191e:	83 f8 27             	cmp    eax,0x27
c0001921:	76 03                	jbe    c0001926 <dlcalloc+0x34>
c0001923:	51                   	push   ecx
c0001924:	eb 53                	jmp    c0001979 <dlcalloc+0x87>
c0001926:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000192c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001933:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000193a:	83 f8 13             	cmp    eax,0x13
c000193d:	76 46                	jbe    c0001985 <dlcalloc+0x93>
c000193f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001946:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000194d:	83 f8 1b             	cmp    eax,0x1b
c0001950:	76 33                	jbe    c0001985 <dlcalloc+0x93>
c0001952:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001959:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001960:	83 f8 23             	cmp    eax,0x23
c0001963:	76 20                	jbe    c0001985 <dlcalloc+0x93>
c0001965:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000196c:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001973:	eb 10                	jmp    c0001985 <dlcalloc+0x93>
c0001975:	83 e8 08             	sub    eax,0x8
c0001978:	52                   	push   edx
c0001979:	50                   	push   eax
c000197a:	6a 00                	push   0x0
c000197c:	53                   	push   ebx
c000197d:	e8 ce ed ff ff       	call   c0000750 <memset>
c0001982:	83 c4 10             	add    esp,0x10
c0001985:	89 d8                	mov    eax,ebx
c0001987:	83 c4 08             	add    esp,0x8
c000198a:	5b                   	pop    ebx
c000198b:	c3                   	ret    

c000198c <dlcfree>:
c000198c:	e9 03 f4 ff ff       	jmp    c0000d94 <dlfree>

c0001991 <dlindependent_calloc>:
c0001991:	83 ec 28             	sub    esp,0x28
c0001994:	b9 03 00 00 00       	mov    ecx,0x3
c0001999:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000199d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019a1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019a5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019ad:	e8 cb fa ff ff       	call   c000147d <iALLOc>
c00019b2:	83 c4 2c             	add    esp,0x2c
c00019b5:	c3                   	ret    

c00019b6 <dlindependent_comalloc>:
c00019b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019be:	31 c9                	xor    ecx,ecx
c00019c0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019c8:	e9 b0 fa ff ff       	jmp    c000147d <iALLOc>

c00019cd <dlvalloc>:
c00019cd:	83 ec 0c             	sub    esp,0xc
c00019d0:	83 3d 40 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea40,0x0
c00019d7:	75 0a                	jne    c00019e3 <dlvalloc+0x16>
c00019d9:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c00019de:	e8 ca f2 ff ff       	call   c0000cad <malloc_consolidate>
c00019e3:	50                   	push   eax
c00019e4:	50                   	push   eax
c00019e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019e9:	ff 35 9c ed 02 c0    	push   DWORD PTR ds:0xc002ed9c
c00019ef:	e8 db fd ff ff       	call   c00017cf <dlmemalign>
c00019f4:	83 c4 1c             	add    esp,0x1c
c00019f7:	c3                   	ret    

c00019f8 <dlpvalloc>:
c00019f8:	83 ec 0c             	sub    esp,0xc
c00019fb:	83 3d 40 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea40,0x0
c0001a02:	75 0a                	jne    c0001a0e <dlpvalloc+0x16>
c0001a04:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001a09:	e8 9f f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a0e:	a1 9c ed 02 c0       	mov    eax,ds:0xc002ed9c
c0001a13:	89 c1                	mov    ecx,eax
c0001a15:	52                   	push   edx
c0001a16:	f7 d9                	neg    ecx
c0001a18:	52                   	push   edx
c0001a19:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a1d:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a21:	21 ca                	and    edx,ecx
c0001a23:	52                   	push   edx
c0001a24:	50                   	push   eax
c0001a25:	e8 a5 fd ff ff       	call   c00017cf <dlmemalign>
c0001a2a:	83 c4 1c             	add    esp,0x1c
c0001a2d:	c3                   	ret    

c0001a2e <dlmalloc_trim>:
c0001a2e:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001a33:	e8 75 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a38:	31 c0                	xor    eax,eax
c0001a3a:	c3                   	ret    

c0001a3b <dlmalloc_usable_size>:
c0001a3b:	53                   	push   ebx
c0001a3c:	31 c0                	xor    eax,eax
c0001a3e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a42:	85 c9                	test   ecx,ecx
c0001a44:	74 24                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a46:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a49:	f6 c2 02             	test   dl,0x2
c0001a4c:	74 08                	je     c0001a56 <dlmalloc_usable_size+0x1b>
c0001a4e:	83 e2 fc             	and    edx,0xfffffffc
c0001a51:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a54:	eb 14                	jmp    c0001a6a <dlmalloc_usable_size+0x2f>
c0001a56:	89 d3                	mov    ebx,edx
c0001a58:	31 c0                	xor    eax,eax
c0001a5a:	83 e3 fe             	and    ebx,0xfffffffe
c0001a5d:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a62:	74 06                	je     c0001a6a <dlmalloc_usable_size+0x2f>
c0001a64:	83 e2 fc             	and    edx,0xfffffffc
c0001a67:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a6a:	5b                   	pop    ebx
c0001a6b:	c3                   	ret    

c0001a6c <dlmallinfo>:
c0001a6c:	55                   	push   ebp
c0001a6d:	57                   	push   edi
c0001a6e:	56                   	push   esi
c0001a6f:	53                   	push   ebx
c0001a70:	83 ec 08             	sub    esp,0x8
c0001a73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a77:	83 3d 6c ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea6c,0x0
c0001a7e:	75 0a                	jne    c0001a8a <dlmallinfo+0x1e>
c0001a80:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001a85:	e8 23 f2 ff ff       	call   c0000cad <malloc_consolidate>
c0001a8a:	a1 6c ea 02 c0       	mov    eax,ds:0xc002ea6c
c0001a8f:	31 ed                	xor    ebp,ebp
c0001a91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a94:	31 c9                	xor    ecx,ecx
c0001a96:	83 e0 fc             	and    eax,0xfffffffc
c0001a99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a9d:	31 c0                	xor    eax,eax
c0001a9f:	8b 14 85 44 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd15bc]
c0001aa6:	85 d2                	test   edx,edx
c0001aa8:	74 0e                	je     c0001ab8 <dlmallinfo+0x4c>
c0001aaa:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001aad:	45                   	inc    ebp
c0001aae:	83 e6 fc             	and    esi,0xfffffffc
c0001ab1:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001ab4:	01 f1                	add    ecx,esi
c0001ab6:	eb ee                	jmp    c0001aa6 <dlmallinfo+0x3a>
c0001ab8:	40                   	inc    eax
c0001ab9:	83 f8 0a             	cmp    eax,0xa
c0001abc:	75 e1                	jne    c0001a9f <dlmallinfo+0x33>
c0001abe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ac2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ac9:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001acc:	b8 74 ea 02 c0       	mov    eax,0xc002ea74
c0001ad1:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001ad4:	39 f0                	cmp    eax,esi
c0001ad6:	74 10                	je     c0001ae8 <dlmallinfo+0x7c>
c0001ad8:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001adb:	ff 04 24             	inc    DWORD PTR [esp]
c0001ade:	83 e7 fc             	and    edi,0xfffffffc
c0001ae1:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001ae4:	01 fa                	add    edx,edi
c0001ae6:	eb ec                	jmp    c0001ad4 <dlmallinfo+0x68>
c0001ae8:	83 c0 08             	add    eax,0x8
c0001aeb:	3d 6c ed 02 c0       	cmp    eax,0xc002ed6c
c0001af0:	75 df                	jne    c0001ad1 <dlmallinfo+0x65>
c0001af2:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001af5:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001af8:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001afb:	a1 a8 ed 02 c0       	mov    eax,ds:0xc002eda8
c0001b00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b03:	89 03                	mov    DWORD PTR [ebx],eax
c0001b05:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b08:	8b 35 90 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed90
c0001b0e:	29 d0                	sub    eax,edx
c0001b10:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b13:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b16:	8b 35 a4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002eda4
c0001b1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b20:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b23:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b26:	8b 35 b4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edb4
c0001b2c:	89 d8                	mov    eax,ebx
c0001b2e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b31:	83 c4 08             	add    esp,0x8
c0001b34:	5b                   	pop    ebx
c0001b35:	5e                   	pop    esi
c0001b36:	5f                   	pop    edi
c0001b37:	5d                   	pop    ebp
c0001b38:	c2 04 00             	ret    0x4

c0001b3b <dlmalloc_stats>:
c0001b3b:	83 ec 30             	sub    esp,0x30
c0001b3e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b42:	50                   	push   eax
c0001b43:	e8 24 ff ff ff       	call   c0001a6c <dlmallinfo>
c0001b48:	83 c4 30             	add    esp,0x30
c0001b4b:	c3                   	ret    

c0001b4c <dlmallopt>:
c0001b4c:	56                   	push   esi
c0001b4d:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001b52:	53                   	push   ebx
c0001b53:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b57:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b5b:	e8 4d f1 ff ff       	call   c0000cad <malloc_consolidate>
c0001b60:	8d 46 04             	lea    eax,[esi+0x4]
c0001b63:	83 f8 05             	cmp    eax,0x5
c0001b66:	77 67                	ja     c0001bcf <dlmallopt+0x83>
c0001b68:	ff 24 85 04 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd63fc]
c0001b6f:	83 fb 50             	cmp    ebx,0x50
c0001b72:	77 5b                	ja     c0001bcf <dlmallopt+0x83>
c0001b74:	ba 08 00 00 00       	mov    edx,0x8
c0001b79:	85 db                	test   ebx,ebx
c0001b7b:	74 12                	je     c0001b8f <dlmallopt+0x43>
c0001b7d:	83 c3 0b             	add    ebx,0xb
c0001b80:	ba 10 00 00 00       	mov    edx,0x10
c0001b85:	83 fb 0f             	cmp    ebx,0xf
c0001b88:	76 05                	jbe    c0001b8f <dlmallopt+0x43>
c0001b8a:	89 da                	mov    edx,ebx
c0001b8c:	83 e2 f8             	and    edx,0xfffffff8
c0001b8f:	a1 40 ea 02 c0       	mov    eax,ds:0xc002ea40
c0001b94:	83 e0 03             	and    eax,0x3
c0001b97:	09 d0                	or     eax,edx
c0001b99:	a3 40 ea 02 c0       	mov    ds:0xc002ea40,eax
c0001b9e:	eb 31                	jmp    c0001bd1 <dlmallopt+0x85>
c0001ba0:	89 1d 84 ed 02 c0    	mov    DWORD PTR ds:0xc002ed84,ebx
c0001ba6:	eb 06                	jmp    c0001bae <dlmallopt+0x62>
c0001ba8:	89 1d 88 ed 02 c0    	mov    DWORD PTR ds:0xc002ed88,ebx
c0001bae:	be 01 00 00 00       	mov    esi,0x1
c0001bb3:	eb 1c                	jmp    c0001bd1 <dlmallopt+0x85>
c0001bb5:	89 1d 8c ed 02 c0    	mov    DWORD PTR ds:0xc002ed8c,ebx
c0001bbb:	eb f1                	jmp    c0001bae <dlmallopt+0x62>
c0001bbd:	31 f6                	xor    esi,esi
c0001bbf:	85 db                	test   ebx,ebx
c0001bc1:	75 0e                	jne    c0001bd1 <dlmallopt+0x85>
c0001bc3:	c7 05 94 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed94,0x0
c0001bcd:	eb df                	jmp    c0001bae <dlmallopt+0x62>
c0001bcf:	31 f6                	xor    esi,esi
c0001bd1:	89 f0                	mov    eax,esi
c0001bd3:	5b                   	pop    ebx
c0001bd4:	5e                   	pop    esi
c0001bd5:	c3                   	ret    

c0001bd6 <disk_status>:
c0001bd6:	31 c0                	xor    eax,eax
c0001bd8:	c3                   	ret    

c0001bd9 <disk_initialize>:
c0001bd9:	31 c0                	xor    eax,eax
c0001bdb:	c3                   	ret    

c0001bdc <disk_read>:
c0001bdc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001be1:	0f b6 04 85 00 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb00]
c0001be9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bed:	e9 9c f3 01 00       	jmp    c0020f8e <fatWrapperReadDisk>

c0001bf2 <disk_write>:
c0001bf2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bf7:	0f b6 04 85 00 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb00]
c0001bff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c03:	e9 cd f3 01 00       	jmp    c0020fd5 <fatWrapperWriteDisk>

c0001c08 <disk_ioctl>:
c0001c08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c11:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c16:	0f b6 04 85 00 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdb00]
c0001c1e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c22:	e9 f5 f3 01 00       	jmp    c002101c <fatWrapperIoctl>

c0001c27 <ld_word>:
c0001c27:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c2e:	c1 e2 08             	shl    edx,0x8
c0001c31:	09 d0                	or     eax,edx
c0001c33:	c3                   	ret    

c0001c34 <ld_dword>:
c0001c34:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c38:	89 d1                	mov    ecx,edx
c0001c3a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c3e:	c1 e1 08             	shl    ecx,0x8
c0001c41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c44:	09 ca                	or     edx,ecx
c0001c46:	c1 e2 08             	shl    edx,0x8
c0001c49:	09 d0                	or     eax,edx
c0001c4b:	c3                   	ret    

c0001c4c <ld_qword>:
c0001c4c:	57                   	push   edi
c0001c4d:	56                   	push   esi
c0001c4e:	53                   	push   ebx
c0001c4f:	31 db                	xor    ebx,ebx
c0001c51:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c54:	89 df                	mov    edi,ebx
c0001c56:	89 ce                	mov    esi,ecx
c0001c58:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c5c:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c60:	c1 e6 08             	shl    esi,0x8
c0001c63:	09 f2                	or     edx,esi
c0001c65:	89 d6                	mov    esi,edx
c0001c67:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c6b:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c6f:	c1 e6 08             	shl    esi,0x8
c0001c72:	09 f2                	or     edx,esi
c0001c74:	89 d6                	mov    esi,edx
c0001c76:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c7a:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c81:	c1 e6 08             	shl    esi,0x8
c0001c84:	89 fb                	mov    ebx,edi
c0001c86:	09 f2                	or     edx,esi
c0001c88:	89 d1                	mov    ecx,edx
c0001c8a:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001c8e:	c1 e1 08             	shl    ecx,0x8
c0001c91:	89 da                	mov    edx,ebx
c0001c93:	09 c8                	or     eax,ecx
c0001c95:	5b                   	pop    ebx
c0001c96:	5e                   	pop    esi
c0001c97:	5f                   	pop    edi
c0001c98:	c3                   	ret    

c0001c99 <st_word>:
c0001c99:	66 89 10             	mov    WORD PTR [eax],dx
c0001c9c:	c3                   	ret    

c0001c9d <st_dword>:
c0001c9d:	89 10                	mov    DWORD PTR [eax],edx
c0001c9f:	c3                   	ret    

c0001ca0 <st_qword>:
c0001ca0:	89 10                	mov    DWORD PTR [eax],edx
c0001ca2:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001ca5:	c3                   	ret    

c0001ca6 <mem_cpy>:
c0001ca6:	85 c9                	test   ecx,ecx
c0001ca8:	74 10                	je     c0001cba <mem_cpy+0x14>
c0001caa:	57                   	push   edi
c0001cab:	01 c1                	add    ecx,eax
c0001cad:	56                   	push   esi
c0001cae:	89 c7                	mov    edi,eax
c0001cb0:	89 d6                	mov    esi,edx
c0001cb2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cb3:	39 f9                	cmp    ecx,edi
c0001cb5:	75 fb                	jne    c0001cb2 <mem_cpy+0xc>
c0001cb7:	5e                   	pop    esi
c0001cb8:	5f                   	pop    edi
c0001cb9:	c3                   	ret    
c0001cba:	c3                   	ret    

c0001cbb <mem_set>:
c0001cbb:	01 c1                	add    ecx,eax
c0001cbd:	40                   	inc    eax
c0001cbe:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cc1:	39 c8                	cmp    eax,ecx
c0001cc3:	75 f8                	jne    c0001cbd <mem_set+0x2>
c0001cc5:	c3                   	ret    

c0001cc6 <mem_cmp>:
c0001cc6:	57                   	push   edi
c0001cc7:	56                   	push   esi
c0001cc8:	89 c6                	mov    esi,eax
c0001cca:	53                   	push   ebx
c0001ccb:	46                   	inc    esi
c0001ccc:	42                   	inc    edx
c0001ccd:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cd1:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cd5:	29 fb                	sub    ebx,edi
c0001cd7:	89 cf                	mov    edi,ecx
c0001cd9:	29 f7                	sub    edi,esi
c0001cdb:	01 c7                	add    edi,eax
c0001cdd:	74 04                	je     c0001ce3 <mem_cmp+0x1d>
c0001cdf:	85 db                	test   ebx,ebx
c0001ce1:	74 e8                	je     c0001ccb <mem_cmp+0x5>
c0001ce3:	89 d8                	mov    eax,ebx
c0001ce5:	5b                   	pop    ebx
c0001ce6:	5e                   	pop    esi
c0001ce7:	5f                   	pop    edi
c0001ce8:	c3                   	ret    

c0001ce9 <chk_chr>:
c0001ce9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001cec:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001cef:	74 07                	je     c0001cf8 <chk_chr+0xf>
c0001cf1:	39 d1                	cmp    ecx,edx
c0001cf3:	74 03                	je     c0001cf8 <chk_chr+0xf>
c0001cf5:	40                   	inc    eax
c0001cf6:	eb f1                	jmp    c0001ce9 <chk_chr>
c0001cf8:	89 c8                	mov    eax,ecx
c0001cfa:	c3                   	ret    

c0001cfb <dbc_1st>:
c0001cfb:	31 c0                	xor    eax,eax
c0001cfd:	c3                   	ret    

c0001cfe <dbc_2nd>:
c0001cfe:	31 c0                	xor    eax,eax
c0001d00:	c3                   	ret    

c0001d01 <tchar2uni>:
c0001d01:	57                   	push   edi
c0001d02:	89 c7                	mov    edi,eax
c0001d04:	56                   	push   esi
c0001d05:	53                   	push   ebx
c0001d06:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d08:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d0a:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d0d:	84 c9                	test   cl,cl
c0001d0f:	78 0a                	js     c0001d1b <tchar2uni+0x1a>
c0001d11:	0f b6 d1             	movzx  edx,cl
c0001d14:	89 f3                	mov    ebx,esi
c0001d16:	e9 9f 00 00 00       	jmp    c0001dba <tchar2uni+0xb9>
c0001d1b:	88 ca                	mov    dl,cl
c0001d1d:	83 e2 e0             	and    edx,0xffffffe0
c0001d20:	80 fa c0             	cmp    dl,0xc0
c0001d23:	75 0c                	jne    c0001d31 <tchar2uni+0x30>
c0001d25:	89 ca                	mov    edx,ecx
c0001d27:	b9 01 00 00 00       	mov    ecx,0x1
c0001d2c:	83 e2 1f             	and    edx,0x1f
c0001d2f:	eb 2e                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d31:	88 ca                	mov    dl,cl
c0001d33:	83 e2 f0             	and    edx,0xfffffff0
c0001d36:	80 fa e0             	cmp    dl,0xe0
c0001d39:	75 0c                	jne    c0001d47 <tchar2uni+0x46>
c0001d3b:	89 ca                	mov    edx,ecx
c0001d3d:	b9 02 00 00 00       	mov    ecx,0x2
c0001d42:	83 e2 0f             	and    edx,0xf
c0001d45:	eb 18                	jmp    c0001d5f <tchar2uni+0x5e>
c0001d47:	88 ca                	mov    dl,cl
c0001d49:	83 e2 f8             	and    edx,0xfffffff8
c0001d4c:	88 d0                	mov    al,dl
c0001d4e:	83 ca ff             	or     edx,0xffffffff
c0001d51:	3c f0                	cmp    al,0xf0
c0001d53:	75 6c                	jne    c0001dc1 <tchar2uni+0xc0>
c0001d55:	89 ca                	mov    edx,ecx
c0001d57:	b9 03 00 00 00       	mov    ecx,0x3
c0001d5c:	83 e2 07             	and    edx,0x7
c0001d5f:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d63:	46                   	inc    esi
c0001d64:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d67:	88 c8                	mov    al,cl
c0001d69:	83 e0 c0             	and    eax,0xffffffc0
c0001d6c:	3c 80                	cmp    al,0x80
c0001d6e:	75 4e                	jne    c0001dbe <tchar2uni+0xbd>
c0001d70:	c1 e2 06             	shl    edx,0x6
c0001d73:	83 e1 3f             	and    ecx,0x3f
c0001d76:	09 ca                	or     edx,ecx
c0001d78:	39 de                	cmp    esi,ebx
c0001d7a:	75 e7                	jne    c0001d63 <tchar2uni+0x62>
c0001d7c:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d7f:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001d85:	77 37                	ja     c0001dbe <tchar2uni+0xbd>
c0001d87:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001d8d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d93:	76 29                	jbe    c0001dbe <tchar2uni+0xbd>
c0001d95:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001d9b:	76 1d                	jbe    c0001dba <tchar2uni+0xb9>
c0001d9d:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001da3:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001da9:	c1 e1 06             	shl    ecx,0x6
c0001dac:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001db2:	09 ca                	or     edx,ecx
c0001db4:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dba:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dbc:	eb 03                	jmp    c0001dc1 <tchar2uni+0xc0>
c0001dbe:	83 ca ff             	or     edx,0xffffffff
c0001dc1:	5b                   	pop    ebx
c0001dc2:	89 d0                	mov    eax,edx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	c3                   	ret    

c0001dc7 <put_utf>:
c0001dc7:	53                   	push   ebx
c0001dc8:	83 f8 7f             	cmp    eax,0x7f
c0001dcb:	89 c3                	mov    ebx,eax
c0001dcd:	b0 00                	mov    al,0x0
c0001dcf:	77 11                	ja     c0001de2 <put_utf+0x1b>
c0001dd1:	85 c9                	test   ecx,ecx
c0001dd3:	0f 84 e5 00 00 00    	je     c0001ebe <put_utf+0xf7>
c0001dd9:	88 1a                	mov    BYTE PTR [edx],bl
c0001ddb:	b0 01                	mov    al,0x1
c0001ddd:	e9 dc 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001de2:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001de8:	77 23                	ja     c0001e0d <put_utf+0x46>
c0001dea:	83 f9 01             	cmp    ecx,0x1
c0001ded:	0f 86 cb 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001df3:	89 d8                	mov    eax,ebx
c0001df5:	83 e3 3f             	and    ebx,0x3f
c0001df8:	c1 e8 06             	shr    eax,0x6
c0001dfb:	83 cb 80             	or     ebx,0xffffff80
c0001dfe:	83 c8 c0             	or     eax,0xffffffc0
c0001e01:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e04:	88 02                	mov    BYTE PTR [edx],al
c0001e06:	b0 02                	mov    al,0x2
c0001e08:	e9 b1 00 00 00       	jmp    c0001ebe <put_utf+0xf7>
c0001e0d:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e13:	77 40                	ja     c0001e55 <put_utf+0x8e>
c0001e15:	83 f9 02             	cmp    ecx,0x2
c0001e18:	0f 86 a0 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e1e:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e24:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e2a:	0f 86 8e 00 00 00    	jbe    c0001ebe <put_utf+0xf7>
c0001e30:	89 d8                	mov    eax,ebx
c0001e32:	c1 e8 0c             	shr    eax,0xc
c0001e35:	83 c8 e0             	or     eax,0xffffffe0
c0001e38:	88 02                	mov    BYTE PTR [edx],al
c0001e3a:	89 d8                	mov    eax,ebx
c0001e3c:	83 e3 3f             	and    ebx,0x3f
c0001e3f:	c1 e8 06             	shr    eax,0x6
c0001e42:	83 cb 80             	or     ebx,0xffffff80
c0001e45:	83 e0 3f             	and    eax,0x3f
c0001e48:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e4b:	83 c8 80             	or     eax,0xffffff80
c0001e4e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e51:	b0 03                	mov    al,0x3
c0001e53:	eb 69                	jmp    c0001ebe <put_utf+0xf7>
c0001e55:	83 f9 03             	cmp    ecx,0x3
c0001e58:	76 64                	jbe    c0001ebe <put_utf+0xf7>
c0001e5a:	89 d9                	mov    ecx,ebx
c0001e5c:	0f b7 c3             	movzx  eax,bx
c0001e5f:	66 31 c9             	xor    cx,cx
c0001e62:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e68:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e6e:	c1 e9 06             	shr    ecx,0x6
c0001e71:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e77:	77 43                	ja     c0001ebc <put_utf+0xf5>
c0001e79:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e7f:	77 3b                	ja     c0001ebc <put_utf+0xf5>
c0001e81:	09 cb                	or     ebx,ecx
c0001e83:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001e89:	89 d8                	mov    eax,ebx
c0001e8b:	c1 e8 12             	shr    eax,0x12
c0001e8e:	83 c8 f0             	or     eax,0xfffffff0
c0001e91:	88 02                	mov    BYTE PTR [edx],al
c0001e93:	89 d8                	mov    eax,ebx
c0001e95:	c1 e8 0c             	shr    eax,0xc
c0001e98:	83 e0 3f             	and    eax,0x3f
c0001e9b:	83 c8 80             	or     eax,0xffffff80
c0001e9e:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ea1:	89 d8                	mov    eax,ebx
c0001ea3:	83 e3 3f             	and    ebx,0x3f
c0001ea6:	c1 e8 06             	shr    eax,0x6
c0001ea9:	83 cb 80             	or     ebx,0xffffff80
c0001eac:	83 e0 3f             	and    eax,0x3f
c0001eaf:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eb2:	83 c8 80             	or     eax,0xffffff80
c0001eb5:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001eb8:	b0 04                	mov    al,0x4
c0001eba:	eb 02                	jmp    c0001ebe <put_utf+0xf7>
c0001ebc:	31 c0                	xor    eax,eax
c0001ebe:	5b                   	pop    ebx
c0001ebf:	c3                   	ret    

c0001ec0 <clst2sect>:
c0001ec0:	89 c1                	mov    ecx,eax
c0001ec2:	83 ea 02             	sub    edx,0x2
c0001ec5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ec8:	83 e8 02             	sub    eax,0x2
c0001ecb:	39 d0                	cmp    eax,edx
c0001ecd:	76 0d                	jbe    c0001edc <clst2sect+0x1c>
c0001ecf:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001ed3:	f7 e2                	mul    edx
c0001ed5:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ed8:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001edb:	c3                   	ret    
c0001edc:	31 c0                	xor    eax,eax
c0001ede:	31 d2                	xor    edx,edx
c0001ee0:	c3                   	ret    

c0001ee1 <clmt_clust>:
c0001ee1:	57                   	push   edi
c0001ee2:	89 cf                	mov    edi,ecx
c0001ee4:	56                   	push   esi
c0001ee5:	89 d6                	mov    esi,edx
c0001ee7:	53                   	push   ebx
c0001ee8:	0f ac fe 09          	shrd   esi,edi,0x9
c0001eec:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001eef:	89 f2                	mov    edx,esi
c0001ef1:	8b 00                	mov    eax,DWORD PTR [eax]
c0001ef3:	c1 ef 09             	shr    edi,0x9
c0001ef6:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001efa:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001efd:	89 f9                	mov    ecx,edi
c0001eff:	31 ff                	xor    edi,edi
c0001f01:	57                   	push   edi
c0001f02:	56                   	push   esi
c0001f03:	51                   	push   ecx
c0001f04:	52                   	push   edx
c0001f05:	e8 9a 52 02 00       	call   c00271a4 <__udivdi3>
c0001f0a:	83 c4 10             	add    esp,0x10
c0001f0d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f0f:	85 d2                	test   edx,edx
c0001f11:	74 10                	je     c0001f23 <clmt_clust+0x42>
c0001f13:	39 d0                	cmp    eax,edx
c0001f15:	72 07                	jb     c0001f1e <clmt_clust+0x3d>
c0001f17:	29 d0                	sub    eax,edx
c0001f19:	83 c3 08             	add    ebx,0x8
c0001f1c:	eb ef                	jmp    c0001f0d <clmt_clust+0x2c>
c0001f1e:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f21:	89 c2                	mov    edx,eax
c0001f23:	5b                   	pop    ebx
c0001f24:	89 d0                	mov    eax,edx
c0001f26:	5e                   	pop    esi
c0001f27:	5f                   	pop    edi
c0001f28:	c3                   	ret    

c0001f29 <pick_lfn>:
c0001f29:	55                   	push   ebp
c0001f2a:	57                   	push   edi
c0001f2b:	56                   	push   esi
c0001f2c:	89 d6                	mov    esi,edx
c0001f2e:	53                   	push   ebx
c0001f2f:	89 c3                	mov    ebx,eax
c0001f31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f34:	e8 ee fc ff ff       	call   c0001c27 <ld_word>
c0001f39:	66 85 c0             	test   ax,ax
c0001f3c:	74 04                	je     c0001f42 <pick_lfn+0x19>
c0001f3e:	31 c0                	xor    eax,eax
c0001f40:	eb 5c                	jmp    c0001f9e <pick_lfn+0x75>
c0001f42:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f45:	bd 01 00 00 00       	mov    ebp,0x1
c0001f4a:	83 e1 bf             	and    ecx,0xffffffbf
c0001f4d:	31 ff                	xor    edi,edi
c0001f4f:	49                   	dec    ecx
c0001f50:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f53:	0f b6 87 20 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd62e0]
c0001f5a:	01 f0                	add    eax,esi
c0001f5c:	e8 c6 fc ff ff       	call   c0001c27 <ld_word>
c0001f61:	66 85 ed             	test   bp,bp
c0001f64:	74 11                	je     c0001f77 <pick_lfn+0x4e>
c0001f66:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f6c:	77 d0                	ja     c0001f3e <pick_lfn+0x15>
c0001f6e:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f72:	89 c5                	mov    ebp,eax
c0001f74:	41                   	inc    ecx
c0001f75:	eb 04                	jmp    c0001f7b <pick_lfn+0x52>
c0001f77:	66 40                	inc    ax
c0001f79:	75 c3                	jne    c0001f3e <pick_lfn+0x15>
c0001f7b:	47                   	inc    edi
c0001f7c:	83 ff 0d             	cmp    edi,0xd
c0001f7f:	75 d2                	jne    c0001f53 <pick_lfn+0x2a>
c0001f81:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f84:	74 13                	je     c0001f99 <pick_lfn+0x70>
c0001f86:	66 85 ed             	test   bp,bp
c0001f89:	74 0e                	je     c0001f99 <pick_lfn+0x70>
c0001f8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f91:	77 ab                	ja     c0001f3e <pick_lfn+0x15>
c0001f93:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001f99:	b8 01 00 00 00       	mov    eax,0x1
c0001f9e:	5b                   	pop    ebx
c0001f9f:	5e                   	pop    esi
c0001fa0:	5f                   	pop    edi
c0001fa1:	5d                   	pop    ebp
c0001fa2:	c3                   	ret    

c0001fa3 <put_lfn>:
c0001fa3:	55                   	push   ebp
c0001fa4:	31 ed                	xor    ebp,ebp
c0001fa6:	57                   	push   edi
c0001fa7:	89 d7                	mov    edi,edx
c0001fa9:	56                   	push   esi
c0001faa:	31 f6                	xor    esi,esi
c0001fac:	53                   	push   ebx
c0001fad:	83 ec 08             	sub    esp,0x8
c0001fb0:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fb3:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fb7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fbb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fc1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fc4:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fc7:	31 d2                	xor    edx,edx
c0001fc9:	e8 cb fc ff ff       	call   c0001c99 <st_word>
c0001fce:	0f b6 d9             	movzx  ebx,cl
c0001fd1:	4b                   	dec    ebx
c0001fd2:	6b db 0d             	imul   ebx,ebx,0xd
c0001fd5:	66 83 fe ff          	cmp    si,0xffff
c0001fd9:	74 08                	je     c0001fe3 <put_lfn+0x40>
c0001fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001fde:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001fe2:	43                   	inc    ebx
c0001fe3:	0f b6 85 20 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd62e0]
c0001fea:	0f b7 d6             	movzx  edx,si
c0001fed:	01 f8                	add    eax,edi
c0001fef:	e8 a5 fc ff ff       	call   c0001c99 <st_word>
c0001ff4:	66 85 f6             	test   si,si
c0001ff7:	75 03                	jne    c0001ffc <put_lfn+0x59>
c0001ff9:	83 ce ff             	or     esi,0xffffffff
c0001ffc:	45                   	inc    ebp
c0001ffd:	83 fd 0d             	cmp    ebp,0xd
c0002000:	75 d3                	jne    c0001fd5 <put_lfn+0x32>
c0002002:	66 46                	inc    si
c0002004:	74 0a                	je     c0002010 <put_lfn+0x6d>
c0002006:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002009:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000200e:	75 09                	jne    c0002019 <put_lfn+0x76>
c0002010:	88 c8                	mov    al,cl
c0002012:	83 c8 40             	or     eax,0x40
c0002015:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002019:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000201d:	88 07                	mov    BYTE PTR [edi],al
c000201f:	83 c4 08             	add    esp,0x8
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <gen_numname>:
c0002027:	57                   	push   edi
c0002028:	89 cf                	mov    edi,ecx
c000202a:	56                   	push   esi
c000202b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002030:	53                   	push   ebx
c0002031:	89 c6                	mov    esi,eax
c0002033:	83 ec 10             	sub    esp,0x10
c0002036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000203a:	e8 67 fc ff ff       	call   c0001ca6 <mem_cpy>
c000203f:	83 fb 05             	cmp    ebx,0x5
c0002042:	76 2d                	jbe    c0002071 <gen_numname+0x4a>
c0002044:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002047:	66 85 c0             	test   ax,ax
c000204a:	74 25                	je     c0002071 <gen_numname+0x4a>
c000204c:	83 c7 02             	add    edi,0x2
c000204f:	ba 10 00 00 00       	mov    edx,0x10
c0002054:	01 db                	add    ebx,ebx
c0002056:	89 c1                	mov    ecx,eax
c0002058:	66 d1 e8             	shr    ax,1
c000205b:	83 e1 01             	and    ecx,0x1
c000205e:	01 cb                	add    ebx,ecx
c0002060:	0f ba e3 10          	bt     ebx,0x10
c0002064:	73 06                	jae    c000206c <gen_numname+0x45>
c0002066:	81 f3 21 10 01 00    	xor    ebx,0x11021
c000206c:	4a                   	dec    edx
c000206d:	75 e5                	jne    c0002054 <gen_numname+0x2d>
c000206f:	eb d3                	jmp    c0002044 <gen_numname+0x1d>
c0002071:	b8 07 00 00 00       	mov    eax,0x7
c0002076:	88 d9                	mov    cl,bl
c0002078:	83 e1 0f             	and    ecx,0xf
c000207b:	8d 51 30             	lea    edx,[ecx+0x30]
c000207e:	80 fa 39             	cmp    dl,0x39
c0002081:	76 03                	jbe    c0002086 <gen_numname+0x5f>
c0002083:	8d 51 37             	lea    edx,[ecx+0x37]
c0002086:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002089:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c000208d:	89 da                	mov    edx,ebx
c000208f:	c1 ea 04             	shr    edx,0x4
c0002092:	83 fb 0f             	cmp    ebx,0xf
c0002095:	76 06                	jbe    c000209d <gen_numname+0x76>
c0002097:	89 c8                	mov    eax,ecx
c0002099:	89 d3                	mov    ebx,edx
c000209b:	eb d9                	jmp    c0002076 <gen_numname+0x4f>
c000209d:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020a2:	31 d2                	xor    edx,edx
c00020a4:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020a7:	8d 04 16             	lea    eax,[esi+edx*1]
c00020aa:	39 ca                	cmp    edx,ecx
c00020ac:	73 18                	jae    c00020c6 <gen_numname+0x9f>
c00020ae:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020b1:	3c 20                	cmp    al,0x20
c00020b3:	74 11                	je     c00020c6 <gen_numname+0x9f>
c00020b5:	e8 41 fc ff ff       	call   c0001cfb <dbc_1st>
c00020ba:	85 c0                	test   eax,eax
c00020bc:	74 05                	je     c00020c3 <gen_numname+0x9c>
c00020be:	39 d3                	cmp    ebx,edx
c00020c0:	74 04                	je     c00020c6 <gen_numname+0x9f>
c00020c2:	42                   	inc    edx
c00020c3:	42                   	inc    edx
c00020c4:	eb e1                	jmp    c00020a7 <gen_numname+0x80>
c00020c6:	b0 20                	mov    al,0x20
c00020c8:	83 f9 07             	cmp    ecx,0x7
c00020cb:	77 05                	ja     c00020d2 <gen_numname+0xab>
c00020cd:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020d1:	41                   	inc    ecx
c00020d2:	42                   	inc    edx
c00020d3:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020d7:	83 fa 07             	cmp    edx,0x7
c00020da:	76 ea                	jbe    c00020c6 <gen_numname+0x9f>
c00020dc:	83 c4 10             	add    esp,0x10
c00020df:	5b                   	pop    ebx
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	c3                   	ret    

c00020e3 <sum_sfn>:
c00020e3:	31 c9                	xor    ecx,ecx
c00020e5:	31 d2                	xor    edx,edx
c00020e7:	d0 ca                	ror    dl,1
c00020e9:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c00020ec:	41                   	inc    ecx
c00020ed:	83 f9 0b             	cmp    ecx,0xb
c00020f0:	75 f5                	jne    c00020e7 <sum_sfn+0x4>
c00020f2:	88 d0                	mov    al,dl
c00020f4:	c3                   	ret    

c00020f5 <xdir_sum>:
c00020f5:	56                   	push   esi
c00020f6:	31 c9                	xor    ecx,ecx
c00020f8:	53                   	push   ebx
c00020f9:	31 d2                	xor    edx,edx
c00020fb:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c00020ff:	43                   	inc    ebx
c0002100:	c1 e3 05             	shl    ebx,0x5
c0002103:	83 fa 02             	cmp    edx,0x2
c0002106:	74 0b                	je     c0002113 <xdir_sum+0x1e>
c0002108:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c000210c:	66 d1 c9             	ror    cx,1
c000210f:	01 f1                	add    ecx,esi
c0002111:	eb 05                	jmp    c0002118 <xdir_sum+0x23>
c0002113:	ba 03 00 00 00       	mov    edx,0x3
c0002118:	42                   	inc    edx
c0002119:	39 d3                	cmp    ebx,edx
c000211b:	77 e6                	ja     c0002103 <xdir_sum+0xe>
c000211d:	89 c8                	mov    eax,ecx
c000211f:	5b                   	pop    ebx
c0002120:	5e                   	pop    esi
c0002121:	c3                   	ret    

c0002122 <xsum32>:
c0002122:	d1 ca                	ror    edx,1
c0002124:	0f b6 c0             	movzx  eax,al
c0002127:	01 d0                	add    eax,edx
c0002129:	c3                   	ret    

c000212a <get_xfileinfo>:
c000212a:	55                   	push   ebp
c000212b:	31 c9                	xor    ecx,ecx
c000212d:	57                   	push   edi
c000212e:	bd 40 00 00 00       	mov    ebp,0x40
c0002133:	56                   	push   esi
c0002134:	31 ff                	xor    edi,edi
c0002136:	53                   	push   ebx
c0002137:	89 c6                	mov    esi,eax
c0002139:	83 ec 0c             	sub    esp,0xc
c000213c:	89 d3                	mov    ebx,edx
c000213e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002145:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002149:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000214c:	76 6d                	jbe    c00021bb <get_xfileinfo+0x91>
c000214e:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002154:	76 0b                	jbe    c0002161 <get_xfileinfo+0x37>
c0002156:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000215a:	bf 01 00 00 00       	mov    edi,0x1
c000215f:	eb 63                	jmp    c00021c4 <get_xfileinfo+0x9a>
c0002161:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002167:	75 03                	jne    c000216c <get_xfileinfo+0x42>
c0002169:	83 c5 02             	add    ebp,0x2
c000216c:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000216f:	83 c5 02             	add    ebp,0x2
c0002172:	e8 b0 fa ff ff       	call   c0001c27 <ld_word>
c0002177:	ff 04 24             	inc    DWORD PTR [esp]
c000217a:	66 85 c9             	test   cx,cx
c000217d:	75 0d                	jne    c000218c <get_xfileinfo+0x62>
c000217f:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002185:	66 81 fa ff 07       	cmp    dx,0x7ff
c000218a:	76 2b                	jbe    c00021b7 <get_xfileinfo+0x8d>
c000218c:	c1 e1 10             	shl    ecx,0x10
c000218f:	ba ff 00 00 00       	mov    edx,0xff
c0002194:	0f b7 c0             	movzx  eax,ax
c0002197:	29 fa                	sub    edx,edi
c0002199:	09 c8                	or     eax,ecx
c000219b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000219f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021a7:	e8 1b fc ff ff       	call   c0001dc7 <put_utf>
c00021ac:	84 c0                	test   al,al
c00021ae:	74 a6                	je     c0002156 <get_xfileinfo+0x2c>
c00021b0:	0f b6 c0             	movzx  eax,al
c00021b3:	01 c7                	add    edi,eax
c00021b5:	31 c0                	xor    eax,eax
c00021b7:	89 c1                	mov    ecx,eax
c00021b9:	eb 8a                	jmp    c0002145 <get_xfileinfo+0x1b>
c00021bb:	85 ff                	test   edi,edi
c00021bd:	74 97                	je     c0002156 <get_xfileinfo+0x2c>
c00021bf:	66 85 c9             	test   cx,cx
c00021c2:	75 92                	jne    c0002156 <get_xfileinfo+0x2c>
c00021c4:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021c9:	31 c0                	xor    eax,eax
c00021cb:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021cf:	31 d2                	xor    edx,edx
c00021d1:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021d4:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021d7:	80 e1 10             	and    cl,0x10
c00021da:	75 08                	jne    c00021e4 <get_xfileinfo+0xba>
c00021dc:	8d 46 38             	lea    eax,[esi+0x38]
c00021df:	e8 68 fa ff ff       	call   c0001c4c <ld_qword>
c00021e4:	89 03                	mov    DWORD PTR [ebx],eax
c00021e6:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00021e9:	8d 46 0c             	lea    eax,[esi+0xc]
c00021ec:	e8 36 fa ff ff       	call   c0001c27 <ld_word>
c00021f1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c00021f5:	8d 46 0e             	lea    eax,[esi+0xe]
c00021f8:	e8 2a fa ff ff       	call   c0001c27 <ld_word>
c00021fd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002201:	83 c4 0c             	add    esp,0xc
c0002204:	5b                   	pop    ebx
c0002205:	5e                   	pop    esi
c0002206:	5f                   	pop    edi
c0002207:	5d                   	pop    ebp
c0002208:	c3                   	ret    

c0002209 <get_ldnumber>:
c0002209:	8b 10                	mov    edx,DWORD PTR [eax]
c000220b:	85 d2                	test   edx,edx
c000220d:	74 14                	je     c0002223 <get_ldnumber+0x1a>
c000220f:	56                   	push   esi
c0002210:	53                   	push   ebx
c0002211:	89 d3                	mov    ebx,edx
c0002213:	43                   	inc    ebx
c0002214:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002217:	80 f9 1f             	cmp    cl,0x1f
c000221a:	76 0d                	jbe    c0002229 <get_ldnumber+0x20>
c000221c:	80 f9 3a             	cmp    cl,0x3a
c000221f:	75 f2                	jne    c0002213 <get_ldnumber+0xa>
c0002221:	eb 0a                	jmp    c000222d <get_ldnumber+0x24>
c0002223:	83 c9 ff             	or     ecx,0xffffffff
c0002226:	89 c8                	mov    eax,ecx
c0002228:	c3                   	ret    
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	eb 24                	jmp    c0002251 <get_ldnumber+0x48>
c000222d:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002230:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002233:	80 f9 09             	cmp    cl,0x9
c0002236:	77 16                	ja     c000224e <get_ldnumber+0x45>
c0002238:	83 c2 02             	add    edx,0x2
c000223b:	83 c9 ff             	or     ecx,0xffffffff
c000223e:	39 d3                	cmp    ebx,edx
c0002240:	75 0f                	jne    c0002251 <get_ldnumber+0x48>
c0002242:	89 f2                	mov    edx,esi
c0002244:	89 18                	mov    DWORD PTR [eax],ebx
c0002246:	0f be ca             	movsx  ecx,dl
c0002249:	83 e9 30             	sub    ecx,0x30
c000224c:	eb 03                	jmp    c0002251 <get_ldnumber+0x48>
c000224e:	83 c9 ff             	or     ecx,0xffffffff
c0002251:	89 c8                	mov    eax,ecx
c0002253:	5b                   	pop    ebx
c0002254:	5e                   	pop    esi
c0002255:	c3                   	ret    

c0002256 <crc32>:
c0002256:	56                   	push   esi
c0002257:	89 d6                	mov    esi,edx
c0002259:	53                   	push   ebx
c000225a:	b2 01                	mov    dl,0x1
c000225c:	bb 08 00 00 00       	mov    ebx,0x8
c0002261:	89 f1                	mov    ecx,esi
c0002263:	84 d1                	test   cl,dl
c0002265:	0f 95 c1             	setne  cl
c0002268:	0f b6 c9             	movzx  ecx,cl
c000226b:	31 c1                	xor    ecx,eax
c000226d:	89 c8                	mov    eax,ecx
c000226f:	d1 e8                	shr    eax,1
c0002271:	80 e1 01             	and    cl,0x1
c0002274:	74 05                	je     c000227b <crc32+0x25>
c0002276:	35 20 83 b8 ed       	xor    eax,0xedb88320
c000227b:	d1 e2                	shl    edx,1
c000227d:	4b                   	dec    ebx
c000227e:	75 e1                	jne    c0002261 <crc32+0xb>
c0002280:	5b                   	pop    ebx
c0002281:	5e                   	pop    esi
c0002282:	c3                   	ret    

c0002283 <test_gpt_header>:
c0002283:	55                   	push   ebp
c0002284:	b9 10 00 00 00       	mov    ecx,0x10
c0002289:	57                   	push   edi
c000228a:	ba 20 9c 02 c0       	mov    edx,0xc0029c20
c000228f:	56                   	push   esi
c0002290:	31 ff                	xor    edi,edi
c0002292:	53                   	push   ebx
c0002293:	89 c3                	mov    ebx,eax
c0002295:	e8 2c fa ff ff       	call   c0001cc6 <mem_cmp>
c000229a:	85 c0                	test   eax,eax
c000229c:	75 55                	jne    c00022f3 <test_gpt_header+0x70>
c000229e:	89 c7                	mov    edi,eax
c00022a0:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022a5:	83 ce ff             	or     esi,0xffffffff
c00022a8:	31 d2                	xor    edx,edx
c00022aa:	83 fd 03             	cmp    ebp,0x3
c00022ad:	76 05                	jbe    c00022b4 <test_gpt_header+0x31>
c00022af:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022b4:	89 f0                	mov    eax,esi
c00022b6:	45                   	inc    ebp
c00022b7:	e8 9a ff ff ff       	call   c0002256 <crc32>
c00022bc:	83 fd 4c             	cmp    ebp,0x4c
c00022bf:	89 c6                	mov    esi,eax
c00022c1:	75 e5                	jne    c00022a8 <test_gpt_header+0x25>
c00022c3:	8d 43 10             	lea    eax,[ebx+0x10]
c00022c6:	f7 d6                	not    esi
c00022c8:	e8 67 f9 ff ff       	call   c0001c34 <ld_dword>
c00022cd:	39 c6                	cmp    esi,eax
c00022cf:	75 22                	jne    c00022f3 <test_gpt_header+0x70>
c00022d1:	8d 43 54             	lea    eax,[ebx+0x54]
c00022d4:	e8 5b f9 ff ff       	call   c0001c34 <ld_dword>
c00022d9:	83 c0 80             	add    eax,0xffffff80
c00022dc:	75 15                	jne    c00022f3 <test_gpt_header+0x70>
c00022de:	8d 43 50             	lea    eax,[ebx+0x50]
c00022e1:	e8 4e f9 ff ff       	call   c0001c34 <ld_dword>
c00022e6:	3d 80 00 00 00       	cmp    eax,0x80
c00022eb:	0f 96 c0             	setbe  al
c00022ee:	0f b6 c0             	movzx  eax,al
c00022f1:	89 c7                	mov    edi,eax
c00022f3:	5b                   	pop    ebx
c00022f4:	89 f8                	mov    eax,edi
c00022f6:	5e                   	pop    esi
c00022f7:	5f                   	pop    edi
c00022f8:	5d                   	pop    ebp
c00022f9:	c3                   	ret    

c00022fa <make_rand>:
c00022fa:	56                   	push   esi
c00022fb:	85 c0                	test   eax,eax
c00022fd:	53                   	push   ebx
c00022fe:	75 05                	jne    c0002305 <make_rand+0xb>
c0002300:	b8 01 00 00 00       	mov    eax,0x1
c0002305:	01 d1                	add    ecx,edx
c0002307:	bb 08 00 00 00       	mov    ebx,0x8
c000230c:	89 c6                	mov    esi,eax
c000230e:	d1 e8                	shr    eax,1
c0002310:	83 e6 01             	and    esi,0x1
c0002313:	85 f6                	test   esi,esi
c0002315:	74 05                	je     c000231c <make_rand+0x22>
c0002317:	35 00 00 00 a3       	xor    eax,0xa3000000
c000231c:	4b                   	dec    ebx
c000231d:	75 ed                	jne    c000230c <make_rand+0x12>
c000231f:	42                   	inc    edx
c0002320:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002323:	39 ca                	cmp    edx,ecx
c0002325:	75 e0                	jne    c0002307 <make_rand+0xd>
c0002327:	5b                   	pop    ebx
c0002328:	5e                   	pop    esi
c0002329:	c3                   	ret    

c000232a <validate>:
c000232a:	56                   	push   esi
c000232b:	53                   	push   ebx
c000232c:	89 d6                	mov    esi,edx
c000232e:	51                   	push   ecx
c000232f:	85 c0                	test   eax,eax
c0002331:	75 09                	jne    c000233c <validate+0x12>
c0002333:	b8 09 00 00 00       	mov    eax,0x9
c0002338:	31 c9                	xor    ecx,ecx
c000233a:	eb 2f                	jmp    c000236b <validate+0x41>
c000233c:	89 c3                	mov    ebx,eax
c000233e:	8b 00                	mov    eax,DWORD PTR [eax]
c0002340:	85 c0                	test   eax,eax
c0002342:	74 ef                	je     c0002333 <validate+0x9>
c0002344:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002347:	74 ea                	je     c0002333 <validate+0x9>
c0002349:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000234d:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002351:	75 e0                	jne    c0002333 <validate+0x9>
c0002353:	83 ec 0c             	sub    esp,0xc
c0002356:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000235a:	50                   	push   eax
c000235b:	e8 76 f8 ff ff       	call   c0001bd6 <disk_status>
c0002360:	83 c4 10             	add    esp,0x10
c0002363:	a8 01                	test   al,0x1
c0002365:	75 cc                	jne    c0002333 <validate+0x9>
c0002367:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002369:	31 c0                	xor    eax,eax
c000236b:	89 0e                	mov    DWORD PTR [esi],ecx
c000236d:	5a                   	pop    edx
c000236e:	5b                   	pop    ebx
c000236f:	5e                   	pop    esi
c0002370:	c3                   	ret    

c0002371 <sync_window>:
c0002371:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002375:	0f 84 85 00 00 00    	je     c0002400 <sync_window+0x8f>
c000237b:	55                   	push   ebp
c000237c:	8d 68 54             	lea    ebp,[eax+0x54]
c000237f:	57                   	push   edi
c0002380:	56                   	push   esi
c0002381:	53                   	push   ebx
c0002382:	89 c3                	mov    ebx,eax
c0002384:	83 ec 28             	sub    esp,0x28
c0002387:	6a 01                	push   0x1
c0002389:	ff 70 50             	push   DWORD PTR [eax+0x50]
c000238c:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c000238f:	55                   	push   ebp
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 58 f8 ff ff       	call   c0001bf2 <disk_write>
c000239a:	83 c4 20             	add    esp,0x20
c000239d:	ba 01 00 00 00       	mov    edx,0x1
c00023a2:	85 c0                	test   eax,eax
c00023a4:	75 50                	jne    c00023f6 <sync_window+0x85>
c00023a6:	31 ff                	xor    edi,edi
c00023a8:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023af:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023b3:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023b6:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023b9:	89 c6                	mov    esi,eax
c00023bb:	89 d7                	mov    edi,edx
c00023bd:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023c0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023c4:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023c7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023cb:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023cf:	73 23                	jae    c00023f4 <sync_window+0x83>
c00023d1:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023d5:	75 1d                	jne    c00023f4 <sync_window+0x83>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	6a 01                	push   0x1
c00023dc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023e0:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023e4:	52                   	push   edx
c00023e5:	50                   	push   eax
c00023e6:	55                   	push   ebp
c00023e7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00023eb:	50                   	push   eax
c00023ec:	e8 01 f8 ff ff       	call   c0001bf2 <disk_write>
c00023f1:	83 c4 20             	add    esp,0x20
c00023f4:	31 d2                	xor    edx,edx
c00023f6:	83 c4 1c             	add    esp,0x1c
c00023f9:	89 d0                	mov    eax,edx
c00023fb:	5b                   	pop    ebx
c00023fc:	5e                   	pop    esi
c00023fd:	5f                   	pop    edi
c00023fe:	5d                   	pop    ebp
c00023ff:	c3                   	ret    
c0002400:	31 d2                	xor    edx,edx
c0002402:	89 d0                	mov    eax,edx
c0002404:	c3                   	ret    

c0002405 <move_window>:
c0002405:	56                   	push   esi
c0002406:	53                   	push   ebx
c0002407:	89 c3                	mov    ebx,eax
c0002409:	83 ec 14             	sub    esp,0x14
c000240c:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000240f:	75 07                	jne    c0002418 <move_window+0x13>
c0002411:	31 f6                	xor    esi,esi
c0002413:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002416:	74 59                	je     c0002471 <move_window+0x6c>
c0002418:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000241c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002420:	89 d8                	mov    eax,ebx
c0002422:	e8 4a ff ff ff       	call   c0002371 <sync_window>
c0002427:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000242b:	89 c6                	mov    esi,eax
c000242d:	85 c0                	test   eax,eax
c000242f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002433:	75 3c                	jne    c0002471 <move_window+0x6c>
c0002435:	83 ec 0c             	sub    esp,0xc
c0002438:	8d 43 54             	lea    eax,[ebx+0x54]
c000243b:	6a 01                	push   0x1
c000243d:	51                   	push   ecx
c000243e:	52                   	push   edx
c000243f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002443:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002447:	50                   	push   eax
c0002448:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000244c:	50                   	push   eax
c000244d:	e8 8a f7 ff ff       	call   c0001bdc <disk_read>
c0002452:	83 c4 20             	add    esp,0x20
c0002455:	85 c0                	test   eax,eax
c0002457:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000245f:	74 0a                	je     c000246b <move_window+0x66>
c0002461:	83 ca ff             	or     edx,0xffffffff
c0002464:	be 01 00 00 00       	mov    esi,0x1
c0002469:	89 d1                	mov    ecx,edx
c000246b:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000246e:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c0002471:	89 f0                	mov    eax,esi
c0002473:	83 c4 14             	add    esp,0x14
c0002476:	5b                   	pop    ebx
c0002477:	5e                   	pop    esi
c0002478:	c3                   	ret    

c0002479 <check_fs>:
c0002479:	53                   	push   ebx
c000247a:	89 c3                	mov    ebx,eax
c000247c:	83 ec 08             	sub    esp,0x8
c000247f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002483:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000248a:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002491:	e8 6f ff ff ff       	call   c0002405 <move_window>
c0002496:	ba 04 00 00 00       	mov    edx,0x4
c000249b:	85 c0                	test   eax,eax
c000249d:	0f 85 89 00 00 00    	jne    c000252c <check_fs+0xb3>
c00024a3:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024a9:	e8 79 f7 ff ff       	call   c0001c27 <ld_word>
c00024ae:	ba 03 00 00 00       	mov    edx,0x3
c00024b3:	66 3d 55 aa          	cmp    ax,0xaa55
c00024b7:	75 73                	jne    c000252c <check_fs+0xb3>
c00024b9:	ba 40 9d 02 c0       	mov    edx,0xc0029d40
c00024be:	8d 43 54             	lea    eax,[ebx+0x54]
c00024c1:	b9 0b 00 00 00       	mov    ecx,0xb
c00024c6:	e8 fb f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024cb:	ba 01 00 00 00       	mov    edx,0x1
c00024d0:	85 c0                	test   eax,eax
c00024d2:	74 58                	je     c000252c <check_fs+0xb3>
c00024d4:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024d7:	8d 50 18             	lea    edx,[eax+0x18]
c00024da:	80 fa 01             	cmp    dl,0x1
c00024dd:	76 09                	jbe    c00024e8 <check_fs+0x6f>
c00024df:	ba 02 00 00 00       	mov    edx,0x2
c00024e4:	3c eb                	cmp    al,0xeb
c00024e6:	75 44                	jne    c000252c <check_fs+0xb3>
c00024e8:	ba 8c d0 02 c0       	mov    edx,0xc002d08c
c00024ed:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00024f3:	b9 03 00 00 00       	mov    ecx,0x3
c00024f8:	e8 c9 f7 ff ff       	call   c0001cc6 <mem_cmp>
c00024fd:	31 d2                	xor    edx,edx
c00024ff:	85 c0                	test   eax,eax
c0002501:	74 29                	je     c000252c <check_fs+0xb3>
c0002503:	ba 4c 9d 02 c0       	mov    edx,0xc0029d4c
c0002508:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000250e:	b9 05 00 00 00       	mov    ecx,0x5
c0002513:	e8 ae f7 ff ff       	call   c0001cc6 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 0e                	je     c000252c <check_fs+0xb3>
c000251e:	31 d2                	xor    edx,edx
c0002520:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002527:	0f 95 c2             	setne  dl
c000252a:	01 d2                	add    edx,edx
c000252c:	89 d0                	mov    eax,edx
c000252e:	83 c4 08             	add    esp,0x8
c0002531:	5b                   	pop    ebx
c0002532:	c3                   	ret    

c0002533 <find_volume>:
c0002533:	55                   	push   ebp
c0002534:	31 c9                	xor    ecx,ecx
c0002536:	57                   	push   edi
c0002537:	56                   	push   esi
c0002538:	89 d6                	mov    esi,edx
c000253a:	53                   	push   ebx
c000253b:	31 d2                	xor    edx,edx
c000253d:	83 ec 3c             	sub    esp,0x3c
c0002540:	89 c3                	mov    ebx,eax
c0002542:	e8 32 ff ff ff       	call   c0002479 <check_fs>
c0002547:	83 f8 02             	cmp    eax,0x2
c000254a:	74 0e                	je     c000255a <find_volume+0x27>
c000254c:	0f 87 5d 01 00 00    	ja     c00026af <find_volume+0x17c>
c0002552:	85 f6                	test   esi,esi
c0002554:	0f 84 55 01 00 00    	je     c00026af <find_volume+0x17c>
c000255a:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002561:	0f 85 dd 00 00 00    	jne    c0002644 <find_volume+0x111>
c0002567:	31 c9                	xor    ecx,ecx
c0002569:	ba 01 00 00 00       	mov    edx,0x1
c000256e:	89 d8                	mov    eax,ebx
c0002570:	e8 90 fe ff ff       	call   c0002405 <move_window>
c0002575:	85 c0                	test   eax,eax
c0002577:	74 0a                	je     c0002583 <find_volume+0x50>
c0002579:	b8 04 00 00 00       	mov    eax,0x4
c000257e:	e9 2c 01 00 00       	jmp    c00026af <find_volume+0x17c>
c0002583:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002586:	89 e8                	mov    eax,ebp
c0002588:	e8 f6 fc ff ff       	call   c0002283 <test_gpt_header>
c000258d:	85 c0                	test   eax,eax
c000258f:	75 0a                	jne    c000259b <find_volume+0x68>
c0002591:	b8 03 00 00 00       	mov    eax,0x3
c0002596:	e9 14 01 00 00       	jmp    c00026af <find_volume+0x17c>
c000259b:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025a1:	e8 8e f6 ff ff       	call   c0001c34 <ld_dword>
c00025a6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025aa:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025b0:	e8 97 f6 ff ff       	call   c0001c4c <ld_qword>
c00025b5:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025cd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025d1:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025d5:	74 ba                	je     c0002591 <find_volume+0x5e>
c00025d7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025db:	31 c9                	xor    ecx,ecx
c00025dd:	c1 e7 07             	shl    edi,0x7
c00025e0:	89 d8                	mov    eax,ebx
c00025e2:	89 fa                	mov    edx,edi
c00025e4:	c1 ea 09             	shr    edx,0x9
c00025e7:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00025eb:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00025ef:	e8 11 fe ff ff       	call   c0002405 <move_window>
c00025f4:	85 c0                	test   eax,eax
c00025f6:	75 81                	jne    c0002579 <find_volume+0x46>
c00025f8:	81 e7 80 01 00 00    	and    edi,0x180
c00025fe:	b9 10 00 00 00       	mov    ecx,0x10
c0002603:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002607:	ba 30 9d 02 c0       	mov    edx,0xc0029d30
c000260c:	e8 b5 f6 ff ff       	call   c0001cc6 <mem_cmp>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 29                	jne    c000263e <find_volume+0x10b>
c0002615:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002619:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000261d:	e8 2a f6 ff ff       	call   c0001c4c <ld_qword>
c0002622:	89 d1                	mov    ecx,edx
c0002624:	89 c2                	mov    edx,eax
c0002626:	89 d8                	mov    eax,ebx
c0002628:	e8 4c fe ff ff       	call   c0002479 <check_fs>
c000262d:	85 f6                	test   esi,esi
c000262f:	75 07                	jne    c0002638 <find_volume+0x105>
c0002631:	83 f8 01             	cmp    eax,0x1
c0002634:	77 08                	ja     c000263e <find_volume+0x10b>
c0002636:	eb 77                	jmp    c00026af <find_volume+0x17c>
c0002638:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000263c:	74 71                	je     c00026af <find_volume+0x17c>
c000263e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002642:	eb 89                	jmp    c00025cd <find_volume+0x9a>
c0002644:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002648:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000264e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002658:	89 cd                	mov    ebp,ecx
c000265a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000265e:	89 f8                	mov    eax,edi
c0002660:	83 c7 10             	add    edi,0x10
c0002663:	e8 cc f5 ff ff       	call   c0001c34 <ld_dword>
c0002668:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000266c:	89 01                	mov    DWORD PTR [ecx],eax
c000266e:	83 c1 04             	add    ecx,0x4
c0002671:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002675:	75 e3                	jne    c000265a <find_volume+0x127>
c0002677:	31 ff                	xor    edi,edi
c0002679:	85 f6                	test   esi,esi
c000267b:	74 03                	je     c0002680 <find_volume+0x14d>
c000267d:	8d 7e ff             	lea    edi,[esi-0x1]
c0002680:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002684:	85 d2                	test   edx,edx
c0002686:	74 14                	je     c000269c <find_volume+0x169>
c0002688:	31 c9                	xor    ecx,ecx
c000268a:	89 d8                	mov    eax,ebx
c000268c:	e8 e8 fd ff ff       	call   c0002479 <check_fs>
c0002691:	83 f8 01             	cmp    eax,0x1
c0002694:	76 19                	jbe    c00026af <find_volume+0x17c>
c0002696:	85 f6                	test   esi,esi
c0002698:	74 0f                	je     c00026a9 <find_volume+0x176>
c000269a:	eb 13                	jmp    c00026af <find_volume+0x17c>
c000269c:	85 f6                	test   esi,esi
c000269e:	0f 85 ed fe ff ff    	jne    c0002591 <find_volume+0x5e>
c00026a4:	b8 03 00 00 00       	mov    eax,0x3
c00026a9:	47                   	inc    edi
c00026aa:	83 ff 03             	cmp    edi,0x3
c00026ad:	76 d1                	jbe    c0002680 <find_volume+0x14d>
c00026af:	83 c4 3c             	add    esp,0x3c
c00026b2:	5b                   	pop    ebx
c00026b3:	5e                   	pop    esi
c00026b4:	5f                   	pop    edi
c00026b5:	5d                   	pop    ebp
c00026b6:	c3                   	ret    

c00026b7 <mount_volume>:
c00026b7:	55                   	push   ebp
c00026b8:	57                   	push   edi
c00026b9:	89 cf                	mov    edi,ecx
c00026bb:	56                   	push   esi
c00026bc:	53                   	push   ebx
c00026bd:	bb 0b 00 00 00       	mov    ebx,0xb
c00026c2:	83 ec 3c             	sub    esp,0x3c
c00026c5:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026cf:	e8 35 fb ff ff       	call   c0002209 <get_ldnumber>
c00026d4:	85 c0                	test   eax,eax
c00026d6:	0f 88 3a 05 00 00    	js     c0002c16 <mount_volume+0x55f>
c00026dc:	8b 2c 85 e0 ed 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1220]
c00026e3:	89 c6                	mov    esi,eax
c00026e5:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ea:	85 ed                	test   ebp,ebp
c00026ec:	0f 84 24 05 00 00    	je     c0002c16 <mount_volume+0x55f>
c00026f2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026f6:	83 e7 fe             	and    edi,0xfffffffe
c00026f9:	89 2a                	mov    DWORD PTR [edx],ebp
c00026fb:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00026ff:	74 32                	je     c0002733 <mount_volume+0x7c>
c0002701:	83 ec 0c             	sub    esp,0xc
c0002704:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002708:	50                   	push   eax
c0002709:	e8 c8 f4 ff ff       	call   c0001bd6 <disk_status>
c000270e:	83 c4 10             	add    esp,0x10
c0002711:	a8 01                	test   al,0x1
c0002713:	75 1e                	jne    c0002733 <mount_volume+0x7c>
c0002715:	31 db                	xor    ebx,ebx
c0002717:	89 f9                	mov    ecx,edi
c0002719:	84 c9                	test   cl,cl
c000271b:	0f 84 f5 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002721:	a8 04                	test   al,0x4
c0002723:	0f 84 ed 04 00 00    	je     c0002c16 <mount_volume+0x55f>
c0002729:	bb 0a 00 00 00       	mov    ebx,0xa
c000272e:	e9 e3 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002733:	83 ec 0c             	sub    esp,0xc
c0002736:	89 f0                	mov    eax,esi
c0002738:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000273c:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000273f:	0f b6 f0             	movzx  esi,al
c0002742:	bb 03 00 00 00       	mov    ebx,0x3
c0002747:	56                   	push   esi
c0002748:	e8 8c f4 ff ff       	call   c0001bd9 <disk_initialize>
c000274d:	83 c4 10             	add    esp,0x10
c0002750:	a8 01                	test   al,0x1
c0002752:	0f 85 be 04 00 00    	jne    c0002c16 <mount_volume+0x55f>
c0002758:	89 f9                	mov    ecx,edi
c000275a:	84 c9                	test   cl,cl
c000275c:	74 04                	je     c0002762 <mount_volume+0xab>
c000275e:	a8 04                	test   al,0x4
c0002760:	75 c7                	jne    c0002729 <mount_volume+0x72>
c0002762:	31 d2                	xor    edx,edx
c0002764:	89 e8                	mov    eax,ebp
c0002766:	e8 c8 fd ff ff       	call   c0002533 <find_volume>
c000276b:	83 f8 04             	cmp    eax,0x4
c000276e:	75 0a                	jne    c000277a <mount_volume+0xc3>
c0002770:	bb 01 00 00 00       	mov    ebx,0x1
c0002775:	e9 9c 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c000277a:	83 f8 01             	cmp    eax,0x1
c000277d:	76 0a                	jbe    c0002789 <mount_volume+0xd2>
c000277f:	bb 0d 00 00 00       	mov    ebx,0xd
c0002784:	e9 8d 04 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002789:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c000278c:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c000278f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002793:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002797:	75 17                	jne    c00027b0 <mount_volume+0xf9>
c0002799:	b8 0b 00 00 00       	mov    eax,0xb
c000279e:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027a3:	75 da                	jne    c000277f <mount_volume+0xc8>
c00027a5:	40                   	inc    eax
c00027a6:	83 f8 40             	cmp    eax,0x40
c00027a9:	75 f3                	jne    c000279e <mount_volume+0xe7>
c00027ab:	e9 5a 02 00 00       	jmp    c0002a0a <mount_volume+0x353>
c00027b0:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027b3:	e8 6f f4 ff ff       	call   c0001c27 <ld_word>
c00027b8:	66 3d 00 02          	cmp    ax,0x200
c00027bc:	75 c1                	jne    c000277f <mount_volume+0xc8>
c00027be:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027c1:	e8 61 f4 ff ff       	call   c0001c27 <ld_word>
c00027c6:	0f b7 c0             	movzx  eax,ax
c00027c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027cd:	85 c0                	test   eax,eax
c00027cf:	75 0c                	jne    c00027dd <mount_volume+0x126>
c00027d1:	8d 45 78             	lea    eax,[ebp+0x78]
c00027d4:	e8 5b f4 ff ff       	call   c0001c34 <ld_dword>
c00027d9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027e1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027e4:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00027e7:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00027eb:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027ee:	48                   	dec    eax
c00027ef:	3c 01                	cmp    al,0x1
c00027f1:	77 8c                	ja     c000277f <mount_volume+0xc8>
c00027f3:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00027f7:	89 c3                	mov    ebx,eax
c00027f9:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00027fd:	66 85 c0             	test   ax,ax
c0002800:	0f 84 79 ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002806:	8d 40 ff             	lea    eax,[eax-0x1]
c0002809:	85 d8                	test   eax,ebx
c000280b:	0f 85 6e ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002811:	8d 45 65             	lea    eax,[ebp+0x65]
c0002814:	e8 0e f4 ff ff       	call   c0001c27 <ld_word>
c0002819:	89 c7                	mov    edi,eax
c000281b:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000281f:	a8 0f                	test   al,0xf
c0002821:	0f 85 58 ff ff ff    	jne    c000277f <mount_volume+0xc8>
c0002827:	8d 45 67             	lea    eax,[ebp+0x67]
c000282a:	e8 f8 f3 ff ff       	call   c0001c27 <ld_word>
c000282f:	0f b7 f0             	movzx  esi,ax
c0002832:	85 f6                	test   esi,esi
c0002834:	75 0a                	jne    c0002840 <mount_volume+0x189>
c0002836:	8d 45 74             	lea    eax,[ebp+0x74]
c0002839:	e8 f6 f3 ff ff       	call   c0001c34 <ld_dword>
c000283e:	89 c6                	mov    esi,eax
c0002840:	8d 45 62             	lea    eax,[ebp+0x62]
c0002843:	e8 df f3 ff ff       	call   c0001c27 <ld_word>
c0002848:	66 85 c0             	test   ax,ax
c000284b:	0f 84 2e ff ff ff    	je     c000277f <mount_volume+0xc8>
c0002851:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002856:	0f b7 c8             	movzx  ecx,ax
c0002859:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c000285e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002862:	89 fa                	mov    edx,edi
c0002864:	66 c1 ea 04          	shr    dx,0x4
c0002868:	0f b7 d2             	movzx  edx,dx
c000286b:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000286f:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002872:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002876:	39 c6                	cmp    esi,eax
c0002878:	0f 82 01 ff ff ff    	jb     c000277f <mount_volume+0xc8>
c000287e:	29 c6                	sub    esi,eax
c0002880:	31 d2                	xor    edx,edx
c0002882:	89 f0                	mov    eax,esi
c0002884:	f7 f3                	div    ebx
c0002886:	39 de                	cmp    esi,ebx
c0002888:	0f 82 f1 fe ff ff    	jb     c000277f <mount_volume+0xc8>
c000288e:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002893:	0f 87 e6 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c0002899:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000289e:	0f 86 63 03 00 00    	jbe    c0002c07 <mount_volume+0x550>
c00028a4:	bb 03 00 00 00       	mov    ebx,0x3
c00028a9:	8d 70 02             	lea    esi,[eax+0x2]
c00028ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b4:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028b7:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 c8                	mov    eax,ecx
c00028be:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028c1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028c9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028cd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028d1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028d4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028db:	31 d2                	xor    edx,edx
c00028dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028e8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028eb:	83 fb 03             	cmp    ebx,0x3
c00028ee:	75 2b                	jne    c000291b <mount_volume+0x264>
c00028f0:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00028f3:	e8 2f f3 ff ff       	call   c0001c27 <ld_word>
c00028f8:	66 09 c7             	or     di,ax
c00028fb:	0f 85 7e fe ff ff    	jne    c000277f <mount_volume+0xc8>
c0002901:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002907:	c1 e6 02             	shl    esi,0x2
c000290a:	e8 25 f3 ff ff       	call   c0001c34 <ld_dword>
c000290f:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002916:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002919:	eb 30                	jmp    c000294b <mount_volume+0x294>
c000291b:	66 85 ff             	test   di,di
c000291e:	0f 84 5b fe ff ff    	je     c000277f <mount_volume+0xc8>
c0002924:	31 d2                	xor    edx,edx
c0002926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000292a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000292e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002932:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002935:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002938:	83 fb 02             	cmp    ebx,0x2
c000293b:	75 04                	jne    c0002941 <mount_volume+0x28a>
c000293d:	01 f6                	add    esi,esi
c000293f:	eb 0a                	jmp    c000294b <mount_volume+0x294>
c0002941:	8d 04 76             	lea    eax,[esi+esi*2]
c0002944:	83 e6 01             	and    esi,0x1
c0002947:	d1 e8                	shr    eax,1
c0002949:	01 c6                	add    esi,eax
c000294b:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002951:	c1 ee 09             	shr    esi,0x9
c0002954:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002958:	0f 87 21 fe ff ff    	ja     c000277f <mount_volume+0xc8>
c000295e:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002965:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000296c:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002970:	83 fb 03             	cmp    ebx,0x3
c0002973:	75 7a                	jne    c00029ef <mount_volume+0x338>
c0002975:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c000297b:	e8 a7 f2 ff ff       	call   c0001c27 <ld_word>
c0002980:	66 48                	dec    ax
c0002982:	75 6b                	jne    c00029ef <mount_volume+0x338>
c0002984:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002988:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000298c:	83 c2 01             	add    edx,0x1
c000298f:	89 e8                	mov    eax,ebp
c0002991:	83 d1 00             	adc    ecx,0x0
c0002994:	e8 6c fa ff ff       	call   c0002405 <move_window>
c0002999:	85 c0                	test   eax,eax
c000299b:	75 52                	jne    c00029ef <mount_volume+0x338>
c000299d:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029a1:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029a7:	e8 7b f2 ff ff       	call   c0001c27 <ld_word>
c00029ac:	66 3d 55 aa          	cmp    ax,0xaa55
c00029b0:	75 3d                	jne    c00029ef <mount_volume+0x338>
c00029b2:	8d 45 54             	lea    eax,[ebp+0x54]
c00029b5:	e8 7a f2 ff ff       	call   c0001c34 <ld_dword>
c00029ba:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029bf:	75 2e                	jne    c00029ef <mount_volume+0x338>
c00029c1:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029c7:	e8 68 f2 ff ff       	call   c0001c34 <ld_dword>
c00029cc:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029d1:	75 1c                	jne    c00029ef <mount_volume+0x338>
c00029d3:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029d9:	e8 56 f2 ff ff       	call   c0001c34 <ld_dword>
c00029de:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029e1:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00029e7:	e8 48 f2 ff ff       	call   c0001c34 <ld_dword>
c00029ec:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00029ef:	66 a1 c0 ed 02 c0    	mov    ax,ds:0xc002edc0
c00029f5:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00029f8:	40                   	inc    eax
c00029f9:	31 db                	xor    ebx,ebx
c00029fb:	66 a3 c0 ed 02 c0    	mov    ds:0xc002edc0,ax
c0002a01:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a05:	e9 0c 02 00 00       	jmp    c0002c16 <mount_volume+0x55f>
c0002a0a:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a10:	e8 12 f2 ff ff       	call   c0001c27 <ld_word>
c0002a15:	66 3d 00 01          	cmp    ax,0x100
c0002a19:	0f 85 60 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a1f:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a26:	0f 85 53 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a2c:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a32:	e8 15 f2 ff ff       	call   c0001c4c <ld_qword>
c0002a37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a3f:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a45:	e8 ea f1 ff ff       	call   c0001c34 <ld_dword>
c0002a4a:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a4d:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a53:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a56:	fe c8                	dec    al
c0002a58:	0f 85 21 fd ff ff    	jne    c000277f <mount_volume+0xc8>
c0002a5e:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a65:	bb 01 00 00 00       	mov    ebx,0x1
c0002a6a:	d3 e3                	shl    ebx,cl
c0002a6c:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a70:	66 85 db             	test   bx,bx
c0002a73:	0f 84 06 fd ff ff    	je     c000277f <mount_volume+0xc8>
c0002a79:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a7f:	e8 b0 f1 ff ff       	call   c0001c34 <ld_dword>
c0002a84:	89 c6                	mov    esi,eax
c0002a86:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002a8b:	0f 87 ee fc ff ff    	ja     c000277f <mount_volume+0xc8>
c0002a91:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a95:	8d 40 02             	lea    eax,[eax+0x2]
c0002a98:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002a9b:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002a9e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002aa2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002aa5:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002aab:	e8 84 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ab0:	31 d2                	xor    edx,edx
c0002ab2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ab6:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002aba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002abe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002ac2:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ac5:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ac8:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ace:	e8 61 f1 ff ff       	call   c0001c34 <ld_dword>
c0002ad3:	31 d2                	xor    edx,edx
c0002ad5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002ad9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002add:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ae1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002ae4:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002ae7:	0f b7 c3             	movzx  eax,bx
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	0f af f0             	imul   esi,eax
c0002aef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002af3:	89 f0                	mov    eax,esi
c0002af5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002af9:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002afd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b01:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b05:	39 c1                	cmp    ecx,eax
c0002b07:	89 df                	mov    edi,ebx
c0002b09:	19 d7                	sbb    edi,edx
c0002b0b:	0f 82 6e fc ff ff    	jb     c000277f <mount_volume+0xc8>
c0002b11:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b17:	31 db                	xor    ebx,ebx
c0002b19:	e8 16 f1 ff ff       	call   c0001c34 <ld_dword>
c0002b1e:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b25:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b30:	85 db                	test   ebx,ebx
c0002b32:	75 39                	jne    c0002b6d <mount_volume+0x4b6>
c0002b34:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b38:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b3c:	0f 86 3d fc ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b42:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b45:	31 ff                	xor    edi,edi
c0002b47:	89 e8                	mov    eax,ebp
c0002b49:	e8 72 f3 ff ff       	call   c0001ec0 <clst2sect>
c0002b4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b52:	01 c6                	add    esi,eax
c0002b54:	89 e8                	mov    eax,ebp
c0002b56:	11 d7                	adc    edi,edx
c0002b58:	89 f2                	mov    edx,esi
c0002b5a:	89 f9                	mov    ecx,edi
c0002b5c:	e8 a4 f8 ff ff       	call   c0002405 <move_window>
c0002b61:	85 c0                	test   eax,eax
c0002b63:	0f 85 07 fc ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002b69:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b6d:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b72:	74 0b                	je     c0002b7f <mount_volume+0x4c8>
c0002b74:	83 c3 20             	add    ebx,0x20
c0002b77:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b7d:	eb b1                	jmp    c0002b30 <mount_volume+0x479>
c0002b7f:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b82:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002b86:	e8 a9 f0 ff ff       	call   c0001c34 <ld_dword>
c0002b8b:	89 c3                	mov    ebx,eax
c0002b8d:	83 f8 01             	cmp    eax,0x1
c0002b90:	0f 86 e9 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b96:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002b99:	0f 86 e0 fb ff ff    	jbe    c000277f <mount_volume+0xc8>
c0002b9f:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ba2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ba6:	0f af c2             	imul   eax,edx
c0002ba9:	31 d2                	xor    edx,edx
c0002bab:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bae:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bb1:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bb4:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bb7:	31 c9                	xor    ecx,ecx
c0002bb9:	89 da                	mov    edx,ebx
c0002bbb:	89 e8                	mov    eax,ebp
c0002bbd:	c1 ea 07             	shr    edx,0x7
c0002bc0:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bc3:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002bc6:	e8 3a f8 ff ff       	call   c0002405 <move_window>
c0002bcb:	85 c0                	test   eax,eax
c0002bcd:	0f 85 9d fb ff ff    	jne    c0002770 <mount_volume+0xb9>
c0002bd3:	89 d8                	mov    eax,ebx
c0002bd5:	83 e0 7f             	and    eax,0x7f
c0002bd8:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bdb:	e8 54 f0 ff ff       	call   c0001c34 <ld_dword>
c0002be0:	83 f8 ff             	cmp    eax,0xffffffff
c0002be3:	74 0a                	je     c0002bef <mount_volume+0x538>
c0002be5:	43                   	inc    ebx
c0002be6:	39 d8                	cmp    eax,ebx
c0002be8:	74 cd                	je     c0002bb7 <mount_volume+0x500>
c0002bea:	e9 90 fb ff ff       	jmp    c000277f <mount_volume+0xc8>
c0002bef:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002bf6:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002bfd:	bb 04 00 00 00       	mov    ebx,0x4
c0002c02:	e9 e8 fd ff ff       	jmp    c00029ef <mount_volume+0x338>
c0002c07:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c0c:	19 db                	sbb    ebx,ebx
c0002c0e:	83 c3 02             	add    ebx,0x2
c0002c11:	e9 93 fc ff ff       	jmp    c00028a9 <mount_volume+0x1f2>
c0002c16:	83 c4 3c             	add    esp,0x3c
c0002c19:	89 d8                	mov    eax,ebx
c0002c1b:	5b                   	pop    ebx
c0002c1c:	5e                   	pop    esi
c0002c1d:	5f                   	pop    edi
c0002c1e:	5d                   	pop    ebp
c0002c1f:	c3                   	ret    

c0002c20 <find_bitmap>:
c0002c20:	55                   	push   ebp
c0002c21:	57                   	push   edi
c0002c22:	89 c7                	mov    edi,eax
c0002c24:	56                   	push   esi
c0002c25:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c28:	53                   	push   ebx
c0002c29:	83 ec 1c             	sub    esp,0x1c
c0002c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c2f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c33:	83 e8 02             	sub    eax,0x2
c0002c36:	39 f0                	cmp    eax,esi
c0002c38:	77 02                	ja     c0002c3c <find_bitmap+0x1c>
c0002c3a:	31 f6                	xor    esi,esi
c0002c3c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c40:	89 f3                	mov    ebx,esi
c0002c42:	31 ed                	xor    ebp,ebp
c0002c44:	31 c9                	xor    ecx,ecx
c0002c46:	89 da                	mov    edx,ebx
c0002c48:	89 f8                	mov    eax,edi
c0002c4a:	c1 ea 0c             	shr    edx,0xc
c0002c4d:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c50:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c53:	e8 ad f7 ff ff       	call   c0002405 <move_window>
c0002c58:	85 c0                	test   eax,eax
c0002c5a:	75 68                	jne    c0002cc4 <find_bitmap+0xa4>
c0002c5c:	89 da                	mov    edx,ebx
c0002c5e:	89 d9                	mov    ecx,ebx
c0002c60:	c1 ea 03             	shr    edx,0x3
c0002c63:	83 e1 07             	and    ecx,0x7
c0002c66:	b8 01 00 00 00       	mov    eax,0x1
c0002c6b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c71:	d3 e0                	shl    eax,cl
c0002c73:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c76:	83 e9 02             	sub    ecx,0x2
c0002c79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c7d:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c81:	43                   	inc    ebx
c0002c82:	21 c1                	and    ecx,eax
c0002c84:	d1 e0                	shl    eax,1
c0002c86:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002c8a:	77 09                	ja     c0002c95 <find_bitmap+0x75>
c0002c8c:	31 db                	xor    ebx,ebx
c0002c8e:	ba 00 02 00 00       	mov    edx,0x200
c0002c93:	31 c0                	xor    eax,eax
c0002c95:	84 c9                	test   cl,cl
c0002c97:	75 10                	jne    c0002ca9 <find_bitmap+0x89>
c0002c99:	45                   	inc    ebp
c0002c9a:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002c9e:	75 0f                	jne    c0002caf <find_bitmap+0x8f>
c0002ca0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ca4:	83 c0 02             	add    eax,0x2
c0002ca7:	eb 22                	jmp    c0002ccb <find_bitmap+0xab>
c0002ca9:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cad:	31 ed                	xor    ebp,ebp
c0002caf:	39 de                	cmp    esi,ebx
c0002cb1:	74 16                	je     c0002cc9 <find_bitmap+0xa9>
c0002cb3:	84 c0                	test   al,al
c0002cb5:	75 c6                	jne    c0002c7d <find_bitmap+0x5d>
c0002cb7:	42                   	inc    edx
c0002cb8:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cbe:	77 84                	ja     c0002c44 <find_bitmap+0x24>
c0002cc0:	b0 01                	mov    al,0x1
c0002cc2:	eb b9                	jmp    c0002c7d <find_bitmap+0x5d>
c0002cc4:	83 c8 ff             	or     eax,0xffffffff
c0002cc7:	eb 02                	jmp    c0002ccb <find_bitmap+0xab>
c0002cc9:	31 c0                	xor    eax,eax
c0002ccb:	83 c4 1c             	add    esp,0x1c
c0002cce:	5b                   	pop    ebx
c0002ccf:	5e                   	pop    esi
c0002cd0:	5f                   	pop    edi
c0002cd1:	5d                   	pop    ebp
c0002cd2:	c3                   	ret    

c0002cd3 <change_bitmap>:
c0002cd3:	55                   	push   ebp
c0002cd4:	89 cd                	mov    ebp,ecx
c0002cd6:	57                   	push   edi
c0002cd7:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cda:	56                   	push   esi
c0002cdb:	89 c7                	mov    edi,eax
c0002cdd:	53                   	push   ebx
c0002cde:	89 c8                	mov    eax,ecx
c0002ce0:	83 ec 1c             	sub    esp,0x1c
c0002ce3:	31 d2                	xor    edx,edx
c0002ce5:	89 ce                	mov    esi,ecx
c0002ce7:	c1 e8 0c             	shr    eax,0xc
c0002cea:	bb 01 00 00 00       	mov    ebx,0x1
c0002cef:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002cf2:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002cf5:	c1 ee 03             	shr    esi,0x3
c0002cf8:	83 e1 07             	and    ecx,0x7
c0002cfb:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d01:	d3 e3                	shl    ebx,cl
c0002d03:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d07:	89 c1                	mov    ecx,eax
c0002d09:	89 d3                	mov    ebx,edx
c0002d0b:	83 c1 01             	add    ecx,0x1
c0002d0e:	83 d3 00             	adc    ebx,0x0
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d19:	89 d1                	mov    ecx,edx
c0002d1b:	89 c2                	mov    edx,eax
c0002d1d:	89 f8                	mov    eax,edi
c0002d1f:	e8 e1 f6 ff ff       	call   c0002405 <move_window>
c0002d24:	89 c1                	mov    ecx,eax
c0002d26:	85 c0                	test   eax,eax
c0002d28:	75 48                	jne    c0002d72 <change_bitmap+0x9f>
c0002d2a:	31 d2                	xor    edx,edx
c0002d2c:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d30:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d34:	0f 95 c2             	setne  dl
c0002d37:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d3b:	74 3c                	je     c0002d79 <change_bitmap+0xa6>
c0002d3d:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d41:	4d                   	dec    ebp
c0002d42:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d46:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d4a:	74 32                	je     c0002d7e <change_bitmap+0xab>
c0002d4c:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d50:	75 d8                	jne    c0002d2a <change_bitmap+0x57>
c0002d52:	8d 46 01             	lea    eax,[esi+0x1]
c0002d55:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d5a:	89 c3                	mov    ebx,eax
c0002d5c:	31 f6                	xor    esi,esi
c0002d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d66:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d6c:	74 99                	je     c0002d07 <change_bitmap+0x34>
c0002d6e:	89 de                	mov    esi,ebx
c0002d70:	eb b8                	jmp    c0002d2a <change_bitmap+0x57>
c0002d72:	b9 01 00 00 00       	mov    ecx,0x1
c0002d77:	eb 05                	jmp    c0002d7e <change_bitmap+0xab>
c0002d79:	b9 02 00 00 00       	mov    ecx,0x2
c0002d7e:	83 c4 1c             	add    esp,0x1c
c0002d81:	89 c8                	mov    eax,ecx
c0002d83:	5b                   	pop    ebx
c0002d84:	5e                   	pop    esi
c0002d85:	5f                   	pop    edi
c0002d86:	5d                   	pop    ebp
c0002d87:	c3                   	ret    

c0002d88 <put_fat>:
c0002d88:	83 fa 01             	cmp    edx,0x1
c0002d8b:	0f 86 7b 01 00 00    	jbe    c0002f0c <put_fat+0x184>
c0002d91:	55                   	push   ebp
c0002d92:	57                   	push   edi
c0002d93:	89 cf                	mov    edi,ecx
c0002d95:	56                   	push   esi
c0002d96:	b9 02 00 00 00       	mov    ecx,0x2
c0002d9b:	53                   	push   ebx
c0002d9c:	89 c6                	mov    esi,eax
c0002d9e:	83 ec 1c             	sub    esp,0x1c
c0002da1:	89 d3                	mov    ebx,edx
c0002da3:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002da6:	0f 86 68 01 00 00    	jbe    c0002f14 <put_fat+0x18c>
c0002dac:	8a 00                	mov    al,BYTE PTR [eax]
c0002dae:	3c 02                	cmp    al,0x2
c0002db0:	0f 84 c7 00 00 00    	je     c0002e7d <put_fat+0xf5>
c0002db6:	77 09                	ja     c0002dc1 <put_fat+0x39>
c0002db8:	fe c8                	dec    al
c0002dba:	74 17                	je     c0002dd3 <put_fat+0x4b>
c0002dbc:	e9 53 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0002dc6:	3c 04                	cmp    al,0x4
c0002dc8:	0f 86 e1 00 00 00    	jbe    c0002eaf <put_fat+0x127>
c0002dce:	e9 41 01 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002dd3:	89 d5                	mov    ebp,edx
c0002dd5:	31 c9                	xor    ecx,ecx
c0002dd7:	d1 ed                	shr    ebp,1
c0002dd9:	89 f0                	mov    eax,esi
c0002ddb:	01 d5                	add    ebp,edx
c0002ddd:	89 ea                	mov    edx,ebp
c0002ddf:	c1 ea 09             	shr    edx,0x9
c0002de2:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002de5:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002de8:	e8 18 f6 ff ff       	call   c0002405 <move_window>
c0002ded:	89 c1                	mov    ecx,eax
c0002def:	85 c0                	test   eax,eax
c0002df1:	0f 85 1d 01 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002df7:	8d 46 54             	lea    eax,[esi+0x54]
c0002dfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dfe:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e01:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e0b:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e0f:	89 f8                	mov    eax,edi
c0002e11:	83 e3 01             	and    ebx,0x1
c0002e14:	74 0d                	je     c0002e23 <put_fat+0x9b>
c0002e16:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e19:	89 fa                	mov    edx,edi
c0002e1b:	83 e0 0f             	and    eax,0xf
c0002e1e:	c1 e2 04             	shl    edx,0x4
c0002e21:	09 d0                	or     eax,edx
c0002e23:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e2a:	31 c9                	xor    ecx,ecx
c0002e2c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e30:	c1 ea 09             	shr    edx,0x9
c0002e33:	89 f0                	mov    eax,esi
c0002e35:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e38:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e3b:	e8 c5 f5 ff ff       	call   c0002405 <move_window>
c0002e40:	89 c1                	mov    ecx,eax
c0002e42:	85 c0                	test   eax,eax
c0002e44:	0f 85 ca 00 00 00    	jne    c0002f14 <put_fat+0x18c>
c0002e4a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e4e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e54:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e58:	85 db                	test   ebx,ebx
c0002e5a:	74 07                	je     c0002e63 <put_fat+0xdb>
c0002e5c:	c1 ef 04             	shr    edi,0x4
c0002e5f:	89 fa                	mov    edx,edi
c0002e61:	eb 0e                	jmp    c0002e71 <put_fat+0xe9>
c0002e63:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e66:	c1 ef 08             	shr    edi,0x8
c0002e69:	83 e2 f0             	and    edx,0xfffffff0
c0002e6c:	83 e7 0f             	and    edi,0xf
c0002e6f:	09 fa                	or     edx,edi
c0002e71:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e74:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e78:	e9 97 00 00 00       	jmp    c0002f14 <put_fat+0x18c>
c0002e7d:	31 c9                	xor    ecx,ecx
c0002e7f:	c1 ea 08             	shr    edx,0x8
c0002e82:	89 f0                	mov    eax,esi
c0002e84:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e87:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e8a:	e8 76 f5 ff ff       	call   c0002405 <move_window>
c0002e8f:	89 c1                	mov    ecx,eax
c0002e91:	85 c0                	test   eax,eax
c0002e93:	75 7f                	jne    c0002f14 <put_fat+0x18c>
c0002e95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e99:	01 db                	add    ebx,ebx
c0002e9b:	0f b7 d7             	movzx  edx,di
c0002e9e:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ea4:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ea8:	e8 ec ed ff ff       	call   c0001c99 <st_word>
c0002ead:	eb 53                	jmp    c0002f02 <put_fat+0x17a>
c0002eaf:	31 c9                	xor    ecx,ecx
c0002eb1:	c1 ea 07             	shr    edx,0x7
c0002eb4:	89 f0                	mov    eax,esi
c0002eb6:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002eb9:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebc:	e8 44 f5 ff ff       	call   c0002405 <move_window>
c0002ec1:	89 c1                	mov    ecx,eax
c0002ec3:	85 c0                	test   eax,eax
c0002ec5:	75 4d                	jne    c0002f14 <put_fat+0x18c>
c0002ec7:	c1 e3 02             	shl    ebx,0x2
c0002eca:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ed0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ed3:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ed7:	74 1c                	je     c0002ef5 <put_fat+0x16d>
c0002ed9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002edd:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ee3:	89 d8                	mov    eax,ebx
c0002ee5:	e8 4a ed ff ff       	call   c0001c34 <ld_dword>
c0002eea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002eee:	25 00 00 00 f0       	and    eax,0xf0000000
c0002ef3:	09 c7                	or     edi,eax
c0002ef5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ef9:	89 fa                	mov    edx,edi
c0002efb:	89 d8                	mov    eax,ebx
c0002efd:	e8 9b ed ff ff       	call   c0001c9d <st_dword>
c0002f02:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f06:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f0a:	eb 08                	jmp    c0002f14 <put_fat+0x18c>
c0002f0c:	b9 02 00 00 00       	mov    ecx,0x2
c0002f11:	89 c8                	mov    eax,ecx
c0002f13:	c3                   	ret    
c0002f14:	83 c4 1c             	add    esp,0x1c
c0002f17:	89 c8                	mov    eax,ecx
c0002f19:	5b                   	pop    ebx
c0002f1a:	5e                   	pop    esi
c0002f1b:	5f                   	pop    edi
c0002f1c:	5d                   	pop    ebp
c0002f1d:	c3                   	ret    

c0002f1e <fill_last_frag>:
c0002f1e:	57                   	push   edi
c0002f1f:	89 cf                	mov    edi,ecx
c0002f21:	56                   	push   esi
c0002f22:	89 d6                	mov    esi,edx
c0002f24:	53                   	push   ebx
c0002f25:	89 c3                	mov    ebx,eax
c0002f27:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f2a:	85 c0                	test   eax,eax
c0002f2c:	74 21                	je     c0002f4f <fill_last_frag+0x31>
c0002f2e:	89 f9                	mov    ecx,edi
c0002f30:	83 f8 01             	cmp    eax,0x1
c0002f33:	76 05                	jbe    c0002f3a <fill_last_frag+0x1c>
c0002f35:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f38:	29 c1                	sub    ecx,eax
c0002f3a:	8d 56 01             	lea    edx,[esi+0x1]
c0002f3d:	29 c2                	sub    edx,eax
c0002f3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f41:	e8 42 fe ff ff       	call   c0002d88 <put_fat>
c0002f46:	85 c0                	test   eax,eax
c0002f48:	75 05                	jne    c0002f4f <fill_last_frag+0x31>
c0002f4a:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f4d:	eb d8                	jmp    c0002f27 <fill_last_frag+0x9>
c0002f4f:	5b                   	pop    ebx
c0002f50:	5e                   	pop    esi
c0002f51:	5f                   	pop    edi
c0002f52:	c3                   	ret    

c0002f53 <fill_first_frag>:
c0002f53:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f57:	75 2d                	jne    c0002f86 <fill_first_frag+0x33>
c0002f59:	57                   	push   edi
c0002f5a:	56                   	push   esi
c0002f5b:	53                   	push   ebx
c0002f5c:	89 c3                	mov    ebx,eax
c0002f5e:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f61:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f64:	01 d7                	add    edi,edx
c0002f66:	39 fa                	cmp    edx,edi
c0002f68:	74 14                	je     c0002f7e <fill_first_frag+0x2b>
c0002f6a:	8d 72 01             	lea    esi,[edx+0x1]
c0002f6d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f6f:	89 f1                	mov    ecx,esi
c0002f71:	e8 12 fe ff ff       	call   c0002d88 <put_fat>
c0002f76:	89 f2                	mov    edx,esi
c0002f78:	85 c0                	test   eax,eax
c0002f7a:	74 ea                	je     c0002f66 <fill_first_frag+0x13>
c0002f7c:	eb 0b                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f7e:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f82:	31 c0                	xor    eax,eax
c0002f84:	eb 03                	jmp    c0002f89 <fill_first_frag+0x36>
c0002f86:	31 c0                	xor    eax,eax
c0002f88:	c3                   	ret    
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <get_fat>:
c0002f8d:	83 fa 01             	cmp    edx,0x1
c0002f90:	0f 86 db 01 00 00    	jbe    c0003171 <get_fat+0x1e4>
c0002f96:	55                   	push   ebp
c0002f97:	b9 01 00 00 00       	mov    ecx,0x1
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	83 ec 1c             	sub    esp,0x1c
c0002fa2:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa4:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fa7:	0f 86 cc 01 00 00    	jbe    c0003179 <get_fat+0x1ec>
c0002fad:	89 c3                	mov    ebx,eax
c0002faf:	89 d6                	mov    esi,edx
c0002fb1:	8a 07                	mov    al,BYTE PTR [edi]
c0002fb3:	3c 02                	cmp    al,0x2
c0002fb5:	0f 84 99 00 00 00    	je     c0003054 <get_fat+0xc7>
c0002fbb:	77 09                	ja     c0002fc6 <get_fat+0x39>
c0002fbd:	fe c8                	dec    al
c0002fbf:	74 1a                	je     c0002fdb <get_fat+0x4e>
c0002fc1:	e9 b3 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fc6:	3c 03                	cmp    al,0x3
c0002fc8:	0f 84 b5 00 00 00    	je     c0003083 <get_fat+0xf6>
c0002fce:	3c 04                	cmp    al,0x4
c0002fd0:	0f 84 e3 00 00 00    	je     c00030b9 <get_fat+0x12c>
c0002fd6:	e9 9e 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0002fdb:	89 d3                	mov    ebx,edx
c0002fdd:	31 c9                	xor    ecx,ecx
c0002fdf:	d1 eb                	shr    ebx,1
c0002fe1:	89 f8                	mov    eax,edi
c0002fe3:	01 d3                	add    ebx,edx
c0002fe5:	89 da                	mov    edx,ebx
c0002fe7:	c1 ea 09             	shr    edx,0x9
c0002fea:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fed:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ff0:	e8 10 f4 ff ff       	call   c0002405 <move_window>
c0002ff5:	85 c0                	test   eax,eax
c0002ff7:	74 08                	je     c0003001 <get_fat+0x74>
c0002ff9:	83 c9 ff             	or     ecx,0xffffffff
c0002ffc:	e9 78 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003001:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003004:	31 c9                	xor    ecx,ecx
c0003006:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000300c:	89 ea                	mov    edx,ebp
c000300e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003012:	c1 ea 09             	shr    edx,0x9
c0003015:	89 f8                	mov    eax,edi
c0003017:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000301a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000301d:	e8 e3 f3 ff ff       	call   c0002405 <move_window>
c0003022:	85 c0                	test   eax,eax
c0003024:	75 d3                	jne    c0002ff9 <get_fat+0x6c>
c0003026:	0f b6 c3             	movzx  eax,bl
c0003029:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000302f:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0003034:	c1 e3 08             	shl    ebx,0x8
c0003037:	09 c3                	or     ebx,eax
c0003039:	89 d9                	mov    ecx,ebx
c000303b:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003041:	83 e6 01             	and    esi,0x1
c0003044:	0f 84 2f 01 00 00    	je     c0003179 <get_fat+0x1ec>
c000304a:	89 d9                	mov    ecx,ebx
c000304c:	c1 e9 04             	shr    ecx,0x4
c000304f:	e9 25 01 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003054:	31 c9                	xor    ecx,ecx
c0003056:	c1 ea 08             	shr    edx,0x8
c0003059:	89 f8                	mov    eax,edi
c000305b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000305e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003061:	e8 9f f3 ff ff       	call   c0002405 <move_window>
c0003066:	85 c0                	test   eax,eax
c0003068:	75 8f                	jne    c0002ff9 <get_fat+0x6c>
c000306a:	01 f6                	add    esi,esi
c000306c:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0003072:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003076:	e8 ac eb ff ff       	call   c0001c27 <ld_word>
c000307b:	0f b7 c8             	movzx  ecx,ax
c000307e:	e9 f6 00 00 00       	jmp    c0003179 <get_fat+0x1ec>
c0003083:	31 c9                	xor    ecx,ecx
c0003085:	c1 ea 07             	shr    edx,0x7
c0003088:	89 f8                	mov    eax,edi
c000308a:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000308d:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003090:	e8 70 f3 ff ff       	call   c0002405 <move_window>
c0003095:	85 c0                	test   eax,eax
c0003097:	0f 85 5c ff ff ff    	jne    c0002ff9 <get_fat+0x6c>
c000309d:	c1 e6 02             	shl    esi,0x2
c00030a0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030a6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030aa:	e8 85 eb ff ff       	call   c0001c34 <ld_dword>
c00030af:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030b4:	e9 b4 00 00 00       	jmp    c000316d <get_fat+0x1e0>
c00030b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030bf:	89 d1                	mov    ecx,edx
c00030c1:	09 c1                	or     ecx,eax
c00030c3:	74 06                	je     c00030cb <get_fat+0x13e>
c00030c5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030c9:	75 0f                	jne    c00030da <get_fat+0x14d>
c00030cb:	b9 01 00 00 00       	mov    ecx,0x1
c00030d0:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030d4:	0f 85 9f 00 00 00    	jne    c0003179 <get_fat+0x1ec>
c00030da:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030de:	89 f5                	mov    ebp,esi
c00030e0:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c00030e5:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c00030e8:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c00030eb:	80 f9 02             	cmp    cl,0x2
c00030ee:	75 35                	jne    c0003125 <get_fat+0x198>
c00030f0:	83 c0 ff             	add    eax,0xffffffff
c00030f3:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c00030f8:	83 d2 ff             	adc    edx,0xffffffff
c00030fb:	31 db                	xor    ebx,ebx
c00030fd:	0f ac d0 09          	shrd   eax,edx,0x9
c0003101:	53                   	push   ebx
c0003102:	c1 ea 09             	shr    edx,0x9
c0003105:	51                   	push   ecx
c0003106:	52                   	push   edx
c0003107:	50                   	push   eax
c0003108:	e8 97 40 02 00       	call   c00271a4 <__udivdi3>
c000310d:	83 c4 10             	add    esp,0x10
c0003110:	b9 01 00 00 00       	mov    ecx,0x1
c0003115:	39 c5                	cmp    ebp,eax
c0003117:	77 60                	ja     c0003179 <get_fat+0x1ec>
c0003119:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000311e:	74 59                	je     c0003179 <get_fat+0x1ec>
c0003120:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003123:	eb 54                	jmp    c0003179 <get_fat+0x1ec>
c0003125:	80 f9 03             	cmp    cl,0x3
c0003128:	75 05                	jne    c000312f <get_fat+0x1a2>
c000312a:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c000312d:	77 f1                	ja     c0003120 <get_fat+0x193>
c000312f:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003134:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003138:	75 3f                	jne    c0003179 <get_fat+0x1ec>
c000313a:	31 c9                	xor    ecx,ecx
c000313c:	89 f2                	mov    edx,esi
c000313e:	89 f8                	mov    eax,edi
c0003140:	c1 ea 07             	shr    edx,0x7
c0003143:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003146:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003149:	e8 b7 f2 ff ff       	call   c0002405 <move_window>
c000314e:	85 c0                	test   eax,eax
c0003150:	0f 85 a3 fe ff ff    	jne    c0002ff9 <get_fat+0x6c>
c0003156:	c1 e6 02             	shl    esi,0x2
c0003159:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000315f:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003163:	e8 cc ea ff ff       	call   c0001c34 <ld_dword>
c0003168:	25 ff ff ff 7f       	and    eax,0x7fffffff
c000316d:	89 c1                	mov    ecx,eax
c000316f:	eb 08                	jmp    c0003179 <get_fat+0x1ec>
c0003171:	b9 01 00 00 00       	mov    ecx,0x1
c0003176:	89 c8                	mov    eax,ecx
c0003178:	c3                   	ret    
c0003179:	83 c4 1c             	add    esp,0x1c
c000317c:	89 c8                	mov    eax,ecx
c000317e:	5b                   	pop    ebx
c000317f:	5e                   	pop    esi
c0003180:	5f                   	pop    edi
c0003181:	5d                   	pop    ebp
c0003182:	c3                   	ret    

c0003183 <dir_sdi>:
c0003183:	55                   	push   ebp
c0003184:	57                   	push   edi
c0003185:	56                   	push   esi
c0003186:	53                   	push   ebx
c0003187:	89 c3                	mov    ebx,eax
c0003189:	83 ec 1c             	sub    esp,0x1c
c000318c:	8b 38                	mov    edi,DWORD PTR [eax]
c000318e:	31 c0                	xor    eax,eax
c0003190:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003193:	0f 94 c0             	sete   al
c0003196:	48                   	dec    eax
c0003197:	25 00 00 20 f0       	and    eax,0xf0200000
c000319c:	05 00 00 00 10       	add    eax,0x10000000
c00031a1:	39 d0                	cmp    eax,edx
c00031a3:	77 0a                	ja     c00031af <dir_sdi+0x2c>
c00031a5:	b8 02 00 00 00       	mov    eax,0x2
c00031aa:	e9 c4 00 00 00       	jmp    c0003273 <dir_sdi+0xf0>
c00031af:	89 d6                	mov    esi,edx
c00031b1:	f6 c2 1f             	test   dl,0x1f
c00031b4:	75 ef                	jne    c00031a5 <dir_sdi+0x22>
c00031b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031b9:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031bc:	85 c9                	test   ecx,ecx
c00031be:	75 2d                	jne    c00031ed <dir_sdi+0x6a>
c00031c0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031c3:	77 1b                	ja     c00031e0 <dir_sdi+0x5d>
c00031c5:	89 f2                	mov    edx,esi
c00031c7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031cb:	c1 ea 05             	shr    edx,0x5
c00031ce:	39 c2                	cmp    edx,eax
c00031d0:	73 d3                	jae    c00031a5 <dir_sdi+0x22>
c00031d2:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031d5:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031d8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031db:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031de:	eb 4b                	jmp    c000322b <dir_sdi+0xa8>
c00031e0:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031e3:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c00031e7:	85 c0                	test   eax,eax
c00031e9:	74 da                	je     c00031c5 <dir_sdi+0x42>
c00031eb:	89 c1                	mov    ecx,eax
c00031ed:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c00031f1:	c1 e5 09             	shl    ebp,0x9
c00031f4:	89 ca                	mov    edx,ecx
c00031f6:	39 ee                	cmp    esi,ebp
c00031f8:	72 1c                	jb     c0003216 <dir_sdi+0x93>
c00031fa:	89 d8                	mov    eax,ebx
c00031fc:	e8 8c fd ff ff       	call   c0002f8d <get_fat>
c0003201:	89 c1                	mov    ecx,eax
c0003203:	83 f8 ff             	cmp    eax,0xffffffff
c0003206:	74 66                	je     c000326e <dir_sdi+0xeb>
c0003208:	83 f8 01             	cmp    eax,0x1
c000320b:	76 98                	jbe    c00031a5 <dir_sdi+0x22>
c000320d:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003210:	76 93                	jbe    c00031a5 <dir_sdi+0x22>
c0003212:	29 ee                	sub    esi,ebp
c0003214:	eb de                	jmp    c00031f4 <dir_sdi+0x71>
c0003216:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000321a:	89 f8                	mov    eax,edi
c000321c:	e8 9f ec ff ff       	call   c0001ec0 <clst2sect>
c0003221:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003225:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000322b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000322e:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003231:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003234:	89 d1                	mov    ecx,edx
c0003236:	09 c1                	or     ecx,eax
c0003238:	0f 84 67 ff ff ff    	je     c00031a5 <dir_sdi+0x22>
c000323e:	89 f1                	mov    ecx,esi
c0003240:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003248:	c1 e9 09             	shr    ecx,0x9
c000324b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000324f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003253:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003257:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325a:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003260:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003263:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003267:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000326a:	31 c0                	xor    eax,eax
c000326c:	eb 05                	jmp    c0003273 <dir_sdi+0xf0>
c000326e:	b8 01 00 00 00       	mov    eax,0x1
c0003273:	83 c4 1c             	add    esp,0x1c
c0003276:	5b                   	pop    ebx
c0003277:	5e                   	pop    esi
c0003278:	5f                   	pop    edi
c0003279:	5d                   	pop    ebp
c000327a:	c3                   	ret    

c000327b <create_chain>:
c000327b:	55                   	push   ebp
c000327c:	89 c5                	mov    ebp,eax
c000327e:	57                   	push   edi
c000327f:	56                   	push   esi
c0003280:	53                   	push   ebx
c0003281:	83 ec 1c             	sub    esp,0x1c
c0003284:	85 d2                	test   edx,edx
c0003286:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000328a:	8b 30                	mov    esi,DWORD PTR [eax]
c000328c:	75 0e                	jne    c000329c <create_chain+0x21>
c000328e:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003291:	85 ff                	test   edi,edi
c0003293:	74 39                	je     c00032ce <create_chain+0x53>
c0003295:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003298:	77 39                	ja     c00032d3 <create_chain+0x58>
c000329a:	eb 32                	jmp    c00032ce <create_chain+0x53>
c000329c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032a0:	e8 e8 fc ff ff       	call   c0002f8d <get_fat>
c00032a5:	89 c3                	mov    ebx,eax
c00032a7:	83 f8 01             	cmp    eax,0x1
c00032aa:	77 0a                	ja     c00032b6 <create_chain+0x3b>
c00032ac:	bb 01 00 00 00       	mov    ebx,0x1
c00032b1:	e9 ba 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032b6:	83 f8 ff             	cmp    eax,0xffffffff
c00032b9:	0f 84 62 01 00 00    	je     c0003421 <create_chain+0x1a6>
c00032bf:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032c2:	0f 87 a8 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c00032c8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032cc:	eb 05                	jmp    c00032d3 <create_chain+0x58>
c00032ce:	bf 01 00 00 00       	mov    edi,0x1
c00032d3:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032d7:	75 07                	jne    c00032e0 <create_chain+0x65>
c00032d9:	31 db                	xor    ebx,ebx
c00032db:	e9 90 01 00 00       	jmp    c0003470 <create_chain+0x1f5>
c00032e0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032e3:	75 74                	jne    c0003359 <create_chain+0xde>
c00032e5:	b9 01 00 00 00       	mov    ecx,0x1
c00032ea:	89 fa                	mov    edx,edi
c00032ec:	89 f0                	mov    eax,esi
c00032ee:	e8 2d f9 ff ff       	call   c0002c20 <find_bitmap>
c00032f3:	89 c3                	mov    ebx,eax
c00032f5:	8d 40 ff             	lea    eax,[eax-0x1]
c00032f8:	83 f8 fd             	cmp    eax,0xfffffffd
c00032fb:	0f 87 6f 01 00 00    	ja     c0003470 <create_chain+0x1f5>
c0003301:	83 ec 0c             	sub    esp,0xc
c0003304:	b9 01 00 00 00       	mov    ecx,0x1
c0003309:	6a 01                	push   0x1
c000330b:	89 da                	mov    edx,ebx
c000330d:	89 f0                	mov    eax,esi
c000330f:	e8 bf f9 ff ff       	call   c0002cd3 <change_bitmap>
c0003314:	83 c4 10             	add    esp,0x10
c0003317:	83 f8 02             	cmp    eax,0x2
c000331a:	74 90                	je     c00032ac <create_chain+0x31>
c000331c:	83 f8 01             	cmp    eax,0x1
c000331f:	0f 84 fc 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000332a:	75 09                	jne    c0003335 <create_chain+0xba>
c000332c:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003330:	e9 0c 01 00 00       	jmp    c0003441 <create_chain+0x1c6>
c0003335:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003339:	0f 85 e7 00 00 00    	jne    c0003426 <create_chain+0x1ab>
c000333f:	8d 57 01             	lea    edx,[edi+0x1]
c0003342:	39 da                	cmp    edx,ebx
c0003344:	0f 84 f7 00 00 00    	je     c0003441 <create_chain+0x1c6>
c000334a:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c000334d:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003351:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003354:	e9 cd 00 00 00       	jmp    c0003426 <create_chain+0x1ab>
c0003359:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000335d:	75 41                	jne    c00033a0 <create_chain+0x125>
c000335f:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003362:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003365:	77 05                	ja     c000336c <create_chain+0xf1>
c0003367:	bb 02 00 00 00       	mov    ebx,0x2
c000336c:	89 da                	mov    edx,ebx
c000336e:	89 e8                	mov    eax,ebp
c0003370:	e8 18 fc ff ff       	call   c0002f8d <get_fat>
c0003375:	83 f8 01             	cmp    eax,0x1
c0003378:	0f 84 2e ff ff ff    	je     c00032ac <create_chain+0x31>
c000337e:	83 f8 ff             	cmp    eax,0xffffffff
c0003381:	0f 84 9a 00 00 00    	je     c0003421 <create_chain+0x1a6>
c0003387:	85 c0                	test   eax,eax
c0003389:	74 11                	je     c000339c <create_chain+0x121>
c000338b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000338e:	83 f8 01             	cmp    eax,0x1
c0003391:	76 0d                	jbe    c00033a0 <create_chain+0x125>
c0003393:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003396:	76 08                	jbe    c00033a0 <create_chain+0x125>
c0003398:	89 c7                	mov    edi,eax
c000339a:	eb 04                	jmp    c00033a0 <create_chain+0x125>
c000339c:	85 db                	test   ebx,ebx
c000339e:	75 38                	jne    c00033d8 <create_chain+0x15d>
c00033a0:	89 fb                	mov    ebx,edi
c00033a2:	43                   	inc    ebx
c00033a3:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033a6:	77 0e                	ja     c00033b6 <create_chain+0x13b>
c00033a8:	83 ff 01             	cmp    edi,0x1
c00033ab:	0f 86 28 ff ff ff    	jbe    c00032d9 <create_chain+0x5e>
c00033b1:	bb 02 00 00 00       	mov    ebx,0x2
c00033b6:	89 da                	mov    edx,ebx
c00033b8:	89 e8                	mov    eax,ebp
c00033ba:	e8 ce fb ff ff       	call   c0002f8d <get_fat>
c00033bf:	85 c0                	test   eax,eax
c00033c1:	74 15                	je     c00033d8 <create_chain+0x15d>
c00033c3:	83 f8 01             	cmp    eax,0x1
c00033c6:	0f 84 e0 fe ff ff    	je     c00032ac <create_chain+0x31>
c00033cc:	40                   	inc    eax
c00033cd:	74 52                	je     c0003421 <create_chain+0x1a6>
c00033cf:	39 fb                	cmp    ebx,edi
c00033d1:	75 cf                	jne    c00033a2 <create_chain+0x127>
c00033d3:	e9 01 ff ff ff       	jmp    c00032d9 <create_chain+0x5e>
c00033d8:	83 c9 ff             	or     ecx,0xffffffff
c00033db:	89 da                	mov    edx,ebx
c00033dd:	89 f0                	mov    eax,esi
c00033df:	e8 a4 f9 ff ff       	call   c0002d88 <put_fat>
c00033e4:	85 c0                	test   eax,eax
c00033e6:	75 32                	jne    c000341a <create_chain+0x19f>
c00033e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ed:	74 11                	je     c0003400 <create_chain+0x185>
c00033ef:	89 d9                	mov    ecx,ebx
c00033f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00033f5:	89 f0                	mov    eax,esi
c00033f7:	e8 8c f9 ff ff       	call   c0002d88 <put_fat>
c00033fc:	85 c0                	test   eax,eax
c00033fe:	75 1a                	jne    c000341a <create_chain+0x19f>
c0003400:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003403:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003406:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003409:	8d 51 fe             	lea    edx,[ecx-0x2]
c000340c:	39 d0                	cmp    eax,edx
c000340e:	77 04                	ja     c0003414 <create_chain+0x199>
c0003410:	48                   	dec    eax
c0003411:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003414:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003418:	eb 56                	jmp    c0003470 <create_chain+0x1f5>
c000341a:	48                   	dec    eax
c000341b:	0f 85 8b fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003421:	83 cb ff             	or     ebx,0xffffffff
c0003424:	eb 4a                	jmp    c0003470 <create_chain+0x1f5>
c0003426:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000342a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000342d:	41                   	inc    ecx
c000342e:	39 d9                	cmp    ecx,ebx
c0003430:	75 19                	jne    c000344b <create_chain+0x1d0>
c0003432:	b9 02 00 00 00       	mov    ecx,0x2
c0003437:	85 d2                	test   edx,edx
c0003439:	74 03                	je     c000343e <create_chain+0x1c3>
c000343b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000343e:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003441:	85 c0                	test   eax,eax
c0003443:	0f 85 63 fe ff ff    	jne    c00032ac <create_chain+0x31>
c0003449:	eb b5                	jmp    c0003400 <create_chain+0x185>
c000344b:	85 d2                	test   edx,edx
c000344d:	75 07                	jne    c0003456 <create_chain+0x1db>
c000344f:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003456:	89 d9                	mov    ecx,ebx
c0003458:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000345c:	89 e8                	mov    eax,ebp
c000345e:	e8 bb fa ff ff       	call   c0002f1e <fill_last_frag>
c0003463:	85 c0                	test   eax,eax
c0003465:	75 b3                	jne    c000341a <create_chain+0x19f>
c0003467:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000346e:	eb 90                	jmp    c0003400 <create_chain+0x185>
c0003470:	83 c4 1c             	add    esp,0x1c
c0003473:	89 d8                	mov    eax,ebx
c0003475:	5b                   	pop    ebx
c0003476:	5e                   	pop    esi
c0003477:	5f                   	pop    edi
c0003478:	5d                   	pop    ebp
c0003479:	c3                   	ret    

c000347a <remove_chain>:
c000347a:	55                   	push   ebp
c000347b:	57                   	push   edi
c000347c:	56                   	push   esi
c000347d:	53                   	push   ebx
c000347e:	83 ec 1c             	sub    esp,0x1c
c0003481:	83 fa 01             	cmp    edx,0x1
c0003484:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003488:	8b 18                	mov    ebx,DWORD PTR [eax]
c000348a:	77 0a                	ja     c0003496 <remove_chain+0x1c>
c000348c:	b8 02 00 00 00       	mov    eax,0x2
c0003491:	e9 24 01 00 00       	jmp    c00035ba <remove_chain+0x140>
c0003496:	89 d6                	mov    esi,edx
c0003498:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000349b:	76 ef                	jbe    c000348c <remove_chain+0x12>
c000349d:	89 c7                	mov    edi,eax
c000349f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034a4:	75 06                	jne    c00034ac <remove_chain+0x32>
c00034a6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034aa:	eb 54                	jmp    c0003500 <remove_chain+0x86>
c00034ac:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034af:	75 06                	jne    c00034b7 <remove_chain+0x3d>
c00034b1:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034b5:	74 ef                	je     c00034a6 <remove_chain+0x2c>
c00034b7:	83 c9 ff             	or     ecx,0xffffffff
c00034ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034be:	89 d8                	mov    eax,ebx
c00034c0:	e8 c3 f8 ff ff       	call   c0002d88 <put_fat>
c00034c5:	85 c0                	test   eax,eax
c00034c7:	74 dd                	je     c00034a6 <remove_chain+0x2c>
c00034c9:	e9 ec 00 00 00       	jmp    c00035ba <remove_chain+0x140>
c00034ce:	83 f8 01             	cmp    eax,0x1
c00034d1:	74 b9                	je     c000348c <remove_chain+0x12>
c00034d3:	83 f8 ff             	cmp    eax,0xffffffff
c00034d6:	74 6d                	je     c0003545 <remove_chain+0xcb>
c00034d8:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034db:	75 6f                	jne    c000354c <remove_chain+0xd2>
c00034dd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034e0:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034e3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00034e6:	39 d0                	cmp    eax,edx
c00034e8:	73 08                	jae    c00034f2 <remove_chain+0x78>
c00034ea:	40                   	inc    eax
c00034eb:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00034ef:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00034f2:	8d 4e 01             	lea    ecx,[esi+0x1]
c00034f5:	39 e9                	cmp    ecx,ebp
c00034f7:	75 64                	jne    c000355d <remove_chain+0xe3>
c00034f9:	89 ee                	mov    esi,ebp
c00034fb:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00034fe:	76 0f                	jbe    c000350f <remove_chain+0x95>
c0003500:	89 f2                	mov    edx,esi
c0003502:	89 f8                	mov    eax,edi
c0003504:	e8 84 fa ff ff       	call   c0002f8d <get_fat>
c0003509:	89 c5                	mov    ebp,eax
c000350b:	85 c0                	test   eax,eax
c000350d:	75 bf                	jne    c00034ce <remove_chain+0x54>
c000350f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003512:	0f 85 a0 00 00 00    	jne    c00035b8 <remove_chain+0x13e>
c0003518:	eb 6c                	jmp    c0003586 <remove_chain+0x10c>
c000351a:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000351d:	84 c0                	test   al,al
c000351f:	75 7d                	jne    c000359e <remove_chain+0x124>
c0003521:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003524:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003528:	0f 84 86 00 00 00    	je     c00035b4 <remove_chain+0x13a>
c000352e:	89 da                	mov    edx,ebx
c0003530:	89 f8                	mov    eax,edi
c0003532:	e8 56 fa ff ff       	call   c0002f8d <get_fat>
c0003537:	83 f8 01             	cmp    eax,0x1
c000353a:	0f 86 4c ff ff ff    	jbe    c000348c <remove_chain+0x12>
c0003540:	83 f8 ff             	cmp    eax,0xffffffff
c0003543:	75 4e                	jne    c0003593 <remove_chain+0x119>
c0003545:	b8 01 00 00 00       	mov    eax,0x1
c000354a:	eb 6e                	jmp    c00035ba <remove_chain+0x140>
c000354c:	31 c9                	xor    ecx,ecx
c000354e:	89 f2                	mov    edx,esi
c0003550:	89 d8                	mov    eax,ebx
c0003552:	e8 31 f8 ff ff       	call   c0002d88 <put_fat>
c0003557:	85 c0                	test   eax,eax
c0003559:	74 82                	je     c00034dd <remove_chain+0x63>
c000355b:	eb 5d                	jmp    c00035ba <remove_chain+0x140>
c000355d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003560:	75 1b                	jne    c000357d <remove_chain+0x103>
c0003562:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003566:	89 d8                	mov    eax,ebx
c0003568:	83 ec 0c             	sub    esp,0xc
c000356b:	6a 00                	push   0x0
c000356d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003571:	e8 5d f7 ff ff       	call   c0002cd3 <change_bitmap>
c0003576:	83 c4 10             	add    esp,0x10
c0003579:	85 c0                	test   eax,eax
c000357b:	75 3d                	jne    c00035ba <remove_chain+0x140>
c000357d:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003581:	e9 73 ff ff ff       	jmp    c00034f9 <remove_chain+0x7f>
c0003586:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000358b:	75 8d                	jne    c000351a <remove_chain+0xa0>
c000358d:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003591:	eb 25                	jmp    c00035b8 <remove_chain+0x13e>
c0003593:	8d 53 01             	lea    edx,[ebx+0x1]
c0003596:	89 c3                	mov    ebx,eax
c0003598:	39 c2                	cmp    edx,eax
c000359a:	74 88                	je     c0003524 <remove_chain+0xaa>
c000359c:	eb 1a                	jmp    c00035b8 <remove_chain+0x13e>
c000359e:	3c 03                	cmp    al,0x3
c00035a0:	75 16                	jne    c00035b8 <remove_chain+0x13e>
c00035a2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035a5:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035a9:	77 0d                	ja     c00035b8 <remove_chain+0x13e>
c00035ab:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035ae:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035b2:	72 04                	jb     c00035b8 <remove_chain+0x13e>
c00035b4:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035b8:	31 c0                	xor    eax,eax
c00035ba:	83 c4 1c             	add    esp,0x1c
c00035bd:	5b                   	pop    ebx
c00035be:	5e                   	pop    esi
c00035bf:	5f                   	pop    edi
c00035c0:	5d                   	pop    ebp
c00035c1:	c3                   	ret    

c00035c2 <dir_clear>:
c00035c2:	55                   	push   ebp
c00035c3:	57                   	push   edi
c00035c4:	56                   	push   esi
c00035c5:	89 c6                	mov    esi,eax
c00035c7:	53                   	push   ebx
c00035c8:	83 ec 1c             	sub    esp,0x1c
c00035cb:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035cf:	e8 9d ed ff ff       	call   c0002371 <sync_window>
c00035d4:	85 c0                	test   eax,eax
c00035d6:	0f 85 de 00 00 00    	jne    c00036ba <dir_clear+0xf8>
c00035dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	8d 6e 54             	lea    ebp,[esi+0x54]
c00035e5:	e8 d6 e8 ff ff       	call   c0001ec0 <clst2sect>
c00035ea:	b9 00 02 00 00       	mov    ecx,0x200
c00035ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00035f7:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00035fa:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00035fd:	89 e8                	mov    eax,ebp
c00035ff:	31 d2                	xor    edx,edx
c0003601:	e8 b5 e6 ff ff       	call   c0001cbb <mem_set>
c0003606:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000360a:	c1 e3 09             	shl    ebx,0x9
c000360d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003613:	76 1f                	jbe    c0003634 <dir_clear+0x72>
c0003615:	bb 00 80 00 00       	mov    ebx,0x8000
c000361a:	eb 18                	jmp    c0003634 <dir_clear+0x72>
c000361c:	83 ec 0c             	sub    esp,0xc
c000361f:	53                   	push   ebx
c0003620:	e8 35 4e 00 00       	call   c000845a <ff_memalloc>
c0003625:	83 c4 10             	add    esp,0x10
c0003628:	89 c7                	mov    edi,eax
c000362a:	85 c0                	test   eax,eax
c000362c:	0f 85 8f 00 00 00    	jne    c00036c1 <dir_clear+0xff>
c0003632:	d1 eb                	shr    ebx,1
c0003634:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000363a:	77 e0                	ja     c000361c <dir_clear+0x5a>
c000363c:	31 db                	xor    ebx,ebx
c000363e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003642:	39 d8                	cmp    eax,ebx
c0003644:	76 66                	jbe    c00036ac <dir_clear+0xea>
c0003646:	83 ec 0c             	sub    esp,0xc
c0003649:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000364d:	6a 01                	push   0x1
c000364f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003653:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003657:	55                   	push   ebp
c0003658:	50                   	push   eax
c0003659:	e8 94 e5 ff ff       	call   c0001bf2 <disk_write>
c000365e:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003663:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003668:	83 c4 20             	add    esp,0x20
c000366b:	85 c0                	test   eax,eax
c000366d:	75 3d                	jne    c00036ac <dir_clear+0xea>
c000366f:	43                   	inc    ebx
c0003670:	eb cc                	jmp    c000363e <dir_clear+0x7c>
c0003672:	83 ec 0c             	sub    esp,0xc
c0003675:	31 d2                	xor    edx,edx
c0003677:	55                   	push   ebp
c0003678:	89 d8                	mov    eax,ebx
c000367a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000367e:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003682:	52                   	push   edx
c0003683:	50                   	push   eax
c0003684:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003688:	57                   	push   edi
c0003689:	50                   	push   eax
c000368a:	e8 63 e5 ff ff       	call   c0001bf2 <disk_write>
c000368f:	83 c4 20             	add    esp,0x20
c0003692:	85 c0                	test   eax,eax
c0003694:	75 0a                	jne    c00036a0 <dir_clear+0xde>
c0003696:	01 eb                	add    ebx,ebp
c0003698:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000369c:	39 d8                	cmp    eax,ebx
c000369e:	77 d2                	ja     c0003672 <dir_clear+0xb0>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	57                   	push   edi
c00036a4:	e8 c7 4d 00 00       	call   c0008470 <ff_memfree>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b0:	39 d8                	cmp    eax,ebx
c00036b2:	0f 95 c0             	setne  al
c00036b5:	0f b6 c0             	movzx  eax,al
c00036b8:	eb 19                	jmp    c00036d3 <dir_clear+0x111>
c00036ba:	b8 01 00 00 00       	mov    eax,0x1
c00036bf:	eb 12                	jmp    c00036d3 <dir_clear+0x111>
c00036c1:	89 d9                	mov    ecx,ebx
c00036c3:	31 d2                	xor    edx,edx
c00036c5:	c1 eb 09             	shr    ebx,0x9
c00036c8:	e8 ee e5 ff ff       	call   c0001cbb <mem_set>
c00036cd:	89 dd                	mov    ebp,ebx
c00036cf:	31 db                	xor    ebx,ebx
c00036d1:	eb c5                	jmp    c0003698 <dir_clear+0xd6>
c00036d3:	83 c4 1c             	add    esp,0x1c
c00036d6:	5b                   	pop    ebx
c00036d7:	5e                   	pop    esi
c00036d8:	5f                   	pop    edi
c00036d9:	5d                   	pop    ebp
c00036da:	c3                   	ret    

c00036db <dir_next>:
c00036db:	55                   	push   ebp
c00036dc:	57                   	push   edi
c00036dd:	56                   	push   esi
c00036de:	53                   	push   ebx
c00036df:	89 c3                	mov    ebx,eax
c00036e1:	83 ec 1c             	sub    esp,0x1c
c00036e4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00036e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00036ea:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00036ed:	8d 78 20             	lea    edi,[eax+0x20]
c00036f0:	31 c0                	xor    eax,eax
c00036f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00036f6:	0f 94 c0             	sete   al
c00036f9:	48                   	dec    eax
c00036fa:	25 00 00 20 f0       	and    eax,0xf0200000
c00036ff:	05 00 00 00 10       	add    eax,0x10000000
c0003704:	39 f8                	cmp    eax,edi
c0003706:	77 0e                	ja     c0003716 <dir_next+0x3b>
c0003708:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000370f:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003716:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003719:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371c:	b8 04 00 00 00       	mov    eax,0x4
c0003721:	89 ce                	mov    esi,ecx
c0003723:	09 d6                	or     esi,edx
c0003725:	0f 84 da 00 00 00    	je     c0003805 <dir_next+0x12a>
c000372b:	89 f8                	mov    eax,edi
c000372d:	25 ff 01 00 00       	and    eax,0x1ff
c0003732:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003736:	0f 85 b9 00 00 00    	jne    c00037f5 <dir_next+0x11a>
c000373c:	83 c2 01             	add    edx,0x1
c000373f:	83 d1 00             	adc    ecx,0x0
c0003742:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003745:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003748:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000374b:	85 d2                	test   edx,edx
c000374d:	75 29                	jne    c0003778 <dir_next+0x9d>
c000374f:	89 fa                	mov    edx,edi
c0003751:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003755:	c1 ea 05             	shr    edx,0x5
c0003758:	39 c2                	cmp    edx,eax
c000375a:	0f 82 95 00 00 00    	jb     c00037f5 <dir_next+0x11a>
c0003760:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003767:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000376e:	b8 04 00 00 00       	mov    eax,0x4
c0003773:	e9 8d 00 00 00       	jmp    c0003805 <dir_next+0x12a>
c0003778:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000377c:	89 f9                	mov    ecx,edi
c000377e:	48                   	dec    eax
c000377f:	c1 e9 09             	shr    ecx,0x9
c0003782:	85 c8                	test   eax,ecx
c0003784:	75 6f                	jne    c00037f5 <dir_next+0x11a>
c0003786:	89 d8                	mov    eax,ebx
c0003788:	e8 00 f8 ff ff       	call   c0002f8d <get_fat>
c000378d:	89 c6                	mov    esi,eax
c000378f:	83 f8 01             	cmp    eax,0x1
c0003792:	77 07                	ja     c000379b <dir_next+0xc0>
c0003794:	b8 02 00 00 00       	mov    eax,0x2
c0003799:	eb 6a                	jmp    c0003805 <dir_next+0x12a>
c000379b:	83 f8 ff             	cmp    eax,0xffffffff
c000379e:	75 07                	jne    c00037a7 <dir_next+0xcc>
c00037a0:	b8 01 00 00 00       	mov    eax,0x1
c00037a5:	eb 5e                	jmp    c0003805 <dir_next+0x12a>
c00037a7:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037aa:	77 37                	ja     c00037e3 <dir_next+0x108>
c00037ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037b1:	74 ad                	je     c0003760 <dir_next+0x85>
c00037b3:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037b6:	89 d8                	mov    eax,ebx
c00037b8:	e8 be fa ff ff       	call   c000327b <create_chain>
c00037bd:	89 c6                	mov    esi,eax
c00037bf:	b8 07 00 00 00       	mov    eax,0x7
c00037c4:	85 f6                	test   esi,esi
c00037c6:	74 3d                	je     c0003805 <dir_next+0x12a>
c00037c8:	83 fe 01             	cmp    esi,0x1
c00037cb:	74 c7                	je     c0003794 <dir_next+0xb9>
c00037cd:	83 fe ff             	cmp    esi,0xffffffff
c00037d0:	74 ce                	je     c00037a0 <dir_next+0xc5>
c00037d2:	89 f2                	mov    edx,esi
c00037d4:	89 e8                	mov    eax,ebp
c00037d6:	e8 e7 fd ff ff       	call   c00035c2 <dir_clear>
c00037db:	85 c0                	test   eax,eax
c00037dd:	75 c1                	jne    c00037a0 <dir_next+0xc5>
c00037df:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00037e6:	89 f2                	mov    edx,esi
c00037e8:	89 e8                	mov    eax,ebp
c00037ea:	e8 d1 e6 ff ff       	call   c0001ec0 <clst2sect>
c00037ef:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00037f2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00037f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037f9:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00037fc:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003800:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003803:	31 c0                	xor    eax,eax
c0003805:	83 c4 1c             	add    esp,0x1c
c0003808:	5b                   	pop    ebx
c0003809:	5e                   	pop    esi
c000380a:	5f                   	pop    edi
c000380b:	5d                   	pop    ebp
c000380c:	c3                   	ret    

c000380d <load_xdir>:
c000380d:	55                   	push   ebp
c000380e:	57                   	push   edi
c000380f:	56                   	push   esi
c0003810:	89 c6                	mov    esi,eax
c0003812:	53                   	push   ebx
c0003813:	83 ec 1c             	sub    esp,0x1c
c0003816:	8b 00                	mov    eax,DWORD PTR [eax]
c0003818:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000381b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000381e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003821:	e8 df eb ff ff       	call   c0002405 <move_window>
c0003826:	89 c3                	mov    ebx,eax
c0003828:	85 c0                	test   eax,eax
c000382a:	0f 85 0c 01 00 00    	jne    c000393c <load_xdir+0x12f>
c0003830:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003833:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003836:	0f 85 fb 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c000383c:	89 f8                	mov    eax,edi
c000383e:	b9 20 00 00 00       	mov    ecx,0x20
c0003843:	e8 5e e4 ff ff       	call   c0001ca6 <mem_cpy>
c0003848:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c000384c:	40                   	inc    eax
c000384d:	c1 e0 05             	shl    eax,0x5
c0003850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003854:	83 e8 60             	sub    eax,0x60
c0003857:	3d 00 02 00 00       	cmp    eax,0x200
c000385c:	0f 87 d5 00 00 00    	ja     c0003937 <load_xdir+0x12a>
c0003862:	31 d2                	xor    edx,edx
c0003864:	89 f0                	mov    eax,esi
c0003866:	e8 70 fe ff ff       	call   c00036db <dir_next>
c000386b:	89 c3                	mov    ebx,eax
c000386d:	83 f8 04             	cmp    eax,0x4
c0003870:	0f 84 c1 00 00 00    	je     c0003937 <load_xdir+0x12a>
c0003876:	85 c0                	test   eax,eax
c0003878:	0f 85 be 00 00 00    	jne    c000393c <load_xdir+0x12f>
c000387e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003881:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003884:	8b 06                	mov    eax,DWORD PTR [esi]
c0003886:	e8 7a eb ff ff       	call   c0002405 <move_window>
c000388b:	89 c3                	mov    ebx,eax
c000388d:	85 c0                	test   eax,eax
c000388f:	0f 85 a7 00 00 00    	jne    c000393c <load_xdir+0x12f>
c0003895:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003898:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000389b:	0f 85 96 00 00 00    	jne    c0003937 <load_xdir+0x12a>
c00038a1:	8d 47 20             	lea    eax,[edi+0x20]
c00038a4:	b9 20 00 00 00       	mov    ecx,0x20
c00038a9:	e8 f8 e3 ff ff       	call   c0001ca6 <mem_cpy>
c00038ae:	31 d2                	xor    edx,edx
c00038b0:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038b4:	b9 0f 00 00 00       	mov    ecx,0xf
c00038b9:	83 c0 2c             	add    eax,0x2c
c00038bc:	f7 f1                	div    ecx
c00038be:	c1 e0 05             	shl    eax,0x5
c00038c1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038c5:	77 70                	ja     c0003937 <load_xdir+0x12a>
c00038c7:	bd 40 00 00 00       	mov    ebp,0x40
c00038cc:	31 d2                	xor    edx,edx
c00038ce:	89 f0                	mov    eax,esi
c00038d0:	e8 06 fe ff ff       	call   c00036db <dir_next>
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 f8 04             	cmp    eax,0x4
c00038da:	74 5b                	je     c0003937 <load_xdir+0x12a>
c00038dc:	85 c0                	test   eax,eax
c00038de:	75 5c                	jne    c000393c <load_xdir+0x12f>
c00038e0:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038e3:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038e6:	8b 06                	mov    eax,DWORD PTR [esi]
c00038e8:	e8 18 eb ff ff       	call   c0002405 <move_window>
c00038ed:	89 c3                	mov    ebx,eax
c00038ef:	85 c0                	test   eax,eax
c00038f1:	75 49                	jne    c000393c <load_xdir+0x12f>
c00038f3:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038f6:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00038f9:	75 3c                	jne    c0003937 <load_xdir+0x12a>
c00038fb:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003901:	77 0d                	ja     c0003910 <load_xdir+0x103>
c0003903:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003906:	b9 20 00 00 00       	mov    ecx,0x20
c000390b:	e8 96 e3 ff ff       	call   c0001ca6 <mem_cpy>
c0003910:	83 c5 20             	add    ebp,0x20
c0003913:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003917:	77 b3                	ja     c00038cc <load_xdir+0xbf>
c0003919:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000391f:	77 1b                	ja     c000393c <load_xdir+0x12f>
c0003921:	89 f8                	mov    eax,edi
c0003923:	e8 cd e7 ff ff       	call   c00020f5 <xdir_sum>
c0003928:	89 c1                	mov    ecx,eax
c000392a:	8d 47 02             	lea    eax,[edi+0x2]
c000392d:	e8 f5 e2 ff ff       	call   c0001c27 <ld_word>
c0003932:	66 39 c1             	cmp    cx,ax
c0003935:	74 05                	je     c000393c <load_xdir+0x12f>
c0003937:	bb 02 00 00 00       	mov    ebx,0x2
c000393c:	83 c4 1c             	add    esp,0x1c
c000393f:	89 d8                	mov    eax,ebx
c0003941:	5b                   	pop    ebx
c0003942:	5e                   	pop    esi
c0003943:	5f                   	pop    edi
c0003944:	5d                   	pop    ebp
c0003945:	c3                   	ret    

c0003946 <load_obj_xdir>:
c0003946:	53                   	push   ebx
c0003947:	89 c3                	mov    ebx,eax
c0003949:	83 ec 08             	sub    esp,0x8
c000394c:	8b 02                	mov    eax,DWORD PTR [edx]
c000394e:	89 03                	mov    DWORD PTR [ebx],eax
c0003950:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003953:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003956:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003959:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000395c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000395f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003966:	30 c0                	xor    al,al
c0003968:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000396f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003972:	89 d8                	mov    eax,ebx
c0003974:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003977:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c000397a:	e8 04 f8 ff ff       	call   c0003183 <dir_sdi>
c000397f:	85 c0                	test   eax,eax
c0003981:	75 0b                	jne    c000398e <load_obj_xdir+0x48>
c0003983:	89 d8                	mov    eax,ebx
c0003985:	83 c4 08             	add    esp,0x8
c0003988:	5b                   	pop    ebx
c0003989:	e9 7f fe ff ff       	jmp    c000380d <load_xdir>
c000398e:	83 c4 08             	add    esp,0x8
c0003991:	5b                   	pop    ebx
c0003992:	c3                   	ret    

c0003993 <dir_read>:
c0003993:	55                   	push   ebp
c0003994:	bd 04 00 00 00       	mov    ebp,0x4
c0003999:	57                   	push   edi
c000399a:	56                   	push   esi
c000399b:	be ff ff ff ff       	mov    esi,0xffffffff
c00039a0:	53                   	push   ebx
c00039a1:	89 c3                	mov    ebx,eax
c00039a3:	83 ec 1c             	sub    esp,0x1c
c00039a6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039aa:	8b 38                	mov    edi,DWORD PTR [eax]
c00039ac:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039b1:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039b4:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039b7:	89 c8                	mov    eax,ecx
c00039b9:	09 d0                	or     eax,edx
c00039bb:	0f 84 25 01 00 00    	je     c0003ae6 <dir_read+0x153>
c00039c1:	89 f8                	mov    eax,edi
c00039c3:	e8 3d ea ff ff       	call   c0002405 <move_window>
c00039c8:	89 c5                	mov    ebp,eax
c00039ca:	85 c0                	test   eax,eax
c00039cc:	0f 85 23 01 00 00    	jne    c0003af5 <dir_read+0x162>
c00039d2:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039d5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039d7:	84 c9                	test   cl,cl
c00039d9:	0f 84 11 01 00 00    	je     c0003af0 <dir_read+0x15d>
c00039df:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039e2:	75 48                	jne    c0003a2c <dir_read+0x99>
c00039e4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00039e9:	74 10                	je     c00039fb <dir_read+0x68>
c00039eb:	80 f9 83             	cmp    cl,0x83
c00039ee:	0f 85 dd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c00039f4:	31 ed                	xor    ebp,ebp
c00039f6:	e9 08 01 00 00       	jmp    c0003b03 <dir_read+0x170>
c00039fb:	80 f9 85             	cmp    cl,0x85
c00039fe:	0f 85 cd 00 00 00    	jne    c0003ad1 <dir_read+0x13e>
c0003a04:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a07:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a0a:	89 d8                	mov    eax,ebx
c0003a0c:	e8 fc fd ff ff       	call   c000380d <load_xdir>
c0003a11:	89 c5                	mov    ebp,eax
c0003a13:	85 c0                	test   eax,eax
c0003a15:	0f 85 da 00 00 00    	jne    c0003af5 <dir_read+0x162>
c0003a1b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a1e:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a21:	83 e0 3f             	and    eax,0x3f
c0003a24:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a27:	e9 d7 00 00 00       	jmp    c0003b03 <dir_read+0x170>
c0003a2c:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a2f:	83 e0 3f             	and    eax,0x3f
c0003a32:	80 f9 2e             	cmp    cl,0x2e
c0003a35:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a39:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a3c:	0f 84 8a 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a42:	80 f9 e5             	cmp    cl,0xe5
c0003a45:	0f 84 81 00 00 00    	je     c0003acc <dir_read+0x139>
c0003a4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a4f:	83 e0 1f             	and    eax,0x1f
c0003a52:	83 f8 08             	cmp    eax,0x8
c0003a55:	0f 94 c0             	sete   al
c0003a58:	0f b6 c0             	movzx  eax,al
c0003a5b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a5f:	75 6b                	jne    c0003acc <dir_read+0x139>
c0003a61:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a66:	75 44                	jne    c0003aac <dir_read+0x119>
c0003a68:	f6 c1 40             	test   cl,0x40
c0003a6b:	74 12                	je     c0003a7f <dir_read+0xec>
c0003a6d:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a70:	83 e1 bf             	and    ecx,0xffffffbf
c0003a73:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a7a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a7d:	eb 06                	jmp    c0003a85 <dir_read+0xf2>
c0003a7f:	89 f0                	mov    eax,esi
c0003a81:	38 c8                	cmp    al,cl
c0003a83:	75 47                	jne    c0003acc <dir_read+0x139>
c0003a85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003a89:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a8e:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003a91:	75 3e                	jne    c0003ad1 <dir_read+0x13e>
c0003a93:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003a97:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a9a:	e8 8a e4 ff ff       	call   c0001f29 <pick_lfn>
c0003a9f:	85 c0                	test   eax,eax
c0003aa1:	74 2e                	je     c0003ad1 <dir_read+0x13e>
c0003aa3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003aa7:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003aaa:	eb 25                	jmp    c0003ad1 <dir_read+0x13e>
c0003aac:	89 f0                	mov    eax,esi
c0003aae:	84 c0                	test   al,al
c0003ab0:	75 11                	jne    c0003ac3 <dir_read+0x130>
c0003ab2:	89 d0                	mov    eax,edx
c0003ab4:	e8 2a e6 ff ff       	call   c00020e3 <sum_sfn>
c0003ab9:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003abd:	0f 84 31 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003ac3:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003aca:	eb 37                	jmp    c0003b03 <dir_read+0x170>
c0003acc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ad1:	31 d2                	xor    edx,edx
c0003ad3:	89 d8                	mov    eax,ebx
c0003ad5:	e8 01 fc ff ff       	call   c00036db <dir_next>
c0003ada:	89 c5                	mov    ebp,eax
c0003adc:	85 c0                	test   eax,eax
c0003ade:	0f 84 cd fe ff ff    	je     c00039b1 <dir_read+0x1e>
c0003ae4:	eb 0f                	jmp    c0003af5 <dir_read+0x162>
c0003ae6:	85 ed                	test   ebp,ebp
c0003ae8:	0f 84 06 ff ff ff    	je     c00039f4 <dir_read+0x61>
c0003aee:	eb 05                	jmp    c0003af5 <dir_read+0x162>
c0003af0:	bd 04 00 00 00       	mov    ebp,0x4
c0003af5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003afc:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b03:	83 c4 1c             	add    esp,0x1c
c0003b06:	89 e8                	mov    eax,ebp
c0003b08:	5b                   	pop    ebx
c0003b09:	5e                   	pop    esi
c0003b0a:	5f                   	pop    edi
c0003b0b:	5d                   	pop    ebp
c0003b0c:	c3                   	ret    

c0003b0d <dir_alloc>:
c0003b0d:	55                   	push   ebp
c0003b0e:	89 d5                	mov    ebp,edx
c0003b10:	57                   	push   edi
c0003b11:	31 d2                	xor    edx,edx
c0003b13:	56                   	push   esi
c0003b14:	53                   	push   ebx
c0003b15:	89 c3                	mov    ebx,eax
c0003b17:	83 ec 0c             	sub    esp,0xc
c0003b1a:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b1c:	e8 62 f6 ff ff       	call   c0003183 <dir_sdi>
c0003b21:	85 c0                	test   eax,eax
c0003b23:	75 4e                	jne    c0003b73 <dir_alloc+0x66>
c0003b25:	31 f6                	xor    esi,esi
c0003b27:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b2a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b2d:	89 f8                	mov    eax,edi
c0003b2f:	e8 d1 e8 ff ff       	call   c0002405 <move_window>
c0003b34:	85 c0                	test   eax,eax
c0003b36:	75 3b                	jne    c0003b73 <dir_alloc+0x66>
c0003b38:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b3b:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b3e:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b40:	75 07                	jne    c0003b49 <dir_alloc+0x3c>
c0003b42:	f7 d2                	not    edx
c0003b44:	c0 ea 07             	shr    dl,0x7
c0003b47:	eb 0d                	jmp    c0003b56 <dir_alloc+0x49>
c0003b49:	84 d2                	test   dl,dl
c0003b4b:	0f 94 c1             	sete   cl
c0003b4e:	80 fa e5             	cmp    dl,0xe5
c0003b51:	0f 94 c2             	sete   dl
c0003b54:	09 ca                	or     edx,ecx
c0003b56:	84 d2                	test   dl,dl
c0003b58:	74 07                	je     c0003b61 <dir_alloc+0x54>
c0003b5a:	46                   	inc    esi
c0003b5b:	39 ee                	cmp    esi,ebp
c0003b5d:	75 04                	jne    c0003b63 <dir_alloc+0x56>
c0003b5f:	eb 1c                	jmp    c0003b7d <dir_alloc+0x70>
c0003b61:	31 f6                	xor    esi,esi
c0003b63:	ba 01 00 00 00       	mov    edx,0x1
c0003b68:	89 d8                	mov    eax,ebx
c0003b6a:	e8 6c fb ff ff       	call   c00036db <dir_next>
c0003b6f:	85 c0                	test   eax,eax
c0003b71:	74 b4                	je     c0003b27 <dir_alloc+0x1a>
c0003b73:	83 f8 04             	cmp    eax,0x4
c0003b76:	75 05                	jne    c0003b7d <dir_alloc+0x70>
c0003b78:	b8 07 00 00 00       	mov    eax,0x7
c0003b7d:	83 c4 0c             	add    esp,0xc
c0003b80:	5b                   	pop    ebx
c0003b81:	5e                   	pop    esi
c0003b82:	5f                   	pop    edi
c0003b83:	5d                   	pop    ebp
c0003b84:	c3                   	ret    

c0003b85 <store_xdir>:
c0003b85:	55                   	push   ebp
c0003b86:	57                   	push   edi
c0003b87:	89 c7                	mov    edi,eax
c0003b89:	56                   	push   esi
c0003b8a:	53                   	push   ebx
c0003b8b:	83 ec 0c             	sub    esp,0xc
c0003b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0003b90:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003b93:	89 e8                	mov    eax,ebp
c0003b95:	e8 5b e5 ff ff       	call   c00020f5 <xdir_sum>
c0003b9a:	0f b7 d0             	movzx  edx,ax
c0003b9d:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ba0:	e8 f4 e0 ff ff       	call   c0001c99 <st_word>
c0003ba5:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003ba9:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bac:	89 f8                	mov    eax,edi
c0003bae:	e8 d0 f5 ff ff       	call   c0003183 <dir_sdi>
c0003bb3:	89 c6                	mov    esi,eax
c0003bb5:	85 f6                	test   esi,esi
c0003bb7:	75 3d                	jne    c0003bf6 <store_xdir+0x71>
c0003bb9:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bbc:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bbf:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bc1:	e8 3f e8 ff ff       	call   c0002405 <move_window>
c0003bc6:	89 c6                	mov    esi,eax
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	75 2a                	jne    c0003bf6 <store_xdir+0x71>
c0003bcc:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0003bd4:	89 ea                	mov    edx,ebp
c0003bd6:	e8 cb e0 ff ff       	call   c0001ca6 <mem_cpy>
c0003bdb:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdd:	85 db                	test   ebx,ebx
c0003bdf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003be3:	74 11                	je     c0003bf6 <store_xdir+0x71>
c0003be5:	31 d2                	xor    edx,edx
c0003be7:	89 f8                	mov    eax,edi
c0003be9:	83 c5 20             	add    ebp,0x20
c0003bec:	e8 ea fa ff ff       	call   c00036db <dir_next>
c0003bf1:	4b                   	dec    ebx
c0003bf2:	89 c6                	mov    esi,eax
c0003bf4:	eb bf                	jmp    c0003bb5 <store_xdir+0x30>
c0003bf6:	89 f0                	mov    eax,esi
c0003bf8:	83 fe 02             	cmp    esi,0x2
c0003bfb:	76 05                	jbe    c0003c02 <store_xdir+0x7d>
c0003bfd:	b8 02 00 00 00       	mov    eax,0x2
c0003c02:	83 c4 0c             	add    esp,0xc
c0003c05:	5b                   	pop    ebx
c0003c06:	5e                   	pop    esi
c0003c07:	5f                   	pop    edi
c0003c08:	5d                   	pop    ebp
c0003c09:	c3                   	ret    

c0003c0a <dir_remove>:
c0003c0a:	57                   	push   edi
c0003c0b:	56                   	push   esi
c0003c0c:	53                   	push   ebx
c0003c0d:	89 c3                	mov    ebx,eax
c0003c0f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c12:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c14:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c17:	83 fa ff             	cmp    edx,0xffffffff
c0003c1a:	74 09                	je     c0003c25 <dir_remove+0x1b>
c0003c1c:	e8 62 f5 ff ff       	call   c0003183 <dir_sdi>
c0003c21:	85 c0                	test   eax,eax
c0003c23:	75 41                	jne    c0003c66 <dir_remove+0x5c>
c0003c25:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c28:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c2b:	89 f0                	mov    eax,esi
c0003c2d:	e8 d3 e7 ff ff       	call   c0002405 <move_window>
c0003c32:	85 c0                	test   eax,eax
c0003c34:	75 26                	jne    c0003c5c <dir_remove+0x52>
c0003c36:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c39:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c3c:	75 05                	jne    c0003c43 <dir_remove+0x39>
c0003c3e:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c41:	eb 03                	jmp    c0003c46 <dir_remove+0x3c>
c0003c43:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c46:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c4a:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c4d:	73 17                	jae    c0003c66 <dir_remove+0x5c>
c0003c4f:	31 d2                	xor    edx,edx
c0003c51:	89 d8                	mov    eax,ebx
c0003c53:	e8 83 fa ff ff       	call   c00036db <dir_next>
c0003c58:	85 c0                	test   eax,eax
c0003c5a:	74 c9                	je     c0003c25 <dir_remove+0x1b>
c0003c5c:	83 f8 04             	cmp    eax,0x4
c0003c5f:	75 05                	jne    c0003c66 <dir_remove+0x5c>
c0003c61:	b8 02 00 00 00       	mov    eax,0x2
c0003c66:	5b                   	pop    ebx
c0003c67:	5e                   	pop    esi
c0003c68:	5f                   	pop    edi
c0003c69:	c3                   	ret    

c0003c6a <create_name>:
c0003c6a:	55                   	push   ebp
c0003c6b:	89 d5                	mov    ebp,edx
c0003c6d:	57                   	push   edi
c0003c6e:	89 c7                	mov    edi,eax
c0003c70:	56                   	push   esi
c0003c71:	31 f6                	xor    esi,esi
c0003c73:	53                   	push   ebx
c0003c74:	83 ec 3c             	sub    esp,0x3c
c0003c77:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c79:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c7d:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c82:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003c86:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003c8a:	e8 72 e0 ff ff       	call   c0001d01 <tchar2uni>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	83 f8 ff             	cmp    eax,0xffffffff
c0003c94:	75 0a                	jne    c0003ca0 <create_name+0x36>
c0003c96:	b8 06 00 00 00       	mov    eax,0x6
c0003c9b:	e9 9e 02 00 00       	jmp    c0003f3e <create_name+0x2d4>
c0003ca0:	3d ff ff 00 00       	cmp    eax,0xffff
c0003ca5:	76 0c                	jbe    c0003cb3 <create_name+0x49>
c0003ca7:	c1 e8 10             	shr    eax,0x10
c0003caa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cae:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cb2:	46                   	inc    esi
c0003cb3:	66 83 fb 1f          	cmp    bx,0x1f
c0003cb7:	76 4f                	jbe    c0003d08 <create_name+0x9e>
c0003cb9:	66 83 fb 5c          	cmp    bx,0x5c
c0003cbd:	74 35                	je     c0003cf4 <create_name+0x8a>
c0003cbf:	66 83 fb 2f          	cmp    bx,0x2f
c0003cc3:	74 2f                	je     c0003cf4 <create_name+0x8a>
c0003cc5:	66 83 fb 7f          	cmp    bx,0x7f
c0003cc9:	77 11                	ja     c0003cdc <create_name+0x72>
c0003ccb:	0f b7 d3             	movzx  edx,bx
c0003cce:	b8 52 9d 02 c0       	mov    eax,0xc0029d52
c0003cd3:	e8 11 e0 ff ff       	call   c0001ce9 <chk_chr>
c0003cd8:	85 c0                	test   eax,eax
c0003cda:	75 ba                	jne    c0003c96 <create_name+0x2c>
c0003cdc:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003ce2:	77 b2                	ja     c0003c96 <create_name+0x2c>
c0003ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ce8:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003cec:	46                   	inc    esi
c0003ced:	eb 97                	jmp    c0003c86 <create_name+0x1c>
c0003cef:	40                   	inc    eax
c0003cf0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cf4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003cf8:	8a 10                	mov    dl,BYTE PTR [eax]
c0003cfa:	80 fa 2f             	cmp    dl,0x2f
c0003cfd:	74 f0                	je     c0003cef <create_name+0x85>
c0003cff:	80 fa 5c             	cmp    dl,0x5c
c0003d02:	74 eb                	je     c0003cef <create_name+0x85>
c0003d04:	31 db                	xor    ebx,ebx
c0003d06:	eb 02                	jmp    c0003d0a <create_name+0xa0>
c0003d08:	b3 04                	mov    bl,0x4
c0003d0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d0e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d11:	85 f6                	test   esi,esi
c0003d13:	74 18                	je     c0003d2d <create_name+0xc3>
c0003d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d19:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d1e:	66 83 f8 20          	cmp    ax,0x20
c0003d22:	74 06                	je     c0003d2a <create_name+0xc0>
c0003d24:	66 83 f8 2e          	cmp    ax,0x2e
c0003d28:	75 03                	jne    c0003d2d <create_name+0xc3>
c0003d2a:	4e                   	dec    esi
c0003d2b:	eb e4                	jmp    c0003d11 <create_name+0xa7>
c0003d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d31:	31 ed                	xor    ebp,ebp
c0003d33:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d39:	85 f6                	test   esi,esi
c0003d3b:	0f 84 55 ff ff ff    	je     c0003c96 <create_name+0x2c>
c0003d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d45:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d48:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d4c:	66 83 f8 20          	cmp    ax,0x20
c0003d50:	75 04                	jne    c0003d56 <create_name+0xec>
c0003d52:	89 d5                	mov    ebp,edx
c0003d54:	eb eb                	jmp    c0003d41 <create_name+0xd7>
c0003d56:	85 ed                	test   ebp,ebp
c0003d58:	75 06                	jne    c0003d60 <create_name+0xf6>
c0003d5a:	66 83 f8 2e          	cmp    ax,0x2e
c0003d5e:	75 08                	jne    c0003d68 <create_name+0xfe>
c0003d60:	83 cb 03             	or     ebx,0x3
c0003d63:	eb 03                	jmp    c0003d68 <create_name+0xfe>
c0003d65:	4e                   	dec    esi
c0003d66:	74 0c                	je     c0003d74 <create_name+0x10a>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d72:	75 f1                	jne    c0003d65 <create_name+0xfb>
c0003d74:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d79:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d7c:	ba 20 00 00 00       	mov    edx,0x20
c0003d81:	e8 35 df ff ff       	call   c0001cbb <mem_set>
c0003d86:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003d8e:	31 c9                	xor    ecx,ecx
c0003d90:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003d95:	8d 45 01             	lea    eax,[ebp+0x1]
c0003d98:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da0:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	0f 84 30 01 00 00    	je     c0003edd <create_name+0x273>
c0003dad:	66 83 fd 20          	cmp    bp,0x20
c0003db1:	74 10                	je     c0003dc3 <create_name+0x159>
c0003db3:	66 83 fd 2e          	cmp    bp,0x2e
c0003db7:	75 13                	jne    c0003dcc <create_name+0x162>
c0003db9:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dbd:	0f 84 6b 01 00 00    	je     c0003f2e <create_name+0x2c4>
c0003dc3:	83 cb 03             	or     ebx,0x3
c0003dc6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003dca:	eb c9                	jmp    c0003d95 <create_name+0x12b>
c0003dcc:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003dd0:	73 0b                	jae    c0003ddd <create_name+0x173>
c0003dd2:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd6:	75 47                	jne    c0003e1f <create_name+0x1b5>
c0003dd8:	e9 51 01 00 00       	jmp    c0003f2e <create_name+0x2c4>
c0003ddd:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003de2:	75 10                	jne    c0003df4 <create_name+0x18a>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003def:	e9 e9 00 00 00       	jmp    c0003edd <create_name+0x273>
c0003df4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df8:	74 0d                	je     c0003e07 <create_name+0x19d>
c0003dfa:	83 cb 03             	or     ebx,0x3
c0003dfd:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e01:	0f 87 d6 00 00 00    	ja     c0003edd <create_name+0x273>
c0003e07:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e10:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e18:	b9 08 00 00 00       	mov    ecx,0x8
c0003e1d:	eb a7                	jmp    c0003dc6 <create_name+0x15c>
c0003e1f:	66 83 fd 7f          	cmp    bp,0x7f
c0003e23:	76 68                	jbe    c0003e8d <create_name+0x223>
c0003e25:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e29:	88 da                	mov    dl,bl
c0003e2b:	83 ca 02             	or     edx,0x2
c0003e2e:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e32:	50                   	push   eax
c0003e33:	50                   	push   eax
c0003e34:	68 b5 01 00 00       	push   0x1b5
c0003e39:	55                   	push   ebp
c0003e3a:	e8 48 46 00 00       	call   c0008487 <ff_uni2oem>
c0003e3f:	83 c4 10             	add    esp,0x10
c0003e42:	89 c5                	mov    ebp,eax
c0003e44:	a8 80                	test   al,0x80
c0003e46:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e4e:	74 0c                	je     c0003e5c <create_name+0x1f2>
c0003e50:	83 e5 7f             	and    ebp,0x7f
c0003e53:	0f b6 ad a0 9c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6360]
c0003e5a:	eb 2a                	jmp    c0003e86 <create_name+0x21c>
c0003e5c:	66 3d ff 00          	cmp    ax,0xff
c0003e60:	76 24                	jbe    c0003e86 <create_name+0x21c>
c0003e62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e66:	48                   	dec    eax
c0003e67:	39 c8                	cmp    eax,ecx
c0003e69:	77 0c                	ja     c0003e77 <create_name+0x20d>
c0003e6b:	83 cb 03             	or     ebx,0x3
c0003e6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e72:	e9 4f ff ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003e77:	89 e8                	mov    eax,ebp
c0003e79:	88 d3                	mov    bl,dl
c0003e7b:	66 c1 e8 08          	shr    ax,0x8
c0003e7f:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e83:	41                   	inc    ecx
c0003e84:	eb 4b                	jmp    c0003ed1 <create_name+0x267>
c0003e86:	88 d3                	mov    bl,dl
c0003e88:	66 85 ed             	test   bp,bp
c0003e8b:	74 19                	je     c0003ea6 <create_name+0x23c>
c0003e8d:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003e91:	0f b7 d5             	movzx  edx,bp
c0003e94:	b8 5b 9d 02 c0       	mov    eax,0xc0029d5b
c0003e99:	e8 4b de ff ff       	call   c0001ce9 <chk_chr>
c0003e9e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ea2:	85 c0                	test   eax,eax
c0003ea4:	74 0a                	je     c0003eb0 <create_name+0x246>
c0003ea6:	83 cb 03             	or     ebx,0x3
c0003ea9:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003eae:	eb 21                	jmp    c0003ed1 <create_name+0x267>
c0003eb0:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eb3:	66 83 f8 19          	cmp    ax,0x19
c0003eb7:	77 07                	ja     c0003ec0 <create_name+0x256>
c0003eb9:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ebe:	eb 11                	jmp    c0003ed1 <create_name+0x267>
c0003ec0:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ec3:	66 83 f8 19          	cmp    ax,0x19
c0003ec7:	77 08                	ja     c0003ed1 <create_name+0x267>
c0003ec9:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ece:	83 ed 20             	sub    ebp,0x20
c0003ed1:	89 e8                	mov    eax,ebp
c0003ed3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ed7:	41                   	inc    ecx
c0003ed8:	e9 e9 fe ff ff       	jmp    c0003dc6 <create_name+0x15c>
c0003edd:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ee1:	75 04                	jne    c0003ee7 <create_name+0x27d>
c0003ee3:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003ee7:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003eec:	75 05                	jne    c0003ef3 <create_name+0x289>
c0003eee:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003ef3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ef7:	83 e0 0c             	and    eax,0xc
c0003efa:	3c 0c                	cmp    al,0xc
c0003efc:	74 0b                	je     c0003f09 <create_name+0x29f>
c0003efe:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f02:	83 e0 03             	and    eax,0x3
c0003f05:	3c 03                	cmp    al,0x3
c0003f07:	75 05                	jne    c0003f0e <create_name+0x2a4>
c0003f09:	83 cb 02             	or     ebx,0x2
c0003f0c:	eb 19                	jmp    c0003f27 <create_name+0x2bd>
c0003f0e:	f6 c3 02             	test   bl,0x2
c0003f11:	75 14                	jne    c0003f27 <create_name+0x2bd>
c0003f13:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f18:	74 03                	je     c0003f1d <create_name+0x2b3>
c0003f1a:	83 cb 10             	or     ebx,0x10
c0003f1d:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f22:	74 03                	je     c0003f27 <create_name+0x2bd>
c0003f24:	83 cb 08             	or     ebx,0x8
c0003f27:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f2a:	31 c0                	xor    eax,eax
c0003f2c:	eb 10                	jmp    c0003f3e <create_name+0x2d4>
c0003f2e:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f33:	0f 85 ce fe ff ff    	jne    c0003e07 <create_name+0x19d>
c0003f39:	e9 a6 fe ff ff       	jmp    c0003de4 <create_name+0x17a>
c0003f3e:	83 c4 3c             	add    esp,0x3c
c0003f41:	5b                   	pop    ebx
c0003f42:	5e                   	pop    esi
c0003f43:	5f                   	pop    edi
c0003f44:	5d                   	pop    ebp
c0003f45:	c3                   	ret    

c0003f46 <xname_sum>:
c0003f46:	56                   	push   esi
c0003f47:	53                   	push   ebx
c0003f48:	89 c6                	mov    esi,eax
c0003f4a:	51                   	push   ecx
c0003f4b:	31 db                	xor    ebx,ebx
c0003f4d:	83 c6 02             	add    esi,0x2
c0003f50:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f54:	66 85 c0             	test   ax,ax
c0003f57:	74 1f                	je     c0003f78 <xname_sum+0x32>
c0003f59:	83 ec 0c             	sub    esp,0xc
c0003f5c:	66 d1 cb             	ror    bx,1
c0003f5f:	50                   	push   eax
c0003f60:	e8 1e 46 00 00       	call   c0008583 <ff_wtoupper>
c0003f65:	83 c4 10             	add    esp,0x10
c0003f68:	0f b6 d0             	movzx  edx,al
c0003f6b:	66 c1 e8 08          	shr    ax,0x8
c0003f6f:	01 d3                	add    ebx,edx
c0003f71:	66 d1 cb             	ror    bx,1
c0003f74:	01 c3                	add    ebx,eax
c0003f76:	eb d5                	jmp    c0003f4d <xname_sum+0x7>
c0003f78:	89 d8                	mov    eax,ebx
c0003f7a:	5a                   	pop    edx
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	c3                   	ret    

c0003f7e <create_xdir>:
c0003f7e:	55                   	push   ebp
c0003f7f:	b9 40 00 00 00       	mov    ecx,0x40
c0003f84:	57                   	push   edi
c0003f85:	bd 01 00 00 00       	mov    ebp,0x1
c0003f8a:	56                   	push   esi
c0003f8b:	31 ff                	xor    edi,edi
c0003f8d:	53                   	push   ebx
c0003f8e:	be 40 00 00 00       	mov    esi,0x40
c0003f93:	89 c3                	mov    ebx,eax
c0003f95:	83 ec 1c             	sub    esp,0x1c
c0003f98:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f9c:	31 d2                	xor    edx,edx
c0003f9e:	e8 18 dd ff ff       	call   c0001cbb <mem_set>
c0003fa3:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fa6:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003faa:	31 c9                	xor    ecx,ecx
c0003fac:	8d 46 01             	lea    eax,[esi+0x1]
c0003faf:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fb3:	83 c6 02             	add    esi,0x2
c0003fb6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fba:	66 85 ed             	test   bp,bp
c0003fbd:	74 12                	je     c0003fd1 <create_xdir+0x53>
c0003fbf:	0f b6 c1             	movzx  eax,cl
c0003fc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fc6:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fca:	66 83 fd 01          	cmp    bp,0x1
c0003fce:	80 d9 ff             	sbb    cl,0xff
c0003fd1:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fd4:	0f b7 d5             	movzx  edx,bp
c0003fd7:	83 c6 02             	add    esi,0x2
c0003fda:	e8 ba dc ff ff       	call   c0001c99 <st_word>
c0003fdf:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003fe5:	75 d3                	jne    c0003fba <create_xdir+0x3c>
c0003fe7:	8d 47 01             	lea    eax,[edi+0x1]
c0003fea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ff2:	0f b6 c1             	movzx  eax,cl
c0003ff5:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003ffa:	74 07                	je     c0004003 <create_xdir+0x85>
c0003ffc:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004001:	eb a9                	jmp    c0003fac <create_xdir+0x2e>
c0004003:	8d 47 02             	lea    eax,[edi+0x2]
c0004006:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004009:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c000400c:	89 d0                	mov    eax,edx
c000400e:	e8 33 ff ff ff       	call   c0003f46 <xname_sum>
c0004013:	83 c4 1c             	add    esp,0x1c
c0004016:	0f b7 d0             	movzx  edx,ax
c0004019:	8d 43 24             	lea    eax,[ebx+0x24]
c000401c:	5b                   	pop    ebx
c000401d:	5e                   	pop    esi
c000401e:	5f                   	pop    edi
c000401f:	5d                   	pop    ebp
c0004020:	e9 74 dc ff ff       	jmp    c0001c99 <st_word>

c0004025 <cmp_lfn>:
c0004025:	55                   	push   ebp
c0004026:	57                   	push   edi
c0004027:	89 d7                	mov    edi,edx
c0004029:	56                   	push   esi
c000402a:	53                   	push   ebx
c000402b:	83 ec 1c             	sub    esp,0x1c
c000402e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004032:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004035:	e8 ed db ff ff       	call   c0001c27 <ld_word>
c000403a:	66 85 c0             	test   ax,ax
c000403d:	74 07                	je     c0004046 <cmp_lfn+0x21>
c000403f:	31 c0                	xor    eax,eax
c0004041:	e9 9a 00 00 00       	jmp    c00040e0 <cmp_lfn+0xbb>
c0004046:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004048:	bd 01 00 00 00       	mov    ebp,0x1
c000404d:	83 e3 3f             	and    ebx,0x3f
c0004050:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004058:	4b                   	dec    ebx
c0004059:	6b db 0d             	imul   ebx,ebx,0xd
c000405c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004060:	0f b6 80 20 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd62e0]
c0004067:	01 f8                	add    eax,edi
c0004069:	e8 b9 db ff ff       	call   c0001c27 <ld_word>
c000406e:	66 85 ed             	test   bp,bp
c0004071:	89 c6                	mov    esi,eax
c0004073:	74 3c                	je     c00040b1 <cmp_lfn+0x8c>
c0004075:	81 fb ff 00 00 00    	cmp    ebx,0xff
c000407b:	77 c2                	ja     c000403f <cmp_lfn+0x1a>
c000407d:	83 ec 0c             	sub    esp,0xc
c0004080:	0f b7 c0             	movzx  eax,ax
c0004083:	50                   	push   eax
c0004084:	e8 fa 44 00 00       	call   c0008583 <ff_wtoupper>
c0004089:	89 c5                	mov    ebp,eax
c000408b:	8d 43 01             	lea    eax,[ebx+0x1]
c000408e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004092:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004096:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000409a:	89 04 24             	mov    DWORD PTR [esp],eax
c000409d:	e8 e1 44 00 00       	call   c0008583 <ff_wtoupper>
c00040a2:	83 c4 10             	add    esp,0x10
c00040a5:	39 c5                	cmp    ebp,eax
c00040a7:	75 96                	jne    c000403f <cmp_lfn+0x1a>
c00040a9:	89 f5                	mov    ebp,esi
c00040ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040af:	eb 04                	jmp    c00040b5 <cmp_lfn+0x90>
c00040b1:	66 46                	inc    si
c00040b3:	75 8a                	jne    c000403f <cmp_lfn+0x1a>
c00040b5:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040b9:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040be:	75 9c                	jne    c000405c <cmp_lfn+0x37>
c00040c0:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040c3:	74 16                	je     c00040db <cmp_lfn+0xb6>
c00040c5:	66 85 ed             	test   bp,bp
c00040c8:	74 11                	je     c00040db <cmp_lfn+0xb6>
c00040ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040ce:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040d3:	0f 94 c0             	sete   al
c00040d6:	0f b6 c0             	movzx  eax,al
c00040d9:	eb 05                	jmp    c00040e0 <cmp_lfn+0xbb>
c00040db:	b8 01 00 00 00       	mov    eax,0x1
c00040e0:	83 c4 1c             	add    esp,0x1c
c00040e3:	5b                   	pop    ebx
c00040e4:	5e                   	pop    esi
c00040e5:	5f                   	pop    edi
c00040e6:	5d                   	pop    ebp
c00040e7:	c3                   	ret    

c00040e8 <dir_find>:
c00040e8:	55                   	push   ebp
c00040e9:	31 d2                	xor    edx,edx
c00040eb:	57                   	push   edi
c00040ec:	56                   	push   esi
c00040ed:	53                   	push   ebx
c00040ee:	89 c3                	mov    ebx,eax
c00040f0:	83 ec 1c             	sub    esp,0x1c
c00040f3:	8b 30                	mov    esi,DWORD PTR [eax]
c00040f5:	e8 89 f0 ff ff       	call   c0003183 <dir_sdi>
c00040fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 9e 01 00 00    	jne    c00042a3 <dir_find+0x1bb>
c0004105:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004108:	0f 85 8d 00 00 00    	jne    c000419b <dir_find+0xb3>
c000410e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004111:	e8 30 fe ff ff       	call   c0003f46 <xname_sum>
c0004116:	89 c7                	mov    edi,eax
c0004118:	31 d2                	xor    edx,edx
c000411a:	89 d8                	mov    eax,ebx
c000411c:	e8 72 f8 ff ff       	call   c0003993 <dir_read>
c0004121:	85 c0                	test   eax,eax
c0004123:	0f 85 5e 01 00 00    	jne    c0004287 <dir_find+0x19f>
c0004129:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000412c:	8d 41 24             	lea    eax,[ecx+0x24]
c000412f:	e8 f3 da ff ff       	call   c0001c27 <ld_word>
c0004134:	66 39 f8             	cmp    ax,di
c0004137:	75 df                	jne    c0004118 <dir_find+0x30>
c0004139:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c000413c:	31 ed                	xor    ebp,ebp
c000413e:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004142:	ba 40 00 00 00       	mov    edx,0x40
c0004147:	89 e9                	mov    ecx,ebp
c0004149:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c000414d:	0f 84 42 01 00 00    	je     c0004295 <dir_find+0x1ad>
c0004153:	f6 c2 1f             	test   dl,0x1f
c0004156:	75 03                	jne    c000415b <dir_find+0x73>
c0004158:	83 c2 02             	add    edx,0x2
c000415b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000415f:	89 d0                	mov    eax,edx
c0004161:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004164:	e8 be da ff ff       	call   c0001c27 <ld_word>
c0004169:	83 ec 0c             	sub    esp,0xc
c000416c:	0f b7 c0             	movzx  eax,ax
c000416f:	50                   	push   eax
c0004170:	e8 0e 44 00 00       	call   c0008583 <ff_wtoupper>
c0004175:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004179:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000417c:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004180:	89 04 24             	mov    DWORD PTR [esp],eax
c0004183:	e8 fb 43 00 00       	call   c0008583 <ff_wtoupper>
c0004188:	83 c4 10             	add    esp,0x10
c000418b:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000418f:	75 87                	jne    c0004118 <dir_find+0x30>
c0004191:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004195:	45                   	inc    ebp
c0004196:	83 c2 02             	add    edx,0x2
c0004199:	eb ac                	jmp    c0004147 <dir_find+0x5f>
c000419b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041a7:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041ac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041af:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041b2:	89 f0                	mov    eax,esi
c00041b4:	e8 4c e2 ff ff       	call   c0002405 <move_window>
c00041b9:	85 c0                	test   eax,eax
c00041bb:	0f 85 c6 00 00 00    	jne    c0004287 <dir_find+0x19f>
c00041c1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041c4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041c7:	84 c9                	test   cl,cl
c00041c9:	0f 84 bd 00 00 00    	je     c000428c <dir_find+0x1a4>
c00041cf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041d2:	88 d0                	mov    al,dl
c00041d4:	83 e0 3f             	and    eax,0x3f
c00041d7:	80 f9 e5             	cmp    cl,0xe5
c00041da:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041dd:	0f 84 87 00 00 00    	je     c000426a <dir_find+0x182>
c00041e3:	80 e2 08             	and    dl,0x8
c00041e6:	74 06                	je     c00041ee <dir_find+0x106>
c00041e8:	3c 0f                	cmp    al,0xf
c00041ea:	75 7e                	jne    c000426a <dir_find+0x182>
c00041ec:	eb 04                	jmp    c00041f2 <dir_find+0x10a>
c00041ee:	3c 0f                	cmp    al,0xf
c00041f0:	75 4c                	jne    c000423e <dir_find+0x156>
c00041f2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c00041f6:	75 7e                	jne    c0004276 <dir_find+0x18e>
c00041f8:	f6 c1 40             	test   cl,0x40
c00041fb:	74 12                	je     c000420f <dir_find+0x127>
c00041fd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004200:	83 e1 bf             	and    ecx,0xffffffbf
c0004203:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004207:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000420a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000420d:	eb 06                	jmp    c0004215 <dir_find+0x12d>
c000420f:	89 f8                	mov    eax,edi
c0004211:	38 c8                	cmp    al,cl
c0004213:	75 5c                	jne    c0004271 <dir_find+0x189>
c0004215:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004219:	bf ff ff ff ff       	mov    edi,0xffffffff
c000421e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004221:	75 53                	jne    c0004276 <dir_find+0x18e>
c0004223:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004227:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000422a:	89 ea                	mov    edx,ebp
c000422c:	e8 f4 fd ff ff       	call   c0004025 <cmp_lfn>
c0004231:	85 c0                	test   eax,eax
c0004233:	74 41                	je     c0004276 <dir_find+0x18e>
c0004235:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004239:	8d 79 ff             	lea    edi,[ecx-0x1]
c000423c:	eb 38                	jmp    c0004276 <dir_find+0x18e>
c000423e:	89 f8                	mov    eax,edi
c0004240:	84 c0                	test   al,al
c0004242:	75 0d                	jne    c0004251 <dir_find+0x169>
c0004244:	89 e8                	mov    eax,ebp
c0004246:	e8 98 de ff ff       	call   c00020e3 <sum_sfn>
c000424b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000424f:	74 52                	je     c00042a3 <dir_find+0x1bb>
c0004251:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004255:	75 13                	jne    c000426a <dir_find+0x182>
c0004257:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000425a:	b9 0b 00 00 00       	mov    ecx,0xb
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 60 da ff ff       	call   c0001cc6 <mem_cmp>
c0004266:	85 c0                	test   eax,eax
c0004268:	74 39                	je     c00042a3 <dir_find+0x1bb>
c000426a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004271:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004276:	31 d2                	xor    edx,edx
c0004278:	89 d8                	mov    eax,ebx
c000427a:	e8 5c f4 ff ff       	call   c00036db <dir_next>
c000427f:	85 c0                	test   eax,eax
c0004281:	0f 84 25 ff ff ff    	je     c00041ac <dir_find+0xc4>
c0004287:	89 04 24             	mov    DWORD PTR [esp],eax
c000428a:	eb 17                	jmp    c00042a3 <dir_find+0x1bb>
c000428c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004293:	eb 0e                	jmp    c00042a3 <dir_find+0x1bb>
c0004295:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004298:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c000429d:	0f 85 75 fe ff ff    	jne    c0004118 <dir_find+0x30>
c00042a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042a6:	83 c4 1c             	add    esp,0x1c
c00042a9:	5b                   	pop    ebx
c00042aa:	5e                   	pop    esi
c00042ab:	5f                   	pop    edi
c00042ac:	5d                   	pop    ebp
c00042ad:	c3                   	ret    

c00042ae <dir_register>:
c00042ae:	55                   	push   ebp
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	be 06 00 00 00       	mov    esi,0x6
c00042b6:	53                   	push   ebx
c00042b7:	83 ec 6c             	sub    esp,0x6c
c00042ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042be:	0f 85 62 02 00 00    	jne    c0004526 <dir_register+0x278>
c00042c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042c6:	31 ff                	xor    edi,edi
c00042c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042d0:	74 03                	je     c00042d5 <dir_register+0x27>
c00042d2:	47                   	inc    edi
c00042d3:	eb f6                	jmp    c00042cb <dir_register+0x1d>
c00042d5:	89 c3                	mov    ebx,eax
c00042d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042db:	0f 85 e1 00 00 00    	jne    c00043c2 <dir_register+0x114>
c00042e1:	83 c7 0e             	add    edi,0xe
c00042e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00042e9:	89 f8                	mov    eax,edi
c00042eb:	31 d2                	xor    edx,edx
c00042ed:	f7 f1                	div    ecx
c00042ef:	8d 50 02             	lea    edx,[eax+0x2]
c00042f2:	89 c7                	mov    edi,eax
c00042f4:	89 d8                	mov    eax,ebx
c00042f6:	e8 12 f8 ff ff       	call   c0003b0d <dir_alloc>
c00042fb:	89 c6                	mov    esi,eax
c00042fd:	85 c0                	test   eax,eax
c00042ff:	0f 85 21 02 00 00    	jne    c0004526 <dir_register+0x278>
c0004305:	81 c7 01 00 00 08    	add    edi,0x8000001
c000430b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000430e:	c1 e7 05             	shl    edi,0x5
c0004311:	29 f8                	sub    eax,edi
c0004313:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004316:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004319:	a8 04                	test   al,0x4
c000431b:	0f 84 91 00 00 00    	je     c00043b2 <dir_register+0x104>
c0004321:	83 e0 fb             	and    eax,0xfffffffb
c0004324:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004327:	89 d8                	mov    eax,ebx
c0004329:	e8 25 ec ff ff       	call   c0002f53 <fill_first_frag>
c000432e:	85 c0                	test   eax,eax
c0004330:	0f 85 ee 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004336:	83 c9 ff             	or     ecx,0xffffffff
c0004339:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000433c:	89 d8                	mov    eax,ebx
c000433e:	e8 db eb ff ff       	call   c0002f1e <fill_last_frag>
c0004343:	85 c0                	test   eax,eax
c0004345:	0f 85 d9 01 00 00    	jne    c0004524 <dir_register+0x276>
c000434b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000434f:	74 61                	je     c00043b2 <dir_register+0x104>
c0004351:	89 da                	mov    edx,ebx
c0004353:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004357:	e8 ea f5 ff ff       	call   c0003946 <load_obj_xdir>
c000435c:	85 c0                	test   eax,eax
c000435e:	0f 85 c0 01 00 00    	jne    c0004524 <dir_register+0x276>
c0004364:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004368:	31 c9                	xor    ecx,ecx
c000436a:	c1 e2 09             	shl    edx,0x9
c000436d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004370:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004373:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004376:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004379:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000437c:	83 c0 38             	add    eax,0x38
c000437f:	e8 1c d9 ff ff       	call   c0001ca0 <st_qword>
c0004384:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004387:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000438a:	83 c0 28             	add    eax,0x28
c000438d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004390:	e8 0b d9 ff ff       	call   c0001ca0 <st_qword>
c0004395:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004398:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000439b:	83 c8 01             	or     eax,0x1
c000439e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043a5:	e8 db f7 ff ff       	call   c0003b85 <store_xdir>
c00043aa:	85 c0                	test   eax,eax
c00043ac:	0f 85 72 01 00 00    	jne    c0004524 <dir_register+0x276>
c00043b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b8:	e8 c1 fb ff ff       	call   c0003f7e <create_xdir>
c00043bd:	e9 64 01 00 00       	jmp    c0004526 <dir_register+0x278>
c00043c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00043ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043ce:	89 c2                	mov    edx,eax
c00043d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043d4:	e8 cd d8 ff ff       	call   c0001ca6 <mem_cpy>
c00043d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043de:	74 58                	je     c0004438 <dir_register+0x18a>
c00043e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00043ec:	83 ec 0c             	sub    esp,0xc
c00043ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00043f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00043f6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00043fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043fe:	e8 24 dc ff ff       	call   c0002027 <gen_numname>
c0004403:	89 d8                	mov    eax,ebx
c0004405:	e8 de fc ff ff       	call   c00040e8 <dir_find>
c000440a:	83 c4 10             	add    esp,0x10
c000440d:	89 c6                	mov    esi,eax
c000440f:	85 c0                	test   eax,eax
c0004411:	75 15                	jne    c0004428 <dir_register+0x17a>
c0004413:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004417:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000441c:	75 ce                	jne    c00043ec <dir_register+0x13e>
c000441e:	be 07 00 00 00       	mov    esi,0x7
c0004423:	e9 fe 00 00 00       	jmp    c0004526 <dir_register+0x278>
c0004428:	83 f8 04             	cmp    eax,0x4
c000442b:	0f 85 f5 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004431:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004435:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004438:	b9 01 00 00 00       	mov    ecx,0x1
c000443d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004442:	74 0f                	je     c0004453 <dir_register+0x1a5>
c0004444:	b9 0d 00 00 00       	mov    ecx,0xd
c0004449:	8d 47 0c             	lea    eax,[edi+0xc]
c000444c:	31 d2                	xor    edx,edx
c000444e:	f7 f1                	div    ecx
c0004450:	8d 48 01             	lea    ecx,[eax+0x1]
c0004453:	89 ca                	mov    edx,ecx
c0004455:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004459:	89 d8                	mov    eax,ebx
c000445b:	e8 ad f6 ff ff       	call   c0003b0d <dir_alloc>
c0004460:	89 c6                	mov    esi,eax
c0004462:	85 c0                	test   eax,eax
c0004464:	0f 85 bc 00 00 00    	jne    c0004526 <dir_register+0x278>
c000446a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000446e:	49                   	dec    ecx
c000446f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004473:	74 6a                	je     c00044df <dir_register+0x231>
c0004475:	89 c8                	mov    eax,ecx
c0004477:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000447a:	c1 e0 05             	shl    eax,0x5
c000447d:	29 c2                	sub    edx,eax
c000447f:	89 d8                	mov    eax,ebx
c0004481:	e8 fd ec ff ff       	call   c0003183 <dir_sdi>
c0004486:	89 c6                	mov    esi,eax
c0004488:	85 c0                	test   eax,eax
c000448a:	0f 85 96 00 00 00    	jne    c0004526 <dir_register+0x278>
c0004490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004494:	e8 4a dc ff ff       	call   c00020e3 <sum_sfn>
c0004499:	0f b6 f8             	movzx  edi,al
c000449c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000449f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044a2:	89 e8                	mov    eax,ebp
c00044a4:	e8 5c df ff ff       	call   c0002405 <move_window>
c00044a9:	89 c6                	mov    esi,eax
c00044ab:	85 c0                	test   eax,eax
c00044ad:	75 77                	jne    c0004526 <dir_register+0x278>
c00044af:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044b4:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044b7:	83 ec 0c             	sub    esp,0xc
c00044ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044bd:	57                   	push   edi
c00044be:	e8 e0 da ff ff       	call   c0001fa3 <put_lfn>
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044c9:	89 d8                	mov    eax,ebx
c00044cb:	e8 0b f2 ff ff       	call   c00036db <dir_next>
c00044d0:	83 c4 10             	add    esp,0x10
c00044d3:	89 c6                	mov    esi,eax
c00044d5:	85 c0                	test   eax,eax
c00044d7:	75 4d                	jne    c0004526 <dir_register+0x278>
c00044d9:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044dd:	75 bd                	jne    c000449c <dir_register+0x1ee>
c00044df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044e2:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044e5:	89 e8                	mov    eax,ebp
c00044e7:	e8 19 df ff ff       	call   c0002405 <move_window>
c00044ec:	89 c6                	mov    esi,eax
c00044ee:	85 c0                	test   eax,eax
c00044f0:	75 34                	jne    c0004526 <dir_register+0x278>
c00044f2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00044f5:	b9 20 00 00 00       	mov    ecx,0x20
c00044fa:	31 d2                	xor    edx,edx
c00044fc:	e8 ba d7 ff ff       	call   c0001cbb <mem_set>
c0004501:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004504:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004508:	b9 0b 00 00 00       	mov    ecx,0xb
c000450d:	e8 94 d7 ff ff       	call   c0001ca6 <mem_cpy>
c0004512:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004515:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004518:	83 e0 18             	and    eax,0x18
c000451b:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000451e:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004522:	eb 02                	jmp    c0004526 <dir_register+0x278>
c0004524:	89 c6                	mov    esi,eax
c0004526:	83 c4 6c             	add    esp,0x6c
c0004529:	89 f0                	mov    eax,esi
c000452b:	5b                   	pop    ebx
c000452c:	5e                   	pop    esi
c000452d:	5f                   	pop    edi
c000452e:	5d                   	pop    ebp
c000452f:	c3                   	ret    

c0004530 <sync_fs>:
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	53                   	push   ebx
c0004533:	89 c3                	mov    ebx,eax
c0004535:	e8 37 de ff ff       	call   c0002371 <sync_window>
c000453a:	85 c0                	test   eax,eax
c000453c:	0f 85 b1 00 00 00    	jne    c00045f3 <sync_fs+0xc3>
c0004542:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004545:	0f 85 8e 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c000454b:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000454f:	0f 85 84 00 00 00    	jne    c00045d9 <sync_fs+0xa9>
c0004555:	b9 00 02 00 00       	mov    ecx,0x200
c000455a:	8d 73 54             	lea    esi,[ebx+0x54]
c000455d:	31 d2                	xor    edx,edx
c000455f:	89 f0                	mov    eax,esi
c0004561:	e8 55 d7 ff ff       	call   c0001cbb <mem_set>
c0004566:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000456c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004571:	e8 23 d7 ff ff       	call   c0001c99 <st_word>
c0004576:	ba 52 52 61 41       	mov    edx,0x41615252
c000457b:	89 f0                	mov    eax,esi
c000457d:	e8 1b d7 ff ff       	call   c0001c9d <st_dword>
c0004582:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004588:	ba 72 72 41 61       	mov    edx,0x61417272
c000458d:	e8 0b d7 ff ff       	call   c0001c9d <st_dword>
c0004592:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004595:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000459b:	e8 fd d6 ff ff       	call   c0001c9d <st_dword>
c00045a0:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045a3:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045a9:	e8 ef d6 ff ff       	call   c0001c9d <st_dword>
c00045ae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045b4:	83 c0 01             	add    eax,0x1
c00045b7:	83 d2 00             	adc    edx,0x0
c00045ba:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045bd:	83 ec 0c             	sub    esp,0xc
c00045c0:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045c3:	6a 01                	push   0x1
c00045c5:	52                   	push   edx
c00045c6:	50                   	push   eax
c00045c7:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045cb:	56                   	push   esi
c00045cc:	50                   	push   eax
c00045cd:	e8 20 d6 ff ff       	call   c0001bf2 <disk_write>
c00045d2:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045d6:	83 c4 20             	add    esp,0x20
c00045d9:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045dd:	51                   	push   ecx
c00045de:	6a 00                	push   0x0
c00045e0:	6a 00                	push   0x0
c00045e2:	50                   	push   eax
c00045e3:	e8 20 d6 ff ff       	call   c0001c08 <disk_ioctl>
c00045e8:	83 c4 10             	add    esp,0x10
c00045eb:	85 c0                	test   eax,eax
c00045ed:	0f 95 c0             	setne  al
c00045f0:	0f b6 c0             	movzx  eax,al
c00045f3:	5a                   	pop    edx
c00045f4:	5b                   	pop    ebx
c00045f5:	5e                   	pop    esi
c00045f6:	c3                   	ret    

c00045f7 <create_partition>:
c00045f7:	55                   	push   ebp
c00045f8:	0f b6 c0             	movzx  eax,al
c00045fb:	57                   	push   edi
c00045fc:	56                   	push   esi
c00045fd:	53                   	push   ebx
c00045fe:	83 ec 60             	sub    esp,0x60
c0004601:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004605:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004609:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000460d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004611:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004615:	50                   	push   eax
c0004616:	6a 01                	push   0x1
c0004618:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000461c:	e8 e7 d5 ff ff       	call   c0001c08 <disk_ioctl>
c0004621:	83 c4 10             	add    esp,0x10
c0004624:	85 c0                	test   eax,eax
c0004626:	74 0a                	je     c0004632 <create_partition+0x3b>
c0004628:	b8 01 00 00 00       	mov    eax,0x1
c000462d:	e9 67 05 00 00       	jmp    c0004b99 <create_partition+0x5a2>
c0004632:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004636:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000463a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000463e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004642:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004647:	0f 86 ed 03 00 00    	jbe    c0004a3a <create_partition+0x443>
c000464d:	83 c0 df             	add    eax,0xffffffdf
c0004650:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004658:	83 d2 ff             	adc    edx,0xffffffff
c000465b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000465f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004663:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004667:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000466b:	83 c0 bd             	add    eax,0xffffffbd
c000466e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004675:	83 d2 ff             	adc    edx,0xffffffff
c0004678:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000467c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004680:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004688:	be 22 00 00 00       	mov    esi,0x22
c000468d:	31 ff                	xor    edi,edi
c000468f:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004697:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c000469f:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046a7:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046ab:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046b1:	75 0e                	jne    c00046c1 <create_partition+0xca>
c00046b3:	b9 00 02 00 00       	mov    ecx,0x200
c00046b8:	31 d2                	xor    edx,edx
c00046ba:	89 d8                	mov    eax,ebx
c00046bc:	e8 fa d5 ff ff       	call   c0001cbb <mem_set>
c00046c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046cd:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046d0:	0f 84 23 01 00 00    	je     c00047f9 <create_partition+0x202>
c00046d6:	89 f0                	mov    eax,esi
c00046d8:	89 fa                	mov    edx,edi
c00046da:	05 ff 07 00 00       	add    eax,0x7ff
c00046df:	83 d2 00             	adc    edx,0x0
c00046e2:	89 c1                	mov    ecx,eax
c00046e4:	89 d7                	mov    edi,edx
c00046e6:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00046ec:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00046f0:	89 ce                	mov    esi,ecx
c00046f2:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00046f6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00046fa:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00046fe:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004705:	89 04 24             	mov    DWORD PTR [esp],eax
c0004708:	b8 64 00 00 00       	mov    eax,0x64
c000470d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004710:	b8 00 00 00 00       	mov    eax,0x0
c0004715:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004719:	72 41                	jb     c000475c <create_partition+0x165>
c000471b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000471f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004723:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004727:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000472c:	01 c1                	add    ecx,eax
c000472e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004732:	f7 24 24             	mul    DWORD PTR [esp]
c0004735:	6a 00                	push   0x0
c0004737:	01 ca                	add    edx,ecx
c0004739:	6a 64                	push   0x64
c000473b:	52                   	push   edx
c000473c:	50                   	push   eax
c000473d:	e8 62 2a 02 00       	call   c00271a4 <__udivdi3>
c0004742:	83 c4 10             	add    esp,0x10
c0004745:	05 ff 07 00 00       	add    eax,0x7ff
c000474a:	83 d2 00             	adc    edx,0x0
c000474d:	89 c1                	mov    ecx,eax
c000474f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004753:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004759:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000475c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000475f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004763:	01 f0                	add    eax,esi
c0004765:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004769:	11 fa                	adc    edx,edi
c000476b:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000476f:	19 d1                	sbb    ecx,edx
c0004771:	73 2e                	jae    c00047a1 <create_partition+0x1aa>
c0004773:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004777:	89 f8                	mov    eax,edi
c0004779:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004780:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004784:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000478c:	73 6b                	jae    c00047f9 <create_partition+0x202>
c000478e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004792:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004796:	29 f0                	sub    eax,esi
c0004798:	19 fa                	sbb    edx,edi
c000479a:	89 04 24             	mov    DWORD PTR [esp],eax
c000479d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a5:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047a8:	74 4f                	je     c00047f9 <create_partition+0x202>
c00047aa:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047ad:	b9 10 00 00 00       	mov    ecx,0x10
c00047b2:	ba 30 9d 02 c0       	mov    edx,0xc0029d30
c00047b7:	e8 ea d4 ff ff       	call   c0001ca6 <mem_cpy>
c00047bc:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047c0:	b9 10 00 00 00       	mov    ecx,0x10
c00047c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047c9:	e8 2c db ff ff       	call   c00022fa <make_rand>
c00047ce:	89 f2                	mov    edx,esi
c00047d0:	89 f9                	mov    ecx,edi
c00047d2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047d6:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047da:	e8 c1 d4 ff ff       	call   c0001ca0 <st_qword>
c00047df:	03 34 24             	add    esi,DWORD PTR [esp]
c00047e2:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00047e6:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00047ea:	89 f2                	mov    edx,esi
c00047ec:	89 f9                	mov    ecx,edi
c00047ee:	83 c2 ff             	add    edx,0xffffffff
c00047f1:	83 d1 ff             	adc    ecx,0xffffffff
c00047f4:	e8 a7 d4 ff ff       	call   c0001ca0 <st_qword>
c00047f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00047fd:	83 e8 80             	sub    eax,0xffffff80
c0004800:	89 c5                	mov    ebp,eax
c0004802:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004806:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000480c:	75 6b                	jne    c0004879 <create_partition+0x282>
c000480e:	45                   	inc    ebp
c000480f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004813:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004818:	e8 39 da ff ff       	call   c0002256 <crc32>
c000481d:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004823:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004827:	75 e5                	jne    c000480e <create_partition+0x217>
c0004829:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000482d:	31 d2                	xor    edx,edx
c000482f:	83 ec 0c             	sub    esp,0xc
c0004832:	c1 ed 09             	shr    ebp,0x9
c0004835:	6a 01                	push   0x1
c0004837:	8d 45 02             	lea    eax,[ebp+0x2]
c000483a:	52                   	push   edx
c000483b:	50                   	push   eax
c000483c:	53                   	push   ebx
c000483d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004841:	e8 ac d3 ff ff       	call   c0001bf2 <disk_write>
c0004846:	83 c4 20             	add    esp,0x20
c0004849:	85 c0                	test   eax,eax
c000484b:	0f 85 d7 fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004851:	83 ec 0c             	sub    esp,0xc
c0004854:	31 d2                	xor    edx,edx
c0004856:	6a 01                	push   0x1
c0004858:	89 e8                	mov    eax,ebp
c000485a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000485e:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004862:	52                   	push   edx
c0004863:	50                   	push   eax
c0004864:	53                   	push   ebx
c0004865:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004869:	e8 84 d3 ff ff       	call   c0001bf2 <disk_write>
c000486e:	83 c4 20             	add    esp,0x20
c0004871:	85 c0                	test   eax,eax
c0004873:	0f 85 af fd ff ff    	jne    c0004628 <create_partition+0x31>
c0004879:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000487d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004881:	3d 00 40 00 00       	cmp    eax,0x4000
c0004886:	74 0d                	je     c0004895 <create_partition+0x29e>
c0004888:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000488c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004890:	e9 12 fe ff ff       	jmp    c00046a7 <create_partition+0xb0>
c0004895:	31 d2                	xor    edx,edx
c0004897:	b9 00 02 00 00       	mov    ecx,0x200
c000489c:	89 d8                	mov    eax,ebx
c000489e:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048a1:	e8 15 d4 ff ff       	call   c0001cbb <mem_set>
c00048a6:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048a9:	b9 10 00 00 00       	mov    ecx,0x10
c00048ae:	ba 20 9c 02 c0       	mov    edx,0xc0029c20
c00048b3:	89 d8                	mov    eax,ebx
c00048b5:	e8 ec d3 ff ff       	call   c0001ca6 <mem_cpy>
c00048ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048be:	8d 43 58             	lea    eax,[ebx+0x58]
c00048c1:	f7 d2                	not    edx
c00048c3:	e8 d5 d3 ff ff       	call   c0001c9d <st_dword>
c00048c8:	8d 43 18             	lea    eax,[ebx+0x18]
c00048cb:	31 c9                	xor    ecx,ecx
c00048cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00048d0:	ba 01 00 00 00       	mov    edx,0x1
c00048d5:	e8 c6 d3 ff ff       	call   c0001ca0 <st_qword>
c00048da:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048de:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048e2:	83 c2 ff             	add    edx,0xffffffff
c00048e5:	89 e8                	mov    eax,ebp
c00048e7:	83 d1 ff             	adc    ecx,0xffffffff
c00048ea:	e8 b1 d3 ff ff       	call   c0001ca0 <st_qword>
c00048ef:	31 c9                	xor    ecx,ecx
c00048f1:	8d 43 28             	lea    eax,[ebx+0x28]
c00048f4:	ba 22 00 00 00       	mov    edx,0x22
c00048f9:	e8 a2 d3 ff ff       	call   c0001ca0 <st_qword>
c00048fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004902:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004906:	83 c2 de             	add    edx,0xffffffde
c0004909:	8d 43 30             	lea    eax,[ebx+0x30]
c000490c:	83 d1 ff             	adc    ecx,0xffffffff
c000490f:	31 f6                	xor    esi,esi
c0004911:	e8 8a d3 ff ff       	call   c0001ca0 <st_qword>
c0004916:	8d 43 54             	lea    eax,[ebx+0x54]
c0004919:	ba 80 00 00 00       	mov    edx,0x80
c000491e:	e8 7a d3 ff ff       	call   c0001c9d <st_dword>
c0004923:	8d 43 50             	lea    eax,[ebx+0x50]
c0004926:	ba 80 00 00 00       	mov    edx,0x80
c000492b:	e8 6d d3 ff ff       	call   c0001c9d <st_dword>
c0004930:	ba 02 00 00 00       	mov    edx,0x2
c0004935:	89 f8                	mov    eax,edi
c0004937:	e8 61 d3 ff ff       	call   c0001c9d <st_dword>
c000493c:	8d 53 38             	lea    edx,[ebx+0x38]
c000493f:	b9 10 00 00 00       	mov    ecx,0x10
c0004944:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004948:	e8 ad d9 ff ff       	call   c00022fa <make_rand>
c000494d:	83 c8 ff             	or     eax,0xffffffff
c0004950:	46                   	inc    esi
c0004951:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004956:	e8 fb d8 ff ff       	call   c0002256 <crc32>
c000495b:	83 fe 5c             	cmp    esi,0x5c
c000495e:	75 f0                	jne    c0004950 <create_partition+0x359>
c0004960:	f7 d0                	not    eax
c0004962:	8d 73 10             	lea    esi,[ebx+0x10]
c0004965:	89 c2                	mov    edx,eax
c0004967:	89 f0                	mov    eax,esi
c0004969:	e8 2f d3 ff ff       	call   c0001c9d <st_dword>
c000496e:	83 ec 0c             	sub    esp,0xc
c0004971:	6a 01                	push   0x1
c0004973:	6a 00                	push   0x0
c0004975:	6a 01                	push   0x1
c0004977:	53                   	push   ebx
c0004978:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000497c:	e8 71 d2 ff ff       	call   c0001bf2 <disk_write>
c0004981:	83 c4 20             	add    esp,0x20
c0004984:	85 c0                	test   eax,eax
c0004986:	0f 85 9c fc ff ff    	jne    c0004628 <create_partition+0x31>
c000498c:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004990:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004994:	83 c2 ff             	add    edx,0xffffffff
c0004997:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000499a:	83 d1 ff             	adc    ecx,0xffffffff
c000499d:	e8 fe d2 ff ff       	call   c0001ca0 <st_qword>
c00049a2:	ba 01 00 00 00       	mov    edx,0x1
c00049a7:	31 c9                	xor    ecx,ecx
c00049a9:	89 e8                	mov    eax,ebp
c00049ab:	e8 f0 d2 ff ff       	call   c0001ca0 <st_qword>
c00049b0:	89 f8                	mov    eax,edi
c00049b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049b6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049ba:	31 ff                	xor    edi,edi
c00049bc:	e8 df d2 ff ff       	call   c0001ca0 <st_qword>
c00049c1:	89 f0                	mov    eax,esi
c00049c3:	31 d2                	xor    edx,edx
c00049c5:	e8 d3 d2 ff ff       	call   c0001c9d <st_dword>
c00049ca:	83 c8 ff             	or     eax,0xffffffff
c00049cd:	47                   	inc    edi
c00049ce:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049d3:	e8 7e d8 ff ff       	call   c0002256 <crc32>
c00049d8:	83 ff 5c             	cmp    edi,0x5c
c00049db:	75 f0                	jne    c00049cd <create_partition+0x3d6>
c00049dd:	f7 d0                	not    eax
c00049df:	89 c2                	mov    edx,eax
c00049e1:	89 f0                	mov    eax,esi
c00049e3:	e8 b5 d2 ff ff       	call   c0001c9d <st_dword>
c00049e8:	83 ec 0c             	sub    esp,0xc
c00049eb:	6a 01                	push   0x1
c00049ed:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00049f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00049f5:	83 c0 ff             	add    eax,0xffffffff
c00049f8:	83 d2 ff             	adc    edx,0xffffffff
c00049fb:	52                   	push   edx
c00049fc:	50                   	push   eax
c00049fd:	53                   	push   ebx
c00049fe:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a02:	e8 eb d1 ff ff       	call   c0001bf2 <disk_write>
c0004a07:	83 c4 20             	add    esp,0x20
c0004a0a:	85 c0                	test   eax,eax
c0004a0c:	0f 85 16 fc ff ff    	jne    c0004628 <create_partition+0x31>
c0004a12:	31 d2                	xor    edx,edx
c0004a14:	89 d8                	mov    eax,ebx
c0004a16:	b9 00 02 00 00       	mov    ecx,0x200
c0004a1b:	e8 9b d2 ff ff       	call   c0001cbb <mem_set>
c0004a20:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a26:	b9 10 00 00 00       	mov    ecx,0x10
c0004a2b:	ba 30 9c 02 c0       	mov    edx,0xc0029c30
c0004a30:	e8 71 d2 ff ff       	call   c0001ca6 <mem_cpy>
c0004a35:	e9 21 01 00 00       	jmp    c0004b5b <create_partition+0x564>
c0004a3a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a3e:	b9 05 00 00 00       	mov    ecx,0x5
c0004a43:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a46:	bf 08 00 00 00       	mov    edi,0x8
c0004a4b:	89 f8                	mov    eax,edi
c0004a4d:	31 d2                	xor    edx,edx
c0004a4f:	0f b6 f0             	movzx  esi,al
c0004a52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a55:	f7 f6                	div    esi
c0004a57:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a5c:	76 0a                	jbe    c0004a68 <create_partition+0x471>
c0004a5e:	d1 e7                	shl    edi,1
c0004a60:	49                   	dec    ecx
c0004a61:	75 e8                	jne    c0004a4b <create_partition+0x454>
c0004a63:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a68:	b9 00 02 00 00       	mov    ecx,0x200
c0004a6d:	31 d2                	xor    edx,edx
c0004a6f:	89 d8                	mov    eax,ebx
c0004a71:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a77:	e8 3f d2 ff ff       	call   c0001cbb <mem_set>
c0004a7c:	b9 64 00 00 00       	mov    ecx,0x64
c0004a81:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a84:	31 d2                	xor    edx,edx
c0004a86:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004a8e:	f7 f1                	div    ecx
c0004a90:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004a95:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004a99:	89 f8                	mov    eax,edi
c0004a9b:	0f b6 c0             	movzx  eax,al
c0004a9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004aa2:	e9 80 00 00 00       	jmp    c0004b27 <create_partition+0x530>
c0004aa7:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004aaa:	29 cf                	sub    edi,ecx
c0004aac:	89 ca                	mov    edx,ecx
c0004aae:	89 f0                	mov    eax,esi
c0004ab0:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ab5:	e8 e3 d1 ff ff       	call   c0001c9d <st_dword>
c0004aba:	8d 46 04             	lea    eax,[esi+0x4]
c0004abd:	89 fa                	mov    edx,edi
c0004abf:	83 c6 10             	add    esi,0x10
c0004ac2:	e8 d6 d1 ff ff       	call   c0001c9d <st_dword>
c0004ac7:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004acb:	31 d2                	xor    edx,edx
c0004acd:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004ad0:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004ad4:	89 c8                	mov    eax,ecx
c0004ad6:	01 f9                	add    ecx,edi
c0004ad8:	f7 f5                	div    ebp
c0004ada:	89 d5                	mov    ebp,edx
c0004adc:	31 d2                	xor    edx,edx
c0004ade:	45                   	inc    ebp
c0004adf:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004ae3:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004ae6:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004ae9:	89 c2                	mov    edx,eax
c0004aeb:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004aee:	c1 ea 02             	shr    edx,0x2
c0004af1:	83 e2 c0             	and    edx,0xffffffc0
c0004af4:	09 ea                	or     edx,ebp
c0004af6:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004afb:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004afe:	31 d2                	xor    edx,edx
c0004b00:	f7 f5                	div    ebp
c0004b02:	89 d7                	mov    edi,edx
c0004b04:	31 d2                	xor    edx,edx
c0004b06:	47                   	inc    edi
c0004b07:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b0b:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b0e:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b11:	89 c5                	mov    ebp,eax
c0004b13:	c1 ed 02             	shr    ebp,0x2
c0004b16:	83 e5 c0             	and    ebp,0xffffffc0
c0004b19:	09 ef                	or     edi,ebp
c0004b1b:	89 fa                	mov    edx,edi
c0004b1d:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b20:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b25:	74 34                	je     c0004b5b <create_partition+0x564>
c0004b27:	85 c9                	test   ecx,ecx
c0004b29:	74 30                	je     c0004b5b <create_partition+0x564>
c0004b2b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b2e:	76 2b                	jbe    c0004b5b <create_partition+0x564>
c0004b30:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b34:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b38:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b3b:	83 ff 64             	cmp    edi,0x64
c0004b3e:	76 4b                	jbe    c0004b8b <create_partition+0x594>
c0004b40:	89 f8                	mov    eax,edi
c0004b42:	01 c8                	add    eax,ecx
c0004b44:	0f 82 5d ff ff ff    	jb     c0004aa7 <create_partition+0x4b0>
c0004b4a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b4d:	0f 87 54 ff ff ff    	ja     c0004aa7 <create_partition+0x4b0>
c0004b53:	85 ff                	test   edi,edi
c0004b55:	0f 85 51 ff ff ff    	jne    c0004aac <create_partition+0x4b5>
c0004b5b:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b61:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b66:	e8 2e d1 ff ff       	call   c0001c99 <st_word>
c0004b6b:	83 ec 0c             	sub    esp,0xc
c0004b6e:	6a 01                	push   0x1
c0004b70:	6a 00                	push   0x0
c0004b72:	6a 00                	push   0x0
c0004b74:	53                   	push   ebx
c0004b75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b79:	e8 74 d0 ff ff       	call   c0001bf2 <disk_write>
c0004b7e:	83 c4 20             	add    esp,0x20
c0004b81:	85 c0                	test   eax,eax
c0004b83:	0f 95 c0             	setne  al
c0004b86:	0f b6 c0             	movzx  eax,al
c0004b89:	eb 0e                	jmp    c0004b99 <create_partition+0x5a2>
c0004b8b:	74 07                	je     c0004b94 <create_partition+0x59d>
c0004b8d:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004b92:	eb ac                	jmp    c0004b40 <create_partition+0x549>
c0004b94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b97:	eb a7                	jmp    c0004b40 <create_partition+0x549>
c0004b99:	83 c4 5c             	add    esp,0x5c
c0004b9c:	5b                   	pop    ebx
c0004b9d:	5e                   	pop    esi
c0004b9e:	5f                   	pop    edi
c0004b9f:	5d                   	pop    ebp
c0004ba0:	c3                   	ret    

c0004ba1 <get_fileinfo>:
c0004ba1:	55                   	push   ebp
c0004ba2:	57                   	push   edi
c0004ba3:	56                   	push   esi
c0004ba4:	53                   	push   ebx
c0004ba5:	83 ec 1c             	sub    esp,0x1c
c0004ba8:	8b 30                	mov    esi,DWORD PTR [eax]
c0004baa:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bae:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bb2:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bb5:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bb8:	0f 84 dc 01 00 00    	je     c0004d9a <get_fileinfo+0x1f9>
c0004bbe:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bc1:	75 0f                	jne    c0004bd2 <get_fileinfo+0x31>
c0004bc3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004bc6:	83 c4 1c             	add    esp,0x1c
c0004bc9:	5b                   	pop    ebx
c0004bca:	5e                   	pop    esi
c0004bcb:	5f                   	pop    edi
c0004bcc:	5d                   	pop    ebp
c0004bcd:	e9 58 d5 ff ff       	jmp    c000212a <get_xfileinfo>
c0004bd2:	89 d3                	mov    ebx,edx
c0004bd4:	89 c6                	mov    esi,eax
c0004bd6:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bda:	74 6a                	je     c0004c46 <get_fileinfo+0xa5>
c0004bdc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004be4:	31 ed                	xor    ebp,ebp
c0004be6:	31 ff                	xor    edi,edi
c0004be8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004bec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004bf0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004bf3:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004bf7:	66 85 d2             	test   dx,dx
c0004bfa:	74 3e                	je     c0004c3a <get_fileinfo+0x99>
c0004bfc:	66 85 ed             	test   bp,bp
c0004bff:	75 0c                	jne    c0004c0d <get_fileinfo+0x6c>
c0004c01:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c07:	66 3d ff 07          	cmp    ax,0x7ff
c0004c0b:	76 22                	jbe    c0004c2f <get_fileinfo+0x8e>
c0004c0d:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c12:	89 e8                	mov    eax,ebp
c0004c14:	29 f9                	sub    ecx,edi
c0004c16:	c1 e0 10             	shl    eax,0x10
c0004c19:	09 d0                	or     eax,edx
c0004c1b:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c1f:	e8 a3 d1 ff ff       	call   c0001dc7 <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 10                	je     c0004c38 <get_fileinfo+0x97>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	31 d2                	xor    edx,edx
c0004c2d:	01 c7                	add    edi,eax
c0004c2f:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c34:	89 d5                	mov    ebp,edx
c0004c36:	eb b0                	jmp    c0004be8 <get_fileinfo+0x47>
c0004c38:	31 ff                	xor    edi,edi
c0004c3a:	66 85 ed             	test   bp,bp
c0004c3d:	74 02                	je     c0004c41 <get_fileinfo+0xa0>
c0004c3f:	31 ff                	xor    edi,edi
c0004c41:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c46:	31 ff                	xor    edi,edi
c0004c48:	31 c9                	xor    ecx,ecx
c0004c4a:	83 f9 0a             	cmp    ecx,0xa
c0004c4d:	0f 87 ad 00 00 00    	ja     c0004d00 <get_fileinfo+0x15f>
c0004c53:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c56:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c59:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c5d:	66 83 fa 20          	cmp    dx,0x20
c0004c61:	0f 84 92 00 00 00    	je     c0004cf9 <get_fileinfo+0x158>
c0004c67:	66 83 fa 05          	cmp    dx,0x5
c0004c6b:	75 05                	jne    c0004c72 <get_fileinfo+0xd1>
c0004c6d:	ba e5 00 00 00       	mov    edx,0xe5
c0004c72:	83 ff 0b             	cmp    edi,0xb
c0004c75:	77 0b                	ja     c0004c82 <get_fileinfo+0xe1>
c0004c77:	83 fd 09             	cmp    ebp,0x9
c0004c7a:	75 06                	jne    c0004c82 <get_fileinfo+0xe1>
c0004c7c:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c81:	47                   	inc    edi
c0004c82:	0f b7 c2             	movzx  eax,dx
c0004c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c89:	e8 6d d0 ff ff       	call   c0001cfb <dbc_1st>
c0004c8e:	85 c0                	test   eax,eax
c0004c90:	74 2f                	je     c0004cc1 <get_fileinfo+0x120>
c0004c92:	83 fd 08             	cmp    ebp,0x8
c0004c95:	74 2a                	je     c0004cc1 <get_fileinfo+0x120>
c0004c97:	83 fd 0b             	cmp    ebp,0xb
c0004c9a:	74 25                	je     c0004cc1 <get_fileinfo+0x120>
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ca3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ca7:	e8 52 d0 ff ff       	call   c0001cfe <dbc_2nd>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	74 11                	je     c0004cc1 <get_fileinfo+0x120>
c0004cb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cb9:	c1 e2 08             	shl    edx,0x8
c0004cbc:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cbf:	09 c2                	or     edx,eax
c0004cc1:	0f b7 d2             	movzx  edx,dx
c0004cc4:	50                   	push   eax
c0004cc5:	50                   	push   eax
c0004cc6:	68 b5 01 00 00       	push   0x1b5
c0004ccb:	52                   	push   edx
c0004ccc:	e8 46 38 00 00       	call   c0008517 <ff_oem2uni>
c0004cd1:	83 c4 10             	add    esp,0x10
c0004cd4:	66 85 c0             	test   ax,ax
c0004cd7:	75 04                	jne    c0004cdd <get_fileinfo+0x13c>
c0004cd9:	31 ff                	xor    edi,edi
c0004cdb:	eb 23                	jmp    c0004d00 <get_fileinfo+0x15f>
c0004cdd:	b9 0c 00 00 00       	mov    ecx,0xc
c0004ce2:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ce6:	29 f9                	sub    ecx,edi
c0004ce8:	0f b7 c0             	movzx  eax,ax
c0004ceb:	e8 d7 d0 ff ff       	call   c0001dc7 <put_utf>
c0004cf0:	84 c0                	test   al,al
c0004cf2:	74 e5                	je     c0004cd9 <get_fileinfo+0x138>
c0004cf4:	0f b6 c0             	movzx  eax,al
c0004cf7:	01 c7                	add    edi,eax
c0004cf9:	89 e9                	mov    ecx,ebp
c0004cfb:	e9 4a ff ff ff       	jmp    c0004c4a <get_fileinfo+0xa9>
c0004d00:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d05:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d09:	75 54                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d0b:	85 ff                	test   edi,edi
c0004d0d:	75 0b                	jne    c0004d1a <get_fileinfo+0x179>
c0004d0f:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d13:	ba 01 00 00 00       	mov    edx,0x1
c0004d18:	eb 33                	jmp    c0004d4d <get_fileinfo+0x1ac>
c0004d1a:	b1 08                	mov    cl,0x8
c0004d1c:	31 d2                	xor    edx,edx
c0004d1e:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d24:	84 c0                	test   al,al
c0004d26:	74 25                	je     c0004d4d <get_fileinfo+0x1ac>
c0004d28:	66 83 f8 2e          	cmp    ax,0x2e
c0004d2c:	74 16                	je     c0004d44 <get_fileinfo+0x1a3>
c0004d2e:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d31:	66 83 ff 19          	cmp    di,0x19
c0004d35:	77 0f                	ja     c0004d46 <get_fileinfo+0x1a5>
c0004d37:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d3a:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d3d:	74 07                	je     c0004d46 <get_fileinfo+0x1a5>
c0004d3f:	83 c0 20             	add    eax,0x20
c0004d42:	eb 02                	jmp    c0004d46 <get_fileinfo+0x1a5>
c0004d44:	b1 10                	mov    cl,0x10
c0004d46:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d4a:	42                   	inc    edx
c0004d4b:	eb d1                	jmp    c0004d1e <get_fileinfo+0x17d>
c0004d4d:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d55:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d59:	75 04                	jne    c0004d5f <get_fileinfo+0x1be>
c0004d5b:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d62:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d65:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d68:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d6b:	83 c0 1c             	add    eax,0x1c
c0004d6e:	e8 c1 ce ff ff       	call   c0001c34 <ld_dword>
c0004d73:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d7a:	89 03                	mov    DWORD PTR [ebx],eax
c0004d7c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7f:	83 c0 16             	add    eax,0x16
c0004d82:	e8 a0 ce ff ff       	call   c0001c27 <ld_word>
c0004d87:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004d8b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8e:	83 c0 18             	add    eax,0x18
c0004d91:	e8 91 ce ff ff       	call   c0001c27 <ld_word>
c0004d96:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004d9a:	83 c4 1c             	add    esp,0x1c
c0004d9d:	5b                   	pop    ebx
c0004d9e:	5e                   	pop    esi
c0004d9f:	5f                   	pop    edi
c0004da0:	5d                   	pop    ebp
c0004da1:	c3                   	ret    

c0004da2 <ld_clust.isra.0>:
c0004da2:	56                   	push   esi
c0004da3:	89 c6                	mov    esi,eax
c0004da5:	53                   	push   ebx
c0004da6:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004da9:	89 d3                	mov    ebx,edx
c0004dab:	e8 77 ce ff ff       	call   c0001c27 <ld_word>
c0004db0:	0f b7 c8             	movzx  ecx,ax
c0004db3:	89 f0                	mov    eax,esi
c0004db5:	3c 03                	cmp    al,0x3
c0004db7:	75 0d                	jne    c0004dc6 <ld_clust.isra.0+0x24>
c0004db9:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dbc:	e8 66 ce ff ff       	call   c0001c27 <ld_word>
c0004dc1:	c1 e0 10             	shl    eax,0x10
c0004dc4:	09 c1                	or     ecx,eax
c0004dc6:	89 c8                	mov    eax,ecx
c0004dc8:	5b                   	pop    ebx
c0004dc9:	5e                   	pop    esi
c0004dca:	c3                   	ret    

c0004dcb <st_clust.isra.1>:
c0004dcb:	56                   	push   esi
c0004dcc:	89 c6                	mov    esi,eax
c0004dce:	53                   	push   ebx
c0004dcf:	89 d3                	mov    ebx,edx
c0004dd1:	0f b7 d1             	movzx  edx,cx
c0004dd4:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004dd7:	e8 bd ce ff ff       	call   c0001c99 <st_word>
c0004ddc:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004ddf:	75 0f                	jne    c0004df0 <st_clust.isra.1+0x25>
c0004de1:	c1 e9 10             	shr    ecx,0x10
c0004de4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004de7:	89 ca                	mov    edx,ecx
c0004de9:	5b                   	pop    ebx
c0004dea:	5e                   	pop    esi
c0004deb:	e9 a9 ce ff ff       	jmp    c0001c99 <st_word>
c0004df0:	5b                   	pop    ebx
c0004df1:	5e                   	pop    esi
c0004df2:	c3                   	ret    

c0004df3 <init_alloc_info.isra.2>:
c0004df3:	56                   	push   esi
c0004df4:	53                   	push   ebx
c0004df5:	89 c6                	mov    esi,eax
c0004df7:	89 d3                	mov    ebx,edx
c0004df9:	51                   	push   ecx
c0004dfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0004dfc:	83 c0 34             	add    eax,0x34
c0004dff:	e8 30 ce ff ff       	call   c0001c34 <ld_dword>
c0004e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e07:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e09:	83 c0 38             	add    eax,0x38
c0004e0c:	e8 3b ce ff ff       	call   c0001c4c <ld_qword>
c0004e11:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e14:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e17:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e19:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e1c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e23:	83 e0 02             	and    eax,0x2
c0004e26:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e29:	5b                   	pop    ebx
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <follow_path>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c3                	mov    ebx,eax
c0004e31:	83 ec 14             	sub    esp,0x14
c0004e34:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e38:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e3a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e3e:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e40:	80 fa 5c             	cmp    dl,0x5c
c0004e43:	75 07                	jne    c0004e4c <follow_path+0x1f>
c0004e45:	40                   	inc    eax
c0004e46:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e4a:	eb ee                	jmp    c0004e3a <follow_path+0xd>
c0004e4c:	80 fa 2f             	cmp    dl,0x2f
c0004e4f:	74 f4                	je     c0004e45 <follow_path+0x18>
c0004e51:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e58:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5f:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e62:	77 52                	ja     c0004eb6 <follow_path+0x89>
c0004e64:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e68:	31 d2                	xor    edx,edx
c0004e6a:	89 d8                	mov    eax,ebx
c0004e6c:	e8 12 e3 ff ff       	call   c0003183 <dir_sdi>
c0004e71:	eb 7c                	jmp    c0004eef <follow_path+0xc2>
c0004e73:	89 d8                	mov    eax,ebx
c0004e75:	e8 6e f2 ff ff       	call   c00040e8 <dir_find>
c0004e7a:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e7d:	85 c0                	test   eax,eax
c0004e7f:	75 46                	jne    c0004ec7 <follow_path+0x9a>
c0004e81:	80 e2 04             	and    dl,0x4
c0004e84:	75 69                	jne    c0004eef <follow_path+0xc2>
c0004e86:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004e8a:	74 5e                	je     c0004eea <follow_path+0xbd>
c0004e8c:	8a 06                	mov    al,BYTE PTR [esi]
c0004e8e:	3c 04                	cmp    al,0x4
c0004e90:	75 41                	jne    c0004ed3 <follow_path+0xa6>
c0004e92:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e95:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004e99:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004e9c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004e9f:	30 c0                	xor    al,al
c0004ea1:	09 d0                	or     eax,edx
c0004ea3:	89 da                	mov    edx,ebx
c0004ea5:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ea8:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004eab:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004eae:	8d 46 10             	lea    eax,[esi+0x10]
c0004eb1:	e8 3d ff ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0004eb6:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004eba:	89 d8                	mov    eax,ebx
c0004ebc:	e8 a9 ed ff ff       	call   c0003c6a <create_name>
c0004ec1:	85 c0                	test   eax,eax
c0004ec3:	74 ae                	je     c0004e73 <follow_path+0x46>
c0004ec5:	eb 28                	jmp    c0004eef <follow_path+0xc2>
c0004ec7:	83 f8 04             	cmp    eax,0x4
c0004eca:	75 23                	jne    c0004eef <follow_path+0xc2>
c0004ecc:	80 e2 04             	and    dl,0x4
c0004ecf:	74 19                	je     c0004eea <follow_path+0xbd>
c0004ed1:	eb 1c                	jmp    c0004eef <follow_path+0xc2>
c0004ed3:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ed6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004edc:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ee0:	e8 bd fe ff ff       	call   c0004da2 <ld_clust.isra.0>
c0004ee5:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004ee8:	eb cc                	jmp    c0004eb6 <follow_path+0x89>
c0004eea:	b8 05 00 00 00       	mov    eax,0x5
c0004eef:	83 c4 14             	add    esp,0x14
c0004ef2:	5b                   	pop    ebx
c0004ef3:	5e                   	pop    esi
c0004ef4:	c3                   	ret    

c0004ef5 <f_mount>:
c0004ef5:	53                   	push   ebx
c0004ef6:	83 ec 18             	sub    esp,0x18
c0004ef9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004efd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f09:	e8 fb d2 ff ff       	call   c0002209 <get_ldnumber>
c0004f0e:	89 c2                	mov    edx,eax
c0004f10:	b8 0b 00 00 00       	mov    eax,0xb
c0004f15:	85 d2                	test   edx,edx
c0004f17:	78 39                	js     c0004f52 <f_mount+0x5d>
c0004f19:	8b 04 95 e0 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1220]
c0004f20:	85 c0                	test   eax,eax
c0004f22:	74 03                	je     c0004f27 <f_mount+0x32>
c0004f24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 c0                	test   eax,eax
c0004f2d:	74 03                	je     c0004f32 <f_mount+0x3d>
c0004f2f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f36:	89 04 95 e0 ed 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1220],eax
c0004f3d:	31 c0                	xor    eax,eax
c0004f3f:	84 db                	test   bl,bl
c0004f41:	74 0f                	je     c0004f52 <f_mount+0x5d>
c0004f43:	31 c9                	xor    ecx,ecx
c0004f45:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 65 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f52:	83 c4 18             	add    esp,0x18
c0004f55:	5b                   	pop    ebx
c0004f56:	c3                   	ret    

c0004f57 <f_open>:
c0004f57:	55                   	push   ebp
c0004f58:	bd 09 00 00 00       	mov    ebp,0x9
c0004f5d:	57                   	push   edi
c0004f5e:	56                   	push   esi
c0004f5f:	53                   	push   ebx
c0004f60:	83 ec 7c             	sub    esp,0x7c
c0004f63:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f6a:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f71:	85 db                	test   ebx,ebx
c0004f73:	0f 84 10 04 00 00    	je     c0005389 <f_open+0x432>
c0004f79:	89 fe                	mov    esi,edi
c0004f7b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f7f:	83 e6 3f             	and    esi,0x3f
c0004f82:	89 f0                	mov    eax,esi
c0004f84:	0f b6 c8             	movzx  ecx,al
c0004f87:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004f8e:	e8 24 d7 ff ff       	call   c00026b7 <mount_volume>
c0004f93:	89 c5                	mov    ebp,eax
c0004f95:	85 c0                	test   eax,eax
c0004f97:	0f 85 e6 03 00 00    	jne    c0005383 <f_open+0x42c>
c0004f9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fa1:	bd 11 00 00 00       	mov    ebp,0x11
c0004fa6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004faa:	83 ec 0c             	sub    esp,0xc
c0004fad:	68 60 04 00 00       	push   0x460
c0004fb2:	e8 a3 34 00 00       	call   c000845a <ff_memalloc>
c0004fb7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fbb:	83 c4 10             	add    esp,0x10
c0004fbe:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fc3:	0f 84 c0 03 00 00    	je     c0005389 <f_open+0x432>
c0004fc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fcd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fd1:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004fd7:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004fda:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004fdd:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fe4:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fe8:	e8 40 fe ff ff       	call   c0004e2d <follow_path>
c0004fed:	89 c5                	mov    ebp,eax
c0004fef:	85 c0                	test   eax,eax
c0004ff1:	75 0c                	jne    c0004fff <f_open+0xa8>
c0004ff3:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004ff8:	79 05                	jns    c0004fff <f_open+0xa8>
c0004ffa:	bd 06 00 00 00       	mov    ebp,0x6
c0004fff:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005005:	0f 84 84 01 00 00    	je     c000518f <f_open+0x238>
c000500b:	85 ed                	test   ebp,ebp
c000500d:	74 20                	je     c000502f <f_open+0xd8>
c000500f:	83 fd 04             	cmp    ebp,0x4
c0005012:	0f 85 58 03 00 00    	jne    c0005370 <f_open+0x419>
c0005018:	8d 44 24 24          	lea    eax,[esp+0x24]
c000501c:	83 ce 08             	or     esi,0x8
c000501f:	e8 8a f2 ff ff       	call   c00042ae <dir_register>
c0005024:	89 c5                	mov    ebp,eax
c0005026:	85 c0                	test   eax,eax
c0005028:	74 2f                	je     c0005059 <f_open+0x102>
c000502a:	e9 41 03 00 00       	jmp    c0005370 <f_open+0x419>
c000502f:	bd 07 00 00 00       	mov    ebp,0x7
c0005034:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005039:	0f 85 31 03 00 00    	jne    c0005370 <f_open+0x419>
c000503f:	bd 08 00 00 00       	mov    ebp,0x8
c0005044:	f7 c7 04 00 00 00    	test   edi,0x4
c000504a:	0f 85 20 03 00 00    	jne    c0005370 <f_open+0x419>
c0005050:	83 e7 08             	and    edi,0x8
c0005053:	0f 84 65 01 00 00    	je     c00051be <f_open+0x267>
c0005059:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000505d:	8a 02                	mov    al,BYTE PTR [edx]
c000505f:	3c 04                	cmp    al,0x4
c0005061:	0f 85 97 00 00 00    	jne    c00050fe <f_open+0x1a7>
c0005067:	8d 42 10             	lea    eax,[edx+0x10]
c000506a:	89 13                	mov    DWORD PTR [ebx],edx
c000506c:	89 da                	mov    edx,ebx
c000506e:	e8 80 fd ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0005073:	31 d2                	xor    edx,edx
c0005075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005079:	b9 1e 00 00 00       	mov    ecx,0x1e
c000507e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005081:	83 c0 02             	add    eax,0x2
c0005084:	e8 32 cc ff ff       	call   c0001cbb <mem_set>
c0005089:	b9 1a 00 00 00       	mov    ecx,0x1a
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005097:	83 c0 26             	add    eax,0x26
c000509a:	e8 1c cc ff ff       	call   c0001cbb <mem_set>
c000509f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050a6:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050aa:	ba 00 00 21 50       	mov    edx,0x50210000
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 08             	add    eax,0x8
c00050b5:	e8 e3 cb ff ff       	call   c0001c9d <st_dword>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050c1:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050c5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050c9:	e8 b7 ea ff ff       	call   c0003b85 <store_xdir>
c00050ce:	89 c5                	mov    ebp,eax
c00050d0:	85 c0                	test   eax,eax
c00050d2:	0f 85 98 02 00 00    	jne    c0005370 <f_open+0x419>
c00050d8:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050db:	85 d2                	test   edx,edx
c00050dd:	0f 84 db 00 00 00    	je     c00051be <f_open+0x267>
c00050e3:	31 c9                	xor    ecx,ecx
c00050e5:	89 d8                	mov    eax,ebx
c00050e7:	e8 8e e3 ff ff       	call   c000347a <remove_chain>
c00050ec:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050f0:	89 c5                	mov    ebp,eax
c00050f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00050f5:	48                   	dec    eax
c00050f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00050f9:	e9 b8 00 00 00       	jmp    c00051b6 <f_open+0x25f>
c00050fe:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005102:	89 ea                	mov    edx,ebp
c0005104:	e8 99 fc ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005109:	ba 00 00 21 50       	mov    edx,0x50210000
c000510e:	89 c7                	mov    edi,eax
c0005110:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005113:	e8 85 cb ff ff       	call   c0001c9d <st_dword>
c0005118:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000511c:	31 c9                	xor    ecx,ecx
c000511e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005126:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000512a:	e8 9c fc ff ff       	call   c0004dcb <st_clust.isra.1>
c000512f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005133:	31 d2                	xor    edx,edx
c0005135:	83 c0 1c             	add    eax,0x1c
c0005138:	e8 60 cb ff ff       	call   c0001c9d <st_dword>
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	85 ff                	test   edi,edi
c0005143:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005147:	74 75                	je     c00051be <f_open+0x267>
c0005149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000514d:	31 c9                	xor    ecx,ecx
c000514f:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005152:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005155:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000515d:	89 fa                	mov    edx,edi
c000515f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005163:	e8 12 e3 ff ff       	call   c000347a <remove_chain>
c0005168:	89 c5                	mov    ebp,eax
c000516a:	85 c0                	test   eax,eax
c000516c:	0f 85 fe 01 00 00    	jne    c0005370 <f_open+0x419>
c0005172:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005176:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000517a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517e:	4f                   	dec    edi
c000517f:	e8 81 d2 ff ff       	call   c0002405 <move_window>
c0005184:	89 c5                	mov    ebp,eax
c0005186:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000518a:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c000518d:	eb 27                	jmp    c00051b6 <f_open+0x25f>
c000518f:	85 ed                	test   ebp,ebp
c0005191:	0f 85 d9 01 00 00    	jne    c0005370 <f_open+0x419>
c0005197:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000519b:	bd 04 00 00 00       	mov    ebp,0x4
c00051a0:	a8 10                	test   al,0x10
c00051a2:	0f 85 c8 01 00 00    	jne    c0005370 <f_open+0x419>
c00051a8:	83 e7 02             	and    edi,0x2
c00051ab:	74 11                	je     c00051be <f_open+0x267>
c00051ad:	bd 07 00 00 00       	mov    ebp,0x7
c00051b2:	a8 01                	test   al,0x1
c00051b4:	eb 02                	jmp    c00051b8 <f_open+0x261>
c00051b6:	85 ed                	test   ebp,ebp
c00051b8:	0f 85 b2 01 00 00    	jne    c0005370 <f_open+0x419>
c00051be:	f7 c6 08 00 00 00    	test   esi,0x8
c00051c4:	74 03                	je     c00051c9 <f_open+0x272>
c00051c6:	83 ce 40             	or     esi,0x40
c00051c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051cd:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051d0:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051d3:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051d6:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051d9:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051dd:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051e0:	8a 02                	mov    al,BYTE PTR [edx]
c00051e2:	3c 04                	cmp    al,0x4
c00051e4:	75 2a                	jne    c0005210 <f_open+0x2b9>
c00051e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00051ea:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c00051ef:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00051f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00051f6:	30 c0                	xor    al,al
c00051f8:	09 c8                	or     eax,ecx
c00051fa:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c00051fd:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005201:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005204:	8d 42 10             	lea    eax,[edx+0x10]
c0005207:	89 da                	mov    edx,ebx
c0005209:	e8 e5 fb ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000520e:	eb 1c                	jmp    c000522c <f_open+0x2d5>
c0005210:	89 fa                	mov    edx,edi
c0005212:	e8 8b fb ff ff       	call   c0004da2 <ld_clust.isra.0>
c0005217:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000521a:	8d 47 1c             	lea    eax,[edi+0x1c]
c000521d:	e8 12 ca ff ff       	call   c0001c34 <ld_dword>
c0005222:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005229:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000522c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005230:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005237:	89 03                	mov    DWORD PTR [ebx],eax
c0005239:	31 d2                	xor    edx,edx
c000523b:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000523f:	b9 00 02 00 00       	mov    ecx,0x200
c0005244:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005248:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000524c:	89 f0                	mov    eax,esi
c000524e:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005255:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005258:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000525f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005262:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005269:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005274:	e8 42 ca ff ff       	call   c0001cbb <mem_set>
c0005279:	83 e6 20             	and    esi,0x20
c000527c:	75 07                	jne    c0005285 <f_open+0x32e>
c000527e:	31 ed                	xor    ebp,ebp
c0005280:	e9 eb 00 00 00       	jmp    c0005370 <f_open+0x419>
c0005285:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005288:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000528b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000528f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005297:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000529b:	74 e1                	je     c000527e <f_open+0x327>
c000529d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052a1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052a5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052a8:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052af:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052b2:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052b6:	31 ff                	xor    edi,edi
c00052b8:	c1 e5 09             	shl    ebp,0x9
c00052bb:	89 ee                	mov    esi,ebp
c00052bd:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052c1:	89 f8                	mov    eax,edi
c00052c3:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052c7:	73 22                	jae    c00052eb <f_open+0x394>
c00052c9:	89 d8                	mov    eax,ebx
c00052cb:	e8 bd dc ff ff       	call   c0002f8d <get_fat>
c00052d0:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052d4:	89 c2                	mov    edx,eax
c00052d6:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052da:	83 f8 01             	cmp    eax,0x1
c00052dd:	76 10                	jbe    c00052ef <f_open+0x398>
c00052df:	83 f8 ff             	cmp    eax,0xffffffff
c00052e2:	75 d9                	jne    c00052bd <f_open+0x366>
c00052e4:	bd 01 00 00 00       	mov    ebp,0x1
c00052e9:	eb 09                	jmp    c00052f4 <f_open+0x39d>
c00052eb:	31 ed                	xor    ebp,ebp
c00052ed:	eb 05                	jmp    c00052f4 <f_open+0x39d>
c00052ef:	bd 02 00 00 00       	mov    ebp,0x2
c00052f4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00052f7:	85 ed                	test   ebp,ebp
c00052f9:	75 75                	jne    c0005370 <f_open+0x419>
c00052fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052ff:	25 ff 01 00 00       	and    eax,0x1ff
c0005304:	0f 84 74 ff ff ff    	je     c000527e <f_open+0x327>
c000530a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000530e:	bd 02 00 00 00       	mov    ebp,0x2
c0005313:	89 c8                	mov    eax,ecx
c0005315:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005319:	e8 a2 cb ff ff       	call   c0001ec0 <clst2sect>
c000531e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005322:	89 d7                	mov    edi,edx
c0005324:	09 c7                	or     edi,eax
c0005326:	74 48                	je     c0005370 <f_open+0x419>
c0005328:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000532c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005330:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005338:	0f ac fe 09          	shrd   esi,edi,0x9
c000533c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005340:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005344:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005347:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000534b:	83 ec 0c             	sub    esp,0xc
c000534e:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005351:	6a 01                	push   0x1
c0005353:	52                   	push   edx
c0005354:	50                   	push   eax
c0005355:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005359:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000535d:	50                   	push   eax
c000535e:	e8 79 c8 ff ff       	call   c0001bdc <disk_read>
c0005363:	83 c4 20             	add    esp,0x20
c0005366:	85 c0                	test   eax,eax
c0005368:	0f 95 c0             	setne  al
c000536b:	0f b6 c0             	movzx  eax,al
c000536e:	89 c5                	mov    ebp,eax
c0005370:	83 ec 0c             	sub    esp,0xc
c0005373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005377:	e8 f4 30 00 00       	call   c0008470 <ff_memfree>
c000537c:	83 c4 10             	add    esp,0x10
c000537f:	85 ed                	test   ebp,ebp
c0005381:	74 06                	je     c0005389 <f_open+0x432>
c0005383:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005389:	83 c4 7c             	add    esp,0x7c
c000538c:	89 e8                	mov    eax,ebp
c000538e:	5b                   	pop    ebx
c000538f:	5e                   	pop    esi
c0005390:	5f                   	pop    edi
c0005391:	5d                   	pop    ebp
c0005392:	c3                   	ret    

c0005393 <f_read>:
c0005393:	55                   	push   ebp
c0005394:	57                   	push   edi
c0005395:	56                   	push   esi
c0005396:	53                   	push   ebx
c0005397:	83 ec 2c             	sub    esp,0x2c
c000539a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000539e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053ac:	89 d8                	mov    eax,ebx
c00053ae:	e8 77 cf ff ff       	call   c000232a <validate>
c00053b3:	89 c5                	mov    ebp,eax
c00053b5:	85 c0                	test   eax,eax
c00053b7:	0f 85 4c 02 00 00    	jne    c0005609 <f_read+0x276>
c00053bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	0f 85 40 02 00 00    	jne    c0005609 <f_read+0x276>
c00053c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053cd:	0f 84 31 02 00 00    	je     c0005604 <f_read+0x271>
c00053d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053dc:	bf 00 00 00 00       	mov    edi,0x0
c00053e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00053e8:	89 d1                	mov    ecx,edx
c00053ea:	19 f9                	sbb    ecx,edi
c00053ec:	0f 83 cf 00 00 00    	jae    c00054c1 <f_read+0x12e>
c00053f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053f6:	e9 c6 00 00 00       	jmp    c00054c1 <f_read+0x12e>
c00053fb:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053fe:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005401:	89 d0                	mov    eax,edx
c0005403:	25 ff 01 00 00       	and    eax,0x1ff
c0005408:	0f 85 c9 01 00 00    	jne    c00055d7 <f_read+0x244>
c000540e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005412:	89 d6                	mov    esi,edx
c0005414:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005418:	89 cf                	mov    edi,ecx
c000541a:	48                   	dec    eax
c000541b:	0f ac fe 09          	shrd   esi,edi,0x9
c000541f:	21 f0                	and    eax,esi
c0005421:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005425:	0f 84 a6 00 00 00    	je     c00054d1 <f_read+0x13e>
c000542b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000542f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005432:	89 c8                	mov    eax,ecx
c0005434:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005437:	e8 84 ca ff ff       	call   c0001ec0 <clst2sect>
c000543c:	89 d7                	mov    edi,edx
c000543e:	09 c7                	or     edi,eax
c0005440:	0f 84 b4 00 00 00    	je     c00054fa <f_read+0x167>
c0005446:	31 ff                	xor    edi,edi
c0005448:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000544c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000544f:	01 c6                	add    esi,eax
c0005451:	11 d7                	adc    edi,edx
c0005453:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000545b:	0f 86 fd 00 00 00    	jbe    c000555e <f_read+0x1cb>
c0005461:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005465:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005469:	c1 e8 09             	shr    eax,0x9
c000546c:	89 04 24             	mov    DWORD PTR [esp],eax
c000546f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005473:	03 14 24             	add    edx,DWORD PTR [esp]
c0005476:	39 c2                	cmp    edx,eax
c0005478:	76 07                	jbe    c0005481 <f_read+0xee>
c000547a:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000547e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005481:	83 ec 0c             	sub    esp,0xc
c0005484:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005488:	57                   	push   edi
c0005489:	56                   	push   esi
c000548a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000548e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005492:	50                   	push   eax
c0005493:	e8 44 c7 ff ff       	call   c0001bdc <disk_read>
c0005498:	83 c4 20             	add    esp,0x20
c000549b:	85 c0                	test   eax,eax
c000549d:	75 6e                	jne    c000550d <f_read+0x17a>
c000549f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054a3:	78 7e                	js     c0005523 <f_read+0x190>
c00054a5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054a8:	c1 e6 09             	shl    esi,0x9
c00054ab:	31 ff                	xor    edi,edi
c00054ad:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054b9:	01 30                	add    DWORD PTR [eax],esi
c00054bb:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054be:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054c6:	0f 85 2f ff ff ff    	jne    c00053fb <f_read+0x68>
c00054cc:	e9 38 01 00 00       	jmp    c0005609 <f_read+0x276>
c00054d1:	89 c8                	mov    eax,ecx
c00054d3:	09 d0                	or     eax,edx
c00054d5:	75 05                	jne    c00054dc <f_read+0x149>
c00054d7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054da:	eb 19                	jmp    c00054f5 <f_read+0x162>
c00054dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054e0:	74 09                	je     c00054eb <f_read+0x158>
c00054e2:	89 d8                	mov    eax,ebx
c00054e4:	e8 f8 c9 ff ff       	call   c0001ee1 <clmt_clust>
c00054e9:	eb 0a                	jmp    c00054f5 <f_read+0x162>
c00054eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054ee:	89 d8                	mov    eax,ebx
c00054f0:	e8 98 da ff ff       	call   c0002f8d <get_fat>
c00054f5:	83 f8 01             	cmp    eax,0x1
c00054f8:	77 0e                	ja     c0005508 <f_read+0x175>
c00054fa:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00054fe:	bd 02 00 00 00       	mov    ebp,0x2
c0005503:	e9 01 01 00 00       	jmp    c0005609 <f_read+0x276>
c0005508:	83 f8 ff             	cmp    eax,0xffffffff
c000550b:	75 0e                	jne    c000551b <f_read+0x188>
c000550d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005511:	bd 01 00 00 00       	mov    ebp,0x1
c0005516:	e9 ee 00 00 00       	jmp    c0005609 <f_read+0x276>
c000551b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000551e:	e9 08 ff ff ff       	jmp    c000542b <f_read+0x98>
c0005523:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005526:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005529:	29 f0                	sub    eax,esi
c000552b:	19 fa                	sbb    edx,edi
c000552d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005530:	89 d7                	mov    edi,edx
c0005532:	ba 00 00 00 00       	mov    edx,0x0
c0005537:	89 f9                	mov    ecx,edi
c0005539:	19 d1                	sbb    ecx,edx
c000553b:	0f 83 64 ff ff ff    	jae    c00054a5 <f_read+0x112>
c0005541:	89 c7                	mov    edi,eax
c0005543:	8d 53 50             	lea    edx,[ebx+0x50]
c0005546:	c1 e7 09             	shl    edi,0x9
c0005549:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000554d:	b9 00 02 00 00       	mov    ecx,0x200
c0005552:	01 f8                	add    eax,edi
c0005554:	e8 4d c7 ff ff       	call   c0001ca6 <mem_cpy>
c0005559:	e9 47 ff ff ff       	jmp    c00054a5 <f_read+0x112>
c000555e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005561:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005564:	89 04 24             	mov    DWORD PTR [esp],eax
c0005567:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000556b:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000556f:	75 05                	jne    c0005576 <f_read+0x1e3>
c0005571:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005574:	74 5b                	je     c00055d1 <f_read+0x23e>
c0005576:	8d 43 50             	lea    eax,[ebx+0x50]
c0005579:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000557d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005581:	79 2a                	jns    c00055ad <f_read+0x21a>
c0005583:	83 ec 0c             	sub    esp,0xc
c0005586:	6a 01                	push   0x1
c0005588:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000558c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005594:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005598:	50                   	push   eax
c0005599:	e8 54 c6 ff ff       	call   c0001bf2 <disk_write>
c000559e:	83 c4 20             	add    esp,0x20
c00055a1:	85 c0                	test   eax,eax
c00055a3:	0f 85 64 ff ff ff    	jne    c000550d <f_read+0x17a>
c00055a9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055ad:	83 ec 0c             	sub    esp,0xc
c00055b0:	6a 01                	push   0x1
c00055b2:	57                   	push   edi
c00055b3:	56                   	push   esi
c00055b4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055b8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055c0:	50                   	push   eax
c00055c1:	e8 16 c6 ff ff       	call   c0001bdc <disk_read>
c00055c6:	83 c4 20             	add    esp,0x20
c00055c9:	85 c0                	test   eax,eax
c00055cb:	0f 85 3c ff ff ff    	jne    c000550d <f_read+0x17a>
c00055d1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055d4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055d7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055da:	ba 00 02 00 00       	mov    edx,0x200
c00055df:	25 ff 01 00 00       	and    eax,0x1ff
c00055e4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055e8:	29 c2                	sub    edx,eax
c00055ea:	39 d6                	cmp    esi,edx
c00055ec:	76 02                	jbe    c00055f0 <f_read+0x25d>
c00055ee:	89 d6                	mov    esi,edx
c00055f0:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00055f4:	89 f1                	mov    ecx,esi
c00055f6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055fa:	e8 a7 c6 ff ff       	call   c0001ca6 <mem_cpy>
c00055ff:	e9 a7 fe ff ff       	jmp    c00054ab <f_read+0x118>
c0005604:	bd 07 00 00 00       	mov    ebp,0x7
c0005609:	83 c4 2c             	add    esp,0x2c
c000560c:	89 e8                	mov    eax,ebp
c000560e:	5b                   	pop    ebx
c000560f:	5e                   	pop    esi
c0005610:	5f                   	pop    edi
c0005611:	5d                   	pop    ebp
c0005612:	c3                   	ret    

c0005613 <f_write>:
c0005613:	55                   	push   ebp
c0005614:	57                   	push   edi
c0005615:	56                   	push   esi
c0005616:	53                   	push   ebx
c0005617:	83 ec 2c             	sub    esp,0x2c
c000561a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000561e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005622:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005628:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000562c:	89 d8                	mov    eax,ebx
c000562e:	e8 f7 cc ff ff       	call   c000232a <validate>
c0005633:	89 c5                	mov    ebp,eax
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 86 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c000563d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005641:	85 ed                	test   ebp,ebp
c0005643:	0f 85 7a 02 00 00    	jne    c00058c3 <f_write+0x2b0>
c0005649:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000564d:	0f 84 6b 02 00 00    	je     c00058be <f_write+0x2ab>
c0005653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005657:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000565a:	0f 84 43 01 00 00    	je     c00057a3 <f_write+0x190>
c0005660:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005663:	89 c1                	mov    ecx,eax
c0005665:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005669:	0f 83 34 01 00 00    	jae    c00057a3 <f_write+0x190>
c000566f:	f7 d0                	not    eax
c0005671:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005675:	e9 29 01 00 00       	jmp    c00057a3 <f_write+0x190>
c000567a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000567d:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005680:	89 d0                	mov    eax,edx
c0005682:	25 ff 01 00 00       	and    eax,0x1ff
c0005687:	0f 85 00 02 00 00    	jne    c000588d <f_write+0x27a>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	89 d6                	mov    esi,edx
c0005693:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005697:	89 cf                	mov    edi,ecx
c0005699:	48                   	dec    eax
c000569a:	0f ac fe 09          	shrd   esi,edi,0x9
c000569e:	21 f0                	and    eax,esi
c00056a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056a4:	0f 84 06 01 00 00    	je     c00057b0 <f_write+0x19d>
c00056aa:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056ae:	0f 88 6e 01 00 00    	js     c0005822 <f_write+0x20f>
c00056b4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056b8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056bb:	89 c8                	mov    eax,ecx
c00056bd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056c1:	e8 fa c7 ff ff       	call   c0001ec0 <clst2sect>
c00056c6:	89 d1                	mov    ecx,edx
c00056c8:	09 c1                	or     ecx,eax
c00056ca:	0f 84 1c 01 00 00    	je     c00057ec <f_write+0x1d9>
c00056d0:	31 ff                	xor    edi,edi
c00056d2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056d6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056da:	01 c6                	add    esi,eax
c00056dc:	11 d7                	adc    edi,edx
c00056de:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00056e6:	0f 86 63 01 00 00    	jbe    c000584f <f_write+0x23c>
c00056ec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00056f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f4:	c1 e8 09             	shr    eax,0x9
c00056f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00056fb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00056ff:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005703:	39 c2                	cmp    edx,eax
c0005705:	76 08                	jbe    c000570f <f_write+0xfc>
c0005707:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000570b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000570f:	83 ec 0c             	sub    esp,0xc
c0005712:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005716:	57                   	push   edi
c0005717:	56                   	push   esi
c0005718:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000571c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005720:	50                   	push   eax
c0005721:	e8 cc c4 ff ff       	call   c0001bf2 <disk_write>
c0005726:	83 c4 20             	add    esp,0x20
c0005729:	85 c0                	test   eax,eax
c000572b:	0f 85 ce 00 00 00    	jne    c00057ff <f_write+0x1ec>
c0005731:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005734:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005737:	29 f0                	sub    eax,esi
c0005739:	19 fa                	sbb    edx,edi
c000573b:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000573f:	89 d7                	mov    edi,edx
c0005741:	ba 00 00 00 00       	mov    edx,0x0
c0005746:	89 f9                	mov    ecx,edi
c0005748:	19 d1                	sbb    ecx,edx
c000574a:	73 1c                	jae    c0005768 <f_write+0x155>
c000574c:	89 c7                	mov    edi,eax
c000574e:	b9 00 02 00 00       	mov    ecx,0x200
c0005753:	c1 e7 09             	shl    edi,0x9
c0005756:	8d 43 50             	lea    eax,[ebx+0x50]
c0005759:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000575d:	89 fa                	mov    edx,edi
c000575f:	e8 42 c5 ff ff       	call   c0001ca6 <mem_cpy>
c0005764:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005768:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000576c:	c1 e6 09             	shl    esi,0x9
c000576f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005773:	31 ff                	xor    edi,edi
c0005775:	01 30                	add    DWORD PTR [eax],esi
c0005777:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000577b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000577f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005782:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005785:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005788:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000578b:	89 c1                	mov    ecx,eax
c000578d:	39 f2                	cmp    edx,esi
c000578f:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005792:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005795:	19 f9                	sbb    ecx,edi
c0005797:	73 04                	jae    c000579d <f_write+0x18a>
c0005799:	89 f2                	mov    edx,esi
c000579b:	89 f8                	mov    eax,edi
c000579d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057a0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057a3:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057a8:	0f 85 cc fe ff ff    	jne    c000567a <f_write+0x67>
c00057ae:	eb 2e                	jmp    c00057de <f_write+0x1cb>
c00057b0:	89 c8                	mov    eax,ecx
c00057b2:	09 d0                	or     eax,edx
c00057b4:	75 0b                	jne    c00057c1 <f_write+0x1ae>
c00057b6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057b9:	31 d2                	xor    edx,edx
c00057bb:	85 c0                	test   eax,eax
c00057bd:	75 28                	jne    c00057e7 <f_write+0x1d4>
c00057bf:	eb 12                	jmp    c00057d3 <f_write+0x1c0>
c00057c1:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057c5:	74 09                	je     c00057d0 <f_write+0x1bd>
c00057c7:	89 d8                	mov    eax,ebx
c00057c9:	e8 13 c7 ff ff       	call   c0001ee1 <clmt_clust>
c00057ce:	eb 0a                	jmp    c00057da <f_write+0x1c7>
c00057d0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057d3:	89 d8                	mov    eax,ebx
c00057d5:	e8 a1 da ff ff       	call   c000327b <create_chain>
c00057da:	85 c0                	test   eax,eax
c00057dc:	75 09                	jne    c00057e7 <f_write+0x1d4>
c00057de:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057e2:	e9 dc 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057e7:	83 f8 01             	cmp    eax,0x1
c00057ea:	75 0e                	jne    c00057fa <f_write+0x1e7>
c00057ec:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00057f0:	bd 02 00 00 00       	mov    ebp,0x2
c00057f5:	e9 c9 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c00057fa:	83 f8 ff             	cmp    eax,0xffffffff
c00057fd:	75 0e                	jne    c000580d <f_write+0x1fa>
c00057ff:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005803:	bd 01 00 00 00       	mov    ebp,0x1
c0005808:	e9 b6 00 00 00       	jmp    c00058c3 <f_write+0x2b0>
c000580d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005810:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005814:	0f 85 90 fe ff ff    	jne    c00056aa <f_write+0x97>
c000581a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000581d:	e9 88 fe ff ff       	jmp    c00056aa <f_write+0x97>
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	8d 43 50             	lea    eax,[ebx+0x50]
c0005828:	6a 01                	push   0x1
c000582a:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000582d:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005830:	50                   	push   eax
c0005831:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005835:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005839:	50                   	push   eax
c000583a:	e8 b3 c3 ff ff       	call   c0001bf2 <disk_write>
c000583f:	83 c4 20             	add    esp,0x20
c0005842:	85 c0                	test   eax,eax
c0005844:	75 b9                	jne    c00057ff <f_write+0x1ec>
c0005846:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000584a:	e9 65 fe ff ff       	jmp    c00056b4 <f_write+0xa1>
c000584f:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005852:	75 05                	jne    c0005859 <f_write+0x246>
c0005854:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005857:	74 2e                	je     c0005887 <f_write+0x274>
c0005859:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000585c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000585f:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005862:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005865:	73 20                	jae    c0005887 <f_write+0x274>
c0005867:	83 ec 0c             	sub    esp,0xc
c000586a:	8d 43 50             	lea    eax,[ebx+0x50]
c000586d:	6a 01                	push   0x1
c000586f:	57                   	push   edi
c0005870:	56                   	push   esi
c0005871:	50                   	push   eax
c0005872:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005876:	50                   	push   eax
c0005877:	e8 60 c3 ff ff       	call   c0001bdc <disk_read>
c000587c:	83 c4 20             	add    esp,0x20
c000587f:	85 c0                	test   eax,eax
c0005881:	0f 85 78 ff ff ff    	jne    c00057ff <f_write+0x1ec>
c0005887:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000588a:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000588d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005890:	ba 00 02 00 00       	mov    edx,0x200
c0005895:	25 ff 01 00 00       	and    eax,0x1ff
c000589a:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000589e:	29 c2                	sub    edx,eax
c00058a0:	39 d6                	cmp    esi,edx
c00058a2:	76 02                	jbe    c00058a6 <f_write+0x293>
c00058a4:	89 d6                	mov    esi,edx
c00058a6:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058aa:	89 f1                	mov    ecx,esi
c00058ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058b0:	e8 f1 c3 ff ff       	call   c0001ca6 <mem_cpy>
c00058b5:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058b9:	e9 b1 fe ff ff       	jmp    c000576f <f_write+0x15c>
c00058be:	bd 07 00 00 00       	mov    ebp,0x7
c00058c3:	83 c4 2c             	add    esp,0x2c
c00058c6:	89 e8                	mov    eax,ebp
c00058c8:	5b                   	pop    ebx
c00058c9:	5e                   	pop    esi
c00058ca:	5f                   	pop    edi
c00058cb:	5d                   	pop    ebp
c00058cc:	c3                   	ret    

c00058cd <f_sync>:
c00058cd:	56                   	push   esi
c00058ce:	53                   	push   ebx
c00058cf:	83 ec 64             	sub    esp,0x64
c00058d2:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058d6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058da:	89 d8                	mov    eax,ebx
c00058dc:	e8 49 ca ff ff       	call   c000232a <validate>
c00058e1:	85 c0                	test   eax,eax
c00058e3:	0f 85 ba 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c00058e9:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00058ec:	f6 c2 40             	test   dl,0x40
c00058ef:	0f 84 ae 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c00058f5:	84 d2                	test   dl,dl
c00058f7:	79 33                	jns    c000592c <f_sync+0x5f>
c00058f9:	83 ec 0c             	sub    esp,0xc
c00058fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ff:	6a 01                	push   0x1
c0005901:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005904:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005907:	50                   	push   eax
c0005908:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000590c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005910:	50                   	push   eax
c0005911:	e8 dc c2 ff ff       	call   c0001bf2 <disk_write>
c0005916:	83 c4 20             	add    esp,0x20
c0005919:	89 c2                	mov    edx,eax
c000591b:	b8 01 00 00 00       	mov    eax,0x1
c0005920:	85 d2                	test   edx,edx
c0005922:	0f 85 7b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005928:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000592c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005930:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005933:	0f 85 11 01 00 00    	jne    c0005a4a <f_sync+0x17d>
c0005939:	89 d8                	mov    eax,ebx
c000593b:	e8 13 d6 ff ff       	call   c0002f53 <fill_first_frag>
c0005940:	85 c0                	test   eax,eax
c0005942:	0f 85 5b 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c0005948:	83 c9 ff             	or     ecx,0xffffffff
c000594b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000594e:	89 d8                	mov    eax,ebx
c0005950:	e8 c9 d5 ff ff       	call   c0002f1e <fill_last_frag>
c0005955:	85 c0                	test   eax,eax
c0005957:	0f 85 46 01 00 00    	jne    c0005aa3 <f_sync+0x1d6>
c000595d:	83 ec 0c             	sub    esp,0xc
c0005960:	68 60 04 00 00       	push   0x460
c0005965:	e8 f0 2a 00 00       	call   c000845a <ff_memalloc>
c000596a:	83 c4 10             	add    esp,0x10
c000596d:	89 c6                	mov    esi,eax
c000596f:	b8 11 00 00 00       	mov    eax,0x11
c0005974:	85 f6                	test   esi,esi
c0005976:	0f 84 27 01 00 00    	je     c0005aa3 <f_sync+0x1d6>
c000597c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005980:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005986:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005989:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000598c:	89 da                	mov    edx,ebx
c000598e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005992:	e8 af df ff ff       	call   c0003946 <load_obj_xdir>
c0005997:	85 c0                	test   eax,eax
c0005999:	0f 85 95 00 00 00    	jne    c0005a34 <f_sync+0x167>
c000599f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059a6:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059aa:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059ad:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059b0:	83 ca 01             	or     edx,0x1
c00059b3:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059b6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059b9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059bc:	83 c0 34             	add    eax,0x34
c00059bf:	e8 d9 c2 ff ff       	call   c0001c9d <st_dword>
c00059c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059cb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059ce:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059d1:	83 c0 38             	add    eax,0x38
c00059d4:	e8 c7 c2 ff ff       	call   c0001ca0 <st_qword>
c00059d9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e6:	83 c0 28             	add    eax,0x28
c00059e9:	e8 b2 c2 ff ff       	call   c0001ca0 <st_qword>
c00059ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059f2:	ba 00 00 21 50       	mov    edx,0x50210000
c00059f7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059fa:	83 c0 0c             	add    eax,0xc
c00059fd:	e8 9b c2 ff ff       	call   c0001c9d <st_dword>
c0005a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a06:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a09:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a0d:	31 d2                	xor    edx,edx
c0005a0f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a12:	83 c0 10             	add    eax,0x10
c0005a15:	e8 83 c2 ff ff       	call   c0001c9d <st_dword>
c0005a1a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a1e:	e8 62 e1 ff ff       	call   c0003b85 <store_xdir>
c0005a23:	85 c0                	test   eax,eax
c0005a25:	75 0d                	jne    c0005a34 <f_sync+0x167>
c0005a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2b:	e8 00 eb ff ff       	call   c0004530 <sync_fs>
c0005a30:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a38:	83 ec 0c             	sub    esp,0xc
c0005a3b:	56                   	push   esi
c0005a3c:	e8 2f 2a 00 00       	call   c0008470 <ff_memfree>
c0005a41:	83 c4 10             	add    esp,0x10
c0005a44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a48:	eb 59                	jmp    c0005aa3 <f_sync+0x1d6>
c0005a4a:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a4d:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a50:	e8 b0 c9 ff ff       	call   c0002405 <move_window>
c0005a55:	85 c0                	test   eax,eax
c0005a57:	75 4a                	jne    c0005aa3 <f_sync+0x1d6>
c0005a59:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a5c:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a60:	89 f2                	mov    edx,esi
c0005a62:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a67:	e8 5f f3 ff ff       	call   c0004dcb <st_clust.isra.1>
c0005a6c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6f:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a72:	e8 26 c2 ff ff       	call   c0001c9d <st_dword>
c0005a77:	8d 46 16             	lea    eax,[esi+0x16]
c0005a7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7f:	e8 19 c2 ff ff       	call   c0001c9d <st_dword>
c0005a84:	8d 46 12             	lea    eax,[esi+0x12]
c0005a87:	31 d2                	xor    edx,edx
c0005a89:	e8 0b c2 ff ff       	call   c0001c99 <st_word>
c0005a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a92:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a9a:	e8 91 ea ff ff       	call   c0004530 <sync_fs>
c0005a9f:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005aa3:	83 c4 64             	add    esp,0x64
c0005aa6:	5b                   	pop    ebx
c0005aa7:	5e                   	pop    esi
c0005aa8:	c3                   	ret    

c0005aa9 <f_close>:
c0005aa9:	53                   	push   ebx
c0005aaa:	83 ec 24             	sub    esp,0x24
c0005aad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005ab1:	53                   	push   ebx
c0005ab2:	e8 16 fe ff ff       	call   c00058cd <f_sync>
c0005ab7:	83 c4 10             	add    esp,0x10
c0005aba:	85 c0                	test   eax,eax
c0005abc:	75 15                	jne    c0005ad3 <f_close+0x2a>
c0005abe:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005ac2:	89 d8                	mov    eax,ebx
c0005ac4:	e8 61 c8 ff ff       	call   c000232a <validate>
c0005ac9:	85 c0                	test   eax,eax
c0005acb:	75 06                	jne    c0005ad3 <f_close+0x2a>
c0005acd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005ad3:	83 c4 18             	add    esp,0x18
c0005ad6:	5b                   	pop    ebx
c0005ad7:	c3                   	ret    

c0005ad8 <f_lseek>:
c0005ad8:	55                   	push   ebp
c0005ad9:	57                   	push   edi
c0005ada:	56                   	push   esi
c0005adb:	53                   	push   ebx
c0005adc:	83 ec 3c             	sub    esp,0x3c
c0005adf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005ae3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005ae7:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005aeb:	89 04 24             	mov    DWORD PTR [esp],eax
c0005aee:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005af2:	89 d8                	mov    eax,ebx
c0005af4:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005af8:	e8 2d c8 ff ff       	call   c000232a <validate>
c0005afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b01:	85 c0                	test   eax,eax
c0005b03:	0f 85 7a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b09:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b0d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b11:	85 c0                	test   eax,eax
c0005b13:	0f 85 6a 04 00 00    	jne    c0005f83 <f_lseek+0x4ab>
c0005b19:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b1d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b20:	74 0c                	je     c0005b2e <f_lseek+0x56>
c0005b22:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b25:	85 c0                	test   eax,eax
c0005b27:	75 1f                	jne    c0005b48 <f_lseek+0x70>
c0005b29:	e9 b5 01 00 00       	jmp    c0005ce3 <f_lseek+0x20b>
c0005b2e:	83 c9 ff             	or     ecx,0xffffffff
c0005b31:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b34:	89 d8                	mov    eax,ebx
c0005b36:	e8 e3 d3 ff ff       	call   c0002f1e <fill_last_frag>
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	74 e3                	je     c0005b22 <f_lseek+0x4a>
c0005b3f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b43:	e9 3b 04 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005b48:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b4d:	0f 85 ac 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b53:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b57:	0f 85 a2 00 00 00    	jne    c0005bff <f_lseek+0x127>
c0005b5d:	8d 78 04             	lea    edi,[eax+0x4]
c0005b60:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b65:	be 02 00 00 00       	mov    esi,0x2
c0005b6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b6e:	85 ed                	test   ebp,ebp
c0005b70:	74 73                	je     c0005be5 <f_lseek+0x10d>
c0005b72:	89 e9                	mov    ecx,ebp
c0005b74:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b7b:	ff 04 24             	inc    DWORD PTR [esp]
c0005b7e:	89 ca                	mov    edx,ecx
c0005b80:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b84:	89 d8                	mov    eax,ebx
c0005b86:	e8 02 d4 ff ff       	call   c0002f8d <get_fat>
c0005b8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005b8f:	83 f8 01             	cmp    eax,0x1
c0005b92:	77 11                	ja     c0005ba5 <f_lseek+0xcd>
c0005b94:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005b98:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ba0:	e9 de 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005ba5:	83 f8 ff             	cmp    eax,0xffffffff
c0005ba8:	75 11                	jne    c0005bbb <f_lseek+0xe3>
c0005baa:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bae:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bb6:	e9 c8 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bbb:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bbe:	89 c1                	mov    ecx,eax
c0005bc0:	39 c2                	cmp    edx,eax
c0005bc2:	74 b7                	je     c0005b7b <f_lseek+0xa3>
c0005bc4:	83 c6 02             	add    esi,0x2
c0005bc7:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005bcb:	72 0b                	jb     c0005bd8 <f_lseek+0x100>
c0005bcd:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005bd0:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bd3:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bd5:	83 c7 08             	add    edi,0x8
c0005bd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bdc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bdf:	76 04                	jbe    c0005be5 <f_lseek+0x10d>
c0005be1:	89 c5                	mov    ebp,eax
c0005be3:	eb 8d                	jmp    c0005b72 <f_lseek+0x9a>
c0005be5:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005be8:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005bec:	89 30                	mov    DWORD PTR [eax],esi
c0005bee:	0f 87 87 03 00 00    	ja     c0005f7b <f_lseek+0x4a3>
c0005bf4:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005bfa:	e9 84 03 00 00       	jmp    c0005f83 <f_lseek+0x4ab>
c0005bff:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c02:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c11:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c18:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c1c:	73 0f                	jae    c0005c2d <f_lseek+0x155>
c0005c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c38:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c43:	0f 84 3a 03 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c49:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c4d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c51:	83 c6 ff             	add    esi,0xffffffff
c0005c54:	89 d8                	mov    eax,ebx
c0005c56:	83 d7 ff             	adc    edi,0xffffffff
c0005c59:	89 f2                	mov    edx,esi
c0005c5b:	89 f9                	mov    ecx,edi
c0005c5d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c61:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c64:	e8 78 c2 ff ff       	call   c0001ee1 <clmt_clust>
c0005c69:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c6d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c70:	89 c2                	mov    edx,eax
c0005c72:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c76:	89 c8                	mov    eax,ecx
c0005c78:	e8 43 c2 ff ff       	call   c0001ec0 <clst2sect>
c0005c7d:	89 d7                	mov    edi,edx
c0005c7f:	09 c7                	or     edi,eax
c0005c81:	0f 84 0d ff ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005c87:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005c8b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005c91:	0f 84 ec 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005c97:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c9f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca2:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ca6:	0f ac fe 09          	shrd   esi,edi,0x9
c0005caa:	4d                   	dec    ebp
c0005cab:	31 ff                	xor    edi,edi
c0005cad:	21 ee                	and    esi,ebp
c0005caf:	01 c6                	add    esi,eax
c0005cb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cb4:	11 d7                	adc    edi,edx
c0005cb6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cb9:	39 fa                	cmp    edx,edi
c0005cbb:	75 08                	jne    c0005cc5 <f_lseek+0x1ed>
c0005cbd:	39 f0                	cmp    eax,esi
c0005cbf:	0f 84 be 02 00 00    	je     c0005f83 <f_lseek+0x4ab>
c0005cc5:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005cc8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ccc:	0f 89 80 02 00 00    	jns    c0005f52 <f_lseek+0x47a>
c0005cd2:	83 ec 0c             	sub    esp,0xc
c0005cd5:	6a 01                	push   0x1
c0005cd7:	52                   	push   edx
c0005cd8:	50                   	push   eax
c0005cd9:	55                   	push   ebp
c0005cda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cde:	e9 5a 02 00 00       	jmp    c0005f3d <f_lseek+0x465>
c0005ce3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ce7:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005cea:	74 16                	je     c0005d02 <f_lseek+0x22a>
c0005cec:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005cf1:	76 0f                	jbe    c0005d02 <f_lseek+0x22a>
c0005cf3:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005cfa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d05:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d08:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d0b:	89 c7                	mov    edi,eax
c0005d0d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d11:	73 0d                	jae    c0005d20 <f_lseek+0x248>
c0005d13:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d17:	75 07                	jne    c0005d20 <f_lseek+0x248>
c0005d19:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d1c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d20:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d23:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d26:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d2a:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d31:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d38:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d3b:	75 09                	jne    c0005d46 <f_lseek+0x26e>
c0005d3d:	31 f6                	xor    esi,esi
c0005d3f:	31 ff                	xor    edi,edi
c0005d41:	e9 af 01 00 00       	jmp    c0005ef5 <f_lseek+0x41d>
c0005d46:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d4a:	89 d7                	mov    edi,edx
c0005d4c:	c1 e1 09             	shl    ecx,0x9
c0005d4f:	09 c7                	or     edi,eax
c0005d51:	89 cd                	mov    ebp,ecx
c0005d53:	74 6d                	je     c0005dc2 <f_lseek+0x2ea>
c0005d55:	83 c0 ff             	add    eax,0xffffffff
c0005d58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d5c:	83 d2 ff             	adc    edx,0xffffffff
c0005d5f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d66:	83 c0 ff             	add    eax,0xffffffff
c0005d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d6d:	83 d2 ff             	adc    edx,0xffffffff
c0005d70:	31 ff                	xor    edi,edi
c0005d72:	57                   	push   edi
c0005d73:	51                   	push   ecx
c0005d74:	52                   	push   edx
c0005d75:	50                   	push   eax
c0005d76:	e8 29 14 02 00       	call   c00271a4 <__udivdi3>
c0005d7b:	83 c4 10             	add    esp,0x10
c0005d7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005d86:	57                   	push   edi
c0005d87:	55                   	push   ebp
c0005d88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005d90:	e8 0f 14 02 00       	call   c00271a4 <__udivdi3>
c0005d95:	83 c4 10             	add    esp,0x10
c0005d98:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005d9c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005da0:	19 d1                	sbb    ecx,edx
c0005da2:	72 1e                	jb     c0005dc2 <f_lseek+0x2ea>
c0005da4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005da8:	89 e9                	mov    ecx,ebp
c0005daa:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dad:	f7 d9                	neg    ecx
c0005daf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005db2:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005db6:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005db9:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dbc:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dc0:	eb 28                	jmp    c0005dea <f_lseek+0x312>
c0005dc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dc5:	85 c0                	test   eax,eax
c0005dc7:	75 1e                	jne    c0005de7 <f_lseek+0x30f>
c0005dc9:	31 d2                	xor    edx,edx
c0005dcb:	89 d8                	mov    eax,ebx
c0005dcd:	e8 a9 d4 ff ff       	call   c000327b <create_chain>
c0005dd2:	83 f8 01             	cmp    eax,0x1
c0005dd5:	0f 84 b9 fd ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ddb:	83 f8 ff             	cmp    eax,0xffffffff
c0005dde:	0f 84 c6 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005de4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005de7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dea:	85 c0                	test   eax,eax
c0005dec:	0f 84 4b ff ff ff    	je     c0005d3d <f_lseek+0x265>
c0005df2:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005df6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005dfe:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e01:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e05:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e08:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e0b:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e0f:	0f 83 9d 00 00 00    	jae    c0005eb2 <f_lseek+0x3da>
c0005e15:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e19:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e1d:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e20:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e24:	01 f2                	add    edx,esi
c0005e26:	11 f9                	adc    ecx,edi
c0005e28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e2c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e30:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e33:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e36:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e39:	f6 c1 02             	test   cl,0x2
c0005e3c:	74 35                	je     c0005e73 <f_lseek+0x39b>
c0005e3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e42:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e45:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e48:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e4c:	73 16                	jae    c0005e64 <f_lseek+0x38c>
c0005e4e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e52:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e56:	88 ca                	mov    dl,cl
c0005e58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e5b:	83 ca 40             	or     edx,0x40
c0005e5e:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e61:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e64:	89 c2                	mov    edx,eax
c0005e66:	89 d8                	mov    eax,ebx
c0005e68:	e8 0e d4 ff ff       	call   c000327b <create_chain>
c0005e6d:	85 c0                	test   eax,eax
c0005e6f:	75 0b                	jne    c0005e7c <f_lseek+0x3a4>
c0005e71:	eb 30                	jmp    c0005ea3 <f_lseek+0x3cb>
c0005e73:	89 c2                	mov    edx,eax
c0005e75:	89 d8                	mov    eax,ebx
c0005e77:	e8 11 d1 ff ff       	call   c0002f8d <get_fat>
c0005e7c:	83 f8 ff             	cmp    eax,0xffffffff
c0005e7f:	0f 84 25 fd ff ff    	je     c0005baa <f_lseek+0xd2>
c0005e85:	83 f8 01             	cmp    eax,0x1
c0005e88:	0f 86 06 fd ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e8e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005e92:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005e95:	0f 86 f9 fc ff ff    	jbe    c0005b94 <f_lseek+0xbc>
c0005e9b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e9e:	e9 5b ff ff ff       	jmp    c0005dfe <f_lseek+0x326>
c0005ea3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005eaa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eb2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eb5:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005eb9:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ebc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ebf:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005ec2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ec8:	0f 84 6f fe ff ff    	je     c0005d3d <f_lseek+0x265>
c0005ece:	89 c2                	mov    edx,eax
c0005ed0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ed4:	e8 e7 bf ff ff       	call   c0001ec0 <clst2sect>
c0005ed9:	89 d7                	mov    edi,edx
c0005edb:	09 c7                	or     edi,eax
c0005edd:	0f 84 b1 fc ff ff    	je     c0005b94 <f_lseek+0xbc>
c0005ee3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ee7:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005eea:	0f ac fe 09          	shrd   esi,edi,0x9
c0005eee:	c1 ef 09             	shr    edi,0x9
c0005ef1:	01 c6                	add    esi,eax
c0005ef3:	11 d7                	adc    edi,edx
c0005ef5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ef8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005efb:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005efe:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f01:	19 d1                	sbb    ecx,edx
c0005f03:	73 0a                	jae    c0005f0f <f_lseek+0x437>
c0005f05:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f08:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f0b:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f0f:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f14:	74 6d                	je     c0005f83 <f_lseek+0x4ab>
c0005f16:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f19:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f1c:	39 fa                	cmp    edx,edi
c0005f1e:	75 04                	jne    c0005f24 <f_lseek+0x44c>
c0005f20:	39 f0                	cmp    eax,esi
c0005f22:	74 5f                	je     c0005f83 <f_lseek+0x4ab>
c0005f24:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f27:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f2b:	79 25                	jns    c0005f52 <f_lseek+0x47a>
c0005f2d:	83 ec 0c             	sub    esp,0xc
c0005f30:	6a 01                	push   0x1
c0005f32:	52                   	push   edx
c0005f33:	50                   	push   eax
c0005f34:	55                   	push   ebp
c0005f35:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f39:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f3d:	50                   	push   eax
c0005f3e:	e8 af bc ff ff       	call   c0001bf2 <disk_write>
c0005f43:	83 c4 20             	add    esp,0x20
c0005f46:	85 c0                	test   eax,eax
c0005f48:	0f 85 5c fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f4e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f52:	83 ec 0c             	sub    esp,0xc
c0005f55:	6a 01                	push   0x1
c0005f57:	57                   	push   edi
c0005f58:	56                   	push   esi
c0005f59:	55                   	push   ebp
c0005f5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f5e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f62:	50                   	push   eax
c0005f63:	e8 74 bc ff ff       	call   c0001bdc <disk_read>
c0005f68:	83 c4 20             	add    esp,0x20
c0005f6b:	85 c0                	test   eax,eax
c0005f6d:	0f 85 37 fc ff ff    	jne    c0005baa <f_lseek+0xd2>
c0005f73:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f76:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f79:	eb 08                	jmp    c0005f83 <f_lseek+0x4ab>
c0005f7b:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005f87:	83 c4 3c             	add    esp,0x3c
c0005f8a:	5b                   	pop    ebx
c0005f8b:	5e                   	pop    esi
c0005f8c:	5f                   	pop    edi
c0005f8d:	5d                   	pop    ebp
c0005f8e:	c3                   	ret    

c0005f8f <f_opendir>:
c0005f8f:	56                   	push   esi
c0005f90:	b8 09 00 00 00       	mov    eax,0x9
c0005f95:	53                   	push   ebx
c0005f96:	83 ec 24             	sub    esp,0x24
c0005f99:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005f9d:	85 db                	test   ebx,ebx
c0005f9f:	0f 84 e6 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fa5:	31 c9                	xor    ecx,ecx
c0005fa7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fab:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005faf:	e8 03 c7 ff ff       	call   c00026b7 <mount_volume>
c0005fb4:	85 c0                	test   eax,eax
c0005fb6:	0f 85 c9 00 00 00    	jne    c0006085 <f_opendir+0xf6>
c0005fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fc0:	83 ec 0c             	sub    esp,0xc
c0005fc3:	89 03                	mov    DWORD PTR [ebx],eax
c0005fc5:	68 60 04 00 00       	push   0x460
c0005fca:	e8 8b 24 00 00       	call   c000845a <ff_memalloc>
c0005fcf:	83 c4 10             	add    esp,0x10
c0005fd2:	89 c6                	mov    esi,eax
c0005fd4:	b8 11 00 00 00       	mov    eax,0x11
c0005fd9:	85 f6                	test   esi,esi
c0005fdb:	0f 84 aa 00 00 00    	je     c000608b <f_opendir+0xfc>
c0005fe1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fe5:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005feb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005fee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ff1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ff5:	89 d8                	mov    eax,ebx
c0005ff7:	e8 31 ee ff ff       	call   c0004e2d <follow_path>
c0005ffc:	85 c0                	test   eax,eax
c0005ffe:	75 61                	jne    c0006061 <f_opendir+0xd2>
c0006000:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006004:	78 46                	js     c000604c <f_opendir+0xbd>
c0006006:	b8 05 00 00 00       	mov    eax,0x5
c000600b:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000600f:	74 50                	je     c0006061 <f_opendir+0xd2>
c0006011:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006015:	8a 01                	mov    al,BYTE PTR [ecx]
c0006017:	3c 04                	cmp    al,0x4
c0006019:	75 26                	jne    c0006041 <f_opendir+0xb2>
c000601b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000601e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0006021:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0006024:	30 d2                	xor    dl,dl
c0006026:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c000602a:	09 c2                	or     edx,eax
c000602c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000602f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0006032:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006035:	89 da                	mov    edx,ebx
c0006037:	8d 41 10             	lea    eax,[ecx+0x10]
c000603a:	e8 b4 ed ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c000603f:	eb 0b                	jmp    c000604c <f_opendir+0xbd>
c0006041:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0006044:	e8 59 ed ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006049:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000604c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006050:	31 d2                	xor    edx,edx
c0006052:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006056:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000605a:	89 d8                	mov    eax,ebx
c000605c:	e8 22 d1 ff ff       	call   c0003183 <dir_sdi>
c0006061:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006065:	83 ec 0c             	sub    esp,0xc
c0006068:	56                   	push   esi
c0006069:	e8 02 24 00 00       	call   c0008470 <ff_memfree>
c000606e:	83 c4 10             	add    esp,0x10
c0006071:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006075:	83 f8 04             	cmp    eax,0x4
c0006078:	74 06                	je     c0006080 <f_opendir+0xf1>
c000607a:	85 c0                	test   eax,eax
c000607c:	74 0d                	je     c000608b <f_opendir+0xfc>
c000607e:	eb 05                	jmp    c0006085 <f_opendir+0xf6>
c0006080:	b8 05 00 00 00       	mov    eax,0x5
c0006085:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000608b:	83 c4 24             	add    esp,0x24
c000608e:	5b                   	pop    ebx
c000608f:	5e                   	pop    esi
c0006090:	c3                   	ret    

c0006091 <f_closedir>:
c0006091:	53                   	push   ebx
c0006092:	83 ec 18             	sub    esp,0x18
c0006095:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006099:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000609d:	89 d8                	mov    eax,ebx
c000609f:	e8 86 c2 ff ff       	call   c000232a <validate>
c00060a4:	85 c0                	test   eax,eax
c00060a6:	75 06                	jne    c00060ae <f_closedir+0x1d>
c00060a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060ae:	83 c4 18             	add    esp,0x18
c00060b1:	5b                   	pop    ebx
c00060b2:	c3                   	ret    

c00060b3 <f_readdir>:
c00060b3:	57                   	push   edi
c00060b4:	56                   	push   esi
c00060b5:	53                   	push   ebx
c00060b6:	83 ec 20             	sub    esp,0x20
c00060b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060c5:	89 d8                	mov    eax,ebx
c00060c7:	e8 5e c2 ff ff       	call   c000232a <validate>
c00060cc:	85 c0                	test   eax,eax
c00060ce:	75 77                	jne    c0006147 <f_readdir+0x94>
c00060d0:	85 ff                	test   edi,edi
c00060d2:	75 0b                	jne    c00060df <f_readdir+0x2c>
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	89 d8                	mov    eax,ebx
c00060d8:	e8 a6 d0 ff ff       	call   c0003183 <dir_sdi>
c00060dd:	eb 68                	jmp    c0006147 <f_readdir+0x94>
c00060df:	83 ec 0c             	sub    esp,0xc
c00060e2:	68 60 04 00 00       	push   0x460
c00060e7:	e8 6e 23 00 00       	call   c000845a <ff_memalloc>
c00060ec:	83 c4 10             	add    esp,0x10
c00060ef:	89 c6                	mov    esi,eax
c00060f1:	b8 11 00 00 00       	mov    eax,0x11
c00060f6:	85 f6                	test   esi,esi
c00060f8:	74 4d                	je     c0006147 <f_readdir+0x94>
c00060fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060fe:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006104:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006107:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000610a:	31 d2                	xor    edx,edx
c000610c:	89 d8                	mov    eax,ebx
c000610e:	e8 80 d8 ff ff       	call   c0003993 <dir_read>
c0006113:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006118:	75 19                	jne    c0006133 <f_readdir+0x80>
c000611a:	89 fa                	mov    edx,edi
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 7e ea ff ff       	call   c0004ba1 <get_fileinfo>
c0006123:	31 d2                	xor    edx,edx
c0006125:	89 d8                	mov    eax,ebx
c0006127:	e8 af d5 ff ff       	call   c00036db <dir_next>
c000612c:	83 f8 04             	cmp    eax,0x4
c000612f:	75 02                	jne    c0006133 <f_readdir+0x80>
c0006131:	31 c0                	xor    eax,eax
c0006133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006137:	83 ec 0c             	sub    esp,0xc
c000613a:	56                   	push   esi
c000613b:	e8 30 23 00 00       	call   c0008470 <ff_memfree>
c0006140:	83 c4 10             	add    esp,0x10
c0006143:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006147:	83 c4 20             	add    esp,0x20
c000614a:	5b                   	pop    ebx
c000614b:	5e                   	pop    esi
c000614c:	5f                   	pop    edi
c000614d:	c3                   	ret    

c000614e <f_stat>:
c000614e:	57                   	push   edi
c000614f:	31 c9                	xor    ecx,ecx
c0006151:	56                   	push   esi
c0006152:	53                   	push   ebx
c0006153:	83 ec 50             	sub    esp,0x50
c0006156:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000615a:	8d 54 24 04          	lea    edx,[esp+0x4]
c000615e:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006162:	e8 50 c5 ff ff       	call   c00026b7 <mount_volume>
c0006167:	89 c3                	mov    ebx,eax
c0006169:	85 c0                	test   eax,eax
c000616b:	75 67                	jne    c00061d4 <f_stat+0x86>
c000616d:	83 ec 0c             	sub    esp,0xc
c0006170:	bb 11 00 00 00       	mov    ebx,0x11
c0006175:	68 60 04 00 00       	push   0x460
c000617a:	e8 db 22 00 00       	call   c000845a <ff_memalloc>
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	89 c6                	mov    esi,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	74 4c                	je     c00061d4 <f_stat+0x86>
c0006188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000618c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006192:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006195:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006198:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000619c:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061a0:	e8 88 ec ff ff       	call   c0004e2d <follow_path>
c00061a5:	89 c3                	mov    ebx,eax
c00061a7:	85 c0                	test   eax,eax
c00061a9:	75 1d                	jne    c00061c8 <f_stat+0x7a>
c00061ab:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061b0:	78 11                	js     c00061c3 <f_stat+0x75>
c00061b2:	85 ff                	test   edi,edi
c00061b4:	74 12                	je     c00061c8 <f_stat+0x7a>
c00061b6:	89 fa                	mov    edx,edi
c00061b8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bc:	e8 e0 e9 ff ff       	call   c0004ba1 <get_fileinfo>
c00061c1:	eb 05                	jmp    c00061c8 <f_stat+0x7a>
c00061c3:	bb 06 00 00 00       	mov    ebx,0x6
c00061c8:	83 ec 0c             	sub    esp,0xc
c00061cb:	56                   	push   esi
c00061cc:	e8 9f 22 00 00       	call   c0008470 <ff_memfree>
c00061d1:	83 c4 10             	add    esp,0x10
c00061d4:	83 c4 50             	add    esp,0x50
c00061d7:	89 d8                	mov    eax,ebx
c00061d9:	5b                   	pop    ebx
c00061da:	5e                   	pop    esi
c00061db:	5f                   	pop    edi
c00061dc:	c3                   	ret    

c00061dd <f_getfree>:
c00061dd:	55                   	push   ebp
c00061de:	31 c9                	xor    ecx,ecx
c00061e0:	57                   	push   edi
c00061e1:	56                   	push   esi
c00061e2:	53                   	push   ebx
c00061e3:	83 ec 5c             	sub    esp,0x5c
c00061e6:	8d 54 24 24          	lea    edx,[esp+0x24]
c00061ea:	8d 44 24 70          	lea    eax,[esp+0x70]
c00061ee:	e8 c4 c4 ff ff       	call   c00026b7 <mount_volume>
c00061f3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061f7:	85 c0                	test   eax,eax
c00061f9:	0f 85 9d 01 00 00    	jne    c000639c <f_getfree+0x1bf>
c00061ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006203:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006207:	89 02                	mov    DWORD PTR [edx],eax
c0006209:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c000620c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000620f:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006212:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006216:	39 f2                	cmp    edx,esi
c0006218:	77 0b                	ja     c0006225 <f_getfree+0x48>
c000621a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000621e:	89 10                	mov    DWORD PTR [eax],edx
c0006220:	e9 77 01 00 00       	jmp    c000639c <f_getfree+0x1bf>
c0006225:	8a 10                	mov    dl,BYTE PTR [eax]
c0006227:	80 fa 01             	cmp    dl,0x1
c000622a:	75 3a                	jne    c0006266 <f_getfree+0x89>
c000622c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006230:	be 02 00 00 00       	mov    esi,0x2
c0006235:	31 db                	xor    ebx,ebx
c0006237:	89 f2                	mov    edx,esi
c0006239:	8d 44 24 28          	lea    eax,[esp+0x28]
c000623d:	e8 4b cd ff ff       	call   c0002f8d <get_fat>
c0006242:	83 f8 ff             	cmp    eax,0xffffffff
c0006245:	0f 84 28 01 00 00    	je     c0006373 <f_getfree+0x196>
c000624b:	83 f8 01             	cmp    eax,0x1
c000624e:	0f 84 29 01 00 00    	je     c000637d <f_getfree+0x1a0>
c0006254:	83 d3 00             	adc    ebx,0x0
c0006257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000625b:	46                   	inc    esi
c000625c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000625f:	77 d6                	ja     c0006237 <f_getfree+0x5a>
c0006261:	e9 25 01 00 00       	jmp    c000638b <f_getfree+0x1ae>
c0006266:	80 fa 04             	cmp    dl,0x4
c0006269:	0f 85 88 00 00 00    	jne    c00062f7 <f_getfree+0x11a>
c000626f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0006272:	31 ed                	xor    ebp,ebp
c0006274:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006277:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000627b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000627f:	31 db                	xor    ebx,ebx
c0006281:	85 ed                	test   ebp,ebp
c0006283:	75 3f                	jne    c00062c4 <f_getfree+0xe7>
c0006285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006289:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000628d:	83 c0 01             	add    eax,0x1
c0006290:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006294:	83 d2 00             	adc    edx,0x0
c0006297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000629b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000629f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062a3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062a7:	e8 59 c1 ff ff       	call   c0002405 <move_window>
c00062ac:	85 c0                	test   eax,eax
c00062ae:	0f 85 d3 00 00 00    	jne    c0006387 <f_getfree+0x1aa>
c00062b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062c0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c8:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062cb:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062cf:	89 cf                	mov    edi,ecx
c00062d1:	85 f6                	test   esi,esi
c00062d3:	74 12                	je     c00062e7 <f_getfree+0x10a>
c00062d5:	88 c1                	mov    cl,al
c00062d7:	83 e1 01             	and    ecx,0x1
c00062da:	80 f9 01             	cmp    cl,0x1
c00062dd:	83 d3 00             	adc    ebx,0x0
c00062e0:	d0 e8                	shr    al,1
c00062e2:	4e                   	dec    esi
c00062e3:	39 fe                	cmp    esi,edi
c00062e5:	75 ea                	jne    c00062d1 <f_getfree+0xf4>
c00062e7:	45                   	inc    ebp
c00062e8:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00062ee:	85 f6                	test   esi,esi
c00062f0:	75 8f                	jne    c0006281 <f_getfree+0xa4>
c00062f2:	e9 94 00 00 00       	jmp    c000638b <f_getfree+0x1ae>
c00062f7:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00062fa:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00062fd:	31 f6                	xor    esi,esi
c00062ff:	31 db                	xor    ebx,ebx
c0006301:	85 f6                	test   esi,esi
c0006303:	75 1b                	jne    c0006320 <f_getfree+0x143>
c0006305:	89 d7                	mov    edi,edx
c0006307:	89 cd                	mov    ebp,ecx
c0006309:	83 c7 01             	add    edi,0x1
c000630c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006310:	83 d5 00             	adc    ebp,0x0
c0006313:	e8 ed c0 ff ff       	call   c0002405 <move_window>
c0006318:	85 c0                	test   eax,eax
c000631a:	75 6b                	jne    c0006387 <f_getfree+0x1aa>
c000631c:	89 fa                	mov    edx,edi
c000631e:	89 e9                	mov    ecx,ebp
c0006320:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006324:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006328:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c000632c:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000632f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006333:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006337:	75 11                	jne    c000634a <f_getfree+0x16d>
c0006339:	e8 e9 b8 ff ff       	call   c0001c27 <ld_word>
c000633e:	66 83 f8 01          	cmp    ax,0x1
c0006342:	83 d3 00             	adc    ebx,0x0
c0006345:	83 c6 02             	add    esi,0x2
c0006348:	eb 13                	jmp    c000635d <f_getfree+0x180>
c000634a:	e8 e5 b8 ff ff       	call   c0001c34 <ld_dword>
c000634f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006354:	83 f8 01             	cmp    eax,0x1
c0006357:	83 d3 00             	adc    ebx,0x0
c000635a:	83 c6 04             	add    esi,0x4
c000635d:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006363:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006367:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000636b:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000636f:	75 90                	jne    c0006301 <f_getfree+0x124>
c0006371:	eb 18                	jmp    c000638b <f_getfree+0x1ae>
c0006373:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000637b:	eb 0e                	jmp    c000638b <f_getfree+0x1ae>
c000637d:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006385:	eb 04                	jmp    c000638b <f_getfree+0x1ae>
c0006387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000638b:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000638f:	89 18                	mov    DWORD PTR [eax],ebx
c0006391:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006395:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006398:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000639c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063a0:	83 c4 5c             	add    esp,0x5c
c00063a3:	5b                   	pop    ebx
c00063a4:	5e                   	pop    esi
c00063a5:	5f                   	pop    edi
c00063a6:	5d                   	pop    ebp
c00063a7:	c3                   	ret    

c00063a8 <f_truncate>:
c00063a8:	56                   	push   esi
c00063a9:	53                   	push   ebx
c00063aa:	83 ec 14             	sub    esp,0x14
c00063ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063b1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063b5:	89 d8                	mov    eax,ebx
c00063b7:	e8 6e bf ff ff       	call   c000232a <validate>
c00063bc:	89 c6                	mov    esi,eax
c00063be:	85 c0                	test   eax,eax
c00063c0:	0f 85 d2 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063c6:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063ca:	85 f6                	test   esi,esi
c00063cc:	0f 85 c6 00 00 00    	jne    c0006498 <f_truncate+0xf0>
c00063d2:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063d6:	0f 84 b7 00 00 00    	je     c0006493 <f_truncate+0xeb>
c00063dc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063df:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063e2:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00063e5:	89 d1                	mov    ecx,edx
c00063e7:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00063ea:	0f 83 a8 00 00 00    	jae    c0006498 <f_truncate+0xf0>
c00063f0:	09 c2                	or     edx,eax
c00063f2:	75 15                	jne    c0006409 <f_truncate+0x61>
c00063f4:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00063f7:	31 c9                	xor    ecx,ecx
c00063f9:	89 d8                	mov    eax,ebx
c00063fb:	e8 7a d0 ff ff       	call   c000347a <remove_chain>
c0006400:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006407:	eb 35                	jmp    c000643e <f_truncate+0x96>
c0006409:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000640c:	89 d8                	mov    eax,ebx
c000640e:	e8 7a cb ff ff       	call   c0002f8d <get_fat>
c0006413:	89 c2                	mov    edx,eax
c0006415:	b8 01 00 00 00       	mov    eax,0x1
c000641a:	83 fa ff             	cmp    edx,0xffffffff
c000641d:	74 1f                	je     c000643e <f_truncate+0x96>
c000641f:	b8 02 00 00 00       	mov    eax,0x2
c0006424:	83 fa 01             	cmp    edx,0x1
c0006427:	74 15                	je     c000643e <f_truncate+0x96>
c0006429:	31 c0                	xor    eax,eax
c000642b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000642f:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006432:	76 0a                	jbe    c000643e <f_truncate+0x96>
c0006434:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006437:	89 d8                	mov    eax,ebx
c0006439:	e8 3c d0 ff ff       	call   c000347a <remove_chain>
c000643e:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006441:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006444:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006447:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000644a:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c000644d:	83 ca 40             	or     edx,0x40
c0006450:	85 c0                	test   eax,eax
c0006452:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006455:	75 35                	jne    c000648c <f_truncate+0xe4>
c0006457:	84 d2                	test   dl,dl
c0006459:	79 3d                	jns    c0006498 <f_truncate+0xf0>
c000645b:	83 ec 0c             	sub    esp,0xc
c000645e:	8d 43 50             	lea    eax,[ebx+0x50]
c0006461:	6a 01                	push   0x1
c0006463:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006466:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006469:	50                   	push   eax
c000646a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000646e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006472:	50                   	push   eax
c0006473:	e8 7a b7 ff ff       	call   c0001bf2 <disk_write>
c0006478:	83 c4 20             	add    esp,0x20
c000647b:	85 c0                	test   eax,eax
c000647d:	75 08                	jne    c0006487 <f_truncate+0xdf>
c000647f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006483:	31 f6                	xor    esi,esi
c0006485:	eb 11                	jmp    c0006498 <f_truncate+0xf0>
c0006487:	b8 01 00 00 00       	mov    eax,0x1
c000648c:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c000648f:	89 c6                	mov    esi,eax
c0006491:	eb 05                	jmp    c0006498 <f_truncate+0xf0>
c0006493:	be 07 00 00 00       	mov    esi,0x7
c0006498:	89 f0                	mov    eax,esi
c000649a:	83 c4 14             	add    esp,0x14
c000649d:	5b                   	pop    ebx
c000649e:	5e                   	pop    esi
c000649f:	c3                   	ret    

c00064a0 <f_unlink>:
c00064a0:	56                   	push   esi
c00064a1:	b9 02 00 00 00       	mov    ecx,0x2
c00064a6:	53                   	push   ebx
c00064a7:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064b1:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064b8:	e8 fa c1 ff ff       	call   c00026b7 <mount_volume>
c00064bd:	85 c0                	test   eax,eax
c00064bf:	0f 85 55 01 00 00    	jne    c000661a <f_unlink+0x17a>
c00064c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064c9:	83 ec 0c             	sub    esp,0xc
c00064cc:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064d0:	68 60 04 00 00       	push   0x460
c00064d5:	e8 80 1f 00 00       	call   c000845a <ff_memalloc>
c00064da:	83 c4 10             	add    esp,0x10
c00064dd:	89 c3                	mov    ebx,eax
c00064df:	b8 11 00 00 00       	mov    eax,0x11
c00064e4:	85 db                	test   ebx,ebx
c00064e6:	0f 84 2e 01 00 00    	je     c000661a <f_unlink+0x17a>
c00064ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064f0:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00064f6:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00064f9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00064fc:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006503:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006507:	e8 21 e9 ff ff       	call   c0004e2d <follow_path>
c000650c:	85 c0                	test   eax,eax
c000650e:	0f 85 f2 00 00 00    	jne    c0006606 <f_unlink+0x166>
c0006514:	b8 06 00 00 00       	mov    eax,0x6
c0006519:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006521:	0f 88 df 00 00 00    	js     c0006606 <f_unlink+0x166>
c0006527:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000652c:	74 0a                	je     c0006538 <f_unlink+0x98>
c000652e:	b8 07 00 00 00       	mov    eax,0x7
c0006533:	e9 ce 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c0006538:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000653c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006540:	8a 02                	mov    al,BYTE PTR [edx]
c0006542:	3c 04                	cmp    al,0x4
c0006544:	75 12                	jne    c0006558 <f_unlink+0xb8>
c0006546:	8d 42 10             	lea    eax,[edx+0x10]
c0006549:	8d 54 24 20          	lea    edx,[esp+0x20]
c000654d:	e8 a1 e8 ff ff       	call   c0004df3 <init_alloc_info.isra.2>
c0006552:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006556:	eb 0e                	jmp    c0006566 <f_unlink+0xc6>
c0006558:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000655f:	e8 3e e8 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006564:	89 c6                	mov    esi,eax
c0006566:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000656b:	75 12                	jne    c000657f <f_unlink+0xdf>
c000656d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006571:	e8 94 d6 ff ff       	call   c0003c0a <dir_remove>
c0006576:	85 c0                	test   eax,eax
c0006578:	74 6c                	je     c00065e6 <f_unlink+0x146>
c000657a:	e9 87 00 00 00       	jmp    c0006606 <f_unlink+0x166>
c000657f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006583:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000658a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006591:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006594:	75 21                	jne    c00065b7 <f_unlink+0x117>
c0006596:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000659a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000659e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065a5:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065ac:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065b0:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065b7:	31 d2                	xor    edx,edx
c00065b9:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065c0:	e8 be cb ff ff       	call   c0003183 <dir_sdi>
c00065c5:	85 c0                	test   eax,eax
c00065c7:	75 3d                	jne    c0006606 <f_unlink+0x166>
c00065c9:	31 d2                	xor    edx,edx
c00065cb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065d2:	e8 bc d3 ff ff       	call   c0003993 <dir_read>
c00065d7:	85 c0                	test   eax,eax
c00065d9:	0f 84 4f ff ff ff    	je     c000652e <f_unlink+0x8e>
c00065df:	83 f8 04             	cmp    eax,0x4
c00065e2:	75 22                	jne    c0006606 <f_unlink+0x166>
c00065e4:	eb 87                	jmp    c000656d <f_unlink+0xcd>
c00065e6:	85 f6                	test   esi,esi
c00065e8:	75 0b                	jne    c00065f5 <f_unlink+0x155>
c00065ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065ee:	e8 3d df ff ff       	call   c0004530 <sync_fs>
c00065f3:	eb 11                	jmp    c0006606 <f_unlink+0x166>
c00065f5:	31 c9                	xor    ecx,ecx
c00065f7:	89 f2                	mov    edx,esi
c00065f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00065fd:	e8 78 ce ff ff       	call   c000347a <remove_chain>
c0006602:	85 c0                	test   eax,eax
c0006604:	74 e4                	je     c00065ea <f_unlink+0x14a>
c0006606:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000660a:	83 ec 0c             	sub    esp,0xc
c000660d:	53                   	push   ebx
c000660e:	e8 5d 1e 00 00       	call   c0008470 <ff_memfree>
c0006613:	83 c4 10             	add    esp,0x10
c0006616:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000661a:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006620:	5b                   	pop    ebx
c0006621:	5e                   	pop    esi
c0006622:	c3                   	ret    

c0006623 <f_mkdir>:
c0006623:	57                   	push   edi
c0006624:	b9 02 00 00 00       	mov    ecx,0x2
c0006629:	56                   	push   esi
c000662a:	53                   	push   ebx
c000662b:	83 c4 80             	add    esp,0xffffff80
c000662e:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006632:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006639:	e8 79 c0 ff ff       	call   c00026b7 <mount_volume>
c000663e:	89 c3                	mov    ebx,eax
c0006640:	85 c0                	test   eax,eax
c0006642:	0f 85 fe 01 00 00    	jne    c0006846 <f_mkdir+0x223>
c0006648:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000664c:	bb 11 00 00 00       	mov    ebx,0x11
c0006651:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006655:	83 ec 0c             	sub    esp,0xc
c0006658:	68 60 04 00 00       	push   0x460
c000665d:	e8 f8 1d 00 00       	call   c000845a <ff_memalloc>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	89 c7                	mov    edi,eax
c0006667:	85 c0                	test   eax,eax
c0006669:	0f 84 d7 01 00 00    	je     c0006846 <f_mkdir+0x223>
c000666f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006673:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006679:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000667c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000667f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006686:	8d 44 24 34          	lea    eax,[esp+0x34]
c000668a:	e8 9e e7 ff ff       	call   c0004e2d <follow_path>
c000668f:	89 c3                	mov    ebx,eax
c0006691:	85 c0                	test   eax,eax
c0006693:	74 3e                	je     c00066d3 <f_mkdir+0xb0>
c0006695:	83 f8 04             	cmp    eax,0x4
c0006698:	75 3e                	jne    c00066d8 <f_mkdir+0xb5>
c000669a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000669e:	31 d2                	xor    edx,edx
c00066a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066a8:	e8 ce cb ff ff       	call   c000327b <create_chain>
c00066ad:	89 c6                	mov    esi,eax
c00066af:	85 c0                	test   eax,eax
c00066b1:	74 0c                	je     c00066bf <f_mkdir+0x9c>
c00066b3:	bb 02 00 00 00       	mov    ebx,0x2
c00066b8:	83 f8 01             	cmp    eax,0x1
c00066bb:	74 07                	je     c00066c4 <f_mkdir+0xa1>
c00066bd:	eb 2a                	jmp    c00066e9 <f_mkdir+0xc6>
c00066bf:	bb 07 00 00 00       	mov    ebx,0x7
c00066c4:	31 c9                	xor    ecx,ecx
c00066c6:	89 f2                	mov    edx,esi
c00066c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066cc:	e8 a9 cd ff ff       	call   c000347a <remove_chain>
c00066d1:	eb 05                	jmp    c00066d8 <f_mkdir+0xb5>
c00066d3:	bb 08 00 00 00       	mov    ebx,0x8
c00066d8:	83 ec 0c             	sub    esp,0xc
c00066db:	57                   	push   edi
c00066dc:	e8 8f 1d 00 00       	call   c0008470 <ff_memfree>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	e9 5d 01 00 00       	jmp    c0006846 <f_mkdir+0x223>
c00066e9:	bb 01 00 00 00       	mov    ebx,0x1
c00066ee:	83 f8 ff             	cmp    eax,0xffffffff
c00066f1:	74 d1                	je     c00066c4 <f_mkdir+0xa1>
c00066f3:	89 f2                	mov    edx,esi
c00066f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f9:	e8 c4 ce ff ff       	call   c00035c2 <dir_clear>
c00066fe:	89 c3                	mov    ebx,eax
c0006700:	85 c0                	test   eax,eax
c0006702:	75 c0                	jne    c00066c4 <f_mkdir+0xa1>
c0006704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006708:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000670b:	74 69                	je     c0006776 <f_mkdir+0x153>
c000670d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006712:	83 c0 54             	add    eax,0x54
c0006715:	ba 20 00 00 00       	mov    edx,0x20
c000671a:	e8 9c b5 ff ff       	call   c0001cbb <mem_set>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	ba 00 00 21 50       	mov    edx,0x50210000
c0006728:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c000672c:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006730:	83 c0 6a             	add    eax,0x6a
c0006733:	e8 65 b5 ff ff       	call   c0001c9d <st_dword>
c0006738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673c:	89 f1                	mov    ecx,esi
c000673e:	8d 50 54             	lea    edx,[eax+0x54]
c0006741:	e8 85 e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006746:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674a:	b9 20 00 00 00       	mov    ecx,0x20
c000674f:	8d 50 54             	lea    edx,[eax+0x54]
c0006752:	83 c0 74             	add    eax,0x74
c0006755:	e8 4c b5 ff ff       	call   c0001ca6 <mem_cpy>
c000675a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675e:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006762:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006766:	8d 50 74             	lea    edx,[eax+0x74]
c0006769:	e8 5d e6 ff ff       	call   c0004dcb <st_clust.isra.1>
c000676e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006772:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006776:	8d 44 24 34          	lea    eax,[esp+0x34]
c000677a:	e8 2f db ff ff       	call   c00042ae <dir_register>
c000677f:	89 c3                	mov    ebx,eax
c0006781:	85 c0                	test   eax,eax
c0006783:	0f 85 3b ff ff ff    	jne    c00066c4 <f_mkdir+0xa1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006790:	75 74                	jne    c0006806 <f_mkdir+0x1e3>
c0006792:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006795:	ba 00 00 21 50       	mov    edx,0x50210000
c000679a:	83 c0 0c             	add    eax,0xc
c000679d:	e8 fb b4 ff ff       	call   c0001c9d <st_dword>
c00067a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a6:	89 f2                	mov    edx,esi
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 34             	add    eax,0x34
c00067ae:	e8 ea b4 ff ff       	call   c0001c9d <st_dword>
c00067b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067be:	c1 e2 09             	shl    edx,0x9
c00067c1:	83 c0 38             	add    eax,0x38
c00067c4:	e8 d4 b4 ff ff       	call   c0001c9d <st_dword>
c00067c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067cd:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d4:	c1 e2 09             	shl    edx,0x9
c00067d7:	83 c0 28             	add    eax,0x28
c00067da:	e8 be b4 ff ff       	call   c0001c9d <st_dword>
c00067df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067e6:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00067ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ed:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00067f1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067f5:	e8 8b d3 ff ff       	call   c0003b85 <store_xdir>
c00067fa:	89 c3                	mov    ebx,eax
c00067fc:	85 c0                	test   eax,eax
c00067fe:	0f 85 d4 fe ff ff    	jne    c00066d8 <f_mkdir+0xb5>
c0006804:	eb 30                	jmp    c0006836 <f_mkdir+0x213>
c0006806:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000680a:	ba 00 00 21 50       	mov    edx,0x50210000
c000680f:	83 c0 16             	add    eax,0x16
c0006812:	e8 86 b4 ff ff       	call   c0001c9d <st_dword>
c0006817:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681b:	89 f1                	mov    ecx,esi
c000681d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006821:	e8 a5 e5 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006826:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000682a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000682e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006832:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006836:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683a:	e8 f1 dc ff ff       	call   c0004530 <sync_fs>
c000683f:	89 c3                	mov    ebx,eax
c0006841:	e9 92 fe ff ff       	jmp    c00066d8 <f_mkdir+0xb5>
c0006846:	83 ec 80             	sub    esp,0xffffff80
c0006849:	89 d8                	mov    eax,ebx
c000684b:	5b                   	pop    ebx
c000684c:	5e                   	pop    esi
c000684d:	5f                   	pop    edi
c000684e:	c3                   	ret    

c000684f <f_rename>:
c000684f:	55                   	push   ebp
c0006850:	57                   	push   edi
c0006851:	56                   	push   esi
c0006852:	53                   	push   ebx
c0006853:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006859:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006860:	e8 a4 b9 ff ff       	call   c0002209 <get_ldnumber>
c0006865:	b9 02 00 00 00       	mov    ecx,0x2
c000686a:	8d 54 24 14          	lea    edx,[esp+0x14]
c000686e:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006875:	e8 3d be ff ff       	call   c00026b7 <mount_volume>
c000687a:	85 c0                	test   eax,eax
c000687c:	0f 85 b5 02 00 00    	jne    c0006b37 <f_rename+0x2e8>
c0006882:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006886:	83 ec 0c             	sub    esp,0xc
c0006889:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000688d:	68 60 04 00 00       	push   0x460
c0006892:	e8 c3 1b 00 00       	call   c000845a <ff_memalloc>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	89 c3                	mov    ebx,eax
c000689c:	b8 11 00 00 00       	mov    eax,0x11
c00068a1:	85 db                	test   ebx,ebx
c00068a3:	0f 84 8e 02 00 00    	je     c0006b37 <f_rename+0x2e8>
c00068a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ad:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068b3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068b9:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068c0:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068c4:	e8 64 e5 ff ff       	call   c0004e2d <follow_path>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 52 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068d1:	b8 06 00 00 00       	mov    eax,0x6
c00068d6:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068de:	0f 85 3f 02 00 00    	jne    c0006b23 <f_rename+0x2d4>
c00068e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068eb:	0f 85 05 01 00 00    	jne    c00069f6 <f_rename+0x1a7>
c00068f1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068f4:	b9 40 00 00 00       	mov    ecx,0x40
c00068f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00068fd:	e8 a4 b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006902:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006907:	8d 54 24 58          	lea    edx,[esp+0x58]
c000690b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006912:	e8 8f b3 ff ff       	call   c0001ca6 <mem_cpy>
c0006917:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000691e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006925:	e8 03 e5 ff ff       	call   c0004e2d <follow_path>
c000692a:	85 c0                	test   eax,eax
c000692c:	75 29                	jne    c0006957 <f_rename+0x108>
c000692e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006932:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006939:	74 0a                	je     c0006945 <f_rename+0xf6>
c000693b:	b8 08 00 00 00       	mov    eax,0x8
c0006940:	e9 de 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c0006945:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000694c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006953:	75 e6                	jne    c000693b <f_rename+0xec>
c0006955:	eb 09                	jmp    c0006960 <f_rename+0x111>
c0006957:	83 f8 04             	cmp    eax,0x4
c000695a:	0f 85 c3 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006960:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006967:	e8 42 d9 ff ff       	call   c00042ae <dir_register>
c000696c:	85 c0                	test   eax,eax
c000696e:	0f 85 af 01 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006974:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006978:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000697b:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000697e:	89 c5                	mov    ebp,eax
c0006980:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006983:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006987:	8d 46 24             	lea    eax,[esi+0x24]
c000698a:	e8 98 b2 ff ff       	call   c0001c27 <ld_word>
c000698f:	b9 40 00 00 00       	mov    ecx,0x40
c0006994:	89 c7                	mov    edi,eax
c0006996:	8d 54 24 18          	lea    edx,[esp+0x18]
c000699a:	89 f0                	mov    eax,esi
c000699c:	e8 05 b3 ff ff       	call   c0001ca6 <mem_cpy>
c00069a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069a5:	89 e9                	mov    ecx,ebp
c00069a7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069aa:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069ad:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069b8:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069bb:	0f b7 d7             	movzx  edx,di
c00069be:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c1:	83 c0 24             	add    eax,0x24
c00069c4:	e8 d0 b2 ff ff       	call   c0001c99 <st_word>
c00069c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d0:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069d3:	a8 10                	test   al,0x10
c00069d5:	75 06                	jne    c00069dd <f_rename+0x18e>
c00069d7:	83 c8 20             	or     eax,0x20
c00069da:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069dd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069e4:	e8 9c d1 ff ff       	call   c0003b85 <store_xdir>
c00069e9:	85 c0                	test   eax,eax
c00069eb:	0f 84 1c 01 00 00    	je     c0006b0d <f_rename+0x2be>
c00069f1:	e9 2d 01 00 00       	jmp    c0006b23 <f_rename+0x2d4>
c00069f6:	b9 20 00 00 00       	mov    ecx,0x20
c00069fb:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a02:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a06:	e8 9b b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a0b:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a10:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a14:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1b:	e8 86 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a20:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a27:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a2e:	e8 fa e3 ff ff       	call   c0004e2d <follow_path>
c0006a33:	85 c0                	test   eax,eax
c0006a35:	75 27                	jne    c0006a5e <f_rename+0x20f>
c0006a37:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a3b:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a42:	0f 85 f3 fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a48:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a4f:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a56:	0f 85 df fe ff ff    	jne    c000693b <f_rename+0xec>
c0006a5c:	eb 09                	jmp    c0006a67 <f_rename+0x218>
c0006a5e:	83 f8 04             	cmp    eax,0x4
c0006a61:	0f 85 bc 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a67:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a6e:	e8 3b d8 ff ff       	call   c00042ae <dir_register>
c0006a73:	85 c0                	test   eax,eax
c0006a75:	0f 85 a8 00 00 00    	jne    c0006b23 <f_rename+0x2d4>
c0006a7b:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a82:	b9 13 00 00 00       	mov    ecx,0x13
c0006a87:	8d 46 0d             	lea    eax,[esi+0xd]
c0006a8a:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006a8e:	e8 13 b2 ff ff       	call   c0001ca6 <mem_cpy>
c0006a93:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006a97:	a8 10                	test   al,0x10
c0006a99:	75 03                	jne    c0006a9e <f_rename+0x24f>
c0006a9b:	83 c8 20             	or     eax,0x20
c0006a9e:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006aa5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006aa9:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006aad:	74 5e                	je     c0006b0d <f_rename+0x2be>
c0006aaf:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ab6:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006aba:	74 51                	je     c0006b0d <f_rename+0x2be>
c0006abc:	89 f2                	mov    edx,esi
c0006abe:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006ac2:	8a 07                	mov    al,BYTE PTR [edi]
c0006ac4:	e8 d9 e2 ff ff       	call   c0004da2 <ld_clust.isra.0>
c0006ac9:	89 c2                	mov    edx,eax
c0006acb:	89 f8                	mov    eax,edi
c0006acd:	e8 ee b3 ff ff       	call   c0001ec0 <clst2sect>
c0006ad2:	89 c6                	mov    esi,eax
c0006ad4:	89 d1                	mov    ecx,edx
c0006ad6:	b8 02 00 00 00       	mov    eax,0x2
c0006adb:	09 f2                	or     edx,esi
c0006add:	74 44                	je     c0006b23 <f_rename+0x2d4>
c0006adf:	89 f2                	mov    edx,esi
c0006ae1:	89 f8                	mov    eax,edi
c0006ae3:	e8 1d b9 ff ff       	call   c0002405 <move_window>
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	75 37                	jne    c0006b23 <f_rename+0x2d4>
c0006aec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006af0:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006af4:	75 17                	jne    c0006b0d <f_rename+0x2be>
c0006af6:	8d 50 74             	lea    edx,[eax+0x74]
c0006af9:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b00:	e8 c6 e2 ff ff       	call   c0004dcb <st_clust.isra.1>
c0006b05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b09:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b0d:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b11:	e8 f4 d0 ff ff       	call   c0003c0a <dir_remove>
c0006b16:	85 c0                	test   eax,eax
c0006b18:	75 09                	jne    c0006b23 <f_rename+0x2d4>
c0006b1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b1e:	e8 0d da ff ff       	call   c0004530 <sync_fs>
c0006b23:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b27:	83 ec 0c             	sub    esp,0xc
c0006b2a:	53                   	push   ebx
c0006b2b:	e8 40 19 00 00       	call   c0008470 <ff_memfree>
c0006b30:	83 c4 10             	add    esp,0x10
c0006b33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b37:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b3d:	5b                   	pop    ebx
c0006b3e:	5e                   	pop    esi
c0006b3f:	5f                   	pop    edi
c0006b40:	5d                   	pop    ebp
c0006b41:	c3                   	ret    

c0006b42 <f_chmod>:
c0006b42:	57                   	push   edi
c0006b43:	b9 02 00 00 00       	mov    ecx,0x2
c0006b48:	56                   	push   esi
c0006b49:	53                   	push   ebx
c0006b4a:	83 ec 60             	sub    esp,0x60
c0006b4d:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b51:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b55:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b59:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b5d:	e8 55 bb ff ff       	call   c00026b7 <mount_volume>
c0006b62:	85 c0                	test   eax,eax
c0006b64:	0f 85 af 00 00 00    	jne    c0006c19 <f_chmod+0xd7>
c0006b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b6e:	83 ec 0c             	sub    esp,0xc
c0006b71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b75:	68 60 04 00 00       	push   0x460
c0006b7a:	e8 db 18 00 00       	call   c000845a <ff_memalloc>
c0006b7f:	83 c4 10             	add    esp,0x10
c0006b82:	89 c6                	mov    esi,eax
c0006b84:	b8 11 00 00 00       	mov    eax,0x11
c0006b89:	85 f6                	test   esi,esi
c0006b8b:	0f 84 88 00 00 00    	je     c0006c19 <f_chmod+0xd7>
c0006b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b95:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006b9b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006b9e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ba1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ba5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ba9:	e8 7f e2 ff ff       	call   c0004e2d <follow_path>
c0006bae:	85 c0                	test   eax,eax
c0006bb0:	75 53                	jne    c0006c05 <f_chmod+0xc3>
c0006bb2:	b8 06 00 00 00       	mov    eax,0x6
c0006bb7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bbc:	75 47                	jne    c0006c05 <f_chmod+0xc3>
c0006bbe:	89 f9                	mov    ecx,edi
c0006bc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc4:	83 e1 27             	and    ecx,0x27
c0006bc7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bca:	75 1d                	jne    c0006be9 <f_chmod+0xa7>
c0006bcc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bcf:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd2:	21 cb                	and    ebx,ecx
c0006bd4:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bd7:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bda:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bde:	e8 a2 cf ff ff       	call   c0003b85 <store_xdir>
c0006be3:	85 c0                	test   eax,eax
c0006be5:	75 1e                	jne    c0006c05 <f_chmod+0xc3>
c0006be7:	eb 13                	jmp    c0006bfc <f_chmod+0xba>
c0006be9:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006bed:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf0:	21 cb                	and    ebx,ecx
c0006bf2:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006bf5:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006bf8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006bfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c00:	e8 2b d9 ff ff       	call   c0004530 <sync_fs>
c0006c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c09:	83 ec 0c             	sub    esp,0xc
c0006c0c:	56                   	push   esi
c0006c0d:	e8 5e 18 00 00       	call   c0008470 <ff_memfree>
c0006c12:	83 c4 10             	add    esp,0x10
c0006c15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c19:	83 c4 60             	add    esp,0x60
c0006c1c:	5b                   	pop    ebx
c0006c1d:	5e                   	pop    esi
c0006c1e:	5f                   	pop    edi
c0006c1f:	c3                   	ret    

c0006c20 <f_utime>:
c0006c20:	56                   	push   esi
c0006c21:	b9 02 00 00 00       	mov    ecx,0x2
c0006c26:	53                   	push   ebx
c0006c27:	83 ec 64             	sub    esp,0x64
c0006c2a:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c2e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c32:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c36:	e8 7c ba ff ff       	call   c00026b7 <mount_volume>
c0006c3b:	85 c0                	test   eax,eax
c0006c3d:	0f 85 b5 00 00 00    	jne    c0006cf8 <f_utime+0xd8>
c0006c43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c47:	83 ec 0c             	sub    esp,0xc
c0006c4a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c4e:	68 60 04 00 00       	push   0x460
c0006c53:	e8 02 18 00 00       	call   c000845a <ff_memalloc>
c0006c58:	83 c4 10             	add    esp,0x10
c0006c5b:	89 c3                	mov    ebx,eax
c0006c5d:	b8 11 00 00 00       	mov    eax,0x11
c0006c62:	85 db                	test   ebx,ebx
c0006c64:	0f 84 8e 00 00 00    	je     c0006cf8 <f_utime+0xd8>
c0006c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c6e:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c74:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c77:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c7a:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c82:	e8 a6 e1 ff ff       	call   c0004e2d <follow_path>
c0006c87:	85 c0                	test   eax,eax
c0006c89:	75 59                	jne    c0006ce4 <f_utime+0xc4>
c0006c8b:	b8 06 00 00 00       	mov    eax,0x6
c0006c90:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c95:	75 4d                	jne    c0006ce4 <f_utime+0xc4>
c0006c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c9b:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006c9f:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006ca3:	c1 e2 10             	shl    edx,0x10
c0006ca6:	09 ca                	or     edx,ecx
c0006ca8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cab:	75 1a                	jne    c0006cc7 <f_utime+0xa7>
c0006cad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cb0:	83 c0 0c             	add    eax,0xc
c0006cb3:	e8 e5 af ff ff       	call   c0001c9d <st_dword>
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 c4 ce ff ff       	call   c0003b85 <store_xdir>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 1f                	jne    c0006ce4 <f_utime+0xc4>
c0006cc5:	eb 14                	jmp    c0006cdb <f_utime+0xbb>
c0006cc7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ccb:	83 c0 16             	add    eax,0x16
c0006cce:	e8 ca af ff ff       	call   c0001c9d <st_dword>
c0006cd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cdf:	e8 4c d8 ff ff       	call   c0004530 <sync_fs>
c0006ce4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ce8:	83 ec 0c             	sub    esp,0xc
c0006ceb:	53                   	push   ebx
c0006cec:	e8 7f 17 00 00       	call   c0008470 <ff_memfree>
c0006cf1:	83 c4 10             	add    esp,0x10
c0006cf4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006cf8:	83 c4 64             	add    esp,0x64
c0006cfb:	5b                   	pop    ebx
c0006cfc:	5e                   	pop    esi
c0006cfd:	c3                   	ret    

c0006cfe <f_getlabel>:
c0006cfe:	55                   	push   ebp
c0006cff:	31 c9                	xor    ecx,ecx
c0006d01:	57                   	push   edi
c0006d02:	56                   	push   esi
c0006d03:	53                   	push   ebx
c0006d04:	83 ec 6c             	sub    esp,0x6c
c0006d07:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d0b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d12:	e8 a0 b9 ff ff       	call   c00026b7 <mount_volume>
c0006d17:	89 c6                	mov    esi,eax
c0006d19:	85 c0                	test   eax,eax
c0006d1b:	0f 85 c1 01 00 00    	jne    c0006ee2 <f_getlabel+0x1e4>
c0006d21:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d29:	0f 84 5f 01 00 00    	je     c0006e8e <f_getlabel+0x190>
c0006d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d33:	31 d2                	xor    edx,edx
c0006d35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d39:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d45:	e8 39 c4 ff ff       	call   c0003183 <dir_sdi>
c0006d4a:	85 c0                	test   eax,eax
c0006d4c:	0f 85 2d 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d52:	ba 01 00 00 00       	mov    edx,0x1
c0006d57:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d5b:	e8 33 cc ff ff       	call   c0003993 <dir_read>
c0006d60:	85 c0                	test   eax,eax
c0006d62:	0f 85 17 01 00 00    	jne    c0006e7f <f_getlabel+0x181>
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d6f:	74 09                	je     c0006d7a <f_getlabel+0x7c>
c0006d71:	31 db                	xor    ebx,ebx
c0006d73:	31 c9                	xor    ecx,ecx
c0006d75:	e9 c8 00 00 00       	jmp    c0006e42 <f_getlabel+0x144>
c0006d7a:	31 ed                	xor    ebp,ebp
c0006d7c:	31 db                	xor    ebx,ebx
c0006d7e:	31 ff                	xor    edi,edi
c0006d80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d84:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006d88:	39 fa                	cmp    edx,edi
c0006d8a:	76 4b                	jbe    c0006dd7 <f_getlabel+0xd9>
c0006d8c:	47                   	inc    edi
c0006d8d:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006d90:	01 d0                	add    eax,edx
c0006d92:	e8 90 ae ff ff       	call   c0001c27 <ld_word>
c0006d97:	66 85 ed             	test   bp,bp
c0006d9a:	75 0d                	jne    c0006da9 <f_getlabel+0xab>
c0006d9c:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006da2:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006da7:	76 28                	jbe    c0006dd1 <f_getlabel+0xd3>
c0006da9:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006db0:	89 e9                	mov    ecx,ebp
c0006db2:	01 da                	add    edx,ebx
c0006db4:	c1 e1 10             	shl    ecx,0x10
c0006db7:	0f b7 c0             	movzx  eax,ax
c0006dba:	09 c8                	or     eax,ecx
c0006dbc:	b9 04 00 00 00       	mov    ecx,0x4
c0006dc1:	e8 01 b0 ff ff       	call   c0001dc7 <put_utf>
c0006dc6:	84 c0                	test   al,al
c0006dc8:	74 0b                	je     c0006dd5 <f_getlabel+0xd7>
c0006dca:	0f b6 c0             	movzx  eax,al
c0006dcd:	01 c3                	add    ebx,eax
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	89 c5                	mov    ebp,eax
c0006dd3:	eb ab                	jmp    c0006d80 <f_getlabel+0x82>
c0006dd5:	31 db                	xor    ebx,ebx
c0006dd7:	66 85 ed             	test   bp,bp
c0006dda:	74 02                	je     c0006dde <f_getlabel+0xe0>
c0006ddc:	31 db                	xor    ebx,ebx
c0006dde:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006de5:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006de9:	e9 a0 00 00 00       	jmp    c0006e8e <f_getlabel+0x190>
c0006dee:	83 ff 0b             	cmp    edi,0xb
c0006df1:	74 11                	je     c0006e04 <f_getlabel+0x106>
c0006df3:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006df8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006dfc:	8d 79 02             	lea    edi,[ecx+0x2]
c0006dff:	c1 e0 08             	shl    eax,0x8
c0006e02:	09 c2                	or     edx,eax
c0006e04:	0f b7 d2             	movzx  edx,dx
c0006e07:	50                   	push   eax
c0006e08:	50                   	push   eax
c0006e09:	68 b5 01 00 00       	push   0x1b5
c0006e0e:	52                   	push   edx
c0006e0f:	e8 03 17 00 00       	call   c0008517 <ff_oem2uni>
c0006e14:	83 c4 10             	add    esp,0x10
c0006e17:	66 85 c0             	test   ax,ax
c0006e1a:	74 46                	je     c0006e62 <f_getlabel+0x164>
c0006e1c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e23:	0f b7 c0             	movzx  eax,ax
c0006e26:	01 da                	add    edx,ebx
c0006e28:	b9 04 00 00 00       	mov    ecx,0x4
c0006e2d:	e8 95 af ff ff       	call   c0001dc7 <put_utf>
c0006e32:	84 c0                	test   al,al
c0006e34:	74 2c                	je     c0006e62 <f_getlabel+0x164>
c0006e36:	0f b6 c0             	movzx  eax,al
c0006e39:	01 c3                	add    ebx,eax
c0006e3b:	83 ff 0b             	cmp    edi,0xb
c0006e3e:	74 24                	je     c0006e64 <f_getlabel+0x166>
c0006e40:	89 f9                	mov    ecx,edi
c0006e42:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e46:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e49:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e4e:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e57:	e8 9f ae ff ff       	call   c0001cfb <dbc_1st>
c0006e5c:	85 c0                	test   eax,eax
c0006e5e:	74 a4                	je     c0006e04 <f_getlabel+0x106>
c0006e60:	eb 8c                	jmp    c0006dee <f_getlabel+0xf0>
c0006e62:	31 db                	xor    ebx,ebx
c0006e64:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e6b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e6e:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e75:	74 17                	je     c0006e8e <f_getlabel+0x190>
c0006e77:	4b                   	dec    ebx
c0006e78:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e7b:	74 ee                	je     c0006e6b <f_getlabel+0x16d>
c0006e7d:	eb 0f                	jmp    c0006e8e <f_getlabel+0x190>
c0006e7f:	83 f8 04             	cmp    eax,0x4
c0006e82:	75 5c                	jne    c0006ee0 <f_getlabel+0x1e2>
c0006e84:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006e8e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006e96:	74 4a                	je     c0006ee2 <f_getlabel+0x1e4>
c0006e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e9c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006e9f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ea2:	e8 5e b5 ff ff       	call   c0002405 <move_window>
c0006ea7:	89 c6                	mov    esi,eax
c0006ea9:	85 c0                	test   eax,eax
c0006eab:	75 35                	jne    c0006ee2 <f_getlabel+0x1e4>
c0006ead:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eb1:	b8 43 00 00 00       	mov    eax,0x43
c0006eb6:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006eb8:	80 f9 03             	cmp    cl,0x3
c0006ebb:	74 0f                	je     c0006ecc <f_getlabel+0x1ce>
c0006ebd:	31 c0                	xor    eax,eax
c0006ebf:	80 f9 04             	cmp    cl,0x4
c0006ec2:	0f 94 c0             	sete   al
c0006ec5:	48                   	dec    eax
c0006ec6:	83 e0 c3             	and    eax,0xffffffc3
c0006ec9:	83 c0 64             	add    eax,0x64
c0006ecc:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006ed0:	e8 5f ad ff ff       	call   c0001c34 <ld_dword>
c0006ed5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006edc:	89 07                	mov    DWORD PTR [edi],eax
c0006ede:	eb 02                	jmp    c0006ee2 <f_getlabel+0x1e4>
c0006ee0:	89 c6                	mov    esi,eax
c0006ee2:	83 c4 6c             	add    esp,0x6c
c0006ee5:	89 f0                	mov    eax,esi
c0006ee7:	5b                   	pop    ebx
c0006ee8:	5e                   	pop    esi
c0006ee9:	5f                   	pop    edi
c0006eea:	5d                   	pop    ebp
c0006eeb:	c3                   	ret    

c0006eec <f_setlabel>:
c0006eec:	56                   	push   esi
c0006eed:	b9 02 00 00 00       	mov    ecx,0x2
c0006ef2:	53                   	push   ebx
c0006ef3:	83 ec 74             	sub    esp,0x74
c0006ef6:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006efa:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f01:	e8 b1 b7 ff ff       	call   c00026b7 <mount_volume>
c0006f06:	89 c6                	mov    esi,eax
c0006f08:	85 c0                	test   eax,eax
c0006f0a:	0f 85 41 02 00 00    	jne    c0007151 <f_setlabel+0x265>
c0006f10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f14:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f17:	0f 85 8e 00 00 00    	jne    c0006fab <f_setlabel+0xbf>
c0006f1d:	b9 16 00 00 00       	mov    ecx,0x16
c0006f22:	31 d2                	xor    edx,edx
c0006f24:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f28:	31 db                	xor    ebx,ebx
c0006f2a:	e8 8c ad ff ff       	call   c0001cbb <mem_set>
c0006f2f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f36:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f39:	0f 86 0a 01 00 00    	jbe    c0007049 <f_setlabel+0x15d>
c0006f3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f46:	e8 b6 ad ff ff       	call   c0001d01 <tchar2uni>
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f52:	76 2a                	jbe    c0006f7e <f_setlabel+0x92>
c0006f54:	83 f8 ff             	cmp    eax,0xffffffff
c0006f57:	74 05                	je     c0006f5e <f_setlabel+0x72>
c0006f59:	83 fb 09             	cmp    ebx,0x9
c0006f5c:	76 0a                	jbe    c0006f68 <f_setlabel+0x7c>
c0006f5e:	be 06 00 00 00       	mov    esi,0x6
c0006f63:	e9 e9 01 00 00       	jmp    c0007151 <f_setlabel+0x265>
c0006f68:	89 c2                	mov    edx,eax
c0006f6a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f6e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f71:	c1 ea 10             	shr    edx,0x10
c0006f74:	01 c8                	add    eax,ecx
c0006f76:	43                   	inc    ebx
c0006f77:	e8 1d ad ff ff       	call   c0001c99 <st_word>
c0006f7c:	eb 04                	jmp    c0006f82 <f_setlabel+0x96>
c0006f7e:	85 c0                	test   eax,eax
c0006f80:	74 dc                	je     c0006f5e <f_setlabel+0x72>
c0006f82:	89 f2                	mov    edx,esi
c0006f84:	b8 77 9c 02 c0       	mov    eax,0xc0029c77
c0006f89:	e8 5b ad ff ff       	call   c0001ce9 <chk_chr>
c0006f8e:	85 c0                	test   eax,eax
c0006f90:	75 cc                	jne    c0006f5e <f_setlabel+0x72>
c0006f92:	83 fb 0a             	cmp    ebx,0xa
c0006f95:	77 c7                	ja     c0006f5e <f_setlabel+0x72>
c0006f97:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f9a:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f9e:	0f b7 d6             	movzx  edx,si
c0006fa1:	01 c8                	add    eax,ecx
c0006fa3:	43                   	inc    ebx
c0006fa4:	e8 f0 ac ff ff       	call   c0001c99 <st_word>
c0006fa9:	eb 84                	jmp    c0006f2f <f_setlabel+0x43>
c0006fab:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fb0:	ba 20 00 00 00       	mov    edx,0x20
c0006fb5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fb9:	31 db                	xor    ebx,ebx
c0006fbb:	e8 fb ac ff ff       	call   c0001cbb <mem_set>
c0006fc0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fc7:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fca:	76 60                	jbe    c000702c <f_setlabel+0x140>
c0006fcc:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fd3:	e8 29 ad ff ff       	call   c0001d01 <tchar2uni>
c0006fd8:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fdd:	0f 87 7b ff ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0006fe3:	83 ec 0c             	sub    esp,0xc
c0006fe6:	50                   	push   eax
c0006fe7:	e8 97 15 00 00       	call   c0008583 <ff_wtoupper>
c0006fec:	5a                   	pop    edx
c0006fed:	59                   	pop    ecx
c0006fee:	68 b5 01 00 00       	push   0x1b5
c0006ff3:	50                   	push   eax
c0006ff4:	e8 8e 14 00 00       	call   c0008487 <ff_uni2oem>
c0006ff9:	83 c4 10             	add    esp,0x10
c0006ffc:	89 c6                	mov    esi,eax
c0006ffe:	66 85 c0             	test   ax,ax
c0007001:	0f 84 57 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007007:	0f b7 d0             	movzx  edx,ax
c000700a:	b8 70 9c 02 c0       	mov    eax,0xc0029c70
c000700f:	e8 d5 ac ff ff       	call   c0001ce9 <chk_chr>
c0007014:	85 c0                	test   eax,eax
c0007016:	0f 85 42 ff ff ff    	jne    c0006f5e <f_setlabel+0x72>
c000701c:	66 81 fe ff 00       	cmp    si,0xff
c0007021:	0f 87 14 01 00 00    	ja     c000713b <f_setlabel+0x24f>
c0007027:	e9 fa 00 00 00       	jmp    c0007126 <f_setlabel+0x23a>
c000702c:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0007031:	0f 84 27 ff ff ff    	je     c0006f5e <f_setlabel+0x72>
c0007037:	85 db                	test   ebx,ebx
c0007039:	74 0e                	je     c0007049 <f_setlabel+0x15d>
c000703b:	8d 43 ff             	lea    eax,[ebx-0x1]
c000703e:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0007043:	75 04                	jne    c0007049 <f_setlabel+0x15d>
c0007045:	89 c3                	mov    ebx,eax
c0007047:	eb ee                	jmp    c0007037 <f_setlabel+0x14b>
c0007049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000704d:	31 d2                	xor    edx,edx
c000704f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0007053:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000705b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000705f:	e8 1f c1 ff ff       	call   c0003183 <dir_sdi>
c0007064:	89 c6                	mov    esi,eax
c0007066:	85 c0                	test   eax,eax
c0007068:	0f 85 e3 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c000706e:	ba 01 00 00 00       	mov    edx,0x1
c0007073:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007077:	e8 17 c9 ff ff       	call   c0003993 <dir_read>
c000707c:	85 c0                	test   eax,eax
c000707e:	75 21                	jne    c00070a1 <f_setlabel+0x1b5>
c0007080:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007084:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007088:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000708b:	74 5d                	je     c00070ea <f_setlabel+0x1fe>
c000708d:	85 db                	test   ebx,ebx
c000708f:	74 0b                	je     c000709c <f_setlabel+0x1b0>
c0007091:	b9 0b 00 00 00       	mov    ecx,0xb
c0007096:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000709a:	eb 70                	jmp    c000710c <f_setlabel+0x220>
c000709c:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000709f:	eb 70                	jmp    c0007111 <f_setlabel+0x225>
c00070a1:	83 f8 04             	cmp    eax,0x4
c00070a4:	75 7c                	jne    c0007122 <f_setlabel+0x236>
c00070a6:	85 db                	test   ebx,ebx
c00070a8:	0f 84 a3 00 00 00    	je     c0007151 <f_setlabel+0x265>
c00070ae:	ba 01 00 00 00       	mov    edx,0x1
c00070b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b7:	e8 51 ca ff ff       	call   c0003b0d <dir_alloc>
c00070bc:	89 c6                	mov    esi,eax
c00070be:	85 c0                	test   eax,eax
c00070c0:	0f 85 8b 00 00 00    	jne    c0007151 <f_setlabel+0x265>
c00070c6:	31 d2                	xor    edx,edx
c00070c8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070cc:	b9 20 00 00 00       	mov    ecx,0x20
c00070d1:	e8 e5 ab ff ff       	call   c0001cbb <mem_set>
c00070d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070da:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070dd:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e1:	75 18                	jne    c00070fb <f_setlabel+0x20f>
c00070e3:	c6 00 83             	mov    BYTE PTR [eax],0x83
c00070e6:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ea:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c00070ed:	b9 16 00 00 00       	mov    ecx,0x16
c00070f2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070f6:	83 c0 02             	add    eax,0x2
c00070f9:	eb 9b                	jmp    c0007096 <f_setlabel+0x1aa>
c00070fb:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00070ff:	b9 0b 00 00 00       	mov    ecx,0xb
c0007104:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	e8 95 ab ff ff       	call   c0001ca6 <mem_cpy>
c0007111:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007115:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007119:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000711d:	e8 0e d4 ff ff       	call   c0004530 <sync_fs>
c0007122:	89 c6                	mov    esi,eax
c0007124:	eb 2b                	jmp    c0007151 <f_setlabel+0x265>
c0007126:	83 fb 0a             	cmp    ebx,0xa
c0007129:	0f 87 2f fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c000712f:	89 f0                	mov    eax,esi
c0007131:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007135:	43                   	inc    ebx
c0007136:	e9 85 fe ff ff       	jmp    c0006fc0 <f_setlabel+0xd4>
c000713b:	83 fb 09             	cmp    ebx,0x9
c000713e:	0f 87 1a fe ff ff    	ja     c0006f5e <f_setlabel+0x72>
c0007144:	89 f0                	mov    eax,esi
c0007146:	66 c1 e8 08          	shr    ax,0x8
c000714a:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000714e:	43                   	inc    ebx
c000714f:	eb de                	jmp    c000712f <f_setlabel+0x243>
c0007151:	89 f0                	mov    eax,esi
c0007153:	83 c4 74             	add    esp,0x74
c0007156:	5b                   	pop    ebx
c0007157:	5e                   	pop    esi
c0007158:	c3                   	ret    

c0007159 <f_forward>:
c0007159:	55                   	push   ebp
c000715a:	57                   	push   edi
c000715b:	56                   	push   esi
c000715c:	53                   	push   ebx
c000715d:	83 ec 2c             	sub    esp,0x2c
c0007160:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0007164:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007168:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000716e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0007172:	89 d8                	mov    eax,ebx
c0007174:	e8 b1 b1 ff ff       	call   c000232a <validate>
c0007179:	89 c5                	mov    ebp,eax
c000717b:	85 c0                	test   eax,eax
c000717d:	0f 85 aa 01 00 00    	jne    c000732d <f_forward+0x1d4>
c0007183:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0007187:	85 ed                	test   ebp,ebp
c0007189:	0f 85 9e 01 00 00    	jne    c000732d <f_forward+0x1d4>
c000718f:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007193:	0f 84 8f 01 00 00    	je     c0007328 <f_forward+0x1cf>
c0007199:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000719c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000719f:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071a2:	bf 00 00 00 00       	mov    edi,0x0
c00071a7:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071aa:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071ae:	89 d1                	mov    ecx,edx
c00071b0:	19 f9                	sbb    ecx,edi
c00071b2:	0f 83 cf 00 00 00    	jae    c0007287 <f_forward+0x12e>
c00071b8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071bc:	e9 c6 00 00 00       	jmp    c0007287 <f_forward+0x12e>
c00071c1:	50                   	push   eax
c00071c2:	50                   	push   eax
c00071c3:	6a 00                	push   0x0
c00071c5:	6a 00                	push   0x0
c00071c7:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071cb:	83 c4 10             	add    esp,0x10
c00071ce:	85 c0                	test   eax,eax
c00071d0:	0f 84 57 01 00 00    	je     c000732d <f_forward+0x1d4>
c00071d6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071d9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071dd:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071e0:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071e4:	89 d7                	mov    edi,edx
c00071e6:	8d 4e ff             	lea    ecx,[esi-0x1]
c00071e9:	89 c6                	mov    esi,eax
c00071eb:	0f ac fe 09          	shrd   esi,edi,0x9
c00071ef:	21 ce                	and    esi,ecx
c00071f1:	89 c1                	mov    ecx,eax
c00071f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00071f9:	0f 84 98 00 00 00    	je     c0007297 <f_forward+0x13e>
c00071ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007203:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007206:	89 c8                	mov    eax,ecx
c0007208:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000720c:	e8 af ac ff ff       	call   c0001ec0 <clst2sect>
c0007211:	89 d7                	mov    edi,edx
c0007213:	09 c7                	or     edi,eax
c0007215:	0f 84 9e 00 00 00    	je     c00072b9 <f_forward+0x160>
c000721b:	31 ff                	xor    edi,edi
c000721d:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007220:	01 c6                	add    esi,eax
c0007222:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007226:	11 d7                	adc    edi,edx
c0007228:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000722b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000722e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007232:	39 fa                	cmp    edx,edi
c0007234:	0f 85 a2 00 00 00    	jne    c00072dc <f_forward+0x183>
c000723a:	39 f0                	cmp    eax,esi
c000723c:	0f 85 9a 00 00 00    	jne    c00072dc <f_forward+0x183>
c0007242:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007245:	ba 00 02 00 00       	mov    edx,0x200
c000724a:	25 ff 01 00 00       	and    eax,0x1ff
c000724f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007253:	29 c2                	sub    edx,eax
c0007255:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007258:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000725b:	39 d1                	cmp    ecx,edx
c000725d:	76 02                	jbe    c0007261 <f_forward+0x108>
c000725f:	89 d1                	mov    ecx,edx
c0007261:	8d 73 50             	lea    esi,[ebx+0x50]
c0007264:	52                   	push   edx
c0007265:	01 c6                	add    esi,eax
c0007267:	52                   	push   edx
c0007268:	51                   	push   ecx
c0007269:	56                   	push   esi
c000726a:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000726e:	83 c4 10             	add    esp,0x10
c0007271:	85 c0                	test   eax,eax
c0007273:	74 44                	je     c00072b9 <f_forward+0x160>
c0007275:	31 ff                	xor    edi,edi
c0007277:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c000727a:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c000727d:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007281:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007285:	01 07                	add    DWORD PTR [edi],eax
c0007287:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000728c:	0f 85 2f ff ff ff    	jne    c00071c1 <f_forward+0x68>
c0007292:	e9 96 00 00 00       	jmp    c000732d <f_forward+0x1d4>
c0007297:	85 f6                	test   esi,esi
c0007299:	0f 85 60 ff ff ff    	jne    c00071ff <f_forward+0xa6>
c000729f:	89 d7                	mov    edi,edx
c00072a1:	09 c7                	or     edi,eax
c00072a3:	75 05                	jne    c00072aa <f_forward+0x151>
c00072a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072a8:	eb 0a                	jmp    c00072b4 <f_forward+0x15b>
c00072aa:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072ad:	89 d8                	mov    eax,ebx
c00072af:	e8 d9 bc ff ff       	call   c0002f8d <get_fat>
c00072b4:	83 f8 01             	cmp    eax,0x1
c00072b7:	77 0b                	ja     c00072c4 <f_forward+0x16b>
c00072b9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072bd:	bd 02 00 00 00       	mov    ebp,0x2
c00072c2:	eb 69                	jmp    c000732d <f_forward+0x1d4>
c00072c4:	83 f8 ff             	cmp    eax,0xffffffff
c00072c7:	75 0b                	jne    c00072d4 <f_forward+0x17b>
c00072c9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072cd:	bd 01 00 00 00       	mov    ebp,0x1
c00072d2:	eb 59                	jmp    c000732d <f_forward+0x1d4>
c00072d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072d7:	e9 23 ff ff ff       	jmp    c00071ff <f_forward+0xa6>
c00072dc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072e0:	79 20                	jns    c0007302 <f_forward+0x1a9>
c00072e2:	83 ec 0c             	sub    esp,0xc
c00072e5:	6a 01                	push   0x1
c00072e7:	52                   	push   edx
c00072e8:	50                   	push   eax
c00072e9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072ed:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00072f1:	50                   	push   eax
c00072f2:	e8 fb a8 ff ff       	call   c0001bf2 <disk_write>
c00072f7:	83 c4 20             	add    esp,0x20
c00072fa:	85 c0                	test   eax,eax
c00072fc:	75 cb                	jne    c00072c9 <f_forward+0x170>
c00072fe:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007302:	83 ec 0c             	sub    esp,0xc
c0007305:	6a 01                	push   0x1
c0007307:	57                   	push   edi
c0007308:	56                   	push   esi
c0007309:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000730d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007311:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007315:	50                   	push   eax
c0007316:	e8 c1 a8 ff ff       	call   c0001bdc <disk_read>
c000731b:	83 c4 20             	add    esp,0x20
c000731e:	85 c0                	test   eax,eax
c0007320:	0f 84 1c ff ff ff    	je     c0007242 <f_forward+0xe9>
c0007326:	eb a1                	jmp    c00072c9 <f_forward+0x170>
c0007328:	bd 07 00 00 00       	mov    ebp,0x7
c000732d:	83 c4 2c             	add    esp,0x2c
c0007330:	89 e8                	mov    eax,ebp
c0007332:	5b                   	pop    ebx
c0007333:	5e                   	pop    esi
c0007334:	5f                   	pop    edi
c0007335:	5d                   	pop    ebp
c0007336:	c3                   	ret    

c0007337 <f_mkfs>:
c0007337:	55                   	push   ebp
c0007338:	57                   	push   edi
c0007339:	56                   	push   esi
c000733a:	53                   	push   ebx
c000733b:	bb 0b 00 00 00       	mov    ebx,0xb
c0007340:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007346:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c000734d:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007354:	e8 b0 ae ff ff       	call   c0002209 <get_ldnumber>
c0007359:	85 c0                	test   eax,eax
c000735b:	0f 88 ec 10 00 00    	js     c000844d <f_mkfs+0x1116>
c0007361:	8b 14 85 e0 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1220]
c0007368:	85 d2                	test   edx,edx
c000736a:	74 03                	je     c000736f <f_mkfs+0x38>
c000736c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000736f:	85 f6                	test   esi,esi
c0007371:	75 05                	jne    c0007378 <f_mkfs+0x41>
c0007373:	be 60 9c 02 c0       	mov    esi,0xc0029c60
c0007378:	83 ec 0c             	sub    esp,0xc
c000737b:	0f b6 c0             	movzx  eax,al
c000737e:	bb 03 00 00 00       	mov    ebx,0x3
c0007383:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007387:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000738b:	e8 49 a8 ff ff       	call   c0001bd9 <disk_initialize>
c0007390:	83 c4 10             	add    esp,0x10
c0007393:	a8 01                	test   al,0x1
c0007395:	0f 85 b2 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c000739b:	bb 0a 00 00 00       	mov    ebx,0xa
c00073a0:	a8 04                	test   al,0x4
c00073a2:	0f 85 a5 10 00 00    	jne    c000844d <f_mkfs+0x1116>
c00073a8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073ab:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073af:	85 c0                	test   eax,eax
c00073b1:	75 20                	jne    c00073d3 <f_mkfs+0x9c>
c00073b3:	51                   	push   ecx
c00073b4:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073b8:	50                   	push   eax
c00073b9:	6a 03                	push   0x3
c00073bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073bf:	e8 44 a8 ff ff       	call   c0001c08 <disk_ioctl>
c00073c4:	83 c4 10             	add    esp,0x10
c00073c7:	85 c0                	test   eax,eax
c00073c9:	74 08                	je     c00073d3 <f_mkfs+0x9c>
c00073cb:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073d3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073d7:	8d 42 ff             	lea    eax,[edx-0x1]
c00073da:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073df:	77 04                	ja     c00073e5 <f_mkfs+0xae>
c00073e1:	85 c2                	test   edx,eax
c00073e3:	74 08                	je     c00073ed <f_mkfs+0xb6>
c00073e5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ed:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00073f0:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00073f4:	48                   	dec    eax
c00073f5:	3c 01                	cmp    al,0x1
c00073f7:	76 05                	jbe    c00073fe <f_mkfs+0xc7>
c00073f9:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00073fe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007401:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007405:	48                   	dec    eax
c0007406:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000740b:	77 07                	ja     c0007414 <f_mkfs+0xdd>
c000740d:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007412:	74 08                	je     c000741c <f_mkfs+0xe5>
c0007414:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000741c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000741f:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007425:	77 07                	ja     c000742e <f_mkfs+0xf7>
c0007427:	8d 43 ff             	lea    eax,[ebx-0x1]
c000742a:	85 d8                	test   eax,ebx
c000742c:	74 02                	je     c0007430 <f_mkfs+0xf9>
c000742e:	31 db                	xor    ebx,ebx
c0007430:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000743b:	77 0a                	ja     c0007447 <f_mkfs+0x110>
c000743d:	bb 11 00 00 00       	mov    ebx,0x11
c0007442:	e9 06 10 00 00       	jmp    c000844d <f_mkfs+0x1116>
c0007447:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000744e:	8b 36                	mov    esi,DWORD PTR [esi]
c0007450:	85 ed                	test   ebp,ebp
c0007452:	75 1e                	jne    c0007472 <f_mkfs+0x13b>
c0007454:	83 ec 0c             	sub    esp,0xc
c0007457:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000745e:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007463:	50                   	push   eax
c0007464:	e8 f1 0f 00 00       	call   c000845a <ff_memalloc>
c0007469:	83 c4 10             	add    esp,0x10
c000746c:	89 c5                	mov    ebp,eax
c000746e:	85 c0                	test   eax,eax
c0007470:	74 cb                	je     c000743d <f_mkfs+0x106>
c0007472:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000747a:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007482:	52                   	push   edx
c0007483:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007487:	50                   	push   eax
c0007488:	6a 01                	push   0x1
c000748a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748e:	e8 75 a7 ff ff       	call   c0001c08 <disk_ioctl>
c0007493:	83 c4 10             	add    esp,0x10
c0007496:	85 c0                	test   eax,eax
c0007498:	0f 85 4a 0f 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000749e:	89 f1                	mov    ecx,esi
c00074a0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074a8:	83 e1 0f             	and    ecx,0xf
c00074ab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074b3:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074b7:	83 e6 08             	and    esi,0x8
c00074ba:	75 56                	jne    c0007512 <f_mkfs+0x1db>
c00074bc:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074c0:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074c4:	83 ff 00             	cmp    edi,0x0
c00074c7:	76 20                	jbe    c00074e9 <f_mkfs+0x1b2>
c00074c9:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074ce:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074d6:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074dc:	83 d7 ff             	adc    edi,0xffffffff
c00074df:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074e3:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00074e7:	eb 21                	jmp    c000750a <f_mkfs+0x1d3>
c00074e9:	ba 3f 00 00 00       	mov    edx,0x3f
c00074ee:	39 f2                	cmp    edx,esi
c00074f0:	19 f8                	sbb    eax,edi
c00074f2:	73 1e                	jae    c0007512 <f_mkfs+0x1db>
c00074f4:	83 c6 c1             	add    esi,0xffffffc1
c00074f7:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00074ff:	83 d7 ff             	adc    edi,0xffffffff
c0007502:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007506:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000750a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007512:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007516:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000751a:	89 04 24             	mov    DWORD PTR [esp],eax
c000751d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007521:	31 c0                	xor    eax,eax
c0007523:	ba 7f 00 00 00       	mov    edx,0x7f
c0007528:	89 c7                	mov    edi,eax
c000752a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000752d:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007531:	0f 83 c5 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c0007537:	89 df                	mov    edi,ebx
c0007539:	c1 ef 09             	shr    edi,0x9
c000753c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007540:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007547:	c1 ef 09             	shr    edi,0x9
c000754a:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000754f:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007553:	74 29                	je     c000757e <f_mkfs+0x247>
c0007555:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000755b:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007560:	0f 97 c2             	seta   dl
c0007563:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007566:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000756a:	0f 92 c0             	setb   al
c000756d:	08 c2                	or     dl,al
c000756f:	75 5b                	jne    c00075cc <f_mkfs+0x295>
c0007571:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007575:	83 e0 07             	and    eax,0x7
c0007578:	3c 04                	cmp    al,0x4
c000757a:	74 50                	je     c00075cc <f_mkfs+0x295>
c000757c:	eb 1b                	jmp    c0007599 <f_mkfs+0x262>
c000757e:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007583:	0f 87 73 0a 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007589:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000758f:	76 08                	jbe    c0007599 <f_mkfs+0x262>
c0007591:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007599:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000759d:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075a1:	83 e0 01             	and    eax,0x1
c00075a4:	80 e1 02             	and    cl,0x2
c00075a7:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075ab:	74 0d                	je     c00075ba <f_mkfs+0x283>
c00075ad:	84 c0                	test   al,al
c00075af:	0f 84 53 09 00 00    	je     c0007f08 <f_mkfs+0xbd1>
c00075b5:	e9 12 08 00 00       	jmp    c0007dcc <f_mkfs+0xa95>
c00075ba:	bb 13 00 00 00       	mov    ebx,0x13
c00075bf:	84 c0                	test   al,al
c00075c1:	0f 85 05 08 00 00    	jne    c0007dcc <f_mkfs+0xa95>
c00075c7:	e9 39 0e 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c00075cc:	31 c0                	xor    eax,eax
c00075ce:	ba ff 0f 00 00       	mov    edx,0xfff
c00075d3:	89 c7                	mov    edi,eax
c00075d5:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075d8:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075dc:	0f 83 1a 0a 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00075e2:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00075e8:	77 39                	ja     c0007623 <f_mkfs+0x2ec>
c00075ea:	ba ff ff 07 00       	mov    edx,0x7ffff
c00075ef:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00075f7:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075fa:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075fe:	73 08                	jae    c0007608 <f_mkfs+0x2d1>
c0007600:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007608:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c000760d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007610:	b8 00 00 00 00       	mov    eax,0x0
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2ec>
c000761b:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000762b:	83 c0 20             	add    eax,0x20
c000762e:	83 d2 00             	adc    edx,0x0
c0007631:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007635:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007639:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000763d:	31 d2                	xor    edx,edx
c000763f:	31 ff                	xor    edi,edi
c0007641:	52                   	push   edx
c0007642:	89 fb                	mov    ebx,edi
c0007644:	50                   	push   eax
c0007645:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007649:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000764d:	e8 52 fb 01 00       	call   c00271a4 <__udivdi3>
c0007652:	83 c4 10             	add    esp,0x10
c0007655:	c1 e0 02             	shl    eax,0x2
c0007658:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000765c:	05 07 02 00 00       	add    eax,0x207
c0007661:	89 f1                	mov    ecx,esi
c0007663:	c1 e8 09             	shr    eax,0x9
c0007666:	83 c1 ff             	add    ecx,0xffffffff
c0007669:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000766d:	83 d3 ff             	adc    ebx,0xffffffff
c0007670:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0007674:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007678:	31 d2                	xor    edx,edx
c000767a:	01 c8                	add    eax,ecx
c000767c:	11 da                	adc    edx,ebx
c000767e:	89 c1                	mov    ecx,eax
c0007680:	f7 de                	neg    esi
c0007682:	89 d0                	mov    eax,edx
c0007684:	83 d7 00             	adc    edi,0x0
c0007687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000768b:	f7 df                	neg    edi
c000768d:	21 f1                	and    ecx,esi
c000768f:	21 f8                	and    eax,edi
c0007691:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007695:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007699:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000769d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076a1:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076a8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076ac:	0f ac d0 01          	shrd   eax,edx,0x1
c00076b0:	89 df                	mov    edi,ebx
c00076b2:	d1 ea                	shr    edx,1
c00076b4:	39 c1                	cmp    ecx,eax
c00076b6:	19 d7                	sbb    edi,edx
c00076b8:	0f 83 3e 09 00 00    	jae    c0007ffc <f_mkfs+0xcc5>
c00076be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076c2:	31 d2                	xor    edx,edx
c00076c4:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076cc:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076d3:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076d7:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076db:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076e3:	83 f8 0f             	cmp    eax,0xf
c00076e6:	0f 86 10 09 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c00076ec:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00076f4:	0f 87 02 09 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c00076fa:	31 d2                	xor    edx,edx
c00076fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007700:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007708:	83 c0 07             	add    eax,0x7
c000770b:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007713:	c1 e8 03             	shr    eax,0x3
c0007716:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000771d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007721:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007725:	c1 e0 09             	shl    eax,0x9
c0007728:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000772c:	48                   	dec    eax
c000772d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007731:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007735:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007739:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000773d:	31 d2                	xor    edx,edx
c000773f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007743:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000774a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000774e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007753:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007757:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000775b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000775f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007763:	31 ff                	xor    edi,edi
c0007765:	31 f6                	xor    esi,esi
c0007767:	31 db                	xor    ebx,ebx
c0007769:	85 ff                	test   edi,edi
c000776b:	74 05                	je     c0007772 <f_mkfs+0x43b>
c000776d:	4f                   	dec    edi
c000776e:	74 44                	je     c00077b4 <f_mkfs+0x47d>
c0007770:	eb 4f                	jmp    c00077c1 <f_mkfs+0x48a>
c0007772:	83 ec 0c             	sub    esp,0xc
c0007775:	0f b7 c3             	movzx  eax,bx
c0007778:	50                   	push   eax
c0007779:	e8 05 0e 00 00       	call   c0008583 <ff_wtoupper>
c000777e:	83 c4 10             	add    esp,0x10
c0007781:	89 c1                	mov    ecx,eax
c0007783:	8d 53 01             	lea    edx,[ebx+0x1]
c0007786:	66 39 c3             	cmp    bx,ax
c0007789:	75 3e                	jne    c00077c9 <f_mkfs+0x492>
c000778b:	be 01 00 00 00       	mov    esi,0x1
c0007790:	89 df                	mov    edi,ebx
c0007792:	66 01 f7             	add    di,si
c0007795:	75 07                	jne    c000779e <f_mkfs+0x467>
c0007797:	83 fe 7f             	cmp    esi,0x7f
c000779a:	77 31                	ja     c00077cd <f_mkfs+0x496>
c000779c:	eb 16                	jmp    c00077b4 <f_mkfs+0x47d>
c000779e:	83 ec 0c             	sub    esp,0xc
c00077a1:	0f b7 ff             	movzx  edi,di
c00077a4:	57                   	push   edi
c00077a5:	e8 d9 0d 00 00       	call   c0008583 <ff_wtoupper>
c00077aa:	83 c4 10             	add    esp,0x10
c00077ad:	39 c7                	cmp    edi,eax
c00077af:	75 e6                	jne    c0007797 <f_mkfs+0x460>
c00077b1:	46                   	inc    esi
c00077b2:	eb dc                	jmp    c0007790 <f_mkfs+0x459>
c00077b4:	31 c0                	xor    eax,eax
c00077b6:	89 d9                	mov    ecx,ebx
c00077b8:	4e                   	dec    esi
c00077b9:	0f 95 c0             	setne  al
c00077bc:	43                   	inc    ebx
c00077bd:	89 c7                	mov    edi,eax
c00077bf:	eb 14                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c1:	89 f1                	mov    ecx,esi
c00077c3:	01 f3                	add    ebx,esi
c00077c5:	31 ff                	xor    edi,edi
c00077c7:	eb 0c                	jmp    c00077d5 <f_mkfs+0x49e>
c00077c9:	89 d3                	mov    ebx,edx
c00077cb:	eb 08                	jmp    c00077d5 <f_mkfs+0x49e>
c00077cd:	bf 02 00 00 00       	mov    edi,0x2
c00077d2:	83 c9 ff             	or     ecx,0xffffffff
c00077d5:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077d9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077dc:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077e0:	0f b6 c1             	movzx  eax,cl
c00077e3:	e8 3a a9 ff ff       	call   c0002122 <xsum32>
c00077e8:	66 c1 e9 08          	shr    cx,0x8
c00077ec:	89 c2                	mov    edx,eax
c00077ee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f1:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00077f5:	0f b7 c1             	movzx  eax,cx
c00077f8:	e8 25 a9 ff ff       	call   c0002122 <xsum32>
c00077fd:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007802:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007806:	66 85 db             	test   bx,bx
c0007809:	74 1f                	je     c000782a <f_mkfs+0x4f3>
c000780b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780e:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007815:	83 c0 02             	add    eax,0x2
c0007818:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000781e:	39 c2                	cmp    edx,eax
c0007820:	74 08                	je     c000782a <f_mkfs+0x4f3>
c0007822:	89 04 24             	mov    DWORD PTR [esp],eax
c0007825:	e9 3f ff ff ff       	jmp    c0007769 <f_mkfs+0x432>
c000782a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782d:	83 ec 0c             	sub    esp,0xc
c0007830:	05 01 02 00 00       	add    eax,0x201
c0007835:	c1 e8 09             	shr    eax,0x9
c0007838:	50                   	push   eax
c0007839:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000783d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007841:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007845:	55                   	push   ebp
c0007846:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000784a:	e8 a3 a3 ff ff       	call   c0001bf2 <disk_write>
c000784f:	83 c4 20             	add    esp,0x20
c0007852:	85 c0                	test   eax,eax
c0007854:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007857:	0f 85 8b 0b 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000785d:	89 d0                	mov    eax,edx
c000785f:	31 d2                	xor    edx,edx
c0007861:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007865:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007869:	66 85 db             	test   bx,bx
c000786c:	74 04                	je     c0007872 <f_mkfs+0x53b>
c000786e:	31 c0                	xor    eax,eax
c0007870:	eb b0                	jmp    c0007822 <f_mkfs+0x4eb>
c0007872:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007876:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000787a:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000787e:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007884:	31 d2                	xor    edx,edx
c0007886:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007891:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007895:	c1 eb 09             	shr    ebx,0x9
c0007898:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c000789f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078a3:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078ab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078af:	8d 70 01             	lea    esi,[eax+0x1]
c00078b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078ba:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078c1:	31 d2                	xor    edx,edx
c00078c3:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00078cb:	89 c1                	mov    ecx,eax
c00078cd:	89 e8                	mov    eax,ebp
c00078cf:	e8 e7 a3 ff ff       	call   c0001cbb <mem_set>
c00078d4:	31 c0                	xor    eax,eax
c00078d6:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078d9:	76 10                	jbe    c00078eb <f_mkfs+0x5b4>
c00078db:	83 fe 07             	cmp    esi,0x7
c00078de:	76 0b                	jbe    c00078eb <f_mkfs+0x5b4>
c00078e0:	40                   	inc    eax
c00078e1:	83 ee 08             	sub    esi,0x8
c00078e4:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00078e9:	eb eb                	jmp    c00078d6 <f_mkfs+0x59f>
c00078eb:	b2 01                	mov    dl,0x1
c00078ed:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00078f1:	85 f6                	test   esi,esi
c00078f3:	74 0c                	je     c0007901 <f_mkfs+0x5ca>
c00078f5:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f8:	76 07                	jbe    c0007901 <f_mkfs+0x5ca>
c00078fa:	08 11                	or     BYTE PTR [ecx],dl
c00078fc:	4e                   	dec    esi
c00078fd:	d1 e2                	shl    edx,1
c00078ff:	eb f0                	jmp    c00078f1 <f_mkfs+0x5ba>
c0007901:	89 df                	mov    edi,ebx
c0007903:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007907:	76 04                	jbe    c000790d <f_mkfs+0x5d6>
c0007909:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000790d:	83 ec 0c             	sub    esp,0xc
c0007910:	57                   	push   edi
c0007911:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007915:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007919:	55                   	push   ebp
c000791a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000791e:	e8 cf a2 ff ff       	call   c0001bf2 <disk_write>
c0007923:	83 c4 20             	add    esp,0x20
c0007926:	85 c0                	test   eax,eax
c0007928:	0f 85 ba 0a 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000792e:	31 d2                	xor    edx,edx
c0007930:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007934:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007938:	29 fb                	sub    ebx,edi
c000793a:	0f 85 7a ff ff ff    	jne    c00078ba <f_mkfs+0x583>
c0007940:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007944:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000794c:	31 f6                	xor    esi,esi
c000794e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007952:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007955:	31 d2                	xor    edx,edx
c0007957:	89 e8                	mov    eax,ebp
c0007959:	e8 5d a3 ff ff       	call   c0001cbb <mem_set>
c000795e:	31 c9                	xor    ecx,ecx
c0007960:	85 db                	test   ebx,ebx
c0007962:	75 40                	jne    c00079a4 <f_mkfs+0x66d>
c0007964:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007969:	89 e8                	mov    eax,ebp
c000796b:	bb 02 00 00 00       	mov    ebx,0x2
c0007970:	e8 28 a3 ff ff       	call   c0001c9d <st_dword>
c0007975:	8d 45 04             	lea    eax,[ebp+0x4]
c0007978:	83 ca ff             	or     edx,0xffffffff
c000797b:	e8 1d a3 ff ff       	call   c0001c9d <st_dword>
c0007980:	b9 08 00 00 00       	mov    ecx,0x8
c0007985:	eb 1d                	jmp    c00079a4 <f_mkfs+0x66d>
c0007987:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000798a:	76 3b                	jbe    c00079c7 <f_mkfs+0x690>
c000798c:	43                   	inc    ebx
c000798d:	83 fe 01             	cmp    esi,0x1
c0007990:	89 da                	mov    edx,ebx
c0007992:	77 03                	ja     c0007997 <f_mkfs+0x660>
c0007994:	83 ca ff             	or     edx,0xffffffff
c0007997:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000799b:	4e                   	dec    esi
c000799c:	e8 fc a2 ff ff       	call   c0001c9d <st_dword>
c00079a1:	83 c1 04             	add    ecx,0x4
c00079a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079a8:	85 f6                	test   esi,esi
c00079aa:	75 db                	jne    c0007987 <f_mkfs+0x650>
c00079ac:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079b1:	77 14                	ja     c00079c7 <f_mkfs+0x690>
c00079b3:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079b7:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079be:	85 f6                	test   esi,esi
c00079c0:	74 05                	je     c00079c7 <f_mkfs+0x690>
c00079c2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c5:	77 dd                	ja     c00079a4 <f_mkfs+0x66d>
c00079c7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079cb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079cf:	39 cf                	cmp    edi,ecx
c00079d1:	76 02                	jbe    c00079d5 <f_mkfs+0x69e>
c00079d3:	89 cf                	mov    edi,ecx
c00079d5:	83 ec 0c             	sub    esp,0xc
c00079d8:	57                   	push   edi
c00079d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079e1:	55                   	push   ebp
c00079e2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e6:	e8 07 a2 ff ff       	call   c0001bf2 <disk_write>
c00079eb:	83 c4 20             	add    esp,0x20
c00079ee:	85 c0                	test   eax,eax
c00079f0:	0f 85 f2 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00079f6:	31 d2                	xor    edx,edx
c00079f8:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00079fc:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a00:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a04:	0f 85 48 ff ff ff    	jne    c0007952 <f_mkfs+0x61b>
c0007a0a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a0d:	31 d2                	xor    edx,edx
c0007a0f:	89 e8                	mov    eax,ebp
c0007a11:	31 ff                	xor    edi,edi
c0007a13:	e8 a3 a2 ff ff       	call   c0001cbb <mem_set>
c0007a18:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a1b:	ba 02 00 00 00       	mov    edx,0x2
c0007a20:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a24:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a28:	e8 70 a2 ff ff       	call   c0001c9d <st_dword>
c0007a2d:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a30:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a34:	e8 64 a2 ff ff       	call   c0001c9d <st_dword>
c0007a39:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a3c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a40:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a44:	e8 54 a2 ff ff       	call   c0001c9d <st_dword>
c0007a49:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a4c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a54:	83 c2 02             	add    edx,0x2
c0007a57:	e8 41 a2 ff ff       	call   c0001c9d <st_dword>
c0007a5c:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a5f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a63:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a67:	e8 31 a2 ff ff       	call   c0001c9d <st_dword>
c0007a6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a70:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a75:	89 c6                	mov    esi,eax
c0007a77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a7b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a7f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a82:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007a86:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007a89:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a8d:	39 cb                	cmp    ebx,ecx
c0007a8f:	76 02                	jbe    c0007a93 <f_mkfs+0x75c>
c0007a91:	89 cb                	mov    ebx,ecx
c0007a93:	83 ec 0c             	sub    esp,0xc
c0007a96:	53                   	push   ebx
c0007a97:	57                   	push   edi
c0007a98:	56                   	push   esi
c0007a99:	55                   	push   ebp
c0007a9a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a9e:	e8 4f a1 ff ff       	call   c0001bf2 <disk_write>
c0007aa3:	83 c4 20             	add    esp,0x20
c0007aa6:	85 c0                	test   eax,eax
c0007aa8:	0f 85 3a 09 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007aae:	31 d2                	xor    edx,edx
c0007ab0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ab5:	89 e8                	mov    eax,ebp
c0007ab7:	e8 ff a1 ff ff       	call   c0001cbb <mem_set>
c0007abc:	31 d2                	xor    edx,edx
c0007abe:	01 de                	add    esi,ebx
c0007ac0:	11 d7                	adc    edi,edx
c0007ac2:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ac5:	75 bf                	jne    c0007a86 <f_mkfs+0x74f>
c0007ac7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007acb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007acf:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007ad7:	b9 00 02 00 00       	mov    ecx,0x200
c0007adc:	31 d2                	xor    edx,edx
c0007ade:	89 e8                	mov    eax,ebp
c0007ae0:	e8 d6 a1 ff ff       	call   c0001cbb <mem_set>
c0007ae5:	b9 0b 00 00 00       	mov    ecx,0xb
c0007aea:	ba 40 9d 02 c0       	mov    edx,0xc0029d40
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 b0 a1 ff ff       	call   c0001ca6 <mem_cpy>
c0007af6:	8d 45 40             	lea    eax,[ebp+0x40]
c0007af9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007afd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b01:	e8 9a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b06:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b0a:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b0d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b11:	e8 8a a1 ff ff       	call   c0001ca0 <st_qword>
c0007b16:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b19:	ba 20 00 00 00       	mov    edx,0x20
c0007b1e:	e8 7a a1 ff ff       	call   c0001c9d <st_dword>
c0007b23:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b27:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b2b:	e8 6d a1 ff ff       	call   c0001c9d <st_dword>
c0007b30:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b34:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b38:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b3c:	e8 5c a1 ff ff       	call   c0001c9d <st_dword>
c0007b41:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b44:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b48:	e8 50 a1 ff ff       	call   c0001c9d <st_dword>
c0007b4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b51:	8d 50 02             	lea    edx,[eax+0x2]
c0007b54:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b57:	e8 41 a1 ff ff       	call   c0001c9d <st_dword>
c0007b5c:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b5f:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b64:	e8 34 a1 ff ff       	call   c0001c9d <st_dword>
c0007b69:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b6c:	ba 00 01 00 00       	mov    edx,0x100
c0007b71:	e8 23 a1 ff ff       	call   c0001c99 <st_word>
c0007b76:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b7a:	b8 0a 00 00 00       	mov    eax,0xa
c0007b7f:	48                   	dec    eax
c0007b80:	74 05                	je     c0007b87 <f_mkfs+0x850>
c0007b82:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007b85:	eb f8                	jmp    c0007b7f <f_mkfs+0x848>
c0007b87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007b8b:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007b8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b93:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007b97:	74 05                	je     c0007b9e <f_mkfs+0x867>
c0007b99:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007b9c:	eb f5                	jmp    c0007b93 <f_mkfs+0x85c>
c0007b9e:	8d 45 78             	lea    eax,[ebp+0x78]
c0007ba1:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007ba6:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bac:	31 db                	xor    ebx,ebx
c0007bae:	e8 e6 a0 ff ff       	call   c0001c99 <st_word>
c0007bb3:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bbe:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bc1:	e8 d3 a0 ff ff       	call   c0001c99 <st_word>
c0007bc6:	31 c9                	xor    ecx,ecx
c0007bc8:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007bcb:	83 f8 01             	cmp    eax,0x1
c0007bce:	76 13                	jbe    c0007be3 <f_mkfs+0x8ac>
c0007bd0:	83 f9 70             	cmp    ecx,0x70
c0007bd3:	74 0e                	je     c0007be3 <f_mkfs+0x8ac>
c0007bd5:	89 da                	mov    edx,ebx
c0007bd7:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bdc:	e8 41 a5 ff ff       	call   c0002122 <xsum32>
c0007be1:	89 c3                	mov    ebx,eax
c0007be3:	41                   	inc    ecx
c0007be4:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007bea:	75 dc                	jne    c0007bc8 <f_mkfs+0x891>
c0007bec:	89 f0                	mov    eax,esi
c0007bee:	89 fa                	mov    edx,edi
c0007bf0:	83 c0 01             	add    eax,0x1
c0007bf3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007bf7:	83 d2 00             	adc    edx,0x0
c0007bfa:	83 ec 0c             	sub    esp,0xc
c0007bfd:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c01:	6a 01                	push   0x1
c0007c03:	57                   	push   edi
c0007c04:	56                   	push   esi
c0007c05:	55                   	push   ebp
c0007c06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c0a:	e8 e3 9f ff ff       	call   c0001bf2 <disk_write>
c0007c0f:	83 c4 20             	add    esp,0x20
c0007c12:	85 c0                	test   eax,eax
c0007c14:	0f 85 ce 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	b9 00 02 00 00       	mov    ecx,0x200
c0007c21:	89 e8                	mov    eax,ebp
c0007c23:	e8 93 a0 ff ff       	call   c0001cbb <mem_set>
c0007c28:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c2d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c30:	e8 64 a0 ff ff       	call   c0001c99 <st_word>
c0007c35:	89 f0                	mov    eax,esi
c0007c37:	89 fa                	mov    edx,edi
c0007c39:	83 c0 09             	add    eax,0x9
c0007c3c:	83 d2 00             	adc    edx,0x0
c0007c3f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c42:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c46:	31 c9                	xor    ecx,ecx
c0007c48:	41                   	inc    ecx
c0007c49:	89 da                	mov    edx,ebx
c0007c4b:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c50:	e8 cd a4 ff ff       	call   c0002122 <xsum32>
c0007c55:	89 c3                	mov    ebx,eax
c0007c57:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c5d:	75 e9                	jne    c0007c48 <f_mkfs+0x911>
c0007c5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c63:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c67:	83 c0 01             	add    eax,0x1
c0007c6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c6e:	83 d2 00             	adc    edx,0x0
c0007c71:	83 ec 0c             	sub    esp,0xc
c0007c74:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c78:	6a 01                	push   0x1
c0007c7a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c7e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c82:	55                   	push   ebp
c0007c83:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c87:	e8 66 9f ff ff       	call   c0001bf2 <disk_write>
c0007c8c:	83 c4 20             	add    esp,0x20
c0007c8f:	85 c0                	test   eax,eax
c0007c91:	0f 85 51 07 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007c97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c9b:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007c9f:	75 09                	jne    c0007caa <f_mkfs+0x973>
c0007ca1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007ca4:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ca8:	74 12                	je     c0007cbc <f_mkfs+0x985>
c0007caa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cb2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cb6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cba:	eb 8a                	jmp    c0007c46 <f_mkfs+0x90f>
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	b9 00 02 00 00       	mov    ecx,0x200
c0007cc3:	89 e8                	mov    eax,ebp
c0007cc5:	e8 f1 9f ff ff       	call   c0001cbb <mem_set>
c0007cca:	83 c6 0b             	add    esi,0xb
c0007ccd:	83 d7 00             	adc    edi,0x0
c0007cd0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cd4:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cd8:	31 c9                	xor    ecx,ecx
c0007cda:	41                   	inc    ecx
c0007cdb:	89 da                	mov    edx,ebx
c0007cdd:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007ce2:	e8 3b a4 ff ff       	call   c0002122 <xsum32>
c0007ce7:	89 c3                	mov    ebx,eax
c0007ce9:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007cef:	75 e9                	jne    c0007cda <f_mkfs+0x9a3>
c0007cf1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007cf4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007cf8:	83 c6 01             	add    esi,0x1
c0007cfb:	83 d7 00             	adc    edi,0x0
c0007cfe:	83 ec 0c             	sub    esp,0xc
c0007d01:	6a 01                	push   0x1
c0007d03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d0b:	55                   	push   ebp
c0007d0c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d10:	e8 dd 9e ff ff       	call   c0001bf2 <disk_write>
c0007d15:	83 c4 20             	add    esp,0x20
c0007d18:	85 c0                	test   eax,eax
c0007d1a:	0f 85 c8 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d20:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d24:	75 06                	jne    c0007d2c <f_mkfs+0x9f5>
c0007d26:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d2a:	74 09                	je     c0007d35 <f_mkfs+0x9fe>
c0007d2c:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d2f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d33:	eb a3                	jmp    c0007cd8 <f_mkfs+0x9a1>
c0007d35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d39:	89 da                	mov    edx,ebx
c0007d3b:	01 e8                	add    eax,ebp
c0007d3d:	e8 5b 9f ff ff       	call   c0001c9d <st_dword>
c0007d42:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d47:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d4f:	75 e4                	jne    c0007d35 <f_mkfs+0x9fe>
c0007d51:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d54:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d58:	83 c6 02             	add    esi,0x2
c0007d5b:	83 d7 00             	adc    edi,0x0
c0007d5e:	83 ec 0c             	sub    esp,0xc
c0007d61:	6a 01                	push   0x1
c0007d63:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d6b:	55                   	push   ebp
c0007d6c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d70:	e8 7d 9e ff ff       	call   c0001bf2 <disk_write>
c0007d75:	83 c4 20             	add    esp,0x20
c0007d78:	85 c0                	test   eax,eax
c0007d7a:	0f 85 68 06 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0007d80:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007d85:	74 0d                	je     c0007d94 <f_mkfs+0xa5d>
c0007d87:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007d8f:	e9 43 fd ff ff       	jmp    c0007ad7 <f_mkfs+0x7a0>
c0007d94:	b1 07                	mov    cl,0x7
c0007d96:	e9 e3 05 00 00       	jmp    c000837e <f_mkfs+0x1047>
c0007d9b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007da0:	0f 85 4f 02 00 00    	jne    c0007ff5 <f_mkfs+0xcbe>
c0007da6:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dab:	0f 86 22 02 00 00    	jbe    c0007fd3 <f_mkfs+0xc9c>
c0007db1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db6:	0f 85 81 06 00 00    	jne    c000843d <f_mkfs+0x1106>
c0007dbc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc3:	83 f8 40             	cmp    eax,0x40
c0007dc6:	0f 87 51 06 00 00    	ja     c000841d <f_mkfs+0x10e6>
c0007dcc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007dd0:	85 ff                	test   edi,edi
c0007dd2:	75 1c                	jne    c0007df0 <f_mkfs+0xab9>
c0007dd4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007dd7:	ba 40 9c 02 c0       	mov    edx,0xc0029c40
c0007ddc:	c1 e9 0c             	shr    ecx,0xc
c0007ddf:	bf 01 00 00 00       	mov    edi,0x1
c0007de4:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007de7:	66 85 c0             	test   ax,ax
c0007dea:	0f 85 95 01 00 00    	jne    c0007f85 <f_mkfs+0xc4e>
c0007df0:	31 d2                	xor    edx,edx
c0007df2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007df5:	f7 f7                	div    edi
c0007df7:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dfc:	0f 86 95 01 00 00    	jbe    c0007f97 <f_mkfs+0xc60>
c0007e02:	83 c0 02             	add    eax,0x2
c0007e05:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e0a:	01 c0                	add    eax,eax
c0007e0c:	05 ff 01 00 00       	add    eax,0x1ff
c0007e11:	be 01 00 00 00       	mov    esi,0x1
c0007e16:	c1 e8 09             	shr    eax,0x9
c0007e19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e1d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e21:	c1 e0 05             	shl    eax,0x5
c0007e24:	c1 e8 09             	shr    eax,0x9
c0007e27:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e2b:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e30:	31 d2                	xor    edx,edx
c0007e32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e36:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e3a:	89 f0                	mov    eax,esi
c0007e3c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e40:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e4c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e50:	31 d2                	xor    edx,edx
c0007e52:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e57:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e5b:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e5f:	31 db                	xor    ebx,ebx
c0007e61:	01 c8                	add    eax,ecx
c0007e63:	11 da                	adc    edx,ebx
c0007e65:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e69:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e6d:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e71:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e75:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e79:	f7 da                	neg    edx
c0007e7b:	21 d1                	and    ecx,edx
c0007e7d:	29 d9                	sub    ecx,ebx
c0007e7f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e84:	0f 85 20 01 00 00    	jne    c0007faa <f_mkfs+0xc73>
c0007e8a:	31 db                	xor    ebx,ebx
c0007e8c:	01 ce                	add    esi,ecx
c0007e8e:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007e92:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007e96:	31 d2                	xor    edx,edx
c0007e98:	89 f8                	mov    eax,edi
c0007e9a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007e9e:	c1 e0 04             	shl    eax,0x4
c0007ea1:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ea5:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ea9:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ead:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eb1:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eb4:	19 d3                	sbb    ebx,edx
c0007eb6:	0f 82 40 01 00 00    	jb     c0007ffc <f_mkfs+0xcc5>
c0007ebc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ebf:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec3:	89 c8                	mov    eax,ecx
c0007ec5:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007eca:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ece:	29 f0                	sub    eax,esi
c0007ed0:	29 d0                	sub    eax,edx
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	f7 f7                	div    edi
c0007ed6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007edb:	89 c3                	mov    ebx,eax
c0007edd:	0f 85 b8 fe ff ff    	jne    c0007d9b <f_mkfs+0xa64>
c0007ee3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007ee8:	0f 87 1d 01 00 00    	ja     c000800b <f_mkfs+0xcd4>
c0007eee:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ef3:	0f 85 03 01 00 00    	jne    c0007ffc <f_mkfs+0xcc5>
c0007ef9:	83 ff 01             	cmp    edi,0x1
c0007efc:	0f 86 fa 00 00 00    	jbe    c0007ffc <f_mkfs+0xcc5>
c0007f02:	d1 ef                	shr    edi,1
c0007f04:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f08:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f0c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f0f:	85 db                	test   ebx,ebx
c0007f11:	75 2d                	jne    c0007f40 <f_mkfs+0xc09>
c0007f13:	89 cb                	mov    ebx,ecx
c0007f15:	ba 50 9c 02 c0       	mov    edx,0xc0029c50
c0007f1a:	c1 eb 11             	shr    ebx,0x11
c0007f1d:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f25:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f28:	66 85 c0             	test   ax,ax
c0007f2b:	74 11                	je     c0007f3e <f_mkfs+0xc07>
c0007f2d:	83 c2 02             	add    edx,0x2
c0007f30:	39 d8                	cmp    eax,ebx
c0007f32:	77 0a                	ja     c0007f3e <f_mkfs+0xc07>
c0007f34:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f38:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f3c:	eb e7                	jmp    c0007f25 <f_mkfs+0xbee>
c0007f3e:	31 db                	xor    ebx,ebx
c0007f40:	31 d2                	xor    edx,edx
c0007f42:	89 c8                	mov    eax,ecx
c0007f44:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f48:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f4f:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f54:	c1 ea 09             	shr    edx,0x9
c0007f57:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f5c:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f60:	0f 87 96 00 00 00    	ja     c0007ffc <f_mkfs+0xcc5>
c0007f66:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f6a:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f72:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f76:	be 20 00 00 00       	mov    esi,0x20
c0007f7b:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f80:	e9 a6 fe ff ff       	jmp    c0007e2b <f_mkfs+0xaf4>
c0007f85:	83 c2 02             	add    edx,0x2
c0007f88:	39 c8                	cmp    eax,ecx
c0007f8a:	0f 87 60 fe ff ff    	ja     c0007df0 <f_mkfs+0xab9>
c0007f90:	01 ff                	add    edi,edi
c0007f92:	e9 4d fe ff ff       	jmp    c0007de4 <f_mkfs+0xaad>
c0007f97:	8d 04 40             	lea    eax,[eax+eax*2]
c0007f9a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007f9f:	40                   	inc    eax
c0007fa0:	d1 e8                	shr    eax,1
c0007fa2:	83 c0 03             	add    eax,0x3
c0007fa5:	e9 62 fe ff ff       	jmp    c0007e0c <f_mkfs+0xad5>
c0007faa:	31 d2                	xor    edx,edx
c0007fac:	89 c8                	mov    eax,ecx
c0007fae:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fb2:	85 d2                	test   edx,edx
c0007fb4:	74 0c                	je     c0007fc2 <f_mkfs+0xc8b>
c0007fb6:	49                   	dec    ecx
c0007fb7:	46                   	inc    esi
c0007fb8:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fbd:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fc2:	89 c8                	mov    eax,ecx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fca:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fce:	e9 c3 fe ff ff       	jmp    c0007e96 <f_mkfs+0xb5f>
c0007fd3:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007fd8:	77 31                	ja     c000800b <f_mkfs+0xcd4>
c0007fda:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007fdf:	75 1b                	jne    c0007ffc <f_mkfs+0xcc5>
c0007fe1:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fe8:	3d 80 00 00 00       	cmp    eax,0x80
c0007fed:	0f 86 d9 fd ff ff    	jbe    c0007dcc <f_mkfs+0xa95>
c0007ff3:	eb 07                	jmp    c0007ffc <f_mkfs+0xcc5>
c0007ff5:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ffa:	76 0a                	jbe    c0008006 <f_mkfs+0xccf>
c0007ffc:	bb 0e 00 00 00       	mov    ebx,0xe
c0008001:	e9 ff 03 00 00       	jmp    c0008405 <f_mkfs+0x10ce>
c0008006:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000800b:	31 d2                	xor    edx,edx
c000800d:	b9 00 02 00 00       	mov    ecx,0x200
c0008012:	89 e8                	mov    eax,ebp
c0008014:	e8 a2 9c ff ff       	call   c0001cbb <mem_set>
c0008019:	b9 0b 00 00 00       	mov    ecx,0xb
c000801e:	ba 62 9d 02 c0       	mov    edx,0xc0029d62
c0008023:	89 e8                	mov    eax,ebp
c0008025:	e8 7c 9c ff ff       	call   c0001ca6 <mem_cpy>
c000802a:	8d 45 0b             	lea    eax,[ebp+0xb]
c000802d:	ba 00 02 00 00       	mov    edx,0x200
c0008032:	e8 62 9c ff ff       	call   c0001c99 <st_word>
c0008037:	89 f8                	mov    eax,edi
c0008039:	0f b7 d6             	movzx  edx,si
c000803c:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000803f:	8d 45 0e             	lea    eax,[ebp+0xe]
c0008042:	e8 52 9c ff ff       	call   c0001c99 <st_word>
c0008047:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c000804b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008050:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0008053:	75 08                	jne    c000805d <f_mkfs+0xd26>
c0008055:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000805d:	8d 45 11             	lea    eax,[ebp+0x11]
c0008060:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008064:	e8 30 9c ff ff       	call   c0001c99 <st_word>
c0008069:	b8 ff ff 00 00       	mov    eax,0xffff
c000806e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0008072:	39 d0                	cmp    eax,edx
c0008074:	b8 00 00 00 00       	mov    eax,0x0
c0008079:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c000807d:	72 0a                	jb     c0008089 <f_mkfs+0xd52>
c000807f:	8d 45 13             	lea    eax,[ebp+0x13]
c0008082:	e8 12 9c ff ff       	call   c0001c99 <st_word>
c0008087:	eb 08                	jmp    c0008091 <f_mkfs+0xd5a>
c0008089:	8d 45 20             	lea    eax,[ebp+0x20]
c000808c:	e8 0c 9c ff ff       	call   c0001c9d <st_dword>
c0008091:	8d 45 18             	lea    eax,[ebp+0x18]
c0008094:	ba 3f 00 00 00       	mov    edx,0x3f
c0008099:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c000809d:	e8 f7 9b ff ff       	call   c0001c99 <st_word>
c00080a2:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080a5:	ba ff 00 00 00       	mov    edx,0xff
c00080aa:	e8 ea 9b ff ff       	call   c0001c99 <st_word>
c00080af:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080b6:	e8 e2 9b ff ff       	call   c0001c9d <st_dword>
c00080bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c0:	75 57                	jne    c0008119 <f_mkfs+0xde2>
c00080c2:	8d 45 43             	lea    eax,[ebp+0x43]
c00080c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00080ca:	e8 ce 9b ff ff       	call   c0001c9d <st_dword>
c00080cf:	8d 45 24             	lea    eax,[ebp+0x24]
c00080d2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080d6:	e8 c2 9b ff ff       	call   c0001c9d <st_dword>
c00080db:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080de:	ba 02 00 00 00       	mov    edx,0x2
c00080e3:	e8 b5 9b ff ff       	call   c0001c9d <st_dword>
c00080e8:	8d 45 30             	lea    eax,[ebp+0x30]
c00080eb:	ba 01 00 00 00       	mov    edx,0x1
c00080f0:	e8 a4 9b ff ff       	call   c0001c99 <st_word>
c00080f5:	8d 45 32             	lea    eax,[ebp+0x32]
c00080f8:	ba 06 00 00 00       	mov    edx,0x6
c00080fd:	e8 97 9b ff ff       	call   c0001c99 <st_word>
c0008102:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008106:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000810a:	8d 45 47             	lea    eax,[ebp+0x47]
c000810d:	b9 13 00 00 00       	mov    ecx,0x13
c0008112:	ba 6e 9d 02 c0       	mov    edx,0xc0029d6e
c0008117:	eb 2f                	jmp    c0008148 <f_mkfs+0xe11>
c0008119:	8d 45 27             	lea    eax,[ebp+0x27]
c000811c:	ba 00 00 21 50       	mov    edx,0x50210000
c0008121:	e8 77 9b ff ff       	call   c0001c9d <st_dword>
c0008126:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c000812b:	8d 45 16             	lea    eax,[ebp+0x16]
c000812e:	e8 66 9b ff ff       	call   c0001c99 <st_word>
c0008133:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008137:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c000813b:	8d 45 2b             	lea    eax,[ebp+0x2b]
c000813e:	b9 13 00 00 00       	mov    ecx,0x13
c0008143:	ba 82 9d 02 c0       	mov    edx,0xc0029d82
c0008148:	e8 59 9b ff ff       	call   c0001ca6 <mem_cpy>
c000814d:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0008153:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008158:	89 f0                	mov    eax,esi
c000815a:	e8 3a 9b ff ff       	call   c0001c99 <st_word>
c000815f:	83 ec 0c             	sub    esp,0xc
c0008162:	6a 01                	push   0x1
c0008164:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008168:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000816c:	55                   	push   ebp
c000816d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008171:	e8 7c 9a ff ff       	call   c0001bf2 <disk_write>
c0008176:	83 c4 20             	add    esp,0x20
c0008179:	85 c0                	test   eax,eax
c000817b:	0f 85 67 02 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c0008181:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008186:	0f 85 b7 00 00 00    	jne    c0008243 <f_mkfs+0xf0c>
c000818c:	83 ec 0c             	sub    esp,0xc
c000818f:	6a 01                	push   0x1
c0008191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008195:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008199:	83 c0 06             	add    eax,0x6
c000819c:	83 d2 00             	adc    edx,0x0
c000819f:	52                   	push   edx
c00081a0:	50                   	push   eax
c00081a1:	55                   	push   ebp
c00081a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081a6:	e8 47 9a ff ff       	call   c0001bf2 <disk_write>
c00081ab:	83 c4 20             	add    esp,0x20
c00081ae:	b9 00 02 00 00       	mov    ecx,0x200
c00081b3:	31 d2                	xor    edx,edx
c00081b5:	89 e8                	mov    eax,ebp
c00081b7:	e8 ff 9a ff ff       	call   c0001cbb <mem_set>
c00081bc:	ba 52 52 61 41       	mov    edx,0x41615252
c00081c1:	89 e8                	mov    eax,ebp
c00081c3:	e8 d5 9a ff ff       	call   c0001c9d <st_dword>
c00081c8:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081ce:	ba 72 72 41 61       	mov    edx,0x61417272
c00081d3:	e8 c5 9a ff ff       	call   c0001c9d <st_dword>
c00081d8:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081db:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081e1:	e8 b7 9a ff ff       	call   c0001c9d <st_dword>
c00081e6:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c00081ec:	ba 02 00 00 00       	mov    edx,0x2
c00081f1:	e8 a7 9a ff ff       	call   c0001c9d <st_dword>
c00081f6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081fb:	89 f0                	mov    eax,esi
c00081fd:	e8 97 9a ff ff       	call   c0001c99 <st_word>
c0008202:	83 ec 0c             	sub    esp,0xc
c0008205:	6a 01                	push   0x1
c0008207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000820b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000820f:	83 c0 07             	add    eax,0x7
c0008212:	83 d2 00             	adc    edx,0x0
c0008215:	52                   	push   edx
c0008216:	50                   	push   eax
c0008217:	55                   	push   ebp
c0008218:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000821c:	e8 d1 99 ff ff       	call   c0001bf2 <disk_write>
c0008221:	83 c4 14             	add    esp,0x14
c0008224:	6a 01                	push   0x1
c0008226:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000822a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822e:	83 c0 01             	add    eax,0x1
c0008231:	83 d2 00             	adc    edx,0x0
c0008234:	52                   	push   edx
c0008235:	50                   	push   eax
c0008236:	55                   	push   ebp
c0008237:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000823b:	e8 b2 99 ff ff       	call   c0001bf2 <disk_write>
c0008240:	83 c4 20             	add    esp,0x20
c0008243:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c000824a:	31 d2                	xor    edx,edx
c000824c:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0008252:	31 db                	xor    ebx,ebx
c0008254:	89 e8                	mov    eax,ebp
c0008256:	e8 60 9a ff ff       	call   c0001cbb <mem_set>
c000825b:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0008260:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008267:	0f 94 c3             	sete   bl
c000826a:	4b                   	dec    ebx
c000826b:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008271:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008277:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000827c:	75 21                	jne    c000829f <f_mkfs+0xf68>
c000827e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008283:	89 e8                	mov    eax,ebp
c0008285:	e8 13 9a ff ff       	call   c0001c9d <st_dword>
c000828a:	8d 45 04             	lea    eax,[ebp+0x4]
c000828d:	83 ca ff             	or     edx,0xffffffff
c0008290:	e8 08 9a ff ff       	call   c0001c9d <st_dword>
c0008295:	8d 45 08             	lea    eax,[ebp+0x8]
c0008298:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000829d:	eb 04                	jmp    c00082a3 <f_mkfs+0xf6c>
c000829f:	89 da                	mov    edx,ebx
c00082a1:	89 e8                	mov    eax,ebp
c00082a3:	e8 f5 99 ff ff       	call   c0001c9d <st_dword>
c00082a8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082b8:	39 ce                	cmp    esi,ecx
c00082ba:	76 02                	jbe    c00082be <f_mkfs+0xf87>
c00082bc:	89 ce                	mov    esi,ecx
c00082be:	83 ec 0c             	sub    esp,0xc
c00082c1:	56                   	push   esi
c00082c2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082c6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082ca:	55                   	push   ebp
c00082cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082cf:	e8 1e 99 ff ff       	call   c0001bf2 <disk_write>
c00082d4:	83 c4 20             	add    esp,0x20
c00082d7:	85 c0                	test   eax,eax
c00082d9:	0f 85 09 01 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c00082df:	31 d2                	xor    edx,edx
c00082e1:	b9 00 02 00 00       	mov    ecx,0x200
c00082e6:	89 e8                	mov    eax,ebp
c00082e8:	e8 ce 99 ff ff       	call   c0001cbb <mem_set>
c00082ed:	31 d2                	xor    edx,edx
c00082ef:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00082f3:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00082f7:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00082fb:	75 b3                	jne    c00082b0 <f_mkfs+0xf79>
c00082fd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008300:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008307:	40                   	inc    eax
c0008308:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c000830c:	0f 87 65 ff ff ff    	ja     c0008277 <f_mkfs+0xf40>
c0008312:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008317:	74 04                	je     c000831d <f_mkfs+0xfe6>
c0008319:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000831d:	89 fb                	mov    ebx,edi
c000831f:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008323:	76 04                	jbe    c0008329 <f_mkfs+0xff2>
c0008325:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008329:	83 ec 0c             	sub    esp,0xc
c000832c:	53                   	push   ebx
c000832d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008331:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008335:	55                   	push   ebp
c0008336:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000833a:	e8 b3 98 ff ff       	call   c0001bf2 <disk_write>
c000833f:	83 c4 20             	add    esp,0x20
c0008342:	85 c0                	test   eax,eax
c0008344:	0f 85 9e 00 00 00    	jne    c00083e8 <f_mkfs+0x10b1>
c000834a:	31 d2                	xor    edx,edx
c000834c:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008350:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008354:	29 df                	sub    edi,ebx
c0008356:	75 c5                	jne    c000831d <f_mkfs+0xfe6>
c0008358:	b1 0c                	mov    cl,0xc
c000835a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000835f:	74 1d                	je     c000837e <f_mkfs+0x1047>
c0008361:	b8 ff ff 00 00       	mov    eax,0xffff
c0008366:	b1 06                	mov    cl,0x6
c0008368:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000836c:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008370:	72 0c                	jb     c000837e <f_mkfs+0x1047>
c0008372:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008377:	0f 94 c1             	sete   cl
c000837a:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000837e:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008383:	75 4c                	jne    c00083d1 <f_mkfs+0x109a>
c0008385:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008389:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000838d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008394:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000839b:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083a6:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083b1:	0f b6 c9             	movzx  ecx,cl
c00083b4:	83 ec 0c             	sub    esp,0xc
c00083b7:	55                   	push   ebp
c00083b8:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083c3:	e8 2f c2 ff ff       	call   c00045f7 <create_partition>
c00083c8:	83 c4 10             	add    esp,0x10
c00083cb:	89 c3                	mov    ebx,eax
c00083cd:	85 c0                	test   eax,eax
c00083cf:	75 34                	jne    c0008405 <f_mkfs+0x10ce>
c00083d1:	31 db                	xor    ebx,ebx
c00083d3:	50                   	push   eax
c00083d4:	6a 00                	push   0x0
c00083d6:	6a 00                	push   0x0
c00083d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083dc:	e8 27 98 ff ff       	call   c0001c08 <disk_ioctl>
c00083e1:	83 c4 10             	add    esp,0x10
c00083e4:	85 c0                	test   eax,eax
c00083e6:	74 1d                	je     c0008405 <f_mkfs+0x10ce>
c00083e8:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00083f0:	75 0c                	jne    c00083fe <f_mkfs+0x10c7>
c00083f2:	83 ec 0c             	sub    esp,0xc
c00083f5:	55                   	push   ebp
c00083f6:	e8 75 00 00 00       	call   c0008470 <ff_memfree>
c00083fb:	83 c4 10             	add    esp,0x10
c00083fe:	bb 01 00 00 00       	mov    ebx,0x1
c0008403:	eb 48                	jmp    c000844d <f_mkfs+0x1116>
c0008405:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840d:	75 3e                	jne    c000844d <f_mkfs+0x1116>
c000840f:	83 ec 0c             	sub    esp,0xc
c0008412:	55                   	push   ebp
c0008413:	e8 58 00 00 00       	call   c0008470 <ff_memfree>
c0008418:	83 c4 10             	add    esp,0x10
c000841b:	eb 30                	jmp    c000844d <f_mkfs+0x1116>
c000841d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008422:	0f 85 eb fa ff ff    	jne    c0007f13 <f_mkfs+0xbdc>
c0008428:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000842c:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008432:	0f 86 b8 f9 ff ff    	jbe    c0007df0 <f_mkfs+0xab9>
c0008438:	e9 bf fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000843d:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008442:	0f 85 c0 fa ff ff    	jne    c0007f08 <f_mkfs+0xbd1>
c0008448:	e9 af fb ff ff       	jmp    c0007ffc <f_mkfs+0xcc5>
c000844d:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008453:	89 d8                	mov    eax,ebx
c0008455:	5b                   	pop    ebx
c0008456:	5e                   	pop    esi
c0008457:	5f                   	pop    edi
c0008458:	5d                   	pop    ebp
c0008459:	c3                   	ret    

c000845a <ff_memalloc>:
c000845a:	83 ec 0c             	sub    esp,0xc
c000845d:	83 ec 0c             	sub    esp,0xc
c0008460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008464:	e8 23 74 00 00       	call   c000f88c <malloc>
c0008469:	83 c4 10             	add    esp,0x10
c000846c:	83 c4 0c             	add    esp,0xc
c000846f:	c3                   	ret    

c0008470 <ff_memfree>:
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	83 ec 0c             	sub    esp,0xc
c0008476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847a:	e8 1d 74 00 00       	call   c000f89c <free>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	90                   	nop
c0008483:	83 c4 0c             	add    esp,0xc
c0008486:	c3                   	ret    

c0008487 <ff_uni2oem>:
c0008487:	83 ec 14             	sub    esp,0x14
c000848a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000848e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008492:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008499:	c7 44 24 0c a0 a0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a0a0
c00084a1:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084a6:	77 0b                	ja     c00084b3 <ff_uni2oem+0x2c>
c00084a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084b1:	eb 5b                	jmp    c000850e <ff_uni2oem+0x87>
c00084b3:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084bb:	77 51                	ja     c000850e <ff_uni2oem+0x87>
c00084bd:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084c3:	75 49                	jne    c000850e <ff_uni2oem+0x87>
c00084c5:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084cc:	eb 0b                	jmp    c00084d9 <ff_uni2oem+0x52>
c00084ce:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084d3:	40                   	inc    eax
c00084d4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084d9:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084df:	77 1b                	ja     c00084fc <ff_uni2oem+0x75>
c00084e1:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00084e6:	01 c0                	add    eax,eax
c00084e8:	89 c2                	mov    edx,eax
c00084ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00084ee:	01 d0                	add    eax,edx
c00084f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00084f3:	0f b7 c0             	movzx  eax,ax
c00084f6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00084fa:	75 d2                	jne    c00084ce <ff_uni2oem+0x47>
c00084fc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008501:	83 e8 80             	sub    eax,0xffffff80
c0008504:	25 ff 00 00 00       	and    eax,0xff
c0008509:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000850e:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008513:	83 c4 14             	add    esp,0x14
c0008516:	c3                   	ret    

c0008517 <ff_oem2uni>:
c0008517:	83 ec 18             	sub    esp,0x18
c000851a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000851e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008522:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008527:	66 89 04 24          	mov    WORD PTR [esp],ax
c000852b:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008532:	c7 44 24 10 a0 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0a0
c000853a:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008540:	77 0b                	ja     c000854d <ff_oem2uni+0x36>
c0008542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008546:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000854b:	eb 2d                	jmp    c000857a <ff_oem2uni+0x63>
c000854d:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008553:	75 25                	jne    c000857a <ff_oem2uni+0x63>
c0008555:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000855c:	77 1c                	ja     c000857a <ff_oem2uni+0x63>
c000855e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008563:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008568:	01 c0                	add    eax,eax
c000856a:	89 c2                	mov    edx,eax
c000856c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008570:	01 d0                	add    eax,edx
c0008572:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008575:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000857a:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000857f:	83 c4 18             	add    esp,0x18
c0008582:	c3                   	ret    

c0008583 <ff_wtoupper>:
c0008583:	83 ec 10             	sub    esp,0x10
c0008586:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000858e:	0f 87 3e 01 00 00    	ja     c00086d2 <ff_wtoupper+0x14f>
c0008594:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008598:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000859d:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085a4:	77 07                	ja     c00085ad <ff_wtoupper+0x2a>
c00085a6:	b8 a0 9e 02 c0       	mov    eax,0xc0029ea0
c00085ab:	eb 05                	jmp    c00085b2 <ff_wtoupper+0x2f>
c00085ad:	b8 e0 9d 02 c0       	mov    eax,0xc0029de0
c00085b2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085ba:	8d 50 02             	lea    edx,[eax+0x2]
c00085bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085c1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085c4:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085c9:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085cf:	0f 84 f4 00 00 00    	je     c00086c9 <ff_wtoupper+0x146>
c00085d5:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085da:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085df:	0f 82 e4 00 00 00    	jb     c00086c9 <ff_wtoupper+0x146>
c00085e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085e9:	8d 50 02             	lea    edx,[eax+0x2]
c00085ec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085f0:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f3:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00085f8:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00085fd:	66 c1 e8 08          	shr    ax,0x8
c0008601:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008606:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000860d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008612:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008617:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000861c:	01 ca                	add    edx,ecx
c000861e:	39 d0                	cmp    eax,edx
c0008620:	0f 8d 86 00 00 00    	jge    c00086ac <ff_wtoupper+0x129>
c0008626:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000862b:	83 f8 08             	cmp    eax,0x8
c000862e:	0f 87 94 00 00 00    	ja     c00086c8 <ff_wtoupper+0x145>
c0008634:	8b 04 85 a0 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6260]
c000863b:	ff e0                	jmp    eax
c000863d:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0008642:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008647:	29 c2                	sub    edx,eax
c0008649:	89 d0                	mov    eax,edx
c000864b:	01 c0                	add    eax,eax
c000864d:	89 c2                	mov    edx,eax
c000864f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008653:	01 d0                	add    eax,edx
c0008655:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008658:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000865d:	eb 4b                	jmp    c00086aa <ff_wtoupper+0x127>
c000865f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008664:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008668:	83 e0 01             	and    eax,0x1
c000866b:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0008670:	eb 38                	jmp    c00086aa <ff_wtoupper+0x127>
c0008672:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008678:	eb 30                	jmp    c00086aa <ff_wtoupper+0x127>
c000867a:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008680:	eb 28                	jmp    c00086aa <ff_wtoupper+0x127>
c0008682:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008688:	eb 20                	jmp    c00086aa <ff_wtoupper+0x127>
c000868a:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008690:	eb 18                	jmp    c00086aa <ff_wtoupper+0x127>
c0008692:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008698:	eb 10                	jmp    c00086aa <ff_wtoupper+0x127>
c000869a:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086a0:	eb 08                	jmp    c00086aa <ff_wtoupper+0x127>
c00086a2:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086a9:	90                   	nop
c00086aa:	eb 1c                	jmp    c00086c8 <ff_wtoupper+0x145>
c00086ac:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086b2:	0f 85 fe fe ff ff    	jne    c00085b6 <ff_wtoupper+0x33>
c00086b8:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086bd:	01 c0                	add    eax,eax
c00086bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086c3:	e9 ee fe ff ff       	jmp    c00085b6 <ff_wtoupper+0x33>
c00086c8:	90                   	nop
c00086c9:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086ce:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086d6:	83 c4 10             	add    esp,0x10
c00086d9:	c3                   	ret    

c00086da <psrc_set_converter>:
c00086da:	56                   	push   esi
c00086db:	89 d6                	mov    esi,edx
c00086dd:	53                   	push   ebx
c00086de:	89 c3                	mov    ebx,eax
c00086e0:	83 ec 0c             	sub    esp,0xc
c00086e3:	52                   	push   edx
c00086e4:	50                   	push   eax
c00086e5:	e8 6f 55 00 00       	call   c000dc59 <sinc_set_converter>
c00086ea:	83 c4 10             	add    esp,0x10
c00086ed:	85 c0                	test   eax,eax
c00086ef:	74 25                	je     c0008716 <psrc_set_converter+0x3c>
c00086f1:	50                   	push   eax
c00086f2:	50                   	push   eax
c00086f3:	56                   	push   esi
c00086f4:	53                   	push   ebx
c00086f5:	e8 17 5d 00 00       	call   c000e411 <zoh_set_converter>
c00086fa:	83 c4 10             	add    esp,0x10
c00086fd:	85 c0                	test   eax,eax
c00086ff:	74 15                	je     c0008716 <psrc_set_converter+0x3c>
c0008701:	51                   	push   ecx
c0008702:	51                   	push   ecx
c0008703:	56                   	push   esi
c0008704:	53                   	push   ebx
c0008705:	e8 0f 11 00 00       	call   c0009819 <linear_set_converter>
c000870a:	83 c4 10             	add    esp,0x10
c000870d:	ba 0a 00 00 00       	mov    edx,0xa
c0008712:	85 c0                	test   eax,eax
c0008714:	75 02                	jne    c0008718 <psrc_set_converter+0x3e>
c0008716:	31 d2                	xor    edx,edx
c0008718:	89 d0                	mov    eax,edx
c000871a:	5a                   	pop    edx
c000871b:	5b                   	pop    ebx
c000871c:	5e                   	pop    esi
c000871d:	c3                   	ret    

c000871e <src_delete>:
c000871e:	53                   	push   ebx
c000871f:	83 ec 08             	sub    esp,0x8
c0008722:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008726:	85 db                	test   ebx,ebx
c0008728:	74 29                	je     c0008753 <src_delete+0x35>
c000872a:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000872d:	85 c0                	test   eax,eax
c000872f:	74 0c                	je     c000873d <src_delete+0x1f>
c0008731:	83 ec 0c             	sub    esp,0xc
c0008734:	50                   	push   eax
c0008735:	e8 62 71 00 00       	call   c000f89c <free>
c000873a:	83 c4 10             	add    esp,0x10
c000873d:	50                   	push   eax
c000873e:	6a 3c                	push   0x3c
c0008740:	6a 00                	push   0x0
c0008742:	53                   	push   ebx
c0008743:	e8 08 80 ff ff       	call   c0000750 <memset>
c0008748:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000874b:	e8 4c 71 00 00       	call   c000f89c <free>
c0008750:	83 c4 10             	add    esp,0x10
c0008753:	31 c0                	xor    eax,eax
c0008755:	83 c4 08             	add    esp,0x8
c0008758:	5b                   	pop    ebx
c0008759:	c3                   	ret    

c000875a <src_process>:
c000875a:	55                   	push   ebp
c000875b:	57                   	push   edi
c000875c:	56                   	push   esi
c000875d:	53                   	push   ebx
c000875e:	83 ec 1c             	sub    esp,0x1c
c0008761:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008765:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008769:	85 ed                	test   ebp,ebp
c000876b:	0f 84 6f 01 00 00    	je     c00088e0 <src_process+0x186>
c0008771:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008775:	0f 84 6c 01 00 00    	je     c00088e7 <src_process+0x18d>
c000877b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000877f:	0f 84 62 01 00 00    	je     c00088e7 <src_process+0x18d>
c0008785:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c000878c:	0f 85 5c 01 00 00    	jne    c00088ee <src_process+0x194>
c0008792:	85 db                	test   ebx,ebx
c0008794:	0f 84 5b 01 00 00    	je     c00088f5 <src_process+0x19b>
c000879a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000879c:	85 f6                	test   esi,esi
c000879e:	0f 84 58 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087a4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087a7:	85 ff                	test   edi,edi
c00087a9:	0f 84 4d 01 00 00    	je     c00088fc <src_process+0x1a2>
c00087af:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087b2:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087b9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087bd:	68 00 00 70 3f       	push   0x3f700000
c00087c2:	6a 00                	push   0x0
c00087c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087cc:	e8 a6 04 02 00       	call   c0028c77 <__ltdf2>
c00087d1:	83 c4 10             	add    esp,0x10
c00087d4:	85 c0                	test   eax,eax
c00087d6:	0f 88 27 01 00 00    	js     c0008903 <src_process+0x1a9>
c00087dc:	68 00 00 70 40       	push   0x40700000
c00087e1:	6a 00                	push   0x0
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087eb:	e8 69 04 02 00       	call   c0028c59 <__gtdf2>
c00087f0:	83 c4 10             	add    esp,0x10
c00087f3:	85 c0                	test   eax,eax
c00087f5:	0f 8f 08 01 00 00    	jg     c0008903 <src_process+0x1a9>
c00087fb:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00087ff:	79 07                	jns    c0008808 <src_process+0xae>
c0008801:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008808:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000880b:	85 c0                	test   eax,eax
c000880d:	79 50                	jns    c000885f <src_process+0x105>
c000880f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008816:	39 fe                	cmp    esi,edi
c0008818:	72 37                	jb     c0008851 <src_process+0xf7>
c000881a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008821:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008828:	68 00 00 70 3f       	push   0x3f700000
c000882d:	6a 00                	push   0x0
c000882f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008832:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008835:	e8 3d 04 02 00       	call   c0028c77 <__ltdf2>
c000883a:	83 c4 10             	add    esp,0x10
c000883d:	85 c0                	test   eax,eax
c000883f:	79 37                	jns    c0008878 <src_process+0x11e>
c0008841:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008845:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008849:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000884c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000884f:	eb 27                	jmp    c0008878 <src_process+0x11e>
c0008851:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0008854:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008858:	8d 04 86             	lea    eax,[esi+eax*4]
c000885b:	39 c7                	cmp    edi,eax
c000885d:	eb 0d                	jmp    c000886c <src_process+0x112>
c000885f:	39 fe                	cmp    esi,edi
c0008861:	72 ee                	jb     c0008851 <src_process+0xf7>
c0008863:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008867:	8d 04 87             	lea    eax,[edi+eax*4]
c000886a:	39 c6                	cmp    esi,eax
c000886c:	73 ac                	jae    c000881a <src_process+0xc0>
c000886e:	b8 10 00 00 00       	mov    eax,0x10
c0008873:	e9 90 00 00 00       	jmp    c0008908 <src_process+0x1ae>
c0008878:	83 ec 10             	sub    esp,0x10
c000887b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000887e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008881:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0008884:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008887:	e8 f0 fa 01 00       	call   c002837c <__subdf3>
c000888c:	83 c4 18             	add    esp,0x18
c000888f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008893:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008897:	52                   	push   edx
c0008898:	50                   	push   eax
c0008899:	e8 72 05 02 00       	call   c0028e10 <fabs>
c000889e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088a6:	83 c4 10             	add    esp,0x10
c00088a9:	68 af 03 d2 3c       	push   0x3cd203af
c00088ae:	68 16 56 e7 9e       	push   0x9ee75616
c00088b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088bb:	e8 b7 03 02 00       	call   c0028c77 <__ltdf2>
c00088c0:	83 c4 10             	add    esp,0x10
c00088c3:	85 c0                	test   eax,eax
c00088c5:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088c9:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088cd:	79 05                	jns    c00088d4 <src_process+0x17a>
c00088cf:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088d2:	eb 03                	jmp    c00088d7 <src_process+0x17d>
c00088d4:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088d7:	83 c4 1c             	add    esp,0x1c
c00088da:	5b                   	pop    ebx
c00088db:	5e                   	pop    esi
c00088dc:	5f                   	pop    edi
c00088dd:	5d                   	pop    ebp
c00088de:	ff e0                	jmp    eax
c00088e0:	b8 02 00 00 00       	mov    eax,0x2
c00088e5:	eb 21                	jmp    c0008908 <src_process+0x1ae>
c00088e7:	b8 07 00 00 00       	mov    eax,0x7
c00088ec:	eb 1a                	jmp    c0008908 <src_process+0x1ae>
c00088ee:	b8 12 00 00 00       	mov    eax,0x12
c00088f3:	eb 13                	jmp    c0008908 <src_process+0x1ae>
c00088f5:	b8 03 00 00 00       	mov    eax,0x3
c00088fa:	eb 0c                	jmp    c0008908 <src_process+0x1ae>
c00088fc:	b8 04 00 00 00       	mov    eax,0x4
c0008901:	eb 05                	jmp    c0008908 <src_process+0x1ae>
c0008903:	b8 06 00 00 00       	mov    eax,0x6
c0008908:	83 c4 1c             	add    esp,0x1c
c000890b:	5b                   	pop    ebx
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	5d                   	pop    ebp
c000890f:	c3                   	ret    

c0008910 <src_callback_read>:
c0008910:	55                   	push   ebp
c0008911:	57                   	push   edi
c0008912:	56                   	push   esi
c0008913:	53                   	push   ebx
c0008914:	83 ec 3c             	sub    esp,0x3c
c0008917:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000891b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000891f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008923:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008927:	85 ed                	test   ebp,ebp
c0008929:	0f 8e 52 01 00 00    	jle    c0008a81 <src_callback_read+0x171>
c000892f:	85 db                	test   ebx,ebx
c0008931:	0f 84 4a 01 00 00    	je     c0008a81 <src_callback_read+0x171>
c0008937:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000893e:	74 0c                	je     c000894c <src_callback_read+0x3c>
c0008940:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008947:	e9 35 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000894c:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008950:	75 0c                	jne    c000895e <src_callback_read+0x4e>
c0008952:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008959:	e9 23 01 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c000895e:	51                   	push   ecx
c000895f:	6a 24                	push   0x24
c0008961:	6a 00                	push   0x0
c0008963:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008967:	50                   	push   eax
c0008968:	e8 e3 7d ff ff       	call   c0000750 <memset>
c000896d:	83 c4 10             	add    esp,0x10
c0008970:	68 00 00 70 3f       	push   0x3f700000
c0008975:	6a 00                	push   0x0
c0008977:	57                   	push   edi
c0008978:	56                   	push   esi
c0008979:	e8 f9 02 02 00       	call   c0028c77 <__ltdf2>
c000897e:	83 c4 10             	add    esp,0x10
c0008981:	85 c0                	test   eax,eax
c0008983:	78 3e                	js     c00089c3 <src_callback_read+0xb3>
c0008985:	68 00 00 70 40       	push   0x40700000
c000898a:	6a 00                	push   0x0
c000898c:	57                   	push   edi
c000898d:	56                   	push   esi
c000898e:	e8 c6 02 02 00       	call   c0028c59 <__gtdf2>
c0008993:	83 c4 10             	add    esp,0x10
c0008996:	85 c0                	test   eax,eax
c0008998:	7f 29                	jg     c00089c3 <src_callback_read+0xb3>
c000899a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000899e:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089a6:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089aa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089ad:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089b5:	31 f6                	xor    esi,esi
c00089b7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089be:	e9 97 00 00 00       	jmp    c0008a5a <src_callback_read+0x14a>
c00089c3:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089ca:	e9 b2 00 00 00       	jmp    c0008a81 <src_callback_read+0x171>
c00089cf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089d7:	52                   	push   edx
c00089d8:	52                   	push   edx
c00089d9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089dd:	50                   	push   eax
c00089de:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089e1:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00089e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00089f0:	83 c4 10             	add    esp,0x10
c00089f3:	85 c0                	test   eax,eax
c00089f5:	75 08                	jne    c00089ff <src_callback_read+0xef>
c00089f7:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00089ff:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a06:	50                   	push   eax
c0008a07:	50                   	push   eax
c0008a08:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a0c:	50                   	push   eax
c0008a0d:	53                   	push   ebx
c0008a0e:	e8 47 fd ff ff       	call   c000875a <src_process>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a1d:	85 c0                	test   eax,eax
c0008a1f:	75 49                	jne    c0008a6a <src_callback_read+0x15a>
c0008a21:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a25:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a28:	89 f9                	mov    ecx,edi
c0008a2a:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a2e:	0f af ca             	imul   ecx,edx
c0008a31:	c1 e1 02             	shl    ecx,0x2
c0008a34:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a38:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a3c:	0f af d1             	imul   edx,ecx
c0008a3f:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a43:	c1 e2 02             	shl    edx,0x2
c0008a46:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a4a:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a4d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a52:	74 12                	je     c0008a66 <src_callback_read+0x156>
c0008a54:	39 d5                	cmp    ebp,edx
c0008a56:	7e 14                	jle    c0008a6c <src_callback_read+0x15c>
c0008a58:	89 d6                	mov    esi,edx
c0008a5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a5f:	75 9e                	jne    c00089ff <src_callback_read+0xef>
c0008a61:	e9 69 ff ff ff       	jmp    c00089cf <src_callback_read+0xbf>
c0008a66:	85 c9                	test   ecx,ecx
c0008a68:	75 ea                	jne    c0008a54 <src_callback_read+0x144>
c0008a6a:	89 f2                	mov    edx,esi
c0008a6c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a70:	85 c0                	test   eax,eax
c0008a72:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a79:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a7c:	74 05                	je     c0008a83 <src_callback_read+0x173>
c0008a7e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a81:	31 d2                	xor    edx,edx
c0008a83:	83 c4 3c             	add    esp,0x3c
c0008a86:	89 d0                	mov    eax,edx
c0008a88:	5b                   	pop    ebx
c0008a89:	5e                   	pop    esi
c0008a8a:	5f                   	pop    edi
c0008a8b:	5d                   	pop    ebp
c0008a8c:	c3                   	ret    

c0008a8d <src_set_ratio>:
c0008a8d:	57                   	push   edi
c0008a8e:	ba 02 00 00 00       	mov    edx,0x2
c0008a93:	56                   	push   esi
c0008a94:	53                   	push   ebx
c0008a95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a9d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008aa1:	85 db                	test   ebx,ebx
c0008aa3:	74 4c                	je     c0008af1 <src_set_ratio+0x64>
c0008aa5:	ba 07 00 00 00       	mov    edx,0x7
c0008aaa:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008aae:	74 41                	je     c0008af1 <src_set_ratio+0x64>
c0008ab0:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008ab4:	74 3b                	je     c0008af1 <src_set_ratio+0x64>
c0008ab6:	68 00 00 70 3f       	push   0x3f700000
c0008abb:	6a 00                	push   0x0
c0008abd:	57                   	push   edi
c0008abe:	56                   	push   esi
c0008abf:	e8 b3 01 02 00       	call   c0028c77 <__ltdf2>
c0008ac4:	83 c4 10             	add    esp,0x10
c0008ac7:	ba 06 00 00 00       	mov    edx,0x6
c0008acc:	85 c0                	test   eax,eax
c0008ace:	78 21                	js     c0008af1 <src_set_ratio+0x64>
c0008ad0:	68 00 00 70 40       	push   0x40700000
c0008ad5:	6a 00                	push   0x0
c0008ad7:	57                   	push   edi
c0008ad8:	56                   	push   esi
c0008ad9:	e8 7b 01 02 00       	call   c0028c59 <__gtdf2>
c0008ade:	83 c4 10             	add    esp,0x10
c0008ae1:	ba 06 00 00 00       	mov    edx,0x6
c0008ae6:	85 c0                	test   eax,eax
c0008ae8:	7f 07                	jg     c0008af1 <src_set_ratio+0x64>
c0008aea:	89 33                	mov    DWORD PTR [ebx],esi
c0008aec:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008aef:	31 d2                	xor    edx,edx
c0008af1:	5b                   	pop    ebx
c0008af2:	89 d0                	mov    eax,edx
c0008af4:	5e                   	pop    esi
c0008af5:	5f                   	pop    edi
c0008af6:	c3                   	ret    

c0008af7 <src_get_channels>:
c0008af7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008afb:	b8 02 00 00 00       	mov    eax,0x2
c0008b00:	85 d2                	test   edx,edx
c0008b02:	74 14                	je     c0008b18 <src_get_channels+0x21>
c0008b04:	b8 07 00 00 00       	mov    eax,0x7
c0008b09:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b0d:	74 09                	je     c0008b18 <src_get_channels+0x21>
c0008b0f:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b13:	74 03                	je     c0008b18 <src_get_channels+0x21>
c0008b15:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b18:	c3                   	ret    

c0008b19 <src_reset>:
c0008b19:	53                   	push   ebx
c0008b1a:	b8 02 00 00 00       	mov    eax,0x2
c0008b1f:	83 ec 08             	sub    esp,0x8
c0008b22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b26:	85 db                	test   ebx,ebx
c0008b28:	74 36                	je     c0008b60 <src_reset+0x47>
c0008b2a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b2d:	85 c0                	test   eax,eax
c0008b2f:	74 09                	je     c0008b3a <src_reset+0x21>
c0008b31:	83 ec 0c             	sub    esp,0xc
c0008b34:	53                   	push   ebx
c0008b35:	ff d0                	call   eax
c0008b37:	83 c4 10             	add    esp,0x10
c0008b3a:	31 c0                	xor    eax,eax
c0008b3c:	31 d2                	xor    edx,edx
c0008b3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b41:	89 03                	mov    DWORD PTR [ebx],eax
c0008b43:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b46:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b49:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b50:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b5e:	31 c0                	xor    eax,eax
c0008b60:	83 c4 08             	add    esp,0x8
c0008b63:	5b                   	pop    ebx
c0008b64:	c3                   	ret    

c0008b65 <src_new>:
c0008b65:	57                   	push   edi
c0008b66:	56                   	push   esi
c0008b67:	53                   	push   ebx
c0008b68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b70:	85 f6                	test   esi,esi
c0008b72:	74 73                	je     c0008be7 <src_new+0x82>
c0008b74:	85 ff                	test   edi,edi
c0008b76:	7f 08                	jg     c0008b80 <src_new+0x1b>
c0008b78:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b7e:	eb 1e                	jmp    c0008b9e <src_new+0x39>
c0008b80:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b86:	50                   	push   eax
c0008b87:	50                   	push   eax
c0008b88:	6a 3c                	push   0x3c
c0008b8a:	6a 01                	push   0x1
c0008b8c:	e8 2b 6d 00 00       	call   c000f8bc <calloc>
c0008b91:	83 c4 10             	add    esp,0x10
c0008b94:	89 c3                	mov    ebx,eax
c0008b96:	85 c0                	test   eax,eax
c0008b98:	75 10                	jne    c0008baa <src_new+0x45>
c0008b9a:	85 f6                	test   esi,esi
c0008b9c:	75 04                	jne    c0008ba2 <src_new+0x3d>
c0008b9e:	31 db                	xor    ebx,ebx
c0008ba0:	eb 4b                	jmp    c0008bed <src_new+0x88>
c0008ba2:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008ba8:	eb 43                	jmp    c0008bed <src_new+0x88>
c0008baa:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bad:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bb8:	e8 1d fb ff ff       	call   c00086da <psrc_set_converter>
c0008bbd:	85 c0                	test   eax,eax
c0008bbf:	74 18                	je     c0008bd9 <src_new+0x74>
c0008bc1:	85 f6                	test   esi,esi
c0008bc3:	74 06                	je     c0008bcb <src_new+0x66>
c0008bc5:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bcb:	83 ec 0c             	sub    esp,0xc
c0008bce:	53                   	push   ebx
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	e8 c6 6c 00 00       	call   c000f89c <free>
c0008bd6:	83 c4 10             	add    esp,0x10
c0008bd9:	83 ec 0c             	sub    esp,0xc
c0008bdc:	53                   	push   ebx
c0008bdd:	e8 37 ff ff ff       	call   c0008b19 <src_reset>
c0008be2:	83 c4 10             	add    esp,0x10
c0008be5:	eb 06                	jmp    c0008bed <src_new+0x88>
c0008be7:	85 ff                	test   edi,edi
c0008be9:	7f 9b                	jg     c0008b86 <src_new+0x21>
c0008beb:	eb b1                	jmp    c0008b9e <src_new+0x39>
c0008bed:	89 d8                	mov    eax,ebx
c0008bef:	5b                   	pop    ebx
c0008bf0:	5e                   	pop    esi
c0008bf1:	5f                   	pop    edi
c0008bf2:	c3                   	ret    

c0008bf3 <src_callback_new>:
c0008bf3:	56                   	push   esi
c0008bf4:	53                   	push   ebx
c0008bf5:	53                   	push   ebx
c0008bf6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bfe:	85 f6                	test   esi,esi
c0008c00:	75 0e                	jne    c0008c10 <src_callback_new+0x1d>
c0008c02:	31 db                	xor    ebx,ebx
c0008c04:	85 c0                	test   eax,eax
c0008c06:	74 47                	je     c0008c4f <src_callback_new+0x5c>
c0008c08:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c0e:	eb 3f                	jmp    c0008c4f <src_callback_new+0x5c>
c0008c10:	85 c0                	test   eax,eax
c0008c12:	74 06                	je     c0008c1a <src_callback_new+0x27>
c0008c14:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1a:	51                   	push   ecx
c0008c1b:	50                   	push   eax
c0008c1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c20:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c24:	e8 3c ff ff ff       	call   c0008b65 <src_new>
c0008c29:	83 c4 10             	add    esp,0x10
c0008c2c:	89 c3                	mov    ebx,eax
c0008c2e:	85 c0                	test   eax,eax
c0008c30:	74 1d                	je     c0008c4f <src_callback_new+0x5c>
c0008c32:	83 ec 0c             	sub    esp,0xc
c0008c35:	50                   	push   eax
c0008c36:	e8 de fe ff ff       	call   c0008b19 <src_reset>
c0008c3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c3f:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c46:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c49:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4c:	83 c4 10             	add    esp,0x10
c0008c4f:	89 d8                	mov    eax,ebx
c0008c51:	5a                   	pop    edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	c3                   	ret    

c0008c55 <src_get_name>:
c0008c55:	53                   	push   ebx
c0008c56:	83 ec 14             	sub    esp,0x14
c0008c59:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c5d:	53                   	push   ebx
c0008c5e:	e8 d0 4f 00 00       	call   c000dc33 <sinc_get_name>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	85 c0                	test   eax,eax
c0008c68:	75 1d                	jne    c0008c87 <src_get_name+0x32>
c0008c6a:	83 ec 0c             	sub    esp,0xc
c0008c6d:	53                   	push   ebx
c0008c6e:	e8 80 57 00 00       	call   c000e3f3 <zoh_get_name>
c0008c73:	83 c4 10             	add    esp,0x10
c0008c76:	85 c0                	test   eax,eax
c0008c78:	75 0d                	jne    c0008c87 <src_get_name+0x32>
c0008c7a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c7e:	83 c4 08             	add    esp,0x8
c0008c81:	5b                   	pop    ebx
c0008c82:	e9 74 0b 00 00       	jmp    c00097fb <linear_get_name>
c0008c87:	83 c4 08             	add    esp,0x8
c0008c8a:	5b                   	pop    ebx
c0008c8b:	c3                   	ret    

c0008c8c <src_get_description>:
c0008c8c:	53                   	push   ebx
c0008c8d:	83 ec 14             	sub    esp,0x14
c0008c90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c94:	53                   	push   ebx
c0008c95:	e8 ac 4f 00 00       	call   c000dc46 <sinc_get_description>
c0008c9a:	83 c4 10             	add    esp,0x10
c0008c9d:	85 c0                	test   eax,eax
c0008c9f:	75 1d                	jne    c0008cbe <src_get_description+0x32>
c0008ca1:	83 ec 0c             	sub    esp,0xc
c0008ca4:	53                   	push   ebx
c0008ca5:	e8 58 57 00 00       	call   c000e402 <zoh_get_description>
c0008caa:	83 c4 10             	add    esp,0x10
c0008cad:	85 c0                	test   eax,eax
c0008caf:	75 0d                	jne    c0008cbe <src_get_description+0x32>
c0008cb1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb5:	83 c4 08             	add    esp,0x8
c0008cb8:	5b                   	pop    ebx
c0008cb9:	e9 4c 0b 00 00       	jmp    c000980a <linear_get_description>
c0008cbe:	83 c4 08             	add    esp,0x8
c0008cc1:	5b                   	pop    ebx
c0008cc2:	c3                   	ret    

c0008cc3 <src_get_version>:
c0008cc3:	b8 a0 a1 02 c0       	mov    eax,0xc002a1a0
c0008cc8:	c3                   	ret    

c0008cc9 <src_is_valid_ratio>:
c0008cc9:	83 ec 1c             	sub    esp,0x1c
c0008ccc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cd4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cdc:	68 00 00 70 3f       	push   0x3f700000
c0008ce1:	6a 00                	push   0x0
c0008ce3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ceb:	e8 87 ff 01 00       	call   c0028c77 <__ltdf2>
c0008cf0:	83 c4 10             	add    esp,0x10
c0008cf3:	31 d2                	xor    edx,edx
c0008cf5:	85 c0                	test   eax,eax
c0008cf7:	78 1e                	js     c0008d17 <src_is_valid_ratio+0x4e>
c0008cf9:	68 00 00 70 40       	push   0x40700000
c0008cfe:	6a 00                	push   0x0
c0008d00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d08:	e8 4c ff 01 00       	call   c0028c59 <__gtdf2>
c0008d0d:	31 d2                	xor    edx,edx
c0008d0f:	83 c4 10             	add    esp,0x10
c0008d12:	85 c0                	test   eax,eax
c0008d14:	0f 9e c2             	setle  dl
c0008d17:	89 d0                	mov    eax,edx
c0008d19:	83 c4 1c             	add    esp,0x1c
c0008d1c:	c3                   	ret    

c0008d1d <src_error>:
c0008d1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d21:	31 c0                	xor    eax,eax
c0008d23:	85 d2                	test   edx,edx
c0008d25:	74 03                	je     c0008d2a <src_error+0xd>
c0008d27:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d2a:	c3                   	ret    

c0008d2b <src_strerror>:
c0008d2b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d2f:	31 c0                	xor    eax,eax
c0008d31:	83 fa 17             	cmp    edx,0x17
c0008d34:	77 07                	ja     c0008d3d <src_strerror+0x12>
c0008d36:	8b 04 95 00 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5a00]
c0008d3d:	c3                   	ret    

c0008d3e <src_simple>:
c0008d3e:	56                   	push   esi
c0008d3f:	53                   	push   ebx
c0008d40:	83 ec 18             	sub    esp,0x18
c0008d43:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d47:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d4b:	50                   	push   eax
c0008d4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d50:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d54:	e8 0c fe ff ff       	call   c0008b65 <src_new>
c0008d59:	83 c4 10             	add    esp,0x10
c0008d5c:	85 c0                	test   eax,eax
c0008d5e:	75 06                	jne    c0008d66 <src_simple+0x28>
c0008d60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d64:	eb 25                	jmp    c0008d8b <src_simple+0x4d>
c0008d66:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d6d:	89 c3                	mov    ebx,eax
c0008d6f:	50                   	push   eax
c0008d70:	50                   	push   eax
c0008d71:	56                   	push   esi
c0008d72:	53                   	push   ebx
c0008d73:	e8 e2 f9 ff ff       	call   c000875a <src_process>
c0008d78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d7b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d7f:	e8 9a f9 ff ff       	call   c000871e <src_delete>
c0008d84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d88:	83 c4 10             	add    esp,0x10
c0008d8b:	83 c4 14             	add    esp,0x14
c0008d8e:	5b                   	pop    ebx
c0008d8f:	5e                   	pop    esi
c0008d90:	c3                   	ret    

c0008d91 <src_short_to_float_array>:
c0008d91:	53                   	push   ebx
c0008d92:	83 ec 18             	sub    esp,0x18
c0008d95:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d99:	85 db                	test   ebx,ebx
c0008d9b:	74 54                	je     c0008df1 <src_short_to_float_array+0x60>
c0008d9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008da1:	4b                   	dec    ebx
c0008da2:	83 ec 0c             	sub    esp,0xc
c0008da5:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008da9:	50                   	push   eax
c0008daa:	e8 5c fc 01 00       	call   c0028a0b <__floatsidf>
c0008daf:	83 c4 10             	add    esp,0x10
c0008db2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008db6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dba:	68 00 00 00 3f       	push   0x3f000000
c0008dbf:	6a 00                	push   0x0
c0008dc1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dc9:	e8 da f5 01 00       	call   c00283a8 <__muldf3>
c0008dce:	59                   	pop    ecx
c0008dcf:	59                   	pop    ecx
c0008dd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008dd4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008dd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	e8 96 fe 01 00       	call   c0028c7b <__truncdfsf2>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008dec:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008def:	eb a8                	jmp    c0008d99 <src_short_to_float_array+0x8>
c0008df1:	83 c4 18             	add    esp,0x18
c0008df4:	5b                   	pop    ebx
c0008df5:	c3                   	ret    

c0008df6 <src_float_to_short_array>:
c0008df6:	56                   	push   esi
c0008df7:	53                   	push   ebx
c0008df8:	83 ec 14             	sub    esp,0x14
c0008dfb:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008dff:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e03:	85 db                	test   ebx,ebx
c0008e05:	0f 84 a4 00 00 00    	je     c0008eaf <src_float_to_short_array+0xb9>
c0008e0b:	83 ec 0c             	sub    esp,0xc
c0008e0e:	4b                   	dec    ebx
c0008e0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e13:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e16:	e8 84 ff 01 00       	call   c0028d9f <__extendsfdf2>
c0008e1b:	83 c4 10             	add    esp,0x10
c0008e1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e26:	68 00 00 e0 41       	push   0x41e00000
c0008e2b:	6a 00                	push   0x0
c0008e2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e35:	e8 6e f5 01 00       	call   c00283a8 <__muldf3>
c0008e3a:	83 c4 10             	add    esp,0x10
c0008e3d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e45:	68 ff ff df 41       	push   0x41dfffff
c0008e4a:	68 00 00 c0 ff       	push   0xffc00000
c0008e4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e57:	e8 19 fe 01 00       	call   c0028c75 <__gedf2>
c0008e5c:	83 c4 10             	add    esp,0x10
c0008e5f:	85 c0                	test   eax,eax
c0008e61:	78 08                	js     c0008e6b <src_float_to_short_array+0x75>
c0008e63:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e69:	eb 98                	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e6b:	68 00 00 e0 c1       	push   0xc1e00000
c0008e70:	6a 00                	push   0x0
c0008e72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e7a:	e8 fa fd 01 00       	call   c0028c79 <__ledf2>
c0008e7f:	83 c4 10             	add    esp,0x10
c0008e82:	85 c0                	test   eax,eax
c0008e84:	7f 0b                	jg     c0008e91 <src_float_to_short_array+0x9b>
c0008e86:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008e8c:	e9 72 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008e91:	50                   	push   eax
c0008e92:	50                   	push   eax
c0008e93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e9b:	e8 90 ff 01 00       	call   c0028e30 <lrint>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	c1 f8 10             	sar    eax,0x10
c0008ea6:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008eaa:	e9 54 ff ff ff       	jmp    c0008e03 <src_float_to_short_array+0xd>
c0008eaf:	83 c4 14             	add    esp,0x14
c0008eb2:	5b                   	pop    ebx
c0008eb3:	5e                   	pop    esi
c0008eb4:	c3                   	ret    

c0008eb5 <src_int_to_float_array>:
c0008eb5:	53                   	push   ebx
c0008eb6:	83 ec 18             	sub    esp,0x18
c0008eb9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ebd:	85 db                	test   ebx,ebx
c0008ebf:	74 52                	je     c0008f13 <src_int_to_float_array+0x5e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	4b                   	dec    ebx
c0008ec5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ec9:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ecc:	e8 3a fb 01 00       	call   c0028a0b <__floatsidf>
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ed8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008edc:	68 00 00 00 3e       	push   0x3e000000
c0008ee1:	6a 00                	push   0x0
c0008ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eeb:	e8 b8 f4 01 00       	call   c00283a8 <__muldf3>
c0008ef0:	59                   	pop    ecx
c0008ef1:	59                   	pop    ecx
c0008ef2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ef6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008efa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	e8 74 fd 01 00       	call   c0028c7b <__truncdfsf2>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f0e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f11:	eb aa                	jmp    c0008ebd <src_int_to_float_array+0x8>
c0008f13:	83 c4 18             	add    esp,0x18
c0008f16:	5b                   	pop    ebx
c0008f17:	c3                   	ret    

c0008f18 <src_float_to_int_array>:
c0008f18:	56                   	push   esi
c0008f19:	53                   	push   ebx
c0008f1a:	83 ec 14             	sub    esp,0x14
c0008f1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f21:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f25:	85 db                	test   ebx,ebx
c0008f27:	0f 84 a2 00 00 00    	je     c0008fcf <src_float_to_int_array+0xb7>
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	4b                   	dec    ebx
c0008f31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f35:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f38:	e8 62 fe 01 00       	call   c0028d9f <__extendsfdf2>
c0008f3d:	83 c4 10             	add    esp,0x10
c0008f40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f48:	68 00 00 e0 41       	push   0x41e00000
c0008f4d:	6a 00                	push   0x0
c0008f4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f57:	e8 4c f4 01 00       	call   c00283a8 <__muldf3>
c0008f5c:	83 c4 10             	add    esp,0x10
c0008f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f67:	68 ff ff df 41       	push   0x41dfffff
c0008f6c:	68 00 00 c0 ff       	push   0xffc00000
c0008f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f79:	e8 f7 fc 01 00       	call   c0028c75 <__gedf2>
c0008f7e:	83 c4 10             	add    esp,0x10
c0008f81:	85 c0                	test   eax,eax
c0008f83:	78 09                	js     c0008f8e <src_float_to_int_array+0x76>
c0008f85:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008f8c:	eb 97                	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008f8e:	68 00 00 e0 c1       	push   0xc1e00000
c0008f93:	6a 00                	push   0x0
c0008f95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f9d:	e8 d7 fc 01 00       	call   c0028c79 <__ledf2>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	85 c0                	test   eax,eax
c0008fa7:	7f 0c                	jg     c0008fb5 <src_float_to_int_array+0x9d>
c0008fa9:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fb0:	e9 70 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fb5:	50                   	push   eax
c0008fb6:	50                   	push   eax
c0008fb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 6c fe 01 00       	call   c0028e30 <lrint>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fca:	e9 56 ff ff ff       	jmp    c0008f25 <src_float_to_int_array+0xd>
c0008fcf:	83 c4 14             	add    esp,0x14
c0008fd2:	5b                   	pop    ebx
c0008fd3:	5e                   	pop    esi
c0008fd4:	c3                   	ret    

c0008fd5 <linear_vari_process>:
c0008fd5:	55                   	push   ebp
c0008fd6:	31 d2                	xor    edx,edx
c0008fd8:	57                   	push   edi
c0008fd9:	56                   	push   esi
c0008fda:	53                   	push   ebx
c0008fdb:	83 ec 3c             	sub    esp,0x3c
c0008fde:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008fe2:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008fe6:	0f 8e d3 07 00 00    	jle    c00097bf <linear_vari_process+0x7ea>
c0008fec:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008ff0:	ba 05 00 00 00       	mov    edx,0x5
c0008ff5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008ff8:	85 db                	test   ebx,ebx
c0008ffa:	0f 84 bf 07 00 00    	je     c00097bf <linear_vari_process+0x7ea>
c0009000:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009003:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009007:	74 19                	je     c0009022 <linear_vari_process+0x4d>
c0009009:	31 d2                	xor    edx,edx
c000900b:	39 c2                	cmp    edx,eax
c000900d:	7d 0c                	jge    c000901b <linear_vari_process+0x46>
c000900f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0009011:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0009014:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009018:	42                   	inc    edx
c0009019:	eb f0                	jmp    c000900b <linear_vari_process+0x36>
c000901b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0009022:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009025:	0f af d0             	imul   edx,eax
c0009028:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000902b:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000902f:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009036:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009039:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0009040:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009047:	8b 00                	mov    eax,DWORD PTR [eax]
c0009049:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000904d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009051:	68 00 00 70 3f       	push   0x3f700000
c0009056:	6a 00                	push   0x0
c0009058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000905c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009060:	e8 12 fc 01 00       	call   c0028c77 <__ltdf2>
c0009065:	83 c4 10             	add    esp,0x10
c0009068:	ba 16 00 00 00       	mov    edx,0x16
c000906d:	85 c0                	test   eax,eax
c000906f:	0f 88 4a 07 00 00    	js     c00097bf <linear_vari_process+0x7ea>
c0009075:	68 00 00 70 40       	push   0x40700000
c000907a:	6a 00                	push   0x0
c000907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009080:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009084:	e8 d0 fb 01 00       	call   c0028c59 <__gtdf2>
c0009089:	83 c4 10             	add    esp,0x10
c000908c:	ba 16 00 00 00       	mov    edx,0x16
c0009091:	85 c0                	test   eax,eax
c0009093:	0f 8f 26 07 00 00    	jg     c00097bf <linear_vari_process+0x7ea>
c0009099:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000909d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090ab:	68 00 00 f0 3f       	push   0x3ff00000
c00090b0:	6a 00                	push   0x0
c00090b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090ba:	e8 b8 fb 01 00       	call   c0028c77 <__ltdf2>
c00090bf:	83 c4 10             	add    esp,0x10
c00090c2:	85 c0                	test   eax,eax
c00090c4:	0f 89 89 02 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c00090ca:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090cd:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090d0:	0f 8d 7d 02 00 00    	jge    c0009353 <linear_vari_process+0x37e>
c00090d6:	83 ec 0c             	sub    esp,0xc
c00090d9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090dc:	e8 2a f9 01 00       	call   c0028a0b <__floatsidf>
c00090e1:	83 c4 10             	add    esp,0x10
c00090e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00090e7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00090eb:	68 00 00 f0 3f       	push   0x3ff00000
c00090f0:	6a 00                	push   0x0
c00090f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090fa:	e8 2c ec 01 00       	call   c0027d2b <__adddf3>
c00090ff:	83 c4 10             	add    esp,0x10
c0009102:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009106:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000910a:	52                   	push   edx
c000910b:	50                   	push   eax
c000910c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009110:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009114:	e8 8f f2 01 00       	call   c00283a8 <__muldf3>
c0009119:	5d                   	pop    ebp
c000911a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000911e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009122:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009125:	e8 e1 f8 01 00       	call   c0028a0b <__floatsidf>
c000912a:	83 c4 10             	add    esp,0x10
c000912d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009135:	52                   	push   edx
c0009136:	50                   	push   eax
c0009137:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000913f:	e8 e7 eb 01 00       	call   c0027d2b <__adddf3>
c0009144:	59                   	pop    ecx
c0009145:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009149:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000914d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0009150:	e8 b6 f8 01 00       	call   c0028a0b <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000915c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009166:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000916a:	e8 06 fb 01 00       	call   c0028c75 <__gedf2>
c000916f:	83 c4 10             	add    esp,0x10
c0009172:	85 c0                	test   eax,eax
c0009174:	0f 89 d9 01 00 00    	jns    c0009353 <linear_vari_process+0x37e>
c000917a:	85 ff                	test   edi,edi
c000917c:	0f 8e f4 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c0009182:	83 ec 10             	sub    esp,0x10
c0009185:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009188:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000918b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000918f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0009192:	ff 30                	push   DWORD PTR [eax]
c0009194:	e8 e3 f1 01 00       	call   c002837c <__subdf3>
c0009199:	83 c4 18             	add    esp,0x18
c000919c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091a4:	52                   	push   edx
c00091a5:	50                   	push   eax
c00091a6:	e8 65 fc 01 00       	call   c0028e10 <fabs>
c00091ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091b3:	83 c4 10             	add    esp,0x10
c00091b6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091bb:	68 23 42 92 0c       	push   0xc924223
c00091c0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091c8:	e8 8c fa 01 00       	call   c0028c59 <__gtdf2>
c00091cd:	83 c4 10             	add    esp,0x10
c00091d0:	85 c0                	test   eax,eax
c00091d2:	0f 8e 9e 00 00 00    	jle    c0009276 <linear_vari_process+0x2a1>
c00091d8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091dc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091df:	8b 00                	mov    eax,DWORD PTR [eax]
c00091e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00091e8:	52                   	push   edx
c00091e9:	50                   	push   eax
c00091ea:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091ed:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091f0:	e8 87 f1 01 00       	call   c002837c <__subdf3>
c00091f5:	59                   	pop    ecx
c00091f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00091fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091fe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009201:	e8 05 f8 01 00       	call   c0028a0b <__floatsidf>
c0009206:	83 c4 10             	add    esp,0x10
c0009209:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000920d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009211:	52                   	push   edx
c0009212:	50                   	push   eax
c0009213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000921b:	e8 88 f1 01 00       	call   c00283a8 <__muldf3>
c0009220:	5f                   	pop    edi
c0009221:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009225:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009229:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000922c:	e8 da f7 01 00       	call   c0028a0b <__floatsidf>
c0009231:	83 c4 10             	add    esp,0x10
c0009234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009238:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000923c:	52                   	push   edx
c000923d:	50                   	push   eax
c000923e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009246:	e8 41 f4 01 00       	call   c002868c <__divdf3>
c000924b:	83 c4 10             	add    esp,0x10
c000924e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009252:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009256:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000925e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009266:	e8 c0 ea 01 00       	call   c0027d2b <__adddf3>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009276:	31 ff                	xor    edi,edi
c0009278:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c000927b:	0f 8e 9d 00 00 00    	jle    c000931e <linear_vari_process+0x349>
c0009281:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009284:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009288:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000928b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000928f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009292:	8b 06                	mov    eax,DWORD PTR [esi]
c0009294:	52                   	push   edx
c0009295:	52                   	push   edx
c0009296:	55                   	push   ebp
c0009297:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c000929a:	47                   	inc    edi
c000929b:	e8 20 e4 01 00       	call   c00276c0 <__subsf3>
c00092a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00092a3:	e8 f7 fa 01 00       	call   c0028d9f <__extendsfdf2>
c00092a8:	83 c4 10             	add    esp,0x10
c00092ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092af:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092c3:	e8 e0 f0 01 00       	call   c00283a8 <__muldf3>
c00092c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092d3:	e8 c7 fa 01 00       	call   c0028d9f <__extendsfdf2>
c00092d8:	83 c4 10             	add    esp,0x10
c00092db:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092df:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092e3:	52                   	push   edx
c00092e4:	50                   	push   eax
c00092e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092ed:	e8 39 ea 01 00       	call   c0027d2b <__adddf3>
c00092f2:	59                   	pop    ecx
c00092f3:	5d                   	pop    ebp
c00092f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	e8 72 f9 01 00       	call   c0028c7b <__truncdfsf2>
c0009309:	83 c4 10             	add    esp,0x10
c000930c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000930f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009313:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009316:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009319:	e9 5a ff ff ff       	jmp    c0009278 <linear_vari_process+0x2a3>
c000931e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009322:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009326:	68 00 00 f0 3f       	push   0x3ff00000
c000932b:	6a 00                	push   0x0
c000932d:	e8 5a f3 01 00       	call   c002868c <__divdf3>
c0009332:	83 c4 10             	add    esp,0x10
c0009335:	89 04 24             	mov    DWORD PTR [esp],eax
c0009338:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000933c:	52                   	push   edx
c000933d:	50                   	push   eax
c000933e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009346:	e8 e0 e9 01 00       	call   c0027d2b <__adddf3>
c000934b:	83 c4 10             	add    esp,0x10
c000934e:	e9 50 fd ff ff       	jmp    c00090a3 <linear_vari_process+0xce>
c0009353:	50                   	push   eax
c0009354:	50                   	push   eax
c0009355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	e8 ce fa 01 00       	call   c0028e30 <lrint>
c0009362:	83 ec 0c             	sub    esp,0xc
c0009365:	50                   	push   eax
c0009366:	e8 a0 f6 01 00       	call   c0028a0b <__floatsidf>
c000936b:	83 c4 10             	add    esp,0x10
c000936e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009372:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000937c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009380:	e8 f7 ef 01 00       	call   c002837c <__subdf3>
c0009385:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009389:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000938d:	83 c4 20             	add    esp,0x20
c0009390:	6a 00                	push   0x0
c0009392:	6a 00                	push   0x0
c0009394:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000939c:	e8 d6 f8 01 00       	call   c0028c77 <__ltdf2>
c00093a1:	83 c4 10             	add    esp,0x10
c00093a4:	85 c0                	test   eax,eax
c00093a6:	79 1e                	jns    c00093c6 <linear_vari_process+0x3f1>
c00093a8:	68 00 00 f0 3f       	push   0x3ff00000
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 6f e9 01 00       	call   c0027d2b <__adddf3>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093c6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093c9:	83 ec 10             	sub    esp,0x10
c00093cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093dc:	e8 9b ef 01 00       	call   c002837c <__subdf3>
c00093e1:	83 c4 18             	add    esp,0x18
c00093e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093e8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093ec:	52                   	push   edx
c00093ed:	50                   	push   eax
c00093ee:	e8 3d fa 01 00       	call   c0028e30 <lrint>
c00093f3:	83 c4 10             	add    esp,0x10
c00093f6:	0f af f8             	imul   edi,eax
c00093f9:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00093fc:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00093ff:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009402:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009405:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009408:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c000940c:	0f 8d 13 03 00 00    	jge    c0009725 <linear_vari_process+0x750>
c0009412:	83 ec 0c             	sub    esp,0xc
c0009415:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009418:	e8 ee f5 01 00       	call   c0028a0b <__floatsidf>
c000941d:	83 c4 10             	add    esp,0x10
c0009420:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009424:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009428:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000942c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009434:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009438:	e8 6b ef 01 00       	call   c00283a8 <__muldf3>
c000943d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0009440:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009444:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009448:	e8 be f5 01 00       	call   c0028a0b <__floatsidf>
c000944d:	83 c4 10             	add    esp,0x10
c0009450:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009454:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009458:	52                   	push   edx
c0009459:	50                   	push   eax
c000945a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000945e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009462:	e8 c4 e8 01 00       	call   c0027d2b <__adddf3>
c0009467:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000946a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009472:	e8 94 f5 01 00       	call   c0028a0b <__floatsidf>
c0009477:	83 c4 10             	add    esp,0x10
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	52                   	push   edx
c0009483:	50                   	push   eax
c0009484:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009488:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000948c:	e8 e6 f7 01 00       	call   c0028c77 <__ltdf2>
c0009491:	83 c4 10             	add    esp,0x10
c0009494:	85 c0                	test   eax,eax
c0009496:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000949a:	0f 89 85 02 00 00    	jns    c0009725 <linear_vari_process+0x750>
c00094a0:	85 c9                	test   ecx,ecx
c00094a2:	0f 8e f5 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094a8:	83 ec 10             	sub    esp,0x10
c00094ab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094ae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094b5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094b8:	ff 30                	push   DWORD PTR [eax]
c00094ba:	e8 bd ee 01 00       	call   c002837c <__subdf3>
c00094bf:	83 c4 18             	add    esp,0x18
c00094c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094ca:	52                   	push   edx
c00094cb:	50                   	push   eax
c00094cc:	e8 3f f9 01 00       	call   c0028e10 <fabs>
c00094d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094d9:	83 c4 10             	add    esp,0x10
c00094dc:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094e1:	68 23 42 92 0c       	push   0xc924223
c00094e6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094ee:	e8 66 f7 01 00       	call   c0028c59 <__gtdf2>
c00094f3:	83 c4 10             	add    esp,0x10
c00094f6:	85 c0                	test   eax,eax
c00094f8:	0f 8e 9f 00 00 00    	jle    c000959d <linear_vari_process+0x5c8>
c00094fe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009502:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009505:	8b 00                	mov    eax,DWORD PTR [eax]
c0009507:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000950b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000950f:	52                   	push   edx
c0009510:	50                   	push   eax
c0009511:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009514:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009517:	e8 60 ee 01 00       	call   c002837c <__subdf3>
c000951c:	5f                   	pop    edi
c000951d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009521:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009525:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009528:	e8 de f4 01 00       	call   c0028a0b <__floatsidf>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009534:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009538:	52                   	push   edx
c0009539:	50                   	push   eax
c000953a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000953e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009542:	e8 61 ee 01 00       	call   c00283a8 <__muldf3>
c0009547:	5d                   	pop    ebp
c0009548:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000954c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009550:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009553:	e8 b3 f4 01 00       	call   c0028a0b <__floatsidf>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000955f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009563:	52                   	push   edx
c0009564:	50                   	push   eax
c0009565:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009569:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000956d:	e8 1a f1 01 00       	call   c002868c <__divdf3>
c0009572:	83 c4 10             	add    esp,0x10
c0009575:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009579:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000957d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009581:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009585:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000958d:	e8 99 e7 01 00       	call   c0027d2b <__adddf3>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009599:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000959d:	31 ff                	xor    edi,edi
c000959f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095a2:	39 f8                	cmp    eax,edi
c00095a4:	0f 8e ac 00 00 00    	jle    c0009656 <linear_vari_process+0x681>
c00095aa:	8b 16                	mov    edx,DWORD PTR [esi]
c00095ac:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095af:	29 c1                	sub    ecx,eax
c00095b1:	89 c8                	mov    eax,ecx
c00095b3:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095b6:	01 f8                	add    eax,edi
c00095b8:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095bc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095bf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095c9:	51                   	push   ecx
c00095ca:	01 f8                	add    eax,edi
c00095cc:	51                   	push   ecx
c00095cd:	47                   	inc    edi
c00095ce:	55                   	push   ebp
c00095cf:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095d2:	e8 e9 e0 01 00       	call   c00276c0 <__subsf3>
c00095d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00095da:	e8 c0 f7 01 00       	call   c0028d9f <__extendsfdf2>
c00095df:	83 c4 10             	add    esp,0x10
c00095e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00095e6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00095ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095ee:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00095f2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00095fa:	e8 a9 ed 01 00       	call   c00283a8 <__muldf3>
c00095ff:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000960a:	e8 90 f7 01 00       	call   c0028d9f <__extendsfdf2>
c000960f:	83 c4 10             	add    esp,0x10
c0009612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009616:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000961a:	52                   	push   edx
c000961b:	50                   	push   eax
c000961c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009620:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009624:	e8 02 e7 01 00       	call   c0027d2b <__adddf3>
c0009629:	5d                   	pop    ebp
c000962a:	59                   	pop    ecx
c000962b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000962f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009633:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	e8 3b f6 01 00       	call   c0028c7b <__truncdfsf2>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009647:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000964b:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c000964e:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009651:	e9 49 ff ff ff       	jmp    c000959f <linear_vari_process+0x5ca>
c0009656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000965e:	68 00 00 f0 3f       	push   0x3ff00000
c0009663:	6a 00                	push   0x0
c0009665:	e8 22 f0 01 00       	call   c002868c <__divdf3>
c000966a:	83 c4 10             	add    esp,0x10
c000966d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009671:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009675:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009679:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000967d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009681:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009685:	e8 a1 e6 01 00       	call   c0027d2b <__adddf3>
c000968a:	59                   	pop    ecx
c000968b:	5f                   	pop    edi
c000968c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009690:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	e8 8f f7 01 00       	call   c0028e30 <lrint>
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	50                   	push   eax
c00096a5:	e8 61 f3 01 00       	call   c0028a0b <__floatsidf>
c00096aa:	83 c4 10             	add    esp,0x10
c00096ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096b5:	52                   	push   edx
c00096b6:	50                   	push   eax
c00096b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096bf:	e8 b8 ec 01 00       	call   c002837c <__subdf3>
c00096c4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096c8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096cc:	83 c4 20             	add    esp,0x20
c00096cf:	6a 00                	push   0x0
c00096d1:	6a 00                	push   0x0
c00096d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096db:	e8 97 f5 01 00       	call   c0028c77 <__ltdf2>
c00096e0:	83 c4 10             	add    esp,0x10
c00096e3:	85 c0                	test   eax,eax
c00096e5:	79 1e                	jns    c0009705 <linear_vari_process+0x730>
c00096e7:	68 00 00 f0 3f       	push   0x3ff00000
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 30 e6 01 00       	call   c0027d2b <__adddf3>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0009701:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009705:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009708:	83 ec 10             	sub    esp,0x10
c000970b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000970f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009713:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009717:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000971b:	e8 5c ec 01 00       	call   c002837c <__subdf3>
c0009720:	e9 bc fc ff ff       	jmp    c00093e1 <linear_vari_process+0x40c>
c0009725:	39 fd                	cmp    ebp,edi
c0009727:	7d 38                	jge    c0009761 <linear_vari_process+0x78c>
c0009729:	83 ec 0c             	sub    esp,0xc
c000972c:	89 f8                	mov    eax,edi
c000972e:	29 e8                	sub    eax,ebp
c0009730:	99                   	cdq    
c0009731:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009734:	50                   	push   eax
c0009735:	e8 d1 f2 01 00       	call   c0028a0b <__floatsidf>
c000973a:	83 c4 10             	add    esp,0x10
c000973d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009741:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009745:	52                   	push   edx
c0009746:	50                   	push   eax
c0009747:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000974f:	e8 d7 e5 01 00       	call   c0027d2b <__adddf3>
c0009754:	83 c4 10             	add    esp,0x10
c0009757:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000975a:	89 04 24             	mov    DWORD PTR [esp],eax
c000975d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009761:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009765:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009768:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000976c:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000976f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0009772:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009775:	85 c0                	test   eax,eax
c0009777:	7f 29                	jg     c00097a2 <linear_vari_process+0x7cd>
c0009779:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000977d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	89 01                	mov    DWORD PTR [ecx],eax
c0009787:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000978a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000978d:	99                   	cdq    
c000978e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009791:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009794:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009797:	99                   	cdq    
c0009798:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000979b:	31 d2                	xor    edx,edx
c000979d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097a0:	eb 1d                	jmp    c00097bf <linear_vari_process+0x7ea>
c00097a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097a5:	31 d2                	xor    edx,edx
c00097a7:	29 c8                	sub    eax,ecx
c00097a9:	c1 e0 02             	shl    eax,0x2
c00097ac:	39 d1                	cmp    ecx,edx
c00097ae:	7e c9                	jle    c0009779 <linear_vari_process+0x7a4>
c00097b0:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097b2:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097b5:	83 c0 04             	add    eax,0x4
c00097b8:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097bc:	42                   	inc    edx
c00097bd:	eb ed                	jmp    c00097ac <linear_vari_process+0x7d7>
c00097bf:	83 c4 3c             	add    esp,0x3c
c00097c2:	89 d0                	mov    eax,edx
c00097c4:	5b                   	pop    ebx
c00097c5:	5e                   	pop    esi
c00097c6:	5f                   	pop    edi
c00097c7:	5d                   	pop    ebp
c00097c8:	c3                   	ret    

c00097c9 <linear_reset>:
c00097c9:	83 ec 0c             	sub    esp,0xc
c00097cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d0:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097d3:	85 c0                	test   eax,eax
c00097d5:	74 20                	je     c00097f7 <linear_reset+0x2e>
c00097d7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097da:	83 c0 1c             	add    eax,0x1c
c00097dd:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097e0:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00097e7:	c1 e2 02             	shl    edx,0x2
c00097ea:	51                   	push   ecx
c00097eb:	52                   	push   edx
c00097ec:	6a 00                	push   0x0
c00097ee:	50                   	push   eax
c00097ef:	e8 5c 6f ff ff       	call   c0000750 <memset>
c00097f4:	83 c4 10             	add    esp,0x10
c00097f7:	83 c4 0c             	add    esp,0xc
c00097fa:	c3                   	ret    

c00097fb <linear_get_name>:
c00097fb:	31 c0                	xor    eax,eax
c00097fd:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009802:	75 05                	jne    c0009809 <linear_get_name+0xe>
c0009804:	b8 60 a6 02 c0       	mov    eax,0xc002a660
c0009809:	c3                   	ret    

c000980a <linear_get_description>:
c000980a:	31 c0                	xor    eax,eax
c000980c:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0009811:	75 05                	jne    c0009818 <linear_get_description+0xe>
c0009813:	b8 74 a6 02 c0       	mov    eax,0xc002a674
c0009818:	c3                   	ret    

c0009819 <linear_set_converter>:
c0009819:	53                   	push   ebx
c000981a:	b8 0a 00 00 00       	mov    eax,0xa
c000981f:	83 ec 08             	sub    esp,0x8
c0009822:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009826:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c000982b:	75 6e                	jne    c000989b <linear_set_converter+0x82>
c000982d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0009830:	85 c0                	test   eax,eax
c0009832:	74 13                	je     c0009847 <linear_set_converter+0x2e>
c0009834:	83 ec 0c             	sub    esp,0xc
c0009837:	50                   	push   eax
c0009838:	e8 5f 60 00 00       	call   c000f89c <free>
c000983d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0009844:	83 c4 10             	add    esp,0x10
c0009847:	50                   	push   eax
c0009848:	50                   	push   eax
c0009849:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000984c:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0009853:	50                   	push   eax
c0009854:	6a 01                	push   0x1
c0009856:	e8 61 60 00 00       	call   c000f8bc <calloc>
c000985b:	83 c4 10             	add    esp,0x10
c000985e:	89 c2                	mov    edx,eax
c0009860:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0009863:	85 d2                	test   edx,edx
c0009865:	b8 01 00 00 00       	mov    eax,0x1
c000986a:	74 2f                	je     c000989b <linear_set_converter+0x82>
c000986c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000986f:	83 ec 0c             	sub    esp,0xc
c0009872:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009875:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000987b:	c7 43 24 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008fd5
c0009882:	c7 43 20 d5 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008fd5
c0009889:	c7 43 28 c9 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097c9
c0009890:	53                   	push   ebx
c0009891:	e8 33 ff ff ff       	call   c00097c9 <linear_reset>
c0009896:	83 c4 10             	add    esp,0x10
c0009899:	31 c0                	xor    eax,eax
c000989b:	83 c4 08             	add    esp,0x8
c000989e:	5b                   	pop    ebx
c000989f:	c3                   	ret    

c00098a0 <int_to_fp>:
c00098a0:	c1 e0 0c             	shl    eax,0xc
c00098a3:	c3                   	ret    

c00098a4 <fp_to_int>:
c00098a4:	c1 f8 0c             	sar    eax,0xc
c00098a7:	c3                   	ret    

c00098a8 <fp_fraction_part>:
c00098a8:	25 ff 0f 00 00       	and    eax,0xfff
c00098ad:	c3                   	ret    

c00098ae <fp_to_double>:
c00098ae:	83 ec 1c             	sub    esp,0x1c
c00098b1:	e8 f2 ff ff ff       	call   c00098a8 <fp_fraction_part>
c00098b6:	83 ec 0c             	sub    esp,0xc
c00098b9:	50                   	push   eax
c00098ba:	e8 4c f1 01 00       	call   c0028a0b <__floatsidf>
c00098bf:	83 c4 10             	add    esp,0x10
c00098c2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098ca:	68 00 00 30 3f       	push   0x3f300000
c00098cf:	6a 00                	push   0x0
c00098d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098d9:	e8 ca ea 01 00       	call   c00283a8 <__muldf3>
c00098de:	83 c4 2c             	add    esp,0x2c
c00098e1:	c3                   	ret    

c00098e2 <calc_output_single>:
c00098e2:	55                   	push   ebp
c00098e3:	57                   	push   edi
c00098e4:	56                   	push   esi
c00098e5:	89 c6                	mov    esi,eax
c00098e7:	53                   	push   ebx
c00098e8:	89 d3                	mov    ebx,edx
c00098ea:	83 ec 4c             	sub    esp,0x4c
c00098ed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00098f1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00098f4:	e8 a7 ff ff ff       	call   c00098a0 <int_to_fp>
c00098f9:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00098fc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009900:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0009904:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009908:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c000990b:	99                   	cdq    
c000990c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009914:	f7 fb                	idiv   ebx
c0009916:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000991e:	89 da                	mov    edx,ebx
c0009920:	0f af d0             	imul   edx,eax
c0009923:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009927:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000992b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000992f:	29 c2                	sub    edx,eax
c0009931:	8d 2c 96             	lea    ebp,[esi+edx*4]
c0009934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009938:	83 c5 04             	add    ebp,0x4
c000993b:	e8 6e ff ff ff       	call   c00098ae <fp_to_double>
c0009940:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009944:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000994c:	e8 53 ff ff ff       	call   c00098a4 <fp_to_int>
c0009951:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009954:	52                   	push   edx
c0009955:	52                   	push   edx
c0009956:	51                   	push   ecx
c0009957:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c000995b:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000995f:	e8 5c dd 01 00       	call   c00276c0 <__subsf3>
c0009964:	89 04 24             	mov    DWORD PTR [esp],eax
c0009967:	e8 33 f4 01 00       	call   c0028d9f <__extendsfdf2>
c000996c:	83 c4 10             	add    esp,0x10
c000996f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009977:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000997f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009983:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009987:	e8 1c ea 01 00       	call   c00283a8 <__muldf3>
c000998c:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0009990:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009994:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009997:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000999b:	e8 ff f3 01 00       	call   c0028d9f <__extendsfdf2>
c00099a0:	83 c4 10             	add    esp,0x10
c00099a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099ab:	52                   	push   edx
c00099ac:	50                   	push   eax
c00099ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099b5:	e8 71 e3 01 00       	call   c0027d2b <__adddf3>
c00099ba:	59                   	pop    ecx
c00099bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099c3:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099c9:	e8 d1 f3 01 00       	call   c0028d9f <__extendsfdf2>
c00099ce:	83 c4 10             	add    esp,0x10
c00099d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099d9:	52                   	push   edx
c00099da:	50                   	push   eax
c00099db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099e3:	e8 c0 e9 01 00       	call   c00283a8 <__muldf3>
c00099e8:	83 c4 10             	add    esp,0x10
c00099eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00099ef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00099f3:	52                   	push   edx
c00099f4:	50                   	push   eax
c00099f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00099fd:	e8 29 e3 01 00       	call   c0027d2b <__adddf3>
c0009a02:	83 c4 10             	add    esp,0x10
c0009a05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a0d:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a11:	0f 89 1d ff ff ff    	jns    c0009934 <calc_output_single+0x52>
c0009a17:	89 d9                	mov    ecx,ebx
c0009a19:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a1d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a21:	89 dd                	mov    ebp,ebx
c0009a23:	29 c8                	sub    eax,ecx
c0009a25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a2d:	99                   	cdq    
c0009a2e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a36:	f7 fb                	idiv   ebx
c0009a38:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a3c:	0f af e8             	imul   ebp,eax
c0009a3f:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a43:	01 cd                	add    ebp,ecx
c0009a45:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a48:	89 e8                	mov    eax,ebp
c0009a4a:	83 ee 04             	sub    esi,0x4
c0009a4d:	e8 5c fe ff ff       	call   c00098ae <fp_to_double>
c0009a52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a5a:	89 e8                	mov    eax,ebp
c0009a5c:	29 dd                	sub    ebp,ebx
c0009a5e:	e8 41 fe ff ff       	call   c00098a4 <fp_to_int>
c0009a63:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a66:	52                   	push   edx
c0009a67:	52                   	push   edx
c0009a68:	51                   	push   ecx
c0009a69:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a6d:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a71:	e8 4a dc 01 00       	call   c00276c0 <__subsf3>
c0009a76:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a79:	e8 21 f3 01 00       	call   c0028d9f <__extendsfdf2>
c0009a7e:	83 c4 10             	add    esp,0x10
c0009a81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009a85:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009a89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009a99:	e8 0a e9 01 00       	call   c00283a8 <__muldf3>
c0009a9e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009aa2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009aa6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009aa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009aad:	e8 ed f2 01 00       	call   c0028d9f <__extendsfdf2>
c0009ab2:	83 c4 10             	add    esp,0x10
c0009ab5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ab9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009abd:	52                   	push   edx
c0009abe:	50                   	push   eax
c0009abf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ac7:	e8 5f e2 01 00       	call   c0027d2b <__adddf3>
c0009acc:	59                   	pop    ecx
c0009acd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ad1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009ad5:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009adb:	e8 bf f2 01 00       	call   c0028d9f <__extendsfdf2>
c0009ae0:	83 c4 10             	add    esp,0x10
c0009ae3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ae7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aeb:	52                   	push   edx
c0009aec:	50                   	push   eax
c0009aed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009af5:	e8 ae e8 01 00       	call   c00283a8 <__muldf3>
c0009afa:	83 c4 10             	add    esp,0x10
c0009afd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b01:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b05:	52                   	push   edx
c0009b06:	50                   	push   eax
c0009b07:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b0f:	e8 17 e2 01 00       	call   c0027d2b <__adddf3>
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	85 ed                	test   ebp,ebp
c0009b19:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b1d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b21:	0f 8f 21 ff ff ff    	jg     c0009a48 <calc_output_single+0x166>
c0009b27:	52                   	push   edx
c0009b28:	50                   	push   eax
c0009b29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b2d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b31:	e8 f5 e1 01 00       	call   c0027d2b <__adddf3>
c0009b36:	83 c4 5c             	add    esp,0x5c
c0009b39:	5b                   	pop    ebx
c0009b3a:	5e                   	pop    esi
c0009b3b:	5f                   	pop    edi
c0009b3c:	5d                   	pop    ebp
c0009b3d:	c3                   	ret    

c0009b3e <calc_output_stereo>:
c0009b3e:	55                   	push   ebp
c0009b3f:	89 cd                	mov    ebp,ecx
c0009b41:	57                   	push   edi
c0009b42:	56                   	push   esi
c0009b43:	53                   	push   ebx
c0009b44:	89 c3                	mov    ebx,eax
c0009b46:	83 ec 6c             	sub    esp,0x6c
c0009b49:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b54:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b5b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b5f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b63:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b66:	e8 35 fd ff ff       	call   c00098a0 <int_to_fp>
c0009b6b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b77:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b7f:	29 c8                	sub    eax,ecx
c0009b81:	99                   	cdq    
c0009b82:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009b86:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009b8a:	0f af d0             	imul   edx,eax
c0009b8d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009b90:	31 d2                	xor    edx,edx
c0009b92:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009b96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b9a:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009b9d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009ba1:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009ba4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009ba8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bac:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009baf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bb4:	29 c1                	sub    ecx,eax
c0009bb6:	31 c0                	xor    eax,eax
c0009bb8:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bbb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bbf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bc3:	83 c7 08             	add    edi,0x8
c0009bc6:	e8 e3 fc ff ff       	call   c00098ae <fp_to_double>
c0009bcb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bcf:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bd7:	e8 c8 fc ff ff       	call   c00098a4 <fp_to_int>
c0009bdc:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bdf:	52                   	push   edx
c0009be0:	52                   	push   edx
c0009be1:	51                   	push   ecx
c0009be2:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009be6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009bea:	e8 d1 da 01 00       	call   c00276c0 <__subsf3>
c0009bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bf2:	e8 a8 f1 01 00       	call   c0028d9f <__extendsfdf2>
c0009bf7:	83 c4 10             	add    esp,0x10
c0009bfa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009bfe:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c06:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c0a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c12:	e8 91 e7 01 00       	call   c00283a8 <__muldf3>
c0009c17:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c1b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c1f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c22:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c26:	e8 74 f1 01 00       	call   c0028d9f <__extendsfdf2>
c0009c2b:	83 c4 10             	add    esp,0x10
c0009c2e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c32:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c36:	52                   	push   edx
c0009c37:	50                   	push   eax
c0009c38:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c3c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c40:	e8 e6 e0 01 00       	call   c0027d2b <__adddf3>
c0009c45:	59                   	pop    ecx
c0009c46:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c4a:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c4e:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c54:	e8 46 f1 01 00       	call   c0028d9f <__extendsfdf2>
c0009c59:	83 c4 10             	add    esp,0x10
c0009c5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c64:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c68:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c6c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c70:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c74:	e8 2f e7 01 00       	call   c00283a8 <__muldf3>
c0009c79:	83 c4 10             	add    esp,0x10
c0009c7c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c80:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c84:	52                   	push   edx
c0009c85:	50                   	push   eax
c0009c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c8e:	e8 98 e0 01 00       	call   c0027d2b <__adddf3>
c0009c93:	59                   	pop    ecx
c0009c94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009c98:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009c9c:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009ca2:	e8 f8 f0 01 00       	call   c0028d9f <__extendsfdf2>
c0009ca7:	83 c4 10             	add    esp,0x10
c0009caa:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cae:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cb2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cb6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cba:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cbe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cc2:	e8 e1 e6 01 00       	call   c00283a8 <__muldf3>
c0009cc7:	83 c4 10             	add    esp,0x10
c0009cca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009cce:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009cd2:	52                   	push   edx
c0009cd3:	50                   	push   eax
c0009cd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cdc:	e8 4a e0 01 00       	call   c0027d2b <__adddf3>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ce8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009cec:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009cf0:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009cf4:	0f 89 c5 fe ff ff    	jns    c0009bbf <calc_output_stereo+0x81>
c0009cfa:	29 e9                	sub    ecx,ebp
c0009cfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d00:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d04:	29 c8                	sub    eax,ecx
c0009d06:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d0e:	99                   	cdq    
c0009d0f:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d13:	31 d2                	xor    edx,edx
c0009d15:	0f af f8             	imul   edi,eax
c0009d18:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d1c:	40                   	inc    eax
c0009d1d:	01 cf                	add    edi,ecx
c0009d1f:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d24:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d28:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d30:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d33:	31 c0                	xor    eax,eax
c0009d35:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d39:	89 f8                	mov    eax,edi
c0009d3b:	83 eb 08             	sub    ebx,0x8
c0009d3e:	e8 6b fb ff ff       	call   c00098ae <fp_to_double>
c0009d43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d47:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d4b:	89 f8                	mov    eax,edi
c0009d4d:	e8 52 fb ff ff       	call   c00098a4 <fp_to_int>
c0009d52:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d55:	52                   	push   edx
c0009d56:	52                   	push   edx
c0009d57:	55                   	push   ebp
c0009d58:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d5c:	e8 5f d9 01 00       	call   c00276c0 <__subsf3>
c0009d61:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d64:	e8 36 f0 01 00       	call   c0028d9f <__extendsfdf2>
c0009d69:	83 c4 10             	add    esp,0x10
c0009d6c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d70:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d74:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d78:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d7c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d80:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d84:	e8 1f e6 01 00       	call   c00283a8 <__muldf3>
c0009d89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009d8c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009d90:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009d94:	e8 06 f0 01 00       	call   c0028d9f <__extendsfdf2>
c0009d99:	83 c4 10             	add    esp,0x10
c0009d9c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009da0:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009da4:	52                   	push   edx
c0009da5:	50                   	push   eax
c0009da6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009daa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dae:	e8 78 df 01 00       	call   c0027d2b <__adddf3>
c0009db3:	59                   	pop    ecx
c0009db4:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009db8:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dbc:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dc2:	e8 d8 ef 01 00       	call   c0028d9f <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dce:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dd2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dd6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009dda:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dde:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009de2:	e8 c1 e5 01 00       	call   c00283a8 <__muldf3>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009df2:	52                   	push   edx
c0009df3:	50                   	push   eax
c0009df4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009df8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009dfc:	e8 2a df 01 00       	call   c0027d2b <__adddf3>
c0009e01:	5d                   	pop    ebp
c0009e02:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e06:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e0a:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e10:	e8 8a ef 01 00       	call   c0028d9f <__extendsfdf2>
c0009e15:	83 c4 10             	add    esp,0x10
c0009e18:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e1c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e20:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e2c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e30:	e8 73 e5 01 00       	call   c00283a8 <__muldf3>
c0009e35:	83 c4 10             	add    esp,0x10
c0009e38:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e3c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e40:	52                   	push   edx
c0009e41:	50                   	push   eax
c0009e42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e4a:	e8 dc de 01 00       	call   c0027d2b <__adddf3>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e56:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e5a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e5e:	85 ff                	test   edi,edi
c0009e60:	0f 8f d3 fe ff ff    	jg     c0009d39 <calc_output_stereo+0x1fb>
c0009e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e76:	e8 b0 de 01 00       	call   c0027d2b <__adddf3>
c0009e7b:	83 c4 10             	add    esp,0x10
c0009e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e82:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009e86:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009e96:	e8 0d e5 01 00       	call   c00283a8 <__muldf3>
c0009e9b:	59                   	pop    ecx
c0009e9c:	5b                   	pop    ebx
c0009e9d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ea1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ea5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	e8 c9 ed 01 00       	call   c0028c7b <__truncdfsf2>
c0009eb2:	83 c4 10             	add    esp,0x10
c0009eb5:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ebc:	89 03                	mov    DWORD PTR [ebx],eax
c0009ebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ec6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009eca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ece:	e8 58 de 01 00       	call   c0027d2b <__adddf3>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ede:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ee6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eee:	e8 b5 e4 01 00       	call   c00283a8 <__muldf3>
c0009ef3:	5e                   	pop    esi
c0009ef4:	5f                   	pop    edi
c0009ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ef9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009efd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	e8 71 ed 01 00       	call   c0028c7b <__truncdfsf2>
c0009f0a:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f11:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f14:	83 c4 7c             	add    esp,0x7c
c0009f17:	5b                   	pop    ebx
c0009f18:	5e                   	pop    esi
c0009f19:	5f                   	pop    edi
c0009f1a:	5d                   	pop    ebp
c0009f1b:	c3                   	ret    

c0009f1c <calc_output_quad>:
c0009f1c:	55                   	push   ebp
c0009f1d:	57                   	push   edi
c0009f1e:	56                   	push   esi
c0009f1f:	89 c6                	mov    esi,eax
c0009f21:	53                   	push   ebx
c0009f22:	83 ec 7c             	sub    esp,0x7c
c0009f25:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f29:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f2d:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f34:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f3b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f43:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f46:	e8 55 f9 ff ff       	call   c00098a0 <int_to_fp>
c0009f4b:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f4e:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f51:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f55:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f59:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f5d:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f61:	99                   	cdq    
c0009f62:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f66:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f6a:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f6d:	31 d2                	xor    edx,edx
c0009f6f:	0f af d8             	imul   ebx,eax
c0009f72:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f7a:	0f af c7             	imul   eax,edi
c0009f7d:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f81:	29 c1                	sub    ecx,eax
c0009f83:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009f8b:	31 c0                	xor    eax,eax
c0009f8d:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009f90:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009f94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009f98:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009f9c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fa0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fa4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fa8:	89 d8                	mov    eax,ebx
c0009faa:	83 c7 10             	add    edi,0x10
c0009fad:	e8 fc f8 ff ff       	call   c00098ae <fp_to_double>
c0009fb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fb6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fba:	89 d8                	mov    eax,ebx
c0009fbc:	e8 e3 f8 ff ff       	call   c00098a4 <fp_to_int>
c0009fc1:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fc5:	52                   	push   edx
c0009fc6:	52                   	push   edx
c0009fc7:	51                   	push   ecx
c0009fc8:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fcc:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fd0:	e8 eb d6 01 00       	call   c00276c0 <__subsf3>
c0009fd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fd8:	e8 c2 ed 01 00       	call   c0028d9f <__extendsfdf2>
c0009fdd:	83 c4 10             	add    esp,0x10
c0009fe0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fe4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009fe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009fec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ff8:	e8 ab e3 01 00       	call   c00283a8 <__muldf3>
c0009ffd:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a001:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a005:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a008:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a00c:	e8 8e ed 01 00       	call   c0028d9f <__extendsfdf2>
c000a011:	83 c4 10             	add    esp,0x10
c000a014:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a018:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a01c:	52                   	push   edx
c000a01d:	50                   	push   eax
c000a01e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a022:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a026:	e8 00 dd 01 00       	call   c0027d2b <__adddf3>
c000a02b:	59                   	pop    ecx
c000a02c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a030:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a034:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a03a:	e8 60 ed 01 00       	call   c0028d9f <__extendsfdf2>
c000a03f:	83 c4 10             	add    esp,0x10
c000a042:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a046:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a04e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a052:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a056:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05a:	e8 49 e3 01 00       	call   c00283a8 <__muldf3>
c000a05f:	83 c4 10             	add    esp,0x10
c000a062:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a066:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a06a:	52                   	push   edx
c000a06b:	50                   	push   eax
c000a06c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a074:	e8 b2 dc 01 00       	call   c0027d2b <__adddf3>
c000a079:	59                   	pop    ecx
c000a07a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a07e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a082:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a088:	e8 12 ed 01 00       	call   c0028d9f <__extendsfdf2>
c000a08d:	83 c4 10             	add    esp,0x10
c000a090:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a094:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a09c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0a8:	e8 fb e2 01 00       	call   c00283a8 <__muldf3>
c000a0ad:	83 c4 10             	add    esp,0x10
c000a0b0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0b4:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b8:	52                   	push   edx
c000a0b9:	50                   	push   eax
c000a0ba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0be:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0c2:	e8 64 dc 01 00       	call   c0027d2b <__adddf3>
c000a0c7:	59                   	pop    ecx
c000a0c8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0cc:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0d0:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0d6:	e8 c4 ec 01 00       	call   c0028d9f <__extendsfdf2>
c000a0db:	83 c4 10             	add    esp,0x10
c000a0de:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0ee:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f6:	e8 ad e2 01 00       	call   c00283a8 <__muldf3>
c000a0fb:	83 c4 10             	add    esp,0x10
c000a0fe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a102:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a106:	52                   	push   edx
c000a107:	50                   	push   eax
c000a108:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a10c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a110:	e8 16 dc 01 00       	call   c0027d2b <__adddf3>
c000a115:	59                   	pop    ecx
c000a116:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a11a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a11e:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a124:	e8 76 ec 01 00       	call   c0028d9f <__extendsfdf2>
c000a129:	83 c4 10             	add    esp,0x10
c000a12c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a130:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a140:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a144:	e8 5f e2 01 00       	call   c00283a8 <__muldf3>
c000a149:	83 c4 10             	add    esp,0x10
c000a14c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a150:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a154:	52                   	push   edx
c000a155:	50                   	push   eax
c000a156:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a15e:	e8 c8 db 01 00       	call   c0027d2b <__adddf3>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a16a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a16e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a172:	0f 89 30 fe ff ff    	jns    c0009fa8 <calc_output_quad+0x8c>
c000a178:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a17c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a180:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a184:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a188:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a190:	29 c8                	sub    eax,ecx
c000a192:	99                   	cdq    
c000a193:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a197:	31 d2                	xor    edx,edx
c000a199:	0f af d8             	imul   ebx,eax
c000a19c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1a0:	40                   	inc    eax
c000a1a1:	01 cb                	add    ebx,ecx
c000a1a3:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1a8:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1ac:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1b4:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1b7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1bf:	31 c0                	xor    eax,eax
c000a1c1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1c5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1cd:	89 d8                	mov    eax,ebx
c000a1cf:	83 ee 10             	sub    esi,0x10
c000a1d2:	e8 d7 f6 ff ff       	call   c00098ae <fp_to_double>
c000a1d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1df:	89 d8                	mov    eax,ebx
c000a1e1:	e8 be f6 ff ff       	call   c00098a4 <fp_to_int>
c000a1e6:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a1ea:	52                   	push   edx
c000a1eb:	52                   	push   edx
c000a1ec:	57                   	push   edi
c000a1ed:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a1f1:	e8 ca d4 01 00       	call   c00276c0 <__subsf3>
c000a1f6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a1f9:	e8 a1 eb 01 00       	call   c0028d9f <__extendsfdf2>
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a205:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a209:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a20d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a211:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a215:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a219:	e8 8a e1 01 00       	call   c00283a8 <__muldf3>
c000a21e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a221:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a225:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a229:	e8 71 eb 01 00       	call   c0028d9f <__extendsfdf2>
c000a22e:	83 c4 10             	add    esp,0x10
c000a231:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a235:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a239:	52                   	push   edx
c000a23a:	50                   	push   eax
c000a23b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a23f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a243:	e8 e3 da 01 00       	call   c0027d2b <__adddf3>
c000a248:	59                   	pop    ecx
c000a249:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a24d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a251:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a257:	e8 43 eb 01 00       	call   c0028d9f <__extendsfdf2>
c000a25c:	83 c4 10             	add    esp,0x10
c000a25f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a263:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a267:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a26f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a273:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a277:	e8 2c e1 01 00       	call   c00283a8 <__muldf3>
c000a27c:	83 c4 10             	add    esp,0x10
c000a27f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a283:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a287:	52                   	push   edx
c000a288:	50                   	push   eax
c000a289:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a28d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a291:	e8 95 da 01 00       	call   c0027d2b <__adddf3>
c000a296:	5f                   	pop    edi
c000a297:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a29b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a29f:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2a5:	e8 f5 ea 01 00       	call   c0028d9f <__extendsfdf2>
c000a2aa:	83 c4 10             	add    esp,0x10
c000a2ad:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2b1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2bd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2c5:	e8 de e0 01 00       	call   c00283a8 <__muldf3>
c000a2ca:	83 c4 10             	add    esp,0x10
c000a2cd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2d1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d5:	52                   	push   edx
c000a2d6:	50                   	push   eax
c000a2d7:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2db:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2df:	e8 47 da 01 00       	call   c0027d2b <__adddf3>
c000a2e4:	59                   	pop    ecx
c000a2e5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a2e9:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a2ed:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a2f3:	e8 a7 ea 01 00       	call   c0028d9f <__extendsfdf2>
c000a2f8:	83 c4 10             	add    esp,0x10
c000a2fb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a303:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a30b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a30f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a313:	e8 90 e0 01 00       	call   c00283a8 <__muldf3>
c000a318:	83 c4 10             	add    esp,0x10
c000a31b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a323:	52                   	push   edx
c000a324:	50                   	push   eax
c000a325:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a329:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a32d:	e8 f9 d9 01 00       	call   c0027d2b <__adddf3>
c000a332:	5f                   	pop    edi
c000a333:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a337:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a33b:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a341:	e8 59 ea 01 00       	call   c0028d9f <__extendsfdf2>
c000a346:	83 c4 10             	add    esp,0x10
c000a349:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a34d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a351:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a355:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a359:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a35d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a361:	e8 42 e0 01 00       	call   c00283a8 <__muldf3>
c000a366:	83 c4 10             	add    esp,0x10
c000a369:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a36d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a371:	52                   	push   edx
c000a372:	50                   	push   eax
c000a373:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a377:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a37b:	e8 ab d9 01 00       	call   c0027d2b <__adddf3>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a387:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a38b:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a38f:	85 db                	test   ebx,ebx
c000a391:	0f 8f 36 fe ff ff    	jg     c000a1cd <calc_output_quad+0x2b1>
c000a397:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a39f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3a7:	e8 7f d9 01 00       	call   c0027d2b <__adddf3>
c000a3ac:	83 c4 10             	add    esp,0x10
c000a3af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3b3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3c7:	e8 dc df 01 00       	call   c00283a8 <__muldf3>
c000a3cc:	59                   	pop    ecx
c000a3cd:	5b                   	pop    ebx
c000a3ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	e8 98 e8 01 00       	call   c0028c7b <__truncdfsf2>
c000a3e3:	83 c4 10             	add    esp,0x10
c000a3e6:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a3ed:	89 06                	mov    DWORD PTR [esi],eax
c000a3ef:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a3f7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3fb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a3ff:	e8 27 d9 01 00       	call   c0027d2b <__adddf3>
c000a404:	83 c4 10             	add    esp,0x10
c000a407:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a40b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a40f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a41f:	e8 84 df 01 00       	call   c00283a8 <__muldf3>
c000a424:	5e                   	pop    esi
c000a425:	5f                   	pop    edi
c000a426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a42a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	e8 40 e8 01 00       	call   c0028c7b <__truncdfsf2>
c000a43b:	83 c4 10             	add    esp,0x10
c000a43e:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a445:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a448:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a44c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a450:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a454:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a458:	e8 ce d8 01 00       	call   c0027d2b <__adddf3>
c000a45d:	83 c4 10             	add    esp,0x10
c000a460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a478:	e8 2b df 01 00       	call   c00283a8 <__muldf3>
c000a47d:	5d                   	pop    ebp
c000a47e:	59                   	pop    ecx
c000a47f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a483:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	e8 e7 e7 01 00       	call   c0028c7b <__truncdfsf2>
c000a494:	83 c4 10             	add    esp,0x10
c000a497:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a49e:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4a1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ad:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4b1:	e8 75 d8 01 00       	call   c0027d2b <__adddf3>
c000a4b6:	83 c4 10             	add    esp,0x10
c000a4b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d1:	e8 d2 de 01 00       	call   c00283a8 <__muldf3>
c000a4d6:	5b                   	pop    ebx
c000a4d7:	5e                   	pop    esi
c000a4d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4dc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	e8 8e e7 01 00       	call   c0028c7b <__truncdfsf2>
c000a4ed:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a4f4:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a4f7:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a4fd:	5b                   	pop    ebx
c000a4fe:	5e                   	pop    esi
c000a4ff:	5f                   	pop    edi
c000a500:	5d                   	pop    ebp
c000a501:	c3                   	ret    

c000a502 <calc_output_hex>:
c000a502:	55                   	push   ebp
c000a503:	89 cd                	mov    ebp,ecx
c000a505:	57                   	push   edi
c000a506:	56                   	push   esi
c000a507:	53                   	push   ebx
c000a508:	89 c3                	mov    ebx,eax
c000a50a:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a510:	89 14 24             	mov    DWORD PTR [esp],edx
c000a513:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a51a:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a521:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a525:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a529:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a52c:	e8 6f f3 ff ff       	call   c00098a0 <int_to_fp>
c000a531:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a534:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a538:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a53b:	29 c8                	sub    eax,ecx
c000a53d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a541:	99                   	cdq    
c000a542:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a54a:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a54d:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a555:	0f af f8             	imul   edi,eax
c000a558:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a55b:	01 cf                	add    edi,ecx
c000a55d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a561:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a564:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a568:	0f af c2             	imul   eax,edx
c000a56b:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a56f:	29 c1                	sub    ecx,eax
c000a571:	31 d2                	xor    edx,edx
c000a573:	31 c0                	xor    eax,eax
c000a575:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a580:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a584:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a588:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a58c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a590:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a594:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a598:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a59c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5a0:	89 f8                	mov    eax,edi
c000a5a2:	e8 07 f3 ff ff       	call   c00098ae <fp_to_double>
c000a5a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5af:	89 f8                	mov    eax,edi
c000a5b1:	e8 ee f2 ff ff       	call   c00098a4 <fp_to_int>
c000a5b6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5ba:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5bd:	52                   	push   edx
c000a5be:	52                   	push   edx
c000a5bf:	51                   	push   ecx
c000a5c0:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5c4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5cb:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5cf:	e8 ec d0 01 00       	call   c00276c0 <__subsf3>
c000a5d4:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5d7:	e8 c3 e7 01 00       	call   c0028d9f <__extendsfdf2>
c000a5dc:	83 c4 10             	add    esp,0x10
c000a5df:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5e3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5ef:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5f7:	e8 ac dd 01 00       	call   c00283a8 <__muldf3>
c000a5fc:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a600:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a604:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a607:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a60b:	e8 8f e7 01 00       	call   c0028d9f <__extendsfdf2>
c000a610:	83 c4 10             	add    esp,0x10
c000a613:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a617:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a61b:	52                   	push   edx
c000a61c:	50                   	push   eax
c000a61d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a625:	e8 01 d7 01 00       	call   c0027d2b <__adddf3>
c000a62a:	59                   	pop    ecx
c000a62b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a62f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a633:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a639:	e8 61 e7 01 00       	call   c0028d9f <__extendsfdf2>
c000a63e:	83 c4 10             	add    esp,0x10
c000a641:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a645:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a649:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a64d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a651:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a655:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a659:	e8 4a dd 01 00       	call   c00283a8 <__muldf3>
c000a65e:	83 c4 10             	add    esp,0x10
c000a661:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a665:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a669:	52                   	push   edx
c000a66a:	50                   	push   eax
c000a66b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a66f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a673:	e8 b3 d6 01 00       	call   c0027d2b <__adddf3>
c000a678:	59                   	pop    ecx
c000a679:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a67d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a681:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a687:	e8 13 e7 01 00       	call   c0028d9f <__extendsfdf2>
c000a68c:	83 c4 10             	add    esp,0x10
c000a68f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a693:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a697:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6a7:	e8 fc dc 01 00       	call   c00283a8 <__muldf3>
c000a6ac:	83 c4 10             	add    esp,0x10
c000a6af:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6b3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b7:	52                   	push   edx
c000a6b8:	50                   	push   eax
c000a6b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6bd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6c1:	e8 65 d6 01 00       	call   c0027d2b <__adddf3>
c000a6c6:	59                   	pop    ecx
c000a6c7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6cb:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6cf:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6d5:	e8 c5 e6 01 00       	call   c0028d9f <__extendsfdf2>
c000a6da:	83 c4 10             	add    esp,0x10
c000a6dd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6e1:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6f5:	e8 ae dc 01 00       	call   c00283a8 <__muldf3>
c000a6fa:	83 c4 10             	add    esp,0x10
c000a6fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a701:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a705:	52                   	push   edx
c000a706:	50                   	push   eax
c000a707:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a70f:	e8 17 d6 01 00       	call   c0027d2b <__adddf3>
c000a714:	59                   	pop    ecx
c000a715:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a719:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a71d:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a723:	e8 77 e6 01 00       	call   c0028d9f <__extendsfdf2>
c000a728:	83 c4 10             	add    esp,0x10
c000a72b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a72f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a733:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a737:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a73b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a73f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a743:	e8 60 dc 01 00       	call   c00283a8 <__muldf3>
c000a748:	83 c4 10             	add    esp,0x10
c000a74b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a753:	52                   	push   edx
c000a754:	50                   	push   eax
c000a755:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a759:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a75d:	e8 c9 d5 01 00       	call   c0027d2b <__adddf3>
c000a762:	59                   	pop    ecx
c000a763:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a767:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a76b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a771:	e8 29 e6 01 00       	call   c0028d9f <__extendsfdf2>
c000a776:	83 c4 10             	add    esp,0x10
c000a779:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a77d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a781:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a785:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a789:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a78d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a791:	e8 12 dc 01 00       	call   c00283a8 <__muldf3>
c000a796:	83 c4 10             	add    esp,0x10
c000a799:	83 c6 18             	add    esi,0x18
c000a79c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7a4:	52                   	push   edx
c000a7a5:	50                   	push   eax
c000a7a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7aa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7ae:	e8 78 d5 01 00       	call   c0027d2b <__adddf3>
c000a7b3:	59                   	pop    ecx
c000a7b4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7b8:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7bc:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7c2:	e8 d8 e5 01 00       	call   c0028d9f <__extendsfdf2>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7e2:	e8 c1 db 01 00       	call   c00283a8 <__muldf3>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a7ee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a7f2:	52                   	push   edx
c000a7f3:	50                   	push   eax
c000a7f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a7fc:	e8 2a d5 01 00       	call   c0027d2b <__adddf3>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a808:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a80c:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a80f:	0f 89 8b fd ff ff    	jns    c000a5a0 <calc_output_hex+0x9e>
c000a815:	31 f6                	xor    esi,esi
c000a817:	31 ff                	xor    edi,edi
c000a819:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a81d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a820:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a824:	29 e9                	sub    ecx,ebp
c000a826:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a82a:	29 c8                	sub    eax,ecx
c000a82c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a82f:	99                   	cdq    
c000a830:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a834:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a837:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a83b:	0f af e8             	imul   ebp,eax
c000a83e:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a842:	40                   	inc    eax
c000a843:	01 cd                	add    ebp,ecx
c000a845:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a84a:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a84e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a852:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a856:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a859:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a85d:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a861:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a865:	89 e8                	mov    eax,ebp
c000a867:	e8 42 f0 ff ff       	call   c00098ae <fp_to_double>
c000a86c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a870:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a874:	89 e8                	mov    eax,ebp
c000a876:	e8 29 f0 ff ff       	call   c00098a4 <fp_to_int>
c000a87b:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a87f:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a882:	52                   	push   edx
c000a883:	52                   	push   edx
c000a884:	51                   	push   ecx
c000a885:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a88c:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a893:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a897:	e8 24 ce 01 00       	call   c00276c0 <__subsf3>
c000a89c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a89f:	e8 fb e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a8a4:	83 c4 10             	add    esp,0x10
c000a8a7:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8ab:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bb:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8bf:	e8 e4 da 01 00       	call   c00283a8 <__muldf3>
c000a8c4:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8cb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8cf:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8d2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8d6:	e8 c4 e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a8db:	83 c4 10             	add    esp,0x10
c000a8de:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e2:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e6:	52                   	push   edx
c000a8e7:	50                   	push   eax
c000a8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8f0:	e8 36 d4 01 00       	call   c0027d2b <__adddf3>
c000a8f5:	59                   	pop    ecx
c000a8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a8fa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a8fe:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a904:	e8 96 e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a909:	83 c4 10             	add    esp,0x10
c000a90c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a910:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a914:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a918:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a91c:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a920:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a924:	e8 7f da 01 00       	call   c00283a8 <__muldf3>
c000a929:	83 c4 10             	add    esp,0x10
c000a92c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a930:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a934:	52                   	push   edx
c000a935:	50                   	push   eax
c000a936:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a93e:	e8 e8 d3 01 00       	call   c0027d2b <__adddf3>
c000a943:	59                   	pop    ecx
c000a944:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a948:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a94c:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a952:	e8 48 e4 01 00       	call   c0028d9f <__extendsfdf2>
c000a957:	83 c4 10             	add    esp,0x10
c000a95a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a95e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a962:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a966:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a96a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a96e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a972:	e8 31 da 01 00       	call   c00283a8 <__muldf3>
c000a977:	83 c4 10             	add    esp,0x10
c000a97a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a97e:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a982:	52                   	push   edx
c000a983:	50                   	push   eax
c000a984:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a988:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a98c:	e8 9a d3 01 00       	call   c0027d2b <__adddf3>
c000a991:	59                   	pop    ecx
c000a992:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a996:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a99a:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9a0:	e8 fa e3 01 00       	call   c0028d9f <__extendsfdf2>
c000a9a5:	83 c4 10             	add    esp,0x10
c000a9a8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9ac:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9b8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9bc:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9c0:	e8 e3 d9 01 00       	call   c00283a8 <__muldf3>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9d0:	52                   	push   edx
c000a9d1:	50                   	push   eax
c000a9d2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9d6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9da:	e8 4c d3 01 00       	call   c0027d2b <__adddf3>
c000a9df:	59                   	pop    ecx
c000a9e0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9e4:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a9e8:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a9ee:	e8 ac e3 01 00       	call   c0028d9f <__extendsfdf2>
c000a9f3:	83 c4 10             	add    esp,0x10
c000a9f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa06:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa0e:	e8 95 d9 01 00       	call   c00283a8 <__muldf3>
c000aa13:	83 c4 10             	add    esp,0x10
c000aa16:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa1a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa1e:	52                   	push   edx
c000aa1f:	50                   	push   eax
c000aa20:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa24:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa28:	e8 fe d2 01 00       	call   c0027d2b <__adddf3>
c000aa2d:	59                   	pop    ecx
c000aa2e:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa32:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa36:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa3c:	e8 5e e3 01 00       	call   c0028d9f <__extendsfdf2>
c000aa41:	83 c4 10             	add    esp,0x10
c000aa44:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa48:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa54:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa58:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa5c:	e8 47 d9 01 00       	call   c00283a8 <__muldf3>
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	83 eb 18             	sub    ebx,0x18
c000aa67:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa6b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa6f:	52                   	push   edx
c000aa70:	50                   	push   eax
c000aa71:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa75:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa79:	e8 ad d2 01 00       	call   c0027d2b <__adddf3>
c000aa7e:	59                   	pop    ecx
c000aa7f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa83:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aa87:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aa8d:	e8 0d e3 01 00       	call   c0028d9f <__extendsfdf2>
c000aa92:	83 c4 10             	add    esp,0x10
c000aa95:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa99:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aaa5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaa9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aaad:	e8 f6 d8 01 00       	call   c00283a8 <__muldf3>
c000aab2:	83 c4 10             	add    esp,0x10
c000aab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aabd:	52                   	push   edx
c000aabe:	50                   	push   eax
c000aabf:	57                   	push   edi
c000aac0:	56                   	push   esi
c000aac1:	e8 65 d2 01 00       	call   c0027d2b <__adddf3>
c000aac6:	83 c4 10             	add    esp,0x10
c000aac9:	89 c6                	mov    esi,eax
c000aacb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aace:	89 d7                	mov    edi,edx
c000aad0:	85 ed                	test   ebp,ebp
c000aad2:	0f 8f 8d fd ff ff    	jg     c000a865 <calc_output_hex+0x363>
c000aad8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aae8:	e8 3e d2 01 00       	call   c0027d2b <__adddf3>
c000aaed:	83 c4 10             	add    esp,0x10
c000aaf0:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaf3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aaf7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aafb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab07:	e8 9c d8 01 00       	call   c00283a8 <__muldf3>
c000ab0c:	59                   	pop    ecx
c000ab0d:	5b                   	pop    ebx
c000ab0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	e8 58 e1 01 00       	call   c0028c7b <__truncdfsf2>
c000ab23:	83 c4 10             	add    esp,0x10
c000ab26:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab2d:	89 03                	mov    DWORD PTR [ebx],eax
c000ab2f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab33:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab3f:	e8 e7 d1 01 00       	call   c0027d2b <__adddf3>
c000ab44:	83 c4 10             	add    esp,0x10
c000ab47:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab4a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab5e:	e8 45 d8 01 00       	call   c00283a8 <__muldf3>
c000ab63:	5d                   	pop    ebp
c000ab64:	59                   	pop    ecx
c000ab65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	e8 01 e1 01 00       	call   c0028c7b <__truncdfsf2>
c000ab7a:	83 c4 10             	add    esp,0x10
c000ab7d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab84:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ab87:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000ab8f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ab97:	e8 8f d1 01 00       	call   c0027d2b <__adddf3>
c000ab9c:	83 c4 10             	add    esp,0x10
c000ab9f:	89 04 24             	mov    DWORD PTR [esp],eax
c000aba2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aba6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb6:	e8 ed d7 01 00       	call   c00283a8 <__muldf3>
c000abbb:	5b                   	pop    ebx
c000abbc:	5d                   	pop    ebp
c000abbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abc1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	e8 a9 e0 01 00       	call   c0028c7b <__truncdfsf2>
c000abd2:	83 c4 10             	add    esp,0x10
c000abd5:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abdc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abdf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abe7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abeb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000abef:	e8 37 d1 01 00       	call   c0027d2b <__adddf3>
c000abf4:	83 c4 10             	add    esp,0x10
c000abf7:	89 04 24             	mov    DWORD PTR [esp],eax
c000abfa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abfe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac02:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac06:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac0e:	e8 95 d7 01 00       	call   c00283a8 <__muldf3>
c000ac13:	59                   	pop    ecx
c000ac14:	5b                   	pop    ebx
c000ac15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	e8 51 e0 01 00       	call   c0028c7b <__truncdfsf2>
c000ac2a:	83 c4 10             	add    esp,0x10
c000ac2d:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac34:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac47:	e8 df d0 01 00       	call   c0027d2b <__adddf3>
c000ac4c:	83 c4 10             	add    esp,0x10
c000ac4f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac52:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac62:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac66:	e8 3d d7 01 00       	call   c00283a8 <__muldf3>
c000ac6b:	5d                   	pop    ebp
c000ac6c:	59                   	pop    ecx
c000ac6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac71:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	e8 f9 df 01 00       	call   c0028c7b <__truncdfsf2>
c000ac82:	83 c4 10             	add    esp,0x10
c000ac85:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac8c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ac8f:	57                   	push   edi
c000ac90:	56                   	push   esi
c000ac91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac95:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac99:	e8 8d d0 01 00       	call   c0027d2b <__adddf3>
c000ac9e:	83 c4 10             	add    esp,0x10
c000aca1:	89 04 24             	mov    DWORD PTR [esp],eax
c000aca4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aca8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb8:	e8 eb d6 01 00       	call   c00283a8 <__muldf3>
c000acbd:	5b                   	pop    ebx
c000acbe:	5e                   	pop    esi
c000acbf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acc3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	e8 a7 df 01 00       	call   c0028c7b <__truncdfsf2>
c000acd4:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acdb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acde:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ace4:	5b                   	pop    ebx
c000ace5:	5e                   	pop    esi
c000ace6:	5f                   	pop    edi
c000ace7:	5d                   	pop    ebp
c000ace8:	c3                   	ret    

c000ace9 <sinc_reset>:
c000ace9:	56                   	push   esi
c000acea:	53                   	push   ebx
c000aceb:	51                   	push   ecx
c000acec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf0:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000acf3:	85 db                	test   ebx,ebx
c000acf5:	74 59                	je     c000ad50 <sinc_reset+0x67>
c000acf7:	31 d2                	xor    edx,edx
c000acf9:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad00:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad03:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad06:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad0d:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad14:	31 c0                	xor    eax,eax
c000ad16:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad1c:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad1f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad22:	52                   	push   edx
c000ad23:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad26:	c1 e0 02             	shl    eax,0x2
c000ad29:	50                   	push   eax
c000ad2a:	6a 00                	push   0x0
c000ad2c:	56                   	push   esi
c000ad2d:	e8 1e 5a ff ff       	call   c0000750 <memset>
c000ad32:	83 c4 0c             	add    esp,0xc
c000ad35:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad38:	c1 e0 02             	shl    eax,0x2
c000ad3b:	50                   	push   eax
c000ad3c:	68 aa 00 00 00       	push   0xaa
c000ad41:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad44:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad47:	50                   	push   eax
c000ad48:	e8 03 5a ff ff       	call   c0000750 <memset>
c000ad4d:	83 c4 10             	add    esp,0x10
c000ad50:	58                   	pop    eax
c000ad51:	5b                   	pop    ebx
c000ad52:	5e                   	pop    esi
c000ad53:	c3                   	ret    

c000ad54 <calc_output_multi>:
c000ad54:	55                   	push   ebp
c000ad55:	57                   	push   edi
c000ad56:	56                   	push   esi
c000ad57:	89 c6                	mov    esi,eax
c000ad59:	53                   	push   ebx
c000ad5a:	83 ec 4c             	sub    esp,0x4c
c000ad5d:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad61:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad65:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad69:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad6d:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad79:	8d 46 44             	lea    eax,[esi+0x44]
c000ad7c:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad7f:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ad85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ad89:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ad8c:	e8 0f eb ff ff       	call   c00098a0 <int_to_fp>
c000ad91:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ad94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ad98:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ad9c:	99                   	cdq    
c000ad9d:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ada1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ada5:	0f af d0             	imul   edx,eax
c000ada8:	0f af c3             	imul   eax,ebx
c000adab:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adaf:	29 c1                	sub    ecx,eax
c000adb1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adb9:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adc0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adc4:	57                   	push   edi
c000adc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000adc9:	6a 00                	push   0x0
c000adcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adcf:	e8 7c 59 ff ff       	call   c0000750 <memset>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000addb:	89 df                	mov    edi,ebx
c000addd:	e8 cc ea ff ff       	call   c00098ae <fp_to_double>
c000ade2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ade6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000adea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adee:	e8 b1 ea ff ff       	call   c00098a4 <fp_to_int>
c000adf3:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000adf6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000adf9:	51                   	push   ecx
c000adfa:	51                   	push   ecx
c000adfb:	55                   	push   ebp
c000adfc:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae00:	e8 bb c8 01 00       	call   c00276c0 <__subsf3>
c000ae05:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae08:	e8 92 df 01 00       	call   c0028d9f <__extendsfdf2>
c000ae0d:	83 c4 10             	add    esp,0x10
c000ae10:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae14:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae20:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae28:	e8 7b d5 01 00       	call   c00283a8 <__muldf3>
c000ae2d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae34:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae38:	e8 62 df 01 00       	call   c0028d9f <__extendsfdf2>
c000ae3d:	83 c4 10             	add    esp,0x10
c000ae40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae48:	52                   	push   edx
c000ae49:	50                   	push   eax
c000ae4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae52:	e8 d4 ce 01 00       	call   c0027d2b <__adddf3>
c000ae57:	83 c4 10             	add    esp,0x10
c000ae5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae5e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae62:	89 f8                	mov    eax,edi
c000ae64:	b9 08 00 00 00       	mov    ecx,0x8
c000ae69:	99                   	cdq    
c000ae6a:	f7 f9                	idiv   ecx
c000ae6c:	4a                   	dec    edx
c000ae6d:	83 fa 06             	cmp    edx,0x6
c000ae70:	77 07                	ja     c000ae79 <calc_output_multi+0x125>
c000ae72:	ff 24 95 a4 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd595c]
c000ae79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae7c:	4f                   	dec    edi
c000ae7d:	83 ec 0c             	sub    esp,0xc
c000ae80:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae87:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae8e:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae92:	e8 08 df 01 00       	call   c0028d9f <__extendsfdf2>
c000ae97:	83 c4 10             	add    esp,0x10
c000ae9a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae9e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aea2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aea6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeb2:	e8 f1 d4 01 00       	call   c00283a8 <__muldf3>
c000aeb7:	83 c4 10             	add    esp,0x10
c000aeba:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aebe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec2:	52                   	push   edx
c000aec3:	50                   	push   eax
c000aec4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aec7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeca:	e8 5c ce 01 00       	call   c0027d2b <__adddf3>
c000aecf:	83 c4 10             	add    esp,0x10
c000aed2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aed5:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aed8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aedb:	4f                   	dec    edi
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aee6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeed:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aef1:	e8 a9 de 01 00       	call   c0028d9f <__extendsfdf2>
c000aef6:	83 c4 10             	add    esp,0x10
c000aef9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aefd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af09:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af0d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af11:	e8 92 d4 01 00       	call   c00283a8 <__muldf3>
c000af16:	83 c4 10             	add    esp,0x10
c000af19:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af1d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af21:	52                   	push   edx
c000af22:	50                   	push   eax
c000af23:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af26:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af29:	e8 fd cd 01 00       	call   c0027d2b <__adddf3>
c000af2e:	83 c4 10             	add    esp,0x10
c000af31:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af34:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af37:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af3a:	4f                   	dec    edi
c000af3b:	83 ec 0c             	sub    esp,0xc
c000af3e:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af45:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af4c:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af50:	e8 4a de 01 00       	call   c0028d9f <__extendsfdf2>
c000af55:	83 c4 10             	add    esp,0x10
c000af58:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af5c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af68:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af6c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af70:	e8 33 d4 01 00       	call   c00283a8 <__muldf3>
c000af75:	83 c4 10             	add    esp,0x10
c000af78:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af7c:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af80:	52                   	push   edx
c000af81:	50                   	push   eax
c000af82:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af85:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af88:	e8 9e cd 01 00       	call   c0027d2b <__adddf3>
c000af8d:	83 c4 10             	add    esp,0x10
c000af90:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af93:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af96:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af99:	4f                   	dec    edi
c000af9a:	83 ec 0c             	sub    esp,0xc
c000af9d:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afa4:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afab:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afaf:	e8 eb dd 01 00       	call   c0028d9f <__extendsfdf2>
c000afb4:	83 c4 10             	add    esp,0x10
c000afb7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afc7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afcf:	e8 d4 d3 01 00       	call   c00283a8 <__muldf3>
c000afd4:	83 c4 10             	add    esp,0x10
c000afd7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afdb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afdf:	52                   	push   edx
c000afe0:	50                   	push   eax
c000afe1:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afe4:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afe7:	e8 3f cd 01 00       	call   c0027d2b <__adddf3>
c000afec:	83 c4 10             	add    esp,0x10
c000afef:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aff2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aff5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aff8:	4f                   	dec    edi
c000aff9:	83 ec 0c             	sub    esp,0xc
c000affc:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b003:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b00a:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b00e:	e8 8c dd 01 00       	call   c0028d9f <__extendsfdf2>
c000b013:	83 c4 10             	add    esp,0x10
c000b016:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b01a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b01e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b02e:	e8 75 d3 01 00       	call   c00283a8 <__muldf3>
c000b033:	83 c4 10             	add    esp,0x10
c000b036:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b03a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b03e:	52                   	push   edx
c000b03f:	50                   	push   eax
c000b040:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b043:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b046:	e8 e0 cc 01 00       	call   c0027d2b <__adddf3>
c000b04b:	83 c4 10             	add    esp,0x10
c000b04e:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b051:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b057:	4f                   	dec    edi
c000b058:	83 ec 0c             	sub    esp,0xc
c000b05b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b062:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b069:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06d:	e8 2d dd 01 00       	call   c0028d9f <__extendsfdf2>
c000b072:	83 c4 10             	add    esp,0x10
c000b075:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b079:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b07d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b081:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b085:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b089:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b08d:	e8 16 d3 01 00       	call   c00283a8 <__muldf3>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b099:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b09d:	52                   	push   edx
c000b09e:	50                   	push   eax
c000b09f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a5:	e8 81 cc 01 00       	call   c0027d2b <__adddf3>
c000b0aa:	83 c4 10             	add    esp,0x10
c000b0ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0b0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0b6:	4f                   	dec    edi
c000b0b7:	83 ec 0c             	sub    esp,0xc
c000b0ba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cc:	e8 ce dc 01 00       	call   c0028d9f <__extendsfdf2>
c000b0d1:	83 c4 10             	add    esp,0x10
c000b0d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0e8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0ec:	e8 b7 d2 01 00       	call   c00283a8 <__muldf3>
c000b0f1:	83 c4 10             	add    esp,0x10
c000b0f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0fc:	52                   	push   edx
c000b0fd:	50                   	push   eax
c000b0fe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b101:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b104:	e8 22 cc 01 00       	call   c0027d2b <__adddf3>
c000b109:	83 c4 10             	add    esp,0x10
c000b10c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b112:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 6f dc 01 00       	call   c0028d9f <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b137:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b147:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b14b:	e8 58 d2 01 00       	call   c00283a8 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b157:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 c3 cb 01 00       	call   c0027d2b <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	85 ff                	test   edi,edi
c000b173:	0f 8f e9 fc ff ff    	jg     c000ae62 <calc_output_multi+0x10e>
c000b179:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b17d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b181:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b185:	0f 89 4c fc ff ff    	jns    c000add7 <calc_output_multi+0x83>
c000b18b:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b18f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b193:	29 c8                	sub    eax,ecx
c000b195:	99                   	cdq    
c000b196:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b19a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b19e:	0f af d0             	imul   edx,eax
c000b1a1:	40                   	inc    eax
c000b1a2:	01 d1                	add    ecx,edx
c000b1a4:	0f af c3             	imul   eax,ebx
c000b1a7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1ab:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1b2:	55                   	push   ebp
c000b1b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1b7:	6a 00                	push   0x0
c000b1b9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1bd:	e8 8e 55 ff ff       	call   c0000750 <memset>
c000b1c2:	83 c4 10             	add    esp,0x10
c000b1c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1c9:	e8 e0 e6 ff ff       	call   c00098ae <fp_to_double>
c000b1ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1da:	e8 c5 e6 ff ff       	call   c00098a4 <fp_to_int>
c000b1df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1e2:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b1e5:	57                   	push   edi
c000b1e6:	57                   	push   edi
c000b1e7:	89 df                	mov    edi,ebx
c000b1e9:	55                   	push   ebp
c000b1ea:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b1ee:	e8 cd c4 01 00       	call   c00276c0 <__subsf3>
c000b1f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b1f6:	e8 a4 db 01 00       	call   c0028d9f <__extendsfdf2>
c000b1fb:	83 c4 10             	add    esp,0x10
c000b1fe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b202:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b206:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b20e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b212:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b216:	e8 8d d1 01 00       	call   c00283a8 <__muldf3>
c000b21b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b21e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b222:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b226:	e8 74 db 01 00       	call   c0028d9f <__extendsfdf2>
c000b22b:	83 c4 10             	add    esp,0x10
c000b22e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b232:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b23c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b240:	e8 e6 ca 01 00       	call   c0027d2b <__adddf3>
c000b245:	83 c4 10             	add    esp,0x10
c000b248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b24c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b250:	89 f8                	mov    eax,edi
c000b252:	b9 08 00 00 00       	mov    ecx,0x8
c000b257:	99                   	cdq    
c000b258:	f7 f9                	idiv   ecx
c000b25a:	4a                   	dec    edx
c000b25b:	83 fa 06             	cmp    edx,0x6
c000b25e:	77 07                	ja     c000b267 <calc_output_multi+0x513>
c000b260:	ff 24 95 c0 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5940]
c000b267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b26b:	4f                   	dec    edi
c000b26c:	83 ec 0c             	sub    esp,0xc
c000b26f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b276:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b27d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b281:	e8 19 db 01 00       	call   c0028d9f <__extendsfdf2>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b291:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b295:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b299:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b29d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2a1:	e8 02 d1 01 00       	call   c00283a8 <__muldf3>
c000b2a6:	83 c4 10             	add    esp,0x10
c000b2a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b1:	52                   	push   edx
c000b2b2:	50                   	push   eax
c000b2b3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2b6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2b9:	e8 6d ca 01 00       	call   c0027d2b <__adddf3>
c000b2be:	83 c4 10             	add    esp,0x10
c000b2c1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2c4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2cb:	4f                   	dec    edi
c000b2cc:	83 ec 0c             	sub    esp,0xc
c000b2cf:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2d6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2dd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2e1:	e8 b9 da 01 00       	call   c0028d9f <__extendsfdf2>
c000b2e6:	83 c4 10             	add    esp,0x10
c000b2e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b301:	e8 a2 d0 01 00       	call   c00283a8 <__muldf3>
c000b306:	83 c4 10             	add    esp,0x10
c000b309:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b30d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b311:	52                   	push   edx
c000b312:	50                   	push   eax
c000b313:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b316:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b319:	e8 0d ca 01 00       	call   c0027d2b <__adddf3>
c000b31e:	83 c4 10             	add    esp,0x10
c000b321:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b324:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b327:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b32b:	4f                   	dec    edi
c000b32c:	83 ec 0c             	sub    esp,0xc
c000b32f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b332:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b336:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b33d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b341:	e8 59 da 01 00       	call   c0028d9f <__extendsfdf2>
c000b346:	83 c4 10             	add    esp,0x10
c000b349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b34d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b351:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b355:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b359:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b35d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b361:	e8 42 d0 01 00       	call   c00283a8 <__muldf3>
c000b366:	83 c4 10             	add    esp,0x10
c000b369:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b36d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b371:	52                   	push   edx
c000b372:	50                   	push   eax
c000b373:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b376:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b379:	e8 ad c9 01 00       	call   c0027d2b <__adddf3>
c000b37e:	83 c4 10             	add    esp,0x10
c000b381:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b384:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4f                   	dec    edi
c000b38c:	83 ec 0c             	sub    esp,0xc
c000b38f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b392:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b396:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b39d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3a1:	e8 f9 d9 01 00       	call   c0028d9f <__extendsfdf2>
c000b3a6:	83 c4 10             	add    esp,0x10
c000b3a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3c1:	e8 e2 cf 01 00       	call   c00283a8 <__muldf3>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3d1:	52                   	push   edx
c000b3d2:	50                   	push   eax
c000b3d3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3d6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3d9:	e8 4d c9 01 00       	call   c0027d2b <__adddf3>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3e4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3eb:	4f                   	dec    edi
c000b3ec:	83 ec 0c             	sub    esp,0xc
c000b3ef:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3f6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3fd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b401:	e8 99 d9 01 00       	call   c0028d9f <__extendsfdf2>
c000b406:	83 c4 10             	add    esp,0x10
c000b409:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b411:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b415:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b419:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b41d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b421:	e8 82 cf 01 00       	call   c00283a8 <__muldf3>
c000b426:	83 c4 10             	add    esp,0x10
c000b429:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b42d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b431:	52                   	push   edx
c000b432:	50                   	push   eax
c000b433:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b436:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b439:	e8 ed c8 01 00       	call   c0027d2b <__adddf3>
c000b43e:	83 c4 10             	add    esp,0x10
c000b441:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b444:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b447:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b44b:	4f                   	dec    edi
c000b44c:	83 ec 0c             	sub    esp,0xc
c000b44f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b456:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b45d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b461:	e8 39 d9 01 00       	call   c0028d9f <__extendsfdf2>
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b46d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b471:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b479:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b47d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b481:	e8 22 cf 01 00       	call   c00283a8 <__muldf3>
c000b486:	83 c4 10             	add    esp,0x10
c000b489:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b48d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b491:	52                   	push   edx
c000b492:	50                   	push   eax
c000b493:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b496:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b499:	e8 8d c8 01 00       	call   c0027d2b <__adddf3>
c000b49e:	83 c4 10             	add    esp,0x10
c000b4a1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4a4:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ab:	4f                   	dec    edi
c000b4ac:	83 ec 0c             	sub    esp,0xc
c000b4af:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4b6:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4bd:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4c1:	e8 d9 d8 01 00       	call   c0028d9f <__extendsfdf2>
c000b4c6:	83 c4 10             	add    esp,0x10
c000b4c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4e1:	e8 c2 ce 01 00       	call   c00283a8 <__muldf3>
c000b4e6:	83 c4 10             	add    esp,0x10
c000b4e9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4f1:	52                   	push   edx
c000b4f2:	50                   	push   eax
c000b4f3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4f6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4f9:	e8 2d c8 01 00       	call   c0027d2b <__adddf3>
c000b4fe:	83 c4 10             	add    esp,0x10
c000b501:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b504:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b507:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50b:	4f                   	dec    edi
c000b50c:	83 ec 0c             	sub    esp,0xc
c000b50f:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b512:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b516:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b51d:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b521:	e8 79 d8 01 00       	call   c0028d9f <__extendsfdf2>
c000b526:	83 c4 10             	add    esp,0x10
c000b529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b52d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b531:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b535:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b539:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b53d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b541:	e8 62 ce 01 00       	call   c00283a8 <__muldf3>
c000b546:	83 c4 10             	add    esp,0x10
c000b549:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b54d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b551:	52                   	push   edx
c000b552:	50                   	push   eax
c000b553:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b556:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b559:	e8 cd c7 01 00       	call   c0027d2b <__adddf3>
c000b55e:	83 c4 10             	add    esp,0x10
c000b561:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b564:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b567:	85 ff                	test   edi,edi
c000b569:	0f 8f e1 fc ff ff    	jg     c000b250 <calc_output_multi+0x4fc>
c000b56f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b573:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b577:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b57b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b580:	0f 8f 3f fc ff ff    	jg     c000b1c5 <calc_output_multi+0x471>
c000b586:	be 08 00 00 00       	mov    esi,0x8
c000b58b:	89 d8                	mov    eax,ebx
c000b58d:	99                   	cdq    
c000b58e:	f7 fe                	idiv   esi
c000b590:	4a                   	dec    edx
c000b591:	83 fa 06             	cmp    edx,0x6
c000b594:	77 07                	ja     c000b59d <calc_output_multi+0x849>
c000b596:	ff 24 95 dc a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5924]
c000b59d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5a1:	4b                   	dec    ebx
c000b5a2:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5a6:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5b4:	e8 72 c7 01 00       	call   c0027d2b <__adddf3>
c000b5b9:	83 c4 10             	add    esp,0x10
c000b5bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5d4:	e8 cf cd 01 00       	call   c00283a8 <__muldf3>
c000b5d9:	5d                   	pop    ebp
c000b5da:	59                   	pop    ecx
c000b5db:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5df:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	e8 8b d6 01 00       	call   c0028c7b <__truncdfsf2>
c000b5f0:	83 c4 10             	add    esp,0x10
c000b5f3:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5f7:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5fe:	4b                   	dec    ebx
c000b5ff:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b603:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b606:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b60a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b60e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b611:	e8 15 c7 01 00       	call   c0027d2b <__adddf3>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b621:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b625:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b629:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b62d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b631:	e8 72 cd 01 00       	call   c00283a8 <__muldf3>
c000b636:	59                   	pop    ecx
c000b637:	5f                   	pop    edi
c000b638:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b63c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b640:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	e8 2e d6 01 00       	call   c0028c7b <__truncdfsf2>
c000b64d:	83 c4 10             	add    esp,0x10
c000b650:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b654:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b657:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65b:	4b                   	dec    ebx
c000b65c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b660:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b667:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b66b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b66e:	e8 b8 c6 01 00       	call   c0027d2b <__adddf3>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b67a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b682:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b686:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b68e:	e8 15 cd 01 00       	call   c00283a8 <__muldf3>
c000b693:	5f                   	pop    edi
c000b694:	5d                   	pop    ebp
c000b695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	e8 d1 d5 01 00       	call   c0028c7b <__truncdfsf2>
c000b6aa:	83 c4 10             	add    esp,0x10
c000b6ad:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6b1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6b8:	4b                   	dec    ebx
c000b6b9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6bd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6c4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6c8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6cb:	e8 5b c6 01 00       	call   c0027d2b <__adddf3>
c000b6d0:	83 c4 10             	add    esp,0x10
c000b6d3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6eb:	e8 b8 cc 01 00       	call   c00283a8 <__muldf3>
c000b6f0:	5d                   	pop    ebp
c000b6f1:	59                   	pop    ecx
c000b6f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	e8 74 d5 01 00       	call   c0028c7b <__truncdfsf2>
c000b707:	83 c4 10             	add    esp,0x10
c000b70a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b70e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b711:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b715:	4b                   	dec    ebx
c000b716:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b71a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b71d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b721:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b725:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b728:	e8 fe c5 01 00       	call   c0027d2b <__adddf3>
c000b72d:	83 c4 10             	add    esp,0x10
c000b730:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b734:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b73c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b748:	e8 5b cc 01 00       	call   c00283a8 <__muldf3>
c000b74d:	59                   	pop    ecx
c000b74e:	5f                   	pop    edi
c000b74f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b753:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b757:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	e8 17 d5 01 00       	call   c0028c7b <__truncdfsf2>
c000b764:	83 c4 10             	add    esp,0x10
c000b767:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b76b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b76e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b772:	4b                   	dec    ebx
c000b773:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b777:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b77a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b77e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b782:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b785:	e8 a1 c5 01 00       	call   c0027d2b <__adddf3>
c000b78a:	83 c4 10             	add    esp,0x10
c000b78d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b791:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b799:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7a5:	e8 fe cb 01 00       	call   c00283a8 <__muldf3>
c000b7aa:	5f                   	pop    edi
c000b7ab:	5d                   	pop    ebp
c000b7ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	e8 ba d4 01 00       	call   c0028c7b <__truncdfsf2>
c000b7c1:	83 c4 10             	add    esp,0x10
c000b7c4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7c8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	4b                   	dec    ebx
c000b7d0:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7d4:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7db:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7df:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7e2:	e8 44 c5 01 00       	call   c0027d2b <__adddf3>
c000b7e7:	83 c4 10             	add    esp,0x10
c000b7ea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b802:	e8 a1 cb 01 00       	call   c00283a8 <__muldf3>
c000b807:	5d                   	pop    ebp
c000b808:	59                   	pop    ecx
c000b809:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b80d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b811:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	e8 5d d4 01 00       	call   c0028c7b <__truncdfsf2>
c000b81e:	83 c4 10             	add    esp,0x10
c000b821:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b825:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82c:	4b                   	dec    ebx
c000b82d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b831:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b834:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b838:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b83c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b83f:	e8 e7 c4 01 00       	call   c0027d2b <__adddf3>
c000b844:	83 c4 10             	add    esp,0x10
c000b847:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b84b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b84f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b857:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b85f:	e8 44 cb 01 00       	call   c00283a8 <__muldf3>
c000b864:	59                   	pop    ecx
c000b865:	5f                   	pop    edi
c000b866:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	e8 00 d4 01 00       	call   c0028c7b <__truncdfsf2>
c000b87b:	83 c4 10             	add    esp,0x10
c000b87e:	85 db                	test   ebx,ebx
c000b880:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b884:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b887:	0f 8f fe fc ff ff    	jg     c000b58b <calc_output_multi+0x837>
c000b88d:	83 c4 4c             	add    esp,0x4c
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    

c000b895 <double_to_fp>:
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 00 00 b0 40       	push   0x40b00000
c000b89d:	6a 00                	push   0x0
c000b89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a7:	e8 fc ca 01 00       	call   c00283a8 <__muldf3>
c000b8ac:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8b0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8b4:	83 c4 1c             	add    esp,0x1c
c000b8b7:	e9 74 d5 01 00       	jmp    c0028e30 <lrint>

c000b8bc <prepare_data>:
c000b8bc:	55                   	push   ebp
c000b8bd:	57                   	push   edi
c000b8be:	56                   	push   esi
c000b8bf:	53                   	push   ebx
c000b8c0:	83 ec 1c             	sub    esp,0x1c
c000b8c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8c7:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8cb:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8cf:	0f 89 57 01 00 00    	jns    c000ba2c <prepare_data+0x170>
c000b8d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8d8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8db:	85 d2                	test   edx,edx
c000b8dd:	75 0d                	jne    c000b8ec <prepare_data+0x30>
c000b8df:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8e2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b8e5:	29 d0                	sub    eax,edx
c000b8e7:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b8ea:	eb 44                	jmp    c000b930 <prepare_data+0x74>
c000b8ec:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b8ef:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b8f2:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b8f5:	39 c1                	cmp    ecx,eax
c000b8f7:	7d 04                	jge    c000b8fd <prepare_data+0x41>
c000b8f9:	29 d0                	sub    eax,edx
c000b8fb:	eb 2d                	jmp    c000b92a <prepare_data+0x6e>
c000b8fd:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b903:	29 d7                	sub    edi,edx
c000b905:	01 f7                	add    edi,esi
c000b907:	51                   	push   ecx
c000b908:	29 f2                	sub    edx,esi
c000b90a:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b911:	8d 14 90             	lea    edx,[eax+edx*4]
c000b914:	51                   	push   ecx
c000b915:	52                   	push   edx
c000b916:	50                   	push   eax
c000b917:	e8 6c 4d ff ff       	call   c0000688 <memmove>
c000b91c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b91f:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b922:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b925:	29 f0                	sub    eax,esi
c000b927:	83 c4 10             	add    esp,0x10
c000b92a:	29 f0                	sub    eax,esi
c000b92c:	79 02                	jns    c000b930 <prepare_data+0x74>
c000b92e:	31 c0                	xor    eax,eax
c000b930:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b933:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b936:	29 ef                	sub    edi,ebp
c000b938:	39 c7                	cmp    edi,eax
c000b93a:	7e 02                	jle    c000b93e <prepare_data+0x82>
c000b93c:	89 c7                	mov    edi,eax
c000b93e:	89 f8                	mov    eax,edi
c000b940:	99                   	cdq    
c000b941:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b944:	b8 15 00 00 00       	mov    eax,0x15
c000b949:	29 d7                	sub    edi,edx
c000b94b:	0f 88 dd 00 00 00    	js     c000ba2e <prepare_data+0x172>
c000b951:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b954:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b957:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b95a:	0f 8f ce 00 00 00    	jg     c000ba2e <prepare_data+0x172>
c000b960:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b966:	50                   	push   eax
c000b967:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b96e:	50                   	push   eax
c000b96f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b973:	8b 00                	mov    eax,DWORD PTR [eax]
c000b975:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b978:	50                   	push   eax
c000b979:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b97c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b980:	50                   	push   eax
c000b981:	e8 c0 4c ff ff       	call   c0000646 <memcpy>
c000b986:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b989:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b98c:	01 fd                	add    ebp,edi
c000b98e:	01 f9                	add    ecx,edi
c000b990:	83 c4 10             	add    esp,0x10
c000b993:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b996:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b999:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b99c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9a0:	0f 85 86 00 00 00    	jne    c000ba2c <prepare_data+0x170>
c000b9a6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9a9:	89 e8                	mov    eax,ebp
c000b9ab:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9ae:	29 c8                	sub    eax,ecx
c000b9b0:	39 f8                	cmp    eax,edi
c000b9b2:	7d 78                	jge    c000ba2c <prepare_data+0x170>
c000b9b4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9b8:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9bc:	74 6e                	je     c000ba2c <prepare_data+0x170>
c000b9be:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9c1:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9c5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9c8:	29 ef                	sub    edi,ebp
c000b9ca:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9ce:	7c 29                	jl     c000b9f9 <prepare_data+0x13d>
c000b9d0:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9d3:	29 f1                	sub    ecx,esi
c000b9d5:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9dc:	55                   	push   ebp
c000b9dd:	50                   	push   eax
c000b9de:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9e1:	50                   	push   eax
c000b9e2:	52                   	push   edx
c000b9e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9e7:	e8 9c 4c ff ff       	call   c0000688 <memmove>
c000b9ec:	83 c4 10             	add    esp,0x10
c000b9ef:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b9f2:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b9f5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b9fc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b9ff:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba02:	83 c6 05             	add    esi,0x5
c000ba05:	78 07                	js     c000ba0e <prepare_data+0x152>
c000ba07:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0a:	39 cf                	cmp    edi,ecx
c000ba0c:	7e 04                	jle    c000ba12 <prepare_data+0x156>
c000ba0e:	89 ce                	mov    esi,ecx
c000ba10:	29 c6                	sub    esi,eax
c000ba12:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba15:	51                   	push   ecx
c000ba16:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba1d:	51                   	push   ecx
c000ba1e:	6a 00                	push   0x0
c000ba20:	50                   	push   eax
c000ba21:	e8 2a 4d ff ff       	call   c0000750 <memset>
c000ba26:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba29:	83 c4 10             	add    esp,0x10
c000ba2c:	31 c0                	xor    eax,eax
c000ba2e:	83 c4 1c             	add    esp,0x1c
c000ba31:	5b                   	pop    ebx
c000ba32:	5e                   	pop    esi
c000ba33:	5f                   	pop    edi
c000ba34:	5d                   	pop    ebp
c000ba35:	c3                   	ret    

c000ba36 <sinc_multichan_vari_process>:
c000ba36:	55                   	push   ebp
c000ba37:	ba 05 00 00 00       	mov    edx,0x5
c000ba3c:	57                   	push   edi
c000ba3d:	56                   	push   esi
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 4c             	sub    esp,0x4c
c000ba42:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba46:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba4a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba4d:	85 db                	test   ebx,ebx
c000ba4f:	0f 84 9b 06 00 00    	je     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000ba55:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba58:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba5b:	0f af c5             	imul   eax,ebp
c000ba5e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba61:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba64:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba6b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba72:	0f af c5             	imul   eax,ebp
c000ba75:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba78:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba7b:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba7d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba85:	68 00 00 70 3f       	push   0x3f700000
c000ba8a:	6a 00                	push   0x0
c000ba8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba94:	e8 de d1 01 00       	call   c0028c77 <__ltdf2>
c000ba99:	83 c4 10             	add    esp,0x10
c000ba9c:	ba 16 00 00 00       	mov    edx,0x16
c000baa1:	85 c0                	test   eax,eax
c000baa3:	0f 88 47 06 00 00    	js     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000baa9:	68 00 00 70 40       	push   0x40700000
c000baae:	6a 00                	push   0x0
c000bab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bab8:	e8 9c d1 01 00       	call   c0028c59 <__gtdf2>
c000babd:	83 c4 10             	add    esp,0x10
c000bac0:	ba 16 00 00 00       	mov    edx,0x16
c000bac5:	85 c0                	test   eax,eax
c000bac7:	0f 8f 23 06 00 00    	jg     c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bad3:	e8 33 cf 01 00       	call   c0028a0b <__floatsidf>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000badf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bae3:	68 00 00 00 40       	push   0x40000000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000baf2:	e8 34 c2 01 00       	call   c0027d2b <__adddf3>
c000baf7:	59                   	pop    ecx
c000baf8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bafc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb03:	e8 03 cf 01 00       	call   c0028a0b <__floatsidf>
c000bb08:	83 c4 10             	add    esp,0x10
c000bb0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb0f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb13:	52                   	push   edx
c000bb14:	50                   	push   eax
c000bb15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb1d:	e8 6a cb 01 00       	call   c002868c <__divdf3>
c000bb22:	83 c4 10             	add    esp,0x10
c000bb25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb29:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2d:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb30:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb43:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb4b:	e8 09 d1 01 00       	call   c0028c59 <__gtdf2>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	85 c0                	test   eax,eax
c000bb55:	7e 2d                	jle    c000bb84 <sinc_multichan_vari_process+0x14e>
c000bb57:	68 00 00 f0 3f       	push   0x3ff00000
c000bb5c:	6a 00                	push   0x0
c000bb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb66:	e8 0c d1 01 00       	call   c0028c77 <__ltdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	79 4d                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb82:	eb 1b                	jmp    c000bb9f <sinc_multichan_vari_process+0x169>
c000bb84:	68 00 00 f0 3f       	push   0x3ff00000
c000bb89:	6a 00                	push   0x0
c000bb8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb93:	e8 df d0 01 00       	call   c0028c77 <__ltdf2>
c000bb98:	83 c4 10             	add    esp,0x10
c000bb9b:	85 c0                	test   eax,eax
c000bb9d:	79 20                	jns    c000bbbf <sinc_multichan_vari_process+0x189>
c000bb9f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bba7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbaf:	e8 d8 ca 01 00       	call   c002868c <__divdf3>
c000bbb4:	83 c4 10             	add    esp,0x10
c000bbb7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbbb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbbf:	50                   	push   eax
c000bbc0:	50                   	push   eax
c000bbc1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc9:	e8 62 d2 01 00       	call   c0028e30 <lrint>
c000bbce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbd1:	40                   	inc    eax
c000bbd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbd6:	0f af c5             	imul   eax,ebp
c000bbd9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbdd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbe0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbe4:	58                   	pop    eax
c000bbe5:	5a                   	pop    edx
c000bbe6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbee:	e8 3d d2 01 00       	call   c0028e30 <lrint>
c000bbf3:	83 ec 0c             	sub    esp,0xc
c000bbf6:	50                   	push   eax
c000bbf7:	e8 0f ce 01 00       	call   c0028a0b <__floatsidf>
c000bbfc:	83 c4 10             	add    esp,0x10
c000bbff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc03:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc07:	52                   	push   edx
c000bc08:	50                   	push   eax
c000bc09:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc0d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc11:	e8 66 c7 01 00       	call   c002837c <__subdf3>
c000bc16:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc1e:	83 c4 20             	add    esp,0x20
c000bc21:	6a 00                	push   0x0
c000bc23:	6a 00                	push   0x0
c000bc25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc2d:	e8 45 d0 01 00       	call   c0028c77 <__ltdf2>
c000bc32:	83 c4 10             	add    esp,0x10
c000bc35:	85 c0                	test   eax,eax
c000bc37:	79 1f                	jns    c000bc58 <sinc_multichan_vari_process+0x222>
c000bc39:	68 00 00 f0 3f       	push   0x3ff00000
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 de c0 01 00       	call   c0027d2b <__adddf3>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc54:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc58:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc5b:	83 ec 10             	sub    esp,0x10
c000bc5e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc75:	e8 02 c7 01 00       	call   c002837c <__subdf3>
c000bc7a:	83 c4 18             	add    esp,0x18
c000bc7d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc81:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bc85:	52                   	push   edx
c000bc86:	50                   	push   eax
c000bc87:	e8 a4 d1 01 00       	call   c0028e30 <lrint>
c000bc8c:	0f af e8             	imul   ebp,eax
c000bc8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc93:	01 e8                	add    eax,ebp
c000bc95:	99                   	cdq    
c000bc96:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bc99:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bc9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bca4:	68 00 00 f0 3f       	push   0x3ff00000
c000bca9:	6a 00                	push   0x0
c000bcab:	e8 dc c9 01 00       	call   c002868c <__divdf3>
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcb7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcbb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcc0:	68 23 42 92 0c       	push   0xc924223
c000bcc5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcc9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bccd:	e8 59 c0 01 00       	call   c0027d2b <__adddf3>
c000bcd2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcd6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcda:	83 c4 20             	add    esp,0x20
c000bcdd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bce5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bced:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bcf0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bcf3:	7d 50                	jge    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bcf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bcf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bcfb:	01 c8                	add    eax,ecx
c000bcfd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd00:	99                   	cdq    
c000bd01:	f7 f9                	idiv   ecx
c000bd03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd07:	7d 0c                	jge    c000bd15 <sinc_multichan_vari_process+0x2df>
c000bd09:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd0c:	85 ed                	test   ebp,ebp
c000bd0e:	79 6b                	jns    c000bd7b <sinc_multichan_vari_process+0x345>
c000bd10:	e9 e6 00 00 00       	jmp    c000bdfb <sinc_multichan_vari_process+0x3c5>
c000bd15:	50                   	push   eax
c000bd16:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd1a:	57                   	push   edi
c000bd1b:	53                   	push   ebx
c000bd1c:	e8 9b fb ff ff       	call   c000b8bc <prepare_data>
c000bd21:	83 c4 10             	add    esp,0x10
c000bd24:	89 c2                	mov    edx,eax
c000bd26:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd29:	85 c0                	test   eax,eax
c000bd2b:	0f 85 bf 03 00 00    	jne    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd31:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd37:	01 c8                	add    eax,ecx
c000bd39:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3c:	99                   	cdq    
c000bd3d:	f7 f9                	idiv   ecx
c000bd3f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd43:	7c c4                	jl     c000bd09 <sinc_multichan_vari_process+0x2d3>
c000bd45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd4d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd50:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd57:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd5b:	89 06                	mov    DWORD PTR [esi],eax
c000bd5d:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd60:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd63:	99                   	cdq    
c000bd64:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd67:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd6a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd6d:	99                   	cdq    
c000bd6e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd71:	31 d2                	xor    edx,edx
c000bd73:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd76:	e9 75 03 00 00       	jmp    c000c0f0 <sinc_multichan_vari_process+0x6ba>
c000bd7b:	83 ec 0c             	sub    esp,0xc
c000bd7e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd81:	e8 85 cc 01 00       	call   c0028a0b <__floatsidf>
c000bd86:	83 c4 10             	add    esp,0x10
c000bd89:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd8d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd91:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd95:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bd99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bda1:	e8 85 bf 01 00       	call   c0027d2b <__adddf3>
c000bda6:	83 c4 10             	add    esp,0x10
c000bda9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdb1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdc1:	e8 65 bf 01 00       	call   c0027d2b <__adddf3>
c000bdc6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bdc9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bdcd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdd1:	e8 35 cc 01 00       	call   c0028a0b <__floatsidf>
c000bdd6:	83 c4 10             	add    esp,0x10
c000bdd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bddd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bde1:	52                   	push   edx
c000bde2:	50                   	push   eax
c000bde3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bde7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdeb:	e8 85 ce 01 00       	call   c0028c75 <__gedf2>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	85 c0                	test   eax,eax
c000bdf5:	0f 89 4a ff ff ff    	jns    c000bd45 <sinc_multichan_vari_process+0x30f>
c000bdfb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bdff:	0f 8e ed 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be05:	83 ec 10             	sub    esp,0x10
c000be08:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be0b:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be0e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be11:	ff 36                	push   DWORD PTR [esi]
c000be13:	e8 64 c5 01 00       	call   c002837c <__subdf3>
c000be18:	83 c4 18             	add    esp,0x18
c000be1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be23:	52                   	push   edx
c000be24:	50                   	push   eax
c000be25:	e8 e6 cf 01 00       	call   c0028e10 <fabs>
c000be2a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be2e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be3a:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be47:	e8 0d ce 01 00       	call   c0028c59 <__gtdf2>
c000be4c:	83 c4 10             	add    esp,0x10
c000be4f:	85 c0                	test   eax,eax
c000be51:	0f 8e 9b 00 00 00    	jle    c000bef2 <sinc_multichan_vari_process+0x4bc>
c000be57:	8b 06                	mov    eax,DWORD PTR [esi]
c000be59:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be60:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be64:	52                   	push   edx
c000be65:	50                   	push   eax
c000be66:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be69:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be6c:	e8 0b c5 01 00       	call   c002837c <__subdf3>
c000be71:	59                   	pop    ecx
c000be72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be76:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be7a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be7d:	e8 89 cb 01 00       	call   c0028a0b <__floatsidf>
c000be82:	83 c4 10             	add    esp,0x10
c000be85:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be89:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be8d:	52                   	push   edx
c000be8e:	50                   	push   eax
c000be8f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be97:	e8 0c c5 01 00       	call   c00283a8 <__muldf3>
c000be9c:	5d                   	pop    ebp
c000be9d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bea1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bea5:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bea8:	e8 5e cb 01 00       	call   c0028a0b <__floatsidf>
c000bead:	83 c4 10             	add    esp,0x10
c000beb0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beb4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb8:	52                   	push   edx
c000beb9:	50                   	push   eax
c000beba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bebe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bec2:	e8 c5 c7 01 00       	call   c002868c <__divdf3>
c000bec7:	83 c4 10             	add    esp,0x10
c000beca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bece:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bed2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bed6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000beda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bee2:	e8 44 be 01 00       	call   c0027d2b <__adddf3>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000beee:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bef2:	83 ec 0c             	sub    esp,0xc
c000bef5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bef8:	e8 0e cb 01 00       	call   c0028a0b <__floatsidf>
c000befd:	83 c4 10             	add    esp,0x10
c000bf00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf18:	e8 5a cd 01 00       	call   c0028c77 <__ltdf2>
c000bf1d:	83 c4 10             	add    esp,0x10
c000bf20:	85 c0                	test   eax,eax
c000bf22:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf26:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf2a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf2e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf32:	78 10                	js     c000bf44 <sinc_multichan_vari_process+0x50e>
c000bf34:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf3c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf40:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf4c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf50:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf54:	e8 4f c4 01 00       	call   c00283a8 <__muldf3>
c000bf59:	59                   	pop    ecx
c000bf5a:	5d                   	pop    ebp
c000bf5b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf5f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf6b:	e8 25 f9 ff ff       	call   c000b895 <double_to_fp>
c000bf70:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf74:	89 c5                	mov    ebp,eax
c000bf76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf7a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	e8 21 c4 01 00       	call   c00283a8 <__muldf3>
c000bf87:	83 c4 18             	add    esp,0x18
c000bf8a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bf8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bf92:	52                   	push   edx
c000bf93:	50                   	push   eax
c000bf94:	e8 fc f8 ff ff       	call   c000b895 <double_to_fp>
c000bf99:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bf9c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfa0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfa3:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfa6:	50                   	push   eax
c000bfa7:	50                   	push   eax
c000bfa8:	50                   	push   eax
c000bfa9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfac:	e8 5a ca 01 00       	call   c0028a0b <__floatsidf>
c000bfb1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfb5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfb9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfbd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfc9:	e8 be c6 01 00       	call   c002868c <__divdf3>
c000bfce:	83 c4 1c             	add    esp,0x1c
c000bfd1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfd5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bfd9:	52                   	push   edx
c000bfda:	89 ea                	mov    edx,ebp
c000bfdc:	50                   	push   eax
c000bfdd:	89 d8                	mov    eax,ebx
c000bfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bfe2:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bfe6:	e8 69 ed ff ff       	call   c000ad54 <calc_output_multi>
c000bfeb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bfee:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bff1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bff9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bffd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c001:	e8 86 c6 01 00       	call   c002868c <__divdf3>
c000c006:	83 c4 10             	add    esp,0x10
c000c009:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c00d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c011:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c015:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c01d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c021:	e8 05 bd 01 00       	call   c0027d2b <__adddf3>
c000c026:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c02a:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c02e:	83 c4 28             	add    esp,0x28
c000c031:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c035:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c039:	e8 f2 cd 01 00       	call   c0028e30 <lrint>
c000c03e:	83 ec 0c             	sub    esp,0xc
c000c041:	50                   	push   eax
c000c042:	e8 c4 c9 01 00       	call   c0028a0b <__floatsidf>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c04e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c052:	52                   	push   edx
c000c053:	50                   	push   eax
c000c054:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c058:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c05c:	e8 1b c3 01 00       	call   c002837c <__subdf3>
c000c061:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c065:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c069:	83 c4 20             	add    esp,0x20
c000c06c:	6a 00                	push   0x0
c000c06e:	6a 00                	push   0x0
c000c070:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c078:	e8 fa cb 01 00       	call   c0028c77 <__ltdf2>
c000c07d:	83 c4 10             	add    esp,0x10
c000c080:	85 c0                	test   eax,eax
c000c082:	79 20                	jns    c000c0a4 <sinc_multichan_vari_process+0x66e>
c000c084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c08c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c094:	e8 92 bc 01 00       	call   c0027d2b <__adddf3>
c000c099:	83 c4 10             	add    esp,0x10
c000c09c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0a4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0a7:	83 ec 10             	sub    esp,0x10
c000c0aa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0ae:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0c1:	e8 b6 c2 01 00       	call   c002837c <__subdf3>
c000c0c6:	83 c4 18             	add    esp,0x18
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d1:	52                   	push   edx
c000c0d2:	50                   	push   eax
c000c0d3:	e8 58 cd 01 00       	call   c0028e30 <lrint>
c000c0d8:	0f af e8             	imul   ebp,eax
c000c0db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0df:	83 c4 10             	add    esp,0x10
c000c0e2:	01 e8                	add    eax,ebp
c000c0e4:	99                   	cdq    
c000c0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c0eb:	e9 fd fb ff ff       	jmp    c000bced <sinc_multichan_vari_process+0x2b7>
c000c0f0:	83 c4 4c             	add    esp,0x4c
c000c0f3:	89 d0                	mov    eax,edx
c000c0f5:	5b                   	pop    ebx
c000c0f6:	5e                   	pop    esi
c000c0f7:	5f                   	pop    edi
c000c0f8:	5d                   	pop    ebp
c000c0f9:	c3                   	ret    

c000c0fa <sinc_hex_vari_process>:
c000c0fa:	55                   	push   ebp
c000c0fb:	ba 05 00 00 00       	mov    edx,0x5
c000c100:	57                   	push   edi
c000c101:	56                   	push   esi
c000c102:	53                   	push   ebx
c000c103:	83 ec 4c             	sub    esp,0x4c
c000c106:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c10a:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c10e:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c111:	85 db                	test   ebx,ebx
c000c113:	0f 84 9c 06 00 00    	je     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c119:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c11c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c11f:	0f af c7             	imul   eax,edi
c000c122:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c125:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c128:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c12f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c136:	0f af c7             	imul   eax,edi
c000c139:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c13c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c13f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c142:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c146:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c14a:	68 00 00 70 3f       	push   0x3f700000
c000c14f:	6a 00                	push   0x0
c000c151:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c155:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c159:	e8 19 cb 01 00       	call   c0028c77 <__ltdf2>
c000c15e:	83 c4 10             	add    esp,0x10
c000c161:	ba 16 00 00 00       	mov    edx,0x16
c000c166:	85 c0                	test   eax,eax
c000c168:	0f 88 47 06 00 00    	js     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c16e:	68 00 00 70 40       	push   0x40700000
c000c173:	6a 00                	push   0x0
c000c175:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c179:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17d:	e8 d7 ca 01 00       	call   c0028c59 <__gtdf2>
c000c182:	83 c4 10             	add    esp,0x10
c000c185:	ba 16 00 00 00       	mov    edx,0x16
c000c18a:	85 c0                	test   eax,eax
c000c18c:	0f 8f 23 06 00 00    	jg     c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c192:	83 ec 0c             	sub    esp,0xc
c000c195:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c198:	e8 6e c8 01 00       	call   c0028a0b <__floatsidf>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1a8:	68 00 00 00 40       	push   0x40000000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1b7:	e8 6f bb 01 00       	call   c0027d2b <__adddf3>
c000c1bc:	59                   	pop    ecx
c000c1bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1c1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1c5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1c8:	e8 3e c8 01 00       	call   c0028a0b <__floatsidf>
c000c1cd:	83 c4 10             	add    esp,0x10
c000c1d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1d4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1d8:	52                   	push   edx
c000c1d9:	50                   	push   eax
c000c1da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1e2:	e8 a5 c4 01 00       	call   c002868c <__divdf3>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c1f5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c1f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c200:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c204:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c208:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c20c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c210:	e8 44 ca 01 00       	call   c0028c59 <__gtdf2>
c000c215:	83 c4 10             	add    esp,0x10
c000c218:	85 c0                	test   eax,eax
c000c21a:	7e 2d                	jle    c000c249 <sinc_hex_vari_process+0x14f>
c000c21c:	68 00 00 f0 3f       	push   0x3ff00000
c000c221:	6a 00                	push   0x0
c000c223:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c227:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c22b:	e8 47 ca 01 00       	call   c0028c77 <__ltdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	79 4d                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c23f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c243:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c247:	eb 1b                	jmp    c000c264 <sinc_hex_vari_process+0x16a>
c000c249:	68 00 00 f0 3f       	push   0x3ff00000
c000c24e:	6a 00                	push   0x0
c000c250:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c254:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c258:	e8 1a ca 01 00       	call   c0028c77 <__ltdf2>
c000c25d:	83 c4 10             	add    esp,0x10
c000c260:	85 c0                	test   eax,eax
c000c262:	79 20                	jns    c000c284 <sinc_hex_vari_process+0x18a>
c000c264:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c268:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c26c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c270:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c274:	e8 13 c4 01 00       	call   c002868c <__divdf3>
c000c279:	83 c4 10             	add    esp,0x10
c000c27c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c280:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c284:	50                   	push   eax
c000c285:	50                   	push   eax
c000c286:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28e:	e8 9d cb 01 00       	call   c0028e30 <lrint>
c000c293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c296:	40                   	inc    eax
c000c297:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c29b:	0f af c7             	imul   eax,edi
c000c29e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2a9:	58                   	pop    eax
c000c2aa:	5a                   	pop    edx
c000c2ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2b3:	e8 78 cb 01 00       	call   c0028e30 <lrint>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	50                   	push   eax
c000c2bc:	e8 4a c7 01 00       	call   c0028a0b <__floatsidf>
c000c2c1:	83 c4 10             	add    esp,0x10
c000c2c4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2c8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2cc:	52                   	push   edx
c000c2cd:	50                   	push   eax
c000c2ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2d6:	e8 a1 c0 01 00       	call   c002837c <__subdf3>
c000c2db:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2df:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2e3:	83 c4 20             	add    esp,0x20
c000c2e6:	6a 00                	push   0x0
c000c2e8:	6a 00                	push   0x0
c000c2ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c2f2:	e8 80 c9 01 00       	call   c0028c77 <__ltdf2>
c000c2f7:	83 c4 10             	add    esp,0x10
c000c2fa:	85 c0                	test   eax,eax
c000c2fc:	79 1f                	jns    c000c31d <sinc_hex_vari_process+0x223>
c000c2fe:	68 00 00 f0 3f       	push   0x3ff00000
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 19 ba 01 00       	call   c0027d2b <__adddf3>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c319:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c31d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c320:	83 ec 10             	sub    esp,0x10
c000c323:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c327:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c32e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c332:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c336:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c33a:	e8 3d c0 01 00       	call   c002837c <__subdf3>
c000c33f:	83 c4 18             	add    esp,0x18
c000c342:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c346:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c34a:	52                   	push   edx
c000c34b:	50                   	push   eax
c000c34c:	e8 df ca 01 00       	call   c0028e30 <lrint>
c000c351:	0f af f8             	imul   edi,eax
c000c354:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c358:	01 f8                	add    eax,edi
c000c35a:	99                   	cdq    
c000c35b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c35e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c361:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c365:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c369:	68 00 00 f0 3f       	push   0x3ff00000
c000c36e:	6a 00                	push   0x0
c000c370:	e8 17 c3 01 00       	call   c002868c <__divdf3>
c000c375:	83 c4 10             	add    esp,0x10
c000c378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c37c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c380:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c385:	68 23 42 92 0c       	push   0xc924223
c000c38a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c38e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c392:	e8 94 b9 01 00       	call   c0027d2b <__adddf3>
c000c397:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c39b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c39f:	83 c4 20             	add    esp,0x20
c000c3a2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3aa:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3b2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3b5:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3b8:	7d 50                	jge    c000c40a <sinc_hex_vari_process+0x310>
c000c3ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3c0:	01 c8                	add    eax,ecx
c000c3c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3c5:	99                   	cdq    
c000c3c6:	f7 f9                	idiv   ecx
c000c3c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3cc:	7d 0c                	jge    c000c3da <sinc_hex_vari_process+0x2e0>
c000c3ce:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3d1:	85 ff                	test   edi,edi
c000c3d3:	79 6c                	jns    c000c441 <sinc_hex_vari_process+0x347>
c000c3d5:	e9 e7 00 00 00       	jmp    c000c4c1 <sinc_hex_vari_process+0x3c7>
c000c3da:	50                   	push   eax
c000c3db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3df:	56                   	push   esi
c000c3e0:	53                   	push   ebx
c000c3e1:	e8 d6 f4 ff ff       	call   c000b8bc <prepare_data>
c000c3e6:	83 c4 10             	add    esp,0x10
c000c3e9:	89 c2                	mov    edx,eax
c000c3eb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c3ee:	85 c0                	test   eax,eax
c000c3f0:	0f 85 bf 03 00 00    	jne    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c3f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fc:	01 c8                	add    eax,ecx
c000c3fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c401:	99                   	cdq    
c000c402:	f7 f9                	idiv   ecx
c000c404:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c408:	7c c4                	jl     c000c3ce <sinc_hex_vari_process+0x2d4>
c000c40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c40e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c412:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c41c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c420:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c423:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c426:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c429:	99                   	cdq    
c000c42a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c42d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c430:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c433:	99                   	cdq    
c000c434:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c437:	31 d2                	xor    edx,edx
c000c439:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c43c:	e9 74 03 00 00       	jmp    c000c7b5 <sinc_hex_vari_process+0x6bb>
c000c441:	83 ec 0c             	sub    esp,0xc
c000c444:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c447:	e8 bf c5 01 00       	call   c0028a0b <__floatsidf>
c000c44c:	83 c4 10             	add    esp,0x10
c000c44f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c453:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c457:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c45f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c463:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c467:	e8 bf b8 01 00       	call   c0027d2b <__adddf3>
c000c46c:	83 c4 10             	add    esp,0x10
c000c46f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c473:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c477:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c47f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c483:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c487:	e8 9f b8 01 00       	call   c0027d2b <__adddf3>
c000c48c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c48f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c493:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c497:	e8 6f c5 01 00       	call   c0028a0b <__floatsidf>
c000c49c:	83 c4 10             	add    esp,0x10
c000c49f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4a7:	52                   	push   edx
c000c4a8:	50                   	push   eax
c000c4a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4b1:	e8 bf c7 01 00       	call   c0028c75 <__gedf2>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	85 c0                	test   eax,eax
c000c4bb:	0f 89 49 ff ff ff    	jns    c000c40a <sinc_hex_vari_process+0x310>
c000c4c1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4c5:	0f 8e ef 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c4cb:	83 ec 10             	sub    esp,0x10
c000c4ce:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4d1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4d4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4d7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4da:	e8 9d be 01 00       	call   c002837c <__subdf3>
c000c4df:	83 c4 18             	add    esp,0x18
c000c4e2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4e6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4ea:	52                   	push   edx
c000c4eb:	50                   	push   eax
c000c4ec:	e8 1f c9 01 00       	call   c0028e10 <fabs>
c000c4f1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4f9:	83 c4 10             	add    esp,0x10
c000c4fc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c501:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c506:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c50e:	e8 46 c7 01 00       	call   c0028c59 <__gtdf2>
c000c513:	83 c4 10             	add    esp,0x10
c000c516:	85 c0                	test   eax,eax
c000c518:	0f 8e 9c 00 00 00    	jle    c000c5ba <sinc_hex_vari_process+0x4c0>
c000c51e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c521:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c524:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c528:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c52c:	52                   	push   edx
c000c52d:	50                   	push   eax
c000c52e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c531:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c534:	e8 43 be 01 00       	call   c002837c <__subdf3>
c000c539:	59                   	pop    ecx
c000c53a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c53e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c542:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c545:	e8 c1 c4 01 00       	call   c0028a0b <__floatsidf>
c000c54a:	83 c4 10             	add    esp,0x10
c000c54d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c551:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c555:	52                   	push   edx
c000c556:	50                   	push   eax
c000c557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c55f:	e8 44 be 01 00       	call   c00283a8 <__muldf3>
c000c564:	5f                   	pop    edi
c000c565:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c569:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c56d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c570:	e8 96 c4 01 00       	call   c0028a0b <__floatsidf>
c000c575:	83 c4 10             	add    esp,0x10
c000c578:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c57c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c586:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c58a:	e8 fd c0 01 00       	call   c002868c <__divdf3>
c000c58f:	83 c4 10             	add    esp,0x10
c000c592:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c596:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c59a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5aa:	e8 7c b7 01 00       	call   c0027d2b <__adddf3>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5b6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5ba:	83 ec 0c             	sub    esp,0xc
c000c5bd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5c0:	e8 46 c4 01 00       	call   c0028a0b <__floatsidf>
c000c5c5:	83 c4 10             	add    esp,0x10
c000c5c8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5cc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5e0:	e8 92 c6 01 00       	call   c0028c77 <__ltdf2>
c000c5e5:	83 c4 10             	add    esp,0x10
c000c5e8:	85 c0                	test   eax,eax
c000c5ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c5f2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c5f6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c5fa:	78 10                	js     c000c60c <sinc_hex_vari_process+0x512>
c000c5fc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c600:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c604:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c608:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c60c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c610:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c614:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c618:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c61c:	e8 87 bd 01 00       	call   c00283a8 <__muldf3>
c000c621:	59                   	pop    ecx
c000c622:	5f                   	pop    edi
c000c623:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c627:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c62b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c62f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c633:	e8 5d f2 ff ff       	call   c000b895 <double_to_fp>
c000c638:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c63c:	89 c7                	mov    edi,eax
c000c63e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c642:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	e8 59 bd 01 00       	call   c00283a8 <__muldf3>
c000c64f:	83 c4 18             	add    esp,0x18
c000c652:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c656:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c65a:	52                   	push   edx
c000c65b:	50                   	push   eax
c000c65c:	e8 34 f2 ff ff       	call   c000b895 <double_to_fp>
c000c661:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c664:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c668:	83 c4 0c             	add    esp,0xc
c000c66b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c66e:	8d 04 90             	lea    eax,[eax+edx*4]
c000c671:	50                   	push   eax
c000c672:	50                   	push   eax
c000c673:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c676:	e8 90 c3 01 00       	call   c0028a0b <__floatsidf>
c000c67b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c67f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c683:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c687:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c68f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c693:	e8 f4 bf 01 00       	call   c002868c <__divdf3>
c000c698:	83 c4 18             	add    esp,0x18
c000c69b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c69f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6a3:	52                   	push   edx
c000c6a4:	89 fa                	mov    edx,edi
c000c6a6:	50                   	push   eax
c000c6a7:	89 d8                	mov    eax,ebx
c000c6a9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6ad:	e8 50 de ff ff       	call   c000a502 <calc_output_hex>
c000c6b2:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6c6:	e8 c1 bf 01 00       	call   c002868c <__divdf3>
c000c6cb:	83 c4 10             	add    esp,0x10
c000c6ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6e6:	e8 40 b6 01 00       	call   c0027d2b <__adddf3>
c000c6eb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c6ef:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c6f3:	83 c4 18             	add    esp,0x18
c000c6f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c6fe:	e8 2d c7 01 00       	call   c0028e30 <lrint>
c000c703:	83 ec 0c             	sub    esp,0xc
c000c706:	50                   	push   eax
c000c707:	e8 ff c2 01 00       	call   c0028a0b <__floatsidf>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c713:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c717:	52                   	push   edx
c000c718:	50                   	push   eax
c000c719:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c721:	e8 56 bc 01 00       	call   c002837c <__subdf3>
c000c726:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c72a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c72e:	83 c4 20             	add    esp,0x20
c000c731:	6a 00                	push   0x0
c000c733:	6a 00                	push   0x0
c000c735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c739:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c73d:	e8 35 c5 01 00       	call   c0028c77 <__ltdf2>
c000c742:	83 c4 10             	add    esp,0x10
c000c745:	85 c0                	test   eax,eax
c000c747:	79 20                	jns    c000c769 <sinc_hex_vari_process+0x66f>
c000c749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c74d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c751:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c755:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c759:	e8 cd b5 01 00       	call   c0027d2b <__adddf3>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c765:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c769:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c76c:	83 ec 10             	sub    esp,0x10
c000c76f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c773:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c77e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c782:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c786:	e8 f1 bb 01 00       	call   c002837c <__subdf3>
c000c78b:	83 c4 18             	add    esp,0x18
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c796:	52                   	push   edx
c000c797:	50                   	push   eax
c000c798:	e8 93 c6 01 00       	call   c0028e30 <lrint>
c000c79d:	0f af f8             	imul   edi,eax
c000c7a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7a4:	83 c4 10             	add    esp,0x10
c000c7a7:	01 f8                	add    eax,edi
c000c7a9:	99                   	cdq    
c000c7aa:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7ad:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7b0:	e9 fd fb ff ff       	jmp    c000c3b2 <sinc_hex_vari_process+0x2b8>
c000c7b5:	83 c4 4c             	add    esp,0x4c
c000c7b8:	89 d0                	mov    eax,edx
c000c7ba:	5b                   	pop    ebx
c000c7bb:	5e                   	pop    esi
c000c7bc:	5f                   	pop    edi
c000c7bd:	5d                   	pop    ebp
c000c7be:	c3                   	ret    

c000c7bf <sinc_quad_vari_process>:
c000c7bf:	55                   	push   ebp
c000c7c0:	ba 05 00 00 00       	mov    edx,0x5
c000c7c5:	57                   	push   edi
c000c7c6:	56                   	push   esi
c000c7c7:	53                   	push   ebx
c000c7c8:	83 ec 4c             	sub    esp,0x4c
c000c7cb:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7cf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7d3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7d6:	85 db                	test   ebx,ebx
c000c7d8:	0f 84 9c 06 00 00    	je     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c7de:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7e4:	0f af c7             	imul   eax,edi
c000c7e7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c7ea:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7ed:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c7f4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c7fb:	0f af c7             	imul   eax,edi
c000c7fe:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c801:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c804:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c807:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c80b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c80f:	68 00 00 70 3f       	push   0x3f700000
c000c814:	6a 00                	push   0x0
c000c816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c81e:	e8 54 c4 01 00       	call   c0028c77 <__ltdf2>
c000c823:	83 c4 10             	add    esp,0x10
c000c826:	ba 16 00 00 00       	mov    edx,0x16
c000c82b:	85 c0                	test   eax,eax
c000c82d:	0f 88 47 06 00 00    	js     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c833:	68 00 00 70 40       	push   0x40700000
c000c838:	6a 00                	push   0x0
c000c83a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c83e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c842:	e8 12 c4 01 00       	call   c0028c59 <__gtdf2>
c000c847:	83 c4 10             	add    esp,0x10
c000c84a:	ba 16 00 00 00       	mov    edx,0x16
c000c84f:	85 c0                	test   eax,eax
c000c851:	0f 8f 23 06 00 00    	jg     c000ce7a <sinc_quad_vari_process+0x6bb>
c000c857:	83 ec 0c             	sub    esp,0xc
c000c85a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c85d:	e8 a9 c1 01 00       	call   c0028a0b <__floatsidf>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c869:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c86d:	68 00 00 00 40       	push   0x40000000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c878:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c87c:	e8 aa b4 01 00       	call   c0027d2b <__adddf3>
c000c881:	59                   	pop    ecx
c000c882:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c886:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c88a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c88d:	e8 79 c1 01 00       	call   c0028a0b <__floatsidf>
c000c892:	83 c4 10             	add    esp,0x10
c000c895:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c899:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c89d:	52                   	push   edx
c000c89e:	50                   	push   eax
c000c89f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8a7:	e8 e0 bd 01 00       	call   c002868c <__divdf3>
c000c8ac:	83 c4 10             	add    esp,0x10
c000c8af:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b7:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8ba:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8d5:	e8 7f c3 01 00       	call   c0028c59 <__gtdf2>
c000c8da:	83 c4 10             	add    esp,0x10
c000c8dd:	85 c0                	test   eax,eax
c000c8df:	7e 2d                	jle    c000c90e <sinc_quad_vari_process+0x14f>
c000c8e1:	68 00 00 f0 3f       	push   0x3ff00000
c000c8e6:	6a 00                	push   0x0
c000c8e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f0:	e8 82 c3 01 00       	call   c0028c77 <__ltdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	79 4d                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c8fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c900:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c908:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c90c:	eb 1b                	jmp    c000c929 <sinc_quad_vari_process+0x16a>
c000c90e:	68 00 00 f0 3f       	push   0x3ff00000
c000c913:	6a 00                	push   0x0
c000c915:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c919:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c91d:	e8 55 c3 01 00       	call   c0028c77 <__ltdf2>
c000c922:	83 c4 10             	add    esp,0x10
c000c925:	85 c0                	test   eax,eax
c000c927:	79 20                	jns    c000c949 <sinc_quad_vari_process+0x18a>
c000c929:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c92d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c931:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c935:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c939:	e8 4e bd 01 00       	call   c002868c <__divdf3>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c945:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c949:	50                   	push   eax
c000c94a:	50                   	push   eax
c000c94b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c94f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c953:	e8 d8 c4 01 00       	call   c0028e30 <lrint>
c000c958:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c95b:	40                   	inc    eax
c000c95c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c960:	0f af c7             	imul   eax,edi
c000c963:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c96a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c96e:	58                   	pop    eax
c000c96f:	5a                   	pop    edx
c000c970:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c974:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c978:	e8 b3 c4 01 00       	call   c0028e30 <lrint>
c000c97d:	83 ec 0c             	sub    esp,0xc
c000c980:	50                   	push   eax
c000c981:	e8 85 c0 01 00       	call   c0028a0b <__floatsidf>
c000c986:	83 c4 10             	add    esp,0x10
c000c989:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c98d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c991:	52                   	push   edx
c000c992:	50                   	push   eax
c000c993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c99b:	e8 dc b9 01 00       	call   c002837c <__subdf3>
c000c9a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9a8:	83 c4 20             	add    esp,0x20
c000c9ab:	6a 00                	push   0x0
c000c9ad:	6a 00                	push   0x0
c000c9af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9b7:	e8 bb c2 01 00       	call   c0028c77 <__ltdf2>
c000c9bc:	83 c4 10             	add    esp,0x10
c000c9bf:	85 c0                	test   eax,eax
c000c9c1:	79 1f                	jns    c000c9e2 <sinc_quad_vari_process+0x223>
c000c9c3:	68 00 00 f0 3f       	push   0x3ff00000
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 54 b3 01 00       	call   c0027d2b <__adddf3>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9e2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c9e5:	83 ec 10             	sub    esp,0x10
c000c9e8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c9ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9fb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9ff:	e8 78 b9 01 00       	call   c002837c <__subdf3>
c000ca04:	83 c4 18             	add    esp,0x18
c000ca07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca0f:	52                   	push   edx
c000ca10:	50                   	push   eax
c000ca11:	e8 1a c4 01 00       	call   c0028e30 <lrint>
c000ca16:	0f af f8             	imul   edi,eax
c000ca19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca1d:	01 f8                	add    eax,edi
c000ca1f:	99                   	cdq    
c000ca20:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca23:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca2e:	68 00 00 f0 3f       	push   0x3ff00000
c000ca33:	6a 00                	push   0x0
c000ca35:	e8 52 bc 01 00       	call   c002868c <__divdf3>
c000ca3a:	83 c4 10             	add    esp,0x10
c000ca3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca45:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca4a:	68 23 42 92 0c       	push   0xc924223
c000ca4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca57:	e8 cf b2 01 00       	call   c0027d2b <__adddf3>
c000ca5c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca60:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca64:	83 c4 20             	add    esp,0x20
c000ca67:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca6f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca77:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca7d:	7d 50                	jge    c000cacf <sinc_quad_vari_process+0x310>
c000ca7f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca82:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ca85:	01 c8                	add    eax,ecx
c000ca87:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000ca8a:	99                   	cdq    
c000ca8b:	f7 f9                	idiv   ecx
c000ca8d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000ca91:	7d 0c                	jge    c000ca9f <sinc_quad_vari_process+0x2e0>
c000ca93:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000ca96:	85 ff                	test   edi,edi
c000ca98:	79 6c                	jns    c000cb06 <sinc_quad_vari_process+0x347>
c000ca9a:	e9 e7 00 00 00       	jmp    c000cb86 <sinc_quad_vari_process+0x3c7>
c000ca9f:	50                   	push   eax
c000caa0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000caa4:	56                   	push   esi
c000caa5:	53                   	push   ebx
c000caa6:	e8 11 ee ff ff       	call   c000b8bc <prepare_data>
c000caab:	83 c4 10             	add    esp,0x10
c000caae:	89 c2                	mov    edx,eax
c000cab0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cab3:	85 c0                	test   eax,eax
c000cab5:	0f 85 bf 03 00 00    	jne    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cabb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabe:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cac1:	01 c8                	add    eax,ecx
c000cac3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac6:	99                   	cdq    
c000cac7:	f7 f9                	idiv   ecx
c000cac9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacd:	7c c4                	jl     c000ca93 <sinc_quad_vari_process+0x2d4>
c000cacf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cad3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cad7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cada:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cadd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cae5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cae8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000caeb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000caee:	99                   	cdq    
c000caef:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000caf2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000caf5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000caf8:	99                   	cdq    
c000caf9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cafc:	31 d2                	xor    edx,edx
c000cafe:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb01:	e9 74 03 00 00       	jmp    c000ce7a <sinc_quad_vari_process+0x6bb>
c000cb06:	83 ec 0c             	sub    esp,0xc
c000cb09:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb0c:	e8 fa be 01 00       	call   c0028a0b <__floatsidf>
c000cb11:	83 c4 10             	add    esp,0x10
c000cb14:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb18:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb24:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb28:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb2c:	e8 fa b1 01 00       	call   c0027d2b <__adddf3>
c000cb31:	83 c4 10             	add    esp,0x10
c000cb34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb38:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb3c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb40:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb44:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb48:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb4c:	e8 da b1 01 00       	call   c0027d2b <__adddf3>
c000cb51:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb54:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb58:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb5c:	e8 aa be 01 00       	call   c0028a0b <__floatsidf>
c000cb61:	83 c4 10             	add    esp,0x10
c000cb64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb68:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb6c:	52                   	push   edx
c000cb6d:	50                   	push   eax
c000cb6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb76:	e8 fa c0 01 00       	call   c0028c75 <__gedf2>
c000cb7b:	83 c4 10             	add    esp,0x10
c000cb7e:	85 c0                	test   eax,eax
c000cb80:	0f 89 49 ff ff ff    	jns    c000cacf <sinc_quad_vari_process+0x310>
c000cb86:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cb8a:	0f 8e ef 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cb90:	83 ec 10             	sub    esp,0x10
c000cb93:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cb96:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cb99:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cb9c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb9f:	e8 d8 b7 01 00       	call   c002837c <__subdf3>
c000cba4:	83 c4 18             	add    esp,0x18
c000cba7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbab:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbaf:	52                   	push   edx
c000cbb0:	50                   	push   eax
c000cbb1:	e8 5a c2 01 00       	call   c0028e10 <fabs>
c000cbb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbbe:	83 c4 10             	add    esp,0x10
c000cbc1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbc6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbcf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbd3:	e8 81 c0 01 00       	call   c0028c59 <__gtdf2>
c000cbd8:	83 c4 10             	add    esp,0x10
c000cbdb:	85 c0                	test   eax,eax
c000cbdd:	0f 8e 9c 00 00 00    	jle    c000cc7f <sinc_quad_vari_process+0x4c0>
c000cbe3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cbe9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cbed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cbf1:	52                   	push   edx
c000cbf2:	50                   	push   eax
c000cbf3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbf6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbf9:	e8 7e b7 01 00       	call   c002837c <__subdf3>
c000cbfe:	59                   	pop    ecx
c000cbff:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc03:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc07:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc0a:	e8 fc bd 01 00       	call   c0028a0b <__floatsidf>
c000cc0f:	83 c4 10             	add    esp,0x10
c000cc12:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc1a:	52                   	push   edx
c000cc1b:	50                   	push   eax
c000cc1c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc24:	e8 7f b7 01 00       	call   c00283a8 <__muldf3>
c000cc29:	5f                   	pop    edi
c000cc2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc2e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc35:	e8 d1 bd 01 00       	call   c0028a0b <__floatsidf>
c000cc3a:	83 c4 10             	add    esp,0x10
c000cc3d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc41:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc4f:	e8 38 ba 01 00       	call   c002868c <__divdf3>
c000cc54:	83 c4 10             	add    esp,0x10
c000cc57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6f:	e8 b7 b0 01 00       	call   c0027d2b <__adddf3>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc7f:	83 ec 0c             	sub    esp,0xc
c000cc82:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cc85:	e8 81 bd 01 00       	call   c0028a0b <__floatsidf>
c000cc8a:	83 c4 10             	add    esp,0x10
c000cc8d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc91:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cca5:	e8 cd bf 01 00       	call   c0028c77 <__ltdf2>
c000ccaa:	83 c4 10             	add    esp,0x10
c000ccad:	85 c0                	test   eax,eax
c000ccaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccb3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccb7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccbb:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccbf:	78 10                	js     c000ccd1 <sinc_quad_vari_process+0x512>
c000ccc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccc5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccc9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cccd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccd1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccd9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccdd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cce1:	e8 c2 b6 01 00       	call   c00283a8 <__muldf3>
c000cce6:	59                   	pop    ecx
c000cce7:	5f                   	pop    edi
c000cce8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccf0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ccf8:	e8 98 eb ff ff       	call   c000b895 <double_to_fp>
c000ccfd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd01:	89 c7                	mov    edi,eax
c000cd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd07:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	e8 94 b6 01 00       	call   c00283a8 <__muldf3>
c000cd14:	83 c4 18             	add    esp,0x18
c000cd17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd1b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd1f:	52                   	push   edx
c000cd20:	50                   	push   eax
c000cd21:	e8 6f eb ff ff       	call   c000b895 <double_to_fp>
c000cd26:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd29:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd2d:	83 c4 0c             	add    esp,0xc
c000cd30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd33:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd36:	50                   	push   eax
c000cd37:	50                   	push   eax
c000cd38:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3b:	e8 cb bc 01 00       	call   c0028a0b <__floatsidf>
c000cd40:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd44:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd48:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd54:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd58:	e8 2f b9 01 00       	call   c002868c <__divdf3>
c000cd5d:	83 c4 18             	add    esp,0x18
c000cd60:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd64:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd68:	52                   	push   edx
c000cd69:	89 fa                	mov    edx,edi
c000cd6b:	50                   	push   eax
c000cd6c:	89 d8                	mov    eax,ebx
c000cd6e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd72:	e8 a5 d1 ff ff       	call   c0009f1c <calc_output_quad>
c000cd77:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd7b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd83:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd87:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd8b:	e8 fc b8 01 00       	call   c002868c <__divdf3>
c000cd90:	83 c4 10             	add    esp,0x10
c000cd93:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd97:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cda3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cda7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdab:	e8 7b af 01 00       	call   c0027d2b <__adddf3>
c000cdb0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdb4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdb8:	83 c4 18             	add    esp,0x18
c000cdbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdc3:	e8 68 c0 01 00       	call   c0028e30 <lrint>
c000cdc8:	83 ec 0c             	sub    esp,0xc
c000cdcb:	50                   	push   eax
c000cdcc:	e8 3a bc 01 00       	call   c0028a0b <__floatsidf>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cddc:	52                   	push   edx
c000cddd:	50                   	push   eax
c000cdde:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde6:	e8 91 b5 01 00       	call   c002837c <__subdf3>
c000cdeb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cdef:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cdf3:	83 c4 20             	add    esp,0x20
c000cdf6:	6a 00                	push   0x0
c000cdf8:	6a 00                	push   0x0
c000cdfa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce02:	e8 70 be 01 00       	call   c0028c77 <__ltdf2>
c000ce07:	83 c4 10             	add    esp,0x10
c000ce0a:	85 c0                	test   eax,eax
c000ce0c:	79 20                	jns    c000ce2e <sinc_quad_vari_process+0x66f>
c000ce0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1e:	e8 08 af 01 00       	call   c0027d2b <__adddf3>
c000ce23:	83 c4 10             	add    esp,0x10
c000ce26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce2e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce31:	83 ec 10             	sub    esp,0x10
c000ce34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce38:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce43:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce47:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce4b:	e8 2c b5 01 00       	call   c002837c <__subdf3>
c000ce50:	83 c4 18             	add    esp,0x18
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce5b:	52                   	push   edx
c000ce5c:	50                   	push   eax
c000ce5d:	e8 ce bf 01 00       	call   c0028e30 <lrint>
c000ce62:	0f af f8             	imul   edi,eax
c000ce65:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce69:	83 c4 10             	add    esp,0x10
c000ce6c:	01 f8                	add    eax,edi
c000ce6e:	99                   	cdq    
c000ce6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce75:	e9 fd fb ff ff       	jmp    c000ca77 <sinc_quad_vari_process+0x2b8>
c000ce7a:	83 c4 4c             	add    esp,0x4c
c000ce7d:	89 d0                	mov    eax,edx
c000ce7f:	5b                   	pop    ebx
c000ce80:	5e                   	pop    esi
c000ce81:	5f                   	pop    edi
c000ce82:	5d                   	pop    ebp
c000ce83:	c3                   	ret    

c000ce84 <sinc_stereo_vari_process>:
c000ce84:	55                   	push   ebp
c000ce85:	ba 05 00 00 00       	mov    edx,0x5
c000ce8a:	57                   	push   edi
c000ce8b:	56                   	push   esi
c000ce8c:	53                   	push   ebx
c000ce8d:	83 ec 4c             	sub    esp,0x4c
c000ce90:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce94:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ce98:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ce9b:	85 db                	test   ebx,ebx
c000ce9d:	0f 84 9c 06 00 00    	je     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cea3:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cea6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cea9:	0f af c7             	imul   eax,edi
c000ceac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceaf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceb2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ceb9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cec0:	0f af c7             	imul   eax,edi
c000cec3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cec6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cec9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cecc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ced0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced4:	68 00 00 70 3f       	push   0x3f700000
c000ced9:	6a 00                	push   0x0
c000cedb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cedf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cee3:	e8 8f bd 01 00       	call   c0028c77 <__ltdf2>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	ba 16 00 00 00       	mov    edx,0x16
c000cef0:	85 c0                	test   eax,eax
c000cef2:	0f 88 47 06 00 00    	js     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cef8:	68 00 00 70 40       	push   0x40700000
c000cefd:	6a 00                	push   0x0
c000ceff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf03:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf07:	e8 4d bd 01 00       	call   c0028c59 <__gtdf2>
c000cf0c:	83 c4 10             	add    esp,0x10
c000cf0f:	ba 16 00 00 00       	mov    edx,0x16
c000cf14:	85 c0                	test   eax,eax
c000cf16:	0f 8f 23 06 00 00    	jg     c000d53f <sinc_stereo_vari_process+0x6bb>
c000cf1c:	83 ec 0c             	sub    esp,0xc
c000cf1f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf22:	e8 e4 ba 01 00       	call   c0028a0b <__floatsidf>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf32:	68 00 00 00 40       	push   0x40000000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf41:	e8 e5 ad 01 00       	call   c0027d2b <__adddf3>
c000cf46:	59                   	pop    ecx
c000cf47:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf4b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf4f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf52:	e8 b4 ba 01 00       	call   c0028a0b <__floatsidf>
c000cf57:	83 c4 10             	add    esp,0x10
c000cf5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf62:	52                   	push   edx
c000cf63:	50                   	push   eax
c000cf64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf6c:	e8 1b b7 01 00       	call   c002868c <__divdf3>
c000cf71:	83 c4 10             	add    esp,0x10
c000cf74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf78:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf7f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf86:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf9a:	e8 ba bc 01 00       	call   c0028c59 <__gtdf2>
c000cf9f:	83 c4 10             	add    esp,0x10
c000cfa2:	85 c0                	test   eax,eax
c000cfa4:	7e 2d                	jle    c000cfd3 <sinc_stereo_vari_process+0x14f>
c000cfa6:	68 00 00 f0 3f       	push   0x3ff00000
c000cfab:	6a 00                	push   0x0
c000cfad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb5:	e8 bd bc 01 00       	call   c0028c77 <__ltdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	79 4d                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfc5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfcd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfd1:	eb 1b                	jmp    c000cfee <sinc_stereo_vari_process+0x16a>
c000cfd3:	68 00 00 f0 3f       	push   0x3ff00000
c000cfd8:	6a 00                	push   0x0
c000cfda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfe2:	e8 90 bc 01 00       	call   c0028c77 <__ltdf2>
c000cfe7:	83 c4 10             	add    esp,0x10
c000cfea:	85 c0                	test   eax,eax
c000cfec:	79 20                	jns    c000d00e <sinc_stereo_vari_process+0x18a>
c000cfee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cff6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cffe:	e8 89 b6 01 00       	call   c002868c <__divdf3>
c000d003:	83 c4 10             	add    esp,0x10
c000d006:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d00a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d00e:	50                   	push   eax
c000d00f:	50                   	push   eax
c000d010:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d014:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d018:	e8 13 be 01 00       	call   c0028e30 <lrint>
c000d01d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d020:	40                   	inc    eax
c000d021:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d025:	0f af c7             	imul   eax,edi
c000d028:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d02c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d033:	58                   	pop    eax
c000d034:	5a                   	pop    edx
c000d035:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d03d:	e8 ee bd 01 00       	call   c0028e30 <lrint>
c000d042:	83 ec 0c             	sub    esp,0xc
c000d045:	50                   	push   eax
c000d046:	e8 c0 b9 01 00       	call   c0028a0b <__floatsidf>
c000d04b:	83 c4 10             	add    esp,0x10
c000d04e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d052:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d056:	52                   	push   edx
c000d057:	50                   	push   eax
c000d058:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d05c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d060:	e8 17 b3 01 00       	call   c002837c <__subdf3>
c000d065:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d069:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d06d:	83 c4 20             	add    esp,0x20
c000d070:	6a 00                	push   0x0
c000d072:	6a 00                	push   0x0
c000d074:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d078:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d07c:	e8 f6 bb 01 00       	call   c0028c77 <__ltdf2>
c000d081:	83 c4 10             	add    esp,0x10
c000d084:	85 c0                	test   eax,eax
c000d086:	79 1f                	jns    c000d0a7 <sinc_stereo_vari_process+0x223>
c000d088:	68 00 00 f0 3f       	push   0x3ff00000
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 8f ac 01 00       	call   c0027d2b <__adddf3>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0a7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0aa:	83 ec 10             	sub    esp,0x10
c000d0ad:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0b1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0c4:	e8 b3 b2 01 00       	call   c002837c <__subdf3>
c000d0c9:	83 c4 18             	add    esp,0x18
c000d0cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0d4:	52                   	push   edx
c000d0d5:	50                   	push   eax
c000d0d6:	e8 55 bd 01 00       	call   c0028e30 <lrint>
c000d0db:	0f af f8             	imul   edi,eax
c000d0de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0e2:	01 f8                	add    eax,edi
c000d0e4:	99                   	cdq    
c000d0e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d0e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d0eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d0f3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0f8:	6a 00                	push   0x0
c000d0fa:	e8 8d b5 01 00       	call   c002868c <__divdf3>
c000d0ff:	83 c4 10             	add    esp,0x10
c000d102:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d106:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d10a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d10f:	68 23 42 92 0c       	push   0xc924223
c000d114:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d118:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d11c:	e8 0a ac 01 00       	call   c0027d2b <__adddf3>
c000d121:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d125:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d129:	83 c4 20             	add    esp,0x20
c000d12c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d134:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d13c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d13f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d142:	7d 50                	jge    c000d194 <sinc_stereo_vari_process+0x310>
c000d144:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d147:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d14a:	01 c8                	add    eax,ecx
c000d14c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d14f:	99                   	cdq    
c000d150:	f7 f9                	idiv   ecx
c000d152:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d156:	7d 0c                	jge    c000d164 <sinc_stereo_vari_process+0x2e0>
c000d158:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d15b:	85 ff                	test   edi,edi
c000d15d:	79 6c                	jns    c000d1cb <sinc_stereo_vari_process+0x347>
c000d15f:	e9 e7 00 00 00       	jmp    c000d24b <sinc_stereo_vari_process+0x3c7>
c000d164:	50                   	push   eax
c000d165:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d169:	56                   	push   esi
c000d16a:	53                   	push   ebx
c000d16b:	e8 4c e7 ff ff       	call   c000b8bc <prepare_data>
c000d170:	83 c4 10             	add    esp,0x10
c000d173:	89 c2                	mov    edx,eax
c000d175:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d178:	85 c0                	test   eax,eax
c000d17a:	0f 85 bf 03 00 00    	jne    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d180:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d183:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d186:	01 c8                	add    eax,ecx
c000d188:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d18b:	99                   	cdq    
c000d18c:	f7 f9                	idiv   ecx
c000d18e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d192:	7c c4                	jl     c000d158 <sinc_stereo_vari_process+0x2d4>
c000d194:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d198:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d19c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d19f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1ad:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1b3:	99                   	cdq    
c000d1b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1bd:	99                   	cdq    
c000d1be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1c1:	31 d2                	xor    edx,edx
c000d1c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1c6:	e9 74 03 00 00       	jmp    c000d53f <sinc_stereo_vari_process+0x6bb>
c000d1cb:	83 ec 0c             	sub    esp,0xc
c000d1ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1d1:	e8 35 b8 01 00       	call   c0028a0b <__floatsidf>
c000d1d6:	83 c4 10             	add    esp,0x10
c000d1d9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d1e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1f1:	e8 35 ab 01 00       	call   c0027d2b <__adddf3>
c000d1f6:	83 c4 10             	add    esp,0x10
c000d1f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d201:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d205:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d209:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d211:	e8 15 ab 01 00       	call   c0027d2b <__adddf3>
c000d216:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d219:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d21d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d221:	e8 e5 b7 01 00       	call   c0028a0b <__floatsidf>
c000d226:	83 c4 10             	add    esp,0x10
c000d229:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d22d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d231:	52                   	push   edx
c000d232:	50                   	push   eax
c000d233:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d237:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d23b:	e8 35 ba 01 00       	call   c0028c75 <__gedf2>
c000d240:	83 c4 10             	add    esp,0x10
c000d243:	85 c0                	test   eax,eax
c000d245:	0f 89 49 ff ff ff    	jns    c000d194 <sinc_stereo_vari_process+0x310>
c000d24b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d24f:	0f 8e ef 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d255:	83 ec 10             	sub    esp,0x10
c000d258:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d25b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d25e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d261:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d264:	e8 13 b1 01 00       	call   c002837c <__subdf3>
c000d269:	83 c4 18             	add    esp,0x18
c000d26c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d270:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d274:	52                   	push   edx
c000d275:	50                   	push   eax
c000d276:	e8 95 bb 01 00       	call   c0028e10 <fabs>
c000d27b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d27f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d283:	83 c4 10             	add    esp,0x10
c000d286:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d28b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d290:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d294:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d298:	e8 bc b9 01 00       	call   c0028c59 <__gtdf2>
c000d29d:	83 c4 10             	add    esp,0x10
c000d2a0:	85 c0                	test   eax,eax
c000d2a2:	0f 8e 9c 00 00 00    	jle    c000d344 <sinc_stereo_vari_process+0x4c0>
c000d2a8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ab:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2ae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2b2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2b6:	52                   	push   edx
c000d2b7:	50                   	push   eax
c000d2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2be:	e8 b9 b0 01 00       	call   c002837c <__subdf3>
c000d2c3:	59                   	pop    ecx
c000d2c4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2c8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2cc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2cf:	e8 37 b7 01 00       	call   c0028a0b <__floatsidf>
c000d2d4:	83 c4 10             	add    esp,0x10
c000d2d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2db:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2df:	52                   	push   edx
c000d2e0:	50                   	push   eax
c000d2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2e9:	e8 ba b0 01 00       	call   c00283a8 <__muldf3>
c000d2ee:	5f                   	pop    edi
c000d2ef:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2f3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2f7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d2fa:	e8 0c b7 01 00       	call   c0028a0b <__floatsidf>
c000d2ff:	83 c4 10             	add    esp,0x10
c000d302:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d306:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d310:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d314:	e8 73 b3 01 00       	call   c002868c <__divdf3>
c000d319:	83 c4 10             	add    esp,0x10
c000d31c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d320:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d32c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d330:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d334:	e8 f2 a9 01 00       	call   c0027d2b <__adddf3>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d344:	83 ec 0c             	sub    esp,0xc
c000d347:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d34a:	e8 bc b6 01 00       	call   c0028a0b <__floatsidf>
c000d34f:	83 c4 10             	add    esp,0x10
c000d352:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d356:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d35a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d35e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d362:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d36a:	e8 08 b9 01 00       	call   c0028c77 <__ltdf2>
c000d36f:	83 c4 10             	add    esp,0x10
c000d372:	85 c0                	test   eax,eax
c000d374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d378:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d37c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d380:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d384:	78 10                	js     c000d396 <sinc_stereo_vari_process+0x512>
c000d386:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d38a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d38e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d392:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d396:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d39e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3a6:	e8 fd af 01 00       	call   c00283a8 <__muldf3>
c000d3ab:	59                   	pop    ecx
c000d3ac:	5f                   	pop    edi
c000d3ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3b1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3bd:	e8 d3 e4 ff ff       	call   c000b895 <double_to_fp>
c000d3c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c6:	89 c7                	mov    edi,eax
c000d3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	e8 cf af 01 00       	call   c00283a8 <__muldf3>
c000d3d9:	83 c4 18             	add    esp,0x18
c000d3dc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3e4:	52                   	push   edx
c000d3e5:	50                   	push   eax
c000d3e6:	e8 aa e4 ff ff       	call   c000b895 <double_to_fp>
c000d3eb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d3ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d3f2:	83 c4 0c             	add    esp,0xc
c000d3f5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d3f8:	8d 04 90             	lea    eax,[eax+edx*4]
c000d3fb:	50                   	push   eax
c000d3fc:	50                   	push   eax
c000d3fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d400:	e8 06 b6 01 00       	call   c0028a0b <__floatsidf>
c000d405:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d409:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d40d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d411:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d419:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d41d:	e8 6a b2 01 00       	call   c002868c <__divdf3>
c000d422:	83 c4 18             	add    esp,0x18
c000d425:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d42d:	52                   	push   edx
c000d42e:	89 fa                	mov    edx,edi
c000d430:	50                   	push   eax
c000d431:	89 d8                	mov    eax,ebx
c000d433:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d437:	e8 02 c7 ff ff       	call   c0009b3e <calc_output_stereo>
c000d43c:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d440:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d444:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d448:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d44c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d450:	e8 37 b2 01 00       	call   c002868c <__divdf3>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d45c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d468:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d46c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d470:	e8 b6 a8 01 00       	call   c0027d2b <__adddf3>
c000d475:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d479:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d47d:	83 c4 18             	add    esp,0x18
c000d480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d484:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d488:	e8 a3 b9 01 00       	call   c0028e30 <lrint>
c000d48d:	83 ec 0c             	sub    esp,0xc
c000d490:	50                   	push   eax
c000d491:	e8 75 b5 01 00       	call   c0028a0b <__floatsidf>
c000d496:	83 c4 10             	add    esp,0x10
c000d499:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d49d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4a1:	52                   	push   edx
c000d4a2:	50                   	push   eax
c000d4a3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4ab:	e8 cc ae 01 00       	call   c002837c <__subdf3>
c000d4b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4b4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4b8:	83 c4 20             	add    esp,0x20
c000d4bb:	6a 00                	push   0x0
c000d4bd:	6a 00                	push   0x0
c000d4bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4c7:	e8 ab b7 01 00       	call   c0028c77 <__ltdf2>
c000d4cc:	83 c4 10             	add    esp,0x10
c000d4cf:	85 c0                	test   eax,eax
c000d4d1:	79 20                	jns    c000d4f3 <sinc_stereo_vari_process+0x66f>
c000d4d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e3:	e8 43 a8 01 00       	call   c0027d2b <__adddf3>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d4ef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d4f6:	83 ec 10             	sub    esp,0x10
c000d4f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d4fd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d508:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d50c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d510:	e8 67 ae 01 00       	call   c002837c <__subdf3>
c000d515:	83 c4 18             	add    esp,0x18
c000d518:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d520:	52                   	push   edx
c000d521:	50                   	push   eax
c000d522:	e8 09 b9 01 00       	call   c0028e30 <lrint>
c000d527:	0f af f8             	imul   edi,eax
c000d52a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d52e:	83 c4 10             	add    esp,0x10
c000d531:	01 f8                	add    eax,edi
c000d533:	99                   	cdq    
c000d534:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d537:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d53a:	e9 fd fb ff ff       	jmp    c000d13c <sinc_stereo_vari_process+0x2b8>
c000d53f:	83 c4 4c             	add    esp,0x4c
c000d542:	89 d0                	mov    eax,edx
c000d544:	5b                   	pop    ebx
c000d545:	5e                   	pop    esi
c000d546:	5f                   	pop    edi
c000d547:	5d                   	pop    ebp
c000d548:	c3                   	ret    

c000d549 <sinc_mono_vari_process>:
c000d549:	55                   	push   ebp
c000d54a:	ba 05 00 00 00       	mov    edx,0x5
c000d54f:	57                   	push   edi
c000d550:	56                   	push   esi
c000d551:	53                   	push   ebx
c000d552:	83 ec 4c             	sub    esp,0x4c
c000d555:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d559:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d55d:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d560:	85 db                	test   ebx,ebx
c000d562:	0f 84 c1 06 00 00    	je     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d56b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d56e:	0f af c7             	imul   eax,edi
c000d571:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d574:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d577:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d57e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d585:	0f af c7             	imul   eax,edi
c000d588:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d58b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d58f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d592:	8b 00                	mov    eax,DWORD PTR [eax]
c000d594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d59c:	68 00 00 70 3f       	push   0x3f700000
c000d5a1:	6a 00                	push   0x0
c000d5a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ab:	e8 c7 b6 01 00       	call   c0028c77 <__ltdf2>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	ba 16 00 00 00       	mov    edx,0x16
c000d5b8:	85 c0                	test   eax,eax
c000d5ba:	0f 88 69 06 00 00    	js     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5c0:	68 00 00 70 40       	push   0x40700000
c000d5c5:	6a 00                	push   0x0
c000d5c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5cf:	e8 85 b6 01 00       	call   c0028c59 <__gtdf2>
c000d5d4:	83 c4 10             	add    esp,0x10
c000d5d7:	ba 16 00 00 00       	mov    edx,0x16
c000d5dc:	85 c0                	test   eax,eax
c000d5de:	0f 8f 45 06 00 00    	jg     c000dc29 <sinc_mono_vari_process+0x6e0>
c000d5e4:	83 ec 0c             	sub    esp,0xc
c000d5e7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d5ea:	e8 1c b4 01 00       	call   c0028a0b <__floatsidf>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d5f6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d5fa:	68 00 00 00 40       	push   0x40000000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d605:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d609:	e8 1d a7 01 00       	call   c0027d2b <__adddf3>
c000d60e:	59                   	pop    ecx
c000d60f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d613:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d617:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d61a:	e8 ec b3 01 00       	call   c0028a0b <__floatsidf>
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d626:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d62a:	52                   	push   edx
c000d62b:	50                   	push   eax
c000d62c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d630:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d634:	e8 53 b0 01 00       	call   c002868c <__divdf3>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d640:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d644:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d647:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d64a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d64e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d652:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d656:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d662:	e8 f2 b5 01 00       	call   c0028c59 <__gtdf2>
c000d667:	83 c4 10             	add    esp,0x10
c000d66a:	85 c0                	test   eax,eax
c000d66c:	7e 2d                	jle    c000d69b <sinc_mono_vari_process+0x152>
c000d66e:	68 00 00 f0 3f       	push   0x3ff00000
c000d673:	6a 00                	push   0x0
c000d675:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d679:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d67d:	e8 f5 b5 01 00       	call   c0028c77 <__ltdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	79 4d                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d689:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d68d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d699:	eb 1b                	jmp    c000d6b6 <sinc_mono_vari_process+0x16d>
c000d69b:	68 00 00 f0 3f       	push   0x3ff00000
c000d6a0:	6a 00                	push   0x0
c000d6a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6aa:	e8 c8 b5 01 00       	call   c0028c77 <__ltdf2>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	85 c0                	test   eax,eax
c000d6b4:	79 20                	jns    c000d6d6 <sinc_mono_vari_process+0x18d>
c000d6b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6ba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6c6:	e8 c1 af 01 00       	call   c002868c <__divdf3>
c000d6cb:	83 c4 10             	add    esp,0x10
c000d6ce:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6d6:	50                   	push   eax
c000d6d7:	50                   	push   eax
c000d6d8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e0:	e8 4b b7 01 00       	call   c0028e30 <lrint>
c000d6e5:	40                   	inc    eax
c000d6e6:	0f af c7             	imul   eax,edi
c000d6e9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d6ed:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d6f1:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d6f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d6f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ff:	58                   	pop    eax
c000d700:	5a                   	pop    edx
c000d701:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d705:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d709:	e8 22 b7 01 00       	call   c0028e30 <lrint>
c000d70e:	83 ec 0c             	sub    esp,0xc
c000d711:	50                   	push   eax
c000d712:	e8 f4 b2 01 00       	call   c0028a0b <__floatsidf>
c000d717:	83 c4 10             	add    esp,0x10
c000d71a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d71e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d722:	52                   	push   edx
c000d723:	50                   	push   eax
c000d724:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d728:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d72c:	e8 4b ac 01 00       	call   c002837c <__subdf3>
c000d731:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d735:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d739:	83 c4 20             	add    esp,0x20
c000d73c:	6a 00                	push   0x0
c000d73e:	6a 00                	push   0x0
c000d740:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d744:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d748:	e8 2a b5 01 00       	call   c0028c77 <__ltdf2>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	85 c0                	test   eax,eax
c000d752:	79 1f                	jns    c000d773 <sinc_mono_vari_process+0x22a>
c000d754:	68 00 00 f0 3f       	push   0x3ff00000
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 c3 a5 01 00       	call   c0027d2b <__adddf3>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d76f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d773:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d776:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d779:	83 ec 10             	sub    esp,0x10
c000d77c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d780:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d784:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d788:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d78c:	e8 eb ab 01 00       	call   c002837c <__subdf3>
c000d791:	83 c4 18             	add    esp,0x18
c000d794:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d798:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d79c:	52                   	push   edx
c000d79d:	50                   	push   eax
c000d79e:	e8 8d b6 01 00       	call   c0028e30 <lrint>
c000d7a3:	0f af f8             	imul   edi,eax
c000d7a6:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7a9:	31 ff                	xor    edi,edi
c000d7ab:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7b0:	99                   	cdq    
c000d7b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7bf:	55                   	push   ebp
c000d7c0:	57                   	push   edi
c000d7c1:	e8 c6 ae 01 00       	call   c002868c <__divdf3>
c000d7c6:	83 c4 10             	add    esp,0x10
c000d7c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7cd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7d6:	68 23 42 92 0c       	push   0xc924223
c000d7db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7df:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e3:	e8 43 a5 01 00       	call   c0027d2b <__adddf3>
c000d7e8:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d7ec:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d7f0:	83 c4 20             	add    esp,0x20
c000d7f3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d7f7:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d7fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d7fe:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d801:	7d 54                	jge    c000d857 <sinc_mono_vari_process+0x30e>
c000d803:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d806:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d809:	01 c8                	add    eax,ecx
c000d80b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d80e:	99                   	cdq    
c000d80f:	f7 f9                	idiv   ecx
c000d811:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d815:	7d 0c                	jge    c000d823 <sinc_mono_vari_process+0x2da>
c000d817:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d81a:	85 ff                	test   edi,edi
c000d81c:	79 73                	jns    c000d891 <sinc_mono_vari_process+0x348>
c000d81e:	e9 ee 00 00 00       	jmp    c000d911 <sinc_mono_vari_process+0x3c8>
c000d823:	50                   	push   eax
c000d824:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d828:	56                   	push   esi
c000d829:	53                   	push   ebx
c000d82a:	e8 8d e0 ff ff       	call   c000b8bc <prepare_data>
c000d82f:	89 c2                	mov    edx,eax
c000d831:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d835:	83 c4 10             	add    esp,0x10
c000d838:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d83b:	85 d2                	test   edx,edx
c000d83d:	0f 85 e6 03 00 00    	jne    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d843:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d846:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d849:	01 c8                	add    eax,ecx
c000d84b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d84e:	99                   	cdq    
c000d84f:	f7 f9                	idiv   ecx
c000d851:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d855:	7c c0                	jl     c000d817 <sinc_mono_vari_process+0x2ce>
c000d857:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d85f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d863:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d866:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d869:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d871:	89 01                	mov    DWORD PTR [ecx],eax
c000d873:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d876:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d879:	99                   	cdq    
c000d87a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d87d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d880:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d883:	99                   	cdq    
c000d884:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d887:	31 d2                	xor    edx,edx
c000d889:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d88c:	e9 98 03 00 00       	jmp    c000dc29 <sinc_mono_vari_process+0x6e0>
c000d891:	83 ec 0c             	sub    esp,0xc
c000d894:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d897:	e8 6f b1 01 00       	call   c0028a0b <__floatsidf>
c000d89c:	83 c4 10             	add    esp,0x10
c000d89f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8a7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8b7:	e8 6f a4 01 00       	call   c0027d2b <__adddf3>
c000d8bc:	83 c4 10             	add    esp,0x10
c000d8bf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8c3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d7:	e8 4f a4 01 00       	call   c0027d2b <__adddf3>
c000d8dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8df:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8e7:	e8 1f b1 01 00       	call   c0028a0b <__floatsidf>
c000d8ec:	83 c4 10             	add    esp,0x10
c000d8ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d8f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d8f7:	52                   	push   edx
c000d8f8:	50                   	push   eax
c000d8f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d901:	e8 53 b3 01 00       	call   c0028c59 <__gtdf2>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	85 c0                	test   eax,eax
c000d90b:	0f 8f 46 ff ff ff    	jg     c000d857 <sinc_mono_vari_process+0x30e>
c000d911:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d915:	0f 8e f5 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d91b:	83 ec 10             	sub    esp,0x10
c000d91e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d921:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d924:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d928:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d92b:	ff 30                	push   DWORD PTR [eax]
c000d92d:	e8 4a aa 01 00       	call   c002837c <__subdf3>
c000d932:	83 c4 18             	add    esp,0x18
c000d935:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d939:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d93d:	52                   	push   edx
c000d93e:	50                   	push   eax
c000d93f:	e8 cc b4 01 00       	call   c0028e10 <fabs>
c000d944:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d948:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d94c:	83 c4 10             	add    esp,0x10
c000d94f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d954:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d959:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d961:	e8 f3 b2 01 00       	call   c0028c59 <__gtdf2>
c000d966:	83 c4 10             	add    esp,0x10
c000d969:	85 c0                	test   eax,eax
c000d96b:	0f 8e 9f 00 00 00    	jle    c000da10 <sinc_mono_vari_process+0x4c7>
c000d971:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d975:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d978:	8b 00                	mov    eax,DWORD PTR [eax]
c000d97a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d97e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d982:	52                   	push   edx
c000d983:	50                   	push   eax
c000d984:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d987:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d98a:	e8 ed a9 01 00       	call   c002837c <__subdf3>
c000d98f:	5f                   	pop    edi
c000d990:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d994:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d998:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d99b:	e8 6b b0 01 00       	call   c0028a0b <__floatsidf>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9a7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9ab:	52                   	push   edx
c000d9ac:	50                   	push   eax
c000d9ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9b5:	e8 ee a9 01 00       	call   c00283a8 <__muldf3>
c000d9ba:	5d                   	pop    ebp
c000d9bb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9bf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9c3:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9c6:	e8 40 b0 01 00       	call   c0028a0b <__floatsidf>
c000d9cb:	83 c4 10             	add    esp,0x10
c000d9ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9d2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9d6:	52                   	push   edx
c000d9d7:	50                   	push   eax
c000d9d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9e0:	e8 a7 ac 01 00       	call   c002868c <__divdf3>
c000d9e5:	83 c4 10             	add    esp,0x10
c000d9e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9ec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d9f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da00:	e8 26 a3 01 00       	call   c0027d2b <__adddf3>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da0c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da10:	83 ec 0c             	sub    esp,0xc
c000da13:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da16:	e8 f0 af 01 00       	call   c0028a0b <__floatsidf>
c000da1b:	83 c4 10             	add    esp,0x10
c000da1e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da22:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da36:	e8 3c b2 01 00       	call   c0028c77 <__ltdf2>
c000da3b:	83 c4 10             	add    esp,0x10
c000da3e:	85 c0                	test   eax,eax
c000da40:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da44:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da48:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da4c:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da50:	78 10                	js     c000da62 <sinc_mono_vari_process+0x519>
c000da52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da5a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da5e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da72:	e8 31 a9 01 00       	call   c00283a8 <__muldf3>
c000da77:	59                   	pop    ecx
c000da78:	5f                   	pop    edi
c000da79:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da81:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da85:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da89:	e8 07 de ff ff       	call   c000b895 <double_to_fp>
c000da8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da92:	89 c7                	mov    edi,eax
c000da94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000da9c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000daa0:	e8 03 a9 01 00       	call   c00283a8 <__muldf3>
c000daa5:	83 c4 18             	add    esp,0x18
c000daa8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000daac:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dab0:	52                   	push   edx
c000dab1:	50                   	push   eax
c000dab2:	e8 de dd ff ff       	call   c000b895 <double_to_fp>
c000dab7:	83 ec 0c             	sub    esp,0xc
c000daba:	89 c5                	mov    ebp,eax
c000dabc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dabf:	e8 47 af 01 00       	call   c0028a0b <__floatsidf>
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dacb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000dacf:	52                   	push   edx
c000dad0:	50                   	push   eax
c000dad1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dad9:	e8 ae ab 01 00       	call   c002868c <__divdf3>
c000dade:	83 c4 10             	add    esp,0x10
c000dae1:	89 e9                	mov    ecx,ebp
c000dae3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daeb:	89 d8                	mov    eax,ebx
c000daed:	89 fa                	mov    edx,edi
c000daef:	e8 ee bd ff ff       	call   c00098e2 <calc_output_single>
c000daf4:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000daf7:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000dafa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dafe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db02:	52                   	push   edx
c000db03:	50                   	push   eax
c000db04:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db08:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db0c:	e8 97 a8 01 00       	call   c00283a8 <__muldf3>
c000db11:	59                   	pop    ecx
c000db12:	59                   	pop    ecx
c000db13:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db17:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db1b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db1f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db23:	e8 53 b1 01 00       	call   c0028c7b <__truncdfsf2>
c000db28:	83 c4 10             	add    esp,0x10
c000db2b:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db2e:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db31:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db39:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db41:	e8 46 ab 01 00       	call   c002868c <__divdf3>
c000db46:	83 c4 10             	add    esp,0x10
c000db49:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db4d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db61:	e8 c5 a1 01 00       	call   c0027d2b <__adddf3>
c000db66:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db6a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db6e:	83 c4 18             	add    esp,0x18
c000db71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db75:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db79:	e8 b2 b2 01 00       	call   c0028e30 <lrint>
c000db7e:	83 ec 0c             	sub    esp,0xc
c000db81:	50                   	push   eax
c000db82:	e8 84 ae 01 00       	call   c0028a0b <__floatsidf>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000db8e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000db92:	52                   	push   edx
c000db93:	50                   	push   eax
c000db94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9c:	e8 db a7 01 00       	call   c002837c <__subdf3>
c000dba1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dba5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dba9:	83 c4 20             	add    esp,0x20
c000dbac:	6a 00                	push   0x0
c000dbae:	6a 00                	push   0x0
c000dbb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb8:	e8 ba b0 01 00       	call   c0028c77 <__ltdf2>
c000dbbd:	83 c4 10             	add    esp,0x10
c000dbc0:	85 c0                	test   eax,eax
c000dbc2:	79 20                	jns    c000dbe4 <sinc_mono_vari_process+0x69b>
c000dbc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd4:	e8 52 a1 01 00       	call   c0027d2b <__adddf3>
c000dbd9:	83 c4 10             	add    esp,0x10
c000dbdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbe0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbe4:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dbe7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dbea:	83 ec 10             	sub    esp,0x10
c000dbed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbf5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbf9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbfd:	e8 7a a7 01 00       	call   c002837c <__subdf3>
c000dc02:	83 c4 18             	add    esp,0x18
c000dc05:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc09:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc0d:	52                   	push   edx
c000dc0e:	50                   	push   eax
c000dc0f:	e8 1c b2 01 00       	call   c0028e30 <lrint>
c000dc14:	83 c4 10             	add    esp,0x10
c000dc17:	0f af f8             	imul   edi,eax
c000dc1a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc1d:	99                   	cdq    
c000dc1e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc21:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc24:	e9 d2 fb ff ff       	jmp    c000d7fb <sinc_mono_vari_process+0x2b2>
c000dc29:	83 c4 4c             	add    esp,0x4c
c000dc2c:	89 d0                	mov    eax,edx
c000dc2e:	5b                   	pop    ebx
c000dc2f:	5e                   	pop    esi
c000dc30:	5f                   	pop    edi
c000dc31:	5d                   	pop    ebp
c000dc32:	c3                   	ret    

c000dc33 <sinc_get_name>:
c000dc33:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc37:	31 c0                	xor    eax,eax
c000dc39:	83 fa 02             	cmp    edx,0x2
c000dc3c:	77 07                	ja     c000dc45 <sinc_get_name+0x12>
c000dc3e:	8b 04 95 04 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58fc]
c000dc45:	c3                   	ret    

c000dc46 <sinc_get_description>:
c000dc46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc4a:	31 c0                	xor    eax,eax
c000dc4c:	83 fa 02             	cmp    edx,0x2
c000dc4f:	77 07                	ja     c000dc58 <sinc_get_description+0x12>
c000dc51:	8b 04 95 f8 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd5908]
c000dc58:	c3                   	ret    

c000dc59 <sinc_set_converter>:
c000dc59:	53                   	push   ebx
c000dc5a:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc60:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc67:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc6a:	85 c0                	test   eax,eax
c000dc6c:	74 13                	je     c000dc81 <sinc_set_converter+0x28>
c000dc6e:	83 ec 0c             	sub    esp,0xc
c000dc71:	50                   	push   eax
c000dc72:	e8 25 1c 00 00       	call   c000f89c <free>
c000dc77:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc7e:	83 c4 10             	add    esp,0x10
c000dc81:	50                   	push   eax
c000dc82:	68 44 08 00 00       	push   0x844
c000dc87:	6a 00                	push   0x0
c000dc89:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dc8d:	50                   	push   eax
c000dc8e:	e8 bd 2a ff ff       	call   c0000750 <memset>
c000dc93:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dc96:	83 c4 10             	add    esp,0x10
c000dc99:	b8 0b 00 00 00       	mov    eax,0xb
c000dc9e:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dca4:	7f 6e                	jg     c000dd14 <sinc_set_converter+0xbb>
c000dca6:	83 fa 01             	cmp    edx,0x1
c000dca9:	75 10                	jne    c000dcbb <sinc_set_converter+0x62>
c000dcab:	c7 43 24 49 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d549
c000dcb2:	c7 43 20 49 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d549
c000dcb9:	eb 4d                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcbb:	83 fa 02             	cmp    edx,0x2
c000dcbe:	75 10                	jne    c000dcd0 <sinc_set_converter+0x77>
c000dcc0:	c7 43 24 84 ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce84
c000dcc7:	c7 43 20 84 ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce84
c000dcce:	eb 38                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcd0:	83 fa 04             	cmp    edx,0x4
c000dcd3:	75 10                	jne    c000dce5 <sinc_set_converter+0x8c>
c000dcd5:	c7 43 24 bf c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7bf
c000dcdc:	c7 43 20 bf c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7bf
c000dce3:	eb 23                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dce5:	83 fa 06             	cmp    edx,0x6
c000dce8:	75 10                	jne    c000dcfa <sinc_set_converter+0xa1>
c000dcea:	c7 43 24 fa c0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c0fa
c000dcf1:	c7 43 20 fa c0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c0fa
c000dcf8:	eb 0e                	jmp    c000dd08 <sinc_set_converter+0xaf>
c000dcfa:	c7 43 24 36 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba36
c000dd01:	c7 43 20 36 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba36
c000dd08:	c7 43 28 e9 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ace9
c000dd0f:	b8 0a 00 00 00       	mov    eax,0xa
c000dd14:	81 c4 58 08 00 00    	add    esp,0x858
c000dd1a:	5b                   	pop    ebx
c000dd1b:	c3                   	ret    

c000dd1c <zoh_vari_process>:
c000dd1c:	55                   	push   ebp
c000dd1d:	31 d2                	xor    edx,edx
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 3c             	sub    esp,0x3c
c000dd25:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd29:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd2d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd31:	0f 8e 80 06 00 00    	jle    c000e3b7 <zoh_vari_process+0x69b>
c000dd37:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd3a:	ba 05 00 00 00       	mov    edx,0x5
c000dd3f:	85 db                	test   ebx,ebx
c000dd41:	0f 84 70 06 00 00    	je     c000e3b7 <zoh_vari_process+0x69b>
c000dd47:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd4a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd4e:	74 19                	je     c000dd69 <zoh_vari_process+0x4d>
c000dd50:	31 d2                	xor    edx,edx
c000dd52:	39 c2                	cmp    edx,eax
c000dd54:	7d 0c                	jge    c000dd62 <zoh_vari_process+0x46>
c000dd56:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd58:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd5b:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd5f:	42                   	inc    edx
c000dd60:	eb f0                	jmp    c000dd52 <zoh_vari_process+0x36>
c000dd62:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd69:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd6c:	0f af d0             	imul   edx,eax
c000dd6f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd72:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd76:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd7d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd80:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dd87:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dd8a:	8b 07                	mov    eax,DWORD PTR [edi]
c000dd8c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd94:	68 00 00 70 3f       	push   0x3f700000
c000dd99:	6a 00                	push   0x0
c000dd9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dda3:	e8 cf ae 01 00       	call   c0028c77 <__ltdf2>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	ba 16 00 00 00       	mov    edx,0x16
c000ddb0:	85 c0                	test   eax,eax
c000ddb2:	0f 88 ff 05 00 00    	js     c000e3b7 <zoh_vari_process+0x69b>
c000ddb8:	68 00 00 70 40       	push   0x40700000
c000ddbd:	6a 00                	push   0x0
c000ddbf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddc7:	e8 8d ae 01 00       	call   c0028c59 <__gtdf2>
c000ddcc:	83 c4 10             	add    esp,0x10
c000ddcf:	ba 16 00 00 00       	mov    edx,0x16
c000ddd4:	85 c0                	test   eax,eax
c000ddd6:	0f 8f db 05 00 00    	jg     c000e3b7 <zoh_vari_process+0x69b>
c000dddc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dddf:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dde2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dde6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddea:	68 00 00 f0 3f       	push   0x3ff00000
c000ddef:	6a 00                	push   0x0
c000ddf1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddf9:	e8 79 ae 01 00       	call   c0028c77 <__ltdf2>
c000ddfe:	83 c4 10             	add    esp,0x10
c000de01:	85 c0                	test   eax,eax
c000de03:	0f 89 da 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000de09:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de0c:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de0f:	0f 8d ce 01 00 00    	jge    c000dfe3 <zoh_vari_process+0x2c7>
c000de15:	83 ec 0c             	sub    esp,0xc
c000de18:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de1b:	e8 eb ab 01 00       	call   c0028a0b <__floatsidf>
c000de20:	83 c4 10             	add    esp,0x10
c000de23:	89 04 24             	mov    DWORD PTR [esp],eax
c000de26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de32:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de3a:	e8 69 a5 01 00       	call   c00283a8 <__muldf3>
c000de3f:	59                   	pop    ecx
c000de40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de44:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de48:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de4b:	e8 bb ab 01 00       	call   c0028a0b <__floatsidf>
c000de50:	83 c4 10             	add    esp,0x10
c000de53:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de57:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de5b:	52                   	push   edx
c000de5c:	50                   	push   eax
c000de5d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de61:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de65:	e8 c1 9e 01 00       	call   c0027d2b <__adddf3>
c000de6a:	59                   	pop    ecx
c000de6b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de6f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de73:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de76:	e8 90 ab 01 00       	call   c0028a0b <__floatsidf>
c000de7b:	83 c4 10             	add    esp,0x10
c000de7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de82:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de86:	52                   	push   edx
c000de87:	50                   	push   eax
c000de88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de90:	e8 e0 ad 01 00       	call   c0028c75 <__gedf2>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	85 c0                	test   eax,eax
c000de9a:	0f 89 43 01 00 00    	jns    c000dfe3 <zoh_vari_process+0x2c7>
c000dea0:	85 ed                	test   ebp,ebp
c000dea2:	0f 8e ec 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000dea8:	83 ec 10             	sub    esp,0x10
c000deab:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000deae:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deb1:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deb4:	ff 37                	push   DWORD PTR [edi]
c000deb6:	e8 c1 a4 01 00       	call   c002837c <__subdf3>
c000debb:	83 c4 18             	add    esp,0x18
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dec6:	52                   	push   edx
c000dec7:	50                   	push   eax
c000dec8:	e8 43 af 01 00       	call   c0028e10 <fabs>
c000decd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ded1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ded5:	83 c4 10             	add    esp,0x10
c000ded8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dedd:	68 23 42 92 0c       	push   0xc924223
c000dee2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dee6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deea:	e8 6a ad 01 00       	call   c0028c59 <__gtdf2>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	85 c0                	test   eax,eax
c000def4:	0f 8e 9a 00 00 00    	jle    c000df94 <zoh_vari_process+0x278>
c000defa:	8b 07                	mov    eax,DWORD PTR [edi]
c000defc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000deff:	89 04 24             	mov    DWORD PTR [esp],eax
c000df02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df06:	52                   	push   edx
c000df07:	50                   	push   eax
c000df08:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df0b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df0e:	e8 69 a4 01 00       	call   c002837c <__subdf3>
c000df13:	59                   	pop    ecx
c000df14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df18:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df1c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df1f:	e8 e7 aa 01 00       	call   c0028a0b <__floatsidf>
c000df24:	83 c4 10             	add    esp,0x10
c000df27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df2b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df2f:	52                   	push   edx
c000df30:	50                   	push   eax
c000df31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df39:	e8 6a a4 01 00       	call   c00283a8 <__muldf3>
c000df3e:	5d                   	pop    ebp
c000df3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df47:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df4a:	e8 bc aa 01 00       	call   c0028a0b <__floatsidf>
c000df4f:	83 c4 10             	add    esp,0x10
c000df52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df5a:	52                   	push   edx
c000df5b:	50                   	push   eax
c000df5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df64:	e8 23 a7 01 00       	call   c002868c <__divdf3>
c000df69:	83 c4 10             	add    esp,0x10
c000df6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df74:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df78:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df84:	e8 a2 9d 01 00       	call   c0027d2b <__adddf3>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df90:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df94:	31 c0                	xor    eax,eax
c000df96:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000df99:	7e 13                	jle    c000dfae <zoh_vari_process+0x292>
c000df9b:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000df9f:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfa2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfa5:	40                   	inc    eax
c000dfa6:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfa9:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfac:	eb e8                	jmp    c000df96 <zoh_vari_process+0x27a>
c000dfae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfb6:	68 00 00 f0 3f       	push   0x3ff00000
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 ca a6 01 00       	call   c002868c <__divdf3>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfc8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfcc:	52                   	push   edx
c000dfcd:	50                   	push   eax
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd6:	e8 50 9d 01 00       	call   c0027d2b <__adddf3>
c000dfdb:	83 c4 10             	add    esp,0x10
c000dfde:	e9 ff fd ff ff       	jmp    c000dde2 <zoh_vari_process+0xc6>
c000dfe3:	55                   	push   ebp
c000dfe4:	55                   	push   ebp
c000dfe5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	e8 3e ae 01 00       	call   c0028e30 <lrint>
c000dff2:	83 ec 0c             	sub    esp,0xc
c000dff5:	50                   	push   eax
c000dff6:	e8 10 aa 01 00       	call   c0028a0b <__floatsidf>
c000dffb:	83 c4 10             	add    esp,0x10
c000dffe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e002:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e010:	e8 67 a3 01 00       	call   c002837c <__subdf3>
c000e015:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e019:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e01d:	83 c4 20             	add    esp,0x20
c000e020:	6a 00                	push   0x0
c000e022:	6a 00                	push   0x0
c000e024:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e02c:	e8 46 ac 01 00       	call   c0028c77 <__ltdf2>
c000e031:	83 c4 10             	add    esp,0x10
c000e034:	85 c0                	test   eax,eax
c000e036:	79 1e                	jns    c000e056 <zoh_vari_process+0x33a>
c000e038:	68 00 00 f0 3f       	push   0x3ff00000
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 df 9c 01 00       	call   c0027d2b <__adddf3>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e052:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e056:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e059:	83 ec 10             	sub    esp,0x10
c000e05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e064:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e068:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e06c:	e8 0b a3 01 00       	call   c002837c <__subdf3>
c000e071:	83 c4 18             	add    esp,0x18
c000e074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e078:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e07c:	52                   	push   edx
c000e07d:	50                   	push   eax
c000e07e:	e8 ad ad 01 00       	call   c0028e30 <lrint>
c000e083:	83 c4 10             	add    esp,0x10
c000e086:	0f af e8             	imul   ebp,eax
c000e089:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e08c:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e08f:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e093:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e096:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e099:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e09d:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0a0:	0f 8d 7a 02 00 00    	jge    c000e320 <zoh_vari_process+0x604>
c000e0a6:	83 ec 0c             	sub    esp,0xc
c000e0a9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ac:	e8 5a a9 01 00       	call   c0028a0b <__floatsidf>
c000e0b1:	83 c4 10             	add    esp,0x10
c000e0b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0bc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0c8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0cc:	e8 d7 a2 01 00       	call   c00283a8 <__muldf3>
c000e0d1:	59                   	pop    ecx
c000e0d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0d6:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0de:	e8 28 a9 01 00       	call   c0028a0b <__floatsidf>
c000e0e3:	83 c4 10             	add    esp,0x10
c000e0e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0ee:	52                   	push   edx
c000e0ef:	50                   	push   eax
c000e0f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0f8:	e8 2e 9c 01 00       	call   c0027d2b <__adddf3>
c000e0fd:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e104:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e108:	e8 fe a8 01 00       	call   c0028a0b <__floatsidf>
c000e10d:	83 c4 10             	add    esp,0x10
c000e110:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e114:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e118:	52                   	push   edx
c000e119:	50                   	push   eax
c000e11a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e11e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e122:	e8 52 ab 01 00       	call   c0028c79 <__ledf2>
c000e127:	83 c4 10             	add    esp,0x10
c000e12a:	85 c0                	test   eax,eax
c000e12c:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e130:	0f 8f ea 01 00 00    	jg     c000e320 <zoh_vari_process+0x604>
c000e136:	85 c9                	test   ecx,ecx
c000e138:	0f 8e ed 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e13e:	83 ec 10             	sub    esp,0x10
c000e141:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e144:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e147:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e14a:	ff 37                	push   DWORD PTR [edi]
c000e14c:	e8 2b a2 01 00       	call   c002837c <__subdf3>
c000e151:	83 c4 18             	add    esp,0x18
c000e154:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e158:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e15c:	52                   	push   edx
c000e15d:	50                   	push   eax
c000e15e:	e8 ad ac 01 00       	call   c0028e10 <fabs>
c000e163:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e167:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e16b:	83 c4 10             	add    esp,0x10
c000e16e:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e173:	68 23 42 92 0c       	push   0xc924223
c000e178:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e17c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e180:	e8 d4 aa 01 00       	call   c0028c59 <__gtdf2>
c000e185:	83 c4 10             	add    esp,0x10
c000e188:	85 c0                	test   eax,eax
c000e18a:	0f 8e 9b 00 00 00    	jle    c000e22b <zoh_vari_process+0x50f>
c000e190:	8b 07                	mov    eax,DWORD PTR [edi]
c000e192:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e199:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e19d:	52                   	push   edx
c000e19e:	50                   	push   eax
c000e19f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1a5:	e8 d2 a1 01 00       	call   c002837c <__subdf3>
c000e1aa:	5d                   	pop    ebp
c000e1ab:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1af:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1b3:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1b6:	e8 50 a8 01 00       	call   c0028a0b <__floatsidf>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1c6:	52                   	push   edx
c000e1c7:	50                   	push   eax
c000e1c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1d0:	e8 d3 a1 01 00       	call   c00283a8 <__muldf3>
c000e1d5:	59                   	pop    ecx
c000e1d6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1da:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1de:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1e1:	e8 25 a8 01 00       	call   c0028a0b <__floatsidf>
c000e1e6:	83 c4 10             	add    esp,0x10
c000e1e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1f1:	52                   	push   edx
c000e1f2:	50                   	push   eax
c000e1f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1fb:	e8 8c a4 01 00       	call   c002868c <__divdf3>
c000e200:	83 c4 10             	add    esp,0x10
c000e203:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e207:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e20b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e20f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e213:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e217:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21b:	e8 0b 9b 01 00       	call   c0027d2b <__adddf3>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e227:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e22b:	31 d2                	xor    edx,edx
c000e22d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e230:	39 d0                	cmp    eax,edx
c000e232:	7e 1d                	jle    c000e251 <zoh_vari_process+0x535>
c000e234:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e237:	29 c1                	sub    ecx,eax
c000e239:	89 c8                	mov    eax,ecx
c000e23b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e23d:	01 d0                	add    eax,edx
c000e23f:	42                   	inc    edx
c000e240:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e243:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e246:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e249:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e24c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e24f:	eb dc                	jmp    c000e22d <zoh_vari_process+0x511>
c000e251:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e255:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e259:	68 00 00 f0 3f       	push   0x3ff00000
c000e25e:	6a 00                	push   0x0
c000e260:	e8 27 a4 01 00       	call   c002868c <__divdf3>
c000e265:	83 c4 10             	add    esp,0x10
c000e268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e26c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e270:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e274:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e27c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e280:	e8 a6 9a 01 00       	call   c0027d2b <__adddf3>
c000e285:	5d                   	pop    ebp
c000e286:	59                   	pop    ecx
c000e287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e28b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e28f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	e8 94 ab 01 00       	call   c0028e30 <lrint>
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	50                   	push   eax
c000e2a0:	e8 66 a7 01 00       	call   c0028a0b <__floatsidf>
c000e2a5:	83 c4 10             	add    esp,0x10
c000e2a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2b0:	52                   	push   edx
c000e2b1:	50                   	push   eax
c000e2b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2ba:	e8 bd a0 01 00       	call   c002837c <__subdf3>
c000e2bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2c7:	83 c4 20             	add    esp,0x20
c000e2ca:	6a 00                	push   0x0
c000e2cc:	6a 00                	push   0x0
c000e2ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2d6:	e8 9c a9 01 00       	call   c0028c77 <__ltdf2>
c000e2db:	83 c4 10             	add    esp,0x10
c000e2de:	85 c0                	test   eax,eax
c000e2e0:	79 1e                	jns    c000e300 <zoh_vari_process+0x5e4>
c000e2e2:	68 00 00 f0 3f       	push   0x3ff00000
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 35 9a 01 00       	call   c0027d2b <__adddf3>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e2fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e300:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e303:	83 ec 10             	sub    esp,0x10
c000e306:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e30e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e312:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e316:	e8 61 a0 01 00       	call   c002837c <__subdf3>
c000e31b:	e9 51 fd ff ff       	jmp    c000e071 <zoh_vari_process+0x355>
c000e320:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e324:	7d 3a                	jge    c000e360 <zoh_vari_process+0x644>
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	29 e8                	sub    eax,ebp
c000e32f:	99                   	cdq    
c000e330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e333:	50                   	push   eax
c000e334:	e8 d2 a6 01 00       	call   c0028a0b <__floatsidf>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e340:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e344:	52                   	push   edx
c000e345:	50                   	push   eax
c000e346:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e34e:	e8 d8 99 01 00       	call   c0027d2b <__adddf3>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e359:	89 04 24             	mov    DWORD PTR [esp],eax
c000e35c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e360:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e363:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e367:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e36a:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e36d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e370:	85 c0                	test   eax,eax
c000e372:	7f 25                	jg     c000e399 <zoh_vari_process+0x67d>
c000e374:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e378:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e37c:	89 07                	mov    DWORD PTR [edi],eax
c000e37e:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e381:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e384:	99                   	cdq    
c000e385:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e388:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e38b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e38e:	99                   	cdq    
c000e38f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e392:	31 d2                	xor    edx,edx
c000e394:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e397:	eb 1e                	jmp    c000e3b7 <zoh_vari_process+0x69b>
c000e399:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e39c:	31 d2                	xor    edx,edx
c000e39e:	29 c8                	sub    eax,ecx
c000e3a0:	c1 e0 02             	shl    eax,0x2
c000e3a3:	39 d1                	cmp    ecx,edx
c000e3a5:	7e cd                	jle    c000e374 <zoh_vari_process+0x658>
c000e3a7:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3a9:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3ad:	83 c0 04             	add    eax,0x4
c000e3b0:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3b4:	42                   	inc    edx
c000e3b5:	eb ec                	jmp    c000e3a3 <zoh_vari_process+0x687>
c000e3b7:	83 c4 3c             	add    esp,0x3c
c000e3ba:	89 d0                	mov    eax,edx
c000e3bc:	5b                   	pop    ebx
c000e3bd:	5e                   	pop    esi
c000e3be:	5f                   	pop    edi
c000e3bf:	5d                   	pop    ebp
c000e3c0:	c3                   	ret    

c000e3c1 <zoh_reset>:
c000e3c1:	83 ec 0c             	sub    esp,0xc
c000e3c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3c8:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3cb:	85 c0                	test   eax,eax
c000e3cd:	74 20                	je     c000e3ef <zoh_reset+0x2e>
c000e3cf:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3d2:	83 c0 1c             	add    eax,0x1c
c000e3d5:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3d8:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3df:	c1 e2 02             	shl    edx,0x2
c000e3e2:	51                   	push   ecx
c000e3e3:	52                   	push   edx
c000e3e4:	6a 00                	push   0x0
c000e3e6:	50                   	push   eax
c000e3e7:	e8 64 23 ff ff       	call   c0000750 <memset>
c000e3ec:	83 c4 10             	add    esp,0x10
c000e3ef:	83 c4 0c             	add    esp,0xc
c000e3f2:	c3                   	ret    

c000e3f3 <zoh_get_name>:
c000e3f3:	31 c0                	xor    eax,eax
c000e3f5:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e3fa:	75 05                	jne    c000e401 <zoh_get_name+0xe>
c000e3fc:	b8 1e a8 02 c0       	mov    eax,0xc002a81e
c000e401:	c3                   	ret    

c000e402 <zoh_get_description>:
c000e402:	31 c0                	xor    eax,eax
c000e404:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e409:	75 05                	jne    c000e410 <zoh_get_description+0xe>
c000e40b:	b8 2f a8 02 c0       	mov    eax,0xc002a82f
c000e410:	c3                   	ret    

c000e411 <zoh_set_converter>:
c000e411:	53                   	push   ebx
c000e412:	b8 0a 00 00 00       	mov    eax,0xa
c000e417:	83 ec 08             	sub    esp,0x8
c000e41a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e41e:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e423:	75 6e                	jne    c000e493 <zoh_set_converter+0x82>
c000e425:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e428:	85 c0                	test   eax,eax
c000e42a:	74 13                	je     c000e43f <zoh_set_converter+0x2e>
c000e42c:	83 ec 0c             	sub    esp,0xc
c000e42f:	50                   	push   eax
c000e430:	e8 67 14 00 00       	call   c000f89c <free>
c000e435:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e43c:	83 c4 10             	add    esp,0x10
c000e43f:	50                   	push   eax
c000e440:	50                   	push   eax
c000e441:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e444:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e44b:	50                   	push   eax
c000e44c:	6a 01                	push   0x1
c000e44e:	e8 69 14 00 00       	call   c000f8bc <calloc>
c000e453:	83 c4 10             	add    esp,0x10
c000e456:	89 c2                	mov    edx,eax
c000e458:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e45b:	85 d2                	test   edx,edx
c000e45d:	b8 01 00 00 00       	mov    eax,0x1
c000e462:	74 2f                	je     c000e493 <zoh_set_converter+0x82>
c000e464:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e467:	83 ec 0c             	sub    esp,0xc
c000e46a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e46d:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e473:	c7 43 24 1c dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd1c
c000e47a:	c7 43 20 1c dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd1c
c000e481:	c7 43 28 c1 e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3c1
c000e488:	53                   	push   ebx
c000e489:	e8 33 ff ff ff       	call   c000e3c1 <zoh_reset>
c000e48e:	83 c4 10             	add    esp,0x10
c000e491:	31 c0                	xor    eax,eax
c000e493:	83 c4 08             	add    esp,0x8
c000e496:	5b                   	pop    ebx
c000e497:	c3                   	ret    

c000e498 <CPU::current()>:
c000e498:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000e49d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4a3:	c3                   	ret    

c000e4a4 <operator new(unsigned long)>:
c000e4a4:	e9 e3 13 00 00       	jmp    c000f88c <malloc>

c000e4a9 <operator delete(void*)>:
c000e4a9:	e9 fe 13 00 00       	jmp    c000f8ac <rfree>

c000e4ae <disableIRQs()>:
c000e4ae:	fa                   	cli    
c000e4af:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c000e4b5:	c3                   	ret    

c000e4b6 <enableIRQs()>:
c000e4b6:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e4bb:	48                   	dec    eax
c000e4bc:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e4c1:	75 01                	jne    c000e4c4 <enableIRQs()+0xe>
c000e4c3:	fb                   	sti    
c000e4c4:	c3                   	ret    

c000e4c5 <lockScheduler()>:
c000e4c5:	fa                   	cli    
c000e4c6:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c000e4cc:	c3                   	ret    

c000e4cd <unlockScheduler()>:
c000e4cd:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e4d2:	48                   	dec    eax
c000e4d3:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e4d8:	75 01                	jne    c000e4db <unlockScheduler()+0xe>
c000e4da:	fb                   	sti    
c000e4db:	c3                   	ret    

c000e4dc <lockStuff()>:
c000e4dc:	fa                   	cli    
c000e4dd:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c000e4e3:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c000e4e9:	c3                   	ret    

c000e4ea <unlockStuff()>:
c000e4ea:	83 ec 0c             	sub    esp,0xc
c000e4ed:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c000e4f2:	48                   	dec    eax
c000e4f3:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c000e4f8:	75 18                	jne    c000e512 <unlockStuff()+0x28>
c000e4fa:	83 3d 60 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032360,0x0
c000e501:	74 0f                	je     c000e512 <unlockStuff()+0x28>
c000e503:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c000e50d:	e8 52 fb 00 00       	call   c001e064 <schedule()>
c000e512:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000e517:	48                   	dec    eax
c000e518:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e51d:	75 01                	jne    c000e520 <unlockStuff()+0x36>
c000e51f:	fb                   	sti    
c000e520:	83 c4 0c             	add    esp,0xc
c000e523:	c3                   	ret    

c000e524 <Virt::getAKernelVAS()>:
c000e524:	a1 b0 ef 02 c0       	mov    eax,ds:0xc002efb0
c000e529:	c3                   	ret    

c000e52a <__not_memcpy>:
c000e52a:	57                   	push   edi
c000e52b:	56                   	push   esi
c000e52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e530:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e534:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e538:	89 c7                	mov    edi,eax
c000e53a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e53c:	5e                   	pop    esi
c000e53d:	5f                   	pop    edi
c000e53e:	c3                   	ret    

c000e53f <Krnl::resolveCompatibilitySymbol(char*)>:
c000e53f:	83 ec 0c             	sub    esp,0xc
c000e542:	83 ec 08             	sub    esp,0x8
c000e545:	68 66 a8 02 c0       	push   0xc002a866
c000e54a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e54e:	e8 45 23 ff ff       	call   c0000898 <strcmp>
c000e553:	83 c4 10             	add    esp,0x10
c000e556:	85 c0                	test   eax,eax
c000e558:	0f 94 c0             	sete   al
c000e55b:	84 c0                	test   al,al
c000e55d:	74 0a                	je     c000e569 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e55f:	b8 48 ee 02 c0       	mov    eax,0xc002ee48
c000e564:	e9 e3 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e569:	83 ec 08             	sub    esp,0x8
c000e56c:	68 6f a8 02 c0       	push   0xc002a86f
c000e571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e575:	e8 1e 23 ff ff       	call   c0000898 <strcmp>
c000e57a:	83 c4 10             	add    esp,0x10
c000e57d:	85 c0                	test   eax,eax
c000e57f:	0f 94 c0             	sete   al
c000e582:	84 c0                	test   al,al
c000e584:	74 0a                	je     c000e590 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e586:	b8 a4 71 02 c0       	mov    eax,0xc00271a4
c000e58b:	e9 bc 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e590:	83 ec 08             	sub    esp,0x8
c000e593:	68 79 a8 02 c0       	push   0xc002a879
c000e598:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59c:	e8 f7 22 ff ff       	call   c0000898 <strcmp>
c000e5a1:	83 c4 10             	add    esp,0x10
c000e5a4:	85 c0                	test   eax,eax
c000e5a6:	0f 94 c0             	sete   al
c000e5a9:	84 c0                	test   al,al
c000e5ab:	74 0a                	je     c000e5b7 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5ad:	b8 d8 6e 02 c0       	mov    eax,0xc0026ed8
c000e5b2:	e9 95 00 00 00       	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b7:	83 ec 08             	sub    esp,0x8
c000e5ba:	68 82 a8 02 c0       	push   0xc002a882
c000e5bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c3:	e8 d0 22 ff ff       	call   c0000898 <strcmp>
c000e5c8:	83 c4 10             	add    esp,0x10
c000e5cb:	85 c0                	test   eax,eax
c000e5cd:	0f 94 c0             	sete   al
c000e5d0:	84 c0                	test   al,al
c000e5d2:	74 07                	je     c000e5db <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5d4:	b8 a4 72 02 c0       	mov    eax,0xc00272a4
c000e5d9:	eb 71                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5db:	83 ec 08             	sub    esp,0x8
c000e5de:	68 8c a8 02 c0       	push   0xc002a88c
c000e5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e7:	e8 ac 22 ff ff       	call   c0000898 <strcmp>
c000e5ec:	83 c4 10             	add    esp,0x10
c000e5ef:	85 c0                	test   eax,eax
c000e5f1:	0f 94 c0             	sete   al
c000e5f4:	84 c0                	test   al,al
c000e5f6:	74 07                	je     c000e5ff <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5f8:	b8 24 70 02 c0       	mov    eax,0xc0027024
c000e5fd:	eb 4d                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ff:	83 ec 08             	sub    esp,0x8
c000e602:	68 95 a8 02 c0       	push   0xc002a895
c000e607:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60b:	e8 88 22 ff ff       	call   c0000898 <strcmp>
c000e610:	83 c4 10             	add    esp,0x10
c000e613:	85 c0                	test   eax,eax
c000e615:	0f 94 c0             	sete   al
c000e618:	84 c0                	test   al,al
c000e61a:	74 07                	je     c000e623 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e61c:	b8 4c ee 02 c0       	mov    eax,0xc002ee4c
c000e621:	eb 29                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	68 a2 a8 02 c0       	push   0xc002a8a2
c000e62b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62f:	e8 64 22 ff ff       	call   c0000898 <strcmp>
c000e634:	83 c4 10             	add    esp,0x10
c000e637:	85 c0                	test   eax,eax
c000e639:	0f 94 c0             	sete   al
c000e63c:	84 c0                	test   al,al
c000e63e:	74 07                	je     c000e647 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e640:	b8 4d ee 02 c0       	mov    eax,0xc002ee4d
c000e645:	eb 05                	jmp    c000e64c <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e647:	b8 00 00 00 00       	mov    eax,0x0
c000e64c:	83 c4 0c             	add    esp,0xc
c000e64f:	c3                   	ret    

c000e650 <Computer::close(int, int, void*)>:
c000e650:	57                   	push   edi
c000e651:	56                   	push   esi
c000e652:	53                   	push   ebx
c000e653:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e657:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e65b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e65f:	83 ec 0c             	sub    esp,0xc
c000e662:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e668:	e8 d1 57 00 00       	call   c0013e3e <Device::closeAll()>
c000e66d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e673:	83 c4 10             	add    esp,0x10
c000e676:	8b 10                	mov    edx,DWORD PTR [eax]
c000e678:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e67c:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e684:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e688:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e68c:	5b                   	pop    ebx
c000e68d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e690:	5e                   	pop    esi
c000e691:	5f                   	pop    edi
c000e692:	ff e0                	jmp    eax

c000e694 <Krnl::firstTask()>:
c000e694:	53                   	push   ebx
c000e695:	83 ec 14             	sub    esp,0x14
c000e698:	fb                   	sti    
c000e699:	68 3f 07 00 00       	push   0x73f
c000e69e:	e8 e9 11 00 00       	call   c000f88c <malloc>
c000e6a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6aa:	89 c3                	mov    ebx,eax
c000e6ac:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c000e6b2:	68 af a8 02 c0       	push   0xc002a8af
c000e6b7:	6a 01                	push   0x1
c000e6b9:	50                   	push   eax
c000e6ba:	e8 69 f5 00 00       	call   c001dc28 <Process::Process(bool, char const*, Process*, char**)>
c000e6bf:	83 c4 20             	add    esp,0x20
c000e6c2:	68 ff 00 00 00       	push   0xff
c000e6c7:	6a 00                	push   0x0
c000e6c9:	68 1f f2 00 c0       	push   0xc000f21f
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 4c f7 00 00       	call   c001de20 <Process::createThread(void (*)(void*), void*, int)>
c000e6d4:	6a 7a                	push   0x7a
c000e6d6:	6a 00                	push   0x0
c000e6d8:	68 9e e8 01 c0       	push   0xc001e89e
c000e6dd:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c000e6e3:	e8 38 f7 00 00       	call   c001de20 <Process::createThread(void (*)(void*), void*, int)>
c000e6e8:	83 c4 20             	add    esp,0x20
c000e6eb:	a3 48 23 03 c0       	mov    ds:0xc0032348,eax
c000e6f0:	c6 05 4d ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee4d,0x1
c000e6f7:	e8 d9 05 01 00       	call   c001ecd5 <Vm::initialise8086()>
c000e6fc:	e8 05 45 00 00       	call   c0012c06 <Fs::initVFS()>
c000e701:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000e706:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e70c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e70e:	6a 00                	push   0x0
c000e710:	6a 00                	push   0x0
c000e712:	6a 00                	push   0x0
c000e714:	50                   	push   eax
c000e715:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e718:	e8 98 dd 00 00       	call   c001c4b5 <Sys::loadSyscalls()>
c000e71d:	e8 56 ba 00 00       	call   c001a178 <Krnl::loadSystemEnv()>
c000e722:	83 c4 0c             	add    esp,0xc
c000e725:	6a 3a                	push   0x3a
c000e727:	68 bc a8 02 c0       	push   0xc002a8bc
c000e72c:	68 c5 a8 02 c0       	push   0xc002a8c5
c000e731:	e8 31 c9 00 00       	call   c001b067 <Reg::readIntWithDefault(char*, char*, int)>
c000e736:	89 04 24             	mov    DWORD PTR [esp],eax
c000e739:	e8 b8 4f 00 00       	call   c00136f6 <User::loadClockSettings(int)>
c000e73e:	58                   	pop    eax
c000e73f:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000e744:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e74a:	e8 af 56 00 00       	call   c0013dfe <Device::loadDriversForAll()>
c000e74f:	e8 70 b5 00 00       	call   c0019cc4 <Krnl::startCPUs()>
c000e754:	5a                   	pop    edx
c000e755:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c000e75b:	59                   	pop    ecx
c000e75c:	6a 01                	push   0x1
c000e75e:	68 cd a8 02 c0       	push   0xc002a8cd
c000e763:	e8 1d ef 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c000e768:	5a                   	pop    edx
c000e769:	59                   	pop    ecx
c000e76a:	53                   	push   ebx
c000e76b:	50                   	push   eax
c000e76c:	e8 3f f1 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c000e771:	83 c4 10             	add    esp,0x10
c000e774:	83 ec 0c             	sub    esp,0xc
c000e777:	6a 02                	push   0x2
c000e779:	e8 e5 fa 00 00       	call   c001e263 <blockTask(TaskState)>
c000e77e:	83 c4 10             	add    esp,0x10
c000e781:	eb f1                	jmp    c000e774 <Krnl::firstTask()+0xe0>
c000e783:	90                   	nop

c000e784 <Computer::Computer()>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	68 e9 a8 02 c0       	push   0xc002a8e9
c000e793:	50                   	push   eax
c000e794:	e8 1f 57 00 00       	call   c0013eb8 <Device::Device(char const*)>
c000e799:	83 c4 10             	add    esp,0x10
c000e79c:	ba 88 aa 02 c0       	mov    edx,0xc002aa88
c000e7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a5:	89 10                	mov    DWORD PTR [eax],edx
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7cd:	83 ca 04             	or     edx,0x4
c000e7d0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7da:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7e0:	0f b6 d0             	movzx  edx,al
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7f8:	0f b6 d0             	movzx  edx,al
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e80e:	8d 50 01             	lea    edx,[eax+0x1]
c000e811:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e815:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e81b:	0f b6 d0             	movzx  edx,al
c000e81e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e822:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e826:	83 e1 3f             	and    ecx,0x3f
c000e829:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e82d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e831:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e849:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e84f:	0f b6 d0             	movzx  edx,al
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e865:	8d 50 01             	lea    edx,[eax+0x1]
c000e868:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e86c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e872:	0f b6 d0             	movzx  edx,al
c000e875:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e879:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e87d:	83 e1 3f             	and    ecx,0x3f
c000e880:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e888:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8a6:	0f b6 d0             	movzx  edx,al
c000e8a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ad:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8bc:	8d 50 01             	lea    edx,[eax+0x1]
c000e8bf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8c3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8c9:	0f b6 d0             	movzx  edx,al
c000e8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8d4:	83 e1 3f             	and    ecx,0x3f
c000e8d7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8db:	90                   	nop
c000e8dc:	83 c4 0c             	add    esp,0xc
c000e8df:	c3                   	ret    

c000e8e0 <Computer::setBootMessage(char const*)>:
c000e8e0:	c3                   	ret    
c000e8e1:	90                   	nop

c000e8e2 <Computer::detectFeatures()>:
c000e8e2:	55                   	push   ebp
c000e8e3:	57                   	push   edi
c000e8e4:	56                   	push   esi
c000e8e5:	53                   	push   ebx
c000e8e6:	83 ec 1c             	sub    esp,0x1c
c000e8e9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8ed:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8f7:	e8 e8 19 ff ff       	call   c00002e4 <detectCPUID>
c000e8fc:	85 c0                	test   eax,eax
c000e8fe:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e904:	0f 95 c2             	setne  dl
c000e907:	83 e0 fd             	and    eax,0xfffffffd
c000e90a:	d1 e2                	shl    edx,1
c000e90c:	09 d0                	or     eax,edx
c000e90e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e914:	a8 02                	test   al,0x2
c000e916:	75 46                	jne    c000e95e <Computer::detectFeatures()+0x7c>
c000e918:	f6 05 61 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee61,0x4
c000e91f:	74 07                	je     c000e928 <Computer::detectFeatures()+0x46>
c000e921:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e928:	e8 39 85 01 00       	call   c0026e66 <x87Detect>
c000e92d:	83 e0 01             	and    eax,0x1
c000e930:	c1 e0 04             	shl    eax,0x4
c000e933:	88 c2                	mov    dl,al
c000e935:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e93b:	83 e0 ef             	and    eax,0xffffffef
c000e93e:	09 d0                	or     eax,edx
c000e940:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e946:	a8 10                	test   al,0x10
c000e948:	0f 85 2a 01 00 00    	jne    c000ea78 <Computer::detectFeatures()+0x196>
c000e94e:	84 c0                	test   al,al
c000e950:	0f 88 45 01 00 00    	js     c000ea9b <Computer::detectFeatures()+0x1b9>
c000e956:	83 c4 1c             	add    esp,0x1c
c000e959:	5b                   	pop    ebx
c000e95a:	5e                   	pop    esi
c000e95b:	5f                   	pop    edi
c000e95c:	5d                   	pop    ebp
c000e95d:	c3                   	ret    
c000e95e:	83 ec 0c             	sub    esp,0xc
c000e961:	6a 20                	push   0x20
c000e963:	e8 6c a0 00 00       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c000e968:	83 e0 01             	and    eax,0x1
c000e96b:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e972:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e978:	83 e0 f7             	and    eax,0xfffffff7
c000e97b:	09 d0                	or     eax,edx
c000e97d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e983:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e98a:	e8 45 a0 00 00       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c000e98f:	83 e0 01             	and    eax,0x1
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e99a:	83 e0 fe             	and    eax,0xfffffffe
c000e99d:	09 d0                	or     eax,edx
c000e99f:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9a5:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9ac:	e8 23 a0 00 00       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c000e9b1:	c1 e0 07             	shl    eax,0x7
c000e9b4:	88 c2                	mov    dl,al
c000e9b6:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9bc:	83 e0 7f             	and    eax,0x7f
c000e9bf:	09 d0                	or     eax,edx
c000e9c1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c7:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ce:	e8 01 a0 00 00       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c000e9d3:	83 c4 10             	add    esp,0x10
c000e9d6:	83 e0 01             	and    eax,0x1
c000e9d9:	c1 e0 05             	shl    eax,0x5
c000e9dc:	88 c2                	mov    dl,al
c000e9de:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9e4:	83 e0 df             	and    eax,0xffffffdf
c000e9e7:	09 d0                	or     eax,edx
c000e9e9:	f7 05 60 ee 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ee60,0x401
c000e9f3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9f9:	0f 84 c2 00 00 00    	je     c000eac1 <Computer::detectFeatures()+0x1df>
c000e9ff:	83 e0 fe             	and    eax,0xfffffffe
c000ea02:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea08:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea0e:	88 c2                	mov    dl,al
c000ea10:	83 e2 09             	and    edx,0x9
c000ea13:	fe ca                	dec    dl
c000ea15:	75 09                	jne    c000ea20 <Computer::detectFeatures()+0x13e>
c000ea17:	83 e0 fe             	and    eax,0xfffffffe
c000ea1a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea20:	83 ec 0c             	sub    esp,0xc
c000ea23:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea27:	50                   	push   eax
c000ea28:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea2c:	55                   	push   ebp
c000ea2d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea31:	57                   	push   edi
c000ea32:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea36:	56                   	push   esi
c000ea37:	68 00 00 00 80       	push   0x80000000
c000ea3c:	e8 0f 9f 00 00       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea41:	83 c4 20             	add    esp,0x20
c000ea44:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea4f:	0f 86 c3 fe ff ff    	jbe    c000e918 <Computer::detectFeatures()+0x36>
c000ea55:	83 ec 0c             	sub    esp,0xc
c000ea58:	50                   	push   eax
c000ea59:	55                   	push   ebp
c000ea5a:	57                   	push   edi
c000ea5b:	56                   	push   esi
c000ea5c:	68 01 00 00 80       	push   0x80000001
c000ea61:	e8 ea 9e 00 00       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea66:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea70:	83 c4 20             	add    esp,0x20
c000ea73:	e9 a0 fe ff ff       	jmp    c000e918 <Computer::detectFeatures()+0x36>
c000ea78:	e8 a3 83 01 00       	call   c0026e20 <absolutelyNoChanceInHell>
c000ea7d:	88 c2                	mov    dl,al
c000ea7f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea85:	c1 e2 07             	shl    edx,0x7
c000ea88:	83 e0 7f             	and    eax,0x7f
c000ea8b:	09 d0                	or     eax,edx
c000ea8d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea93:	84 c0                	test   al,al
c000ea95:	0f 89 bb fe ff ff    	jns    c000e956 <Computer::detectFeatures()+0x74>
c000ea9b:	e8 60 83 01 00       	call   c0026e00 <avxDetect>
c000eaa0:	83 e0 01             	and    eax,0x1
c000eaa3:	c1 e0 05             	shl    eax,0x5
c000eaa6:	88 c2                	mov    dl,al
c000eaa8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaae:	83 e0 df             	and    eax,0xffffffdf
c000eab1:	09 d0                	or     eax,edx
c000eab3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000eab9:	83 c4 1c             	add    esp,0x1c
c000eabc:	5b                   	pop    ebx
c000eabd:	5e                   	pop    esi
c000eabe:	5f                   	pop    edi
c000eabf:	5d                   	pop    ebp
c000eac0:	c3                   	ret    
c000eac1:	83 ec 0c             	sub    esp,0xc
c000eac4:	68 00 02 00 00       	push   0x200
c000eac9:	e8 06 9f 00 00       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c000eace:	83 c4 10             	add    esp,0x10
c000ead1:	83 e0 01             	and    eax,0x1
c000ead4:	88 c2                	mov    dl,al
c000ead6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eadc:	83 e0 fe             	and    eax,0xfffffffe
c000eadf:	09 d0                	or     eax,edx
c000eae1:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eae7:	e9 1c ff ff ff       	jmp    c000ea08 <Computer::detectFeatures()+0x126>

c000eaec <Computer::displayFeatures()>:
c000eaec:	53                   	push   ebx
c000eaed:	83 ec 14             	sub    esp,0x14
c000eaf0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaf4:	68 f9 a8 02 c0       	push   0xc002a8f9
c000eaf9:	e8 7d 3d 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000eafe:	83 c4 10             	add    esp,0x10
c000eb01:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb08:	0f 85 73 02 00 00    	jne    c000ed81 <Computer::displayFeatures()+0x295>
c000eb0e:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000eb13:	83 ec 08             	sub    esp,0x8
c000eb16:	50                   	push   eax
c000eb17:	68 0c a9 02 c0       	push   0xc002a90c
c000eb1c:	e8 5a 3d 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000eb21:	83 c4 10             	add    esp,0x10
c000eb24:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb2b:	0f 85 8c 02 00 00    	jne    c000edbd <Computer::displayFeatures()+0x2d1>
c000eb31:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000eb36:	83 ec 08             	sub    esp,0x8
c000eb39:	50                   	push   eax
c000eb3a:	68 1d a9 02 c0       	push   0xc002a91d
c000eb3f:	e8 37 3d 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000eb44:	83 c4 10             	add    esp,0x10
c000eb47:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb4e:	0f 85 5f 02 00 00    	jne    c000edb3 <Computer::displayFeatures()+0x2c7>
c000eb54:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000eb59:	83 ec 08             	sub    esp,0x8
c000eb5c:	50                   	push   eax
c000eb5d:	68 2e a9 02 c0       	push   0xc002a92e
c000eb62:	e8 14 3d 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb71:	0f 85 32 02 00 00    	jne    c000eda9 <Computer::displayFeatures()+0x2bd>
c000eb77:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000eb7c:	83 ec 08             	sub    esp,0x8
c000eb7f:	50                   	push   eax
c000eb80:	68 3f a9 02 c0       	push   0xc002a93f
c000eb85:	e8 f1 3c 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000eb8a:	83 c4 10             	add    esp,0x10
c000eb8d:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb94:	0f 85 05 02 00 00    	jne    c000ed9f <Computer::displayFeatures()+0x2b3>
c000eb9a:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000eb9f:	83 ec 08             	sub    esp,0x8
c000eba2:	50                   	push   eax
c000eba3:	68 50 a9 02 c0       	push   0xc002a950
c000eba8:	e8 ce 3c 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ebad:	83 c4 10             	add    esp,0x10
c000ebb0:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebb7:	0f 85 d8 01 00 00    	jne    c000ed95 <Computer::displayFeatures()+0x2a9>
c000ebbd:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ebc2:	83 ec 08             	sub    esp,0x8
c000ebc5:	50                   	push   eax
c000ebc6:	68 61 a9 02 c0       	push   0xc002a961
c000ebcb:	e8 ab 3c 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ebd0:	83 c4 10             	add    esp,0x10
c000ebd3:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebda:	0f 85 ab 01 00 00    	jne    c000ed8b <Computer::displayFeatures()+0x29f>
c000ebe0:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ebe5:	83 ec 08             	sub    esp,0x8
c000ebe8:	50                   	push   eax
c000ebe9:	68 72 a9 02 c0       	push   0xc002a972
c000ebee:	e8 88 3c 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ebf3:	83 c4 10             	add    esp,0x10
c000ebf6:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebfd:	0f 88 1b 02 00 00    	js     c000ee1e <Computer::displayFeatures()+0x332>
c000ec03:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec08:	83 ec 08             	sub    esp,0x8
c000ec0b:	50                   	push   eax
c000ec0c:	68 83 a9 02 c0       	push   0xc002a983
c000ec11:	e8 65 3c 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ec16:	83 c4 10             	add    esp,0x10
c000ec19:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec20:	0f 85 a1 01 00 00    	jne    c000edc7 <Computer::displayFeatures()+0x2db>
c000ec26:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec2b:	83 ec 08             	sub    esp,0x8
c000ec2e:	50                   	push   eax
c000ec2f:	68 94 a9 02 c0       	push   0xc002a994
c000ec34:	e8 42 3c 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ec39:	83 c4 10             	add    esp,0x10
c000ec3c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec43:	0f 85 cb 01 00 00    	jne    c000ee14 <Computer::displayFeatures()+0x328>
c000ec49:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec4e:	83 ec 08             	sub    esp,0x8
c000ec51:	50                   	push   eax
c000ec52:	68 a5 a9 02 c0       	push   0xc002a9a5
c000ec57:	e8 1f 3c 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ec5c:	83 c4 10             	add    esp,0x10
c000ec5f:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec66:	0f 85 9e 01 00 00    	jne    c000ee0a <Computer::displayFeatures()+0x31e>
c000ec6c:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	50                   	push   eax
c000ec75:	68 b6 a9 02 c0       	push   0xc002a9b6
c000ec7a:	e8 fc 3b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ec7f:	83 c4 10             	add    esp,0x10
c000ec82:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec89:	0f 85 71 01 00 00    	jne    c000ee00 <Computer::displayFeatures()+0x314>
c000ec8f:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ec94:	83 ec 08             	sub    esp,0x8
c000ec97:	50                   	push   eax
c000ec98:	68 c7 a9 02 c0       	push   0xc002a9c7
c000ec9d:	e8 d9 3b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000eca2:	83 c4 10             	add    esp,0x10
c000eca5:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecac:	0f 85 44 01 00 00    	jne    c000edf6 <Computer::displayFeatures()+0x30a>
c000ecb2:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ecb7:	83 ec 08             	sub    esp,0x8
c000ecba:	50                   	push   eax
c000ecbb:	68 d8 a9 02 c0       	push   0xc002a9d8
c000ecc0:	e8 b6 3b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ecc5:	83 c4 10             	add    esp,0x10
c000ecc8:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eccf:	0f 85 17 01 00 00    	jne    c000edec <Computer::displayFeatures()+0x300>
c000ecd5:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ecda:	83 ec 08             	sub    esp,0x8
c000ecdd:	50                   	push   eax
c000ecde:	68 e9 a9 02 c0       	push   0xc002a9e9
c000ece3:	e8 93 3b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ece8:	83 c4 10             	add    esp,0x10
c000eceb:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ecf2:	0f 85 ea 00 00 00    	jne    c000ede2 <Computer::displayFeatures()+0x2f6>
c000ecf8:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ecfd:	83 ec 08             	sub    esp,0x8
c000ed00:	50                   	push   eax
c000ed01:	68 fa a9 02 c0       	push   0xc002a9fa
c000ed06:	e8 70 3b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed15:	0f 88 0d 01 00 00    	js     c000ee28 <Computer::displayFeatures()+0x33c>
c000ed1b:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed20:	83 ec 08             	sub    esp,0x8
c000ed23:	50                   	push   eax
c000ed24:	68 0b aa 02 c0       	push   0xc002aa0b
c000ed29:	e8 4d 3b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed38:	0f 85 9a 00 00 00    	jne    c000edd8 <Computer::displayFeatures()+0x2ec>
c000ed3e:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed43:	83 ec 08             	sub    esp,0x8
c000ed46:	50                   	push   eax
c000ed47:	68 1c aa 02 c0       	push   0xc002aa1c
c000ed4c:	e8 2a 3b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ed51:	83 c4 10             	add    esp,0x10
c000ed54:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed5b:	75 74                	jne    c000edd1 <Computer::displayFeatures()+0x2e5>
c000ed5d:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c000ed62:	83 ec 08             	sub    esp,0x8
c000ed65:	50                   	push   eax
c000ed66:	68 2d aa 02 c0       	push   0xc002aa2d
c000ed6b:	e8 0b 3b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000ed70:	c7 44 24 20 10 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c410
c000ed78:	83 c4 18             	add    esp,0x18
c000ed7b:	5b                   	pop    ebx
c000ed7c:	e9 fa 3a 00 00       	jmp    c001287b <Dbg::kprintf(char const*, ...)>
c000ed81:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ed86:	e9 88 fd ff ff       	jmp    c000eb13 <Computer::displayFeatures()+0x27>
c000ed8b:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ed90:	e9 50 fe ff ff       	jmp    c000ebe5 <Computer::displayFeatures()+0xf9>
c000ed95:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ed9a:	e9 23 fe ff ff       	jmp    c000ebc2 <Computer::displayFeatures()+0xd6>
c000ed9f:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000eda4:	e9 f6 fd ff ff       	jmp    c000eb9f <Computer::displayFeatures()+0xb3>
c000eda9:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000edae:	e9 c9 fd ff ff       	jmp    c000eb7c <Computer::displayFeatures()+0x90>
c000edb3:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000edb8:	e9 9c fd ff ff       	jmp    c000eb59 <Computer::displayFeatures()+0x6d>
c000edbd:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000edc2:	e9 6f fd ff ff       	jmp    c000eb36 <Computer::displayFeatures()+0x4a>
c000edc7:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000edcc:	e9 5a fe ff ff       	jmp    c000ec2b <Computer::displayFeatures()+0x13f>
c000edd1:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000edd6:	eb 8a                	jmp    c000ed62 <Computer::displayFeatures()+0x276>
c000edd8:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000eddd:	e9 61 ff ff ff       	jmp    c000ed43 <Computer::displayFeatures()+0x257>
c000ede2:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ede7:	e9 11 ff ff ff       	jmp    c000ecfd <Computer::displayFeatures()+0x211>
c000edec:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000edf1:	e9 e4 fe ff ff       	jmp    c000ecda <Computer::displayFeatures()+0x1ee>
c000edf6:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000edfb:	e9 b7 fe ff ff       	jmp    c000ecb7 <Computer::displayFeatures()+0x1cb>
c000ee00:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee05:	e9 8a fe ff ff       	jmp    c000ec94 <Computer::displayFeatures()+0x1a8>
c000ee0a:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee0f:	e9 5d fe ff ff       	jmp    c000ec71 <Computer::displayFeatures()+0x185>
c000ee14:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee19:	e9 30 fe ff ff       	jmp    c000ec4e <Computer::displayFeatures()+0x162>
c000ee1e:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee23:	e9 e0 fd ff ff       	jmp    c000ec08 <Computer::displayFeatures()+0x11c>
c000ee28:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c000ee2d:	e9 ee fe ff ff       	jmp    c000ed20 <Computer::displayFeatures()+0x234>

c000ee32 <Computer::rdmsr(unsigned int)>:
c000ee32:	83 ec 0c             	sub    esp,0xc
c000ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee39:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee40:	74 0a                	je     c000ee4c <Computer::rdmsr(unsigned int)+0x1a>
c000ee42:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee46:	0f 32                	rdmsr  
c000ee48:	83 c4 0c             	add    esp,0xc
c000ee4b:	c3                   	ret    
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	68 3e aa 02 c0       	push   0xc002aa3e
c000ee54:	e8 58 b4 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c000ee59:	83 c4 10             	add    esp,0x10
c000ee5c:	eb e4                	jmp    c000ee42 <Computer::rdmsr(unsigned int)+0x10>

c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee5e:	57                   	push   edi
c000ee5f:	56                   	push   esi
c000ee60:	52                   	push   edx
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee6d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee74:	74 0e                	je     c000ee84 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee7a:	89 f0                	mov    eax,esi
c000ee7c:	89 fa                	mov    edx,edi
c000ee7e:	0f 30                	wrmsr  
c000ee80:	58                   	pop    eax
c000ee81:	5e                   	pop    esi
c000ee82:	5f                   	pop    edi
c000ee83:	c3                   	ret    
c000ee84:	83 ec 0c             	sub    esp,0xc
c000ee87:	68 44 aa 02 c0       	push   0xc002aa44
c000ee8c:	e8 20 b4 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c000ee91:	83 c4 10             	add    esp,0x10
c000ee94:	eb e0                	jmp    c000ee76 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee96 <Computer::nmiEnabled()>:
c000ee96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee9a:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eea0:	c3                   	ret    
c000eea1:	90                   	nop

c000eea2 <Computer::readCMOS(unsigned char)>:
c000eea2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eea6:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eead:	19 c0                	sbb    eax,eax
c000eeaf:	83 e0 80             	and    eax,0xffffff80
c000eeb2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eeb6:	e6 70                	out    0x70,al
c000eeb8:	e4 71                	in     al,0x71
c000eeba:	c3                   	ret    
c000eebb:	90                   	nop

c000eebc <Computer::enableNMI(bool)>:
c000eebc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eec0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec4:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eeca:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eed2:	eb ce                	jmp    c000eea2 <Computer::readCMOS(unsigned char)>

c000eed4 <Computer::open(int, int, void*)>:
c000eed4:	56                   	push   esi
c000eed5:	53                   	push   ebx
c000eed6:	83 ec 10             	sub    esp,0x10
c000eed9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eedd:	f6 05 60 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee60,0x4
c000eee4:	68 64 12 00 00       	push   0x1264
c000eee9:	0f 94 05 80 dd 02 c0 	sete   BYTE PTR ds:0xc002dd80
c000eef0:	e8 97 09 00 00       	call   c000f88c <malloc>
c000eef5:	89 04 24             	mov    DWORD PTR [esp],eax
c000eef8:	89 c6                	mov    esi,eax
c000eefa:	e8 11 8e 00 00       	call   c0017d10 <ACPI::ACPI()>
c000eeff:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef05:	58                   	pop    eax
c000ef06:	5a                   	pop    edx
c000ef07:	56                   	push   esi
c000ef08:	53                   	push   ebx
c000ef09:	e8 a6 4d 00 00       	call   c0013cb4 <Device::addChild(Device*)>
c000ef0e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef11:	e8 cc f9 ff ff       	call   c000e8e2 <Computer::detectFeatures()>
c000ef16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef19:	e8 ce fb ff ff       	call   c000eaec <Computer::displayFeatures()>
c000ef1e:	59                   	pop    ecx
c000ef1f:	5e                   	pop    esi
c000ef20:	6a 01                	push   0x1
c000ef22:	53                   	push   ebx
c000ef23:	e8 94 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000ef28:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef2f:	e8 58 09 00 00       	call   c000f88c <malloc>
c000ef34:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef37:	89 c6                	mov    esi,eax
c000ef39:	e8 4e 9b 00 00       	call   c0018a8c <CPU::CPU()>
c000ef3e:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef44:	58                   	pop    eax
c000ef45:	5a                   	pop    edx
c000ef46:	56                   	push   esi
c000ef47:	53                   	push   ebx
c000ef48:	e8 67 4d 00 00       	call   c0013cb4 <Device::addChild(Device*)>
c000ef4d:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef53:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef59:	6a 00                	push   0x0
c000ef5b:	6a 00                	push   0x0
c000ef5d:	50                   	push   eax
c000ef5e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef61:	83 c4 20             	add    esp,0x20
c000ef64:	e8 f3 52 00 00       	call   c001425c <setupFPU()>
c000ef69:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef6f:	85 c0                	test   eax,eax
c000ef71:	74 1f                	je     c000ef92 <Computer::open(int, int, void*)+0xbe>
c000ef73:	83 ec 08             	sub    esp,0x8
c000ef76:	50                   	push   eax
c000ef77:	53                   	push   ebx
c000ef78:	e8 37 4d 00 00       	call   c0013cb4 <Device::addChild(Device*)>
c000ef7d:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef83:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef85:	6a 00                	push   0x0
c000ef87:	6a 00                	push   0x0
c000ef89:	6a 00                	push   0x0
c000ef8b:	50                   	push   eax
c000ef8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef8f:	83 c4 20             	add    esp,0x20
c000ef92:	83 ec 0c             	sub    esp,0xc
c000ef95:	68 94 e6 00 c0       	push   0xc000e694
c000ef9a:	e8 a3 ef 00 00       	call   c001df42 <setupMultitasking(void (*)())>
c000ef9f:	83 c4 14             	add    esp,0x14
c000efa2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efa7:	5b                   	pop    ebx
c000efa8:	5e                   	pop    esi
c000efa9:	c3                   	ret    

c000efaa <Computer::disableNMI()>:
c000efaa:	6a 00                	push   0x0
c000efac:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efb0:	e8 07 ff ff ff       	call   c000eebc <Computer::enableNMI(bool)>
c000efb5:	58                   	pop    eax
c000efb6:	5a                   	pop    edx
c000efb7:	c3                   	ret    

c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efbc:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efc3:	19 c0                	sbb    eax,eax
c000efc5:	83 e0 80             	and    eax,0xffffff80
c000efc8:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efcc:	e6 70                	out    0x70,al
c000efce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efd2:	e6 71                	out    0x71,al
c000efd4:	c3                   	ret    
c000efd5:	90                   	nop

c000efd6 <Computer::handleNMI()>:
c000efd6:	56                   	push   esi
c000efd7:	53                   	push   ebx
c000efd8:	83 ec 10             	sub    esp,0x10
c000efdb:	e4 92                	in     al,0x92
c000efdd:	89 c6                	mov    esi,eax
c000efdf:	e4 61                	in     al,0x61
c000efe1:	68 4a aa 02 c0       	push   0xc002aa4a
c000efe6:	88 c3                	mov    bl,al
c000efe8:	e8 8e 38 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000efed:	83 c4 10             	add    esp,0x10
c000eff0:	83 e6 10             	and    esi,0x10
c000eff3:	75 0d                	jne    c000f002 <Computer::handleNMI()+0x2c>
c000eff5:	f6 c3 40             	test   bl,0x40
c000eff8:	75 1d                	jne    c000f017 <Computer::handleNMI()+0x41>
c000effa:	84 db                	test   bl,bl
c000effc:	78 2d                	js     c000f02b <Computer::handleNMI()+0x55>
c000effe:	58                   	pop    eax
c000efff:	5b                   	pop    ebx
c000f000:	5e                   	pop    esi
c000f001:	c3                   	ret    
c000f002:	83 ec 0c             	sub    esp,0xc
c000f005:	68 5b aa 02 c0       	push   0xc002aa5b
c000f00a:	e8 a2 b2 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c000f00f:	83 c4 10             	add    esp,0x10
c000f012:	f6 c3 40             	test   bl,0x40
c000f015:	74 e3                	je     c000effa <Computer::handleNMI()+0x24>
c000f017:	83 ec 0c             	sub    esp,0xc
c000f01a:	68 68 aa 02 c0       	push   0xc002aa68
c000f01f:	e8 8d b2 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c000f024:	83 c4 10             	add    esp,0x10
c000f027:	84 db                	test   bl,bl
c000f029:	79 d3                	jns    c000effe <Computer::handleNMI()+0x28>
c000f02b:	c7 44 24 10 72 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa72
c000f033:	5a                   	pop    edx
c000f034:	5b                   	pop    ebx
c000f035:	5e                   	pop    esi
c000f036:	e9 76 b2 00 00       	jmp    c001a2b1 <Krnl::panic(char const*)>
c000f03b:	90                   	nop

c000f03c <Computer::setDiskActivityLight(int, bool)>:
c000f03c:	56                   	push   esi
c000f03d:	53                   	push   ebx
c000f03e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f042:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f047:	77 1b                	ja     c000f064 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f049:	e4 92                	in     al,0x92
c000f04b:	bb 40 00 00 00       	mov    ebx,0x40
c000f050:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f054:	89 da                	mov    edx,ebx
c000f056:	d3 e2                	shl    edx,cl
c000f058:	89 f1                	mov    ecx,esi
c000f05a:	f7 d2                	not    edx
c000f05c:	d3 e3                	shl    ebx,cl
c000f05e:	21 d0                	and    eax,edx
c000f060:	09 d8                	or     eax,ebx
c000f062:	e6 92                	out    0x92,al
c000f064:	5b                   	pop    ebx
c000f065:	5e                   	pop    esi
c000f066:	c3                   	ret    
c000f067:	90                   	nop

c000f068 <GDTEntry::setBase(unsigned int)>:
c000f068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f06c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f070:	89 c1                	mov    ecx,eax
c000f072:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f076:	c1 e9 10             	shr    ecx,0x10
c000f079:	c1 e8 18             	shr    eax,0x18
c000f07c:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f07f:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setLimit(unsigned int)>:
c000f084:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f08c:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f08f:	66 89 01             	mov    WORD PTR [ecx],ax
c000f092:	83 e2 f0             	and    edx,0xfffffff0
c000f095:	c1 e8 10             	shr    eax,0x10
c000f098:	83 e0 0f             	and    eax,0xf
c000f09b:	09 d0                	or     eax,edx
c000f09d:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0a0:	c3                   	ret    
c000f0a1:	90                   	nop

c000f0a2 <GDT::GDT()>:
c000f0a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0b6:	90                   	nop
c000f0b7:	c3                   	ret    

c000f0b8 <GDT::addEntry(GDTEntry)>:
c000f0b8:	53                   	push   ebx
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0c2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0c9:	52                   	push   edx
c000f0ca:	50                   	push   eax
c000f0cb:	68 ac aa 02 c0       	push   0xc002aaac
c000f0d0:	e8 a6 37 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000f0d5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0d7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0df:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0e3:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f0e7:	8d 50 01             	lea    edx,[eax+0x1]
c000f0ea:	c1 e0 03             	shl    eax,0x3
c000f0ed:	89 13                	mov    DWORD PTR [ebx],edx
c000f0ef:	83 c4 18             	add    esp,0x18
c000f0f2:	5b                   	pop    ebx
c000f0f3:	c3                   	ret    

c000f0f4 <GDT::getNumberOfEntries()>:
c000f0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fa:	c3                   	ret    
c000f0fb:	90                   	nop

c000f0fc <GDT::flush()>:
c000f0fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f100:	8b 10                	mov    edx,DWORD PTR [eax]
c000f102:	83 c0 04             	add    eax,0x4
c000f105:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f10c:	a3 52 ee 02 c0       	mov    ds:0xc002ee52,eax
c000f111:	66 89 15 50 ee 02 c0 	mov    WORD PTR ds:0xc002ee50,dx
c000f118:	e9 33 13 ff ff       	jmp    c0000450 <loadGDT>
c000f11d:	90                   	nop

c000f11e <GDT::setup()>:
c000f11e:	55                   	push   ebp
c000f11f:	57                   	push   edi
c000f120:	56                   	push   esi
c000f121:	53                   	push   ebx
c000f122:	83 ec 3c             	sub    esp,0x3c
c000f125:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f129:	6a 00                	push   0x0
c000f12b:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f12f:	53                   	push   ebx
c000f130:	e8 33 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f135:	6a 00                	push   0x0
c000f137:	53                   	push   ebx
c000f138:	e8 47 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f13d:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f14b:	53                   	push   ebx
c000f14c:	e8 17 ff ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f151:	68 ff ff ff 00       	push   0xffffff
c000f156:	53                   	push   ebx
c000f157:	e8 28 ff ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f15c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f160:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f165:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f16a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f16e:	83 c4 20             	add    esp,0x20
c000f171:	6a 00                	push   0x0
c000f173:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f177:	53                   	push   ebx
c000f178:	e8 eb fe ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c000f17d:	68 ff ff ff 00       	push   0xffffff
c000f182:	53                   	push   ebx
c000f183:	e8 fc fe ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c000f188:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f18c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f190:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f194:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f198:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f19c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1a1:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1a6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1aa:	89 d8                	mov    eax,ebx
c000f1ac:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1b0:	80 cc 60             	or     ah,0x60
c000f1b3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1b7:	83 c4 0c             	add    esp,0xc
c000f1ba:	89 f8                	mov    eax,edi
c000f1bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c0:	80 cc 60             	or     ah,0x60
c000f1c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1c7:	89 c7                	mov    edi,eax
c000f1c9:	55                   	push   ebp
c000f1ca:	e8 e9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1cf:	83 c4 0c             	add    esp,0xc
c000f1d2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1d6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1da:	55                   	push   ebp
c000f1db:	e8 d8 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1e0:	83 c4 0c             	add    esp,0xc
c000f1e3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1eb:	55                   	push   ebp
c000f1ec:	e8 c7 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f1f1:	83 c4 0c             	add    esp,0xc
c000f1f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1f8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1fc:	53                   	push   ebx
c000f1fd:	51                   	push   ecx
c000f1fe:	55                   	push   ebp
c000f1ff:	e8 b4 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f204:	83 c4 0c             	add    esp,0xc
c000f207:	57                   	push   edi
c000f208:	56                   	push   esi
c000f209:	55                   	push   ebp
c000f20a:	e8 a9 fe ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c000f20f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f212:	e8 e5 fe ff ff       	call   c000f0fc <GDT::flush()>
c000f217:	83 c4 4c             	add    esp,0x4c
c000f21a:	5b                   	pop    ebx
c000f21b:	5e                   	pop    esi
c000f21c:	5f                   	pop    edi
c000f21d:	5d                   	pop    ebp
c000f21e:	c3                   	ret    

c000f21f <idleFunction(void*)>:
c000f21f:	53                   	push   ebx
c000f220:	83 ec 08             	sub    esp,0x8
c000f223:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000f228:	48                   	dec    eax
c000f229:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000f22e:	75 01                	jne    c000f231 <idleFunction(void*)+0x12>
c000f230:	fb                   	sti    
c000f231:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000f236:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f23c:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f243:	74 3c                	je     c000f281 <idleFunction(void*)+0x62>
c000f245:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f24c:	74 33                	je     c000f281 <idleFunction(void*)+0x62>
c000f24e:	31 db                	xor    ebx,ebx
c000f250:	52                   	push   edx
c000f251:	52                   	push   edx
c000f252:	68 e1 00 00 00       	push   0xe1
c000f257:	50                   	push   eax
c000f258:	e8 d5 fb ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c000f25d:	53                   	push   ebx
c000f25e:	83 e0 02             	and    eax,0x2
c000f261:	50                   	push   eax
c000f262:	68 e1 00 00 00       	push   0xe1
c000f267:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c000f26d:	e8 ec fb ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f272:	83 c4 20             	add    esp,0x20
c000f275:	e8 05 10 ff ff       	call   c000027f <doTPAUSE>
c000f27a:	e8 31 9c 01 00       	call   c0028eb0 <idleCommon()>
c000f27f:	eb f4                	jmp    c000f275 <idleFunction(void*)+0x56>
c000f281:	fb                   	sti    
c000f282:	f4                   	hlt    
c000f283:	e8 28 9c 01 00       	call   c0028eb0 <idleCommon()>
c000f288:	eb f7                	jmp    c000f281 <idleFunction(void*)+0x62>

c000f28a <IDTEntry::IDTEntry(bool)>:
c000f28a:	83 ec 04             	sub    esp,0x4
c000f28d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f291:	88 04 24             	mov    BYTE PTR [esp],al
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f29e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2a2:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2aa:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ad:	83 e2 f0             	and    edx,0xfffffff0
c000f2b0:	83 ca 0e             	or     edx,0xe
c000f2b3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ba:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2bd:	83 e2 ef             	and    edx,0xffffffef
c000f2c0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2c3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2c7:	74 04                	je     c000f2cd <IDTEntry::IDTEntry(bool)+0x43>
c000f2c9:	b2 03                	mov    dl,0x3
c000f2cb:	eb 02                	jmp    c000f2cf <IDTEntry::IDTEntry(bool)+0x45>
c000f2cd:	b2 00                	mov    dl,0x0
c000f2cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d3:	83 e2 03             	and    edx,0x3
c000f2d6:	88 d1                	mov    cl,dl
c000f2d8:	c1 e1 05             	shl    ecx,0x5
c000f2db:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2de:	83 e2 9f             	and    edx,0xffffff9f
c000f2e1:	09 ca                	or     edx,ecx
c000f2e3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ea:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2ed:	83 ca 80             	or     edx,0xffffff80
c000f2f0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2f3:	90                   	nop
c000f2f4:	83 c4 04             	add    esp,0x4
c000f2f7:	c3                   	ret    

c000f2f8 <IDTEntry::setOffset(unsigned int)>:
c000f2f8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f300:	66 89 02             	mov    WORD PTR [edx],ax
c000f303:	c1 e8 10             	shr    eax,0x10
c000f306:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f30a:	c3                   	ret    
c000f30b:	90                   	nop

c000f30c <IDT::IDT()>:
c000f30c:	90                   	nop
c000f30d:	c3                   	ret    

c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f30e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f312:	83 c0 30             	add    eax,0x30
c000f315:	c3                   	ret    

c000f316 <IDT::addEntry(IDTEntry, int)>:
c000f316:	53                   	push   ebx
c000f317:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f31f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f327:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f32a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f32e:	5b                   	pop    ebx
c000f32f:	c3                   	ret    

c000f330 <IDT::addEntry(int, void (*)(), bool)>:
c000f330:	53                   	push   ebx
c000f331:	83 ec 10             	sub    esp,0x10
c000f334:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f339:	50                   	push   eax
c000f33a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f33e:	53                   	push   ebx
c000f33f:	e8 46 ff ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f344:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f348:	53                   	push   ebx
c000f349:	e8 aa ff ff ff       	call   c000f2f8 <IDTEntry::setOffset(unsigned int)>
c000f34e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f352:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f356:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f35a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f35e:	e8 b3 ff ff ff       	call   c000f316 <IDT::addEntry(IDTEntry, int)>
c000f363:	83 c4 30             	add    esp,0x30
c000f366:	5b                   	pop    ebx
c000f367:	c3                   	ret    

c000f368 <IDT::flush()>:
c000f368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f36c:	66 c7 05 58 ee 02 c0 ff 07 	mov    WORD PTR ds:0xc002ee58,0x7ff
c000f375:	a3 5a ee 02 c0       	mov    ds:0xc002ee5a,eax
c000f37a:	0f 01 1d 58 ee 02 c0 	lidtd  ds:0xc002ee58
c000f381:	c3                   	ret    

c000f382 <IDT::setup()>:
c000f382:	57                   	push   edi
c000f383:	56                   	push   esi
c000f384:	53                   	push   ebx
c000f385:	83 ec 10             	sub    esp,0x10
c000f388:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f38c:	6a 00                	push   0x0
c000f38e:	68 70 04 00 c0       	push   0xc0000470
c000f393:	6a 00                	push   0x0
c000f395:	53                   	push   ebx
c000f396:	e8 95 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f39b:	6a 00                	push   0x0
c000f39d:	68 80 04 00 c0       	push   0xc0000480
c000f3a2:	6a 01                	push   0x1
c000f3a4:	53                   	push   ebx
c000f3a5:	e8 86 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3aa:	83 c4 20             	add    esp,0x20
c000f3ad:	6a 00                	push   0x0
c000f3af:	68 8a 04 00 c0       	push   0xc000048a
c000f3b4:	6a 02                	push   0x2
c000f3b6:	53                   	push   ebx
c000f3b7:	e8 74 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3bc:	6a 00                	push   0x0
c000f3be:	68 94 04 00 c0       	push   0xc0000494
c000f3c3:	6a 03                	push   0x3
c000f3c5:	53                   	push   ebx
c000f3c6:	e8 65 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3cb:	83 c4 20             	add    esp,0x20
c000f3ce:	6a 00                	push   0x0
c000f3d0:	68 9e 04 00 c0       	push   0xc000049e
c000f3d5:	6a 04                	push   0x4
c000f3d7:	53                   	push   ebx
c000f3d8:	e8 53 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3dd:	6a 00                	push   0x0
c000f3df:	68 a8 04 00 c0       	push   0xc00004a8
c000f3e4:	6a 05                	push   0x5
c000f3e6:	53                   	push   ebx
c000f3e7:	e8 44 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3ec:	83 c4 20             	add    esp,0x20
c000f3ef:	6a 00                	push   0x0
c000f3f1:	68 b2 04 00 c0       	push   0xc00004b2
c000f3f6:	6a 06                	push   0x6
c000f3f8:	53                   	push   ebx
c000f3f9:	e8 32 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f3fe:	6a 00                	push   0x0
c000f400:	68 bc 04 00 c0       	push   0xc00004bc
c000f405:	6a 07                	push   0x7
c000f407:	53                   	push   ebx
c000f408:	e8 23 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f40d:	83 c4 20             	add    esp,0x20
c000f410:	6a 00                	push   0x0
c000f412:	68 c6 04 00 c0       	push   0xc00004c6
c000f417:	6a 08                	push   0x8
c000f419:	53                   	push   ebx
c000f41a:	e8 11 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f41f:	6a 00                	push   0x0
c000f421:	68 ce 04 00 c0       	push   0xc00004ce
c000f426:	6a 09                	push   0x9
c000f428:	53                   	push   ebx
c000f429:	e8 02 ff ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f42e:	83 c4 20             	add    esp,0x20
c000f431:	6a 00                	push   0x0
c000f433:	68 d8 04 00 c0       	push   0xc00004d8
c000f438:	6a 0a                	push   0xa
c000f43a:	53                   	push   ebx
c000f43b:	e8 f0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f440:	6a 00                	push   0x0
c000f442:	68 e0 04 00 c0       	push   0xc00004e0
c000f447:	6a 0b                	push   0xb
c000f449:	53                   	push   ebx
c000f44a:	e8 e1 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f44f:	83 c4 20             	add    esp,0x20
c000f452:	6a 00                	push   0x0
c000f454:	68 e8 04 00 c0       	push   0xc00004e8
c000f459:	6a 0c                	push   0xc
c000f45b:	53                   	push   ebx
c000f45c:	e8 cf fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f461:	6a 00                	push   0x0
c000f463:	68 f0 04 00 c0       	push   0xc00004f0
c000f468:	6a 0d                	push   0xd
c000f46a:	53                   	push   ebx
c000f46b:	e8 c0 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f470:	83 c4 20             	add    esp,0x20
c000f473:	6a 00                	push   0x0
c000f475:	68 f8 04 00 c0       	push   0xc00004f8
c000f47a:	6a 0e                	push   0xe
c000f47c:	53                   	push   ebx
c000f47d:	e8 ae fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f482:	6a 00                	push   0x0
c000f484:	68 00 05 00 c0       	push   0xc0000500
c000f489:	6a 0f                	push   0xf
c000f48b:	53                   	push   ebx
c000f48c:	e8 9f fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f491:	83 c4 20             	add    esp,0x20
c000f494:	6a 00                	push   0x0
c000f496:	68 0a 05 00 c0       	push   0xc000050a
c000f49b:	6a 10                	push   0x10
c000f49d:	53                   	push   ebx
c000f49e:	e8 8d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4a3:	6a 00                	push   0x0
c000f4a5:	68 14 05 00 c0       	push   0xc0000514
c000f4aa:	6a 11                	push   0x11
c000f4ac:	53                   	push   ebx
c000f4ad:	e8 7e fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4b2:	83 c4 20             	add    esp,0x20
c000f4b5:	6a 00                	push   0x0
c000f4b7:	68 1e 05 00 c0       	push   0xc000051e
c000f4bc:	6a 12                	push   0x12
c000f4be:	53                   	push   ebx
c000f4bf:	e8 6c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4c4:	6a 01                	push   0x1
c000f4c6:	68 b8 05 00 c0       	push   0xc00005b8
c000f4cb:	6a 60                	push   0x60
c000f4cd:	53                   	push   ebx
c000f4ce:	e8 5d fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4d3:	83 c4 20             	add    esp,0x20
c000f4d6:	6a 00                	push   0x0
c000f4d8:	68 bf 05 00 c0       	push   0xc00005bf
c000f4dd:	6a 20                	push   0x20
c000f4df:	53                   	push   ebx
c000f4e0:	e8 4b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4e5:	6a 00                	push   0x0
c000f4e7:	68 aa 05 00 c0       	push   0xc00005aa
c000f4ec:	6a 21                	push   0x21
c000f4ee:	53                   	push   ebx
c000f4ef:	e8 3c fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f4f4:	83 c4 20             	add    esp,0x20
c000f4f7:	6a 00                	push   0x0
c000f4f9:	68 b1 05 00 c0       	push   0xc00005b1
c000f4fe:	6a 22                	push   0x22
c000f500:	53                   	push   ebx
c000f501:	e8 2a fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f506:	6a 00                	push   0x0
c000f508:	68 28 05 00 c0       	push   0xc0000528
c000f50d:	6a 23                	push   0x23
c000f50f:	53                   	push   ebx
c000f510:	e8 1b fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f515:	83 c4 20             	add    esp,0x20
c000f518:	6a 00                	push   0x0
c000f51a:	68 32 05 00 c0       	push   0xc0000532
c000f51f:	6a 24                	push   0x24
c000f521:	53                   	push   ebx
c000f522:	e8 09 fe ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f527:	6a 00                	push   0x0
c000f529:	68 3c 05 00 c0       	push   0xc000053c
c000f52e:	6a 25                	push   0x25
c000f530:	53                   	push   ebx
c000f531:	e8 fa fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f536:	83 c4 20             	add    esp,0x20
c000f539:	6a 00                	push   0x0
c000f53b:	68 46 05 00 c0       	push   0xc0000546
c000f540:	6a 26                	push   0x26
c000f542:	53                   	push   ebx
c000f543:	e8 e8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f548:	6a 00                	push   0x0
c000f54a:	68 50 05 00 c0       	push   0xc0000550
c000f54f:	6a 27                	push   0x27
c000f551:	53                   	push   ebx
c000f552:	e8 d9 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f557:	83 c4 20             	add    esp,0x20
c000f55a:	6a 00                	push   0x0
c000f55c:	68 5a 05 00 c0       	push   0xc000055a
c000f561:	6a 28                	push   0x28
c000f563:	53                   	push   ebx
c000f564:	e8 c7 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f569:	6a 00                	push   0x0
c000f56b:	68 64 05 00 c0       	push   0xc0000564
c000f570:	6a 29                	push   0x29
c000f572:	53                   	push   ebx
c000f573:	e8 b8 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f578:	83 c4 20             	add    esp,0x20
c000f57b:	6a 00                	push   0x0
c000f57d:	68 6e 05 00 c0       	push   0xc000056e
c000f582:	6a 2a                	push   0x2a
c000f584:	53                   	push   ebx
c000f585:	e8 a6 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f58a:	6a 00                	push   0x0
c000f58c:	68 78 05 00 c0       	push   0xc0000578
c000f591:	6a 2b                	push   0x2b
c000f593:	53                   	push   ebx
c000f594:	e8 97 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f599:	83 c4 20             	add    esp,0x20
c000f59c:	6a 00                	push   0x0
c000f59e:	68 82 05 00 c0       	push   0xc0000582
c000f5a3:	6a 2c                	push   0x2c
c000f5a5:	53                   	push   ebx
c000f5a6:	e8 85 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ab:	6a 00                	push   0x0
c000f5ad:	68 8c 05 00 c0       	push   0xc000058c
c000f5b2:	6a 2d                	push   0x2d
c000f5b4:	53                   	push   ebx
c000f5b5:	e8 76 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ba:	83 c4 20             	add    esp,0x20
c000f5bd:	6a 00                	push   0x0
c000f5bf:	68 96 05 00 c0       	push   0xc0000596
c000f5c4:	6a 2e                	push   0x2e
c000f5c6:	53                   	push   ebx
c000f5c7:	e8 64 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5cc:	6a 00                	push   0x0
c000f5ce:	68 a0 05 00 c0       	push   0xc00005a0
c000f5d3:	6a 2f                	push   0x2f
c000f5d5:	53                   	push   ebx
c000f5d6:	e8 55 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5db:	83 c4 20             	add    esp,0x20
c000f5de:	6a 00                	push   0x0
c000f5e0:	68 f6 05 00 c0       	push   0xc00005f6
c000f5e5:	6a 30                	push   0x30
c000f5e7:	53                   	push   ebx
c000f5e8:	e8 43 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5ed:	6a 00                	push   0x0
c000f5ef:	68 00 06 00 c0       	push   0xc0000600
c000f5f4:	6a 31                	push   0x31
c000f5f6:	53                   	push   ebx
c000f5f7:	e8 34 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f5fc:	83 c4 20             	add    esp,0x20
c000f5ff:	6a 00                	push   0x0
c000f601:	68 0a 06 00 c0       	push   0xc000060a
c000f606:	6a 32                	push   0x32
c000f608:	53                   	push   ebx
c000f609:	e8 22 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f60e:	6a 00                	push   0x0
c000f610:	68 14 06 00 c0       	push   0xc0000614
c000f615:	6a 33                	push   0x33
c000f617:	53                   	push   ebx
c000f618:	e8 13 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f61d:	83 c4 20             	add    esp,0x20
c000f620:	6a 00                	push   0x0
c000f622:	68 1e 06 00 c0       	push   0xc000061e
c000f627:	6a 34                	push   0x34
c000f629:	53                   	push   ebx
c000f62a:	e8 01 fd ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f62f:	6a 00                	push   0x0
c000f631:	68 28 06 00 c0       	push   0xc0000628
c000f636:	6a 35                	push   0x35
c000f638:	53                   	push   ebx
c000f639:	e8 f2 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f63e:	83 c4 20             	add    esp,0x20
c000f641:	6a 00                	push   0x0
c000f643:	68 32 06 00 c0       	push   0xc0000632
c000f648:	6a 36                	push   0x36
c000f64a:	53                   	push   ebx
c000f64b:	e8 e0 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f650:	6a 00                	push   0x0
c000f652:	68 3c 06 00 c0       	push   0xc000063c
c000f657:	6a 37                	push   0x37
c000f659:	53                   	push   ebx
c000f65a:	e8 d1 fc ff ff       	call   c000f330 <IDT::addEntry(int, void (*)(), bool)>
c000f65f:	83 c4 1c             	add    esp,0x1c
c000f662:	6a 03                	push   0x3
c000f664:	6a 02                	push   0x2
c000f666:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c000f66c:	e8 3d 27 00 00       	call   c0011dae <VAS::allocatePages(int, int)>
c000f671:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f678:	89 c6                	mov    esi,eax
c000f67a:	e8 0d 02 00 00       	call   c000f88c <malloc>
c000f67f:	81 c6 00 20 00 00    	add    esi,0x2000
c000f685:	89 04 24             	mov    DWORD PTR [esp],eax
c000f688:	89 c7                	mov    edi,eax
c000f68a:	e8 17 17 00 00       	call   c0010da6 <TSS::TSS()>
c000f68f:	83 c4 0c             	add    esp,0xc
c000f692:	68 c6 04 00 c0       	push   0xc00004c6
c000f697:	56                   	push   esi
c000f698:	57                   	push   edi
c000f699:	e8 48 17 00 00       	call   c0010de6 <TSS::setup(unsigned long, unsigned long)>
c000f69e:	89 c6                	mov    esi,eax
c000f6a0:	58                   	pop    eax
c000f6a1:	5a                   	pop    edx
c000f6a2:	6a 00                	push   0x0
c000f6a4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6a8:	50                   	push   eax
c000f6a9:	e8 dc fb ff ff       	call   c000f28a <IDTEntry::IDTEntry(bool)>
c000f6ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6b2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6b7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6be:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6c8:	80 ce 05             	or     dh,0x5
c000f6cb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6d6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6d9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6dc:	e8 87 fc ff ff       	call   c000f368 <IDT::flush()>
c000f6e1:	83 c4 20             	add    esp,0x20
c000f6e4:	5b                   	pop    ebx
c000f6e5:	5e                   	pop    esi
c000f6e6:	5f                   	pop    edi
c000f6e7:	c3                   	ret    

c000f6e8 <sbrk>:
c000f6e8:	55                   	push   ebp
c000f6e9:	57                   	push   edi
c000f6ea:	56                   	push   esi
c000f6eb:	53                   	push   ebx
c000f6ec:	83 ec 1c             	sub    esp,0x1c
c000f6ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6f3:	85 c0                	test   eax,eax
c000f6f5:	74 3e                	je     c000f735 <sbrk+0x4d>
c000f6f7:	78 43                	js     c000f73c <sbrk+0x54>
c000f6f9:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c000f6ff:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f705:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f70b:	83 e2 01             	and    edx,0x1
c000f70e:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f712:	8b 0d 60 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dd60
c000f718:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f71c:	05 ff 0f 00 00       	add    eax,0xfff
c000f721:	89 c2                	mov    edx,eax
c000f723:	78 2f                	js     c000f754 <sbrk+0x6c>
c000f725:	c1 fa 0c             	sar    edx,0xc
c000f728:	89 d7                	mov    edi,edx
c000f72a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f72e:	be 00 00 00 00       	mov    esi,0x0
c000f733:	eb 36                	jmp    c000f76b <sbrk+0x83>
c000f735:	a1 60 dd 02 c0       	mov    eax,ds:0xc002dd60
c000f73a:	eb 73                	jmp    c000f7af <sbrk+0xc7>
c000f73c:	83 ec 08             	sub    esp,0x8
c000f73f:	50                   	push   eax
c000f740:	68 c8 aa 02 c0       	push   0xc002aac8
c000f745:	e8 31 31 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f752:	eb 5b                	jmp    c000f7af <sbrk+0xc7>
c000f754:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f75a:	eb c9                	jmp    c000f725 <sbrk+0x3d>
c000f75c:	81 05 60 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dd60,0x1000
c000f766:	46                   	inc    esi
c000f767:	39 f7                	cmp    edi,esi
c000f769:	74 33                	je     c000f79e <sbrk+0xb6>
c000f76b:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c000f771:	8b 2d 60 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002dd60
c000f777:	e8 c1 03 00 00       	call   c000fb3d <Phys::allocatePage()>
c000f77c:	68 01 0c 00 00       	push   0xc01
c000f781:	55                   	push   ebp
c000f782:	50                   	push   eax
c000f783:	53                   	push   ebx
c000f784:	e8 23 25 00 00       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c000f789:	83 c4 10             	add    esp,0x10
c000f78c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f791:	74 c9                	je     c000f75c <sbrk+0x74>
c000f793:	8b 1d 60 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd60
c000f799:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f79c:	eb be                	jmp    c000f75c <sbrk+0x74>
c000f79e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7a3:	75 12                	jne    c000f7b7 <sbrk+0xcf>
c000f7a5:	0f 20 d8             	mov    eax,cr3
c000f7a8:	0f 22 d8             	mov    cr3,eax
c000f7ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7af:	83 c4 1c             	add    esp,0x1c
c000f7b2:	5b                   	pop    ebx
c000f7b3:	5e                   	pop    esi
c000f7b4:	5f                   	pop    edi
c000f7b5:	5d                   	pop    ebp
c000f7b6:	c3                   	ret    
c000f7b7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7bb:	89 cb                	mov    ebx,ecx
c000f7bd:	c1 eb 0a             	shr    ebx,0xa
c000f7c0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7c6:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7d0:	c1 e0 0c             	shl    eax,0xc
c000f7d3:	01 c8                	add    eax,ecx
c000f7d5:	c1 e8 0a             	shr    eax,0xa
c000f7d8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7dd:	2d 00 00 40 00       	sub    eax,0x400000
c000f7e2:	39 c3                	cmp    ebx,eax
c000f7e4:	77 c5                	ja     c000f7ab <sbrk+0xc3>
c000f7e6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7e9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f7ef:	39 d8                	cmp    eax,ebx
c000f7f1:	73 f3                	jae    c000f7e6 <sbrk+0xfe>
c000f7f3:	eb b6                	jmp    c000f7ab <sbrk+0xc3>

c000f7f5 <mmap>:
c000f7f5:	83 ec 18             	sub    esp,0x18
c000f7f8:	68 f8 aa 02 c0       	push   0xc002aaf8
c000f7fd:	e8 af aa 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c000f802:	b8 00 00 00 00       	mov    eax,0x0
c000f807:	83 c4 1c             	add    esp,0x1c
c000f80a:	c3                   	ret    

c000f80b <munmap>:
c000f80b:	83 ec 18             	sub    esp,0x18
c000f80e:	68 fd aa 02 c0       	push   0xc002aafd
c000f813:	e8 99 aa 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c000f818:	b8 00 00 00 00       	mov    eax,0x0
c000f81d:	83 c4 1c             	add    esp,0x1c
c000f820:	c3                   	ret    

c000f821 <liballoc_lock()>:
c000f821:	fa                   	cli    
c000f822:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c000f828:	b8 00 00 00 00       	mov    eax,0x0
c000f82d:	c3                   	ret    

c000f82e <liballoc_unlock()>:
c000f82e:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000f833:	48                   	dec    eax
c000f834:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000f839:	75 01                	jne    c000f83c <liballoc_unlock()+0xe>
c000f83b:	fb                   	sti    
c000f83c:	b8 00 00 00 00       	mov    eax,0x0
c000f841:	c3                   	ret    

c000f842 <liballoc_alloc(int)>:
c000f842:	83 ec 10             	sub    esp,0x10
c000f845:	68 01 08 00 00       	push   0x801
c000f84a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f84e:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c000f854:	e8 55 25 00 00       	call   c0011dae <VAS::allocatePages(int, int)>
c000f859:	83 c4 1c             	add    esp,0x1c
c000f85c:	c3                   	ret    

c000f85d <liballoc_free(void*, int)>:
c000f85d:	83 ec 14             	sub    esp,0x14
c000f860:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f864:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c000f86a:	e8 e9 21 00 00       	call   c0011a58 <VAS::freeAllocatedPages(unsigned long)>
c000f86f:	b8 00 00 00 00       	mov    eax,0x0
c000f874:	83 c4 1c             	add    esp,0x1c
c000f877:	c3                   	ret    

c000f878 <realloc>:
c000f878:	83 ec 14             	sub    esp,0x14
c000f87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f87f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f883:	e8 a4 1d ff ff       	call   c000162c <dlrealloc>
c000f888:	83 c4 1c             	add    esp,0x1c
c000f88b:	c3                   	ret    

c000f88c <malloc>:
c000f88c:	83 ec 18             	sub    esp,0x18
c000f88f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f893:	e8 57 18 ff ff       	call   c00010ef <dlmalloc>
c000f898:	83 c4 1c             	add    esp,0x1c
c000f89b:	c3                   	ret    

c000f89c <free>:
c000f89c:	83 ec 18             	sub    esp,0x18
c000f89f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a3:	e8 ec 14 ff ff       	call   c0000d94 <dlfree>
c000f8a8:	83 c4 1c             	add    esp,0x1c
c000f8ab:	c3                   	ret    

c000f8ac <rfree>:
c000f8ac:	83 ec 18             	sub    esp,0x18
c000f8af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8b3:	e8 dc 14 ff ff       	call   c0000d94 <dlfree>
c000f8b8:	83 c4 1c             	add    esp,0x1c
c000f8bb:	c3                   	ret    

c000f8bc <calloc>:
c000f8bc:	56                   	push   esi
c000f8bd:	53                   	push   ebx
c000f8be:	83 ec 10             	sub    esp,0x10
c000f8c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8c5:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8ca:	53                   	push   ebx
c000f8cb:	e8 bc ff ff ff       	call   c000f88c <malloc>
c000f8d0:	89 c6                	mov    esi,eax
c000f8d2:	83 c4 0c             	add    esp,0xc
c000f8d5:	53                   	push   ebx
c000f8d6:	6a 00                	push   0x0
c000f8d8:	50                   	push   eax
c000f8d9:	e8 72 0e ff ff       	call   c0000750 <memset>
c000f8de:	89 f0                	mov    eax,esi
c000f8e0:	83 c4 14             	add    esp,0x14
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	c3                   	ret    

c000f8e6 <kernel_main>:
c000f8e6:	57                   	push   edi
c000f8e7:	bf f9 03 00 00       	mov    edi,0x3f9
c000f8ec:	56                   	push   esi
c000f8ed:	89 fa                	mov    edx,edi
c000f8ef:	53                   	push   ebx
c000f8f0:	31 f6                	xor    esi,esi
c000f8f2:	83 ec 2c             	sub    esp,0x2c
c000f8f5:	89 f0                	mov    eax,esi
c000f8f7:	ee                   	out    dx,al
c000f8f8:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f8fd:	b0 80                	mov    al,0x80
c000f8ff:	89 da                	mov    edx,ebx
c000f901:	ee                   	out    dx,al
c000f902:	b1 03                	mov    cl,0x3
c000f904:	ba f8 03 00 00       	mov    edx,0x3f8
c000f909:	88 c8                	mov    al,cl
c000f90b:	ee                   	out    dx,al
c000f90c:	89 f0                	mov    eax,esi
c000f90e:	89 fa                	mov    edx,edi
c000f910:	ee                   	out    dx,al
c000f911:	88 c8                	mov    al,cl
c000f913:	89 da                	mov    edx,ebx
c000f915:	ee                   	out    dx,al
c000f916:	b0 c7                	mov    al,0xc7
c000f918:	ba fa 03 00 00       	mov    edx,0x3fa
c000f91d:	ee                   	out    dx,al
c000f91e:	b0 0b                	mov    al,0xb
c000f920:	ba fc 03 00 00       	mov    edx,0x3fc
c000f925:	ee                   	out    dx,al
c000f926:	68 04 ab 02 c0       	push   0xc002ab04
c000f92b:	e8 4b 2f 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000f930:	e8 89 08 00 00       	call   c00101be <installVgaTextImplementation()>
c000f935:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f93a:	a3 60 ee 02 c0       	mov    ds:0xc002ee60,eax
c000f93f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f944:	05 ff 0f 00 00       	add    eax,0xfff
c000f949:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f94e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f951:	e8 30 03 00 00       	call   c000fc86 <Phys::physicalMemorySetup(unsigned int)>
c000f956:	e8 d9 1c 00 00       	call   c0011634 <Virt::virtualMemorySetup()>
c000f95b:	58                   	pop    eax
c000f95c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f960:	53                   	push   ebx
c000f961:	e8 1a 1f 00 00       	call   c0011880 <VAS::VAS()>
c000f966:	89 1d b0 ef 02 c0    	mov    DWORD PTR ds:0xc002efb0,ebx
c000f96c:	e8 af 06 ff ff       	call   c0000020 <callGlobalConstructors>
c000f971:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f978:	e8 0f ff ff ff       	call   c000f88c <malloc>
c000f97d:	89 04 24             	mov    DWORD PTR [esp],eax
c000f980:	89 c6                	mov    esi,eax
c000f982:	e8 fd ed ff ff       	call   c000e784 <Computer::Computer()>
c000f987:	6a 00                	push   0x0
c000f989:	89 35 48 ee 02 c0    	mov    DWORD PTR ds:0xc002ee48,esi
c000f98f:	6a 00                	push   0x0
c000f991:	6a 00                	push   0x0
c000f993:	56                   	push   esi
c000f994:	e8 3b f5 ff ff       	call   c000eed4 <Computer::open(int, int, void*)>
c000f999:	83 c4 14             	add    esp,0x14
c000f99c:	53                   	push   ebx
c000f99d:	e8 8e 21 00 00       	call   c0011b30 <VAS::~VAS()>
c000f9a2:	83 c4 30             	add    esp,0x30
c000f9a5:	5b                   	pop    ebx
c000f9a6:	5e                   	pop    esi
c000f9a7:	5f                   	pop    edi
c000f9a8:	c3                   	ret    

c000f9a9 <Phys::allocateDMA(unsigned long)>:
c000f9a9:	55                   	push   ebp
c000f9aa:	31 d2                	xor    edx,edx
c000f9ac:	57                   	push   edi
c000f9ad:	31 ed                	xor    ebp,ebp
c000f9af:	56                   	push   esi
c000f9b0:	31 c9                	xor    ecx,ecx
c000f9b2:	53                   	push   ebx
c000f9b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f9b7:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f9bd:	31 c0                	xor    eax,eax
c000f9bf:	c1 ee 0c             	shr    esi,0xc
c000f9c2:	eb 17                	jmp    c000f9db <Phys::allocateDMA(unsigned long)+0x32>
c000f9c4:	85 c9                	test   ecx,ecx
c000f9c6:	75 04                	jne    c000f9cc <Phys::allocateDMA(unsigned long)+0x23>
c000f9c8:	89 d5                	mov    ebp,edx
c000f9ca:	89 d0                	mov    eax,edx
c000f9cc:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f9cf:	39 de                	cmp    esi,ebx
c000f9d1:	74 20                	je     c000f9f3 <Phys::allocateDMA(unsigned long)+0x4a>
c000f9d3:	42                   	inc    edx
c000f9d4:	89 d9                	mov    ecx,ebx
c000f9d6:	83 fa 2f             	cmp    edx,0x2f
c000f9d9:	7f 11                	jg     c000f9ec <Phys::allocateDMA(unsigned long)+0x43>
c000f9db:	80 ba a0 ee 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1160],0x0
c000f9e2:	74 e0                	je     c000f9c4 <Phys::allocateDMA(unsigned long)+0x1b>
c000f9e4:	31 c9                	xor    ecx,ecx
c000f9e6:	42                   	inc    edx
c000f9e7:	83 fa 2f             	cmp    edx,0x2f
c000f9ea:	7e ef                	jle    c000f9db <Phys::allocateDMA(unsigned long)+0x32>
c000f9ec:	5b                   	pop    ebx
c000f9ed:	31 c0                	xor    eax,eax
c000f9ef:	5e                   	pop    esi
c000f9f0:	5f                   	pop    edi
c000f9f1:	5d                   	pop    ebp
c000f9f2:	c3                   	ret    
c000f9f3:	8d 14 30             	lea    edx,[eax+esi*1]
c000f9f6:	89 d7                	mov    edi,edx
c000f9f8:	4f                   	dec    edi
c000f9f9:	79 03                	jns    c000f9fe <Phys::allocateDMA(unsigned long)+0x55>
c000f9fb:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f9fe:	c1 ff 04             	sar    edi,0x4
c000fa01:	89 c2                	mov    edx,eax
c000fa03:	c1 fa 04             	sar    edx,0x4
c000fa06:	39 fa                	cmp    edx,edi
c000fa08:	75 2f                	jne    c000fa39 <Phys::allocateDMA(unsigned long)+0x90>
c000fa0a:	85 db                	test   ebx,ebx
c000fa0c:	74 1a                	je     c000fa28 <Phys::allocateDMA(unsigned long)+0x7f>
c000fa0e:	be a0 ee 02 c0       	mov    esi,0xc002eea0
c000fa13:	8d 90 a0 ee 02 c0    	lea    edx,[eax-0x3ffd1160]
c000fa19:	f7 d6                	not    esi
c000fa1b:	29 c6                	sub    esi,eax
c000fa1d:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fa20:	42                   	inc    edx
c000fa21:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fa24:	39 d9                	cmp    ecx,ebx
c000fa26:	7f f5                	jg     c000fa1d <Phys::allocateDMA(unsigned long)+0x74>
c000fa28:	85 ff                	test   edi,edi
c000fa2a:	74 13                	je     c000fa3f <Phys::allocateDMA(unsigned long)+0x96>
c000fa2c:	5b                   	pop    ebx
c000fa2d:	05 50 20 0c 00       	add    eax,0xc2050
c000fa32:	5e                   	pop    esi
c000fa33:	c1 e0 0c             	shl    eax,0xc
c000fa36:	5f                   	pop    edi
c000fa37:	5d                   	pop    ebp
c000fa38:	c3                   	ret    
c000fa39:	89 ea                	mov    edx,ebp
c000fa3b:	31 c9                	xor    ecx,ecx
c000fa3d:	eb a7                	jmp    c000f9e6 <Phys::allocateDMA(unsigned long)+0x3d>
c000fa3f:	5b                   	pop    ebx
c000fa40:	c1 e0 0c             	shl    eax,0xc
c000fa43:	5e                   	pop    esi
c000fa44:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fa49:	5f                   	pop    edi
c000fa4a:	5d                   	pop    ebp
c000fa4b:	c3                   	ret    

c000fa4c <Phys::freeDMA(unsigned long, unsigned long)>:
c000fa4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fa50:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fa54:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fa5a:	c1 e9 0c             	shr    ecx,0xc
c000fa5d:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fa62:	76 25                	jbe    c000fa89 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fa64:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fa69:	c1 e8 0c             	shr    eax,0xc
c000fa6c:	8d 50 10             	lea    edx,[eax+0x10]
c000fa6f:	85 c9                	test   ecx,ecx
c000fa71:	74 15                	je     c000fa88 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fa73:	8d 82 a0 ee 02 c0    	lea    eax,[edx-0x3ffd1160]
c000fa79:	8d 94 11 a0 ee 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1160]
c000fa80:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fa83:	40                   	inc    eax
c000fa84:	39 d0                	cmp    eax,edx
c000fa86:	75 f8                	jne    c000fa80 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fa88:	c3                   	ret    
c000fa89:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fa8f:	c1 ea 0c             	shr    edx,0xc
c000fa92:	eb db                	jmp    c000fa6f <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fa94 <Phys::setPageState(unsigned long, bool)>:
c000fa94:	56                   	push   esi
c000fa95:	ba 01 00 00 00       	mov    edx,0x1
c000fa9a:	53                   	push   ebx
c000fa9b:	8b 35 64 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd64
c000faa1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000faa5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faa9:	89 c8                	mov    eax,ecx
c000faab:	83 e1 07             	and    ecx,0x7
c000faae:	c1 e8 03             	shr    eax,0x3
c000fab1:	d3 e3                	shl    ebx,cl
c000fab3:	01 c6                	add    esi,eax
c000fab5:	d3 e2                	shl    edx,cl
c000fab7:	f7 d2                	not    edx
c000fab9:	20 16                	and    BYTE PTR [esi],dl
c000fabb:	03 05 64 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd64
c000fac1:	08 18                	or     BYTE PTR [eax],bl
c000fac3:	5b                   	pop    ebx
c000fac4:	5e                   	pop    esi
c000fac5:	c3                   	ret    

c000fac6 <Phys::getPageState(unsigned long)>:
c000fac6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000faca:	8b 15 64 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd64
c000fad0:	89 c8                	mov    eax,ecx
c000fad2:	83 e1 07             	and    ecx,0x7
c000fad5:	c1 e8 03             	shr    eax,0x3
c000fad8:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fadc:	d3 f8                	sar    eax,cl
c000fade:	83 e0 01             	and    eax,0x1
c000fae1:	c3                   	ret    

c000fae2 <Phys::freePage(unsigned long)>:
c000fae2:	53                   	push   ebx
c000fae3:	83 ec 08             	sub    esp,0x8
c000fae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faea:	3d ff ff 07 00       	cmp    eax,0x7ffff
c000faef:	76 3a                	jbe    c000fb2b <Phys::freePage(unsigned long)+0x49>
c000faf1:	c1 e8 0c             	shr    eax,0xc
c000faf4:	50                   	push   eax
c000faf5:	89 c3                	mov    ebx,eax
c000faf7:	e8 ca ff ff ff       	call   c000fac6 <Phys::getPageState(unsigned long)>
c000fafc:	5a                   	pop    edx
c000fafd:	84 c0                	test   al,al
c000faff:	74 19                	je     c000fb1a <Phys::freePage(unsigned long)+0x38>
c000fb01:	83 ec 08             	sub    esp,0x8
c000fb04:	ff 0d 90 ee 02 c0    	dec    DWORD PTR ds:0xc002ee90
c000fb0a:	6a 00                	push   0x0
c000fb0c:	53                   	push   ebx
c000fb0d:	e8 82 ff ff ff       	call   c000fa94 <Phys::setPageState(unsigned long, bool)>
c000fb12:	83 c4 10             	add    esp,0x10
c000fb15:	83 c4 08             	add    esp,0x8
c000fb18:	5b                   	pop    ebx
c000fb19:	c3                   	ret    
c000fb1a:	c7 44 24 10 1b ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab1b
c000fb22:	83 c4 08             	add    esp,0x8
c000fb25:	5b                   	pop    ebx
c000fb26:	e9 86 a7 00 00       	jmp    c001a2b1 <Krnl::panic(char const*)>
c000fb2b:	68 00 10 00 00       	push   0x1000
c000fb30:	50                   	push   eax
c000fb31:	e8 16 ff ff ff       	call   c000fa4c <Phys::freeDMA(unsigned long, unsigned long)>
c000fb36:	59                   	pop    ecx
c000fb37:	5b                   	pop    ebx
c000fb38:	83 c4 08             	add    esp,0x8
c000fb3b:	5b                   	pop    ebx
c000fb3c:	c3                   	ret    

c000fb3d <Phys::allocatePage()>:
c000fb3d:	56                   	push   esi
c000fb3e:	53                   	push   ebx
c000fb3f:	51                   	push   ecx
c000fb40:	8b 35 84 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee84
c000fb46:	89 f3                	mov    ebx,esi
c000fb48:	eb 0a                	jmp    c000fb54 <Phys::allocatePage()+0x17>
c000fb4a:	89 1d 84 ee 02 c0    	mov    DWORD PTR ds:0xc002ee84,ebx
c000fb50:	39 de                	cmp    esi,ebx
c000fb52:	74 24                	je     c000fb78 <Phys::allocatePage()+0x3b>
c000fb54:	53                   	push   ebx
c000fb55:	e8 6c ff ff ff       	call   c000fac6 <Phys::getPageState(unsigned long)>
c000fb5a:	5a                   	pop    edx
c000fb5b:	84 c0                	test   al,al
c000fb5d:	74 77                	je     c000fbd6 <Phys::allocatePage()+0x99>
c000fb5f:	43                   	inc    ebx
c000fb60:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb66:	75 e2                	jne    c000fb4a <Phys::allocatePage()+0xd>
c000fb68:	31 db                	xor    ebx,ebx
c000fb6a:	c7 05 84 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee84,0x0
c000fb74:	39 de                	cmp    esi,ebx
c000fb76:	75 dc                	jne    c000fb54 <Phys::allocatePage()+0x17>
c000fb78:	83 ec 0c             	sub    esp,0xc
c000fb7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fb83:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000fb89:	e8 1a 2a 00 00       	call   c00125a8 <VAS::scanForEviction()>
c000fb8e:	83 c4 10             	add    esp,0x10
c000fb91:	85 c0                	test   eax,eax
c000fb93:	75 59                	jne    c000fbee <Phys::allocatePage()+0xb1>
c000fb95:	83 ec 0c             	sub    esp,0xc
c000fb98:	68 31 ab 02 c0       	push   0xc002ab31
c000fb9d:	e8 d9 2c 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000fba2:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fba9:	e8 fb fd ff ff       	call   c000f9a9 <Phys::allocateDMA(unsigned long)>
c000fbae:	83 c4 10             	add    esp,0x10
c000fbb1:	85 c0                	test   eax,eax
c000fbb3:	75 39                	jne    c000fbee <Phys::allocatePage()+0xb1>
c000fbb5:	83 ec 0c             	sub    esp,0xc
c000fbb8:	68 42 ab 02 c0       	push   0xc002ab42
c000fbbd:	e8 ef a6 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c000fbc2:	83 c4 10             	add    esp,0x10
c000fbc5:	8b 1d 84 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee84
c000fbcb:	53                   	push   ebx
c000fbcc:	e8 f5 fe ff ff       	call   c000fac6 <Phys::getPageState(unsigned long)>
c000fbd1:	5a                   	pop    edx
c000fbd2:	84 c0                	test   al,al
c000fbd4:	75 89                	jne    c000fb5f <Phys::allocatePage()+0x22>
c000fbd6:	6a 01                	push   0x1
c000fbd8:	53                   	push   ebx
c000fbd9:	e8 b6 fe ff ff       	call   c000fa94 <Phys::setPageState(unsigned long, bool)>
c000fbde:	a1 84 ee 02 c0       	mov    eax,ds:0xc002ee84
c000fbe3:	59                   	pop    ecx
c000fbe4:	ff 05 90 ee 02 c0    	inc    DWORD PTR ds:0xc002ee90
c000fbea:	c1 e0 0c             	shl    eax,0xc
c000fbed:	5b                   	pop    ebx
c000fbee:	5a                   	pop    edx
c000fbef:	5b                   	pop    ebx
c000fbf0:	5e                   	pop    esi
c000fbf1:	c3                   	ret    

c000fbf2 <Phys::allocateContiguousPages(int)>:
c000fbf2:	57                   	push   edi
c000fbf3:	56                   	push   esi
c000fbf4:	53                   	push   ebx
c000fbf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fbf9:	fa                   	cli    
c000fbfa:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c000fc00:	31 db                	xor    ebx,ebx
c000fc02:	85 db                	test   ebx,ebx
c000fc04:	75 11                	jne    c000fc17 <Phys::allocateContiguousPages(int)+0x25>
c000fc06:	e8 32 ff ff ff       	call   c000fb3d <Phys::allocatePage()>
c000fc0b:	83 fe 01             	cmp    esi,0x1
c000fc0e:	89 c7                	mov    edi,eax
c000fc10:	74 21                	je     c000fc33 <Phys::allocateContiguousPages(int)+0x41>
c000fc12:	bb 01 00 00 00       	mov    ebx,0x1
c000fc17:	e8 21 ff ff ff       	call   c000fb3d <Phys::allocatePage()>
c000fc1c:	89 da                	mov    edx,ebx
c000fc1e:	c1 e2 0c             	shl    edx,0xc
c000fc21:	01 fa                	add    edx,edi
c000fc23:	39 c2                	cmp    edx,eax
c000fc25:	74 20                	je     c000fc47 <Phys::allocateContiguousPages(int)+0x55>
c000fc27:	bb 01 00 00 00       	mov    ebx,0x1
c000fc2c:	89 c7                	mov    edi,eax
c000fc2e:	83 fe 01             	cmp    esi,0x1
c000fc31:	75 e4                	jne    c000fc17 <Phys::allocateContiguousPages(int)+0x25>
c000fc33:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000fc38:	48                   	dec    eax
c000fc39:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000fc3e:	75 01                	jne    c000fc41 <Phys::allocateContiguousPages(int)+0x4f>
c000fc40:	fb                   	sti    
c000fc41:	89 f8                	mov    eax,edi
c000fc43:	5b                   	pop    ebx
c000fc44:	5e                   	pop    esi
c000fc45:	5f                   	pop    edi
c000fc46:	c3                   	ret    
c000fc47:	43                   	inc    ebx
c000fc48:	39 f3                	cmp    ebx,esi
c000fc4a:	75 b6                	jne    c000fc02 <Phys::allocateContiguousPages(int)+0x10>
c000fc4c:	eb e5                	jmp    c000fc33 <Phys::allocateContiguousPages(int)+0x41>

c000fc4e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fc4e:	56                   	push   esi
c000fc4f:	53                   	push   ebx
c000fc50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc54:	39 1d 88 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee88,ebx
c000fc5a:	73 06                	jae    c000fc62 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fc5c:	89 1d 88 ee 02 c0    	mov    DWORD PTR ds:0xc002ee88,ebx
c000fc62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc66:	c1 eb 0c             	shr    ebx,0xc
c000fc69:	c1 e8 0c             	shr    eax,0xc
c000fc6c:	39 d8                	cmp    eax,ebx
c000fc6e:	73 13                	jae    c000fc83 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fc70:	6a 00                	push   0x0
c000fc72:	8d 70 01             	lea    esi,[eax+0x1]
c000fc75:	50                   	push   eax
c000fc76:	e8 19 fe ff ff       	call   c000fa94 <Phys::setPageState(unsigned long, bool)>
c000fc7b:	5a                   	pop    edx
c000fc7c:	89 f0                	mov    eax,esi
c000fc7e:	59                   	pop    ecx
c000fc7f:	39 f3                	cmp    ebx,esi
c000fc81:	75 ed                	jne    c000fc70 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fc83:	5b                   	pop    ebx
c000fc84:	5e                   	pop    esi
c000fc85:	c3                   	ret    

c000fc86 <Phys::physicalMemorySetup(unsigned int)>:
c000fc86:	55                   	push   ebp
c000fc87:	57                   	push   edi
c000fc88:	56                   	push   esi
c000fc89:	53                   	push   ebx
c000fc8a:	31 db                	xor    ebx,ebx
c000fc8c:	83 ec 40             	sub    esp,0x40
c000fc8f:	6a 30                	push   0x30
c000fc91:	6a 00                	push   0x0
c000fc93:	68 a0 ee 02 c0       	push   0xc002eea0
c000fc98:	e8 b3 0a ff ff       	call   c0000750 <memset>
c000fc9d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fca1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fca6:	05 00 10 00 00       	add    eax,0x1000
c000fcab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fcaf:	83 c4 10             	add    esp,0x10
c000fcb2:	83 ec 08             	sub    esp,0x8
c000fcb5:	6a 01                	push   0x1
c000fcb7:	53                   	push   ebx
c000fcb8:	43                   	inc    ebx
c000fcb9:	e8 d6 fd ff ff       	call   c000fa94 <Phys::setPageState(unsigned long, bool)>
c000fcbe:	83 c4 10             	add    esp,0x10
c000fcc1:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fcc7:	75 e9                	jne    c000fcb2 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fcc9:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fcd0:	66 85 c0             	test   ax,ax
c000fcd3:	0f 84 8e 01 00 00    	je     c000fe67 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fcd9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fcdd:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fce5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fce9:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fcee:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fcf2:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fcfa:	eb 15                	jmp    c000fd11 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fcfc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fd00:	83 c3 18             	add    ebx,0x18
c000fd03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd07:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fd0b:	0f 84 66 01 00 00    	je     c000fe77 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd11:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fd14:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fd17:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fd1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd1e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd22:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fd24:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fd27:	01 f0                	add    eax,esi
c000fd29:	55                   	push   ebp
c000fd2a:	11 fa                	adc    edx,edi
c000fd2c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd30:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fd34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fd38:	56                   	push   esi
c000fd39:	68 7c ab 02 c0       	push   0xc002ab7c
c000fd3e:	e8 38 2b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000fd43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fd47:	83 c4 10             	add    esp,0x10
c000fd4a:	09 f8                	or     eax,edi
c000fd4c:	0f 85 25 01 00 00    	jne    c000fe77 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd52:	4d                   	dec    ebp
c000fd53:	75 a7                	jne    c000fcfc <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd55:	ba 00 00 08 00       	mov    edx,0x80000
c000fd5a:	89 c1                	mov    ecx,eax
c000fd5c:	39 f2                	cmp    edx,esi
c000fd5e:	19 f9                	sbb    ecx,edi
c000fd60:	0f 82 a7 00 00 00    	jb     c000fe0d <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd66:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fd6a:	89 c1                	mov    ecx,eax
c000fd6c:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fd70:	0f 83 97 00 00 00    	jae    c000fe0d <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd76:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fd7b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fd7f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fd83:	39 fa                	cmp    edx,edi
c000fd85:	19 e8                	sbb    eax,ebp
c000fd87:	0f 82 14 01 00 00    	jb     c000fea1 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fd8d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fd91:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fd95:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fd9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fda0:	83 d5 ff             	adc    ebp,0xffffffff
c000fda3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fda7:	31 c0                	xor    eax,eax
c000fda9:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fdad:	39 fa                	cmp    edx,edi
c000fdaf:	89 c1                	mov    ecx,eax
c000fdb1:	19 e9                	sbb    ecx,ebp
c000fdb3:	0f 83 43 ff ff ff    	jae    c000fcfc <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdb9:	be 00 00 08 00       	mov    esi,0x80000
c000fdbe:	50                   	push   eax
c000fdbf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fdc3:	57                   	push   edi
c000fdc4:	56                   	push   esi
c000fdc5:	68 a0 ab 02 c0       	push   0xc002aba0
c000fdca:	e8 ac 2a 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000fdcf:	5a                   	pop    edx
c000fdd0:	59                   	pop    ecx
c000fdd1:	57                   	push   edi
c000fdd2:	56                   	push   esi
c000fdd3:	e8 76 fe ff ff       	call   c000fc4e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fdd8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fddc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fde0:	83 c4 0c             	add    esp,0xc
c000fde3:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fde7:	03 05 94 ee 02 c0    	add    eax,DWORD PTR ds:0xc002ee94
c000fded:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fdf4:	a3 94 ee 02 c0       	mov    ds:0xc002ee94,eax
c000fdf9:	52                   	push   edx
c000fdfa:	50                   	push   eax
c000fdfb:	68 5e ab 02 c0       	push   0xc002ab5e
c000fe00:	e8 76 2a 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c000fe05:	83 c4 10             	add    esp,0x10
c000fe08:	e9 ef fe ff ff       	jmp    c000fcfc <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe0d:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fe11:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe15:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe19:	39 ea                	cmp    edx,ebp
c000fe1b:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fe1f:	0f 82 d7 fe ff ff    	jb     c000fcfc <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe25:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fe2a:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fe2e:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fe32:	0f 83 c4 fe ff ff    	jae    c000fcfc <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fe38:	39 ee                	cmp    esi,ebp
c000fe3a:	89 f8                	mov    eax,edi
c000fe3c:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fe40:	0f 83 78 ff ff ff    	jae    c000fdbe <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe4e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fe52:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fe56:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fe5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe5e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe62:	e9 57 ff ff ff       	jmp    c000fdbe <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe67:	83 ec 0c             	sub    esp,0xc
c000fe6a:	68 50 ab 02 c0       	push   0xc002ab50
c000fe6f:	e8 3d a4 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c000fe74:	83 c4 10             	add    esp,0x10
c000fe77:	bb 40 01 00 00       	mov    ebx,0x140
c000fe7c:	83 ec 08             	sub    esp,0x8
c000fe7f:	6a 00                	push   0x0
c000fe81:	53                   	push   ebx
c000fe82:	43                   	inc    ebx
c000fe83:	e8 0c fc ff ff       	call   c000fa94 <Phys::setPageState(unsigned long, bool)>
c000fe88:	ff 05 94 ee 02 c0    	inc    DWORD PTR ds:0xc002ee94
c000fe8e:	83 c4 10             	add    esp,0x10
c000fe91:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fe97:	75 e3                	jne    c000fe7c <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fe99:	83 c4 3c             	add    esp,0x3c
c000fe9c:	5b                   	pop    ebx
c000fe9d:	5e                   	pop    esi
c000fe9e:	5f                   	pop    edi
c000fe9f:	5d                   	pop    ebp
c000fea0:	c3                   	ret    
c000fea1:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fea9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000feb1:	e9 d7 fe ff ff       	jmp    c000fd8d <Phys::physicalMemorySetup(unsigned int)+0x107>

c000feb6 <Pipe::isAtty()>:
c000feb6:	31 c0                	xor    eax,eax
c000feb8:	c3                   	ret    
c000feb9:	90                   	nop

c000feba <Pipe::~Pipe()>:
c000feba:	83 ec 0c             	sub    esp,0xc
c000febd:	ba 0c ac 02 c0       	mov    edx,0xc002ac0c
c000fec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec6:	89 10                	mov    DWORD PTR [eax],edx
c000fec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fecc:	83 ec 0c             	sub    esp,0xc
c000fecf:	50                   	push   eax
c000fed0:	e8 3f 13 00 00       	call   c0011214 <UnixFile::~UnixFile()>
c000fed5:	83 c4 10             	add    esp,0x10
c000fed8:	90                   	nop
c000fed9:	83 c4 0c             	add    esp,0xc
c000fedc:	c3                   	ret    
c000fedd:	90                   	nop

c000fede <Pipe::~Pipe()>:
c000fede:	83 ec 0c             	sub    esp,0xc
c000fee1:	83 ec 0c             	sub    esp,0xc
c000fee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fee8:	e8 cd ff ff ff       	call   c000feba <Pipe::~Pipe()>
c000feed:	83 c4 10             	add    esp,0x10
c000fef0:	83 ec 08             	sub    esp,0x8
c000fef3:	6a 20                	push   0x20
c000fef5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fef9:	e8 9d 28 00 00       	call   c001279b <operator delete(void*, unsigned long)>
c000fefe:	83 c4 10             	add    esp,0x10
c000ff01:	83 c4 0c             	add    esp,0xc
c000ff04:	c3                   	ret    
c000ff05:	90                   	nop

c000ff06 <Pipe::read(unsigned long long, void*, int*)>:
c000ff06:	55                   	push   ebp
c000ff07:	57                   	push   edi
c000ff08:	56                   	push   esi
c000ff09:	53                   	push   ebx
c000ff0a:	83 ec 1c             	sub    esp,0x1c
c000ff0d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ff11:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ff15:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ff19:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ff1c:	89 c8                	mov    eax,ecx
c000ff1e:	99                   	cdq    
c000ff1f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ff23:	74 24                	je     c000ff49 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff25:	39 f9                	cmp    ecx,edi
c000ff27:	89 d1                	mov    ecx,edx
c000ff29:	19 f1                	sbb    ecx,esi
c000ff2b:	73 1c                	jae    c000ff49 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000ff2d:	fa                   	cli    
c000ff2e:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c000ff34:	e8 2b e1 00 00       	call   c001e064 <schedule()>
c000ff39:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c000ff3e:	48                   	dec    eax
c000ff3f:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000ff44:	75 d3                	jne    c000ff19 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff46:	fb                   	sti    
c000ff47:	eb d0                	jmp    c000ff19 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ff49:	39 f8                	cmp    eax,edi
c000ff4b:	89 d1                	mov    ecx,edx
c000ff4d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ff50:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ff54:	19 f1                	sbb    ecx,esi
c000ff56:	73 07                	jae    c000ff5f <Pipe::read(unsigned long long, void*, int*)+0x59>
c000ff58:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff5b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ff5f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000ff62:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000ff65:	29 f7                	sub    edi,esi
c000ff67:	89 f8                	mov    eax,edi
c000ff69:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ff6d:	99                   	cdq    
c000ff6e:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000ff71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff75:	19 d0                	sbb    eax,edx
c000ff77:	73 07                	jae    c000ff80 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000ff79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ff7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ff80:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000ff83:	89 ea                	mov    edx,ebp
c000ff85:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000ff89:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ff8e:	74 0d                	je     c000ff9d <Pipe::read(unsigned long long, void*, int*)+0x97>
c000ff90:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ff93:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000ff97:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff9b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff9d:	85 d2                	test   edx,edx
c000ff9f:	74 11                	je     c000ffb2 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000ffa1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffa5:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000ffa8:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ffac:	89 d1                	mov    ecx,edx
c000ffae:	89 c7                	mov    edi,eax
c000ffb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffb2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ffb5:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000ffb8:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ffbb:	99                   	cdq    
c000ffbc:	89 f7                	mov    edi,esi
c000ffbe:	03 04 24             	add    eax,DWORD PTR [esp]
c000ffc1:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000ffc5:	c1 ff 1f             	sar    edi,0x1f
c000ffc8:	57                   	push   edi
c000ffc9:	56                   	push   esi
c000ffca:	52                   	push   edx
c000ffcb:	50                   	push   eax
c000ffcc:	e8 d3 72 01 00       	call   c00272a4 <__umoddi3>
c000ffd1:	83 c4 10             	add    esp,0x10
c000ffd4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ffd7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ffdc:	75 10                	jne    c000ffee <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000ffde:	83 ec 0c             	sub    esp,0xc
c000ffe1:	68 c9 ab 02 c0       	push   0xc002abc9
c000ffe6:	e8 c6 a2 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c000ffeb:	83 c4 10             	add    esp,0x10
c000ffee:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fff2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fff5:	89 10                	mov    DWORD PTR [eax],edx
c000fff7:	83 c4 1c             	add    esp,0x1c
c000fffa:	31 c0                	xor    eax,eax
c000fffc:	5b                   	pop    ebx
c000fffd:	5e                   	pop    esi
c000fffe:	5f                   	pop    edi
c000ffff:	5d                   	pop    ebp
c0010000:	c3                   	ret    
c0010001:	90                   	nop

c0010002 <Pipe::write(unsigned long long, void*, int*)>:
c0010002:	55                   	push   ebp
c0010003:	57                   	push   edi
c0010004:	56                   	push   esi
c0010005:	53                   	push   ebx
c0010006:	83 ec 1c             	sub    esp,0x1c
c0010009:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001000d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010011:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010014:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010018:	89 04 24             	mov    DWORD PTR [esp],eax
c001001b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001001f:	89 d8                	mov    eax,ebx
c0010021:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010024:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0010028:	89 d6                	mov    esi,edx
c001002a:	89 d7                	mov    edi,edx
c001002c:	c1 ff 1f             	sar    edi,0x1f
c001002f:	03 34 24             	add    esi,DWORD PTR [esp]
c0010032:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010036:	c1 f8 1f             	sar    eax,0x1f
c0010039:	39 f3                	cmp    ebx,esi
c001003b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001003f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010043:	19 f8                	sbb    eax,edi
c0010045:	b8 01 00 00 00       	mov    eax,0x1
c001004a:	72 6e                	jb     c00100ba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c001004c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001004f:	01 d0                	add    eax,edx
c0010051:	99                   	cdq    
c0010052:	f7 fb                	idiv   ebx
c0010054:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010058:	29 d3                	sub    ebx,edx
c001005a:	89 d7                	mov    edi,edx
c001005c:	89 de                	mov    esi,ebx
c001005e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010061:	c1 fb 1f             	sar    ebx,0x1f
c0010064:	39 f2                	cmp    edx,esi
c0010066:	19 d8                	sbb    eax,ebx
c0010068:	b8 00 00 00 00       	mov    eax,0x0
c001006d:	72 04                	jb     c0010073 <Pipe::write(unsigned long long, void*, int*)+0x71>
c001006f:	89 d0                	mov    eax,edx
c0010071:	29 f0                	sub    eax,esi
c0010073:	89 d3                	mov    ebx,edx
c0010075:	29 c3                	sub    ebx,eax
c0010077:	74 0b                	je     c0010084 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0010079:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001007c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010080:	89 d9                	mov    ecx,ebx
c0010082:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010084:	85 c0                	test   eax,eax
c0010086:	74 0d                	je     c0010095 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010088:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001008c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001008f:	89 de                	mov    esi,ebx
c0010091:	89 c1                	mov    ecx,eax
c0010093:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010095:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0010098:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001009d:	75 10                	jne    c00100af <Pipe::write(unsigned long long, void*, int*)+0xad>
c001009f:	83 ec 0c             	sub    esp,0xc
c00100a2:	68 e5 ab 02 c0       	push   0xc002abe5
c00100a7:	e8 05 a2 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c00100ac:	83 c4 10             	add    esp,0x10
c00100af:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00100b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00100b6:	89 08                	mov    DWORD PTR [eax],ecx
c00100b8:	31 c0                	xor    eax,eax
c00100ba:	83 c4 1c             	add    esp,0x1c
c00100bd:	5b                   	pop    ebx
c00100be:	5e                   	pop    esi
c00100bf:	5f                   	pop    edi
c00100c0:	5d                   	pop    ebp
c00100c1:	c3                   	ret    

c00100c2 <Pipe::Pipe(int)>:
c00100c2:	83 ec 0c             	sub    esp,0xc
c00100c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c9:	83 ec 08             	sub    esp,0x8
c00100cc:	6a 00                	push   0x0
c00100ce:	50                   	push   eax
c00100cf:	e8 5e 0f 00 00       	call   c0011032 <UnixFile::UnixFile(int)>
c00100d4:	83 c4 10             	add    esp,0x10
c00100d7:	ba 0c ac 02 c0       	mov    edx,0xc002ac0c
c00100dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e0:	89 10                	mov    DWORD PTR [eax],edx
c00100e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100e6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00100ea:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00100ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f1:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00100f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100fc:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010103:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010107:	83 ec 0c             	sub    esp,0xc
c001010a:	50                   	push   eax
c001010b:	e8 7c f7 ff ff       	call   c000f88c <malloc>
c0010110:	83 c4 10             	add    esp,0x10
c0010113:	89 c2                	mov    edx,eax
c0010115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010119:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001011c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010120:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010124:	90                   	nop
c0010125:	83 c4 0c             	add    esp,0xc
c0010128:	c3                   	ret    
c0010129:	90                   	nop

c001012a <VgaText::isAtty()>:
c001012a:	b0 01                	mov    al,0x1
c001012c:	c3                   	ret    
c001012d:	90                   	nop

c001012e <VgaText::~VgaText()>:
c001012e:	83 ec 0c             	sub    esp,0xc
c0010131:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c0010136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001013a:	89 10                	mov    DWORD PTR [eax],edx
c001013c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010140:	83 ec 0c             	sub    esp,0xc
c0010143:	50                   	push   eax
c0010144:	e8 cb 10 00 00       	call   c0011214 <UnixFile::~UnixFile()>
c0010149:	83 c4 10             	add    esp,0x10
c001014c:	90                   	nop
c001014d:	83 c4 0c             	add    esp,0xc
c0010150:	c3                   	ret    
c0010151:	90                   	nop

c0010152 <VgaText::~VgaText()>:
c0010152:	83 ec 0c             	sub    esp,0xc
c0010155:	83 ec 0c             	sub    esp,0xc
c0010158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001015c:	e8 cd ff ff ff       	call   c001012e <VgaText::~VgaText()>
c0010161:	83 c4 10             	add    esp,0x10
c0010164:	83 ec 08             	sub    esp,0x8
c0010167:	68 c4 02 00 00       	push   0x2c4
c001016c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010170:	e8 26 26 00 00       	call   c001279b <operator delete(void*, unsigned long)>
c0010175:	83 c4 10             	add    esp,0x10
c0010178:	83 c4 0c             	add    esp,0xc
c001017b:	c3                   	ret    

c001017c <VgaText::read(unsigned long long, void*, int*)>:
c001017c:	83 ec 10             	sub    esp,0x10
c001017f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010183:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010187:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001018b:	e8 a0 5b 00 00       	call   c0015d30 <readKeyboard(VgaText*, char*, unsigned long)>
c0010190:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010194:	89 02                	mov    DWORD PTR [edx],eax
c0010196:	31 c0                	xor    eax,eax
c0010198:	83 c4 1c             	add    esp,0x1c
c001019b:	c3                   	ret    

c001019c <setTerminalScrollLock(bool)>:
c001019c:	c3                   	ret    

c001019d <addToTerminalCycle(VgaText*)>:
c001019d:	8b 15 00 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef00
c00101a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101a7:	85 d2                	test   edx,edx
c00101a9:	75 09                	jne    c00101b4 <addToTerminalCycle(VgaText*)+0x17>
c00101ab:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00101ae:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c00101b3:	c3                   	ret    
c00101b4:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00101b7:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00101ba:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00101bd:	c3                   	ret    

c00101be <installVgaTextImplementation()>:
c00101be:	83 ec 10             	sub    esp,0x10
c00101c1:	6a 20                	push   0x20
c00101c3:	6a 00                	push   0x0
c00101c5:	68 e0 ee 02 c0       	push   0xc002eee0
c00101ca:	e8 81 05 ff ff       	call   c0000750 <memset>
c00101cf:	83 c4 1c             	add    esp,0x1c
c00101d2:	c3                   	ret    

c00101d3 <scrollTerminalScrollLock(int)>:
c00101d3:	c3                   	ret    

c00101d4 <VgaText::updateTitle()>:
c00101d4:	53                   	push   ebx
c00101d5:	31 c0                	xor    eax,eax
c00101d7:	83 ec 58             	sub    esp,0x58
c00101da:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00101de:	89 e1                	mov    ecx,esp
c00101e0:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00101e4:	40                   	inc    eax
c00101e5:	83 f8 50             	cmp    eax,0x50
c00101e8:	75 f6                	jne    c00101e0 <VgaText::updateTitle()+0xc>
c00101ea:	31 c0                	xor    eax,eax
c00101ec:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c00101f3:	84 db                	test   bl,bl
c00101f5:	74 06                	je     c00101fd <VgaText::updateTitle()+0x29>
c00101f7:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00101fa:	40                   	inc    eax
c00101fb:	eb ef                	jmp    c00101ec <VgaText::updateTitle()+0x18>
c00101fd:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010200:	85 c0                	test   eax,eax
c0010202:	74 09                	je     c001020d <VgaText::updateTitle()+0x39>
c0010204:	53                   	push   ebx
c0010205:	53                   	push   ebx
c0010206:	51                   	push   ecx
c0010207:	52                   	push   edx
c0010208:	ff d0                	call   eax
c001020a:	83 c4 10             	add    esp,0x10
c001020d:	83 c4 58             	add    esp,0x58
c0010210:	5b                   	pop    ebx
c0010211:	c3                   	ret    

c0010212 <VgaText::load()>:
c0010212:	53                   	push   ebx
c0010213:	31 c0                	xor    eax,eax
c0010215:	83 ec 58             	sub    esp,0x58
c0010218:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c001021c:	89 e2                	mov    edx,esp
c001021e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010222:	40                   	inc    eax
c0010223:	83 f8 50             	cmp    eax,0x50
c0010226:	75 f6                	jne    c001021e <VgaText::load()+0xc>
c0010228:	31 c0                	xor    eax,eax
c001022a:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c0010231:	84 c9                	test   cl,cl
c0010233:	74 06                	je     c001023b <VgaText::load()+0x29>
c0010235:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010238:	40                   	inc    eax
c0010239:	eb ef                	jmp    c001022a <VgaText::load()+0x18>
c001023b:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c001023e:	85 c0                	test   eax,eax
c0010240:	74 09                	je     c001024b <VgaText::load()+0x39>
c0010242:	51                   	push   ecx
c0010243:	51                   	push   ecx
c0010244:	52                   	push   edx
c0010245:	53                   	push   ebx
c0010246:	ff d0                	call   eax
c0010248:	83 c4 10             	add    esp,0x10
c001024b:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001024e:	85 c0                	test   eax,eax
c0010250:	74 09                	je     c001025b <VgaText::load()+0x49>
c0010252:	83 ec 0c             	sub    esp,0xc
c0010255:	53                   	push   ebx
c0010256:	ff d0                	call   eax
c0010258:	83 c4 10             	add    esp,0x10
c001025b:	83 c4 58             	add    esp,0x58
c001025e:	5b                   	pop    ebx
c001025f:	c3                   	ret    

c0010260 <VgaText::updateCursor()>:
c0010260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010264:	39 05 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,eax
c001026a:	75 09                	jne    c0010275 <VgaText::updateCursor()+0x15>
c001026c:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001026f:	85 c0                	test   eax,eax
c0010271:	74 02                	je     c0010275 <VgaText::updateCursor()+0x15>
c0010273:	ff e0                	jmp    eax
c0010275:	c3                   	ret    

c0010276 <VgaText::showCursor(bool)>:
c0010276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001027a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001027e:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c0010281:	c3                   	ret    

c0010282 <VgaText::disableBlink(bool)>:
c0010282:	56                   	push   esi
c0010283:	53                   	push   ebx
c0010284:	51                   	push   ecx
c0010285:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010289:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001028d:	39 1d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ebx
c0010293:	75 15                	jne    c00102aa <VgaText::disableBlink(bool)+0x28>
c0010295:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010298:	85 c0                	test   eax,eax
c001029a:	74 0e                	je     c00102aa <VgaText::disableBlink(bool)+0x28>
c001029c:	89 f1                	mov    ecx,esi
c001029e:	52                   	push   edx
c001029f:	52                   	push   edx
c00102a0:	0f b6 d1             	movzx  edx,cl
c00102a3:	52                   	push   edx
c00102a4:	53                   	push   ebx
c00102a5:	ff d0                	call   eax
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	89 f0                	mov    eax,esi
c00102ac:	83 f0 01             	xor    eax,0x1
c00102af:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c00102b2:	58                   	pop    eax
c00102b3:	5b                   	pop    ebx
c00102b4:	5e                   	pop    esi
c00102b5:	c3                   	ret    

c00102b6 <VgaText::doANSI_SGR(int)>:
c00102b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102be:	85 d2                	test   edx,edx
c00102c0:	75 0b                	jne    c00102cd <VgaText::doANSI_SGR(int)+0x17>
c00102c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00102c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00102c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00102cb:	eb 59                	jmp    c0010326 <VgaText::doANSI_SGR(int)+0x70>
c00102cd:	83 fa 07             	cmp    edx,0x7
c00102d0:	75 0b                	jne    c00102dd <VgaText::doANSI_SGR(int)+0x27>
c00102d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00102d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00102d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00102db:	eb 49                	jmp    c0010326 <VgaText::doANSI_SGR(int)+0x70>
c00102dd:	83 fa 1b             	cmp    edx,0x1b
c00102e0:	74 e0                	je     c00102c2 <VgaText::doANSI_SGR(int)+0xc>
c00102e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00102e5:	83 f9 07             	cmp    ecx,0x7
c00102e8:	77 09                	ja     c00102f3 <VgaText::doANSI_SGR(int)+0x3d>
c00102ea:	8b 14 8d a0 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2260]
c00102f1:	eb 20                	jmp    c0010313 <VgaText::doANSI_SGR(int)+0x5d>
c00102f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00102f6:	83 f9 07             	cmp    ecx,0x7
c00102f9:	77 09                	ja     c0010304 <VgaText::doANSI_SGR(int)+0x4e>
c00102fb:	8b 14 8d a0 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2260]
c0010302:	eb 22                	jmp    c0010326 <VgaText::doANSI_SGR(int)+0x70>
c0010304:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010307:	83 f9 07             	cmp    ecx,0x7
c001030a:	77 0b                	ja     c0010317 <VgaText::doANSI_SGR(int)+0x61>
c001030c:	8b 14 95 58 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23a8]
c0010313:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010316:	c3                   	ret    
c0010317:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001031a:	83 f9 07             	cmp    ecx,0x7
c001031d:	77 0a                	ja     c0010329 <VgaText::doANSI_SGR(int)+0x73>
c001031f:	8b 14 95 30 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23d0]
c0010326:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010329:	c3                   	ret    

c001032a <VgaText::setDefaultBgColour(VgaColour)>:
c001032a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001032e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010332:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010335:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010338:	c3                   	ret    
c0010339:	90                   	nop

c001033a <VgaText::setDefaultFgColour(VgaColour)>:
c001033a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001033e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010342:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010345:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010348:	c3                   	ret    
c0010349:	90                   	nop

c001034a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001034a:	53                   	push   ebx
c001034b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001034f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010353:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010357:	51                   	push   ecx
c0010358:	e8 cd ff ff ff       	call   c001032a <VgaText::setDefaultBgColour(VgaColour)>
c001035d:	58                   	pop    eax
c001035e:	5a                   	pop    edx
c001035f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010363:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010367:	5b                   	pop    ebx
c0010368:	eb d0                	jmp    c001033a <VgaText::setDefaultFgColour(VgaColour)>

c001036a <VgaText::setTitleTextColour(VgaColour)>:
c001036a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001036e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010372:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010375:	e9 5a fe ff ff       	jmp    c00101d4 <VgaText::updateTitle()>

c001037a <VgaText::setTitleColour(VgaColour)>:
c001037a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001037e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010382:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010385:	e9 4a fe ff ff       	jmp    c00101d4 <VgaText::updateTitle()>

c001038a <VgaText::setTitle(char*)>:
c001038a:	53                   	push   ebx
c001038b:	83 ec 10             	sub    esp,0x10
c001038e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010396:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c001039c:	50                   	push   eax
c001039d:	e8 6a 04 ff ff       	call   c000080c <strcpy>
c00103a2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00103a6:	83 c4 18             	add    esp,0x18
c00103a9:	5b                   	pop    ebx
c00103aa:	e9 25 fe ff ff       	jmp    c00101d4 <VgaText::updateTitle()>
c00103af:	90                   	nop

c00103b0 <VgaText::combineColours(unsigned char, unsigned char)>:
c00103b0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00103b4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00103b9:	83 e0 0f             	and    eax,0xf
c00103bc:	c1 e2 04             	shl    edx,0x4
c00103bf:	09 d0                	or     eax,edx
c00103c1:	c3                   	ret    

c00103c2 <VgaText::scrollScreen()>:
c00103c2:	55                   	push   ebp
c00103c3:	b9 01 00 00 00       	mov    ecx,0x1
c00103c8:	57                   	push   edi
c00103c9:	56                   	push   esi
c00103ca:	53                   	push   ebx
c00103cb:	83 ec 0c             	sub    esp,0xc
c00103ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00103d2:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00103d8:	31 ff                	xor    edi,edi
c00103da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00103dd:	83 f9 17             	cmp    ecx,0x17
c00103e0:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00103e3:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00103ea:	75 27                	jne    c0010413 <VgaText::scrollScreen()+0x51>
c00103ec:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00103ef:	01 f5                	add    ebp,esi
c00103f1:	f7 c7 01 00 00 00    	test   edi,0x1
c00103f7:	74 16                	je     c001040f <VgaText::scrollScreen()+0x4d>
c00103f9:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00103fd:	50                   	push   eax
c00103fe:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010402:	50                   	push   eax
c0010403:	e8 a8 ff ff ff       	call   c00103b0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010408:	5a                   	pop    edx
c0010409:	5a                   	pop    edx
c001040a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c001040d:	eb 04                	jmp    c0010413 <VgaText::scrollScreen()+0x51>
c001040f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c0010413:	47                   	inc    edi
c0010414:	46                   	inc    esi
c0010415:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001041b:	75 bd                	jne    c00103da <VgaText::scrollScreen()+0x18>
c001041d:	41                   	inc    ecx
c001041e:	83 f9 18             	cmp    ecx,0x18
c0010421:	75 af                	jne    c00103d2 <VgaText::scrollScreen()+0x10>
c0010423:	39 1d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ebx
c0010429:	75 1b                	jne    c0010446 <VgaText::scrollScreen()+0x84>
c001042b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001042f:	74 05                	je     c0010436 <VgaText::scrollScreen()+0x74>
c0010431:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0010434:	eb 10                	jmp    c0010446 <VgaText::scrollScreen()+0x84>
c0010436:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c0010439:	85 c0                	test   eax,eax
c001043b:	74 09                	je     c0010446 <VgaText::scrollScreen()+0x84>
c001043d:	83 ec 0c             	sub    esp,0xc
c0010440:	53                   	push   ebx
c0010441:	ff d0                	call   eax
c0010443:	83 c4 10             	add    esp,0x10
c0010446:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001044a:	83 c4 0c             	add    esp,0xc
c001044d:	5b                   	pop    ebx
c001044e:	5e                   	pop    esi
c001044f:	5f                   	pop    edi
c0010450:	5d                   	pop    ebp
c0010451:	e9 0a fe ff ff       	jmp    c0010260 <VgaText::updateCursor()>

c0010456 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010456:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001045b:	c1 e0 08             	shl    eax,0x8
c001045e:	89 c2                	mov    edx,eax
c0010460:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010465:	09 d0                	or     eax,edx
c0010467:	c3                   	ret    

c0010468 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0010468:	56                   	push   esi
c0010469:	53                   	push   ebx
c001046a:	51                   	push   ecx
c001046b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001046f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010474:	50                   	push   eax
c0010475:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001047a:	50                   	push   eax
c001047b:	e8 30 ff ff ff       	call   c00103b0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010480:	5b                   	pop    ebx
c0010481:	0f b6 c0             	movzx  eax,al
c0010484:	5e                   	pop    esi
c0010485:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001048a:	50                   	push   eax
c001048b:	53                   	push   ebx
c001048c:	e8 c5 ff ff ff       	call   c0010456 <VgaText::combineCharAndColour(char, unsigned char)>
c0010491:	5a                   	pop    edx
c0010492:	5e                   	pop    esi
c0010493:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c0010496:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001049c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00104a0:	0f b7 d2             	movzx  edx,dx
c00104a3:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c00104a7:	39 0d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ecx
c00104ad:	75 10                	jne    c00104bf <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00104af:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c00104b2:	85 c0                	test   eax,eax
c00104b4:	74 09                	je     c00104bf <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c00104b6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00104ba:	5a                   	pop    edx
c00104bb:	5b                   	pop    ebx
c00104bc:	5e                   	pop    esi
c00104bd:	ff e0                	jmp    eax
c00104bf:	58                   	pop    eax
c00104c0:	5b                   	pop    ebx
c00104c1:	5e                   	pop    esi
c00104c2:	c3                   	ret    
c00104c3:	90                   	nop

c00104c4 <VgaText::getCursorX()>:
c00104c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00104cb:	c3                   	ret    

c00104cc <VgaText::getCursorY()>:
c00104cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d0:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00104d3:	c3                   	ret    

c00104d4 <VgaText::setCursor(int, int)>:
c00104d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104dc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00104df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00104e3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104e6:	e9 75 fd ff ff       	jmp    c0010260 <VgaText::updateCursor()>
c00104eb:	90                   	nop

c00104ec <VgaText::setCursorX(int)>:
c00104ec:	83 ec 10             	sub    esp,0x10
c00104ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104f3:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00104f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104fa:	50                   	push   eax
c00104fb:	e8 d4 ff ff ff       	call   c00104d4 <VgaText::setCursor(int, int)>
c0010500:	83 c4 1c             	add    esp,0x1c
c0010503:	c3                   	ret    

c0010504 <VgaText::setCursorY(int)>:
c0010504:	83 ec 10             	sub    esp,0x10
c0010507:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001050b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001050f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010512:	50                   	push   eax
c0010513:	e8 bc ff ff ff       	call   c00104d4 <VgaText::setCursor(int, int)>
c0010518:	83 c4 1c             	add    esp,0x1c
c001051b:	c3                   	ret    

c001051c <VgaText::incrementCursor(bool)>:
c001051c:	56                   	push   esi
c001051d:	53                   	push   ebx
c001051e:	51                   	push   ecx
c001051f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010523:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010527:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001052a:	40                   	inc    eax
c001052b:	83 f8 50             	cmp    eax,0x50
c001052e:	74 05                	je     c0010535 <VgaText::incrementCursor(bool)+0x19>
c0010530:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0010533:	eb 24                	jmp    c0010559 <VgaText::incrementCursor(bool)+0x3d>
c0010535:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010538:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001053f:	8d 50 01             	lea    edx,[eax+0x1]
c0010542:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010545:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010548:	75 0f                	jne    c0010559 <VgaText::incrementCursor(bool)+0x3d>
c001054a:	83 ec 0c             	sub    esp,0xc
c001054d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010550:	53                   	push   ebx
c0010551:	e8 6c fe ff ff       	call   c00103c2 <VgaText::scrollScreen()>
c0010556:	83 c4 10             	add    esp,0x10
c0010559:	89 f0                	mov    eax,esi
c001055b:	84 c0                	test   al,al
c001055d:	74 0c                	je     c001056b <VgaText::incrementCursor(bool)+0x4f>
c001055f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010563:	5a                   	pop    edx
c0010564:	5b                   	pop    ebx
c0010565:	5e                   	pop    esi
c0010566:	e9 f5 fc ff ff       	jmp    c0010260 <VgaText::updateCursor()>
c001056b:	58                   	pop    eax
c001056c:	5b                   	pop    ebx
c001056d:	5e                   	pop    esi
c001056e:	c3                   	ret    
c001056f:	90                   	nop

c0010570 <VgaText::decrementCursor(bool)>:
c0010570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010574:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010578:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001057b:	85 c0                	test   eax,eax
c001057d:	74 04                	je     c0010583 <VgaText::decrementCursor(bool)+0x13>
c001057f:	48                   	dec    eax
c0010580:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010583:	84 c9                	test   cl,cl
c0010585:	74 09                	je     c0010590 <VgaText::decrementCursor(bool)+0x20>
c0010587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001058b:	e9 d0 fc ff ff       	jmp    c0010260 <VgaText::updateCursor()>
c0010590:	c3                   	ret    
c0010591:	90                   	nop

c0010592 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010592:	53                   	push   ebx
c0010593:	83 ec 08             	sub    esp,0x8
c0010596:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001059a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001059e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00105a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00105a6:	3c 07                	cmp    al,0x7
c00105a8:	75 2a                	jne    c00105d4 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c00105aa:	a1 b8 ef 02 c0       	mov    eax,ds:0xc002efb8
c00105af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00105b7:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c00105bf:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c00105c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105cb:	83 c4 08             	add    esp,0x8
c00105ce:	5b                   	pop    ebx
c00105cf:	e9 b4 30 00 00       	jmp    c0013688 <Buzzer::beep(int, int, bool)>
c00105d4:	3c 0d                	cmp    al,0xd
c00105d6:	75 09                	jne    c00105e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c00105d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105df:	eb 2c                	jmp    c001060d <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c00105e1:	3c 0a                	cmp    al,0xa
c00105e3:	75 31                	jne    c0010616 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c00105e5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00105e8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00105ef:	8d 50 01             	lea    edx,[eax+0x1]
c00105f2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00105f5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00105f8:	75 0f                	jne    c0010609 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c00105fa:	83 ec 0c             	sub    esp,0xc
c00105fd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010600:	53                   	push   ebx
c0010601:	e8 bc fd ff ff       	call   c00103c2 <VgaText::scrollScreen()>
c0010606:	83 c4 10             	add    esp,0x10
c0010609:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001060d:	83 c4 08             	add    esp,0x8
c0010610:	5b                   	pop    ebx
c0010611:	e9 4a fc ff ff       	jmp    c0010260 <VgaText::updateCursor()>
c0010616:	3c 08                	cmp    al,0x8
c0010618:	75 25                	jne    c001063f <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c001061a:	50                   	push   eax
c001061b:	50                   	push   eax
c001061c:	6a 01                	push   0x1
c001061e:	53                   	push   ebx
c001061f:	e8 4c ff ff ff       	call   c0010570 <VgaText::decrementCursor(bool)>
c0010624:	5a                   	pop    edx
c0010625:	59                   	pop    ecx
c0010626:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010629:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001062c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001062f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010632:	6a 20                	push   0x20
c0010634:	53                   	push   ebx
c0010635:	e8 2e fe ff ff       	call   c0010468 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001063a:	83 c4 28             	add    esp,0x28
c001063d:	5b                   	pop    ebx
c001063e:	c3                   	ret    
c001063f:	83 ec 08             	sub    esp,0x8
c0010642:	0f be c0             	movsx  eax,al
c0010645:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010648:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001064b:	51                   	push   ecx
c001064c:	52                   	push   edx
c001064d:	50                   	push   eax
c001064e:	53                   	push   ebx
c001064f:	e8 14 fe ff ff       	call   c0010468 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010654:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010658:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010660:	83 c4 28             	add    esp,0x28
c0010663:	5b                   	pop    ebx
c0010664:	e9 b3 fe ff ff       	jmp    c001051c <VgaText::incrementCursor(bool)>
c0010669:	90                   	nop

c001066a <VgaText::isShowingCursor()>:
c001066a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001066e:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010671:	c3                   	ret    

c0010672 <VgaText::isBlinkDisabled()>:
c0010672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010676:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010679:	83 f0 01             	xor    eax,0x1
c001067c:	c3                   	ret    
c001067d:	90                   	nop

c001067e <VgaText::setCursorHeight(int)>:
c001067e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010682:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010686:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010689:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c001068d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010691:	e9 e0 fb ff ff       	jmp    c0010276 <VgaText::showCursor(bool)>

c0010696 <VgaText::getCursorHeight()>:
c0010696:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001069a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001069d:	c3                   	ret    

c001069e <setActiveTerminal(VgaText*)>:
c001069e:	53                   	push   ebx
c001069f:	83 ec 08             	sub    esp,0x8
c00106a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106a6:	85 db                	test   ebx,ebx
c00106a8:	75 11                	jne    c00106bb <setActiveTerminal(VgaText*)+0x1d>
c00106aa:	c7 44 24 10 20 ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac20
c00106b2:	83 c4 08             	add    esp,0x8
c00106b5:	5b                   	pop    ebx
c00106b6:	e9 f6 9b 00 00       	jmp    c001a2b1 <Krnl::panic(char const*)>
c00106bb:	50                   	push   eax
c00106bc:	50                   	push   eax
c00106bd:	53                   	push   ebx
c00106be:	68 2e ac 02 c0       	push   0xc002ac2e
c00106c3:	e8 b3 21 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00106c8:	a1 04 ef 02 c0       	mov    eax,ds:0xc002ef04
c00106cd:	83 c4 10             	add    esp,0x10
c00106d0:	85 c0                	test   eax,eax
c00106d2:	74 0c                	je     c00106e0 <setActiveTerminal(VgaText*)+0x42>
c00106d4:	83 ec 0c             	sub    esp,0xc
c00106d7:	50                   	push   eax
c00106d8:	e8 83 fb ff ff       	call   c0010260 <VgaText::updateCursor()>
c00106dd:	83 c4 10             	add    esp,0x10
c00106e0:	89 1d 04 ef 02 c0    	mov    DWORD PTR ds:0xc002ef04,ebx
c00106e6:	51                   	push   ecx
c00106e7:	51                   	push   ecx
c00106e8:	53                   	push   ebx
c00106e9:	68 46 ac 02 c0       	push   0xc002ac46
c00106ee:	e8 88 21 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00106f3:	83 c4 0c             	add    esp,0xc
c00106f6:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00106f9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00106fc:	53                   	push   ebx
c00106fd:	e8 d2 fd ff ff       	call   c00104d4 <VgaText::setCursor(int, int)>
c0010702:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010705:	e8 68 ff ff ff       	call   c0010672 <VgaText::isBlinkDisabled()>
c001070a:	5a                   	pop    edx
c001070b:	0f b6 c0             	movzx  eax,al
c001070e:	59                   	pop    ecx
c001070f:	50                   	push   eax
c0010710:	53                   	push   ebx
c0010711:	e8 6c fb ff ff       	call   c0010282 <VgaText::disableBlink(bool)>
c0010716:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010719:	e8 78 ff ff ff       	call   c0010696 <VgaText::getCursorHeight()>
c001071e:	5a                   	pop    edx
c001071f:	59                   	pop    ecx
c0010720:	50                   	push   eax
c0010721:	53                   	push   ebx
c0010722:	e8 57 ff ff ff       	call   c001067e <VgaText::setCursorHeight(int)>
c0010727:	83 c4 10             	add    esp,0x10
c001072a:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c001072e:	75 07                	jne    c0010737 <setActiveTerminal(VgaText*)+0x99>
c0010730:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010737:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001073b:	83 c4 08             	add    esp,0x8
c001073e:	5b                   	pop    ebx
c001073f:	e9 ce fa ff ff       	jmp    c0010212 <VgaText::load()>

c0010744 <doTerminalCycle()>:
c0010744:	83 ec 18             	sub    esp,0x18
c0010747:	a1 00 ef 02 c0       	mov    eax,ds:0xc002ef00
c001074c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001074f:	50                   	push   eax
c0010750:	a3 00 ef 02 c0       	mov    ds:0xc002ef00,eax
c0010755:	e8 44 ff ff ff       	call   c001069e <setActiveTerminal(VgaText*)>
c001075a:	83 c4 1c             	add    esp,0x1c
c001075d:	c3                   	ret    

c001075e <VgaText::doUpdate()>:
c001075e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010762:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010765:	85 c0                	test   eax,eax
c0010767:	74 02                	je     c001076b <VgaText::doUpdate()+0xd>
c0010769:	ff e0                	jmp    eax
c001076b:	c3                   	ret    

c001076c <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001076c:	55                   	push   ebp
c001076d:	31 ed                	xor    ebp,ebp
c001076f:	57                   	push   edi
c0010770:	56                   	push   esi
c0010771:	53                   	push   ebx
c0010772:	83 ec 1c             	sub    esp,0x1c
c0010775:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010779:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001077e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010785:	50                   	push   eax
c0010786:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001078b:	50                   	push   eax
c001078c:	e8 1f fc ff ff       	call   c00103b0 <VgaText::combineColours(unsigned char, unsigned char)>
c0010791:	59                   	pop    ecx
c0010792:	0f b6 c0             	movzx  eax,al
c0010795:	5e                   	pop    esi
c0010796:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001079b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001079f:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00107a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107a6:	0f b7 f6             	movzx  esi,si
c00107a9:	01 f6                	add    esi,esi
c00107ab:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00107ae:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00107b1:	84 c0                	test   al,al
c00107b3:	0f 84 fd 00 00 00    	je     c00108b6 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c00107b9:	3c 0d                	cmp    al,0xd
c00107bb:	75 0c                	jne    c00107c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c00107bd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00107c4:	e9 e7 00 00 00       	jmp    c00108b0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c00107c9:	3c 0a                	cmp    al,0xa
c00107cb:	75 47                	jne    c0010814 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c00107cd:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00107d0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00107d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00107da:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00107dd:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c00107e0:	75 0f                	jne    c00107f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c00107e2:	83 ec 0c             	sub    esp,0xc
c00107e5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00107e8:	53                   	push   ebx
c00107e9:	e8 d4 fb ff ff       	call   c00103c2 <VgaText::scrollScreen()>
c00107ee:	83 c4 10             	add    esp,0x10
c00107f1:	83 ec 0c             	sub    esp,0xc
c00107f4:	31 ed                	xor    ebp,ebp
c00107f6:	53                   	push   ebx
c00107f7:	e8 64 fa ff ff       	call   c0010260 <VgaText::updateCursor()>
c00107fc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010801:	83 c4 10             	add    esp,0x10
c0010804:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010807:	0f b7 f6             	movzx  esi,si
c001080a:	01 f6                	add    esi,esi
c001080c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001080f:	e9 9c 00 00 00       	jmp    c00108b0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010814:	3c 08                	cmp    al,0x8
c0010816:	75 35                	jne    c001084d <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010818:	56                   	push   esi
c0010819:	56                   	push   esi
c001081a:	6a 01                	push   0x1
c001081c:	53                   	push   ebx
c001081d:	e8 4e fd ff ff       	call   c0010570 <VgaText::decrementCursor(bool)>
c0010822:	58                   	pop    eax
c0010823:	5a                   	pop    edx
c0010824:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010827:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001082a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001082d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010830:	6a 20                	push   0x20
c0010832:	53                   	push   ebx
c0010833:	e8 30 fc ff ff       	call   c0010468 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010838:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c001083d:	83 c4 20             	add    esp,0x20
c0010840:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010843:	0f b7 f6             	movzx  esi,si
c0010846:	01 f6                	add    esi,esi
c0010848:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001084b:	eb 63                	jmp    c00108b0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c001084d:	51                   	push   ecx
c001084e:	51                   	push   ecx
c001084f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010853:	50                   	push   eax
c0010854:	e8 fd fb ff ff       	call   c0010456 <VgaText::combineCharAndColour(char, unsigned char)>
c0010859:	83 c4 10             	add    esp,0x10
c001085c:	66 89 06             	mov    WORD PTR [esi],ax
c001085f:	39 1d 04 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef04,ebx
c0010865:	75 21                	jne    c0010888 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010867:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c001086a:	85 c0                	test   eax,eax
c001086c:	74 1a                	je     c0010888 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c001086e:	52                   	push   edx
c001086f:	52                   	push   edx
c0010870:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010873:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010876:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001087a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001087e:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010881:	51                   	push   ecx
c0010882:	53                   	push   ebx
c0010883:	ff d0                	call   eax
c0010885:	83 c4 20             	add    esp,0x20
c0010888:	83 c6 02             	add    esi,0x2
c001088b:	50                   	push   eax
c001088c:	50                   	push   eax
c001088d:	6a 00                	push   0x0
c001088f:	53                   	push   ebx
c0010890:	e8 87 fc ff ff       	call   c001051c <VgaText::incrementCursor(bool)>
c0010895:	83 c4 10             	add    esp,0x10
c0010898:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c001089c:	75 0d                	jne    c00108ab <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c001089e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00108a3:	0f b7 f6             	movzx  esi,si
c00108a6:	01 f6                	add    esi,esi
c00108a8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00108ab:	bd 01 00 00 00       	mov    ebp,0x1
c00108b0:	47                   	inc    edi
c00108b1:	e9 f8 fe ff ff       	jmp    c00107ae <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c00108b6:	83 ec 0c             	sub    esp,0xc
c00108b9:	53                   	push   ebx
c00108ba:	e8 a1 f9 ff ff       	call   c0010260 <VgaText::updateCursor()>
c00108bf:	83 c4 10             	add    esp,0x10
c00108c2:	89 e8                	mov    eax,ebp
c00108c4:	84 c0                	test   al,al
c00108c6:	74 0c                	je     c00108d4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c00108c8:	83 ec 0c             	sub    esp,0xc
c00108cb:	53                   	push   ebx
c00108cc:	e8 8d fe ff ff       	call   c001075e <VgaText::doUpdate()>
c00108d1:	83 c4 10             	add    esp,0x10
c00108d4:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00108db:	83 c4 1c             	add    esp,0x1c
c00108de:	5b                   	pop    ebx
c00108df:	5e                   	pop    esi
c00108e0:	5f                   	pop    edi
c00108e1:	5d                   	pop    ebp
c00108e2:	c3                   	ret    
c00108e3:	90                   	nop

c00108e4 <VgaText::clearScreen()>:
c00108e4:	57                   	push   edi
c00108e5:	56                   	push   esi
c00108e6:	31 f6                	xor    esi,esi
c00108e8:	53                   	push   ebx
c00108e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108ed:	52                   	push   edx
c00108ee:	6a 00                	push   0x0
c00108f0:	6a 00                	push   0x0
c00108f2:	53                   	push   ebx
c00108f3:	e8 dc fb ff ff       	call   c00104d4 <VgaText::setCursor(int, int)>
c00108f8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00108ff:	83 c4 10             	add    esp,0x10
c0010902:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010905:	7e 20                	jle    c0010927 <VgaText::clearScreen()+0x43>
c0010907:	31 ff                	xor    edi,edi
c0010909:	50                   	push   eax
c001090a:	50                   	push   eax
c001090b:	56                   	push   esi
c001090c:	57                   	push   edi
c001090d:	47                   	inc    edi
c001090e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010911:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010914:	6a 20                	push   0x20
c0010916:	53                   	push   ebx
c0010917:	e8 4c fb ff ff       	call   c0010468 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001091c:	83 c4 20             	add    esp,0x20
c001091f:	83 ff 50             	cmp    edi,0x50
c0010922:	75 e5                	jne    c0010909 <VgaText::clearScreen()+0x25>
c0010924:	46                   	inc    esi
c0010925:	eb db                	jmp    c0010902 <VgaText::clearScreen()+0x1e>
c0010927:	83 ec 0c             	sub    esp,0xc
c001092a:	53                   	push   ebx
c001092b:	e8 2e fe ff ff       	call   c001075e <VgaText::doUpdate()>
c0010930:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010937:	83 c4 10             	add    esp,0x10
c001093a:	5b                   	pop    ebx
c001093b:	5e                   	pop    esi
c001093c:	5f                   	pop    edi
c001093d:	c3                   	ret    

c001093e <VgaText::putchar(char)>:
c001093e:	56                   	push   esi
c001093f:	53                   	push   ebx
c0010940:	83 ec 14             	sub    esp,0x14
c0010943:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010947:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001094b:	3c 5b                	cmp    al,0x5b
c001094d:	75 18                	jne    c0010967 <VgaText::putchar(char)+0x29>
c001094f:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010953:	74 1f                	je     c0010974 <VgaText::putchar(char)+0x36>
c0010955:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c001095b:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010962:	e9 bd 00 00 00       	jmp    c0010a24 <VgaText::putchar(char)+0xe6>
c0010967:	3c 1b                	cmp    al,0x1b
c0010969:	75 09                	jne    c0010974 <VgaText::putchar(char)+0x36>
c001096b:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001096f:	e9 b0 00 00 00       	jmp    c0010a24 <VgaText::putchar(char)+0xe6>
c0010974:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010977:	84 c9                	test   cl,cl
c0010979:	0f 84 92 00 00 00    	je     c0010a11 <VgaText::putchar(char)+0xd3>
c001097f:	8d 50 c0             	lea    edx,[eax-0x40]
c0010982:	80 fa 3e             	cmp    dl,0x3e
c0010985:	77 76                	ja     c00109fd <VgaText::putchar(char)+0xbf>
c0010987:	3c 6d                	cmp    al,0x6d
c0010989:	75 47                	jne    c00109d2 <VgaText::putchar(char)+0x94>
c001098b:	31 f6                	xor    esi,esi
c001098d:	31 d2                	xor    edx,edx
c001098f:	31 c0                	xor    eax,eax
c0010991:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010994:	7e 2d                	jle    c00109c3 <VgaText::putchar(char)+0x85>
c0010996:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001099b:	80 fa 3b             	cmp    dl,0x3b
c001099e:	75 17                	jne    c00109b7 <VgaText::putchar(char)+0x79>
c00109a0:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00109a4:	50                   	push   eax
c00109a5:	53                   	push   ebx
c00109a6:	e8 0b f9 ff ff       	call   c00102b6 <VgaText::doANSI_SGR(int)>
c00109ab:	59                   	pop    ecx
c00109ac:	31 d2                	xor    edx,edx
c00109ae:	58                   	pop    eax
c00109af:	31 c0                	xor    eax,eax
c00109b1:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00109b5:	eb 09                	jmp    c00109c0 <VgaText::putchar(char)+0x82>
c00109b7:	6b c0 0a             	imul   eax,eax,0xa
c00109ba:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00109be:	88 ca                	mov    dl,cl
c00109c0:	46                   	inc    esi
c00109c1:	eb ce                	jmp    c0010991 <VgaText::putchar(char)+0x53>
c00109c3:	84 d2                	test   dl,dl
c00109c5:	74 2e                	je     c00109f5 <VgaText::putchar(char)+0xb7>
c00109c7:	50                   	push   eax
c00109c8:	53                   	push   ebx
c00109c9:	e8 e8 f8 ff ff       	call   c00102b6 <VgaText::doANSI_SGR(int)>
c00109ce:	58                   	pop    eax
c00109cf:	5a                   	pop    edx
c00109d0:	eb 23                	jmp    c00109f5 <VgaText::putchar(char)+0xb7>
c00109d2:	3c 4a                	cmp    al,0x4a
c00109d4:	75 1f                	jne    c00109f5 <VgaText::putchar(char)+0xb7>
c00109d6:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00109da:	75 19                	jne    c00109f5 <VgaText::putchar(char)+0xb7>
c00109dc:	83 ec 0c             	sub    esp,0xc
c00109df:	53                   	push   ebx
c00109e0:	e8 ff fe ff ff       	call   c00108e4 <VgaText::clearScreen()>
c00109e5:	83 c4 0c             	add    esp,0xc
c00109e8:	6a 00                	push   0x0
c00109ea:	6a 00                	push   0x0
c00109ec:	53                   	push   ebx
c00109ed:	e8 e2 fa ff ff       	call   c00104d4 <VgaText::setCursor(int, int)>
c00109f2:	83 c4 10             	add    esp,0x10
c00109f5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00109fb:	eb 27                	jmp    c0010a24 <VgaText::putchar(char)+0xe6>
c00109fd:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010a00:	83 fa 0e             	cmp    edx,0xe
c0010a03:	7f 1f                	jg     c0010a24 <VgaText::putchar(char)+0xe6>
c0010a05:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a08:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010a0b:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010a0f:	eb 13                	jmp    c0010a24 <VgaText::putchar(char)+0xe6>
c0010a11:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010a14:	0f be c0             	movsx  eax,al
c0010a17:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010a1a:	50                   	push   eax
c0010a1b:	53                   	push   ebx
c0010a1c:	e8 71 fb ff ff       	call   c0010592 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a21:	83 c4 10             	add    esp,0x10
c0010a24:	83 c4 14             	add    esp,0x14
c0010a27:	5b                   	pop    ebx
c0010a28:	5e                   	pop    esi
c0010a29:	c3                   	ret    

c0010a2a <VgaText::putx(unsigned int)>:
c0010a2a:	57                   	push   edi
c0010a2b:	b9 11 00 00 00       	mov    ecx,0x11
c0010a30:	56                   	push   esi
c0010a31:	be 62 ac 02 c0       	mov    esi,0xc002ac62
c0010a36:	53                   	push   ebx
c0010a37:	83 ec 20             	sub    esp,0x20
c0010a3a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010a3e:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010a42:	fc                   	cld    
c0010a43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010a45:	be 08 00 00 00       	mov    esi,0x8
c0010a4a:	50                   	push   eax
c0010a4b:	50                   	push   eax
c0010a4c:	89 d8                	mov    eax,ebx
c0010a4e:	c1 e3 04             	shl    ebx,0x4
c0010a51:	c1 e8 1c             	shr    eax,0x1c
c0010a54:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010a59:	50                   	push   eax
c0010a5a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010a5e:	e8 db fe ff ff       	call   c001093e <VgaText::putchar(char)>
c0010a63:	83 c4 10             	add    esp,0x10
c0010a66:	4e                   	dec    esi
c0010a67:	75 e1                	jne    c0010a4a <VgaText::putx(unsigned int)+0x20>
c0010a69:	83 c4 20             	add    esp,0x20
c0010a6c:	5b                   	pop    ebx
c0010a6d:	5e                   	pop    esi
c0010a6e:	5f                   	pop    edi
c0010a6f:	c3                   	ret    

c0010a70 <VgaText::puts(char const*)>:
c0010a70:	53                   	push   ebx
c0010a71:	83 ec 08             	sub    esp,0x8
c0010a74:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010a78:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010a7b:	84 c0                	test   al,al
c0010a7d:	74 12                	je     c0010a91 <VgaText::puts(char const*)+0x21>
c0010a7f:	43                   	inc    ebx
c0010a80:	51                   	push   ecx
c0010a81:	51                   	push   ecx
c0010a82:	50                   	push   eax
c0010a83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a87:	e8 b2 fe ff ff       	call   c001093e <VgaText::putchar(char)>
c0010a8c:	83 c4 10             	add    esp,0x10
c0010a8f:	eb e7                	jmp    c0010a78 <VgaText::puts(char const*)+0x8>
c0010a91:	83 c4 08             	add    esp,0x8
c0010a94:	5b                   	pop    ebx
c0010a95:	c3                   	ret    

c0010a96 <VgaText::VgaText(char const*)>:
c0010a96:	57                   	push   edi
c0010a97:	56                   	push   esi
c0010a98:	53                   	push   ebx
c0010a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9d:	83 ec 08             	sub    esp,0x8
c0010aa0:	6a 00                	push   0x0
c0010aa2:	50                   	push   eax
c0010aa3:	e8 8a 05 00 00       	call   c0011032 <UnixFile::UnixFile(int)>
c0010aa8:	83 c4 10             	add    esp,0x10
c0010aab:	ba c8 ac 02 c0       	mov    edx,0xc002acc8
c0010ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ab4:	89 10                	mov    DWORD PTR [eax],edx
c0010ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aba:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0010ac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac5:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0010acc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad0:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0010ad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ad8:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0010adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ae0:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0010ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010aeb:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0010af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010af6:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0010afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b01:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0010b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b0c:	8d 50 60             	lea    edx,[eax+0x60]
c0010b0f:	bb e0 ee 02 c0       	mov    ebx,0xc002eee0
c0010b14:	b8 08 00 00 00       	mov    eax,0x8
c0010b19:	fc                   	cld    
c0010b1a:	89 d7                	mov    edi,edx
c0010b1c:	89 de                	mov    esi,ebx
c0010b1e:	89 c1                	mov    ecx,eax
c0010b20:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b26:	05 82 00 00 00       	add    eax,0x82
c0010b2b:	83 ec 08             	sub    esp,0x8
c0010b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b32:	50                   	push   eax
c0010b33:	e8 d4 fc fe ff       	call   c000080c <strcpy>
c0010b38:	83 c4 10             	add    esp,0x10
c0010b3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b3f:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0010b46:	83 ec 0c             	sub    esp,0xc
c0010b49:	6a 01                	push   0x1
c0010b4b:	e8 25 09 00 00       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c0010b50:	83 c4 10             	add    esp,0x10
c0010b53:	89 c2                	mov    edx,eax
c0010b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b59:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010b5c:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0010b62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b66:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010b69:	89 c6                	mov    esi,eax
c0010b6b:	e8 cd ef ff ff       	call   c000fb3d <Phys::allocatePage()>
c0010b70:	6a 05                	push   0x5
c0010b72:	56                   	push   esi
c0010b73:	50                   	push   eax
c0010b74:	53                   	push   ebx
c0010b75:	e8 32 11 00 00       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c0010b7a:	83 c4 10             	add    esp,0x10
c0010b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010b84:	83 ec 04             	sub    esp,0x4
c0010b87:	68 00 0f 00 00       	push   0xf00
c0010b8c:	6a 00                	push   0x0
c0010b8e:	50                   	push   eax
c0010b8f:	e8 bc fb fe ff       	call   c0000750 <memset>
c0010b94:	83 c4 10             	add    esp,0x10
c0010b97:	83 ec 04             	sub    esp,0x4
c0010b9a:	6a 00                	push   0x0
c0010b9c:	6a 07                	push   0x7
c0010b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba2:	e8 a3 f7 ff ff       	call   c001034a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010ba7:	83 c4 10             	add    esp,0x10
c0010baa:	83 ec 08             	sub    esp,0x8
c0010bad:	6a 02                	push   0x2
c0010baf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb3:	e8 c6 fa ff ff       	call   c001067e <VgaText::setCursorHeight(int)>
c0010bb8:	83 c4 10             	add    esp,0x10
c0010bbb:	83 ec 04             	sub    esp,0x4
c0010bbe:	6a 00                	push   0x0
c0010bc0:	6a 00                	push   0x0
c0010bc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc6:	e8 09 f9 ff ff       	call   c00104d4 <VgaText::setCursor(int, int)>
c0010bcb:	83 c4 10             	add    esp,0x10
c0010bce:	83 ec 08             	sub    esp,0x8
c0010bd1:	6a 01                	push   0x1
c0010bd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd7:	e8 9a f6 ff ff       	call   c0010276 <VgaText::showCursor(bool)>
c0010bdc:	83 c4 10             	add    esp,0x10
c0010bdf:	83 ec 08             	sub    esp,0x8
c0010be2:	6a 01                	push   0x1
c0010be4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010be8:	e8 95 f6 ff ff       	call   c0010282 <VgaText::disableBlink(bool)>
c0010bed:	83 c4 10             	add    esp,0x10
c0010bf0:	83 ec 0c             	sub    esp,0xc
c0010bf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bf7:	e8 e8 fc ff ff       	call   c00108e4 <VgaText::clearScreen()>
c0010bfc:	83 c4 10             	add    esp,0x10
c0010bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c03:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0010c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c0b:	05 02 01 00 00       	add    eax,0x102
c0010c10:	83 ec 04             	sub    esp,0x4
c0010c13:	68 96 00 00 00       	push   0x96
c0010c18:	6a 00                	push   0x0
c0010c1a:	50                   	push   eax
c0010c1b:	e8 30 fb fe ff       	call   c0000750 <memset>
c0010c20:	83 c4 10             	add    esp,0x10
c0010c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c27:	05 98 01 00 00       	add    eax,0x198
c0010c2c:	83 ec 04             	sub    esp,0x4
c0010c2f:	68 2c 01 00 00       	push   0x12c
c0010c34:	6a 00                	push   0x0
c0010c36:	50                   	push   eax
c0010c37:	e8 14 fb fe ff       	call   c0000750 <memset>
c0010c3c:	83 c4 10             	add    esp,0x10
c0010c3f:	90                   	nop
c0010c40:	5b                   	pop    ebx
c0010c41:	5e                   	pop    esi
c0010c42:	5f                   	pop    edi
c0010c43:	c3                   	ret    

c0010c44 <VgaText::receiveKey(unsigned char)>:
c0010c44:	55                   	push   ebp
c0010c45:	57                   	push   edi
c0010c46:	56                   	push   esi
c0010c47:	53                   	push   ebx
c0010c48:	83 ec 1c             	sub    esp,0x1c
c0010c4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010c4f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c53:	84 db                	test   bl,bl
c0010c55:	0f 84 c9 00 00 00    	je     c0010d24 <VgaText::receiveKey(unsigned char)+0xe0>
c0010c5b:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c0010c61:	80 fb 08             	cmp    bl,0x8
c0010c64:	75 2c                	jne    c0010c92 <VgaText::receiveKey(unsigned char)+0x4e>
c0010c66:	83 ec 0c             	sub    esp,0xc
c0010c69:	57                   	push   edi
c0010c6a:	e8 fd fa fe ff       	call   c000076c <strlen>
c0010c6f:	83 c4 10             	add    esp,0x10
c0010c72:	85 c0                	test   eax,eax
c0010c74:	74 41                	je     c0010cb7 <VgaText::receiveKey(unsigned char)+0x73>
c0010c76:	50                   	push   eax
c0010c77:	50                   	push   eax
c0010c78:	6a 08                	push   0x8
c0010c7a:	56                   	push   esi
c0010c7b:	e8 be fc ff ff       	call   c001093e <VgaText::putchar(char)>
c0010c80:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010c83:	e8 e4 fa fe ff       	call   c000076c <strlen>
c0010c88:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c0010c90:	eb 22                	jmp    c0010cb4 <VgaText::receiveKey(unsigned char)+0x70>
c0010c92:	0f be c3             	movsx  eax,bl
c0010c95:	52                   	push   edx
c0010c96:	52                   	push   edx
c0010c97:	50                   	push   eax
c0010c98:	56                   	push   esi
c0010c99:	e8 a0 fc ff ff       	call   c001093e <VgaText::putchar(char)>
c0010c9e:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ca2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010ca7:	59                   	pop    ecx
c0010ca8:	5d                   	pop    ebp
c0010ca9:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010cad:	50                   	push   eax
c0010cae:	57                   	push   edi
c0010caf:	e8 98 fc fe ff       	call   c000094c <strcat>
c0010cb4:	83 c4 10             	add    esp,0x10
c0010cb7:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0010cbe:	75 05                	jne    c0010cc5 <VgaText::receiveKey(unsigned char)+0x81>
c0010cc0:	80 fb 0a             	cmp    bl,0xa
c0010cc3:	75 53                	jne    c0010d18 <VgaText::receiveKey(unsigned char)+0xd4>
c0010cc5:	83 ec 0c             	sub    esp,0xc
c0010cc8:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c0010cce:	53                   	push   ebx
c0010ccf:	e8 98 fa fe ff       	call   c000076c <strlen>
c0010cd4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010cd7:	89 c5                	mov    ebp,eax
c0010cd9:	e8 8e fa fe ff       	call   c000076c <strlen>
c0010cde:	83 c4 10             	add    esp,0x10
c0010ce1:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010ce5:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010cea:	76 10                	jbe    c0010cfc <VgaText::receiveKey(unsigned char)+0xb8>
c0010cec:	83 ec 0c             	sub    esp,0xc
c0010cef:	68 73 ac 02 c0       	push   0xc002ac73
c0010cf4:	e8 b8 95 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	50                   	push   eax
c0010cfd:	50                   	push   eax
c0010cfe:	57                   	push   edi
c0010cff:	53                   	push   ebx
c0010d00:	e8 47 fc fe ff       	call   c000094c <strcat>
c0010d05:	83 c4 0c             	add    esp,0xc
c0010d08:	68 96 00 00 00       	push   0x96
c0010d0d:	6a 00                	push   0x0
c0010d0f:	57                   	push   edi
c0010d10:	e8 3b fa fe ff       	call   c0000750 <memset>
c0010d15:	83 c4 10             	add    esp,0x10
c0010d18:	83 ec 0c             	sub    esp,0xc
c0010d1b:	56                   	push   esi
c0010d1c:	e8 3d fa ff ff       	call   c001075e <VgaText::doUpdate()>
c0010d21:	83 c4 10             	add    esp,0x10
c0010d24:	83 c4 1c             	add    esp,0x1c
c0010d27:	5b                   	pop    ebx
c0010d28:	5e                   	pop    esi
c0010d29:	5f                   	pop    edi
c0010d2a:	5d                   	pop    ebp
c0010d2b:	c3                   	ret    

c0010d2c <VgaText::write(unsigned long long, void*, int*)>:
c0010d2c:	55                   	push   ebp
c0010d2d:	57                   	push   edi
c0010d2e:	56                   	push   esi
c0010d2f:	53                   	push   ebx
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d37:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d3b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010d3f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0010d46:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010d49:	39 eb                	cmp    ebx,ebp
c0010d4b:	74 13                	je     c0010d60 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010d4d:	43                   	inc    ebx
c0010d4e:	50                   	push   eax
c0010d4f:	50                   	push   eax
c0010d50:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010d54:	50                   	push   eax
c0010d55:	56                   	push   esi
c0010d56:	e8 e3 fb ff ff       	call   c001093e <VgaText::putchar(char)>
c0010d5b:	83 c4 10             	add    esp,0x10
c0010d5e:	eb e9                	jmp    c0010d49 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010d60:	83 ec 0c             	sub    esp,0xc
c0010d63:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0010d6a:	56                   	push   esi
c0010d6b:	e8 ee f9 ff ff       	call   c001075e <VgaText::doUpdate()>
c0010d70:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010d74:	89 38                	mov    DWORD PTR [eax],edi
c0010d76:	83 c4 1c             	add    esp,0x1c
c0010d79:	31 c0                	xor    eax,eax
c0010d7b:	5b                   	pop    ebx
c0010d7c:	5e                   	pop    esi
c0010d7d:	5f                   	pop    edi
c0010d7e:	5d                   	pop    ebp
c0010d7f:	c3                   	ret    

c0010d80 <newTerminal(char*)>:
c0010d80:	83 ec 28             	sub    esp,0x28
c0010d83:	68 c4 02 00 00       	push   0x2c4
c0010d88:	e8 ff ea ff ff       	call   c000f88c <malloc>
c0010d8d:	5a                   	pop    edx
c0010d8e:	59                   	pop    ecx
c0010d8f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010d93:	50                   	push   eax
c0010d94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010d98:	e8 f9 fc ff ff       	call   c0010a96 <VgaText::VgaText(char const*)>
c0010d9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010da1:	83 c4 2c             	add    esp,0x2c
c0010da4:	c3                   	ret    
c0010da5:	90                   	nop

c0010da6 <TSS::TSS()>:
c0010da6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010daa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010db1:	90                   	nop
c0010db2:	c3                   	ret    
c0010db3:	90                   	nop

c0010db4 <TSS::setESP(unsigned long)>:
c0010db4:	55                   	push   ebp
c0010db5:	89 e5                	mov    ebp,esp
c0010db7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010dbd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010dc0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010dc3:	90                   	nop
c0010dc4:	5d                   	pop    ebp
c0010dc5:	c3                   	ret    

c0010dc6 <TSS::flush()>:
c0010dc6:	55                   	push   ebp
c0010dc7:	89 e5                	mov    ebp,esp
c0010dc9:	83 ec 10             	sub    esp,0x10
c0010dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0010dd1:	83 c8 03             	or     eax,0x3
c0010dd4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010dd8:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010ddc:	66 89 d0             	mov    ax,dx
c0010ddf:	0f 00 d8             	ltr    ax
c0010de2:	90                   	nop
c0010de3:	c9                   	leave  
c0010de4:	c3                   	ret    
c0010de5:	90                   	nop

c0010de6 <TSS::setup(unsigned long, unsigned long)>:
c0010de6:	55                   	push   ebp
c0010de7:	89 e5                	mov    ebp,esp
c0010de9:	83 ec 18             	sub    esp,0x18
c0010dec:	83 ec 0c             	sub    esp,0xc
c0010def:	6a 68                	push   0x68
c0010df1:	e8 96 ea ff ff       	call   c000f88c <malloc>
c0010df6:	83 c4 10             	add    esp,0x10
c0010df9:	89 c2                	mov    edx,eax
c0010dfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010dfe:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e07:	83 ec 04             	sub    esp,0x4
c0010e0a:	6a 68                	push   0x68
c0010e0c:	6a 00                	push   0x0
c0010e0e:	50                   	push   eax
c0010e0f:	e8 3c f9 fe ff       	call   c0000750 <memset>
c0010e14:	83 c4 10             	add    esp,0x10
c0010e17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e1d:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e29:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e35:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e38:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e41:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010e47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e4d:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010e53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e59:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e65:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0010e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e71:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0010e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7d:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010e83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e89:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010e8c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e95:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e98:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea1:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eae:	0f 20 da             	mov    edx,cr3
c0010eb1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0010eb4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0010eb7:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ebd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec0:	83 ec 08             	sub    esp,0x8
c0010ec3:	50                   	push   eax
c0010ec4:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010ec7:	50                   	push   eax
c0010ec8:	e8 9b e1 ff ff       	call   c000f068 <GDTEntry::setBase(unsigned int)>
c0010ecd:	83 c4 10             	add    esp,0x10
c0010ed0:	83 ec 08             	sub    esp,0x8
c0010ed3:	6a 68                	push   0x68
c0010ed5:	8d 45 ec             	lea    eax,[ebp-0x14]
c0010ed8:	50                   	push   eax
c0010ed9:	e8 a6 e1 ff ff       	call   c000f084 <GDTEntry::setLimit(unsigned int)>
c0010ede:	83 c4 10             	add    esp,0x10
c0010ee1:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0010ee5:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ee8:	83 e0 0f             	and    eax,0xf
c0010eeb:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010eee:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0010ef1:	83 c8 40             	or     eax,0x40
c0010ef4:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0010ef7:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0010efc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f02:	05 78 01 00 00       	add    eax,0x178
c0010f07:	83 ec 04             	sub    esp,0x4
c0010f0a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f0d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0010f10:	50                   	push   eax
c0010f11:	e8 a2 e1 ff ff       	call   c000f0b8 <GDT::addEntry(GDTEntry)>
c0010f16:	83 c4 10             	add    esp,0x10
c0010f19:	89 c2                	mov    edx,eax
c0010f1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f1e:	89 10                	mov    DWORD PTR [eax],edx
c0010f20:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0010f25:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010f2b:	05 78 01 00 00       	add    eax,0x178
c0010f30:	83 ec 0c             	sub    esp,0xc
c0010f33:	50                   	push   eax
c0010f34:	e8 c3 e1 ff ff       	call   c000f0fc <GDT::flush()>
c0010f39:	83 c4 10             	add    esp,0x10
c0010f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f41:	83 ec 08             	sub    esp,0x8
c0010f44:	50                   	push   eax
c0010f45:	68 dc ac 02 c0       	push   0xc002acdc
c0010f4a:	e8 2c 19 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0010f4f:	83 c4 10             	add    esp,0x10
c0010f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f55:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f57:	c9                   	leave  
c0010f58:	c3                   	ret    
c0010f59:	90                   	nop

c0010f5a <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010f5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010f62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f65:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010f6a:	75 08                	jne    c0010f74 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0010f6c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010f72:	eb 38                	jmp    c0010fac <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0010f74:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010f79:	75 17                	jne    c0010f92 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0010f7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010f83:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010f89:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f8b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010f8f:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0010f92:	89 c1                	mov    ecx,eax
c0010f94:	83 e1 fd             	and    ecx,0xfffffffd
c0010f97:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0010f9d:	74 cd                	je     c0010f6c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010f9f:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0010fa4:	83 e0 ef             	and    eax,0xffffffef
c0010fa7:	83 f8 08             	cmp    eax,0x8
c0010faa:	76 c0                	jbe    c0010f6c <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0010fac:	31 c0                	xor    eax,eax
c0010fae:	c3                   	ret    
c0010faf:	90                   	nop

c0010fb0 <ReservedFilename::isAtty()>:
c0010fb0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fb4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010fb7:	31 c0                	xor    eax,eax
c0010fb9:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0010fbf:	74 09                	je     c0010fca <ReservedFilename::isAtty()+0x1a>
c0010fc1:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0010fc7:	0f 94 c0             	sete   al
c0010fca:	c3                   	ret    
c0010fcb:	90                   	nop

c0010fcc <ReservedFilename::write(unsigned long long, void*, int*)>:
c0010fcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fd7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010fdb:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0010fe0:	75 08                	jne    c0010fea <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0010fe2:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0010fe8:	eb 3d                	jmp    c0011027 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0010fea:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010fef:	75 17                	jne    c0011008 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0010ff1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ff6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010ff9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010fff:	8b 10                	mov    edx,DWORD PTR [eax]
c0011001:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011005:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011008:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001100d:	75 04                	jne    c0011013 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001100f:	89 0a                	mov    DWORD PTR [edx],ecx
c0011011:	eb 14                	jmp    c0011027 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011013:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011018:	74 c8                	je     c0010fe2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c001101a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001101f:	83 e0 ef             	and    eax,0xffffffef
c0011022:	83 f8 08             	cmp    eax,0x8
c0011025:	76 bb                	jbe    c0010fe2 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011027:	31 c0                	xor    eax,eax
c0011029:	c3                   	ret    

c001102a <UnixFile::getFileDescriptor()>:
c001102a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001102e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011031:	c3                   	ret    

c0011032 <UnixFile::UnixFile(int)>:
c0011032:	53                   	push   ebx
c0011033:	83 ec 28             	sub    esp,0x28
c0011036:	ba c8 ad 02 c0       	mov    edx,0xc002adc8
c001103b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001103f:	89 10                	mov    DWORD PTR [eax],edx
c0011041:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011049:	0f 8f 8c 01 00 00    	jg     c00111db <UnixFile::UnixFile(int)+0x1a9>
c001104f:	a1 e0 dd 02 c0       	mov    eax,ds:0xc002dde0
c0011054:	8d 50 01             	lea    edx,[eax+0x1]
c0011057:	89 15 e0 dd 02 c0    	mov    DWORD PTR ds:0xc002dde0,edx
c001105d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011061:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011064:	83 ec 08             	sub    esp,0x8
c0011067:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001106b:	68 98 ef 02 c0       	push   0xc002ef98
c0011070:	e8 b7 7e 01 00       	call   c0028f2c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011075:	83 c4 10             	add    esp,0x10
c0011078:	a0 94 ef 02 c0       	mov    al,ds:0xc002ef94
c001107d:	83 f0 01             	xor    eax,0x1
c0011080:	84 c0                	test   al,al
c0011082:	0f 84 54 01 00 00    	je     c00111dc <UnixFile::UnixFile(int)+0x1aa>
c0011088:	c6 05 94 ef 02 c0 01 	mov    BYTE PTR ds:0xc002ef94,0x1
c001108f:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011097:	83 ec 0c             	sub    esp,0xc
c001109a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001109e:	e8 e9 e7 ff ff       	call   c000f88c <malloc>
c00110a3:	83 c4 10             	add    esp,0x10
c00110a6:	89 c3                	mov    ebx,eax
c00110a8:	83 ec 08             	sub    esp,0x8
c00110ab:	68 03 ff ff 0f       	push   0xfffff03
c00110b0:	53                   	push   ebx
c00110b1:	e8 2c 01 00 00       	call   c00111e2 <ReservedFilename::ReservedFilename(int)>
c00110b6:	83 c4 10             	add    esp,0x10
c00110b9:	89 1d 8c ef 02 c0    	mov    DWORD PTR ds:0xc002ef8c,ebx
c00110bf:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00110c7:	83 ec 0c             	sub    esp,0xc
c00110ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110ce:	e8 b9 e7 ff ff       	call   c000f88c <malloc>
c00110d3:	83 c4 10             	add    esp,0x10
c00110d6:	89 c3                	mov    ebx,eax
c00110d8:	83 ec 08             	sub    esp,0x8
c00110db:	68 01 ff ff 0f       	push   0xfffff01
c00110e0:	53                   	push   ebx
c00110e1:	e8 fc 00 00 00       	call   c00111e2 <ReservedFilename::ReservedFilename(int)>
c00110e6:	83 c4 10             	add    esp,0x10
c00110e9:	89 1d 90 ef 02 c0    	mov    DWORD PTR ds:0xc002ef90,ebx
c00110ef:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00110f7:	83 ec 0c             	sub    esp,0xc
c00110fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00110fe:	e8 89 e7 ff ff       	call   c000f88c <malloc>
c0011103:	83 c4 10             	add    esp,0x10
c0011106:	89 c3                	mov    ebx,eax
c0011108:	83 ec 08             	sub    esp,0x8
c001110b:	68 00 ff ff 0f       	push   0xfffff00
c0011110:	53                   	push   ebx
c0011111:	e8 cc 00 00 00       	call   c00111e2 <ReservedFilename::ReservedFilename(int)>
c0011116:	83 c4 10             	add    esp,0x10
c0011119:	89 1d 84 ef 02 c0    	mov    DWORD PTR ds:0xc002ef84,ebx
c001111f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011127:	83 ec 0c             	sub    esp,0xc
c001112a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001112e:	e8 59 e7 ff ff       	call   c000f88c <malloc>
c0011133:	83 c4 10             	add    esp,0x10
c0011136:	89 c3                	mov    ebx,eax
c0011138:	83 ec 08             	sub    esp,0x8
c001113b:	68 02 ff ff 0f       	push   0xfffff02
c0011140:	53                   	push   ebx
c0011141:	e8 9c 00 00 00       	call   c00111e2 <ReservedFilename::ReservedFilename(int)>
c0011146:	83 c4 10             	add    esp,0x10
c0011149:	89 1d 88 ef 02 c0    	mov    DWORD PTR ds:0xc002ef88,ebx
c001114f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011157:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c001115c:	7f 7e                	jg     c00111dc <UnixFile::UnixFile(int)+0x1aa>
c001115e:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011166:	83 ec 0c             	sub    esp,0xc
c0011169:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001116d:	e8 1a e7 ff ff       	call   c000f88c <malloc>
c0011172:	83 c4 10             	add    esp,0x10
c0011175:	89 c3                	mov    ebx,eax
c0011177:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001117b:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011180:	83 ec 08             	sub    esp,0x8
c0011183:	50                   	push   eax
c0011184:	53                   	push   ebx
c0011185:	e8 58 00 00 00       	call   c00111e2 <ReservedFilename::ReservedFilename(int)>
c001118a:	83 c4 10             	add    esp,0x10
c001118d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011191:	89 1c 85 60 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10a0],ebx
c0011198:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00111a0:	83 ec 0c             	sub    esp,0xc
c00111a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00111a7:	e8 e0 e6 ff ff       	call   c000f88c <malloc>
c00111ac:	83 c4 10             	add    esp,0x10
c00111af:	89 c3                	mov    ebx,eax
c00111b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111b5:	05 20 ff ff 0f       	add    eax,0xfffff20
c00111ba:	83 ec 08             	sub    esp,0x8
c00111bd:	50                   	push   eax
c00111be:	53                   	push   ebx
c00111bf:	e8 1e 00 00 00       	call   c00111e2 <ReservedFilename::ReservedFilename(int)>
c00111c4:	83 c4 10             	add    esp,0x10
c00111c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111cb:	89 1c 85 20 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10e0],ebx
c00111d2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00111d6:	e9 7c ff ff ff       	jmp    c0011157 <UnixFile::UnixFile(int)+0x125>
c00111db:	90                   	nop
c00111dc:	83 c4 28             	add    esp,0x28
c00111df:	5b                   	pop    ebx
c00111e0:	c3                   	ret    
c00111e1:	90                   	nop

c00111e2 <ReservedFilename::ReservedFilename(int)>:
c00111e2:	83 ec 0c             	sub    esp,0xc
c00111e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e9:	83 ec 08             	sub    esp,0x8
c00111ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111f0:	50                   	push   eax
c00111f1:	e8 3c fe ff ff       	call   c0011032 <UnixFile::UnixFile(int)>
c00111f6:	83 c4 10             	add    esp,0x10
c00111f9:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c00111fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011202:	89 10                	mov    DWORD PTR [eax],edx
c0011204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011208:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001120c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001120f:	90                   	nop
c0011210:	83 c4 0c             	add    esp,0xc
c0011213:	c3                   	ret    

c0011214 <UnixFile::~UnixFile()>:
c0011214:	83 ec 1c             	sub    esp,0x1c
c0011217:	ba c8 ad 02 c0       	mov    edx,0xc002adc8
c001121c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011220:	89 10                	mov    DWORD PTR [eax],edx
c0011222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011226:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011229:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001122e:	7f 73                	jg     c00112a3 <UnixFile::~UnixFile()+0x8f>
c0011230:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011238:	83 ec 0c             	sub    esp,0xc
c001123b:	68 98 ef 02 c0       	push   0xc002ef98
c0011240:	e8 bb 7d 01 00       	call   c0029000 <LinkedList<UnixFile>::getFirstElement()>
c0011245:	83 c4 10             	add    esp,0x10
c0011248:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001124c:	83 ec 0c             	sub    esp,0xc
c001124f:	68 98 ef 02 c0       	push   0xc002ef98
c0011254:	e8 af 7d 01 00       	call   c0029008 <LinkedList<UnixFile>::removeFirst()>
c0011259:	83 c4 10             	add    esp,0x10
c001125c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011260:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011264:	74 40                	je     c00112a6 <UnixFile::~UnixFile()+0x92>
c0011266:	83 ec 08             	sub    esp,0x8
c0011269:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001126d:	68 98 ef 02 c0       	push   0xc002ef98
c0011272:	e8 b5 7c 01 00       	call   c0028f2c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011277:	83 c4 10             	add    esp,0x10
c001127a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001127e:	8d 50 01             	lea    edx,[eax+0x1]
c0011281:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011285:	3d 88 13 00 00       	cmp    eax,0x1388
c001128a:	0f 94 c0             	sete   al
c001128d:	84 c0                	test   al,al
c001128f:	74 a7                	je     c0011238 <UnixFile::~UnixFile()+0x24>
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	68 a0 ad 02 c0       	push   0xc002ada0
c0011299:	e8 13 90 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c001129e:	83 c4 10             	add    esp,0x10
c00112a1:	eb 95                	jmp    c0011238 <UnixFile::~UnixFile()+0x24>
c00112a3:	90                   	nop
c00112a4:	eb 01                	jmp    c00112a7 <UnixFile::~UnixFile()+0x93>
c00112a6:	90                   	nop
c00112a7:	90                   	nop
c00112a8:	83 c4 1c             	add    esp,0x1c
c00112ab:	c3                   	ret    

c00112ac <UnixFile::~UnixFile()>:
c00112ac:	83 ec 0c             	sub    esp,0xc
c00112af:	83 ec 0c             	sub    esp,0xc
c00112b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112b6:	e8 59 ff ff ff       	call   c0011214 <UnixFile::~UnixFile()>
c00112bb:	83 c4 10             	add    esp,0x10
c00112be:	83 ec 08             	sub    esp,0x8
c00112c1:	6a 0c                	push   0xc
c00112c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112c7:	e8 cf 14 00 00       	call   c001279b <operator delete(void*, unsigned long)>
c00112cc:	83 c4 10             	add    esp,0x10
c00112cf:	83 c4 0c             	add    esp,0xc
c00112d2:	c3                   	ret    
c00112d3:	90                   	nop

c00112d4 <ReservedFilename::~ReservedFilename()>:
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c00112dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e0:	89 10                	mov    DWORD PTR [eax],edx
c00112e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e6:	83 ec 0c             	sub    esp,0xc
c00112e9:	50                   	push   eax
c00112ea:	e8 25 ff ff ff       	call   c0011214 <UnixFile::~UnixFile()>
c00112ef:	83 c4 10             	add    esp,0x10
c00112f2:	90                   	nop
c00112f3:	83 c4 0c             	add    esp,0xc
c00112f6:	c3                   	ret    
c00112f7:	90                   	nop

c00112f8 <ReservedFilename::~ReservedFilename()>:
c00112f8:	83 ec 0c             	sub    esp,0xc
c00112fb:	83 ec 0c             	sub    esp,0xc
c00112fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011302:	e8 cd ff ff ff       	call   c00112d4 <ReservedFilename::~ReservedFilename()>
c0011307:	83 c4 10             	add    esp,0x10
c001130a:	83 ec 08             	sub    esp,0x8
c001130d:	6a 0c                	push   0xc
c001130f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011313:	e8 83 14 00 00       	call   c001279b <operator delete(void*, unsigned long)>
c0011318:	83 c4 10             	add    esp,0x10
c001131b:	83 c4 0c             	add    esp,0xc
c001131e:	c3                   	ret    

c001131f <getFromFileDescriptor(int)>:
c001131f:	53                   	push   ebx
c0011320:	83 ec 08             	sub    esp,0x8
c0011323:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011327:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c001132d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011333:	7f 2c                	jg     c0011361 <getFromFileDescriptor(int)+0x42>
c0011335:	83 ec 0c             	sub    esp,0xc
c0011338:	68 98 ef 02 c0       	push   0xc002ef98
c001133d:	e8 be 7c 01 00       	call   c0029000 <LinkedList<UnixFile>::getFirstElement()>
c0011342:	83 c4 10             	add    esp,0x10
c0011345:	85 c0                	test   eax,eax
c0011347:	75 04                	jne    c001134d <getFromFileDescriptor(int)+0x2e>
c0011349:	31 c0                	xor    eax,eax
c001134b:	eb 6e                	jmp    c00113bb <getFromFileDescriptor(int)+0x9c>
c001134d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011350:	74 69                	je     c00113bb <getFromFileDescriptor(int)+0x9c>
c0011352:	52                   	push   edx
c0011353:	52                   	push   edx
c0011354:	50                   	push   eax
c0011355:	68 98 ef 02 c0       	push   0xc002ef98
c001135a:	e8 4b 7d 01 00       	call   c00290aa <LinkedList<UnixFile>::getNext(UnixFile*)>
c001135f:	eb e1                	jmp    c0011342 <getFromFileDescriptor(int)+0x23>
c0011361:	a1 8c ef 02 c0       	mov    eax,ds:0xc002ef8c
c0011366:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001136c:	74 4d                	je     c00113bb <getFromFileDescriptor(int)+0x9c>
c001136e:	a1 90 ef 02 c0       	mov    eax,ds:0xc002ef90
c0011373:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011379:	74 40                	je     c00113bb <getFromFileDescriptor(int)+0x9c>
c001137b:	a1 88 ef 02 c0       	mov    eax,ds:0xc002ef88
c0011380:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011386:	74 33                	je     c00113bb <getFromFileDescriptor(int)+0x9c>
c0011388:	a1 84 ef 02 c0       	mov    eax,ds:0xc002ef84
c001138d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011393:	74 26                	je     c00113bb <getFromFileDescriptor(int)+0x9c>
c0011395:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001139b:	83 f8 08             	cmp    eax,0x8
c001139e:	77 09                	ja     c00113a9 <getFromFileDescriptor(int)+0x8a>
c00113a0:	8b 04 85 60 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd10a0]
c00113a7:	eb 12                	jmp    c00113bb <getFromFileDescriptor(int)+0x9c>
c00113a9:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00113af:	83 fb 08             	cmp    ebx,0x8
c00113b2:	77 95                	ja     c0011349 <getFromFileDescriptor(int)+0x2a>
c00113b4:	8b 04 9d 20 ef 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd10e0]
c00113bb:	83 c4 08             	add    esp,0x8
c00113be:	5b                   	pop    ebx
c00113bf:	c3                   	ret    

c00113c0 <__static_initialization_and_destruction_0(int, int)>:
c00113c0:	83 ec 0c             	sub    esp,0xc
c00113c3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00113c8:	75 34                	jne    c00113fe <__static_initialization_and_destruction_0(int, int)+0x3e>
c00113ca:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00113d2:	75 2a                	jne    c00113fe <__static_initialization_and_destruction_0(int, int)+0x3e>
c00113d4:	83 ec 0c             	sub    esp,0xc
c00113d7:	68 98 ef 02 c0       	push   0xc002ef98
c00113dc:	e8 f3 7a 01 00       	call   c0028ed4 <LinkedList<UnixFile>::LinkedList()>
c00113e1:	83 c4 10             	add    esp,0x10
c00113e4:	83 ec 04             	sub    esp,0x4
c00113e7:	68 5c dd 02 c0       	push   0xc002dd5c
c00113ec:	68 98 ef 02 c0       	push   0xc002ef98
c00113f1:	68 d2 8e 02 c0       	push   0xc0028ed2
c00113f6:	e8 1a 13 00 00       	call   c0012715 <__cxa_atexit>
c00113fb:	83 c4 10             	add    esp,0x10
c00113fe:	90                   	nop
c00113ff:	83 c4 0c             	add    esp,0xc
c0011402:	c3                   	ret    

c0011403 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011403:	83 ec 0c             	sub    esp,0xc
c0011406:	83 ec 08             	sub    esp,0x8
c0011409:	68 ff ff 00 00       	push   0xffff
c001140e:	6a 01                	push   0x1
c0011410:	e8 ab ff ff ff       	call   c00113c0 <__static_initialization_and_destruction_0(int, int)>
c0011415:	83 c4 10             	add    esp,0x10
c0011418:	83 c4 0c             	add    esp,0xc
c001141b:	c3                   	ret    

c001141c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c001141c:	53                   	push   ebx
c001141d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011421:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011425:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c001142b:	89 c8                	mov    eax,ecx
c001142d:	d1 e8                	shr    eax,1
c001142f:	03 05 e8 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dde8
c0011435:	83 e1 01             	and    ecx,0x1
c0011438:	8a 10                	mov    dl,BYTE PTR [eax]
c001143a:	75 09                	jne    c0011445 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c001143c:	83 e2 f0             	and    edx,0xfffffff0
c001143f:	09 da                	or     edx,ebx
c0011441:	88 10                	mov    BYTE PTR [eax],dl
c0011443:	5b                   	pop    ebx
c0011444:	c3                   	ret    
c0011445:	c1 e3 04             	shl    ebx,0x4
c0011448:	83 e2 0f             	and    edx,0xf
c001144b:	09 da                	or     edx,ebx
c001144d:	88 10                	mov    BYTE PTR [eax],dl
c001144f:	5b                   	pop    ebx
c0011450:	c3                   	ret    

c0011451 <Virt::getPageState(unsigned long)>:
c0011451:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011455:	8b 0d e8 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dde8
c001145b:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011461:	89 d0                	mov    eax,edx
c0011463:	d1 e8                	shr    eax,1
c0011465:	83 e2 01             	and    edx,0x1
c0011468:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001146b:	75 04                	jne    c0011471 <Virt::getPageState(unsigned long)+0x20>
c001146d:	83 e0 0f             	and    eax,0xf
c0011470:	c3                   	ret    
c0011471:	c0 e8 04             	shr    al,0x4
c0011474:	c3                   	ret    

c0011475 <Virt::allocateKernelVirtualPages(int)>:
c0011475:	55                   	push   ebp
c0011476:	31 ed                	xor    ebp,ebp
c0011478:	57                   	push   edi
c0011479:	56                   	push   esi
c001147a:	53                   	push   ebx
c001147b:	31 db                	xor    ebx,ebx
c001147d:	83 ec 1c             	sub    esp,0x1c
c0011480:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011484:	8b 3d e4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dde4
c001148a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001148f:	57                   	push   edi
c0011490:	e8 bc ff ff ff       	call   c0011451 <Virt::getPageState(unsigned long)>
c0011495:	5a                   	pop    edx
c0011496:	84 c0                	test   al,al
c0011498:	75 3a                	jne    c00114d4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c001149a:	85 db                	test   ebx,ebx
c001149c:	75 02                	jne    c00114a0 <Virt::allocateKernelVirtualPages(int)+0x2b>
c001149e:	89 fd                	mov    ebp,edi
c00114a0:	43                   	inc    ebx
c00114a1:	39 f3                	cmp    ebx,esi
c00114a3:	74 5a                	je     c00114ff <Virt::allocateKernelVirtualPages(int)+0x8a>
c00114a5:	47                   	inc    edi
c00114a6:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00114ac:	76 31                	jbe    c00114df <Virt::allocateKernelVirtualPages(int)+0x6a>
c00114ae:	c7 05 e4 dd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002dde4,0xc8000
c00114b8:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00114bd:	75 28                	jne    c00114e7 <Virt::allocateKernelVirtualPages(int)+0x72>
c00114bf:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00114c4:	bf 00 80 0c 00       	mov    edi,0xc8000
c00114c9:	57                   	push   edi
c00114ca:	e8 82 ff ff ff       	call   c0011451 <Virt::getPageState(unsigned long)>
c00114cf:	5a                   	pop    edx
c00114d0:	84 c0                	test   al,al
c00114d2:	74 c6                	je     c001149a <Virt::allocateKernelVirtualPages(int)+0x25>
c00114d4:	31 db                	xor    ebx,ebx
c00114d6:	47                   	inc    edi
c00114d7:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00114dd:	77 cf                	ja     c00114ae <Virt::allocateKernelVirtualPages(int)+0x39>
c00114df:	89 3d e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,edi
c00114e5:	eb a8                	jmp    c001148f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00114e7:	83 ec 0c             	sub    esp,0xc
c00114ea:	68 f8 ad 02 c0       	push   0xc002adf8
c00114ef:	e8 bd 8d 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c00114f4:	8b 3d e4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dde4
c00114fa:	83 c4 10             	add    esp,0x10
c00114fd:	eb 90                	jmp    c001148f <Virt::allocateKernelVirtualPages(int)+0x1a>
c00114ff:	89 2d e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,ebp
c0011505:	4b                   	dec    ebx
c0011506:	74 5f                	je     c0011567 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011508:	85 f6                	test   esi,esi
c001150a:	74 3d                	je     c0011549 <Virt::allocateKernelVirtualPages(int)+0xd4>
c001150c:	89 e8                	mov    eax,ebp
c001150e:	31 db                	xor    ebx,ebx
c0011510:	8d 7e ff             	lea    edi,[esi-0x1]
c0011513:	eb 14                	jmp    c0011529 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011515:	6a 01                	push   0x1
c0011517:	43                   	inc    ebx
c0011518:	50                   	push   eax
c0011519:	e8 fe fe ff ff       	call   c001141c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001151e:	58                   	pop    eax
c001151f:	39 f3                	cmp    ebx,esi
c0011521:	5a                   	pop    edx
c0011522:	74 25                	je     c0011549 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011524:	a1 e4 dd 02 c0       	mov    eax,ds:0xc002dde4
c0011529:	8d 50 01             	lea    edx,[eax+0x1]
c001152c:	85 db                	test   ebx,ebx
c001152e:	89 15 e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,edx
c0011534:	74 20                	je     c0011556 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011536:	39 df                	cmp    edi,ebx
c0011538:	75 db                	jne    c0011515 <Virt::allocateKernelVirtualPages(int)+0xa0>
c001153a:	6a 03                	push   0x3
c001153c:	43                   	inc    ebx
c001153d:	50                   	push   eax
c001153e:	e8 d9 fe ff ff       	call   c001141c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011543:	59                   	pop    ecx
c0011544:	39 f3                	cmp    ebx,esi
c0011546:	58                   	pop    eax
c0011547:	75 db                	jne    c0011524 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011549:	83 c4 1c             	add    esp,0x1c
c001154c:	89 e8                	mov    eax,ebp
c001154e:	5b                   	pop    ebx
c001154f:	c1 e0 0c             	shl    eax,0xc
c0011552:	5e                   	pop    esi
c0011553:	5f                   	pop    edi
c0011554:	5d                   	pop    ebp
c0011555:	c3                   	ret    
c0011556:	6a 02                	push   0x2
c0011558:	bb 01 00 00 00       	mov    ebx,0x1
c001155d:	50                   	push   eax
c001155e:	e8 b9 fe ff ff       	call   c001141c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011563:	58                   	pop    eax
c0011564:	5a                   	pop    edx
c0011565:	eb bd                	jmp    c0011524 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011567:	6a 04                	push   0x4
c0011569:	8d 45 01             	lea    eax,[ebp+0x1]
c001156c:	55                   	push   ebp
c001156d:	a3 e4 dd 02 c0       	mov    ds:0xc002dde4,eax
c0011572:	e8 a5 fe ff ff       	call   c001141c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011577:	59                   	pop    ecx
c0011578:	89 e8                	mov    eax,ebp
c001157a:	5b                   	pop    ebx
c001157b:	c1 e0 0c             	shl    eax,0xc
c001157e:	83 c4 1c             	add    esp,0x1c
c0011581:	5b                   	pop    ebx
c0011582:	5e                   	pop    esi
c0011583:	5f                   	pop    edi
c0011584:	5d                   	pop    ebp
c0011585:	c3                   	ret    

c0011586 <Virt::freeSwapfilePage(unsigned long)>:
c0011586:	53                   	push   ebx
c0011587:	8b 15 ac ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efac
c001158d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011591:	b8 01 00 00 00       	mov    eax,0x1
c0011596:	89 cb                	mov    ebx,ecx
c0011598:	d3 e0                	shl    eax,cl
c001159a:	c1 eb 05             	shr    ebx,0x5
c001159d:	f7 d0                	not    eax
c001159f:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00115a2:	5b                   	pop    ebx
c00115a3:	c3                   	ret    

c00115a4 <Virt::swapIDToSector(unsigned long)>:
c00115a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115a8:	0f af 05 ec dd 02 c0 	imul   eax,DWORD PTR ds:0xc002ddec
c00115af:	03 05 f4 dd 02 c0    	add    eax,DWORD PTR ds:0xc002ddf4
c00115b5:	c3                   	ret    

c00115b6 <Virt::allocateSwapfilePage()>:
c00115b6:	55                   	push   ebp
c00115b7:	31 d2                	xor    edx,edx
c00115b9:	57                   	push   edi
c00115ba:	56                   	push   esi
c00115bb:	53                   	push   ebx
c00115bc:	83 ec 0c             	sub    esp,0xc
c00115bf:	8b 0d ec dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddec
c00115c5:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c00115ca:	f7 f1                	div    ecx
c00115cc:	39 0d f0 dd 02 c0    	cmp    DWORD PTR ds:0xc002ddf0,ecx
c00115d2:	72 2d                	jb     c0011601 <Virt::allocateSwapfilePage()+0x4b>
c00115d4:	8b 35 ac ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efac
c00115da:	8b 16                	mov    edx,DWORD PTR [esi]
c00115dc:	f6 c2 01             	test   dl,0x1
c00115df:	74 3c                	je     c001161d <Virt::allocateSwapfilePage()+0x67>
c00115e1:	31 c9                	xor    ecx,ecx
c00115e3:	bf 01 00 00 00       	mov    edi,0x1
c00115e8:	eb 12                	jmp    c00115fc <Virt::allocateSwapfilePage()+0x46>
c00115ea:	89 fd                	mov    ebp,edi
c00115ec:	89 ca                	mov    edx,ecx
c00115ee:	d3 e5                	shl    ebp,cl
c00115f0:	c1 ea 05             	shr    edx,0x5
c00115f3:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00115f6:	8b 13                	mov    edx,DWORD PTR [ebx]
c00115f8:	85 ea                	test   edx,ebp
c00115fa:	74 2a                	je     c0011626 <Virt::allocateSwapfilePage()+0x70>
c00115fc:	41                   	inc    ecx
c00115fd:	39 c8                	cmp    eax,ecx
c00115ff:	77 e9                	ja     c00115ea <Virt::allocateSwapfilePage()+0x34>
c0011601:	83 ec 0c             	sub    esp,0xc
c0011604:	68 7f af 02 c0       	push   0xc002af7f
c0011609:	e8 a3 8c 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c001160e:	83 c4 10             	add    esp,0x10
c0011611:	31 c9                	xor    ecx,ecx
c0011613:	83 c4 0c             	add    esp,0xc
c0011616:	89 c8                	mov    eax,ecx
c0011618:	5b                   	pop    ebx
c0011619:	5e                   	pop    esi
c001161a:	5f                   	pop    edi
c001161b:	5d                   	pop    ebp
c001161c:	c3                   	ret    
c001161d:	89 f3                	mov    ebx,esi
c001161f:	bd 01 00 00 00       	mov    ebp,0x1
c0011624:	31 c9                	xor    ecx,ecx
c0011626:	09 ea                	or     edx,ebp
c0011628:	89 c8                	mov    eax,ecx
c001162a:	89 13                	mov    DWORD PTR [ebx],edx
c001162c:	83 c4 0c             	add    esp,0xc
c001162f:	5b                   	pop    ebx
c0011630:	5e                   	pop    esi
c0011631:	5f                   	pop    edi
c0011632:	5d                   	pop    ebp
c0011633:	c3                   	ret    

c0011634 <Virt::virtualMemorySetup()>:
c0011634:	53                   	push   ebx
c0011635:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001163a:	83 ec 08             	sub    esp,0x8
c001163d:	6a 0f                	push   0xf
c001163f:	53                   	push   ebx
c0011640:	43                   	inc    ebx
c0011641:	e8 d6 fd ff ff       	call   c001141c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011646:	59                   	pop    ecx
c0011647:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001164d:	58                   	pop    eax
c001164e:	75 ed                	jne    c001163d <Virt::virtualMemorySetup()+0x9>
c0011650:	83 ec 08             	sub    esp,0x8
c0011653:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011658:	68 00 00 00 c8       	push   0xc8000000
c001165d:	68 96 af 02 c0       	push   0xc002af96
c0011662:	e8 14 12 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0011667:	58                   	pop    eax
c0011668:	5a                   	pop    edx
c0011669:	68 00 f0 ff ef       	push   0xeffff000
c001166e:	68 aa af 02 c0       	push   0xc002afaa
c0011673:	e8 03 12 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0011678:	83 c4 10             	add    esp,0x10
c001167b:	83 ec 08             	sub    esp,0x8
c001167e:	6a 00                	push   0x0
c0011680:	53                   	push   ebx
c0011681:	43                   	inc    ebx
c0011682:	e8 95 fd ff ff       	call   c001141c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011687:	83 c4 10             	add    esp,0x10
c001168a:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011690:	75 e9                	jne    c001167b <Virt::virtualMemorySetup()+0x47>
c0011692:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011697:	83 ec 08             	sub    esp,0x8
c001169a:	6a 0f                	push   0xf
c001169c:	53                   	push   ebx
c001169d:	43                   	inc    ebx
c001169e:	e8 79 fd ff ff       	call   c001141c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00116a3:	83 c4 10             	add    esp,0x10
c00116a6:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00116ac:	75 e9                	jne    c0011697 <Virt::virtualMemorySetup()+0x63>
c00116ae:	83 c4 08             	add    esp,0x8
c00116b1:	5b                   	pop    ebx
c00116b2:	c3                   	ret    

c00116b3 <Virt::setupPageSwapping(int)>:
c00116b3:	57                   	push   edi
c00116b4:	56                   	push   esi
c00116b5:	53                   	push   ebx
c00116b6:	83 ec 1c             	sub    esp,0x1c
c00116b9:	68 be af 02 c0       	push   0xc002afbe
c00116be:	e8 b8 11 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00116c3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00116ca:	e8 bd e1 ff ff       	call   c000f88c <malloc>
c00116cf:	83 c4 0c             	add    esp,0xc
c00116d2:	89 c6                	mov    esi,eax
c00116d4:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c00116da:	68 d2 af 02 c0       	push   0xc002afd2
c00116df:	50                   	push   eax
c00116e0:	e8 f5 16 00 00       	call   c0012dda <File::File(char const*, Process*)>
c00116e5:	89 34 24             	mov    DWORD PTR [esp],esi
c00116e8:	e8 c9 18 00 00       	call   c0012fb6 <File::unlink()>
c00116ed:	59                   	pop    ecx
c00116ee:	5b                   	pop    ebx
c00116ef:	6a 12                	push   0x12
c00116f1:	56                   	push   esi
c00116f2:	e8 47 17 00 00       	call   c0012e3e <File::open(FileOpenMode)>
c00116f7:	83 c4 10             	add    esp,0x10
c00116fa:	85 c0                	test   eax,eax
c00116fc:	0f 85 5b 01 00 00    	jne    c001185d <Virt::setupPageSwapping(int)+0x1aa>
c0011702:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011706:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001170e:	c1 e3 08             	shl    ebx,0x8
c0011711:	83 ec 0c             	sub    esp,0xc
c0011714:	68 00 00 01 00       	push   0x10000
c0011719:	e8 6e e1 ff ff       	call   c000f88c <malloc>
c001171e:	83 c4 0c             	add    esp,0xc
c0011721:	89 c7                	mov    edi,eax
c0011723:	68 00 00 01 00       	push   0x10000
c0011728:	68 ee 00 00 00       	push   0xee
c001172d:	50                   	push   eax
c001172e:	e8 1d f0 fe ff       	call   c0000750 <memset>
c0011733:	83 c4 10             	add    esp,0x10
c0011736:	85 db                	test   ebx,ebx
c0011738:	79 03                	jns    c001173d <Virt::setupPageSwapping(int)+0x8a>
c001173a:	83 c3 0f             	add    ebx,0xf
c001173d:	c1 fb 04             	sar    ebx,0x4
c0011740:	4b                   	dec    ebx
c0011741:	83 fb ff             	cmp    ebx,0xffffffff
c0011744:	74 4f                	je     c0011795 <Virt::setupPageSwapping(int)+0xe2>
c0011746:	83 ec 0c             	sub    esp,0xc
c0011749:	8b 06                	mov    eax,DWORD PTR [esi]
c001174b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001174f:	52                   	push   edx
c0011750:	57                   	push   edi
c0011751:	6a 00                	push   0x0
c0011753:	68 00 00 01 00       	push   0x10000
c0011758:	56                   	push   esi
c0011759:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001175c:	83 c4 20             	add    esp,0x20
c001175f:	85 c0                	test   eax,eax
c0011761:	0f 85 e0 00 00 00    	jne    c0011847 <Virt::setupPageSwapping(int)+0x194>
c0011767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001176b:	3d 00 00 01 00       	cmp    eax,0x10000
c0011770:	74 ce                	je     c0011740 <Virt::setupPageSwapping(int)+0x8d>
c0011772:	83 ec 08             	sub    esp,0x8
c0011775:	4b                   	dec    ebx
c0011776:	50                   	push   eax
c0011777:	68 25 b0 02 c0       	push   0xc002b025
c001177c:	e8 fa 10 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0011781:	c7 04 24 2e b0 02 c0 	mov    DWORD PTR [esp],0xc002b02e
c0011788:	e8 24 8b 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c001178d:	83 c4 10             	add    esp,0x10
c0011790:	83 fb ff             	cmp    ebx,0xffffffff
c0011793:	75 b1                	jne    c0011746 <Virt::setupPageSwapping(int)+0x93>
c0011795:	83 ec 0c             	sub    esp,0xc
c0011798:	56                   	push   esi
c0011799:	e8 fe 16 00 00       	call   c0012e9c <File::close()>
c001179e:	89 3c 24             	mov    DWORD PTR [esp],edi
c00117a1:	e8 06 e1 ff ff       	call   c000f8ac <rfree>
c00117a6:	83 c4 10             	add    esp,0x10
c00117a9:	85 f6                	test   esi,esi
c00117ab:	74 0c                	je     c00117b9 <Virt::setupPageSwapping(int)+0x106>
c00117ad:	83 ec 0c             	sub    esp,0xc
c00117b0:	8b 06                	mov    eax,DWORD PTR [esi]
c00117b2:	56                   	push   esi
c00117b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00117b6:	83 c4 10             	add    esp,0x10
c00117b9:	83 ec 08             	sub    esp,0x8
c00117bc:	a1 48 f4 02 c0       	mov    eax,ds:0xc002f448
c00117c1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00117c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00117c9:	68 d2 af 02 c0       	push   0xc002afd2
c00117ce:	50                   	push   eax
c00117cf:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00117d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00117d6:	c6 05 f8 dd 02 c0 43 	mov    BYTE PTR ds:0xc002ddf8,0x43
c00117dd:	c1 e2 0b             	shl    edx,0xb
c00117e0:	a3 f4 dd 02 c0       	mov    ds:0xc002ddf4,eax
c00117e5:	89 15 f0 dd 02 c0    	mov    DWORD PTR ds:0xc002ddf0,edx
c00117eb:	c7 05 ec dd 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002ddec,0x8
c00117f5:	c1 ea 08             	shr    edx,0x8
c00117f8:	89 14 24             	mov    DWORD PTR [esp],edx
c00117fb:	e8 8c e0 ff ff       	call   c000f88c <malloc>
c0011800:	83 c4 0c             	add    esp,0xc
c0011803:	89 c1                	mov    ecx,eax
c0011805:	a3 ac ef 02 c0       	mov    ds:0xc002efac,eax
c001180a:	31 d2                	xor    edx,edx
c001180c:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c0011811:	f7 35 ec dd 02 c0    	div    DWORD PTR ds:0xc002ddec
c0011817:	c1 e8 05             	shr    eax,0x5
c001181a:	50                   	push   eax
c001181b:	6a 00                	push   0x0
c001181d:	51                   	push   ecx
c001181e:	e8 2d ef fe ff       	call   c0000750 <memset>
c0011823:	58                   	pop    eax
c0011824:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c0011829:	5a                   	pop    edx
c001182a:	31 d2                	xor    edx,edx
c001182c:	f7 35 ec dd 02 c0    	div    DWORD PTR ds:0xc002ddec
c0011832:	c1 e8 05             	shr    eax,0x5
c0011835:	50                   	push   eax
c0011836:	68 34 b0 02 c0       	push   0xc002b034
c001183b:	e8 3b 10 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0011840:	83 c4 20             	add    esp,0x20
c0011843:	5b                   	pop    ebx
c0011844:	5e                   	pop    esi
c0011845:	5f                   	pop    edi
c0011846:	c3                   	ret    
c0011847:	83 ec 08             	sub    esp,0x8
c001184a:	50                   	push   eax
c001184b:	68 0d b0 02 c0       	push   0xc002b00d
c0011850:	e8 26 10 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0011855:	83 c4 10             	add    esp,0x10
c0011858:	e9 0a ff ff ff       	jmp    c0011767 <Virt::setupPageSwapping(int)+0xb4>
c001185d:	83 ec 08             	sub    esp,0x8
c0011860:	50                   	push   eax
c0011861:	68 e9 af 02 c0       	push   0xc002afe9
c0011866:	e8 10 10 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001186b:	c7 04 24 f2 af 02 c0 	mov    DWORD PTR [esp],0xc002aff2
c0011872:	e8 3a 8a 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0011877:	83 c4 10             	add    esp,0x10
c001187a:	e9 83 fe ff ff       	jmp    c0011702 <Virt::setupPageSwapping(int)+0x4f>
c001187f:	90                   	nop

c0011880 <VAS::VAS()>:
c0011880:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011884:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001188b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001188f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001189a:	a3 b0 ef 02 c0       	mov    ds:0xc002efb0,eax
c001189f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118a3:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00118a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118ab:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00118ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118b2:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c00118b9:	90                   	nop
c00118ba:	c3                   	ret    
c00118bb:	90                   	nop

c00118bc <VAS::VAS(VAS*)>:
c00118bc:	83 ec 0c             	sub    esp,0xc
c00118bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118c3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ce:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00118d5:	83 ec 0c             	sub    esp,0xc
c00118d8:	68 18 ae 02 c0       	push   0xc002ae18
c00118dd:	e8 cf 89 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c00118e2:	83 c4 10             	add    esp,0x10
c00118e5:	90                   	nop
c00118e6:	83 c4 0c             	add    esp,0xc
c00118e9:	c3                   	ret    

c00118ea <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00118ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118ee:	89 c2                	mov    edx,eax
c00118f0:	c1 e8 0a             	shr    eax,0xa
c00118f3:	c1 ea 16             	shr    edx,0x16
c00118f6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00118fb:	19 c9                	sbb    ecx,ecx
c00118fd:	c1 e2 0c             	shl    edx,0xc
c0011900:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011906:	25 fc 0f 00 00       	and    eax,0xffc
c001190b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011912:	01 d0                	add    eax,edx
c0011914:	c3                   	ret    
c0011915:	90                   	nop

c0011916 <VAS::getPageTableEntry(unsigned long)>:
c0011916:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001191a:	89 ca                	mov    edx,ecx
c001191c:	c1 e9 0a             	shr    ecx,0xa
c001191f:	c1 ea 16             	shr    edx,0x16
c0011922:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011928:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001192e:	c1 e0 0c             	shl    eax,0xc
c0011931:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011934:	c3                   	ret    

c0011935 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011935:	57                   	push   edi
c0011936:	56                   	push   esi
c0011937:	be 01 00 00 00       	mov    esi,0x1
c001193c:	53                   	push   ebx
c001193d:	83 ec 10             	sub    esp,0x10
c0011940:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011944:	c1 eb 0c             	shr    ebx,0xc
c0011947:	eb 3f                	jmp    c0011988 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011949:	83 ec 08             	sub    esp,0x8
c001194c:	57                   	push   edi
c001194d:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c0011953:	e8 be ff ff ff       	call   c0011916 <VAS::getPageTableEntry(unsigned long)>
c0011958:	83 c4 10             	add    esp,0x10
c001195b:	8b 00                	mov    eax,DWORD PTR [eax]
c001195d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011961:	f6 c4 04             	test   ah,0x4
c0011964:	75 5f                	jne    c00119c5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011966:	80 fa 04             	cmp    dl,0x4
c0011969:	74 78                	je     c00119e3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001196b:	80 fa 02             	cmp    dl,0x2
c001196e:	0f 84 88 00 00 00    	je     c00119fc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011974:	80 fa 03             	cmp    dl,0x3
c0011977:	0f 84 ad 00 00 00    	je     c0011a2a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001197d:	fe ca                	dec    dl
c001197f:	0f 84 92 00 00 00    	je     c0011a17 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011985:	43                   	inc    ebx
c0011986:	31 f6                	xor    esi,esi
c0011988:	53                   	push   ebx
c0011989:	89 df                	mov    edi,ebx
c001198b:	e8 c1 fa ff ff       	call   c0011451 <Virt::getPageState(unsigned long)>
c0011990:	c1 e7 0c             	shl    edi,0xc
c0011993:	59                   	pop    ecx
c0011994:	84 c0                	test   al,al
c0011996:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001199a:	75 ad                	jne    c0011949 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001199c:	83 ec 0c             	sub    esp,0xc
c001199f:	68 4f b0 02 c0       	push   0xc002b04f
c00119a4:	e8 08 89 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c00119a9:	58                   	pop    eax
c00119aa:	5a                   	pop    edx
c00119ab:	57                   	push   edi
c00119ac:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c00119b2:	e8 5f ff ff ff       	call   c0011916 <VAS::getPageTableEntry(unsigned long)>
c00119b7:	83 c4 10             	add    esp,0x10
c00119ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00119bc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119c0:	f6 c4 04             	test   ah,0x4
c00119c3:	74 c0                	je     c0011985 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00119c5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00119c9:	25 00 f0 ff ff       	and    eax,0xfffff000
c00119ce:	83 ec 0c             	sub    esp,0xc
c00119d1:	50                   	push   eax
c00119d2:	e8 0b e1 ff ff       	call   c000fae2 <Phys::freePage(unsigned long)>
c00119d7:	83 c4 10             	add    esp,0x10
c00119da:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00119de:	80 fa 04             	cmp    dl,0x4
c00119e1:	75 88                	jne    c001196b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00119e3:	89 f0                	mov    eax,esi
c00119e5:	84 c0                	test   al,al
c00119e7:	75 47                	jne    c0011a30 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00119e9:	c7 44 24 20 3c ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002ae3c
c00119f1:	83 c4 10             	add    esp,0x10
c00119f4:	5b                   	pop    ebx
c00119f5:	5e                   	pop    esi
c00119f6:	5f                   	pop    edi
c00119f7:	e9 b5 88 00 00       	jmp    c001a2b1 <Krnl::panic(char const*)>
c00119fc:	89 f0                	mov    eax,esi
c00119fe:	84 c0                	test   al,al
c0011a00:	75 15                	jne    c0011a17 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011a02:	83 ec 0c             	sub    esp,0xc
c0011a05:	68 6b b0 02 c0       	push   0xc002b06b
c0011a0a:	e8 a2 88 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0011a0f:	83 c4 10             	add    esp,0x10
c0011a12:	e9 6e ff ff ff       	jmp    c0011985 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a17:	83 ec 08             	sub    esp,0x8
c0011a1a:	6a 00                	push   0x0
c0011a1c:	53                   	push   ebx
c0011a1d:	e8 fa f9 ff ff       	call   c001141c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a22:	83 c4 10             	add    esp,0x10
c0011a25:	e9 5b ff ff ff       	jmp    c0011985 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011a2a:	89 f0                	mov    eax,esi
c0011a2c:	84 c0                	test   al,al
c0011a2e:	75 15                	jne    c0011a45 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011a30:	83 ec 08             	sub    esp,0x8
c0011a33:	6a 00                	push   0x0
c0011a35:	53                   	push   ebx
c0011a36:	e8 e1 f9 ff ff       	call   c001141c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011a3b:	83 c4 10             	add    esp,0x10
c0011a3e:	83 c4 10             	add    esp,0x10
c0011a41:	5b                   	pop    ebx
c0011a42:	5e                   	pop    esi
c0011a43:	5f                   	pop    edi
c0011a44:	c3                   	ret    
c0011a45:	c7 44 24 20 87 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b087
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	5b                   	pop    ebx
c0011a51:	5e                   	pop    esi
c0011a52:	5f                   	pop    edi
c0011a53:	e9 59 88 00 00       	jmp    c001a2b1 <Krnl::panic(char const*)>

c0011a58 <VAS::freeAllocatedPages(unsigned long)>:
c0011a58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011a60:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011a64:	74 09                	je     c0011a6f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011a66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011a6a:	e9 c6 fe ff ff       	jmp    c0011935 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a6f:	c7 44 24 04 60 ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002ae60
c0011a77:	e9 ff 0d 00 00       	jmp    c001287b <Dbg::kprintf(char const*, ...)>

c0011a7c <VAS::virtualToPhysical(unsigned long)>:
c0011a7c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011a80:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011a84:	e8 8d fe ff ff       	call   c0011916 <VAS::getPageTableEntry(unsigned long)>
c0011a89:	5a                   	pop    edx
c0011a8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a8c:	59                   	pop    ecx
c0011a8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a92:	c3                   	ret    
c0011a93:	90                   	nop

c0011a94 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011a94:	55                   	push   ebp
c0011a95:	57                   	push   edi
c0011a96:	56                   	push   esi
c0011a97:	53                   	push   ebx
c0011a98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011a9c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011aa0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011aa8:	85 db                	test   ebx,ebx
c0011aaa:	7e 22                	jle    c0011ace <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011aac:	c1 e3 0c             	shl    ebx,0xc
c0011aaf:	01 f3                	add    ebx,esi
c0011ab1:	56                   	push   esi
c0011ab2:	81 c6 00 10 00 00    	add    esi,0x1000
c0011ab8:	55                   	push   ebp
c0011ab9:	e8 58 fe ff ff       	call   c0011916 <VAS::getPageTableEntry(unsigned long)>
c0011abe:	5a                   	pop    edx
c0011abf:	59                   	pop    ecx
c0011ac0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ac2:	21 f9                	and    ecx,edi
c0011ac4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011ac8:	39 f3                	cmp    ebx,esi
c0011aca:	89 08                	mov    DWORD PTR [eax],ecx
c0011acc:	75 e3                	jne    c0011ab1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011ace:	5b                   	pop    ebx
c0011acf:	5e                   	pop    esi
c0011ad0:	5f                   	pop    edi
c0011ad1:	5d                   	pop    ebp
c0011ad2:	c3                   	ret    
c0011ad3:	90                   	nop

c0011ad4 <VAS::setToWriteCombining(unsigned long, int)>:
c0011ad4:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0011ad9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011adf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011ae6:	75 01                	jne    c0011ae9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011ae8:	c3                   	ret    
c0011ae9:	68 80 00 00 00       	push   0x80
c0011aee:	6a ff                	push   0xffffffff
c0011af0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011af4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011af8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011afc:	e8 93 ff ff ff       	call   c0011a94 <VAS::reflagRange(unsigned long, int, int, int)>
c0011b01:	83 c4 14             	add    esp,0x14
c0011b04:	c3                   	ret    
c0011b05:	90                   	nop

c0011b06 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011b06:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011b0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b0f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0011b12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b16:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0011b19:	19 c0                	sbb    eax,eax
c0011b1b:	83 ca 03             	or     edx,0x3
c0011b1e:	83 e0 fc             	and    eax,0xfffffffc
c0011b21:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011b28:	0f 20 d8             	mov    eax,cr3
c0011b2b:	0f 22 d8             	mov    cr3,eax
c0011b2e:	c3                   	ret    
c0011b2f:	90                   	nop

c0011b30 <VAS::~VAS()>:
c0011b30:	83 ec 2c             	sub    esp,0x2c
c0011b33:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011b3b:	fa                   	cli    
c0011b3c:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0011b41:	40                   	inc    eax
c0011b42:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0011b47:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b4e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b51:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011b57:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0011b5b:	6a 01                	push   0x1
c0011b5d:	50                   	push   eax
c0011b5e:	e8 a3 ff ff ff       	call   c0011b06 <VAS::mapOtherVASIn(bool, VAS*)>
c0011b63:	83 c4 0c             	add    esp,0xc
c0011b66:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011b6e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011b76:	0f 8f d4 00 00 00    	jg     c0011c50 <VAS::~VAS()+0x120>
c0011b7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011b80:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011b83:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011b87:	c1 e2 02             	shl    edx,0x2
c0011b8a:	01 d0                	add    eax,edx
c0011b8c:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b96:	83 e0 01             	and    eax,0x1
c0011b99:	0f 84 a8 00 00 00    	je     c0011c47 <VAS::~VAS()+0x117>
c0011b9f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011ba7:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011baf:	7f 72                	jg     c0011c23 <VAS::~VAS()+0xf3>
c0011bb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011bb5:	c1 e0 0a             	shl    eax,0xa
c0011bb8:	89 c2                	mov    edx,eax
c0011bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011bbe:	01 d0                	add    eax,edx
c0011bc0:	c1 e0 0c             	shl    eax,0xc
c0011bc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bc7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011bcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bce:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011bd1:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011bd7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0011bdb:	6a 01                	push   0x1
c0011bdd:	50                   	push   eax
c0011bde:	e8 07 fd ff ff       	call   c00118ea <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011be3:	83 c4 0c             	add    esp,0xc
c0011be6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011bea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf8:	25 01 04 00 00       	and    eax,0x401
c0011bfd:	3d 01 04 00 00       	cmp    eax,0x401
c0011c02:	75 19                	jne    c0011c1d <VAS::~VAS()+0xed>
c0011c04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c08:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c0d:	83 ec 0c             	sub    esp,0xc
c0011c10:	50                   	push   eax
c0011c11:	e8 cc de ff ff       	call   c000fae2 <Phys::freePage(unsigned long)>
c0011c16:	83 c4 10             	add    esp,0x10
c0011c19:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c1d:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011c21:	eb 84                	jmp    c0011ba7 <VAS::~VAS()+0x77>
c0011c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c27:	25 00 04 00 00       	and    eax,0x400
c0011c2c:	74 19                	je     c0011c47 <VAS::~VAS()+0x117>
c0011c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c32:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c37:	83 ec 0c             	sub    esp,0xc
c0011c3a:	50                   	push   eax
c0011c3b:	e8 a2 de ff ff       	call   c000fae2 <Phys::freePage(unsigned long)>
c0011c40:	83 c4 10             	add    esp,0x10
c0011c43:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c47:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011c4b:	e9 1e ff ff ff       	jmp    c0011b6e <VAS::~VAS()+0x3e>
c0011c50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c54:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011c57:	83 ec 0c             	sub    esp,0xc
c0011c5a:	50                   	push   eax
c0011c5b:	e8 d5 fc ff ff       	call   c0011935 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c60:	83 c4 10             	add    esp,0x10
c0011c63:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c67:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011c6a:	83 ec 0c             	sub    esp,0xc
c0011c6d:	50                   	push   eax
c0011c6e:	e8 6f de ff ff       	call   c000fae2 <Phys::freePage(unsigned long)>
c0011c73:	83 c4 10             	add    esp,0x10
c0011c76:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011c7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011c7e:	c1 e0 02             	shl    eax,0x2
c0011c81:	83 ec 08             	sub    esp,0x8
c0011c84:	50                   	push   eax
c0011c85:	68 84 ae 02 c0       	push   0xc002ae84
c0011c8a:	e8 ec 0b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0011c8f:	83 c4 10             	add    esp,0x10
c0011c92:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0011c97:	48                   	dec    eax
c0011c98:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0011c9d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0011ca2:	85 c0                	test   eax,eax
c0011ca4:	75 01                	jne    c0011ca7 <VAS::~VAS()+0x177>
c0011ca6:	fb                   	sti    
c0011ca7:	90                   	nop
c0011ca8:	83 c4 2c             	add    esp,0x2c
c0011cab:	c3                   	ret    

c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011cac:	55                   	push   ebp
c0011cad:	57                   	push   edi
c0011cae:	56                   	push   esi
c0011caf:	53                   	push   ebx
c0011cb0:	83 ec 1c             	sub    esp,0x1c
c0011cb3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011cb7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011cbb:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011cc1:	77 08                	ja     c0011ccb <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011cc3:	0f 20 d8             	mov    eax,cr3
c0011cc6:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0011cc9:	75 47                	jne    c0011d12 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011ccb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ccf:	09 d8                	or     eax,ebx
c0011cd1:	a9 ff 0f 00 00       	test   eax,0xfff
c0011cd6:	75 57                	jne    c0011d2f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011cd8:	89 de                	mov    esi,ebx
c0011cda:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011cdd:	c1 ee 16             	shr    esi,0x16
c0011ce0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011ce7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011ceb:	74 54                	je     c0011d41 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011ced:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cf1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011cf7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011cfb:	c1 e6 0c             	shl    esi,0xc
c0011cfe:	c1 eb 0a             	shr    ebx,0xa
c0011d01:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011d07:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011d0a:	83 c4 1c             	add    esp,0x1c
c0011d0d:	5b                   	pop    ebx
c0011d0e:	5e                   	pop    esi
c0011d0f:	5f                   	pop    edi
c0011d10:	5d                   	pop    ebp
c0011d11:	c3                   	ret    
c0011d12:	83 ec 0c             	sub    esp,0xc
c0011d15:	68 a4 ae 02 c0       	push   0xc002aea4
c0011d1a:	e8 5c 0b 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0011d1f:	83 c4 10             	add    esp,0x10
c0011d22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011d26:	09 d8                	or     eax,ebx
c0011d28:	a9 ff 0f 00 00       	test   eax,0xfff
c0011d2d:	74 a9                	je     c0011cd8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d2f:	83 ec 0c             	sub    esp,0xc
c0011d32:	68 0c af 02 c0       	push   0xc002af0c
c0011d37:	e8 75 85 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0011d3c:	83 c4 10             	add    esp,0x10
c0011d3f:	eb 97                	jmp    c0011cd8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011d41:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011d45:	e8 f3 dd ff ff       	call   c000fb3d <Phys::allocatePage()>
c0011d4a:	83 ec 0c             	sub    esp,0xc
c0011d4d:	89 c5                	mov    ebp,eax
c0011d4f:	8b 0d b0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efb0
c0011d55:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011d59:	6a 01                	push   0x1
c0011d5b:	e8 15 f7 ff ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c0011d60:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011d67:	6a 01                	push   0x1
c0011d69:	50                   	push   eax
c0011d6a:	55                   	push   ebp
c0011d6b:	81 cd 07 04 00 00    	or     ebp,0x407
c0011d71:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011d75:	51                   	push   ecx
c0011d76:	e8 27 02 00 00       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d7b:	83 c4 1c             	add    esp,0x1c
c0011d7e:	68 00 10 00 00       	push   0x1000
c0011d83:	6a 00                	push   0x0
c0011d85:	50                   	push   eax
c0011d86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011d8a:	e8 c1 e9 fe ff       	call   c0000750 <memset>
c0011d8f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011d93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011d96:	e8 9a fb ff ff       	call   c0011935 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d9f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011da8:	e9 40 ff ff ff       	jmp    c0011ced <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0011dad:	90                   	nop

c0011dae <VAS::allocatePages(int, int)>:
c0011dae:	55                   	push   ebp
c0011daf:	57                   	push   edi
c0011db0:	56                   	push   esi
c0011db1:	53                   	push   ebx
c0011db2:	83 ec 1c             	sub    esp,0x1c
c0011db5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011db9:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0011dbe:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011dc4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011dca:	83 e0 01             	and    eax,0x1
c0011dcd:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011dd1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011dd5:	0f 85 cc 00 00 00    	jne    c0011ea7 <VAS::allocatePages(int, int)+0xf9>
c0011ddb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011dde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011de2:	85 c0                	test   eax,eax
c0011de4:	0f 84 a1 00 00 00    	je     c0011e8b <VAS::allocatePages(int, int)+0xdd>
c0011dea:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011dee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011df2:	c1 e6 0c             	shl    esi,0xc
c0011df5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011df9:	85 c0                	test   eax,eax
c0011dfb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011dfe:	7e 33                	jle    c0011e33 <VAS::allocatePages(int, int)+0x85>
c0011e00:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011e04:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e08:	81 cd 00 04 00 00    	or     ebp,0x400
c0011e0e:	e8 2a dd ff ff       	call   c000fb3d <Phys::allocatePage()>
c0011e13:	55                   	push   ebp
c0011e14:	53                   	push   ebx
c0011e15:	50                   	push   eax
c0011e16:	57                   	push   edi
c0011e17:	e8 90 fe ff ff       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e1c:	83 c4 10             	add    esp,0x10
c0011e1f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e24:	74 03                	je     c0011e29 <VAS::allocatePages(int, int)+0x7b>
c0011e26:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e29:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e2f:	39 de                	cmp    esi,ebx
c0011e31:	75 db                	jne    c0011e0e <VAS::allocatePages(int, int)+0x60>
c0011e33:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011e38:	75 12                	jne    c0011e4c <VAS::allocatePages(int, int)+0x9e>
c0011e3a:	0f 20 d8             	mov    eax,cr3
c0011e3d:	0f 22 d8             	mov    cr3,eax
c0011e40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e44:	83 c4 1c             	add    esp,0x1c
c0011e47:	5b                   	pop    ebx
c0011e48:	5e                   	pop    esi
c0011e49:	5f                   	pop    edi
c0011e4a:	5d                   	pop    ebp
c0011e4b:	c3                   	ret    
c0011e4c:	c1 ee 0a             	shr    esi,0xa
c0011e4f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011e53:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011e59:	c1 eb 0a             	shr    ebx,0xa
c0011e5c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0011e62:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011e68:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011e6e:	39 c3                	cmp    ebx,eax
c0011e70:	77 ce                	ja     c0011e40 <VAS::allocatePages(int, int)+0x92>
c0011e72:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011e75:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011e7b:	39 d8                	cmp    eax,ebx
c0011e7d:	73 f3                	jae    c0011e72 <VAS::allocatePages(int, int)+0xc4>
c0011e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e83:	83 c4 1c             	add    esp,0x1c
c0011e86:	5b                   	pop    ebx
c0011e87:	5e                   	pop    esi
c0011e88:	5f                   	pop    edi
c0011e89:	5d                   	pop    ebp
c0011e8a:	c3                   	ret    
c0011e8b:	83 ec 0c             	sub    esp,0xc
c0011e8e:	68 30 af 02 c0       	push   0xc002af30
c0011e93:	e8 19 84 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0011e98:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011e9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011e9f:	83 c4 10             	add    esp,0x10
c0011ea2:	e9 43 ff ff ff       	jmp    c0011dea <VAS::allocatePages(int, int)+0x3c>
c0011ea7:	83 ec 0c             	sub    esp,0xc
c0011eaa:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011eae:	e8 c2 f5 ff ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c0011eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011eb7:	83 c4 10             	add    esp,0x10
c0011eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011ebf:	0f 87 9b 00 00 00    	ja     c0011f60 <VAS::allocatePages(int, int)+0x1b2>
c0011ec5:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011ec9:	85 d2                	test   edx,edx
c0011ecb:	7e 3c                	jle    c0011f09 <VAS::allocatePages(int, int)+0x15b>
c0011ecd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011ed1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011ed5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ed9:	c1 e5 0c             	shl    ebp,0xc
c0011edc:	81 ce 00 04 00 00    	or     esi,0x400
c0011ee2:	01 dd                	add    ebp,ebx
c0011ee4:	e8 54 dc ff ff       	call   c000fb3d <Phys::allocatePage()>
c0011ee9:	56                   	push   esi
c0011eea:	53                   	push   ebx
c0011eeb:	50                   	push   eax
c0011eec:	57                   	push   edi
c0011eed:	e8 ba fd ff ff       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ef2:	83 c4 10             	add    esp,0x10
c0011ef5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011efa:	74 03                	je     c0011eff <VAS::allocatePages(int, int)+0x151>
c0011efc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011eff:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f05:	39 dd                	cmp    ebp,ebx
c0011f07:	75 db                	jne    c0011ee4 <VAS::allocatePages(int, int)+0x136>
c0011f09:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011f0e:	0f 84 26 ff ff ff    	je     c0011e3a <VAS::allocatePages(int, int)+0x8c>
c0011f14:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f18:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f1c:	89 d3                	mov    ebx,edx
c0011f1e:	c1 e0 0c             	shl    eax,0xc
c0011f21:	c1 eb 0a             	shr    ebx,0xa
c0011f24:	01 d0                	add    eax,edx
c0011f26:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011f2c:	c1 e8 0a             	shr    eax,0xa
c0011f2f:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011f35:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f3a:	2d 00 00 40 00       	sub    eax,0x400000
c0011f3f:	39 c3                	cmp    ebx,eax
c0011f41:	0f 87 f9 fe ff ff    	ja     c0011e40 <VAS::allocatePages(int, int)+0x92>
c0011f47:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011f4a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011f50:	39 d8                	cmp    eax,ebx
c0011f52:	73 f3                	jae    c0011f47 <VAS::allocatePages(int, int)+0x199>
c0011f54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f58:	83 c4 1c             	add    esp,0x1c
c0011f5b:	5b                   	pop    ebx
c0011f5c:	5e                   	pop    esi
c0011f5d:	5f                   	pop    edi
c0011f5e:	5d                   	pop    ebp
c0011f5f:	c3                   	ret    
c0011f60:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0011f65:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011f6b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011f72:	0f 84 4d ff ff ff    	je     c0011ec5 <VAS::allocatePages(int, int)+0x117>
c0011f78:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011f80:	e9 40 ff ff ff       	jmp    c0011ec5 <VAS::allocatePages(int, int)+0x117>
c0011f85:	90                   	nop

c0011f86 <VAS::setCPUSpecific(unsigned long)>:
c0011f86:	83 ec 0c             	sub    esp,0xc
c0011f89:	6a 05                	push   0x5
c0011f8b:	68 00 00 40 c2       	push   0xc2400000
c0011f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f98:	e8 0f fd ff ff       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c0011f9d:	83 c4 1c             	add    esp,0x1c
c0011fa0:	c3                   	ret    
c0011fa1:	90                   	nop

c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011fa2:	55                   	push   ebp
c0011fa3:	57                   	push   edi
c0011fa4:	56                   	push   esi
c0011fa5:	53                   	push   ebx
c0011fa6:	83 ec 1c             	sub    esp,0x1c
c0011fa9:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0011fae:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fb2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fb8:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011fbc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011fc2:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011fc6:	83 e0 01             	and    eax,0x1
c0011fc9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011fcd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fd1:	85 c0                	test   eax,eax
c0011fd3:	7e 39                	jle    c001200e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0011fd5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fd9:	89 f3                	mov    ebx,esi
c0011fdb:	c1 e0 0c             	shl    eax,0xc
c0011fde:	01 f0                	add    eax,esi
c0011fe0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fe4:	55                   	push   ebp
c0011fe5:	53                   	push   ebx
c0011fe6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011fea:	29 f0                	sub    eax,esi
c0011fec:	01 d8                	add    eax,ebx
c0011fee:	50                   	push   eax
c0011fef:	57                   	push   edi
c0011ff0:	e8 b7 fc ff ff       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ff5:	83 c4 10             	add    esp,0x10
c0011ff8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ffd:	74 03                	je     c0012002 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0011fff:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012002:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012008:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001200c:	75 d6                	jne    c0011fe4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c001200e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012013:	75 10                	jne    c0012025 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012015:	0f 20 d8             	mov    eax,cr3
c0012018:	0f 22 d8             	mov    cr3,eax
c001201b:	83 c4 1c             	add    esp,0x1c
c001201e:	89 f0                	mov    eax,esi
c0012020:	5b                   	pop    ebx
c0012021:	5e                   	pop    esi
c0012022:	5f                   	pop    edi
c0012023:	5d                   	pop    ebp
c0012024:	c3                   	ret    
c0012025:	89 f3                	mov    ebx,esi
c0012027:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001202b:	c1 eb 0a             	shr    ebx,0xa
c001202e:	c1 e0 0c             	shl    eax,0xc
c0012031:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012037:	01 f0                	add    eax,esi
c0012039:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001203f:	c1 e8 0a             	shr    eax,0xa
c0012042:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012047:	2d 00 00 40 00       	sub    eax,0x400000
c001204c:	39 c3                	cmp    ebx,eax
c001204e:	77 cb                	ja     c001201b <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0012050:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012053:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012059:	39 d8                	cmp    eax,ebx
c001205b:	73 f3                	jae    c0012050 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001205d:	83 c4 1c             	add    esp,0x1c
c0012060:	89 f0                	mov    eax,esi
c0012062:	5b                   	pop    ebx
c0012063:	5e                   	pop    esi
c0012064:	5f                   	pop    edi
c0012065:	5d                   	pop    ebp
c0012066:	c3                   	ret    
c0012067:	90                   	nop

c0012068 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012068:	55                   	push   ebp
c0012069:	57                   	push   edi
c001206a:	56                   	push   esi
c001206b:	53                   	push   ebx
c001206c:	83 ec 1c             	sub    esp,0x1c
c001206f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012073:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012077:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001207b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001207f:	a9 ff 0f 00 00       	test   eax,0xfff
c0012084:	75 4a                	jne    c00120d0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012086:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001208a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001208d:	c1 eb 16             	shr    ebx,0x16
c0012090:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012097:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001209b:	74 4d                	je     c00120ea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001209d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00120a1:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00120a5:	c1 e8 0a             	shr    eax,0xa
c00120a8:	80 fa 01             	cmp    dl,0x1
c00120ab:	19 d2                	sbb    edx,edx
c00120ad:	c1 e3 0c             	shl    ebx,0xc
c00120b0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00120b4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00120ba:	25 fc 0f 00 00       	and    eax,0xffc
c00120bf:	01 d8                	add    eax,ebx
c00120c1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00120c8:	83 c4 1c             	add    esp,0x1c
c00120cb:	5b                   	pop    ebx
c00120cc:	5e                   	pop    esi
c00120cd:	5f                   	pop    edi
c00120ce:	5d                   	pop    ebp
c00120cf:	c3                   	ret    
c00120d0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00120d4:	83 ec 0c             	sub    esp,0xc
c00120d7:	68 5c af 02 c0       	push   0xc002af5c
c00120dc:	e8 d0 81 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c00120e1:	83 c4 10             	add    esp,0x10
c00120e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120e8:	eb 9c                	jmp    c0012086 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00120ea:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00120ee:	e8 4a da ff ff       	call   c000fb3d <Phys::allocatePage()>
c00120f3:	83 ec 0c             	sub    esp,0xc
c00120f6:	89 c5                	mov    ebp,eax
c00120f8:	8b 0d b0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efb0
c00120fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012102:	6a 01                	push   0x1
c0012104:	e8 6c f3 ff ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c0012109:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012110:	6a 01                	push   0x1
c0012112:	50                   	push   eax
c0012113:	55                   	push   ebp
c0012114:	81 cd 07 04 00 00    	or     ebp,0x407
c001211a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001211e:	51                   	push   ecx
c001211f:	e8 7e fe ff ff       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012124:	83 c4 1c             	add    esp,0x1c
c0012127:	68 00 10 00 00       	push   0x1000
c001212c:	6a 00                	push   0x0
c001212e:	50                   	push   eax
c001212f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012133:	e8 18 e6 fe ff       	call   c0000750 <memset>
c0012138:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001213c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001213f:	e8 f1 f7 ff ff       	call   c0011935 <Virt::freeKernelVirtualPages(unsigned long)>
c0012144:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012147:	83 c4 10             	add    esp,0x10
c001214a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001214d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012151:	e9 47 ff ff ff       	jmp    c001209d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012156 <VAS::VAS(bool)>:
c0012156:	53                   	push   ebx
c0012157:	83 ec 28             	sub    esp,0x28
c001215a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001215e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012162:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012166:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001216d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012171:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012178:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001217c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012180:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012183:	e8 b5 d9 ff ff       	call   c000fb3d <Phys::allocatePage()>
c0012188:	89 c2                	mov    edx,eax
c001218a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001218e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012191:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0012197:	83 ec 0c             	sub    esp,0xc
c001219a:	6a 01                	push   0x1
c001219c:	e8 d4 f2 ff ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c00121a1:	83 c4 10             	add    esp,0x10
c00121a4:	89 c2                	mov    edx,eax
c00121a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121aa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00121ad:	83 ec 0c             	sub    esp,0xc
c00121b0:	6a 03                	push   0x3
c00121b2:	6a 01                	push   0x1
c00121b4:	52                   	push   edx
c00121b5:	50                   	push   eax
c00121b6:	53                   	push   ebx
c00121b7:	e8 e6 fd ff ff       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121bc:	83 c4 20             	add    esp,0x20
c00121bf:	89 c2                	mov    edx,eax
c00121c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00121c8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121d0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00121d8:	7f 1c                	jg     c00121f6 <VAS::VAS(bool)+0xa0>
c00121da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121de:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00121e1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00121e5:	c1 e2 02             	shl    edx,0x2
c00121e8:	01 d0                	add    eax,edx
c00121ea:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00121f0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121f4:	eb da                	jmp    c00121d0 <VAS::VAS(bool)+0x7a>
c00121f6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00121fe:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012206:	7f 7a                	jg     c0012282 <VAS::VAS(bool)+0x12c>
c0012208:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001220c:	2d 00 02 00 00       	sub    eax,0x200
c0012211:	c1 e0 0c             	shl    eax,0xc
c0012214:	83 c8 03             	or     eax,0x3
c0012217:	89 c2                	mov    edx,eax
c0012219:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001221e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012224:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001222a:	83 e0 10             	and    eax,0x10
c001222d:	84 c0                	test   al,al
c001222f:	74 07                	je     c0012238 <VAS::VAS(bool)+0xe2>
c0012231:	b8 00 01 00 00       	mov    eax,0x100
c0012236:	eb 05                	jmp    c001223d <VAS::VAS(bool)+0xe7>
c0012238:	b8 00 00 00 00       	mov    eax,0x0
c001223d:	09 d0                	or     eax,edx
c001223f:	89 c1                	mov    ecx,eax
c0012241:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012245:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012248:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001224c:	c1 e2 02             	shl    edx,0x2
c001224f:	01 d0                	add    eax,edx
c0012251:	89 ca                	mov    edx,ecx
c0012253:	89 10                	mov    DWORD PTR [eax],edx
c0012255:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012259:	2d 40 03 00 00       	sub    eax,0x340
c001225e:	83 f8 7f             	cmp    eax,0x7f
c0012261:	77 16                	ja     c0012279 <VAS::VAS(bool)+0x123>
c0012263:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012267:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001226a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001226e:	c1 e2 02             	shl    edx,0x2
c0012271:	01 d0                	add    eax,edx
c0012273:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012279:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001227d:	e9 7c ff ff ff       	jmp    c00121fe <VAS::VAS(bool)+0xa8>
c0012282:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001228d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012293:	83 e0 10             	and    eax,0x10
c0012296:	84 c0                	test   al,al
c0012298:	74 07                	je     c00122a1 <VAS::VAS(bool)+0x14b>
c001229a:	b8 03 41 00 00       	mov    eax,0x4103
c001229f:	eb 05                	jmp    c00122a6 <VAS::VAS(bool)+0x150>
c00122a1:	b8 03 40 00 00       	mov    eax,0x4003
c00122a6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00122aa:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c00122ad:	81 c2 20 0c 00 00    	add    edx,0xc20
c00122b3:	89 02                	mov    DWORD PTR [edx],eax
c00122b5:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00122ba:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122c0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00122c6:	83 ec 08             	sub    esp,0x8
c00122c9:	50                   	push   eax
c00122ca:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00122ce:	e8 b3 fc ff ff       	call   c0011f86 <VAS::setCPUSpecific(unsigned long)>
c00122d3:	83 c4 10             	add    esp,0x10
c00122d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122da:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00122dd:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00122e2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00122e8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122ee:	83 e0 10             	and    eax,0x10
c00122f1:	84 c0                	test   al,al
c00122f3:	74 07                	je     c00122fc <VAS::VAS(bool)+0x1a6>
c00122f5:	b8 00 01 00 00       	mov    eax,0x100
c00122fa:	eb 05                	jmp    c0012301 <VAS::VAS(bool)+0x1ab>
c00122fc:	b8 00 00 00 00       	mov    eax,0x0
c0012301:	09 c2                	or     edx,eax
c0012303:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012307:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001230a:	05 fc 0f 00 00       	add    eax,0xffc
c001230f:	83 ca 03             	or     edx,0x3
c0012312:	89 10                	mov    DWORD PTR [eax],edx
c0012314:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012319:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001231f:	83 ec 0c             	sub    esp,0xc
c0012322:	50                   	push   eax
c0012323:	e8 8c 1c 00 00       	call   c0013fb4 <Device::getName()>
c0012328:	83 c4 10             	add    esp,0x10
c001232b:	83 ec 08             	sub    esp,0x8
c001232e:	68 a1 b0 02 c0       	push   0xc002b0a1
c0012333:	50                   	push   eax
c0012334:	e8 5f e5 fe ff       	call   c0000898 <strcmp>
c0012339:	83 c4 10             	add    esp,0x10
c001233c:	85 c0                	test   eax,eax
c001233e:	0f 94 c0             	sete   al
c0012341:	84 c0                	test   al,al
c0012343:	0f 84 87 00 00 00    	je     c00123d0 <VAS::VAS(bool)+0x27a>
c0012349:	fa                   	cli    
c001234a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001234f:	40                   	inc    eax
c0012350:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0012355:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001235a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012360:	05 7c 09 00 00       	add    eax,0x97c
c0012365:	83 ec 0c             	sub    esp,0xc
c0012368:	50                   	push   eax
c0012369:	e8 a0 cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001236e:	83 c4 10             	add    esp,0x10
c0012371:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012376:	89 c3                	mov    ebx,eax
c0012378:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001237d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012383:	05 7c 09 00 00       	add    eax,0x97c
c0012388:	83 ec 0c             	sub    esp,0xc
c001238b:	50                   	push   eax
c001238c:	e8 7d cf ff ff       	call   c000f30e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012391:	83 c4 10             	add    esp,0x10
c0012394:	83 ec 08             	sub    esp,0x8
c0012397:	50                   	push   eax
c0012398:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001239c:	e8 75 f5 ff ff       	call   c0011916 <VAS::getPageTableEntry(unsigned long)>
c00123a1:	83 c4 10             	add    esp,0x10
c00123a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00123a6:	25 00 f0 ff ff       	and    eax,0xfffff000
c00123ab:	6a 11                	push   0x11
c00123ad:	53                   	push   ebx
c00123ae:	50                   	push   eax
c00123af:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00123b3:	e8 f4 f8 ff ff       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c00123b8:	83 c4 10             	add    esp,0x10
c00123bb:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00123c0:	48                   	dec    eax
c00123c1:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00123c6:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00123cb:	85 c0                	test   eax,eax
c00123cd:	75 01                	jne    c00123d0 <VAS::VAS(bool)+0x27a>
c00123cf:	fb                   	sti    
c00123d0:	90                   	nop
c00123d1:	83 c4 28             	add    esp,0x28
c00123d4:	5b                   	pop    ebx
c00123d5:	c3                   	ret    

c00123d6 <VAS::evict(unsigned long)>:
c00123d6:	55                   	push   ebp
c00123d7:	57                   	push   edi
c00123d8:	56                   	push   esi
c00123d9:	53                   	push   ebx
c00123da:	83 ec 1c             	sub    esp,0x1c
c00123dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123e1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00123e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123e9:	e8 c8 f1 ff ff       	call   c00115b6 <Virt::allocateSwapfilePage()>
c00123ee:	89 c7                	mov    edi,eax
c00123f0:	a1 ec dd 02 c0       	mov    eax,ds:0xc002ddec
c00123f5:	85 c0                	test   eax,eax
c00123f7:	7e 3d                	jle    c0012436 <VAS::evict(unsigned long)+0x60>
c00123f9:	89 ee                	mov    esi,ebp
c00123fb:	31 db                	xor    ebx,ebx
c00123fd:	83 ec 0c             	sub    esp,0xc
c0012400:	57                   	push   edi
c0012401:	e8 9e f1 ff ff       	call   c00115a4 <Virt::swapIDToSector(unsigned long)>
c0012406:	89 34 24             	mov    DWORD PTR [esp],esi
c0012409:	01 d8                	add    eax,ebx
c001240b:	6a 01                	push   0x1
c001240d:	31 d2                	xor    edx,edx
c001240f:	43                   	inc    ebx
c0012410:	52                   	push   edx
c0012411:	81 c6 00 02 00 00    	add    esi,0x200
c0012417:	50                   	push   eax
c0012418:	0f be 05 f8 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002ddf8
c001241f:	ff 34 85 3c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0cc4]
c0012426:	e8 39 3e 00 00       	call   c0016264 <LogicalDisk::write(unsigned long long, int, void*)>
c001242b:	83 c4 20             	add    esp,0x20
c001242e:	39 1d ec dd 02 c0    	cmp    DWORD PTR ds:0xc002ddec,ebx
c0012434:	7f c7                	jg     c00123fd <VAS::evict(unsigned long)+0x27>
c0012436:	83 ec 08             	sub    esp,0x8
c0012439:	c1 e7 0b             	shl    edi,0xb
c001243c:	55                   	push   ebp
c001243d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012441:	e8 d0 f4 ff ff       	call   c0011916 <VAS::getPageTableEntry(unsigned long)>
c0012446:	83 c4 0c             	add    esp,0xc
c0012449:	8b 10                	mov    edx,DWORD PTR [eax]
c001244b:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012451:	09 d7                	or     edi,edx
c0012453:	89 38                	mov    DWORD PTR [eax],edi
c0012455:	a1 a8 ef 02 c0       	mov    eax,ds:0xc002efa8
c001245a:	40                   	inc    eax
c001245b:	a3 a8 ef 02 c0       	mov    ds:0xc002efa8,eax
c0012460:	0f 20 da             	mov    edx,cr3
c0012463:	0f 22 da             	mov    cr3,edx
c0012466:	50                   	push   eax
c0012467:	55                   	push   ebp
c0012468:	68 af b0 02 c0       	push   0xc002b0af
c001246d:	e8 09 04 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0012472:	a1 a4 ef 02 c0       	mov    eax,ds:0xc002efa4
c0012477:	c7 44 24 40 c4 b0 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b0c4
c001247f:	8d 50 01             	lea    edx,[eax+0x1]
c0012482:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012486:	89 15 a4 ef 02 c0    	mov    DWORD PTR ds:0xc002efa4,edx
c001248c:	83 c4 2c             	add    esp,0x2c
c001248f:	5b                   	pop    ebx
c0012490:	5e                   	pop    esi
c0012491:	5f                   	pop    edi
c0012492:	5d                   	pop    ebp
c0012493:	e9 e3 03 00 00       	jmp    c001287b <Dbg::kprintf(char const*, ...)>

c0012498 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012498:	55                   	push   ebp
c0012499:	57                   	push   edi
c001249a:	56                   	push   esi
c001249b:	53                   	push   ebx
c001249c:	83 ec 0c             	sub    esp,0xc
c001249f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00124a3:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00124a9:	0f 84 dc 00 00 00    	je     c001258b <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c00124af:	56                   	push   esi
c00124b0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00124b4:	e8 5d f4 ff ff       	call   c0011916 <VAS::getPageTableEntry(unsigned long)>
c00124b9:	5b                   	pop    ebx
c00124ba:	85 c0                	test   eax,eax
c00124bc:	5f                   	pop    edi
c00124bd:	89 c3                	mov    ebx,eax
c00124bf:	0f 84 c6 00 00 00    	je     c001258b <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c00124c5:	8b 38                	mov    edi,DWORD PTR [eax]
c00124c7:	31 c0                	xor    eax,eax
c00124c9:	89 fa                	mov    edx,edi
c00124cb:	81 e2 01 04 00 00    	and    edx,0x401
c00124d1:	81 fa 00 04 00 00    	cmp    edx,0x400
c00124d7:	0f 85 b0 00 00 00    	jne    c001258d <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c00124dd:	e8 5b d6 ff ff       	call   c000fb3d <Phys::allocatePage()>
c00124e2:	c1 ef 0b             	shr    edi,0xb
c00124e5:	8b 13                	mov    edx,DWORD PTR [ebx]
c00124e7:	81 e2 ff 0f 00 00    	and    edx,0xfff
c00124ed:	09 c2                	or     edx,eax
c00124ef:	81 ca 01 08 00 00    	or     edx,0x801
c00124f5:	89 13                	mov    DWORD PTR [ebx],edx
c00124f7:	8b 0d ec dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddec
c00124fd:	85 c9                	test   ecx,ecx
c00124ff:	7e 3d                	jle    c001253e <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012501:	89 f5                	mov    ebp,esi
c0012503:	31 db                	xor    ebx,ebx
c0012505:	83 ec 0c             	sub    esp,0xc
c0012508:	57                   	push   edi
c0012509:	e8 96 f0 ff ff       	call   c00115a4 <Virt::swapIDToSector(unsigned long)>
c001250e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012511:	01 d8                	add    eax,ebx
c0012513:	6a 01                	push   0x1
c0012515:	31 d2                	xor    edx,edx
c0012517:	43                   	inc    ebx
c0012518:	52                   	push   edx
c0012519:	81 c5 00 02 00 00    	add    ebp,0x200
c001251f:	50                   	push   eax
c0012520:	0f be 05 f8 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002ddf8
c0012527:	ff 34 85 3c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0cc4]
c001252e:	e8 c5 3c 00 00       	call   c00161f8 <LogicalDisk::read(unsigned long long, int, void*)>
c0012533:	83 c4 20             	add    esp,0x20
c0012536:	39 1d ec dd 02 c0    	cmp    DWORD PTR ds:0xc002ddec,ebx
c001253c:	7f c7                	jg     c0012505 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c001253e:	a1 a8 ef 02 c0       	mov    eax,ds:0xc002efa8
c0012543:	48                   	dec    eax
c0012544:	52                   	push   edx
c0012545:	a3 a8 ef 02 c0       	mov    ds:0xc002efa8,eax
c001254a:	50                   	push   eax
c001254b:	56                   	push   esi
c001254c:	68 d5 b0 02 c0       	push   0xc002b0d5
c0012551:	e8 25 03 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0012556:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012559:	e8 28 f0 ff ff       	call   c0011586 <Virt::freeSwapfilePage(unsigned long)>
c001255e:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	48                   	dec    eax
c0012567:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001256c:	85 c0                	test   eax,eax
c001256e:	75 01                	jne    c0012571 <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012570:	fb                   	sti    
c0012571:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012575:	25 ff 0f 00 00       	and    eax,0xfff
c001257a:	3d e0 0f 00 00       	cmp    eax,0xfe0
c001257f:	77 14                	ja     c0012595 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012581:	0f 20 d8             	mov    eax,cr3
c0012584:	0f 22 d8             	mov    cr3,eax
c0012587:	b0 01                	mov    al,0x1
c0012589:	eb 02                	jmp    c001258d <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c001258b:	31 c0                	xor    eax,eax
c001258d:	83 c4 0c             	add    esp,0xc
c0012590:	5b                   	pop    ebx
c0012591:	5e                   	pop    esi
c0012592:	5f                   	pop    edi
c0012593:	5d                   	pop    ebp
c0012594:	c3                   	ret    
c0012595:	83 ec 0c             	sub    esp,0xc
c0012598:	68 ea b0 02 c0       	push   0xc002b0ea
c001259d:	e8 d9 02 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00125a2:	83 c4 10             	add    esp,0x10
c00125a5:	eb da                	jmp    c0012581 <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c00125a7:	90                   	nop

c00125a8 <VAS::scanForEviction()>:
c00125a8:	57                   	push   edi
c00125a9:	56                   	push   esi
c00125aa:	53                   	push   ebx
c00125ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00125af:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00125b2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00125b8:	75 0e                	jne    c00125c8 <VAS::scanForEviction()+0x20>
c00125ba:	89 da                	mov    edx,ebx
c00125bc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00125bf:	c1 ea 16             	shr    edx,0x16
c00125c2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c00125c6:	74 48                	je     c0012610 <VAS::scanForEviction()+0x68>
c00125c8:	53                   	push   ebx
c00125c9:	56                   	push   esi
c00125ca:	e8 47 f3 ff ff       	call   c0011916 <VAS::getPageTableEntry(unsigned long)>
c00125cf:	5a                   	pop    edx
c00125d0:	8b 38                	mov    edi,DWORD PTR [eax]
c00125d2:	59                   	pop    ecx
c00125d3:	89 fa                	mov    edx,edi
c00125d5:	81 e2 00 0c 00 00    	and    edx,0xc00
c00125db:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c00125e1:	74 3d                	je     c0012620 <VAS::scanForEviction()+0x78>
c00125e3:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125e9:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c00125ef:	76 2a                	jbe    c001261b <VAS::scanForEviction()+0x73>
c00125f1:	31 db                	xor    ebx,ebx
c00125f3:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00125fa:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012600:	75 c6                	jne    c00125c8 <VAS::scanForEviction()+0x20>
c0012602:	89 da                	mov    edx,ebx
c0012604:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012607:	c1 ea 16             	shr    edx,0x16
c001260a:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001260e:	75 b8                	jne    c00125c8 <VAS::scanForEviction()+0x20>
c0012610:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012616:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012619:	eb 97                	jmp    c00125b2 <VAS::scanForEviction()+0xa>
c001261b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c001261e:	eb 92                	jmp    c00125b2 <VAS::scanForEviction()+0xa>
c0012620:	f7 c7 01 00 00 00    	test   edi,0x1
c0012626:	74 bb                	je     c00125e3 <VAS::scanForEviction()+0x3b>
c0012628:	f7 c7 20 00 00 00    	test   edi,0x20
c001262e:	74 0a                	je     c001263a <VAS::scanForEviction()+0x92>
c0012630:	83 e7 df             	and    edi,0xffffffdf
c0012633:	89 38                	mov    DWORD PTR [eax],edi
c0012635:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012638:	eb a9                	jmp    c00125e3 <VAS::scanForEviction()+0x3b>
c001263a:	83 ec 08             	sub    esp,0x8
c001263d:	53                   	push   ebx
c001263e:	56                   	push   esi
c001263f:	e8 92 fd ff ff       	call   c00123d6 <VAS::evict(unsigned long)>
c0012644:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c001264b:	83 c4 10             	add    esp,0x10
c001264e:	89 f8                	mov    eax,edi
c0012650:	5b                   	pop    ebx
c0012651:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012656:	5e                   	pop    esi
c0012657:	5f                   	pop    edi
c0012658:	c3                   	ret    

c0012659 <mapVASFirstTime>:
c0012659:	55                   	push   ebp
c001265a:	57                   	push   edi
c001265b:	56                   	push   esi
c001265c:	53                   	push   ebx
c001265d:	83 ec 0c             	sub    esp,0xc
c0012660:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012665:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012668:	4a                   	dec    edx
c0012669:	0f 84 8e 00 00 00    	je     c00126fd <mapVASFirstTime+0xa4>
c001266f:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012672:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012675:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001267a:	c1 e5 15             	shl    ebp,0x15
c001267d:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012682:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012688:	29 eb                	sub    ebx,ebp
c001268a:	29 ee                	sub    esi,ebp
c001268c:	e8 ac d4 ff ff       	call   c000fb3d <Phys::allocatePage()>
c0012691:	83 ec 0c             	sub    esp,0xc
c0012694:	68 03 04 00 00       	push   0x403
c0012699:	6a 01                	push   0x1
c001269b:	53                   	push   ebx
c001269c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00126a2:	50                   	push   eax
c00126a3:	57                   	push   edi
c00126a4:	e8 f9 f8 ff ff       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126a9:	83 c4 20             	add    esp,0x20
c00126ac:	39 f3                	cmp    ebx,esi
c00126ae:	75 dc                	jne    c001268c <mapVASFirstTime+0x33>
c00126b0:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00126b5:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00126ba:	29 ee                	sub    esi,ebp
c00126bc:	29 e8                	sub    eax,ebp
c00126be:	89 c5                	mov    ebp,eax
c00126c0:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00126c4:	19 db                	sbb    ebx,ebx
c00126c6:	e8 72 d4 ff ff       	call   c000fb3d <Phys::allocatePage()>
c00126cb:	83 e3 04             	and    ebx,0x4
c00126ce:	83 ec 0c             	sub    esp,0xc
c00126d1:	81 c3 03 04 00 00    	add    ebx,0x403
c00126d7:	53                   	push   ebx
c00126d8:	6a 01                	push   0x1
c00126da:	56                   	push   esi
c00126db:	81 ee 00 10 00 00    	sub    esi,0x1000
c00126e1:	50                   	push   eax
c00126e2:	57                   	push   edi
c00126e3:	e8 ba f8 ff ff       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126e8:	83 c4 20             	add    esp,0x20
c00126eb:	39 f5                	cmp    ebp,esi
c00126ed:	75 d1                	jne    c00126c0 <mapVASFirstTime+0x67>
c00126ef:	0f 20 d8             	mov    eax,cr3
c00126f2:	0f 22 d8             	mov    cr3,eax
c00126f5:	83 c4 0c             	add    esp,0xc
c00126f8:	5b                   	pop    ebx
c00126f9:	5e                   	pop    esi
c00126fa:	5f                   	pop    edi
c00126fb:	5d                   	pop    ebp
c00126fc:	c3                   	ret    
c00126fd:	83 ec 0c             	sub    esp,0xc
c0012700:	68 fa b0 02 c0       	push   0xc002b0fa
c0012705:	e8 71 01 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001270a:	83 c4 10             	add    esp,0x10
c001270d:	83 c4 0c             	add    esp,0xc
c0012710:	5b                   	pop    ebx
c0012711:	5e                   	pop    esi
c0012712:	5f                   	pop    edi
c0012713:	5d                   	pop    ebp
c0012714:	c3                   	ret    

c0012715 <__cxa_atexit>:
c0012715:	31 c0                	xor    eax,eax
c0012717:	c3                   	ret    

c0012718 <__cxa_finalize>:
c0012718:	c3                   	ret    

c0012719 <__stack_chk_fail>:
c0012719:	55                   	push   ebp
c001271a:	89 e5                	mov    ebp,esp
c001271c:	83 ec 14             	sub    esp,0x14
c001271f:	68 13 b1 02 c0       	push   0xc002b113
c0012724:	e8 52 01 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0012729:	58                   	pop    eax
c001272a:	5a                   	pop    edx
c001272b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001272e:	68 63 b1 02 c0       	push   0xc002b163
c0012733:	e8 43 01 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0012738:	59                   	pop    ecx
c0012739:	58                   	pop    eax
c001273a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001273d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012740:	68 63 b1 02 c0       	push   0xc002b163
c0012745:	e8 31 01 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001274a:	5a                   	pop    edx
c001274b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001274e:	59                   	pop    ecx
c001274f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012751:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012754:	68 63 b1 02 c0       	push   0xc002b163
c0012759:	e8 1d 01 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001275e:	5a                   	pop    edx
c001275f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012762:	59                   	pop    ecx
c0012763:	8b 00                	mov    eax,DWORD PTR [eax]
c0012765:	8b 00                	mov    eax,DWORD PTR [eax]
c0012767:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001276a:	68 63 b1 02 c0       	push   0xc002b163
c001276f:	e8 07 01 00 00       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0012774:	c7 04 24 6b b1 02 c0 	mov    DWORD PTR [esp],0xc002b16b
c001277b:	e8 31 7b 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0012780:	83 c4 10             	add    esp,0x10
c0012783:	c9                   	leave  
c0012784:	c3                   	ret    

c0012785 <__cxa_pure_virtual>:
c0012785:	83 ec 18             	sub    esp,0x18
c0012788:	68 83 b1 02 c0       	push   0xc002b183
c001278d:	e8 1f 7b 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0012792:	83 c4 1c             	add    esp,0x1c
c0012795:	c3                   	ret    

c0012796 <operator new[](unsigned long)>:
c0012796:	e9 f1 d0 ff ff       	jmp    c000f88c <malloc>

c001279b <operator delete(void*, unsigned long)>:
c001279b:	e9 0c d1 ff ff       	jmp    c000f8ac <rfree>

c00127a0 <operator delete[](void*)>:
c00127a0:	e9 07 d1 ff ff       	jmp    c000f8ac <rfree>

c00127a5 <operator delete[](void*, unsigned long)>:
c00127a5:	e9 02 d1 ff ff       	jmp    c000f8ac <rfree>

c00127aa <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00127aa:	57                   	push   edi
c00127ab:	b9 3f 00 00 00       	mov    ecx,0x3f
c00127b0:	56                   	push   esi
c00127b1:	be 98 b1 02 c0       	mov    esi,0xc002b198
c00127b6:	53                   	push   ebx
c00127b7:	83 ec 40             	sub    esp,0x40
c00127ba:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00127be:	8d 7c 24 01          	lea    edi,[esp+0x1]
c00127c2:	fc                   	cld    
c00127c3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00127c5:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c00127c9:	83 f9 3e             	cmp    ecx,0x3e
c00127cc:	7e 05                	jle    c00127d3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c00127ce:	b9 3e 00 00 00       	mov    ecx,0x3e
c00127d3:	89 df                	mov    edi,ebx
c00127d5:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c00127d9:	eb 02                	jmp    c00127dd <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c00127db:	89 c7                	mov    edi,eax
c00127dd:	31 d2                	xor    edx,edx
c00127df:	46                   	inc    esi
c00127e0:	89 f8                	mov    eax,edi
c00127e2:	f7 f1                	div    ecx
c00127e4:	39 cf                	cmp    edi,ecx
c00127e6:	73 f3                	jae    c00127db <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c00127e8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00127eb:	eb 02                	jmp    c00127ef <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c00127ed:	89 c3                	mov    ebx,eax
c00127ef:	31 d2                	xor    edx,edx
c00127f1:	4e                   	dec    esi
c00127f2:	89 d8                	mov    eax,ebx
c00127f4:	f7 f1                	div    ecx
c00127f6:	39 cb                	cmp    ebx,ecx
c00127f8:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c00127fc:	88 16                	mov    BYTE PTR [esi],dl
c00127fe:	73 ed                	jae    c00127ed <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012800:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012804:	83 c4 40             	add    esp,0x40
c0012807:	5b                   	pop    ebx
c0012808:	5e                   	pop    esi
c0012809:	5f                   	pop    edi
c001280a:	c3                   	ret    

c001280b <Dbg::logc(char)>:
c001280b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001280f:	ba fd 03 00 00       	mov    edx,0x3fd
c0012814:	ec                   	in     al,dx
c0012815:	a8 20                	test   al,0x20
c0012817:	74 fb                	je     c0012814 <Dbg::logc(char)+0x9>
c0012819:	ba f8 03 00 00       	mov    edx,0x3f8
c001281e:	88 c8                	mov    al,cl
c0012820:	ee                   	out    dx,al
c0012821:	c3                   	ret    

c0012822 <Dbg::logs(char*)>:
c0012822:	53                   	push   ebx
c0012823:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012827:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001282a:	84 c0                	test   al,al
c001282c:	74 0f                	je     c001283d <Dbg::logs(char*)+0x1b>
c001282e:	50                   	push   eax
c001282f:	43                   	inc    ebx
c0012830:	e8 d6 ff ff ff       	call   c001280b <Dbg::logc(char)>
c0012835:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012838:	5a                   	pop    edx
c0012839:	84 c0                	test   al,al
c001283b:	75 f1                	jne    c001282e <Dbg::logs(char*)+0xc>
c001283d:	5b                   	pop    ebx
c001283e:	c3                   	ret    

c001283f <Dbg::logWriteInt(unsigned int)>:
c001283f:	83 ec 10             	sub    esp,0x10
c0012842:	6a 0a                	push   0xa
c0012844:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012848:	50                   	push   eax
c0012849:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001284d:	e8 58 ff ff ff       	call   c00127aa <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012852:	50                   	push   eax
c0012853:	e8 ca ff ff ff       	call   c0012822 <Dbg::logs(char*)>
c0012858:	83 c4 20             	add    esp,0x20
c001285b:	c3                   	ret    

c001285c <Dbg::logWriteIntBase(unsigned int, int)>:
c001285c:	83 ec 10             	sub    esp,0x10
c001285f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012863:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012867:	50                   	push   eax
c0012868:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001286c:	e8 39 ff ff ff       	call   c00127aa <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012871:	50                   	push   eax
c0012872:	e8 ab ff ff ff       	call   c0012822 <Dbg::logs(char*)>
c0012877:	83 c4 20             	add    esp,0x20
c001287a:	c3                   	ret    

c001287b <Dbg::kprintf(char const*, ...)>:
c001287b:	55                   	push   ebp
c001287c:	57                   	push   edi
c001287d:	56                   	push   esi
c001287e:	53                   	push   ebx
c001287f:	83 ec 0c             	sub    esp,0xc
c0012882:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012886:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001288a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001288e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012891:	84 c0                	test   al,al
c0012893:	74 4a                	je     c00128df <Dbg::kprintf(char const*, ...)+0x64>
c0012895:	31 db                	xor    ebx,ebx
c0012897:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001289a:	3c 25                	cmp    al,0x25
c001289c:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c001289f:	0f 85 e4 00 00 00    	jne    c0012989 <Dbg::kprintf(char const*, ...)+0x10e>
c00128a5:	83 c3 02             	add    ebx,0x2
c00128a8:	8a 07                	mov    al,BYTE PTR [edi]
c00128aa:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00128ad:	83 e8 25             	sub    eax,0x25
c00128b0:	3c 53                	cmp    al,0x53
c00128b2:	0f 87 ba 00 00 00    	ja     c0012972 <Dbg::kprintf(char const*, ...)+0xf7>
c00128b8:	0f b6 c0             	movzx  eax,al
c00128bb:	ff 24 85 d8 b1 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4e28]
c00128c2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00128c6:	89 c8                	mov    eax,ecx
c00128c8:	83 c1 04             	add    ecx,0x4
c00128cb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00128cf:	ff 30                	push   DWORD PTR [eax]
c00128d1:	e8 4c ff ff ff       	call   c0012822 <Dbg::logs(char*)>
c00128d6:	58                   	pop    eax
c00128d7:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c00128db:	84 c0                	test   al,al
c00128dd:	75 b8                	jne    c0012897 <Dbg::kprintf(char const*, ...)+0x1c>
c00128df:	83 c4 0c             	add    esp,0xc
c00128e2:	5b                   	pop    ebx
c00128e3:	5e                   	pop    esi
c00128e4:	5f                   	pop    edi
c00128e5:	5d                   	pop    ebp
c00128e6:	c3                   	ret    
c00128e7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00128eb:	89 d0                	mov    eax,edx
c00128ed:	83 c2 04             	add    edx,0x4
c00128f0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00128f4:	ff 30                	push   DWORD PTR [eax]
c00128f6:	e8 44 ff ff ff       	call   c001283f <Dbg::logWriteInt(unsigned int)>
c00128fb:	58                   	pop    eax
c00128fc:	eb d9                	jmp    c00128d7 <Dbg::kprintf(char const*, ...)+0x5c>
c00128fe:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012902:	89 d0                	mov    eax,edx
c0012904:	83 c2 04             	add    edx,0x4
c0012907:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001290a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001290e:	50                   	push   eax
c001290f:	e8 f7 fe ff ff       	call   c001280b <Dbg::logc(char)>
c0012914:	58                   	pop    eax
c0012915:	eb c0                	jmp    c00128d7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012917:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001291b:	89 c8                	mov    eax,ecx
c001291d:	83 c1 04             	add    ecx,0x4
c0012920:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012924:	ff 30                	push   DWORD PTR [eax]
c0012926:	e8 14 ff ff ff       	call   c001283f <Dbg::logWriteInt(unsigned int)>
c001292b:	5f                   	pop    edi
c001292c:	eb a9                	jmp    c00128d7 <Dbg::kprintf(char const*, ...)+0x5c>
c001292e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012932:	89 c8                	mov    eax,ecx
c0012934:	83 c1 04             	add    ecx,0x4
c0012937:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001293b:	6a 10                	push   0x10
c001293d:	ff 30                	push   DWORD PTR [eax]
c001293f:	e8 18 ff ff ff       	call   c001285c <Dbg::logWriteIntBase(unsigned int, int)>
c0012944:	59                   	pop    ecx
c0012945:	5f                   	pop    edi
c0012946:	eb 8f                	jmp    c00128d7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012948:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001294c:	89 d0                	mov    eax,edx
c001294e:	83 c2 08             	add    edx,0x8
c0012951:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012955:	6a 10                	push   0x10
c0012957:	ff 30                	push   DWORD PTR [eax]
c0012959:	e8 fe fe ff ff       	call   c001285c <Dbg::logWriteIntBase(unsigned int, int)>
c001295e:	58                   	pop    eax
c001295f:	5a                   	pop    edx
c0012960:	e9 72 ff ff ff       	jmp    c00128d7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012965:	6a 25                	push   0x25
c0012967:	e8 9f fe ff ff       	call   c001280b <Dbg::logc(char)>
c001296c:	58                   	pop    eax
c001296d:	e9 65 ff ff ff       	jmp    c00128d7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012972:	6a 25                	push   0x25
c0012974:	e8 92 fe ff ff       	call   c001280b <Dbg::logc(char)>
c0012979:	0f be 07             	movsx  eax,BYTE PTR [edi]
c001297c:	50                   	push   eax
c001297d:	e8 89 fe ff ff       	call   c001280b <Dbg::logc(char)>
c0012982:	5a                   	pop    edx
c0012983:	59                   	pop    ecx
c0012984:	e9 4e ff ff ff       	jmp    c00128d7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012989:	50                   	push   eax
c001298a:	89 eb                	mov    ebx,ebp
c001298c:	e8 7a fe ff ff       	call   c001280b <Dbg::logc(char)>
c0012991:	89 fd                	mov    ebp,edi
c0012993:	58                   	pop    eax
c0012994:	e9 3e ff ff ff       	jmp    c00128d7 <Dbg::kprintf(char const*, ...)+0x5c>
c0012999:	90                   	nop

c001299a <File::read(unsigned long long, void*, int*)>:
c001299a:	53                   	push   ebx
c001299b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001299f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129a3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129aa:	3c 19                	cmp    al,0x19
c00129ac:	77 35                	ja     c00129e3 <File::read(unsigned long long, void*, int*)+0x49>
c00129ae:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c00129b5:	85 c0                	test   eax,eax
c00129b7:	74 2a                	je     c00129e3 <File::read(unsigned long long, void*, int*)+0x49>
c00129b9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129bf:	85 c0                	test   eax,eax
c00129c1:	74 20                	je     c00129e3 <File::read(unsigned long long, void*, int*)+0x49>
c00129c3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129c7:	74 21                	je     c00129ea <File::read(unsigned long long, void*, int*)+0x50>
c00129c9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00129cb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129cf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129dd:	5b                   	pop    ebx
c00129de:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c00129e1:	ff e0                	jmp    eax
c00129e3:	b8 0b 00 00 00       	mov    eax,0xb
c00129e8:	eb 05                	jmp    c00129ef <File::read(unsigned long long, void*, int*)+0x55>
c00129ea:	b8 05 00 00 00       	mov    eax,0x5
c00129ef:	5b                   	pop    ebx
c00129f0:	c3                   	ret    
c00129f1:	90                   	nop

c00129f2 <File::write(unsigned long long, void*, int*)>:
c00129f2:	53                   	push   ebx
c00129f3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00129fb:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a02:	3c 19                	cmp    al,0x19
c0012a04:	77 35                	ja     c0012a3b <File::write(unsigned long long, void*, int*)+0x49>
c0012a06:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c0012a0d:	85 c0                	test   eax,eax
c0012a0f:	74 2a                	je     c0012a3b <File::write(unsigned long long, void*, int*)+0x49>
c0012a11:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a17:	85 c0                	test   eax,eax
c0012a19:	74 20                	je     c0012a3b <File::write(unsigned long long, void*, int*)+0x49>
c0012a1b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a1f:	74 21                	je     c0012a42 <File::write(unsigned long long, void*, int*)+0x50>
c0012a21:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a23:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a27:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a35:	5b                   	pop    ebx
c0012a36:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012a39:	ff e0                	jmp    eax
c0012a3b:	b8 0b 00 00 00       	mov    eax,0xb
c0012a40:	eb 05                	jmp    c0012a47 <File::write(unsigned long long, void*, int*)+0x55>
c0012a42:	b8 05 00 00 00       	mov    eax,0x5
c0012a47:	5b                   	pop    ebx
c0012a48:	c3                   	ret    
c0012a49:	90                   	nop

c0012a4a <Directory::read(unsigned long long, void*, int*)>:
c0012a4a:	53                   	push   ebx
c0012a4b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012a4f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012a53:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012a5a:	3c 19                	cmp    al,0x19
c0012a5c:	77 35                	ja     c0012a93 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a5e:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c0012a65:	85 c0                	test   eax,eax
c0012a67:	74 2a                	je     c0012a93 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a69:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012a6f:	85 c0                	test   eax,eax
c0012a71:	74 20                	je     c0012a93 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012a73:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012a77:	74 21                	je     c0012a9a <Directory::read(unsigned long long, void*, int*)+0x50>
c0012a79:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012a7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012a7f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012a85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012a89:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a8d:	5b                   	pop    ebx
c0012a8e:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012a91:	ff e0                	jmp    eax
c0012a93:	b8 0b 00 00 00       	mov    eax,0xb
c0012a98:	eb 05                	jmp    c0012a9f <Directory::read(unsigned long long, void*, int*)+0x55>
c0012a9a:	b8 05 00 00 00       	mov    eax,0x5
c0012a9f:	5b                   	pop    ebx
c0012aa0:	c3                   	ret    
c0012aa1:	90                   	nop

c0012aa2 <Directory::write(unsigned long long, void*, int*)>:
c0012aa2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012aa6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012aad:	b8 0b 00 00 00       	mov    eax,0xb
c0012ab2:	80 fa 19             	cmp    dl,0x19
c0012ab5:	77 18                	ja     c0012acf <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012ab7:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c0012abe:	85 d2                	test   edx,edx
c0012ac0:	74 0d                	je     c0012acf <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012ac2:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012ac9:	19 c0                	sbb    eax,eax
c0012acb:	83 e0 0a             	and    eax,0xa
c0012ace:	40                   	inc    eax
c0012acf:	c3                   	ret    

c0012ad0 <File::isAtty()>:
c0012ad0:	31 c0                	xor    eax,eax
c0012ad2:	c3                   	ret    
c0012ad3:	90                   	nop

c0012ad4 <Directory::isAtty()>:
c0012ad4:	31 c0                	xor    eax,eax
c0012ad6:	c3                   	ret    
c0012ad7:	90                   	nop

c0012ad8 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012ad8:	b8 0a 00 00 00       	mov    eax,0xa
c0012add:	c3                   	ret    

c0012ade <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012ade:	b8 0a 00 00 00       	mov    eax,0xa
c0012ae3:	c3                   	ret    

c0012ae4 <Filesystem::getFileFirstSector(char const*)>:
c0012ae4:	31 c0                	xor    eax,eax
c0012ae6:	31 d2                	xor    edx,edx
c0012ae8:	c3                   	ret    
c0012ae9:	90                   	nop

c0012aea <File::~File()>:
c0012aea:	83 ec 0c             	sub    esp,0xc
c0012aed:	ba 98 b3 02 c0       	mov    edx,0xc002b398
c0012af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012af6:	89 10                	mov    DWORD PTR [eax],edx
c0012af8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012afc:	83 ec 0c             	sub    esp,0xc
c0012aff:	50                   	push   eax
c0012b00:	e8 0f e7 ff ff       	call   c0011214 <UnixFile::~UnixFile()>
c0012b05:	83 c4 10             	add    esp,0x10
c0012b08:	90                   	nop
c0012b09:	83 c4 0c             	add    esp,0xc
c0012b0c:	c3                   	ret    
c0012b0d:	90                   	nop

c0012b0e <File::~File()>:
c0012b0e:	83 ec 0c             	sub    esp,0xc
c0012b11:	83 ec 0c             	sub    esp,0xc
c0012b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b18:	e8 cd ff ff ff       	call   c0012aea <File::~File()>
c0012b1d:	83 c4 10             	add    esp,0x10
c0012b20:	83 ec 08             	sub    esp,0x8
c0012b23:	68 14 01 00 00       	push   0x114
c0012b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b2c:	e8 6a fc ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0012b31:	83 c4 10             	add    esp,0x10
c0012b34:	83 c4 0c             	add    esp,0xc
c0012b37:	c3                   	ret    

c0012b38 <Directory::~Directory()>:
c0012b38:	83 ec 0c             	sub    esp,0xc
c0012b3b:	ba b4 b3 02 c0       	mov    edx,0xc002b3b4
c0012b40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b44:	89 10                	mov    DWORD PTR [eax],edx
c0012b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b4a:	83 ec 0c             	sub    esp,0xc
c0012b4d:	50                   	push   eax
c0012b4e:	e8 c1 e6 ff ff       	call   c0011214 <UnixFile::~UnixFile()>
c0012b53:	83 c4 10             	add    esp,0x10
c0012b56:	90                   	nop
c0012b57:	83 c4 0c             	add    esp,0xc
c0012b5a:	c3                   	ret    
c0012b5b:	90                   	nop

c0012b5c <Directory::~Directory()>:
c0012b5c:	83 ec 0c             	sub    esp,0xc
c0012b5f:	83 ec 0c             	sub    esp,0xc
c0012b62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b66:	e8 cd ff ff ff       	call   c0012b38 <Directory::~Directory()>
c0012b6b:	83 c4 10             	add    esp,0x10
c0012b6e:	83 ec 08             	sub    esp,0x8
c0012b71:	68 14 01 00 00       	push   0x114
c0012b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b7a:	e8 1c fc ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0012b7f:	83 c4 10             	add    esp,0x10
c0012b82:	83 c4 0c             	add    esp,0xc
c0012b85:	c3                   	ret    

c0012b86 <Filesystem::Filesystem()>:
c0012b86:	ba 30 b3 02 c0       	mov    edx,0xc002b330
c0012b8b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b8f:	89 10                	mov    DWORD PTR [eax],edx
c0012b91:	8b 15 b4 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efb4
c0012b97:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b9b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012b9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba2:	a3 b4 ef 02 c0       	mov    ds:0xc002efb4,eax
c0012ba7:	90                   	nop
c0012ba8:	c3                   	ret    
c0012ba9:	90                   	nop

c0012baa <Filesystem::~Filesystem()>:
c0012baa:	ba 30 b3 02 c0       	mov    edx,0xc002b330
c0012baf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bb3:	89 10                	mov    DWORD PTR [eax],edx
c0012bb5:	90                   	nop
c0012bb6:	c3                   	ret    
c0012bb7:	90                   	nop

c0012bb8 <Filesystem::~Filesystem()>:
c0012bb8:	83 ec 0c             	sub    esp,0xc
c0012bbb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012bbf:	e8 e6 ff ff ff       	call   c0012baa <Filesystem::~Filesystem()>
c0012bc4:	83 c4 04             	add    esp,0x4
c0012bc7:	83 ec 08             	sub    esp,0x8
c0012bca:	6a 08                	push   0x8
c0012bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012bd0:	e8 c6 fb ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0012bd5:	83 c4 10             	add    esp,0x10
c0012bd8:	83 c4 0c             	add    esp,0xc
c0012bdb:	c3                   	ret    

c0012bdc <Fs::getcwd(Process*, char*, int)>:
c0012bdc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012be0:	31 c0                	xor    eax,eax
c0012be2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012be5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012be9:	7d 15                	jge    c0012c00 <Fs::getcwd(Process*, char*, int)+0x24>
c0012beb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bef:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012bf6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012bf9:	84 c9                	test   cl,cl
c0012bfb:	74 06                	je     c0012c03 <Fs::getcwd(Process*, char*, int)+0x27>
c0012bfd:	40                   	inc    eax
c0012bfe:	eb e2                	jmp    c0012be2 <Fs::getcwd(Process*, char*, int)+0x6>
c0012c00:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c03:	31 c0                	xor    eax,eax
c0012c05:	c3                   	ret    

c0012c06 <Fs::initVFS()>:
c0012c06:	83 ec 18             	sub    esp,0x18
c0012c09:	6a 08                	push   0x8
c0012c0b:	e8 7c cc ff ff       	call   c000f88c <malloc>
c0012c10:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c13:	e8 08 e5 00 00       	call   c0021120 <FAT::FAT()>
c0012c18:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012c1f:	e8 68 cc ff ff       	call   c000f88c <malloc>
c0012c24:	89 04 24             	mov    DWORD PTR [esp],eax
c0012c27:	e8 30 f7 00 00       	call   c002235c <ISO9660::ISO9660()>
c0012c2c:	83 c4 1c             	add    esp,0x1c
c0012c2f:	c3                   	ret    

c0012c30 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012c30:	55                   	push   ebp
c0012c31:	57                   	push   edi
c0012c32:	56                   	push   esi
c0012c33:	53                   	push   ebx
c0012c34:	81 ec 10 04 00 00    	sub    esp,0x410
c0012c3a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012c41:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012c48:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012c4f:	68 00 04 00 00       	push   0x400
c0012c54:	6a 00                	push   0x0
c0012c56:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012c5a:	56                   	push   esi
c0012c5b:	e8 f0 da fe ff       	call   c0000750 <memset>
c0012c60:	83 c4 10             	add    esp,0x10
c0012c63:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012c67:	75 0b                	jne    c0012c74 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012c69:	50                   	push   eax
c0012c6a:	50                   	push   eax
c0012c6b:	57                   	push   edi
c0012c6c:	56                   	push   esi
c0012c6d:	e8 9a db fe ff       	call   c000080c <strcpy>
c0012c72:	eb 41                	jmp    c0012cb5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012c74:	8a 07                	mov    al,BYTE PTR [edi]
c0012c76:	3c 5c                	cmp    al,0x5c
c0012c78:	74 04                	je     c0012c7e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012c7a:	3c 2f                	cmp    al,0x2f
c0012c7c:	75 18                	jne    c0012c96 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012c7e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012c81:	3c 60                	cmp    al,0x60
c0012c83:	7e 03                	jle    c0012c88 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012c85:	83 e8 20             	sub    eax,0x20
c0012c88:	88 04 24             	mov    BYTE PTR [esp],al
c0012c8b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012c92:	50                   	push   eax
c0012c93:	50                   	push   eax
c0012c94:	eb 18                	jmp    c0012cae <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012c96:	50                   	push   eax
c0012c97:	50                   	push   eax
c0012c98:	55                   	push   ebp
c0012c99:	56                   	push   esi
c0012c9a:	e8 6d db fe ff       	call   c000080c <strcpy>
c0012c9f:	5a                   	pop    edx
c0012ca0:	59                   	pop    ecx
c0012ca1:	68 0d cb 02 c0       	push   0xc002cb0d
c0012ca6:	56                   	push   esi
c0012ca7:	e8 a0 dc fe ff       	call   c000094c <strcat>
c0012cac:	5d                   	pop    ebp
c0012cad:	58                   	pop    eax
c0012cae:	57                   	push   edi
c0012caf:	56                   	push   esi
c0012cb0:	e8 97 dc fe ff       	call   c000094c <strcat>
c0012cb5:	83 c4 10             	add    esp,0x10
c0012cb8:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012cbb:	3c 60                	cmp    al,0x60
c0012cbd:	7e 03                	jle    c0012cc2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012cbf:	83 e8 20             	sub    eax,0x20
c0012cc2:	88 04 24             	mov    BYTE PTR [esp],al
c0012cc5:	88 03                	mov    BYTE PTR [ebx],al
c0012cc7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012cce:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012cd4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012cd8:	bf 03 00 00 00       	mov    edi,0x3
c0012cdd:	b8 03 00 00 00       	mov    eax,0x3
c0012ce2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012ce5:	84 d2                	test   dl,dl
c0012ce7:	0f 84 91 00 00 00    	je     c0012d7e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012ced:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012cf0:	80 fa 5c             	cmp    dl,0x5c
c0012cf3:	74 05                	je     c0012cfa <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012cf5:	80 fa 2f             	cmp    dl,0x2f
c0012cf8:	75 12                	jne    c0012d0c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012cfa:	89 c5                	mov    ebp,eax
c0012cfc:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012d01:	74 09                	je     c0012d0c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012d03:	40                   	inc    eax
c0012d04:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012d08:	89 cf                	mov    edi,ecx
c0012d0a:	eb d6                	jmp    c0012ce2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012d0c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012d11:	75 5b                	jne    c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d13:	80 fa 2e             	cmp    dl,0x2e
c0012d16:	75 56                	jne    c0012d6e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0012d18:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012d1c:	74 19                	je     c0012d37 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c0012d1e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d23:	74 53                	je     c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d25:	89 f9                	mov    ecx,edi
c0012d27:	41                   	inc    ecx
c0012d28:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d2b:	80 fa 2f             	cmp    dl,0x2f
c0012d2e:	74 f7                	je     c0012d27 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d30:	80 fa 5c             	cmp    dl,0x5c
c0012d33:	74 f2                	je     c0012d27 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0012d35:	eb d1                	jmp    c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d37:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012d3c:	74 3a                	je     c0012d78 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0012d3e:	83 f8 03             	cmp    eax,0x3
c0012d41:	74 c5                	je     c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d43:	41                   	inc    ecx
c0012d44:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012d47:	80 fa 2f             	cmp    dl,0x2f
c0012d4a:	74 f7                	je     c0012d43 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d4c:	80 fa 5c             	cmp    dl,0x5c
c0012d4f:	74 f2                	je     c0012d43 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0012d51:	48                   	dec    eax
c0012d52:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d56:	75 06                	jne    c0012d5e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d58:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d5c:	eb f3                	jmp    c0012d51 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c0012d5e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012d62:	74 07                	je     c0012d6b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0012d64:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d68:	48                   	dec    eax
c0012d69:	eb f3                	jmp    c0012d5e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0012d6b:	40                   	inc    eax
c0012d6c:	eb 9a                	jmp    c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d6e:	80 fa 2f             	cmp    dl,0x2f
c0012d71:	74 95                	je     c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d73:	80 fa 5c             	cmp    dl,0x5c
c0012d76:	74 90                	je     c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d78:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012d7b:	40                   	inc    eax
c0012d7c:	eb 8a                	jmp    c0012d08 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0012d7e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012d82:	83 ec 0c             	sub    esp,0xc
c0012d85:	53                   	push   ebx
c0012d86:	e8 e1 d9 fe ff       	call   c000076c <strlen>
c0012d8b:	83 c4 10             	add    esp,0x10
c0012d8e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012d93:	75 26                	jne    c0012dbb <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0012d95:	83 ec 0c             	sub    esp,0xc
c0012d98:	53                   	push   ebx
c0012d99:	e8 ce d9 fe ff       	call   c000076c <strlen>
c0012d9e:	83 c4 10             	add    esp,0x10
c0012da1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012da6:	74 26                	je     c0012dce <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0012da8:	83 ec 0c             	sub    esp,0xc
c0012dab:	53                   	push   ebx
c0012dac:	e8 bb d9 fe ff       	call   c000076c <strlen>
c0012db1:	83 c4 10             	add    esp,0x10
c0012db4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012db9:	eb c7                	jmp    c0012d82 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0012dbb:	83 ec 0c             	sub    esp,0xc
c0012dbe:	53                   	push   ebx
c0012dbf:	e8 a8 d9 fe ff       	call   c000076c <strlen>
c0012dc4:	83 c4 10             	add    esp,0x10
c0012dc7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012dcc:	74 c7                	je     c0012d95 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c0012dce:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012dd4:	5b                   	pop    ebx
c0012dd5:	5e                   	pop    esi
c0012dd6:	5f                   	pop    edi
c0012dd7:	5d                   	pop    ebp
c0012dd8:	c3                   	ret    
c0012dd9:	90                   	nop

c0012dda <File::File(char const*, Process*)>:
c0012dda:	83 ec 0c             	sub    esp,0xc
c0012ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de1:	83 ec 08             	sub    esp,0x8
c0012de4:	6a 00                	push   0x0
c0012de6:	50                   	push   eax
c0012de7:	e8 46 e2 ff ff       	call   c0011032 <UnixFile::UnixFile(int)>
c0012dec:	83 c4 10             	add    esp,0x10
c0012def:	ba 98 b3 02 c0       	mov    edx,0xc002b398
c0012df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df8:	89 10                	mov    DWORD PTR [eax],edx
c0012dfa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012dfe:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e08:	83 c0 0d             	add    eax,0xd
c0012e0b:	83 ec 04             	sub    esp,0x4
c0012e0e:	52                   	push   edx
c0012e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e13:	50                   	push   eax
c0012e14:	e8 17 fe ff ff       	call   c0012c30 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012e19:	83 c4 10             	add    esp,0x10
c0012e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e20:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012e23:	8d 50 bf             	lea    edx,[eax-0x41]
c0012e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e2a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e34:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e38:	90                   	nop
c0012e39:	83 c4 0c             	add    esp,0xc
c0012e3c:	c3                   	ret    
c0012e3d:	90                   	nop

c0012e3e <File::open(FileOpenMode)>:
c0012e3e:	53                   	push   ebx
c0012e3f:	b8 0b 00 00 00       	mov    eax,0xb
c0012e44:	83 ec 08             	sub    esp,0x8
c0012e47:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e4b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012e52:	80 fa 19             	cmp    dl,0x19
c0012e55:	77 40                	ja     c0012e97 <File::open(FileOpenMode)+0x59>
c0012e57:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c0012e5e:	85 d2                	test   edx,edx
c0012e60:	74 35                	je     c0012e97 <File::open(FileOpenMode)+0x59>
c0012e62:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e68:	85 d2                	test   edx,edx
c0012e6a:	74 2b                	je     c0012e97 <File::open(FileOpenMode)+0x59>
c0012e6c:	b8 06 00 00 00       	mov    eax,0x6
c0012e71:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012e75:	75 20                	jne    c0012e97 <File::open(FileOpenMode)+0x59>
c0012e77:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e79:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012e83:	51                   	push   ecx
c0012e84:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e87:	51                   	push   ecx
c0012e88:	52                   	push   edx
c0012e89:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012e8c:	83 c4 10             	add    esp,0x10
c0012e8f:	85 c0                	test   eax,eax
c0012e91:	75 04                	jne    c0012e97 <File::open(FileOpenMode)+0x59>
c0012e93:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012e97:	83 c4 08             	add    esp,0x8
c0012e9a:	5b                   	pop    ebx
c0012e9b:	c3                   	ret    

c0012e9c <File::close()>:
c0012e9c:	53                   	push   ebx
c0012e9d:	b8 0b 00 00 00       	mov    eax,0xb
c0012ea2:	83 ec 08             	sub    esp,0x8
c0012ea5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012ea9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012eb0:	80 fa 19             	cmp    dl,0x19
c0012eb3:	77 41                	ja     c0012ef6 <File::close()+0x5a>
c0012eb5:	8b 1c 95 40 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0bc0]
c0012ebc:	85 db                	test   ebx,ebx
c0012ebe:	74 36                	je     c0012ef6 <File::close()+0x5a>
c0012ec0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ec7:	74 2d                	je     c0012ef6 <File::close()+0x5a>
c0012ec9:	b8 05 00 00 00       	mov    eax,0x5
c0012ece:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012ed2:	74 22                	je     c0012ef6 <File::close()+0x5a>
c0012ed4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012ed8:	8b 04 95 40 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0bc0]
c0012edf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012ee5:	53                   	push   ebx
c0012ee6:	53                   	push   ebx
c0012ee7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ee9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012eef:	50                   	push   eax
c0012ef0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012ef3:	83 c4 10             	add    esp,0x10
c0012ef6:	83 c4 08             	add    esp,0x8
c0012ef9:	5b                   	pop    ebx
c0012efa:	c3                   	ret    
c0012efb:	90                   	nop

c0012efc <File::seek(unsigned long long)>:
c0012efc:	56                   	push   esi
c0012efd:	53                   	push   ebx
c0012efe:	b8 0b 00 00 00       	mov    eax,0xb
c0012f03:	51                   	push   ecx
c0012f04:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f08:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f0c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012f13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012f17:	80 fa 19             	cmp    dl,0x19
c0012f1a:	77 31                	ja     c0012f4d <File::seek(unsigned long long)+0x51>
c0012f1c:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c0012f23:	85 d2                	test   edx,edx
c0012f25:	74 26                	je     c0012f4d <File::seek(unsigned long long)+0x51>
c0012f27:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f2d:	85 d2                	test   edx,edx
c0012f2f:	74 1c                	je     c0012f4d <File::seek(unsigned long long)+0x51>
c0012f31:	b8 05 00 00 00       	mov    eax,0x5
c0012f36:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012f3a:	74 11                	je     c0012f4d <File::seek(unsigned long long)+0x51>
c0012f3c:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f3e:	53                   	push   ebx
c0012f3f:	51                   	push   ecx
c0012f40:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012f46:	52                   	push   edx
c0012f47:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012f4a:	83 c4 10             	add    esp,0x10
c0012f4d:	5a                   	pop    edx
c0012f4e:	5b                   	pop    ebx
c0012f4f:	5e                   	pop    esi
c0012f50:	c3                   	ret    
c0012f51:	90                   	nop

c0012f52 <File::tell(unsigned long long*)>:
c0012f52:	83 ec 0c             	sub    esp,0xc
c0012f55:	b8 0b 00 00 00       	mov    eax,0xb
c0012f5a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012f5e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012f65:	80 fa 19             	cmp    dl,0x19
c0012f68:	77 34                	ja     c0012f9e <File::tell(unsigned long long*)+0x4c>
c0012f6a:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c0012f71:	85 d2                	test   edx,edx
c0012f73:	74 29                	je     c0012f9e <File::tell(unsigned long long*)+0x4c>
c0012f75:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012f7b:	85 d2                	test   edx,edx
c0012f7d:	74 1f                	je     c0012f9e <File::tell(unsigned long long*)+0x4c>
c0012f7f:	b8 05 00 00 00       	mov    eax,0x5
c0012f84:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012f88:	74 14                	je     c0012f9e <File::tell(unsigned long long*)+0x4c>
c0012f8a:	50                   	push   eax
c0012f8b:	8b 02                	mov    eax,DWORD PTR [edx]
c0012f8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f91:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012f97:	52                   	push   edx
c0012f98:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012f9b:	83 c4 10             	add    esp,0x10
c0012f9e:	83 c4 0c             	add    esp,0xc
c0012fa1:	c3                   	ret    

c0012fa2 <File::rewind()>:
c0012fa2:	83 ec 10             	sub    esp,0x10
c0012fa5:	6a 00                	push   0x0
c0012fa7:	6a 00                	push   0x0
c0012fa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fad:	e8 4a ff ff ff       	call   c0012efc <File::seek(unsigned long long)>
c0012fb2:	83 c4 1c             	add    esp,0x1c
c0012fb5:	c3                   	ret    

c0012fb6 <File::unlink()>:
c0012fb6:	83 ec 0c             	sub    esp,0xc
c0012fb9:	b8 0b 00 00 00       	mov    eax,0xb
c0012fbe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fc2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fc9:	80 f9 19             	cmp    cl,0x19
c0012fcc:	77 2f                	ja     c0012ffd <File::unlink()+0x47>
c0012fce:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0012fd5:	85 c9                	test   ecx,ecx
c0012fd7:	74 24                	je     c0012ffd <File::unlink()+0x47>
c0012fd9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fdf:	85 c9                	test   ecx,ecx
c0012fe1:	74 1a                	je     c0012ffd <File::unlink()+0x47>
c0012fe3:	b8 06 00 00 00       	mov    eax,0x6
c0012fe8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fec:	75 0f                	jne    c0012ffd <File::unlink()+0x47>
c0012fee:	83 c2 0d             	add    edx,0xd
c0012ff1:	50                   	push   eax
c0012ff2:	50                   	push   eax
c0012ff3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ff5:	52                   	push   edx
c0012ff6:	51                   	push   ecx
c0012ff7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012ffa:	83 c4 10             	add    esp,0x10
c0012ffd:	83 c4 0c             	add    esp,0xc
c0013000:	c3                   	ret    
c0013001:	90                   	nop

c0013002 <File::rename(char const*)>:
c0013002:	83 ec 0c             	sub    esp,0xc
c0013005:	b8 0b 00 00 00       	mov    eax,0xb
c001300a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001300e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013015:	80 f9 19             	cmp    cl,0x19
c0013018:	77 32                	ja     c001304c <File::rename(char const*)+0x4a>
c001301a:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013021:	85 c9                	test   ecx,ecx
c0013023:	74 27                	je     c001304c <File::rename(char const*)+0x4a>
c0013025:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001302b:	85 c9                	test   ecx,ecx
c001302d:	74 1d                	je     c001304c <File::rename(char const*)+0x4a>
c001302f:	b8 06 00 00 00       	mov    eax,0x6
c0013034:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013038:	75 12                	jne    c001304c <File::rename(char const*)+0x4a>
c001303a:	83 c2 0d             	add    edx,0xd
c001303d:	50                   	push   eax
c001303e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013040:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013044:	52                   	push   edx
c0013045:	51                   	push   ecx
c0013046:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013049:	83 c4 10             	add    esp,0x10
c001304c:	83 c4 0c             	add    esp,0xc
c001304f:	c3                   	ret    

c0013050 <File::chfatattr(unsigned char, unsigned char)>:
c0013050:	57                   	push   edi
c0013051:	b8 0b 00 00 00       	mov    eax,0xb
c0013056:	56                   	push   esi
c0013057:	53                   	push   ebx
c0013058:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001305c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013060:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013067:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001306b:	80 f9 19             	cmp    cl,0x19
c001306e:	77 37                	ja     c00130a7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013070:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013077:	85 c9                	test   ecx,ecx
c0013079:	74 2c                	je     c00130a7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001307b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013081:	85 c9                	test   ecx,ecx
c0013083:	74 22                	je     c00130a7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013085:	b8 06 00 00 00       	mov    eax,0x6
c001308a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001308e:	75 17                	jne    c00130a7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013090:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013092:	89 f0                	mov    eax,esi
c0013094:	83 c2 0d             	add    edx,0xd
c0013097:	0f b6 f0             	movzx  esi,al
c001309a:	0f b6 db             	movzx  ebx,bl
c001309d:	56                   	push   esi
c001309e:	53                   	push   ebx
c001309f:	52                   	push   edx
c00130a0:	51                   	push   ecx
c00130a1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c00130a4:	83 c4 10             	add    esp,0x10
c00130a7:	5b                   	pop    ebx
c00130a8:	5e                   	pop    esi
c00130a9:	5f                   	pop    edi
c00130aa:	c3                   	ret    
c00130ab:	90                   	nop

c00130ac <File::exists()>:
c00130ac:	83 ec 0c             	sub    esp,0xc
c00130af:	31 c0                	xor    eax,eax
c00130b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130b5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00130bc:	80 f9 19             	cmp    cl,0x19
c00130bf:	77 24                	ja     c00130e5 <File::exists()+0x39>
c00130c1:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c00130c8:	85 c9                	test   ecx,ecx
c00130ca:	74 19                	je     c00130e5 <File::exists()+0x39>
c00130cc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00130d2:	85 c9                	test   ecx,ecx
c00130d4:	74 0f                	je     c00130e5 <File::exists()+0x39>
c00130d6:	83 c2 0d             	add    edx,0xd
c00130d9:	50                   	push   eax
c00130da:	50                   	push   eax
c00130db:	8b 01                	mov    eax,DWORD PTR [ecx]
c00130dd:	52                   	push   edx
c00130de:	51                   	push   ecx
c00130df:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00130e2:	83 c4 10             	add    esp,0x10
c00130e5:	83 c4 0c             	add    esp,0xc
c00130e8:	c3                   	ret    
c00130e9:	90                   	nop

c00130ea <File::stat(unsigned long long*, bool*)>:
c00130ea:	56                   	push   esi
c00130eb:	53                   	push   ebx
c00130ec:	50                   	push   eax
c00130ed:	b8 0b 00 00 00       	mov    eax,0xb
c00130f2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00130f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00130fa:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013101:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013105:	80 f9 19             	cmp    cl,0x19
c0013108:	77 3d                	ja     c0013147 <File::stat(unsigned long long*, bool*)+0x5d>
c001310a:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013111:	85 c9                	test   ecx,ecx
c0013113:	74 32                	je     c0013147 <File::stat(unsigned long long*, bool*)+0x5d>
c0013115:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001311b:	85 c9                	test   ecx,ecx
c001311d:	74 28                	je     c0013147 <File::stat(unsigned long long*, bool*)+0x5d>
c001311f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013121:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013125:	74 13                	je     c001313a <File::stat(unsigned long long*, bool*)+0x50>
c0013127:	83 ec 04             	sub    esp,0x4
c001312a:	56                   	push   esi
c001312b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013131:	51                   	push   ecx
c0013132:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013135:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013138:	eb 0a                	jmp    c0013144 <File::stat(unsigned long long*, bool*)+0x5a>
c001313a:	53                   	push   ebx
c001313b:	83 c2 0d             	add    edx,0xd
c001313e:	56                   	push   esi
c001313f:	52                   	push   edx
c0013140:	51                   	push   ecx
c0013141:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013144:	83 c4 10             	add    esp,0x10
c0013147:	5a                   	pop    edx
c0013148:	5b                   	pop    ebx
c0013149:	5e                   	pop    esi
c001314a:	c3                   	ret    

c001314b <Fs::setcwd(Process*, char*)>:
c001314b:	55                   	push   ebp
c001314c:	57                   	push   edi
c001314d:	56                   	push   esi
c001314e:	53                   	push   ebx
c001314f:	81 ec 20 02 00 00    	sub    esp,0x220
c0013155:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001315c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013162:	57                   	push   edi
c0013163:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001316a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001316e:	56                   	push   esi
c001316f:	e8 bc fa ff ff       	call   c0012c30 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013174:	89 34 24             	mov    DWORD PTR [esp],esi
c0013177:	e8 f0 d5 fe ff       	call   c000076c <strlen>
c001317c:	83 c4 10             	add    esp,0x10
c001317f:	83 f8 02             	cmp    eax,0x2
c0013182:	77 17                	ja     c001319b <Fs::setcwd(Process*, char*)+0x50>
c0013184:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013189:	83 e8 41             	sub    eax,0x41
c001318c:	83 f8 19             	cmp    eax,0x19
c001318f:	76 24                	jbe    c00131b5 <Fs::setcwd(Process*, char*)+0x6a>
c0013191:	b8 03 00 00 00       	mov    eax,0x3
c0013196:	e9 e0 00 00 00       	jmp    c001327b <Fs::setcwd(Process*, char*)+0x130>
c001319b:	83 ec 0c             	sub    esp,0xc
c001319e:	56                   	push   esi
c001319f:	e8 c8 d5 fe ff       	call   c000076c <strlen>
c00131a4:	83 c4 10             	add    esp,0x10
c00131a7:	83 f8 03             	cmp    eax,0x3
c00131aa:	75 34                	jne    c00131e0 <Fs::setcwd(Process*, char*)+0x95>
c00131ac:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00131b1:	75 2d                	jne    c00131e0 <Fs::setcwd(Process*, char*)+0x95>
c00131b3:	eb cf                	jmp    c0013184 <Fs::setcwd(Process*, char*)+0x39>
c00131b5:	8b 14 85 40 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0bc0]
c00131bc:	b8 05 00 00 00       	mov    eax,0x5
c00131c1:	85 d2                	test   edx,edx
c00131c3:	0f 84 b2 00 00 00    	je     c001327b <Fs::setcwd(Process*, char*)+0x130>
c00131c9:	b8 06 00 00 00       	mov    eax,0x6
c00131ce:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00131d5:	0f 85 92 00 00 00    	jne    c001326d <Fs::setcwd(Process*, char*)+0x122>
c00131db:	e9 9b 00 00 00       	jmp    c001327b <Fs::setcwd(Process*, char*)+0x130>
c00131e0:	83 ec 0c             	sub    esp,0xc
c00131e3:	68 14 01 00 00       	push   0x114
c00131e8:	e8 9f c6 ff ff       	call   c000f88c <malloc>
c00131ed:	83 c4 0c             	add    esp,0xc
c00131f0:	89 c3                	mov    ebx,eax
c00131f2:	55                   	push   ebp
c00131f3:	56                   	push   esi
c00131f4:	50                   	push   eax
c00131f5:	e8 e0 fb ff ff       	call   c0012dda <File::File(char const*, Process*)>
c00131fa:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00131ff:	83 c4 0c             	add    esp,0xc
c0013202:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013206:	50                   	push   eax
c0013207:	8d 44 24 10          	lea    eax,[esp+0x10]
c001320b:	50                   	push   eax
c001320c:	53                   	push   ebx
c001320d:	e8 d8 fe ff ff       	call   c00130ea <File::stat(unsigned long long*, bool*)>
c0013212:	83 c4 10             	add    esp,0x10
c0013215:	83 f8 02             	cmp    eax,0x2
c0013218:	74 04                	je     c001321e <Fs::setcwd(Process*, char*)+0xd3>
c001321a:	85 c0                	test   eax,eax
c001321c:	74 1c                	je     c001323a <Fs::setcwd(Process*, char*)+0xef>
c001321e:	b8 01 00 00 00       	mov    eax,0x1
c0013223:	85 db                	test   ebx,ebx
c0013225:	74 54                	je     c001327b <Fs::setcwd(Process*, char*)+0x130>
c0013227:	83 ec 0c             	sub    esp,0xc
c001322a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001322c:	53                   	push   ebx
c001322d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013230:	83 c4 10             	add    esp,0x10
c0013233:	b8 01 00 00 00       	mov    eax,0x1
c0013238:	eb 41                	jmp    c001327b <Fs::setcwd(Process*, char*)+0x130>
c001323a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001323f:	75 1c                	jne    c001325d <Fs::setcwd(Process*, char*)+0x112>
c0013241:	b8 02 00 00 00       	mov    eax,0x2
c0013246:	85 db                	test   ebx,ebx
c0013248:	74 31                	je     c001327b <Fs::setcwd(Process*, char*)+0x130>
c001324a:	83 ec 0c             	sub    esp,0xc
c001324d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001324f:	53                   	push   ebx
c0013250:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013253:	83 c4 10             	add    esp,0x10
c0013256:	b8 02 00 00 00       	mov    eax,0x2
c001325b:	eb 1e                	jmp    c001327b <Fs::setcwd(Process*, char*)+0x130>
c001325d:	85 db                	test   ebx,ebx
c001325f:	74 0c                	je     c001326d <Fs::setcwd(Process*, char*)+0x122>
c0013261:	83 ec 0c             	sub    esp,0xc
c0013264:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013266:	53                   	push   ebx
c0013267:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001326a:	83 c4 10             	add    esp,0x10
c001326d:	50                   	push   eax
c001326e:	50                   	push   eax
c001326f:	56                   	push   esi
c0013270:	57                   	push   edi
c0013271:	e8 96 d5 fe ff       	call   c000080c <strcpy>
c0013276:	83 c4 10             	add    esp,0x10
c0013279:	31 c0                	xor    eax,eax
c001327b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013281:	5b                   	pop    ebx
c0013282:	5e                   	pop    esi
c0013283:	5f                   	pop    edi
c0013284:	5d                   	pop    ebp
c0013285:	c3                   	ret    

c0013286 <Directory::Directory(char const*, Process*)>:
c0013286:	83 ec 0c             	sub    esp,0xc
c0013289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001328d:	83 ec 08             	sub    esp,0x8
c0013290:	6a 00                	push   0x0
c0013292:	50                   	push   eax
c0013293:	e8 9a dd ff ff       	call   c0011032 <UnixFile::UnixFile(int)>
c0013298:	83 c4 10             	add    esp,0x10
c001329b:	ba b4 b3 02 c0       	mov    edx,0xc002b3b4
c00132a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132a4:	89 10                	mov    DWORD PTR [eax],edx
c00132a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00132aa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b4:	83 c0 0d             	add    eax,0xd
c00132b7:	83 ec 04             	sub    esp,0x4
c00132ba:	52                   	push   edx
c00132bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132bf:	50                   	push   eax
c00132c0:	e8 6b f9 ff ff       	call   c0012c30 <Fs::standardiseFiles(char*, char const*, char const*)>
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132cc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00132cf:	8d 50 bf             	lea    edx,[eax-0x41]
c00132d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132d6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00132dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132e0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00132e4:	90                   	nop
c00132e5:	83 c4 0c             	add    esp,0xc
c00132e8:	c3                   	ret    
c00132e9:	90                   	nop

c00132ea <Directory::open()>:
c00132ea:	53                   	push   ebx
c00132eb:	b8 0b 00 00 00       	mov    eax,0xb
c00132f0:	83 ec 08             	sub    esp,0x8
c00132f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00132f7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00132fe:	80 fa 19             	cmp    dl,0x19
c0013301:	77 3d                	ja     c0013340 <Directory::open()+0x56>
c0013303:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c001330a:	85 d2                	test   edx,edx
c001330c:	74 32                	je     c0013340 <Directory::open()+0x56>
c001330e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013314:	85 d2                	test   edx,edx
c0013316:	74 28                	je     c0013340 <Directory::open()+0x56>
c0013318:	b8 06 00 00 00       	mov    eax,0x6
c001331d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013321:	75 1d                	jne    c0013340 <Directory::open()+0x56>
c0013323:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013329:	50                   	push   eax
c001332a:	8b 02                	mov    eax,DWORD PTR [edx]
c001332c:	51                   	push   ecx
c001332d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013330:	51                   	push   ecx
c0013331:	52                   	push   edx
c0013332:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013335:	83 c4 10             	add    esp,0x10
c0013338:	85 c0                	test   eax,eax
c001333a:	75 04                	jne    c0013340 <Directory::open()+0x56>
c001333c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013340:	83 c4 08             	add    esp,0x8
c0013343:	5b                   	pop    ebx
c0013344:	c3                   	ret    
c0013345:	90                   	nop

c0013346 <Directory::close()>:
c0013346:	53                   	push   ebx
c0013347:	b8 0b 00 00 00       	mov    eax,0xb
c001334c:	83 ec 08             	sub    esp,0x8
c001334f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013353:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001335a:	80 fa 19             	cmp    dl,0x19
c001335d:	77 41                	ja     c00133a0 <Directory::close()+0x5a>
c001335f:	8b 1c 95 40 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0bc0]
c0013366:	85 db                	test   ebx,ebx
c0013368:	74 36                	je     c00133a0 <Directory::close()+0x5a>
c001336a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013371:	74 2d                	je     c00133a0 <Directory::close()+0x5a>
c0013373:	b8 05 00 00 00       	mov    eax,0x5
c0013378:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001337c:	74 22                	je     c00133a0 <Directory::close()+0x5a>
c001337e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013382:	8b 04 95 40 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0bc0]
c0013389:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001338f:	53                   	push   ebx
c0013390:	53                   	push   ebx
c0013391:	8b 10                	mov    edx,DWORD PTR [eax]
c0013393:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013399:	50                   	push   eax
c001339a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001339d:	83 c4 10             	add    esp,0x10
c00133a0:	83 c4 08             	add    esp,0x8
c00133a3:	5b                   	pop    ebx
c00133a4:	c3                   	ret    
c00133a5:	90                   	nop

c00133a6 <Directory::unlink()>:
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	b8 0b 00 00 00       	mov    eax,0xb
c00133ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133b9:	80 f9 19             	cmp    cl,0x19
c00133bc:	77 2f                	ja     c00133ed <Directory::unlink()+0x47>
c00133be:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c00133c5:	85 c9                	test   ecx,ecx
c00133c7:	74 24                	je     c00133ed <Directory::unlink()+0x47>
c00133c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133cf:	85 c9                	test   ecx,ecx
c00133d1:	74 1a                	je     c00133ed <Directory::unlink()+0x47>
c00133d3:	b8 06 00 00 00       	mov    eax,0x6
c00133d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00133dc:	75 0f                	jne    c00133ed <Directory::unlink()+0x47>
c00133de:	83 c2 0d             	add    edx,0xd
c00133e1:	50                   	push   eax
c00133e2:	50                   	push   eax
c00133e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133e5:	52                   	push   edx
c00133e6:	51                   	push   ecx
c00133e7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00133ea:	83 c4 10             	add    esp,0x10
c00133ed:	83 c4 0c             	add    esp,0xc
c00133f0:	c3                   	ret    
c00133f1:	90                   	nop

c00133f2 <Directory::rename(char const*)>:
c00133f2:	83 ec 0c             	sub    esp,0xc
c00133f5:	b8 0b 00 00 00       	mov    eax,0xb
c00133fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013405:	80 f9 19             	cmp    cl,0x19
c0013408:	77 32                	ja     c001343c <Directory::rename(char const*)+0x4a>
c001340a:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c0013411:	85 c9                	test   ecx,ecx
c0013413:	74 27                	je     c001343c <Directory::rename(char const*)+0x4a>
c0013415:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001341b:	85 c9                	test   ecx,ecx
c001341d:	74 1d                	je     c001343c <Directory::rename(char const*)+0x4a>
c001341f:	b8 06 00 00 00       	mov    eax,0x6
c0013424:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013428:	75 12                	jne    c001343c <Directory::rename(char const*)+0x4a>
c001342a:	83 c2 0d             	add    edx,0xd
c001342d:	50                   	push   eax
c001342e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013430:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013434:	52                   	push   edx
c0013435:	51                   	push   ecx
c0013436:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013439:	83 c4 10             	add    esp,0x10
c001343c:	83 c4 0c             	add    esp,0xc
c001343f:	c3                   	ret    

c0013440 <Directory::exists()>:
c0013440:	83 ec 0c             	sub    esp,0xc
c0013443:	31 c0                	xor    eax,eax
c0013445:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013449:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013450:	80 f9 19             	cmp    cl,0x19
c0013453:	77 24                	ja     c0013479 <Directory::exists()+0x39>
c0013455:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c001345c:	85 c9                	test   ecx,ecx
c001345e:	74 19                	je     c0013479 <Directory::exists()+0x39>
c0013460:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013466:	85 c9                	test   ecx,ecx
c0013468:	74 0f                	je     c0013479 <Directory::exists()+0x39>
c001346a:	83 c2 0d             	add    edx,0xd
c001346d:	50                   	push   eax
c001346e:	50                   	push   eax
c001346f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013471:	52                   	push   edx
c0013472:	51                   	push   ecx
c0013473:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013476:	83 c4 10             	add    esp,0x10
c0013479:	83 c4 0c             	add    esp,0xc
c001347c:	c3                   	ret    
c001347d:	90                   	nop

c001347e <Directory::read(dirent*)>:
c001347e:	83 ec 1c             	sub    esp,0x1c
c0013481:	b8 0b 00 00 00       	mov    eax,0xb
c0013486:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001348a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013491:	80 fa 19             	cmp    dl,0x19
c0013494:	77 30                	ja     c00134c6 <Directory::read(dirent*)+0x48>
c0013496:	8b 14 95 40 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0bc0]
c001349d:	85 d2                	test   edx,edx
c001349f:	74 25                	je     c00134c6 <Directory::read(dirent*)+0x48>
c00134a1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00134a8:	74 1c                	je     c00134c6 <Directory::read(dirent*)+0x48>
c00134aa:	83 ec 0c             	sub    esp,0xc
c00134ad:	8b 01                	mov    eax,DWORD PTR [ecx]
c00134af:	8d 54 24 18          	lea    edx,[esp+0x18]
c00134b3:	52                   	push   edx
c00134b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00134b8:	6a 00                	push   0x0
c00134ba:	68 10 01 00 00       	push   0x110
c00134bf:	51                   	push   ecx
c00134c0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00134c3:	83 c4 20             	add    esp,0x20
c00134c6:	83 c4 1c             	add    esp,0x1c
c00134c9:	c3                   	ret    

c00134ca <Directory::create()>:
c00134ca:	83 ec 0c             	sub    esp,0xc
c00134cd:	b8 0b 00 00 00       	mov    eax,0xb
c00134d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134d6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00134dd:	80 f9 19             	cmp    cl,0x19
c00134e0:	77 2f                	ja     c0013511 <Directory::create()+0x47>
c00134e2:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c00134e9:	85 c9                	test   ecx,ecx
c00134eb:	74 24                	je     c0013511 <Directory::create()+0x47>
c00134ed:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00134f3:	85 c9                	test   ecx,ecx
c00134f5:	74 1a                	je     c0013511 <Directory::create()+0x47>
c00134f7:	b8 06 00 00 00       	mov    eax,0x6
c00134fc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013500:	75 0f                	jne    c0013511 <Directory::create()+0x47>
c0013502:	83 c2 0d             	add    edx,0xd
c0013505:	50                   	push   eax
c0013506:	50                   	push   eax
c0013507:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013509:	52                   	push   edx
c001350a:	51                   	push   ecx
c001350b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001350e:	83 c4 10             	add    esp,0x10
c0013511:	83 c4 0c             	add    esp,0xc
c0013514:	c3                   	ret    
c0013515:	90                   	nop

c0013516 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013516:	b8 0a 00 00 00       	mov    eax,0xa
c001351b:	c3                   	ret    

c001351c <Bus::Bus(char const*)>:
c001351c:	83 ec 0c             	sub    esp,0xc
c001351f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013523:	83 ec 08             	sub    esp,0x8
c0013526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001352a:	50                   	push   eax
c001352b:	e8 88 09 00 00       	call   c0013eb8 <Device::Device(char const*)>
c0013530:	83 c4 10             	add    esp,0x10
c0013533:	ba d0 b3 02 c0       	mov    edx,0xc002b3d0
c0013538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001353c:	89 10                	mov    DWORD PTR [eax],edx
c001353e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013542:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001354c:	90                   	nop
c001354d:	83 c4 0c             	add    esp,0xc
c0013550:	c3                   	ret    
c0013551:	90                   	nop

c0013552 <Bus::~Bus()>:
c0013552:	83 ec 0c             	sub    esp,0xc
c0013555:	ba d0 b3 02 c0       	mov    edx,0xc002b3d0
c001355a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001355e:	89 10                	mov    DWORD PTR [eax],edx
c0013560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013564:	83 ec 0c             	sub    esp,0xc
c0013567:	50                   	push   eax
c0013568:	e8 15 06 00 00       	call   c0013b82 <Device::~Device()>
c001356d:	83 c4 10             	add    esp,0x10
c0013570:	90                   	nop
c0013571:	83 c4 0c             	add    esp,0xc
c0013574:	c3                   	ret    
c0013575:	90                   	nop

c0013576 <Bus::~Bus()>:
c0013576:	83 ec 0c             	sub    esp,0xc
c0013579:	83 ec 0c             	sub    esp,0xc
c001357c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013580:	e8 cd ff ff ff       	call   c0013552 <Bus::~Bus()>
c0013585:	83 c4 10             	add    esp,0x10
c0013588:	83 ec 08             	sub    esp,0x8
c001358b:	68 58 01 00 00       	push   0x158
c0013590:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013594:	e8 02 f2 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0013599:	83 c4 10             	add    esp,0x10
c001359c:	83 c4 0c             	add    esp,0xc
c001359f:	c3                   	ret    

c00135a0 <Buzzer::Buzzer(char const*)>:
c00135a0:	83 ec 0c             	sub    esp,0xc
c00135a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a7:	83 ec 08             	sub    esp,0x8
c00135aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135ae:	50                   	push   eax
c00135af:	e8 04 09 00 00       	call   c0013eb8 <Device::Device(char const*)>
c00135b4:	83 c4 10             	add    esp,0x10
c00135b7:	ba fc b3 02 c0       	mov    edx,0xc002b3fc
c00135bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c0:	89 10                	mov    DWORD PTR [eax],edx
c00135c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00135d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00135de:	90                   	nop
c00135df:	83 c4 0c             	add    esp,0xc
c00135e2:	c3                   	ret    
c00135e3:	90                   	nop

c00135e4 <Buzzer::~Buzzer()>:
c00135e4:	83 ec 0c             	sub    esp,0xc
c00135e7:	ba fc b3 02 c0       	mov    edx,0xc002b3fc
c00135ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f0:	89 10                	mov    DWORD PTR [eax],edx
c00135f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135f6:	83 ec 0c             	sub    esp,0xc
c00135f9:	50                   	push   eax
c00135fa:	e8 83 05 00 00       	call   c0013b82 <Device::~Device()>
c00135ff:	83 c4 10             	add    esp,0x10
c0013602:	90                   	nop
c0013603:	83 c4 0c             	add    esp,0xc
c0013606:	c3                   	ret    
c0013607:	90                   	nop

c0013608 <Buzzer::~Buzzer()>:
c0013608:	83 ec 0c             	sub    esp,0xc
c001360b:	83 ec 0c             	sub    esp,0xc
c001360e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013612:	e8 cd ff ff ff       	call   c00135e4 <Buzzer::~Buzzer()>
c0013617:	83 c4 10             	add    esp,0x10
c001361a:	83 ec 08             	sub    esp,0x8
c001361d:	68 5c 01 00 00       	push   0x15c
c0013622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013626:	e8 70 f1 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c001362b:	83 c4 10             	add    esp,0x10
c001362e:	83 c4 0c             	add    esp,0xc
c0013631:	c3                   	ret    

c0013632 <Buzzer::stop()>:
c0013632:	83 ec 14             	sub    esp,0x14
c0013635:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013639:	8b 10                	mov    edx,DWORD PTR [eax]
c001363b:	6a 00                	push   0x0
c001363d:	50                   	push   eax
c001363e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013641:	83 c4 1c             	add    esp,0x1c
c0013644:	c3                   	ret    

c0013645 <beepThread(void*)>:
c0013645:	53                   	push   ebx
c0013646:	83 ec 08             	sub    esp,0x8
c0013649:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001364e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013652:	48                   	dec    eax
c0013653:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0013658:	75 01                	jne    c001365b <beepThread(void*)+0x16>
c001365a:	fb                   	sti    
c001365b:	50                   	push   eax
c001365c:	50                   	push   eax
c001365d:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013662:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013668:	52                   	push   edx
c0013669:	50                   	push   eax
c001366a:	e8 f8 ac 00 00       	call   c001e367 <nanoSleep(unsigned long long)>
c001366f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013672:	e8 bb ff ff ff       	call   c0013632 <Buzzer::stop()>
c0013677:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c001367f:	83 c4 18             	add    esp,0x18
c0013682:	5b                   	pop    ebx
c0013683:	e9 db ab 00 00       	jmp    c001e263 <blockTask(TaskState)>

c0013688 <Buzzer::beep(int, int, bool)>:
c0013688:	57                   	push   edi
c0013689:	56                   	push   esi
c001368a:	53                   	push   ebx
c001368b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001368f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013693:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013697:	52                   	push   edx
c0013698:	52                   	push   edx
c0013699:	8b 06                	mov    eax,DWORD PTR [esi]
c001369b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001369f:	56                   	push   esi
c00136a0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136a3:	83 c4 10             	add    esp,0x10
c00136a6:	89 f8                	mov    eax,edi
c00136a8:	84 c0                	test   al,al
c00136aa:	74 1f                	je     c00136cb <Buzzer::beep(int, int, bool)+0x43>
c00136ac:	50                   	push   eax
c00136ad:	50                   	push   eax
c00136ae:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00136b4:	99                   	cdq    
c00136b5:	52                   	push   edx
c00136b6:	50                   	push   eax
c00136b7:	e8 ab ac 00 00       	call   c001e367 <nanoSleep(unsigned long long)>
c00136bc:	83 c4 10             	add    esp,0x10
c00136bf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00136c3:	5b                   	pop    ebx
c00136c4:	5e                   	pop    esi
c00136c5:	5f                   	pop    edi
c00136c6:	e9 67 ff ff ff       	jmp    c0013632 <Buzzer::stop()>
c00136cb:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00136d1:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00136d6:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00136de:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00136e2:	c7 44 24 14 45 36 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013645
c00136ea:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00136ee:	5b                   	pop    ebx
c00136ef:	5e                   	pop    esi
c00136f0:	5f                   	pop    edi
c00136f1:	e9 2a a7 00 00       	jmp    c001de20 <Process::createThread(void (*)(void*), void*, int)>

c00136f6 <User::loadClockSettings(int)>:
c00136f6:	53                   	push   ebx
c00136f7:	83 ec 14             	sub    esp,0x14
c00136fa:	68 14 01 00 00       	push   0x114
c00136ff:	e8 88 c1 ff ff       	call   c000f88c <malloc>
c0013704:	83 c4 0c             	add    esp,0xc
c0013707:	89 c3                	mov    ebx,eax
c0013709:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001370f:	68 24 b4 02 c0       	push   0xc002b424
c0013714:	50                   	push   eax
c0013715:	e8 c0 f6 ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001371a:	58                   	pop    eax
c001371b:	5a                   	pop    edx
c001371c:	6a 01                	push   0x1
c001371e:	53                   	push   ebx
c001371f:	e8 1a f7 ff ff       	call   c0012e3e <File::open(FileOpenMode)>
c0013724:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013727:	e8 70 f7 ff ff       	call   c0012e9c <File::close()>
c001372c:	83 c4 10             	add    esp,0x10
c001372f:	85 db                	test   ebx,ebx
c0013731:	74 0f                	je     c0013742 <User::loadClockSettings(int)+0x4c>
c0013733:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013735:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013739:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001373c:	83 c4 08             	add    esp,0x8
c001373f:	5b                   	pop    ebx
c0013740:	ff e0                	jmp    eax
c0013742:	83 c4 08             	add    esp,0x8
c0013745:	5b                   	pop    ebx
c0013746:	c3                   	ret    
c0013747:	90                   	nop

c0013748 <Clock::Clock(char const*)>:
c0013748:	83 ec 0c             	sub    esp,0xc
c001374b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001374f:	83 ec 08             	sub    esp,0x8
c0013752:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013756:	50                   	push   eax
c0013757:	e8 5c 07 00 00       	call   c0013eb8 <Device::Device(char const*)>
c001375c:	83 c4 10             	add    esp,0x10
c001375f:	ba 4c b4 02 c0       	mov    edx,0xc002b44c
c0013764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013768:	89 10                	mov    DWORD PTR [eax],edx
c001376a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001376e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013778:	90                   	nop
c0013779:	83 c4 0c             	add    esp,0xc
c001377c:	c3                   	ret    
c001377d:	90                   	nop

c001377e <Clock::~Clock()>:
c001377e:	83 ec 0c             	sub    esp,0xc
c0013781:	ba 4c b4 02 c0       	mov    edx,0xc002b44c
c0013786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001378a:	89 10                	mov    DWORD PTR [eax],edx
c001378c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013790:	83 ec 0c             	sub    esp,0xc
c0013793:	50                   	push   eax
c0013794:	e8 e9 03 00 00       	call   c0013b82 <Device::~Device()>
c0013799:	83 c4 10             	add    esp,0x10
c001379c:	90                   	nop
c001379d:	83 c4 0c             	add    esp,0xc
c00137a0:	c3                   	ret    
c00137a1:	90                   	nop

c00137a2 <Clock::~Clock()>:
c00137a2:	83 ec 0c             	sub    esp,0xc
c00137a5:	83 ec 0c             	sub    esp,0xc
c00137a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137ac:	e8 cd ff ff ff       	call   c001377e <Clock::~Clock()>
c00137b1:	83 c4 10             	add    esp,0x10
c00137b4:	83 ec 08             	sub    esp,0x8
c00137b7:	68 58 01 00 00       	push   0x158
c00137bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00137c0:	e8 d6 ef ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00137c5:	83 c4 10             	add    esp,0x10
c00137c8:	83 c4 0c             	add    esp,0xc
c00137cb:	c3                   	ret    

c00137cc <Clock::timeInSecondsLocal()>:
c00137cc:	53                   	push   ebx
c00137cd:	83 ec 14             	sub    esp,0x14
c00137d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00137d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00137d6:	50                   	push   eax
c00137d7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00137da:	0f b6 0d bc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002efbc
c00137e1:	03 0d c0 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002efc0
c00137e7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137ed:	89 cb                	mov    ebx,ecx
c00137ef:	c1 fb 1f             	sar    ebx,0x1f
c00137f2:	01 c8                	add    eax,ecx
c00137f4:	11 da                	adc    edx,ebx
c00137f6:	83 c4 10             	add    esp,0x10
c00137f9:	31 c9                	xor    ecx,ecx
c00137fb:	80 3d bd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efbd,0x0
c0013802:	74 05                	je     c0013809 <Clock::timeInSecondsLocal()+0x3d>
c0013804:	b9 08 07 00 00       	mov    ecx,0x708
c0013809:	31 db                	xor    ebx,ebx
c001380b:	01 c8                	add    eax,ecx
c001380d:	11 da                	adc    edx,ebx
c001380f:	83 c4 08             	add    esp,0x8
c0013812:	5b                   	pop    ebx
c0013813:	c3                   	ret    

c0013814 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013814:	57                   	push   edi
c0013815:	56                   	push   esi
c0013816:	53                   	push   ebx
c0013817:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001381b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001381f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013821:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013825:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013828:	0f b6 05 bc ef 02 c0 	movzx  eax,BYTE PTR ds:0xc002efbc
c001382f:	03 05 c0 ef 02 c0    	add    eax,DWORD PTR ds:0xc002efc0
c0013835:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001383b:	99                   	cdq    
c001383c:	29 c6                	sub    esi,eax
c001383e:	19 d7                	sbb    edi,edx
c0013840:	89 f0                	mov    eax,esi
c0013842:	89 fa                	mov    edx,edi
c0013844:	31 f6                	xor    esi,esi
c0013846:	80 3d bd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efbd,0x0
c001384d:	74 05                	je     c0013854 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001384f:	be 08 07 00 00       	mov    esi,0x708
c0013854:	31 ff                	xor    edi,edi
c0013856:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001385a:	29 f0                	sub    eax,esi
c001385c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013860:	19 fa                	sbb    edx,edi
c0013862:	89 d8                	mov    eax,ebx
c0013864:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013868:	5b                   	pop    ebx
c0013869:	5e                   	pop    esi
c001386a:	5f                   	pop    edi
c001386b:	ff e0                	jmp    eax

c001386d <datetimeToSeconds(datetime_t)>:
c001386d:	55                   	push   ebp
c001386e:	57                   	push   edi
c001386f:	56                   	push   esi
c0013870:	53                   	push   ebx
c0013871:	83 ec 14             	sub    esp,0x14
c0013874:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013878:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001387c:	89 d3                	mov    ebx,edx
c001387e:	0f b6 c6             	movzx  eax,dh
c0013881:	c1 eb 10             	shr    ebx,0x10
c0013884:	48                   	dec    eax
c0013885:	66 81 eb 6c 07       	sub    bx,0x76c
c001388a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001388e:	0f b6 f5             	movzx  esi,ch
c0013891:	89 cf                	mov    edi,ecx
c0013893:	6b f6 3c             	imul   esi,esi,0x3c
c0013896:	c1 ef 10             	shr    edi,0x10
c0013899:	0f b6 c9             	movzx  ecx,cl
c001389c:	89 f8                	mov    eax,edi
c001389e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138a4:	0f b6 f8             	movzx  edi,al
c00138a7:	0f b6 d2             	movzx  edx,dl
c00138aa:	01 fe                	add    esi,edi
c00138ac:	01 f1                	add    ecx,esi
c00138ae:	0f b7 f3             	movzx  esi,bx
c00138b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00138b5:	c1 f9 1f             	sar    ecx,0x1f
c00138b8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00138bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00138c1:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00138c6:	8b 0c 8d 80 b4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b80]
c00138cd:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00138d1:	76 29                	jbe    c00138fc <datetimeToSeconds(datetime_t)+0x8f>
c00138d3:	f6 c3 03             	test   bl,0x3
c00138d6:	75 24                	jne    c00138fc <datetimeToSeconds(datetime_t)+0x8f>
c00138d8:	31 d2                	xor    edx,edx
c00138da:	bf 64 00 00 00       	mov    edi,0x64
c00138df:	89 d8                	mov    eax,ebx
c00138e1:	66 f7 f7             	div    di
c00138e4:	66 85 d2             	test   dx,dx
c00138e7:	75 12                	jne    c00138fb <datetimeToSeconds(datetime_t)+0x8e>
c00138e9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00138ef:	bf 90 01 00 00       	mov    edi,0x190
c00138f4:	99                   	cdq    
c00138f5:	f7 ff                	idiv   edi
c00138f7:	85 d2                	test   edx,edx
c00138f9:	75 01                	jne    c00138fc <datetimeToSeconds(datetime_t)+0x8f>
c00138fb:	41                   	inc    ecx
c00138fc:	66 83 fb 46          	cmp    bx,0x46
c0013900:	76 45                	jbe    c0013947 <datetimeToSeconds(datetime_t)+0xda>
c0013902:	bb 46 00 00 00       	mov    ebx,0x46
c0013907:	bf 64 00 00 00       	mov    edi,0x64
c001390c:	bd 90 01 00 00       	mov    ebp,0x190
c0013911:	b8 6d 01 00 00       	mov    eax,0x16d
c0013916:	f6 c3 03             	test   bl,0x3
c0013919:	75 23                	jne    c001393e <datetimeToSeconds(datetime_t)+0xd1>
c001391b:	89 d8                	mov    eax,ebx
c001391d:	99                   	cdq    
c001391e:	f7 ff                	idiv   edi
c0013920:	b8 6e 01 00 00       	mov    eax,0x16e
c0013925:	85 d2                	test   edx,edx
c0013927:	75 15                	jne    c001393e <datetimeToSeconds(datetime_t)+0xd1>
c0013929:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001392f:	99                   	cdq    
c0013930:	f7 fd                	idiv   ebp
c0013932:	83 fa 01             	cmp    edx,0x1
c0013935:	19 c0                	sbb    eax,eax
c0013937:	f7 d0                	not    eax
c0013939:	05 6e 01 00 00       	add    eax,0x16e
c001393e:	01 c1                	add    ecx,eax
c0013940:	43                   	inc    ebx
c0013941:	39 f3                	cmp    ebx,esi
c0013943:	7c cc                	jl     c0013911 <datetimeToSeconds(datetime_t)+0xa4>
c0013945:	eb 35                	jmp    c001397c <datetimeToSeconds(datetime_t)+0x10f>
c0013947:	74 33                	je     c001397c <datetimeToSeconds(datetime_t)+0x10f>
c0013949:	b8 45 00 00 00       	mov    eax,0x45
c001394e:	89 c2                	mov    edx,eax
c0013950:	83 e2 03             	and    edx,0x3
c0013953:	39 f0                	cmp    eax,esi
c0013955:	7e 0f                	jle    c0013966 <datetimeToSeconds(datetime_t)+0xf9>
c0013957:	83 fa 01             	cmp    edx,0x1
c001395a:	19 d2                	sbb    edx,edx
c001395c:	48                   	dec    eax
c001395d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013964:	eb e8                	jmp    c001394e <datetimeToSeconds(datetime_t)+0xe1>
c0013966:	b8 6d 01 00 00       	mov    eax,0x16d
c001396b:	85 d2                	test   edx,edx
c001396d:	75 0b                	jne    c001397a <datetimeToSeconds(datetime_t)+0x10d>
c001396f:	66 83 fb 01          	cmp    bx,0x1
c0013973:	19 c0                	sbb    eax,eax
c0013975:	05 6e 01 00 00       	add    eax,0x16e
c001397a:	29 c1                	sub    ecx,eax
c001397c:	b8 80 51 01 00       	mov    eax,0x15180
c0013981:	f7 e9                	imul   ecx
c0013983:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013987:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001398b:	83 c4 14             	add    esp,0x14
c001398e:	5b                   	pop    ebx
c001398f:	5e                   	pop    esi
c0013990:	5f                   	pop    edi
c0013991:	5d                   	pop    ebp
c0013992:	c3                   	ret    
c0013993:	90                   	nop

c0013994 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013994:	57                   	push   edi
c0013995:	56                   	push   esi
c0013996:	53                   	push   ebx
c0013997:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001399b:	8b 06                	mov    eax,DWORD PTR [esi]
c001399d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00139a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00139a8:	e8 c0 fe ff ff       	call   c001386d <datetimeToSeconds(datetime_t)>
c00139ad:	59                   	pop    ecx
c00139ae:	0f b6 0d bc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002efbc
c00139b5:	5b                   	pop    ebx
c00139b6:	03 0d c0 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002efc0
c00139bc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00139c2:	89 cb                	mov    ebx,ecx
c00139c4:	c1 fb 1f             	sar    ebx,0x1f
c00139c7:	29 c8                	sub    eax,ecx
c00139c9:	19 da                	sbb    edx,ebx
c00139cb:	31 c9                	xor    ecx,ecx
c00139cd:	80 3d bd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efbd,0x0
c00139d4:	74 05                	je     c00139db <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00139d6:	b9 08 07 00 00       	mov    ecx,0x708
c00139db:	31 db                	xor    ebx,ebx
c00139dd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00139e1:	29 c8                	sub    eax,ecx
c00139e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00139e7:	19 da                	sbb    edx,ebx
c00139e9:	89 f8                	mov    eax,edi
c00139eb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00139ef:	5b                   	pop    ebx
c00139f0:	5e                   	pop    esi
c00139f1:	5f                   	pop    edi
c00139f2:	ff e0                	jmp    eax

c00139f4 <secondsToDatetime(unsigned long long)>:
c00139f4:	55                   	push   ebp
c00139f5:	57                   	push   edi
c00139f6:	56                   	push   esi
c00139f7:	53                   	push   ebx
c00139f8:	83 ec 1c             	sub    esp,0x1c
c00139fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00139ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013a03:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013a07:	6a 00                	push   0x0
c0013a09:	68 80 51 01 00       	push   0x15180
c0013a0e:	55                   	push   ebp
c0013a0f:	57                   	push   edi
c0013a10:	e8 8f 37 01 00       	call   c00271a4 <__udivdi3>
c0013a15:	83 c4 10             	add    esp,0x10
c0013a18:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013a1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a22:	6a 00                	push   0x0
c0013a24:	68 80 51 01 00       	push   0x15180
c0013a29:	55                   	push   ebp
c0013a2a:	57                   	push   edi
c0013a2b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013a30:	e8 6f 38 01 00       	call   c00272a4 <__umoddi3>
c0013a35:	83 c4 10             	add    esp,0x10
c0013a38:	99                   	cdq    
c0013a39:	f7 ff                	idiv   edi
c0013a3b:	bf 3c 00 00 00       	mov    edi,0x3c
c0013a40:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013a43:	89 d0                	mov    eax,edx
c0013a45:	99                   	cdq    
c0013a46:	f7 ff                	idiv   edi
c0013a48:	85 db                	test   ebx,ebx
c0013a4a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013a4d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013a50:	79 11                	jns    c0013a63 <secondsToDatetime(unsigned long long)+0x6f>
c0013a52:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013a56:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013a5c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a61:	eb 07                	jmp    c0013a6a <secondsToDatetime(unsigned long long)+0x76>
c0013a63:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013a68:	89 d8                	mov    eax,ebx
c0013a6a:	bf b4 05 00 00       	mov    edi,0x5b4
c0013a6f:	99                   	cdq    
c0013a70:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013a75:	f7 f9                	idiv   ecx
c0013a77:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013a7c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013a80:	31 d2                	xor    edx,edx
c0013a82:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013a8a:	01 c3                	add    ebx,eax
c0013a8c:	89 d8                	mov    eax,ebx
c0013a8e:	f7 f1                	div    ecx
c0013a90:	31 d2                	xor    edx,edx
c0013a92:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013a95:	89 d8                	mov    eax,ebx
c0013a97:	f7 f7                	div    edi
c0013a99:	31 d2                	xor    edx,edx
c0013a9b:	29 c1                	sub    ecx,eax
c0013a9d:	89 d8                	mov    eax,ebx
c0013a9f:	f7 f5                	div    ebp
c0013aa1:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013aa6:	29 c1                	sub    ecx,eax
c0013aa8:	31 d2                	xor    edx,edx
c0013aaa:	89 c8                	mov    eax,ecx
c0013aac:	f7 f5                	div    ebp
c0013aae:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013ab7:	31 d2                	xor    edx,edx
c0013ab9:	89 c8                	mov    eax,ecx
c0013abb:	f7 f5                	div    ebp
c0013abd:	31 d2                	xor    edx,edx
c0013abf:	01 c3                	add    ebx,eax
c0013ac1:	89 c8                	mov    eax,ecx
c0013ac3:	f7 f7                	div    edi
c0013ac5:	bf 99 00 00 00       	mov    edi,0x99
c0013aca:	29 c3                	sub    ebx,eax
c0013acc:	31 d2                	xor    edx,edx
c0013ace:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013ad6:	29 c3                	sub    ebx,eax
c0013ad8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013adb:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013ade:	bb 05 00 00 00       	mov    ebx,0x5
c0013ae3:	83 c1 02             	add    ecx,0x2
c0013ae6:	89 c8                	mov    eax,ecx
c0013ae8:	f7 f7                	div    edi
c0013aea:	31 d2                	xor    edx,edx
c0013aec:	89 c7                	mov    edi,eax
c0013aee:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013af4:	83 c0 02             	add    eax,0x2
c0013af7:	f7 f3                	div    ebx
c0013af9:	89 eb                	mov    ebx,ebp
c0013afb:	29 c3                	sub    ebx,eax
c0013afd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013b03:	88 1e                	mov    BYTE PTR [esi],bl
c0013b05:	19 c0                	sbb    eax,eax
c0013b07:	31 d2                	xor    edx,edx
c0013b09:	83 e0 0c             	and    eax,0xc
c0013b0c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013b10:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013b18:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013b1c:	83 f9 01             	cmp    ecx,0x1
c0013b1f:	0f 96 c2             	setbe  dl
c0013b22:	41                   	inc    ecx
c0013b23:	01 d0                	add    eax,edx
c0013b25:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013b28:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013b2c:	83 c4 1c             	add    esp,0x1c
c0013b2f:	89 f0                	mov    eax,esi
c0013b31:	5b                   	pop    ebx
c0013b32:	5e                   	pop    esi
c0013b33:	5f                   	pop    edi
c0013b34:	5d                   	pop    ebp
c0013b35:	c2 04 00             	ret    0x4

c0013b38 <Clock::timeInDatetimeLocal()>:
c0013b38:	53                   	push   ebx
c0013b39:	83 ec 14             	sub    esp,0x14
c0013b3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b44:	e8 83 fc ff ff       	call   c00137cc <Clock::timeInSecondsLocal()>
c0013b49:	83 c4 0c             	add    esp,0xc
c0013b4c:	52                   	push   edx
c0013b4d:	50                   	push   eax
c0013b4e:	53                   	push   ebx
c0013b4f:	e8 a0 fe ff ff       	call   c00139f4 <secondsToDatetime(unsigned long long)>
c0013b54:	89 d8                	mov    eax,ebx
c0013b56:	83 c4 14             	add    esp,0x14
c0013b59:	5b                   	pop    ebx
c0013b5a:	c2 04 00             	ret    0x4
c0013b5d:	90                   	nop

c0013b5e <Device::hibernate()>:
c0013b5e:	c3                   	ret    
c0013b5f:	90                   	nop

c0013b60 <Device::wake()>:
c0013b60:	c3                   	ret    
c0013b61:	90                   	nop

c0013b62 <Device::detect()>:
c0013b62:	c3                   	ret    
c0013b63:	90                   	nop

c0013b64 <Device::disableLegacy()>:
c0013b64:	c3                   	ret    
c0013b65:	90                   	nop

c0013b66 <Device::powerSaving(PowerSavingLevel)>:
c0013b66:	c3                   	ret    
c0013b67:	90                   	nop

c0013b68 <DriverlessDevice::close(int, int, void*)>:
c0013b68:	31 c0                	xor    eax,eax
c0013b6a:	c3                   	ret    
c0013b6b:	90                   	nop

c0013b6c <DriverlessDevice::detect()>:
c0013b6c:	c3                   	ret    
c0013b6d:	90                   	nop

c0013b6e <DriverlessDevice::open(int, int, void*)>:
c0013b6e:	83 ec 18             	sub    esp,0x18
c0013b71:	68 b0 b4 02 c0       	push   0xc002b4b0
c0013b76:	e8 36 67 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0013b7b:	83 c8 ff             	or     eax,0xffffffff
c0013b7e:	83 c4 1c             	add    esp,0x1c
c0013b81:	c3                   	ret    

c0013b82 <Device::~Device()>:
c0013b82:	ba 10 b5 02 c0       	mov    edx,0xc002b510
c0013b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b8b:	89 10                	mov    DWORD PTR [eax],edx
c0013b8d:	90                   	nop
c0013b8e:	c3                   	ret    
c0013b8f:	90                   	nop

c0013b90 <Device::~Device()>:
c0013b90:	83 ec 0c             	sub    esp,0xc
c0013b93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013b97:	e8 e6 ff ff ff       	call   c0013b82 <Device::~Device()>
c0013b9c:	83 c4 04             	add    esp,0x4
c0013b9f:	83 ec 08             	sub    esp,0x8
c0013ba2:	68 58 01 00 00       	push   0x158
c0013ba7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bab:	e8 eb eb ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0013bb0:	83 c4 10             	add    esp,0x10
c0013bb3:	83 c4 0c             	add    esp,0xc
c0013bb6:	c3                   	ret    
c0013bb7:	90                   	nop

c0013bb8 <Device::findAndLoadDriver()>:
c0013bb8:	c7 44 24 04 ce b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b4ce
c0013bc0:	e9 b6 ec ff ff       	jmp    c001287b <Dbg::kprintf(char const*, ...)>
c0013bc5:	90                   	nop

c0013bc6 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013bc6:	57                   	push   edi
c0013bc7:	b9 09 00 00 00       	mov    ecx,0x9
c0013bcc:	56                   	push   esi
c0013bcd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013bd1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013bd5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013bdf:	81 c7 18 01 00 00    	add    edi,0x118
c0013be5:	fc                   	cld    
c0013be6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013be8:	5e                   	pop    esi
c0013be9:	5f                   	pop    edi
c0013bea:	c3                   	ret    
c0013beb:	90                   	nop

c0013bec <Device::preOpenACPI(void*, char*, char*)>:
c0013bec:	57                   	push   edi
c0013bed:	b9 1e 00 00 00       	mov    ecx,0x1e
c0013bf2:	56                   	push   esi
c0013bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013bf7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bfb:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0013c05:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0013c0b:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0013c11:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c15:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c17:	b9 0e 00 00 00       	mov    ecx,0xe
c0013c1c:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0013c22:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013c26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013c28:	5e                   	pop    esi
c0013c29:	5f                   	pop    edi
c0013c2a:	c3                   	ret    
c0013c2b:	90                   	nop

c0013c2c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c30:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c35:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c3c:	75 0b                	jne    c0013c49 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013c3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c40:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c44:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013c47:	eb 1e                	jmp    c0013c67 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013c49:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0013c4e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c54:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013c5a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013c5c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c64:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013c67:	ff e0                	jmp    eax
c0013c69:	90                   	nop

c0013c6a <Device::getParent()>:
c0013c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c6e:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0013c74:	c3                   	ret    
c0013c75:	90                   	nop

c0013c76 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013c76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013c7a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013c7f:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013c86:	75 0b                	jne    c0013c93 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013c88:	8b 00                	mov    eax,DWORD PTR [eax]
c0013c8a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013c8e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013c91:	eb 1e                	jmp    c0013cb1 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013c93:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0013c98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013c9e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ca4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ca6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013caa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013cae:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013cb1:	ff e0                	jmp    eax
c0013cb3:	90                   	nop

c0013cb4 <Device::addChild(Device*)>:
c0013cb4:	53                   	push   ebx
c0013cb5:	83 ec 08             	sub    esp,0x8
c0013cb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013cbc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013cc0:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013cc6:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013ccc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013cce:	85 d2                	test   edx,edx
c0013cd0:	74 04                	je     c0013cd6 <Device::addChild(Device*)+0x22>
c0013cd2:	89 d3                	mov    ebx,edx
c0013cd4:	eb f6                	jmp    c0013ccc <Device::addChild(Device*)+0x18>
c0013cd6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013cd9:	83 ec 0c             	sub    esp,0xc
c0013cdc:	6a 08                	push   0x8
c0013cde:	e8 a9 bb ff ff       	call   c000f88c <malloc>
c0013ce3:	89 03                	mov    DWORD PTR [ebx],eax
c0013ce5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013ceb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013cf2:	83 c4 18             	add    esp,0x18
c0013cf5:	5b                   	pop    ebx
c0013cf6:	c3                   	ret    
c0013cf7:	90                   	nop

c0013cf8 <Device::removeAllChildren()>:
c0013cf8:	56                   	push   esi
c0013cf9:	53                   	push   ebx
c0013cfa:	52                   	push   edx
c0013cfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013cff:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013d05:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d08:	74 17                	je     c0013d21 <Device::removeAllChildren()+0x29>
c0013d0a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013d0d:	85 c0                	test   eax,eax
c0013d0f:	74 0c                	je     c0013d1d <Device::removeAllChildren()+0x25>
c0013d11:	83 ec 0c             	sub    esp,0xc
c0013d14:	8b 10                	mov    edx,DWORD PTR [eax]
c0013d16:	50                   	push   eax
c0013d17:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013d1a:	83 c4 10             	add    esp,0x10
c0013d1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d1f:	eb e4                	jmp    c0013d05 <Device::removeAllChildren()+0xd>
c0013d21:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013d2d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013d33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013d3a:	58                   	pop    eax
c0013d3b:	5b                   	pop    ebx
c0013d3c:	5e                   	pop    esi
c0013d3d:	c3                   	ret    

c0013d3e <Device::hibernateAll()>:
c0013d3e:	53                   	push   ebx
c0013d3f:	83 ec 14             	sub    esp,0x14
c0013d42:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d48:	53                   	push   ebx
c0013d49:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013d4c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d52:	83 c4 10             	add    esp,0x10
c0013d55:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d58:	74 0f                	je     c0013d69 <Device::hibernateAll()+0x2b>
c0013d5a:	83 ec 0c             	sub    esp,0xc
c0013d5d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d60:	e8 d9 ff ff ff       	call   c0013d3e <Device::hibernateAll()>
c0013d65:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d67:	eb e9                	jmp    c0013d52 <Device::hibernateAll()+0x14>
c0013d69:	83 c4 08             	add    esp,0x8
c0013d6c:	5b                   	pop    ebx
c0013d6d:	c3                   	ret    

c0013d6e <Device::wakeAll()>:
c0013d6e:	53                   	push   ebx
c0013d6f:	83 ec 14             	sub    esp,0x14
c0013d72:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013d76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d78:	53                   	push   ebx
c0013d79:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013d7c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d82:	83 c4 10             	add    esp,0x10
c0013d85:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d88:	74 0f                	je     c0013d99 <Device::wakeAll()+0x2b>
c0013d8a:	83 ec 0c             	sub    esp,0xc
c0013d8d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d90:	e8 d9 ff ff ff       	call   c0013d6e <Device::wakeAll()>
c0013d95:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d97:	eb e9                	jmp    c0013d82 <Device::wakeAll()+0x14>
c0013d99:	83 c4 08             	add    esp,0x8
c0013d9c:	5b                   	pop    ebx
c0013d9d:	c3                   	ret    

c0013d9e <Device::detectAll()>:
c0013d9e:	53                   	push   ebx
c0013d9f:	83 ec 14             	sub    esp,0x14
c0013da2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013da6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013da8:	53                   	push   ebx
c0013da9:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013dac:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013db2:	83 c4 10             	add    esp,0x10
c0013db5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013db8:	74 0f                	je     c0013dc9 <Device::detectAll()+0x2b>
c0013dba:	83 ec 0c             	sub    esp,0xc
c0013dbd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013dc0:	e8 d9 ff ff ff       	call   c0013d9e <Device::detectAll()>
c0013dc5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013dc7:	eb e9                	jmp    c0013db2 <Device::detectAll()+0x14>
c0013dc9:	83 c4 08             	add    esp,0x8
c0013dcc:	5b                   	pop    ebx
c0013dcd:	c3                   	ret    

c0013dce <Device::disableLegacyAll()>:
c0013dce:	53                   	push   ebx
c0013dcf:	83 ec 14             	sub    esp,0x14
c0013dd2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013dd6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013dd8:	53                   	push   ebx
c0013dd9:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013ddc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013de2:	83 c4 10             	add    esp,0x10
c0013de5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013de8:	74 0f                	je     c0013df9 <Device::disableLegacyAll()+0x2b>
c0013dea:	83 ec 0c             	sub    esp,0xc
c0013ded:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013df0:	e8 d9 ff ff ff       	call   c0013dce <Device::disableLegacyAll()>
c0013df5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013df7:	eb e9                	jmp    c0013de2 <Device::disableLegacyAll()+0x14>
c0013df9:	83 c4 08             	add    esp,0x8
c0013dfc:	5b                   	pop    ebx
c0013dfd:	c3                   	ret    

c0013dfe <Device::loadDriversForAll()>:
c0013dfe:	53                   	push   ebx
c0013dff:	83 ec 08             	sub    esp,0x8
c0013e02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e06:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c0013e0d:	75 0c                	jne    c0013e1b <Device::loadDriversForAll()+0x1d>
c0013e0f:	83 ec 0c             	sub    esp,0xc
c0013e12:	53                   	push   ebx
c0013e13:	e8 a0 fd ff ff       	call   c0013bb8 <Device::findAndLoadDriver()>
c0013e18:	83 c4 10             	add    esp,0x10
c0013e1b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e24:	74 12                	je     c0013e38 <Device::loadDriversForAll()+0x3a>
c0013e26:	83 ec 0c             	sub    esp,0xc
c0013e29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e2c:	e8 cd ff ff ff       	call   c0013dfe <Device::loadDriversForAll()>
c0013e31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e33:	83 c4 10             	add    esp,0x10
c0013e36:	eb e9                	jmp    c0013e21 <Device::loadDriversForAll()+0x23>
c0013e38:	83 c4 08             	add    esp,0x8
c0013e3b:	5b                   	pop    ebx
c0013e3c:	c3                   	ret    
c0013e3d:	90                   	nop

c0013e3e <Device::closeAll()>:
c0013e3e:	53                   	push   ebx
c0013e3f:	83 ec 08             	sub    esp,0x8
c0013e42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e48:	6a 00                	push   0x0
c0013e4a:	6a 00                	push   0x0
c0013e4c:	6a 00                	push   0x0
c0013e4e:	53                   	push   ebx
c0013e4f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013e52:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e58:	83 c4 10             	add    esp,0x10
c0013e5b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e5e:	74 0f                	je     c0013e6f <Device::closeAll()+0x31>
c0013e60:	83 ec 0c             	sub    esp,0xc
c0013e63:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e66:	e8 d3 ff ff ff       	call   c0013e3e <Device::closeAll()>
c0013e6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013e6d:	eb e9                	jmp    c0013e58 <Device::closeAll()+0x1a>
c0013e6f:	83 c4 08             	add    esp,0x8
c0013e72:	5b                   	pop    ebx
c0013e73:	c3                   	ret    

c0013e74 <Device::powerSavingAll(PowerSavingLevel)>:
c0013e74:	56                   	push   esi
c0013e75:	53                   	push   ebx
c0013e76:	83 ec 0c             	sub    esp,0xc
c0013e79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013e7d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e83:	56                   	push   esi
c0013e84:	53                   	push   ebx
c0013e85:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013e88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013e8e:	83 c4 10             	add    esp,0x10
c0013e91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013e94:	74 0f                	je     c0013ea5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013e96:	52                   	push   edx
c0013e97:	52                   	push   edx
c0013e98:	56                   	push   esi
c0013e99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013e9c:	e8 d3 ff ff ff       	call   c0013e74 <Device::powerSavingAll(PowerSavingLevel)>
c0013ea1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013ea3:	eb e9                	jmp    c0013e8e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013ea5:	58                   	pop    eax
c0013ea6:	5b                   	pop    ebx
c0013ea7:	5e                   	pop    esi
c0013ea8:	c3                   	ret    
c0013ea9:	90                   	nop

c0013eaa <Device::setName(char const*)>:
c0013eaa:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013eb2:	e9 55 c9 fe ff       	jmp    c000080c <strcpy>
c0013eb7:	90                   	nop

c0013eb8 <Device::Device(char const*)>:
c0013eb8:	83 ec 1c             	sub    esp,0x1c
c0013ebb:	ba 10 b5 02 c0       	mov    edx,0xc002b510
c0013ec0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ec4:	89 10                	mov    DWORD PTR [eax],edx
c0013ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013eca:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013ed4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ed8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013ee2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ee6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013efe:	83 ec 08             	sub    esp,0x8
c0013f01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013f09:	e8 9c ff ff ff       	call   c0013eaa <Device::setName(char const*)>
c0013f0e:	83 c4 10             	add    esp,0x10
c0013f11:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013f19:	83 ec 0c             	sub    esp,0xc
c0013f1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f20:	e8 67 b9 ff ff       	call   c000f88c <malloc>
c0013f25:	83 c4 10             	add    esp,0x10
c0013f28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013f39:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013f3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f43:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013f4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f53:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013f59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013f60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f64:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013f6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f6f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013f76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013f84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f88:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013f92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f96:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013fa0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fa4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0013fae:	90                   	nop
c0013faf:	83 c4 1c             	add    esp,0x1c
c0013fb2:	c3                   	ret    
c0013fb3:	90                   	nop

c0013fb4 <Device::getName()>:
c0013fb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013fb8:	05 d0 00 00 00       	add    eax,0xd0
c0013fbd:	c3                   	ret    

c0013fbe <DriverlessDevice::DriverlessDevice(char const*)>:
c0013fbe:	83 ec 0c             	sub    esp,0xc
c0013fc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc5:	83 ec 08             	sub    esp,0x8
c0013fc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fcc:	50                   	push   eax
c0013fcd:	e8 e6 fe ff ff       	call   c0013eb8 <Device::Device(char const*)>
c0013fd2:	83 c4 10             	add    esp,0x10
c0013fd5:	ba 3c b5 02 c0       	mov    edx,0xc002b53c
c0013fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fde:	89 10                	mov    DWORD PTR [eax],edx
c0013fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fe4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013fee:	90                   	nop
c0013fef:	83 c4 0c             	add    esp,0xc
c0013ff2:	c3                   	ret    
c0013ff3:	90                   	nop

c0013ff4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013ff4:	57                   	push   edi
c0013ff5:	56                   	push   esi
c0013ff6:	53                   	push   ebx
c0013ff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ffb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013fff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014003:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014009:	75 0c                	jne    c0014017 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001400b:	52                   	push   edx
c001400c:	52                   	push   edx
c001400d:	53                   	push   ebx
c001400e:	56                   	push   esi
c001400f:	e8 e2 50 01 00       	call   c00290f6 <LinkedList<Device>::addElement(Device*)>
c0014014:	83 c4 10             	add    esp,0x10
c0014017:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001401d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014020:	74 12                	je     c0014034 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014022:	50                   	push   eax
c0014023:	57                   	push   edi
c0014024:	56                   	push   esi
c0014025:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014028:	e8 c7 ff ff ff       	call   c0013ff4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001402d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001402f:	83 c4 10             	add    esp,0x10
c0014032:	eb e9                	jmp    c001401d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014034:	5b                   	pop    ebx
c0014035:	5e                   	pop    esi
c0014036:	5f                   	pop    edi
c0014037:	c3                   	ret    

c0014038 <getDevicesOfType(DeviceType)>:
c0014038:	53                   	push   ebx
c0014039:	83 ec 14             	sub    esp,0x14
c001403c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014040:	53                   	push   ebx
c0014041:	e8 8c 51 01 00       	call   c00291d2 <LinkedList<Device>::LinkedList()>
c0014046:	83 c4 0c             	add    esp,0xc
c0014049:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001404d:	53                   	push   ebx
c001404e:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c0014054:	e8 9b ff ff ff       	call   c0013ff4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014059:	89 d8                	mov    eax,ebx
c001405b:	83 c4 18             	add    esp,0x18
c001405e:	5b                   	pop    ebx
c001405f:	c2 04 00             	ret    0x4

c0014062 <HardDiskController::HardDiskController(char const*)>:
c0014062:	83 ec 0c             	sub    esp,0xc
c0014065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014069:	83 ec 08             	sub    esp,0x8
c001406c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014070:	50                   	push   eax
c0014071:	e8 42 fe ff ff       	call   c0013eb8 <Device::Device(char const*)>
c0014076:	83 c4 10             	add    esp,0x10
c0014079:	ba 68 b5 02 c0       	mov    edx,0xc002b568
c001407e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014082:	89 10                	mov    DWORD PTR [eax],edx
c0014084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014088:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014092:	90                   	nop
c0014093:	83 c4 0c             	add    esp,0xc
c0014096:	c3                   	ret    
c0014097:	90                   	nop

c0014098 <HardDiskController::~HardDiskController()>:
c0014098:	83 ec 0c             	sub    esp,0xc
c001409b:	ba 68 b5 02 c0       	mov    edx,0xc002b568
c00140a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a4:	89 10                	mov    DWORD PTR [eax],edx
c00140a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140aa:	83 ec 0c             	sub    esp,0xc
c00140ad:	50                   	push   eax
c00140ae:	e8 cf fa ff ff       	call   c0013b82 <Device::~Device()>
c00140b3:	83 c4 10             	add    esp,0x10
c00140b6:	90                   	nop
c00140b7:	83 c4 0c             	add    esp,0xc
c00140ba:	c3                   	ret    
c00140bb:	90                   	nop

c00140bc <HardDiskController::~HardDiskController()>:
c00140bc:	83 ec 0c             	sub    esp,0xc
c00140bf:	83 ec 0c             	sub    esp,0xc
c00140c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140c6:	e8 cd ff ff ff       	call   c0014098 <HardDiskController::~HardDiskController()>
c00140cb:	83 c4 10             	add    esp,0x10
c00140ce:	83 ec 08             	sub    esp,0x8
c00140d1:	68 58 01 00 00       	push   0x158
c00140d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140da:	e8 bc e6 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00140df:	83 c4 10             	add    esp,0x10
c00140e2:	83 c4 0c             	add    esp,0xc
c00140e5:	c3                   	ret    

c00140e6 <PhysicalDisk::eject()>:
c00140e6:	83 ec 18             	sub    esp,0x18
c00140e9:	68 8c b5 02 c0       	push   0xc002b58c
c00140ee:	e8 88 e7 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00140f3:	83 c8 ff             	or     eax,0xffffffff
c00140f6:	83 c4 1c             	add    esp,0x1c
c00140f9:	c3                   	ret    

c00140fa <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00140fa:	83 ec 0c             	sub    esp,0xc
c00140fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014101:	83 ec 08             	sub    esp,0x8
c0014104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014108:	50                   	push   eax
c0014109:	e8 aa fd ff ff       	call   c0013eb8 <Device::Device(char const*)>
c001410e:	83 c4 10             	add    esp,0x10
c0014111:	ba bc b5 02 c0       	mov    edx,0xc002b5bc
c0014116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001411a:	89 10                	mov    DWORD PTR [eax],edx
c001411c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014120:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014127:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014136:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014144:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014148:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001414e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014152:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001415c:	90                   	nop
c001415d:	83 c4 0c             	add    esp,0xc
c0014160:	c3                   	ret    
c0014161:	90                   	nop

c0014162 <PhysicalDisk::startCache()>:
c0014162:	56                   	push   esi
c0014163:	53                   	push   ebx
c0014164:	83 ec 10             	sub    esp,0x10
c0014167:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001416b:	6a 44                	push   0x44
c001416d:	e8 1a b7 ff ff       	call   c000f88c <malloc>
c0014172:	89 c6                	mov    esi,eax
c0014174:	58                   	pop    eax
c0014175:	5a                   	pop    edx
c0014176:	53                   	push   ebx
c0014177:	56                   	push   esi
c0014178:	e8 a9 28 00 00       	call   c0016a26 <VCache::VCache(PhysicalDisk*)>
c001417d:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014183:	83 c4 14             	add    esp,0x14
c0014186:	5b                   	pop    ebx
c0014187:	5e                   	pop    esi
c0014188:	c3                   	ret    
c0014189:	90                   	nop

c001418a <PhysicalDisk::~PhysicalDisk()>:
c001418a:	83 ec 0c             	sub    esp,0xc
c001418d:	ba bc b5 02 c0       	mov    edx,0xc002b5bc
c0014192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014196:	89 10                	mov    DWORD PTR [eax],edx
c0014198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001419c:	83 ec 0c             	sub    esp,0xc
c001419f:	50                   	push   eax
c00141a0:	e8 dd f9 ff ff       	call   c0013b82 <Device::~Device()>
c00141a5:	83 c4 10             	add    esp,0x10
c00141a8:	90                   	nop
c00141a9:	83 c4 0c             	add    esp,0xc
c00141ac:	c3                   	ret    
c00141ad:	90                   	nop

c00141ae <PhysicalDisk::~PhysicalDisk()>:
c00141ae:	83 ec 0c             	sub    esp,0xc
c00141b1:	83 ec 0c             	sub    esp,0xc
c00141b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141b8:	e8 cd ff ff ff       	call   c001418a <PhysicalDisk::~PhysicalDisk()>
c00141bd:	83 c4 10             	add    esp,0x10
c00141c0:	83 ec 08             	sub    esp,0x8
c00141c3:	68 6c 01 00 00       	push   0x16c
c00141c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141cc:	e8 ca e5 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00141d1:	83 c4 10             	add    esp,0x10
c00141d4:	83 c4 0c             	add    esp,0xc
c00141d7:	c3                   	ret    

c00141d8 <FPU::FPU(char const*)>:
c00141d8:	83 ec 0c             	sub    esp,0xc
c00141db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141df:	83 ec 08             	sub    esp,0x8
c00141e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141e6:	50                   	push   eax
c00141e7:	e8 cc fc ff ff       	call   c0013eb8 <Device::Device(char const*)>
c00141ec:	83 c4 10             	add    esp,0x10
c00141ef:	ba 00 b6 02 c0       	mov    edx,0xc002b600
c00141f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141f8:	89 10                	mov    DWORD PTR [eax],edx
c00141fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00141fe:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014208:	90                   	nop
c0014209:	83 c4 0c             	add    esp,0xc
c001420c:	c3                   	ret    
c001420d:	90                   	nop

c001420e <FPU::~FPU()>:
c001420e:	83 ec 0c             	sub    esp,0xc
c0014211:	ba 00 b6 02 c0       	mov    edx,0xc002b600
c0014216:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001421a:	89 10                	mov    DWORD PTR [eax],edx
c001421c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014220:	83 ec 0c             	sub    esp,0xc
c0014223:	50                   	push   eax
c0014224:	e8 59 f9 ff ff       	call   c0013b82 <Device::~Device()>
c0014229:	83 c4 10             	add    esp,0x10
c001422c:	90                   	nop
c001422d:	83 c4 0c             	add    esp,0xc
c0014230:	c3                   	ret    
c0014231:	90                   	nop

c0014232 <FPU::~FPU()>:
c0014232:	83 ec 0c             	sub    esp,0xc
c0014235:	83 ec 0c             	sub    esp,0xc
c0014238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001423c:	e8 cd ff ff ff       	call   c001420e <FPU::~FPU()>
c0014241:	83 c4 10             	add    esp,0x10
c0014244:	83 ec 08             	sub    esp,0x8
c0014247:	68 58 01 00 00       	push   0x158
c001424c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014250:	e8 46 e5 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0014255:	83 c4 10             	add    esp,0x10
c0014258:	83 c4 0c             	add    esp,0xc
c001425b:	c3                   	ret    

c001425c <setupFPU()>:
c001425c:	53                   	push   ebx
c001425d:	83 ec 08             	sub    esp,0x8
c0014260:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c0014266:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001426d:	74 19                	je     c0014288 <setupFPU()+0x2c>
c001426f:	83 ec 0c             	sub    esp,0xc
c0014272:	68 58 01 00 00       	push   0x158
c0014277:	e8 10 b6 ff ff       	call   c000f88c <malloc>
c001427c:	89 c3                	mov    ebx,eax
c001427e:	89 04 24             	mov    DWORD PTR [esp],eax
c0014281:	e8 a2 1a 01 00       	call   c0025d28 <AVX::AVX()>
c0014286:	eb 5b                	jmp    c00142e3 <setupFPU()+0x87>
c0014288:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001428e:	84 c0                	test   al,al
c0014290:	79 19                	jns    c00142ab <setupFPU()+0x4f>
c0014292:	83 ec 0c             	sub    esp,0xc
c0014295:	68 58 01 00 00       	push   0x158
c001429a:	e8 ed b5 ff ff       	call   c000f88c <malloc>
c001429f:	89 c3                	mov    ebx,eax
c00142a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00142a4:	e8 a5 1b 01 00       	call   c0025e4e <SSE::SSE()>
c00142a9:	eb 38                	jmp    c00142e3 <setupFPU()+0x87>
c00142ab:	a8 20                	test   al,0x20
c00142ad:	74 19                	je     c00142c8 <setupFPU()+0x6c>
c00142af:	83 ec 0c             	sub    esp,0xc
c00142b2:	68 58 01 00 00       	push   0x158
c00142b7:	e8 d0 b5 ff ff       	call   c000f88c <malloc>
c00142bc:	89 c3                	mov    ebx,eax
c00142be:	89 04 24             	mov    DWORD PTR [esp],eax
c00142c1:	e8 f2 1a 01 00       	call   c0025db8 <MMX::MMX()>
c00142c6:	eb 1b                	jmp    c00142e3 <setupFPU()+0x87>
c00142c8:	a8 10                	test   al,0x10
c00142ca:	74 1c                	je     c00142e8 <setupFPU()+0x8c>
c00142cc:	83 ec 0c             	sub    esp,0xc
c00142cf:	68 58 01 00 00       	push   0x158
c00142d4:	e8 b3 b5 ff ff       	call   c000f88c <malloc>
c00142d9:	89 c3                	mov    ebx,eax
c00142db:	89 04 24             	mov    DWORD PTR [esp],eax
c00142de:	e8 f9 1b 01 00       	call   c0025edc <x87::x87()>
c00142e3:	83 c4 10             	add    esp,0x10
c00142e6:	eb 24                	jmp    c001430c <setupFPU()+0xb0>
c00142e8:	83 e0 ef             	and    eax,0xffffffef
c00142eb:	83 ec 0c             	sub    esp,0xc
c00142ee:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00142f4:	68 ec b5 02 c0       	push   0xc002b5ec
c00142f9:	e8 7d e5 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00142fe:	0f 20 c0             	mov    eax,cr0
c0014301:	83 c8 04             	or     eax,0x4
c0014304:	0f 22 c0             	mov    cr0,eax
c0014307:	31 db                	xor    ebx,ebx
c0014309:	83 c4 10             	add    esp,0x10
c001430c:	89 d8                	mov    eax,ebx
c001430e:	83 c4 08             	add    esp,0x8
c0014311:	5b                   	pop    ebx
c0014312:	c3                   	ret    
c0014313:	90                   	nop

c0014314 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014314:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014318:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001431c:	c1 e0 04             	shl    eax,0x4
c001431f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014323:	8d 50 10             	lea    edx,[eax+0x10]
c0014326:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c001432c:	74 08                	je     c0014336 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c001432e:	83 c0 04             	add    eax,0x4
c0014331:	39 d0                	cmp    eax,edx
c0014333:	75 f1                	jne    c0014326 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014335:	c3                   	ret    
c0014336:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014340:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001434a:	eb e2                	jmp    c001432e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001434c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001434c:	57                   	push   edi
c001434d:	31 c0                	xor    eax,eax
c001434f:	56                   	push   esi
c0014350:	53                   	push   ebx
c0014351:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014355:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014359:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001435d:	89 da                	mov    edx,ebx
c001435f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014363:	c1 e2 04             	shl    edx,0x4
c0014366:	01 ca                	add    edx,ecx
c0014368:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014370:	74 16                	je     c0014388 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014372:	40                   	inc    eax
c0014373:	83 f8 04             	cmp    eax,0x4
c0014376:	75 f0                	jne    c0014368 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014378:	c7 44 24 10 30 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b630
c0014380:	5b                   	pop    ebx
c0014381:	5e                   	pop    esi
c0014382:	5f                   	pop    edi
c0014383:	e9 29 5f 00 00       	jmp    c001a2b1 <Krnl::panic(char const*)>
c0014388:	8d 04 98             	lea    eax,[eax+ebx*4]
c001438b:	8d 04 81             	lea    eax,[ecx+eax*4]
c001438e:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014394:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001439a:	5b                   	pop    ebx
c001439b:	5e                   	pop    esi
c001439c:	5f                   	pop    edi
c001439d:	c3                   	ret    

c001439e <doubleFault(regs*, void*)>:
c001439e:	55                   	push   ebp
c001439f:	89 e5                	mov    ebp,esp
c00143a1:	83 ec 08             	sub    esp,0x8
c00143a4:	83 ec 0c             	sub    esp,0xc
c00143a7:	68 6b b6 02 c0       	push   0xc002b66b
c00143ac:	e8 00 5f 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c00143b1:	83 c4 10             	add    esp,0x10
c00143b4:	90                   	nop
c00143b5:	c9                   	leave  
c00143b6:	c3                   	ret    
c00143b7:	90                   	nop

c00143b8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00143b8:	56                   	push   esi
c00143b9:	53                   	push   ebx
c00143ba:	50                   	push   eax
c00143bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143bf:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00143c3:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143c8:	75 35                	jne    c00143ff <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c00143ca:	8d 43 20             	lea    eax,[ebx+0x20]
c00143cd:	31 d2                	xor    edx,edx
c00143cf:	89 c1                	mov    ecx,eax
c00143d1:	c1 e1 04             	shl    ecx,0x4
c00143d4:	01 f1                	add    ecx,esi
c00143d6:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00143de:	74 3e                	je     c001441e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00143e0:	42                   	inc    edx
c00143e1:	83 fa 04             	cmp    edx,0x4
c00143e4:	75 f0                	jne    c00143d6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00143e6:	83 ec 0c             	sub    esp,0xc
c00143e9:	68 b0 b6 02 c0       	push   0xc002b6b0
c00143ee:	e8 be 5e 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c00143f3:	83 c4 10             	add    esp,0x10
c00143f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00143fb:	5a                   	pop    edx
c00143fc:	5b                   	pop    ebx
c00143fd:	5e                   	pop    esi
c00143fe:	c3                   	ret    
c00143ff:	83 ec 0c             	sub    esp,0xc
c0014402:	56                   	push   esi
c0014403:	e8 ac fb ff ff       	call   c0013fb4 <Device::getName()>
c0014408:	83 c4 10             	add    esp,0x10
c001440b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001440e:	75 ba                	jne    c00143ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014410:	83 fb 0f             	cmp    ebx,0xf
c0014413:	7f 29                	jg     c001443e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014415:	0f b6 9b a0 e0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1f60]
c001441c:	eb ac                	jmp    c00143ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c001441e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014421:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014425:	8d 04 86             	lea    eax,[esi+eax*4]
c0014428:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001442e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014432:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014438:	89 d8                	mov    eax,ebx
c001443a:	5a                   	pop    edx
c001443b:	5b                   	pop    ebx
c001443c:	5e                   	pop    esi
c001443d:	c3                   	ret    
c001443e:	83 ec 0c             	sub    esp,0xc
c0014441:	68 78 b6 02 c0       	push   0xc002b678
c0014446:	e8 66 5e 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c001444b:	83 c4 10             	add    esp,0x10
c001444e:	e9 77 ff ff ff       	jmp    c00143ca <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014453:	90                   	nop

c0014454 <InterruptController::clearAllHandlers(int, bool)>:
c0014454:	56                   	push   esi
c0014455:	53                   	push   ebx
c0014456:	52                   	push   edx
c0014457:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001445b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001445f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014464:	75 61                	jne    c00144c7 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014466:	8d 46 20             	lea    eax,[esi+0x20]
c0014469:	c1 e6 04             	shl    esi,0x4
c001446c:	c1 e0 04             	shl    eax,0x4
c001446f:	01 de                	add    esi,ebx
c0014471:	01 d8                	add    eax,ebx
c0014473:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001447d:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014487:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014491:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001449b:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c00144a5:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c00144af:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c00144b9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c00144c3:	58                   	pop    eax
c00144c4:	5b                   	pop    ebx
c00144c5:	5e                   	pop    esi
c00144c6:	c3                   	ret    
c00144c7:	83 ec 0c             	sub    esp,0xc
c00144ca:	53                   	push   ebx
c00144cb:	e8 e4 fa ff ff       	call   c0013fb4 <Device::getName()>
c00144d0:	83 c4 10             	add    esp,0x10
c00144d3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00144d6:	75 8e                	jne    c0014466 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144d8:	83 fe 0f             	cmp    esi,0xf
c00144db:	7f 09                	jg     c00144e6 <InterruptController::clearAllHandlers(int, bool)+0x92>
c00144dd:	0f b6 b6 a0 e0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1f60]
c00144e4:	eb 80                	jmp    c0014466 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144e6:	83 ec 0c             	sub    esp,0xc
c00144e9:	68 ec b6 02 c0       	push   0xc002b6ec
c00144ee:	e8 be 5d 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c00144f3:	83 c4 10             	add    esp,0x10
c00144f6:	e9 6b ff ff ff       	jmp    c0014466 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00144fb:	90                   	nop

c00144fc <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00144fc:	56                   	push   esi
c00144fd:	53                   	push   ebx
c00144fe:	52                   	push   edx
c00144ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014503:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014507:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001450c:	75 3a                	jne    c0014548 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c001450e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014512:	8d 50 20             	lea    edx,[eax+0x20]
c0014515:	c1 e2 04             	shl    edx,0x4
c0014518:	8d 04 16             	lea    eax,[esi+edx*1]
c001451b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c001451f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014525:	74 0b                	je     c0014532 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014527:	83 c0 04             	add    eax,0x4
c001452a:	39 d0                	cmp    eax,edx
c001452c:	75 f1                	jne    c001451f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c001452e:	58                   	pop    eax
c001452f:	5b                   	pop    ebx
c0014530:	5e                   	pop    esi
c0014531:	c3                   	ret    
c0014532:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001453c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014546:	eb df                	jmp    c0014527 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014548:	83 ec 0c             	sub    esp,0xc
c001454b:	56                   	push   esi
c001454c:	e8 63 fa ff ff       	call   c0013fb4 <Device::getName()>
c0014551:	83 c4 10             	add    esp,0x10
c0014554:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014557:	75 b5                	jne    c001450e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014559:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001455e:	7f 11                	jg     c0014571 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014560:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014564:	0f b6 80 a0 e0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1f60]
c001456b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001456f:	eb 9d                	jmp    c001450e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014571:	83 ec 0c             	sub    esp,0xc
c0014574:	68 ec b6 02 c0       	push   0xc002b6ec
c0014579:	e8 33 5d 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c001457e:	83 c4 10             	add    esp,0x10
c0014581:	eb 8b                	jmp    c001450e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014583 <nmiHandler(regs*, void*)>:
c0014583:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0014588:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001458c:	e9 45 aa ff ff       	jmp    c000efd6 <Computer::handleNMI()>

c0014591 <int_handler>:
c0014591:	55                   	push   ebp
c0014592:	57                   	push   edi
c0014593:	56                   	push   esi
c0014594:	53                   	push   ebx
c0014595:	83 ec 0c             	sub    esp,0xc
c0014598:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001459c:	80 3d 84 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031984,0x0
c00145a3:	74 0b                	je     c00145b0 <int_handler+0x1f>
c00145a5:	fa                   	cli    
c00145a6:	f4                   	hlt    
c00145a7:	80 3d 84 19 03 c0 00 	cmp    BYTE PTR ds:0xc0031984,0x0
c00145ae:	75 f5                	jne    c00145a5 <int_handler+0x14>
c00145b0:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00145b5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c00145b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00145be:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c00145c4:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145c7:	83 f8 17             	cmp    eax,0x17
c00145ca:	77 13                	ja     c00145df <int_handler+0x4e>
c00145cc:	83 ec 08             	sub    esp,0x8
c00145cf:	8b 17                	mov    edx,DWORD PTR [edi]
c00145d1:	8d 43 e0             	lea    eax,[ebx-0x20]
c00145d4:	0f b6 c0             	movzx  eax,al
c00145d7:	50                   	push   eax
c00145d8:	57                   	push   edi
c00145d9:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00145dc:	83 c4 10             	add    esp,0x10
c00145df:	83 c3 15             	add    ebx,0x15
c00145e2:	c1 e3 04             	shl    ebx,0x4
c00145e5:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00145e9:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00145f0:	31 db                	xor    ebx,ebx
c00145f2:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00145f6:	85 c0                	test   eax,eax
c00145f8:	74 13                	je     c001460d <int_handler+0x7c>
c00145fa:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00145fd:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014601:	74 1c                	je     c001461f <int_handler+0x8e>
c0014603:	83 ec 08             	sub    esp,0x8
c0014606:	52                   	push   edx
c0014607:	56                   	push   esi
c0014608:	ff d0                	call   eax
c001460a:	83 c4 10             	add    esp,0x10
c001460d:	43                   	inc    ebx
c001460e:	83 fb 04             	cmp    ebx,0x4
c0014611:	75 df                	jne    c00145f2 <int_handler+0x61>
c0014613:	83 c4 0c             	add    esp,0xc
c0014616:	31 c0                	xor    eax,eax
c0014618:	5b                   	pop    ebx
c0014619:	31 d2                	xor    edx,edx
c001461b:	5e                   	pop    esi
c001461c:	5f                   	pop    edi
c001461d:	5d                   	pop    ebp
c001461e:	c3                   	ret    
c001461f:	83 ec 08             	sub    esp,0x8
c0014622:	52                   	push   edx
c0014623:	56                   	push   esi
c0014624:	ff d0                	call   eax
c0014626:	83 c4 10             	add    esp,0x10
c0014629:	83 c4 0c             	add    esp,0xc
c001462c:	5b                   	pop    ebx
c001462d:	5e                   	pop    esi
c001462e:	5f                   	pop    edi
c001462f:	5d                   	pop    ebp
c0014630:	c3                   	ret    
c0014631:	90                   	nop

c0014632 <InterruptController::InterruptController(char const*)>:
c0014632:	83 ec 1c             	sub    esp,0x1c
c0014635:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014639:	83 ec 08             	sub    esp,0x8
c001463c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014640:	50                   	push   eax
c0014641:	e8 72 f8 ff ff       	call   c0013eb8 <Device::Device(char const*)>
c0014646:	83 c4 10             	add    esp,0x10
c0014649:	ba ac b9 02 c0       	mov    edx,0xc002b9ac
c001464e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014652:	89 10                	mov    DWORD PTR [eax],edx
c0014654:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014658:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014662:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001466a:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014672:	7f 5e                	jg     c00146d2 <InterruptController::InterruptController(char const*)+0xa0>
c0014674:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001467c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014681:	7f 49                	jg     c00146cc <InterruptController::InterruptController(char const*)+0x9a>
c0014683:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014687:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001468b:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014692:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014696:	01 ca                	add    edx,ecx
c0014698:	83 c2 54             	add    edx,0x54
c001469b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00146ab:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00146b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00146b6:	01 ca                	add    edx,ecx
c00146b8:	81 c2 54 04 00 00    	add    edx,0x454
c00146be:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00146c6:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00146ca:	eb b0                	jmp    c001467c <InterruptController::InterruptController(char const*)+0x4a>
c00146cc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00146d0:	eb 98                	jmp    c001466a <InterruptController::InterruptController(char const*)+0x38>
c00146d2:	90                   	nop
c00146d3:	83 c4 1c             	add    esp,0x1c
c00146d6:	c3                   	ret    
c00146d7:	90                   	nop

c00146d8 <InterruptController::~InterruptController()>:
c00146d8:	83 ec 0c             	sub    esp,0xc
c00146db:	ba ac b9 02 c0       	mov    edx,0xc002b9ac
c00146e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e4:	89 10                	mov    DWORD PTR [eax],edx
c00146e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146ea:	83 ec 0c             	sub    esp,0xc
c00146ed:	50                   	push   eax
c00146ee:	e8 8f f4 ff ff       	call   c0013b82 <Device::~Device()>
c00146f3:	83 c4 10             	add    esp,0x10
c00146f6:	90                   	nop
c00146f7:	83 c4 0c             	add    esp,0xc
c00146fa:	c3                   	ret    
c00146fb:	90                   	nop

c00146fc <InterruptController::~InterruptController()>:
c00146fc:	83 ec 0c             	sub    esp,0xc
c00146ff:	83 ec 0c             	sub    esp,0xc
c0014702:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014706:	e8 cd ff ff ff       	call   c00146d8 <InterruptController::~InterruptController()>
c001470b:	83 c4 10             	add    esp,0x10
c001470e:	83 ec 08             	sub    esp,0x8
c0014711:	68 58 21 00 00       	push   0x2158
c0014716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471a:	e8 7c e0 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c001471f:	83 c4 10             	add    esp,0x10
c0014722:	83 c4 0c             	add    esp,0xc
c0014725:	c3                   	ret    

c0014726 <displayDebugInfo(regs*)>:
c0014726:	55                   	push   ebp
c0014727:	57                   	push   edi
c0014728:	56                   	push   esi
c0014729:	53                   	push   ebx
c001472a:	83 ec 24             	sub    esp,0x24
c001472d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014731:	0f 20 c2             	mov    edx,cr0
c0014734:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014738:	0f 20 d7             	mov    edi,cr2
c001473b:	0f 20 de             	mov    esi,cr3
c001473e:	0f 20 e5             	mov    ebp,cr4
c0014741:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014744:	68 26 b7 02 c0       	push   0xc002b726
c0014749:	e8 2d e1 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001474e:	59                   	pop    ecx
c001474f:	58                   	pop    eax
c0014750:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014753:	68 31 b7 02 c0       	push   0xc002b731
c0014758:	e8 1e e1 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001475d:	58                   	pop    eax
c001475e:	5a                   	pop    edx
c001475f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014762:	68 3c b7 02 c0       	push   0xc002b73c
c0014767:	e8 0f e1 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001476c:	59                   	pop    ecx
c001476d:	58                   	pop    eax
c001476e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014771:	68 47 b7 02 c0       	push   0xc002b747
c0014776:	e8 00 e1 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001477b:	58                   	pop    eax
c001477c:	5a                   	pop    edx
c001477d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014780:	68 52 b7 02 c0       	push   0xc002b752
c0014785:	e8 f1 e0 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001478a:	59                   	pop    ecx
c001478b:	58                   	pop    eax
c001478c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c001478f:	68 5d b7 02 c0       	push   0xc002b75d
c0014794:	e8 e2 e0 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0014799:	58                   	pop    eax
c001479a:	5a                   	pop    edx
c001479b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001479e:	68 68 b7 02 c0       	push   0xc002b768
c00147a3:	e8 d3 e0 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00147a8:	59                   	pop    ecx
c00147a9:	58                   	pop    eax
c00147aa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00147ad:	68 73 b7 02 c0       	push   0xc002b773
c00147b2:	e8 c4 e0 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00147b7:	58                   	pop    eax
c00147b8:	5a                   	pop    edx
c00147b9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147bc:	68 7e b7 02 c0       	push   0xc002b77e
c00147c1:	e8 b5 e0 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00147c6:	59                   	pop    ecx
c00147c7:	58                   	pop    eax
c00147c8:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00147cb:	68 8d b7 02 c0       	push   0xc002b78d
c00147d0:	e8 a6 e0 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00147d5:	58                   	pop    eax
c00147d6:	5a                   	pop    edx
c00147d7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147da:	68 98 b7 02 c0       	push   0xc002b798
c00147df:	e8 97 e0 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00147e4:	59                   	pop    ecx
c00147e5:	58                   	pop    eax
c00147e6:	57                   	push   edi
c00147e7:	68 a3 b7 02 c0       	push   0xc002b7a3
c00147ec:	e8 8a e0 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00147f1:	58                   	pop    eax
c00147f2:	5a                   	pop    edx
c00147f3:	56                   	push   esi
c00147f4:	68 ae b7 02 c0       	push   0xc002b7ae
c00147f9:	e8 7d e0 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00147fe:	59                   	pop    ecx
c00147ff:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014804:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001480a:	e8 8f be ff ff       	call   c001069e <setActiveTerminal(VgaText*)>
c001480f:	58                   	pop    eax
c0014810:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014813:	5a                   	pop    edx
c0014814:	c1 e0 05             	shl    eax,0x5
c0014817:	05 00 de 02 c0       	add    eax,0xc002de00
c001481c:	50                   	push   eax
c001481d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014822:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014828:	e8 43 c2 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001482d:	59                   	pop    ecx
c001482e:	58                   	pop    eax
c001482f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014834:	68 b9 b7 02 c0       	push   0xc002b7b9
c0014839:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001483f:	e8 2c c2 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014844:	58                   	pop    eax
c0014845:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001484a:	5a                   	pop    edx
c001484b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001484e:	83 c0 0c             	add    eax,0xc
c0014851:	50                   	push   eax
c0014852:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014857:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001485d:	e8 0e c2 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014862:	59                   	pop    ecx
c0014863:	58                   	pop    eax
c0014864:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014869:	68 c2 b7 02 c0       	push   0xc002b7c2
c001486e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014874:	e8 f7 c1 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014879:	58                   	pop    eax
c001487a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001487f:	5a                   	pop    edx
c0014880:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014883:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014889:	e8 9c c1 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c001488e:	59                   	pop    ecx
c001488f:	58                   	pop    eax
c0014890:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014895:	68 ca b7 02 c0       	push   0xc002b7ca
c001489a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148a0:	e8 cb c1 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c00148a5:	58                   	pop    eax
c00148a6:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00148ab:	5a                   	pop    edx
c00148ac:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00148af:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148b5:	e8 70 c1 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c00148ba:	59                   	pop    ecx
c00148bb:	58                   	pop    eax
c00148bc:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00148c1:	68 d2 b7 02 c0       	push   0xc002b7d2
c00148c6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148cc:	e8 9f c1 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c00148d1:	58                   	pop    eax
c00148d2:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00148d7:	5a                   	pop    edx
c00148d8:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00148db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148e1:	e8 44 c1 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c00148e6:	59                   	pop    ecx
c00148e7:	58                   	pop    eax
c00148e8:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00148ed:	68 da b7 02 c0       	push   0xc002b7da
c00148f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148f8:	e8 73 c1 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c00148fd:	58                   	pop    eax
c00148fe:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014903:	5a                   	pop    edx
c0014904:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014907:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001490d:	e8 18 c1 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c0014912:	59                   	pop    ecx
c0014913:	58                   	pop    eax
c0014914:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014919:	68 e2 b7 02 c0       	push   0xc002b7e2
c001491e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014924:	e8 47 c1 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014929:	58                   	pop    eax
c001492a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001492f:	5a                   	pop    edx
c0014930:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014933:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014939:	e8 ec c0 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c001493e:	59                   	pop    ecx
c001493f:	58                   	pop    eax
c0014940:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014945:	68 ea b7 02 c0       	push   0xc002b7ea
c001494a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014950:	e8 1b c1 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014955:	58                   	pop    eax
c0014956:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001495b:	5a                   	pop    edx
c001495c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001495f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014965:	e8 c0 c0 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c001496a:	59                   	pop    ecx
c001496b:	58                   	pop    eax
c001496c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014971:	68 f2 b7 02 c0       	push   0xc002b7f2
c0014976:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001497c:	e8 ef c0 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014981:	58                   	pop    eax
c0014982:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014987:	5a                   	pop    edx
c0014988:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001498c:	52                   	push   edx
c001498d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014993:	e8 92 c0 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c0014998:	59                   	pop    ecx
c0014999:	58                   	pop    eax
c001499a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001499f:	68 fb b7 02 c0       	push   0xc002b7fb
c00149a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149aa:	e8 c1 c0 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c00149af:	58                   	pop    eax
c00149b0:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00149b5:	5a                   	pop    edx
c00149b6:	57                   	push   edi
c00149b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149bd:	e8 68 c0 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c00149c2:	59                   	pop    ecx
c00149c3:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00149c8:	5f                   	pop    edi
c00149c9:	68 03 b8 02 c0       	push   0xc002b803
c00149ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149d4:	e8 97 c0 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c00149d9:	58                   	pop    eax
c00149da:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00149df:	5a                   	pop    edx
c00149e0:	56                   	push   esi
c00149e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e7:	e8 3e c0 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c00149ec:	59                   	pop    ecx
c00149ed:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c00149f2:	5e                   	pop    esi
c00149f3:	68 0b b8 02 c0       	push   0xc002b80b
c00149f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149fe:	e8 6d c0 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014a03:	5f                   	pop    edi
c0014a04:	58                   	pop    eax
c0014a05:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014a0a:	55                   	push   ebp
c0014a0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a11:	e8 14 c0 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c0014a16:	58                   	pop    eax
c0014a17:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014a1c:	5a                   	pop    edx
c0014a1d:	68 13 b8 02 c0       	push   0xc002b813
c0014a22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a28:	e8 43 c0 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014a2d:	0f 21 c0             	mov    eax,db0
c0014a30:	59                   	pop    ecx
c0014a31:	5e                   	pop    esi
c0014a32:	50                   	push   eax
c0014a33:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014a38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a3e:	e8 e7 bf ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c0014a43:	5f                   	pop    edi
c0014a44:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014a49:	5d                   	pop    ebp
c0014a4a:	68 1c b8 02 c0       	push   0xc002b81c
c0014a4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a55:	e8 16 c0 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014a5a:	0f 21 c8             	mov    eax,db1
c0014a5d:	5a                   	pop    edx
c0014a5e:	59                   	pop    ecx
c0014a5f:	50                   	push   eax
c0014a60:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014a65:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a6b:	e8 ba bf ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c0014a70:	5e                   	pop    esi
c0014a71:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014a76:	5f                   	pop    edi
c0014a77:	68 24 b8 02 c0       	push   0xc002b824
c0014a7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a82:	e8 e9 bf ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014a87:	0f 21 d0             	mov    eax,db2
c0014a8a:	5d                   	pop    ebp
c0014a8b:	5a                   	pop    edx
c0014a8c:	50                   	push   eax
c0014a8d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014a92:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014a98:	e8 8d bf ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c0014a9d:	59                   	pop    ecx
c0014a9e:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014aa3:	5e                   	pop    esi
c0014aa4:	68 2c b8 02 c0       	push   0xc002b82c
c0014aa9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aaf:	e8 bc bf ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014ab4:	0f 21 d8             	mov    eax,db3
c0014ab7:	5f                   	pop    edi
c0014ab8:	5d                   	pop    ebp
c0014ab9:	50                   	push   eax
c0014aba:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014abf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ac5:	e8 60 bf ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c0014aca:	58                   	pop    eax
c0014acb:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014ad0:	5a                   	pop    edx
c0014ad1:	68 34 b8 02 c0       	push   0xc002b834
c0014ad6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014adc:	e8 8f bf ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014ae1:	0f 21 f0             	mov    eax,db6
c0014ae4:	59                   	pop    ecx
c0014ae5:	5e                   	pop    esi
c0014ae6:	50                   	push   eax
c0014ae7:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014aec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014af2:	e8 33 bf ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c0014af7:	5f                   	pop    edi
c0014af8:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014afd:	5d                   	pop    ebp
c0014afe:	68 3c b8 02 c0       	push   0xc002b83c
c0014b03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b09:	e8 62 bf ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014b0e:	0f 21 f8             	mov    eax,db7
c0014b11:	5a                   	pop    edx
c0014b12:	59                   	pop    ecx
c0014b13:	50                   	push   eax
c0014b14:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014b19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1f:	e8 06 bf ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c0014b24:	5e                   	pop    esi
c0014b25:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b28:	e8 07 8b 00 00       	call   c001d634 <Thr::getDriverNameFromAddress(unsigned long)>
c0014b2d:	83 c4 10             	add    esp,0x10
c0014b30:	85 c0                	test   eax,eax
c0014b32:	74 7d                	je     c0014bb1 <displayDebugInfo(regs*)+0x48b>
c0014b34:	89 c6                	mov    esi,eax
c0014b36:	50                   	push   eax
c0014b37:	50                   	push   eax
c0014b38:	56                   	push   esi
c0014b39:	68 44 b8 02 c0       	push   0xc002b844
c0014b3e:	e8 38 dd ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0014b43:	5a                   	pop    edx
c0014b44:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014b49:	59                   	pop    ecx
c0014b4a:	68 52 b8 02 c0       	push   0xc002b852
c0014b4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b55:	e8 16 bf ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014b5a:	5f                   	pop    edi
c0014b5b:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014b60:	5d                   	pop    ebp
c0014b61:	56                   	push   esi
c0014b62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b68:	e8 03 bf ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014b6d:	58                   	pop    eax
c0014b6e:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014b73:	5a                   	pop    edx
c0014b74:	68 5e b8 02 c0       	push   0xc002b85e
c0014b79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b7f:	e8 ec be ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c0014b84:	59                   	pop    ecx
c0014b85:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0014b8a:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014b90:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b93:	e8 d3 8a 00 00       	call   c001d66b <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014b98:	5b                   	pop    ebx
c0014b99:	5d                   	pop    ebp
c0014b9a:	50                   	push   eax
c0014b9b:	57                   	push   edi
c0014b9c:	e8 89 be ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c0014ba1:	58                   	pop    eax
c0014ba2:	5a                   	pop    edx
c0014ba3:	56                   	push   esi
c0014ba4:	68 6a b8 02 c0       	push   0xc002b86a
c0014ba9:	e8 cd dc ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0014bae:	83 c4 10             	add    esp,0x10
c0014bb1:	fa                   	cli    
c0014bb2:	f4                   	hlt    
c0014bb3:	eb fe                	jmp    c0014bb3 <displayDebugInfo(regs*)+0x48d>

c0014bb5 <x87EmulHandler(regs*, void*)>:
c0014bb5:	83 ec 0c             	sub    esp,0xc
c0014bb8:	0f 20 c2             	mov    edx,cr0
c0014bbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bc0:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0014bc4:	75 4b                	jne    c0014c11 <x87EmulHandler(regs*, void*)+0x5c>
c0014bc6:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0014bcb:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0014bd1:	85 c0                	test   eax,eax
c0014bd3:	74 05                	je     c0014bda <x87EmulHandler(regs*, void*)+0x25>
c0014bd5:	83 e2 08             	and    edx,0x8
c0014bd8:	75 17                	jne    c0014bf1 <x87EmulHandler(regs*, void*)+0x3c>
c0014bda:	83 ec 0c             	sub    esp,0xc
c0014bdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014be1:	e8 45 af 00 00       	call   c001fb2b <Vm::x87Handler(regs*)>
c0014be6:	83 c4 10             	add    esp,0x10
c0014be9:	84 c0                	test   al,al
c0014beb:	74 24                	je     c0014c11 <x87EmulHandler(regs*, void*)+0x5c>
c0014bed:	83 c4 0c             	add    esp,0xc
c0014bf0:	c3                   	ret    
c0014bf1:	83 ec 0c             	sub    esp,0xc
c0014bf4:	68 90 b8 02 c0       	push   0xc002b890
c0014bf9:	e8 7d dc ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0014bfe:	0f 06                	clts   
c0014c00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014c05:	83 c4 10             	add    esp,0x10
c0014c08:	a3 c8 ef 02 c0       	mov    ds:0xc002efc8,eax
c0014c0d:	83 c4 0c             	add    esp,0xc
c0014c10:	c3                   	ret    
c0014c11:	83 ec 0c             	sub    esp,0xc
c0014c14:	68 7a b8 02 c0       	push   0xc002b87a
c0014c19:	e8 5d dc ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0014c1e:	5a                   	pop    edx
c0014c1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c23:	e8 fe fa ff ff       	call   c0014726 <displayDebugInfo(regs*)>

c0014c28 <gpFault(regs*, void*)>:
c0014c28:	53                   	push   ebx
c0014c29:	83 ec 14             	sub    esp,0x14
c0014c2c:	c7 05 c4 ef 02 c0 04 f0 01 c0 	mov    DWORD PTR ds:0xc002efc4,0xc001f004
c0014c36:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014c3a:	53                   	push   ebx
c0014c3b:	e8 c4 a3 00 00       	call   c001f004 <Vm::faultHandler(regs*)>
c0014c40:	83 c4 10             	add    esp,0x10
c0014c43:	84 c0                	test   al,al
c0014c45:	74 05                	je     c0014c4c <gpFault(regs*, void*)+0x24>
c0014c47:	83 c4 08             	add    esp,0x8
c0014c4a:	5b                   	pop    ebx
c0014c4b:	c3                   	ret    
c0014c4c:	83 ec 0c             	sub    esp,0xc
c0014c4f:	68 9d b8 02 c0       	push   0xc002b89d
c0014c54:	e8 22 dc ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0014c59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c5c:	e8 c5 fa ff ff       	call   c0014726 <displayDebugInfo(regs*)>

c0014c61 <pgFault(regs*, void*)>:
c0014c61:	83 ec 18             	sub    esp,0x18
c0014c64:	68 b8 b8 02 c0       	push   0xc002b8b8
c0014c69:	e8 0d dc ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0014c6e:	58                   	pop    eax
c0014c6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c73:	e8 ae fa ff ff       	call   c0014726 <displayDebugInfo(regs*)>

c0014c78 <otherISRHandler(regs*, void*)>:
c0014c78:	53                   	push   ebx
c0014c79:	83 ec 0c             	sub    esp,0xc
c0014c7c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c80:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014c83:	50                   	push   eax
c0014c84:	50                   	push   eax
c0014c85:	68 c5 b8 02 c0       	push   0xc002b8c5
c0014c8a:	e8 ec db ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0014c8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c92:	e8 8f fa ff ff       	call   c0014726 <displayDebugInfo(regs*)>

c0014c97 <opcodeFault(regs*, void*)>:
c0014c97:	55                   	push   ebp
c0014c98:	89 e5                	mov    ebp,esp
c0014c9a:	56                   	push   esi
c0014c9b:	53                   	push   ebx
c0014c9c:	83 ec 40             	sub    esp,0x40
c0014c9f:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0014ca4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014caa:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014cb0:	84 c0                	test   al,al
c0014cb2:	74 24                	je     c0014cd8 <opcodeFault(regs*, void*)+0x41>
c0014cb4:	83 ec 0c             	sub    esp,0xc
c0014cb7:	68 e4 b8 02 c0       	push   0xc002b8e4
c0014cbc:	e8 ba db ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0014cc1:	83 c4 10             	add    esp,0x10
c0014cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cc7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cca:	8d 50 19             	lea    edx,[eax+0x19]
c0014ccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cd0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014cd3:	e9 d5 05 00 00       	jmp    c00152ad <opcodeFault(regs*, void*)+0x616>
c0014cd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cdb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cde:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014ce1:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014ce5:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014ce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cec:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014cef:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014cf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cf5:	8a 00                	mov    al,BYTE PTR [eax]
c0014cf7:	3c f0                	cmp    al,0xf0
c0014cf9:	75 17                	jne    c0014d12 <opcodeFault(regs*, void*)+0x7b>
c0014cfb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014cfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d01:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d04:	8d 50 01             	lea    edx,[eax+0x1]
c0014d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d0d:	e9 da 00 00 00       	jmp    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014d12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d15:	8a 00                	mov    al,BYTE PTR [eax]
c0014d17:	3c f2                	cmp    al,0xf2
c0014d19:	74 09                	je     c0014d24 <opcodeFault(regs*, void*)+0x8d>
c0014d1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d1e:	8a 00                	mov    al,BYTE PTR [eax]
c0014d20:	3c f3                	cmp    al,0xf3
c0014d22:	75 1b                	jne    c0014d3f <opcodeFault(regs*, void*)+0xa8>
c0014d24:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d2e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d31:	8d 50 01             	lea    edx,[eax+0x1]
c0014d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d37:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d3a:	e9 ad 00 00 00       	jmp    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014d3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d42:	8a 00                	mov    al,BYTE PTR [eax]
c0014d44:	3c 66                	cmp    al,0x66
c0014d46:	75 1f                	jne    c0014d67 <opcodeFault(regs*, void*)+0xd0>
c0014d48:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d4c:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014d50:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d56:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d59:	8d 50 01             	lea    edx,[eax+0x1]
c0014d5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d5f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d62:	e9 85 00 00 00       	jmp    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014d67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d6a:	8a 00                	mov    al,BYTE PTR [eax]
c0014d6c:	3c 67                	cmp    al,0x67
c0014d6e:	75 18                	jne    c0014d88 <opcodeFault(regs*, void*)+0xf1>
c0014d70:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d74:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014d77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d7d:	8d 50 01             	lea    edx,[eax+0x1]
c0014d80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d83:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014d86:	eb 64                	jmp    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014d88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d8b:	8a 00                	mov    al,BYTE PTR [eax]
c0014d8d:	3c 2e                	cmp    al,0x2e
c0014d8f:	74 09                	je     c0014d9a <opcodeFault(regs*, void*)+0x103>
c0014d91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014d94:	8a 00                	mov    al,BYTE PTR [eax]
c0014d96:	3c 3e                	cmp    al,0x3e
c0014d98:	75 18                	jne    c0014db2 <opcodeFault(regs*, void*)+0x11b>
c0014d9a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014d9e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014da1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014da7:	8d 50 01             	lea    edx,[eax+0x1]
c0014daa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014db0:	eb 3a                	jmp    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014db2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014db5:	8a 00                	mov    al,BYTE PTR [eax]
c0014db7:	3c 36                	cmp    al,0x36
c0014db9:	74 1b                	je     c0014dd6 <opcodeFault(regs*, void*)+0x13f>
c0014dbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dbe:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc0:	3c 26                	cmp    al,0x26
c0014dc2:	74 12                	je     c0014dd6 <opcodeFault(regs*, void*)+0x13f>
c0014dc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dc7:	8a 00                	mov    al,BYTE PTR [eax]
c0014dc9:	3c 64                	cmp    al,0x64
c0014dcb:	74 09                	je     c0014dd6 <opcodeFault(regs*, void*)+0x13f>
c0014dcd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dd0:	8a 00                	mov    al,BYTE PTR [eax]
c0014dd2:	3c 65                	cmp    al,0x65
c0014dd4:	75 16                	jne    c0014dec <opcodeFault(regs*, void*)+0x155>
c0014dd6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014dda:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014de3:	8d 50 01             	lea    edx,[eax+0x1]
c0014de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014dec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014def:	8a 00                	mov    al,BYTE PTR [eax]
c0014df1:	3c 0f                	cmp    al,0xf
c0014df3:	0f 85 ad 00 00 00    	jne    c0014ea6 <opcodeFault(regs*, void*)+0x20f>
c0014df9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014dfc:	40                   	inc    eax
c0014dfd:	8a 00                	mov    al,BYTE PTR [eax]
c0014dff:	3c c2                	cmp    al,0xc2
c0014e01:	74 0e                	je     c0014e11 <opcodeFault(regs*, void*)+0x17a>
c0014e03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e06:	40                   	inc    eax
c0014e07:	8a 00                	mov    al,BYTE PTR [eax]
c0014e09:	3c c3                	cmp    al,0xc3
c0014e0b:	0f 85 95 00 00 00    	jne    c0014ea6 <opcodeFault(regs*, void*)+0x20f>
c0014e11:	83 ec 0c             	sub    esp,0xc
c0014e14:	68 07 b9 02 c0       	push   0xc002b907
c0014e19:	e8 5d da ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0014e1e:	83 c4 10             	add    esp,0x10
c0014e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e24:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e27:	8d 50 01             	lea    edx,[eax+0x1]
c0014e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e30:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e36:	8a 00                	mov    al,BYTE PTR [eax]
c0014e38:	8d 50 fe             	lea    edx,[eax-0x2]
c0014e3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e3e:	88 10                	mov    BYTE PTR [eax],dl
c0014e40:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014e43:	50                   	push   eax
c0014e44:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014e47:	50                   	push   eax
c0014e48:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014e4b:	50                   	push   eax
c0014e4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e4f:	e8 2a 4b 00 00       	call   c001997e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e54:	83 c4 10             	add    esp,0x10
c0014e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e5a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e5d:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e60:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014e63:	01 d0                	add    eax,edx
c0014e65:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e6b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e6e:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014e71:	48                   	dec    eax
c0014e72:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e78:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014e7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e81:	83 ec 04             	sub    esp,0x4
c0014e84:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014e87:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014e8a:	50                   	push   eax
c0014e8b:	e8 24 b3 fe ff       	call   c00001b4 <voodooXADD>
c0014e90:	83 c4 10             	add    esp,0x10
c0014e93:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014e96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014e99:	01 c2                	add    edx,eax
c0014e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e9e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ea1:	e9 07 04 00 00       	jmp    c00152ad <opcodeFault(regs*, void*)+0x616>
c0014ea6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ea9:	8a 00                	mov    al,BYTE PTR [eax]
c0014eab:	3c 0f                	cmp    al,0xf
c0014ead:	0f 85 8b 01 00 00    	jne    c001503e <opcodeFault(regs*, void*)+0x3a7>
c0014eb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eb6:	40                   	inc    eax
c0014eb7:	8a 00                	mov    al,BYTE PTR [eax]
c0014eb9:	3c c7                	cmp    al,0xc7
c0014ebb:	0f 86 7d 01 00 00    	jbe    c001503e <opcodeFault(regs*, void*)+0x3a7>
c0014ec1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec4:	40                   	inc    eax
c0014ec5:	8a 00                	mov    al,BYTE PTR [eax]
c0014ec7:	3c cf                	cmp    al,0xcf
c0014ec9:	0f 87 6f 01 00 00    	ja     c001503e <opcodeFault(regs*, void*)+0x3a7>
c0014ecf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ed2:	40                   	inc    eax
c0014ed3:	8a 00                	mov    al,BYTE PTR [eax]
c0014ed5:	83 c0 38             	add    eax,0x38
c0014ed8:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014edb:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014edf:	75 0b                	jne    c0014eec <opcodeFault(regs*, void*)+0x255>
c0014ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ee4:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ee7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014eea:	eb 75                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014eec:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ef0:	75 0b                	jne    c0014efd <opcodeFault(regs*, void*)+0x266>
c0014ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ef5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ef8:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014efb:	eb 64                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014efd:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014f01:	75 0b                	jne    c0014f0e <opcodeFault(regs*, void*)+0x277>
c0014f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f06:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014f09:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f0c:	eb 53                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f0e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014f12:	75 0b                	jne    c0014f1f <opcodeFault(regs*, void*)+0x288>
c0014f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f17:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f1a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f1d:	eb 42                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f1f:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014f23:	75 0b                	jne    c0014f30 <opcodeFault(regs*, void*)+0x299>
c0014f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f28:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014f2b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f2e:	eb 31                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f30:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014f34:	75 0b                	jne    c0014f41 <opcodeFault(regs*, void*)+0x2aa>
c0014f36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f39:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014f3c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f3f:	eb 20                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f41:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014f45:	75 0b                	jne    c0014f52 <opcodeFault(regs*, void*)+0x2bb>
c0014f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014f4d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f50:	eb 0f                	jmp    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f52:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014f56:	75 09                	jne    c0014f61 <opcodeFault(regs*, void*)+0x2ca>
c0014f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f5b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014f5e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014f61:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014f65:	74 10                	je     c0014f77 <opcodeFault(regs*, void*)+0x2e0>
c0014f67:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014f6e:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014f75:	eb 2d                	jmp    c0014fa4 <opcodeFault(regs*, void*)+0x30d>
c0014f77:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f7a:	c1 e0 18             	shl    eax,0x18
c0014f7d:	89 c2                	mov    edx,eax
c0014f7f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f82:	c1 e0 08             	shl    eax,0x8
c0014f85:	25 00 00 ff 00       	and    eax,0xff0000
c0014f8a:	09 c2                	or     edx,eax
c0014f8c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f8f:	c1 e8 08             	shr    eax,0x8
c0014f92:	25 00 ff 00 00       	and    eax,0xff00
c0014f97:	09 c2                	or     edx,eax
c0014f99:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014f9c:	c1 e8 18             	shr    eax,0x18
c0014f9f:	09 d0                	or     eax,edx
c0014fa1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014fa4:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014fa8:	75 0b                	jne    c0014fb5 <opcodeFault(regs*, void*)+0x31e>
c0014faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fad:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fb0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014fb3:	eb 75                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c0014fb5:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014fb9:	75 0b                	jne    c0014fc6 <opcodeFault(regs*, void*)+0x32f>
c0014fbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fbe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fc1:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014fc4:	eb 64                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c0014fc6:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014fca:	75 0b                	jne    c0014fd7 <opcodeFault(regs*, void*)+0x340>
c0014fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fd2:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014fd5:	eb 53                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c0014fd7:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014fdb:	75 0b                	jne    c0014fe8 <opcodeFault(regs*, void*)+0x351>
c0014fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe0:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014fe3:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014fe6:	eb 42                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c0014fe8:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014fec:	75 0b                	jne    c0014ff9 <opcodeFault(regs*, void*)+0x362>
c0014fee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ff4:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014ff7:	eb 31                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c0014ff9:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014ffd:	75 0b                	jne    c001500a <opcodeFault(regs*, void*)+0x373>
c0014fff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015002:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015005:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015008:	eb 20                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c001500a:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001500e:	75 0b                	jne    c001501b <opcodeFault(regs*, void*)+0x384>
c0015010:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015013:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015016:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015019:	eb 0f                	jmp    c001502a <opcodeFault(regs*, void*)+0x393>
c001501b:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001501f:	75 09                	jne    c001502a <opcodeFault(regs*, void*)+0x393>
c0015021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015024:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015027:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001502a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015030:	8d 50 02             	lea    edx,[eax+0x2]
c0015033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015036:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015039:	e9 6f 02 00 00       	jmp    c00152ad <opcodeFault(regs*, void*)+0x616>
c001503e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015041:	8a 00                	mov    al,BYTE PTR [eax]
c0015043:	3c 0f                	cmp    al,0xf
c0015045:	0f 85 8d 01 00 00    	jne    c00151d8 <opcodeFault(regs*, void*)+0x541>
c001504b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001504e:	40                   	inc    eax
c001504f:	8a 00                	mov    al,BYTE PTR [eax]
c0015051:	3c c7                	cmp    al,0xc7
c0015053:	0f 85 7f 01 00 00    	jne    c00151d8 <opcodeFault(regs*, void*)+0x541>
c0015059:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001505c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015062:	8d 50 01             	lea    edx,[eax+0x1]
c0015065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015068:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001506b:	8d 45 ba             	lea    eax,[ebp-0x46]
c001506e:	50                   	push   eax
c001506f:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015072:	50                   	push   eax
c0015073:	8d 45 bc             	lea    eax,[ebp-0x44]
c0015076:	50                   	push   eax
c0015077:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001507a:	e8 ff 48 00 00       	call   c001997e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001507f:	83 c4 10             	add    esp,0x10
c0015082:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015085:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015088:	83 f0 01             	xor    eax,0x1
c001508b:	84 c0                	test   al,al
c001508d:	0f 84 45 01 00 00    	je     c00151d8 <opcodeFault(regs*, void*)+0x541>
c0015093:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015096:	3c 01                	cmp    al,0x1
c0015098:	0f 85 3a 01 00 00    	jne    c00151d8 <opcodeFault(regs*, void*)+0x541>
c001509e:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00150a1:	83 f0 01             	xor    eax,0x1
c00150a4:	84 c0                	test   al,al
c00150a6:	0f 84 2c 01 00 00    	je     c00151d8 <opcodeFault(regs*, void*)+0x541>
c00150ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150af:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00150b2:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150b5:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00150bc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00150bf:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00150c2:	89 c2                	mov    edx,eax
c00150c4:	b8 00 00 00 00       	mov    eax,0x0
c00150c9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00150cc:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00150cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d2:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00150d5:	ba 00 00 00 00       	mov    edx,0x0
c00150da:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00150dd:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00150e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e3:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00150e6:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00150e9:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00150f0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00150f3:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00150f6:	89 c2                	mov    edx,eax
c00150f8:	b8 00 00 00 00       	mov    eax,0x0
c00150fd:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015100:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015106:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015109:	ba 00 00 00 00       	mov    edx,0x0
c001510e:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0015111:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015114:	fa                   	cli    
c0015115:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001511a:	40                   	inc    eax
c001511b:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015120:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015123:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015126:	8b 00                	mov    eax,DWORD PTR [eax]
c0015128:	89 c1                	mov    ecx,eax
c001512a:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c001512d:	89 cb                	mov    ebx,ecx
c001512f:	89 d0                	mov    eax,edx
c0015131:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0015134:	89 c6                	mov    esi,eax
c0015136:	89 f0                	mov    eax,esi
c0015138:	09 d8                	or     eax,ebx
c001513a:	85 c0                	test   eax,eax
c001513c:	75 21                	jne    c001515f <opcodeFault(regs*, void*)+0x4c8>
c001513e:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015141:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015144:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015147:	89 01                	mov    DWORD PTR [ecx],eax
c0015149:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001514c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001514f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015152:	83 c8 40             	or     eax,0x40
c0015155:	89 c2                	mov    edx,eax
c0015157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001515a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001515d:	eb 3e                	jmp    c001519d <opcodeFault(regs*, void*)+0x506>
c001515f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015162:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0015165:	8b 00                	mov    eax,DWORD PTR [eax]
c0015167:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001516a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001516d:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015173:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015176:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015179:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001517c:	89 d0                	mov    eax,edx
c001517e:	31 d2                	xor    edx,edx
c0015180:	89 c3                	mov    ebx,eax
c0015182:	89 d6                	mov    esi,edx
c0015184:	89 da                	mov    edx,ebx
c0015186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015189:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001518c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001518f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015192:	83 e0 bf             	and    eax,0xffffffbf
c0015195:	89 c2                	mov    edx,eax
c0015197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001519a:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c001519d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00151a2:	48                   	dec    eax
c00151a3:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00151a8:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00151ad:	85 c0                	test   eax,eax
c00151af:	75 01                	jne    c00151b2 <opcodeFault(regs*, void*)+0x51b>
c00151b1:	fb                   	sti    
c00151b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151b8:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00151bb:	01 c2                	add    edx,eax
c00151bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151c3:	83 ec 0c             	sub    esp,0xc
c00151c6:	68 16 b9 02 c0       	push   0xc002b916
c00151cb:	e8 ab d6 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00151d0:	83 c4 10             	add    esp,0x10
c00151d3:	e9 d5 00 00 00       	jmp    c00152ad <opcodeFault(regs*, void*)+0x616>
c00151d8:	83 ec 0c             	sub    esp,0xc
c00151db:	68 29 b9 02 c0       	push   0xc002b929
c00151e0:	e8 96 d6 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00151e5:	83 c4 10             	add    esp,0x10
c00151e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151eb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00151ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151f1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00151f4:	c1 e0 04             	shl    eax,0x4
c00151f7:	01 d0                	add    eax,edx
c00151f9:	83 c0 03             	add    eax,0x3
c00151fc:	8a 00                	mov    al,BYTE PTR [eax]
c00151fe:	0f b6 d8             	movzx  ebx,al
c0015201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015204:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001520a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001520d:	c1 e0 04             	shl    eax,0x4
c0015210:	01 d0                	add    eax,edx
c0015212:	83 c0 02             	add    eax,0x2
c0015215:	8a 00                	mov    al,BYTE PTR [eax]
c0015217:	0f b6 c8             	movzx  ecx,al
c001521a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001521d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015223:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015226:	c1 e0 04             	shl    eax,0x4
c0015229:	01 d0                	add    eax,edx
c001522b:	40                   	inc    eax
c001522c:	8a 00                	mov    al,BYTE PTR [eax]
c001522e:	0f b6 d0             	movzx  edx,al
c0015231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015234:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015237:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001523d:	c1 e0 04             	shl    eax,0x4
c0015240:	01 f0                	add    eax,esi
c0015242:	8a 00                	mov    al,BYTE PTR [eax]
c0015244:	0f b6 c0             	movzx  eax,al
c0015247:	83 ec 0c             	sub    esp,0xc
c001524a:	53                   	push   ebx
c001524b:	51                   	push   ecx
c001524c:	52                   	push   edx
c001524d:	50                   	push   eax
c001524e:	68 3c b9 02 c0       	push   0xc002b93c
c0015253:	e8 23 d6 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0015258:	83 c4 20             	add    esp,0x20
c001525b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015261:	83 c0 03             	add    eax,0x3
c0015264:	8a 00                	mov    al,BYTE PTR [eax]
c0015266:	0f b6 d8             	movzx  ebx,al
c0015269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001526f:	83 c0 02             	add    eax,0x2
c0015272:	8a 00                	mov    al,BYTE PTR [eax]
c0015274:	0f b6 c8             	movzx  ecx,al
c0015277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001527a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001527d:	40                   	inc    eax
c001527e:	8a 00                	mov    al,BYTE PTR [eax]
c0015280:	0f b6 d0             	movzx  edx,al
c0015283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015286:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015289:	8a 00                	mov    al,BYTE PTR [eax]
c001528b:	0f b6 c0             	movzx  eax,al
c001528e:	83 ec 0c             	sub    esp,0xc
c0015291:	53                   	push   ebx
c0015292:	51                   	push   ecx
c0015293:	52                   	push   edx
c0015294:	50                   	push   eax
c0015295:	68 64 b9 02 c0       	push   0xc002b964
c001529a:	e8 dc d5 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001529f:	83 c4 20             	add    esp,0x20
c00152a2:	83 ec 0c             	sub    esp,0xc
c00152a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00152a8:	e8 79 f4 ff ff       	call   c0014726 <displayDebugInfo(regs*)>
c00152ad:	8d 65 f8             	lea    esp,[ebp-0x8]
c00152b0:	5b                   	pop    ebx
c00152b1:	5e                   	pop    esi
c00152b2:	5d                   	pop    ebp
c00152b3:	c3                   	ret    

c00152b4 <displayProgramFault(char const*)>:
c00152b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152bc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00152c2:	85 c0                	test   eax,eax
c00152c4:	74 15                	je     c00152db <displayProgramFault(char const*)+0x27>
c00152c6:	83 ec 0c             	sub    esp,0xc
c00152c9:	6a 04                	push   0x4
c00152cb:	6a 0f                	push   0xf
c00152cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00152d1:	50                   	push   eax
c00152d2:	e8 95 b4 ff ff       	call   c001076c <VgaText::puts(char const*, VgaColour, VgaColour)>
c00152d7:	83 c4 1c             	add    esp,0x1c
c00152da:	c3                   	ret    
c00152db:	c3                   	ret    

c00152dc <setupInterruptController()>:
c00152dc:	55                   	push   ebp
c00152dd:	89 e5                	mov    ebp,esp
c00152df:	53                   	push   ebx
c00152e0:	83 ec 24             	sub    esp,0x24
c00152e3:	b8 00 00 00 00       	mov    eax,0x0
c00152e8:	85 c0                	test   eax,eax
c00152ea:	0f 95 c0             	setne  al
c00152ed:	84 c0                	test   al,al
c00152ef:	74 5b                	je     c001534c <setupInterruptController()+0x70>
c00152f1:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00152f8:	83 ec 0c             	sub    esp,0xc
c00152fb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00152fe:	e8 89 a5 ff ff       	call   c000f88c <malloc>
c0015303:	83 c4 10             	add    esp,0x10
c0015306:	89 c3                	mov    ebx,eax
c0015308:	83 ec 0c             	sub    esp,0xc
c001530b:	53                   	push   ebx
c001530c:	e8 09 0e 01 00       	call   c002611a <APIC::APIC()>
c0015311:	83 c4 10             	add    esp,0x10
c0015314:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015317:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001531a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001531d:	8b 00                	mov    eax,DWORD PTR [eax]
c001531f:	83 c0 08             	add    eax,0x8
c0015322:	8b 00                	mov    eax,DWORD PTR [eax]
c0015324:	6a 00                	push   0x0
c0015326:	6a 00                	push   0x0
c0015328:	6a 00                	push   0x0
c001532a:	52                   	push   edx
c001532b:	ff d0                	call   eax
c001532d:	83 c4 10             	add    esp,0x10
c0015330:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0015335:	83 ec 08             	sub    esp,0x8
c0015338:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001533b:	50                   	push   eax
c001533c:	e8 73 e9 ff ff       	call   c0013cb4 <Device::addChild(Device*)>
c0015341:	83 c4 10             	add    esp,0x10
c0015344:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015347:	e9 89 03 00 00       	jmp    c00156d5 <setupInterruptController()+0x3f9>
c001534c:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c0015351:	84 c0                	test   al,al
c0015353:	75 24                	jne    c0015379 <setupInterruptController()+0x9d>
c0015355:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001535a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015360:	83 e2 fe             	and    edx,0xfffffffe
c0015363:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015369:	83 ec 0c             	sub    esp,0xc
c001536c:	68 89 b9 02 c0       	push   0xc002b989
c0015371:	e8 05 d5 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0015376:	83 c4 10             	add    esp,0x10
c0015379:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001537e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015384:	83 e0 01             	and    eax,0x1
c0015387:	84 c0                	test   al,al
c0015389:	0f 95 c0             	setne  al
c001538c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001538f:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015396:	83 ec 0c             	sub    esp,0xc
c0015399:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001539c:	e8 eb a4 ff ff       	call   c000f88c <malloc>
c00153a1:	83 c4 10             	add    esp,0x10
c00153a4:	89 c3                	mov    ebx,eax
c00153a6:	83 ec 0c             	sub    esp,0xc
c00153a9:	53                   	push   ebx
c00153aa:	e8 c3 12 01 00       	call   c0026672 <PIC::PIC()>
c00153af:	83 c4 10             	add    esp,0x10
c00153b2:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00153b5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153bb:	8b 00                	mov    eax,DWORD PTR [eax]
c00153bd:	83 c0 08             	add    eax,0x8
c00153c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00153c2:	6a 00                	push   0x0
c00153c4:	6a 00                	push   0x0
c00153c6:	6a 00                	push   0x0
c00153c8:	52                   	push   edx
c00153c9:	ff d0                	call   eax
c00153cb:	83 c4 10             	add    esp,0x10
c00153ce:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c00153d2:	74 73                	je     c0015447 <setupInterruptController()+0x16b>
c00153d4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00153d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153da:	8b 00                	mov    eax,DWORD PTR [eax]
c00153dc:	83 c0 0c             	add    eax,0xc
c00153df:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e1:	6a 00                	push   0x0
c00153e3:	6a 00                	push   0x0
c00153e5:	6a 00                	push   0x0
c00153e7:	52                   	push   edx
c00153e8:	ff d0                	call   eax
c00153ea:	83 c4 10             	add    esp,0x10
c00153ed:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00153f1:	74 15                	je     c0015408 <setupInterruptController()+0x12c>
c00153f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153f8:	83 c0 04             	add    eax,0x4
c00153fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00153fd:	83 ec 0c             	sub    esp,0xc
c0015400:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015403:	ff d0                	call   eax
c0015405:	83 c4 10             	add    esp,0x10
c0015408:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001540f:	83 ec 0c             	sub    esp,0xc
c0015412:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015415:	e8 72 a4 ff ff       	call   c000f88c <malloc>
c001541a:	83 c4 10             	add    esp,0x10
c001541d:	89 c3                	mov    ebx,eax
c001541f:	83 ec 0c             	sub    esp,0xc
c0015422:	53                   	push   ebx
c0015423:	e8 f2 0c 01 00       	call   c002611a <APIC::APIC()>
c0015428:	83 c4 10             	add    esp,0x10
c001542b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001542e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015431:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015434:	8b 00                	mov    eax,DWORD PTR [eax]
c0015436:	83 c0 08             	add    eax,0x8
c0015439:	8b 00                	mov    eax,DWORD PTR [eax]
c001543b:	6a 00                	push   0x0
c001543d:	6a 00                	push   0x0
c001543f:	6a 00                	push   0x0
c0015441:	52                   	push   edx
c0015442:	ff d0                	call   eax
c0015444:	83 c4 10             	add    esp,0x10
c0015447:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001544c:	83 ec 08             	sub    esp,0x8
c001544f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015452:	50                   	push   eax
c0015453:	e8 5c e8 ff ff       	call   c0013cb4 <Device::addChild(Device*)>
c0015458:	83 c4 10             	add    esp,0x10
c001545b:	c7 05 c8 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efc8,0x0
c0015465:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015468:	8b 00                	mov    eax,DWORD PTR [eax]
c001546a:	83 c0 24             	add    eax,0x24
c001546d:	8b 00                	mov    eax,DWORD PTR [eax]
c001546f:	6a 00                	push   0x0
c0015471:	68 78 4c 01 c0       	push   0xc0014c78
c0015476:	6a 00                	push   0x0
c0015478:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001547b:	ff d0                	call   eax
c001547d:	83 c4 10             	add    esp,0x10
c0015480:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015483:	8b 00                	mov    eax,DWORD PTR [eax]
c0015485:	83 c0 24             	add    eax,0x24
c0015488:	8b 00                	mov    eax,DWORD PTR [eax]
c001548a:	6a 00                	push   0x0
c001548c:	68 78 4c 01 c0       	push   0xc0014c78
c0015491:	6a 01                	push   0x1
c0015493:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015496:	ff d0                	call   eax
c0015498:	83 c4 10             	add    esp,0x10
c001549b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001549e:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a0:	83 c0 24             	add    eax,0x24
c00154a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00154a5:	6a 00                	push   0x0
c00154a7:	68 83 45 01 c0       	push   0xc0014583
c00154ac:	6a 02                	push   0x2
c00154ae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154b1:	ff d0                	call   eax
c00154b3:	83 c4 10             	add    esp,0x10
c00154b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154bb:	83 c0 24             	add    eax,0x24
c00154be:	8b 00                	mov    eax,DWORD PTR [eax]
c00154c0:	6a 00                	push   0x0
c00154c2:	68 78 4c 01 c0       	push   0xc0014c78
c00154c7:	6a 03                	push   0x3
c00154c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154cc:	ff d0                	call   eax
c00154ce:	83 c4 10             	add    esp,0x10
c00154d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154d6:	83 c0 24             	add    eax,0x24
c00154d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00154db:	6a 00                	push   0x0
c00154dd:	68 78 4c 01 c0       	push   0xc0014c78
c00154e2:	6a 04                	push   0x4
c00154e4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00154e7:	ff d0                	call   eax
c00154e9:	83 c4 10             	add    esp,0x10
c00154ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f1:	83 c0 24             	add    eax,0x24
c00154f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00154f6:	6a 00                	push   0x0
c00154f8:	68 78 4c 01 c0       	push   0xc0014c78
c00154fd:	6a 05                	push   0x5
c00154ff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015502:	ff d0                	call   eax
c0015504:	83 c4 10             	add    esp,0x10
c0015507:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001550a:	8b 00                	mov    eax,DWORD PTR [eax]
c001550c:	83 c0 24             	add    eax,0x24
c001550f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015511:	6a 00                	push   0x0
c0015513:	68 97 4c 01 c0       	push   0xc0014c97
c0015518:	6a 06                	push   0x6
c001551a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001551d:	ff d0                	call   eax
c001551f:	83 c4 10             	add    esp,0x10
c0015522:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015525:	8b 00                	mov    eax,DWORD PTR [eax]
c0015527:	83 c0 24             	add    eax,0x24
c001552a:	8b 00                	mov    eax,DWORD PTR [eax]
c001552c:	6a 00                	push   0x0
c001552e:	68 b5 4b 01 c0       	push   0xc0014bb5
c0015533:	6a 07                	push   0x7
c0015535:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015538:	ff d0                	call   eax
c001553a:	83 c4 10             	add    esp,0x10
c001553d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015540:	8b 00                	mov    eax,DWORD PTR [eax]
c0015542:	83 c0 24             	add    eax,0x24
c0015545:	8b 00                	mov    eax,DWORD PTR [eax]
c0015547:	6a 00                	push   0x0
c0015549:	68 9e 43 01 c0       	push   0xc001439e
c001554e:	6a 08                	push   0x8
c0015550:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015553:	ff d0                	call   eax
c0015555:	83 c4 10             	add    esp,0x10
c0015558:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001555b:	8b 00                	mov    eax,DWORD PTR [eax]
c001555d:	83 c0 24             	add    eax,0x24
c0015560:	8b 00                	mov    eax,DWORD PTR [eax]
c0015562:	6a 00                	push   0x0
c0015564:	68 78 4c 01 c0       	push   0xc0014c78
c0015569:	6a 09                	push   0x9
c001556b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001556e:	ff d0                	call   eax
c0015570:	83 c4 10             	add    esp,0x10
c0015573:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015576:	8b 00                	mov    eax,DWORD PTR [eax]
c0015578:	83 c0 24             	add    eax,0x24
c001557b:	8b 00                	mov    eax,DWORD PTR [eax]
c001557d:	6a 00                	push   0x0
c001557f:	68 78 4c 01 c0       	push   0xc0014c78
c0015584:	6a 0a                	push   0xa
c0015586:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015589:	ff d0                	call   eax
c001558b:	83 c4 10             	add    esp,0x10
c001558e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015591:	8b 00                	mov    eax,DWORD PTR [eax]
c0015593:	83 c0 24             	add    eax,0x24
c0015596:	8b 00                	mov    eax,DWORD PTR [eax]
c0015598:	6a 00                	push   0x0
c001559a:	68 78 4c 01 c0       	push   0xc0014c78
c001559f:	6a 0b                	push   0xb
c00155a1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155a4:	ff d0                	call   eax
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ae:	83 c0 24             	add    eax,0x24
c00155b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00155b3:	6a 00                	push   0x0
c00155b5:	68 78 4c 01 c0       	push   0xc0014c78
c00155ba:	6a 0c                	push   0xc
c00155bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155bf:	ff d0                	call   eax
c00155c1:	83 c4 10             	add    esp,0x10
c00155c4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155c9:	83 c0 24             	add    eax,0x24
c00155cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ce:	6a 00                	push   0x0
c00155d0:	68 28 4c 01 c0       	push   0xc0014c28
c00155d5:	6a 0d                	push   0xd
c00155d7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155da:	ff d0                	call   eax
c00155dc:	83 c4 10             	add    esp,0x10
c00155df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e4:	83 c0 24             	add    eax,0x24
c00155e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00155e9:	6a 00                	push   0x0
c00155eb:	68 61 4c 01 c0       	push   0xc0014c61
c00155f0:	6a 0e                	push   0xe
c00155f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00155f5:	ff d0                	call   eax
c00155f7:	83 c4 10             	add    esp,0x10
c00155fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00155ff:	83 c0 24             	add    eax,0x24
c0015602:	8b 00                	mov    eax,DWORD PTR [eax]
c0015604:	6a 00                	push   0x0
c0015606:	68 78 4c 01 c0       	push   0xc0014c78
c001560b:	6a 0f                	push   0xf
c001560d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015610:	ff d0                	call   eax
c0015612:	83 c4 10             	add    esp,0x10
c0015615:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015618:	8b 00                	mov    eax,DWORD PTR [eax]
c001561a:	83 c0 24             	add    eax,0x24
c001561d:	8b 00                	mov    eax,DWORD PTR [eax]
c001561f:	6a 00                	push   0x0
c0015621:	68 78 4c 01 c0       	push   0xc0014c78
c0015626:	6a 10                	push   0x10
c0015628:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001562b:	ff d0                	call   eax
c001562d:	83 c4 10             	add    esp,0x10
c0015630:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015633:	8b 00                	mov    eax,DWORD PTR [eax]
c0015635:	83 c0 24             	add    eax,0x24
c0015638:	8b 00                	mov    eax,DWORD PTR [eax]
c001563a:	6a 00                	push   0x0
c001563c:	68 78 4c 01 c0       	push   0xc0014c78
c0015641:	6a 11                	push   0x11
c0015643:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015646:	ff d0                	call   eax
c0015648:	83 c4 10             	add    esp,0x10
c001564b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001564e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015650:	83 c0 24             	add    eax,0x24
c0015653:	8b 00                	mov    eax,DWORD PTR [eax]
c0015655:	6a 00                	push   0x0
c0015657:	68 78 4c 01 c0       	push   0xc0014c78
c001565c:	6a 12                	push   0x12
c001565e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015661:	ff d0                	call   eax
c0015663:	83 c4 10             	add    esp,0x10
c0015666:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015669:	8b 00                	mov    eax,DWORD PTR [eax]
c001566b:	83 c0 24             	add    eax,0x24
c001566e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015670:	6a 00                	push   0x0
c0015672:	68 78 4c 01 c0       	push   0xc0014c78
c0015677:	6a 13                	push   0x13
c0015679:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001567c:	ff d0                	call   eax
c001567e:	83 c4 10             	add    esp,0x10
c0015681:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015684:	8b 00                	mov    eax,DWORD PTR [eax]
c0015686:	83 c0 24             	add    eax,0x24
c0015689:	8b 00                	mov    eax,DWORD PTR [eax]
c001568b:	6a 00                	push   0x0
c001568d:	68 78 4c 01 c0       	push   0xc0014c78
c0015692:	6a 14                	push   0x14
c0015694:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015697:	ff d0                	call   eax
c0015699:	83 c4 10             	add    esp,0x10
c001569c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001569f:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a1:	83 c0 24             	add    eax,0x24
c00156a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00156a6:	6a 00                	push   0x0
c00156a8:	68 78 4c 01 c0       	push   0xc0014c78
c00156ad:	6a 1e                	push   0x1e
c00156af:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156b2:	ff d0                	call   eax
c00156b4:	83 c4 10             	add    esp,0x10
c00156b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00156bc:	83 c0 24             	add    eax,0x24
c00156bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00156c1:	6a 00                	push   0x0
c00156c3:	68 aa c6 01 c0       	push   0xc001c6aa
c00156c8:	6a 60                	push   0x60
c00156ca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156cd:	ff d0                	call   eax
c00156cf:	83 c4 10             	add    esp,0x10
c00156d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156d5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00156d8:	c9                   	leave  
c00156d9:	c3                   	ret    

c00156da <InterruptController::convertLegacyIRQNumber(int)>:
c00156da:	55                   	push   ebp
c00156db:	89 e5                	mov    ebp,esp
c00156dd:	83 ec 08             	sub    esp,0x8
c00156e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e3:	83 ec 0c             	sub    esp,0xc
c00156e6:	50                   	push   eax
c00156e7:	e8 c8 e8 ff ff       	call   c0013fb4 <Device::getName()>
c00156ec:	83 c4 10             	add    esp,0x10
c00156ef:	8a 00                	mov    al,BYTE PTR [eax]
c00156f1:	3c 41                	cmp    al,0x41
c00156f3:	0f 94 c0             	sete   al
c00156f6:	84 c0                	test   al,al
c00156f8:	74 28                	je     c0015722 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c00156fa:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00156fe:	7f 12                	jg     c0015712 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015700:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015703:	05 a0 e0 02 c0       	add    eax,0xc002e0a0
c0015708:	8a 00                	mov    al,BYTE PTR [eax]
c001570a:	0f b6 c0             	movzx  eax,al
c001570d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015710:	eb 10                	jmp    c0015722 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015712:	83 ec 0c             	sub    esp,0xc
c0015715:	68 78 b6 02 c0       	push   0xc002b678
c001571a:	e8 92 4b 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c001571f:	83 c4 10             	add    esp,0x10
c0015722:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015725:	c9                   	leave  
c0015726:	c3                   	ret    
c0015727:	90                   	nop

c0015728 <startGUI(void*)>:
c0015728:	55                   	push   ebp
c0015729:	89 e5                	mov    ebp,esp
c001572b:	53                   	push   ebx
c001572c:	83 ec 04             	sub    esp,0x4
c001572f:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015734:	48                   	dec    eax
c0015735:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001573a:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001573f:	85 c0                	test   eax,eax
c0015741:	75 01                	jne    c0015744 <startGUI(void*)+0x1c>
c0015743:	fb                   	sti    
c0015744:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c001574a:	83 ec 08             	sub    esp,0x8
c001574d:	6a 01                	push   0x1
c001574f:	68 ec b9 02 c0       	push   0xc002b9ec
c0015754:	e8 2c 7f 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c0015759:	83 c4 10             	add    esp,0x10
c001575c:	83 ec 08             	sub    esp,0x8
c001575f:	53                   	push   ebx
c0015760:	50                   	push   eax
c0015761:	e8 4a 81 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c0015766:	83 c4 10             	add    esp,0x10
c0015769:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c001576f:	83 ec 08             	sub    esp,0x8
c0015772:	6a 01                	push   0x1
c0015774:	68 06 ba 02 c0       	push   0xc002ba06
c0015779:	e8 07 7f 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c001577e:	83 c4 10             	add    esp,0x10
c0015781:	83 ec 08             	sub    esp,0x8
c0015784:	53                   	push   ebx
c0015785:	50                   	push   eax
c0015786:	e8 25 81 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c001578b:	83 c4 10             	add    esp,0x10
c001578e:	90                   	nop
c001578f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015792:	c9                   	leave  
c0015793:	c3                   	ret    

c0015794 <startGUIVESA(void*)>:
c0015794:	55                   	push   ebp
c0015795:	89 e5                	mov    ebp,esp
c0015797:	53                   	push   ebx
c0015798:	83 ec 04             	sub    esp,0x4
c001579b:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00157a0:	48                   	dec    eax
c00157a1:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00157a6:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00157ab:	85 c0                	test   eax,eax
c00157ad:	75 01                	jne    c00157b0 <startGUIVESA(void*)+0x1c>
c00157af:	fb                   	sti    
c00157b0:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c00157b6:	83 ec 08             	sub    esp,0x8
c00157b9:	6a 01                	push   0x1
c00157bb:	68 20 ba 02 c0       	push   0xc002ba20
c00157c0:	e8 c0 7e 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c00157c5:	83 c4 10             	add    esp,0x10
c00157c8:	83 ec 08             	sub    esp,0x8
c00157cb:	53                   	push   ebx
c00157cc:	50                   	push   eax
c00157cd:	e8 de 80 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c00157d2:	83 c4 10             	add    esp,0x10
c00157d5:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c00157db:	83 ec 08             	sub    esp,0x8
c00157de:	6a 01                	push   0x1
c00157e0:	68 06 ba 02 c0       	push   0xc002ba06
c00157e5:	e8 9b 7e 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c00157ea:	83 c4 10             	add    esp,0x10
c00157ed:	83 ec 08             	sub    esp,0x8
c00157f0:	53                   	push   ebx
c00157f1:	50                   	push   eax
c00157f2:	e8 b9 80 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c00157f7:	83 c4 10             	add    esp,0x10
c00157fa:	90                   	nop
c00157fb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00157fe:	c9                   	leave  
c00157ff:	c3                   	ret    

c0015800 <sendKeyToTerminal(unsigned char)>:
c0015800:	55                   	push   ebp
c0015801:	89 e5                	mov    ebp,esp
c0015803:	83 ec 28             	sub    esp,0x28
c0015806:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015809:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001580c:	a1 04 ef 02 c0       	mov    eax,ds:0xc002ef04
c0015811:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015815:	83 ec 08             	sub    esp,0x8
c0015818:	52                   	push   edx
c0015819:	50                   	push   eax
c001581a:	e8 25 b4 ff ff       	call   c0010c44 <VgaText::receiveKey(unsigned char)>
c001581f:	83 c4 10             	add    esp,0x10
c0015822:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015826:	0f 85 8f 00 00 00    	jne    c00158bb <sendKeyToTerminal(unsigned char)+0xbb>
c001582c:	fa                   	cli    
c001582d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015832:	40                   	inc    eax
c0015833:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015838:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001583d:	40                   	inc    eax
c001583e:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c0015843:	a1 e0 ef 02 c0       	mov    eax,ds:0xc002efe0
c0015848:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001584b:	c7 05 e0 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efe0,0x0
c0015855:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015859:	74 1f                	je     c001587a <sendKeyToTerminal(unsigned char)+0x7a>
c001585b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001585e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015861:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015864:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015867:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001586a:	83 ec 0c             	sub    esp,0xc
c001586d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015870:	e8 b3 8c 00 00       	call   c001e528 <unblockTask(ThreadControlBlock*)>
c0015875:	83 c4 10             	add    esp,0x10
c0015878:	eb db                	jmp    c0015855 <sendKeyToTerminal(unsigned char)+0x55>
c001587a:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001587f:	48                   	dec    eax
c0015880:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c0015885:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001588a:	85 c0                	test   eax,eax
c001588c:	75 18                	jne    c00158a6 <sendKeyToTerminal(unsigned char)+0xa6>
c001588e:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c0015893:	85 c0                	test   eax,eax
c0015895:	74 0f                	je     c00158a6 <sendKeyToTerminal(unsigned char)+0xa6>
c0015897:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c00158a1:	e8 be 87 00 00       	call   c001e064 <schedule()>
c00158a6:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00158ab:	48                   	dec    eax
c00158ac:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00158b1:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00158b6:	85 c0                	test   eax,eax
c00158b8:	75 01                	jne    c00158bb <sendKeyToTerminal(unsigned char)+0xbb>
c00158ba:	fb                   	sti    
c00158bb:	90                   	nop
c00158bc:	c9                   	leave  
c00158bd:	c3                   	ret    

c00158be <sendKeyboardToken(KeyboardToken)>:
c00158be:	55                   	push   ebp
c00158bf:	89 e5                	mov    ebp,esp
c00158c1:	83 ec 18             	sub    esp,0x18
c00158c4:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00158c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158ca:	0f b7 c0             	movzx  eax,ax
c00158cd:	83 f2 01             	xor    edx,0x1
c00158d0:	88 90 00 f0 02 c0    	mov    BYTE PTR [eax-0x3ffd1000],dl
c00158d6:	a1 e8 ef 02 c0       	mov    eax,ds:0xc002efe8
c00158db:	85 c0                	test   eax,eax
c00158dd:	74 24                	je     c0015903 <sendKeyboardToken(KeyboardToken)+0x45>
c00158df:	8b 0d e8 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efe8
c00158e5:	83 ec 04             	sub    esp,0x4
c00158e8:	68 00 f0 02 c0       	push   0xc002f000
c00158ed:	83 ec 08             	sub    esp,0x8
c00158f0:	89 e2                	mov    edx,esp
c00158f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158f5:	89 02                	mov    DWORD PTR [edx],eax
c00158f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00158fa:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00158fe:	ff d1                	call   ecx
c0015900:	83 c4 10             	add    esp,0x10
c0015903:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015906:	66 3d 03 02          	cmp    ax,0x203
c001590a:	75 07                	jne    c0015913 <sendKeyboardToken(KeyboardToken)+0x55>
c001590c:	a0 00 f1 02 c0       	mov    al,ds:0xc002f100
c0015911:	84 c0                	test   al,al
c0015913:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015917:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001591a:	a0 08 f4 02 c0       	mov    al,ds:0xc002f408
c001591f:	38 c2                	cmp    dl,al
c0015921:	74 1c                	je     c001593f <sendKeyboardToken(KeyboardToken)+0x81>
c0015923:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015926:	a2 08 f4 02 c0       	mov    ds:0xc002f408,al
c001592b:	a0 08 f4 02 c0       	mov    al,ds:0xc002f408
c0015930:	0f b6 c0             	movzx  eax,al
c0015933:	83 ec 0c             	sub    esp,0xc
c0015936:	50                   	push   eax
c0015937:	e8 60 a8 ff ff       	call   c001019c <setTerminalScrollLock(bool)>
c001593c:	83 c4 10             	add    esp,0x10
c001593f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015942:	84 c0                	test   al,al
c0015944:	0f 84 ae 00 00 00    	je     c00159f8 <sendKeyboardToken(KeyboardToken)+0x13a>
c001594a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594d:	66 3d 10 03          	cmp    ax,0x310
c0015951:	75 06                	jne    c0015959 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015953:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001595c:	66 3d 11 03          	cmp    ax,0x311
c0015960:	75 06                	jne    c0015968 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015962:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596b:	66 3d 12 03          	cmp    ax,0x312
c001596f:	75 06                	jne    c0015977 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015971:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597a:	66 3d 13 03          	cmp    ax,0x313
c001597e:	75 06                	jne    c0015986 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015980:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015989:	66 3d 14 03          	cmp    ax,0x314
c001598d:	75 06                	jne    c0015995 <sendKeyboardToken(KeyboardToken)+0xd7>
c001598f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015998:	66 3d 15 03          	cmp    ax,0x315
c001599c:	75 06                	jne    c00159a4 <sendKeyboardToken(KeyboardToken)+0xe6>
c001599e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00159a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a7:	66 3d 16 03          	cmp    ax,0x316
c00159ab:	75 06                	jne    c00159b3 <sendKeyboardToken(KeyboardToken)+0xf5>
c00159ad:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00159b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159b6:	66 3d 17 03          	cmp    ax,0x317
c00159ba:	75 06                	jne    c00159c2 <sendKeyboardToken(KeyboardToken)+0x104>
c00159bc:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00159c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c5:	66 3d 18 03          	cmp    ax,0x318
c00159c9:	75 06                	jne    c00159d1 <sendKeyboardToken(KeyboardToken)+0x113>
c00159cb:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00159d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159d4:	66 3d 19 03          	cmp    ax,0x319
c00159d8:	75 06                	jne    c00159e0 <sendKeyboardToken(KeyboardToken)+0x122>
c00159da:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00159e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159e3:	66 3d 1a 03          	cmp    ax,0x31a
c00159e7:	0f 85 c9 00 00 00    	jne    c0015ab6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159ed:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00159f3:	e9 be 00 00 00       	jmp    c0015ab6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c00159f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159fb:	66 3d 10 03          	cmp    ax,0x310
c00159ff:	75 0a                	jne    c0015a0b <sendKeyboardToken(KeyboardToken)+0x14d>
c0015a01:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015a07:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a0e:	66 3d 11 03          	cmp    ax,0x311
c0015a12:	75 0a                	jne    c0015a1e <sendKeyboardToken(KeyboardToken)+0x160>
c0015a14:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015a1a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a21:	66 3d 12 03          	cmp    ax,0x312
c0015a25:	75 0a                	jne    c0015a31 <sendKeyboardToken(KeyboardToken)+0x173>
c0015a27:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015a2d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a34:	66 3d 13 03          	cmp    ax,0x313
c0015a38:	75 0a                	jne    c0015a44 <sendKeyboardToken(KeyboardToken)+0x186>
c0015a3a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015a40:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a47:	66 3d 14 03          	cmp    ax,0x314
c0015a4b:	75 0a                	jne    c0015a57 <sendKeyboardToken(KeyboardToken)+0x199>
c0015a4d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015a53:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a5a:	66 3d 15 03          	cmp    ax,0x315
c0015a5e:	75 0a                	jne    c0015a6a <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015a60:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015a66:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a6d:	66 3d 16 03          	cmp    ax,0x316
c0015a71:	75 0a                	jne    c0015a7d <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015a73:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015a79:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a80:	66 3d 17 03          	cmp    ax,0x317
c0015a84:	75 0a                	jne    c0015a90 <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015a86:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015a8c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015a90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a93:	66 3d 18 03          	cmp    ax,0x318
c0015a97:	75 0a                	jne    c0015aa3 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015a99:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015a9f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aa6:	66 3d 19 03          	cmp    ax,0x319
c0015aaa:	75 0a                	jne    c0015ab6 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015aac:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015ab2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab9:	66 3d 00 02          	cmp    ax,0x200
c0015abd:	75 2c                	jne    c0015aeb <sendKeyboardToken(KeyboardToken)+0x22d>
c0015abf:	a0 00 f4 02 c0       	mov    al,ds:0xc002f400
c0015ac4:	83 f0 01             	xor    eax,0x1
c0015ac7:	84 c0                	test   al,al
c0015ac9:	74 20                	je     c0015aeb <sendKeyboardToken(KeyboardToken)+0x22d>
c0015acb:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015ad0:	6a 01                	push   0x1
c0015ad2:	6a 00                	push   0x0
c0015ad4:	68 28 57 01 c0       	push   0xc0015728
c0015ad9:	50                   	push   eax
c0015ada:	e8 41 83 00 00       	call   c001de20 <Process::createThread(void (*)(void*), void*, int)>
c0015adf:	83 c4 10             	add    esp,0x10
c0015ae2:	c6 05 00 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f400,0x1
c0015ae9:	eb 33                	jmp    c0015b1e <sendKeyboardToken(KeyboardToken)+0x260>
c0015aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015aee:	66 3d 01 02          	cmp    ax,0x201
c0015af2:	75 2a                	jne    c0015b1e <sendKeyboardToken(KeyboardToken)+0x260>
c0015af4:	a0 00 f4 02 c0       	mov    al,ds:0xc002f400
c0015af9:	83 f0 01             	xor    eax,0x1
c0015afc:	84 c0                	test   al,al
c0015afe:	74 1e                	je     c0015b1e <sendKeyboardToken(KeyboardToken)+0x260>
c0015b00:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0015b05:	6a 01                	push   0x1
c0015b07:	6a 00                	push   0x0
c0015b09:	68 94 57 01 c0       	push   0xc0015794
c0015b0e:	50                   	push   eax
c0015b0f:	e8 0c 83 00 00       	call   c001de20 <Process::createThread(void (*)(void*), void*, int)>
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	c6 05 00 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f400,0x1
c0015b1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b21:	66 3d 1d 03          	cmp    ax,0x31d
c0015b25:	75 06                	jne    c0015b2d <sendKeyboardToken(KeyboardToken)+0x26f>
c0015b27:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015b2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b30:	66 3d 1c 03          	cmp    ax,0x31c
c0015b34:	75 06                	jne    c0015b3c <sendKeyboardToken(KeyboardToken)+0x27e>
c0015b36:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b3f:	66 3d 1b 03          	cmp    ax,0x31b
c0015b43:	75 06                	jne    c0015b4b <sendKeyboardToken(KeyboardToken)+0x28d>
c0015b45:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015b4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b4e:	66 3d 1e 03          	cmp    ax,0x31e
c0015b52:	75 06                	jne    c0015b5a <sendKeyboardToken(KeyboardToken)+0x29c>
c0015b54:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b5d:	66 3d 1f 03          	cmp    ax,0x31f
c0015b61:	75 06                	jne    c0015b69 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015b63:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b6c:	66 3d 1a 03          	cmp    ax,0x31a
c0015b70:	75 06                	jne    c0015b78 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015b72:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015b78:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015b7c:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015b7f:	83 f0 01             	xor    eax,0x1
c0015b82:	84 c0                	test   al,al
c0015b84:	74 77                	je     c0015bfd <sendKeyboardToken(KeyboardToken)+0x33f>
c0015b86:	a0 01 f1 02 c0       	mov    al,ds:0xc002f101
c0015b8b:	84 c0                	test   al,al
c0015b8d:	74 41                	je     c0015bd0 <sendKeyboardToken(KeyboardToken)+0x312>
c0015b8f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015b93:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015b97:	74 2b                	je     c0015bc4 <sendKeyboardToken(KeyboardToken)+0x306>
c0015b99:	8b 15 04 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f404
c0015b9f:	89 d0                	mov    eax,edx
c0015ba1:	c1 e0 02             	shl    eax,0x2
c0015ba4:	01 d0                	add    eax,edx
c0015ba6:	01 c0                	add    eax,eax
c0015ba8:	a3 04 f4 02 c0       	mov    ds:0xc002f404,eax
c0015bad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb0:	0f b7 c0             	movzx  eax,ax
c0015bb3:	8d 50 d0             	lea    edx,[eax-0x30]
c0015bb6:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0015bbb:	01 d0                	add    eax,edx
c0015bbd:	a3 04 f4 02 c0       	mov    ds:0xc002f404,eax
c0015bc2:	eb 6d                	jmp    c0015c31 <sendKeyboardToken(KeyboardToken)+0x373>
c0015bc4:	c7 05 04 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f404,0x0
c0015bce:	eb 61                	jmp    c0015c31 <sendKeyboardToken(KeyboardToken)+0x373>
c0015bd0:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0015bd5:	85 c0                	test   eax,eax
c0015bd7:	74 18                	je     c0015bf1 <sendKeyboardToken(KeyboardToken)+0x333>
c0015bd9:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0015bde:	0f b6 c0             	movzx  eax,al
c0015be1:	83 ec 0c             	sub    esp,0xc
c0015be4:	50                   	push   eax
c0015be5:	e8 16 fc ff ff       	call   c0015800 <sendKeyToTerminal(unsigned char)>
c0015bea:	83 c4 10             	add    esp,0x10
c0015bed:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015bf1:	c7 05 04 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f404,0x0
c0015bfb:	eb 34                	jmp    c0015c31 <sendKeyboardToken(KeyboardToken)+0x373>
c0015bfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c00:	66 3d 01 01          	cmp    ax,0x101
c0015c04:	75 2b                	jne    c0015c31 <sendKeyboardToken(KeyboardToken)+0x373>
c0015c06:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0015c0b:	85 c0                	test   eax,eax
c0015c0d:	74 18                	je     c0015c27 <sendKeyboardToken(KeyboardToken)+0x369>
c0015c0f:	a1 04 f4 02 c0       	mov    eax,ds:0xc002f404
c0015c14:	0f b6 c0             	movzx  eax,al
c0015c17:	83 ec 0c             	sub    esp,0xc
c0015c1a:	50                   	push   eax
c0015c1b:	e8 e0 fb ff ff       	call   c0015800 <sendKeyToTerminal(unsigned char)>
c0015c20:	83 c4 10             	add    esp,0x10
c0015c23:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015c27:	c7 05 04 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f404,0x0
c0015c31:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c34:	83 f0 01             	xor    eax,0x1
c0015c37:	84 c0                	test   al,al
c0015c39:	74 4c                	je     c0015c87 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c3b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c3e:	83 f0 01             	xor    eax,0x1
c0015c41:	84 c0                	test   al,al
c0015c43:	74 42                	je     c0015c87 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c45:	a0 00 f1 02 c0       	mov    al,ds:0xc002f100
c0015c4a:	83 f0 01             	xor    eax,0x1
c0015c4d:	84 c0                	test   al,al
c0015c4f:	74 36                	je     c0015c87 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c54:	66 83 f8 1f          	cmp    ax,0x1f
c0015c58:	76 09                	jbe    c0015c63 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015c5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c5d:	66 83 f8 7e          	cmp    ax,0x7e
c0015c61:	76 12                	jbe    c0015c75 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c66:	66 83 f8 0a          	cmp    ax,0xa
c0015c6a:	74 09                	je     c0015c75 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015c6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c6f:	66 83 f8 08          	cmp    ax,0x8
c0015c73:	75 12                	jne    c0015c87 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c78:	0f b6 c0             	movzx  eax,al
c0015c7b:	83 ec 0c             	sub    esp,0xc
c0015c7e:	50                   	push   eax
c0015c7f:	e8 7c fb ff ff       	call   c0015800 <sendKeyToTerminal(unsigned char)>
c0015c84:	83 c4 10             	add    esp,0x10
c0015c87:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015c8a:	83 f0 01             	xor    eax,0x1
c0015c8d:	84 c0                	test   al,al
c0015c8f:	74 4f                	je     c0015ce0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c91:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015c94:	83 f0 01             	xor    eax,0x1
c0015c97:	84 c0                	test   al,al
c0015c99:	74 45                	je     c0015ce0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015c9b:	a0 00 f1 02 c0       	mov    al,ds:0xc002f100
c0015ca0:	84 c0                	test   al,al
c0015ca2:	74 3c                	je     c0015ce0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015ca4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ca7:	66 83 f8 3f          	cmp    ax,0x3f
c0015cab:	76 33                	jbe    c0015ce0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb0:	66 83 f8 7f          	cmp    ax,0x7f
c0015cb4:	77 2a                	ja     c0015ce0 <sendKeyboardToken(KeyboardToken)+0x422>
c0015cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cb9:	88 c2                	mov    dl,al
c0015cbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cbe:	66 83 f8 5f          	cmp    ax,0x5f
c0015cc2:	76 04                	jbe    c0015cc8 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015cc4:	b0 20                	mov    al,0x20
c0015cc6:	eb 02                	jmp    c0015cca <sendKeyboardToken(KeyboardToken)+0x40c>
c0015cc8:	b0 00                	mov    al,0x0
c0015cca:	29 c2                	sub    edx,eax
c0015ccc:	88 d0                	mov    al,dl
c0015cce:	83 e8 40             	sub    eax,0x40
c0015cd1:	0f b6 c0             	movzx  eax,al
c0015cd4:	83 ec 0c             	sub    esp,0xc
c0015cd7:	50                   	push   eax
c0015cd8:	e8 23 fb ff ff       	call   c0015800 <sendKeyToTerminal(unsigned char)>
c0015cdd:	83 c4 10             	add    esp,0x10
c0015ce0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ce3:	66 3d 00 03          	cmp    ax,0x300
c0015ce7:	75 0f                	jne    c0015cf8 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015ce9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015cec:	83 f0 01             	xor    eax,0x1
c0015cef:	84 c0                	test   al,al
c0015cf1:	74 05                	je     c0015cf8 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015cf3:	e8 4c aa ff ff       	call   c0010744 <doTerminalCycle()>
c0015cf8:	90                   	nop
c0015cf9:	c9                   	leave  
c0015cfa:	c3                   	ret    

c0015cfb <clearInternalKeybuffer(VgaText*)>:
c0015cfb:	55                   	push   ebp
c0015cfc:	89 e5                	mov    ebp,esp
c0015cfe:	83 ec 08             	sub    esp,0x8
c0015d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d04:	05 98 01 00 00       	add    eax,0x198
c0015d09:	83 ec 0c             	sub    esp,0xc
c0015d0c:	50                   	push   eax
c0015d0d:	e8 5a aa fe ff       	call   c000076c <strlen>
c0015d12:	83 c4 10             	add    esp,0x10
c0015d15:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015d18:	81 c2 98 01 00 00    	add    edx,0x198
c0015d1e:	83 ec 04             	sub    esp,0x4
c0015d21:	50                   	push   eax
c0015d22:	6a 00                	push   0x0
c0015d24:	52                   	push   edx
c0015d25:	e8 26 aa fe ff       	call   c0000750 <memset>
c0015d2a:	83 c4 10             	add    esp,0x10
c0015d2d:	90                   	nop
c0015d2e:	c9                   	leave  
c0015d2f:	c3                   	ret    

c0015d30 <readKeyboard(VgaText*, char*, unsigned long)>:
c0015d30:	55                   	push   ebp
c0015d31:	89 e5                	mov    ebp,esp
c0015d33:	83 ec 18             	sub    esp,0x18
c0015d36:	a1 e8 ef 02 c0       	mov    eax,ds:0xc002efe8
c0015d3b:	85 c0                	test   eax,eax
c0015d3d:	74 2a                	je     c0015d69 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0015d3f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0015d45:	8b 0d e8 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efe8
c0015d4b:	83 ec 04             	sub    esp,0x4
c0015d4e:	68 00 f0 02 c0       	push   0xc002f000
c0015d53:	83 ec 08             	sub    esp,0x8
c0015d56:	89 e2                	mov    edx,esp
c0015d58:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015d5b:	89 02                	mov    DWORD PTR [edx],eax
c0015d5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015d60:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015d64:	ff d1                	call   ecx
c0015d66:	83 c4 10             	add    esp,0x10
c0015d69:	83 ec 0c             	sub    esp,0xc
c0015d6c:	68 3b ba 02 c0       	push   0xc002ba3b
c0015d71:	e8 05 cb ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0015d76:	83 c4 10             	add    esp,0x10
c0015d79:	fb                   	sti    
c0015d7a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015d81:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015d85:	0f 84 a1 00 00 00    	je     c0015e2c <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0015d8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d8e:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015d94:	84 c0                	test   al,al
c0015d96:	75 28                	jne    c0015dc0 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0015d98:	fa                   	cli    
c0015d99:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015d9e:	40                   	inc    eax
c0015d9f:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015da4:	e8 bb 82 00 00       	call   c001e064 <schedule()>
c0015da9:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015dae:	48                   	dec    eax
c0015daf:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0015db4:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0015db9:	85 c0                	test   eax,eax
c0015dbb:	75 ce                	jne    c0015d8b <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015dbd:	fb                   	sti    
c0015dbe:	eb cb                	jmp    c0015d8b <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0015dc0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015dc3:	8d 50 01             	lea    edx,[eax+0x1]
c0015dc6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015dc9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015dcc:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c0015dd2:	88 10                	mov    BYTE PTR [eax],dl
c0015dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd7:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c0015ddd:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015de0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015de3:	05 98 01 00 00       	add    eax,0x198
c0015de8:	83 ec 0c             	sub    esp,0xc
c0015deb:	50                   	push   eax
c0015dec:	e8 7b a9 fe ff       	call   c000076c <strlen>
c0015df1:	83 c4 10             	add    esp,0x10
c0015df4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015df7:	81 c2 98 01 00 00    	add    edx,0x198
c0015dfd:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015e00:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015e03:	81 c2 98 01 00 00    	add    edx,0x198
c0015e09:	83 ec 04             	sub    esp,0x4
c0015e0c:	50                   	push   eax
c0015e0d:	51                   	push   ecx
c0015e0e:	52                   	push   edx
c0015e0f:	e8 74 a8 fe ff       	call   c0000688 <memmove>
c0015e14:	83 c4 10             	add    esp,0x10
c0015e17:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015e1a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015e1d:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015e21:	0f 85 5a ff ff ff    	jne    c0015d81 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c0015e27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e2a:	eb 03                	jmp    c0015e2f <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c0015e2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e2f:	c9                   	leave  
c0015e30:	c3                   	ret    
c0015e31:	90                   	nop

c0015e32 <Keyboard::Keyboard(char const*)>:
c0015e32:	83 ec 0c             	sub    esp,0xc
c0015e35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e39:	83 ec 08             	sub    esp,0x8
c0015e3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e40:	50                   	push   eax
c0015e41:	e8 72 e0 ff ff       	call   c0013eb8 <Device::Device(char const*)>
c0015e46:	83 c4 10             	add    esp,0x10
c0015e49:	ba 5c ba 02 c0       	mov    edx,0xc002ba5c
c0015e4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e52:	89 10                	mov    DWORD PTR [eax],edx
c0015e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e58:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015e62:	c6 05 e4 ef 02 c0 01 	mov    BYTE PTR ds:0xc002efe4,0x1
c0015e69:	90                   	nop
c0015e6a:	83 c4 0c             	add    esp,0xc
c0015e6d:	c3                   	ret    

c0015e6e <Keyboard::~Keyboard()>:
c0015e6e:	83 ec 0c             	sub    esp,0xc
c0015e71:	ba 5c ba 02 c0       	mov    edx,0xc002ba5c
c0015e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e7a:	89 10                	mov    DWORD PTR [eax],edx
c0015e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e80:	83 ec 0c             	sub    esp,0xc
c0015e83:	50                   	push   eax
c0015e84:	e8 f9 dc ff ff       	call   c0013b82 <Device::~Device()>
c0015e89:	83 c4 10             	add    esp,0x10
c0015e8c:	90                   	nop
c0015e8d:	83 c4 0c             	add    esp,0xc
c0015e90:	c3                   	ret    
c0015e91:	90                   	nop

c0015e92 <Keyboard::~Keyboard()>:
c0015e92:	83 ec 0c             	sub    esp,0xc
c0015e95:	83 ec 0c             	sub    esp,0xc
c0015e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e9c:	e8 cd ff ff ff       	call   c0015e6e <Keyboard::~Keyboard()>
c0015ea1:	83 c4 10             	add    esp,0x10
c0015ea4:	83 ec 08             	sub    esp,0x8
c0015ea7:	68 5c 01 00 00       	push   0x15c
c0015eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eb0:	e8 e6 c8 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0015eb5:	83 c4 10             	add    esp,0x10
c0015eb8:	83 c4 0c             	add    esp,0xc
c0015ebb:	c3                   	ret    

c0015ebc <LogicalDisk::close(int, int, void*)>:
c0015ebc:	83 c8 ff             	or     eax,0xffffffff
c0015ebf:	c3                   	ret    

c0015ec0 <LogicalDisk::~LogicalDisk()>:
c0015ec0:	83 ec 0c             	sub    esp,0xc
c0015ec3:	ba 0c bb 02 c0       	mov    edx,0xc002bb0c
c0015ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ecc:	89 10                	mov    DWORD PTR [eax],edx
c0015ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ed2:	83 ec 0c             	sub    esp,0xc
c0015ed5:	50                   	push   eax
c0015ed6:	e8 a7 dc ff ff       	call   c0013b82 <Device::~Device()>
c0015edb:	83 c4 10             	add    esp,0x10
c0015ede:	90                   	nop
c0015edf:	83 c4 0c             	add    esp,0xc
c0015ee2:	c3                   	ret    
c0015ee3:	90                   	nop

c0015ee4 <LogicalDisk::~LogicalDisk()>:
c0015ee4:	83 ec 0c             	sub    esp,0xc
c0015ee7:	83 ec 0c             	sub    esp,0xc
c0015eea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015eee:	e8 cd ff ff ff       	call   c0015ec0 <LogicalDisk::~LogicalDisk()>
c0015ef3:	83 c4 10             	add    esp,0x10
c0015ef6:	83 ec 08             	sub    esp,0x8
c0015ef9:	68 74 01 00 00       	push   0x174
c0015efe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f02:	e8 94 c8 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0015f07:	83 c4 10             	add    esp,0x10
c0015f0a:	83 c4 0c             	add    esp,0xc
c0015f0d:	c3                   	ret    

c0015f0e <LogicalDisk::open(int, int, void*)>:
c0015f0e:	83 ec 18             	sub    esp,0x18
c0015f11:	68 88 ba 02 c0       	push   0xc002ba88
c0015f16:	e8 96 43 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0015f1b:	83 c8 ff             	or     eax,0xffffffff
c0015f1e:	83 c4 1c             	add    esp,0x1c
c0015f21:	c3                   	ret    

c0015f22 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015f22:	53                   	push   ebx
c0015f23:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015f27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015f2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f2f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015f35:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015f3b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015f41:	77 10                	ja     c0015f53 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015f43:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015f49:	89 d3                	mov    ebx,edx
c0015f4b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015f51:	72 05                	jb     c0015f58 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015f53:	83 c8 ff             	or     eax,0xffffffff
c0015f56:	89 c2                	mov    edx,eax
c0015f58:	5b                   	pop    ebx
c0015f59:	c3                   	ret    

c0015f5a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015f5a:	56                   	push   esi
c0015f5b:	83 c8 ff             	or     eax,0xffffffff
c0015f5e:	53                   	push   ebx
c0015f5f:	89 c2                	mov    edx,eax
c0015f61:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015f65:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015f69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015f6d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015f73:	77 27                	ja     c0015f9c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f75:	89 d8                	mov    eax,ebx
c0015f77:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015f7d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015f83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f88:	89 c2                	mov    edx,eax
c0015f8a:	73 10                	jae    c0015f9c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015f8c:	89 c8                	mov    eax,ecx
c0015f8e:	89 da                	mov    edx,ebx
c0015f90:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015f96:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015f9c:	5b                   	pop    ebx
c0015f9d:	5e                   	pop    esi
c0015f9e:	c3                   	ret    
c0015f9f:	90                   	nop

c0015fa0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015fa0:	83 ec 1c             	sub    esp,0x1c
c0015fa3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015fa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015fab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015faf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015fb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015fb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0015fba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015fbe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015fc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fc6:	83 ec 08             	sub    esp,0x8
c0015fc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015fcd:	50                   	push   eax
c0015fce:	e8 e5 de ff ff       	call   c0013eb8 <Device::Device(char const*)>
c0015fd3:	83 c4 10             	add    esp,0x10
c0015fd6:	ba 0c bb 02 c0       	mov    edx,0xc002bb0c
c0015fdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fdf:	89 10                	mov    DWORD PTR [eax],edx
c0015fe1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015fe5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ff0:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ffb:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016005:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016009:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001600d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016011:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0016017:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001601d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016021:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016024:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016028:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001602e:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016038:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001603c:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016046:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016050:	90                   	nop
c0016051:	83 c4 1c             	add    esp,0x1c
c0016054:	c3                   	ret    
c0016055:	90                   	nop

c0016056 <LogicalDisk::assignDriveLetter()>:
c0016056:	55                   	push   ebp
c0016057:	57                   	push   edi
c0016058:	56                   	push   esi
c0016059:	53                   	push   ebx
c001605a:	83 ec 14             	sub    esp,0x14
c001605d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016061:	8b 3d 20 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f420
c0016067:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001606d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016071:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0016077:	8b 3d 24 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f424
c001607d:	3c 01                	cmp    al,0x1
c001607f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016083:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016087:	19 c0                	sbb    eax,eax
c0016089:	83 e0 02             	and    eax,0x2
c001608c:	83 c0 41             	add    eax,0x41
c001608f:	0f be e8             	movsx  ebp,al
c0016092:	3c 43                	cmp    al,0x43
c0016094:	75 10                	jne    c00160a6 <LogicalDisk::assignDriveLetter()+0x50>
c0016096:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c001609d:	75 5d                	jne    c00160fc <LogicalDisk::assignDriveLetter()+0xa6>
c001609f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00160a4:	75 56                	jne    c00160fc <LogicalDisk::assignDriveLetter()+0xa6>
c00160a6:	8d 75 bf             	lea    esi,[ebp-0x41]
c00160a9:	ba 01 00 00 00       	mov    edx,0x1
c00160ae:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00160b2:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00160b6:	d3 e2                	shl    edx,cl
c00160b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00160bc:	89 d7                	mov    edi,edx
c00160be:	89 d6                	mov    esi,edx
c00160c0:	c1 ff 1f             	sar    edi,0x1f
c00160c3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00160c7:	21 f9                	and    ecx,edi
c00160c9:	09 d1                	or     ecx,edx
c00160cb:	75 2f                	jne    c00160fc <LogicalDisk::assignDriveLetter()+0xa6>
c00160cd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00160d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00160d5:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00160db:	09 f2                	or     edx,esi
c00160dd:	89 15 20 f4 02 c0    	mov    DWORD PTR ds:0xc002f420,edx
c00160e3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00160e7:	09 fa                	or     edx,edi
c00160e9:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00160ed:	89 15 24 f4 02 c0    	mov    DWORD PTR ds:0xc002f424,edx
c00160f3:	89 1c bd 40 f4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0bc0],ebx
c00160fa:	eb 08                	jmp    c0016104 <LogicalDisk::assignDriveLetter()+0xae>
c00160fc:	45                   	inc    ebp
c00160fd:	40                   	inc    eax
c00160fe:	3c 5b                	cmp    al,0x5b
c0016100:	75 90                	jne    c0016092 <LogicalDisk::assignDriveLetter()+0x3c>
c0016102:	31 c0                	xor    eax,eax
c0016104:	83 c4 14             	add    esp,0x14
c0016107:	5b                   	pop    ebx
c0016108:	5e                   	pop    esi
c0016109:	5f                   	pop    edi
c001610a:	5d                   	pop    ebp
c001610b:	c3                   	ret    

c001610c <LogicalDisk::mount()>:
c001610c:	56                   	push   esi
c001610d:	53                   	push   ebx
c001610e:	50                   	push   eax
c001610f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016113:	8b 1d b4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb4
c0016119:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016123:	85 db                	test   ebx,ebx
c0016125:	74 50                	je     c0016177 <LogicalDisk::mount()+0x6b>
c0016127:	50                   	push   eax
c0016128:	50                   	push   eax
c0016129:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c001612f:	68 ac ba 02 c0       	push   0xc002baac
c0016134:	e8 42 c7 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0016139:	83 c4 0c             	add    esp,0xc
c001613c:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016143:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016145:	83 e8 41             	sub    eax,0x41
c0016148:	50                   	push   eax
c0016149:	56                   	push   esi
c001614a:	53                   	push   ebx
c001614b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001614e:	83 c4 10             	add    esp,0x10
c0016151:	84 c0                	test   al,al
c0016153:	74 08                	je     c001615d <LogicalDisk::mount()+0x51>
c0016155:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001615b:	eb 1c                	jmp    c0016179 <LogicalDisk::mount()+0x6d>
c001615d:	51                   	push   ecx
c001615e:	51                   	push   ecx
c001615f:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c0016165:	68 c7 ba 02 c0       	push   0xc002bac7
c001616a:	e8 0c c7 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001616f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016172:	83 c4 10             	add    esp,0x10
c0016175:	eb ac                	jmp    c0016123 <LogicalDisk::mount()+0x17>
c0016177:	31 c0                	xor    eax,eax
c0016179:	5a                   	pop    edx
c001617a:	5b                   	pop    ebx
c001617b:	5e                   	pop    esi
c001617c:	c3                   	ret    
c001617d:	90                   	nop

c001617e <LogicalDisk::unmount()>:
c001617e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016182:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001618c:	c3                   	ret    
c001618d:	90                   	nop

c001618e <LogicalDisk::eject()>:
c001618e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016192:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016198:	8b 10                	mov    edx,DWORD PTR [eax]
c001619a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001619e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00161a1:	90                   	nop

c00161a2 <LogicalDisk::unassignDriveLetter()>:
c00161a2:	57                   	push   edi
c00161a3:	56                   	push   esi
c00161a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161a8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00161af:	84 c9                	test   cl,cl
c00161b1:	75 0f                	jne    c00161c2 <LogicalDisk::unassignDriveLetter()+0x20>
c00161b3:	c7 44 24 0c e2 ba 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bae2
c00161bb:	5e                   	pop    esi
c00161bc:	5f                   	pop    edi
c00161bd:	e9 ef 40 00 00       	jmp    c001a2b1 <Krnl::panic(char const*)>
c00161c2:	83 e9 41             	sub    ecx,0x41
c00161c5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00161cc:	b8 01 00 00 00       	mov    eax,0x1
c00161d1:	c7 04 8d 40 f4 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0bc0],0x0
c00161dc:	d3 e0                	shl    eax,cl
c00161de:	89 c7                	mov    edi,eax
c00161e0:	f7 d0                	not    eax
c00161e2:	c1 ff 1f             	sar    edi,0x1f
c00161e5:	21 05 20 f4 02 c0    	and    DWORD PTR ds:0xc002f420,eax
c00161eb:	89 fe                	mov    esi,edi
c00161ed:	f7 d6                	not    esi
c00161ef:	21 35 24 f4 02 c0    	and    DWORD PTR ds:0xc002f424,esi
c00161f5:	5e                   	pop    esi
c00161f6:	5f                   	pop    edi
c00161f7:	c3                   	ret    

c00161f8 <LogicalDisk::read(unsigned long long, int, void*)>:
c00161f8:	57                   	push   edi
c00161f9:	56                   	push   esi
c00161fa:	53                   	push   ebx
c00161fb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00161ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016203:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016207:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001620b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016211:	77 41                	ja     c0016254 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016213:	99                   	cdq    
c0016214:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001621a:	01 c8                	add    eax,ecx
c001621c:	11 da                	adc    edx,ebx
c001621e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016224:	19 d7                	sbb    edi,edx
c0016226:	72 33                	jb     c001625b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0016228:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001622e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016234:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016238:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001623c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016242:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016248:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001624c:	5b                   	pop    ebx
c001624d:	5e                   	pop    esi
c001624e:	5f                   	pop    edi
c001624f:	e9 ec 0a 00 00       	jmp    c0016d40 <VCache::read(unsigned long long, int, void*)>
c0016254:	b8 05 00 00 00       	mov    eax,0x5
c0016259:	eb 05                	jmp    c0016260 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001625b:	b8 07 00 00 00       	mov    eax,0x7
c0016260:	5b                   	pop    ebx
c0016261:	5e                   	pop    esi
c0016262:	5f                   	pop    edi
c0016263:	c3                   	ret    

c0016264 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016264:	57                   	push   edi
c0016265:	56                   	push   esi
c0016266:	53                   	push   ebx
c0016267:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001626b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001626f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016273:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016277:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001627d:	77 41                	ja     c00162c0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001627f:	99                   	cdq    
c0016280:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0016286:	01 c8                	add    eax,ecx
c0016288:	11 da                	adc    edx,ebx
c001628a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016290:	19 d7                	sbb    edi,edx
c0016292:	72 33                	jb     c00162c7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0016294:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001629a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00162a0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00162a4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00162a8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00162ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00162b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00162b8:	5b                   	pop    ebx
c00162b9:	5e                   	pop    esi
c00162ba:	5f                   	pop    edi
c00162bb:	e9 96 09 00 00       	jmp    c0016c56 <VCache::write(unsigned long long, int, void*)>
c00162c0:	b8 05 00 00 00       	mov    eax,0x5
c00162c5:	eb 05                	jmp    c00162cc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00162c7:	b8 07 00 00 00       	mov    eax,0x7
c00162cc:	5b                   	pop    ebx
c00162cd:	5e                   	pop    esi
c00162ce:	5f                   	pop    edi
c00162cf:	c3                   	ret    

c00162d0 <Mouse::Mouse(char const*)>:
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162d7:	83 ec 08             	sub    esp,0x8
c00162da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162de:	50                   	push   eax
c00162df:	e8 d4 db ff ff       	call   c0013eb8 <Device::Device(char const*)>
c00162e4:	83 c4 10             	add    esp,0x10
c00162e7:	ba 38 bb 02 c0       	mov    edx,0xc002bb38
c00162ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f0:	89 10                	mov    DWORD PTR [eax],edx
c00162f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162f6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016300:	90                   	nop
c0016301:	83 c4 0c             	add    esp,0xc
c0016304:	c3                   	ret    
c0016305:	90                   	nop

c0016306 <Mouse::~Mouse()>:
c0016306:	83 ec 0c             	sub    esp,0xc
c0016309:	ba 38 bb 02 c0       	mov    edx,0xc002bb38
c001630e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016312:	89 10                	mov    DWORD PTR [eax],edx
c0016314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	50                   	push   eax
c001631c:	e8 61 d8 ff ff       	call   c0013b82 <Device::~Device()>
c0016321:	83 c4 10             	add    esp,0x10
c0016324:	90                   	nop
c0016325:	83 c4 0c             	add    esp,0xc
c0016328:	c3                   	ret    
c0016329:	90                   	nop

c001632a <Mouse::~Mouse()>:
c001632a:	83 ec 0c             	sub    esp,0xc
c001632d:	83 ec 0c             	sub    esp,0xc
c0016330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016334:	e8 cd ff ff ff       	call   c0016306 <Mouse::~Mouse()>
c0016339:	83 c4 10             	add    esp,0x10
c001633c:	83 ec 08             	sub    esp,0x8
c001633f:	68 58 01 00 00       	push   0x158
c0016344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016348:	e8 4e c4 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c001634d:	83 c4 10             	add    esp,0x10
c0016350:	83 c4 0c             	add    esp,0xc
c0016353:	c3                   	ret    

c0016354 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016354:	55                   	push   ebp
c0016355:	57                   	push   edi
c0016356:	56                   	push   esi
c0016357:	53                   	push   ebx
c0016358:	81 ec 20 01 00 00    	sub    esp,0x120
c001635e:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c0016365:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001636c:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0016373:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c001637a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001637e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016382:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016386:	56                   	push   esi
c0016387:	68 5c bb 02 c0       	push   0xc002bb5c
c001638c:	e8 ea c4 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0016391:	58                   	pop    eax
c0016392:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016399:	e8 16 dc ff ff       	call   c0013fb4 <Device::getName()>
c001639e:	5a                   	pop    edx
c001639f:	59                   	pop    ecx
c00163a0:	50                   	push   eax
c00163a1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00163a5:	53                   	push   ebx
c00163a6:	e8 61 a4 fe ff       	call   c000080c <strcpy>
c00163ab:	5d                   	pop    ebp
c00163ac:	58                   	pop    eax
c00163ad:	68 8d bb 02 c0       	push   0xc002bb8d
c00163b2:	53                   	push   ebx
c00163b3:	e8 94 a5 fe ff       	call   c000094c <strcat>
c00163b8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00163bf:	e8 c8 94 ff ff       	call   c000f88c <malloc>
c00163c4:	83 c4 0c             	add    esp,0xc
c00163c7:	89 c5                	mov    ebp,eax
c00163c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00163cd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00163d1:	57                   	push   edi
c00163d2:	56                   	push   esi
c00163d3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00163da:	53                   	push   ebx
c00163db:	50                   	push   eax
c00163dc:	e8 bf fb ff ff       	call   c0015fa0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00163e1:	83 c4 14             	add    esp,0x14
c00163e4:	55                   	push   ebp
c00163e5:	e8 6c fc ff ff       	call   c0016056 <LogicalDisk::assignDriveLetter()>
c00163ea:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00163ed:	0f be d8             	movsx  ebx,al
c00163f0:	e8 17 fd ff ff       	call   c001610c <LogicalDisk::mount()>
c00163f5:	58                   	pop    eax
c00163f6:	5a                   	pop    edx
c00163f7:	55                   	push   ebp
c00163f8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00163ff:	e8 b0 d8 ff ff       	call   c0013cb4 <Device::addChild(Device*)>
c0016404:	59                   	pop    ecx
c0016405:	5e                   	pop    esi
c0016406:	53                   	push   ebx
c0016407:	68 98 bb 02 c0       	push   0xc002bb98
c001640c:	e8 6a c4 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0016411:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016417:	5b                   	pop    ebx
c0016418:	5e                   	pop    esi
c0016419:	5f                   	pop    edi
c001641a:	5d                   	pop    ebp
c001641b:	c3                   	ret    

c001641c <createPartitionsForDisk(PhysicalDisk*)>:
c001641c:	55                   	push   ebp
c001641d:	57                   	push   edi
c001641e:	56                   	push   esi
c001641f:	53                   	push   ebx
c0016420:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016426:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001642d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016433:	3d 00 02 00 00       	cmp    eax,0x200
c0016438:	74 27                	je     c0016461 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001643a:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016440:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016446:	83 ec 10             	sub    esp,0x10
c0016449:	0f a4 f7 0a          	shld   edi,esi,0xa
c001644d:	99                   	cdq    
c001644e:	c1 e6 0a             	shl    esi,0xa
c0016451:	52                   	push   edx
c0016452:	89 fd                	mov    ebp,edi
c0016454:	50                   	push   eax
c0016455:	55                   	push   ebp
c0016456:	56                   	push   esi
c0016457:	e8 48 0d 01 00       	call   c00271a4 <__udivdi3>
c001645c:	e9 b1 00 00 00       	jmp    c0016512 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016461:	83 ec 0c             	sub    esp,0xc
c0016464:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016466:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001646a:	56                   	push   esi
c001646b:	6a 01                	push   0x1
c001646d:	6a 00                	push   0x0
c001646f:	6a 00                	push   0x0
c0016471:	53                   	push   ebx
c0016472:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016475:	83 c4 20             	add    esp,0x20
c0016478:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016480:	75 0a                	jne    c001648c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016482:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001648a:	74 2c                	je     c00164b8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001648c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016492:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016498:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001649e:	83 ec 10             	sub    esp,0x10
c00164a1:	0f a4 c2 0a          	shld   edx,eax,0xa
c00164a5:	89 f7                	mov    edi,esi
c00164a7:	c1 e0 0a             	shl    eax,0xa
c00164aa:	c1 ff 1f             	sar    edi,0x1f
c00164ad:	57                   	push   edi
c00164ae:	56                   	push   esi
c00164af:	52                   	push   edx
c00164b0:	50                   	push   eax
c00164b1:	e8 ee 0c 01 00       	call   c00271a4 <__udivdi3>
c00164b6:	eb 5a                	jmp    c0016512 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00164b8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00164bf:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00164c6:	83 e1 7f             	and    ecx,0x7f
c00164c9:	83 e0 7f             	and    eax,0x7f
c00164cc:	01 c1                	add    ecx,eax
c00164ce:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00164d5:	83 e0 7f             	and    eax,0x7f
c00164d8:	01 c1                	add    ecx,eax
c00164da:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00164e1:	83 e0 7f             	and    eax,0x7f
c00164e4:	00 c1                	add    cl,al
c00164e6:	74 41                	je     c0016529 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00164e8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00164ee:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00164f4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00164fa:	83 ec 10             	sub    esp,0x10
c00164fd:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016501:	89 f7                	mov    edi,esi
c0016503:	c1 e0 0a             	shl    eax,0xa
c0016506:	c1 ff 1f             	sar    edi,0x1f
c0016509:	57                   	push   edi
c001650a:	56                   	push   esi
c001650b:	52                   	push   edx
c001650c:	50                   	push   eax
c001650d:	e8 92 0c 01 00       	call   c00271a4 <__udivdi3>
c0016512:	83 c4 14             	add    esp,0x14
c0016515:	52                   	push   edx
c0016516:	50                   	push   eax
c0016517:	6a 00                	push   0x0
c0016519:	6a 00                	push   0x0
c001651b:	53                   	push   ebx
c001651c:	e8 33 fe ff ff       	call   c0016354 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016521:	83 c4 20             	add    esp,0x20
c0016524:	e9 79 01 00 00       	jmp    c00166a2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016529:	89 f0                	mov    eax,esi
c001652b:	31 f6                	xor    esi,esi
c001652d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016534:	75 02                	jne    c0016538 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016536:	89 f1                	mov    ecx,esi
c0016538:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001653f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016546:	c1 e2 08             	shl    edx,0x8
c0016549:	c1 e7 10             	shl    edi,0x10
c001654c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016554:	09 fa                	or     edx,edi
c0016556:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001655e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016565:	83 c0 10             	add    eax,0x10
c0016568:	09 fa                	or     edx,edi
c001656a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016571:	c1 e7 18             	shl    edi,0x18
c0016574:	09 fa                	or     edx,edi
c0016576:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001657d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016581:	c1 e7 10             	shl    edi,0x10
c0016584:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001658b:	c1 e2 08             	shl    edx,0x8
c001658e:	09 fa                	or     edx,edi
c0016590:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016597:	09 fa                	or     edx,edi
c0016599:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00165a0:	c1 e7 18             	shl    edi,0x18
c00165a3:	09 fa                	or     edx,edi
c00165a5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00165a9:	46                   	inc    esi
c00165aa:	83 fe 04             	cmp    esi,0x4
c00165ad:	0f 85 7a ff ff ff    	jne    c001652d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00165b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165b7:	83 f0 01             	xor    eax,0x1
c00165ba:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00165be:	75 57                	jne    c0016617 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00165c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165c4:	83 f0 01             	xor    eax,0x1
c00165c7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00165cb:	75 4a                	jne    c0016617 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00165cd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00165d1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00165d9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00165e1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165e7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165ed:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165f3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165f7:	89 f7                	mov    edi,esi
c00165f9:	c1 e0 0a             	shl    eax,0xa
c00165fc:	c1 ff 1f             	sar    edi,0x1f
c00165ff:	57                   	push   edi
c0016600:	56                   	push   esi
c0016601:	52                   	push   edx
c0016602:	50                   	push   eax
c0016603:	e8 9c 0b 01 00       	call   c00271a4 <__udivdi3>
c0016608:	83 c4 10             	add    esp,0x10
c001660b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001660f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016613:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016617:	84 c9                	test   cl,cl
c0016619:	74 53                	je     c001666e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001661b:	0f b6 c9             	movzx  ecx,cl
c001661e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016622:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016626:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001662a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001662e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016632:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016636:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c001663a:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001663e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016642:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016646:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001664a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001664e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016652:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016656:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001665a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001665e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016662:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016666:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001666a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001666e:	31 ed                	xor    ebp,ebp
c0016670:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016674:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016678:	89 f8                	mov    eax,edi
c001667a:	09 f0                	or     eax,esi
c001667c:	74 1e                	je     c001669c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001667e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016682:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016686:	89 d1                	mov    ecx,edx
c0016688:	09 c1                	or     ecx,eax
c001668a:	74 10                	je     c001669c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001668c:	83 ec 0c             	sub    esp,0xc
c001668f:	57                   	push   edi
c0016690:	56                   	push   esi
c0016691:	52                   	push   edx
c0016692:	50                   	push   eax
c0016693:	53                   	push   ebx
c0016694:	e8 bb fc ff ff       	call   c0016354 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016699:	83 c4 20             	add    esp,0x20
c001669c:	45                   	inc    ebp
c001669d:	83 fd 04             	cmp    ebp,0x4
c00166a0:	75 ce                	jne    c0016670 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00166a2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00166a8:	5b                   	pop    ebx
c00166a9:	5e                   	pop    esi
c00166aa:	5f                   	pop    edi
c00166ab:	5d                   	pop    ebp
c00166ac:	c3                   	ret    
c00166ad:	90                   	nop

c00166ae <Serial::Serial(char const*)>:
c00166ae:	83 ec 0c             	sub    esp,0xc
c00166b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166b5:	83 ec 08             	sub    esp,0x8
c00166b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00166bc:	50                   	push   eax
c00166bd:	e8 f6 d7 ff ff       	call   c0013eb8 <Device::Device(char const*)>
c00166c2:	83 c4 10             	add    esp,0x10
c00166c5:	ba c4 bb 02 c0       	mov    edx,0xc002bbc4
c00166ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ce:	89 10                	mov    DWORD PTR [eax],edx
c00166d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166d4:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00166de:	90                   	nop
c00166df:	83 c4 0c             	add    esp,0xc
c00166e2:	c3                   	ret    
c00166e3:	90                   	nop

c00166e4 <Serial::~Serial()>:
c00166e4:	83 ec 0c             	sub    esp,0xc
c00166e7:	ba c4 bb 02 c0       	mov    edx,0xc002bbc4
c00166ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f0:	89 10                	mov    DWORD PTR [eax],edx
c00166f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166f6:	83 ec 0c             	sub    esp,0xc
c00166f9:	50                   	push   eax
c00166fa:	e8 83 d4 ff ff       	call   c0013b82 <Device::~Device()>
c00166ff:	83 c4 10             	add    esp,0x10
c0016702:	90                   	nop
c0016703:	83 c4 0c             	add    esp,0xc
c0016706:	c3                   	ret    
c0016707:	90                   	nop

c0016708 <Serial::~Serial()>:
c0016708:	83 ec 0c             	sub    esp,0xc
c001670b:	83 ec 0c             	sub    esp,0xc
c001670e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016712:	e8 cd ff ff ff       	call   c00166e4 <Serial::~Serial()>
c0016717:	83 c4 10             	add    esp,0x10
c001671a:	83 ec 08             	sub    esp,0x8
c001671d:	68 58 01 00 00       	push   0x158
c0016722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016726:	e8 70 c0 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c001672b:	83 c4 10             	add    esp,0x10
c001672e:	83 c4 0c             	add    esp,0xc
c0016731:	c3                   	ret    

c0016732 <Timer::Timer(char const*)>:
c0016732:	83 ec 0c             	sub    esp,0xc
c0016735:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016739:	83 ec 08             	sub    esp,0x8
c001673c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016740:	50                   	push   eax
c0016741:	e8 72 d7 ff ff       	call   c0013eb8 <Device::Device(char const*)>
c0016746:	83 c4 10             	add    esp,0x10
c0016749:	ba 08 bc 02 c0       	mov    edx,0xc002bc08
c001674e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016752:	89 10                	mov    DWORD PTR [eax],edx
c0016754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016758:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016762:	90                   	nop
c0016763:	83 c4 0c             	add    esp,0xc
c0016766:	c3                   	ret    
c0016767:	90                   	nop

c0016768 <Timer::~Timer()>:
c0016768:	83 ec 0c             	sub    esp,0xc
c001676b:	ba 08 bc 02 c0       	mov    edx,0xc002bc08
c0016770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016774:	89 10                	mov    DWORD PTR [eax],edx
c0016776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001677a:	83 ec 0c             	sub    esp,0xc
c001677d:	50                   	push   eax
c001677e:	e8 ff d3 ff ff       	call   c0013b82 <Device::~Device()>
c0016783:	83 c4 10             	add    esp,0x10
c0016786:	90                   	nop
c0016787:	83 c4 0c             	add    esp,0xc
c001678a:	c3                   	ret    
c001678b:	90                   	nop

c001678c <Timer::~Timer()>:
c001678c:	83 ec 0c             	sub    esp,0xc
c001678f:	83 ec 0c             	sub    esp,0xc
c0016792:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016796:	e8 cd ff ff ff       	call   c0016768 <Timer::~Timer()>
c001679b:	83 c4 10             	add    esp,0x10
c001679e:	83 ec 08             	sub    esp,0x8
c00167a1:	68 5c 01 00 00       	push   0x15c
c00167a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167aa:	e8 ec bf ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c00167af:	83 c4 10             	add    esp,0x10
c00167b2:	83 c4 0c             	add    esp,0xc
c00167b5:	c3                   	ret    

c00167b6 <Timer::read()>:
c00167b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00167c0:	c3                   	ret    

c00167c1 <timerHandler(unsigned long long)>:
c00167c1:	55                   	push   ebp
c00167c2:	57                   	push   edi
c00167c3:	56                   	push   esi
c00167c4:	53                   	push   ebx
c00167c5:	83 ec 0c             	sub    esp,0xc
c00167c8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00167cc:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00167d0:	01 35 b0 f4 02 c0    	add    DWORD PTR ds:0xc002f4b0,esi
c00167d6:	11 3d b4 f4 02 c0    	adc    DWORD PTR ds:0xc002f4b4,edi
c00167dc:	80 3d 4d ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee4d,0x0
c00167e3:	0f 84 42 01 00 00    	je     c001692b <timerHandler(unsigned long long)+0x16a>
c00167e9:	fa                   	cli    
c00167ea:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c00167f0:	83 ec 0c             	sub    esp,0xc
c00167f3:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c00167f9:	68 78 23 03 c0       	push   0xc0032378
c00167fe:	e8 27 2a 01 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	84 c0                	test   al,al
c0016808:	0f 85 a2 00 00 00    	jne    c00168b0 <timerHandler(unsigned long long)+0xef>
c001680e:	83 ec 0c             	sub    esp,0xc
c0016811:	68 78 23 03 c0       	push   0xc0032378
c0016816:	e8 2b 2a 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	89 c3                	mov    ebx,eax
c0016820:	83 ec 0c             	sub    esp,0xc
c0016823:	68 78 23 03 c0       	push   0xc0032378
c0016828:	e8 19 2a 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001682d:	c7 04 24 78 23 03 c0 	mov    DWORD PTR [esp],0xc0032378
c0016834:	89 c5                	mov    ebp,eax
c0016836:	e8 13 2a 01 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001683b:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001683e:	83 c4 10             	add    esp,0x10
c0016841:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016844:	39 15 b0 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4b0,edx
c001684a:	a1 b4 f4 02 c0       	mov    eax,ds:0xc002f4b4
c001684f:	19 c8                	sbb    eax,ecx
c0016851:	72 21                	jb     c0016874 <timerHandler(unsigned long long)+0xb3>
c0016853:	83 ec 0c             	sub    esp,0xc
c0016856:	55                   	push   ebp
c0016857:	e8 cc 7c 00 00       	call   c001e528 <unblockTask(ThreadControlBlock*)>
c001685c:	83 c4 10             	add    esp,0x10
c001685f:	39 eb                	cmp    ebx,ebp
c0016861:	75 21                	jne    c0016884 <timerHandler(unsigned long long)+0xc3>
c0016863:	83 ec 0c             	sub    esp,0xc
c0016866:	68 78 23 03 c0       	push   0xc0032378
c001686b:	e8 d6 29 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016870:	89 c3                	mov    ebx,eax
c0016872:	eb 0d                	jmp    c0016881 <timerHandler(unsigned long long)+0xc0>
c0016874:	50                   	push   eax
c0016875:	50                   	push   eax
c0016876:	55                   	push   ebp
c0016877:	68 78 23 03 c0       	push   0xc0032378
c001687c:	e8 7b 2a 01 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016881:	83 c4 10             	add    esp,0x10
c0016884:	83 ec 0c             	sub    esp,0xc
c0016887:	68 78 23 03 c0       	push   0xc0032378
c001688c:	e8 99 29 01 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016891:	83 c4 10             	add    esp,0x10
c0016894:	84 c0                	test   al,al
c0016896:	75 18                	jne    c00168b0 <timerHandler(unsigned long long)+0xef>
c0016898:	83 ec 0c             	sub    esp,0xc
c001689b:	68 78 23 03 c0       	push   0xc0032378
c00168a0:	e8 a1 29 01 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168a5:	83 c4 10             	add    esp,0x10
c00168a8:	39 d8                	cmp    eax,ebx
c00168aa:	0f 85 70 ff ff ff    	jne    c0016820 <timerHandler(unsigned long long)+0x5f>
c00168b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168b5:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c00168b9:	74 3d                	je     c00168f8 <timerHandler(unsigned long long)+0x137>
c00168bb:	80 3d 4c ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee4c,0x0
c00168c2:	74 34                	je     c00168f8 <timerHandler(unsigned long long)+0x137>
c00168c4:	fa                   	cli    
c00168c5:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c00168cb:	31 d2                	xor    edx,edx
c00168cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168d2:	89 f9                	mov    ecx,edi
c00168d4:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00168d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00168df:	39 c6                	cmp    esi,eax
c00168e1:	19 d1                	sbb    ecx,edx
c00168e3:	72 05                	jb     c00168ea <timerHandler(unsigned long long)+0x129>
c00168e5:	e8 7a 77 00 00       	call   c001e064 <schedule()>
c00168ea:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c00168ef:	48                   	dec    eax
c00168f0:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c00168f5:	75 01                	jne    c00168f8 <timerHandler(unsigned long long)+0x137>
c00168f7:	fb                   	sti    
c00168f8:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c00168fd:	48                   	dec    eax
c00168fe:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c0016903:	75 18                	jne    c001691d <timerHandler(unsigned long long)+0x15c>
c0016905:	83 3d 60 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032360,0x0
c001690c:	74 0f                	je     c001691d <timerHandler(unsigned long long)+0x15c>
c001690e:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c0016918:	e8 47 77 00 00       	call   c001e064 <schedule()>
c001691d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0016922:	48                   	dec    eax
c0016923:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0016928:	75 01                	jne    c001692b <timerHandler(unsigned long long)+0x16a>
c001692a:	fb                   	sti    
c001692b:	83 c4 0c             	add    esp,0xc
c001692e:	5b                   	pop    ebx
c001692f:	5e                   	pop    esi
c0016930:	5f                   	pop    edi
c0016931:	5d                   	pop    ebp
c0016932:	c3                   	ret    

c0016933 <setupTimer(int)>:
c0016933:	57                   	push   edi
c0016934:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0016939:	56                   	push   esi
c001693a:	53                   	push   ebx
c001693b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001693f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016945:	83 ec 0c             	sub    esp,0xc
c0016948:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001694e:	e8 61 d6 ff ff       	call   c0013fb4 <Device::getName()>
c0016953:	83 c4 10             	add    esp,0x10
c0016956:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016959:	0f 85 8d 00 00 00    	jne    c00169ec <setupTimer(int)+0xb9>
c001695f:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0016964:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001696b:	74 7f                	je     c00169ec <setupTimer(int)+0xb9>
c001696d:	83 ec 0c             	sub    esp,0xc
c0016970:	68 5c 01 00 00       	push   0x15c
c0016975:	e8 12 8f ff ff       	call   c000f88c <malloc>
c001697a:	89 04 24             	mov    DWORD PTR [esp],eax
c001697d:	89 c3                	mov    ebx,eax
c001697f:	e8 f8 03 01 00       	call   c0026d7c <PIT::PIT()>
c0016984:	59                   	pop    ecx
c0016985:	5f                   	pop    edi
c0016986:	53                   	push   ebx
c0016987:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c001698d:	e8 22 d3 ff ff       	call   c0013cb4 <Device::addChild(Device*)>
c0016992:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016994:	6a 00                	push   0x0
c0016996:	6a 00                	push   0x0
c0016998:	56                   	push   esi
c0016999:	53                   	push   ebx
c001699a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001699d:	83 c4 14             	add    esp,0x14
c00169a0:	68 60 01 00 00       	push   0x160
c00169a5:	e8 e2 8e ff ff       	call   c000f88c <malloc>
c00169aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00169ad:	89 c7                	mov    edi,eax
c00169af:	e8 78 02 01 00       	call   c0026c2c <APICTimer::APICTimer()>
c00169b4:	6a 00                	push   0x0
c00169b6:	6a 00                	push   0x0
c00169b8:	56                   	push   esi
c00169b9:	57                   	push   edi
c00169ba:	e8 6f 01 01 00       	call   c0026b2e <APICTimer::open(int, int, void*)>
c00169bf:	83 c4 20             	add    esp,0x20
c00169c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00169c4:	6a 00                	push   0x0
c00169c6:	6a 00                	push   0x0
c00169c8:	6a 00                	push   0x0
c00169ca:	53                   	push   ebx
c00169cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00169ce:	58                   	pop    eax
c00169cf:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00169d4:	5a                   	pop    edx
c00169d5:	57                   	push   edi
c00169d6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00169dc:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00169e2:	e8 cd d2 ff ff       	call   c0013cb4 <Device::addChild(Device*)>
c00169e7:	83 c4 10             	add    esp,0x10
c00169ea:	eb 33                	jmp    c0016a1f <setupTimer(int)+0xec>
c00169ec:	83 ec 0c             	sub    esp,0xc
c00169ef:	68 5c 01 00 00       	push   0x15c
c00169f4:	e8 93 8e ff ff       	call   c000f88c <malloc>
c00169f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00169fc:	89 c3                	mov    ebx,eax
c00169fe:	e8 79 03 01 00       	call   c0026d7c <PIT::PIT()>
c0016a03:	58                   	pop    eax
c0016a04:	5a                   	pop    edx
c0016a05:	53                   	push   ebx
c0016a06:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c0016a0c:	e8 a3 d2 ff ff       	call   c0013cb4 <Device::addChild(Device*)>
c0016a11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a13:	6a 00                	push   0x0
c0016a15:	6a 00                	push   0x0
c0016a17:	56                   	push   esi
c0016a18:	53                   	push   ebx
c0016a19:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a1c:	83 c4 20             	add    esp,0x20
c0016a1f:	89 d8                	mov    eax,ebx
c0016a21:	5b                   	pop    ebx
c0016a22:	5e                   	pop    esi
c0016a23:	5f                   	pop    edi
c0016a24:	c3                   	ret    
c0016a25:	90                   	nop

c0016a26 <VCache::VCache(PhysicalDisk*)>:
c0016a26:	53                   	push   ebx
c0016a27:	83 ec 18             	sub    esp,0x18
c0016a2a:	ba 38 bc 02 c0       	mov    edx,0xc002bc38
c0016a2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a33:	89 10                	mov    DWORD PTR [eax],edx
c0016a35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a39:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016a40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a44:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016a4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a4f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016a56:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016a5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a61:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016a68:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016a6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a73:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016a7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a7e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016a82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a86:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016a8d:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a98:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa0:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016aa8:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ab0:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016ab7:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016abf:	83 ec 0c             	sub    esp,0xc
c0016ac2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ac6:	e8 c1 8d ff ff       	call   c000f88c <malloc>
c0016acb:	83 c4 10             	add    esp,0x10
c0016ace:	89 c3                	mov    ebx,eax
c0016ad0:	83 ec 0c             	sub    esp,0xc
c0016ad3:	53                   	push   ebx
c0016ad4:	e8 35 73 00 00       	call   c001de0e <Mutex::Mutex()>
c0016ad9:	83 c4 10             	add    esp,0x10
c0016adc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae0:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016ae3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ae7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016aeb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016af2:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016af9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016afd:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016b03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b07:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016b0a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b0e:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016b14:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016b1a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016b1e:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016b21:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016b24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b28:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016b2c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b30:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b36:	05 00 01 00 00       	add    eax,0x100
c0016b3b:	c1 e0 04             	shl    eax,0x4
c0016b3e:	83 ec 0c             	sub    esp,0xc
c0016b41:	50                   	push   eax
c0016b42:	e8 45 8d ff ff       	call   c000f88c <malloc>
c0016b47:	83 c4 10             	add    esp,0x10
c0016b4a:	89 c2                	mov    edx,eax
c0016b4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b50:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016b53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b57:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016b5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b62:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016b6a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b70:	c1 e0 07             	shl    eax,0x7
c0016b73:	83 ec 0c             	sub    esp,0xc
c0016b76:	50                   	push   eax
c0016b77:	e8 10 8d ff ff       	call   c000f88c <malloc>
c0016b7c:	83 c4 10             	add    esp,0x10
c0016b7f:	89 c2                	mov    edx,eax
c0016b81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b85:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016b88:	90                   	nop
c0016b89:	83 c4 18             	add    esp,0x18
c0016b8c:	5b                   	pop    ebx
c0016b8d:	c3                   	ret    

c0016b8e <VCache::invalidateReadBuffer()>:
c0016b8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b92:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016b98:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016b9c:	c3                   	ret    
c0016b9d:	90                   	nop

c0016b9e <VCache::writeWriteBuffer()>:
c0016b9e:	53                   	push   ebx
c0016b9f:	83 ec 14             	sub    esp,0x14
c0016ba2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016ba6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ba9:	8b 10                	mov    edx,DWORD PTR [eax]
c0016bab:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016bae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016bb1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016bb4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016bb7:	50                   	push   eax
c0016bb8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016bbb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016bc2:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016bc9:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016bcd:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016bd4:	83 c4 28             	add    esp,0x28
c0016bd7:	5b                   	pop    ebx
c0016bd8:	c3                   	ret    
c0016bd9:	90                   	nop

c0016bda <VCache::~VCache()>:
c0016bda:	83 ec 0c             	sub    esp,0xc
c0016bdd:	ba 38 bc 02 c0       	mov    edx,0xc002bc38
c0016be2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016be6:	89 10                	mov    DWORD PTR [eax],edx
c0016be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bec:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016bef:	84 c0                	test   al,al
c0016bf1:	74 0f                	je     c0016c02 <VCache::~VCache()+0x28>
c0016bf3:	83 ec 0c             	sub    esp,0xc
c0016bf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016bfa:	e8 9f ff ff ff       	call   c0016b9e <VCache::writeWriteBuffer()>
c0016bff:	83 c4 10             	add    esp,0x10
c0016c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c06:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016c09:	83 ec 0c             	sub    esp,0xc
c0016c0c:	50                   	push   eax
c0016c0d:	e8 8a 8c ff ff       	call   c000f89c <free>
c0016c12:	83 c4 10             	add    esp,0x10
c0016c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c19:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016c1c:	83 ec 0c             	sub    esp,0xc
c0016c1f:	50                   	push   eax
c0016c20:	e8 77 8c ff ff       	call   c000f89c <free>
c0016c25:	83 c4 10             	add    esp,0x10
c0016c28:	90                   	nop
c0016c29:	83 c4 0c             	add    esp,0xc
c0016c2c:	c3                   	ret    
c0016c2d:	90                   	nop

c0016c2e <VCache::~VCache()>:
c0016c2e:	83 ec 0c             	sub    esp,0xc
c0016c31:	83 ec 0c             	sub    esp,0xc
c0016c34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c38:	e8 9d ff ff ff       	call   c0016bda <VCache::~VCache()>
c0016c3d:	83 c4 10             	add    esp,0x10
c0016c40:	83 ec 08             	sub    esp,0x8
c0016c43:	6a 44                	push   0x44
c0016c45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c49:	e8 4d bb ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	83 c4 0c             	add    esp,0xc
c0016c54:	c3                   	ret    
c0016c55:	90                   	nop

c0016c56 <VCache::write(unsigned long long, int, void*)>:
c0016c56:	55                   	push   ebp
c0016c57:	57                   	push   edi
c0016c58:	56                   	push   esi
c0016c59:	53                   	push   ebx
c0016c5a:	83 ec 18             	sub    esp,0x18
c0016c5d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016c61:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c65:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c69:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016c6c:	e8 2b 77 00 00       	call   c001e39c <Semaphore::acquire()>
c0016c71:	83 c4 10             	add    esp,0x10
c0016c74:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016c78:	74 0c                	je     c0016c86 <VCache::write(unsigned long long, int, void*)+0x30>
c0016c7a:	83 ec 0c             	sub    esp,0xc
c0016c7d:	53                   	push   ebx
c0016c7e:	e8 0b ff ff ff       	call   c0016b8e <VCache::invalidateReadBuffer()>
c0016c83:	83 c4 10             	add    esp,0x10
c0016c86:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016c8a:	74 5c                	je     c0016ce8 <VCache::write(unsigned long long, int, void*)+0x92>
c0016c8c:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0016c8f:	89 e8                	mov    eax,ebp
c0016c91:	99                   	cdq    
c0016c92:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016c95:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016c98:	89 c1                	mov    ecx,eax
c0016c9a:	89 d0                	mov    eax,edx
c0016c9c:	31 f1                	xor    ecx,esi
c0016c9e:	31 f8                	xor    eax,edi
c0016ca0:	09 c1                	or     ecx,eax
c0016ca2:	75 38                	jne    c0016cdc <VCache::write(unsigned long long, int, void*)+0x86>
c0016ca4:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0016ca9:	75 31                	jne    c0016cdc <VCache::write(unsigned long long, int, void*)+0x86>
c0016cab:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cae:	89 ef                	mov    edi,ebp
c0016cb0:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016cb6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016cba:	0f af f9             	imul   edi,ecx
c0016cbd:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0016cc0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016cc2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016cc5:	40                   	inc    eax
c0016cc6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016cc9:	83 c0 80             	add    eax,0xffffff80
c0016ccc:	75 5c                	jne    c0016d2a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016cce:	83 ec 0c             	sub    esp,0xc
c0016cd1:	53                   	push   ebx
c0016cd2:	e8 c7 fe ff ff       	call   c0016b9e <VCache::writeWriteBuffer()>
c0016cd7:	83 c4 10             	add    esp,0x10
c0016cda:	eb 4e                	jmp    c0016d2a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016cdc:	83 ec 0c             	sub    esp,0xc
c0016cdf:	53                   	push   ebx
c0016ce0:	e8 b9 fe ff ff       	call   c0016b9e <VCache::writeWriteBuffer()>
c0016ce5:	83 c4 10             	add    esp,0x10
c0016ce8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016ceb:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c0016cf0:	7f 22                	jg     c0016d14 <VCache::write(unsigned long long, int, void*)+0xbe>
c0016cf2:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016cf5:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016cf8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016cfc:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016d00:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c0016d03:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0016d06:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016d0c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016d10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016d12:	eb 16                	jmp    c0016d2a <VCache::write(unsigned long long, int, void*)+0xd4>
c0016d14:	83 ec 0c             	sub    esp,0xc
c0016d17:	8b 10                	mov    edx,DWORD PTR [eax]
c0016d19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d1d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016d21:	57                   	push   edi
c0016d22:	56                   	push   esi
c0016d23:	50                   	push   eax
c0016d24:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016d27:	83 c4 20             	add    esp,0x20
c0016d2a:	83 ec 0c             	sub    esp,0xc
c0016d2d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d30:	e8 a1 7d 00 00       	call   c001ead6 <Semaphore::release()>
c0016d35:	83 c4 1c             	add    esp,0x1c
c0016d38:	31 c0                	xor    eax,eax
c0016d3a:	5b                   	pop    ebx
c0016d3b:	5e                   	pop    esi
c0016d3c:	5f                   	pop    edi
c0016d3d:	5d                   	pop    ebp
c0016d3e:	c3                   	ret    
c0016d3f:	90                   	nop

c0016d40 <VCache::read(unsigned long long, int, void*)>:
c0016d40:	55                   	push   ebp
c0016d41:	57                   	push   edi
c0016d42:	56                   	push   esi
c0016d43:	53                   	push   ebx
c0016d44:	83 ec 28             	sub    esp,0x28
c0016d47:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d4b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d4f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016d53:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016d57:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d5a:	e8 3d 76 00 00       	call   c001e39c <Semaphore::acquire()>
c0016d5f:	83 c4 10             	add    esp,0x10
c0016d62:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016d66:	74 0c                	je     c0016d74 <VCache::read(unsigned long long, int, void*)+0x34>
c0016d68:	83 ec 0c             	sub    esp,0xc
c0016d6b:	53                   	push   ebx
c0016d6c:	e8 2d fe ff ff       	call   c0016b9e <VCache::writeWriteBuffer()>
c0016d71:	83 c4 10             	add    esp,0x10
c0016d74:	83 fd 01             	cmp    ebp,0x1
c0016d77:	0f 85 80 00 00 00    	jne    c0016dfd <VCache::read(unsigned long long, int, void*)+0xbd>
c0016d7d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016d80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016d84:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016d8b:	75 70                	jne    c0016dfd <VCache::read(unsigned long long, int, void*)+0xbd>
c0016d8d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c0016d90:	89 e9                	mov    ecx,ebp
c0016d92:	f7 d9                	neg    ecx
c0016d94:	89 c8                	mov    eax,ecx
c0016d96:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016d9a:	c1 f8 1f             	sar    eax,0x1f
c0016d9d:	21 f1                	and    ecx,esi
c0016d9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016da3:	89 c8                	mov    eax,ecx
c0016da5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016da9:	21 f9                	and    ecx,edi
c0016dab:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016daf:	89 ca                	mov    edx,ecx
c0016db1:	74 0a                	je     c0016dbd <VCache::read(unsigned long long, int, void*)+0x7d>
c0016db3:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016db6:	75 05                	jne    c0016dbd <VCache::read(unsigned long long, int, void*)+0x7d>
c0016db8:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0016dbb:	74 23                	je     c0016de0 <VCache::read(unsigned long long, int, void*)+0xa0>
c0016dbd:	83 ec 0c             	sub    esp,0xc
c0016dc0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016dc4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016dc8:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0016dcb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0016dce:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016dd0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016dd3:	55                   	push   ebp
c0016dd4:	52                   	push   edx
c0016dd5:	50                   	push   eax
c0016dd6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016dda:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016ddd:	83 c4 20             	add    esp,0x20
c0016de0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016de3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016de7:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0016ded:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016df0:	48                   	dec    eax
c0016df1:	21 c6                	and    esi,eax
c0016df3:	0f af f1             	imul   esi,ecx
c0016df6:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0016df9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016dfb:	eb 1d                	jmp    c0016e1a <VCache::read(unsigned long long, int, void*)+0xda>
c0016dfd:	83 ec 0c             	sub    esp,0xc
c0016e00:	53                   	push   ebx
c0016e01:	e8 88 fd ff ff       	call   c0016b8e <VCache::invalidateReadBuffer()>
c0016e06:	5a                   	pop    edx
c0016e07:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e0a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e0c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016e10:	55                   	push   ebp
c0016e11:	57                   	push   edi
c0016e12:	56                   	push   esi
c0016e13:	50                   	push   eax
c0016e14:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016e17:	83 c4 20             	add    esp,0x20
c0016e1a:	83 ec 0c             	sub    esp,0xc
c0016e1d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e20:	e8 b1 7c 00 00       	call   c001ead6 <Semaphore::release()>
c0016e25:	83 c4 2c             	add    esp,0x2c
c0016e28:	31 c0                	xor    eax,eax
c0016e2a:	5b                   	pop    ebx
c0016e2b:	5e                   	pop    esi
c0016e2c:	5f                   	pop    edi
c0016e2d:	5d                   	pop    ebp
c0016e2e:	c3                   	ret    
c0016e2f:	90                   	nop

c0016e30 <Video::putrect(int, int, int, int, unsigned int)>:
c0016e30:	55                   	push   ebp
c0016e31:	57                   	push   edi
c0016e32:	56                   	push   esi
c0016e33:	53                   	push   ebx
c0016e34:	83 ec 1c             	sub    esp,0x1c
c0016e37:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016e3b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016e3f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016e43:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016e47:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e4f:	01 df                	add    edi,ebx
c0016e51:	39 fb                	cmp    ebx,edi
c0016e53:	7d 1f                	jge    c0016e74 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016e55:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016e59:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016e5d:	7d 12                	jge    c0016e71 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016e5f:	8b 16                	mov    edx,DWORD PTR [esi]
c0016e61:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016e65:	53                   	push   ebx
c0016e66:	55                   	push   ebp
c0016e67:	45                   	inc    ebp
c0016e68:	56                   	push   esi
c0016e69:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016e6c:	83 c4 10             	add    esp,0x10
c0016e6f:	eb e8                	jmp    c0016e59 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016e71:	43                   	inc    ebx
c0016e72:	eb dd                	jmp    c0016e51 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016e74:	83 c4 1c             	add    esp,0x1c
c0016e77:	5b                   	pop    ebx
c0016e78:	5e                   	pop    esi
c0016e79:	5f                   	pop    edi
c0016e7a:	5d                   	pop    ebp
c0016e7b:	c3                   	ret    

c0016e7c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016e7c:	55                   	push   ebp
c0016e7d:	57                   	push   edi
c0016e7e:	31 ff                	xor    edi,edi
c0016e80:	56                   	push   esi
c0016e81:	53                   	push   ebx
c0016e82:	83 ec 1c             	sub    esp,0x1c
c0016e85:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016e89:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e8d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016e94:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016e99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e9d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016ea1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016ea5:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016ea8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016eac:	01 f9                	add    ecx,edi
c0016eae:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016eb2:	7d 2f                	jge    c0016ee3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016eb4:	31 f6                	xor    esi,esi
c0016eb6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016eba:	01 f2                	add    edx,esi
c0016ebc:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016ec0:	7d 1a                	jge    c0016edc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ec2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ec5:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016ec8:	46                   	inc    esi
c0016ec9:	51                   	push   ecx
c0016eca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016ece:	52                   	push   edx
c0016ecf:	55                   	push   ebp
c0016ed0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016ed3:	83 c4 10             	add    esp,0x10
c0016ed6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016eda:	eb da                	jmp    c0016eb6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0016edc:	47                   	inc    edi
c0016edd:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016ee1:	eb c5                	jmp    c0016ea8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0016ee3:	83 c4 1c             	add    esp,0x1c
c0016ee6:	5b                   	pop    ebx
c0016ee7:	5e                   	pop    esi
c0016ee8:	5f                   	pop    edi
c0016ee9:	5d                   	pop    ebp
c0016eea:	c3                   	ret    
c0016eeb:	90                   	nop

c0016eec <Video::blit(unsigned int*, int, int, int, int)>:
c0016eec:	55                   	push   ebp
c0016eed:	57                   	push   edi
c0016eee:	56                   	push   esi
c0016eef:	53                   	push   ebx
c0016ef0:	83 ec 1c             	sub    esp,0x1c
c0016ef3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016ef7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016efb:	85 c0                	test   eax,eax
c0016efd:	79 02                	jns    c0016f01 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0016eff:	31 c0                	xor    eax,eax
c0016f01:	c1 e0 02             	shl    eax,0x2
c0016f04:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016f08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f0c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f10:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0016f14:	39 d8                	cmp    eax,ebx
c0016f16:	7e 49                	jle    c0016f61 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f18:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f1e:	7c 41                	jl     c0016f61 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0016f20:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0016f24:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f28:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016f2c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0016f30:	39 f9                	cmp    ecx,edi
c0016f32:	7e 22                	jle    c0016f56 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016f34:	83 c5 04             	add    ebp,0x4
c0016f37:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f3d:	7c 14                	jl     c0016f53 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016f3f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f41:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016f44:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f48:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016f4c:	56                   	push   esi
c0016f4d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016f50:	83 c4 10             	add    esp,0x10
c0016f53:	47                   	inc    edi
c0016f54:	eb d2                	jmp    c0016f28 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016f56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016f5a:	43                   	inc    ebx
c0016f5b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016f5f:	eb ab                	jmp    c0016f0c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016f61:	83 c4 1c             	add    esp,0x1c
c0016f64:	5b                   	pop    ebx
c0016f65:	5e                   	pop    esi
c0016f66:	5f                   	pop    edi
c0016f67:	5d                   	pop    ebp
c0016f68:	c3                   	ret    
c0016f69:	90                   	nop

c0016f6a <Video::clearScreen(unsigned int)>:
c0016f6a:	57                   	push   edi
c0016f6b:	56                   	push   esi
c0016f6c:	53                   	push   ebx
c0016f6d:	31 db                	xor    ebx,ebx
c0016f6f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f73:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016f79:	7e 1f                	jle    c0016f9a <Video::clearScreen(unsigned int)+0x30>
c0016f7b:	31 ff                	xor    edi,edi
c0016f7d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016f83:	7e 12                	jle    c0016f97 <Video::clearScreen(unsigned int)+0x2d>
c0016f85:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f8b:	53                   	push   ebx
c0016f8c:	57                   	push   edi
c0016f8d:	47                   	inc    edi
c0016f8e:	56                   	push   esi
c0016f8f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016f92:	83 c4 10             	add    esp,0x10
c0016f95:	eb e6                	jmp    c0016f7d <Video::clearScreen(unsigned int)+0x13>
c0016f97:	43                   	inc    ebx
c0016f98:	eb d9                	jmp    c0016f73 <Video::clearScreen(unsigned int)+0x9>
c0016f9a:	5b                   	pop    ebx
c0016f9b:	5e                   	pop    esi
c0016f9c:	5f                   	pop    edi
c0016f9d:	c3                   	ret    

c0016f9e <Video::putpixel(int, int, unsigned int)>:
c0016f9e:	c7 44 24 04 40 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bc40
c0016fa6:	e9 06 33 00 00       	jmp    c001a2b1 <Krnl::panic(char const*)>
c0016fab:	90                   	nop

c0016fac <Video::Video(char const*)>:
c0016fac:	83 ec 0c             	sub    esp,0xc
c0016faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fb3:	83 ec 08             	sub    esp,0x8
c0016fb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016fba:	50                   	push   eax
c0016fbb:	e8 f8 ce ff ff       	call   c0013eb8 <Device::Device(char const*)>
c0016fc0:	83 c4 10             	add    esp,0x10
c0016fc3:	ba c4 bc 02 c0       	mov    edx,0xc002bcc4
c0016fc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fcc:	89 10                	mov    DWORD PTR [eax],edx
c0016fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fd2:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016fdc:	90                   	nop
c0016fdd:	83 c4 0c             	add    esp,0xc
c0016fe0:	c3                   	ret    
c0016fe1:	90                   	nop

c0016fe2 <Video::~Video()>:
c0016fe2:	83 ec 0c             	sub    esp,0xc
c0016fe5:	ba c4 bc 02 c0       	mov    edx,0xc002bcc4
c0016fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fee:	89 10                	mov    DWORD PTR [eax],edx
c0016ff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ff4:	83 ec 0c             	sub    esp,0xc
c0016ff7:	50                   	push   eax
c0016ff8:	e8 85 cb ff ff       	call   c0013b82 <Device::~Device()>
c0016ffd:	83 c4 10             	add    esp,0x10
c0017000:	90                   	nop
c0017001:	83 c4 0c             	add    esp,0xc
c0017004:	c3                   	ret    
c0017005:	90                   	nop

c0017006 <Video::~Video()>:
c0017006:	83 ec 0c             	sub    esp,0xc
c0017009:	83 ec 0c             	sub    esp,0xc
c001700c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017010:	e8 cd ff ff ff       	call   c0016fe2 <Video::~Video()>
c0017015:	83 c4 10             	add    esp,0x10
c0017018:	83 ec 08             	sub    esp,0x8
c001701b:	68 64 01 00 00       	push   0x164
c0017020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017024:	e8 72 b7 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0017029:	83 c4 10             	add    esp,0x10
c001702c:	83 c4 0c             	add    esp,0xc
c001702f:	c3                   	ret    

c0017030 <Video::isMonochrome()>:
c0017030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017034:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c001703a:	c3                   	ret    
c001703b:	90                   	nop

c001703c <Video::getWidth()>:
c001703c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017040:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017046:	c3                   	ret    
c0017047:	90                   	nop

c0017048 <Video::getHeight()>:
c0017048:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001704c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017052:	c3                   	ret    
c0017053:	90                   	nop

c0017054 <Video::drawCursor(int, int, unsigned char*, int)>:
c0017054:	55                   	push   ebp
c0017055:	57                   	push   edi
c0017056:	56                   	push   esi
c0017057:	53                   	push   ebx
c0017058:	83 ec 2c             	sub    esp,0x2c
c001705b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001705f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017063:	83 f8 01             	cmp    eax,0x1
c0017066:	19 c9                	sbb    ecx,ecx
c0017068:	31 db                	xor    ebx,ebx
c001706a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001706e:	89 cd                	mov    ebp,ecx
c0017070:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017078:	f7 d5                	not    ebp
c001707a:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017080:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017084:	01 d8                	add    eax,ebx
c0017086:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001708a:	56                   	push   esi
c001708b:	e8 b8 ff ff ff       	call   c0017048 <Video::getHeight()>
c0017090:	59                   	pop    ecx
c0017091:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0017095:	7e 70                	jle    c0017107 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017097:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001709b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001709f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00170a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170a6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00170aa:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00170b1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00170b5:	89 f8                	mov    eax,edi
c00170b7:	83 c0 20             	add    eax,0x20
c00170ba:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00170be:	56                   	push   esi
c00170bf:	e8 78 ff ff ff       	call   c001703c <Video::getWidth()>
c00170c4:	5a                   	pop    edx
c00170c5:	39 c7                	cmp    edi,eax
c00170c7:	7d 34                	jge    c00170fd <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00170c9:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00170ce:	74 05                	je     c00170d5 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00170d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00170d2:	55                   	push   ebp
c00170d3:	eb 0d                	jmp    c00170e2 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00170d5:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00170da:	74 12                	je     c00170ee <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00170dc:	8b 06                	mov    eax,DWORD PTR [esi]
c00170de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00170e6:	57                   	push   edi
c00170e7:	56                   	push   esi
c00170e8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170eb:	83 c4 10             	add    esp,0x10
c00170ee:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00170f2:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00170f6:	47                   	inc    edi
c00170f7:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00170fb:	75 c1                	jne    c00170be <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00170fd:	43                   	inc    ebx
c00170fe:	83 fb 20             	cmp    ebx,0x20
c0017101:	0f 85 79 ff ff ff    	jne    c0017080 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0017107:	83 c4 2c             	add    esp,0x2c
c001710a:	5b                   	pop    ebx
c001710b:	5e                   	pop    esi
c001710c:	5f                   	pop    edi
c001710d:	5d                   	pop    ebp
c001710e:	c3                   	ret    
c001710f:	90                   	nop

c0017110 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017110:	55                   	push   ebp
c0017111:	57                   	push   edi
c0017112:	56                   	push   esi
c0017113:	53                   	push   ebx
c0017114:	83 ec 28             	sub    esp,0x28
c0017117:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001711b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001711f:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0017123:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0017127:	c1 e7 08             	shl    edi,0x8
c001712a:	01 c7                	add    edi,eax
c001712c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017130:	c1 e0 08             	shl    eax,0x8
c0017133:	01 d0                	add    eax,edx
c0017135:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017139:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001713d:	0f af c7             	imul   eax,edi
c0017140:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017147:	50                   	push   eax
c0017148:	e8 3f 87 ff ff       	call   c000f88c <malloc>
c001714d:	83 c4 10             	add    esp,0x10
c0017150:	89 c5                	mov    ebp,eax
c0017152:	85 c0                	test   eax,eax
c0017154:	75 15                	jne    c001716b <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017156:	83 ec 0c             	sub    esp,0xc
c0017159:	68 61 bc 02 c0       	push   0xc002bc61
c001715e:	e8 18 b7 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0017163:	83 c4 10             	add    esp,0x10
c0017166:	e9 1c 01 00 00       	jmp    c0017287 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c001716b:	be 12 00 00 00       	mov    esi,0x12
c0017170:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017174:	74 11                	je     c0017187 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017176:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c001717a:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c001717e:	c1 fe 03             	sar    esi,0x3
c0017181:	0f af f0             	imul   esi,eax
c0017184:	83 c6 12             	add    esi,0x12
c0017187:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c001718b:	74 04                	je     c0017191 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c001718d:	85 ff                	test   edi,edi
c001718f:	75 12                	jne    c00171a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017191:	83 ec 0c             	sub    esp,0xc
c0017194:	68 78 bc 02 c0       	push   0xc002bc78
c0017199:	e8 dd b6 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001719e:	e9 ce 00 00 00       	jmp    c0017271 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00171a3:	52                   	push   edx
c00171a4:	52                   	push   edx
c00171a5:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00171a9:	50                   	push   eax
c00171aa:	68 8d bc 02 c0       	push   0xc002bc8d
c00171af:	e8 c7 b6 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00171b4:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00171b8:	83 c4 10             	add    esp,0x10
c00171bb:	80 fa 02             	cmp    dl,0x2
c00171be:	0f 85 98 00 00 00    	jne    c001725c <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00171c4:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00171c9:	75 10                	jne    c00171db <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00171cb:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00171cf:	75 0a                	jne    c00171db <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00171d1:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00171d4:	83 e8 18             	sub    eax,0x18
c00171d7:	a8 f7                	test   al,0xf7
c00171d9:	74 0a                	je     c00171e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00171db:	83 ec 0c             	sub    esp,0xc
c00171de:	68 9a bc 02 c0       	push   0xc002bc9a
c00171e3:	eb 7f                	jmp    c0017264 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00171e5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00171ed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00171f5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00171f9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017201:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0017205:	75 0c                	jne    c0017213 <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0017207:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c001720c:	c1 e0 18             	shl    eax,0x18
c001720f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017213:	41                   	inc    ecx
c0017214:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017219:	c1 e2 10             	shl    edx,0x10
c001721c:	89 d0                	mov    eax,edx
c001721e:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0017223:	c1 e2 08             	shl    edx,0x8
c0017226:	09 c2                	or     edx,eax
c0017228:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c001722c:	09 c2                	or     edx,eax
c001722e:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0017232:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017236:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c001723a:	c1 f8 03             	sar    eax,0x3
c001723d:	01 c6                	add    esi,eax
c001723f:	89 c8                	mov    eax,ecx
c0017241:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0017245:	39 c7                	cmp    edi,eax
c0017247:	7f b0                	jg     c00171f9 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017249:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001724d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017251:	39 14 24             	cmp    DWORD PTR [esp],edx
c0017254:	7e 22                	jle    c0017278 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017256:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001725a:	eb 99                	jmp    c00171f5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c001725c:	50                   	push   eax
c001725d:	50                   	push   eax
c001725e:	52                   	push   edx
c001725f:	68 a8 bc 02 c0       	push   0xc002bca8
c0017264:	e8 12 b6 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0017269:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001726c:	e8 2b 86 ff ff       	call   c000f89c <free>
c0017271:	83 c4 10             	add    esp,0x10
c0017274:	31 ed                	xor    ebp,ebp
c0017276:	eb 0f                	jmp    c0017287 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017278:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001727c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001727f:	89 38                	mov    DWORD PTR [eax],edi
c0017281:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017285:	89 08                	mov    DWORD PTR [eax],ecx
c0017287:	83 c4 1c             	add    esp,0x1c
c001728a:	89 e8                	mov    eax,ebp
c001728c:	5b                   	pop    ebx
c001728d:	5e                   	pop    esi
c001728e:	5f                   	pop    edi
c001728f:	5d                   	pop    ebp
c0017290:	c3                   	ret    
c0017291:	90                   	nop

c0017292 <Video::putTGA(int, int, unsigned char*, int)>:
c0017292:	55                   	push   ebp
c0017293:	57                   	push   edi
c0017294:	56                   	push   esi
c0017295:	53                   	push   ebx
c0017296:	83 ec 28             	sub    esp,0x28
c0017299:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001729d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172a1:	50                   	push   eax
c00172a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00172a6:	50                   	push   eax
c00172a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00172af:	56                   	push   esi
c00172b0:	e8 5b fe ff ff       	call   c0017110 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00172b5:	83 c4 20             	add    esp,0x20
c00172b8:	85 c0                	test   eax,eax
c00172ba:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00172be:	74 35                	je     c00172f5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00172c0:	89 c7                	mov    edi,eax
c00172c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00172c6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00172ca:	39 d8                	cmp    eax,ebx
c00172cc:	7e 27                	jle    c00172f5 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00172ce:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00172d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00172d6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00172da:	39 e8                	cmp    eax,ebp
c00172dc:	7e 14                	jle    c00172f2 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00172de:	8b 06                	mov    eax,DWORD PTR [esi]
c00172e0:	83 c7 04             	add    edi,0x4
c00172e3:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00172e6:	53                   	push   ebx
c00172e7:	55                   	push   ebp
c00172e8:	45                   	inc    ebp
c00172e9:	56                   	push   esi
c00172ea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00172ed:	83 c4 10             	add    esp,0x10
c00172f0:	eb e0                	jmp    c00172d2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00172f2:	43                   	inc    ebx
c00172f3:	eb cd                	jmp    c00172c2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00172f5:	83 c4 1c             	add    esp,0x1c
c00172f8:	5b                   	pop    ebx
c00172f9:	5e                   	pop    esi
c00172fa:	5f                   	pop    edi
c00172fb:	5d                   	pop    ebp
c00172fc:	c3                   	ret    
c00172fd:	90                   	nop

c00172fe <ACPI::close(int, int, void*)>:
c00172fe:	83 ec 1c             	sub    esp,0x1c
c0017301:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017309:	74 0a                	je     c0017315 <ACPI::close(int, int, void*)+0x17>
c001730b:	b8 00 00 00 00       	mov    eax,0x0
c0017310:	e9 9a 00 00 00       	jmp    c00173af <ACPI::close(int, int, void*)+0xb1>
c0017315:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001731a:	75 37                	jne    c0017353 <ACPI::close(int, int, void*)+0x55>
c001731c:	83 ec 0c             	sub    esp,0xc
c001731f:	68 04 bd 02 c0       	push   0xc002bd04
c0017324:	e8 52 b5 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0017329:	83 c4 10             	add    esp,0x10
c001732c:	a1 e8 14 03 c0       	mov    eax,ds:0xc00314e8
c0017331:	85 c0                	test   eax,eax
c0017333:	74 07                	je     c001733c <ACPI::close(int, int, void*)+0x3e>
c0017335:	a1 e8 14 03 c0       	mov    eax,ds:0xc00314e8
c001733a:	ff d0                	call   eax
c001733c:	83 ec 0c             	sub    esp,0xc
c001733f:	68 1c be 02 c0       	push   0xc002be1c
c0017344:	e8 68 2f 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0017349:	83 c4 10             	add    esp,0x10
c001734c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017351:	eb 5c                	jmp    c00173af <ACPI::close(int, int, void*)+0xb1>
c0017353:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017358:	75 50                	jne    c00173aa <ACPI::close(int, int, void*)+0xac>
c001735a:	a1 e4 14 03 c0       	mov    eax,ds:0xc00314e4
c001735f:	85 c0                	test   eax,eax
c0017361:	74 07                	je     c001736a <ACPI::close(int, int, void*)+0x6c>
c0017363:	a1 e4 14 03 c0       	mov    eax,ds:0xc00314e4
c0017368:	ff d0                	call   eax
c001736a:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001736f:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017374:	83 e0 02             	and    eax,0x2
c0017377:	74 1c                	je     c0017395 <ACPI::close(int, int, void*)+0x97>
c0017379:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017380:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017384:	89 c2                	mov    edx,eax
c0017386:	ec                   	in     al,dx
c0017387:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001738b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001738f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017393:	eb da                	jmp    c001736f <ACPI::close(int, int, void*)+0x71>
c0017395:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c001739c:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00173a1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00173a5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00173a9:	ee                   	out    dx,al
c00173aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00173af:	83 c4 1c             	add    esp,0x1c
c00173b2:	c3                   	ret    

c00173b3 <findRSDP()>:
c00173b3:	83 ec 1c             	sub    esp,0x1c
c00173b6:	83 ec 0c             	sub    esp,0xc
c00173b9:	68 11 bd 02 c0       	push   0xc002bd11
c00173be:	e8 b8 b4 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00173c3:	83 c4 10             	add    esp,0x10
c00173c6:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00173cb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00173d1:	83 e0 04             	and    eax,0x4
c00173d4:	84 c0                	test   al,al
c00173d6:	75 07                	jne    c00173df <findRSDP()+0x2c>
c00173d8:	b8 00 00 00 00       	mov    eax,0x0
c00173dd:	eb 6a                	jmp    c0017449 <findRSDP()+0x96>
c00173df:	a1 94 ee 02 c0       	mov    eax,ds:0xc002ee94
c00173e4:	3d ff 07 00 00       	cmp    eax,0x7ff
c00173e9:	7f 1b                	jg     c0017406 <findRSDP()+0x53>
c00173eb:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00173f0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00173f6:	83 e2 fb             	and    edx,0xfffffffb
c00173f9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00173ff:	b8 00 00 00 00       	mov    eax,0x0
c0017404:	eb 43                	jmp    c0017449 <findRSDP()+0x96>
c0017406:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001740e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017416:	77 2c                	ja     c0017444 <findRSDP()+0x91>
c0017418:	83 ec 04             	sub    esp,0x4
c001741b:	6a 08                	push   0x8
c001741d:	68 1f bd 02 c0       	push   0xc002bd1f
c0017422:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017426:	e8 21 92 fe ff       	call   c000064c <memcmp>
c001742b:	83 c4 10             	add    esp,0x10
c001742e:	85 c0                	test   eax,eax
c0017430:	0f 94 c0             	sete   al
c0017433:	84 c0                	test   al,al
c0017435:	74 06                	je     c001743d <findRSDP()+0x8a>
c0017437:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001743b:	eb 0c                	jmp    c0017449 <findRSDP()+0x96>
c001743d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017442:	eb ca                	jmp    c001740e <findRSDP()+0x5b>
c0017444:	b8 00 00 00 00       	mov    eax,0x0
c0017449:	83 c4 1c             	add    esp,0x1c
c001744c:	c3                   	ret    

c001744d <loadACPITables(unsigned char*)>:
c001744d:	57                   	push   edi
c001744e:	56                   	push   esi
c001744f:	53                   	push   ebx
c0017450:	83 ec 60             	sub    esp,0x60
c0017453:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017458:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001745e:	83 e0 04             	and    eax,0x4
c0017461:	84 c0                	test   al,al
c0017463:	0f 84 33 02 00 00    	je     c001769c <loadACPITables(unsigned char*)+0x24f>
c0017469:	a0 00 17 03 c0       	mov    al,ds:0xc0031700
c001746e:	84 c0                	test   al,al
c0017470:	74 75                	je     c00174e7 <loadACPITables(unsigned char*)+0x9a>
c0017472:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017476:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001747a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001747e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017481:	83 e8 24             	sub    eax,0x24
c0017484:	c1 e8 03             	shr    eax,0x3
c0017487:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001748b:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0017493:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0017497:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001749b:	0f 8d b2 00 00 00    	jge    c0017553 <loadACPITables(unsigned char*)+0x106>
c00174a1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174a5:	83 c0 24             	add    eax,0x24
c00174a8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00174ac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00174b0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00174b4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00174b8:	c1 e0 03             	shl    eax,0x3
c00174bb:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c00174bf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00174c3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00174c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00174c8:	89 c1                	mov    ecx,eax
c00174ca:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c00174cf:	8d 50 01             	lea    edx,[eax+0x1]
c00174d2:	89 15 ec 14 03 c0    	mov    DWORD PTR ds:0xc00314ec,edx
c00174d8:	89 ca                	mov    edx,ecx
c00174da:	89 14 c5 04 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceafc],edx
c00174e1:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c00174e5:	eb ac                	jmp    c0017493 <loadACPITables(unsigned char*)+0x46>
c00174e7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00174eb:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00174ef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174f3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00174f6:	83 e8 24             	sub    eax,0x24
c00174f9:	c1 e8 02             	shr    eax,0x2
c00174fc:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017500:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0017508:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001750c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017510:	7d 41                	jge    c0017553 <loadACPITables(unsigned char*)+0x106>
c0017512:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0017516:	83 c0 24             	add    eax,0x24
c0017519:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001751d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017521:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017525:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0017529:	c1 e0 02             	shl    eax,0x2
c001752c:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017530:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017534:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017536:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c001753b:	8d 50 01             	lea    edx,[eax+0x1]
c001753e:	89 15 ec 14 03 c0    	mov    DWORD PTR ds:0xc00314ec,edx
c0017544:	89 ca                	mov    edx,ecx
c0017546:	89 14 c5 04 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceafc],edx
c001754d:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c0017551:	eb b5                	jmp    c0017508 <loadACPITables(unsigned char*)+0xbb>
c0017553:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c001755b:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0017560:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0017564:	0f 8d 33 01 00 00    	jge    c001769d <loadACPITables(unsigned char*)+0x250>
c001756a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001756e:	8b 04 c5 04 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceafc]
c0017575:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017579:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001757d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017581:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017585:	25 ff 0f 00 00       	and    eax,0xfff
c001758a:	89 c6                	mov    esi,eax
c001758c:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0017592:	83 ec 0c             	sub    esp,0xc
c0017595:	6a 01                	push   0x1
c0017597:	e8 d9 9e ff ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c001759c:	83 c4 10             	add    esp,0x10
c001759f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00175a3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00175a9:	83 ec 0c             	sub    esp,0xc
c00175ac:	6a 01                	push   0x1
c00175ae:	6a 01                	push   0x1
c00175b0:	50                   	push   eax
c00175b1:	52                   	push   edx
c00175b2:	53                   	push   ebx
c00175b3:	e8 ea a9 ff ff       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00175b8:	83 c4 20             	add    esp,0x20
c00175bb:	09 f0                	or     eax,esi
c00175bd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175c1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00175c5:	c1 e0 03             	shl    eax,0x3
c00175c8:	05 00 15 03 c0       	add    eax,0xc0031500
c00175cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00175d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175d5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00175d9:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c00175e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00175e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00175f1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00175f5:	89 c6                	mov    esi,eax
c00175f7:	89 d7                	mov    edi,edx
c00175f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00175fb:	89 c8                	mov    eax,ecx
c00175fd:	89 fa                	mov    edx,edi
c00175ff:	89 f3                	mov    ebx,esi
c0017601:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0017605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017609:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001760d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017611:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017614:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017618:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001761c:	05 00 10 00 00       	add    eax,0x1000
c0017621:	c1 e8 0c             	shr    eax,0xc
c0017624:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017628:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001762c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017630:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017634:	25 ff 0f 00 00       	and    eax,0xfff
c0017639:	89 c6                	mov    esi,eax
c001763b:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c0017641:	83 ec 0c             	sub    esp,0xc
c0017644:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017648:	e8 28 9e ff ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017654:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001765a:	83 ec 0c             	sub    esp,0xc
c001765d:	6a 01                	push   0x1
c001765f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017663:	50                   	push   eax
c0017664:	52                   	push   edx
c0017665:	53                   	push   ebx
c0017666:	e8 37 a9 ff ff       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001766b:	83 c4 20             	add    esp,0x20
c001766e:	09 f0                	or     eax,esi
c0017670:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017678:	83 ec 0c             	sub    esp,0xc
c001767b:	50                   	push   eax
c001767c:	e8 b4 a2 ff ff       	call   c0011935 <Virt::freeKernelVirtualPages(unsigned long)>
c0017681:	83 c4 10             	add    esp,0x10
c0017684:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0017688:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001768c:	89 14 c5 04 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceafc],edx
c0017693:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0017697:	e9 bf fe ff ff       	jmp    c001755b <loadACPITables(unsigned char*)+0x10e>
c001769c:	90                   	nop
c001769d:	83 c4 60             	add    esp,0x60
c00176a0:	5b                   	pop    ebx
c00176a1:	5e                   	pop    esi
c00176a2:	5f                   	pop    edi
c00176a3:	c3                   	ret    

c00176a4 <findRSDT(unsigned char*)>:
c00176a4:	57                   	push   edi
c00176a5:	56                   	push   esi
c00176a6:	53                   	push   ebx
c00176a7:	83 ec 50             	sub    esp,0x50
c00176aa:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00176af:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00176b5:	83 e0 04             	and    eax,0x4
c00176b8:	84 c0                	test   al,al
c00176ba:	75 0a                	jne    c00176c6 <findRSDT(unsigned char*)+0x22>
c00176bc:	b8 00 00 00 00       	mov    eax,0x0
c00176c1:	e9 21 01 00 00       	jmp    c00177e7 <findRSDT(unsigned char*)+0x143>
c00176c6:	89 e0                	mov    eax,esp
c00176c8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00176cc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00176d0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00176d4:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c00176dc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00176e0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00176e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00176e8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00176ec:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00176f0:	89 c6                	mov    esi,eax
c00176f2:	89 d7                	mov    edi,edx
c00176f4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00176f6:	89 c8                	mov    eax,ecx
c00176f8:	89 fa                	mov    edx,edi
c00176fa:	89 f3                	mov    ebx,esi
c00176fc:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0017700:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0017704:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017708:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001770c:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017710:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001771c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017720:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017728:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001772c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017730:	25 ff 0f 00 00       	and    eax,0xfff
c0017735:	89 c6                	mov    esi,eax
c0017737:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c001773d:	83 ec 0c             	sub    esp,0xc
c0017740:	6a 02                	push   0x2
c0017742:	e8 2e 9d ff ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c0017747:	83 c4 10             	add    esp,0x10
c001774a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001774e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017754:	83 ec 0c             	sub    esp,0xc
c0017757:	6a 01                	push   0x1
c0017759:	6a 02                	push   0x2
c001775b:	50                   	push   eax
c001775c:	52                   	push   edx
c001775d:	53                   	push   ebx
c001775e:	e8 3f a8 ff ff       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017763:	83 c4 20             	add    esp,0x20
c0017766:	09 f0                	or     eax,esi
c0017768:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001776c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017770:	25 ff 0f 00 00       	and    eax,0xfff
c0017775:	89 c6                	mov    esi,eax
c0017777:	8b 1d b0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb0
c001777d:	83 ec 0c             	sub    esp,0xc
c0017780:	6a 02                	push   0x2
c0017782:	e8 ee 9c ff ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c0017787:	83 c4 10             	add    esp,0x10
c001778a:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001778e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017794:	83 ec 0c             	sub    esp,0xc
c0017797:	6a 01                	push   0x1
c0017799:	6a 02                	push   0x2
c001779b:	50                   	push   eax
c001779c:	52                   	push   edx
c001779d:	53                   	push   ebx
c001779e:	e8 ff a7 ff ff       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00177a3:	83 c4 20             	add    esp,0x20
c00177a6:	09 f0                	or     eax,esi
c00177a8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00177ac:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00177b1:	75 11                	jne    c00177c4 <findRSDT(unsigned char*)+0x120>
c00177b3:	c6 05 00 17 03 c0 00 	mov    BYTE PTR ds:0xc0031700,0x0
c00177ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00177be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00177c2:	eb 1f                	jmp    c00177e3 <findRSDT(unsigned char*)+0x13f>
c00177c4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00177c9:	75 11                	jne    c00177dc <findRSDT(unsigned char*)+0x138>
c00177cb:	c6 05 00 17 03 c0 01 	mov    BYTE PTR ds:0xc0031700,0x1
c00177d2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00177d6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00177da:	eb 07                	jmp    c00177e3 <findRSDT(unsigned char*)+0x13f>
c00177dc:	b8 00 00 00 00       	mov    eax,0x0
c00177e1:	eb 04                	jmp    c00177e7 <findRSDT(unsigned char*)+0x143>
c00177e3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00177e7:	83 c4 50             	add    esp,0x50
c00177ea:	5b                   	pop    ebx
c00177eb:	5e                   	pop    esi
c00177ec:	5f                   	pop    edi
c00177ed:	c3                   	ret    

c00177ee <findDataTable(unsigned char*, char*)>:
c00177ee:	83 ec 1c             	sub    esp,0x1c
c00177f1:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00177f6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177fc:	83 e0 04             	and    eax,0x4
c00177ff:	84 c0                	test   al,al
c0017801:	75 07                	jne    c001780a <findDataTable(unsigned char*, char*)+0x1c>
c0017803:	b8 00 00 00 00       	mov    eax,0x0
c0017808:	eb 7c                	jmp    c0017886 <findDataTable(unsigned char*, char*)+0x98>
c001780a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017812:	a1 ec 14 03 c0       	mov    eax,ds:0xc00314ec
c0017817:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001781b:	7d 3a                	jge    c0017857 <findDataTable(unsigned char*, char*)+0x69>
c001781d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017821:	c1 e0 03             	shl    eax,0x3
c0017824:	05 00 15 03 c0       	add    eax,0xc0031500
c0017829:	83 ec 04             	sub    esp,0x4
c001782c:	6a 04                	push   0x4
c001782e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017832:	50                   	push   eax
c0017833:	e8 14 8e fe ff       	call   c000064c <memcmp>
c0017838:	83 c4 10             	add    esp,0x10
c001783b:	85 c0                	test   eax,eax
c001783d:	0f 94 c0             	sete   al
c0017840:	84 c0                	test   al,al
c0017842:	74 0d                	je     c0017851 <findDataTable(unsigned char*, char*)+0x63>
c0017844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017848:	8b 04 c5 04 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceafc]
c001784f:	eb 35                	jmp    c0017886 <findDataTable(unsigned char*, char*)+0x98>
c0017851:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017855:	eb bb                	jmp    c0017812 <findDataTable(unsigned char*, char*)+0x24>
c0017857:	a0 00 17 03 c0       	mov    al,ds:0xc0031700
c001785c:	84 c0                	test   al,al
c001785e:	74 07                	je     c0017867 <findDataTable(unsigned char*, char*)+0x79>
c0017860:	b8 58 00 00 00       	mov    eax,0x58
c0017865:	eb 05                	jmp    c001786c <findDataTable(unsigned char*, char*)+0x7e>
c0017867:	b8 52 00 00 00       	mov    eax,0x52
c001786c:	83 ec 04             	sub    esp,0x4
c001786f:	50                   	push   eax
c0017870:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017874:	68 40 be 02 c0       	push   0xc002be40
c0017879:	e8 fd af ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001787e:	83 c4 10             	add    esp,0x10
c0017881:	b8 00 00 00 00       	mov    eax,0x0
c0017886:	83 c4 1c             	add    esp,0x1c
c0017889:	c3                   	ret    

c001788a <scanMADT()>:
c001788a:	53                   	push   ebx
c001788b:	83 ec 38             	sub    esp,0x38
c001788e:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017893:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017899:	83 e0 04             	and    eax,0x4
c001789c:	84 c0                	test   al,al
c001789e:	0f 84 63 04 00 00    	je     c0017d07 <scanMADT()+0x47d>
c00178a4:	e8 0a fb ff ff       	call   c00173b3 <findRSDP()>
c00178a9:	a3 0c 17 03 c0       	mov    ds:0xc003170c,eax
c00178ae:	a1 0c 17 03 c0       	mov    eax,ds:0xc003170c
c00178b3:	85 c0                	test   eax,eax
c00178b5:	75 19                	jne    c00178d0 <scanMADT()+0x46>
c00178b7:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00178bc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178c2:	83 e2 fb             	and    edx,0xfffffffb
c00178c5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00178cb:	e9 3b 04 00 00       	jmp    c0017d0b <scanMADT()+0x481>
c00178d0:	a1 0c 17 03 c0       	mov    eax,ds:0xc003170c
c00178d5:	83 ec 0c             	sub    esp,0xc
c00178d8:	50                   	push   eax
c00178d9:	e8 c6 fd ff ff       	call   c00176a4 <findRSDT(unsigned char*)>
c00178de:	83 c4 10             	add    esp,0x10
c00178e1:	a3 08 17 03 c0       	mov    ds:0xc0031708,eax
c00178e6:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c00178eb:	85 c0                	test   eax,eax
c00178ed:	75 19                	jne    c0017908 <scanMADT()+0x7e>
c00178ef:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00178f4:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00178fa:	83 e2 fb             	and    edx,0xfffffffb
c00178fd:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017903:	e9 03 04 00 00       	jmp    c0017d0b <scanMADT()+0x481>
c0017908:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c001790d:	83 ec 0c             	sub    esp,0xc
c0017910:	50                   	push   eax
c0017911:	e8 37 fb ff ff       	call   c001744d <loadACPITables(unsigned char*)>
c0017916:	83 c4 10             	add    esp,0x10
c0017919:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c001791e:	83 ec 08             	sub    esp,0x8
c0017921:	68 28 bd 02 c0       	push   0xc002bd28
c0017926:	50                   	push   eax
c0017927:	e8 c2 fe ff ff       	call   c00177ee <findDataTable(unsigned char*, char*)>
c001792c:	83 c4 10             	add    esp,0x10
c001792f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017933:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017938:	75 19                	jne    c0017953 <scanMADT()+0xc9>
c001793a:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001793f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017945:	83 e2 fe             	and    edx,0xfffffffe
c0017948:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001794e:	e9 b8 03 00 00       	jmp    c0017d0b <scanMADT()+0x481>
c0017953:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001795b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001795f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017962:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017966:	0f 87 9f 03 00 00    	ja     c0017d0b <scanMADT()+0x481>
c001796c:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017974:	0f 87 91 03 00 00    	ja     c0017d0b <scanMADT()+0x481>
c001797a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001797e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017982:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017986:	8d 50 01             	lea    edx,[eax+0x1]
c0017989:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001798d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017991:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017995:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017999:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001799d:	8d 50 01             	lea    edx,[eax+0x1]
c00179a0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00179a8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00179ac:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00179b0:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c00179b5:	0f 86 4f 03 00 00    	jbe    c0017d0a <scanMADT()+0x480>
c00179bb:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c00179c0:	75 57                	jne    c0017a19 <scanMADT()+0x18f>
c00179c2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179c6:	8d 50 01             	lea    edx,[eax+0x1]
c00179c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179cd:	8a 15 00 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031900
c00179d3:	0f b6 d2             	movzx  edx,dl
c00179d6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00179da:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00179de:	88 82 40 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6c0],al
c00179e4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00179e8:	8d 50 01             	lea    edx,[eax+0x1]
c00179eb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00179ef:	8a 15 00 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031900
c00179f5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00179f8:	88 0d 00 19 03 c0    	mov    BYTE PTR ds:0xc0031900,cl
c00179fe:	0f b6 d2             	movzx  edx,dl
c0017a01:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a05:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a09:	88 82 20 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6e0],al
c0017a0f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017a14:	e9 da 02 00 00       	jmp    c0017cf3 <scanMADT()+0x469>
c0017a19:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017a1e:	0f 85 14 01 00 00    	jne    c0017b38 <scanMADT()+0x2ae>
c0017a24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a28:	8d 50 01             	lea    edx,[eax+0x1]
c0017a2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a2f:	8a 15 c0 17 03 c0    	mov    dl,BYTE PTR ds:0xc00317c0
c0017a35:	0f b6 d2             	movzx  edx,dl
c0017a38:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a3c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017a40:	88 82 e0 17 03 c0    	mov    BYTE PTR [edx-0x3ffce820],al
c0017a46:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017a4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a52:	01 d0                	add    eax,edx
c0017a54:	83 c0 2c             	add    eax,0x2c
c0017a57:	8a 00                	mov    al,BYTE PTR [eax]
c0017a59:	0f b6 d0             	movzx  edx,al
c0017a5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a60:	8d 48 01             	lea    ecx,[eax+0x1]
c0017a63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a67:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017a6b:	0f b6 c0             	movzx  eax,al
c0017a6e:	c1 e0 08             	shl    eax,0x8
c0017a71:	89 d1                	mov    ecx,edx
c0017a73:	09 c1                	or     ecx,eax
c0017a75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a79:	8d 50 02             	lea    edx,[eax+0x2]
c0017a7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a80:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a84:	0f b6 c0             	movzx  eax,al
c0017a87:	c1 e0 10             	shl    eax,0x10
c0017a8a:	09 c1                	or     ecx,eax
c0017a8c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a90:	8d 50 03             	lea    edx,[eax+0x3]
c0017a93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a97:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017a9b:	0f b6 c0             	movzx  eax,al
c0017a9e:	c1 e0 18             	shl    eax,0x18
c0017aa1:	09 c1                	or     ecx,eax
c0017aa3:	89 ca                	mov    edx,ecx
c0017aa5:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c0017aaa:	0f b6 c0             	movzx  eax,al
c0017aad:	89 14 85 00 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce800],edx
c0017ab4:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ab9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017abd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ac1:	01 d0                	add    eax,edx
c0017ac3:	83 c0 2c             	add    eax,0x2c
c0017ac6:	8a 00                	mov    al,BYTE PTR [eax]
c0017ac8:	0f b6 d0             	movzx  edx,al
c0017acb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017acf:	8d 48 01             	lea    ecx,[eax+0x1]
c0017ad2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ada:	0f b6 c0             	movzx  eax,al
c0017add:	c1 e0 08             	shl    eax,0x8
c0017ae0:	89 d1                	mov    ecx,edx
c0017ae2:	09 c1                	or     ecx,eax
c0017ae4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ae8:	8d 50 02             	lea    edx,[eax+0x2]
c0017aeb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aef:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017af3:	0f b6 c0             	movzx  eax,al
c0017af6:	c1 e0 10             	shl    eax,0x10
c0017af9:	09 c1                	or     ecx,eax
c0017afb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017aff:	8d 50 03             	lea    edx,[eax+0x3]
c0017b02:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b06:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b0a:	0f b6 c0             	movzx  eax,al
c0017b0d:	c1 e0 18             	shl    eax,0x18
c0017b10:	09 c1                	or     ecx,eax
c0017b12:	89 ca                	mov    edx,ecx
c0017b14:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c0017b19:	0f b6 c0             	movzx  eax,al
c0017b1c:	89 14 85 80 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce780],edx
c0017b23:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b28:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c0017b2d:	40                   	inc    eax
c0017b2e:	a2 c0 17 03 c0       	mov    ds:0xc00317c0,al
c0017b33:	e9 bb 01 00 00       	jmp    c0017cf3 <scanMADT()+0x469>
c0017b38:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017b3d:	0f 85 e9 00 00 00    	jne    c0017c2c <scanMADT()+0x3a2>
c0017b43:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b47:	8d 50 01             	lea    edx,[eax+0x1]
c0017b4a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b4e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b52:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b56:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017b5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b5e:	8d 50 01             	lea    edx,[eax+0x1]
c0017b61:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017b65:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b69:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017b6d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017b71:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b79:	01 d0                	add    eax,edx
c0017b7b:	83 c0 2c             	add    eax,0x2c
c0017b7e:	8a 00                	mov    al,BYTE PTR [eax]
c0017b80:	0f b6 d0             	movzx  edx,al
c0017b83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b87:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b8e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b92:	0f b6 c0             	movzx  eax,al
c0017b95:	c1 e0 08             	shl    eax,0x8
c0017b98:	89 d1                	mov    ecx,edx
c0017b9a:	09 c1                	or     ecx,eax
c0017b9c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ba0:	8d 50 02             	lea    edx,[eax+0x2]
c0017ba3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ba7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bab:	0f b6 c0             	movzx  eax,al
c0017bae:	c1 e0 10             	shl    eax,0x10
c0017bb1:	09 c1                	or     ecx,eax
c0017bb3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb7:	8d 50 03             	lea    edx,[eax+0x3]
c0017bba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bbe:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bc2:	0f b6 c0             	movzx  eax,al
c0017bc5:	c1 e0 18             	shl    eax,0x18
c0017bc8:	09 c8                	or     eax,ecx
c0017bca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017bce:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017bd3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bdb:	01 d0                	add    eax,edx
c0017bdd:	83 c0 2c             	add    eax,0x2c
c0017be0:	8a 00                	mov    al,BYTE PTR [eax]
c0017be2:	0f b6 c0             	movzx  eax,al
c0017be5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017be9:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017bec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017bf0:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017bf4:	0f b6 d2             	movzx  edx,dl
c0017bf7:	c1 e2 08             	shl    edx,0x8
c0017bfa:	09 d0                	or     eax,edx
c0017bfc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017c01:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c06:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017c0b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c0f:	88 90 a0 e0 02 c0    	mov    BYTE PTR [eax-0x3ffd1f60],dl
c0017c15:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017c1a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017c1f:	66 89 84 12 a0 17 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce860],ax
c0017c27:	e9 c7 00 00 00       	jmp    c0017cf3 <scanMADT()+0x469>
c0017c2c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017c31:	0f 85 b0 00 00 00    	jne    c0017ce7 <scanMADT()+0x45d>
c0017c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c3b:	8d 50 01             	lea    edx,[eax+0x1]
c0017c3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c42:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c46:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c4a:	0f b6 c0             	movzx  eax,al
c0017c4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017c51:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c55:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c59:	01 d0                	add    eax,edx
c0017c5b:	83 c0 2c             	add    eax,0x2c
c0017c5e:	8a 00                	mov    al,BYTE PTR [eax]
c0017c60:	0f b6 d0             	movzx  edx,al
c0017c63:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c67:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c6a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c6e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c72:	0f b6 c0             	movzx  eax,al
c0017c75:	c1 e0 08             	shl    eax,0x8
c0017c78:	09 d0                	or     eax,edx
c0017c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c7e:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017c83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c87:	8d 50 01             	lea    edx,[eax+0x1]
c0017c8a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c8e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c92:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c96:	0f b6 c0             	movzx  eax,al
c0017c99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ca1:	c1 e0 08             	shl    eax,0x8
c0017ca4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017ca8:	89 c1                	mov    ecx,eax
c0017caa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cae:	c1 e0 18             	shl    eax,0x18
c0017cb1:	89 c3                	mov    ebx,eax
c0017cb3:	a1 10 17 03 c0       	mov    eax,ds:0xc0031710
c0017cb8:	8d 50 01             	lea    edx,[eax+0x1]
c0017cbb:	89 15 10 17 03 c0    	mov    DWORD PTR ds:0xc0031710,edx
c0017cc1:	09 d9                	or     ecx,ebx
c0017cc3:	89 ca                	mov    edx,ecx
c0017cc5:	89 14 85 20 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8e0],edx
c0017ccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cd8:	68 70 be 02 c0       	push   0xc002be70
c0017cdd:	e8 99 ab ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0017ce2:	83 c4 10             	add    esp,0x10
c0017ce5:	eb 0c                	jmp    c0017cf3 <scanMADT()+0x469>
c0017ce7:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017cec:	75 05                	jne    c0017cf3 <scanMADT()+0x469>
c0017cee:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017cf3:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017cf8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cfc:	01 d0                	add    eax,edx
c0017cfe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d02:	e9 54 fc ff ff       	jmp    c001795b <scanMADT()+0xd1>
c0017d07:	90                   	nop
c0017d08:	eb 01                	jmp    c0017d0b <scanMADT()+0x481>
c0017d0a:	90                   	nop
c0017d0b:	83 c4 38             	add    esp,0x38
c0017d0e:	5b                   	pop    ebx
c0017d0f:	c3                   	ret    

c0017d10 <ACPI::ACPI()>:
c0017d10:	83 ec 0c             	sub    esp,0xc
c0017d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d17:	83 ec 08             	sub    esp,0x8
c0017d1a:	68 2d bd 02 c0       	push   0xc002bd2d
c0017d1f:	50                   	push   eax
c0017d20:	e8 93 c1 ff ff       	call   c0013eb8 <Device::Device(char const*)>
c0017d25:	83 c4 10             	add    esp,0x10
c0017d28:	ba 0c bf 02 c0       	mov    edx,0xc002bf0c
c0017d2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d31:	89 10                	mov    DWORD PTR [eax],edx
c0017d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d37:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d42:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d50:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017d5a:	e8 2b fb ff ff       	call   c001788a <scanMADT()>
c0017d5f:	90                   	nop
c0017d60:	83 c4 0c             	add    esp,0xc
c0017d63:	c3                   	ret    

c0017d64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017d64:	83 ec 2c             	sub    esp,0x2c
c0017d67:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017d6b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d6f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d73:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017d77:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017d7c:	88 d0                	mov    al,dl
c0017d7e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017d82:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017d87:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017d8f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d93:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017d99:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017d9d:	0f 8d 97 00 00 00    	jge    c0017e3a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017da3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017da7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dab:	83 c2 2a             	add    edx,0x2a
c0017dae:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017db2:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017db7:	75 78                	jne    c0017e31 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017db9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017dbd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017dc1:	83 c2 2a             	add    edx,0x2a
c0017dc4:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017dc8:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017dcc:	75 63                	jne    c0017e31 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017dce:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017dd3:	74 3a                	je     c0017e0f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017dd5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017dd9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ddd:	83 c2 2a             	add    edx,0x2a
c0017de0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017de4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017de8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017deb:	39 c2                	cmp    edx,eax
c0017ded:	74 10                	je     c0017dff <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017def:	83 ec 0c             	sub    esp,0xc
c0017df2:	68 ac be 02 c0       	push   0xc002beac
c0017df7:	e8 b5 24 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0017dfc:	83 c4 10             	add    esp,0x10
c0017dff:	83 ec 0c             	sub    esp,0xc
c0017e02:	68 32 bd 02 c0       	push   0xc002bd32
c0017e07:	e8 a5 24 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0017e0c:	83 c4 10             	add    esp,0x10
c0017e0f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017e13:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e17:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e1b:	83 c2 2a             	add    edx,0x2a
c0017e1e:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017e22:	8b 02                	mov    eax,DWORD PTR [edx]
c0017e24:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017e27:	89 01                	mov    DWORD PTR [ecx],eax
c0017e29:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017e2c:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017e31:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017e35:	e9 55 ff ff ff       	jmp    c0017d8f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017e3a:	90                   	nop
c0017e3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017e3f:	83 c4 2c             	add    esp,0x2c
c0017e42:	c2 04 00             	ret    0x4
c0017e45:	90                   	nop

c0017e46 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017e46:	83 ec 1c             	sub    esp,0x1c
c0017e49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017e4d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017e51:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017e55:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017e5a:	88 c8                	mov    al,cl
c0017e5c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017e60:	88 d0                	mov    al,dl
c0017e62:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e6a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017e70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e74:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017e77:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017e7b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017e7f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e83:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e89:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017e8d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017e90:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017e94:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e9d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ea3:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017ea7:	8d 48 01             	lea    ecx,[eax+0x1]
c0017eaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eae:	83 c2 2a             	add    edx,0x2a
c0017eb1:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017eb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017eb9:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017ebf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ec3:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017ec6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017eca:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ed2:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017ed8:	8d 50 01             	lea    edx,[eax+0x1]
c0017edb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017edf:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017ee5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ee9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017eef:	3d 00 02 00 00       	cmp    eax,0x200
c0017ef4:	75 10                	jne    c0017f06 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017ef6:	83 ec 0c             	sub    esp,0xc
c0017ef9:	68 41 bd 02 c0       	push   0xc002bd41
c0017efe:	e8 ae 23 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0017f03:	83 c4 10             	add    esp,0x10
c0017f06:	90                   	nop
c0017f07:	83 c4 1c             	add    esp,0x1c
c0017f0a:	c3                   	ret    
c0017f0b:	90                   	nop

c0017f0c <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017f0c:	b8 00 00 00 00       	mov    eax,0x0
c0017f11:	c3                   	ret    

c0017f12 <ACPI::detectPCI()>:
c0017f12:	53                   	push   ebx
c0017f13:	83 ec 28             	sub    esp,0x28
c0017f16:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017f1b:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c0017f20:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017f25:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017f2b:	83 e0 04             	and    eax,0x4
c0017f2e:	84 c0                	test   al,al
c0017f30:	74 2b                	je     c0017f5d <ACPI::detectPCI()+0x4b>
c0017f32:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c0017f37:	83 ec 08             	sub    esp,0x8
c0017f3a:	68 5e bd 02 c0       	push   0xc002bd5e
c0017f3f:	50                   	push   eax
c0017f40:	e8 a9 f8 ff ff       	call   c00177ee <findDataTable(unsigned char*, char*)>
c0017f45:	83 c4 10             	add    esp,0x10
c0017f48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f4c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017f51:	74 0a                	je     c0017f5d <ACPI::detectPCI()+0x4b>
c0017f53:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f58:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017f5d:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c0017f65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f69:	8a 00                	mov    al,BYTE PTR [eax]
c0017f6b:	3c 01                	cmp    al,0x1
c0017f6d:	75 0c                	jne    c0017f7b <ACPI::detectPCI()+0x69>
c0017f6f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f74:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017f79:	eb 26                	jmp    c0017fa1 <ACPI::detectPCI()+0x8f>
c0017f7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017f7f:	8a 00                	mov    al,BYTE PTR [eax]
c0017f81:	3c 02                	cmp    al,0x2
c0017f83:	75 1c                	jne    c0017fa1 <ACPI::detectPCI()+0x8f>
c0017f85:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f8a:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017f8f:	74 10                	je     c0017fa1 <ACPI::detectPCI()+0x8f>
c0017f91:	83 ec 0c             	sub    esp,0xc
c0017f94:	68 dc be 02 c0       	push   0xc002bedc
c0017f99:	e8 13 23 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0017f9e:	83 c4 10             	add    esp,0x10
c0017fa1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017fa5:	83 f0 01             	xor    eax,0x1
c0017fa8:	84 c0                	test   al,al
c0017faa:	74 3f                	je     c0017feb <ACPI::detectPCI()+0xd9>
c0017fac:	e8 9f 81 fe ff       	call   c0000150 <manualPCIProbe>
c0017fb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017fb5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017fba:	75 0c                	jne    c0017fc8 <ACPI::detectPCI()+0xb6>
c0017fbc:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fc1:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0017fc6:	eb 23                	jmp    c0017feb <ACPI::detectPCI()+0xd9>
c0017fc8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0017fcd:	75 1c                	jne    c0017feb <ACPI::detectPCI()+0xd9>
c0017fcf:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017fd4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0017fd9:	74 10                	je     c0017feb <ACPI::detectPCI()+0xd9>
c0017fdb:	83 ec 0c             	sub    esp,0xc
c0017fde:	68 dc be 02 c0       	push   0xc002bedc
c0017fe3:	e8 c9 22 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c0017fe8:	83 c4 10             	add    esp,0x10
c0017feb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017ff0:	74 0d                	je     c0017fff <ACPI::detectPCI()+0xed>
c0017ff2:	8a 44 24 1e          	mov    al,BYTE PTR [esp+0x1e]
c0017ff6:	83 f0 01             	xor    eax,0x1
c0017ff9:	0f b6 c0             	movzx  eax,al
c0017ffc:	40                   	inc    eax
c0017ffd:	eb 05                	jmp    c0018004 <ACPI::detectPCI()+0xf2>
c0017fff:	b8 00 00 00 00       	mov    eax,0x0
c0018004:	83 ec 08             	sub    esp,0x8
c0018007:	50                   	push   eax
c0018008:	68 63 bd 02 c0       	push   0xc002bd63
c001800d:	e8 69 a8 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018012:	83 c4 10             	add    esp,0x10
c0018015:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001801a:	74 69                	je     c0018085 <ACPI::detectPCI()+0x173>
c001801c:	c7 44 24 08 5c 01 00 00 	mov    DWORD PTR [esp+0x8],0x15c
c0018024:	83 ec 0c             	sub    esp,0xc
c0018027:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001802b:	e8 5c 78 ff ff       	call   c000f88c <malloc>
c0018030:	83 c4 10             	add    esp,0x10
c0018033:	89 c3                	mov    ebx,eax
c0018035:	83 ec 0c             	sub    esp,0xc
c0018038:	53                   	push   ebx
c0018039:	e8 0e ac 00 00       	call   c0022c4c <PCI::PCI()>
c001803e:	83 c4 10             	add    esp,0x10
c0018041:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018045:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018049:	83 ec 08             	sub    esp,0x8
c001804c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018050:	50                   	push   eax
c0018051:	e8 5e bc ff ff       	call   c0013cb4 <Device::addChild(Device*)>
c0018056:	83 c4 10             	add    esp,0x10
c0018059:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001805d:	8b 00                	mov    eax,DWORD PTR [eax]
c001805f:	83 c0 08             	add    eax,0x8
c0018062:	8b 00                	mov    eax,DWORD PTR [eax]
c0018064:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c0018069:	74 07                	je     c0018072 <ACPI::detectPCI()+0x160>
c001806b:	ba 01 00 00 00       	mov    edx,0x1
c0018070:	eb 05                	jmp    c0018077 <ACPI::detectPCI()+0x165>
c0018072:	ba 02 00 00 00       	mov    edx,0x2
c0018077:	6a 00                	push   0x0
c0018079:	6a 00                	push   0x0
c001807b:	52                   	push   edx
c001807c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018080:	ff d0                	call   eax
c0018082:	83 c4 10             	add    esp,0x10
c0018085:	90                   	nop
c0018086:	83 c4 28             	add    esp,0x28
c0018089:	5b                   	pop    ebx
c001808a:	c3                   	ret    
c001808b:	90                   	nop

c001808c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001808c:	83 ec 1c             	sub    esp,0x1c
c001808f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018093:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0018096:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001809a:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001809f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00180a4:	83 ec 08             	sub    esp,0x8
c00180a7:	52                   	push   edx
c00180a8:	50                   	push   eax
c00180a9:	e8 f4 6d ff ff       	call   c000eea2 <Computer::readCMOS(unsigned char)>
c00180ae:	83 c4 10             	add    esp,0x10
c00180b1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00180b5:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00180ba:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00180bf:	83 ec 04             	sub    esp,0x4
c00180c2:	6a 01                	push   0x1
c00180c4:	52                   	push   edx
c00180c5:	50                   	push   eax
c00180c6:	e8 ed 6e ff ff       	call   c000efb8 <Computer::writeCMOS(unsigned char, unsigned char)>
c00180cb:	83 c4 10             	add    esp,0x10
c00180ce:	90                   	nop
c00180cf:	83 c4 1c             	add    esp,0x1c
c00180d2:	c3                   	ret    
c00180d3:	90                   	nop

c00180d4 <ACPI::sleep()>:
c00180d4:	83 ec 0c             	sub    esp,0xc
c00180d7:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c00180dc:	85 c0                	test   eax,eax
c00180de:	74 07                	je     c00180e7 <ACPI::sleep()+0x13>
c00180e0:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c00180e5:	ff d0                	call   eax
c00180e7:	90                   	nop
c00180e8:	83 c4 0c             	add    esp,0xc
c00180eb:	c3                   	ret    

c00180ec <ACPI::open(int, int, void*)>:
c00180ec:	57                   	push   edi
c00180ed:	56                   	push   esi
c00180ee:	53                   	push   ebx
c00180ef:	81 ec 60 01 00 00    	sub    esp,0x160
c00180f5:	83 ec 0c             	sub    esp,0xc
c00180f8:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c00180ff:	e8 0e fe ff ff       	call   c0017f12 <ACPI::detectPCI()>
c0018104:	83 c4 10             	add    esp,0x10
c0018107:	83 ec 0c             	sub    esp,0xc
c001810a:	68 6c bd 02 c0       	push   0xc002bd6c
c001810f:	e8 fa 4a 00 00       	call   c001cc0e <Thr::loadKernelSymbolTable(char const*)>
c0018114:	83 c4 10             	add    esp,0x10
c0018117:	83 ec 04             	sub    esp,0x4
c001811a:	6a 0c                	push   0xc
c001811c:	68 8a bd 02 c0       	push   0xc002bd8a
c0018121:	68 9b bd 02 c0       	push   0xc002bd9b
c0018126:	e8 3c 2f 00 00       	call   c001b067 <Reg::readIntWithDefault(char*, char*, int)>
c001812b:	83 c4 10             	add    esp,0x10
c001812e:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0018135:	83 ec 0c             	sub    esp,0xc
c0018138:	ff b4 24 68 01 00 00 	push   DWORD PTR [esp+0x168]
c001813f:	e8 6f 95 ff ff       	call   c00116b3 <Virt::setupPageSwapping(int)>
c0018144:	83 c4 10             	add    esp,0x10
c0018147:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c001814d:	83 ec 08             	sub    esp,0x8
c0018150:	6a 01                	push   0x1
c0018152:	68 a2 bd 02 c0       	push   0xc002bda2
c0018157:	e8 29 55 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c001815c:	83 c4 10             	add    esp,0x10
c001815f:	83 ec 08             	sub    esp,0x8
c0018162:	53                   	push   ebx
c0018163:	50                   	push   eax
c0018164:	e8 47 57 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c0018169:	83 c4 10             	add    esp,0x10
c001816c:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0018173:	83 ec 08             	sub    esp,0x8
c0018176:	6a 12                	push   0x12
c0018178:	50                   	push   eax
c0018179:	e8 ba be ff ff       	call   c0014038 <getDevicesOfType(DeviceType)>
c001817e:	83 c4 0c             	add    esp,0xc
c0018181:	83 ec 0c             	sub    esp,0xc
c0018184:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001818b:	50                   	push   eax
c001818c:	e8 8f 12 01 00       	call   c0029420 <LinkedList<Device>::isEmpty()>
c0018191:	83 c4 10             	add    esp,0x10
c0018194:	83 f0 01             	xor    eax,0x1
c0018197:	84 c0                	test   al,al
c0018199:	0f 84 43 01 00 00    	je     c00182e2 <ACPI::open(int, int, void*)+0x1f6>
c001819f:	83 ec 0c             	sub    esp,0xc
c00181a2:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181a9:	50                   	push   eax
c00181aa:	e8 8d 12 01 00       	call   c002943c <LinkedList<Device>::getFirstElement()>
c00181af:	83 c4 10             	add    esp,0x10
c00181b2:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00181b9:	83 ec 0c             	sub    esp,0xc
c00181bc:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00181c3:	50                   	push   eax
c00181c4:	e8 7b 12 01 00       	call   c0029444 <LinkedList<Device>::removeFirst()>
c00181c9:	83 c4 10             	add    esp,0x10
c00181cc:	8b 84 24 58 01 00 00 	mov    eax,DWORD PTR [esp+0x158]
c00181d3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c00181da:	8b 94 24 54 01 00 00 	mov    edx,DWORD PTR [esp+0x154]
c00181e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181e5:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00181eb:	ba 09 00 00 00       	mov    edx,0x9
c00181f0:	fc                   	cld    
c00181f1:	89 c7                	mov    edi,eax
c00181f3:	89 de                	mov    esi,ebx
c00181f5:	89 d1                	mov    ecx,edx
c00181f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00181f9:	83 ec 08             	sub    esp,0x8
c00181fc:	8d 44 24 38          	lea    eax,[esp+0x38]
c0018200:	50                   	push   eax
c0018201:	83 ec 24             	sub    esp,0x24
c0018204:	89 e0                	mov    eax,esp
c0018206:	89 c3                	mov    ebx,eax
c0018208:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001820c:	ba 09 00 00 00       	mov    edx,0x9
c0018211:	89 df                	mov    edi,ebx
c0018213:	89 c6                	mov    esi,eax
c0018215:	89 d1                	mov    ecx,edx
c0018217:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018219:	e8 2e af 00 00       	call   c002314c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c001821e:	83 c4 30             	add    esp,0x30
c0018221:	89 84 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],eax
c0018228:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0018230:	0f 84 4b ff ff ff    	je     c0018181 <ACPI::open(int, int, void*)+0x95>
c0018236:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0018241:	83 ec 0c             	sub    esp,0xc
c0018244:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001824b:	e8 3c 76 ff ff       	call   c000f88c <malloc>
c0018250:	83 c4 10             	add    esp,0x10
c0018253:	89 c3                	mov    ebx,eax
c0018255:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001825a:	83 ec 04             	sub    esp,0x4
c001825d:	50                   	push   eax
c001825e:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0018265:	53                   	push   ebx
c0018266:	e8 6f ab ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001826b:	83 c4 10             	add    esp,0x10
c001826e:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0018275:	83 ec 0c             	sub    esp,0xc
c0018278:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001827f:	e8 28 ae ff ff       	call   c00130ac <File::exists()>
c0018284:	83 c4 10             	add    esp,0x10
c0018287:	84 c0                	test   al,al
c0018289:	74 27                	je     c00182b2 <ACPI::open(int, int, void*)+0x1c6>
c001828b:	83 ec 08             	sub    esp,0x8
c001828e:	6a 01                	push   0x1
c0018290:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0018297:	e8 e9 53 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c001829c:	83 c4 10             	add    esp,0x10
c001829f:	83 ec 08             	sub    esp,0x8
c00182a2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00182a9:	50                   	push   eax
c00182aa:	e8 01 56 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c00182af:	83 c4 10             	add    esp,0x10
c00182b2:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00182ba:	0f 84 c1 fe ff ff    	je     c0018181 <ACPI::open(int, int, void*)+0x95>
c00182c0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00182c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00182c9:	83 c0 08             	add    eax,0x8
c00182cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00182ce:	83 ec 0c             	sub    esp,0xc
c00182d1:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00182d8:	ff d0                	call   eax
c00182da:	83 c4 10             	add    esp,0x10
c00182dd:	e9 9f fe ff ff       	jmp    c0018181 <ACPI::open(int, int, void*)+0x95>
c00182e2:	83 ec 0c             	sub    esp,0xc
c00182e5:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00182ec:	50                   	push   eax
c00182ed:	e8 2c 11 01 00       	call   c002941e <LinkedList<Device>::~LinkedList()>
c00182f2:	83 c4 10             	add    esp,0x10
c00182f5:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c00182fb:	83 ec 08             	sub    esp,0x8
c00182fe:	6a 01                	push   0x1
c0018300:	68 bd bd 02 c0       	push   0xc002bdbd
c0018305:	e8 7b 53 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c001830a:	83 c4 10             	add    esp,0x10
c001830d:	83 ec 08             	sub    esp,0x8
c0018310:	53                   	push   ebx
c0018311:	50                   	push   eax
c0018312:	e8 99 55 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c0018317:	83 c4 10             	add    esp,0x10
c001831a:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0018320:	83 ec 08             	sub    esp,0x8
c0018323:	6a 01                	push   0x1
c0018325:	68 da bd 02 c0       	push   0xc002bdda
c001832a:	e8 56 53 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c001832f:	83 c4 10             	add    esp,0x10
c0018332:	83 ec 08             	sub    esp,0x8
c0018335:	53                   	push   ebx
c0018336:	50                   	push   eax
c0018337:	e8 74 55 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c001833c:	83 c4 10             	add    esp,0x10
c001833f:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0018344:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001834a:	83 e0 04             	and    eax,0x4
c001834d:	84 c0                	test   al,al
c001834f:	0f 84 fd 00 00 00    	je     c0018452 <ACPI::open(int, int, void*)+0x366>
c0018355:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0018360:	83 ec 0c             	sub    esp,0xc
c0018363:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001836a:	e8 1d 75 ff ff       	call   c000f88c <malloc>
c001836f:	83 c4 10             	add    esp,0x10
c0018372:	89 c3                	mov    ebx,eax
c0018374:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0018379:	83 ec 04             	sub    esp,0x4
c001837c:	50                   	push   eax
c001837d:	68 f7 bd 02 c0       	push   0xc002bdf7
c0018382:	53                   	push   ebx
c0018383:	e8 52 aa ff ff       	call   c0012dda <File::File(char const*, Process*)>
c0018388:	83 c4 10             	add    esp,0x10
c001838b:	89 9c 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],ebx
c0018392:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c001839a:	74 1a                	je     c00183b6 <ACPI::open(int, int, void*)+0x2ca>
c001839c:	83 ec 0c             	sub    esp,0xc
c001839f:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00183a6:	e8 01 ad ff ff       	call   c00130ac <File::exists()>
c00183ab:	83 c4 10             	add    esp,0x10
c00183ae:	84 c0                	test   al,al
c00183b0:	74 04                	je     c00183b6 <ACPI::open(int, int, void*)+0x2ca>
c00183b2:	b0 01                	mov    al,0x1
c00183b4:	eb 02                	jmp    c00183b8 <ACPI::open(int, int, void*)+0x2cc>
c00183b6:	b0 00                	mov    al,0x0
c00183b8:	84 c0                	test   al,al
c00183ba:	74 25                	je     c00183e1 <ACPI::open(int, int, void*)+0x2f5>
c00183bc:	83 ec 08             	sub    esp,0x8
c00183bf:	6a 01                	push   0x1
c00183c1:	68 f7 bd 02 c0       	push   0xc002bdf7
c00183c6:	e8 ba 52 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c00183cb:	83 c4 10             	add    esp,0x10
c00183ce:	83 ec 08             	sub    esp,0x8
c00183d1:	ff b4 24 78 01 00 00 	push   DWORD PTR [esp+0x178]
c00183d8:	50                   	push   eax
c00183d9:	e8 d2 54 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c00183de:	83 c4 10             	add    esp,0x10
c00183e1:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00183e9:	74 27                	je     c0018412 <ACPI::open(int, int, void*)+0x326>
c00183eb:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c00183f3:	74 1d                	je     c0018412 <ACPI::open(int, int, void*)+0x326>
c00183f5:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c00183fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00183fe:	83 c0 08             	add    eax,0x8
c0018401:	8b 00                	mov    eax,DWORD PTR [eax]
c0018403:	83 ec 0c             	sub    esp,0xc
c0018406:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001840d:	ff d0                	call   eax
c001840f:	83 c4 10             	add    esp,0x10
c0018412:	a1 08 17 03 c0       	mov    eax,ds:0xc0031708
c0018417:	83 ec 08             	sub    esp,0x8
c001841a:	68 14 be 02 c0       	push   0xc002be14
c001841f:	50                   	push   eax
c0018420:	e8 c9 f3 ff ff       	call   c00177ee <findDataTable(unsigned char*, char*)>
c0018425:	83 c4 10             	add    esp,0x10
c0018428:	89 84 24 44 01 00 00 	mov    DWORD PTR [esp+0x144],eax
c001842f:	83 bc 24 44 01 00 00 00 	cmp    DWORD PTR [esp+0x144],0x0
c0018437:	74 19                	je     c0018452 <ACPI::open(int, int, void*)+0x366>
c0018439:	83 ec 08             	sub    esp,0x8
c001843c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0018443:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
c001844a:	e8 3d fc ff ff       	call   c001808c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001844f:	83 c4 10             	add    esp,0x10
c0018452:	b8 00 00 00 00       	mov    eax,0x0
c0018457:	81 c4 60 01 00 00    	add    esp,0x160
c001845d:	5b                   	pop    ebx
c001845e:	5e                   	pop    esi
c001845f:	5f                   	pop    edi
c0018460:	c3                   	ret    
c0018461:	90                   	nop

c0018462 <CPU::close(int, int, void*)>:
c0018462:	31 c0                	xor    eax,eax
c0018464:	c3                   	ret    
c0018465:	90                   	nop

c0018466 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0018466:	55                   	push   ebp
c0018467:	57                   	push   edi
c0018468:	56                   	push   esi
c0018469:	53                   	push   ebx
c001846a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001846e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018472:	89 ce                	mov    esi,ecx
c0018474:	89 d5                	mov    ebp,edx
c0018476:	80 f9 04             	cmp    cl,0x4
c0018479:	75 28                	jne    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c001847b:	8d 42 f9             	lea    eax,[edx-0x7]
c001847e:	3c 03                	cmp    al,0x3
c0018480:	0f 86 63 01 00 00    	jbe    c00185e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018486:	80 fa 03             	cmp    dl,0x3
c0018489:	0f 84 5a 01 00 00    	je     c00185e9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001848f:	8d 7a f2             	lea    edi,[edx-0xe]
c0018492:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c0018497:	89 fb                	mov    ebx,edi
c0018499:	80 fb 01             	cmp    bl,0x1
c001849c:	77 4e                	ja     c00184ec <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c001849e:	e9 52 01 00 00       	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184a3:	80 f9 05             	cmp    cl,0x5
c00184a6:	75 4d                	jne    c00184f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00184a8:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c00184ad:	80 fa 03             	cmp    dl,0x3
c00184b0:	0f 86 3f 01 00 00    	jbe    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184b6:	8d 7a fa             	lea    edi,[edx-0x6]
c00184b9:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c00184be:	89 fb                	mov    ebx,edi
c00184c0:	80 fb 01             	cmp    bl,0x1
c00184c3:	0f 86 2c 01 00 00    	jbe    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184c9:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c00184ce:	80 fa 08             	cmp    dl,0x8
c00184d1:	0f 84 1e 01 00 00    	je     c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184d7:	89 d7                	mov    edi,edx
c00184d9:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c00184de:	83 e7 fb             	and    edi,0xfffffffb
c00184e1:	89 fb                	mov    ebx,edi
c00184e3:	80 fb 09             	cmp    bl,0x9
c00184e6:	0f 84 09 01 00 00    	je     c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ec:	31 c0                	xor    eax,eax
c00184ee:	89 eb                	mov    ebx,ebp
c00184f0:	0f b6 fb             	movzx  edi,bl
c00184f3:	eb 30                	jmp    c0018525 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00184f5:	31 c0                	xor    eax,eax
c00184f7:	80 f9 06             	cmp    cl,0x6
c00184fa:	75 f2                	jne    c00184ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00184fc:	80 fa 0a             	cmp    dl,0xa
c00184ff:	77 ed                	ja     c00184ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018501:	bf de 05 00 00       	mov    edi,0x5de
c0018506:	0f a3 d7             	bt     edi,edx
c0018509:	73 e3                	jae    c00184ee <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001850b:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018510:	e9 e0 00 00 00       	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018515:	39 c7                	cmp    edi,eax
c0018517:	0f 84 d3 00 00 00    	je     c00185f0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001851d:	40                   	inc    eax
c001851e:	3d d0 00 00 00       	cmp    eax,0xd0
c0018523:	74 09                	je     c001852e <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018525:	89 f3                	mov    ebx,esi
c0018527:	80 fb 0f             	cmp    bl,0xf
c001852a:	75 f1                	jne    c001851d <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001852c:	eb e7                	jmp    c0018515 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001852e:	80 f9 10             	cmp    cl,0x10
c0018531:	75 14                	jne    c0018547 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018533:	8d 42 fc             	lea    eax,[edx-0x4]
c0018536:	83 e0 fb             	and    eax,0xfffffffb
c0018539:	3c 02                	cmp    al,0x2
c001853b:	76 34                	jbe    c0018571 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001853d:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c0018542:	80 fa 02             	cmp    dl,0x2
c0018545:	eb 24                	jmp    c001856b <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018547:	80 f9 11             	cmp    cl,0x11
c001854a:	75 13                	jne    c001855f <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001854c:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c0018551:	80 fa 03             	cmp    dl,0x3
c0018554:	0f 85 9b 00 00 00    	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001855a:	e9 91 00 00 00       	jmp    c00185f0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001855f:	80 f9 12             	cmp    cl,0x12
c0018562:	75 14                	jne    c0018578 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018564:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c0018569:	fe ca                	dec    dl
c001856b:	0f 85 84 00 00 00    	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018571:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018576:	eb 7d                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018578:	80 f9 14             	cmp    cl,0x14
c001857b:	75 12                	jne    c001858f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001857d:	4a                   	dec    edx
c001857e:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c0018583:	80 fa 01             	cmp    dl,0x1
c0018586:	77 6d                	ja     c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018588:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c001858d:	eb 66                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001858f:	80 f9 15             	cmp    cl,0x15
c0018592:	75 31                	jne    c00185c5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018594:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018599:	80 fa 01             	cmp    dl,0x1
c001859c:	74 57                	je     c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001859e:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c00185a3:	80 fa 13             	cmp    dl,0x13
c00185a6:	76 0c                	jbe    c00185b4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00185a8:	80 fa 30             	cmp    dl,0x30
c00185ab:	75 48                	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185ad:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c00185b2:	eb 41                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185b4:	b9 04 00 09 00       	mov    ecx,0x90004
c00185b9:	0f a3 d1             	bt     ecx,edx
c00185bc:	73 37                	jae    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185be:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c00185c3:	eb 30                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185c5:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c00185ca:	80 f9 16             	cmp    cl,0x16
c00185cd:	75 26                	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185cf:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c00185d4:	84 d2                	test   dl,dl
c00185d6:	74 1d                	je     c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185d8:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c00185dd:	80 fa 30             	cmp    dl,0x30
c00185e0:	75 13                	jne    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185e2:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c00185e7:	eb 0c                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185e9:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c00185ee:	eb 05                	jmp    c00185f5 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00185f0:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c00185f5:	5b                   	pop    ebx
c00185f6:	5e                   	pop    esi
c00185f7:	5f                   	pop    edi
c00185f8:	5d                   	pop    ebp
c00185f9:	c3                   	ret    

c00185fa <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00185fa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00185fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018602:	80 f9 04             	cmp    cl,0x4
c0018605:	75 6b                	jne    c0018672 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018607:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c001860c:	80 fa 01             	cmp    dl,0x1
c001860f:	0f 86 92 02 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018615:	b8 d0 e0 02 c0       	mov    eax,0xc002e0d0
c001861a:	80 fa 02             	cmp    dl,0x2
c001861d:	0f 84 84 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018623:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018628:	80 fa 03             	cmp    dl,0x3
c001862b:	0f 84 76 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018631:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c0018636:	80 fa 04             	cmp    dl,0x4
c0018639:	0f 84 68 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001863f:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018644:	80 fa 05             	cmp    dl,0x5
c0018647:	0f 84 5a 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001864d:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018652:	80 fa 07             	cmp    dl,0x7
c0018655:	0f 84 4c 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001865b:	83 ea 08             	sub    edx,0x8
c001865e:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c0018663:	80 fa 01             	cmp    dl,0x1
c0018666:	0f 87 3b 02 00 00    	ja     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866c:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018671:	c3                   	ret    
c0018672:	80 f9 05             	cmp    cl,0x5
c0018675:	75 45                	jne    c00186bc <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018677:	8d 4a ff             	lea    ecx,[edx-0x1]
c001867a:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c001867f:	80 f9 02             	cmp    cl,0x2
c0018682:	0f 86 1f 02 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018688:	80 fa 04             	cmp    dl,0x4
c001868b:	0f 84 f3 01 00 00    	je     c0018884 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018691:	80 fa 07             	cmp    dl,0x7
c0018694:	0f 84 0d 02 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001869a:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c001869f:	80 fa 08             	cmp    dl,0x8
c00186a2:	0f 84 ff 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a8:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c00186ad:	80 fa 09             	cmp    dl,0x9
c00186b0:	0f 85 f1 01 00 00    	jne    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b6:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c00186bb:	c3                   	ret    
c00186bc:	80 f9 06             	cmp    cl,0x6
c00186bf:	0f 85 85 01 00 00    	jne    c001884a <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00186c5:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c00186ca:	80 fa 01             	cmp    dl,0x1
c00186cd:	0f 84 d4 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d3:	8d 42 fb             	lea    eax,[edx-0x5]
c00186d6:	3c 01                	cmp    al,0x1
c00186d8:	0f 86 ac 01 00 00    	jbe    c001888a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00186de:	80 fa 03             	cmp    dl,0x3
c00186e1:	0f 84 a3 01 00 00    	je     c001888a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00186e7:	8d 4a f9             	lea    ecx,[edx-0x7]
c00186ea:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c00186ef:	80 f9 01             	cmp    cl,0x1
c00186f2:	0f 86 af 01 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f8:	80 fa 09             	cmp    dl,0x9
c00186fb:	0f 84 8f 01 00 00    	je     c0018890 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018701:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018704:	80 f9 01             	cmp    cl,0x1
c0018707:	0f 86 9a 01 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870d:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018712:	80 fa 0d             	cmp    dl,0xd
c0018715:	0f 84 8c 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001871b:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018720:	80 fa 0e             	cmp    dl,0xe
c0018723:	0f 84 7e 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018729:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c001872e:	80 fa 0f             	cmp    dl,0xf
c0018731:	0f 84 70 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018737:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c001873c:	80 fa 15             	cmp    dl,0x15
c001873f:	0f 84 62 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018745:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018748:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c001874d:	80 f9 01             	cmp    cl,0x1
c0018750:	0f 86 51 01 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018756:	80 fa 1a             	cmp    dl,0x1a
c0018759:	0f 84 37 01 00 00    	je     c0018896 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c001875f:	80 fa 1c             	cmp    dl,0x1c
c0018762:	0f 84 34 01 00 00    	je     c001889c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018768:	80 fa 1d             	cmp    dl,0x1d
c001876b:	0f 84 36 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018771:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018776:	80 fa 25             	cmp    dl,0x25
c0018779:	0f 84 28 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001877f:	8d 4a da             	lea    ecx,[edx-0x26]
c0018782:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018787:	80 f9 01             	cmp    cl,0x1
c001878a:	0f 86 17 01 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018790:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018795:	80 fa 2a             	cmp    dl,0x2a
c0018798:	0f 84 09 01 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001879e:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c00187a3:	80 fa 2c             	cmp    dl,0x2c
c00187a6:	0f 84 fb 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ac:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c00187b1:	80 fa 2d             	cmp    dl,0x2d
c00187b4:	0f 84 ed 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187ba:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c00187bf:	80 fa 2e             	cmp    dl,0x2e
c00187c2:	0f 84 df 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187c8:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c00187cd:	80 fa 2f             	cmp    dl,0x2f
c00187d0:	0f 84 d1 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187d6:	8d 4a cb             	lea    ecx,[edx-0x35]
c00187d9:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00187de:	80 f9 01             	cmp    cl,0x1
c00187e1:	0f 86 c0 00 00 00    	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187e7:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c00187ec:	80 fa 37             	cmp    dl,0x37
c00187ef:	0f 84 b2 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187f5:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c00187fa:	80 fa 3a             	cmp    dl,0x3a
c00187fd:	0f 84 a4 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018803:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018808:	80 fa 3c             	cmp    dl,0x3c
c001880b:	0f 84 96 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018811:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018816:	80 fa 3d             	cmp    dl,0x3d
c0018819:	0f 84 88 00 00 00    	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001881f:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018824:	80 fa 3e             	cmp    dl,0x3e
c0018827:	74 7e                	je     c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018829:	8d 42 bb             	lea    eax,[edx-0x45]
c001882c:	3c 01                	cmp    al,0x1
c001882e:	76 72                	jbe    c00188a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018830:	80 fa 3f             	cmp    dl,0x3f
c0018833:	74 6d                	je     c00188a2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018835:	80 fa 4a             	cmp    dl,0x4a
c0018838:	74 0a                	je     c0018844 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001883a:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c001883f:	80 fa 4d             	cmp    dl,0x4d
c0018842:	75 63                	jne    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018844:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018849:	c3                   	ret    
c001884a:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c001884f:	80 f9 0b             	cmp    cl,0xb
c0018852:	75 0a                	jne    c001885e <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018854:	fe ca                	dec    dl
c0018856:	75 4f                	jne    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018858:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c001885d:	c3                   	ret    
c001885e:	80 f9 0f             	cmp    cl,0xf
c0018861:	75 44                	jne    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018863:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018868:	80 fa 02             	cmp    dl,0x2
c001886b:	76 3a                	jbe    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001886d:	8d 42 fd             	lea    eax,[edx-0x3]
c0018870:	3c 01                	cmp    al,0x1
c0018872:	76 0a                	jbe    c001887e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018874:	b8 22 c2 02 c0       	mov    eax,0xc002c222
c0018879:	80 fa 06             	cmp    dl,0x6
c001887c:	75 29                	jne    c00188a7 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001887e:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018883:	c3                   	ret    
c0018884:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018889:	c3                   	ret    
c001888a:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c001888f:	c3                   	ret    
c0018890:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018895:	c3                   	ret    
c0018896:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c001889b:	c3                   	ret    
c001889c:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c00188a1:	c3                   	ret    
c00188a2:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c00188a7:	c3                   	ret    

c00188a8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00188a8:	60                   	pusha  
c00188a9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00188b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188b5:	9c                   	pushf  
c00188b6:	fa                   	cli    
c00188b7:	0f 09                	wbinvd 
c00188b9:	0f 30                	wrmsr  
c00188bb:	9d                   	popf   
c00188bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188c0:	89 02                	mov    DWORD PTR [edx],eax
c00188c2:	61                   	popa   
c00188c3:	c3                   	ret    

c00188c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00188c4:	60                   	pusha  
c00188c5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00188c9:	9c                   	pushf  
c00188ca:	fa                   	cli    
c00188cb:	0f 09                	wbinvd 
c00188cd:	31 c0                	xor    eax,eax
c00188cf:	31 d2                	xor    edx,edx
c00188d1:	0f 32                	rdmsr  
c00188d3:	9d                   	popf   
c00188d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00188d8:	89 02                	mov    DWORD PTR [edx],eax
c00188da:	61                   	popa   
c00188db:	c3                   	ret    

c00188dc <CPU::AMD_K6_writeback(int, int, int)>:
c00188dc:	56                   	push   esi
c00188dd:	53                   	push   ebx
c00188de:	83 ec 10             	sub    esp,0x10
c00188e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e5:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00188ea:	75 5d                	jne    c0018949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00188ec:	83 f8 08             	cmp    eax,0x8
c00188ef:	75 09                	jne    c00188fa <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00188f1:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00188f6:	7e 13                	jle    c001890b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00188f8:	eb 30                	jmp    c001892a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00188fa:	83 f8 06             	cmp    eax,0x6
c00188fd:	7c 4a                	jl     c0018949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00188ff:	83 f8 07             	cmp    eax,0x7
c0018902:	7e 07                	jle    c001890b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018904:	83 f8 09             	cmp    eax,0x9
c0018907:	74 21                	je     c001892a <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018909:	eb 3e                	jmp    c0018949 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001890b:	89 e6                	mov    esi,esp
c001890d:	8b 1d 88 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee88
c0018913:	56                   	push   esi
c0018914:	c1 eb 15             	shr    ebx,0x15
c0018917:	68 82 00 00 c0       	push   0xc0000082
c001891c:	83 e3 7e             	and    ebx,0x7e
c001891f:	e8 a0 ff ff ff       	call   c00188c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018924:	56                   	push   esi
c0018925:	6a 00                	push   0x0
c0018927:	53                   	push   ebx
c0018928:	eb 12                	jmp    c001893c <CPU::AMD_K6_writeback(int, int, int)+0x60>
c001892a:	89 e3                	mov    ebx,esp
c001892c:	53                   	push   ebx
c001892d:	68 82 00 00 c0       	push   0xc0000082
c0018932:	e8 8d ff ff ff       	call   c00188c4 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018937:	53                   	push   ebx
c0018938:	6a 00                	push   0x0
c001893a:	6a 00                	push   0x0
c001893c:	68 82 00 00 c0       	push   0xc0000082
c0018941:	e8 62 ff ff ff       	call   c00188a8 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018946:	83 c4 18             	add    esp,0x18
c0018949:	83 c4 10             	add    esp,0x10
c001894c:	5b                   	pop    ebx
c001894d:	5e                   	pop    esi
c001894e:	c3                   	ret    
c001894f:	90                   	nop

c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018950:	55                   	push   ebp
c0018951:	57                   	push   edi
c0018952:	56                   	push   esi
c0018953:	53                   	push   ebx
c0018954:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018958:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001895c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018960:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018964:	39 05 60 e3 02 c0    	cmp    DWORD PTR ds:0xc002e360,eax
c001896a:	75 23                	jne    c001898f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001896c:	a1 6c 19 03 c0       	mov    eax,ds:0xc003196c
c0018971:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018975:	89 06                	mov    DWORD PTR [esi],eax
c0018977:	a1 68 19 03 c0       	mov    eax,ds:0xc0031968
c001897c:	89 07                	mov    DWORD PTR [edi],eax
c001897e:	a1 64 19 03 c0       	mov    eax,ds:0xc0031964
c0018983:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018986:	a1 60 19 03 c0       	mov    eax,ds:0xc0031960
c001898b:	89 02                	mov    DWORD PTR [edx],eax
c001898d:	eb 3f                	jmp    c00189ce <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001898f:	31 c9                	xor    ecx,ecx
c0018991:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018995:	0f a2                	cpuid  
c0018997:	89 06                	mov    DWORD PTR [esi],eax
c0018999:	89 1f                	mov    DWORD PTR [edi],ebx
c001899b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001899f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00189a2:	89 10                	mov    DWORD PTR [eax],edx
c00189a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00189a8:	a3 60 e3 02 c0       	mov    ds:0xc002e360,eax
c00189ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00189af:	a3 6c 19 03 c0       	mov    ds:0xc003196c,eax
c00189b4:	8b 07                	mov    eax,DWORD PTR [edi]
c00189b6:	a3 68 19 03 c0       	mov    ds:0xc0031968,eax
c00189bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00189be:	a3 64 19 03 c0       	mov    ds:0xc0031964,eax
c00189c3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00189c7:	8b 00                	mov    eax,DWORD PTR [eax]
c00189c9:	a3 60 19 03 c0       	mov    ds:0xc0031960,eax
c00189ce:	5b                   	pop    ebx
c00189cf:	5e                   	pop    esi
c00189d0:	5f                   	pop    edi
c00189d1:	5d                   	pop    ebp
c00189d2:	c3                   	ret    
c00189d3:	90                   	nop

c00189d4 <CPU::cpuidCheckEDX(unsigned int)>:
c00189d4:	83 ec 10             	sub    esp,0x10
c00189d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189db:	50                   	push   eax
c00189dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189e0:	50                   	push   eax
c00189e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189e5:	50                   	push   eax
c00189e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189ea:	50                   	push   eax
c00189eb:	6a 01                	push   0x1
c00189ed:	e8 5e ff ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189f6:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00189fa:	0f 95 c0             	setne  al
c00189fd:	83 c4 24             	add    esp,0x24
c0018a00:	c3                   	ret    
c0018a01:	90                   	nop

c0018a02 <CPU::cpuidCheckECX(unsigned int)>:
c0018a02:	83 ec 10             	sub    esp,0x10
c0018a05:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a09:	50                   	push   eax
c0018a0a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a0e:	50                   	push   eax
c0018a0f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a13:	50                   	push   eax
c0018a14:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a18:	50                   	push   eax
c0018a19:	6a 01                	push   0x1
c0018a1b:	e8 30 ff ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a20:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a24:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a28:	0f 95 c0             	setne  al
c0018a2b:	83 c4 24             	add    esp,0x24
c0018a2e:	c3                   	ret    
c0018a2f:	90                   	nop

c0018a30 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018a30:	83 ec 10             	sub    esp,0x10
c0018a33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a37:	50                   	push   eax
c0018a38:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a3c:	50                   	push   eax
c0018a3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a41:	50                   	push   eax
c0018a42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a46:	50                   	push   eax
c0018a47:	6a 07                	push   0x7
c0018a49:	e8 02 ff ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a4e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a52:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018a56:	0f 95 c0             	setne  al
c0018a59:	83 c4 24             	add    esp,0x24
c0018a5c:	c3                   	ret    
c0018a5d:	90                   	nop

c0018a5e <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018a5e:	83 ec 10             	sub    esp,0x10
c0018a61:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a65:	50                   	push   eax
c0018a66:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a6a:	50                   	push   eax
c0018a6b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a6f:	50                   	push   eax
c0018a70:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a74:	50                   	push   eax
c0018a75:	6a 07                	push   0x7
c0018a77:	e8 d4 fe ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a80:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018a84:	0f 95 c0             	setne  al
c0018a87:	83 c4 24             	add    esp,0x24
c0018a8a:	c3                   	ret    
c0018a8b:	90                   	nop

c0018a8c <CPU::CPU()>:
c0018a8c:	83 ec 0c             	sub    esp,0xc
c0018a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a93:	83 ec 08             	sub    esp,0x8
c0018a96:	68 22 c2 02 c0       	push   0xc002c222
c0018a9b:	50                   	push   eax
c0018a9c:	e8 17 b4 ff ff       	call   c0013eb8 <Device::Device(char const*)>
c0018aa1:	83 c4 10             	add    esp,0x10
c0018aa4:	ba fc c2 02 c0       	mov    edx,0xc002c2fc
c0018aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aad:	89 10                	mov    DWORD PTR [eax],edx
c0018aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ab3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ac1:	05 78 01 00 00       	add    eax,0x178
c0018ac6:	83 ec 0c             	sub    esp,0xc
c0018ac9:	50                   	push   eax
c0018aca:	e8 d3 65 ff ff       	call   c000f0a2 <GDT::GDT()>
c0018acf:	83 c4 10             	add    esp,0x10
c0018ad2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ad6:	05 7c 09 00 00       	add    eax,0x97c
c0018adb:	83 ec 0c             	sub    esp,0xc
c0018ade:	50                   	push   eax
c0018adf:	e8 28 68 ff ff       	call   c000f30c <IDT::IDT()>
c0018ae4:	83 c4 10             	add    esp,0x10
c0018ae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018aeb:	05 7c 11 00 00       	add    eax,0x117c
c0018af0:	83 ec 0c             	sub    esp,0xc
c0018af3:	50                   	push   eax
c0018af4:	e8 ad 82 ff ff       	call   c0010da6 <TSS::TSS()>
c0018af9:	83 c4 10             	add    esp,0x10
c0018afc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b00:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018b07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b0b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018b15:	90                   	nop
c0018b16:	83 c4 0c             	add    esp,0xc
c0018b19:	c3                   	ret    

c0018b1a <CPU::displayFeatures()>:
c0018b1a:	53                   	push   ebx
c0018b1b:	83 ec 10             	sub    esp,0x10
c0018b1e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018b22:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018b28:	68 30 bf 02 c0       	push   0xc002bf30
c0018b2d:	e8 49 9d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018b32:	59                   	pop    ecx
c0018b33:	58                   	pop    eax
c0018b34:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018b3a:	50                   	push   eax
c0018b3b:	68 41 bf 02 c0       	push   0xc002bf41
c0018b40:	e8 36 9d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018b45:	58                   	pop    eax
c0018b46:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b4c:	5a                   	pop    edx
c0018b4d:	c1 e8 0e             	shr    eax,0xe
c0018b50:	0f b6 c0             	movzx  eax,al
c0018b53:	50                   	push   eax
c0018b54:	68 52 bf 02 c0       	push   0xc002bf52
c0018b59:	e8 1d 9d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018b5e:	59                   	pop    ecx
c0018b5f:	58                   	pop    eax
c0018b60:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b66:	66 c1 e8 06          	shr    ax,0x6
c0018b6a:	0f b6 c0             	movzx  eax,al
c0018b6d:	50                   	push   eax
c0018b6e:	68 63 bf 02 c0       	push   0xc002bf63
c0018b73:	e8 03 9d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018b78:	c7 04 24 10 c4 02 c0 	mov    DWORD PTR [esp],0xc002c410
c0018b7f:	e8 f7 9c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018b84:	83 c4 10             	add    esp,0x10
c0018b87:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018b8c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018b93:	74 05                	je     c0018b9a <CPU::displayFeatures()+0x80>
c0018b95:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018b9a:	52                   	push   edx
c0018b9b:	52                   	push   edx
c0018b9c:	50                   	push   eax
c0018b9d:	68 74 bf 02 c0       	push   0xc002bf74
c0018ba2:	e8 d4 9c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018ba7:	83 c4 10             	add    esp,0x10
c0018baa:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018baf:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018bb6:	78 05                	js     c0018bbd <CPU::displayFeatures()+0xa3>
c0018bb8:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018bbd:	51                   	push   ecx
c0018bbe:	51                   	push   ecx
c0018bbf:	50                   	push   eax
c0018bc0:	68 8b bf 02 c0       	push   0xc002bf8b
c0018bc5:	e8 b1 9c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018bca:	83 c4 10             	add    esp,0x10
c0018bcd:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018bd2:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018bd9:	75 05                	jne    c0018be0 <CPU::displayFeatures()+0xc6>
c0018bdb:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018be0:	52                   	push   edx
c0018be1:	52                   	push   edx
c0018be2:	50                   	push   eax
c0018be3:	68 a2 bf 02 c0       	push   0xc002bfa2
c0018be8:	e8 8e 9c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018bed:	83 c4 10             	add    esp,0x10
c0018bf0:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018bf5:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018bfc:	75 05                	jne    c0018c03 <CPU::displayFeatures()+0xe9>
c0018bfe:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018c03:	51                   	push   ecx
c0018c04:	51                   	push   ecx
c0018c05:	50                   	push   eax
c0018c06:	68 b9 bf 02 c0       	push   0xc002bfb9
c0018c0b:	e8 6b 9c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018c10:	83 c4 10             	add    esp,0x10
c0018c13:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018c18:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018c1f:	75 05                	jne    c0018c26 <CPU::displayFeatures()+0x10c>
c0018c21:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018c26:	52                   	push   edx
c0018c27:	52                   	push   edx
c0018c28:	50                   	push   eax
c0018c29:	68 d0 bf 02 c0       	push   0xc002bfd0
c0018c2e:	e8 48 9c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018c33:	83 c4 10             	add    esp,0x10
c0018c36:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018c3b:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018c42:	75 05                	jne    c0018c49 <CPU::displayFeatures()+0x12f>
c0018c44:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018c49:	51                   	push   ecx
c0018c4a:	51                   	push   ecx
c0018c4b:	50                   	push   eax
c0018c4c:	68 e7 bf 02 c0       	push   0xc002bfe7
c0018c51:	e8 25 9c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018c56:	83 c4 10             	add    esp,0x10
c0018c59:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018c5e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018c65:	75 05                	jne    c0018c6c <CPU::displayFeatures()+0x152>
c0018c67:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018c6c:	52                   	push   edx
c0018c6d:	52                   	push   edx
c0018c6e:	50                   	push   eax
c0018c6f:	68 fe bf 02 c0       	push   0xc002bffe
c0018c74:	e8 02 9c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018c79:	83 c4 10             	add    esp,0x10
c0018c7c:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018c81:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018c88:	75 05                	jne    c0018c8f <CPU::displayFeatures()+0x175>
c0018c8a:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018c8f:	51                   	push   ecx
c0018c90:	51                   	push   ecx
c0018c91:	50                   	push   eax
c0018c92:	68 15 c0 02 c0       	push   0xc002c015
c0018c97:	e8 df 9b ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018c9c:	83 c4 10             	add    esp,0x10
c0018c9f:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018ca4:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018cab:	75 05                	jne    c0018cb2 <CPU::displayFeatures()+0x198>
c0018cad:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018cb2:	52                   	push   edx
c0018cb3:	52                   	push   edx
c0018cb4:	50                   	push   eax
c0018cb5:	68 2c c0 02 c0       	push   0xc002c02c
c0018cba:	e8 bc 9b ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018cbf:	83 c4 10             	add    esp,0x10
c0018cc2:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018cc7:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018cce:	75 05                	jne    c0018cd5 <CPU::displayFeatures()+0x1bb>
c0018cd0:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018cd5:	51                   	push   ecx
c0018cd6:	51                   	push   ecx
c0018cd7:	50                   	push   eax
c0018cd8:	68 43 c0 02 c0       	push   0xc002c043
c0018cdd:	e8 99 9b ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018ce2:	83 c4 10             	add    esp,0x10
c0018ce5:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018cea:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018cf1:	75 05                	jne    c0018cf8 <CPU::displayFeatures()+0x1de>
c0018cf3:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018cf8:	52                   	push   edx
c0018cf9:	52                   	push   edx
c0018cfa:	50                   	push   eax
c0018cfb:	68 5a c0 02 c0       	push   0xc002c05a
c0018d00:	e8 76 9b ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018d05:	83 c4 10             	add    esp,0x10
c0018d08:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018d0d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018d14:	75 05                	jne    c0018d1b <CPU::displayFeatures()+0x201>
c0018d16:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018d1b:	51                   	push   ecx
c0018d1c:	51                   	push   ecx
c0018d1d:	50                   	push   eax
c0018d1e:	68 71 c0 02 c0       	push   0xc002c071
c0018d23:	e8 53 9b ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018d28:	83 c4 10             	add    esp,0x10
c0018d2b:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018d30:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018d37:	75 05                	jne    c0018d3e <CPU::displayFeatures()+0x224>
c0018d39:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018d3e:	52                   	push   edx
c0018d3f:	52                   	push   edx
c0018d40:	50                   	push   eax
c0018d41:	68 88 c0 02 c0       	push   0xc002c088
c0018d46:	e8 30 9b ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018d4b:	83 c4 10             	add    esp,0x10
c0018d4e:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018d53:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018d5a:	78 05                	js     c0018d61 <CPU::displayFeatures()+0x247>
c0018d5c:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018d61:	51                   	push   ecx
c0018d62:	51                   	push   ecx
c0018d63:	50                   	push   eax
c0018d64:	68 9f c0 02 c0       	push   0xc002c09f
c0018d69:	e8 0d 9b ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018d6e:	83 c4 10             	add    esp,0x10
c0018d71:	b8 f2 a8 02 c0       	mov    eax,0xc002a8f2
c0018d76:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018d7d:	75 05                	jne    c0018d84 <CPU::displayFeatures()+0x26a>
c0018d7f:	b8 f6 a8 02 c0       	mov    eax,0xc002a8f6
c0018d84:	52                   	push   edx
c0018d85:	52                   	push   edx
c0018d86:	50                   	push   eax
c0018d87:	68 b6 c0 02 c0       	push   0xc002c0b6
c0018d8c:	e8 ea 9a ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0018d91:	83 c4 18             	add    esp,0x18
c0018d94:	5b                   	pop    ebx
c0018d95:	c3                   	ret    

c0018d96 <CPU::detectFeatures()>:
c0018d96:	55                   	push   ebp
c0018d97:	57                   	push   edi
c0018d98:	56                   	push   esi
c0018d99:	53                   	push   ebx
c0018d9a:	83 ec 50             	sub    esp,0x50
c0018d9d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018da1:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018dab:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018db2:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0018db8:	6a 0d                	push   0xd
c0018dba:	6a 00                	push   0x0
c0018dbc:	55                   	push   ebp
c0018dbd:	e8 8e 79 fe ff       	call   c0000750 <memset>
c0018dc2:	83 c4 10             	add    esp,0x10
c0018dc5:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0018dca:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018dd1:	0f 84 22 09 00 00    	je     c00196f9 <CPU::detectFeatures()+0x963>
c0018dd7:	83 ec 0c             	sub    esp,0xc
c0018dda:	89 ef                	mov    edi,ebp
c0018ddc:	6a 10                	push   0x10
c0018dde:	e8 f1 fb ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018de3:	83 e0 01             	and    eax,0x1
c0018de6:	8d 14 00             	lea    edx,[eax+eax*1]
c0018de9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018def:	83 e0 fd             	and    eax,0xfffffffd
c0018df2:	09 d0                	or     eax,edx
c0018df4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018dfa:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018e01:	e8 ce fb ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018e06:	83 e0 01             	and    eax,0x1
c0018e09:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018e10:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e16:	83 e0 fb             	and    eax,0xfffffffb
c0018e19:	09 d0                	or     eax,edx
c0018e1b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e21:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018e28:	e8 a7 fb ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018e2d:	83 e0 01             	and    eax,0x1
c0018e30:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018e37:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e3d:	83 e0 f7             	and    eax,0xfffffff7
c0018e40:	09 d0                	or     eax,edx
c0018e42:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e48:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018e4f:	e8 80 fb ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018e54:	83 e0 01             	and    eax,0x1
c0018e57:	c1 e0 04             	shl    eax,0x4
c0018e5a:	88 c2                	mov    dl,al
c0018e5c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e62:	83 e0 ef             	and    eax,0xffffffef
c0018e65:	09 d0                	or     eax,edx
c0018e67:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e6d:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018e74:	e8 5b fb ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018e79:	83 e0 01             	and    eax,0x1
c0018e7c:	c1 e0 05             	shl    eax,0x5
c0018e7f:	88 c2                	mov    dl,al
c0018e81:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018e87:	83 e0 df             	and    eax,0xffffffdf
c0018e8a:	09 d0                	or     eax,edx
c0018e8c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018e92:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018e99:	e8 36 fb ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018e9e:	83 e0 01             	and    eax,0x1
c0018ea1:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ea4:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018eaa:	83 e0 fd             	and    eax,0xfffffffd
c0018ead:	09 d0                	or     eax,edx
c0018eaf:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018eb5:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018ebc:	e8 13 fb ff ff       	call   c00189d4 <CPU::cpuidCheckEDX(unsigned int)>
c0018ec1:	83 e0 01             	and    eax,0x1
c0018ec4:	c1 e0 06             	shl    eax,0x6
c0018ec7:	88 c2                	mov    dl,al
c0018ec9:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018ecf:	83 e0 bf             	and    eax,0xffffffbf
c0018ed2:	09 d0                	or     eax,edx
c0018ed4:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018eda:	58                   	pop    eax
c0018edb:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018edf:	50                   	push   eax
c0018ee0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ee4:	50                   	push   eax
c0018ee5:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018ee9:	56                   	push   esi
c0018eea:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018eee:	50                   	push   eax
c0018eef:	6a 00                	push   0x0
c0018ef1:	e8 5a fa ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018ef6:	b8 04 00 00 00       	mov    eax,0x4
c0018efb:	89 c1                	mov    ecx,eax
c0018efd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018eff:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0018f05:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0018f09:	89 c1                	mov    ecx,eax
c0018f0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f0d:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0018f13:	8d 74 24 38          	lea    esi,[esp+0x38]
c0018f17:	89 c1                	mov    ecx,eax
c0018f19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018f1b:	83 c4 18             	add    esp,0x18
c0018f1e:	68 cd c0 02 c0       	push   0xc002c0cd
c0018f23:	55                   	push   ebp
c0018f24:	e8 6f 79 fe ff       	call   c0000898 <strcmp>
c0018f29:	83 c4 10             	add    esp,0x10
c0018f2c:	85 c0                	test   eax,eax
c0018f2e:	75 0f                	jne    c0018f3f <CPU::detectFeatures()+0x1a9>
c0018f30:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018f3a:	e9 22 02 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c0018f3f:	50                   	push   eax
c0018f40:	50                   	push   eax
c0018f41:	68 da c0 02 c0       	push   0xc002c0da
c0018f46:	55                   	push   ebp
c0018f47:	e8 4c 79 fe ff       	call   c0000898 <strcmp>
c0018f4c:	83 c4 10             	add    esp,0x10
c0018f4f:	85 c0                	test   eax,eax
c0018f51:	74 dd                	je     c0018f30 <CPU::detectFeatures()+0x19a>
c0018f53:	50                   	push   eax
c0018f54:	50                   	push   eax
c0018f55:	68 e7 c0 02 c0       	push   0xc002c0e7
c0018f5a:	55                   	push   ebp
c0018f5b:	e8 38 79 fe ff       	call   c0000898 <strcmp>
c0018f60:	83 c4 10             	add    esp,0x10
c0018f63:	85 c0                	test   eax,eax
c0018f65:	74 2a                	je     c0018f91 <CPU::detectFeatures()+0x1fb>
c0018f67:	50                   	push   eax
c0018f68:	50                   	push   eax
c0018f69:	68 f4 c0 02 c0       	push   0xc002c0f4
c0018f6e:	55                   	push   ebp
c0018f6f:	e8 24 79 fe ff       	call   c0000898 <strcmp>
c0018f74:	83 c4 10             	add    esp,0x10
c0018f77:	85 c0                	test   eax,eax
c0018f79:	74 16                	je     c0018f91 <CPU::detectFeatures()+0x1fb>
c0018f7b:	50                   	push   eax
c0018f7c:	50                   	push   eax
c0018f7d:	68 01 c1 02 c0       	push   0xc002c101
c0018f82:	55                   	push   ebp
c0018f83:	e8 10 79 fe ff       	call   c0000898 <strcmp>
c0018f88:	83 c4 10             	add    esp,0x10
c0018f8b:	85 c0                	test   eax,eax
c0018f8d:	74 48                	je     c0018fd7 <CPU::detectFeatures()+0x241>
c0018f8f:	eb 0f                	jmp    c0018fa0 <CPU::detectFeatures()+0x20a>
c0018f91:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018f9b:	e9 c1 01 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c0018fa0:	50                   	push   eax
c0018fa1:	50                   	push   eax
c0018fa2:	68 0e c1 02 c0       	push   0xc002c10e
c0018fa7:	55                   	push   ebp
c0018fa8:	e8 eb 78 fe ff       	call   c0000898 <strcmp>
c0018fad:	83 c4 10             	add    esp,0x10
c0018fb0:	85 c0                	test   eax,eax
c0018fb2:	74 23                	je     c0018fd7 <CPU::detectFeatures()+0x241>
c0018fb4:	57                   	push   edi
c0018fb5:	57                   	push   edi
c0018fb6:	68 1b c1 02 c0       	push   0xc002c11b
c0018fbb:	55                   	push   ebp
c0018fbc:	e8 d7 78 fe ff       	call   c0000898 <strcmp>
c0018fc1:	83 c4 10             	add    esp,0x10
c0018fc4:	85 c0                	test   eax,eax
c0018fc6:	75 1e                	jne    c0018fe6 <CPU::detectFeatures()+0x250>
c0018fc8:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018fd2:	e9 8a 01 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c0018fd7:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018fe1:	e9 7b 01 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c0018fe6:	56                   	push   esi
c0018fe7:	56                   	push   esi
c0018fe8:	68 28 c1 02 c0       	push   0xc002c128
c0018fed:	55                   	push   ebp
c0018fee:	e8 a5 78 fe ff       	call   c0000898 <strcmp>
c0018ff3:	83 c4 10             	add    esp,0x10
c0018ff6:	85 c0                	test   eax,eax
c0018ff8:	75 0f                	jne    c0019009 <CPU::detectFeatures()+0x273>
c0018ffa:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0019004:	e9 58 01 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c0019009:	51                   	push   ecx
c001900a:	51                   	push   ecx
c001900b:	68 e7 c0 02 c0       	push   0xc002c0e7
c0019010:	55                   	push   ebp
c0019011:	e8 82 78 fe ff       	call   c0000898 <strcmp>
c0019016:	83 c4 10             	add    esp,0x10
c0019019:	85 c0                	test   eax,eax
c001901b:	75 0f                	jne    c001902c <CPU::detectFeatures()+0x296>
c001901d:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0019027:	e9 35 01 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c001902c:	52                   	push   edx
c001902d:	52                   	push   edx
c001902e:	68 35 c1 02 c0       	push   0xc002c135
c0019033:	55                   	push   ebp
c0019034:	e8 5f 78 fe ff       	call   c0000898 <strcmp>
c0019039:	83 c4 10             	add    esp,0x10
c001903c:	85 c0                	test   eax,eax
c001903e:	75 0f                	jne    c001904f <CPU::detectFeatures()+0x2b9>
c0019040:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001904a:	e9 12 01 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c001904f:	50                   	push   eax
c0019050:	50                   	push   eax
c0019051:	68 42 c1 02 c0       	push   0xc002c142
c0019056:	55                   	push   ebp
c0019057:	e8 3c 78 fe ff       	call   c0000898 <strcmp>
c001905c:	83 c4 10             	add    esp,0x10
c001905f:	85 c0                	test   eax,eax
c0019061:	75 0f                	jne    c0019072 <CPU::detectFeatures()+0x2dc>
c0019063:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001906d:	e9 ef 00 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c0019072:	50                   	push   eax
c0019073:	50                   	push   eax
c0019074:	68 4f c1 02 c0       	push   0xc002c14f
c0019079:	55                   	push   ebp
c001907a:	e8 19 78 fe ff       	call   c0000898 <strcmp>
c001907f:	83 c4 10             	add    esp,0x10
c0019082:	85 c0                	test   eax,eax
c0019084:	75 0f                	jne    c0019095 <CPU::detectFeatures()+0x2ff>
c0019086:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019090:	e9 cc 00 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c0019095:	50                   	push   eax
c0019096:	50                   	push   eax
c0019097:	68 5c c1 02 c0       	push   0xc002c15c
c001909c:	55                   	push   ebp
c001909d:	e8 f6 77 fe ff       	call   c0000898 <strcmp>
c00190a2:	83 c4 10             	add    esp,0x10
c00190a5:	85 c0                	test   eax,eax
c00190a7:	75 0f                	jne    c00190b8 <CPU::detectFeatures()+0x322>
c00190a9:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00190b3:	e9 a9 00 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c00190b8:	50                   	push   eax
c00190b9:	50                   	push   eax
c00190ba:	68 69 c1 02 c0       	push   0xc002c169
c00190bf:	55                   	push   ebp
c00190c0:	e8 d3 77 fe ff       	call   c0000898 <strcmp>
c00190c5:	83 c4 10             	add    esp,0x10
c00190c8:	85 c0                	test   eax,eax
c00190ca:	75 0f                	jne    c00190db <CPU::detectFeatures()+0x345>
c00190cc:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00190d6:	e9 86 00 00 00       	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c00190db:	50                   	push   eax
c00190dc:	50                   	push   eax
c00190dd:	68 76 c1 02 c0       	push   0xc002c176
c00190e2:	55                   	push   ebp
c00190e3:	e8 b0 77 fe ff       	call   c0000898 <strcmp>
c00190e8:	83 c4 10             	add    esp,0x10
c00190eb:	85 c0                	test   eax,eax
c00190ed:	75 0c                	jne    c00190fb <CPU::detectFeatures()+0x365>
c00190ef:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00190f9:	eb 66                	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c00190fb:	50                   	push   eax
c00190fc:	50                   	push   eax
c00190fd:	68 83 c1 02 c0       	push   0xc002c183
c0019102:	55                   	push   ebp
c0019103:	e8 90 77 fe ff       	call   c0000898 <strcmp>
c0019108:	83 c4 10             	add    esp,0x10
c001910b:	85 c0                	test   eax,eax
c001910d:	75 0c                	jne    c001911b <CPU::detectFeatures()+0x385>
c001910f:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0019119:	eb 46                	jmp    c0019161 <CPU::detectFeatures()+0x3cb>
c001911b:	57                   	push   edi
c001911c:	57                   	push   edi
c001911d:	68 90 c1 02 c0       	push   0xc002c190
c0019122:	55                   	push   ebp
c0019123:	e8 70 77 fe ff       	call   c0000898 <strcmp>
c0019128:	83 c4 10             	add    esp,0x10
c001912b:	85 c0                	test   eax,eax
c001912d:	74 e0                	je     c001910f <CPU::detectFeatures()+0x379>
c001912f:	56                   	push   esi
c0019130:	56                   	push   esi
c0019131:	68 9d c1 02 c0       	push   0xc002c19d
c0019136:	55                   	push   ebp
c0019137:	e8 5c 77 fe ff       	call   c0000898 <strcmp>
c001913c:	83 c4 10             	add    esp,0x10
c001913f:	85 c0                	test   eax,eax
c0019141:	74 cc                	je     c001910f <CPU::detectFeatures()+0x379>
c0019143:	51                   	push   ecx
c0019144:	51                   	push   ecx
c0019145:	68 aa c1 02 c0       	push   0xc002c1aa
c001914a:	55                   	push   ebp
c001914b:	e8 48 77 fe ff       	call   c0000898 <strcmp>
c0019150:	83 c4 10             	add    esp,0x10
c0019153:	85 c0                	test   eax,eax
c0019155:	74 b8                	je     c001910f <CPU::detectFeatures()+0x379>
c0019157:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019161:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0019166:	0f 86 be 00 00 00    	jbe    c001922a <CPU::detectFeatures()+0x494>
c001916c:	83 ec 0c             	sub    esp,0xc
c001916f:	68 80 00 00 00       	push   0x80
c0019174:	e8 b7 f8 ff ff       	call   c0018a30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019179:	83 e0 01             	and    eax,0x1
c001917c:	c1 e0 06             	shl    eax,0x6
c001917f:	88 c2                	mov    dl,al
c0019181:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019187:	83 e0 bf             	and    eax,0xffffffbf
c001918a:	09 d0                	or     eax,edx
c001918c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019192:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0019199:	e8 92 f8 ff ff       	call   c0018a30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001919e:	83 e0 01             	and    eax,0x1
c00191a1:	c1 e0 04             	shl    eax,0x4
c00191a4:	88 c2                	mov    dl,al
c00191a6:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191ac:	83 e0 ef             	and    eax,0xffffffef
c00191af:	09 d0                	or     eax,edx
c00191b1:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00191b7:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00191be:	e8 6d f8 ff ff       	call   c0018a30 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00191c3:	c1 e0 07             	shl    eax,0x7
c00191c6:	88 c2                	mov    dl,al
c00191c8:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191ce:	83 e0 7f             	and    eax,0x7f
c00191d1:	09 d0                	or     eax,edx
c00191d3:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191d9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00191e0:	e8 79 f8 ff ff       	call   c0018a5e <CPU::cpuidCheckExtendedECX(unsigned int)>
c00191e5:	83 e0 01             	and    eax,0x1
c00191e8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00191ef:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00191f5:	83 e0 f7             	and    eax,0xfffffff7
c00191f8:	09 d0                	or     eax,edx
c00191fa:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019200:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019207:	e8 52 f8 ff ff       	call   c0018a5e <CPU::cpuidCheckExtendedECX(unsigned int)>
c001920c:	83 c4 10             	add    esp,0x10
c001920f:	83 e0 01             	and    eax,0x1
c0019212:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0019219:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001921f:	83 e0 fb             	and    eax,0xfffffffb
c0019222:	09 d0                	or     eax,edx
c0019224:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001922a:	83 ec 0c             	sub    esp,0xc
c001922d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019231:	50                   	push   eax
c0019232:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019236:	50                   	push   eax
c0019237:	8d 74 24 28          	lea    esi,[esp+0x28]
c001923b:	56                   	push   esi
c001923c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019240:	50                   	push   eax
c0019241:	6a 01                	push   0x1
c0019243:	e8 08 f7 ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019248:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001924c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0019252:	88 ca                	mov    dl,cl
c0019254:	83 e0 f0             	and    eax,0xfffffff0
c0019257:	83 e2 0f             	and    edx,0xf
c001925a:	09 d0                	or     eax,edx
c001925c:	88 ca                	mov    dl,cl
c001925e:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019264:	c0 ea 04             	shr    dl,0x4
c0019267:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c001926b:	0f b6 c2             	movzx  eax,dl
c001926e:	83 c4 20             	add    esp,0x20
c0019271:	c1 e0 06             	shl    eax,0x6
c0019274:	89 c7                	mov    edi,eax
c0019276:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001927c:	66 25 3f c0          	and    ax,0xc03f
c0019280:	09 f8                	or     eax,edi
c0019282:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019289:	89 c8                	mov    eax,ecx
c001928b:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0019292:	c1 e8 08             	shr    eax,0x8
c0019295:	83 e5 3f             	and    ebp,0x3f
c0019298:	83 e0 0f             	and    eax,0xf
c001929b:	89 c7                	mov    edi,eax
c001929d:	c1 e7 06             	shl    edi,0x6
c00192a0:	09 ef                	or     edi,ebp
c00192a2:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c00192a9:	89 fa                	mov    edx,edi
c00192ab:	83 e5 c0             	and    ebp,0xffffffc0
c00192ae:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00192b4:	88 c2                	mov    dl,al
c00192b6:	c0 ea 02             	shr    dl,0x2
c00192b9:	89 d7                	mov    edi,edx
c00192bb:	09 ef                	or     edi,ebp
c00192bd:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00192c3:	89 fa                	mov    edx,edi
c00192c5:	83 e5 cf             	and    ebp,0xffffffcf
c00192c8:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00192ce:	89 cf                	mov    edi,ecx
c00192d0:	c1 ef 0c             	shr    edi,0xc
c00192d3:	83 e7 03             	and    edi,0x3
c00192d6:	c1 e7 04             	shl    edi,0x4
c00192d9:	09 ef                	or     edi,ebp
c00192db:	3c 06                	cmp    al,0x6
c00192dd:	89 fa                	mov    edx,edi
c00192df:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00192e5:	74 04                	je     c00192eb <CPU::detectFeatures()+0x555>
c00192e7:	3c 0f                	cmp    al,0xf
c00192e9:	75 5c                	jne    c0019347 <CPU::detectFeatures()+0x5b1>
c00192eb:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00192ef:	89 cf                	mov    edi,ecx
c00192f1:	c1 ef 10             	shr    edi,0x10
c00192f4:	c1 e7 04             	shl    edi,0x4
c00192f7:	09 fa                	or     edx,edi
c00192f9:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c00192ff:	0f b6 d2             	movzx  edx,dl
c0019302:	66 81 e7 3f c0       	and    di,0xc03f
c0019307:	c1 e2 06             	shl    edx,0x6
c001930a:	09 fa                	or     edx,edi
c001930c:	3c 0f                	cmp    al,0xf
c001930e:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0019315:	75 30                	jne    c0019347 <CPU::detectFeatures()+0x5b1>
c0019317:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c001931d:	c1 e9 14             	shr    ecx,0x14
c0019320:	83 e0 3f             	and    eax,0x3f
c0019323:	83 c1 0f             	add    ecx,0xf
c0019326:	88 ca                	mov    dl,cl
c0019328:	c0 e9 02             	shr    cl,0x2
c001932b:	c1 e2 06             	shl    edx,0x6
c001932e:	09 d0                	or     eax,edx
c0019330:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019336:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c001933c:	83 e0 c0             	and    eax,0xffffffc0
c001933f:	09 c1                	or     ecx,eax
c0019341:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019347:	83 ec 0c             	sub    esp,0xc
c001934a:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019351:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019355:	50                   	push   eax
c0019356:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001935a:	55                   	push   ebp
c001935b:	56                   	push   esi
c001935c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019360:	57                   	push   edi
c0019361:	68 00 00 00 80       	push   0x80000000
c0019366:	e8 e5 f5 ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001936b:	83 c4 20             	add    esp,0x20
c001936e:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0019376:	76 22                	jbe    c001939a <CPU::detectFeatures()+0x604>
c0019378:	83 ec 0c             	sub    esp,0xc
c001937b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001937f:	50                   	push   eax
c0019380:	55                   	push   ebp
c0019381:	56                   	push   esi
c0019382:	57                   	push   edi
c0019383:	68 01 00 00 80       	push   0x80000001
c0019388:	e8 c3 f5 ff ff       	call   c0018950 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001938d:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0019397:	83 c4 20             	add    esp,0x20
c001939a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00193a0:	83 f8 01             	cmp    eax,0x1
c00193a3:	75 6f                	jne    c0019414 <CPU::detectFeatures()+0x67e>
c00193a5:	51                   	push   ecx
c00193a6:	51                   	push   ecx
c00193a7:	68 b6 c1 02 c0       	push   0xc002c1b6
c00193ac:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00193b0:	56                   	push   esi
c00193b1:	e8 56 74 fe ff       	call   c000080c <strcpy>
c00193b6:	5f                   	pop    edi
c00193b7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193bd:	5d                   	pop    ebp
c00193be:	66 c1 e8 06          	shr    ax,0x6
c00193c2:	0f b6 c0             	movzx  eax,al
c00193c5:	50                   	push   eax
c00193c6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193cc:	c1 e8 0e             	shr    eax,0xe
c00193cf:	0f b6 c0             	movzx  eax,al
c00193d2:	50                   	push   eax
c00193d3:	e8 22 f2 ff ff       	call   c00185fa <CPU::lookupIntelName(unsigned char, unsigned char)>
c00193d8:	5a                   	pop    edx
c00193d9:	59                   	pop    ecx
c00193da:	50                   	push   eax
c00193db:	56                   	push   esi
c00193dc:	e8 6b 75 fe ff       	call   c000094c <strcat>
c00193e1:	5f                   	pop    edi
c00193e2:	5d                   	pop    ebp
c00193e3:	56                   	push   esi
c00193e4:	53                   	push   ebx
c00193e5:	e8 c0 aa ff ff       	call   c0013eaa <Device::setName(char const*)>
c00193ea:	58                   	pop    eax
c00193eb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00193f1:	5a                   	pop    edx
c00193f2:	68 bd c1 02 c0       	push   0xc002c1bd
c00193f7:	50                   	push   eax
c00193f8:	e8 9b 74 fe ff       	call   c0000898 <strcmp>
c00193fd:	83 c4 10             	add    esp,0x10
c0019400:	85 c0                	test   eax,eax
c0019402:	0f 85 71 03 00 00    	jne    c0019779 <CPU::detectFeatures()+0x9e3>
c0019408:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001940f:	e9 65 03 00 00       	jmp    c0019779 <CPU::detectFeatures()+0x9e3>
c0019414:	83 f8 02             	cmp    eax,0x2
c0019417:	0f 85 b5 00 00 00    	jne    c00194d2 <CPU::detectFeatures()+0x73c>
c001941d:	57                   	push   edi
c001941e:	57                   	push   edi
c001941f:	68 cf c1 02 c0       	push   0xc002c1cf
c0019424:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019428:	56                   	push   esi
c0019429:	e8 de 73 fe ff       	call   c000080c <strcpy>
c001942e:	5d                   	pop    ebp
c001942f:	58                   	pop    eax
c0019430:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019436:	66 c1 e8 06          	shr    ax,0x6
c001943a:	0f b6 c0             	movzx  eax,al
c001943d:	50                   	push   eax
c001943e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019444:	c1 e8 0e             	shr    eax,0xe
c0019447:	0f b6 c0             	movzx  eax,al
c001944a:	50                   	push   eax
c001944b:	e8 16 f0 ff ff       	call   c0018466 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019450:	5a                   	pop    edx
c0019451:	59                   	pop    ecx
c0019452:	50                   	push   eax
c0019453:	56                   	push   esi
c0019454:	e8 f3 74 fe ff       	call   c000094c <strcat>
c0019459:	5f                   	pop    edi
c001945a:	5d                   	pop    ebp
c001945b:	56                   	push   esi
c001945c:	53                   	push   ebx
c001945d:	e8 48 aa ff ff       	call   c0013eaa <Device::setName(char const*)>
c0019462:	58                   	pop    eax
c0019463:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019469:	5a                   	pop    edx
c001946a:	68 d4 c1 02 c0       	push   0xc002c1d4
c001946f:	50                   	push   eax
c0019470:	e8 23 74 fe ff       	call   c0000898 <strcmp>
c0019475:	83 c4 10             	add    esp,0x10
c0019478:	85 c0                	test   eax,eax
c001947a:	75 20                	jne    c001949c <CPU::detectFeatures()+0x706>
c001947c:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c0019482:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0019488:	a8 01                	test   al,0x1
c001948a:	74 10                	je     c001949c <CPU::detectFeatures()+0x706>
c001948c:	83 e0 fe             	and    eax,0xfffffffe
c001948f:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0019495:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c001949c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194a2:	c1 e8 0e             	shr    eax,0xe
c00194a5:	3c 05                	cmp    al,0x5
c00194a7:	0f 85 cc 02 00 00    	jne    c0019779 <CPU::detectFeatures()+0x9e3>
c00194ad:	56                   	push   esi
c00194ae:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00194b4:	83 e0 0f             	and    eax,0xf
c00194b7:	50                   	push   eax
c00194b8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00194be:	66 c1 e8 06          	shr    ax,0x6
c00194c2:	0f b6 c0             	movzx  eax,al
c00194c5:	50                   	push   eax
c00194c6:	6a 05                	push   0x5
c00194c8:	e8 0f f4 ff ff       	call   c00188dc <CPU::AMD_K6_writeback(int, int, int)>
c00194cd:	e9 1f 02 00 00       	jmp    c00196f1 <CPU::detectFeatures()+0x95b>
c00194d2:	8d 50 fd             	lea    edx,[eax-0x3]
c00194d5:	83 fa 01             	cmp    edx,0x1
c00194d8:	76 09                	jbe    c00194e3 <CPU::detectFeatures()+0x74d>
c00194da:	83 f8 06             	cmp    eax,0x6
c00194dd:	0f 85 91 01 00 00    	jne    c0019674 <CPU::detectFeatures()+0x8de>
c00194e3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00194e9:	c1 ea 0e             	shr    edx,0xe
c00194ec:	80 fa 05             	cmp    dl,0x5
c00194ef:	75 7b                	jne    c001956c <CPU::detectFeatures()+0x7d6>
c00194f1:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00194f7:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00194fc:	66 81 fa 00 01       	cmp    dx,0x100
c0019501:	75 0c                	jne    c001950f <CPU::detectFeatures()+0x779>
c0019503:	51                   	push   ecx
c0019504:	51                   	push   ecx
c0019505:	68 db c1 02 c0       	push   0xc002c1db
c001950a:	e9 dc 01 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c001950f:	66 81 fa 00 02       	cmp    dx,0x200
c0019514:	75 0c                	jne    c0019522 <CPU::detectFeatures()+0x78c>
c0019516:	52                   	push   edx
c0019517:	52                   	push   edx
c0019518:	68 ee c1 02 c0       	push   0xc002c1ee
c001951d:	e9 c9 01 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c0019522:	66 81 fa 40 02       	cmp    dx,0x240
c0019527:	75 0c                	jne    c0019535 <CPU::detectFeatures()+0x79f>
c0019529:	50                   	push   eax
c001952a:	50                   	push   eax
c001952b:	68 00 c2 02 c0       	push   0xc002c200
c0019530:	e9 b6 01 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c0019535:	83 f8 06             	cmp    eax,0x6
c0019538:	75 0c                	jne    c0019546 <CPU::detectFeatures()+0x7b0>
c001953a:	50                   	push   eax
c001953b:	50                   	push   eax
c001953c:	68 12 c2 02 c0       	push   0xc002c212
c0019541:	e9 a5 01 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c0019546:	83 f8 04             	cmp    eax,0x4
c0019549:	75 0c                	jne    c0019557 <CPU::detectFeatures()+0x7c1>
c001954b:	50                   	push   eax
c001954c:	50                   	push   eax
c001954d:	68 1e c2 02 c0       	push   0xc002c21e
c0019552:	e9 94 01 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c0019557:	83 f8 03             	cmp    eax,0x3
c001955a:	0f 85 19 02 00 00    	jne    c0019779 <CPU::detectFeatures()+0x9e3>
c0019560:	50                   	push   eax
c0019561:	50                   	push   eax
c0019562:	68 26 c2 02 c0       	push   0xc002c226
c0019567:	e9 7f 01 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c001956c:	80 fa 06             	cmp    dl,0x6
c001956f:	0f 85 db 00 00 00    	jne    c0019650 <CPU::detectFeatures()+0x8ba>
c0019575:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001957b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019580:	66 81 fa 80 01       	cmp    dx,0x180
c0019585:	75 0c                	jne    c0019593 <CPU::detectFeatures()+0x7fd>
c0019587:	50                   	push   eax
c0019588:	50                   	push   eax
c0019589:	68 31 c2 02 c0       	push   0xc002c231
c001958e:	e9 58 01 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c0019593:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0019599:	66 f7 c1 80 ff       	test   cx,0xff80
c001959e:	75 0c                	jne    c00195ac <CPU::detectFeatures()+0x816>
c00195a0:	50                   	push   eax
c00195a1:	50                   	push   eax
c00195a2:	68 41 c2 02 c0       	push   0xc002c241
c00195a7:	e9 3f 01 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c00195ac:	66 81 fa 40 02       	cmp    dx,0x240
c00195b1:	75 0c                	jne    c00195bf <CPU::detectFeatures()+0x829>
c00195b3:	55                   	push   ebp
c00195b4:	55                   	push   ebp
c00195b5:	68 48 c2 02 c0       	push   0xc002c248
c00195ba:	e9 2c 01 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c00195bf:	66 81 fa 80 02       	cmp    dx,0x280
c00195c4:	75 0c                	jne    c00195d2 <CPU::detectFeatures()+0x83c>
c00195c6:	57                   	push   edi
c00195c7:	57                   	push   edi
c00195c8:	68 51 c2 02 c0       	push   0xc002c251
c00195cd:	e9 19 01 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c00195d2:	66 81 fa 40 03       	cmp    dx,0x340
c00195d7:	74 ed                	je     c00195c6 <CPU::detectFeatures()+0x830>
c00195d9:	66 81 fa c0 03       	cmp    dx,0x3c0
c00195de:	75 0c                	jne    c00195ec <CPU::detectFeatures()+0x856>
c00195e0:	56                   	push   esi
c00195e1:	56                   	push   esi
c00195e2:	68 58 c2 02 c0       	push   0xc002c258
c00195e7:	e9 ff 00 00 00       	jmp    c00196eb <CPU::detectFeatures()+0x955>
c00195ec:	83 f8 06             	cmp    eax,0x6
c00195ef:	0f 84 45 ff ff ff    	je     c001953a <CPU::detectFeatures()+0x7a4>
c00195f5:	83 f8 04             	cmp    eax,0x4
c00195f8:	0f 84 4d ff ff ff    	je     c001954b <CPU::detectFeatures()+0x7b5>
c00195fe:	83 f8 03             	cmp    eax,0x3
c0019601:	0f 85 72 01 00 00    	jne    c0019779 <CPU::detectFeatures()+0x9e3>
c0019607:	51                   	push   ecx
c0019608:	51                   	push   ecx
c0019609:	68 61 c2 02 c0       	push   0xc002c261
c001960e:	53                   	push   ebx
c001960f:	e8 96 a8 ff ff       	call   c0013eaa <Device::setName(char const*)>
c0019614:	b1 c1                	mov    cl,0xc1
c0019616:	88 c8                	mov    al,cl
c0019618:	e6 22                	out    0x22,al
c001961a:	e4 23                	in     al,0x23
c001961c:	88 c2                	mov    dl,al
c001961e:	88 c8                	mov    al,cl
c0019620:	e6 22                	out    0x22,al
c0019622:	88 d0                	mov    al,dl
c0019624:	83 c8 10             	or     eax,0x10
c0019627:	e6 23                	out    0x23,al
c0019629:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019630:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019633:	89 d0                	mov    eax,edx
c0019635:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c001963b:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c001963f:	40                   	inc    eax
c0019640:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019646:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001964b:	e9 a1 00 00 00       	jmp    c00196f1 <CPU::detectFeatures()+0x95b>
c0019650:	83 f8 06             	cmp    eax,0x6
c0019653:	0f 84 e1 fe ff ff    	je     c001953a <CPU::detectFeatures()+0x7a4>
c0019659:	83 f8 04             	cmp    eax,0x4
c001965c:	0f 84 e9 fe ff ff    	je     c001954b <CPU::detectFeatures()+0x7b5>
c0019662:	83 f8 03             	cmp    eax,0x3
c0019665:	0f 85 0e 01 00 00    	jne    c0019779 <CPU::detectFeatures()+0x9e3>
c001966b:	52                   	push   edx
c001966c:	52                   	push   edx
c001966d:	68 6c c2 02 c0       	push   0xc002c26c
c0019672:	eb 77                	jmp    c00196eb <CPU::detectFeatures()+0x955>
c0019674:	83 f8 07             	cmp    eax,0x7
c0019677:	75 09                	jne    c0019682 <CPU::detectFeatures()+0x8ec>
c0019679:	50                   	push   eax
c001967a:	50                   	push   eax
c001967b:	68 76 c2 02 c0       	push   0xc002c276
c0019680:	eb 69                	jmp    c00196eb <CPU::detectFeatures()+0x955>
c0019682:	83 f8 0a             	cmp    eax,0xa
c0019685:	75 09                	jne    c0019690 <CPU::detectFeatures()+0x8fa>
c0019687:	50                   	push   eax
c0019688:	50                   	push   eax
c0019689:	68 81 c2 02 c0       	push   0xc002c281
c001968e:	eb 5b                	jmp    c00196eb <CPU::detectFeatures()+0x955>
c0019690:	83 f8 0b             	cmp    eax,0xb
c0019693:	75 09                	jne    c001969e <CPU::detectFeatures()+0x908>
c0019695:	50                   	push   eax
c0019696:	50                   	push   eax
c0019697:	68 89 c2 02 c0       	push   0xc002c289
c001969c:	eb 4d                	jmp    c00196eb <CPU::detectFeatures()+0x955>
c001969e:	83 f8 08             	cmp    eax,0x8
c00196a1:	75 09                	jne    c00196ac <CPU::detectFeatures()+0x916>
c00196a3:	50                   	push   eax
c00196a4:	50                   	push   eax
c00196a5:	68 92 c2 02 c0       	push   0xc002c292
c00196aa:	eb 3f                	jmp    c00196eb <CPU::detectFeatures()+0x955>
c00196ac:	83 f8 09             	cmp    eax,0x9
c00196af:	75 09                	jne    c00196ba <CPU::detectFeatures()+0x924>
c00196b1:	50                   	push   eax
c00196b2:	50                   	push   eax
c00196b3:	68 9a c2 02 c0       	push   0xc002c29a
c00196b8:	eb 31                	jmp    c00196eb <CPU::detectFeatures()+0x955>
c00196ba:	83 f8 05             	cmp    eax,0x5
c00196bd:	75 09                	jne    c00196c8 <CPU::detectFeatures()+0x932>
c00196bf:	50                   	push   eax
c00196c0:	50                   	push   eax
c00196c1:	68 a2 c2 02 c0       	push   0xc002c2a2
c00196c6:	eb 23                	jmp    c00196eb <CPU::detectFeatures()+0x955>
c00196c8:	83 f8 0c             	cmp    eax,0xc
c00196cb:	75 09                	jne    c00196d6 <CPU::detectFeatures()+0x940>
c00196cd:	55                   	push   ebp
c00196ce:	55                   	push   ebp
c00196cf:	68 b0 c2 02 c0       	push   0xc002c2b0
c00196d4:	eb 15                	jmp    c00196eb <CPU::detectFeatures()+0x955>
c00196d6:	83 f8 0d             	cmp    eax,0xd
c00196d9:	75 09                	jne    c00196e4 <CPU::detectFeatures()+0x94e>
c00196db:	57                   	push   edi
c00196dc:	57                   	push   edi
c00196dd:	68 bb c2 02 c0       	push   0xc002c2bb
c00196e2:	eb 07                	jmp    c00196eb <CPU::detectFeatures()+0x955>
c00196e4:	56                   	push   esi
c00196e5:	56                   	push   esi
c00196e6:	68 cf c2 02 c0       	push   0xc002c2cf
c00196eb:	53                   	push   ebx
c00196ec:	e8 b9 a7 ff ff       	call   c0013eaa <Device::setName(char const*)>
c00196f1:	83 c4 10             	add    esp,0x10
c00196f4:	e9 80 00 00 00       	jmp    c0019779 <CPU::detectFeatures()+0x9e3>
c00196f9:	51                   	push   ecx
c00196fa:	51                   	push   ecx
c00196fb:	68 1b c1 02 c0       	push   0xc002c11b
c0019700:	55                   	push   ebp
c0019701:	e8 06 71 fe ff       	call   c000080c <strcpy>
c0019706:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019710:	e8 99 6b fe ff       	call   c00002ae <is486>
c0019715:	83 c4 10             	add    esp,0x10
c0019718:	85 c0                	test   eax,eax
c001971a:	74 2b                	je     c0019747 <CPU::detectFeatures()+0x9b1>
c001971c:	52                   	push   edx
c001971d:	52                   	push   edx
c001971e:	68 db c2 02 c0       	push   0xc002c2db
c0019723:	53                   	push   ebx
c0019724:	e8 81 a7 ff ff       	call   c0013eaa <Device::setName(char const*)>
c0019729:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019730:	0f 20 c0             	mov    eax,cr0
c0019733:	83 e0 14             	and    eax,0x14
c0019736:	83 c4 10             	add    esp,0x10
c0019739:	83 f8 04             	cmp    eax,0x4
c001973c:	75 1f                	jne    c001975d <CPU::detectFeatures()+0x9c7>
c001973e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019745:	eb 32                	jmp    c0019779 <CPU::detectFeatures()+0x9e3>
c0019747:	50                   	push   eax
c0019748:	50                   	push   eax
c0019749:	68 e6 c2 02 c0       	push   0xc002c2e6
c001974e:	53                   	push   ebx
c001974f:	e8 56 a7 ff ff       	call   c0013eaa <Device::setName(char const*)>
c0019754:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001975b:	eb d3                	jmp    c0019730 <CPU::detectFeatures()+0x99a>
c001975d:	e8 27 6b fe ff       	call   c0000289 <hasLegacyFPU>
c0019762:	83 e0 01             	and    eax,0x1
c0019765:	8d 14 00             	lea    edx,[eax+eax*1]
c0019768:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001976e:	83 e0 fd             	and    eax,0xfffffffd
c0019771:	09 d0                	or     eax,edx
c0019773:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019779:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019780:	83 c4 4c             	add    esp,0x4c
c0019783:	5b                   	pop    ebx
c0019784:	5e                   	pop    esi
c0019785:	5f                   	pop    edi
c0019786:	5d                   	pop    ebp
c0019787:	c3                   	ret    

c0019788 <CPU::setupSMEP()>:
c0019788:	0f 20 e0             	mov    eax,cr4
c001978b:	0d 00 00 10 00       	or     eax,0x100000
c0019790:	0f 22 e0             	mov    cr4,eax
c0019793:	c3                   	ret    

c0019794 <CPU::setupUMIP()>:
c0019794:	0f 20 e0             	mov    eax,cr4
c0019797:	80 cc 08             	or     ah,0x8
c001979a:	0f 22 e0             	mov    cr4,eax
c001979d:	c3                   	ret    

c001979e <CPU::setupTSC()>:
c001979e:	0f 20 e0             	mov    eax,cr4
c00197a1:	83 c8 04             	or     eax,0x4
c00197a4:	0f 22 e0             	mov    cr4,eax
c00197a7:	c3                   	ret    

c00197a8 <CPU::setupLargePages()>:
c00197a8:	0f 20 e0             	mov    eax,cr4
c00197ab:	83 c8 10             	or     eax,0x10
c00197ae:	0f 22 e0             	mov    cr4,eax
c00197b1:	c3                   	ret    

c00197b2 <CPU::setupPAT()>:
c00197b2:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00197b7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00197be:	74 2c                	je     c00197ec <CPU::setupPAT()+0x3a>
c00197c0:	53                   	push   ebx
c00197c1:	83 ec 10             	sub    esp,0x10
c00197c4:	68 77 02 00 00       	push   0x277
c00197c9:	50                   	push   eax
c00197ca:	e8 63 56 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c00197cf:	83 e2 f8             	and    edx,0xfffffff8
c00197d2:	83 ca 01             	or     edx,0x1
c00197d5:	52                   	push   edx
c00197d6:	50                   	push   eax
c00197d7:	68 77 02 00 00       	push   0x277
c00197dc:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c00197e2:	e8 77 56 ff ff       	call   c000ee5e <Computer::wrmsr(unsigned int, unsigned long long)>
c00197e7:	83 c4 28             	add    esp,0x28
c00197ea:	5b                   	pop    ebx
c00197eb:	c3                   	ret    
c00197ec:	c3                   	ret    
c00197ed:	90                   	nop

c00197ee <CPU::setupMTRR()>:
c00197ee:	c3                   	ret    
c00197ef:	90                   	nop

c00197f0 <CPU::setupGlobalPages()>:
c00197f0:	0f 20 e0             	mov    eax,cr4
c00197f3:	0c 80                	or     al,0x80
c00197f5:	0f 22 e0             	mov    cr4,eax
c00197f8:	c3                   	ret    
c00197f9:	90                   	nop

c00197fa <CPU::allowUsermodeDataAccess()>:
c00197fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197fe:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019805:	74 03                	je     c001980a <CPU::allowUsermodeDataAccess()+0x10>
c0019807:	0f 01 cb             	stac   
c001980a:	c3                   	ret    
c001980b:	90                   	nop

c001980c <CPU::prohibitUsermodeDataAccess()>:
c001980c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019810:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019817:	74 03                	je     c001981c <CPU::prohibitUsermodeDataAccess()+0x10>
c0019819:	0f 01 ca             	clac   
c001981c:	c3                   	ret    
c001981d:	90                   	nop

c001981e <CPU::setupSMAP()>:
c001981e:	0f 20 e0             	mov    eax,cr4
c0019821:	0d 00 00 20 00       	or     eax,0x200000
c0019826:	0f 22 e0             	mov    cr4,eax
c0019829:	eb e1                	jmp    c001980c <CPU::prohibitUsermodeDataAccess()>
c001982b:	90                   	nop

c001982c <CPU::setupFeatures()>:
c001982c:	83 ec 0c             	sub    esp,0xc
c001982f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019833:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c001983a:	74 07                	je     c0019843 <CPU::setupFeatures()+0x17>
c001983c:	52                   	push   edx
c001983d:	e8 46 ff ff ff       	call   c0019788 <CPU::setupSMEP()>
c0019842:	58                   	pop    eax
c0019843:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c001984a:	74 07                	je     c0019853 <CPU::setupFeatures()+0x27>
c001984c:	52                   	push   edx
c001984d:	e8 cc ff ff ff       	call   c001981e <CPU::setupSMAP()>
c0019852:	58                   	pop    eax
c0019853:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c001985a:	74 07                	je     c0019863 <CPU::setupFeatures()+0x37>
c001985c:	52                   	push   edx
c001985d:	e8 32 ff ff ff       	call   c0019794 <CPU::setupUMIP()>
c0019862:	58                   	pop    eax
c0019863:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c001986a:	74 07                	je     c0019873 <CPU::setupFeatures()+0x47>
c001986c:	52                   	push   edx
c001986d:	e8 2c ff ff ff       	call   c001979e <CPU::setupTSC()>
c0019872:	58                   	pop    eax
c0019873:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001987a:	74 07                	je     c0019883 <CPU::setupFeatures()+0x57>
c001987c:	52                   	push   edx
c001987d:	e8 26 ff ff ff       	call   c00197a8 <CPU::setupLargePages()>
c0019882:	59                   	pop    ecx
c0019883:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001988a:	74 07                	je     c0019893 <CPU::setupFeatures()+0x67>
c001988c:	52                   	push   edx
c001988d:	e8 5e ff ff ff       	call   c00197f0 <CPU::setupGlobalPages()>
c0019892:	58                   	pop    eax
c0019893:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001989a:	74 0c                	je     c00198a8 <CPU::setupFeatures()+0x7c>
c001989c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00198a0:	83 c4 0c             	add    esp,0xc
c00198a3:	e9 0a ff ff ff       	jmp    c00197b2 <CPU::setupPAT()>
c00198a8:	83 c4 0c             	add    esp,0xc
c00198ab:	c3                   	ret    

c00198ac <CPU::open(int, int, void*)>:
c00198ac:	57                   	push   edi
c00198ad:	56                   	push   esi
c00198ae:	53                   	push   ebx
c00198af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00198b3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00198b7:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00198bd:	83 ec 0c             	sub    esp,0xc
c00198c0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00198c6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c00198cc:	50                   	push   eax
c00198cd:	e8 4c 58 ff ff       	call   c000f11e <GDT::setup()>
c00198d2:	83 c4 0c             	add    esp,0xc
c00198d5:	6a 00                	push   0x0
c00198d7:	68 ef be ad de       	push   0xdeadbeef
c00198dc:	57                   	push   edi
c00198dd:	e8 04 75 ff ff       	call   c0010de6 <TSS::setup(unsigned long, unsigned long)>
c00198e2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00198e5:	e8 dc 74 ff ff       	call   c0010dc6 <TSS::flush()>
c00198ea:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00198f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00198f3:	e8 8a 5a ff ff       	call   c000f382 <IDT::setup()>
c00198f8:	b8 00 04 00 00       	mov    eax,0x400
c00198fd:	0f 23 f8             	mov    db7,eax
c0019900:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c001990a:	e8 2e 62 ff ff       	call   c000fb3d <Phys::allocatePage()>
c001990f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019915:	89 30                	mov    DWORD PTR [eax],esi
c0019917:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001991d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019920:	58                   	pop    eax
c0019921:	5a                   	pop    edx
c0019922:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019928:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001992c:	e8 55 86 ff ff       	call   c0011f86 <VAS::setCPUSpecific(unsigned long)>
c0019931:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019934:	e8 5d f4 ff ff       	call   c0018d96 <CPU::detectFeatures()>
c0019939:	e8 9e b9 ff ff       	call   c00152dc <setupInterruptController()>
c001993e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019944:	a1 60 ee 02 c0       	mov    eax,ds:0xc002ee60
c0019949:	83 e0 10             	and    eax,0x10
c001994c:	83 f8 01             	cmp    eax,0x1
c001994f:	19 c0                	sbb    eax,eax
c0019951:	83 e0 46             	and    eax,0x46
c0019954:	83 c0 1e             	add    eax,0x1e
c0019957:	89 04 24             	mov    DWORD PTR [esp],eax
c001995a:	e8 d4 cf ff ff       	call   c0016933 <setupTimer(int)>
c001995f:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019965:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019968:	e8 bf fe ff ff       	call   c001982c <CPU::setupFeatures()>
c001996d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019970:	e8 a5 f1 ff ff       	call   c0018b1a <CPU::displayFeatures()>
c0019975:	83 c4 10             	add    esp,0x10
c0019978:	31 c0                	xor    eax,eax
c001997a:	5b                   	pop    ebx
c001997b:	5e                   	pop    esi
c001997c:	5f                   	pop    edi
c001997d:	c3                   	ret    

c001997e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001997e:	57                   	push   edi
c001997f:	56                   	push   esi
c0019980:	53                   	push   ebx
c0019981:	51                   	push   ecx
c0019982:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019986:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019989:	0f 02 c0             	lar    eax,ax
c001998c:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001998f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019993:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019996:	88 ca                	mov    dl,cl
c0019998:	c0 ea 06             	shr    dl,0x6
c001999b:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001999f:	89 ca                	mov    edx,ecx
c00199a1:	66 c1 ea 03          	shr    dx,0x3
c00199a5:	83 e2 07             	and    edx,0x7
c00199a8:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00199ad:	88 17                	mov    BYTE PTR [edi],dl
c00199af:	0f 84 a6 01 00 00    	je     c0019b5b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00199b5:	83 e1 07             	and    ecx,0x7
c00199b8:	80 f9 04             	cmp    cl,0x4
c00199bb:	0f 84 98 00 00 00    	je     c0019a59 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00199c1:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00199c6:	0f 95 c0             	setne  al
c00199c9:	80 f9 05             	cmp    cl,0x5
c00199cc:	0f 95 c2             	setne  dl
c00199cf:	08 c2                	or     dl,al
c00199d1:	74 79                	je     c0019a4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00199d3:	84 c9                	test   cl,cl
c00199d5:	75 05                	jne    c00199dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c00199d7:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c00199da:	eb 3c                	jmp    c0019a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199dc:	80 f9 01             	cmp    cl,0x1
c00199df:	75 05                	jne    c00199e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c00199e1:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00199e4:	eb 32                	jmp    c0019a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199e6:	80 f9 02             	cmp    cl,0x2
c00199e9:	75 05                	jne    c00199f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c00199eb:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00199ee:	eb 28                	jmp    c0019a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199f0:	31 c0                	xor    eax,eax
c00199f2:	80 f9 03             	cmp    cl,0x3
c00199f5:	75 05                	jne    c00199fc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c00199f7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00199fa:	eb 1c                	jmp    c0019a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00199fc:	80 f9 05             	cmp    cl,0x5
c00199ff:	75 05                	jne    c0019a06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019a01:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019a04:	eb 12                	jmp    c0019a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a06:	80 f9 06             	cmp    cl,0x6
c0019a09:	75 05                	jne    c0019a10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019a0b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019a0e:	eb 08                	jmp    c0019a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a10:	80 f9 07             	cmp    cl,0x7
c0019a13:	75 03                	jne    c0019a18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019a15:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019a18:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019a1d:	75 10                	jne    c0019a2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019a1f:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019a23:	b9 03 00 00 00       	mov    ecx,0x3
c0019a28:	01 d0                	add    eax,edx
c0019a2a:	e9 37 01 00 00       	jmp    c0019b66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a2f:	b9 02 00 00 00       	mov    ecx,0x2
c0019a34:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019a39:	0f 85 27 01 00 00    	jne    c0019b66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a3f:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019a42:	b9 06 00 00 00       	mov    ecx,0x6
c0019a47:	e9 1a 01 00 00       	jmp    c0019b66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a4c:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019a4f:	b9 06 00 00 00       	mov    ecx,0x6
c0019a54:	e9 0f 01 00 00       	jmp    c0019b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a59:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019a5c:	88 ca                	mov    dl,cl
c0019a5e:	c0 ea 06             	shr    dl,0x6
c0019a61:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019a65:	89 ca                	mov    edx,ecx
c0019a67:	66 c1 ea 03          	shr    dx,0x3
c0019a6b:	83 e2 07             	and    edx,0x7
c0019a6e:	80 e1 07             	and    cl,0x7
c0019a71:	75 05                	jne    c0019a78 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019a73:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019a76:	eb 4c                	jmp    c0019ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a78:	80 f9 01             	cmp    cl,0x1
c0019a7b:	75 05                	jne    c0019a82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019a7d:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019a80:	eb 42                	jmp    c0019ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a82:	80 f9 02             	cmp    cl,0x2
c0019a85:	75 05                	jne    c0019a8c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019a87:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019a8a:	eb 38                	jmp    c0019ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a8c:	80 f9 03             	cmp    cl,0x3
c0019a8f:	75 05                	jne    c0019a96 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019a91:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019a94:	eb 2e                	jmp    c0019ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019a96:	80 f9 04             	cmp    cl,0x4
c0019a99:	75 12                	jne    c0019aad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019a9b:	f6 c4 60             	test   ah,0x60
c0019a9e:	75 08                	jne    c0019aa8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019aa0:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019aa3:	8d 78 14             	lea    edi,[eax+0x14]
c0019aa6:	eb 1c                	jmp    c0019ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019aa8:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019aab:	eb 17                	jmp    c0019ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019aad:	80 f9 05             	cmp    cl,0x5
c0019ab0:	75 05                	jne    c0019ab7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019ab2:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019ab5:	eb 0d                	jmp    c0019ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ab7:	80 f9 06             	cmp    cl,0x6
c0019aba:	75 05                	jne    c0019ac1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019abc:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019abf:	eb 03                	jmp    c0019ac4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ac1:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019ac4:	84 d2                	test   dl,dl
c0019ac6:	75 05                	jne    c0019acd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019ac8:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019acb:	eb 3c                	jmp    c0019b09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019acd:	80 fa 01             	cmp    dl,0x1
c0019ad0:	75 05                	jne    c0019ad7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019ad2:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ad5:	eb 32                	jmp    c0019b09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ad7:	80 fa 02             	cmp    dl,0x2
c0019ada:	75 05                	jne    c0019ae1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019adc:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019adf:	eb 28                	jmp    c0019b09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ae1:	80 fa 03             	cmp    dl,0x3
c0019ae4:	75 05                	jne    c0019aeb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019ae6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ae9:	eb 1e                	jmp    c0019b09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019aeb:	31 c0                	xor    eax,eax
c0019aed:	80 fa 04             	cmp    dl,0x4
c0019af0:	74 17                	je     c0019b09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019af2:	80 fa 05             	cmp    dl,0x5
c0019af5:	75 05                	jne    c0019afc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019af7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019afa:	eb 0d                	jmp    c0019b09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019afc:	80 fa 06             	cmp    dl,0x6
c0019aff:	75 05                	jne    c0019b06 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019b01:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019b04:	eb 03                	jmp    c0019b09 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019b06:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019b09:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b0e:	0f 94 c2             	sete   dl
c0019b11:	80 f9 05             	cmp    cl,0x5
c0019b14:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019b18:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019b1d:	d3 e0                	shl    eax,cl
c0019b1f:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019b23:	74 0a                	je     c0019b2f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019b25:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019b28:	b9 07 00 00 00       	mov    ecx,0x7
c0019b2d:	eb 37                	jmp    c0019b66 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019b2f:	01 f8                	add    eax,edi
c0019b31:	b9 03 00 00 00       	mov    ecx,0x3
c0019b36:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019b3b:	74 2b                	je     c0019b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b3d:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019b42:	75 0d                	jne    c0019b51 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019b44:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019b48:	01 c8                	add    eax,ecx
c0019b4a:	b9 04 00 00 00       	mov    ecx,0x4
c0019b4f:	eb 17                	jmp    c0019b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b51:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019b54:	b9 07 00 00 00       	mov    ecx,0x7
c0019b59:	eb 0d                	jmp    c0019b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b5b:	b9 02 00 00 00       	mov    ecx,0x2
c0019b60:	b2 01                	mov    dl,0x1
c0019b62:	31 c0                	xor    eax,eax
c0019b64:	eb 02                	jmp    c0019b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019b66:	31 d2                	xor    edx,edx
c0019b68:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019b6c:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019b6e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019b72:	88 11                	mov    BYTE PTR [ecx],dl
c0019b74:	5a                   	pop    edx
c0019b75:	5b                   	pop    ebx
c0019b76:	5e                   	pop    esi
c0019b77:	5f                   	pop    edi
c0019b78:	c3                   	ret    

c0019b79 <Krnl::smpEntry()>:
c0019b79:	eb fe                	jmp    c0019b79 <Krnl::smpEntry()>

c0019b7b <Krnl::startCPU(int)>:
c0019b7b:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0019b80:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019b87:	0f 84 36 01 00 00    	je     c0019cc3 <Krnl::startCPU(int)+0x148>
c0019b8d:	53                   	push   ebx
c0019b8e:	83 ec 10             	sub    esp,0x10
c0019b91:	fa                   	cli    
c0019b92:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c0019b98:	6a 1b                	push   0x1b
c0019b9a:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c0019ba0:	e8 8d 52 ff ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0019ba5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019baa:	89 c3                	mov    ebx,eax
c0019bac:	58                   	pop    eax
c0019bad:	5a                   	pop    edx
c0019bae:	53                   	push   ebx
c0019baf:	68 20 c3 02 c0       	push   0xc002c320
c0019bb4:	e8 c2 8c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0019bb9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019bc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019bc7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019bd1:	c1 e0 18             	shl    eax,0x18
c0019bd4:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019bda:	83 c4 10             	add    esp,0x10
c0019bdd:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019be3:	09 c2                	or     edx,eax
c0019be5:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019beb:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019bf1:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019bf7:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019bfd:	80 cd c5             	or     ch,0xc5
c0019c00:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c06:	f3 90                	pause  
c0019c08:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c0a:	0f ba e1 0c          	bt     ecx,0xc
c0019c0e:	72 f6                	jb     c0019c06 <Krnl::startCPU(int)+0x8b>
c0019c10:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c16:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c1c:	09 c1                	or     ecx,eax
c0019c1e:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019c24:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c2a:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019c30:	80 cd 85             	or     ch,0x85
c0019c33:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c39:	f3 90                	pause  
c0019c3b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c3d:	0f ba e1 0c          	bt     ecx,0xc
c0019c41:	72 f6                	jb     c0019c39 <Krnl::startCPU(int)+0xbe>
c0019c43:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c4d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c53:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c59:	09 c1                	or     ecx,eax
c0019c5b:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019c61:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019c67:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019c6d:	81 c9 02 06 00 00    	or     ecx,0x602
c0019c73:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019c79:	f3 90                	pause  
c0019c7b:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019c7d:	0f ba e1 0c          	bt     ecx,0xc
c0019c81:	72 f6                	jb     c0019c79 <Krnl::startCPU(int)+0xfe>
c0019c83:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019c8d:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019c93:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019c99:	09 c8                	or     eax,ecx
c0019c9b:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019ca1:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019ca7:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019cac:	0d 02 06 00 00       	or     eax,0x602
c0019cb1:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019cb7:	f3 90                	pause  
c0019cb9:	8b 02                	mov    eax,DWORD PTR [edx]
c0019cbb:	0f ba e0 0c          	bt     eax,0xc
c0019cbf:	72 f6                	jb     c0019cb7 <Krnl::startCPU(int)+0x13c>
c0019cc1:	eb fe                	jmp    c0019cc1 <Krnl::startCPU(int)+0x146>
c0019cc3:	c3                   	ret    

c0019cc4 <Krnl::startCPUs()>:
c0019cc4:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0019cc9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019ccf:	88 c2                	mov    dl,al
c0019cd1:	83 e2 0a             	and    edx,0xa
c0019cd4:	80 fa 0a             	cmp    dl,0xa
c0019cd7:	75 09                	jne    c0019ce2 <Krnl::startCPUs()+0x1e>
c0019cd9:	a8 01                	test   al,0x1
c0019cdb:	74 05                	je     c0019ce2 <Krnl::startCPUs()+0x1e>
c0019cdd:	e9 b9 64 fe ff       	jmp    c000019b <prepareTramp>
c0019ce2:	c3                   	ret    
c0019ce3:	90                   	nop

c0019ce4 <EnvVarContainer::getEnv(char const*)>:
c0019ce4:	57                   	push   edi
c0019ce5:	56                   	push   esi
c0019ce6:	53                   	push   ebx
c0019ce7:	31 db                	xor    ebx,ebx
c0019ce9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019ced:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019cef:	7e 2b                	jle    c0019d1c <EnvVarContainer::getEnv(char const*)+0x38>
c0019cf1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019cf8:	50                   	push   eax
c0019cf9:	50                   	push   eax
c0019cfa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019cfd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019d00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019d04:	e8 8f 6b fe ff       	call   c0000898 <strcmp>
c0019d09:	83 c4 10             	add    esp,0x10
c0019d0c:	85 c0                	test   eax,eax
c0019d0e:	75 09                	jne    c0019d19 <EnvVarContainer::getEnv(char const*)+0x35>
c0019d10:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019d13:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019d17:	eb 05                	jmp    c0019d1e <EnvVarContainer::getEnv(char const*)+0x3a>
c0019d19:	43                   	inc    ebx
c0019d1a:	eb d1                	jmp    c0019ced <EnvVarContainer::getEnv(char const*)+0x9>
c0019d1c:	31 c0                	xor    eax,eax
c0019d1e:	5b                   	pop    ebx
c0019d1f:	5e                   	pop    esi
c0019d20:	5f                   	pop    edi
c0019d21:	c3                   	ret    

c0019d22 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019d22:	55                   	push   ebp
c0019d23:	57                   	push   edi
c0019d24:	56                   	push   esi
c0019d25:	53                   	push   ebx
c0019d26:	83 ec 28             	sub    esp,0x28
c0019d29:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0019d2d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0019d31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0019d35:	56                   	push   esi
c0019d36:	e8 31 6a fe ff       	call   c000076c <strlen>
c0019d3b:	40                   	inc    eax
c0019d3c:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d3f:	e8 48 5b ff ff       	call   c000f88c <malloc>
c0019d44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019d4b:	e8 1c 6a fe ff       	call   c000076c <strlen>
c0019d50:	40                   	inc    eax
c0019d51:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d54:	e8 33 5b ff ff       	call   c000f88c <malloc>
c0019d59:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019d60:	e8 07 6a fe ff       	call   c000076c <strlen>
c0019d65:	83 c4 0c             	add    esp,0xc
c0019d68:	40                   	inc    eax
c0019d69:	50                   	push   eax
c0019d6a:	6a 00                	push   0x0
c0019d6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019d70:	e8 db 69 fe ff       	call   c0000750 <memset>
c0019d75:	89 34 24             	mov    DWORD PTR [esp],esi
c0019d78:	e8 ef 69 fe ff       	call   c000076c <strlen>
c0019d7d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019d81:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d84:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019d86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d89:	89 de                	mov    esi,ebx
c0019d8b:	e8 dc 69 fe ff       	call   c000076c <strlen>
c0019d90:	83 c4 0c             	add    esp,0xc
c0019d93:	40                   	inc    eax
c0019d94:	50                   	push   eax
c0019d95:	6a 00                	push   0x0
c0019d97:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019d9b:	e8 b0 69 fe ff       	call   c0000750 <memset>
c0019da0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019da3:	e8 c4 69 fe ff       	call   c000076c <strlen>
c0019da8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019dac:	8d 48 01             	lea    ecx,[eax+0x1]
c0019daf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019db1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019db4:	40                   	inc    eax
c0019db5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0019db8:	c1 e0 03             	shl    eax,0x3
c0019dbb:	5a                   	pop    edx
c0019dbc:	59                   	pop    ecx
c0019dbd:	50                   	push   eax
c0019dbe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019dc1:	e8 b2 5a ff ff       	call   c000f878 <realloc>
c0019dc6:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019dca:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019dcd:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0019dd0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019dd4:	b9 08 00 00 00       	mov    ecx,0x8
c0019dd9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019ddb:	83 c4 2c             	add    esp,0x2c
c0019dde:	5b                   	pop    ebx
c0019ddf:	5e                   	pop    esi
c0019de0:	5f                   	pop    edi
c0019de1:	5d                   	pop    ebp
c0019de2:	c3                   	ret    
c0019de3:	90                   	nop

c0019de4 <EnvVarContainer::deleteEnv(char const*)>:
c0019de4:	c3                   	ret    
c0019de5:	90                   	nop

c0019de6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019de6:	55                   	push   ebp
c0019de7:	57                   	push   edi
c0019de8:	56                   	push   esi
c0019de9:	53                   	push   ebx
c0019dea:	81 ec 38 01 00 00    	sub    esp,0x138
c0019df0:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c0019df7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0019dfe:	68 14 01 00 00       	push   0x114
c0019e03:	e8 84 5a ff ff       	call   c000f88c <malloc>
c0019e08:	83 c4 0c             	add    esp,0xc
c0019e0b:	89 c5                	mov    ebp,eax
c0019e0d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0019e10:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019e17:	50                   	push   eax
c0019e18:	e8 bd 8f ff ff       	call   c0012dda <File::File(char const*, Process*)>
c0019e1d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019e20:	e8 87 92 ff ff       	call   c00130ac <File::exists()>
c0019e25:	83 c4 10             	add    esp,0x10
c0019e28:	84 c0                	test   al,al
c0019e2a:	75 32                	jne    c0019e5e <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c0019e2c:	51                   	push   ecx
c0019e2d:	51                   	push   ecx
c0019e2e:	6a 12                	push   0x12
c0019e30:	55                   	push   ebp
c0019e31:	e8 08 90 ff ff       	call   c0012e3e <File::open(FileOpenMode)>
c0019e36:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e39:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0019e3c:	89 34 24             	mov    DWORD PTR [esp],esi
c0019e3f:	e8 28 69 fe ff       	call   c000076c <strlen>
c0019e44:	5a                   	pop    edx
c0019e45:	31 d2                	xor    edx,edx
c0019e47:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e4b:	51                   	push   ecx
c0019e4c:	56                   	push   esi
c0019e4d:	52                   	push   edx
c0019e4e:	50                   	push   eax
c0019e4f:	55                   	push   ebp
c0019e50:	ff d7                	call   edi
c0019e52:	83 c4 14             	add    esp,0x14
c0019e55:	55                   	push   ebp
c0019e56:	e8 41 90 ff ff       	call   c0012e9c <File::close()>
c0019e5b:	83 c4 10             	add    esp,0x10
c0019e5e:	31 f6                	xor    esi,esi
c0019e60:	50                   	push   eax
c0019e61:	68 00 01 00 00       	push   0x100
c0019e66:	6a 00                	push   0x0
c0019e68:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019e6c:	50                   	push   eax
c0019e6d:	e8 de 68 fe ff       	call   c0000750 <memset>
c0019e72:	58                   	pop    eax
c0019e73:	5a                   	pop    edx
c0019e74:	6a 01                	push   0x1
c0019e76:	55                   	push   ebp
c0019e77:	e8 c2 8f ff ff       	call   c0012e3e <File::open(FileOpenMode)>
c0019e7c:	83 c4 10             	add    esp,0x10
c0019e7f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019e87:	83 ec 0c             	sub    esp,0xc
c0019e8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019e8d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019e91:	51                   	push   ecx
c0019e92:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019e96:	52                   	push   edx
c0019e97:	6a 00                	push   0x0
c0019e99:	6a 01                	push   0x1
c0019e9b:	55                   	push   ebp
c0019e9c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019e9f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019ea3:	83 c4 20             	add    esp,0x20
c0019ea6:	3c 0d                	cmp    al,0xd
c0019ea8:	0f 84 16 01 00 00    	je     c0019fc4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019eae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019eb3:	0f 84 fc 00 00 00    	je     c0019fb5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019eb9:	3c 0a                	cmp    al,0xa
c0019ebb:	74 13                	je     c0019ed0 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019ebd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019ec2:	74 0c                	je     c0019ed0 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c0019ec4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0019eca:	0f 8e e5 00 00 00    	jle    c0019fb5 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0019ed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ed4:	83 ec 0c             	sub    esp,0xc
c0019ed7:	8d 78 01             	lea    edi,[eax+0x1]
c0019eda:	57                   	push   edi
c0019edb:	e8 ac 59 ff ff       	call   c000f88c <malloc>
c0019ee0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0019ee4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019ee8:	8d 56 04             	lea    edx,[esi+0x4]
c0019eeb:	89 14 24             	mov    DWORD PTR [esp],edx
c0019eee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019ef2:	e8 95 59 ff ff       	call   c000f88c <malloc>
c0019ef7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019efb:	83 c4 0c             	add    esp,0xc
c0019efe:	57                   	push   edi
c0019eff:	6a 00                	push   0x0
c0019f01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019f05:	e8 46 68 fe ff       	call   c0000750 <memset>
c0019f0a:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f0e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019f12:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019f16:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f18:	83 c4 0c             	add    esp,0xc
c0019f1b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f1f:	52                   	push   edx
c0019f20:	6a 00                	push   0x0
c0019f22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f26:	e8 25 68 fe ff       	call   c0000750 <memset>
c0019f2b:	8d 74 24 30          	lea    esi,[esp+0x30]
c0019f2f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0019f33:	89 34 24             	mov    DWORD PTR [esp],esi
c0019f36:	e8 31 68 fe ff       	call   c000076c <strlen>
c0019f3b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0019f3f:	89 c1                	mov    ecx,eax
c0019f41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f43:	5e                   	pop    esi
c0019f44:	5f                   	pop    edi
c0019f45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019f49:	68 31 c3 02 c0       	push   0xc002c331
c0019f4e:	e8 28 89 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0019f53:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019f55:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0019f58:	40                   	inc    eax
c0019f59:	83 c4 10             	add    esp,0x10
c0019f5c:	89 03                	mov    DWORD PTR [ebx],eax
c0019f5e:	85 d2                	test   edx,edx
c0019f60:	75 0c                	jne    c0019f6e <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c0019f62:	83 ec 0c             	sub    esp,0xc
c0019f65:	6a 08                	push   0x8
c0019f67:	e8 20 59 ff ff       	call   c000f88c <malloc>
c0019f6c:	eb 0c                	jmp    c0019f7a <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c0019f6e:	c1 e0 03             	shl    eax,0x3
c0019f71:	51                   	push   ecx
c0019f72:	51                   	push   ecx
c0019f73:	50                   	push   eax
c0019f74:	52                   	push   edx
c0019f75:	e8 fe 58 ff ff       	call   c000f878 <realloc>
c0019f7a:	83 c4 10             	add    esp,0x10
c0019f7d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019f80:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019f82:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0019f85:	8d 74 24 18          	lea    esi,[esp+0x18]
c0019f89:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0019f8d:	b9 08 00 00 00       	mov    ecx,0x8
c0019f92:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f94:	31 f6                	xor    esi,esi
c0019f96:	52                   	push   edx
c0019f97:	68 00 01 00 00       	push   0x100
c0019f9c:	6a 00                	push   0x0
c0019f9e:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019fa2:	50                   	push   eax
c0019fa3:	e8 a8 67 fe ff       	call   c0000750 <memset>
c0019fa8:	83 c4 10             	add    esp,0x10
c0019fab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019fb3:	eb 0f                	jmp    c0019fc4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019fb5:	3c 3d                	cmp    al,0x3d
c0019fb7:	74 07                	je     c0019fc0 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c0019fb9:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c0019fbd:	46                   	inc    esi
c0019fbe:	eb 04                	jmp    c0019fc4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c0019fc0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0019fc4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019fc9:	0f 85 b8 fe ff ff    	jne    c0019e87 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c0019fcf:	50                   	push   eax
c0019fd0:	50                   	push   eax
c0019fd1:	ff 33                	push   DWORD PTR [ebx]
c0019fd3:	68 3f c3 02 c0       	push   0xc002c33f
c0019fd8:	e8 9e 88 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0019fdd:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019fe3:	5b                   	pop    ebx
c0019fe4:	5e                   	pop    esi
c0019fe5:	5f                   	pop    edi
c0019fe6:	5d                   	pop    ebp
c0019fe7:	c3                   	ret    

c0019fe8 <EnvVarContainer::__loadSystem()>:
c0019fe8:	83 ec 10             	sub    esp,0x10
c0019feb:	68 80 e3 02 c0       	push   0xc002e380
c0019ff0:	68 6a c3 02 c0       	push   0xc002c36a
c0019ff5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ff9:	e8 e8 fd ff ff       	call   c0019de6 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019ffe:	83 c4 1c             	add    esp,0x1c
c001a001:	c3                   	ret    

c001a002 <EnvVarContainer::__loadUser()>:
c001a002:	c3                   	ret    
c001a003:	90                   	nop

c001a004 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a008:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a00e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a012:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a016:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a019:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a01d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a024:	90                   	nop
c001a025:	c3                   	ret    

c001a026 <EnvVarContainer::~EnvVarContainer()>:
c001a026:	83 ec 0c             	sub    esp,0xc
c001a029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a02d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a030:	85 c0                	test   eax,eax
c001a032:	74 1d                	je     c001a051 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a038:	8b 00                	mov    eax,DWORD PTR [eax]
c001a03a:	85 c0                	test   eax,eax
c001a03c:	74 13                	je     c001a051 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a03e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a042:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a045:	83 ec 0c             	sub    esp,0xc
c001a048:	50                   	push   eax
c001a049:	e8 4e 58 ff ff       	call   c000f89c <free>
c001a04e:	83 c4 10             	add    esp,0x10
c001a051:	90                   	nop
c001a052:	83 c4 0c             	add    esp,0xc
c001a055:	c3                   	ret    

c001a056 <Krnl::getEnv(Process*, char const*)>:
c001a056:	53                   	push   ebx
c001a057:	83 ec 08             	sub    esp,0x8
c001a05a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a05e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a062:	39 05 90 23 03 c0    	cmp    DWORD PTR ds:0xc0032390,eax
c001a068:	74 04                	je     c001a06e <Krnl::getEnv(Process*, char const*)+0x18>
c001a06a:	85 c0                	test   eax,eax
c001a06c:	75 0b                	jne    c001a079 <Krnl::getEnv(Process*, char const*)+0x23>
c001a06e:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a073:	85 c0                	test   eax,eax
c001a075:	75 19                	jne    c001a090 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a077:	eb 27                	jmp    c001a0a0 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a079:	52                   	push   edx
c001a07a:	52                   	push   edx
c001a07b:	53                   	push   ebx
c001a07c:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a082:	e8 5d fc ff ff       	call   c0019ce4 <EnvVarContainer::getEnv(char const*)>
c001a087:	83 c4 10             	add    esp,0x10
c001a08a:	85 c0                	test   eax,eax
c001a08c:	75 28                	jne    c001a0b6 <Krnl::getEnv(Process*, char const*)+0x60>
c001a08e:	eb de                	jmp    c001a06e <Krnl::getEnv(Process*, char const*)+0x18>
c001a090:	52                   	push   edx
c001a091:	52                   	push   edx
c001a092:	53                   	push   ebx
c001a093:	50                   	push   eax
c001a094:	e8 4b fc ff ff       	call   c0019ce4 <EnvVarContainer::getEnv(char const*)>
c001a099:	83 c4 10             	add    esp,0x10
c001a09c:	85 c0                	test   eax,eax
c001a09e:	75 16                	jne    c001a0b6 <Krnl::getEnv(Process*, char const*)+0x60>
c001a0a0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a0a4:	a1 78 19 03 c0       	mov    eax,ds:0xc0031978
c001a0a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a0ad:	83 c4 08             	add    esp,0x8
c001a0b0:	5b                   	pop    ebx
c001a0b1:	e9 2e fc ff ff       	jmp    c0019ce4 <EnvVarContainer::getEnv(char const*)>
c001a0b6:	83 c4 08             	add    esp,0x8
c001a0b9:	5b                   	pop    ebx
c001a0ba:	c3                   	ret    

c001a0bb <Krnl::setEnvSystem(char const*, char const*)>:
c001a0bb:	83 ec 10             	sub    esp,0x10
c001a0be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0c6:	ff 35 78 19 03 c0    	push   DWORD PTR ds:0xc0031978
c001a0cc:	e8 51 fc ff ff       	call   c0019d22 <EnvVarContainer::setEnv(char const*, char const*)>
c001a0d1:	83 c4 1c             	add    esp,0x1c
c001a0d4:	c3                   	ret    

c001a0d5 <Krnl::setEnvUser(char const*, char const*)>:
c001a0d5:	a1 74 19 03 c0       	mov    eax,ds:0xc0031974
c001a0da:	85 c0                	test   eax,eax
c001a0dc:	74 15                	je     c001a0f3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a0de:	83 ec 10             	sub    esp,0x10
c001a0e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a0e9:	50                   	push   eax
c001a0ea:	e8 33 fc ff ff       	call   c0019d22 <EnvVarContainer::setEnv(char const*, char const*)>
c001a0ef:	83 c4 1c             	add    esp,0x1c
c001a0f2:	c3                   	ret    
c001a0f3:	c3                   	ret    

c001a0f4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a0f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0f8:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a0fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a102:	e9 1b fc ff ff       	jmp    c0019d22 <EnvVarContainer::setEnv(char const*, char const*)>

c001a107 <Krnl::deleteEnvSystem(char const*)>:
c001a107:	c3                   	ret    

c001a108 <Krnl::deleteEnvUser(char const*)>:
c001a108:	c3                   	ret    

c001a109 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a109:	c3                   	ret    

c001a10a <Krnl::newProcessEnv(Process*)>:
c001a10a:	83 ec 28             	sub    esp,0x28
c001a10d:	6a 0c                	push   0xc
c001a10f:	e8 78 57 ff ff       	call   c000f88c <malloc>
c001a114:	5a                   	pop    edx
c001a115:	59                   	pop    ecx
c001a116:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a11a:	50                   	push   eax
c001a11b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a11f:	e8 e0 fe ff ff       	call   c001a004 <EnvVarContainer::EnvVarContainer(Process*)>
c001a124:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a128:	83 c4 2c             	add    esp,0x2c
c001a12b:	c3                   	ret    

c001a12c <Krnl::copyProcessEnv(Process*, Process*)>:
c001a12c:	57                   	push   edi
c001a12d:	56                   	push   esi
c001a12e:	53                   	push   ebx
c001a12f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a133:	83 ec 0c             	sub    esp,0xc
c001a136:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a13c:	6a 0c                	push   0xc
c001a13e:	e8 49 57 ff ff       	call   c000f88c <malloc>
c001a143:	89 c3                	mov    ebx,eax
c001a145:	58                   	pop    eax
c001a146:	5a                   	pop    edx
c001a147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a14b:	53                   	push   ebx
c001a14c:	e8 b3 fe ff ff       	call   c001a004 <EnvVarContainer::EnvVarContainer(Process*)>
c001a151:	8b 07                	mov    eax,DWORD PTR [edi]
c001a153:	89 03                	mov    DWORD PTR [ebx],eax
c001a155:	c1 e0 03             	shl    eax,0x3
c001a158:	89 04 24             	mov    DWORD PTR [esp],eax
c001a15b:	e8 2c 57 ff ff       	call   c000f88c <malloc>
c001a160:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a163:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a165:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a168:	c1 e1 03             	shl    ecx,0x3
c001a16b:	89 c7                	mov    edi,eax
c001a16d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a16f:	83 c4 10             	add    esp,0x10
c001a172:	89 d8                	mov    eax,ebx
c001a174:	5b                   	pop    ebx
c001a175:	5e                   	pop    esi
c001a176:	5f                   	pop    edi
c001a177:	c3                   	ret    

c001a178 <Krnl::loadSystemEnv()>:
c001a178:	53                   	push   ebx
c001a179:	83 ec 14             	sub    esp,0x14
c001a17c:	6a 0c                	push   0xc
c001a17e:	e8 09 57 ff ff       	call   c000f88c <malloc>
c001a183:	89 c3                	mov    ebx,eax
c001a185:	58                   	pop    eax
c001a186:	5a                   	pop    edx
c001a187:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001a18d:	53                   	push   ebx
c001a18e:	e8 71 fe ff ff       	call   c001a004 <EnvVarContainer::EnvVarContainer(Process*)>
c001a193:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a196:	89 1d 78 19 03 c0    	mov    DWORD PTR ds:0xc0031978,ebx
c001a19c:	e8 47 fe ff ff       	call   c0019fe8 <EnvVarContainer::__loadSystem()>
c001a1a1:	83 c4 18             	add    esp,0x18
c001a1a4:	5b                   	pop    ebx
c001a1a5:	c3                   	ret    

c001a1a6 <Krnl::loadUserEnv()>:
c001a1a6:	53                   	push   ebx
c001a1a7:	83 ec 14             	sub    esp,0x14
c001a1aa:	6a 0c                	push   0xc
c001a1ac:	e8 db 56 ff ff       	call   c000f88c <malloc>
c001a1b1:	89 c3                	mov    ebx,eax
c001a1b3:	58                   	pop    eax
c001a1b4:	5a                   	pop    edx
c001a1b5:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001a1bb:	53                   	push   ebx
c001a1bc:	e8 43 fe ff ff       	call   c001a004 <EnvVarContainer::EnvVarContainer(Process*)>
c001a1c1:	89 1d 74 19 03 c0    	mov    DWORD PTR ds:0xc0031974,ebx
c001a1c7:	83 c4 18             	add    esp,0x18
c001a1ca:	5b                   	pop    ebx
c001a1cb:	c3                   	ret    

c001a1cc <Krnl::flushEnv()>:
c001a1cc:	c3                   	ret    

c001a1cd <Krnl::getProcessTotalEnvCount(Process*)>:
c001a1cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a1d1:	8b 15 74 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031974
c001a1d7:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a1dd:	a1 78 19 03 c0       	mov    eax,ds:0xc0031978
c001a1e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001a1e4:	03 01                	add    eax,DWORD PTR [ecx]
c001a1e6:	85 d2                	test   edx,edx
c001a1e8:	74 02                	je     c001a1ec <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a1ea:	03 02                	add    eax,DWORD PTR [edx]
c001a1ec:	c3                   	ret    

c001a1ed <Krnl::getProcessEnvPair(Process*, int)>:
c001a1ed:	57                   	push   edi
c001a1ee:	8b 0d 74 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031974
c001a1f4:	56                   	push   esi
c001a1f5:	85 c9                	test   ecx,ecx
c001a1f7:	53                   	push   ebx
c001a1f8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a1fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a200:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a206:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a20a:	8b 02                	mov    eax,DWORD PTR [edx]
c001a20c:	75 47                	jne    c001a255 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a20e:	39 c3                	cmp    ebx,eax
c001a210:	7c 47                	jl     c001a259 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a212:	8b 15 78 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031978
c001a218:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a21a:	01 c1                	add    ecx,eax
c001a21c:	39 d9                	cmp    ecx,ebx
c001a21e:	7e 6c                	jle    c001a28c <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a220:	51                   	push   ecx
c001a221:	89 d9                	mov    ecx,ebx
c001a223:	29 c1                	sub    ecx,eax
c001a225:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a228:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a22c:	53                   	push   ebx
c001a22d:	68 8c c3 02 c0       	push   0xc002c38c
c001a232:	e8 44 86 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001a237:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a23d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a23f:	a1 78 19 03 c0       	mov    eax,ds:0xc0031978
c001a244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a247:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a24b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a24e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a251:	89 06                	mov    DWORD PTR [esi],eax
c001a253:	eb 51                	jmp    c001a2a6 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a255:	39 c3                	cmp    ebx,eax
c001a257:	7d 05                	jge    c001a25e <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a259:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a25c:	eb 20                	jmp    c001a27e <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a25e:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a260:	8d 14 07             	lea    edx,[edi+eax*1]
c001a263:	39 da                	cmp    edx,ebx
c001a265:	7e 04                	jle    c001a26b <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a267:	29 c3                	sub    ebx,eax
c001a269:	eb 10                	jmp    c001a27b <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a26b:	8b 0d 78 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031978
c001a271:	03 11                	add    edx,DWORD PTR [ecx]
c001a273:	39 da                	cmp    edx,ebx
c001a275:	7e 15                	jle    c001a28c <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a277:	29 c3                	sub    ebx,eax
c001a279:	29 fb                	sub    ebx,edi
c001a27b:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a27e:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a282:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a285:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a288:	89 06                	mov    DWORD PTR [esi],eax
c001a28a:	eb 1d                	jmp    c001a2a9 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a28c:	83 ec 0c             	sub    esp,0xc
c001a28f:	68 a0 c3 02 c0       	push   0xc002c3a0
c001a294:	e8 18 00 00 00       	call   c001a2b1 <Krnl::panic(char const*)>
c001a299:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a29f:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a2a6:	83 c4 10             	add    esp,0x10
c001a2a9:	89 f0                	mov    eax,esi
c001a2ab:	5b                   	pop    ebx
c001a2ac:	5e                   	pop    esi
c001a2ad:	5f                   	pop    edi
c001a2ae:	c2 04 00             	ret    0x4

c001a2b1 <Krnl::panic(char const*)>:
c001a2b1:	55                   	push   ebp
c001a2b2:	89 e5                	mov    ebp,esp
c001a2b4:	53                   	push   ebx
c001a2b5:	83 ec 0c             	sub    esp,0xc
c001a2b8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a2bb:	fa                   	cli    
c001a2bc:	c6 05 84 19 03 c0 01 	mov    BYTE PTR ds:0xc0031984,0x1
c001a2c3:	53                   	push   ebx
c001a2c4:	c6 05 80 dd 02 c0 00 	mov    BYTE PTR ds:0xc002dd80,0x0
c001a2cb:	68 ba c3 02 c0       	push   0xc002c3ba
c001a2d0:	e8 a6 85 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001a2d5:	58                   	pop    eax
c001a2d6:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a2db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2e1:	e8 b8 63 ff ff       	call   c001069e <setActiveTerminal(VgaText*)>
c001a2e6:	83 c4 0c             	add    esp,0xc
c001a2e9:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a2ee:	6a 01                	push   0x1
c001a2f0:	6a 0f                	push   0xf
c001a2f2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2f8:	e8 4d 60 ff ff       	call   c001034a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a2fd:	58                   	pop    eax
c001a2fe:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a303:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a309:	e8 d6 65 ff ff       	call   c00108e4 <VgaText::clearScreen()>
c001a30e:	58                   	pop    eax
c001a30f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a314:	5a                   	pop    edx
c001a315:	68 d3 c3 02 c0       	push   0xc002c3d3
c001a31a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a320:	e8 4b 67 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a325:	59                   	pop    ecx
c001a326:	58                   	pop    eax
c001a327:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a32c:	68 78 c4 02 c0       	push   0xc002c478
c001a331:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a337:	e8 34 67 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a33c:	58                   	pop    eax
c001a33d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a342:	5a                   	pop    edx
c001a343:	68 ef c3 02 c0       	push   0xc002c3ef
c001a348:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a34e:	e8 1d 67 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a353:	59                   	pop    ecx
c001a354:	58                   	pop    eax
c001a355:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a35a:	53                   	push   ebx
c001a35b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a361:	e8 0a 67 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a366:	58                   	pop    eax
c001a367:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a36c:	5a                   	pop    edx
c001a36d:	68 0f c4 02 c0       	push   0xc002c40f
c001a372:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a378:	e8 f3 66 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a37d:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c001a382:	83 c4 10             	add    esp,0x10
c001a385:	85 c0                	test   eax,eax
c001a387:	74 02                	je     c001a38b <Krnl::panic(char const*)+0xda>
c001a389:	ff d0                	call   eax
c001a38b:	83 ec 0c             	sub    esp,0xc
c001a38e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a391:	e8 9e 32 00 00       	call   c001d634 <Thr::getDriverNameFromAddress(unsigned long)>
c001a396:	83 c4 10             	add    esp,0x10
c001a399:	89 c3                	mov    ebx,eax
c001a39b:	85 c0                	test   eax,eax
c001a39d:	0f 84 50 02 00 00    	je     c001a5f3 <Krnl::panic(char const*)+0x342>
c001a3a3:	83 ec 08             	sub    esp,0x8
c001a3a6:	8b 15 90 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032390
c001a3ac:	68 b4 c4 02 c0       	push   0xc002c4b4
c001a3b1:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a3b7:	e8 b4 66 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a3bc:	58                   	pop    eax
c001a3bd:	5a                   	pop    edx
c001a3be:	8b 15 90 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032390
c001a3c4:	68 ef c3 02 c0       	push   0xc002c3ef
c001a3c9:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a3cf:	e8 9c 66 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a3d4:	59                   	pop    ecx
c001a3d5:	58                   	pop    eax
c001a3d6:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a3db:	53                   	push   ebx
c001a3dc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3e2:	e8 89 66 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a3e7:	83 c4 10             	add    esp,0x10
c001a3ea:	83 ec 08             	sub    esp,0x8
c001a3ed:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a3f2:	68 0e c4 02 c0       	push   0xc002c40e
c001a3f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3fd:	e8 6e 66 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a402:	58                   	pop    eax
c001a403:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a408:	5a                   	pop    edx
c001a409:	68 0c c5 02 c0       	push   0xc002c50c
c001a40e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a414:	e8 57 66 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a419:	59                   	pop    ecx
c001a41a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a41f:	5b                   	pop    ebx
c001a420:	68 4c c5 02 c0       	push   0xc002c54c
c001a425:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a42b:	e8 40 66 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a430:	58                   	pop    eax
c001a431:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a436:	5a                   	pop    edx
c001a437:	68 fa c3 02 c0       	push   0xc002c3fa
c001a43c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a442:	e8 29 66 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a447:	59                   	pop    ecx
c001a448:	5b                   	pop    ebx
c001a449:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a44c:	68 12 c4 02 c0       	push   0xc002c412
c001a451:	e8 25 84 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001a456:	58                   	pop    eax
c001a457:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a45a:	5a                   	pop    edx
c001a45b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a45e:	68 1b c4 02 c0       	push   0xc002c41b
c001a463:	e8 13 84 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001a468:	59                   	pop    ecx
c001a469:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a46c:	5b                   	pop    ebx
c001a46d:	8b 00                	mov    eax,DWORD PTR [eax]
c001a46f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a472:	68 24 c4 02 c0       	push   0xc002c424
c001a477:	e8 ff 83 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001a47c:	58                   	pop    eax
c001a47d:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a482:	5a                   	pop    edx
c001a483:	68 90 c5 02 c0       	push   0xc002c590
c001a488:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a48e:	e8 dd 65 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a493:	59                   	pop    ecx
c001a494:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a499:	5b                   	pop    ebx
c001a49a:	68 2d c4 02 c0       	push   0xc002c42d
c001a49f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4a5:	e8 c6 65 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a4aa:	0f 20 c0             	mov    eax,cr0
c001a4ad:	5a                   	pop    edx
c001a4ae:	59                   	pop    ecx
c001a4af:	50                   	push   eax
c001a4b0:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a4b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4bb:	e8 6a 65 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c001a4c0:	5b                   	pop    ebx
c001a4c1:	58                   	pop    eax
c001a4c2:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a4c7:	68 37 c4 02 c0       	push   0xc002c437
c001a4cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4d2:	e8 99 65 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a4d7:	0f 20 d0             	mov    eax,cr2
c001a4da:	5a                   	pop    edx
c001a4db:	59                   	pop    ecx
c001a4dc:	50                   	push   eax
c001a4dd:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a4e2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4e8:	e8 3d 65 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c001a4ed:	5b                   	pop    ebx
c001a4ee:	58                   	pop    eax
c001a4ef:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a4f4:	68 41 c4 02 c0       	push   0xc002c441
c001a4f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4ff:	e8 6c 65 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a504:	0f 20 d8             	mov    eax,cr3
c001a507:	5a                   	pop    edx
c001a508:	59                   	pop    ecx
c001a509:	50                   	push   eax
c001a50a:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a50f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a515:	e8 10 65 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c001a51a:	5b                   	pop    ebx
c001a51b:	58                   	pop    eax
c001a51c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a521:	68 54 c4 02 c0       	push   0xc002c454
c001a526:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a52c:	e8 3f 65 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a531:	0f 20 e0             	mov    eax,cr4
c001a534:	5a                   	pop    edx
c001a535:	59                   	pop    ecx
c001a536:	50                   	push   eax
c001a537:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a53c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a542:	e8 e3 64 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c001a547:	5b                   	pop    ebx
c001a548:	58                   	pop    eax
c001a549:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a54e:	68 5e c4 02 c0       	push   0xc002c45e
c001a553:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a559:	e8 12 65 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a55e:	5a                   	pop    edx
c001a55f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a564:	59                   	pop    ecx
c001a565:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a56b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a56e:	50                   	push   eax
c001a56f:	e8 b6 64 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c001a574:	5b                   	pop    ebx
c001a575:	58                   	pop    eax
c001a576:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a57b:	68 2b d3 02 c0       	push   0xc002d32b
c001a580:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a586:	e8 e5 64 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a58b:	5a                   	pop    edx
c001a58c:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a591:	59                   	pop    ecx
c001a592:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a598:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a59b:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a59e:	50                   	push   eax
c001a59f:	e8 86 64 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c001a5a4:	5b                   	pop    ebx
c001a5a5:	58                   	pop    eax
c001a5a6:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a5ab:	68 2b d3 02 c0       	push   0xc002d32b
c001a5b0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a5b6:	e8 b5 64 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a5bb:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a5c0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a5c3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a5c9:	8b 12                	mov    edx,DWORD PTR [edx]
c001a5cb:	59                   	pop    ecx
c001a5cc:	5b                   	pop    ebx
c001a5cd:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a5d0:	50                   	push   eax
c001a5d1:	e8 54 64 ff ff       	call   c0010a2a <VgaText::putx(unsigned int)>
c001a5d6:	83 c4 10             	add    esp,0x10
c001a5d9:	b2 fe                	mov    dl,0xfe
c001a5db:	e4 60                	in     al,0x60
c001a5dd:	3c 1c                	cmp    al,0x1c
c001a5df:	74 04                	je     c001a5e5 <Krnl::panic(char const*)+0x334>
c001a5e1:	3c 5a                	cmp    al,0x5a
c001a5e3:	75 f6                	jne    c001a5db <Krnl::panic(char const*)+0x32a>
c001a5e5:	e4 64                	in     al,0x64
c001a5e7:	a8 02                	test   al,0x2
c001a5e9:	75 fa                	jne    c001a5e5 <Krnl::panic(char const*)+0x334>
c001a5eb:	88 d0                	mov    al,dl
c001a5ed:	e6 64                	out    0x64,al
c001a5ef:	fa                   	cli    
c001a5f0:	f4                   	hlt    
c001a5f1:	eb e8                	jmp    c001a5db <Krnl::panic(char const*)+0x32a>
c001a5f3:	50                   	push   eax
c001a5f4:	50                   	push   eax
c001a5f5:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a5fa:	68 e0 c4 02 c0       	push   0xc002c4e0
c001a5ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a605:	e8 66 64 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a60a:	58                   	pop    eax
c001a60b:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a610:	5a                   	pop    edx
c001a611:	68 ef c3 02 c0       	push   0xc002c3ef
c001a616:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a61c:	e8 4f 64 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a621:	59                   	pop    ecx
c001a622:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a627:	5b                   	pop    ebx
c001a628:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a62b:	83 c0 0c             	add    eax,0xc
c001a62e:	50                   	push   eax
c001a62f:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001a634:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a63a:	e8 31 64 ff ff       	call   c0010a70 <VgaText::puts(char const*)>
c001a63f:	83 c4 10             	add    esp,0x10
c001a642:	e9 a3 fd ff ff       	jmp    c001a3ea <Krnl::panic(char const*)+0x139>

c001a647 <Net::switchEndian16(unsigned short)>:
c001a647:	83 ec 04             	sub    esp,0x4
c001a64a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a64e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a652:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a656:	c1 f8 08             	sar    eax,0x8
c001a659:	89 c2                	mov    edx,eax
c001a65b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a65f:	c1 e0 08             	shl    eax,0x8
c001a662:	09 d0                	or     eax,edx
c001a664:	83 c4 04             	add    esp,0x4
c001a667:	c3                   	ret    

c001a668 <Net::switchEndian32(unsigned int)>:
c001a668:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a66c:	c1 e8 18             	shr    eax,0x18
c001a66f:	89 c2                	mov    edx,eax
c001a671:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a675:	c1 e0 08             	shl    eax,0x8
c001a678:	25 00 00 ff 00       	and    eax,0xff0000
c001a67d:	09 c2                	or     edx,eax
c001a67f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a683:	c1 e8 08             	shr    eax,0x8
c001a686:	25 00 ff 00 00       	and    eax,0xff00
c001a68b:	09 c2                	or     edx,eax
c001a68d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a691:	c1 e0 18             	shl    eax,0x18
c001a694:	09 d0                	or     eax,edx
c001a696:	c3                   	ret    

c001a697 <Net::crc32Calc(unsigned char*, int)>:
c001a697:	83 ec 10             	sub    esp,0x10
c001a69a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a69f:	75 07                	jne    c001a6a8 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a6a1:	b8 00 00 00 00       	mov    eax,0x0
c001a6a6:	eb 7c                	jmp    c001a724 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a6a8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a6ad:	7f 07                	jg     c001a6b6 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a6af:	b8 00 00 00 00       	mov    eax,0x0
c001a6b4:	eb 6e                	jmp    c001a724 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a6b6:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a6be:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a6c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6ca:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a6ce:	7d 4e                	jge    c001a71e <Net::crc32Calc(unsigned char*, int)+0x87>
c001a6d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a6d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6d8:	01 d0                	add    eax,edx
c001a6da:	8a 00                	mov    al,BYTE PTR [eax]
c001a6dc:	0f b6 c0             	movzx  eax,al
c001a6df:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a6e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6eb:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a6f0:	7f 26                	jg     c001a718 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a6f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6f6:	83 e0 01             	and    eax,0x1
c001a6f9:	74 0d                	je     c001a708 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a6fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6ff:	d1 e8                	shr    eax,1
c001a701:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a706:	eb 06                	jmp    c001a70e <Net::crc32Calc(unsigned char*, int)+0x77>
c001a708:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a70c:	d1 e8                	shr    eax,1
c001a70e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a712:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a716:	eb d3                	jmp    c001a6eb <Net::crc32Calc(unsigned char*, int)+0x54>
c001a718:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a71c:	eb a8                	jmp    c001a6c6 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a71e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a722:	f7 d0                	not    eax
c001a724:	83 c4 10             	add    esp,0x10
c001a727:	c3                   	ret    

c001a728 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a728:	57                   	push   edi
c001a729:	56                   	push   esi
c001a72a:	53                   	push   ebx
c001a72b:	83 ec 60             	sub    esp,0x60
c001a72e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a735:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001a739:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c001a741:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c001a746:	7f 1a                	jg     c001a762 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x3a>
c001a748:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a74f:	8d 50 01             	lea    edx,[eax+0x1]
c001a752:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a759:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a75c:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001a760:	eb df                	jmp    c001a741 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x19>
c001a762:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a769:	8d 50 01             	lea    edx,[eax+0x1]
c001a76c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a773:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a776:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a77d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a781:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001a785:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a789:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c001a791:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a795:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a799:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a79d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a7a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7a5:	89 c6                	mov    esi,eax
c001a7a7:	89 d7                	mov    edi,edx
c001a7a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7ab:	89 c8                	mov    eax,ecx
c001a7ad:	89 fa                	mov    edx,edi
c001a7af:	89 f3                	mov    ebx,esi
c001a7b1:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001a7b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a7b9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7bc:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a7c4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a7cb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a7cf:	8d 44 24 78          	lea    eax,[esp+0x78]
c001a7d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a7d7:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a7df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a7e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a7eb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a7ef:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a7f3:	89 c6                	mov    esi,eax
c001a7f5:	89 d7                	mov    edi,edx
c001a7f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a7f9:	89 c8                	mov    eax,ecx
c001a7fb:	89 fa                	mov    edx,edi
c001a7fd:	89 f3                	mov    ebx,esi
c001a7ff:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a803:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a807:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a80b:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c001a813:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a81a:	0f b7 c0             	movzx  eax,ax
c001a81d:	c1 f8 08             	sar    eax,0x8
c001a820:	89 c1                	mov    ecx,eax
c001a822:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a829:	8d 50 01             	lea    edx,[eax+0x1]
c001a82c:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a833:	88 ca                	mov    dl,cl
c001a835:	88 10                	mov    BYTE PTR [eax],dl
c001a837:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001a83e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a845:	8d 48 01             	lea    ecx,[eax+0x1]
c001a848:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c001a84f:	88 10                	mov    BYTE PTR [eax],dl
c001a851:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a855:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001a859:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001a860:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001a864:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001a868:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001a86c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a870:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a874:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a878:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a87c:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a880:	89 c6                	mov    esi,eax
c001a882:	89 d7                	mov    edi,edx
c001a884:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a886:	89 c8                	mov    eax,ecx
c001a888:	89 fa                	mov    edx,edi
c001a88a:	89 f3                	mov    ebx,esi
c001a88c:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a890:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a894:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a898:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a89c:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c001a8a3:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8aa:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c001a8ae:	50                   	push   eax
c001a8af:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a8b3:	e8 df fd ff ff       	call   c001a697 <Net::crc32Calc(unsigned char*, int)>
c001a8b8:	83 c4 08             	add    esp,0x8
c001a8bb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a8bf:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a8c3:	c1 e8 18             	shr    eax,0x18
c001a8c6:	89 c1                	mov    ecx,eax
c001a8c8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8cf:	8d 50 01             	lea    edx,[eax+0x1]
c001a8d2:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a8d9:	88 ca                	mov    dl,cl
c001a8db:	88 10                	mov    BYTE PTR [eax],dl
c001a8dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a8e1:	c1 e8 10             	shr    eax,0x10
c001a8e4:	89 c1                	mov    ecx,eax
c001a8e6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a8ed:	8d 50 01             	lea    edx,[eax+0x1]
c001a8f0:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a8f7:	88 ca                	mov    dl,cl
c001a8f9:	88 10                	mov    BYTE PTR [eax],dl
c001a8fb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a8ff:	c1 e8 08             	shr    eax,0x8
c001a902:	89 c1                	mov    ecx,eax
c001a904:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a90b:	8d 50 01             	lea    edx,[eax+0x1]
c001a90e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a915:	88 ca                	mov    dl,cl
c001a917:	88 10                	mov    BYTE PTR [eax],dl
c001a919:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001a920:	8d 50 01             	lea    edx,[eax+0x1]
c001a923:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001a92a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001a92e:	88 10                	mov    BYTE PTR [eax],dl
c001a930:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001a934:	83 c4 60             	add    esp,0x60
c001a937:	5b                   	pop    ebx
c001a938:	5e                   	pop    esi
c001a939:	5f                   	pop    edi
c001a93a:	c3                   	ret    

c001a93b <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a93b:	57                   	push   edi
c001a93c:	56                   	push   esi
c001a93d:	53                   	push   ebx
c001a93e:	83 ec 70             	sub    esp,0x70
c001a941:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a948:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c001a94c:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c001a954:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a95b:	83 c0 0e             	add    eax,0xe
c001a95e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a962:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a969:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a96d:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c001a975:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a979:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a97d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a981:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a985:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001a989:	89 c6                	mov    esi,eax
c001a98b:	89 d7                	mov    edi,edx
c001a98d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a98f:	89 c8                	mov    eax,ecx
c001a991:	89 fa                	mov    edx,edi
c001a993:	89 f3                	mov    ebx,esi
c001a995:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c001a999:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001a99d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a9a1:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a9a9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001a9b0:	83 c0 08             	add    eax,0x8
c001a9b3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001a9b7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001a9be:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a9c2:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001a9ca:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001a9ce:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001a9d2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a9d6:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001a9da:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001a9de:	89 c6                	mov    esi,eax
c001a9e0:	89 d7                	mov    edi,edx
c001a9e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a9e4:	89 c8                	mov    eax,ecx
c001a9e6:	89 fa                	mov    edx,edi
c001a9e8:	89 f3                	mov    ebx,esi
c001a9ea:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001a9ee:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001a9f2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a9f6:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c001a9fe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa05:	8d 50 01             	lea    edx,[eax+0x1]
c001aa08:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa0f:	8a 00                	mov    al,BYTE PTR [eax]
c001aa11:	0f b6 c0             	movzx  eax,al
c001aa14:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001aa19:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001aa20:	8d 50 01             	lea    edx,[eax+0x1]
c001aa23:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001aa2a:	8a 00                	mov    al,BYTE PTR [eax]
c001aa2c:	0f b6 c0             	movzx  eax,al
c001aa2f:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c001aa34:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001aa39:	c1 e0 08             	shl    eax,0x8
c001aa3c:	89 c2                	mov    edx,eax
c001aa3e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aa42:	09 d0                	or     eax,edx
c001aa44:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aa4b:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aa4f:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c001aa57:	75 46                	jne    c001aa9f <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aa59:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa63:	66 3d dc 05          	cmp    ax,0x5dc
c001aa67:	77 16                	ja     c001aa7f <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c001aa69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa70:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa73:	0f b7 c0             	movzx  eax,ax
c001aa76:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c001aa7d:	eb 20                	jmp    c001aa9f <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c001aa7f:	83 ec 0c             	sub    esp,0xc
c001aa82:	68 b8 c5 02 c0       	push   0xc002c5b8
c001aa87:	e8 ef 7d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001aa8c:	83 c4 10             	add    esp,0x10
c001aa8f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001aa96:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001aa9a:	e9 17 01 00 00       	jmp    c001abb6 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27b>
c001aa9f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aaa6:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001aaad:	8b 12                	mov    edx,DWORD PTR [edx]
c001aaaf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aab3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001aaba:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001aabe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aac2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aac6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aaca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aace:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aad2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aad6:	89 c6                	mov    esi,eax
c001aad8:	89 d7                	mov    edi,edx
c001aada:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aadc:	89 c8                	mov    eax,ecx
c001aade:	89 fa                	mov    edx,edi
c001aae0:	89 f3                	mov    ebx,esi
c001aae2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001aae6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001aaea:	89 04 24             	mov    DWORD PTR [esp],eax
c001aaed:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001aaf4:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c001aafb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab02:	8d 50 01             	lea    edx,[eax+0x1]
c001ab05:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab0c:	8a 00                	mov    al,BYTE PTR [eax]
c001ab0e:	0f b6 c0             	movzx  eax,al
c001ab11:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001ab15:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab1c:	8d 50 01             	lea    edx,[eax+0x1]
c001ab1f:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab26:	8a 00                	mov    al,BYTE PTR [eax]
c001ab28:	0f b6 c0             	movzx  eax,al
c001ab2b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001ab2f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab36:	8d 50 01             	lea    edx,[eax+0x1]
c001ab39:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab40:	8a 00                	mov    al,BYTE PTR [eax]
c001ab42:	0f b6 c0             	movzx  eax,al
c001ab45:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001ab49:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab50:	8d 50 01             	lea    edx,[eax+0x1]
c001ab53:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001ab5a:	8a 00                	mov    al,BYTE PTR [eax]
c001ab5c:	0f b6 c0             	movzx  eax,al
c001ab5f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001ab63:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ab67:	c1 e0 18             	shl    eax,0x18
c001ab6a:	89 c2                	mov    edx,eax
c001ab6c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ab70:	c1 e0 10             	shl    eax,0x10
c001ab73:	09 c2                	or     edx,eax
c001ab75:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001ab79:	c1 e0 08             	shl    eax,0x8
c001ab7c:	09 d0                	or     eax,edx
c001ab7e:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c001ab82:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001ab86:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001ab8d:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c001ab91:	83 e8 04             	sub    eax,0x4
c001ab94:	83 ec 08             	sub    esp,0x8
c001ab97:	50                   	push   eax
c001ab98:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001ab9c:	e8 f6 fa ff ff       	call   c001a697 <Net::crc32Calc(unsigned char*, int)>
c001aba1:	83 c4 10             	add    esp,0x10
c001aba4:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c001aba8:	0f 94 c2             	sete   dl
c001abab:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001abb2:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001abb5:	90                   	nop
c001abb6:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001abbd:	83 c4 70             	add    esp,0x70
c001abc0:	5b                   	pop    ebx
c001abc1:	5e                   	pop    esi
c001abc2:	5f                   	pop    edi
c001abc3:	c2 04 00             	ret    0x4

c001abc6 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001abc6:	55                   	push   ebp
c001abc7:	57                   	push   edi
c001abc8:	56                   	push   esi
c001abc9:	53                   	push   ebx
c001abca:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001abd0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001abd7:	8a 1e                	mov    bl,BYTE PTR [esi]
c001abd9:	8d 6e 01             	lea    ebp,[esi+0x1]
c001abdc:	80 fb 40             	cmp    bl,0x40
c001abdf:	75 1b                	jne    c001abfc <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001abe1:	8a 16                	mov    dl,BYTE PTR [esi]
c001abe3:	84 d2                	test   dl,dl
c001abe5:	0f 84 f1 00 00 00    	je     c001acdc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001abeb:	8d 46 01             	lea    eax,[esi+0x1]
c001abee:	80 fa 3a             	cmp    dl,0x3a
c001abf1:	74 04                	je     c001abf7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001abf3:	89 c6                	mov    esi,eax
c001abf5:	eb ea                	jmp    c001abe1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001abf7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001abfa:	89 c6                	mov    esi,eax
c001abfc:	50                   	push   eax
c001abfd:	6a 40                	push   0x40
c001abff:	6a 00                	push   0x0
c001ac01:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ac05:	50                   	push   eax
c001ac06:	e8 45 5b fe ff       	call   c0000750 <memset>
c001ac0b:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ac12:	31 c0                	xor    eax,eax
c001ac14:	83 c4 10             	add    esp,0x10
c001ac17:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ac19:	84 c9                	test   cl,cl
c001ac1b:	0f 84 bb 00 00 00    	je     c001acdc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac21:	3d c7 00 00 00       	cmp    eax,0xc7
c001ac26:	0f 8f b0 00 00 00    	jg     c001acdc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac2c:	80 f9 0a             	cmp    cl,0xa
c001ac2f:	0f 85 98 00 00 00    	jne    c001accd <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ac35:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ac3a:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ac3e:	a8 df                	test   al,0xdf
c001ac40:	0f 94 c1             	sete   cl
c001ac43:	3c 23                	cmp    al,0x23
c001ac45:	0f 94 c2             	sete   dl
c001ac48:	08 d1                	or     cl,dl
c001ac4a:	75 4a                	jne    c001ac96 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac4c:	8d 50 f7             	lea    edx,[eax-0x9]
c001ac4f:	80 fa 01             	cmp    dl,0x1
c001ac52:	76 42                	jbe    c001ac96 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac54:	3c 5b                	cmp    al,0x5b
c001ac56:	75 42                	jne    c001ac9a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ac58:	80 fb 40             	cmp    bl,0x40
c001ac5b:	75 39                	jne    c001ac96 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ac5d:	83 ec 0c             	sub    esp,0xc
c001ac60:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ac64:	52                   	push   edx
c001ac65:	e8 02 5b fe ff       	call   c000076c <strlen>
c001ac6a:	83 c4 10             	add    esp,0x10
c001ac6d:	83 f8 3f             	cmp    eax,0x3f
c001ac70:	77 6a                	ja     c001acdc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ac72:	50                   	push   eax
c001ac73:	50                   	push   eax
c001ac74:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ac78:	52                   	push   edx
c001ac79:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac7d:	52                   	push   edx
c001ac7e:	e8 89 5b fe ff       	call   c000080c <strcpy>
c001ac83:	58                   	pop    eax
c001ac84:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac88:	52                   	push   edx
c001ac89:	e8 de 5a fe ff       	call   c000076c <strlen>
c001ac8e:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001ac93:	83 c4 10             	add    esp,0x10
c001ac96:	31 d2                	xor    edx,edx
c001ac98:	eb 3a                	jmp    c001acd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001ac9a:	80 fb 40             	cmp    bl,0x40
c001ac9d:	74 06                	je     c001aca5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001ac9f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aca3:	eb 20                	jmp    c001acc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aca5:	50                   	push   eax
c001aca6:	50                   	push   eax
c001aca7:	55                   	push   ebp
c001aca8:	8d 44 24 24          	lea    eax,[esp+0x24]
c001acac:	50                   	push   eax
c001acad:	e8 e6 5b fe ff       	call   c0000898 <strcmp>
c001acb2:	83 c4 10             	add    esp,0x10
c001acb5:	85 c0                	test   eax,eax
c001acb7:	75 dd                	jne    c001ac96 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acb9:	eb e4                	jmp    c001ac9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001acbb:	8d 50 01             	lea    edx,[eax+0x1]
c001acbe:	80 f9 3d             	cmp    cl,0x3d
c001acc1:	74 1d                	je     c001ace0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001acc3:	89 d0                	mov    eax,edx
c001acc5:	8a 08                	mov    cl,BYTE PTR [eax]
c001acc7:	84 c9                	test   cl,cl
c001acc9:	75 f0                	jne    c001acbb <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001accb:	eb 0f                	jmp    c001acdc <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001accd:	8d 50 01             	lea    edx,[eax+0x1]
c001acd0:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001acd4:	47                   	inc    edi
c001acd5:	89 d0                	mov    eax,edx
c001acd7:	e9 3b ff ff ff       	jmp    c001ac17 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001acdc:	31 c0                	xor    eax,eax
c001acde:	eb 33                	jmp    c001ad13 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001ace0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ace4:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001ace7:	50                   	push   eax
c001ace8:	50                   	push   eax
c001ace9:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aced:	50                   	push   eax
c001acee:	56                   	push   esi
c001acef:	e8 a4 5b fe ff       	call   c0000898 <strcmp>
c001acf4:	83 c4 10             	add    esp,0x10
c001acf7:	85 c0                	test   eax,eax
c001acf9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acfd:	75 97                	jne    c001ac96 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001acff:	51                   	push   ecx
c001ad00:	51                   	push   ecx
c001ad01:	52                   	push   edx
c001ad02:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001ad09:	e8 fe 5a fe ff       	call   c000080c <strcpy>
c001ad0e:	83 c4 10             	add    esp,0x10
c001ad11:	b0 01                	mov    al,0x1
c001ad13:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ad19:	5b                   	pop    ebx
c001ad1a:	5e                   	pop    esi
c001ad1b:	5f                   	pop    edi
c001ad1c:	5d                   	pop    ebp
c001ad1d:	c3                   	ret    

c001ad1e <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001ad1e:	57                   	push   edi
c001ad1f:	56                   	push   esi
c001ad20:	53                   	push   ebx
c001ad21:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad27:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001ad2e:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001ad35:	53                   	push   ebx
c001ad36:	e8 31 5a fe ff       	call   c000076c <strlen>
c001ad3b:	89 34 24             	mov    DWORD PTR [esp],esi
c001ad3e:	89 c7                	mov    edi,eax
c001ad40:	e8 27 5a fe ff       	call   c000076c <strlen>
c001ad45:	83 c4 10             	add    esp,0x10
c001ad48:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001ad4c:	3d ff 00 00 00       	cmp    eax,0xff
c001ad51:	0f 87 d3 00 00 00    	ja     c001ae2a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ad57:	57                   	push   edi
c001ad58:	57                   	push   edi
c001ad59:	56                   	push   esi
c001ad5a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001ad5e:	56                   	push   esi
c001ad5f:	e8 a8 5a fe ff       	call   c000080c <strcpy>
c001ad64:	58                   	pop    eax
c001ad65:	5a                   	pop    edx
c001ad66:	68 0d cb 02 c0       	push   0xc002cb0d
c001ad6b:	56                   	push   esi
c001ad6c:	e8 db 5b fe ff       	call   c000094c <strcat>
c001ad71:	59                   	pop    ecx
c001ad72:	5f                   	pop    edi
c001ad73:	53                   	push   ebx
c001ad74:	56                   	push   esi
c001ad75:	e8 d2 5b fe ff       	call   c000094c <strcat>
c001ad7a:	58                   	pop    eax
c001ad7b:	5a                   	pop    edx
c001ad7c:	68 04 c6 02 c0       	push   0xc002c604
c001ad81:	56                   	push   esi
c001ad82:	e8 c5 5b fe ff       	call   c000094c <strcat>
c001ad87:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ad8e:	e8 f9 4a ff ff       	call   c000f88c <malloc>
c001ad93:	83 c4 0c             	add    esp,0xc
c001ad96:	89 c3                	mov    ebx,eax
c001ad98:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001ad9e:	56                   	push   esi
c001ad9f:	50                   	push   eax
c001ada0:	e8 35 80 ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001ada5:	83 c4 10             	add    esp,0x10
c001ada8:	85 db                	test   ebx,ebx
c001adaa:	74 7e                	je     c001ae2a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001adac:	51                   	push   ecx
c001adad:	51                   	push   ecx
c001adae:	6a 01                	push   0x1
c001adb0:	53                   	push   ebx
c001adb1:	e8 88 80 ff ff       	call   c0012e3e <File::open(FileOpenMode)>
c001adb6:	83 c4 10             	add    esp,0x10
c001adb9:	85 c0                	test   eax,eax
c001adbb:	74 08                	je     c001adc5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001adbd:	83 ec 0c             	sub    esp,0xc
c001adc0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adc2:	53                   	push   ebx
c001adc3:	eb 5f                	jmp    c001ae24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001adc5:	52                   	push   edx
c001adc6:	8d 44 24 17          	lea    eax,[esp+0x17]
c001adca:	50                   	push   eax
c001adcb:	8d 44 24 20          	lea    eax,[esp+0x20]
c001adcf:	50                   	push   eax
c001add0:	53                   	push   ebx
c001add1:	e8 14 83 ff ff       	call   c00130ea <File::stat(unsigned long long*, bool*)>
c001add6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adda:	83 c4 10             	add    esp,0x10
c001addd:	89 c1                	mov    ecx,eax
c001addf:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ade3:	74 31                	je     c001ae16 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ade5:	83 ec 0c             	sub    esp,0xc
c001ade8:	50                   	push   eax
c001ade9:	e8 9e 4a ff ff       	call   c000f88c <malloc>
c001adee:	89 c6                	mov    esi,eax
c001adf0:	58                   	pop    eax
c001adf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adf3:	8d 54 24 20          	lea    edx,[esp+0x20]
c001adf7:	52                   	push   edx
c001adf8:	56                   	push   esi
c001adf9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001adfd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ae01:	53                   	push   ebx
c001ae02:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ae05:	83 c4 20             	add    esp,0x20
c001ae08:	85 c0                	test   eax,eax
c001ae0a:	75 0a                	jne    c001ae16 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ae0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ae10:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ae14:	74 18                	je     c001ae2e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ae16:	83 ec 0c             	sub    esp,0xc
c001ae19:	53                   	push   ebx
c001ae1a:	e8 7d 80 ff ff       	call   c0012e9c <File::close()>
c001ae1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae27:	83 c4 10             	add    esp,0x10
c001ae2a:	31 c0                	xor    eax,eax
c001ae2c:	eb 3b                	jmp    c001ae69 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001ae2e:	83 ec 0c             	sub    esp,0xc
c001ae31:	53                   	push   ebx
c001ae32:	e8 65 80 ff ff       	call   c0012e9c <File::close()>
c001ae37:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ae39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae3c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ae3f:	83 c4 0c             	add    esp,0xc
c001ae42:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae49:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001ae50:	56                   	push   esi
c001ae51:	e8 70 fd ff ff       	call   c001abc6 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001ae56:	89 34 24             	mov    DWORD PTR [esp],esi
c001ae59:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001ae5d:	e8 3a 4a ff ff       	call   c000f89c <free>
c001ae62:	83 c4 10             	add    esp,0x10
c001ae65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae69:	81 c4 20 01 00 00    	add    esp,0x120
c001ae6f:	5b                   	pop    ebx
c001ae70:	5e                   	pop    esi
c001ae71:	5f                   	pop    edi
c001ae72:	c3                   	ret    

c001ae73 <Reg::getLine(char*, char*, char*)>:
c001ae73:	57                   	push   edi
c001ae74:	56                   	push   esi
c001ae75:	53                   	push   ebx
c001ae76:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ae7a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ae7e:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ae82:	57                   	push   edi
c001ae83:	56                   	push   esi
c001ae84:	53                   	push   ebx
c001ae85:	68 09 c6 02 c0       	push   0xc002c609
c001ae8a:	e8 8f fe ff ff       	call   c001ad1e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	84 c0                	test   al,al
c001ae94:	75 10                	jne    c001aea6 <Reg::getLine(char*, char*, char*)+0x33>
c001ae96:	57                   	push   edi
c001ae97:	56                   	push   esi
c001ae98:	53                   	push   ebx
c001ae99:	68 2e c6 02 c0       	push   0xc002c62e
c001ae9e:	e8 7b fe ff ff       	call   c001ad1e <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001aea3:	83 c4 10             	add    esp,0x10
c001aea6:	5b                   	pop    ebx
c001aea7:	5e                   	pop    esi
c001aea8:	5f                   	pop    edi
c001aea9:	c3                   	ret    

c001aeaa <Reg::readInt(char*, char*, int*)>:
c001aeaa:	55                   	push   ebp
c001aeab:	57                   	push   edi
c001aeac:	56                   	push   esi
c001aead:	53                   	push   ebx
c001aeae:	81 ec f0 00 00 00    	sub    esp,0xf0
c001aeb4:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001aeb8:	57                   	push   edi
c001aeb9:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aec0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001aec7:	e8 a7 ff ff ff       	call   c001ae73 <Reg::getLine(char*, char*, char*)>
c001aecc:	83 c4 10             	add    esp,0x10
c001aecf:	84 c0                	test   al,al
c001aed1:	0f 84 b3 00 00 00    	je     c001af8a <Reg::readInt(char*, char*, int*)+0xe0>
c001aed7:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001aedb:	80 fa 2b             	cmp    dl,0x2b
c001aede:	74 0c                	je     c001aeec <Reg::readInt(char*, char*, int*)+0x42>
c001aee0:	80 fa 2d             	cmp    dl,0x2d
c001aee3:	75 0e                	jne    c001aef3 <Reg::readInt(char*, char*, int*)+0x49>
c001aee5:	ba 01 00 00 00       	mov    edx,0x1
c001aeea:	eb 0b                	jmp    c001aef7 <Reg::readInt(char*, char*, int*)+0x4d>
c001aeec:	ba 01 00 00 00       	mov    edx,0x1
c001aef1:	eb 02                	jmp    c001aef5 <Reg::readInt(char*, char*, int*)+0x4b>
c001aef3:	31 d2                	xor    edx,edx
c001aef5:	31 c0                	xor    eax,eax
c001aef7:	be 0a 00 00 00       	mov    esi,0xa
c001aefc:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001af01:	75 20                	jne    c001af23 <Reg::readInt(char*, char*, int*)+0x79>
c001af03:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001af07:	80 f9 78             	cmp    cl,0x78
c001af0a:	75 0a                	jne    c001af16 <Reg::readInt(char*, char*, int*)+0x6c>
c001af0c:	83 c2 02             	add    edx,0x2
c001af0f:	be 10 00 00 00       	mov    esi,0x10
c001af14:	eb 0d                	jmp    c001af23 <Reg::readInt(char*, char*, int*)+0x79>
c001af16:	80 f9 62             	cmp    cl,0x62
c001af19:	75 08                	jne    c001af23 <Reg::readInt(char*, char*, int*)+0x79>
c001af1b:	83 c2 02             	add    edx,0x2
c001af1e:	be 02 00 00 00       	mov    esi,0x2
c001af23:	01 d7                	add    edi,edx
c001af25:	31 d2                	xor    edx,edx
c001af27:	8a 1f                	mov    bl,BYTE PTR [edi]
c001af29:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001af2d:	80 fb 0d             	cmp    bl,0xd
c001af30:	0f 94 c3             	sete   bl
c001af33:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001af38:	0f 94 c1             	sete   cl
c001af3b:	08 cb                	or     bl,cl
c001af3d:	75 3a                	jne    c001af79 <Reg::readInt(char*, char*, int*)+0xcf>
c001af3f:	0f af d6             	imul   edx,esi
c001af42:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001af47:	83 fe 10             	cmp    esi,0x10
c001af4a:	75 26                	jne    c001af72 <Reg::readInt(char*, char*, int*)+0xc8>
c001af4c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af50:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001af53:	89 e9                	mov    ecx,ebp
c001af55:	80 f9 05             	cmp    cl,0x5
c001af58:	77 06                	ja     c001af60 <Reg::readInt(char*, char*, int*)+0xb6>
c001af5a:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001af5e:	eb 16                	jmp    c001af76 <Reg::readInt(char*, char*, int*)+0xcc>
c001af60:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001af64:	83 e9 61             	sub    ecx,0x61
c001af67:	80 f9 05             	cmp    cl,0x5
c001af6a:	77 06                	ja     c001af72 <Reg::readInt(char*, char*, int*)+0xc8>
c001af6c:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001af70:	eb 04                	jmp    c001af76 <Reg::readInt(char*, char*, int*)+0xcc>
c001af72:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001af76:	47                   	inc    edi
c001af77:	eb ae                	jmp    c001af27 <Reg::readInt(char*, char*, int*)+0x7d>
c001af79:	84 c0                	test   al,al
c001af7b:	74 02                	je     c001af7f <Reg::readInt(char*, char*, int*)+0xd5>
c001af7d:	f7 da                	neg    edx
c001af7f:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001af86:	89 10                	mov    DWORD PTR [eax],edx
c001af88:	88 d8                	mov    al,bl
c001af8a:	81 c4 ec 00 00 00    	add    esp,0xec
c001af90:	5b                   	pop    ebx
c001af91:	5e                   	pop    esi
c001af92:	5f                   	pop    edi
c001af93:	5d                   	pop    ebp
c001af94:	c3                   	ret    

c001af95 <Reg::readString(char*, char*, char*, int)>:
c001af95:	57                   	push   edi
c001af96:	56                   	push   esi
c001af97:	53                   	push   ebx
c001af98:	81 ec d4 00 00 00    	sub    esp,0xd4
c001af9e:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001afa5:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001afa9:	57                   	push   edi
c001afaa:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afb1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001afb8:	e8 b6 fe ff ff       	call   c001ae73 <Reg::getLine(char*, char*, char*)>
c001afbd:	83 c4 10             	add    esp,0x10
c001afc0:	89 c6                	mov    esi,eax
c001afc2:	84 c0                	test   al,al
c001afc4:	74 44                	je     c001b00a <Reg::readString(char*, char*, char*, int)+0x75>
c001afc6:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001afcd:	31 c0                	xor    eax,eax
c001afcf:	4a                   	dec    edx
c001afd0:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001afd3:	84 c9                	test   cl,cl
c001afd5:	74 0f                	je     c001afe6 <Reg::readString(char*, char*, char*, int)+0x51>
c001afd7:	39 c2                	cmp    edx,eax
c001afd9:	7e 0b                	jle    c001afe6 <Reg::readString(char*, char*, char*, int)+0x51>
c001afdb:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001afde:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001afe3:	40                   	inc    eax
c001afe4:	eb ea                	jmp    c001afd0 <Reg::readString(char*, char*, char*, int)+0x3b>
c001afe6:	83 ec 0c             	sub    esp,0xc
c001afe9:	53                   	push   ebx
c001afea:	e8 7d 57 fe ff       	call   c000076c <strlen>
c001afef:	83 c4 10             	add    esp,0x10
c001aff2:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001aff7:	75 11                	jne    c001b00a <Reg::readString(char*, char*, char*, int)+0x75>
c001aff9:	83 ec 0c             	sub    esp,0xc
c001affc:	53                   	push   ebx
c001affd:	e8 6a 57 fe ff       	call   c000076c <strlen>
c001b002:	83 c4 10             	add    esp,0x10
c001b005:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b00a:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b010:	89 f0                	mov    eax,esi
c001b012:	5b                   	pop    ebx
c001b013:	5e                   	pop    esi
c001b014:	5f                   	pop    edi
c001b015:	c3                   	ret    

c001b016 <Reg::readBool(char*, char*, bool*)>:
c001b016:	83 ec 20             	sub    esp,0x20
c001b019:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b01d:	50                   	push   eax
c001b01e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b022:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b026:	e8 7f fe ff ff       	call   c001aeaa <Reg::readInt(char*, char*, int*)>
c001b02b:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b030:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b034:	0f 95 02             	setne  BYTE PTR [edx]
c001b037:	83 c4 2c             	add    esp,0x2c
c001b03a:	c3                   	ret    

c001b03b <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b03b:	53                   	push   ebx
c001b03c:	83 ec 1c             	sub    esp,0x1c
c001b03f:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b043:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b047:	50                   	push   eax
c001b048:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b04c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b050:	e8 c1 ff ff ff       	call   c001b016 <Reg::readBool(char*, char*, bool*)>
c001b055:	83 c4 10             	add    esp,0x10
c001b058:	84 c0                	test   al,al
c001b05a:	74 04                	je     c001b060 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b05c:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b060:	88 d8                	mov    al,bl
c001b062:	83 c4 18             	add    esp,0x18
c001b065:	5b                   	pop    ebx
c001b066:	c3                   	ret    

c001b067 <Reg::readIntWithDefault(char*, char*, int)>:
c001b067:	53                   	push   ebx
c001b068:	83 ec 1c             	sub    esp,0x1c
c001b06b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b06f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b073:	50                   	push   eax
c001b074:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b078:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b07c:	e8 29 fe ff ff       	call   c001aeaa <Reg::readInt(char*, char*, int*)>
c001b081:	83 c4 10             	add    esp,0x10
c001b084:	84 c0                	test   al,al
c001b086:	74 04                	je     c001b08c <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b088:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b08c:	89 d8                	mov    eax,ebx
c001b08e:	83 c4 18             	add    esp,0x18
c001b091:	5b                   	pop    ebx
c001b092:	c3                   	ret    

c001b093 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b093:	57                   	push   edi
c001b094:	56                   	push   esi
c001b095:	56                   	push   esi
c001b096:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b09a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b09e:	56                   	push   esi
c001b09f:	57                   	push   edi
c001b0a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0a8:	e8 e8 fe ff ff       	call   c001af95 <Reg::readString(char*, char*, char*, int)>
c001b0ad:	83 c4 10             	add    esp,0x10
c001b0b0:	84 c0                	test   al,al
c001b0b2:	75 1a                	jne    c001b0ce <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001b0b4:	51                   	push   ecx
c001b0b5:	56                   	push   esi
c001b0b6:	6a 00                	push   0x0
c001b0b8:	57                   	push   edi
c001b0b9:	e8 92 56 fe ff       	call   c0000750 <memset>
c001b0be:	8d 4e ff             	lea    ecx,[esi-0x1]
c001b0c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0c5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b0c7:	83 c4 10             	add    esp,0x10
c001b0ca:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b0ce:	89 f8                	mov    eax,edi
c001b0d0:	5a                   	pop    edx
c001b0d1:	5e                   	pop    esi
c001b0d2:	5f                   	pop    edi
c001b0d3:	c3                   	ret    

c001b0d4 <Sys::eject(regs*)>:
c001b0d4:	83 ec 0c             	sub    esp,0xc
c001b0d7:	83 ca ff             	or     edx,0xffffffff
c001b0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b0de:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b0e1:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b0e6:	83 e9 41             	sub    ecx,0x41
c001b0e9:	83 f9 19             	cmp    ecx,0x19
c001b0ec:	77 18                	ja     c001b106 <Sys::eject(regs*)+0x32>
c001b0ee:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c001b0f5:	85 c9                	test   ecx,ecx
c001b0f7:	74 0d                	je     c001b106 <Sys::eject(regs*)+0x32>
c001b0f9:	83 ec 0c             	sub    esp,0xc
c001b0fc:	51                   	push   ecx
c001b0fd:	e8 8c b0 ff ff       	call   c001618e <LogicalDisk::eject()>
c001b102:	83 c4 10             	add    esp,0x10
c001b105:	99                   	cdq    
c001b106:	83 c4 0c             	add    esp,0xc
c001b109:	c3                   	ret    

c001b10a <Sys::exit(regs*)>:
c001b10a:	83 ec 18             	sub    esp,0x18
c001b10d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b111:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b114:	e8 7e 38 00 00       	call   c001e997 <terminateTask(int)>
c001b119:	83 c8 ff             	or     eax,0xffffffff
c001b11c:	83 c4 1c             	add    esp,0x1c
c001b11f:	89 c2                	mov    edx,eax
c001b121:	c3                   	ret    

c001b122 <Sys::getCwd(regs*)>:
c001b122:	83 ec 10             	sub    esp,0x10
c001b125:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b129:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b12c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b12f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b134:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b137:	e8 a0 7a ff ff       	call   c0012bdc <Fs::getcwd(Process*, char*, int)>
c001b13c:	83 c4 1c             	add    esp,0x1c
c001b13f:	99                   	cdq    
c001b140:	c3                   	ret    

c001b141 <Sys::getPID(regs*)>:
c001b141:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b146:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b149:	8b 00                	mov    eax,DWORD PTR [eax]
c001b14b:	99                   	cdq    
c001b14c:	c3                   	ret    

c001b14d <Sys::getRAMData(regs*)>:
c001b14d:	8b 0d 94 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee94
c001b153:	6b 05 90 ee 02 c0 64 	imul   eax,DWORD PTR ds:0xc002ee90,0x64
c001b15a:	99                   	cdq    
c001b15b:	f7 f9                	idiv   ecx
c001b15d:	c1 e0 18             	shl    eax,0x18
c001b160:	09 c8                	or     eax,ecx
c001b162:	99                   	cdq    
c001b163:	c3                   	ret    

c001b164 <Sys::getVGAPtr(regs*)>:
c001b164:	55                   	push   ebp
c001b165:	57                   	push   edi
c001b166:	56                   	push   esi
c001b167:	53                   	push   ebx
c001b168:	83 ec 18             	sub    esp,0x18
c001b16b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b16f:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b172:	e8 02 33 00 00       	call   c001e479 <Thr::processFromPID(int)>
c001b177:	83 c4 10             	add    esp,0x10
c001b17a:	89 c1                	mov    ecx,eax
c001b17c:	b8 01 00 00 00       	mov    eax,0x1
c001b181:	85 c9                	test   ecx,ecx
c001b183:	74 59                	je     c001b1de <Sys::getVGAPtr(regs*)+0x7a>
c001b185:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b18b:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b18f:	74 0c                	je     c001b19d <Sys::getVGAPtr(regs*)+0x39>
c001b191:	83 ec 0c             	sub    esp,0xc
c001b194:	53                   	push   ebx
c001b195:	e8 04 55 ff ff       	call   c001069e <setActiveTerminal(VgaText*)>
c001b19a:	83 c4 10             	add    esp,0x10
c001b19d:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b1a0:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b1a3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b1a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1aa:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b1ad:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b1b0:	81 c3 82 00 00 00    	add    ebx,0x82
c001b1b6:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b1bc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b1bf:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b1c2:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b1c8:	50                   	push   eax
c001b1c9:	50                   	push   eax
c001b1ca:	53                   	push   ebx
c001b1cb:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b1ce:	05 a8 0f 00 00       	add    eax,0xfa8
c001b1d3:	50                   	push   eax
c001b1d4:	e8 33 56 fe ff       	call   c000080c <strcpy>
c001b1d9:	83 c4 10             	add    esp,0x10
c001b1dc:	31 c0                	xor    eax,eax
c001b1de:	83 c4 0c             	add    esp,0xc
c001b1e1:	31 d2                	xor    edx,edx
c001b1e3:	5b                   	pop    ebx
c001b1e4:	5e                   	pop    esi
c001b1e5:	5f                   	pop    edi
c001b1e6:	5d                   	pop    ebp
c001b1e7:	c3                   	ret    

c001b1e8 <Sys::loadDLL(regs*)>:
c001b1e8:	56                   	push   esi
c001b1e9:	53                   	push   ebx
c001b1ea:	31 d2                	xor    edx,edx
c001b1ec:	51                   	push   ecx
c001b1ed:	b8 01 00 00 00       	mov    eax,0x1
c001b1f2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1f6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b1fa:	0f 84 8c 00 00 00    	je     c001b28c <Sys::loadDLL(regs*)+0xa4>
c001b200:	83 ec 0c             	sub    esp,0xc
c001b203:	68 14 01 00 00       	push   0x114
c001b208:	e8 7f 46 ff ff       	call   c000f88c <malloc>
c001b20d:	83 c4 0c             	add    esp,0xc
c001b210:	89 c3                	mov    ebx,eax
c001b212:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b217:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b21a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b21d:	53                   	push   ebx
c001b21e:	e8 b7 7b ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001b223:	83 c4 10             	add    esp,0x10
c001b226:	31 d2                	xor    edx,edx
c001b228:	b8 02 00 00 00       	mov    eax,0x2
c001b22d:	85 db                	test   ebx,ebx
c001b22f:	74 5b                	je     c001b28c <Sys::loadDLL(regs*)+0xa4>
c001b231:	83 ec 0c             	sub    esp,0xc
c001b234:	53                   	push   ebx
c001b235:	e8 72 7e ff ff       	call   c00130ac <File::exists()>
c001b23a:	83 c4 10             	add    esp,0x10
c001b23d:	84 c0                	test   al,al
c001b23f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b241:	75 11                	jne    c001b254 <Sys::loadDLL(regs*)+0x6c>
c001b243:	83 ec 0c             	sub    esp,0xc
c001b246:	53                   	push   ebx
c001b247:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b24a:	83 c4 10             	add    esp,0x10
c001b24d:	b8 03 00 00 00       	mov    eax,0x3
c001b252:	eb 36                	jmp    c001b28a <Sys::loadDLL(regs*)+0xa2>
c001b254:	83 ec 0c             	sub    esp,0xc
c001b257:	53                   	push   ebx
c001b258:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b25b:	58                   	pop    eax
c001b25c:	5a                   	pop    edx
c001b25d:	6a 00                	push   0x0
c001b25f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b262:	e8 1e 24 00 00       	call   c001d685 <Thr::loadDLL(char const*, bool)>
c001b267:	83 c4 10             	add    esp,0x10
c001b26a:	89 c1                	mov    ecx,eax
c001b26c:	31 d2                	xor    edx,edx
c001b26e:	b8 04 00 00 00       	mov    eax,0x4
c001b273:	85 c9                	test   ecx,ecx
c001b275:	74 15                	je     c001b28c <Sys::loadDLL(regs*)+0xa4>
c001b277:	53                   	push   ebx
c001b278:	53                   	push   ebx
c001b279:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c001b27f:	51                   	push   ecx
c001b280:	e8 2b 26 00 00       	call   c001d8b0 <Thr::executeDLL(unsigned long, void*)>
c001b285:	83 c4 10             	add    esp,0x10
c001b288:	31 c0                	xor    eax,eax
c001b28a:	31 d2                	xor    edx,edx
c001b28c:	59                   	pop    ecx
c001b28d:	5b                   	pop    ebx
c001b28e:	5e                   	pop    esi
c001b28f:	c3                   	ret    

c001b290 <Sys::read(regs*)>:
c001b290:	57                   	push   edi
c001b291:	56                   	push   esi
c001b292:	53                   	push   ebx
c001b293:	83 ec 10             	sub    esp,0x10
c001b296:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b29a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b29d:	83 f8 02             	cmp    eax,0x2
c001b2a0:	77 10                	ja     c001b2b2 <Sys::read(regs*)+0x22>
c001b2a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2aa:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b2b0:	eb 0e                	jmp    c001b2c0 <Sys::read(regs*)+0x30>
c001b2b2:	83 ec 0c             	sub    esp,0xc
c001b2b5:	50                   	push   eax
c001b2b6:	e8 64 60 ff ff       	call   c001131f <getFromFileDescriptor(int)>
c001b2bb:	83 c4 10             	add    esp,0x10
c001b2be:	89 c1                	mov    ecx,eax
c001b2c0:	83 c8 ff             	or     eax,0xffffffff
c001b2c3:	85 c9                	test   ecx,ecx
c001b2c5:	89 c2                	mov    edx,eax
c001b2c7:	74 28                	je     c001b2f1 <Sys::read(regs*)+0x61>
c001b2c9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b2d1:	31 ff                	xor    edi,edi
c001b2d3:	83 ec 0c             	sub    esp,0xc
c001b2d6:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b2d8:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b2dc:	52                   	push   edx
c001b2dd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b2e0:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b2e3:	57                   	push   edi
c001b2e4:	56                   	push   esi
c001b2e5:	51                   	push   ecx
c001b2e6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b2e9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b2ed:	83 c4 20             	add    esp,0x20
c001b2f0:	99                   	cdq    
c001b2f1:	83 c4 10             	add    esp,0x10
c001b2f4:	5b                   	pop    ebx
c001b2f5:	5e                   	pop    esi
c001b2f6:	5f                   	pop    edi
c001b2f7:	c3                   	ret    

c001b2f8 <Sys::sbrk(regs*)>:
c001b2f8:	56                   	push   esi
c001b2f9:	53                   	push   ebx
c001b2fa:	50                   	push   eax
c001b2fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b300:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b304:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b307:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b30a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b310:	85 db                	test   ebx,ebx
c001b312:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b315:	74 02                	je     c001b319 <Sys::sbrk(regs*)+0x21>
c001b317:	79 06                	jns    c001b31f <Sys::sbrk(regs*)+0x27>
c001b319:	89 f0                	mov    eax,esi
c001b31b:	31 d2                	xor    edx,edx
c001b31d:	eb 2a                	jmp    c001b349 <Sys::sbrk(regs*)+0x51>
c001b31f:	83 c8 ff             	or     eax,0xffffffff
c001b322:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b328:	89 c2                	mov    edx,eax
c001b32a:	77 1d                	ja     c001b349 <Sys::sbrk(regs*)+0x51>
c001b32c:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b332:	50                   	push   eax
c001b333:	c1 ea 0c             	shr    edx,0xc
c001b336:	68 07 0c 00 00       	push   0xc07
c001b33b:	52                   	push   edx
c001b33c:	51                   	push   ecx
c001b33d:	e8 6c 6a ff ff       	call   c0011dae <VAS::allocatePages(int, int)>
c001b342:	89 f0                	mov    eax,esi
c001b344:	31 d2                	xor    edx,edx
c001b346:	83 c4 10             	add    esp,0x10
c001b349:	59                   	pop    ecx
c001b34a:	5b                   	pop    ebx
c001b34b:	5e                   	pop    esi
c001b34c:	c3                   	ret    

c001b34d <Sys::setCwd(regs*)>:
c001b34d:	83 ec 14             	sub    esp,0x14
c001b350:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b354:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b357:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b35c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b35f:	e8 e7 7d ff ff       	call   c001314b <Fs::setcwd(Process*, char*)>
c001b364:	83 c4 1c             	add    esp,0x1c
c001b367:	99                   	cdq    
c001b368:	c3                   	ret    

c001b369 <Sys::setTime(regs*)>:
c001b369:	55                   	push   ebp
c001b36a:	31 d2                	xor    edx,edx
c001b36c:	57                   	push   edi
c001b36d:	bf 18 00 00 00       	mov    edi,0x18
c001b372:	56                   	push   esi
c001b373:	53                   	push   ebx
c001b374:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b379:	83 ec 30             	sub    esp,0x30
c001b37c:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b380:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b383:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b386:	f7 f3                	div    ebx
c001b388:	89 d6                	mov    esi,edx
c001b38a:	31 d2                	xor    edx,edx
c001b38c:	f7 f3                	div    ebx
c001b38e:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b391:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b395:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b39a:	31 d2                	xor    edx,edx
c001b39c:	f7 f3                	div    ebx
c001b39e:	31 d2                	xor    edx,edx
c001b3a0:	bb 0c 00 00 00       	mov    ebx,0xc
c001b3a5:	f7 f7                	div    edi
c001b3a7:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b3aa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b3ae:	0f b7 cd             	movzx  ecx,bp
c001b3b1:	56                   	push   esi
c001b3b2:	89 c7                	mov    edi,eax
c001b3b4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b3b8:	c1 e6 10             	shl    esi,0x10
c001b3bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b3bf:	83 e7 1f             	and    edi,0x1f
c001b3c2:	51                   	push   ecx
c001b3c3:	47                   	inc    edi
c001b3c4:	c1 e8 05             	shr    eax,0x5
c001b3c7:	31 d2                	xor    edx,edx
c001b3c9:	f7 f3                	div    ebx
c001b3cb:	31 db                	xor    ebx,ebx
c001b3cd:	52                   	push   edx
c001b3ce:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b3d2:	57                   	push   edi
c001b3d3:	68 49 c6 02 c0       	push   0xc002c649
c001b3d8:	e8 9e 74 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001b3dd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b3e1:	89 f8                	mov    eax,edi
c001b3e3:	31 c9                	xor    ecx,ecx
c001b3e5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b3e9:	88 c1                	mov    cl,al
c001b3eb:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b3f1:	88 d5                	mov    ch,dl
c001b3f3:	c1 e0 10             	shl    eax,0x10
c001b3f6:	0f b7 d1             	movzx  edx,cx
c001b3f9:	09 c2                	or     edx,eax
c001b3fb:	89 d8                	mov    eax,ebx
c001b3fd:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b402:	09 f0                	or     eax,esi
c001b404:	89 c3                	mov    ebx,eax
c001b406:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b40a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b40e:	83 c4 18             	add    esp,0x18
c001b411:	53                   	push   ebx
c001b412:	52                   	push   edx
c001b413:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b417:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b41b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b41f:	e8 49 84 ff ff       	call   c001386d <datetimeToSeconds(datetime_t)>
c001b424:	83 c4 0c             	add    esp,0xc
c001b427:	52                   	push   edx
c001b428:	50                   	push   eax
c001b429:	56                   	push   esi
c001b42a:	e8 c5 85 ff ff       	call   c00139f4 <secondsToDatetime(unsigned long long)>
c001b42f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b433:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b437:	51                   	push   ecx
c001b438:	89 d6                	mov    esi,edx
c001b43a:	51                   	push   ecx
c001b43b:	c1 ee 10             	shr    esi,0x10
c001b43e:	89 f3                	mov    ebx,esi
c001b440:	0f b6 f3             	movzx  esi,bl
c001b443:	56                   	push   esi
c001b444:	0f b6 f6             	movzx  esi,dh
c001b447:	0f b6 d2             	movzx  edx,dl
c001b44a:	56                   	push   esi
c001b44b:	52                   	push   edx
c001b44c:	89 c2                	mov    edx,eax
c001b44e:	c1 ea 10             	shr    edx,0x10
c001b451:	52                   	push   edx
c001b452:	0f b6 d4             	movzx  edx,ah
c001b455:	0f b6 c0             	movzx  eax,al
c001b458:	52                   	push   edx
c001b459:	50                   	push   eax
c001b45a:	68 65 c6 02 c0       	push   0xc002c665
c001b45f:	e8 17 74 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001b464:	83 c4 2c             	add    esp,0x2c
c001b467:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001b46c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b470:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b474:	53                   	push   ebx
c001b475:	51                   	push   ecx
c001b476:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b47c:	e8 13 85 ff ff       	call   c0013994 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b481:	83 f0 01             	xor    eax,0x1
c001b484:	31 d2                	xor    edx,edx
c001b486:	0f b6 c0             	movzx  eax,al
c001b489:	83 c4 3c             	add    esp,0x3c
c001b48c:	5b                   	pop    ebx
c001b48d:	5e                   	pop    esi
c001b48e:	5f                   	pop    edi
c001b48f:	5d                   	pop    ebp
c001b490:	c3                   	ret    

c001b491 <Sys::timezone(regs*)>:
c001b491:	53                   	push   ebx
c001b492:	83 ec 08             	sub    esp,0x8
c001b495:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b499:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b49d:	75 17                	jne    c001b4b6 <Sys::timezone(regs*)+0x25>
c001b49f:	83 ec 0c             	sub    esp,0xc
c001b4a2:	68 81 c6 02 c0       	push   0xc002c681
c001b4a7:	e8 cf 73 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001b4ac:	83 c8 ff             	or     eax,0xffffffff
c001b4af:	83 c4 10             	add    esp,0x10
c001b4b2:	89 c2                	mov    edx,eax
c001b4b4:	eb 20                	jmp    c001b4d6 <Sys::timezone(regs*)+0x45>
c001b4b6:	83 ec 0c             	sub    esp,0xc
c001b4b9:	68 b9 c6 02 c0       	push   0xc002c6b9
c001b4be:	e8 b8 73 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001b4c3:	58                   	pop    eax
c001b4c4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b4c7:	e8 2a 82 ff ff       	call   c00136f6 <User::loadClockSettings(int)>
c001b4cc:	83 c4 10             	add    esp,0x10
c001b4cf:	b8 01 00 00 00       	mov    eax,0x1
c001b4d4:	31 d2                	xor    edx,edx
c001b4d6:	83 c4 08             	add    esp,0x8
c001b4d9:	5b                   	pop    ebx
c001b4da:	c3                   	ret    

c001b4db <Sys::write(regs*)>:
c001b4db:	57                   	push   edi
c001b4dc:	56                   	push   esi
c001b4dd:	53                   	push   ebx
c001b4de:	83 ec 10             	sub    esp,0x10
c001b4e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b4e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b4e8:	83 f8 02             	cmp    eax,0x2
c001b4eb:	77 10                	ja     c001b4fd <Sys::write(regs*)+0x22>
c001b4ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4f5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b4fb:	eb 0e                	jmp    c001b50b <Sys::write(regs*)+0x30>
c001b4fd:	83 ec 0c             	sub    esp,0xc
c001b500:	50                   	push   eax
c001b501:	e8 19 5e ff ff       	call   c001131f <getFromFileDescriptor(int)>
c001b506:	83 c4 10             	add    esp,0x10
c001b509:	89 c1                	mov    ecx,eax
c001b50b:	83 c8 ff             	or     eax,0xffffffff
c001b50e:	85 c9                	test   ecx,ecx
c001b510:	89 c2                	mov    edx,eax
c001b512:	74 28                	je     c001b53c <Sys::write(regs*)+0x61>
c001b514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b51c:	31 ff                	xor    edi,edi
c001b51e:	83 ec 0c             	sub    esp,0xc
c001b521:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b523:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b527:	52                   	push   edx
c001b528:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b52b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b52e:	57                   	push   edi
c001b52f:	56                   	push   esi
c001b530:	51                   	push   ecx
c001b531:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b534:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b538:	83 c4 20             	add    esp,0x20
c001b53b:	99                   	cdq    
c001b53c:	83 c4 10             	add    esp,0x10
c001b53f:	5b                   	pop    ebx
c001b540:	5e                   	pop    esi
c001b541:	5f                   	pop    edi
c001b542:	c3                   	ret    

c001b543 <Sys::wsbe(regs*)>:
c001b543:	57                   	push   edi
c001b544:	b9 0b 00 00 00       	mov    ecx,0xb
c001b549:	56                   	push   esi
c001b54a:	be f8 c6 02 c0       	mov    esi,0xc002c6f8
c001b54f:	53                   	push   ebx
c001b550:	83 ec 30             	sub    esp,0x30
c001b553:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b557:	fc                   	cld    
c001b558:	83 ec 0c             	sub    esp,0xc
c001b55b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b55d:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b561:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b566:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b569:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b56f:	8b 06                	mov    eax,DWORD PTR [esi]
c001b571:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b574:	57                   	push   edi
c001b575:	e8 f2 51 fe ff       	call   c000076c <strlen>
c001b57a:	5a                   	pop    edx
c001b57b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b57f:	52                   	push   edx
c001b580:	31 d2                	xor    edx,edx
c001b582:	57                   	push   edi
c001b583:	52                   	push   edx
c001b584:	50                   	push   eax
c001b585:	56                   	push   esi
c001b586:	ff d3                	call   ebx
c001b588:	83 c4 14             	add    esp,0x14
c001b58b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b58f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b592:	e8 00 34 00 00       	call   c001e997 <terminateTask(int)>
c001b597:	83 c4 40             	add    esp,0x40
c001b59a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b59f:	5b                   	pop    ebx
c001b5a0:	31 d2                	xor    edx,edx
c001b5a2:	5e                   	pop    esi
c001b5a3:	5f                   	pop    edi
c001b5a4:	c3                   	ret    

c001b5a5 <Sys::yield(regs*)>:
c001b5a5:	57                   	push   edi
c001b5a6:	56                   	push   esi
c001b5a7:	53                   	push   ebx
c001b5a8:	fa                   	cli    
c001b5a9:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001b5af:	e8 b0 2a 00 00       	call   c001e064 <schedule()>
c001b5b4:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001b5b9:	48                   	dec    eax
c001b5ba:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001b5bf:	75 01                	jne    c001b5c2 <Sys::yield(regs*)+0x1d>
c001b5c1:	fb                   	sti    
c001b5c2:	8b 35 b0 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f4b0
c001b5c8:	8b 3d b4 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4b4
c001b5ce:	89 f0                	mov    eax,esi
c001b5d0:	89 fb                	mov    ebx,edi
c001b5d2:	89 f1                	mov    ecx,esi
c001b5d4:	c1 e0 07             	shl    eax,0x7
c001b5d7:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b5db:	25 80 30 0f 00       	and    eax,0xf3080
c001b5e0:	c1 eb 17             	shr    ebx,0x17
c001b5e3:	31 c8                	xor    eax,ecx
c001b5e5:	89 da                	mov    edx,ebx
c001b5e7:	5b                   	pop    ebx
c001b5e8:	5e                   	pop    esi
c001b5e9:	5f                   	pop    edi
c001b5ea:	c3                   	ret    

c001b5eb <sysCallSeekDir(regs*)>:
c001b5eb:	31 c0                	xor    eax,eax
c001b5ed:	31 d2                	xor    edx,edx
c001b5ef:	c3                   	ret    

c001b5f0 <sysCallTellDir(regs*)>:
c001b5f0:	31 c0                	xor    eax,eax
c001b5f2:	31 d2                	xor    edx,edx
c001b5f4:	c3                   	ret    

c001b5f5 <sysCallVerify(regs*)>:
c001b5f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5f9:	31 d2                	xor    edx,edx
c001b5fb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b5fe:	c3                   	ret    

c001b5ff <sysFormatDisk(regs*)>:
c001b5ff:	56                   	push   esi
c001b600:	53                   	push   ebx
c001b601:	53                   	push   ebx
c001b602:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b606:	8b 1d b4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efb4
c001b60c:	eb 25                	jmp    c001b633 <sysFormatDisk(regs*)+0x34>
c001b60e:	83 ec 0c             	sub    esp,0xc
c001b611:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b614:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b616:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b619:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b61c:	50                   	push   eax
c001b61d:	ff 34 85 40 f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0bc0]
c001b624:	53                   	push   ebx
c001b625:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b628:	83 c4 20             	add    esp,0x20
c001b62b:	83 f8 08             	cmp    eax,0x8
c001b62e:	75 12                	jne    c001b642 <sysFormatDisk(regs*)+0x43>
c001b630:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b633:	85 db                	test   ebx,ebx
c001b635:	75 d7                	jne    c001b60e <sysFormatDisk(regs*)+0xf>
c001b637:	59                   	pop    ecx
c001b638:	b8 03 00 00 00       	mov    eax,0x3
c001b63d:	31 d2                	xor    edx,edx
c001b63f:	5b                   	pop    ebx
c001b640:	5e                   	pop    esi
c001b641:	c3                   	ret    
c001b642:	85 c0                	test   eax,eax
c001b644:	74 1b                	je     c001b661 <sysFormatDisk(regs*)+0x62>
c001b646:	83 f8 09             	cmp    eax,0x9
c001b649:	74 0b                	je     c001b656 <sysFormatDisk(regs*)+0x57>
c001b64b:	59                   	pop    ecx
c001b64c:	b8 02 00 00 00       	mov    eax,0x2
c001b651:	31 d2                	xor    edx,edx
c001b653:	5b                   	pop    ebx
c001b654:	5e                   	pop    esi
c001b655:	c3                   	ret    
c001b656:	59                   	pop    ecx
c001b657:	b8 01 00 00 00       	mov    eax,0x1
c001b65c:	31 d2                	xor    edx,edx
c001b65e:	5b                   	pop    ebx
c001b65f:	5e                   	pop    esi
c001b660:	c3                   	ret    
c001b661:	59                   	pop    ecx
c001b662:	31 c0                	xor    eax,eax
c001b664:	31 d2                	xor    edx,edx
c001b666:	5b                   	pop    ebx
c001b667:	5e                   	pop    esi
c001b668:	c3                   	ret    

c001b669 <sysSetDiskVolumeLabel(regs*)>:
c001b669:	56                   	push   esi
c001b66a:	53                   	push   ebx
c001b66b:	53                   	push   ebx
c001b66c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b670:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b673:	83 f8 19             	cmp    eax,0x19
c001b676:	77 29                	ja     c001b6a1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b678:	8b 0c 85 40 f4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0bc0]
c001b67f:	85 c9                	test   ecx,ecx
c001b681:	74 1e                	je     c001b6a1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b683:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b686:	85 d2                	test   edx,edx
c001b688:	74 17                	je     c001b6a1 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b68a:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b690:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b692:	52                   	push   edx
c001b693:	50                   	push   eax
c001b694:	51                   	push   ecx
c001b695:	53                   	push   ebx
c001b696:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	99                   	cdq    
c001b69d:	59                   	pop    ecx
c001b69e:	5b                   	pop    ebx
c001b69f:	5e                   	pop    esi
c001b6a0:	c3                   	ret    
c001b6a1:	59                   	pop    ecx
c001b6a2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6ac:	5b                   	pop    ebx
c001b6ad:	5e                   	pop    esi
c001b6ae:	c3                   	ret    

c001b6af <sysGetDiskVolumeLabel(regs*)>:
c001b6af:	57                   	push   edi
c001b6b0:	56                   	push   esi
c001b6b1:	53                   	push   ebx
c001b6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b6b6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b6b9:	83 fa 19             	cmp    edx,0x19
c001b6bc:	77 34                	ja     c001b6f2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6be:	8b 0c 95 40 f4 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0bc0]
c001b6c5:	85 c9                	test   ecx,ecx
c001b6c7:	74 29                	je     c001b6f2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6c9:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b6cc:	85 db                	test   ebx,ebx
c001b6ce:	74 22                	je     c001b6f2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6d0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b6d3:	85 c0                	test   eax,eax
c001b6d5:	74 1b                	je     c001b6f2 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b6d7:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b6dd:	83 ec 0c             	sub    esp,0xc
c001b6e0:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b6e2:	50                   	push   eax
c001b6e3:	53                   	push   ebx
c001b6e4:	52                   	push   edx
c001b6e5:	51                   	push   ecx
c001b6e6:	56                   	push   esi
c001b6e7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b6ea:	83 c4 20             	add    esp,0x20
c001b6ed:	99                   	cdq    
c001b6ee:	5b                   	pop    ebx
c001b6ef:	5e                   	pop    esi
c001b6f0:	5f                   	pop    edi
c001b6f1:	c3                   	ret    
c001b6f2:	5b                   	pop    ebx
c001b6f3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b6f8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6fd:	5e                   	pop    esi
c001b6fe:	5f                   	pop    edi
c001b6ff:	c3                   	ret    

c001b700 <sysShutdown(regs*)>:
c001b700:	83 ec 0c             	sub    esp,0xc
c001b703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b707:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b70a:	85 c0                	test   eax,eax
c001b70c:	74 18                	je     c001b726 <sysShutdown(regs*)+0x26>
c001b70e:	83 f8 01             	cmp    eax,0x1
c001b711:	74 38                	je     c001b74b <sysShutdown(regs*)+0x4b>
c001b713:	83 f8 02             	cmp    eax,0x2
c001b716:	74 24                	je     c001b73c <sysShutdown(regs*)+0x3c>
c001b718:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b71d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b722:	83 c4 0c             	add    esp,0xc
c001b725:	c3                   	ret    
c001b726:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001b72b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b72d:	6a 00                	push   0x0
c001b72f:	6a 00                	push   0x0
c001b731:	6a 00                	push   0x0
c001b733:	50                   	push   eax
c001b734:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b737:	83 c4 10             	add    esp,0x10
c001b73a:	eb dc                	jmp    c001b718 <sysShutdown(regs*)+0x18>
c001b73c:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001b741:	8b 10                	mov    edx,DWORD PTR [eax]
c001b743:	6a 00                	push   0x0
c001b745:	6a 00                	push   0x0
c001b747:	6a 01                	push   0x1
c001b749:	eb e8                	jmp    c001b733 <sysShutdown(regs*)+0x33>
c001b74b:	a1 e0 14 03 c0       	mov    eax,ds:0xc00314e0
c001b750:	85 c0                	test   eax,eax
c001b752:	74 02                	je     c001b756 <sysShutdown(regs*)+0x56>
c001b754:	ff d0                	call   eax
c001b756:	31 c0                	xor    eax,eax
c001b758:	31 d2                	xor    edx,edx
c001b75a:	83 c4 0c             	add    esp,0xc
c001b75d:	c3                   	ret    

c001b75e <sysCallRealpath(regs*)>:
c001b75e:	83 ec 0c             	sub    esp,0xc
c001b761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b765:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b768:	85 d2                	test   edx,edx
c001b76a:	74 07                	je     c001b773 <sysCallRealpath(regs*)+0x15>
c001b76c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b76f:	85 c0                	test   eax,eax
c001b771:	75 0b                	jne    c001b77e <sysCallRealpath(regs*)+0x20>
c001b773:	b8 01 00 00 00       	mov    eax,0x1
c001b778:	31 d2                	xor    edx,edx
c001b77a:	83 c4 0c             	add    esp,0xc
c001b77d:	c3                   	ret    
c001b77e:	51                   	push   ecx
c001b77f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b785:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b788:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b78e:	51                   	push   ecx
c001b78f:	52                   	push   edx
c001b790:	50                   	push   eax
c001b791:	e8 9a 74 ff ff       	call   c0012c30 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b796:	83 c4 10             	add    esp,0x10
c001b799:	31 c0                	xor    eax,eax
c001b79b:	31 d2                	xor    edx,edx
c001b79d:	83 c4 0c             	add    esp,0xc
c001b7a0:	c3                   	ret    

c001b7a1 <sysCallGetArgc(regs*)>:
c001b7a1:	83 ec 14             	sub    esp,0x14
c001b7a4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7a9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7ac:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b7b2:	68 24 c7 02 c0       	push   0xc002c724
c001b7b7:	e8 bf 70 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001b7bc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b7c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b7c4:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b7ca:	83 c4 1c             	add    esp,0x1c
c001b7cd:	99                   	cdq    
c001b7ce:	c3                   	ret    

c001b7cf <sysCallReadDir(regs*)>:
c001b7cf:	53                   	push   ebx
c001b7d0:	83 ec 18             	sub    esp,0x18
c001b7d3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b7d7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b7da:	83 f8 02             	cmp    eax,0x2
c001b7dd:	76 53                	jbe    c001b832 <sysCallReadDir(regs*)+0x63>
c001b7df:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b7e2:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b7e8:	77 4f                	ja     c001b839 <sysCallReadDir(regs*)+0x6a>
c001b7ea:	83 ec 0c             	sub    esp,0xc
c001b7ed:	50                   	push   eax
c001b7ee:	e8 2c 5b ff ff       	call   c001131f <getFromFileDescriptor(int)>
c001b7f3:	83 c4 10             	add    esp,0x10
c001b7f6:	85 c0                	test   eax,eax
c001b7f8:	74 50                	je     c001b84a <sysCallReadDir(regs*)+0x7b>
c001b7fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b802:	83 ec 0c             	sub    esp,0xc
c001b805:	8b 10                	mov    edx,DWORD PTR [eax]
c001b807:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b80b:	51                   	push   ecx
c001b80c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b80f:	6a 00                	push   0x0
c001b811:	68 10 01 00 00       	push   0x110
c001b816:	50                   	push   eax
c001b817:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b81a:	83 c4 20             	add    esp,0x20
c001b81d:	85 c0                	test   eax,eax
c001b81f:	74 38                	je     c001b859 <sysCallReadDir(regs*)+0x8a>
c001b821:	83 f8 07             	cmp    eax,0x7
c001b824:	74 0c                	je     c001b832 <sysCallReadDir(regs*)+0x63>
c001b826:	b8 02 00 00 00       	mov    eax,0x2
c001b82b:	31 d2                	xor    edx,edx
c001b82d:	83 c4 18             	add    esp,0x18
c001b830:	5b                   	pop    ebx
c001b831:	c3                   	ret    
c001b832:	b8 01 00 00 00       	mov    eax,0x1
c001b837:	eb f2                	jmp    c001b82b <sysCallReadDir(regs*)+0x5c>
c001b839:	83 ec 08             	sub    esp,0x8
c001b83c:	52                   	push   edx
c001b83d:	68 48 c8 02 c0       	push   0xc002c848
c001b842:	e8 34 70 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001b847:	83 c4 10             	add    esp,0x10
c001b84a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b84f:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b854:	83 c4 18             	add    esp,0x18
c001b857:	5b                   	pop    ebx
c001b858:	c3                   	ret    
c001b859:	31 c0                	xor    eax,eax
c001b85b:	eb ce                	jmp    c001b82b <sysCallReadDir(regs*)+0x5c>

c001b85d <sysCallIsATTY(regs*)>:
c001b85d:	83 ec 0c             	sub    esp,0xc
c001b860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b864:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b867:	83 f8 02             	cmp    eax,0x2
c001b86a:	76 07                	jbe    c001b873 <sysCallIsATTY(regs*)+0x16>
c001b86c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b871:	75 26                	jne    c001b899 <sysCallIsATTY(regs*)+0x3c>
c001b873:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b878:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b87b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b881:	85 c0                	test   eax,eax
c001b883:	74 24                	je     c001b8a9 <sysCallIsATTY(regs*)+0x4c>
c001b885:	83 ec 0c             	sub    esp,0xc
c001b888:	8b 10                	mov    edx,DWORD PTR [eax]
c001b88a:	50                   	push   eax
c001b88b:	ff 12                	call   DWORD PTR [edx]
c001b88d:	31 d2                	xor    edx,edx
c001b88f:	0f b6 c0             	movzx  eax,al
c001b892:	83 c4 10             	add    esp,0x10
c001b895:	83 c4 0c             	add    esp,0xc
c001b898:	c3                   	ret    
c001b899:	83 ec 0c             	sub    esp,0xc
c001b89c:	50                   	push   eax
c001b89d:	e8 7d 5a ff ff       	call   c001131f <getFromFileDescriptor(int)>
c001b8a2:	83 c4 10             	add    esp,0x10
c001b8a5:	85 c0                	test   eax,eax
c001b8a7:	75 dc                	jne    c001b885 <sysCallIsATTY(regs*)+0x28>
c001b8a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8b3:	83 c4 0c             	add    esp,0xc
c001b8b6:	c3                   	ret    

c001b8b7 <sysCallSeek(regs*)>:
c001b8b7:	53                   	push   ebx
c001b8b8:	83 ec 08             	sub    esp,0x8
c001b8bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8bf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b8c2:	83 f8 02             	cmp    eax,0x2
c001b8c5:	76 4a                	jbe    c001b911 <sysCallSeek(regs*)+0x5a>
c001b8c7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b8cc:	77 32                	ja     c001b900 <sysCallSeek(regs*)+0x49>
c001b8ce:	83 ec 0c             	sub    esp,0xc
c001b8d1:	50                   	push   eax
c001b8d2:	e8 48 5a ff ff       	call   c001131f <getFromFileDescriptor(int)>
c001b8d7:	83 c4 0c             	add    esp,0xc
c001b8da:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b8dd:	31 db                	xor    ebx,ebx
c001b8df:	53                   	push   ebx
c001b8e0:	51                   	push   ecx
c001b8e1:	50                   	push   eax
c001b8e2:	e8 15 76 ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001b8e7:	83 c4 10             	add    esp,0x10
c001b8ea:	85 c0                	test   eax,eax
c001b8ec:	0f 95 c0             	setne  al
c001b8ef:	31 d2                	xor    edx,edx
c001b8f1:	0f b6 c0             	movzx  eax,al
c001b8f4:	f7 d8                	neg    eax
c001b8f6:	83 d2 00             	adc    edx,0x0
c001b8f9:	83 c4 08             	add    esp,0x8
c001b8fc:	f7 da                	neg    edx
c001b8fe:	5b                   	pop    ebx
c001b8ff:	c3                   	ret    
c001b900:	83 ec 08             	sub    esp,0x8
c001b903:	50                   	push   eax
c001b904:	68 2f c7 02 c0       	push   0xc002c72f
c001b909:	e8 6d 6f ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001b90e:	83 c4 10             	add    esp,0x10
c001b911:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b916:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b91b:	83 c4 08             	add    esp,0x8
c001b91e:	5b                   	pop    ebx
c001b91f:	c3                   	ret    

c001b920 <sysCallTell(regs*)>:
c001b920:	53                   	push   ebx
c001b921:	83 ec 08             	sub    esp,0x8
c001b924:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b928:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b92b:	83 f8 02             	cmp    eax,0x2
c001b92e:	76 5e                	jbe    c001b98e <sysCallTell(regs*)+0x6e>
c001b930:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b935:	77 2d                	ja     c001b964 <sysCallTell(regs*)+0x44>
c001b937:	83 ec 0c             	sub    esp,0xc
c001b93a:	50                   	push   eax
c001b93b:	e8 df 59 ff ff       	call   c001131f <getFromFileDescriptor(int)>
c001b940:	5a                   	pop    edx
c001b941:	59                   	pop    ecx
c001b942:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b945:	50                   	push   eax
c001b946:	e8 07 76 ff ff       	call   c0012f52 <File::tell(unsigned long long*)>
c001b94b:	83 c4 10             	add    esp,0x10
c001b94e:	85 c0                	test   eax,eax
c001b950:	0f 95 c0             	setne  al
c001b953:	31 d2                	xor    edx,edx
c001b955:	0f b6 c0             	movzx  eax,al
c001b958:	f7 d8                	neg    eax
c001b95a:	83 d2 00             	adc    edx,0x0
c001b95d:	83 c4 08             	add    esp,0x8
c001b960:	f7 da                	neg    edx
c001b962:	5b                   	pop    ebx
c001b963:	c3                   	ret    
c001b964:	83 ec 08             	sub    esp,0x8
c001b967:	50                   	push   eax
c001b968:	68 49 c7 02 c0       	push   0xc002c749
c001b96d:	e8 09 6f ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001b972:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b975:	83 c4 10             	add    esp,0x10
c001b978:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b97e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b985:	31 d2                	xor    edx,edx
c001b987:	31 c0                	xor    eax,eax
c001b989:	83 c4 08             	add    esp,0x8
c001b98c:	5b                   	pop    ebx
c001b98d:	c3                   	ret    
c001b98e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b993:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b998:	83 c4 08             	add    esp,0x8
c001b99b:	5b                   	pop    ebx
c001b99c:	c3                   	ret    

c001b99d <sysCallSize(regs*)>:
c001b99d:	53                   	push   ebx
c001b99e:	83 ec 18             	sub    esp,0x18
c001b9a1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b9a5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b9a8:	83 f8 02             	cmp    eax,0x2
c001b9ab:	76 64                	jbe    c001ba11 <sysCallSize(regs*)+0x74>
c001b9ad:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b9b2:	77 33                	ja     c001b9e7 <sysCallSize(regs*)+0x4a>
c001b9b4:	83 ec 0c             	sub    esp,0xc
c001b9b7:	50                   	push   eax
c001b9b8:	e8 62 59 ff ff       	call   c001131f <getFromFileDescriptor(int)>
c001b9bd:	83 c4 0c             	add    esp,0xc
c001b9c0:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b9c4:	52                   	push   edx
c001b9c5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b9c8:	50                   	push   eax
c001b9c9:	e8 1c 77 ff ff       	call   c00130ea <File::stat(unsigned long long*, bool*)>
c001b9ce:	83 c4 10             	add    esp,0x10
c001b9d1:	85 c0                	test   eax,eax
c001b9d3:	0f 95 c0             	setne  al
c001b9d6:	31 d2                	xor    edx,edx
c001b9d8:	0f b6 c0             	movzx  eax,al
c001b9db:	f7 d8                	neg    eax
c001b9dd:	83 d2 00             	adc    edx,0x0
c001b9e0:	83 c4 18             	add    esp,0x18
c001b9e3:	f7 da                	neg    edx
c001b9e5:	5b                   	pop    ebx
c001b9e6:	c3                   	ret    
c001b9e7:	83 ec 08             	sub    esp,0x8
c001b9ea:	50                   	push   eax
c001b9eb:	68 63 c7 02 c0       	push   0xc002c763
c001b9f0:	e8 86 6e ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001b9f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b9f8:	83 c4 10             	add    esp,0x10
c001b9fb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ba01:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ba08:	31 d2                	xor    edx,edx
c001ba0a:	31 c0                	xor    eax,eax
c001ba0c:	83 c4 18             	add    esp,0x18
c001ba0f:	5b                   	pop    ebx
c001ba10:	c3                   	ret    
c001ba11:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba16:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba1b:	83 c4 18             	add    esp,0x18
c001ba1e:	5b                   	pop    ebx
c001ba1f:	c3                   	ret    

c001ba20 <sysCallSizeFromFilename(regs*)>:
c001ba20:	57                   	push   edi
c001ba21:	56                   	push   esi
c001ba22:	53                   	push   ebx
c001ba23:	83 ec 20             	sub    esp,0x20
c001ba26:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba2a:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ba2d:	83 fb 02             	cmp    ebx,0x2
c001ba30:	0f 86 99 00 00 00    	jbe    c001bacf <sysCallSizeFromFilename(regs*)+0xaf>
c001ba36:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ba3c:	77 65                	ja     c001baa3 <sysCallSizeFromFilename(regs*)+0x83>
c001ba3e:	83 ec 0c             	sub    esp,0xc
c001ba41:	68 14 01 00 00       	push   0x114
c001ba46:	e8 41 3e ff ff       	call   c000f88c <malloc>
c001ba4b:	83 c4 0c             	add    esp,0xc
c001ba4e:	89 c6                	mov    esi,eax
c001ba50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba55:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba58:	53                   	push   ebx
c001ba59:	56                   	push   esi
c001ba5a:	e8 7b 73 ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001ba5f:	83 c4 0c             	add    esp,0xc
c001ba62:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ba66:	50                   	push   eax
c001ba67:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ba6a:	56                   	push   esi
c001ba6b:	e8 7a 76 ff ff       	call   c00130ea <File::stat(unsigned long long*, bool*)>
c001ba70:	83 c4 10             	add    esp,0x10
c001ba73:	85 f6                	test   esi,esi
c001ba75:	74 14                	je     c001ba8b <sysCallSizeFromFilename(regs*)+0x6b>
c001ba77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba7b:	8b 16                	mov    edx,DWORD PTR [esi]
c001ba7d:	83 ec 0c             	sub    esp,0xc
c001ba80:	56                   	push   esi
c001ba81:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba84:	83 c4 10             	add    esp,0x10
c001ba87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba8b:	85 c0                	test   eax,eax
c001ba8d:	0f 95 c0             	setne  al
c001ba90:	31 d2                	xor    edx,edx
c001ba92:	0f b6 c0             	movzx  eax,al
c001ba95:	f7 d8                	neg    eax
c001ba97:	83 d2 00             	adc    edx,0x0
c001ba9a:	83 c4 20             	add    esp,0x20
c001ba9d:	f7 da                	neg    edx
c001ba9f:	5b                   	pop    ebx
c001baa0:	5e                   	pop    esi
c001baa1:	5f                   	pop    edi
c001baa2:	c3                   	ret    
c001baa3:	83 ec 08             	sub    esp,0x8
c001baa6:	53                   	push   ebx
c001baa7:	68 63 c7 02 c0       	push   0xc002c763
c001baac:	e8 ca 6d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bab1:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bab4:	83 c4 10             	add    esp,0x10
c001bab7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001babd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bac4:	31 d2                	xor    edx,edx
c001bac6:	83 c4 20             	add    esp,0x20
c001bac9:	31 c0                	xor    eax,eax
c001bacb:	5b                   	pop    ebx
c001bacc:	5e                   	pop    esi
c001bacd:	5f                   	pop    edi
c001bace:	c3                   	ret    
c001bacf:	83 c4 20             	add    esp,0x20
c001bad2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bad7:	5b                   	pop    ebx
c001bad8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001badd:	5e                   	pop    esi
c001bade:	5f                   	pop    edi
c001badf:	c3                   	ret    

c001bae0 <sysCallClose(regs*)>:
c001bae0:	53                   	push   ebx
c001bae1:	83 ec 08             	sub    esp,0x8
c001bae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001baeb:	83 f8 02             	cmp    eax,0x2
c001baee:	76 50                	jbe    c001bb40 <sysCallClose(regs*)+0x60>
c001baf0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001baf5:	74 58                	je     c001bb4f <sysCallClose(regs*)+0x6f>
c001baf7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bafc:	74 60                	je     c001bb5e <sysCallClose(regs*)+0x7e>
c001bafe:	77 2f                	ja     c001bb2f <sysCallClose(regs*)+0x4f>
c001bb00:	83 ec 0c             	sub    esp,0xc
c001bb03:	50                   	push   eax
c001bb04:	e8 16 58 ff ff       	call   c001131f <getFromFileDescriptor(int)>
c001bb09:	89 c3                	mov    ebx,eax
c001bb0b:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb0e:	e8 89 73 ff ff       	call   c0012e9c <File::close()>
c001bb13:	83 c4 10             	add    esp,0x10
c001bb16:	85 db                	test   ebx,ebx
c001bb18:	74 0c                	je     c001bb26 <sysCallClose(regs*)+0x46>
c001bb1a:	83 ec 0c             	sub    esp,0xc
c001bb1d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb1f:	53                   	push   ebx
c001bb20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bb23:	83 c4 10             	add    esp,0x10
c001bb26:	31 c0                	xor    eax,eax
c001bb28:	31 d2                	xor    edx,edx
c001bb2a:	83 c4 08             	add    esp,0x8
c001bb2d:	5b                   	pop    ebx
c001bb2e:	c3                   	ret    
c001bb2f:	83 ec 08             	sub    esp,0x8
c001bb32:	50                   	push   eax
c001bb33:	68 6c c8 02 c0       	push   0xc002c86c
c001bb38:	e8 3e 6d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bb3d:	83 c4 10             	add    esp,0x10
c001bb40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb45:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb4a:	83 c4 08             	add    esp,0x8
c001bb4d:	5b                   	pop    ebx
c001bb4e:	c3                   	ret    
c001bb4f:	83 ec 0c             	sub    esp,0xc
c001bb52:	68 7e c7 02 c0       	push   0xc002c77e
c001bb57:	e8 1f 6d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bb5c:	eb c5                	jmp    c001bb23 <sysCallClose(regs*)+0x43>
c001bb5e:	83 ec 0c             	sub    esp,0xc
c001bb61:	68 8c c7 02 c0       	push   0xc002c78c
c001bb66:	eb ef                	jmp    c001bb57 <sysCallClose(regs*)+0x77>

c001bb68 <sysCallOpenDir(regs*)>:
c001bb68:	56                   	push   esi
c001bb69:	53                   	push   ebx
c001bb6a:	53                   	push   ebx
c001bb6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bb6f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bb72:	85 f6                	test   esi,esi
c001bb74:	74 59                	je     c001bbcf <sysCallOpenDir(regs*)+0x67>
c001bb76:	83 ec 0c             	sub    esp,0xc
c001bb79:	68 14 01 00 00       	push   0x114
c001bb7e:	e8 09 3d ff ff       	call   c000f88c <malloc>
c001bb83:	83 c4 0c             	add    esp,0xc
c001bb86:	89 c6                	mov    esi,eax
c001bb88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb8d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bb90:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bb93:	56                   	push   esi
c001bb94:	e8 ed 76 ff ff       	call   c0013286 <Directory::Directory(char const*, Process*)>
c001bb99:	83 c4 10             	add    esp,0x10
c001bb9c:	85 f6                	test   esi,esi
c001bb9e:	74 2f                	je     c001bbcf <sysCallOpenDir(regs*)+0x67>
c001bba0:	83 ec 0c             	sub    esp,0xc
c001bba3:	56                   	push   esi
c001bba4:	e8 41 77 ff ff       	call   c00132ea <Directory::open()>
c001bba9:	83 c4 10             	add    esp,0x10
c001bbac:	85 c0                	test   eax,eax
c001bbae:	75 1f                	jne    c001bbcf <sysCallOpenDir(regs*)+0x67>
c001bbb0:	83 ec 0c             	sub    esp,0xc
c001bbb3:	56                   	push   esi
c001bbb4:	e8 71 54 ff ff       	call   c001102a <UnixFile::getFileDescriptor()>
c001bbb9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bbbc:	83 c4 10             	add    esp,0x10
c001bbbf:	89 02                	mov    DWORD PTR [edx],eax
c001bbc1:	c1 f8 1f             	sar    eax,0x1f
c001bbc4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bbc7:	31 c0                	xor    eax,eax
c001bbc9:	59                   	pop    ecx
c001bbca:	31 d2                	xor    edx,edx
c001bbcc:	5b                   	pop    ebx
c001bbcd:	5e                   	pop    esi
c001bbce:	c3                   	ret    
c001bbcf:	59                   	pop    ecx
c001bbd0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbd5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbda:	5b                   	pop    ebx
c001bbdb:	5e                   	pop    esi
c001bbdc:	c3                   	ret    

c001bbdd <sysCallCloseDir(regs*)>:
c001bbdd:	53                   	push   ebx
c001bbde:	83 ec 08             	sub    esp,0x8
c001bbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbe5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bbe8:	83 f8 02             	cmp    eax,0x2
c001bbeb:	76 47                	jbe    c001bc34 <sysCallCloseDir(regs*)+0x57>
c001bbed:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bbf2:	77 2f                	ja     c001bc23 <sysCallCloseDir(regs*)+0x46>
c001bbf4:	83 ec 0c             	sub    esp,0xc
c001bbf7:	50                   	push   eax
c001bbf8:	e8 22 57 ff ff       	call   c001131f <getFromFileDescriptor(int)>
c001bbfd:	89 c3                	mov    ebx,eax
c001bbff:	89 04 24             	mov    DWORD PTR [esp],eax
c001bc02:	e8 3f 77 ff ff       	call   c0013346 <Directory::close()>
c001bc07:	83 c4 10             	add    esp,0x10
c001bc0a:	85 db                	test   ebx,ebx
c001bc0c:	74 0c                	je     c001bc1a <sysCallCloseDir(regs*)+0x3d>
c001bc0e:	83 ec 0c             	sub    esp,0xc
c001bc11:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc13:	53                   	push   ebx
c001bc14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc17:	83 c4 10             	add    esp,0x10
c001bc1a:	31 c0                	xor    eax,eax
c001bc1c:	31 d2                	xor    edx,edx
c001bc1e:	83 c4 08             	add    esp,0x8
c001bc21:	5b                   	pop    ebx
c001bc22:	c3                   	ret    
c001bc23:	83 ec 08             	sub    esp,0x8
c001bc26:	50                   	push   eax
c001bc27:	68 94 c8 02 c0       	push   0xc002c894
c001bc2c:	e8 4a 6c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bc31:	83 c4 10             	add    esp,0x10
c001bc34:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc39:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc3e:	83 c4 08             	add    esp,0x8
c001bc41:	5b                   	pop    ebx
c001bc42:	c3                   	ret    

c001bc43 <sysCallMakeDir(regs*)>:
c001bc43:	56                   	push   esi
c001bc44:	53                   	push   ebx
c001bc45:	83 ec 10             	sub    esp,0x10
c001bc48:	68 14 01 00 00       	push   0x114
c001bc4d:	e8 3a 3c ff ff       	call   c000f88c <malloc>
c001bc52:	83 c4 0c             	add    esp,0xc
c001bc55:	89 c3                	mov    ebx,eax
c001bc57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc5c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bc63:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bc66:	53                   	push   ebx
c001bc67:	e8 1a 76 ff ff       	call   c0013286 <Directory::Directory(char const*, Process*)>
c001bc6c:	83 c4 10             	add    esp,0x10
c001bc6f:	85 db                	test   ebx,ebx
c001bc71:	74 32                	je     c001bca5 <sysCallMakeDir(regs*)+0x62>
c001bc73:	83 ec 0c             	sub    esp,0xc
c001bc76:	53                   	push   ebx
c001bc77:	e8 4e 78 ff ff       	call   c00134ca <Directory::create()>
c001bc7c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc7f:	89 c6                	mov    esi,eax
c001bc81:	e8 c0 76 ff ff       	call   c0013346 <Directory::close()>
c001bc86:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bc8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bc8e:	83 c4 10             	add    esp,0x10
c001bc91:	31 c0                	xor    eax,eax
c001bc93:	59                   	pop    ecx
c001bc94:	85 f6                	test   esi,esi
c001bc96:	5b                   	pop    ebx
c001bc97:	0f 95 c0             	setne  al
c001bc9a:	5e                   	pop    esi
c001bc9b:	31 d2                	xor    edx,edx
c001bc9d:	f7 d8                	neg    eax
c001bc9f:	83 d2 00             	adc    edx,0x0
c001bca2:	f7 da                	neg    edx
c001bca4:	c3                   	ret    
c001bca5:	59                   	pop    ecx
c001bca6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcab:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcb0:	5b                   	pop    ebx
c001bcb1:	5e                   	pop    esi
c001bcb2:	c3                   	ret    

c001bcb3 <sysCallWait(regs*)>:
c001bcb3:	83 ec 10             	sub    esp,0x10
c001bcb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bcba:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001bcbd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcc0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001bcc3:	e8 c8 25 00 00       	call   c001e290 <waitTask(int, int*, int)>
c001bcc8:	83 c4 1c             	add    esp,0x1c
c001bccb:	99                   	cdq    
c001bccc:	c3                   	ret    

c001bccd <sysCallNotImpl(regs*)>:
c001bccd:	83 ec 18             	sub    esp,0x18
c001bcd0:	68 9a c7 02 c0       	push   0xc002c79a
c001bcd5:	e8 d7 e5 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001bcda:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcdf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bce4:	83 c4 1c             	add    esp,0x1c
c001bce7:	c3                   	ret    

c001bce8 <sysPanic(regs*)>:
c001bce8:	83 ec 18             	sub    esp,0x18
c001bceb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bcef:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bcf2:	e8 ba e5 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001bcf7:	c7 04 24 b4 c7 02 c0 	mov    DWORD PTR [esp],0xc002c7b4
c001bcfe:	e8 ae e5 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001bd03:	b8 01 00 00 00       	mov    eax,0x1
c001bd08:	31 d2                	xor    edx,edx
c001bd0a:	83 c4 1c             	add    esp,0x1c
c001bd0d:	c3                   	ret    

c001bd0e <sysCallRmdir(regs*)>:
c001bd0e:	56                   	push   esi
c001bd0f:	53                   	push   ebx
c001bd10:	83 ec 20             	sub    esp,0x20
c001bd13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd17:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd1a:	68 14 01 00 00       	push   0x114
c001bd1f:	e8 68 3b ff ff       	call   c000f88c <malloc>
c001bd24:	83 c4 0c             	add    esp,0xc
c001bd27:	89 c3                	mov    ebx,eax
c001bd29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd2e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd31:	56                   	push   esi
c001bd32:	53                   	push   ebx
c001bd33:	e8 a2 70 ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001bd38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd3b:	e8 76 72 ff ff       	call   c0012fb6 <File::unlink()>
c001bd40:	83 c4 10             	add    esp,0x10
c001bd43:	85 db                	test   ebx,ebx
c001bd45:	74 14                	je     c001bd5b <sysCallRmdir(regs*)+0x4d>
c001bd47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd4b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bd4d:	83 ec 0c             	sub    esp,0xc
c001bd50:	53                   	push   ebx
c001bd51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bd54:	83 c4 10             	add    esp,0x10
c001bd57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd5b:	85 c0                	test   eax,eax
c001bd5d:	0f 95 c0             	setne  al
c001bd60:	31 d2                	xor    edx,edx
c001bd62:	0f b6 c0             	movzx  eax,al
c001bd65:	f7 d8                	neg    eax
c001bd67:	83 d2 00             	adc    edx,0x0
c001bd6a:	83 c4 14             	add    esp,0x14
c001bd6d:	f7 da                	neg    edx
c001bd6f:	5b                   	pop    ebx
c001bd70:	5e                   	pop    esi
c001bd71:	c3                   	ret    

c001bd72 <sysCallUnlink(regs*)>:
c001bd72:	56                   	push   esi
c001bd73:	53                   	push   ebx
c001bd74:	83 ec 20             	sub    esp,0x20
c001bd77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bd7b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bd7e:	68 14 01 00 00       	push   0x114
c001bd83:	e8 04 3b ff ff       	call   c000f88c <malloc>
c001bd88:	83 c4 0c             	add    esp,0xc
c001bd8b:	89 c3                	mov    ebx,eax
c001bd8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd92:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd95:	56                   	push   esi
c001bd96:	53                   	push   ebx
c001bd97:	e8 3e 70 ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001bd9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bd9f:	e8 12 72 ff ff       	call   c0012fb6 <File::unlink()>
c001bda4:	83 c4 10             	add    esp,0x10
c001bda7:	85 db                	test   ebx,ebx
c001bda9:	74 14                	je     c001bdbf <sysCallUnlink(regs*)+0x4d>
c001bdab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdaf:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bdb1:	83 ec 0c             	sub    esp,0xc
c001bdb4:	53                   	push   ebx
c001bdb5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bdb8:	83 c4 10             	add    esp,0x10
c001bdbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bdbf:	85 c0                	test   eax,eax
c001bdc1:	0f 95 c0             	setne  al
c001bdc4:	31 d2                	xor    edx,edx
c001bdc6:	0f b6 c0             	movzx  eax,al
c001bdc9:	f7 d8                	neg    eax
c001bdcb:	83 d2 00             	adc    edx,0x0
c001bdce:	83 c4 14             	add    esp,0x14
c001bdd1:	f7 da                	neg    edx
c001bdd3:	5b                   	pop    ebx
c001bdd4:	5e                   	pop    esi
c001bdd5:	c3                   	ret    

c001bdd6 <sysCallGetArgv(regs*)>:
c001bdd6:	83 ec 0c             	sub    esp,0xc
c001bdd9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bddd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bde0:	85 c0                	test   eax,eax
c001bde2:	78 2b                	js     c001be0f <sysCallGetArgv(regs*)+0x39>
c001bde4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bdea:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bded:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bdf3:	7d 1a                	jge    c001be0f <sysCallGetArgv(regs*)+0x39>
c001bdf5:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bdfc:	85 c0                	test   eax,eax
c001bdfe:	74 17                	je     c001be17 <sysCallGetArgv(regs*)+0x41>
c001be00:	83 ec 08             	sub    esp,0x8
c001be03:	50                   	push   eax
c001be04:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001be07:	e8 00 4a fe ff       	call   c000080c <strcpy>
c001be0c:	83 c4 10             	add    esp,0x10
c001be0f:	31 c0                	xor    eax,eax
c001be11:	31 d2                	xor    edx,edx
c001be13:	83 c4 0c             	add    esp,0xc
c001be16:	c3                   	ret    
c001be17:	b8 01 00 00 00       	mov    eax,0x1
c001be1c:	31 d2                	xor    edx,edx
c001be1e:	83 c4 0c             	add    esp,0xc
c001be21:	c3                   	ret    

c001be22 <sysCallTTYName(regs*)>:
c001be22:	56                   	push   esi
c001be23:	53                   	push   ebx
c001be24:	53                   	push   ebx
c001be25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001be29:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001be2c:	85 c0                	test   eax,eax
c001be2e:	74 5f                	je     c001be8f <sysCallTTYName(regs*)+0x6d>
c001be30:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001be33:	83 f8 02             	cmp    eax,0x2
c001be36:	77 3e                	ja     c001be76 <sysCallTTYName(regs*)+0x54>
c001be38:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be3d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be40:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001be46:	85 db                	test   ebx,ebx
c001be48:	74 45                	je     c001be8f <sysCallTTYName(regs*)+0x6d>
c001be4a:	83 ec 0c             	sub    esp,0xc
c001be4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be4f:	53                   	push   ebx
c001be50:	ff 10                	call   DWORD PTR [eax]
c001be52:	83 c4 10             	add    esp,0x10
c001be55:	84 c0                	test   al,al
c001be57:	74 41                	je     c001be9a <sysCallTTYName(regs*)+0x78>
c001be59:	83 ec 08             	sub    esp,0x8
c001be5c:	81 c3 82 00 00 00    	add    ebx,0x82
c001be62:	53                   	push   ebx
c001be63:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001be66:	e8 a1 49 fe ff       	call   c000080c <strcpy>
c001be6b:	83 c4 10             	add    esp,0x10
c001be6e:	31 c0                	xor    eax,eax
c001be70:	59                   	pop    ecx
c001be71:	31 d2                	xor    edx,edx
c001be73:	5b                   	pop    ebx
c001be74:	5e                   	pop    esi
c001be75:	c3                   	ret    
c001be76:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001be7b:	74 bb                	je     c001be38 <sysCallTTYName(regs*)+0x16>
c001be7d:	83 ec 0c             	sub    esp,0xc
c001be80:	50                   	push   eax
c001be81:	e8 99 54 ff ff       	call   c001131f <getFromFileDescriptor(int)>
c001be86:	83 c4 10             	add    esp,0x10
c001be89:	89 c3                	mov    ebx,eax
c001be8b:	85 db                	test   ebx,ebx
c001be8d:	75 bb                	jne    c001be4a <sysCallTTYName(regs*)+0x28>
c001be8f:	59                   	pop    ecx
c001be90:	b8 01 00 00 00       	mov    eax,0x1
c001be95:	31 d2                	xor    edx,edx
c001be97:	5b                   	pop    ebx
c001be98:	5e                   	pop    esi
c001be99:	c3                   	ret    
c001be9a:	59                   	pop    ecx
c001be9b:	b8 02 00 00 00       	mov    eax,0x2
c001bea0:	31 d2                	xor    edx,edx
c001bea2:	5b                   	pop    ebx
c001bea3:	5e                   	pop    esi
c001bea4:	c3                   	ret    

c001bea5 <sysCallUSleep(regs*)>:
c001bea5:	83 ec 14             	sub    esp,0x14
c001bea8:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bead:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001beb1:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001beb8:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bebb:	01 ca                	add    edx,ecx
c001bebd:	52                   	push   edx
c001bebe:	50                   	push   eax
c001bebf:	e8 a3 24 00 00       	call   c001e367 <nanoSleep(unsigned long long)>
c001bec4:	31 c0                	xor    eax,eax
c001bec6:	31 d2                	xor    edx,edx
c001bec8:	83 c4 1c             	add    esp,0x1c
c001becb:	c3                   	ret    

c001becc <sysCallSpawn(regs*)>:
c001becc:	56                   	push   esi
c001becd:	53                   	push   ebx
c001bece:	50                   	push   eax
c001becf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bed3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bed6:	85 c0                	test   eax,eax
c001bed8:	75 08                	jne    c001bee2 <sysCallSpawn(regs*)+0x16>
c001beda:	59                   	pop    ecx
c001bedb:	31 c0                	xor    eax,eax
c001bedd:	31 d2                	xor    edx,edx
c001bedf:	5b                   	pop    ebx
c001bee0:	5e                   	pop    esi
c001bee1:	c3                   	ret    
c001bee2:	83 ec 08             	sub    esp,0x8
c001bee5:	50                   	push   eax
c001bee6:	68 c3 c7 02 c0       	push   0xc002c7c3
c001beeb:	e8 8b 69 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bef0:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001bef7:	e8 90 39 ff ff       	call   c000f88c <malloc>
c001befc:	83 c4 10             	add    esp,0x10
c001beff:	89 c6                	mov    esi,eax
c001bf01:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001bf04:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bf07:	85 c0                	test   eax,eax
c001bf09:	75 32                	jne    c001bf3d <sysCallSpawn(regs*)+0x71>
c001bf0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf10:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bf13:	52                   	push   edx
c001bf14:	50                   	push   eax
c001bf15:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bf18:	56                   	push   esi
c001bf19:	e8 26 1b 00 00       	call   c001da44 <Process::Process(char const*, Process*, char**)>
c001bf1e:	83 c4 10             	add    esp,0x10
c001bf21:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bf28:	75 b0                	jne    c001beda <sysCallSpawn(regs*)+0xe>
c001bf2a:	83 ec 0c             	sub    esp,0xc
c001bf2d:	56                   	push   esi
c001bf2e:	e8 f3 1f 00 00       	call   c001df26 <Process::createUserThread()>
c001bf33:	8b 06                	mov    eax,DWORD PTR [esi]
c001bf35:	83 c4 10             	add    esp,0x10
c001bf38:	99                   	cdq    
c001bf39:	59                   	pop    ecx
c001bf3a:	5b                   	pop    ebx
c001bf3b:	5e                   	pop    esi
c001bf3c:	c3                   	ret    
c001bf3d:	31 c0                	xor    eax,eax
c001bf3f:	eb d2                	jmp    c001bf13 <sysCallSpawn(regs*)+0x47>

c001bf41 <sysCallGetEnv(regs*)>:
c001bf41:	55                   	push   ebp
c001bf42:	57                   	push   edi
c001bf43:	56                   	push   esi
c001bf44:	53                   	push   ebx
c001bf45:	83 ec 28             	sub    esp,0x28
c001bf48:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bf4c:	68 d1 c7 02 c0       	push   0xc002c7d1
c001bf51:	e8 25 69 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bf56:	5f                   	pop    edi
c001bf57:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bf5a:	5d                   	pop    ebp
c001bf5b:	53                   	push   ebx
c001bf5c:	68 fe ca 02 c0       	push   0xc002cafe
c001bf61:	e8 15 69 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bf66:	58                   	pop    eax
c001bf67:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bf6a:	5a                   	pop    edx
c001bf6b:	57                   	push   edi
c001bf6c:	68 da c7 02 c0       	push   0xc002c7da
c001bf71:	e8 05 69 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bf76:	59                   	pop    ecx
c001bf77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf7c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf7f:	e8 49 e2 ff ff       	call   c001a1cd <Krnl::getProcessTotalEnvCount(Process*)>
c001bf84:	5a                   	pop    edx
c001bf85:	89 c5                	mov    ebp,eax
c001bf87:	59                   	pop    ecx
c001bf88:	50                   	push   eax
c001bf89:	68 e4 c7 02 c0       	push   0xc002c7e4
c001bf8e:	e8 e8 68 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bf93:	83 c4 10             	add    esp,0x10
c001bf96:	39 ef                	cmp    edi,ebp
c001bf98:	7c 15                	jl     c001bfaf <sysCallGetEnv(regs*)+0x6e>
c001bf9a:	85 db                	test   ebx,ebx
c001bf9c:	75 0c                	jne    c001bfaa <sysCallGetEnv(regs*)+0x69>
c001bf9e:	83 c4 1c             	add    esp,0x1c
c001bfa1:	31 c0                	xor    eax,eax
c001bfa3:	5b                   	pop    ebx
c001bfa4:	31 d2                	xor    edx,edx
c001bfa6:	5e                   	pop    esi
c001bfa7:	5f                   	pop    edi
c001bfa8:	5d                   	pop    ebp
c001bfa9:	c3                   	ret    
c001bfaa:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bfad:	eb ef                	jmp    c001bf9e <sysCallGetEnv(regs*)+0x5d>
c001bfaf:	83 ec 0c             	sub    esp,0xc
c001bfb2:	68 f0 c7 02 c0       	push   0xc002c7f0
c001bfb7:	e8 bf 68 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bfbc:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bfc0:	83 c4 0c             	add    esp,0xc
c001bfc3:	57                   	push   edi
c001bfc4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bfca:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bfcd:	50                   	push   eax
c001bfce:	e8 1a e2 ff ff       	call   c001a1ed <Krnl::getProcessEnvPair(Process*, int)>
c001bfd3:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bfd7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bfdb:	68 af cb 02 c0       	push   0xc002cbaf
c001bfe0:	e8 96 68 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001bfe5:	83 c4 10             	add    esp,0x10
c001bfe8:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bfeb:	85 f6                	test   esi,esi
c001bfed:	75 47                	jne    c001c036 <sysCallGetEnv(regs*)+0xf5>
c001bfef:	83 ec 0c             	sub    esp,0xc
c001bff2:	55                   	push   ebp
c001bff3:	e8 74 47 fe ff       	call   c000076c <strlen>
c001bff8:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bffb:	89 c3                	mov    ebx,eax
c001bffd:	e8 6a 47 fe ff       	call   c000076c <strlen>
c001c002:	5a                   	pop    edx
c001c003:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c007:	59                   	pop    ecx
c001c008:	50                   	push   eax
c001c009:	68 f3 c7 02 c0       	push   0xc002c7f3
c001c00e:	e8 68 68 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001c013:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c016:	e8 51 47 fe ff       	call   c000076c <strlen>
c001c01b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c01e:	89 c3                	mov    ebx,eax
c001c020:	e8 47 47 fe ff       	call   c000076c <strlen>
c001c025:	83 c4 10             	add    esp,0x10
c001c028:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c02c:	83 c4 1c             	add    esp,0x1c
c001c02f:	31 d2                	xor    edx,edx
c001c031:	5b                   	pop    ebx
c001c032:	5e                   	pop    esi
c001c033:	5f                   	pop    edi
c001c034:	5d                   	pop    ebp
c001c035:	c3                   	ret    
c001c036:	83 ec 0c             	sub    esp,0xc
c001c039:	68 c9 cb 02 c0       	push   0xc002cbc9
c001c03e:	e8 38 68 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001c043:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c046:	58                   	pop    eax
c001c047:	5a                   	pop    edx
c001c048:	55                   	push   ebp
c001c049:	53                   	push   ebx
c001c04a:	e8 bd 47 fe ff       	call   c000080c <strcpy>
c001c04f:	59                   	pop    ecx
c001c050:	5e                   	pop    esi
c001c051:	68 fd c7 02 c0       	push   0xc002c7fd
c001c056:	53                   	push   ebx
c001c057:	e8 f0 48 fe ff       	call   c000094c <strcat>
c001c05c:	5d                   	pop    ebp
c001c05d:	58                   	pop    eax
c001c05e:	57                   	push   edi
c001c05f:	53                   	push   ebx
c001c060:	e8 e7 48 fe ff       	call   c000094c <strcat>
c001c065:	c7 04 24 e3 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbe3
c001c06c:	e8 0a 68 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001c071:	83 c4 10             	add    esp,0x10
c001c074:	e9 25 ff ff ff       	jmp    c001bf9e <sysCallGetEnv(regs*)+0x5d>

c001c079 <sysAppSettings(regs*)>:
c001c079:	57                   	push   edi
c001c07a:	56                   	push   esi
c001c07b:	56                   	push   esi
c001c07c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c080:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c083:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c089:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c08e:	66 3d c0 09          	cmp    ax,0x9c0
c001c092:	75 2e                	jne    c001c0c2 <sysAppSettings(regs*)+0x49>
c001c094:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c09a:	83 e0 1f             	and    eax,0x1f
c001c09d:	3c 01                	cmp    al,0x1
c001c09f:	74 2c                	je     c001c0cd <sysAppSettings(regs*)+0x54>
c001c0a1:	3c 07                	cmp    al,0x7
c001c0a3:	0f 84 b3 00 00 00    	je     c001c15c <sysAppSettings(regs*)+0xe3>
c001c0a9:	84 c0                	test   al,al
c001c0ab:	0f 84 d2 00 00 00    	je     c001c183 <sysAppSettings(regs*)+0x10a>
c001c0b1:	3c 08                	cmp    al,0x8
c001c0b3:	74 63                	je     c001c118 <sysAppSettings(regs*)+0x9f>
c001c0b5:	59                   	pop    ecx
c001c0b6:	0f b6 c0             	movzx  eax,al
c001c0b9:	5e                   	pop    esi
c001c0ba:	05 e8 03 00 00       	add    eax,0x3e8
c001c0bf:	5f                   	pop    edi
c001c0c0:	99                   	cdq    
c001c0c1:	c3                   	ret    
c001c0c2:	b8 01 00 00 00       	mov    eax,0x1
c001c0c7:	59                   	pop    ecx
c001c0c8:	31 d2                	xor    edx,edx
c001c0ca:	5e                   	pop    esi
c001c0cb:	5f                   	pop    edi
c001c0cc:	c3                   	ret    
c001c0cd:	50                   	push   eax
c001c0ce:	68 00 01 00 00       	push   0x100
c001c0d3:	6a 00                	push   0x0
c001c0d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c0dd:	83 c0 0c             	add    eax,0xc
c001c0e0:	50                   	push   eax
c001c0e1:	e8 6a 46 fe ff       	call   c0000750 <memset>
c001c0e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0eb:	b9 ff 00 00 00       	mov    ecx,0xff
c001c0f0:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c0f3:	83 c7 0c             	add    edi,0xc
c001c0f6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c0f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0fd:	5a                   	pop    edx
c001c0fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c101:	59                   	pop    ecx
c001c102:	8d 50 0c             	lea    edx,[eax+0xc]
c001c105:	52                   	push   edx
c001c106:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c10c:	e8 79 42 ff ff       	call   c001038a <VgaText::setTitle(char*)>
c001c111:	83 c4 10             	add    esp,0x10
c001c114:	31 c0                	xor    eax,eax
c001c116:	eb af                	jmp    c001c0c7 <sysAppSettings(regs*)+0x4e>
c001c118:	83 ec 08             	sub    esp,0x8
c001c11b:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c121:	83 e0 0f             	and    eax,0xf
c001c124:	50                   	push   eax
c001c125:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c12a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c12d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c133:	e8 42 42 ff ff       	call   c001037a <VgaText::setTitleColour(VgaColour)>
c001c138:	5f                   	pop    edi
c001c139:	58                   	pop    eax
c001c13a:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c140:	c1 e8 04             	shr    eax,0x4
c001c143:	83 e0 0f             	and    eax,0xf
c001c146:	50                   	push   eax
c001c147:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c14c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c14f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c155:	e8 10 42 ff ff       	call   c001036a <VgaText::setTitleTextColour(VgaColour)>
c001c15a:	eb b5                	jmp    c001c111 <sysAppSettings(regs*)+0x98>
c001c15c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c161:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c164:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c16a:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c170:	c0 e8 06             	shr    al,0x6
c001c173:	83 e0 01             	and    eax,0x1
c001c176:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c17c:	31 c0                	xor    eax,eax
c001c17e:	e9 44 ff ff ff       	jmp    c001c0c7 <sysAppSettings(regs*)+0x4e>
c001c183:	b8 02 00 00 00       	mov    eax,0x2
c001c188:	e9 3a ff ff ff       	jmp    c001c0c7 <sysAppSettings(regs*)+0x4e>

c001c18d <sysSetFatAttrib(regs*)>:
c001c18d:	57                   	push   edi
c001c18e:	56                   	push   esi
c001c18f:	53                   	push   ebx
c001c190:	83 ec 1c             	sub    esp,0x1c
c001c193:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c197:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c19a:	68 14 01 00 00       	push   0x114
c001c19f:	e8 e8 36 ff ff       	call   c000f88c <malloc>
c001c1a4:	83 c4 0c             	add    esp,0xc
c001c1a7:	89 c3                	mov    ebx,eax
c001c1a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1ae:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1b1:	57                   	push   edi
c001c1b2:	53                   	push   ebx
c001c1b3:	e8 22 6c ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001c1b8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c1bb:	83 c4 0c             	add    esp,0xc
c001c1be:	0f b6 d4             	movzx  edx,ah
c001c1c1:	0f b6 c0             	movzx  eax,al
c001c1c4:	52                   	push   edx
c001c1c5:	50                   	push   eax
c001c1c6:	53                   	push   ebx
c001c1c7:	e8 84 6e ff ff       	call   c0013050 <File::chfatattr(unsigned char, unsigned char)>
c001c1cc:	83 c4 10             	add    esp,0x10
c001c1cf:	85 db                	test   ebx,ebx
c001c1d1:	74 14                	je     c001c1e7 <sysSetFatAttrib(regs*)+0x5a>
c001c1d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1d7:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1d9:	83 ec 0c             	sub    esp,0xc
c001c1dc:	53                   	push   ebx
c001c1dd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1e0:	83 c4 10             	add    esp,0x10
c001c1e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1e7:	85 c0                	test   eax,eax
c001c1e9:	0f 95 c0             	setne  al
c001c1ec:	31 d2                	xor    edx,edx
c001c1ee:	0f b6 c0             	movzx  eax,al
c001c1f1:	f7 d8                	neg    eax
c001c1f3:	83 d2 00             	adc    edx,0x0
c001c1f6:	83 c4 10             	add    esp,0x10
c001c1f9:	f7 da                	neg    edx
c001c1fb:	5b                   	pop    ebx
c001c1fc:	5e                   	pop    esi
c001c1fd:	5f                   	pop    edi
c001c1fe:	c3                   	ret    

c001c1ff <sysPipe(regs*)>:
c001c1ff:	57                   	push   edi
c001c200:	56                   	push   esi
c001c201:	53                   	push   ebx
c001c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c206:	83 ec 0c             	sub    esp,0xc
c001c209:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c20c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c20f:	6a 20                	push   0x20
c001c211:	e8 76 36 ff ff       	call   c000f88c <malloc>
c001c216:	89 c3                	mov    ebx,eax
c001c218:	58                   	pop    eax
c001c219:	5a                   	pop    edx
c001c21a:	68 00 50 00 00       	push   0x5000
c001c21f:	53                   	push   ebx
c001c220:	e8 9d 3e ff ff       	call   c00100c2 <Pipe::Pipe(int)>
c001c225:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c228:	e8 fd 4d ff ff       	call   c001102a <UnixFile::getFileDescriptor()>
c001c22d:	89 07                	mov    DWORD PTR [edi],eax
c001c22f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c232:	e8 f3 4d ff ff       	call   c001102a <UnixFile::getFileDescriptor()>
c001c237:	83 c4 10             	add    esp,0x10
c001c23a:	89 06                	mov    DWORD PTR [esi],eax
c001c23c:	31 d2                	xor    edx,edx
c001c23e:	5b                   	pop    ebx
c001c23f:	31 c0                	xor    eax,eax
c001c241:	5e                   	pop    esi
c001c242:	5f                   	pop    edi
c001c243:	c3                   	ret    

c001c244 <sysGetUnixTime(regs*)>:
c001c244:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001c249:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c24f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c253:	e9 74 75 ff ff       	jmp    c00137cc <Clock::timeInSecondsLocal()>

c001c258 <string_ends_with(char const*, char const*)>:
c001c258:	57                   	push   edi
c001c259:	56                   	push   esi
c001c25a:	53                   	push   ebx
c001c25b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c25f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c263:	83 ec 0c             	sub    esp,0xc
c001c266:	53                   	push   ebx
c001c267:	e8 00 45 fe ff       	call   c000076c <strlen>
c001c26c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c26f:	89 c6                	mov    esi,eax
c001c271:	e8 f6 44 fe ff       	call   c000076c <strlen>
c001c276:	83 c4 10             	add    esp,0x10
c001c279:	39 c6                	cmp    esi,eax
c001c27b:	7d 06                	jge    c001c283 <string_ends_with(char const*, char const*)+0x2b>
c001c27d:	5b                   	pop    ebx
c001c27e:	31 c0                	xor    eax,eax
c001c280:	5e                   	pop    esi
c001c281:	5f                   	pop    edi
c001c282:	c3                   	ret    
c001c283:	83 ec 08             	sub    esp,0x8
c001c286:	29 c6                	sub    esi,eax
c001c288:	57                   	push   edi
c001c289:	01 f3                	add    ebx,esi
c001c28b:	53                   	push   ebx
c001c28c:	e8 07 46 fe ff       	call   c0000898 <strcmp>
c001c291:	83 c4 10             	add    esp,0x10
c001c294:	85 c0                	test   eax,eax
c001c296:	5b                   	pop    ebx
c001c297:	0f 94 c0             	sete   al
c001c29a:	5e                   	pop    esi
c001c29b:	0f b6 c0             	movzx  eax,al
c001c29e:	5f                   	pop    edi
c001c29f:	c3                   	ret    

c001c2a0 <sysCallOpen(regs*)>:
c001c2a0:	56                   	push   esi
c001c2a1:	53                   	push   ebx
c001c2a2:	81 ec 04 01 00 00    	sub    esp,0x104
c001c2a8:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c2af:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c2b2:	85 c9                	test   ecx,ecx
c001c2b4:	0f 84 b3 00 00 00    	je     c001c36d <sysCallOpen(regs*)+0xcd>
c001c2ba:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c2bd:	85 c0                	test   eax,eax
c001c2bf:	0f 84 a8 00 00 00    	je     c001c36d <sysCallOpen(regs*)+0xcd>
c001c2c5:	52                   	push   edx
c001c2c6:	68 ff c7 02 c0       	push   0xc002c7ff
c001c2cb:	50                   	push   eax
c001c2cc:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c2d0:	56                   	push   esi
c001c2d1:	e8 5a 69 ff ff       	call   c0012c30 <Fs::standardiseFiles(char*, char const*, char const*)>
c001c2d6:	89 34 24             	mov    DWORD PTR [esp],esi
c001c2d9:	e8 8e 44 fe ff       	call   c000076c <strlen>
c001c2de:	83 c4 10             	add    esp,0x10
c001c2e1:	48                   	dec    eax
c001c2e2:	74 1d                	je     c001c301 <sysCallOpen(regs*)+0x61>
c001c2e4:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c2e7:	eb 0f                	jmp    c001c2f8 <sysCallOpen(regs*)+0x58>
c001c2e9:	80 fa 3a             	cmp    dl,0x3a
c001c2ec:	74 0f                	je     c001c2fd <sysCallOpen(regs*)+0x5d>
c001c2ee:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c2f2:	48                   	dec    eax
c001c2f3:	74 0c                	je     c001c301 <sysCallOpen(regs*)+0x61>
c001c2f5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c2f8:	80 fa 2e             	cmp    dl,0x2e
c001c2fb:	75 ec                	jne    c001c2e9 <sysCallOpen(regs*)+0x49>
c001c2fd:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c301:	83 ec 08             	sub    esp,0x8
c001c304:	68 03 c8 02 c0       	push   0xc002c803
c001c309:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c30c:	e8 47 ff ff ff       	call   c001c258 <string_ends_with(char const*, char const*)>
c001c311:	83 c4 10             	add    esp,0x10
c001c314:	85 c0                	test   eax,eax
c001c316:	75 17                	jne    c001c32f <sysCallOpen(regs*)+0x8f>
c001c318:	83 ec 08             	sub    esp,0x8
c001c31b:	68 24 c8 02 c0       	push   0xc002c824
c001c320:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c323:	e8 30 ff ff ff       	call   c001c258 <string_ends_with(char const*, char const*)>
c001c328:	83 c4 10             	add    esp,0x10
c001c32b:	85 c0                	test   eax,eax
c001c32d:	74 51                	je     c001c380 <sysCallOpen(regs*)+0xe0>
c001c32f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c332:	83 ec 08             	sub    esp,0x8
c001c335:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c33b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c342:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c345:	ff 30                	push   DWORD PTR [eax]
c001c347:	68 08 c8 02 c0       	push   0xc002c808
c001c34c:	e8 2a 65 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001c351:	c7 04 24 17 c8 02 c0 	mov    DWORD PTR [esp],0xc002c817
c001c358:	e8 1e 65 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001c35d:	83 c4 10             	add    esp,0x10
c001c360:	81 c4 04 01 00 00    	add    esp,0x104
c001c366:	31 c0                	xor    eax,eax
c001c368:	31 d2                	xor    edx,edx
c001c36a:	5b                   	pop    ebx
c001c36b:	5e                   	pop    esi
c001c36c:	c3                   	ret    
c001c36d:	81 c4 04 01 00 00    	add    esp,0x104
c001c373:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c378:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c37d:	5b                   	pop    ebx
c001c37e:	5e                   	pop    esi
c001c37f:	c3                   	ret    
c001c380:	83 ec 08             	sub    esp,0x8
c001c383:	68 04 c8 02 c0       	push   0xc002c804
c001c388:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c38b:	e8 08 45 fe ff       	call   c0000898 <strcmp>
c001c390:	83 c4 10             	add    esp,0x10
c001c393:	85 c0                	test   eax,eax
c001c395:	74 98                	je     c001c32f <sysCallOpen(regs*)+0x8f>
c001c397:	83 ec 08             	sub    esp,0x8
c001c39a:	68 03 c8 02 c0       	push   0xc002c803
c001c39f:	56                   	push   esi
c001c3a0:	e8 b3 fe ff ff       	call   c001c258 <string_ends_with(char const*, char const*)>
c001c3a5:	83 c4 10             	add    esp,0x10
c001c3a8:	85 c0                	test   eax,eax
c001c3aa:	75 83                	jne    c001c32f <sysCallOpen(regs*)+0x8f>
c001c3ac:	83 ec 08             	sub    esp,0x8
c001c3af:	68 29 c8 02 c0       	push   0xc002c829
c001c3b4:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3b7:	e8 9c fe ff ff       	call   c001c258 <string_ends_with(char const*, char const*)>
c001c3bc:	83 c4 10             	add    esp,0x10
c001c3bf:	85 c0                	test   eax,eax
c001c3c1:	0f 85 d9 00 00 00    	jne    c001c4a0 <sysCallOpen(regs*)+0x200>
c001c3c7:	83 ec 08             	sub    esp,0x8
c001c3ca:	68 2e c8 02 c0       	push   0xc002c82e
c001c3cf:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3d2:	e8 81 fe ff ff       	call   c001c258 <string_ends_with(char const*, char const*)>
c001c3d7:	83 c4 10             	add    esp,0x10
c001c3da:	85 c0                	test   eax,eax
c001c3dc:	0f 85 be 00 00 00    	jne    c001c4a0 <sysCallOpen(regs*)+0x200>
c001c3e2:	83 ec 08             	sub    esp,0x8
c001c3e5:	68 2a c8 02 c0       	push   0xc002c82a
c001c3ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c3ed:	e8 a6 44 fe ff       	call   c0000898 <strcmp>
c001c3f2:	83 c4 10             	add    esp,0x10
c001c3f5:	85 c0                	test   eax,eax
c001c3f7:	0f 84 a3 00 00 00    	je     c001c4a0 <sysCallOpen(regs*)+0x200>
c001c3fd:	83 ec 08             	sub    esp,0x8
c001c400:	68 29 c8 02 c0       	push   0xc002c829
c001c405:	56                   	push   esi
c001c406:	e8 4d fe ff ff       	call   c001c258 <string_ends_with(char const*, char const*)>
c001c40b:	83 c4 10             	add    esp,0x10
c001c40e:	85 c0                	test   eax,eax
c001c410:	0f 85 8a 00 00 00    	jne    c001c4a0 <sysCallOpen(regs*)+0x200>
c001c416:	83 ec 0c             	sub    esp,0xc
c001c419:	68 14 01 00 00       	push   0x114
c001c41e:	e8 69 34 ff ff       	call   c000f88c <malloc>
c001c423:	83 c4 0c             	add    esp,0xc
c001c426:	89 c6                	mov    esi,eax
c001c428:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c42d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c430:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c433:	56                   	push   esi
c001c434:	e8 a1 69 ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001c439:	83 c4 10             	add    esp,0x10
c001c43c:	85 f6                	test   esi,esi
c001c43e:	0f 84 29 ff ff ff    	je     c001c36d <sysCallOpen(regs*)+0xcd>
c001c444:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c447:	0f b6 c2             	movzx  eax,dl
c001c44a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c44d:	89 d0                	mov    eax,edx
c001c44f:	83 e0 01             	and    eax,0x1
c001c452:	f6 c2 02             	test   dl,0x2
c001c455:	74 03                	je     c001c45a <sysCallOpen(regs*)+0x1ba>
c001c457:	83 c8 02             	or     eax,0x2
c001c45a:	f6 c2 04             	test   dl,0x4
c001c45d:	74 03                	je     c001c462 <sysCallOpen(regs*)+0x1c2>
c001c45f:	83 c8 04             	or     eax,0x4
c001c462:	f6 c2 08             	test   dl,0x8
c001c465:	74 03                	je     c001c46a <sysCallOpen(regs*)+0x1ca>
c001c467:	83 c8 0a             	or     eax,0xa
c001c46a:	83 e2 10             	and    edx,0x10
c001c46d:	74 03                	je     c001c472 <sysCallOpen(regs*)+0x1d2>
c001c46f:	83 c8 12             	or     eax,0x12
c001c472:	83 ec 08             	sub    esp,0x8
c001c475:	50                   	push   eax
c001c476:	56                   	push   esi
c001c477:	e8 c2 69 ff ff       	call   c0012e3e <File::open(FileOpenMode)>
c001c47c:	83 c4 10             	add    esp,0x10
c001c47f:	85 c0                	test   eax,eax
c001c481:	0f 85 e6 fe ff ff    	jne    c001c36d <sysCallOpen(regs*)+0xcd>
c001c487:	83 ec 0c             	sub    esp,0xc
c001c48a:	56                   	push   esi
c001c48b:	e8 9a 4b ff ff       	call   c001102a <UnixFile::getFileDescriptor()>
c001c490:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c493:	89 02                	mov    DWORD PTR [edx],eax
c001c495:	c1 f8 1f             	sar    eax,0x1f
c001c498:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c49b:	e9 bd fe ff ff       	jmp    c001c35d <sysCallOpen(regs*)+0xbd>
c001c4a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4a3:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c4a9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4b0:	e9 ab fe ff ff       	jmp    c001c360 <sysCallOpen(regs*)+0xc0>

c001c4b5 <Sys::loadSyscalls()>:
c001c4b5:	c7 05 a0 19 03 c0 a5 b5 01 c0 	mov    DWORD PTR ds:0xc00319a0,0xc001b5a5
c001c4bf:	c7 05 a4 19 03 c0 0a b1 01 c0 	mov    DWORD PTR ds:0xc00319a4,0xc001b10a
c001c4c9:	c7 05 a8 19 03 c0 f8 b2 01 c0 	mov    DWORD PTR ds:0xc00319a8,0xc001b2f8
c001c4d3:	c7 05 ac 19 03 c0 db b4 01 c0 	mov    DWORD PTR ds:0xc00319ac,0xc001b4db
c001c4dd:	c7 05 b0 19 03 c0 90 b2 01 c0 	mov    DWORD PTR ds:0xc00319b0,0xc001b290
c001c4e7:	c7 05 b4 19 03 c0 41 b1 01 c0 	mov    DWORD PTR ds:0xc00319b4,0xc001b141
c001c4f1:	c7 05 b8 19 03 c0 22 b1 01 c0 	mov    DWORD PTR ds:0xc00319b8,0xc001b122
c001c4fb:	c7 05 bc 19 03 c0 4d b3 01 c0 	mov    DWORD PTR ds:0xc00319bc,0xc001b34d
c001c505:	c7 05 c4 19 03 c0 e0 ba 01 c0 	mov    DWORD PTR ds:0xc00319c4,0xc001bae0
c001c50f:	c7 05 c0 19 03 c0 a0 c2 01 c0 	mov    DWORD PTR ds:0xc00319c0,0xc001c2a0
c001c519:	c7 05 c8 19 03 c0 68 bb 01 c0 	mov    DWORD PTR ds:0xc00319c8,0xc001bb68
c001c523:	c7 05 cc 19 03 c0 cf b7 01 c0 	mov    DWORD PTR ds:0xc00319cc,0xc001b7cf
c001c52d:	c7 05 d0 19 03 c0 eb b5 01 c0 	mov    DWORD PTR ds:0xc00319d0,0xc001b5eb
c001c537:	c7 05 d4 19 03 c0 f0 b5 01 c0 	mov    DWORD PTR ds:0xc00319d4,0xc001b5f0
c001c541:	c7 05 d8 19 03 c0 43 bc 01 c0 	mov    DWORD PTR ds:0xc00319d8,0xc001bc43
c001c54b:	c7 05 dc 19 03 c0 dd bb 01 c0 	mov    DWORD PTR ds:0xc00319dc,0xc001bbdd
c001c555:	c7 05 e0 19 03 c0 b7 b8 01 c0 	mov    DWORD PTR ds:0xc00319e0,0xc001b8b7
c001c55f:	c7 05 e4 19 03 c0 20 b9 01 c0 	mov    DWORD PTR ds:0xc00319e4,0xc001b920
c001c569:	c7 05 e8 19 03 c0 9d b9 01 c0 	mov    DWORD PTR ds:0xc00319e8,0xc001b99d
c001c573:	c7 05 ec 19 03 c0 f5 b5 01 c0 	mov    DWORD PTR ds:0xc00319ec,0xc001b5f5
c001c57d:	c7 05 f0 19 03 c0 b3 bc 01 c0 	mov    DWORD PTR ds:0xc00319f0,0xc001bcb3
c001c587:	c7 05 f4 19 03 c0 cd bc 01 c0 	mov    DWORD PTR ds:0xc00319f4,0xc001bccd
c001c591:	c7 05 f8 19 03 c0 cd bc 01 c0 	mov    DWORD PTR ds:0xc00319f8,0xc001bccd
c001c59b:	c7 05 fc 19 03 c0 0e bd 01 c0 	mov    DWORD PTR ds:0xc00319fc,0xc001bd0e
c001c5a5:	c7 05 00 1a 03 c0 72 bd 01 c0 	mov    DWORD PTR ds:0xc0031a00,0xc001bd72
c001c5af:	c7 05 04 1a 03 c0 a1 b7 01 c0 	mov    DWORD PTR ds:0xc0031a04,0xc001b7a1
c001c5b9:	c7 05 08 1a 03 c0 d6 bd 01 c0 	mov    DWORD PTR ds:0xc0031a08,0xc001bdd6
c001c5c3:	c7 05 0c 1a 03 c0 5e b7 01 c0 	mov    DWORD PTR ds:0xc0031a0c,0xc001b75e
c001c5cd:	c7 05 10 1a 03 c0 22 be 01 c0 	mov    DWORD PTR ds:0xc0031a10,0xc001be22
c001c5d7:	c7 05 14 1a 03 c0 5d b8 01 c0 	mov    DWORD PTR ds:0xc0031a14,0xc001b85d
c001c5e1:	c7 05 18 1a 03 c0 a5 be 01 c0 	mov    DWORD PTR ds:0xc0031a18,0xc001bea5
c001c5eb:	c7 05 1c 1a 03 c0 20 ba 01 c0 	mov    DWORD PTR ds:0xc0031a1c,0xc001ba20
c001c5f5:	c7 05 20 1a 03 c0 cc be 01 c0 	mov    DWORD PTR ds:0xc0031a20,0xc001becc
c001c5ff:	c7 05 24 1a 03 c0 41 bf 01 c0 	mov    DWORD PTR ds:0xc0031a24,0xc001bf41
c001c609:	c7 05 28 1a 03 c0 79 c0 01 c0 	mov    DWORD PTR ds:0xc0031a28,0xc001c079
c001c613:	c7 05 2c 1a 03 c0 ff b5 01 c0 	mov    DWORD PTR ds:0xc0031a2c,0xc001b5ff
c001c61d:	c7 05 30 1a 03 c0 69 b6 01 c0 	mov    DWORD PTR ds:0xc0031a30,0xc001b669
c001c627:	c7 05 34 1a 03 c0 af b6 01 c0 	mov    DWORD PTR ds:0xc0031a34,0xc001b6af
c001c631:	c7 05 38 1a 03 c0 8d c1 01 c0 	mov    DWORD PTR ds:0xc0031a38,0xc001c18d
c001c63b:	c7 05 3c 1a 03 c0 e8 bc 01 c0 	mov    DWORD PTR ds:0xc0031a3c,0xc001bce8
c001c645:	c7 05 40 1a 03 c0 00 b7 01 c0 	mov    DWORD PTR ds:0xc0031a40,0xc001b700
c001c64f:	c7 05 44 1a 03 c0 ff c1 01 c0 	mov    DWORD PTR ds:0xc0031a44,0xc001c1ff
c001c659:	c7 05 48 1a 03 c0 44 c2 01 c0 	mov    DWORD PTR ds:0xc0031a48,0xc001c244
c001c663:	c7 05 4c 1a 03 c0 e8 b1 01 c0 	mov    DWORD PTR ds:0xc0031a4c,0xc001b1e8
c001c66d:	c7 05 50 1a 03 c0 69 b3 01 c0 	mov    DWORD PTR ds:0xc0031a50,0xc001b369
c001c677:	c7 05 54 1a 03 c0 91 b4 01 c0 	mov    DWORD PTR ds:0xc0031a54,0xc001b491
c001c681:	c7 05 58 1a 03 c0 d4 b0 01 c0 	mov    DWORD PTR ds:0xc0031a58,0xc001b0d4
c001c68b:	c7 05 5c 1a 03 c0 43 b5 01 c0 	mov    DWORD PTR ds:0xc0031a5c,0xc001b543
c001c695:	c7 05 60 1a 03 c0 4d b1 01 c0 	mov    DWORD PTR ds:0xc0031a60,0xc001b14d
c001c69f:	c7 05 64 1a 03 c0 64 b1 01 c0 	mov    DWORD PTR ds:0xc0031a64,0xc001b164
c001c6a9:	c3                   	ret    

c001c6aa <Sys::systemCall(regs*, void*)>:
c001c6aa:	53                   	push   ebx
c001c6ab:	83 ec 08             	sub    esp,0x8
c001c6ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6b2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c6b5:	83 f8 7f             	cmp    eax,0x7f
c001c6b8:	77 16                	ja     c001c6d0 <Sys::systemCall(regs*, void*)+0x26>
c001c6ba:	8b 14 85 a0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce660]
c001c6c1:	85 d2                	test   edx,edx
c001c6c3:	74 0b                	je     c001c6d0 <Sys::systemCall(regs*, void*)+0x26>
c001c6c5:	83 ec 0c             	sub    esp,0xc
c001c6c8:	53                   	push   ebx
c001c6c9:	ff d2                	call   edx
c001c6cb:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c6ce:	eb 0d                	jmp    c001c6dd <Sys::systemCall(regs*, void*)+0x33>
c001c6d0:	52                   	push   edx
c001c6d1:	52                   	push   edx
c001c6d2:	50                   	push   eax
c001c6d3:	68 33 c8 02 c0       	push   0xc002c833
c001c6d8:	e8 9e 61 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001c6dd:	83 c4 10             	add    esp,0x10
c001c6e0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c6e5:	31 d2                	xor    edx,edx
c001c6e7:	83 c4 08             	add    esp,0x8
c001c6ea:	5b                   	pop    ebx
c001c6eb:	c3                   	ret    

c001c6ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c6ec:	55                   	push   ebp
c001c6ed:	57                   	push   edi
c001c6ee:	56                   	push   esi
c001c6ef:	53                   	push   ebx
c001c6f0:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c6f6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c6fd:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c704:	85 c0                	test   eax,eax
c001c706:	0f 95 c1             	setne  cl
c001c709:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c711:	0f 94 c2             	sete   dl
c001c714:	84 d1                	test   cl,dl
c001c716:	74 23                	je     c001c73b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c718:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c71e:	74 1b                	je     c001c73b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c720:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c726:	89 da                	mov    edx,ebx
c001c728:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c72e:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c734:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c73b:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001c742:	05 ff 0f 00 00       	add    eax,0xfff
c001c747:	83 ec 0c             	sub    esp,0xc
c001c74a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c74e:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001c754:	c1 e8 0c             	shr    eax,0xc
c001c757:	89 fe                	mov    esi,edi
c001c759:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c75d:	c1 ee 0c             	shr    esi,0xc
c001c760:	6a 01                	push   0x1
c001c762:	e8 0e 4d ff ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c001c767:	89 c5                	mov    ebp,eax
c001c769:	58                   	pop    eax
c001c76a:	5a                   	pop    edx
c001c76b:	56                   	push   esi
c001c76c:	68 b7 c8 02 c0       	push   0xc002c8b7
c001c771:	e8 05 61 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001c776:	59                   	pop    ecx
c001c777:	58                   	pop    eax
c001c778:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c77c:	68 c9 c8 02 c0       	push   0xc002c8c9
c001c781:	e8 f5 60 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001c786:	83 c4 10             	add    esp,0x10
c001c789:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c001c78f:	0f 86 31 01 00 00    	jbe    c001c8c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001c795:	c1 e6 0c             	shl    esi,0xc
c001c798:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c79b:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001c79e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c7a2:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c001c7a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c7ac:	01 df                	add    edi,ebx
c001c7ae:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001c7b1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001c7b5:	0f 84 08 01 00 00    	je     c001c8c3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c001c7bb:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001c7c1:	76 05                	jbe    c001c7c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001c7c3:	bf 00 10 00 00       	mov    edi,0x1000
c001c7c8:	83 ec 0c             	sub    esp,0xc
c001c7cb:	31 d2                	xor    edx,edx
c001c7cd:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c7d4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c7d6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c7da:	50                   	push   eax
c001c7db:	8d 74 24 30          	lea    esi,[esp+0x30]
c001c7df:	56                   	push   esi
c001c7e0:	52                   	push   edx
c001c7e1:	57                   	push   edi
c001c7e2:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c7e9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7ec:	83 c4 20             	add    esp,0x20
c001c7ef:	85 c0                	test   eax,eax
c001c7f1:	74 0a                	je     c001c7fd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001c7f3:	53                   	push   ebx
c001c7f4:	53                   	push   ebx
c001c7f5:	50                   	push   eax
c001c7f6:	68 db c8 02 c0       	push   0xc002c8db
c001c7fb:	eb 0f                	jmp    c001c80c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001c7fd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001c801:	74 20                	je     c001c823 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001c803:	51                   	push   ecx
c001c804:	51                   	push   ecx
c001c805:	6a 00                	push   0x0
c001c807:	68 06 c9 02 c0       	push   0xc002c906
c001c80c:	e8 6a 60 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001c811:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c814:	e8 1c 51 ff ff       	call   c0011935 <Virt::freeKernelVirtualPages(unsigned long)>
c001c819:	83 c4 10             	add    esp,0x10
c001c81c:	31 c0                	xor    eax,eax
c001c81e:	e9 68 01 00 00       	jmp    c001c98b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001c823:	fa                   	cli    
c001c824:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001c82a:	e8 0e 33 ff ff       	call   c000fb3d <Phys::allocatePage()>
c001c82f:	6a 07                	push   0x7
c001c831:	89 c7                	mov    edi,eax
c001c833:	55                   	push   ebp
c001c834:	50                   	push   eax
c001c835:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c83a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c83d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c843:	e8 64 54 ff ff       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c001c848:	83 c4 0c             	add    esp,0xc
c001c84b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c852:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c858:	6a 00                	push   0x0
c001c85a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c85f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c862:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c868:	e8 99 52 ff ff       	call   c0011b06 <VAS::mapOtherVASIn(bool, VAS*)>
c001c86d:	58                   	pop    eax
c001c86e:	5a                   	pop    edx
c001c86f:	68 07 0c 00 00       	push   0xc07
c001c874:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001c878:	57                   	push   edi
c001c879:	89 ef                	mov    edi,ebp
c001c87b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c882:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c888:	6a 00                	push   0x0
c001c88a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c88f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c892:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c898:	e8 cb 57 ff ff       	call   c0012068 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c89d:	b9 00 10 00 00       	mov    ecx,0x1000
c001c8a2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c8a4:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001c8a9:	83 c4 20             	add    esp,0x20
c001c8ac:	48                   	dec    eax
c001c8ad:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001c8b2:	85 c0                	test   eax,eax
c001c8b4:	75 01                	jne    c001c8b7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c8b6:	fb                   	sti    
c001c8b7:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001c8be:	e9 df fe ff ff       	jmp    c001c7a2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001c8c3:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001c8c6:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c8ce:	0f 86 a9 00 00 00    	jbe    c001c97d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c8d4:	fa                   	cli    
c001c8d5:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001c8db:	51                   	push   ecx
c001c8dc:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c8e3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8e9:	6a 00                	push   0x0
c001c8eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c8f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c8f3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c8f9:	e8 08 52 ff ff       	call   c0011b06 <VAS::mapOtherVASIn(bool, VAS*)>
c001c8fe:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c902:	c1 e6 0c             	shl    esi,0xc
c001c905:	01 de                	add    esi,ebx
c001c907:	83 c4 10             	add    esp,0x10
c001c90a:	39 de                	cmp    esi,ebx
c001c90c:	74 61                	je     c001c96f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c001c90e:	e8 2a 32 ff ff       	call   c000fb3d <Phys::allocatePage()>
c001c913:	6a 07                	push   0x7
c001c915:	89 c7                	mov    edi,eax
c001c917:	55                   	push   ebp
c001c918:	50                   	push   eax
c001c919:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c91e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c921:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c927:	e8 80 53 ff ff       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c001c92c:	58                   	pop    eax
c001c92d:	5a                   	pop    edx
c001c92e:	68 07 0c 00 00       	push   0xc07
c001c933:	53                   	push   ebx
c001c934:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c93a:	57                   	push   edi
c001c93b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c942:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c948:	6a 00                	push   0x0
c001c94a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c94f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c952:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c958:	e8 0b 57 ff ff       	call   c0012068 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c95d:	83 c4 1c             	add    esp,0x1c
c001c960:	68 00 10 00 00       	push   0x1000
c001c965:	6a 00                	push   0x0
c001c967:	55                   	push   ebp
c001c968:	e8 e3 3d fe ff       	call   c0000750 <memset>
c001c96d:	eb 98                	jmp    c001c907 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c001c96f:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001c974:	48                   	dec    eax
c001c975:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001c97a:	75 01                	jne    c001c97d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c001c97c:	fb                   	sti    
c001c97d:	83 ec 0c             	sub    esp,0xc
c001c980:	55                   	push   ebp
c001c981:	e8 af 4f ff ff       	call   c0011935 <Virt::freeKernelVirtualPages(unsigned long)>
c001c986:	83 c4 10             	add    esp,0x10
c001c989:	b0 01                	mov    al,0x1
c001c98b:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c991:	5b                   	pop    ebx
c001c992:	5e                   	pop    esi
c001c993:	5f                   	pop    edi
c001c994:	5d                   	pop    ebp
c001c995:	c3                   	ret    

c001c996 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c996:	55                   	push   ebp
c001c997:	57                   	push   edi
c001c998:	56                   	push   esi
c001c999:	53                   	push   ebx
c001c99a:	83 ec 48             	sub    esp,0x48
c001c99d:	68 14 01 00 00       	push   0x114
c001c9a2:	e8 e5 2e ff ff       	call   c000f88c <malloc>
c001c9a7:	83 c4 0c             	add    esp,0xc
c001c9aa:	89 c6                	mov    esi,eax
c001c9ac:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c9b0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c9b4:	50                   	push   eax
c001c9b5:	e8 20 64 ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001c9ba:	58                   	pop    eax
c001c9bb:	5a                   	pop    edx
c001c9bc:	6a 01                	push   0x1
c001c9be:	56                   	push   esi
c001c9bf:	e8 7a 64 ff ff       	call   c0012e3e <File::open(FileOpenMode)>
c001c9c4:	83 c4 10             	add    esp,0x10
c001c9c7:	85 c0                	test   eax,eax
c001c9c9:	0f 85 47 01 00 00    	jne    c001cb16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9cf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c9d7:	83 ec 0c             	sub    esp,0xc
c001c9da:	6a 34                	push   0x34
c001c9dc:	e8 ab 2e ff ff       	call   c000f88c <malloc>
c001c9e1:	89 c3                	mov    ebx,eax
c001c9e3:	58                   	pop    eax
c001c9e4:	8b 06                	mov    eax,DWORD PTR [esi]
c001c9e6:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c9ea:	57                   	push   edi
c001c9eb:	53                   	push   ebx
c001c9ec:	6a 00                	push   0x0
c001c9ee:	6a 34                	push   0x34
c001c9f0:	56                   	push   esi
c001c9f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c9f4:	83 c4 20             	add    esp,0x20
c001c9f7:	85 c0                	test   eax,eax
c001c9f9:	0f 85 17 01 00 00    	jne    c001cb16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c9ff:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ca05:	0f 85 0b 01 00 00    	jne    c001cb16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca0b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ca0e:	85 c0                	test   eax,eax
c001ca10:	0f 84 00 01 00 00    	je     c001cb16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca16:	31 d2                	xor    edx,edx
c001ca18:	55                   	push   ebp
c001ca19:	52                   	push   edx
c001ca1a:	50                   	push   eax
c001ca1b:	56                   	push   esi
c001ca1c:	e8 db 64 ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001ca21:	83 c4 10             	add    esp,0x10
c001ca24:	85 c0                	test   eax,eax
c001ca26:	0f 85 ea 00 00 00    	jne    c001cb16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca2c:	83 ec 0c             	sub    esp,0xc
c001ca2f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ca32:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ca3a:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca3e:	0f af c2             	imul   eax,edx
c001ca41:	50                   	push   eax
c001ca42:	e8 45 2e ff ff       	call   c000f88c <malloc>
c001ca47:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ca49:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ca4d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ca50:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ca54:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ca58:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ca5c:	0f af c2             	imul   eax,edx
c001ca5f:	99                   	cdq    
c001ca60:	52                   	push   edx
c001ca61:	50                   	push   eax
c001ca62:	56                   	push   esi
c001ca63:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ca66:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ca69:	83 c4 20             	add    esp,0x20
c001ca6c:	85 c0                	test   eax,eax
c001ca6e:	0f 84 a2 00 00 00    	je     c001cb16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca74:	31 d2                	xor    edx,edx
c001ca76:	51                   	push   ecx
c001ca77:	52                   	push   edx
c001ca78:	50                   	push   eax
c001ca79:	56                   	push   esi
c001ca7a:	e8 7d 64 ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001ca7f:	83 c4 10             	add    esp,0x10
c001ca82:	85 c0                	test   eax,eax
c001ca84:	0f 85 8c 00 00 00    	jne    c001cb16 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ca8a:	83 ec 0c             	sub    esp,0xc
c001ca8d:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001ca91:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001ca95:	31 ed                	xor    ebp,ebp
c001ca97:	0f af c2             	imul   eax,edx
c001ca9a:	50                   	push   eax
c001ca9b:	e8 ec 2d ff ff       	call   c000f88c <malloc>
c001caa0:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001caa2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001caa6:	89 3c 24             	mov    DWORD PTR [esp],edi
c001caa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001caad:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cab1:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cab5:	0f af c2             	imul   eax,edx
c001cab8:	99                   	cdq    
c001cab9:	52                   	push   edx
c001caba:	50                   	push   eax
c001cabb:	56                   	push   esi
c001cabc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cabf:	83 c4 20             	add    esp,0x20
c001cac2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001caca:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cace:	0f 86 80 00 00 00    	jbe    c001cb54 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cad4:	0f b7 fd             	movzx  edi,bp
c001cad7:	c1 e7 05             	shl    edi,0x5
c001cada:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cade:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cae1:	75 6b                	jne    c001cb4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cae3:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cae6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001caea:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001caed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001caf1:	52                   	push   edx
c001caf2:	31 d2                	xor    edx,edx
c001caf4:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001caf7:	52                   	push   edx
c001caf8:	50                   	push   eax
c001caf9:	56                   	push   esi
c001cafa:	e8 fd 63 ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001caff:	83 c4 10             	add    esp,0x10
c001cb02:	85 c0                	test   eax,eax
c001cb04:	74 17                	je     c001cb1d <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cb06:	83 ec 0c             	sub    esp,0xc
c001cb09:	68 32 c9 02 c0       	push   0xc002c932
c001cb0e:	e8 68 5d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001cb13:	83 c4 10             	add    esp,0x10
c001cb16:	31 c0                	xor    eax,eax
c001cb18:	e9 87 00 00 00       	jmp    c001cba4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cb1d:	83 ec 0c             	sub    esp,0xc
c001cb20:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cb23:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cb26:	50                   	push   eax
c001cb27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cb2b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb2f:	56                   	push   esi
c001cb30:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cb34:	e8 b3 fb ff ff       	call   c001c6ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cb39:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cb3d:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cb41:	83 c4 20             	add    esp,0x20
c001cb44:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cb48:	73 04                	jae    c001cb4e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cb4a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cb4e:	45                   	inc    ebp
c001cb4f:	e9 76 ff ff ff       	jmp    c001caca <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cb54:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cb58:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb60:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cb66:	83 ec 0c             	sub    esp,0xc
c001cb69:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cb6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cb74:	05 00 10 00 00       	add    eax,0x1000
c001cb79:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cb7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb80:	e8 17 2d ff ff       	call   c000f89c <free>
c001cb85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb88:	e8 0f 2d ff ff       	call   c000f89c <free>
c001cb8d:	58                   	pop    eax
c001cb8e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cb92:	e8 05 2d ff ff       	call   c000f89c <free>
c001cb97:	89 34 24             	mov    DWORD PTR [esp],esi
c001cb9a:	e8 fd 62 ff ff       	call   c0012e9c <File::close()>
c001cb9f:	83 c4 10             	add    esp,0x10
c001cba2:	b0 01                	mov    al,0x1
c001cba4:	83 c4 3c             	add    esp,0x3c
c001cba7:	5b                   	pop    ebx
c001cba8:	5e                   	pop    esi
c001cba9:	5f                   	pop    edi
c001cbaa:	5d                   	pop    ebp
c001cbab:	c3                   	ret    

c001cbac <Thr::runtimeReferenceHelper()>:
c001cbac:	83 ec 18             	sub    esp,0x18
c001cbaf:	68 3a c9 02 c0       	push   0xc002c93a
c001cbb4:	e8 c2 5c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001cbb9:	fa                   	cli    
c001cbba:	83 c4 10             	add    esp,0x10
c001cbbd:	eb fe                	jmp    c001cbbd <Thr::runtimeReferenceHelper()+0x11>

c001cbbf <Thr::getAddressOfKernelSymbol(char const*)>:
c001cbbf:	57                   	push   edi
c001cbc0:	56                   	push   esi
c001cbc1:	53                   	push   ebx
c001cbc2:	31 db                	xor    ebx,ebx
c001cbc4:	39 1d 40 23 03 c0    	cmp    DWORD PTR ds:0xc0032340,ebx
c001cbca:	7e 3c                	jle    c001cc08 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cbcc:	8b 34 9d c0 22 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdd40]
c001cbd3:	31 ff                	xor    edi,edi
c001cbd5:	39 3c 9d c0 21 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcde40],edi
c001cbdc:	7e 27                	jle    c001cc05 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cbde:	50                   	push   eax
c001cbdf:	50                   	push   eax
c001cbe0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cbe4:	8b 06                	mov    eax,DWORD PTR [esi]
c001cbe6:	03 04 9d 40 22 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcddc0]
c001cbed:	50                   	push   eax
c001cbee:	e8 a5 3c fe ff       	call   c0000898 <strcmp>
c001cbf3:	83 c4 10             	add    esp,0x10
c001cbf6:	85 c0                	test   eax,eax
c001cbf8:	75 05                	jne    c001cbff <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cbfa:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cbfd:	eb 0b                	jmp    c001cc0a <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cbff:	83 c6 10             	add    esi,0x10
c001cc02:	47                   	inc    edi
c001cc03:	eb d0                	jmp    c001cbd5 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cc05:	43                   	inc    ebx
c001cc06:	eb bc                	jmp    c001cbc4 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cc08:	31 c0                	xor    eax,eax
c001cc0a:	5b                   	pop    ebx
c001cc0b:	5e                   	pop    esi
c001cc0c:	5f                   	pop    edi
c001cc0d:	c3                   	ret    

c001cc0e <Thr::loadKernelSymbolTable(char const*)>:
c001cc0e:	55                   	push   ebp
c001cc0f:	57                   	push   edi
c001cc10:	56                   	push   esi
c001cc11:	53                   	push   ebx
c001cc12:	83 ec 68             	sub    esp,0x68
c001cc15:	8b 35 90 23 03 c0    	mov    esi,DWORD PTR ds:0xc0032390
c001cc1b:	68 14 01 00 00       	push   0x114
c001cc20:	e8 67 2c ff ff       	call   c000f88c <malloc>
c001cc25:	83 c4 0c             	add    esp,0xc
c001cc28:	89 c3                	mov    ebx,eax
c001cc2a:	56                   	push   esi
c001cc2b:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cc2f:	50                   	push   eax
c001cc30:	e8 a5 61 ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001cc35:	5e                   	pop    esi
c001cc36:	5f                   	pop    edi
c001cc37:	6a 01                	push   0x1
c001cc39:	53                   	push   ebx
c001cc3a:	e8 ff 61 ff ff       	call   c0012e3e <File::open(FileOpenMode)>
c001cc3f:	83 c4 10             	add    esp,0x10
c001cc42:	85 c0                	test   eax,eax
c001cc44:	74 0a                	je     c001cc50 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cc46:	83 ec 0c             	sub    esp,0xc
c001cc49:	68 5c c9 02 c0       	push   0xc002c95c
c001cc4e:	eb 34                	jmp    c001cc84 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cc50:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cc58:	83 ec 0c             	sub    esp,0xc
c001cc5b:	6a 34                	push   0x34
c001cc5d:	e8 2a 2c ff ff       	call   c000f88c <malloc>
c001cc62:	59                   	pop    ecx
c001cc63:	89 c7                	mov    edi,eax
c001cc65:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cc69:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc6b:	56                   	push   esi
c001cc6c:	57                   	push   edi
c001cc6d:	6a 00                	push   0x0
c001cc6f:	6a 34                	push   0x34
c001cc71:	53                   	push   ebx
c001cc72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc75:	83 c4 20             	add    esp,0x20
c001cc78:	85 c0                	test   eax,eax
c001cc7a:	74 17                	je     c001cc93 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cc7c:	83 ec 0c             	sub    esp,0xc
c001cc7f:	68 73 c9 02 c0       	push   0xc002c973
c001cc84:	e8 28 d6 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001cc89:	83 c4 10             	add    esp,0x10
c001cc8c:	31 c0                	xor    eax,eax
c001cc8e:	e9 31 02 00 00       	jmp    c001cec4 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cc93:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cc99:	75 e1                	jne    c001cc7c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cc9b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cc9e:	85 c0                	test   eax,eax
c001cca0:	74 da                	je     c001cc7c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001cca2:	52                   	push   edx
c001cca3:	31 d2                	xor    edx,edx
c001cca5:	52                   	push   edx
c001cca6:	50                   	push   eax
c001cca7:	53                   	push   ebx
c001cca8:	e8 4f 62 ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001ccad:	83 c4 10             	add    esp,0x10
c001ccb0:	85 c0                	test   eax,eax
c001ccb2:	75 c8                	jne    c001cc7c <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ccb4:	83 ec 0c             	sub    esp,0xc
c001ccb7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccbb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccbf:	31 ed                	xor    ebp,ebp
c001ccc1:	0f af c2             	imul   eax,edx
c001ccc4:	50                   	push   eax
c001ccc5:	e8 c2 2b ff ff       	call   c000f88c <malloc>
c001ccca:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cccc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ccd0:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccd7:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ccdb:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ccdf:	0f af c2             	imul   eax,edx
c001cce2:	99                   	cdq    
c001cce3:	52                   	push   edx
c001cce4:	50                   	push   eax
c001cce5:	53                   	push   ebx
c001cce6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cce9:	83 c4 20             	add    esp,0x20
c001ccec:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ccf4:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ccfc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cd04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cd0c:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001cd10:	0f 86 aa 00 00 00    	jbe    c001cdc0 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001cd16:	0f b7 f5             	movzx  esi,bp
c001cd19:	6b f6 28             	imul   esi,esi,0x28
c001cd1c:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001cd20:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cd23:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cd27:	50                   	push   eax
c001cd28:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001cd2c:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001cd30:	8b 16                	mov    edx,DWORD PTR [esi]
c001cd32:	6b c0 28             	imul   eax,eax,0x28
c001cd35:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001cd39:	89 d0                	mov    eax,edx
c001cd3b:	31 d2                	xor    edx,edx
c001cd3d:	52                   	push   edx
c001cd3e:	50                   	push   eax
c001cd3f:	53                   	push   ebx
c001cd40:	e8 b7 61 ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001cd45:	83 c4 0c             	add    esp,0xc
c001cd48:	6a 20                	push   0x20
c001cd4a:	6a 00                	push   0x0
c001cd4c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd50:	52                   	push   edx
c001cd51:	e8 fa 39 fe ff       	call   c0000750 <memset>
c001cd56:	58                   	pop    eax
c001cd57:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cd59:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cd5d:	51                   	push   ecx
c001cd5e:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cd62:	52                   	push   edx
c001cd63:	6a 00                	push   0x0
c001cd65:	6a 1f                	push   0x1f
c001cd67:	53                   	push   ebx
c001cd68:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cd6b:	83 c4 18             	add    esp,0x18
c001cd6e:	68 8a c9 02 c0       	push   0xc002c98a
c001cd73:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cd77:	52                   	push   edx
c001cd78:	e8 1b 3b fe ff       	call   c0000898 <strcmp>
c001cd7d:	83 c4 10             	add    esp,0x10
c001cd80:	85 c0                	test   eax,eax
c001cd82:	75 0f                	jne    c001cd93 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cd84:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cd87:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd93:	50                   	push   eax
c001cd94:	50                   	push   eax
c001cd95:	68 92 c9 02 c0       	push   0xc002c992
c001cd9a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cd9e:	50                   	push   eax
c001cd9f:	e8 f4 3a fe ff       	call   c0000898 <strcmp>
c001cda4:	83 c4 10             	add    esp,0x10
c001cda7:	85 c0                	test   eax,eax
c001cda9:	75 0f                	jne    c001cdba <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cdab:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cdae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cdb2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cdb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cdba:	45                   	inc    ebp
c001cdbb:	e9 4c ff ff ff       	jmp    c001cd0c <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cdc0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cdc5:	75 10                	jne    c001cdd7 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cdc7:	83 ec 0c             	sub    esp,0xc
c001cdca:	68 9a c9 02 c0       	push   0xc002c99a
c001cdcf:	e8 dd d4 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001cdd4:	83 c4 10             	add    esp,0x10
c001cdd7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cddc:	75 10                	jne    c001cdee <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cdde:	83 ec 0c             	sub    esp,0xc
c001cde1:	68 9a c9 02 c0       	push   0xc002c99a
c001cde6:	e8 c6 d4 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001cdeb:	83 c4 10             	add    esp,0x10
c001cdee:	31 d2                	xor    edx,edx
c001cdf0:	50                   	push   eax
c001cdf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf5:	52                   	push   edx
c001cdf6:	50                   	push   eax
c001cdf7:	53                   	push   ebx
c001cdf8:	e8 ff 60 ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001cdfd:	5a                   	pop    edx
c001cdfe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ce02:	e8 85 2a ff ff       	call   c000f88c <malloc>
c001ce07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ce0f:	31 c9                	xor    ecx,ecx
c001ce11:	5e                   	pop    esi
c001ce12:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce14:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001ce18:	55                   	push   ebp
c001ce19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ce1d:	51                   	push   ecx
c001ce1e:	52                   	push   edx
c001ce1f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ce23:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001ce27:	53                   	push   ebx
c001ce28:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce2b:	83 c4 14             	add    esp,0x14
c001ce2e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce32:	e8 55 2a ff ff       	call   c000f88c <malloc>
c001ce37:	89 c6                	mov    esi,eax
c001ce39:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ce3b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce3e:	56                   	push   esi
c001ce3f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ce43:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ce47:	51                   	push   ecx
c001ce48:	52                   	push   edx
c001ce49:	53                   	push   ebx
c001ce4a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce51:	8b 15 40 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032340
c001ce57:	83 c4 1c             	add    esp,0x1c
c001ce5a:	c1 e8 04             	shr    eax,0x4
c001ce5d:	89 04 95 c0 21 03 c0 	mov    DWORD PTR [edx*4-0x3ffcde40],eax
c001ce64:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce68:	31 d2                	xor    edx,edx
c001ce6a:	52                   	push   edx
c001ce6b:	50                   	push   eax
c001ce6c:	53                   	push   ebx
c001ce6d:	e8 8a 60 ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001ce72:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce74:	31 d2                	xor    edx,edx
c001ce76:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001ce79:	56                   	push   esi
c001ce7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ce7e:	52                   	push   edx
c001ce7f:	50                   	push   eax
c001ce80:	53                   	push   ebx
c001ce81:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce84:	83 c4 14             	add    esp,0x14
c001ce87:	53                   	push   ebx
c001ce88:	e8 0f 60 ff ff       	call   c0012e9c <File::close()>
c001ce8d:	5d                   	pop    ebp
c001ce8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ce92:	e8 05 2a ff ff       	call   c000f89c <free>
c001ce97:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce9a:	e8 fd 29 ff ff       	call   c000f89c <free>
c001ce9f:	a1 40 23 03 c0       	mov    eax,ds:0xc0032340
c001cea4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cea8:	8d 50 01             	lea    edx,[eax+0x1]
c001ceab:	89 0c 85 c0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd40],ecx
c001ceb2:	89 34 85 40 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcddc0],esi
c001ceb9:	89 15 40 23 03 c0    	mov    DWORD PTR ds:0xc0032340,edx
c001cebf:	83 c4 10             	add    esp,0x10
c001cec2:	b0 01                	mov    al,0x1
c001cec4:	83 c4 5c             	add    esp,0x5c
c001cec7:	5b                   	pop    ebx
c001cec8:	5e                   	pop    esi
c001cec9:	5f                   	pop    edi
c001ceca:	5d                   	pop    ebp
c001cecb:	c3                   	ret    

c001cecc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cecc:	55                   	push   ebp
c001cecd:	57                   	push   edi
c001cece:	56                   	push   esi
c001cecf:	53                   	push   ebx
c001ced0:	81 ec 68 03 00 00    	sub    esp,0x368
c001ced6:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cedd:	8b 1d 90 23 03 c0    	mov    ebx,DWORD PTR ds:0xc0032390
c001cee3:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cee7:	68 14 01 00 00       	push   0x114
c001ceec:	e8 9b 29 ff ff       	call   c000f88c <malloc>
c001cef1:	83 c4 0c             	add    esp,0xc
c001cef4:	89 c5                	mov    ebp,eax
c001cef6:	53                   	push   ebx
c001cef7:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cefe:	50                   	push   eax
c001ceff:	e8 d6 5e ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001cf04:	5e                   	pop    esi
c001cf05:	5f                   	pop    edi
c001cf06:	6a 01                	push   0x1
c001cf08:	55                   	push   ebp
c001cf09:	e8 30 5f ff ff       	call   c0012e3e <File::open(FileOpenMode)>
c001cf0e:	83 c4 10             	add    esp,0x10
c001cf11:	85 c0                	test   eax,eax
c001cf13:	0f 85 a7 06 00 00    	jne    c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf19:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cf21:	83 ec 0c             	sub    esp,0xc
c001cf24:	6a 34                	push   0x34
c001cf26:	e8 61 29 ff ff       	call   c000f88c <malloc>
c001cf2b:	5b                   	pop    ebx
c001cf2c:	89 c7                	mov    edi,eax
c001cf2e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf32:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cf35:	53                   	push   ebx
c001cf36:	57                   	push   edi
c001cf37:	6a 00                	push   0x0
c001cf39:	6a 34                	push   0x34
c001cf3b:	55                   	push   ebp
c001cf3c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf3f:	83 c4 20             	add    esp,0x20
c001cf42:	85 c0                	test   eax,eax
c001cf44:	0f 85 76 06 00 00    	jne    c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf4a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cf50:	0f 85 6a 06 00 00    	jne    c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf56:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cf59:	85 c0                	test   eax,eax
c001cf5b:	0f 84 5f 06 00 00    	je     c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf61:	31 d2                	xor    edx,edx
c001cf63:	51                   	push   ecx
c001cf64:	52                   	push   edx
c001cf65:	50                   	push   eax
c001cf66:	55                   	push   ebp
c001cf67:	e8 90 5f ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001cf6c:	83 c4 10             	add    esp,0x10
c001cf6f:	85 c0                	test   eax,eax
c001cf71:	0f 85 49 06 00 00    	jne    c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cf77:	83 ec 0c             	sub    esp,0xc
c001cf7a:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cf7d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cf81:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cf85:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cf89:	0f af c2             	imul   eax,edx
c001cf8c:	50                   	push   eax
c001cf8d:	e8 fa 28 ff ff       	call   c000f88c <malloc>
c001cf92:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf9c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfa0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cfa4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cfa8:	0f af c2             	imul   eax,edx
c001cfab:	99                   	cdq    
c001cfac:	52                   	push   edx
c001cfad:	50                   	push   eax
c001cfae:	55                   	push   ebp
c001cfaf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfb2:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001cfb5:	83 c4 20             	add    esp,0x20
c001cfb8:	85 c0                	test   eax,eax
c001cfba:	0f 84 00 06 00 00    	je     c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfc0:	52                   	push   edx
c001cfc1:	31 d2                	xor    edx,edx
c001cfc3:	52                   	push   edx
c001cfc4:	50                   	push   eax
c001cfc5:	55                   	push   ebp
c001cfc6:	e8 31 5f ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001cfcb:	83 c4 10             	add    esp,0x10
c001cfce:	85 c0                	test   eax,eax
c001cfd0:	0f 85 ea 05 00 00    	jne    c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001cfd6:	83 ec 0c             	sub    esp,0xc
c001cfd9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cfdd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cfe1:	31 f6                	xor    esi,esi
c001cfe3:	0f af c2             	imul   eax,edx
c001cfe6:	50                   	push   eax
c001cfe7:	e8 a0 28 ff ff       	call   c000f88c <malloc>
c001cfec:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cfef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cff3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cff6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cffa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001cffe:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d002:	0f af c2             	imul   eax,edx
c001d005:	99                   	cdq    
c001d006:	52                   	push   edx
c001d007:	50                   	push   eax
c001d008:	55                   	push   ebp
c001d009:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d00c:	83 c4 20             	add    esp,0x20
c001d00f:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d013:	0f 86 8a 00 00 00    	jbe    c001d0a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d019:	0f b7 de             	movzx  ebx,si
c001d01c:	c1 e3 05             	shl    ebx,0x5
c001d01f:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d023:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d026:	75 75                	jne    c001d09d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d028:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d02b:	31 d2                	xor    edx,edx
c001d02d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d031:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d034:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d038:	50                   	push   eax
c001d039:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d03c:	52                   	push   edx
c001d03d:	50                   	push   eax
c001d03e:	55                   	push   ebp
c001d03f:	e8 b8 5e ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001d044:	83 c4 10             	add    esp,0x10
c001d047:	85 c0                	test   eax,eax
c001d049:	0f 85 71 05 00 00    	jne    c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d04f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d056:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d059:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d05d:	31 d2                	xor    edx,edx
c001d05f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d063:	83 ec 0c             	sub    esp,0xc
c001d066:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d06a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d071:	50                   	push   eax
c001d072:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d07a:	52                   	push   edx
c001d07b:	50                   	push   eax
c001d07c:	55                   	push   ebp
c001d07d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d080:	83 c4 1c             	add    esp,0x1c
c001d083:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d086:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d089:	50                   	push   eax
c001d08a:	6a 00                	push   0x0
c001d08c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d090:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d094:	50                   	push   eax
c001d095:	e8 b6 36 fe ff       	call   c0000750 <memset>
c001d09a:	83 c4 10             	add    esp,0x10
c001d09d:	46                   	inc    esi
c001d09e:	e9 6c ff ff ff       	jmp    c001d00f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d0a3:	53                   	push   ebx
c001d0a4:	31 db                	xor    ebx,ebx
c001d0a6:	68 00 01 00 00       	push   0x100
c001d0ab:	6a 00                	push   0x0
c001d0ad:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d0b1:	50                   	push   eax
c001d0b2:	e8 99 36 fe ff       	call   c0000750 <memset>
c001d0b7:	83 c4 0c             	add    esp,0xc
c001d0ba:	68 00 01 00 00       	push   0x100
c001d0bf:	6a 00                	push   0x0
c001d0c1:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d0c8:	50                   	push   eax
c001d0c9:	e8 82 36 fe ff       	call   c0000750 <memset>
c001d0ce:	83 c4 10             	add    esp,0x10
c001d0d1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d0d9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d0e1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d0e9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d0f1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d0f9:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d0fd:	0f 86 30 01 00 00    	jbe    c001d233 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d103:	0f b7 f3             	movzx  esi,bx
c001d106:	6b f6 28             	imul   esi,esi,0x28
c001d109:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d10d:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d110:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d114:	52                   	push   edx
c001d115:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d119:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d11d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d11f:	6b d2 28             	imul   edx,edx,0x28
c001d122:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d126:	31 d2                	xor    edx,edx
c001d128:	52                   	push   edx
c001d129:	50                   	push   eax
c001d12a:	55                   	push   ebp
c001d12b:	e8 cc 5d ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001d130:	83 c4 0c             	add    esp,0xc
c001d133:	6a 20                	push   0x20
c001d135:	6a 00                	push   0x0
c001d137:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d13e:	51                   	push   ecx
c001d13f:	e8 0c 36 fe ff       	call   c0000750 <memset>
c001d144:	59                   	pop    ecx
c001d145:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d148:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d14c:	52                   	push   edx
c001d14d:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d154:	51                   	push   ecx
c001d155:	6a 00                	push   0x0
c001d157:	6a 1f                	push   0x1f
c001d159:	55                   	push   ebp
c001d15a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d15d:	83 c4 1c             	add    esp,0x1c
c001d160:	6a 09                	push   0x9
c001d162:	68 b4 c9 02 c0       	push   0xc002c9b4
c001d167:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d16e:	51                   	push   ecx
c001d16f:	e8 d8 34 fe ff       	call   c000064c <memcmp>
c001d174:	83 c4 10             	add    esp,0x10
c001d177:	85 c0                	test   eax,eax
c001d179:	75 21                	jne    c001d19c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d17b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d17f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d183:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d187:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d18b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d18e:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d195:	89 d0                	mov    eax,edx
c001d197:	40                   	inc    eax
c001d198:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d19c:	50                   	push   eax
c001d19d:	6a 09                	push   0x9
c001d19f:	68 be c9 02 c0       	push   0xc002c9be
c001d1a4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1ab:	50                   	push   eax
c001d1ac:	e8 9b 34 fe ff       	call   c000064c <memcmp>
c001d1b1:	83 c4 10             	add    esp,0x10
c001d1b4:	85 c0                	test   eax,eax
c001d1b6:	75 21                	jne    c001d1d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d1b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d1c0:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d1c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d1c8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1cb:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d1d2:	89 d0                	mov    eax,edx
c001d1d4:	40                   	inc    eax
c001d1d5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1d9:	50                   	push   eax
c001d1da:	50                   	push   eax
c001d1db:	68 8a c9 02 c0       	push   0xc002c98a
c001d1e0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1e7:	50                   	push   eax
c001d1e8:	e8 ab 36 fe ff       	call   c0000898 <strcmp>
c001d1ed:	83 c4 10             	add    esp,0x10
c001d1f0:	85 c0                	test   eax,eax
c001d1f2:	75 0f                	jne    c001d203 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d1f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1fb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d1ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d203:	50                   	push   eax
c001d204:	50                   	push   eax
c001d205:	68 92 c9 02 c0       	push   0xc002c992
c001d20a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d211:	50                   	push   eax
c001d212:	e8 81 36 fe ff       	call   c0000898 <strcmp>
c001d217:	83 c4 10             	add    esp,0x10
c001d21a:	85 c0                	test   eax,eax
c001d21c:	75 0f                	jne    c001d22d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d21e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d221:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d225:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d229:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d22d:	43                   	inc    ebx
c001d22e:	e9 c6 fe ff ff       	jmp    c001d0f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d233:	31 d2                	xor    edx,edx
c001d235:	50                   	push   eax
c001d236:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d23a:	52                   	push   edx
c001d23b:	50                   	push   eax
c001d23c:	55                   	push   ebp
c001d23d:	e8 ba 5c ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001d242:	58                   	pop    eax
c001d243:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d247:	e8 40 26 ff ff       	call   c000f88c <malloc>
c001d24c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d24f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d253:	31 d2                	xor    edx,edx
c001d255:	58                   	pop    eax
c001d256:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d25a:	53                   	push   ebx
c001d25b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d25f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d263:	52                   	push   edx
c001d264:	50                   	push   eax
c001d265:	55                   	push   ebp
c001d266:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d269:	83 c4 14             	add    esp,0x14
c001d26c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d270:	e8 17 26 ff ff       	call   c000f88c <malloc>
c001d275:	31 d2                	xor    edx,edx
c001d277:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d27b:	83 c4 0c             	add    esp,0xc
c001d27e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d282:	52                   	push   edx
c001d283:	50                   	push   eax
c001d284:	55                   	push   ebp
c001d285:	e8 72 5c ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001d28a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d28d:	31 d2                	xor    edx,edx
c001d28f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d292:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d296:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d29a:	52                   	push   edx
c001d29b:	50                   	push   eax
c001d29c:	55                   	push   ebp
c001d29d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2a0:	83 c4 20             	add    esp,0x20
c001d2a3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d2ab:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d2af:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d2b3:	0f 84 0b 03 00 00    	je     c001d5c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d2b9:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d2c0:	31 d2                	xor    edx,edx
c001d2c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d2c6:	c1 e8 03             	shr    eax,0x3
c001d2c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d2cd:	51                   	push   ecx
c001d2ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d2d2:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d2d6:	52                   	push   edx
c001d2d7:	50                   	push   eax
c001d2d8:	55                   	push   ebp
c001d2d9:	e8 1e 5c ff ff       	call   c0012efc <File::seek(unsigned long long)>
c001d2de:	5b                   	pop    ebx
c001d2df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d2e3:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d2ea:	e8 9d 25 ff ff       	call   c000f88c <malloc>
c001d2ef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d2f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d2f6:	31 d2                	xor    edx,edx
c001d2f8:	5e                   	pop    esi
c001d2f9:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d2fd:	50                   	push   eax
c001d2fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d302:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d306:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d30d:	52                   	push   edx
c001d30e:	50                   	push   eax
c001d30f:	55                   	push   ebp
c001d310:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d313:	83 c4 20             	add    esp,0x20
c001d316:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d31e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d322:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d326:	0f 8d 7c 02 00 00    	jge    c001d5a8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d32c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d330:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d334:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d339:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d33c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d340:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d344:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d348:	89 d8                	mov    eax,ebx
c001d34a:	c1 e8 08             	shr    eax,0x8
c001d34d:	89 c6                	mov    esi,eax
c001d34f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d353:	c1 e6 04             	shl    esi,0x4
c001d356:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d35a:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d35d:	85 d2                	test   edx,edx
c001d35f:	0f 85 bf 00 00 00    	jne    c001d424 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d365:	83 ec 0c             	sub    esp,0xc
c001d368:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d36c:	03 06                	add    eax,DWORD PTR [esi]
c001d36e:	50                   	push   eax
c001d36f:	e8 4b f8 ff ff       	call   c001cbbf <Thr::getAddressOfKernelSymbol(char const*)>
c001d374:	83 c4 10             	add    esp,0x10
c001d377:	89 c2                	mov    edx,eax
c001d379:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d37e:	85 c0                	test   eax,eax
c001d380:	0f 85 9e 00 00 00    	jne    c001d424 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d386:	83 ec 0c             	sub    esp,0xc
c001d389:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d38d:	03 06                	add    eax,DWORD PTR [esi]
c001d38f:	50                   	push   eax
c001d390:	e8 aa 11 ff ff       	call   c000e53f <Krnl::resolveCompatibilitySymbol(char*)>
c001d395:	83 c4 10             	add    esp,0x10
c001d398:	89 c2                	mov    edx,eax
c001d39a:	85 c0                	test   eax,eax
c001d39c:	0f 85 82 00 00 00    	jne    c001d424 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d3a2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d3a6:	50                   	push   eax
c001d3a7:	50                   	push   eax
c001d3a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3ac:	03 06                	add    eax,DWORD PTR [esi]
c001d3ae:	50                   	push   eax
c001d3af:	68 c8 c9 02 c0       	push   0xc002c9c8
c001d3b4:	e8 c2 54 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001d3b9:	58                   	pop    eax
c001d3ba:	5a                   	pop    edx
c001d3bb:	68 e2 c9 02 c0       	push   0xc002c9e2
c001d3c0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3c7:	50                   	push   eax
c001d3c8:	e8 3f 34 fe ff       	call   c000080c <strcpy>
c001d3cd:	59                   	pop    ecx
c001d3ce:	58                   	pop    eax
c001d3cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d3d3:	03 06                	add    eax,DWORD PTR [esi]
c001d3d5:	50                   	push   eax
c001d3d6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3dd:	50                   	push   eax
c001d3de:	e8 69 35 fe ff       	call   c000094c <strcat>
c001d3e3:	58                   	pop    eax
c001d3e4:	5a                   	pop    edx
c001d3e5:	68 78 ca 02 c0       	push   0xc002ca78
c001d3ea:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d3f1:	50                   	push   eax
c001d3f2:	e8 55 35 fe ff       	call   c000094c <strcat>
c001d3f7:	83 c4 10             	add    esp,0x10
c001d3fa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d3ff:	0f 84 5d 01 00 00    	je     c001d562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d405:	83 ec 0c             	sub    esp,0xc
c001d408:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d40f:	50                   	push   eax
c001d410:	e8 9c ce ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001d415:	83 c4 10             	add    esp,0x10
c001d418:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d41c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d420:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d424:	80 fb 01             	cmp    bl,0x1
c001d427:	0f 85 88 00 00 00    	jne    c001d4b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d42d:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d434:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d438:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d43c:	01 ce                	add    esi,ecx
c001d43e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d444:	0f 94 c0             	sete   al
c001d447:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d44d:	0f 94 c3             	sete   bl
c001d450:	09 c3                	or     ebx,eax
c001d452:	8b 06                	mov    eax,DWORD PTR [esi]
c001d454:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d459:	74 41                	je     c001d49c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d45b:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d45e:	84 db                	test   bl,bl
c001d460:	75 15                	jne    c001d477 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d462:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d466:	66 83 f8 0c          	cmp    ax,0xc
c001d46a:	76 05                	jbe    c001d471 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d46c:	b8 0c 00 00 00       	mov    eax,0xc
c001d471:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d475:	76 37                	jbe    c001d4ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d477:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d47b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d480:	0f 84 dc 00 00 00    	je     c001d562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d486:	83 ec 0c             	sub    esp,0xc
c001d489:	68 f9 c9 02 c0       	push   0xc002c9f9
c001d48e:	e8 1e ce ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001d493:	83 c4 10             	add    esp,0x10
c001d496:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d49a:	eb 12                	jmp    c001d4ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d49c:	01 c1                	add    ecx,eax
c001d49e:	84 db                	test   bl,bl
c001d4a0:	75 0c                	jne    c001d4ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4a2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4a6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d4aa:	77 02                	ja     c001d4ae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d4ac:	01 d1                	add    ecx,edx
c001d4ae:	89 0e                	mov    DWORD PTR [esi],ecx
c001d4b0:	e9 ea 00 00 00       	jmp    c001d59f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d4b5:	80 fb 02             	cmp    bl,0x2
c001d4b8:	75 7c                	jne    c001d536 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d4ba:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d4c1:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d4c5:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d4c9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d4cf:	74 20                	je     c001d4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d4d1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d4d7:	74 18                	je     c001d4f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d4d9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d4dd:	b9 0a 00 00 00       	mov    ecx,0xa
c001d4e2:	66 83 f8 0e          	cmp    ax,0xe
c001d4e6:	77 03                	ja     c001d4eb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d4e8:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d4eb:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d4ef:	76 1f                	jbe    c001d510 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d4f1:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d4f5:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d4fa:	74 66                	je     c001d562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d4fc:	83 ec 0c             	sub    esp,0xc
c001d4ff:	68 15 ca 02 c0       	push   0xc002ca15
c001d504:	e8 a8 cd ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001d509:	83 c4 10             	add    esp,0x10
c001d50c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d510:	8b 06                	mov    eax,DWORD PTR [esi]
c001d512:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d517:	74 13                	je     c001d52c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d519:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d51d:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d524:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d528:	01 c8                	add    eax,ecx
c001d52a:	eb 04                	jmp    c001d530 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d52c:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d530:	01 c2                	add    edx,eax
c001d532:	89 16                	mov    DWORD PTR [esi],edx
c001d534:	eb 69                	jmp    c001d59f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d536:	0f b6 db             	movzx  ebx,bl
c001d539:	50                   	push   eax
c001d53a:	50                   	push   eax
c001d53b:	53                   	push   ebx
c001d53c:	68 31 ca 02 c0       	push   0xc002ca31
c001d541:	e8 35 53 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001d546:	83 c4 10             	add    esp,0x10
c001d549:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d54e:	74 12                	je     c001d562 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d550:	83 ec 0c             	sub    esp,0xc
c001d553:	68 3c ca 02 c0       	push   0xc002ca3c
c001d558:	e8 54 cd ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	eb 3d                	jmp    c001d59f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d562:	83 ec 0c             	sub    esp,0xc
c001d565:	55                   	push   ebp
c001d566:	e8 31 59 ff ff       	call   c0012e9c <File::close()>
c001d56b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d56e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d571:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d574:	59                   	pop    ecx
c001d575:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d579:	e8 1e 23 ff ff       	call   c000f89c <free>
c001d57e:	5b                   	pop    ebx
c001d57f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d583:	e8 14 23 ff ff       	call   c000f89c <free>
c001d588:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d58b:	e8 0c 23 ff ff       	call   c000f89c <free>
c001d590:	5e                   	pop    esi
c001d591:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d595:	e8 02 23 ff ff       	call   c000f89c <free>
c001d59a:	83 c4 10             	add    esp,0x10
c001d59d:	eb 21                	jmp    c001d5c0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d59f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d5a3:	e9 76 fd ff ff       	jmp    c001d31e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d5a8:	83 ec 0c             	sub    esp,0xc
c001d5ab:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d5af:	e8 e8 22 ff ff       	call   c000f89c <free>
c001d5b4:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d5b8:	83 c4 10             	add    esp,0x10
c001d5bb:	e9 eb fc ff ff       	jmp    c001d2ab <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d5c0:	31 c0                	xor    eax,eax
c001d5c2:	eb 33                	jmp    c001d5f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d5c4:	83 ec 0c             	sub    esp,0xc
c001d5c7:	55                   	push   ebp
c001d5c8:	e8 cf 58 ff ff       	call   c0012e9c <File::close()>
c001d5cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d5d0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d5d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5d6:	58                   	pop    eax
c001d5d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d5db:	e8 bc 22 ff ff       	call   c000f89c <free>
c001d5e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5e3:	e8 b4 22 ff ff       	call   c000f89c <free>
c001d5e8:	5a                   	pop    edx
c001d5e9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d5ed:	e8 aa 22 ff ff       	call   c000f89c <free>
c001d5f2:	83 c4 10             	add    esp,0x10
c001d5f5:	b0 01                	mov    al,0x1
c001d5f7:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d5fd:	5b                   	pop    ebx
c001d5fe:	5e                   	pop    esi
c001d5ff:	5f                   	pop    edi
c001d600:	5d                   	pop    ebp
c001d601:	c3                   	ret    

c001d602 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d602:	56                   	push   esi
c001d603:	31 d2                	xor    edx,edx
c001d605:	53                   	push   ebx
c001d606:	8b 1d a0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ba0
c001d60c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d610:	39 d3                	cmp    ebx,edx
c001d612:	7e 1b                	jle    c001d62f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d614:	8b 04 95 c0 1d 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce240]
c001d61b:	39 c8                	cmp    eax,ecx
c001d61d:	77 0d                	ja     c001d62c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d61f:	8b 34 95 c0 1b 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce440]
c001d626:	01 c6                	add    esi,eax
c001d628:	39 ce                	cmp    esi,ecx
c001d62a:	77 05                	ja     c001d631 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d62c:	42                   	inc    edx
c001d62d:	eb e1                	jmp    c001d610 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d62f:	31 c0                	xor    eax,eax
c001d631:	5b                   	pop    ebx
c001d632:	5e                   	pop    esi
c001d633:	c3                   	ret    

c001d634 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d634:	53                   	push   ebx
c001d635:	31 c0                	xor    eax,eax
c001d637:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d63b:	8b 1d a0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ba0
c001d641:	39 c3                	cmp    ebx,eax
c001d643:	7e 22                	jle    c001d667 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d645:	8b 14 85 c0 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce240]
c001d64c:	39 ca                	cmp    edx,ecx
c001d64e:	77 14                	ja     c001d664 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d650:	03 14 85 c0 1b 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce440]
c001d657:	39 ca                	cmp    edx,ecx
c001d659:	76 09                	jbe    c001d664 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d65b:	8b 04 85 c0 1f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce040]
c001d662:	eb 05                	jmp    c001d669 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d664:	40                   	inc    eax
c001d665:	eb da                	jmp    c001d641 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d667:	31 c0                	xor    eax,eax
c001d669:	5b                   	pop    ebx
c001d66a:	c3                   	ret    

c001d66b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d66b:	53                   	push   ebx
c001d66c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d670:	53                   	push   ebx
c001d671:	e8 8c ff ff ff       	call   c001d602 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d676:	5a                   	pop    edx
c001d677:	31 d2                	xor    edx,edx
c001d679:	85 c0                	test   eax,eax
c001d67b:	74 04                	je     c001d681 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d67d:	89 da                	mov    edx,ebx
c001d67f:	29 c2                	sub    edx,eax
c001d681:	89 d0                	mov    eax,edx
c001d683:	5b                   	pop    ebx
c001d684:	c3                   	ret    

c001d685 <Thr::loadDLL(char const*, bool)>:
c001d685:	55                   	push   ebp
c001d686:	57                   	push   edi
c001d687:	56                   	push   esi
c001d688:	53                   	push   ebx
c001d689:	81 ec 34 01 00 00    	sub    esp,0x134
c001d68f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d696:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001d69d:	56                   	push   esi
c001d69e:	68 54 ca 02 c0       	push   0xc002ca54
c001d6a3:	e8 d3 51 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001d6a8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d6af:	e8 d8 21 ff ff       	call   c000f88c <malloc>
c001d6b4:	83 c4 0c             	add    esp,0xc
c001d6b7:	89 c3                	mov    ebx,eax
c001d6b9:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001d6bf:	56                   	push   esi
c001d6c0:	50                   	push   eax
c001d6c1:	e8 14 57 ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001d6c6:	83 c4 10             	add    esp,0x10
c001d6c9:	85 db                	test   ebx,ebx
c001d6cb:	75 3c                	jne    c001d709 <Thr::loadDLL(char const*, bool)+0x84>
c001d6cd:	89 f8                	mov    eax,edi
c001d6cf:	84 c0                	test   al,al
c001d6d1:	0f 84 cc 01 00 00    	je     c001d8a3 <Thr::loadDLL(char const*, bool)+0x21e>
c001d6d7:	55                   	push   ebp
c001d6d8:	55                   	push   ebp
c001d6d9:	68 65 ca 02 c0       	push   0xc002ca65
c001d6de:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001d6e2:	55                   	push   ebp
c001d6e3:	e8 24 31 fe ff       	call   c000080c <strcpy>
c001d6e8:	58                   	pop    eax
c001d6e9:	5a                   	pop    edx
c001d6ea:	56                   	push   esi
c001d6eb:	55                   	push   ebp
c001d6ec:	e8 5b 32 fe ff       	call   c000094c <strcat>
c001d6f1:	59                   	pop    ecx
c001d6f2:	58                   	pop    eax
c001d6f3:	68 78 ca 02 c0       	push   0xc002ca78
c001d6f8:	55                   	push   ebp
c001d6f9:	e8 4e 32 fe ff       	call   c000094c <strcat>
c001d6fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d701:	e8 ab cb ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001d706:	83 c4 10             	add    esp,0x10
c001d709:	51                   	push   ecx
c001d70a:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d70e:	50                   	push   eax
c001d70f:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d713:	50                   	push   eax
c001d714:	53                   	push   ebx
c001d715:	e8 d0 59 ff ff       	call   c00130ea <File::stat(unsigned long long*, bool*)>
c001d71a:	83 c4 10             	add    esp,0x10
c001d71d:	85 db                	test   ebx,ebx
c001d71f:	74 0c                	je     c001d72d <Thr::loadDLL(char const*, bool)+0xa8>
c001d721:	83 ec 0c             	sub    esp,0xc
c001d724:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d726:	53                   	push   ebx
c001d727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d72a:	83 c4 10             	add    esp,0x10
c001d72d:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d732:	75 0a                	jne    c001d73e <Thr::loadDLL(char const*, bool)+0xb9>
c001d734:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d738:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d73c:	75 3c                	jne    c001d77a <Thr::loadDLL(char const*, bool)+0xf5>
c001d73e:	89 f8                	mov    eax,edi
c001d740:	84 c0                	test   al,al
c001d742:	0f 84 43 01 00 00    	je     c001d88b <Thr::loadDLL(char const*, bool)+0x206>
c001d748:	51                   	push   ecx
c001d749:	51                   	push   ecx
c001d74a:	68 65 ca 02 c0       	push   0xc002ca65
c001d74f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d753:	53                   	push   ebx
c001d754:	e8 b3 30 fe ff       	call   c000080c <strcpy>
c001d759:	5d                   	pop    ebp
c001d75a:	58                   	pop    eax
c001d75b:	56                   	push   esi
c001d75c:	53                   	push   ebx
c001d75d:	e8 ea 31 fe ff       	call   c000094c <strcat>
c001d762:	58                   	pop    eax
c001d763:	5a                   	pop    edx
c001d764:	68 78 ca 02 c0       	push   0xc002ca78
c001d769:	53                   	push   ebx
c001d76a:	e8 dd 31 fe ff       	call   c000094c <strcat>
c001d76f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d772:	e8 3a cb ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001d777:	83 c4 10             	add    esp,0x10
c001d77a:	52                   	push   edx
c001d77b:	6a 03                	push   0x3
c001d77d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d781:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d785:	05 ff 0f 00 00       	add    eax,0xfff
c001d78a:	83 d2 00             	adc    edx,0x0
c001d78d:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d791:	50                   	push   eax
c001d792:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c001d798:	e8 11 46 ff ff       	call   c0011dae <VAS::allocatePages(int, int)>
c001d79d:	59                   	pop    ecx
c001d79e:	89 c3                	mov    ebx,eax
c001d7a0:	5d                   	pop    ebp
c001d7a1:	50                   	push   eax
c001d7a2:	68 7a ca 02 c0       	push   0xc002ca7a
c001d7a7:	e8 cf 50 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001d7ac:	89 34 24             	mov    DWORD PTR [esp],esi
c001d7af:	e8 b8 2f fe ff       	call   c000076c <strlen>
c001d7b4:	8b 2d a0 1b 03 c0    	mov    ebp,DWORD PTR ds:0xc0031ba0
c001d7ba:	40                   	inc    eax
c001d7bb:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7be:	e8 c9 20 ff ff       	call   c000f88c <malloc>
c001d7c3:	89 04 ad c0 1f 03 c0 	mov    DWORD PTR [ebp*4-0x3ffce040],eax
c001d7ca:	58                   	pop    eax
c001d7cb:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c001d7d0:	5a                   	pop    edx
c001d7d1:	56                   	push   esi
c001d7d2:	ff 34 85 c0 1f 03 c0 	push   DWORD PTR [eax*4-0x3ffce040]
c001d7d9:	e8 2e 30 fe ff       	call   c000080c <strcpy>
c001d7de:	a1 a0 1b 03 c0       	mov    eax,ds:0xc0031ba0
c001d7e3:	8d 50 01             	lea    edx,[eax+0x1]
c001d7e6:	89 1c 85 c0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce240],ebx
c001d7ed:	89 15 a0 1b 03 c0    	mov    DWORD PTR ds:0xc0031ba0,edx
c001d7f3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d7f7:	83 c4 0c             	add    esp,0xc
c001d7fa:	89 14 85 c0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce440],edx
c001d801:	6a 01                	push   0x1
c001d803:	53                   	push   ebx
c001d804:	56                   	push   esi
c001d805:	e8 c2 f6 ff ff       	call   c001cecc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d80a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d80e:	83 c4 10             	add    esp,0x10
c001d811:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d816:	0f 85 83 00 00 00    	jne    c001d89f <Thr::loadDLL(char const*, bool)+0x21a>
c001d81c:	89 f8                	mov    eax,edi
c001d81e:	84 c0                	test   al,al
c001d820:	74 6d                	je     c001d88f <Thr::loadDLL(char const*, bool)+0x20a>
c001d822:	83 ec 0c             	sub    esp,0xc
c001d825:	68 87 ca 02 c0       	push   0xc002ca87
c001d82a:	e8 82 ca ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001d82f:	83 c4 10             	add    esp,0x10
c001d832:	eb 5b                	jmp    c001d88f <Thr::loadDLL(char const*, bool)+0x20a>
c001d834:	89 ee                	mov    esi,ebp
c001d836:	50                   	push   eax
c001d837:	c1 e6 0c             	shl    esi,0xc
c001d83a:	50                   	push   eax
c001d83b:	01 de                	add    esi,ebx
c001d83d:	56                   	push   esi
c001d83e:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c001d844:	e8 cd 40 ff ff       	call   c0011916 <VAS::getPageTableEntry(unsigned long)>
c001d849:	83 c4 10             	add    esp,0x10
c001d84c:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d84f:	75 0c                	jne    c001d85d <Thr::loadDLL(char const*, bool)+0x1d8>
c001d851:	83 ec 0c             	sub    esp,0xc
c001d854:	56                   	push   esi
c001d855:	e8 88 22 ff ff       	call   c000fae2 <Phys::freePage(unsigned long)>
c001d85a:	83 c4 10             	add    esp,0x10
c001d85d:	45                   	inc    ebp
c001d85e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d862:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d866:	05 ff 0f 00 00       	add    eax,0xfff
c001d86b:	bf 00 00 00 00       	mov    edi,0x0
c001d870:	83 d2 00             	adc    edx,0x0
c001d873:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d877:	c1 ea 0c             	shr    edx,0xc
c001d87a:	39 c5                	cmp    ebp,eax
c001d87c:	89 d1                	mov    ecx,edx
c001d87e:	89 f8                	mov    eax,edi
c001d880:	19 c8                	sbb    eax,ecx
c001d882:	72 b0                	jb     c001d834 <Thr::loadDLL(char const*, bool)+0x1af>
c001d884:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001d889:	75 18                	jne    c001d8a3 <Thr::loadDLL(char const*, bool)+0x21e>
c001d88b:	31 db                	xor    ebx,ebx
c001d88d:	eb 14                	jmp    c001d8a3 <Thr::loadDLL(char const*, bool)+0x21e>
c001d88f:	83 ec 0c             	sub    esp,0xc
c001d892:	68 a6 ca 02 c0       	push   0xc002caa6
c001d897:	e8 15 ca ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001d89c:	83 c4 10             	add    esp,0x10
c001d89f:	31 ed                	xor    ebp,ebp
c001d8a1:	eb bb                	jmp    c001d85e <Thr::loadDLL(char const*, bool)+0x1d9>
c001d8a3:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d8a9:	89 d8                	mov    eax,ebx
c001d8ab:	5b                   	pop    ebx
c001d8ac:	5e                   	pop    esi
c001d8ad:	5f                   	pop    edi
c001d8ae:	5d                   	pop    ebp
c001d8af:	c3                   	ret    

c001d8b0 <Thr::executeDLL(unsigned long, void*)>:
c001d8b0:	56                   	push   esi
c001d8b1:	53                   	push   ebx
c001d8b2:	52                   	push   edx
c001d8b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d8b7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d8bb:	85 db                	test   ebx,ebx
c001d8bd:	75 10                	jne    c001d8cf <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d8bf:	83 ec 0c             	sub    esp,0xc
c001d8c2:	68 c2 ca 02 c0       	push   0xc002cac2
c001d8c7:	e8 e5 c9 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001d8cc:	83 c4 10             	add    esp,0x10
c001d8cf:	50                   	push   eax
c001d8d0:	50                   	push   eax
c001d8d1:	53                   	push   ebx
c001d8d2:	68 ec ca 02 c0       	push   0xc002caec
c001d8d7:	e8 9f 4f ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001d8dc:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d8e0:	89 d8                	mov    eax,ebx
c001d8e2:	83 c4 14             	add    esp,0x14
c001d8e5:	5b                   	pop    ebx
c001d8e6:	5e                   	pop    esi
c001d8e7:	ff e0                	jmp    eax
c001d8e9:	90                   	nop

c001d8ea <userModeEntryPoint(void*)>:
c001d8ea:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001d8ef:	48                   	dec    eax
c001d8f0:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001d8f5:	75 01                	jne    c001d8f8 <userModeEntryPoint(void*)+0xe>
c001d8f7:	fb                   	sti    
c001d8f8:	fb                   	sti    
c001d8f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d8fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d901:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001d907:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d90b:	e9 1a 2a fe ff       	jmp    c000032a <goToUsermode>

c001d910 <changeTSS>:
c001d910:	83 ec 14             	sub    esp,0x14
c001d913:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d918:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d91b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d920:	c1 e2 15             	shl    edx,0x15
c001d923:	29 d0                	sub    eax,edx
c001d925:	50                   	push   eax
c001d926:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001d92b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d931:	05 7c 11 00 00       	add    eax,0x117c
c001d936:	50                   	push   eax
c001d937:	e8 78 34 ff ff       	call   c0010db4 <TSS::setESP(unsigned long)>
c001d93c:	83 c4 1c             	add    esp,0x1c
c001d93f:	c3                   	ret    

c001d940 <switchToThread(ThreadControlBlock*)>:
c001d940:	57                   	push   edi
c001d941:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001d946:	56                   	push   esi
c001d947:	85 c0                	test   eax,eax
c001d949:	53                   	push   ebx
c001d94a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d94e:	0f 85 88 00 00 00    	jne    c001d9dc <switchToThread(ThreadControlBlock*)+0x9c>
c001d954:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001d957:	3c ff                	cmp    al,0xff
c001d959:	74 7d                	je     c001d9d8 <switchToThread(ThreadControlBlock*)+0x98>
c001d95b:	0f b6 d0             	movzx  edx,al
c001d95e:	b8 84 03 00 00       	mov    eax,0x384
c001d963:	29 d0                	sub    eax,edx
c001d965:	c1 e0 10             	shl    eax,0x10
c001d968:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001d96b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001d96e:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001d973:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d979:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001d980:	74 4a                	je     c001d9cc <switchToThread(ThreadControlBlock*)+0x8c>
c001d982:	0f 31                	rdtsc  
c001d984:	a3 a8 23 03 c0       	mov    ds:0xc00323a8,eax
c001d989:	89 c6                	mov    esi,eax
c001d98b:	89 d7                	mov    edi,edx
c001d98d:	2b 35 98 23 03 c0    	sub    esi,DWORD PTR ds:0xc0032398
c001d993:	89 15 ac 23 03 c0    	mov    DWORD PTR ds:0xc00323ac,edx
c001d999:	1b 3d 9c 23 03 c0    	sbb    edi,DWORD PTR ds:0xc003239c
c001d99f:	89 35 a0 23 03 c0    	mov    DWORD PTR ds:0xc00323a0,esi
c001d9a5:	a3 98 23 03 c0       	mov    ds:0xc0032398,eax
c001d9aa:	89 3d a4 23 03 c0    	mov    DWORD PTR ds:0xc00323a4,edi
c001d9b0:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001d9b6:	89 15 9c 23 03 c0    	mov    DWORD PTR ds:0xc003239c,edx
c001d9bc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d9bf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001d9c2:	01 c6                	add    esi,eax
c001d9c4:	11 d7                	adc    edi,edx
c001d9c6:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001d9c9:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001d9cc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001d9d0:	5b                   	pop    ebx
c001d9d1:	5e                   	pop    esi
c001d9d2:	5f                   	pop    edi
c001d9d3:	e9 8a 29 fe ff       	jmp    c0000362 <switchToThreadASM>
c001d9d8:	31 c0                	xor    eax,eax
c001d9da:	eb 8f                	jmp    c001d96b <switchToThread(ThreadControlBlock*)+0x2b>
c001d9dc:	5b                   	pop    ebx
c001d9dd:	c7 05 60 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x1
c001d9e7:	5e                   	pop    esi
c001d9e8:	5f                   	pop    edi
c001d9e9:	c3                   	ret    

c001d9ea <Process::addArgs(char**)>:
c001d9ea:	57                   	push   edi
c001d9eb:	56                   	push   esi
c001d9ec:	53                   	push   ebx
c001d9ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d9f1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d9f5:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d9ff:	85 ff                	test   edi,edi
c001da01:	74 3d                	je     c001da40 <Process::addArgs(char**)+0x56>
c001da03:	8b 07                	mov    eax,DWORD PTR [edi]
c001da05:	85 c0                	test   eax,eax
c001da07:	74 37                	je     c001da40 <Process::addArgs(char**)+0x56>
c001da09:	31 db                	xor    ebx,ebx
c001da0b:	83 ec 0c             	sub    esp,0xc
c001da0e:	50                   	push   eax
c001da0f:	e8 58 2d fe ff       	call   c000076c <strlen>
c001da14:	40                   	inc    eax
c001da15:	89 04 24             	mov    DWORD PTR [esp],eax
c001da18:	e8 6f 1e ff ff       	call   c000f88c <malloc>
c001da1d:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001da24:	5a                   	pop    edx
c001da25:	59                   	pop    ecx
c001da26:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001da29:	43                   	inc    ebx
c001da2a:	50                   	push   eax
c001da2b:	e8 dc 2d fe ff       	call   c000080c <strcpy>
c001da30:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001da36:	83 c4 10             	add    esp,0x10
c001da39:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001da3c:	85 c0                	test   eax,eax
c001da3e:	75 cb                	jne    c001da0b <Process::addArgs(char**)+0x21>
c001da40:	5b                   	pop    ebx
c001da41:	5e                   	pop    esi
c001da42:	5f                   	pop    edi
c001da43:	c3                   	ret    

c001da44 <Process::Process(char const*, Process*, char**)>:
c001da44:	56                   	push   esi
c001da45:	53                   	push   ebx
c001da46:	83 ec 14             	sub    esp,0x14
c001da49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da4d:	05 0c 02 00 00       	add    eax,0x20c
c001da52:	bb 07 00 00 00       	mov    ebx,0x7
c001da57:	89 c6                	mov    esi,eax
c001da59:	85 db                	test   ebx,ebx
c001da5b:	78 12                	js     c001da6f <Process::Process(char const*, Process*, char**)+0x2b>
c001da5d:	83 ec 0c             	sub    esp,0xc
c001da60:	56                   	push   esi
c001da61:	e8 dc ba 00 00       	call   c0029542 <ThreadControlBlock::ThreadControlBlock()>
c001da66:	83 c4 10             	add    esp,0x10
c001da69:	83 c6 63             	add    esi,0x63
c001da6c:	4b                   	dec    ebx
c001da6d:	eb ea                	jmp    c001da59 <Process::Process(char const*, Process*, char**)+0x15>
c001da6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da73:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001da7a:	83 ec 0c             	sub    esp,0xc
c001da7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001da81:	e8 84 c6 ff ff       	call   c001a10a <Krnl::newProcessEnv(Process*)>
c001da86:	83 c4 10             	add    esp,0x10
c001da89:	89 c2                	mov    edx,eax
c001da8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da8f:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001da95:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001da99:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001daa2:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c001daa7:	8d 50 01             	lea    edx,[eax+0x1]
c001daaa:	89 15 d0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3d0,edx
c001dab0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dab4:	89 02                	mov    DWORD PTR [edx],eax
c001dab6:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001dabe:	83 ec 0c             	sub    esp,0xc
c001dac1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001dac5:	e8 c2 1d ff ff       	call   c000f88c <malloc>
c001daca:	83 c4 10             	add    esp,0x10
c001dacd:	89 c3                	mov    ebx,eax
c001dacf:	83 ec 08             	sub    esp,0x8
c001dad2:	6a 00                	push   0x0
c001dad4:	53                   	push   ebx
c001dad5:	e8 7c 46 ff ff       	call   c0012156 <VAS::VAS(bool)>
c001dada:	83 c4 10             	add    esp,0x10
c001dadd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dae1:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daeb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001daf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daf9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dafd:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001db03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db07:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db0d:	85 c0                	test   eax,eax
c001db0f:	74 42                	je     c001db53 <Process::Process(char const*, Process*, char**)+0x10f>
c001db11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db15:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db1b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001db21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db25:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001db2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001db35:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001db3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db3f:	05 0c 01 00 00       	add    eax,0x10c
c001db44:	83 ec 08             	sub    esp,0x8
c001db47:	52                   	push   edx
c001db48:	50                   	push   eax
c001db49:	e8 be 2c fe ff       	call   c000080c <strcpy>
c001db4e:	83 c4 10             	add    esp,0x10
c001db51:	eb 63                	jmp    c001dbb6 <Process::Process(char const*, Process*, char**)+0x172>
c001db53:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001db5b:	83 ec 0c             	sub    esp,0xc
c001db5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001db62:	e8 25 1d ff ff       	call   c000f88c <malloc>
c001db67:	83 c4 10             	add    esp,0x10
c001db6a:	89 c3                	mov    ebx,eax
c001db6c:	83 ec 08             	sub    esp,0x8
c001db6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db73:	53                   	push   ebx
c001db74:	e8 1d 2f ff ff       	call   c0010a96 <VgaText::VgaText(char const*)>
c001db79:	83 c4 10             	add    esp,0x10
c001db7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db80:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001db86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db8a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001db90:	83 ec 0c             	sub    esp,0xc
c001db93:	50                   	push   eax
c001db94:	e8 04 26 ff ff       	call   c001019d <addToTerminalCycle(VgaText*)>
c001db99:	83 c4 10             	add    esp,0x10
c001db9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba0:	05 0c 01 00 00       	add    eax,0x10c
c001dba5:	83 ec 08             	sub    esp,0x8
c001dba8:	68 0b cb 02 c0       	push   0xc002cb0b
c001dbad:	50                   	push   eax
c001dbae:	e8 59 2c fe ff       	call   c000080c <strcpy>
c001dbb3:	83 c4 10             	add    esp,0x10
c001dbb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbba:	83 c0 0c             	add    eax,0xc
c001dbbd:	83 ec 08             	sub    esp,0x8
c001dbc0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbc4:	50                   	push   eax
c001dbc5:	e8 42 2c fe ff       	call   c000080c <strcpy>
c001dbca:	83 c4 10             	add    esp,0x10
c001dbcd:	83 ec 08             	sub    esp,0x8
c001dbd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dbd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbd8:	e8 0d fe ff ff       	call   c001d9ea <Process::addArgs(char**)>
c001dbdd:	83 c4 10             	add    esp,0x10
c001dbe0:	83 ec 08             	sub    esp,0x8
c001dbe3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbe7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dbeb:	e8 a6 ed ff ff       	call   c001c996 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dbf0:	83 c4 10             	add    esp,0x10
c001dbf3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbf7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbfb:	83 f0 01             	xor    eax,0x1
c001dbfe:	88 c2                	mov    dl,al
c001dc00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc04:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dc0a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dc0f:	83 ec 08             	sub    esp,0x8
c001dc12:	50                   	push   eax
c001dc13:	68 38 cc 02 c0       	push   0xc002cc38
c001dc18:	e8 5e 4c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001dc1d:	83 c4 10             	add    esp,0x10
c001dc20:	90                   	nop
c001dc21:	83 c4 14             	add    esp,0x14
c001dc24:	5b                   	pop    ebx
c001dc25:	5e                   	pop    esi
c001dc26:	c3                   	ret    
c001dc27:	90                   	nop

c001dc28 <Process::Process(bool, char const*, Process*, char**)>:
c001dc28:	56                   	push   esi
c001dc29:	53                   	push   ebx
c001dc2a:	83 ec 24             	sub    esp,0x24
c001dc2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dc31:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dc35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc39:	05 0c 02 00 00       	add    eax,0x20c
c001dc3e:	bb 07 00 00 00       	mov    ebx,0x7
c001dc43:	89 c6                	mov    esi,eax
c001dc45:	85 db                	test   ebx,ebx
c001dc47:	78 12                	js     c001dc5b <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dc49:	83 ec 0c             	sub    esp,0xc
c001dc4c:	56                   	push   esi
c001dc4d:	e8 f0 b8 00 00       	call   c0029542 <ThreadControlBlock::ThreadControlBlock()>
c001dc52:	83 c4 10             	add    esp,0x10
c001dc55:	83 c6 63             	add    esi,0x63
c001dc58:	4b                   	dec    ebx
c001dc59:	eb ea                	jmp    c001dc45 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dc5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc5f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dc66:	83 ec 0c             	sub    esp,0xc
c001dc69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dc6d:	e8 98 c4 ff ff       	call   c001a10a <Krnl::newProcessEnv(Process*)>
c001dc72:	83 c4 10             	add    esp,0x10
c001dc75:	89 c2                	mov    edx,eax
c001dc77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc7b:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dc81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dc85:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dc8e:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c001dc93:	8d 50 01             	lea    edx,[eax+0x1]
c001dc96:	89 15 d0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3d0,edx
c001dc9c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dca0:	89 02                	mov    DWORD PTR [edx],eax
c001dca2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dcaa:	83 ec 0c             	sub    esp,0xc
c001dcad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dcb1:	e8 d6 1b ff ff       	call   c000f88c <malloc>
c001dcb6:	83 c4 10             	add    esp,0x10
c001dcb9:	89 c3                	mov    ebx,eax
c001dcbb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dcc0:	83 ec 08             	sub    esp,0x8
c001dcc3:	50                   	push   eax
c001dcc4:	53                   	push   ebx
c001dcc5:	e8 8c 44 ff ff       	call   c0012156 <VAS::VAS(bool)>
c001dcca:	83 c4 10             	add    esp,0x10
c001dccd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd1:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dcd7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcdb:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dce5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dce9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dced:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dcf3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcf7:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dcfd:	85 c0                	test   eax,eax
c001dcff:	74 42                	je     c001dd43 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd05:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd0b:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dd11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd15:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dd1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd1f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd25:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dd2b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd2f:	05 0c 01 00 00       	add    eax,0x10c
c001dd34:	83 ec 08             	sub    esp,0x8
c001dd37:	52                   	push   edx
c001dd38:	50                   	push   eax
c001dd39:	e8 ce 2a fe ff       	call   c000080c <strcpy>
c001dd3e:	83 c4 10             	add    esp,0x10
c001dd41:	eb 63                	jmp    c001dda6 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dd43:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001dd4b:	83 ec 0c             	sub    esp,0xc
c001dd4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001dd52:	e8 35 1b ff ff       	call   c000f88c <malloc>
c001dd57:	83 c4 10             	add    esp,0x10
c001dd5a:	89 c3                	mov    ebx,eax
c001dd5c:	83 ec 08             	sub    esp,0x8
c001dd5f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001dd63:	53                   	push   ebx
c001dd64:	e8 2d 2d ff ff       	call   c0010a96 <VgaText::VgaText(char const*)>
c001dd69:	83 c4 10             	add    esp,0x10
c001dd6c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd70:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dd76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd7a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dd80:	83 ec 0c             	sub    esp,0xc
c001dd83:	50                   	push   eax
c001dd84:	e8 14 24 ff ff       	call   c001019d <addToTerminalCycle(VgaText*)>
c001dd89:	83 c4 10             	add    esp,0x10
c001dd8c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd90:	05 0c 01 00 00       	add    eax,0x10c
c001dd95:	83 ec 08             	sub    esp,0x8
c001dd98:	68 0b cb 02 c0       	push   0xc002cb0b
c001dd9d:	50                   	push   eax
c001dd9e:	e8 69 2a fe ff       	call   c000080c <strcpy>
c001dda3:	83 c4 10             	add    esp,0x10
c001dda6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddaa:	83 c0 0c             	add    eax,0xc
c001ddad:	83 ec 08             	sub    esp,0x8
c001ddb0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ddb4:	50                   	push   eax
c001ddb5:	e8 52 2a fe ff       	call   c000080c <strcpy>
c001ddba:	83 c4 10             	add    esp,0x10
c001ddbd:	83 ec 08             	sub    esp,0x8
c001ddc0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ddc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ddc8:	e8 1d fc ff ff       	call   c001d9ea <Process::addArgs(char**)>
c001ddcd:	83 c4 10             	add    esp,0x10
c001ddd0:	90                   	nop
c001ddd1:	83 c4 24             	add    esp,0x24
c001ddd4:	5b                   	pop    ebx
c001ddd5:	5e                   	pop    esi
c001ddd6:	c3                   	ret    

c001ddd7 <taskStartupFunction>:
c001ddd7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dddc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001dddf:	c3                   	ret    

c001dde0 <Semaphore::Semaphore(int)>:
c001dde0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dde4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dde8:	89 10                	mov    DWORD PTR [eax],edx
c001ddea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddee:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ddf5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001de00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de04:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001de0b:	90                   	nop
c001de0c:	c3                   	ret    
c001de0d:	90                   	nop

c001de0e <Mutex::Mutex()>:
c001de0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de12:	6a 01                	push   0x1
c001de14:	50                   	push   eax
c001de15:	e8 c6 ff ff ff       	call   c001dde0 <Semaphore::Semaphore(int)>
c001de1a:	83 c4 08             	add    esp,0x8
c001de1d:	90                   	nop
c001de1e:	c3                   	ret    
c001de1f:	90                   	nop

c001de20 <Process::createThread(void (*)(void*), void*, int)>:
c001de20:	55                   	push   ebp
c001de21:	31 c9                	xor    ecx,ecx
c001de23:	57                   	push   edi
c001de24:	56                   	push   esi
c001de25:	53                   	push   ebx
c001de26:	83 ec 1c             	sub    esp,0x1c
c001de29:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001de2d:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001de34:	89 f2                	mov    edx,esi
c001de36:	0f b7 c2             	movzx  eax,dx
c001de39:	83 e2 01             	and    edx,0x1
c001de3c:	74 16                	je     c001de54 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001de3e:	d1 f8                	sar    eax,1
c001de40:	41                   	inc    ecx
c001de41:	89 c2                	mov    edx,eax
c001de43:	83 f9 10             	cmp    ecx,0x10
c001de46:	75 ee                	jne    c001de36 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001de48:	83 c4 1c             	add    esp,0x1c
c001de4b:	31 db                	xor    ebx,ebx
c001de4d:	89 d8                	mov    eax,ebx
c001de4f:	5b                   	pop    ebx
c001de50:	5e                   	pop    esi
c001de51:	5f                   	pop    edi
c001de52:	5d                   	pop    ebp
c001de53:	c3                   	ret    
c001de54:	b8 01 00 00 00       	mov    eax,0x1
c001de59:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001de5c:	d3 e0                	shl    eax,cl
c001de5e:	09 c6                	or     esi,eax
c001de60:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001de63:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001de6a:	89 c6                	mov    esi,eax
c001de6c:	c1 e6 05             	shl    esi,0x5
c001de6f:	01 f0                	add    eax,esi
c001de71:	01 d8                	add    eax,ebx
c001de73:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001de7a:	75 0a                	jne    c001de86 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001de7c:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001de86:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001de8c:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001de90:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001de93:	01 ca                	add    edx,ecx
c001de95:	83 ec 08             	sub    esp,0x8
c001de98:	89 d0                	mov    eax,edx
c001de9a:	c1 e0 05             	shl    eax,0x5
c001de9d:	01 d0                	add    eax,edx
c001de9f:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001dea3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dea7:	01 d8                	add    eax,ebx
c001dea9:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001deaf:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001deb5:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001debb:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dec1:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dec7:	89 cd                	mov    ebp,ecx
c001dec9:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001decd:	f7 dd                	neg    ebp
c001decf:	c1 e5 15             	shl    ebp,0x15
c001ded2:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001ded8:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001dede:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dee8:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001deee:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001def8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001df02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001df06:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001df0d:	53                   	push   ebx
c001df0e:	68 84 23 03 c0       	push   0xc0032384
c001df13:	e8 e4 b3 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df18:	89 d8                	mov    eax,ebx
c001df1a:	83 c4 10             	add    esp,0x10
c001df1d:	83 c4 1c             	add    esp,0x1c
c001df20:	5b                   	pop    ebx
c001df21:	5e                   	pop    esi
c001df22:	5f                   	pop    edi
c001df23:	5d                   	pop    ebp
c001df24:	c3                   	ret    
c001df25:	90                   	nop

c001df26 <Process::createUserThread()>:
c001df26:	83 ec 0c             	sub    esp,0xc
c001df29:	68 80 00 00 00       	push   0x80
c001df2e:	6a 00                	push   0x0
c001df30:	68 ea d8 01 c0       	push   0xc001d8ea
c001df35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001df39:	e8 e2 fe ff ff       	call   c001de20 <Process::createThread(void (*)(void*), void*, int)>
c001df3e:	83 c4 1c             	add    esp,0x1c
c001df41:	c3                   	ret    

c001df42 <setupMultitasking(void (*)())>:
c001df42:	56                   	push   esi
c001df43:	53                   	push   ebx
c001df44:	51                   	push   ecx
c001df45:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001df49:	eb 10                	jmp    c001df5b <setupMultitasking(void (*)())+0x19>
c001df4b:	83 ec 0c             	sub    esp,0xc
c001df4e:	68 84 23 03 c0       	push   0xc0032384
c001df53:	e8 f6 b2 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001df58:	83 c4 10             	add    esp,0x10
c001df5b:	83 ec 0c             	sub    esp,0xc
c001df5e:	68 84 23 03 c0       	push   0xc0032384
c001df63:	e8 c2 b2 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001df68:	83 c4 10             	add    esp,0x10
c001df6b:	84 c0                	test   al,al
c001df6d:	74 dc                	je     c001df4b <setupMultitasking(void (*)())+0x9>
c001df6f:	83 ec 0c             	sub    esp,0xc
c001df72:	68 3f 07 00 00       	push   0x73f
c001df77:	e8 10 19 ff ff       	call   c000f88c <malloc>
c001df7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001df83:	89 c3                	mov    ebx,eax
c001df85:	6a 00                	push   0x0
c001df87:	68 0f cb 02 c0       	push   0xc002cb0f
c001df8c:	6a 01                	push   0x1
c001df8e:	50                   	push   eax
c001df8f:	e8 94 fc ff ff       	call   c001dc28 <Process::Process(bool, char const*, Process*, char**)>
c001df94:	83 c4 18             	add    esp,0x18
c001df97:	89 1d 90 23 03 c0    	mov    DWORD PTR ds:0xc0032390,ebx
c001df9d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dfa3:	68 60 cc 02 c0       	push   0xc002cc60
c001dfa8:	e8 ce 48 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001dfad:	58                   	pop    eax
c001dfae:	5a                   	pop    edx
c001dfaf:	6a 63                	push   0x63
c001dfb1:	68 94 cc 02 c0       	push   0xc002cc94
c001dfb6:	e8 c0 48 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001dfbb:	59                   	pop    ecx
c001dfbc:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dfc2:	e8 d7 26 ff ff       	call   c001069e <setActiveTerminal(VgaText*)>
c001dfc7:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dfcf:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001dfd9:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dfdf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001dfe2:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dfec:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dff2:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dff8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e002:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e00c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e016:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e01c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e026:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e02c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e036:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e03c:	58                   	pop    eax
c001e03d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e043:	5a                   	pop    edx
c001e044:	68 0b cb 02 c0       	push   0xc002cb0b
c001e049:	50                   	push   eax
c001e04a:	e8 bd 27 fe ff       	call   c000080c <strcpy>
c001e04f:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e056:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e05a:	83 c4 14             	add    esp,0x14
c001e05d:	5b                   	pop    ebx
c001e05e:	5e                   	pop    esi
c001e05f:	e9 f0 22 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e064 <schedule()>:
c001e064:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e069:	85 c0                	test   eax,eax
c001e06b:	74 0b                	je     c001e078 <schedule()+0x14>
c001e06d:	c7 05 60 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x1
c001e077:	c3                   	ret    
c001e078:	53                   	push   ebx
c001e079:	83 ec 14             	sub    esp,0x14
c001e07c:	68 84 23 03 c0       	push   0xc0032384
c001e081:	e8 a4 b1 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e086:	83 c4 10             	add    esp,0x10
c001e089:	84 c0                	test   al,al
c001e08b:	75 38                	jne    c001e0c5 <schedule()+0x61>
c001e08d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e092:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e095:	4a                   	dec    edx
c001e096:	74 32                	je     c001e0ca <schedule()+0x66>
c001e098:	83 ec 0c             	sub    esp,0xc
c001e09b:	68 84 23 03 c0       	push   0xc0032384
c001e0a0:	e8 a1 b1 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e0a5:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e0ac:	89 c3                	mov    ebx,eax
c001e0ae:	e8 9b b1 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0b3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e0ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e0bd:	e8 7e f8 ff ff       	call   c001d940 <switchToThread(ThreadControlBlock*)>
c001e0c2:	83 c4 10             	add    esp,0x10
c001e0c5:	83 c4 08             	add    esp,0x8
c001e0c8:	5b                   	pop    ebx
c001e0c9:	c3                   	ret    
c001e0ca:	83 ec 08             	sub    esp,0x8
c001e0cd:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e0d4:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e0da:	68 84 23 03 c0       	push   0xc0032384
c001e0df:	e8 18 b2 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0e4:	83 c4 10             	add    esp,0x10
c001e0e7:	eb af                	jmp    c001e098 <schedule()+0x34>
c001e0e9:	90                   	nop

c001e0ea <Semaphore::tryAcquire()>:
c001e0ea:	53                   	push   ebx
c001e0eb:	83 ec 08             	sub    esp,0x8
c001e0ee:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e0f2:	fa                   	cli    
c001e0f3:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e0f8:	8d 50 01             	lea    edx,[eax+0x1]
c001e0fb:	89 15 68 23 03 c0    	mov    DWORD PTR ds:0xc0032368,edx
c001e101:	8b 15 64 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032364
c001e107:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e10a:	89 1d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ebx
c001e110:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e113:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e115:	7c 2a                	jl     c001e141 <Semaphore::tryAcquire()+0x57>
c001e117:	89 15 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,edx
c001e11d:	85 d2                	test   edx,edx
c001e11f:	75 0a                	jne    c001e12b <Semaphore::tryAcquire()+0x41>
c001e121:	8b 15 60 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032360
c001e127:	85 d2                	test   edx,edx
c001e129:	75 5b                	jne    c001e186 <Semaphore::tryAcquire()+0x9c>
c001e12b:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e130:	85 c0                	test   eax,eax
c001e132:	74 07                	je     c001e13b <Semaphore::tryAcquire()+0x51>
c001e134:	31 c0                	xor    eax,eax
c001e136:	83 c4 08             	add    esp,0x8
c001e139:	5b                   	pop    ebx
c001e13a:	c3                   	ret    
c001e13b:	fb                   	sti    
c001e13c:	83 c4 08             	add    esp,0x8
c001e13f:	5b                   	pop    ebx
c001e140:	c3                   	ret    
c001e141:	43                   	inc    ebx
c001e142:	89 15 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,edx
c001e148:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e14b:	85 d2                	test   edx,edx
c001e14d:	75 1f                	jne    c001e16e <Semaphore::tryAcquire()+0x84>
c001e14f:	8b 0d 60 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032360
c001e155:	85 c9                	test   ecx,ecx
c001e157:	74 15                	je     c001e16e <Semaphore::tryAcquire()+0x84>
c001e159:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e163:	e8 fc fe ff ff       	call   c001e064 <schedule()>
c001e168:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e16d:	48                   	dec    eax
c001e16e:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e173:	85 c0                	test   eax,eax
c001e175:	75 08                	jne    c001e17f <Semaphore::tryAcquire()+0x95>
c001e177:	fb                   	sti    
c001e178:	b0 01                	mov    al,0x1
c001e17a:	83 c4 08             	add    esp,0x8
c001e17d:	5b                   	pop    ebx
c001e17e:	c3                   	ret    
c001e17f:	b0 01                	mov    al,0x1
c001e181:	83 c4 08             	add    esp,0x8
c001e184:	5b                   	pop    ebx
c001e185:	c3                   	ret    
c001e186:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e190:	e8 cf fe ff ff       	call   c001e064 <schedule()>
c001e195:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e19a:	48                   	dec    eax
c001e19b:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e1a0:	85 c0                	test   eax,eax
c001e1a2:	75 90                	jne    c001e134 <Semaphore::tryAcquire()+0x4a>
c001e1a4:	eb 95                	jmp    c001e13b <Semaphore::tryAcquire()+0x51>

c001e1a6 <Semaphore::assertLocked(char const*)>:
c001e1a6:	83 ec 0c             	sub    esp,0xc
c001e1a9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e1ad:	fa                   	cli    
c001e1ae:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e1b4:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e1b9:	8d 48 01             	lea    ecx,[eax+0x1]
c001e1bc:	89 0d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ecx
c001e1c2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e1c4:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e1c7:	7c 24                	jl     c001e1ed <Semaphore::assertLocked(char const*)+0x47>
c001e1c9:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001e1ce:	85 c0                	test   eax,eax
c001e1d0:	75 09                	jne    c001e1db <Semaphore::assertLocked(char const*)+0x35>
c001e1d2:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001e1d7:	85 c0                	test   eax,eax
c001e1d9:	75 29                	jne    c001e204 <Semaphore::assertLocked(char const*)+0x5e>
c001e1db:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e1e0:	48                   	dec    eax
c001e1e1:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e1e6:	75 01                	jne    c001e1e9 <Semaphore::assertLocked(char const*)+0x43>
c001e1e8:	fb                   	sti    
c001e1e9:	83 c4 0c             	add    esp,0xc
c001e1ec:	c3                   	ret    
c001e1ed:	83 ec 0c             	sub    esp,0xc
c001e1f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e1f4:	e8 b8 c0 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001e1f9:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e1fe:	83 c4 10             	add    esp,0x10
c001e201:	48                   	dec    eax
c001e202:	eb c5                	jmp    c001e1c9 <Semaphore::assertLocked(char const*)+0x23>
c001e204:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e20e:	e8 51 fe ff ff       	call   c001e064 <schedule()>
c001e213:	eb c6                	jmp    c001e1db <Semaphore::assertLocked(char const*)+0x35>

c001e215 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e215:	83 ec 14             	sub    esp,0x14
c001e218:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c001e21e:	68 b8 cc 02 c0       	push   0xc002ccb8
c001e223:	e8 53 46 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e228:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e22d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e231:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e234:	e8 2b fe ff ff       	call   c001e064 <schedule()>
c001e239:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e23e:	83 c4 10             	add    esp,0x10
c001e241:	48                   	dec    eax
c001e242:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e247:	85 c0                	test   eax,eax
c001e249:	75 06                	jne    c001e251 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e24b:	fb                   	sti    
c001e24c:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e251:	83 ec 08             	sub    esp,0x8
c001e254:	50                   	push   eax
c001e255:	68 ec cc 02 c0       	push   0xc002ccec
c001e25a:	e8 1c 46 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e25f:	83 c4 1c             	add    esp,0x1c
c001e262:	c3                   	ret    

c001e263 <blockTask(TaskState)>:
c001e263:	83 ec 0c             	sub    esp,0xc
c001e266:	fa                   	cli    
c001e267:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e26d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e276:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e279:	e8 e6 fd ff ff       	call   c001e064 <schedule()>
c001e27e:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e283:	48                   	dec    eax
c001e284:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e289:	75 01                	jne    c001e28c <blockTask(TaskState)+0x29>
c001e28b:	fb                   	sti    
c001e28c:	83 c4 0c             	add    esp,0xc
c001e28f:	c3                   	ret    

c001e290 <waitTask(int, int*, int)>:
c001e290:	83 ec 18             	sub    esp,0x18
c001e293:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e298:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e29c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e29f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e2a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2a8:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e2ab:	6a 07                	push   0x7
c001e2ad:	e8 b1 ff ff ff       	call   c001e263 <blockTask(TaskState)>
c001e2b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2b7:	83 c4 10             	add    esp,0x10
c001e2ba:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e2bd:	85 d2                	test   edx,edx
c001e2bf:	74 0a                	je     c001e2cb <waitTask(int, int*, int)+0x3b>
c001e2c1:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e2c4:	89 02                	mov    DWORD PTR [edx],eax
c001e2c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e2cb:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e2ce:	83 c4 0c             	add    esp,0xc
c001e2d1:	c3                   	ret    

c001e2d2 <nanoSleepUntil(unsigned long long)>:
c001e2d2:	83 ec 0c             	sub    esp,0xc
c001e2d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2dd:	3b 05 b0 f4 02 c0    	cmp    eax,DWORD PTR ds:0xc002f4b0
c001e2e3:	89 d1                	mov    ecx,edx
c001e2e5:	1b 0d b4 f4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f4b4
c001e2eb:	73 04                	jae    c001e2f1 <nanoSleepUntil(unsigned long long)+0x1f>
c001e2ed:	83 c4 0c             	add    esp,0xc
c001e2f0:	c3                   	ret    
c001e2f1:	fa                   	cli    
c001e2f2:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e2f8:	83 ec 08             	sub    esp,0x8
c001e2fb:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c001e301:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e307:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e30a:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e30d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e313:	68 78 23 03 c0       	push   0xc0032378
c001e318:	e8 df af 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e31d:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e324:	e8 3a ff ff ff       	call   c001e263 <blockTask(TaskState)>
c001e329:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e32e:	83 c4 10             	add    esp,0x10
c001e331:	48                   	dec    eax
c001e332:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001e337:	85 c0                	test   eax,eax
c001e339:	75 09                	jne    c001e344 <nanoSleepUntil(unsigned long long)+0x72>
c001e33b:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001e340:	85 c0                	test   eax,eax
c001e342:	75 12                	jne    c001e356 <nanoSleepUntil(unsigned long long)+0x84>
c001e344:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e349:	48                   	dec    eax
c001e34a:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e34f:	75 9c                	jne    c001e2ed <nanoSleepUntil(unsigned long long)+0x1b>
c001e351:	fb                   	sti    
c001e352:	83 c4 0c             	add    esp,0xc
c001e355:	c3                   	ret    
c001e356:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e360:	e8 ff fc ff ff       	call   c001e064 <schedule()>
c001e365:	eb dd                	jmp    c001e344 <nanoSleepUntil(unsigned long long)+0x72>

c001e367 <nanoSleep(unsigned long long)>:
c001e367:	a1 b0 f4 02 c0       	mov    eax,ds:0xc002f4b0
c001e36c:	8b 15 b4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4b4
c001e372:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e376:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e37a:	e9 53 ff ff ff       	jmp    c001e2d2 <nanoSleepUntil(unsigned long long)>

c001e37f <sleep(unsigned long long)>:
c001e37f:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e387:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e38c:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e390:	01 ca                	add    edx,ecx
c001e392:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e396:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e39a:	eb cb                	jmp    c001e367 <nanoSleep(unsigned long long)>

c001e39c <Semaphore::acquire()>:
c001e39c:	83 ec 0c             	sub    esp,0xc
c001e39f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e3a3:	fa                   	cli    
c001e3a4:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e3a9:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e3af:	8d 48 01             	lea    ecx,[eax+0x1]
c001e3b2:	89 0d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ecx
c001e3b8:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e3bb:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e3bd:	7d 28                	jge    c001e3e7 <Semaphore::acquire()+0x4b>
c001e3bf:	41                   	inc    ecx
c001e3c0:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e3c3:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001e3c8:	85 c0                	test   eax,eax
c001e3ca:	75 09                	jne    c001e3d5 <Semaphore::acquire()+0x39>
c001e3cc:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001e3d1:	85 c0                	test   eax,eax
c001e3d3:	75 4e                	jne    c001e423 <Semaphore::acquire()+0x87>
c001e3d5:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e3da:	48                   	dec    eax
c001e3db:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e3e0:	75 01                	jne    c001e3e3 <Semaphore::acquire()+0x47>
c001e3e2:	fb                   	sti    
c001e3e3:	83 c4 0c             	add    esp,0xc
c001e3e6:	c3                   	ret    
c001e3e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e3ec:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e3f3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e3f6:	85 c9                	test   ecx,ecx
c001e3f8:	74 3a                	je     c001e434 <Semaphore::acquire()+0x98>
c001e3fa:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e3fd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e403:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e406:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e40b:	83 ec 0c             	sub    esp,0xc
c001e40e:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e411:	6a 05                	push   0x5
c001e413:	e8 4b fe ff ff       	call   c001e263 <blockTask(TaskState)>
c001e418:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e41d:	83 c4 10             	add    esp,0x10
c001e420:	48                   	dec    eax
c001e421:	eb a0                	jmp    c001e3c3 <Semaphore::acquire()+0x27>
c001e423:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e42d:	e8 32 fc ff ff       	call   c001e064 <schedule()>
c001e432:	eb a1                	jmp    c001e3d5 <Semaphore::acquire()+0x39>
c001e434:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e439:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e43c:	eb c8                	jmp    c001e406 <Semaphore::acquire()+0x6a>

c001e43e <taskReturned>:
c001e43e:	83 ec 18             	sub    esp,0x18
c001e441:	68 20 cd 02 c0       	push   0xc002cd20
c001e446:	e8 66 be ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001e44b:	83 c4 10             	add    esp,0x10
c001e44e:	83 ec 0c             	sub    esp,0xc
c001e451:	6a 02                	push   0x2
c001e453:	e8 0b fe ff ff       	call   c001e263 <blockTask(TaskState)>
c001e458:	fa                   	cli    
c001e459:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e45f:	e8 00 fc ff ff       	call   c001e064 <schedule()>
c001e464:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e469:	83 c4 10             	add    esp,0x10
c001e46c:	48                   	dec    eax
c001e46d:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e472:	85 c0                	test   eax,eax
c001e474:	75 d8                	jne    c001e44e <taskReturned+0x10>
c001e476:	fb                   	sti    
c001e477:	eb d5                	jmp    c001e44e <taskReturned+0x10>

c001e479 <Thr::processFromPID(int)>:
c001e479:	57                   	push   edi
c001e47a:	56                   	push   esi
c001e47b:	53                   	push   ebx
c001e47c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e480:	83 ec 0c             	sub    esp,0xc
c001e483:	68 16 cb 02 c0       	push   0xc002cb16
c001e488:	e8 ee 43 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e48d:	fa                   	cli    
c001e48e:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e494:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e49b:	e8 a6 ad 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4a0:	83 c4 10             	add    esp,0x10
c001e4a3:	89 c7                	mov    edi,eax
c001e4a5:	eb 14                	jmp    c001e4bb <Thr::processFromPID(int)+0x42>
c001e4a7:	83 ec 0c             	sub    esp,0xc
c001e4aa:	68 84 23 03 c0       	push   0xc0032384
c001e4af:	e8 92 ad 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4b4:	83 c4 10             	add    esp,0x10
c001e4b7:	39 f8                	cmp    eax,edi
c001e4b9:	74 49                	je     c001e504 <Thr::processFromPID(int)+0x8b>
c001e4bb:	83 ec 0c             	sub    esp,0xc
c001e4be:	68 84 23 03 c0       	push   0xc0032384
c001e4c3:	e8 7e ad 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4c8:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e4cf:	89 c3                	mov    ebx,eax
c001e4d1:	e8 78 ad 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e4d6:	58                   	pop    eax
c001e4d7:	5a                   	pop    edx
c001e4d8:	53                   	push   ebx
c001e4d9:	68 84 23 03 c0       	push   0xc0032384
c001e4de:	e8 19 ae 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4e3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4e6:	83 c4 10             	add    esp,0x10
c001e4e9:	39 30                	cmp    DWORD PTR [eax],esi
c001e4eb:	75 ba                	jne    c001e4a7 <Thr::processFromPID(int)+0x2e>
c001e4ed:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e4f2:	48                   	dec    eax
c001e4f3:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e4f8:	74 07                	je     c001e501 <Thr::processFromPID(int)+0x88>
c001e4fa:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e4fd:	5b                   	pop    ebx
c001e4fe:	5e                   	pop    esi
c001e4ff:	5f                   	pop    edi
c001e500:	c3                   	ret    
c001e501:	fb                   	sti    
c001e502:	eb f6                	jmp    c001e4fa <Thr::processFromPID(int)+0x81>
c001e504:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e509:	48                   	dec    eax
c001e50a:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e50f:	75 01                	jne    c001e512 <Thr::processFromPID(int)+0x99>
c001e511:	fb                   	sti    
c001e512:	83 ec 0c             	sub    esp,0xc
c001e515:	68 31 cb 02 c0       	push   0xc002cb31
c001e51a:	e8 5c 43 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e51f:	83 c4 10             	add    esp,0x10
c001e522:	31 c0                	xor    eax,eax
c001e524:	5b                   	pop    ebx
c001e525:	5e                   	pop    esi
c001e526:	5f                   	pop    edi
c001e527:	c3                   	ret    

c001e528 <unblockTask(ThreadControlBlock*)>:
c001e528:	53                   	push   ebx
c001e529:	83 ec 08             	sub    esp,0x8
c001e52c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e530:	fa                   	cli    
c001e531:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e537:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e53a:	85 c0                	test   eax,eax
c001e53c:	74 66                	je     c001e5a4 <unblockTask(ThreadControlBlock*)+0x7c>
c001e53e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e541:	48                   	dec    eax
c001e542:	74 31                	je     c001e575 <unblockTask(ThreadControlBlock*)+0x4d>
c001e544:	83 ec 0c             	sub    esp,0xc
c001e547:	68 84 23 03 c0       	push   0xc0032384
c001e54c:	e8 f5 ac 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e551:	83 c4 10             	add    esp,0x10
c001e554:	85 c0                	test   eax,eax
c001e556:	75 17                	jne    c001e56f <unblockTask(ThreadControlBlock*)+0x47>
c001e558:	eb 68                	jmp    c001e5c2 <unblockTask(ThreadControlBlock*)+0x9a>
c001e55a:	83 ec 08             	sub    esp,0x8
c001e55d:	50                   	push   eax
c001e55e:	68 84 23 03 c0       	push   0xc0032384
c001e563:	e8 7c b0 00 00       	call   c00295e4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e568:	83 c4 10             	add    esp,0x10
c001e56b:	85 c0                	test   eax,eax
c001e56d:	74 53                	je     c001e5c2 <unblockTask(ThreadControlBlock*)+0x9a>
c001e56f:	39 c3                	cmp    ebx,eax
c001e571:	75 e7                	jne    c001e55a <unblockTask(ThreadControlBlock*)+0x32>
c001e573:	eb 1c                	jmp    c001e591 <unblockTask(ThreadControlBlock*)+0x69>
c001e575:	83 ec 0c             	sub    esp,0xc
c001e578:	68 10 ce 02 c0       	push   0xc002ce10
c001e57d:	e8 f9 42 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e582:	c7 04 24 9c cd 02 c0 	mov    DWORD PTR [esp],0xc002cd9c
c001e589:	e8 ed 42 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e58e:	83 c4 10             	add    esp,0x10
c001e591:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e596:	48                   	dec    eax
c001e597:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e59c:	75 01                	jne    c001e59f <unblockTask(ThreadControlBlock*)+0x77>
c001e59e:	fb                   	sti    
c001e59f:	83 c4 08             	add    esp,0x8
c001e5a2:	5b                   	pop    ebx
c001e5a3:	c3                   	ret    
c001e5a4:	83 ec 0c             	sub    esp,0xc
c001e5a7:	68 54 cd 02 c0       	push   0xc002cd54
c001e5ac:	e8 ca 42 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e5b1:	c7 04 24 9c cd 02 c0 	mov    DWORD PTR [esp],0xc002cd9c
c001e5b8:	e8 be 42 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e5bd:	83 c4 10             	add    esp,0x10
c001e5c0:	eb cf                	jmp    c001e591 <unblockTask(ThreadControlBlock*)+0x69>
c001e5c2:	83 ec 08             	sub    esp,0x8
c001e5c5:	53                   	push   ebx
c001e5c6:	68 84 23 03 c0       	push   0xc0032384
c001e5cb:	e8 2c ad 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e5d0:	83 c4 10             	add    esp,0x10
c001e5d3:	eb bc                	jmp    c001e591 <unblockTask(ThreadControlBlock*)+0x69>

c001e5d5 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e5d5:	55                   	push   ebp
c001e5d6:	57                   	push   edi
c001e5d7:	56                   	push   esi
c001e5d8:	53                   	push   ebx
c001e5d9:	83 ec 1c             	sub    esp,0x1c
c001e5dc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e5e0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e5e3:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e5e9:	85 ff                	test   edi,edi
c001e5eb:	7e 20                	jle    c001e60d <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e5ed:	31 f6                	xor    esi,esi
c001e5ef:	83 ec 0c             	sub    esp,0xc
c001e5f2:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e5f9:	46                   	inc    esi
c001e5fa:	e8 9d 12 ff ff       	call   c000f89c <free>
c001e5ff:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e602:	83 c4 10             	add    esp,0x10
c001e605:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e60b:	7f e2                	jg     c001e5ef <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e60d:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e617:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e61c:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e61f:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e622:	d3 c0                	rol    eax,cl
c001e624:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e62b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e62e:	89 f7                	mov    edi,esi
c001e630:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e638:	0f 85 74 01 00 00    	jne    c001e7b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e63e:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e644:	85 ed                	test   ebp,ebp
c001e646:	74 1b                	je     c001e663 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e648:	83 ec 0c             	sub    esp,0xc
c001e64b:	55                   	push   ebp
c001e64c:	e8 d5 b9 ff ff       	call   c001a026 <EnvVarContainer::~EnvVarContainer()>
c001e651:	59                   	pop    ecx
c001e652:	5e                   	pop    esi
c001e653:	6a 0c                	push   0xc
c001e655:	55                   	push   ebp
c001e656:	e8 40 41 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c001e65b:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e65e:	83 c4 10             	add    esp,0x10
c001e661:	89 f7                	mov    edi,esi
c001e663:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e669:	85 c0                	test   eax,eax
c001e66b:	0f 84 aa 00 00 00    	je     c001e71b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e671:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e674:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e678:	31 c9                	xor    ecx,ecx
c001e67a:	eb 10                	jmp    c001e68c <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e67c:	41                   	inc    ecx
c001e67d:	83 f9 10             	cmp    ecx,0x10
c001e680:	0f 84 95 00 00 00    	je     c001e71b <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e686:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e68c:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e693:	d3 fa                	sar    edx,cl
c001e695:	83 e2 01             	and    edx,0x1
c001e698:	74 e2                	je     c001e67c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e69a:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e69d:	01 ca                	add    edx,ecx
c001e69f:	89 d5                	mov    ebp,edx
c001e6a1:	c1 e5 05             	shl    ebp,0x5
c001e6a4:	01 ea                	add    edx,ebp
c001e6a6:	01 d0                	add    eax,edx
c001e6a8:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e6ae:	83 fd 07             	cmp    ebp,0x7
c001e6b1:	75 c9                	jne    c001e67c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6b3:	05 40 02 00 00       	add    eax,0x240
c001e6b8:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e6bb:	83 fd ff             	cmp    ebp,0xffffffff
c001e6be:	0f 8c 08 01 00 00    	jl     c001e7cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e6c4:	0f 84 b9 01 00 00    	je     c001e883 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e6ca:	85 ed                	test   ebp,ebp
c001e6cc:	0f 84 a0 01 00 00    	je     c001e872 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e6d2:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e6d4:	75 a6                	jne    c001e67c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e6d6:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e6dc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e6e0:	01 d0                	add    eax,edx
c001e6e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e6e6:	83 ec 0c             	sub    esp,0xc
c001e6e9:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e6ef:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6f2:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e6f8:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e6ff:	50                   	push   eax
c001e700:	e8 23 fe ff ff       	call   c001e528 <unblockTask(ThreadControlBlock*)>
c001e705:	83 c4 10             	add    esp,0x10
c001e708:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e70b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e70f:	89 f7                	mov    edi,esi
c001e711:	41                   	inc    ecx
c001e712:	83 f9 10             	cmp    ecx,0x10
c001e715:	0f 85 6b ff ff ff    	jne    c001e686 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e71b:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e721:	85 c0                	test   eax,eax
c001e723:	74 5d                	je     c001e782 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e725:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e72b:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e731:	74 4f                	je     c001e782 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e733:	83 ec 0c             	sub    esp,0xc
c001e736:	68 84 23 03 c0       	push   0xc0032384
c001e73b:	e8 06 ab 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e740:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e747:	89 c7                	mov    edi,eax
c001e749:	e8 dc aa 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e74e:	83 c4 10             	add    esp,0x10
c001e751:	84 c0                	test   al,al
c001e753:	0f 84 e4 00 00 00    	je     c001e83d <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e759:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e75c:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e762:	85 d2                	test   edx,edx
c001e764:	74 0f                	je     c001e775 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e766:	83 ec 0c             	sub    esp,0xc
c001e769:	8b 02                	mov    eax,DWORD PTR [edx]
c001e76b:	52                   	push   edx
c001e76c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e76f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e772:	83 c4 10             	add    esp,0x10
c001e775:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e77f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e782:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e788:	85 db                	test   ebx,ebx
c001e78a:	74 16                	je     c001e7a2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e78c:	83 ec 0c             	sub    esp,0xc
c001e78f:	53                   	push   ebx
c001e790:	e8 9b 33 ff ff       	call   c0011b30 <VAS::~VAS()>
c001e795:	58                   	pop    eax
c001e796:	5a                   	pop    edx
c001e797:	6a 14                	push   0x14
c001e799:	53                   	push   ebx
c001e79a:	e8 fc 3f ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c001e79f:	83 c4 10             	add    esp,0x10
c001e7a2:	83 ec 0c             	sub    esp,0xc
c001e7a5:	68 48 cb 02 c0       	push   0xc002cb48
c001e7aa:	e8 cc 40 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e7af:	83 c4 10             	add    esp,0x10
c001e7b2:	83 ec 08             	sub    esp,0x8
c001e7b5:	68 3f 07 00 00       	push   0x73f
c001e7ba:	68 56 cb 02 c0       	push   0xc002cb56
c001e7bf:	e8 b7 40 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e7c4:	83 c4 2c             	add    esp,0x2c
c001e7c7:	5b                   	pop    ebx
c001e7c8:	5e                   	pop    esi
c001e7c9:	5f                   	pop    edi
c001e7ca:	5d                   	pop    ebp
c001e7cb:	c3                   	ret    
c001e7cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7d0:	83 ec 0c             	sub    esp,0xc
c001e7d3:	68 54 ce 02 c0       	push   0xc002ce54
c001e7d8:	e8 d4 ba ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001e7dd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e7e0:	83 c4 10             	add    esp,0x10
c001e7e3:	89 f7                	mov    edi,esi
c001e7e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e7e9:	e9 8e fe ff ff       	jmp    c001e67c <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e7ee:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e7f4:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e7fa:	75 1c                	jne    c001e818 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7fc:	83 ec 0c             	sub    esp,0xc
c001e7ff:	68 bc ce 02 c0       	push   0xc002cebc
c001e804:	e8 72 40 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e809:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e810:	e8 4e fa ff ff       	call   c001e263 <blockTask(TaskState)>
c001e815:	83 c4 10             	add    esp,0x10
c001e818:	83 ec 08             	sub    esp,0x8
c001e81b:	56                   	push   esi
c001e81c:	68 84 23 03 c0       	push   0xc0032384
c001e821:	e8 d6 aa 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e826:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e82d:	e8 14 aa 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e832:	83 c4 10             	add    esp,0x10
c001e835:	39 f8                	cmp    eax,edi
c001e837:	0f 84 1c ff ff ff    	je     c001e759 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e83d:	83 ec 0c             	sub    esp,0xc
c001e840:	68 84 23 03 c0       	push   0xc0032384
c001e845:	e8 fc a9 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e84a:	c7 04 24 84 23 03 c0 	mov    DWORD PTR [esp],0xc0032384
c001e851:	89 c6                	mov    esi,eax
c001e853:	e8 f6 a9 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e858:	83 c4 10             	add    esp,0x10
c001e85b:	39 f3                	cmp    ebx,esi
c001e85d:	74 b9                	je     c001e818 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e85f:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e862:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e865:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e86b:	75 ab                	jne    c001e818 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e86d:	e9 7c ff ff ff       	jmp    c001e7ee <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e872:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e876:	83 ec 0c             	sub    esp,0xc
c001e879:	68 88 ce 02 c0       	push   0xc002ce88
c001e87e:	e9 55 ff ff ff       	jmp    c001e7d8 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e883:	8b 36                	mov    esi,DWORD PTR [esi]
c001e885:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e889:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e88c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e88f:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e895:	01 d7                	add    edi,edx
c001e897:	89 f8                	mov    eax,edi
c001e899:	e9 44 fe ff ff       	jmp    c001e6e2 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e89e <cleanerTaskFunction(void*)>:
c001e89e:	53                   	push   ebx
c001e89f:	83 ec 08             	sub    esp,0x8
c001e8a2:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e8a7:	48                   	dec    eax
c001e8a8:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e8ad:	75 01                	jne    c001e8b0 <cleanerTaskFunction(void*)+0x12>
c001e8af:	fb                   	sti    
c001e8b0:	fa                   	cli    
c001e8b1:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e8b6:	80 3d 4c 23 03 c0 00 	cmp    BYTE PTR ds:0xc003234c,0x0
c001e8bd:	8d 50 01             	lea    edx,[eax+0x1]
c001e8c0:	89 15 68 23 03 c0    	mov    DWORD PTR ds:0xc0032368,edx
c001e8c6:	0f 84 b9 00 00 00    	je     c001e985 <cleanerTaskFunction(void*)+0xe7>
c001e8cc:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e8d1:	85 c0                	test   eax,eax
c001e8d3:	75 01                	jne    c001e8d6 <cleanerTaskFunction(void*)+0x38>
c001e8d5:	fb                   	sti    
c001e8d6:	c6 05 4c 23 03 c0 00 	mov    BYTE PTR ds:0xc003234c,0x0
c001e8dd:	fa                   	cli    
c001e8de:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e8e4:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c001e8ea:	fa                   	cli    
c001e8eb:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e8f1:	eb 3e                	jmp    c001e931 <cleanerTaskFunction(void*)+0x93>
c001e8f3:	83 ec 0c             	sub    esp,0xc
c001e8f6:	68 6c 23 03 c0       	push   0xc003236c
c001e8fb:	e8 46 a9 00 00       	call   c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e900:	c7 04 24 6c 23 03 c0 	mov    DWORD PTR [esp],0xc003236c
c001e907:	89 c3                	mov    ebx,eax
c001e909:	e8 40 a9 00 00       	call   c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e90e:	c7 04 24 6c cb 02 c0 	mov    DWORD PTR [esp],0xc002cb6c
c001e915:	e8 61 3f ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e91a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e91d:	e8 b3 fc ff ff       	call   c001e5d5 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e922:	c7 04 24 85 cb 02 c0 	mov    DWORD PTR [esp],0xc002cb85
c001e929:	e8 4d 3f ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e92e:	83 c4 10             	add    esp,0x10
c001e931:	83 ec 0c             	sub    esp,0xc
c001e934:	68 6c 23 03 c0       	push   0xc003236c
c001e939:	e8 ec a8 00 00       	call   c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e93e:	83 c4 10             	add    esp,0x10
c001e941:	84 c0                	test   al,al
c001e943:	74 ae                	je     c001e8f3 <cleanerTaskFunction(void*)+0x55>
c001e945:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001e94a:	48                   	dec    eax
c001e94b:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001e950:	75 01                	jne    c001e953 <cleanerTaskFunction(void*)+0xb5>
c001e952:	fb                   	sti    
c001e953:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001e958:	48                   	dec    eax
c001e959:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001e95e:	0f 85 3e ff ff ff    	jne    c001e8a2 <cleanerTaskFunction(void*)+0x4>
c001e964:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001e969:	85 c0                	test   eax,eax
c001e96b:	0f 84 31 ff ff ff    	je     c001e8a2 <cleanerTaskFunction(void*)+0x4>
c001e971:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001e97b:	e8 e4 f6 ff ff       	call   c001e064 <schedule()>
c001e980:	e9 1d ff ff ff       	jmp    c001e8a2 <cleanerTaskFunction(void*)+0x4>
c001e985:	83 ec 0c             	sub    esp,0xc
c001e988:	6a 02                	push   0x2
c001e98a:	e8 86 f8 ff ff       	call   c001e215 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e98f:	83 c4 10             	add    esp,0x10
c001e992:	e9 3f ff ff ff       	jmp    c001e8d6 <cleanerTaskFunction(void*)+0x38>

c001e997 <terminateTask(int)>:
c001e997:	83 ec 14             	sub    esp,0x14
c001e99a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e99f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e9a2:	83 c0 0c             	add    eax,0xc
c001e9a5:	50                   	push   eax
c001e9a6:	68 e4 ce 02 c0       	push   0xc002cee4
c001e9ab:	e8 cb 3e ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e9b0:	fa                   	cli    
c001e9b1:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e9b7:	ff 05 64 23 03 c0    	inc    DWORD PTR ds:0xc0032364
c001e9bd:	fa                   	cli    
c001e9be:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001e9c4:	c7 04 24 98 cb 02 c0 	mov    DWORD PTR [esp],0xc002cb98
c001e9cb:	e8 ab 3e ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001e9d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e9d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9d9:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e9dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9e1:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e9e4:	5a                   	pop    edx
c001e9e5:	59                   	pop    ecx
c001e9e6:	50                   	push   eax
c001e9e7:	68 6c 23 03 c0       	push   0xc003236c
c001e9ec:	e8 0b a9 00 00       	call   c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e9f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e9f6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e9fd:	c7 04 24 b2 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbb2
c001ea04:	e8 72 3e ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001ea09:	83 c4 10             	add    esp,0x10
c001ea0c:	a1 48 23 03 c0       	mov    eax,ds:0xc0032348
c001ea11:	85 c0                	test   eax,eax
c001ea13:	0f 84 8d 00 00 00    	je     c001eaa6 <terminateTask(int)+0x10f>
c001ea19:	83 ec 0c             	sub    esp,0xc
c001ea1c:	68 cc cb 02 c0       	push   0xc002cbcc
c001ea21:	e8 55 3e ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001ea26:	58                   	pop    eax
c001ea27:	c6 05 4c 23 03 c0 01 	mov    BYTE PTR ds:0xc003234c,0x1
c001ea2e:	ff 35 48 23 03 c0    	push   DWORD PTR ds:0xc0032348
c001ea34:	e8 ef fa ff ff       	call   c001e528 <unblockTask(ThreadControlBlock*)>
c001ea39:	c7 04 24 e6 cb 02 c0 	mov    DWORD PTR [esp],0xc002cbe6
c001ea40:	e8 36 3e ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001ea45:	83 c4 10             	add    esp,0x10
c001ea48:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ea4d:	48                   	dec    eax
c001ea4e:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ea53:	75 01                	jne    c001ea56 <terminateTask(int)+0xbf>
c001ea55:	fb                   	sti    
c001ea56:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001ea5b:	48                   	dec    eax
c001ea5c:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001ea61:	75 09                	jne    c001ea6c <terminateTask(int)+0xd5>
c001ea63:	83 3d 60 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032360,0x0
c001ea6a:	75 4c                	jne    c001eab8 <terminateTask(int)+0x121>
c001ea6c:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ea71:	48                   	dec    eax
c001ea72:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ea77:	75 01                	jne    c001ea7a <terminateTask(int)+0xe3>
c001ea79:	fb                   	sti    
c001ea7a:	83 ec 0c             	sub    esp,0xc
c001ea7d:	68 1e cc 02 c0       	push   0xc002cc1e
c001ea82:	e8 f4 3d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001ea87:	83 c4 10             	add    esp,0x10
c001ea8a:	fa                   	cli    
c001ea8b:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ea91:	e8 ce f5 ff ff       	call   c001e064 <schedule()>
c001ea96:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ea9b:	48                   	dec    eax
c001ea9c:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001eaa1:	75 e7                	jne    c001ea8a <terminateTask(int)+0xf3>
c001eaa3:	fb                   	sti    
c001eaa4:	eb e4                	jmp    c001ea8a <terminateTask(int)+0xf3>
c001eaa6:	83 ec 0c             	sub    esp,0xc
c001eaa9:	68 00 cc 02 c0       	push   0xc002cc00
c001eaae:	e8 c8 3d ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001eab3:	83 c4 10             	add    esp,0x10
c001eab6:	eb 90                	jmp    c001ea48 <terminateTask(int)+0xb1>
c001eab8:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001eac2:	e8 9d f5 ff ff       	call   c001e064 <schedule()>
c001eac7:	eb a3                	jmp    c001ea6c <terminateTask(int)+0xd5>

c001eac9 <Thr::terminateFromIRQ(int)>:
c001eac9:	83 ec 18             	sub    esp,0x18
c001eacc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ead0:	e8 c2 fe ff ff       	call   c001e997 <terminateTask(int)>
c001ead5:	90                   	nop

c001ead6 <Semaphore::release()>:
c001ead6:	83 ec 0c             	sub    esp,0xc
c001ead9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eadd:	fa                   	cli    
c001eade:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001eae3:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001eae9:	8d 48 01             	lea    ecx,[eax+0x1]
c001eaec:	89 0d 64 23 03 c0    	mov    DWORD PTR ds:0xc0032364,ecx
c001eaf2:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001eaf5:	85 c9                	test   ecx,ecx
c001eaf7:	74 3c                	je     c001eb35 <Semaphore::release()+0x5f>
c001eaf9:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001eafc:	83 ec 0c             	sub    esp,0xc
c001eaff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001eb02:	51                   	push   ecx
c001eb03:	e8 20 fa ff ff       	call   c001e528 <unblockTask(ThreadControlBlock*)>
c001eb08:	a1 64 23 03 c0       	mov    eax,ds:0xc0032364
c001eb0d:	83 c4 10             	add    esp,0x10
c001eb10:	48                   	dec    eax
c001eb11:	a3 64 23 03 c0       	mov    ds:0xc0032364,eax
c001eb16:	85 c0                	test   eax,eax
c001eb18:	75 09                	jne    c001eb23 <Semaphore::release()+0x4d>
c001eb1a:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001eb1f:	85 c0                	test   eax,eax
c001eb21:	75 17                	jne    c001eb3a <Semaphore::release()+0x64>
c001eb23:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001eb28:	48                   	dec    eax
c001eb29:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001eb2e:	75 01                	jne    c001eb31 <Semaphore::release()+0x5b>
c001eb30:	fb                   	sti    
c001eb31:	83 c4 0c             	add    esp,0xc
c001eb34:	c3                   	ret    
c001eb35:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001eb38:	eb d7                	jmp    c001eb11 <Semaphore::release()+0x3b>
c001eb3a:	c7 05 60 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032360,0x0
c001eb44:	e8 1b f5 ff ff       	call   c001e064 <schedule()>
c001eb49:	eb d8                	jmp    c001eb23 <Semaphore::release()+0x4d>

c001eb4b <__static_initialization_and_destruction_0(int, int)>:
c001eb4b:	83 ec 0c             	sub    esp,0xc
c001eb4e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001eb53:	0f 85 88 00 00 00    	jne    c001ebe1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001eb59:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001eb61:	75 7e                	jne    c001ebe1 <__static_initialization_and_destruction_0(int, int)+0x96>
c001eb63:	83 ec 0c             	sub    esp,0xc
c001eb66:	68 84 23 03 c0       	push   0xc0032384
c001eb6b:	e8 1c aa 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eb70:	83 c4 10             	add    esp,0x10
c001eb73:	83 ec 04             	sub    esp,0x4
c001eb76:	68 5c dd 02 c0       	push   0xc002dd5c
c001eb7b:	68 84 23 03 c0       	push   0xc0032384
c001eb80:	68 40 95 02 c0       	push   0xc0029540
c001eb85:	e8 8b 3b ff ff       	call   c0012715 <__cxa_atexit>
c001eb8a:	83 c4 10             	add    esp,0x10
c001eb8d:	83 ec 0c             	sub    esp,0xc
c001eb90:	68 78 23 03 c0       	push   0xc0032378
c001eb95:	e8 f2 a9 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eb9a:	83 c4 10             	add    esp,0x10
c001eb9d:	83 ec 04             	sub    esp,0x4
c001eba0:	68 5c dd 02 c0       	push   0xc002dd5c
c001eba5:	68 78 23 03 c0       	push   0xc0032378
c001ebaa:	68 40 95 02 c0       	push   0xc0029540
c001ebaf:	e8 61 3b ff ff       	call   c0012715 <__cxa_atexit>
c001ebb4:	83 c4 10             	add    esp,0x10
c001ebb7:	83 ec 0c             	sub    esp,0xc
c001ebba:	68 6c 23 03 c0       	push   0xc003236c
c001ebbf:	e8 c8 a9 00 00       	call   c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ebc4:	83 c4 10             	add    esp,0x10
c001ebc7:	83 ec 04             	sub    esp,0x4
c001ebca:	68 5c dd 02 c0       	push   0xc002dd5c
c001ebcf:	68 6c 23 03 c0       	push   0xc003236c
c001ebd4:	68 40 95 02 c0       	push   0xc0029540
c001ebd9:	e8 37 3b ff ff       	call   c0012715 <__cxa_atexit>
c001ebde:	83 c4 10             	add    esp,0x10
c001ebe1:	90                   	nop
c001ebe2:	83 c4 0c             	add    esp,0xc
c001ebe5:	c3                   	ret    

c001ebe6 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ebe6:	83 ec 0c             	sub    esp,0xc
c001ebe9:	83 ec 08             	sub    esp,0x8
c001ebec:	68 ff ff 00 00       	push   0xffff
c001ebf1:	6a 01                	push   0x1
c001ebf3:	e8 53 ff ff ff       	call   c001eb4b <__static_initialization_and_destruction_0(int, int)>
c001ebf8:	83 c4 10             	add    esp,0x10
c001ebfb:	83 c4 0c             	add    esp,0xc
c001ebfe:	c3                   	ret    

c001ebff <Vm::inbv(unsigned short)>:
c001ebff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec03:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec08:	75 06                	jne    c001ec10 <Vm::inbv(unsigned short)+0x11>
c001ec0a:	a0 cc 23 03 c0       	mov    al,ds:0xc00323cc
c001ec0f:	c3                   	ret    
c001ec10:	ec                   	in     al,dx
c001ec11:	c3                   	ret    

c001ec12 <Vm::outbv(unsigned short, unsigned char)>:
c001ec12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ec16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec1a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ec1f:	75 25                	jne    c001ec46 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001ec21:	8b 0d cc 23 03 c0    	mov    ecx,DWORD PTR ds:0xc00323cc
c001ec27:	8d 51 01             	lea    edx,[ecx+0x1]
c001ec2a:	88 81 e0 23 03 c0    	mov    BYTE PTR [ecx-0x3ffcdc20],al
c001ec30:	89 15 cc 23 03 c0    	mov    DWORD PTR ds:0xc00323cc,edx
c001ec36:	83 fa 20             	cmp    edx,0x20
c001ec39:	75 0c                	jne    c001ec47 <Vm::outbv(unsigned short, unsigned char)+0x35>
c001ec3b:	c7 05 cc 23 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00323cc,0x1f
c001ec45:	c3                   	ret    
c001ec46:	ee                   	out    dx,al
c001ec47:	c3                   	ret    

c001ec48 <Vm::realToLinear(unsigned short, unsigned short)>:
c001ec48:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ec4d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ec52:	c1 e0 04             	shl    eax,0x4
c001ec55:	01 d0                	add    eax,edx
c001ec57:	c3                   	ret    

c001ec58 <Vm::getSegment(unsigned int)>:
c001ec58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec5c:	c1 e8 10             	shr    eax,0x10
c001ec5f:	c3                   	ret    

c001ec60 <Vm::getOffset(unsigned int)>:
c001ec60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec64:	c3                   	ret    

c001ec65 <Vm::mainloop2()>:
c001ec65:	83 ec 18             	sub    esp,0x18
c001ec68:	fa                   	cli    
c001ec69:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ec6f:	6a 02                	push   0x2
c001ec71:	c6 05 c5 23 03 c0 01 	mov    BYTE PTR ds:0xc00323c5,0x1
c001ec78:	e8 98 f5 ff ff       	call   c001e215 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ec7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ec82:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001ec86:	52                   	push   edx
c001ec87:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001ec8b:	52                   	push   edx
c001ec8c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001ec90:	52                   	push   edx
c001ec91:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001ec95:	50                   	push   eax
c001ec96:	e8 5f 16 fe ff       	call   c00002fa <goToVM86>
c001ec9b:	83 c4 2c             	add    esp,0x2c
c001ec9e:	c3                   	ret    

c001ec9f <Vm::mainVm8086Loop(void*)>:
c001ec9f:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001eca4:	48                   	dec    eax
c001eca5:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ecaa:	75 01                	jne    c001ecad <Vm::mainVm8086Loop(void*)+0xe>
c001ecac:	fb                   	sti    
c001ecad:	eb b6                	jmp    c001ec65 <Vm::mainloop2()>

c001ecaf <Vm::mainloop3(unsigned long)>:
c001ecaf:	83 ec 18             	sub    esp,0x18
c001ecb2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ecb6:	fa                   	cli    
c001ecb7:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ecbd:	6a 02                	push   0x2
c001ecbf:	c6 05 c4 23 03 c0 01 	mov    BYTE PTR ds:0xc00323c4,0x1
c001ecc6:	a3 c0 23 03 c0       	mov    ds:0xc00323c0,eax
c001eccb:	e8 45 f5 ff ff       	call   c001e215 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001ecd0:	83 c4 1c             	add    esp,0x1c
c001ecd3:	eb 90                	jmp    c001ec65 <Vm::mainloop2()>

c001ecd5 <Vm::initialise8086()>:
c001ecd5:	83 ec 0c             	sub    esp,0xc
c001ecd8:	68 80 00 00 00       	push   0x80
c001ecdd:	6a 00                	push   0x0
c001ecdf:	68 9f ec 01 c0       	push   0xc001ec9f
c001ece4:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001ecea:	e8 31 f1 ff ff       	call   c001de20 <Process::createThread(void (*)(void*), void*, int)>
c001ecef:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ecf6:	a3 c8 23 03 c0       	mov    ds:0xc00323c8,eax
c001ecfb:	68 00 01 00 00       	push   0x100
c001ed00:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c001ed05:	6a 00                	push   0x0
c001ed07:	6a 00                	push   0x0
c001ed09:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ed0f:	e8 8e 32 ff ff       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ed14:	83 c4 2c             	add    esp,0x2c
c001ed17:	c3                   	ret    

c001ed18 <Vm::finish8086()>:
c001ed18:	53                   	push   ebx
c001ed19:	83 ec 08             	sub    esp,0x8
c001ed1c:	fa                   	cli    
c001ed1d:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001ed23:	80 3d c4 23 03 c0 00 	cmp    BYTE PTR ds:0xc00323c4,0x0
c001ed2a:	75 15                	jne    c001ed41 <Vm::finish8086()+0x29>
c001ed2c:	e8 33 f3 ff ff       	call   c001e064 <schedule()>
c001ed31:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ed36:	48                   	dec    eax
c001ed37:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ed3c:	75 de                	jne    c001ed1c <Vm::finish8086()+0x4>
c001ed3e:	fb                   	sti    
c001ed3f:	eb db                	jmp    c001ed1c <Vm::finish8086()+0x4>
c001ed41:	83 ec 0c             	sub    esp,0xc
c001ed44:	8b 1d c0 23 03 c0    	mov    ebx,DWORD PTR ds:0xc00323c0
c001ed4a:	ff 35 c8 23 03 c0    	push   DWORD PTR ds:0xc00323c8
c001ed50:	c6 05 c4 23 03 c0 00 	mov    BYTE PTR ds:0xc00323c4,0x0
c001ed57:	e8 cc f7 ff ff       	call   c001e528 <unblockTask(ThreadControlBlock*)>
c001ed5c:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ed61:	83 c4 10             	add    esp,0x10
c001ed64:	8d 50 ff             	lea    edx,[eax-0x1]
c001ed67:	89 15 68 23 03 c0    	mov    DWORD PTR ds:0xc0032368,edx
c001ed6d:	85 d2                	test   edx,edx
c001ed6f:	75 01                	jne    c001ed72 <Vm::finish8086()+0x5a>
c001ed71:	fb                   	sti    
c001ed72:	89 d8                	mov    eax,ebx
c001ed74:	83 c4 08             	add    esp,0x8
c001ed77:	5b                   	pop    ebx
c001ed78:	c3                   	ret    

c001ed79 <Vm::getOutput8086(unsigned char*)>:
c001ed79:	57                   	push   edi
c001ed7a:	8b 0d cc 23 03 c0    	mov    ecx,DWORD PTR ds:0xc00323cc
c001ed80:	56                   	push   esi
c001ed81:	be e0 23 03 c0       	mov    esi,0xc00323e0
c001ed86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ed8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ed8c:	a1 cc 23 03 c0       	mov    eax,ds:0xc00323cc
c001ed91:	5e                   	pop    esi
c001ed92:	c7 05 cc 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323cc,0x0
c001ed9c:	5f                   	pop    edi
c001ed9d:	c3                   	ret    

c001ed9e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ed9e:	55                   	push   ebp
c001ed9f:	57                   	push   edi
c001eda0:	56                   	push   esi
c001eda1:	53                   	push   ebx
c001eda2:	83 ec 2c             	sub    esp,0x2c
c001eda5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001eda9:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001edad:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001edb1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001edb5:	fa                   	cli    
c001edb6:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c001edbc:	0f b6 35 c5 23 03 c0 	movzx  esi,BYTE PTR ds:0xc00323c5
c001edc3:	89 f0                	mov    eax,esi
c001edc5:	84 c0                	test   al,al
c001edc7:	75 1d                	jne    c001ede6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001edc9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001edcd:	e8 92 f2 ff ff       	call   c001e064 <schedule()>
c001edd2:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001edd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001eddb:	48                   	dec    eax
c001eddc:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ede1:	75 d2                	jne    c001edb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ede3:	fb                   	sti    
c001ede4:	eb cf                	jmp    c001edb5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ede6:	a1 c8 23 03 c0       	mov    eax,ds:0xc00323c8
c001edeb:	c7 05 cc 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323cc,0x0
c001edf5:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001edf9:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001edfd:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001ee01:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001ee05:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ee09:	50                   	push   eax
c001ee0a:	6a 20                	push   0x20
c001ee0c:	6a 00                	push   0x0
c001ee0e:	68 e0 23 03 c0       	push   0xc00323e0
c001ee13:	e8 38 19 fe ff       	call   c0000750 <memset>
c001ee18:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ee1f:	e8 68 0a ff ff       	call   c000f88c <malloc>
c001ee24:	83 c4 0c             	add    esp,0xc
c001ee27:	89 c3                	mov    ebx,eax
c001ee29:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c001ee2f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ee33:	50                   	push   eax
c001ee34:	e8 a1 3f ff ff       	call   c0012dda <File::File(char const*, Process*)>
c001ee39:	83 c4 10             	add    esp,0x10
c001ee3c:	85 db                	test   ebx,ebx
c001ee3e:	75 0a                	jne    c001ee4a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001ee40:	83 ec 0c             	sub    esp,0xc
c001ee43:	68 03 cf 02 c0       	push   0xc002cf03
c001ee48:	eb 3e                	jmp    c001ee88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ee4a:	50                   	push   eax
c001ee4b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ee4f:	50                   	push   eax
c001ee50:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ee54:	50                   	push   eax
c001ee55:	53                   	push   ebx
c001ee56:	e8 8f 42 ff ff       	call   c00130ea <File::stat(unsigned long long*, bool*)>
c001ee5b:	83 c4 10             	add    esp,0x10
c001ee5e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001ee63:	74 0a                	je     c001ee6f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ee65:	83 ec 0c             	sub    esp,0xc
c001ee68:	68 17 cf 02 c0       	push   0xc002cf17
c001ee6d:	eb 19                	jmp    c001ee88 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001ee6f:	51                   	push   ecx
c001ee70:	51                   	push   ecx
c001ee71:	6a 01                	push   0x1
c001ee73:	53                   	push   ebx
c001ee74:	e8 c5 3f ff ff       	call   c0012e3e <File::open(FileOpenMode)>
c001ee79:	83 c4 10             	add    esp,0x10
c001ee7c:	85 c0                	test   eax,eax
c001ee7e:	74 24                	je     c001eea4 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001ee80:	83 ec 0c             	sub    esp,0xc
c001ee83:	68 30 cf 02 c0       	push   0xc002cf30
c001ee88:	e8 24 b4 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001ee8d:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ee92:	83 c4 10             	add    esp,0x10
c001ee95:	48                   	dec    eax
c001ee96:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001ee9b:	85 c0                	test   eax,eax
c001ee9d:	75 01                	jne    c001eea0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001ee9f:	fb                   	sti    
c001eea0:	31 f6                	xor    esi,esi
c001eea2:	eb 58                	jmp    c001eefc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001eea4:	0f b7 ed             	movzx  ebp,bp
c001eea7:	50                   	push   eax
c001eea8:	0f b7 ff             	movzx  edi,di
c001eeab:	50                   	push   eax
c001eeac:	55                   	push   ebp
c001eead:	57                   	push   edi
c001eeae:	e8 95 fd ff ff       	call   c001ec48 <Vm::realToLinear(unsigned short, unsigned short)>
c001eeb3:	5a                   	pop    edx
c001eeb4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001eeb6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001eeba:	51                   	push   ecx
c001eebb:	50                   	push   eax
c001eebc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eec0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001eec4:	53                   	push   ebx
c001eec5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001eec8:	83 c4 14             	add    esp,0x14
c001eecb:	53                   	push   ebx
c001eecc:	e8 cb 3f ff ff       	call   c0012e9c <File::close()>
c001eed1:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001eed6:	83 c4 10             	add    esp,0x10
c001eed9:	48                   	dec    eax
c001eeda:	c6 05 c5 23 03 c0 00 	mov    BYTE PTR ds:0xc00323c5,0x0
c001eee1:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c001eee6:	85 c0                	test   eax,eax
c001eee8:	75 01                	jne    c001eeeb <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001eeea:	fb                   	sti    
c001eeeb:	83 ec 0c             	sub    esp,0xc
c001eeee:	ff 35 c8 23 03 c0    	push   DWORD PTR ds:0xc00323c8
c001eef4:	e8 2f f6 ff ff       	call   c001e528 <unblockTask(ThreadControlBlock*)>
c001eef9:	83 c4 10             	add    esp,0x10
c001eefc:	83 c4 2c             	add    esp,0x2c
c001eeff:	89 f0                	mov    eax,esi
c001ef01:	5b                   	pop    ebx
c001ef02:	5e                   	pop    esi
c001ef03:	5f                   	pop    edi
c001ef04:	5d                   	pop    ebp
c001ef05:	c3                   	ret    

c001ef06 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001ef06:	57                   	push   edi
c001ef07:	56                   	push   esi
c001ef08:	53                   	push   ebx
c001ef09:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef11:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ef15:	83 e8 06             	sub    eax,0x6
c001ef18:	0f b7 c0             	movzx  eax,ax
c001ef1b:	50                   	push   eax
c001ef1c:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001ef21:	50                   	push   eax
c001ef22:	e8 21 fd ff ff       	call   c001ec48 <Vm::realToLinear(unsigned short, unsigned short)>
c001ef27:	5a                   	pop    edx
c001ef28:	5e                   	pop    esi
c001ef29:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001ef2c:	8d 56 fa             	lea    edx,[esi-0x6]
c001ef2f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ef35:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001ef38:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001ef3b:	83 c2 02             	add    edx,0x2
c001ef3e:	66 89 10             	mov    WORD PTR [eax],dx
c001ef41:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ef44:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ef48:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001ef4b:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001ef4f:	89 d6                	mov    esi,edx
c001ef51:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001ef57:	66 81 e6 ff fd       	and    si,0xfdff
c001ef5c:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001ef60:	74 07                	je     c001ef69 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ef62:	89 d6                	mov    esi,edx
c001ef64:	66 81 ce 00 02       	or     si,0x200
c001ef69:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ef6d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ef72:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ef76:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ef7e:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ef81:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ef89:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ef8c:	5b                   	pop    ebx
c001ef8d:	5e                   	pop    esi
c001ef8e:	5f                   	pop    edi
c001ef8f:	c3                   	ret    

c001ef90 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ef90:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ef95:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ef9a:	c1 e0 04             	shl    eax,0x4
c001ef9d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001efa0:	c3                   	ret    

c001efa1 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001efa1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001efa6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001efab:	c1 e0 04             	shl    eax,0x4
c001efae:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001efb2:	c3                   	ret    

c001efb3 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001efb3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001efb8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001efbd:	c1 e0 04             	shl    eax,0x4
c001efc0:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001efc3:	c3                   	ret    

c001efc4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001efc4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001efc9:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001efce:	c1 e0 04             	shl    eax,0x4
c001efd1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001efd5:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001efd8:	c3                   	ret    

c001efd9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001efd9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001efde:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001efe3:	c1 e0 04             	shl    eax,0x4
c001efe6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001efea:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001efee:	c3                   	ret    

c001efef <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001efef:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eff4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eff9:	c1 e0 04             	shl    eax,0x4
c001effc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f000:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f003:	c3                   	ret    

c001f004 <Vm::faultHandler(regs*)>:
c001f004:	55                   	push   ebp
c001f005:	57                   	push   edi
c001f006:	56                   	push   esi
c001f007:	53                   	push   ebx
c001f008:	83 ec 1c             	sub    esp,0x1c
c001f00b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f00f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001f012:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001f016:	0f b7 f8             	movzx  edi,ax
c001f019:	52                   	push   edx
c001f01a:	0f b7 c0             	movzx  eax,ax
c001f01d:	50                   	push   eax
c001f01e:	e8 25 fc ff ff       	call   c001ec48 <Vm::realToLinear(unsigned short, unsigned short)>
c001f023:	5a                   	pop    edx
c001f024:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c001f027:	59                   	pop    ecx
c001f028:	89 c1                	mov    ecx,eax
c001f02a:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f02d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f031:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f036:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f03a:	0f b7 c5             	movzx  eax,bp
c001f03d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f041:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001f045:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001f049:	e8 fa fb ff ff       	call   c001ec48 <Vm::realToLinear(unsigned short, unsigned short)>
c001f04e:	5e                   	pop    esi
c001f04f:	be 06 00 00 00       	mov    esi,0x6
c001f054:	5a                   	pop    edx
c001f055:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001f05a:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c001f05f:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001f062:	80 fa 9d             	cmp    dl,0x9d
c001f065:	0f 84 2c 02 00 00    	je     c001f297 <Vm::faultHandler(regs*)+0x293>
c001f06b:	0f 87 91 00 00 00    	ja     c001f102 <Vm::faultHandler(regs*)+0xfe>
c001f071:	80 fa 66             	cmp    dl,0x66
c001f074:	0f 84 98 01 00 00    	je     c001f212 <Vm::faultHandler(regs*)+0x20e>
c001f07a:	77 47                	ja     c001f0c3 <Vm::faultHandler(regs*)+0xbf>
c001f07c:	80 fa 36             	cmp    dl,0x36
c001f07f:	0f 84 80 01 00 00    	je     c001f205 <Vm::faultHandler(regs*)+0x201>
c001f085:	77 1a                	ja     c001f0a1 <Vm::faultHandler(regs*)+0x9d>
c001f087:	80 fa 26             	cmp    dl,0x26
c001f08a:	0f 84 4e 01 00 00    	je     c001f1de <Vm::faultHandler(regs*)+0x1da>
c001f090:	80 fa 2e             	cmp    dl,0x2e
c001f093:	0f 85 e2 05 00 00    	jne    c001f67b <Vm::faultHandler(regs*)+0x677>
c001f099:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f09c:	31 f6                	xor    esi,esi
c001f09e:	41                   	inc    ecx
c001f09f:	eb be                	jmp    c001f05f <Vm::faultHandler(regs*)+0x5b>
c001f0a1:	80 fa 64             	cmp    dl,0x64
c001f0a4:	0f 84 41 01 00 00    	je     c001f1eb <Vm::faultHandler(regs*)+0x1e7>
c001f0aa:	0f 87 48 01 00 00    	ja     c001f1f8 <Vm::faultHandler(regs*)+0x1f4>
c001f0b0:	80 fa 3e             	cmp    dl,0x3e
c001f0b3:	0f 85 c2 05 00 00    	jne    c001f67b <Vm::faultHandler(regs*)+0x677>
c001f0b9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f0bc:	be 01 00 00 00       	mov    esi,0x1
c001f0c1:	eb db                	jmp    c001f09e <Vm::faultHandler(regs*)+0x9a>
c001f0c3:	80 fa 6d             	cmp    dl,0x6d
c001f0c6:	0f 84 ec 02 00 00    	je     c001f3b8 <Vm::faultHandler(regs*)+0x3b4>
c001f0cc:	77 17                	ja     c001f0e5 <Vm::faultHandler(regs*)+0xe1>
c001f0ce:	80 fa 67             	cmp    dl,0x67
c001f0d1:	0f 84 48 01 00 00    	je     c001f21f <Vm::faultHandler(regs*)+0x21b>
c001f0d7:	80 fa 6c             	cmp    dl,0x6c
c001f0da:	0f 84 69 02 00 00    	je     c001f349 <Vm::faultHandler(regs*)+0x345>
c001f0e0:	e9 96 05 00 00       	jmp    c001f67b <Vm::faultHandler(regs*)+0x677>
c001f0e5:	80 fa 6f             	cmp    dl,0x6f
c001f0e8:	0f 84 f4 03 00 00    	je     c001f4e2 <Vm::faultHandler(regs*)+0x4de>
c001f0ee:	0f 82 59 03 00 00    	jb     c001f44d <Vm::faultHandler(regs*)+0x449>
c001f0f4:	80 fa 9c             	cmp    dl,0x9c
c001f0f7:	0f 84 2f 01 00 00    	je     c001f22c <Vm::faultHandler(regs*)+0x228>
c001f0fd:	e9 79 05 00 00       	jmp    c001f67b <Vm::faultHandler(regs*)+0x677>
c001f102:	80 fa ec             	cmp    dl,0xec
c001f105:	0f 84 14 05 00 00    	je     c001f61f <Vm::faultHandler(regs*)+0x61b>
c001f10b:	77 7b                	ja     c001f188 <Vm::faultHandler(regs*)+0x184>
c001f10d:	80 fa e4             	cmp    dl,0xe4
c001f110:	0f 84 93 04 00 00    	je     c001f5a9 <Vm::faultHandler(regs*)+0x5a5>
c001f116:	77 53                	ja     c001f16b <Vm::faultHandler(regs*)+0x167>
c001f118:	80 fa cd             	cmp    dl,0xcd
c001f11b:	0f 84 d9 01 00 00    	je     c001f2fa <Vm::faultHandler(regs*)+0x2f6>
c001f121:	80 fa cf             	cmp    dl,0xcf
c001f124:	0f 85 51 05 00 00    	jne    c001f67b <Vm::faultHandler(regs*)+0x677>
c001f12a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f12d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001f130:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001f134:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001f137:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c001f13b:	81 ca 00 02 02 00    	or     edx,0x20200
c001f141:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f144:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001f148:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f14e:	66 c1 e8 09          	shr    ax,0x9
c001f152:	83 e0 01             	and    eax,0x1
c001f155:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f158:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f15b:	83 c0 06             	add    eax,0x6
c001f15e:	25 ff ff 00 00       	and    eax,0xffff
c001f163:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f166:	e9 0c 05 00 00       	jmp    c001f677 <Vm::faultHandler(regs*)+0x673>
c001f16b:	80 fa e6             	cmp    dl,0xe6
c001f16e:	0f 84 7f 04 00 00    	je     c001f5f3 <Vm::faultHandler(regs*)+0x5ef>
c001f174:	0f 82 4b 04 00 00    	jb     c001f5c5 <Vm::faultHandler(regs*)+0x5c1>
c001f17a:	80 fa e7             	cmp    dl,0xe7
c001f17d:	0f 84 87 04 00 00    	je     c001f60a <Vm::faultHandler(regs*)+0x606>
c001f183:	e9 f3 04 00 00       	jmp    c001f67b <Vm::faultHandler(regs*)+0x677>
c001f188:	80 fa ef             	cmp    dl,0xef
c001f18b:	0f 84 d1 04 00 00    	je     c001f662 <Vm::faultHandler(regs*)+0x65e>
c001f191:	77 28                	ja     c001f1bb <Vm::faultHandler(regs*)+0x1b7>
c001f193:	80 fa ed             	cmp    dl,0xed
c001f196:	0f 84 9f 04 00 00    	je     c001f63b <Vm::faultHandler(regs*)+0x637>
c001f19c:	80 fa ee             	cmp    dl,0xee
c001f19f:	0f 85 d6 04 00 00    	jne    c001f67b <Vm::faultHandler(regs*)+0x677>
c001f1a5:	50                   	push   eax
c001f1a6:	50                   	push   eax
c001f1a7:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f1ab:	50                   	push   eax
c001f1ac:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f1b0:	50                   	push   eax
c001f1b1:	e8 5c fa ff ff       	call   c001ec12 <Vm::outbv(unsigned short, unsigned char)>
c001f1b6:	e9 9f 04 00 00       	jmp    c001f65a <Vm::faultHandler(regs*)+0x656>
c001f1bb:	80 fa fa             	cmp    dl,0xfa
c001f1be:	0f 84 69 01 00 00    	je     c001f32d <Vm::faultHandler(regs*)+0x329>
c001f1c4:	80 fa fb             	cmp    dl,0xfb
c001f1c7:	0f 84 6e 01 00 00    	je     c001f33b <Vm::faultHandler(regs*)+0x337>
c001f1cd:	80 fa f3             	cmp    dl,0xf3
c001f1d0:	0f 85 a5 04 00 00    	jne    c001f67b <Vm::faultHandler(regs*)+0x677>
c001f1d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f1d9:	e9 c0 fe ff ff       	jmp    c001f09e <Vm::faultHandler(regs*)+0x9a>
c001f1de:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f1e1:	be 02 00 00 00       	mov    esi,0x2
c001f1e6:	e9 b3 fe ff ff       	jmp    c001f09e <Vm::faultHandler(regs*)+0x9a>
c001f1eb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f1ee:	be 03 00 00 00       	mov    esi,0x3
c001f1f3:	e9 a6 fe ff ff       	jmp    c001f09e <Vm::faultHandler(regs*)+0x9a>
c001f1f8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f1fb:	be 04 00 00 00       	mov    esi,0x4
c001f200:	e9 99 fe ff ff       	jmp    c001f09e <Vm::faultHandler(regs*)+0x9a>
c001f205:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f208:	be 05 00 00 00       	mov    esi,0x5
c001f20d:	e9 8c fe ff ff       	jmp    c001f09e <Vm::faultHandler(regs*)+0x9a>
c001f212:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f215:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001f21a:	e9 7f fe ff ff       	jmp    c001f09e <Vm::faultHandler(regs*)+0x9a>
c001f21f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f222:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001f227:	e9 72 fe ff ff       	jmp    c001f09e <Vm::faultHandler(regs*)+0x9a>
c001f22c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001f22f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001f233:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f238:	74 30                	je     c001f26a <Vm::faultHandler(regs*)+0x266>
c001f23a:	83 e9 04             	sub    ecx,0x4
c001f23d:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f243:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f249:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f24c:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f24f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f255:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f259:	0f 84 15 04 00 00    	je     c001f674 <Vm::faultHandler(regs*)+0x670>
c001f25f:	80 ce 02             	or     dh,0x2
c001f262:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001f265:	e9 0a 04 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x670>
c001f26a:	83 e9 02             	sub    ecx,0x2
c001f26d:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001f273:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001f276:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f27a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001f280:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001f284:	74 05                	je     c001f28b <Vm::faultHandler(regs*)+0x287>
c001f286:	80 ce 02             	or     dh,0x2
c001f289:	eb 03                	jmp    c001f28e <Vm::faultHandler(regs*)+0x28a>
c001f28b:	80 e6 fd             	and    dh,0xfd
c001f28e:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001f292:	e9 dd 03 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x670>
c001f297:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f29c:	74 2a                	je     c001f2c8 <Vm::faultHandler(regs*)+0x2c4>
c001f29e:	8b 10                	mov    edx,DWORD PTR [eax]
c001f2a0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001f2a6:	81 ca 00 02 02 00    	or     edx,0x20200
c001f2ac:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f2af:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f2b7:	c1 e8 09             	shr    eax,0x9
c001f2ba:	83 e0 01             	and    eax,0x1
c001f2bd:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f2c0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f2c3:	83 c0 04             	add    eax,0x4
c001f2c6:	eb 25                	jmp    c001f2ed <Vm::faultHandler(regs*)+0x2e9>
c001f2c8:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001f2cb:	81 ca 00 02 02 00    	or     edx,0x20200
c001f2d1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001f2d4:	66 8b 00             	mov    ax,WORD PTR [eax]
c001f2d7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f2dd:	66 c1 e8 09          	shr    ax,0x9
c001f2e1:	83 e0 01             	and    eax,0x1
c001f2e4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f2e7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001f2ea:	83 c0 02             	add    eax,0x2
c001f2ed:	25 ff ff 00 00       	and    eax,0xffff
c001f2f2:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001f2f5:	e9 7a 03 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x670>
c001f2fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f2fe:	3c ee                	cmp    al,0xee
c001f300:	75 10                	jne    c001f312 <Vm::faultHandler(regs*)+0x30e>
c001f302:	83 ec 0c             	sub    esp,0xc
c001f305:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001f308:	e8 a2 f9 ff ff       	call   c001ecaf <Vm::mainloop3(unsigned long)>
c001f30d:	e9 4b 03 00 00       	jmp    c001f65d <Vm::faultHandler(regs*)+0x659>
c001f312:	83 ec 0c             	sub    esp,0xc
c001f315:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f319:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f31d:	51                   	push   ecx
c001f31e:	50                   	push   eax
c001f31f:	53                   	push   ebx
c001f320:	e8 e1 fb ff ff       	call   c001ef06 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f325:	83 c4 20             	add    esp,0x20
c001f328:	e9 4a 03 00 00       	jmp    c001f677 <Vm::faultHandler(regs*)+0x673>
c001f32d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f332:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f336:	e9 39 03 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x670>
c001f33b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f340:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f344:	e9 2b 03 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x670>
c001f349:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f34c:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f351:	74 2b                	je     c001f37e <Vm::faultHandler(regs*)+0x37a>
c001f353:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001f35a:	76 22                	jbe    c001f37e <Vm::faultHandler(regs*)+0x37a>
c001f35c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f360:	50                   	push   eax
c001f361:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f365:	50                   	push   eax
c001f366:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f36a:	50                   	push   eax
c001f36b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f36f:	50                   	push   eax
c001f370:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f374:	50                   	push   eax
c001f375:	6a 6c                	push   0x6c
c001f377:	6a 6c                	push   0x6c
c001f379:	e9 b9 01 00 00       	jmp    c001f537 <Vm::faultHandler(regs*)+0x533>
c001f37e:	83 ec 0c             	sub    esp,0xc
c001f381:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f385:	0f b7 f6             	movzx  esi,si
c001f388:	50                   	push   eax
c001f389:	e8 71 f8 ff ff       	call   c001ebff <Vm::inbv(unsigned short)>
c001f38e:	83 c4 0c             	add    esp,0xc
c001f391:	0f b6 c0             	movzx  eax,al
c001f394:	50                   	push   eax
c001f395:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001f399:	50                   	push   eax
c001f39a:	56                   	push   esi
c001f39b:	e8 24 fc ff ff       	call   c001efc4 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f3a0:	83 c4 10             	add    esp,0x10
c001f3a3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f3a6:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f3aa:	74 03                	je     c001f3af <Vm::faultHandler(regs*)+0x3ab>
c001f3ac:	48                   	dec    eax
c001f3ad:	eb 01                	jmp    c001f3b0 <Vm::faultHandler(regs*)+0x3ac>
c001f3af:	40                   	inc    eax
c001f3b0:	0f b7 c0             	movzx  eax,ax
c001f3b3:	e9 8d 00 00 00       	jmp    c001f445 <Vm::faultHandler(regs*)+0x441>
c001f3b8:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001f3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f3be:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f3c3:	74 29                	je     c001f3ee <Vm::faultHandler(regs*)+0x3ea>
c001f3c5:	3d ff ff 00 00       	cmp    eax,0xffff
c001f3ca:	76 22                	jbe    c001f3ee <Vm::faultHandler(regs*)+0x3ea>
c001f3cc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f3d0:	50                   	push   eax
c001f3d1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f3d5:	50                   	push   eax
c001f3d6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f3da:	50                   	push   eax
c001f3db:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f3df:	50                   	push   eax
c001f3e0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f3e4:	50                   	push   eax
c001f3e5:	6a 6d                	push   0x6d
c001f3e7:	6a 6d                	push   0x6d
c001f3e9:	e9 49 01 00 00       	jmp    c001f537 <Vm::faultHandler(regs*)+0x533>
c001f3ee:	0f b7 c8             	movzx  ecx,ax
c001f3f1:	0f b7 f6             	movzx  esi,si
c001f3f4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f3f7:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f3fc:	74 20                	je     c001f41e <Vm::faultHandler(regs*)+0x41a>
c001f3fe:	ed                   	in     eax,dx
c001f3ff:	55                   	push   ebp
c001f400:	50                   	push   eax
c001f401:	51                   	push   ecx
c001f402:	56                   	push   esi
c001f403:	e8 e7 fb ff ff       	call   c001efef <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f408:	83 c4 10             	add    esp,0x10
c001f40b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f40e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f412:	74 05                	je     c001f419 <Vm::faultHandler(regs*)+0x415>
c001f414:	83 e8 04             	sub    eax,0x4
c001f417:	eb 27                	jmp    c001f440 <Vm::faultHandler(regs*)+0x43c>
c001f419:	83 c0 04             	add    eax,0x4
c001f41c:	eb 22                	jmp    c001f440 <Vm::faultHandler(regs*)+0x43c>
c001f41e:	66 ed                	in     ax,dx
c001f420:	0f b7 c0             	movzx  eax,ax
c001f423:	57                   	push   edi
c001f424:	50                   	push   eax
c001f425:	51                   	push   ecx
c001f426:	56                   	push   esi
c001f427:	e8 ad fb ff ff       	call   c001efd9 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f42c:	83 c4 10             	add    esp,0x10
c001f42f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001f432:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f436:	74 05                	je     c001f43d <Vm::faultHandler(regs*)+0x439>
c001f438:	83 e8 02             	sub    eax,0x2
c001f43b:	eb 03                	jmp    c001f440 <Vm::faultHandler(regs*)+0x43c>
c001f43d:	83 c0 02             	add    eax,0x2
c001f440:	25 ff ff 00 00       	and    eax,0xffff
c001f445:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001f448:	e9 27 02 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x670>
c001f44d:	8d 46 ff             	lea    eax,[esi-0x1]
c001f450:	3c 05                	cmp    al,0x5
c001f452:	77 24                	ja     c001f478 <Vm::faultHandler(regs*)+0x474>
c001f454:	0f b6 c0             	movzx  eax,al
c001f457:	ff 24 85 a4 cf 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd305c]
c001f45e:	0f b7 fd             	movzx  edi,bp
c001f461:	eb 15                	jmp    c001f478 <Vm::faultHandler(regs*)+0x474>
c001f463:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001f467:	eb 0f                	jmp    c001f478 <Vm::faultHandler(regs*)+0x474>
c001f469:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001f46d:	eb 09                	jmp    c001f478 <Vm::faultHandler(regs*)+0x474>
c001f46f:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001f473:	eb 03                	jmp    c001f478 <Vm::faultHandler(regs*)+0x474>
c001f475:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001f478:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f47b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f480:	74 29                	je     c001f4ab <Vm::faultHandler(regs*)+0x4a7>
c001f482:	3d ff ff 00 00       	cmp    eax,0xffff
c001f487:	76 22                	jbe    c001f4ab <Vm::faultHandler(regs*)+0x4a7>
c001f489:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f48d:	50                   	push   eax
c001f48e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f492:	50                   	push   eax
c001f493:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f497:	50                   	push   eax
c001f498:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f49c:	50                   	push   eax
c001f49d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f4a1:	50                   	push   eax
c001f4a2:	6a 6e                	push   0x6e
c001f4a4:	6a 6e                	push   0x6e
c001f4a6:	e9 8c 00 00 00       	jmp    c001f537 <Vm::faultHandler(regs*)+0x533>
c001f4ab:	0f b7 c0             	movzx  eax,ax
c001f4ae:	52                   	push   edx
c001f4af:	52                   	push   edx
c001f4b0:	50                   	push   eax
c001f4b1:	57                   	push   edi
c001f4b2:	e8 d9 fa ff ff       	call   c001ef90 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f4b7:	59                   	pop    ecx
c001f4b8:	0f b6 c0             	movzx  eax,al
c001f4bb:	5e                   	pop    esi
c001f4bc:	50                   	push   eax
c001f4bd:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f4c1:	50                   	push   eax
c001f4c2:	e8 4b f7 ff ff       	call   c001ec12 <Vm::outbv(unsigned short, unsigned char)>
c001f4c7:	83 c4 10             	add    esp,0x10
c001f4ca:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001f4cd:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001f4d1:	74 03                	je     c001f4d6 <Vm::faultHandler(regs*)+0x4d2>
c001f4d3:	48                   	dec    eax
c001f4d4:	eb 01                	jmp    c001f4d7 <Vm::faultHandler(regs*)+0x4d3>
c001f4d6:	40                   	inc    eax
c001f4d7:	0f b7 c0             	movzx  eax,ax
c001f4da:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001f4dd:	e9 92 01 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x670>
c001f4e2:	8d 46 ff             	lea    eax,[esi-0x1]
c001f4e5:	3c 05                	cmp    al,0x5
c001f4e7:	77 1f                	ja     c001f508 <Vm::faultHandler(regs*)+0x504>
c001f4e9:	0f b6 c0             	movzx  eax,al
c001f4ec:	ff 24 85 bc cf 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd3044]
c001f4f3:	89 ef                	mov    edi,ebp
c001f4f5:	eb 11                	jmp    c001f508 <Vm::faultHandler(regs*)+0x504>
c001f4f7:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001f4fa:	eb 0c                	jmp    c001f508 <Vm::faultHandler(regs*)+0x504>
c001f4fc:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001f4ff:	eb 07                	jmp    c001f508 <Vm::faultHandler(regs*)+0x504>
c001f501:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001f504:	eb 02                	jmp    c001f508 <Vm::faultHandler(regs*)+0x504>
c001f506:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001f508:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001f50b:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001f510:	74 37                	je     c001f549 <Vm::faultHandler(regs*)+0x545>
c001f512:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001f518:	76 2f                	jbe    c001f549 <Vm::faultHandler(regs*)+0x545>
c001f51a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f51e:	50                   	push   eax
c001f51f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f523:	50                   	push   eax
c001f524:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f528:	50                   	push   eax
c001f529:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f52d:	50                   	push   eax
c001f52e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f532:	50                   	push   eax
c001f533:	6a 6f                	push   0x6f
c001f535:	6a 6f                	push   0x6f
c001f537:	68 49 cf 02 c0       	push   0xc002cf49
c001f53c:	e8 3a 33 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001f541:	83 c4 20             	add    esp,0x20
c001f544:	e9 86 01 00 00       	jmp    c001f6cf <Vm::faultHandler(regs*)+0x6cb>
c001f549:	0f b7 d7             	movzx  edx,di
c001f54c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001f54f:	0f b7 c6             	movzx  eax,si
c001f552:	81 e1 00 04 00 00    	and    ecx,0x400
c001f558:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001f55b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f560:	74 1d                	je     c001f57f <Vm::faultHandler(regs*)+0x57b>
c001f562:	55                   	push   ebp
c001f563:	55                   	push   ebp
c001f564:	50                   	push   eax
c001f565:	52                   	push   edx
c001f566:	e8 48 fa ff ff       	call   c001efb3 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f56b:	83 c4 10             	add    esp,0x10
c001f56e:	89 fa                	mov    edx,edi
c001f570:	ef                   	out    dx,eax
c001f571:	85 c9                	test   ecx,ecx
c001f573:	74 05                	je     c001f57a <Vm::faultHandler(regs*)+0x576>
c001f575:	83 ee 04             	sub    esi,0x4
c001f578:	eb 21                	jmp    c001f59b <Vm::faultHandler(regs*)+0x597>
c001f57a:	83 c6 04             	add    esi,0x4
c001f57d:	eb 1c                	jmp    c001f59b <Vm::faultHandler(regs*)+0x597>
c001f57f:	55                   	push   ebp
c001f580:	55                   	push   ebp
c001f581:	50                   	push   eax
c001f582:	52                   	push   edx
c001f583:	e8 19 fa ff ff       	call   c001efa1 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f588:	83 c4 10             	add    esp,0x10
c001f58b:	89 fa                	mov    edx,edi
c001f58d:	66 ef                	out    dx,ax
c001f58f:	85 c9                	test   ecx,ecx
c001f591:	74 05                	je     c001f598 <Vm::faultHandler(regs*)+0x594>
c001f593:	83 ee 02             	sub    esi,0x2
c001f596:	eb 03                	jmp    c001f59b <Vm::faultHandler(regs*)+0x597>
c001f598:	83 c6 02             	add    esi,0x2
c001f59b:	81 e6 ff ff 00 00    	and    esi,0xffff
c001f5a1:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001f5a4:	e9 cb 00 00 00       	jmp    c001f674 <Vm::faultHandler(regs*)+0x670>
c001f5a9:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f5b0:	83 ec 0c             	sub    esp,0xc
c001f5b3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f5b7:	50                   	push   eax
c001f5b8:	e8 42 f6 ff ff       	call   c001ebff <Vm::inbv(unsigned short)>
c001f5bd:	0f b6 c0             	movzx  eax,al
c001f5c0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f5c3:	eb 3f                	jmp    c001f604 <Vm::faultHandler(regs*)+0x600>
c001f5c5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f5ca:	74 07                	je     c001f5d3 <Vm::faultHandler(regs*)+0x5cf>
c001f5cc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f5d0:	ed                   	in     eax,dx
c001f5d1:	eb 14                	jmp    c001f5e7 <Vm::faultHandler(regs*)+0x5e3>
c001f5d3:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001f5d6:	66 31 f6             	xor    si,si
c001f5d9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001f5dc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f5e0:	66 ed                	in     ax,dx
c001f5e2:	0f b7 c0             	movzx  eax,ax
c001f5e5:	09 f0                	or     eax,esi
c001f5e7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f5ea:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f5ee:	e9 84 00 00 00       	jmp    c001f677 <Vm::faultHandler(regs*)+0x673>
c001f5f3:	52                   	push   edx
c001f5f4:	52                   	push   edx
c001f5f5:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001f5f9:	50                   	push   eax
c001f5fa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f5fe:	50                   	push   eax
c001f5ff:	e8 0e f6 ff ff       	call   c001ec12 <Vm::outbv(unsigned short, unsigned char)>
c001f604:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f608:	eb 53                	jmp    c001f65d <Vm::faultHandler(regs*)+0x659>
c001f60a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f60d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001f611:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f616:	74 03                	je     c001f61b <Vm::faultHandler(regs*)+0x617>
c001f618:	ef                   	out    dx,eax
c001f619:	eb cf                	jmp    c001f5ea <Vm::faultHandler(regs*)+0x5e6>
c001f61b:	66 ef                	out    dx,ax
c001f61d:	eb cb                	jmp    c001f5ea <Vm::faultHandler(regs*)+0x5e6>
c001f61f:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001f626:	83 ec 0c             	sub    esp,0xc
c001f629:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001f62d:	50                   	push   eax
c001f62e:	e8 cc f5 ff ff       	call   c001ebff <Vm::inbv(unsigned short)>
c001f633:	0f b6 c0             	movzx  eax,al
c001f636:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001f639:	eb 1f                	jmp    c001f65a <Vm::faultHandler(regs*)+0x656>
c001f63b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f63e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f643:	74 03                	je     c001f648 <Vm::faultHandler(regs*)+0x644>
c001f645:	ed                   	in     eax,dx
c001f646:	eb 0d                	jmp    c001f655 <Vm::faultHandler(regs*)+0x651>
c001f648:	66 ed                	in     ax,dx
c001f64a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001f64d:	0f b7 c0             	movzx  eax,ax
c001f650:	66 31 d2             	xor    dx,dx
c001f653:	09 d0                	or     eax,edx
c001f655:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001f658:	eb 1a                	jmp    c001f674 <Vm::faultHandler(regs*)+0x670>
c001f65a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f65d:	83 c4 10             	add    esp,0x10
c001f660:	eb 15                	jmp    c001f677 <Vm::faultHandler(regs*)+0x673>
c001f662:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001f665:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001f668:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001f66d:	74 03                	je     c001f672 <Vm::faultHandler(regs*)+0x66e>
c001f66f:	ef                   	out    dx,eax
c001f670:	eb 02                	jmp    c001f674 <Vm::faultHandler(regs*)+0x670>
c001f672:	66 ef                	out    dx,ax
c001f674:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001f677:	b0 01                	mov    al,0x1
c001f679:	eb 56                	jmp    c001f6d1 <Vm::faultHandler(regs*)+0x6cd>
c001f67b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001f67f:	50                   	push   eax
c001f680:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001f684:	50                   	push   eax
c001f685:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001f689:	50                   	push   eax
c001f68a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001f68e:	50                   	push   eax
c001f68f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001f693:	50                   	push   eax
c001f694:	52                   	push   edx
c001f695:	52                   	push   edx
c001f696:	68 76 cf 02 c0       	push   0xc002cf76
c001f69b:	e8 db 31 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c001f6a0:	83 c4 20             	add    esp,0x20
c001f6a3:	83 ec 0c             	sub    esp,0xc
c001f6a6:	6a 60                	push   0x60
c001f6a8:	e8 52 f5 ff ff       	call   c001ebff <Vm::inbv(unsigned short)>
c001f6ad:	83 c4 10             	add    esp,0x10
c001f6b0:	3c 1c                	cmp    al,0x1c
c001f6b2:	74 04                	je     c001f6b8 <Vm::faultHandler(regs*)+0x6b4>
c001f6b4:	3c 5a                	cmp    al,0x5a
c001f6b6:	75 eb                	jne    c001f6a3 <Vm::faultHandler(regs*)+0x69f>
c001f6b8:	3c 5a                	cmp    al,0x5a
c001f6ba:	74 04                	je     c001f6c0 <Vm::faultHandler(regs*)+0x6bc>
c001f6bc:	3c 1c                	cmp    al,0x1c
c001f6be:	75 0f                	jne    c001f6cf <Vm::faultHandler(regs*)+0x6cb>
c001f6c0:	83 ec 0c             	sub    esp,0xc
c001f6c3:	6a 60                	push   0x60
c001f6c5:	e8 35 f5 ff ff       	call   c001ebff <Vm::inbv(unsigned short)>
c001f6ca:	83 c4 10             	add    esp,0x10
c001f6cd:	eb e9                	jmp    c001f6b8 <Vm::faultHandler(regs*)+0x6b4>
c001f6cf:	31 c0                	xor    eax,eax
c001f6d1:	83 c4 1c             	add    esp,0x1c
c001f6d4:	5b                   	pop    ebx
c001f6d5:	5e                   	pop    esi
c001f6d6:	5f                   	pop    edi
c001f6d7:	5d                   	pop    ebp
c001f6d8:	c3                   	ret    

c001f6d9 <Vm::fpuInternalTo32(unsigned long long)>:
c001f6d9:	57                   	push   edi
c001f6da:	56                   	push   esi
c001f6db:	53                   	push   ebx
c001f6dc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e4:	89 d6                	mov    esi,edx
c001f6e6:	89 d7                	mov    edi,edx
c001f6e8:	89 c1                	mov    ecx,eax
c001f6ea:	c1 ef 14             	shr    edi,0x14
c001f6ed:	89 d3                	mov    ebx,edx
c001f6ef:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6f5:	31 d2                	xor    edx,edx
c001f6f7:	89 f8                	mov    eax,edi
c001f6f9:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6ff:	bf ff 00 00 00       	mov    edi,0xff
c001f704:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f709:	83 d2 ff             	adc    edx,0xffffffff
c001f70c:	39 c7                	cmp    edi,eax
c001f70e:	bf 00 00 00 00       	mov    edi,0x0
c001f713:	19 d7                	sbb    edi,edx
c001f715:	72 15                	jb     c001f72c <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f717:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f71b:	c1 e0 17             	shl    eax,0x17
c001f71e:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f724:	09 f1                	or     ecx,esi
c001f726:	09 c1                	or     ecx,eax
c001f728:	89 cf                	mov    edi,ecx
c001f72a:	eb 02                	jmp    c001f72e <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f72c:	31 ff                	xor    edi,edi
c001f72e:	89 f8                	mov    eax,edi
c001f730:	5b                   	pop    ebx
c001f731:	5e                   	pop    esi
c001f732:	5f                   	pop    edi
c001f733:	c3                   	ret    

c001f734 <Vm::fpuInternalTo64(unsigned long long)>:
c001f734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f738:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f73c:	c3                   	ret    

c001f73d <Vm::fpu32ToInternal(unsigned int)>:
c001f73d:	57                   	push   edi
c001f73e:	31 ff                	xor    edi,edi
c001f740:	56                   	push   esi
c001f741:	53                   	push   ebx
c001f742:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f746:	89 cb                	mov    ebx,ecx
c001f748:	89 ce                	mov    esi,ecx
c001f74a:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f750:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f756:	c1 e9 17             	shr    ecx,0x17
c001f759:	89 f0                	mov    eax,esi
c001f75b:	0f b6 d1             	movzx  edx,cl
c001f75e:	81 c2 80 03 00 00    	add    edx,0x380
c001f764:	89 d1                	mov    ecx,edx
c001f766:	89 fa                	mov    edx,edi
c001f768:	c1 e1 14             	shl    ecx,0x14
c001f76b:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f76f:	c1 e0 1d             	shl    eax,0x1d
c001f772:	89 d7                	mov    edi,edx
c001f774:	89 c6                	mov    esi,eax
c001f776:	89 ca                	mov    edx,ecx
c001f778:	89 f0                	mov    eax,esi
c001f77a:	09 fa                	or     edx,edi
c001f77c:	09 da                	or     edx,ebx
c001f77e:	5b                   	pop    ebx
c001f77f:	5e                   	pop    esi
c001f780:	5f                   	pop    edi
c001f781:	c3                   	ret    

c001f782 <Vm::fpu64ToInternal(unsigned long long)>:
c001f782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f786:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f78a:	c3                   	ret    

c001f78b <Vm::fpuFloatToLong(unsigned long long)>:
c001f78b:	57                   	push   edi
c001f78c:	31 c0                	xor    eax,eax
c001f78e:	56                   	push   esi
c001f78f:	31 d2                	xor    edx,edx
c001f791:	53                   	push   ebx
c001f792:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f796:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f79a:	89 d9                	mov    ecx,ebx
c001f79c:	c1 e9 14             	shr    ecx,0x14
c001f79f:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7a5:	89 cf                	mov    edi,ecx
c001f7a7:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7ad:	78 33                	js     c001f7e2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7af:	89 d9                	mov    ecx,ebx
c001f7b1:	89 f0                	mov    eax,esi
c001f7b3:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7b9:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f7bf:	89 ca                	mov    edx,ecx
c001f7c1:	b9 34 00 00 00       	mov    ecx,0x34
c001f7c6:	29 f9                	sub    ecx,edi
c001f7c8:	0f ad d0             	shrd   eax,edx,cl
c001f7cb:	d3 fa                	sar    edx,cl
c001f7cd:	f6 c1 20             	test   cl,0x20
c001f7d0:	74 05                	je     c001f7d7 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f7d2:	89 d0                	mov    eax,edx
c001f7d4:	c1 fa 1f             	sar    edx,0x1f
c001f7d7:	85 db                	test   ebx,ebx
c001f7d9:	79 07                	jns    c001f7e2 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7db:	f7 d8                	neg    eax
c001f7dd:	83 d2 00             	adc    edx,0x0
c001f7e0:	f7 da                	neg    edx
c001f7e2:	5b                   	pop    ebx
c001f7e3:	5e                   	pop    esi
c001f7e4:	5f                   	pop    edi
c001f7e5:	c3                   	ret    

c001f7e6 <Vm::fpuULongToFloat(unsigned long long)>:
c001f7e6:	57                   	push   edi
c001f7e7:	31 c9                	xor    ecx,ecx
c001f7e9:	56                   	push   esi
c001f7ea:	53                   	push   ebx
c001f7eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7f3:	0f ba e7 14          	bt     edi,0x14
c001f7f7:	72 07                	jb     c001f800 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7f9:	01 f6                	add    esi,esi
c001f7fb:	11 ff                	adc    edi,edi
c001f7fd:	41                   	inc    ecx
c001f7fe:	eb f3                	jmp    c001f7f3 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f800:	89 fa                	mov    edx,edi
c001f802:	89 f0                	mov    eax,esi
c001f804:	bb 33 04 00 00       	mov    ebx,0x433
c001f809:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f80f:	29 cb                	sub    ebx,ecx
c001f811:	89 d9                	mov    ecx,ebx
c001f813:	5b                   	pop    ebx
c001f814:	c1 e1 14             	shl    ecx,0x14
c001f817:	5e                   	pop    esi
c001f818:	09 ca                	or     edx,ecx
c001f81a:	5f                   	pop    edi
c001f81b:	c3                   	ret    

c001f81c <Vm::fpuLongToFloat(long long)>:
c001f81c:	56                   	push   esi
c001f81d:	31 c0                	xor    eax,eax
c001f81f:	53                   	push   ebx
c001f820:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f824:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f828:	39 c8                	cmp    eax,ecx
c001f82a:	19 d8                	sbb    eax,ebx
c001f82c:	7d 04                	jge    c001f832 <Vm::fpuLongToFloat(long long)+0x16>
c001f82e:	31 f6                	xor    esi,esi
c001f830:	eb 0c                	jmp    c001f83e <Vm::fpuLongToFloat(long long)+0x22>
c001f832:	f7 d9                	neg    ecx
c001f834:	be 01 00 00 00       	mov    esi,0x1
c001f839:	83 d3 00             	adc    ebx,0x0
c001f83c:	f7 db                	neg    ebx
c001f83e:	31 c0                	xor    eax,eax
c001f840:	0f ba e3 14          	bt     ebx,0x14
c001f844:	72 07                	jb     c001f84d <Vm::fpuLongToFloat(long long)+0x31>
c001f846:	01 c9                	add    ecx,ecx
c001f848:	11 db                	adc    ebx,ebx
c001f84a:	40                   	inc    eax
c001f84b:	eb f3                	jmp    c001f840 <Vm::fpuLongToFloat(long long)+0x24>
c001f84d:	ba 33 04 00 00       	mov    edx,0x433
c001f852:	29 c2                	sub    edx,eax
c001f854:	89 c8                	mov    eax,ecx
c001f856:	c1 e2 14             	shl    edx,0x14
c001f859:	89 d9                	mov    ecx,ebx
c001f85b:	89 f3                	mov    ebx,esi
c001f85d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f863:	09 ca                	or     edx,ecx
c001f865:	84 db                	test   bl,bl
c001f867:	74 06                	je     c001f86f <Vm::fpuLongToFloat(long long)+0x53>
c001f869:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f86f:	5b                   	pop    ebx
c001f870:	5e                   	pop    esi
c001f871:	c3                   	ret    

c001f872 <Vm::fpuGet0()>:
c001f872:	31 c0                	xor    eax,eax
c001f874:	31 d2                	xor    edx,edx
c001f876:	c3                   	ret    

c001f877 <Vm::fpuGet1()>:
c001f877:	b8 01 00 00 00       	mov    eax,0x1
c001f87c:	31 d2                	xor    edx,edx
c001f87e:	c3                   	ret    

c001f87f <Vm::fpuGetPi()>:
c001f87f:	b8 03 00 00 00       	mov    eax,0x3
c001f884:	31 d2                	xor    edx,edx
c001f886:	c3                   	ret    

c001f887 <Vm::fpuGetLog2E()>:
c001f887:	83 ec 18             	sub    esp,0x18
c001f88a:	68 d4 cf 02 c0       	push   0xc002cfd4
c001f88f:	e8 1d aa ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001f894:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f899:	31 d2                	xor    edx,edx
c001f89b:	83 c4 1c             	add    esp,0x1c
c001f89e:	c3                   	ret    

c001f89f <Vm::fpuGetLogE2()>:
c001f89f:	83 ec 18             	sub    esp,0x18
c001f8a2:	68 e0 cf 02 c0       	push   0xc002cfe0
c001f8a7:	e8 05 aa ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001f8ac:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8b1:	31 d2                	xor    edx,edx
c001f8b3:	83 c4 1c             	add    esp,0x1c
c001f8b6:	c3                   	ret    

c001f8b7 <Vm::fpuGetLog210()>:
c001f8b7:	83 ec 18             	sub    esp,0x18
c001f8ba:	68 ec cf 02 c0       	push   0xc002cfec
c001f8bf:	e8 ed a9 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001f8c4:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8c9:	31 d2                	xor    edx,edx
c001f8cb:	83 c4 1c             	add    esp,0x1c
c001f8ce:	c3                   	ret    

c001f8cf <Vm::fpuGetLog102()>:
c001f8cf:	83 ec 18             	sub    esp,0x18
c001f8d2:	68 f9 cf 02 c0       	push   0xc002cff9
c001f8d7:	e8 d5 a9 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001f8dc:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8e1:	31 d2                	xor    edx,edx
c001f8e3:	83 c4 1c             	add    esp,0x1c
c001f8e6:	c3                   	ret    

c001f8e7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8eb:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8f3:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8f7:	0f 92 c0             	setb   al
c001f8fa:	c3                   	ret    

c001f8fb <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f903:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f907:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f90b:	09 c2                	or     edx,eax
c001f90d:	0f 94 c0             	sete   al
c001f910:	c3                   	ret    

c001f911 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f911:	57                   	push   edi
c001f912:	56                   	push   esi
c001f913:	53                   	push   ebx
c001f914:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f918:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f91c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f920:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f924:	57                   	push   edi
c001f925:	56                   	push   esi
c001f926:	53                   	push   ebx
c001f927:	51                   	push   ecx
c001f928:	e8 ce ff ff ff       	call   c001f8fb <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f92d:	83 c4 10             	add    esp,0x10
c001f930:	88 c2                	mov    dl,al
c001f932:	31 c0                	xor    eax,eax
c001f934:	84 d2                	test   dl,dl
c001f936:	75 0c                	jne    c001f944 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f938:	57                   	push   edi
c001f939:	56                   	push   esi
c001f93a:	53                   	push   ebx
c001f93b:	51                   	push   ecx
c001f93c:	e8 a6 ff ff ff       	call   c001f8e7 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f941:	83 c4 10             	add    esp,0x10
c001f944:	83 e0 01             	and    eax,0x1
c001f947:	5b                   	pop    ebx
c001f948:	88 c1                	mov    cl,al
c001f94a:	83 e2 01             	and    edx,0x1
c001f94d:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c001f952:	c1 e2 06             	shl    edx,0x6
c001f955:	83 e0 ba             	and    eax,0xffffffba
c001f958:	5e                   	pop    esi
c001f959:	09 c8                	or     eax,ecx
c001f95b:	5f                   	pop    edi
c001f95c:	09 d0                	or     eax,edx
c001f95e:	a2 01 24 03 c0       	mov    ds:0xc0032401,al
c001f963:	c3                   	ret    

c001f964 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f964:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f968:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f96c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f970:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f974:	c3                   	ret    

c001f975 <Vm::fpuAbs(unsigned long long)>:
c001f975:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f979:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f97d:	c3                   	ret    

c001f97e <Vm::fpuChs(unsigned long long)>:
c001f97e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f982:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f986:	f7 d8                	neg    eax
c001f988:	83 d2 00             	adc    edx,0x0
c001f98b:	f7 da                	neg    edx
c001f98d:	c3                   	ret    

c001f98e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f98e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f992:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f997:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f99b:	eb c7                	jmp    c001f964 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f99d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f99d:	53                   	push   ebx
c001f99e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9a6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9ae:	0f af ca             	imul   ecx,edx
c001f9b1:	0f af d8             	imul   ebx,eax
c001f9b4:	f7 e2                	mul    edx
c001f9b6:	01 d9                	add    ecx,ebx
c001f9b8:	5b                   	pop    ebx
c001f9b9:	01 ca                	add    edx,ecx
c001f9bb:	c3                   	ret    

c001f9bc <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f9bc:	83 ec 0c             	sub    esp,0xc
c001f9bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9cf:	e8 d0 77 00 00       	call   c00271a4 <__udivdi3>
c001f9d4:	83 c4 1c             	add    esp,0x1c
c001f9d7:	c3                   	ret    

c001f9d8 <Vm::fpuSquare(unsigned long long)>:
c001f9d8:	50                   	push   eax
c001f9d9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9e1:	52                   	push   edx
c001f9e2:	50                   	push   eax
c001f9e3:	52                   	push   edx
c001f9e4:	50                   	push   eax
c001f9e5:	e8 b3 ff ff ff       	call   c001f99d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9ea:	83 c4 14             	add    esp,0x14
c001f9ed:	c3                   	ret    

c001f9ee <Vm::fpuGetReg(int)>:
c001f9ee:	83 ec 0c             	sub    esp,0xc
c001f9f1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9f6:	76 10                	jbe    c001fa08 <Vm::fpuGetReg(int)+0x1a>
c001f9f8:	83 ec 0c             	sub    esp,0xc
c001f9fb:	68 06 d0 02 c0       	push   0xc002d006
c001fa00:	e8 ac a8 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001fa05:	83 c4 10             	add    esp,0x10
c001fa08:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c001fa0d:	b9 08 00 00 00       	mov    ecx,0x8
c001fa12:	c0 e8 03             	shr    al,0x3
c001fa15:	83 e0 07             	and    eax,0x7
c001fa18:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa1c:	99                   	cdq    
c001fa1d:	f7 f9                	idiv   ecx
c001fa1f:	8b 04 d5 04 24 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdbfc]
c001fa26:	8b 14 d5 08 24 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdbf8]
c001fa2d:	83 c4 0c             	add    esp,0xc
c001fa30:	c3                   	ret    

c001fa31 <Vm::fpuSetReg(int, unsigned long long)>:
c001fa31:	57                   	push   edi
c001fa32:	56                   	push   esi
c001fa33:	52                   	push   edx
c001fa34:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa38:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa3c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa41:	76 10                	jbe    c001fa53 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa43:	83 ec 0c             	sub    esp,0xc
c001fa46:	68 19 d0 02 c0       	push   0xc002d019
c001fa4b:	e8 61 a8 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c001fa50:	83 c4 10             	add    esp,0x10
c001fa53:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c001fa58:	b9 08 00 00 00       	mov    ecx,0x8
c001fa5d:	c0 e8 03             	shr    al,0x3
c001fa60:	83 e0 07             	and    eax,0x7
c001fa63:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa67:	99                   	cdq    
c001fa68:	f7 f9                	idiv   ecx
c001fa6a:	89 34 d5 04 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbfc],esi
c001fa71:	89 3c d5 08 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbf8],edi
c001fa78:	58                   	pop    eax
c001fa79:	5e                   	pop    esi
c001fa7a:	5f                   	pop    edi
c001fa7b:	c3                   	ret    

c001fa7c <Vm::fpuPush(unsigned long long)>:
c001fa7c:	a0 01 24 03 c0       	mov    al,ds:0xc0032401
c001fa81:	c0 e8 03             	shr    al,0x3
c001fa84:	83 e0 07             	and    eax,0x7
c001fa87:	83 c0 07             	add    eax,0x7
c001fa8a:	88 c2                	mov    dl,al
c001fa8c:	83 e0 07             	and    eax,0x7
c001fa8f:	83 e2 07             	and    edx,0x7
c001fa92:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa99:	8a 15 01 24 03 c0    	mov    dl,BYTE PTR ds:0xc0032401
c001fa9f:	83 e2 c7             	and    edx,0xffffffc7
c001faa2:	09 ca                	or     edx,ecx
c001faa4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001faa8:	88 15 01 24 03 c0    	mov    BYTE PTR ds:0xc0032401,dl
c001faae:	89 0c c5 08 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbf8],ecx
c001fab5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fab9:	89 14 c5 04 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbfc],edx
c001fac0:	a1 44 24 03 c0       	mov    eax,ds:0xc0032444
c001fac5:	83 f8 08             	cmp    eax,0x8
c001fac8:	75 08                	jne    c001fad2 <Vm::fpuPush(unsigned long long)+0x56>
c001faca:	80 0d 00 24 03 c0 40 	or     BYTE PTR ds:0xc0032400,0x40
c001fad1:	c3                   	ret    
c001fad2:	40                   	inc    eax
c001fad3:	a3 44 24 03 c0       	mov    ds:0xc0032444,eax
c001fad8:	c3                   	ret    

c001fad9 <Vm::fpuPop()>:
c001fad9:	8a 0d 01 24 03 c0    	mov    cl,BYTE PTR ds:0xc0032401
c001fadf:	53                   	push   ebx
c001fae0:	c0 e9 03             	shr    cl,0x3
c001fae3:	8a 1d 01 24 03 c0    	mov    bl,BYTE PTR ds:0xc0032401
c001fae9:	83 e1 07             	and    ecx,0x7
c001faec:	83 e3 c7             	and    ebx,0xffffffc7
c001faef:	8b 04 cd 04 24 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdbfc]
c001faf6:	8b 14 cd 08 24 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdbf8]
c001fafd:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001fb04:	83 e1 38             	and    ecx,0x38
c001fb07:	09 d9                	or     ecx,ebx
c001fb09:	88 0d 01 24 03 c0    	mov    BYTE PTR ds:0xc0032401,cl
c001fb0f:	8b 0d 44 24 03 c0    	mov    ecx,DWORD PTR ds:0xc0032444
c001fb15:	85 c9                	test   ecx,ecx
c001fb17:	74 09                	je     c001fb22 <Vm::fpuPop()+0x49>
c001fb19:	49                   	dec    ecx
c001fb1a:	89 0d 44 24 03 c0    	mov    DWORD PTR ds:0xc0032444,ecx
c001fb20:	eb 07                	jmp    c001fb29 <Vm::fpuPop()+0x50>
c001fb22:	80 0d 00 24 03 c0 40 	or     BYTE PTR ds:0xc0032400,0x40
c001fb29:	5b                   	pop    ebx
c001fb2a:	c3                   	ret    

c001fb2b <Vm::x87Handler(regs*)>:
c001fb2b:	55                   	push   ebp
c001fb2c:	57                   	push   edi
c001fb2d:	56                   	push   esi
c001fb2e:	53                   	push   ebx
c001fb2f:	83 ec 1c             	sub    esp,0x1c
c001fb32:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb36:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb3b:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb3e:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb46:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb4a:	50                   	push   eax
c001fb4b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb4f:	50                   	push   eax
c001fb50:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb54:	50                   	push   eax
c001fb55:	53                   	push   ebx
c001fb56:	e8 23 9e ff ff       	call   c001997e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb5b:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb5e:	83 c4 10             	add    esp,0x10
c001fb61:	89 c6                	mov    esi,eax
c001fb63:	80 fa d9             	cmp    dl,0xd9
c001fb66:	0f 85 52 01 00 00    	jne    c001fcbe <Vm::x87Handler(regs*)+0x193>
c001fb6c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb70:	8d 50 20             	lea    edx,[eax+0x20]
c001fb73:	80 fa 0e             	cmp    dl,0xe
c001fb76:	0f 87 86 00 00 00    	ja     c001fc02 <Vm::x87Handler(regs*)+0xd7>
c001fb7c:	0f b6 d2             	movzx  edx,dl
c001fb7f:	ff 24 95 2c d0 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2fd4]
c001fb86:	e8 e7 fc ff ff       	call   c001f872 <Vm::fpuGet0()>
c001fb8b:	eb 05                	jmp    c001fb92 <Vm::x87Handler(regs*)+0x67>
c001fb8d:	e8 e5 fc ff ff       	call   c001f877 <Vm::fpuGet1()>
c001fb92:	57                   	push   edi
c001fb93:	57                   	push   edi
c001fb94:	52                   	push   edx
c001fb95:	50                   	push   eax
c001fb96:	e8 e1 fe ff ff       	call   c001fa7c <Vm::fpuPush(unsigned long long)>
c001fb9b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb9f:	83 c4 10             	add    esp,0x10
c001fba2:	b0 01                	mov    al,0x1
c001fba4:	e9 e3 09 00 00       	jmp    c002058c <Vm::x87Handler(regs*)+0xa61>
c001fba9:	83 ec 0c             	sub    esp,0xc
c001fbac:	6a 00                	push   0x0
c001fbae:	e8 3b fe ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fbb3:	59                   	pop    ecx
c001fbb4:	5e                   	pop    esi
c001fbb5:	52                   	push   edx
c001fbb6:	50                   	push   eax
c001fbb7:	e8 c2 fd ff ff       	call   c001f97e <Vm::fpuChs(unsigned long long)>
c001fbbc:	eb 13                	jmp    c001fbd1 <Vm::x87Handler(regs*)+0xa6>
c001fbbe:	83 ec 0c             	sub    esp,0xc
c001fbc1:	6a 00                	push   0x0
c001fbc3:	e8 26 fe ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fbc8:	5f                   	pop    edi
c001fbc9:	5d                   	pop    ebp
c001fbca:	52                   	push   edx
c001fbcb:	50                   	push   eax
c001fbcc:	e8 a4 fd ff ff       	call   c001f975 <Vm::fpuAbs(unsigned long long)>
c001fbd1:	83 c4 0c             	add    esp,0xc
c001fbd4:	52                   	push   edx
c001fbd5:	50                   	push   eax
c001fbd6:	6a 00                	push   0x0
c001fbd8:	e8 54 fe ff ff       	call   c001fa31 <Vm::fpuSetReg(int, unsigned long long)>
c001fbdd:	eb bc                	jmp    c001fb9b <Vm::x87Handler(regs*)+0x70>
c001fbdf:	e8 d3 fc ff ff       	call   c001f8b7 <Vm::fpuGetLog210()>
c001fbe4:	eb ac                	jmp    c001fb92 <Vm::x87Handler(regs*)+0x67>
c001fbe6:	e8 9c fc ff ff       	call   c001f887 <Vm::fpuGetLog2E()>
c001fbeb:	eb a5                	jmp    c001fb92 <Vm::x87Handler(regs*)+0x67>
c001fbed:	e8 8d fc ff ff       	call   c001f87f <Vm::fpuGetPi()>
c001fbf2:	eb 9e                	jmp    c001fb92 <Vm::x87Handler(regs*)+0x67>
c001fbf4:	e8 d6 fc ff ff       	call   c001f8cf <Vm::fpuGetLog102()>
c001fbf9:	eb 97                	jmp    c001fb92 <Vm::x87Handler(regs*)+0x67>
c001fbfb:	e8 9f fc ff ff       	call   c001f89f <Vm::fpuGetLogE2()>
c001fc00:	eb 90                	jmp    c001fb92 <Vm::x87Handler(regs*)+0x67>
c001fc02:	8d 50 40             	lea    edx,[eax+0x40]
c001fc05:	80 fa 07             	cmp    dl,0x7
c001fc08:	77 15                	ja     c001fc1f <Vm::x87Handler(regs*)+0xf4>
c001fc0a:	83 ec 0c             	sub    esp,0xc
c001fc0d:	2d c0 00 00 00       	sub    eax,0xc0
c001fc12:	50                   	push   eax
c001fc13:	e8 d6 fd ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fc18:	59                   	pop    ecx
c001fc19:	5e                   	pop    esi
c001fc1a:	e9 75 ff ff ff       	jmp    c001fb94 <Vm::x87Handler(regs*)+0x69>
c001fc1f:	8d 50 38             	lea    edx,[eax+0x38]
c001fc22:	80 fa 07             	cmp    dl,0x7
c001fc25:	77 3c                	ja     c001fc63 <Vm::x87Handler(regs*)+0x138>
c001fc27:	83 ec 0c             	sub    esp,0xc
c001fc2a:	2d c8 00 00 00       	sub    eax,0xc8
c001fc2f:	50                   	push   eax
c001fc30:	e8 b9 fd ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fc35:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc3c:	89 c6                	mov    esi,eax
c001fc3e:	89 d7                	mov    edi,edx
c001fc40:	e8 a9 fd ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fc45:	83 c4 0c             	add    esp,0xc
c001fc48:	52                   	push   edx
c001fc49:	50                   	push   eax
c001fc4a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc4e:	2d c8 00 00 00       	sub    eax,0xc8
c001fc53:	50                   	push   eax
c001fc54:	e8 d8 fd ff ff       	call   c001fa31 <Vm::fpuSetReg(int, unsigned long long)>
c001fc59:	83 c4 0c             	add    esp,0xc
c001fc5c:	57                   	push   edi
c001fc5d:	56                   	push   esi
c001fc5e:	e9 73 ff ff ff       	jmp    c001fbd6 <Vm::x87Handler(regs*)+0xab>
c001fc63:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc67:	84 d2                	test   dl,dl
c001fc69:	75 0f                	jne    c001fc7a <Vm::x87Handler(regs*)+0x14f>
c001fc6b:	83 ec 0c             	sub    esp,0xc
c001fc6e:	ff 36                	push   DWORD PTR [esi]
c001fc70:	e8 c8 fa ff ff       	call   c001f73d <Vm::fpu32ToInternal(unsigned int)>
c001fc75:	e9 bf 00 00 00       	jmp    c001fd39 <Vm::x87Handler(regs*)+0x20e>
c001fc7a:	80 fa 03             	cmp    dl,0x3
c001fc7d:	75 13                	jne    c001fc92 <Vm::x87Handler(regs*)+0x167>
c001fc7f:	e8 55 fe ff ff       	call   c001fad9 <Vm::fpuPop()>
c001fc84:	55                   	push   ebp
c001fc85:	55                   	push   ebp
c001fc86:	52                   	push   edx
c001fc87:	50                   	push   eax
c001fc88:	e8 4c fa ff ff       	call   c001f6d9 <Vm::fpuInternalTo32(unsigned long long)>
c001fc8d:	e9 88 00 00 00       	jmp    c001fd1a <Vm::x87Handler(regs*)+0x1ef>
c001fc92:	80 fa 05             	cmp    dl,0x5
c001fc95:	75 0e                	jne    c001fca5 <Vm::x87Handler(regs*)+0x17a>
c001fc97:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc9a:	66 a3 02 24 03 c0    	mov    ds:0xc0032402,ax
c001fca0:	e9 df 00 00 00       	jmp    c001fd84 <Vm::x87Handler(regs*)+0x259>
c001fca5:	31 c0                	xor    eax,eax
c001fca7:	80 fa 07             	cmp    dl,0x7
c001fcaa:	0f 85 dc 08 00 00    	jne    c002058c <Vm::x87Handler(regs*)+0xa61>
c001fcb0:	66 a1 02 24 03 c0    	mov    ax,ds:0xc0032402
c001fcb6:	66 89 06             	mov    WORD PTR [esi],ax
c001fcb9:	e9 c6 00 00 00       	jmp    c001fd84 <Vm::x87Handler(regs*)+0x259>
c001fcbe:	80 fa d8             	cmp    dl,0xd8
c001fcc1:	0f 84 c9 00 00 00    	je     c001fd90 <Vm::x87Handler(regs*)+0x265>
c001fcc7:	80 fa dc             	cmp    dl,0xdc
c001fcca:	0f 84 0d 02 00 00    	je     c001fedd <Vm::x87Handler(regs*)+0x3b2>
c001fcd0:	80 fa de             	cmp    dl,0xde
c001fcd3:	0f 84 cd 02 00 00    	je     c001ffa6 <Vm::x87Handler(regs*)+0x47b>
c001fcd9:	80 fa dd             	cmp    dl,0xdd
c001fcdc:	0f 84 5f 04 00 00    	je     c0020141 <Vm::x87Handler(regs*)+0x616>
c001fce2:	80 fa da             	cmp    dl,0xda
c001fce5:	0f 84 24 05 00 00    	je     c002020f <Vm::x87Handler(regs*)+0x6e4>
c001fceb:	80 fa df             	cmp    dl,0xdf
c001fcee:	0f 84 68 05 00 00    	je     c002025c <Vm::x87Handler(regs*)+0x731>
c001fcf4:	31 c0                	xor    eax,eax
c001fcf6:	80 fa db             	cmp    dl,0xdb
c001fcf9:	0f 85 8d 08 00 00    	jne    c002058c <Vm::x87Handler(regs*)+0xa61>
c001fcff:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd03:	80 fa 03             	cmp    dl,0x3
c001fd06:	0f 85 70 06 00 00    	jne    c002037c <Vm::x87Handler(regs*)+0x851>
c001fd0c:	e8 c8 fd ff ff       	call   c001fad9 <Vm::fpuPop()>
c001fd11:	55                   	push   ebp
c001fd12:	55                   	push   ebp
c001fd13:	52                   	push   edx
c001fd14:	50                   	push   eax
c001fd15:	e8 71 fa ff ff       	call   c001f78b <Vm::fpuFloatToLong(unsigned long long)>
c001fd1a:	83 c4 10             	add    esp,0x10
c001fd1d:	89 06                	mov    DWORD PTR [esi],eax
c001fd1f:	eb 63                	jmp    c001fd84 <Vm::x87Handler(regs*)+0x259>
c001fd21:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd25:	84 d2                	test   dl,dl
c001fd27:	0f 85 e6 05 00 00    	jne    c0020313 <Vm::x87Handler(regs*)+0x7e8>
c001fd2d:	57                   	push   edi
c001fd2e:	57                   	push   edi
c001fd2f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd32:	ff 36                	push   DWORD PTR [esi]
c001fd34:	e8 49 fa ff ff       	call   c001f782 <Vm::fpu64ToInternal(unsigned long long)>
c001fd39:	5e                   	pop    esi
c001fd3a:	5f                   	pop    edi
c001fd3b:	52                   	push   edx
c001fd3c:	50                   	push   eax
c001fd3d:	e8 3a fd ff ff       	call   c001fa7c <Vm::fpuPush(unsigned long long)>
c001fd42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd46:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd49:	e9 51 fe ff ff       	jmp    c001fb9f <Vm::x87Handler(regs*)+0x74>
c001fd4e:	80 fa 03             	cmp    dl,0x3
c001fd51:	0f 85 d7 06 00 00    	jne    c002042e <Vm::x87Handler(regs*)+0x903>
c001fd57:	57                   	push   edi
c001fd58:	57                   	push   edi
c001fd59:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd5c:	ff 36                	push   DWORD PTR [esi]
c001fd5e:	e8 1f fa ff ff       	call   c001f782 <Vm::fpu64ToInternal(unsigned long long)>
c001fd63:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6a:	89 c6                	mov    esi,eax
c001fd6c:	89 d7                	mov    edi,edx
c001fd6e:	e8 7b fc ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fd73:	57                   	push   edi
c001fd74:	56                   	push   esi
c001fd75:	52                   	push   edx
c001fd76:	50                   	push   eax
c001fd77:	e8 95 fb ff ff       	call   c001f911 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd7c:	83 c4 20             	add    esp,0x20
c001fd7f:	e8 55 fd ff ff       	call   c001fad9 <Vm::fpuPop()>
c001fd84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd88:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd8b:	e9 12 fe ff ff       	jmp    c001fba2 <Vm::x87Handler(regs*)+0x77>
c001fd90:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd94:	8d 50 40             	lea    edx,[eax+0x40]
c001fd97:	80 fa 07             	cmp    dl,0x7
c001fd9a:	77 29                	ja     c001fdc5 <Vm::x87Handler(regs*)+0x29a>
c001fd9c:	83 ec 0c             	sub    esp,0xc
c001fd9f:	2d c0 00 00 00       	sub    eax,0xc0
c001fda4:	50                   	push   eax
c001fda5:	e8 44 fc ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fdaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdb1:	89 c6                	mov    esi,eax
c001fdb3:	89 d7                	mov    edi,edx
c001fdb5:	e8 34 fc ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fdba:	57                   	push   edi
c001fdbb:	56                   	push   esi
c001fdbc:	52                   	push   edx
c001fdbd:	50                   	push   eax
c001fdbe:	e8 a1 fb ff ff       	call   c001f964 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdc3:	eb 2f                	jmp    c001fdf4 <Vm::x87Handler(regs*)+0x2c9>
c001fdc5:	8d 50 38             	lea    edx,[eax+0x38]
c001fdc8:	80 fa 07             	cmp    dl,0x7
c001fdcb:	77 2f                	ja     c001fdfc <Vm::x87Handler(regs*)+0x2d1>
c001fdcd:	83 ec 0c             	sub    esp,0xc
c001fdd0:	2d c8 00 00 00       	sub    eax,0xc8
c001fdd5:	50                   	push   eax
c001fdd6:	e8 13 fc ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fddb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fde2:	89 c6                	mov    esi,eax
c001fde4:	89 d7                	mov    edi,edx
c001fde6:	e8 03 fc ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fdeb:	57                   	push   edi
c001fdec:	56                   	push   esi
c001fded:	52                   	push   edx
c001fdee:	50                   	push   eax
c001fdef:	e8 a9 fb ff ff       	call   c001f99d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdf4:	83 c4 1c             	add    esp,0x1c
c001fdf7:	e9 d8 fd ff ff       	jmp    c001fbd4 <Vm::x87Handler(regs*)+0xa9>
c001fdfc:	8d 50 30             	lea    edx,[eax+0x30]
c001fdff:	80 fa 07             	cmp    dl,0x7
c001fe02:	77 0d                	ja     c001fe11 <Vm::x87Handler(regs*)+0x2e6>
c001fe04:	83 ec 0c             	sub    esp,0xc
c001fe07:	2d d0 00 00 00       	sub    eax,0xd0
c001fe0c:	e9 99 03 00 00       	jmp    c00201aa <Vm::x87Handler(regs*)+0x67f>
c001fe11:	8d 50 28             	lea    edx,[eax+0x28]
c001fe14:	80 fa 07             	cmp    dl,0x7
c001fe17:	77 0d                	ja     c001fe26 <Vm::x87Handler(regs*)+0x2fb>
c001fe19:	83 ec 0c             	sub    esp,0xc
c001fe1c:	2d d8 00 00 00       	sub    eax,0xd8
c001fe21:	e9 c0 03 00 00       	jmp    c00201e6 <Vm::x87Handler(regs*)+0x6bb>
c001fe26:	8d 50 20             	lea    edx,[eax+0x20]
c001fe29:	80 fa 07             	cmp    dl,0x7
c001fe2c:	77 1b                	ja     c001fe49 <Vm::x87Handler(regs*)+0x31e>
c001fe2e:	83 ec 0c             	sub    esp,0xc
c001fe31:	2d e0 00 00 00       	sub    eax,0xe0
c001fe36:	50                   	push   eax
c001fe37:	e8 b2 fb ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fe3c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe43:	89 c6                	mov    esi,eax
c001fe45:	89 d7                	mov    edi,edx
c001fe47:	eb 22                	jmp    c001fe6b <Vm::x87Handler(regs*)+0x340>
c001fe49:	8d 50 18             	lea    edx,[eax+0x18]
c001fe4c:	80 fa 07             	cmp    dl,0x7
c001fe4f:	77 2d                	ja     c001fe7e <Vm::x87Handler(regs*)+0x353>
c001fe51:	83 ec 0c             	sub    esp,0xc
c001fe54:	6a 00                	push   0x0
c001fe56:	e8 93 fb ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fe5b:	89 c6                	mov    esi,eax
c001fe5d:	89 d7                	mov    edi,edx
c001fe5f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe63:	2d e8 00 00 00       	sub    eax,0xe8
c001fe68:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe6b:	e8 7e fb ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fe70:	57                   	push   edi
c001fe71:	56                   	push   esi
c001fe72:	52                   	push   edx
c001fe73:	50                   	push   eax
c001fe74:	e8 15 fb ff ff       	call   c001f98e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe79:	e9 76 ff ff ff       	jmp    c001fdf4 <Vm::x87Handler(regs*)+0x2c9>
c001fe7e:	8d 50 10             	lea    edx,[eax+0x10]
c001fe81:	80 fa 07             	cmp    dl,0x7
c001fe84:	77 1b                	ja     c001fea1 <Vm::x87Handler(regs*)+0x376>
c001fe86:	83 ec 0c             	sub    esp,0xc
c001fe89:	2d f0 00 00 00       	sub    eax,0xf0
c001fe8e:	50                   	push   eax
c001fe8f:	e8 5a fb ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fe94:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe9b:	89 c6                	mov    esi,eax
c001fe9d:	89 d7                	mov    edi,edx
c001fe9f:	eb 22                	jmp    c001fec3 <Vm::x87Handler(regs*)+0x398>
c001fea1:	3c f7                	cmp    al,0xf7
c001fea3:	0f 86 d1 03 00 00    	jbe    c002027a <Vm::x87Handler(regs*)+0x74f>
c001fea9:	83 ec 0c             	sub    esp,0xc
c001feac:	6a 00                	push   0x0
c001feae:	e8 3b fb ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001feb3:	89 c6                	mov    esi,eax
c001feb5:	89 d7                	mov    edi,edx
c001feb7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001febb:	2d f8 00 00 00       	sub    eax,0xf8
c001fec0:	89 04 24             	mov    DWORD PTR [esp],eax
c001fec3:	e8 26 fb ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fec8:	57                   	push   edi
c001fec9:	56                   	push   esi
c001feca:	52                   	push   edx
c001fecb:	50                   	push   eax
c001fecc:	e8 eb fa ff ff       	call   c001f9bc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fed1:	83 c4 1c             	add    esp,0x1c
c001fed4:	52                   	push   edx
c001fed5:	50                   	push   eax
c001fed6:	6a 00                	push   0x0
c001fed8:	e9 51 02 00 00       	jmp    c002012e <Vm::x87Handler(regs*)+0x603>
c001fedd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fee1:	8d 50 40             	lea    edx,[eax+0x40]
c001fee4:	80 fa 07             	cmp    dl,0x7
c001fee7:	77 37                	ja     c001ff20 <Vm::x87Handler(regs*)+0x3f5>
c001fee9:	83 ec 0c             	sub    esp,0xc
c001feec:	2d c0 00 00 00       	sub    eax,0xc0
c001fef1:	50                   	push   eax
c001fef2:	e8 f7 fa ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001fef7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fefe:	89 c6                	mov    esi,eax
c001ff00:	89 d7                	mov    edi,edx
c001ff02:	e8 e7 fa ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001ff07:	57                   	push   edi
c001ff08:	56                   	push   esi
c001ff09:	52                   	push   edx
c001ff0a:	50                   	push   eax
c001ff0b:	e8 54 fa ff ff       	call   c001f964 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff10:	83 c4 1c             	add    esp,0x1c
c001ff13:	52                   	push   edx
c001ff14:	50                   	push   eax
c001ff15:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff19:	2d c0 00 00 00       	sub    eax,0xc0
c001ff1e:	eb 3d                	jmp    c001ff5d <Vm::x87Handler(regs*)+0x432>
c001ff20:	8d 50 38             	lea    edx,[eax+0x38]
c001ff23:	80 fa 07             	cmp    dl,0x7
c001ff26:	77 3b                	ja     c001ff63 <Vm::x87Handler(regs*)+0x438>
c001ff28:	83 ec 0c             	sub    esp,0xc
c001ff2b:	2d c8 00 00 00       	sub    eax,0xc8
c001ff30:	50                   	push   eax
c001ff31:	e8 b8 fa ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001ff36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff3d:	89 c6                	mov    esi,eax
c001ff3f:	89 d7                	mov    edi,edx
c001ff41:	e8 a8 fa ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001ff46:	57                   	push   edi
c001ff47:	56                   	push   esi
c001ff48:	52                   	push   edx
c001ff49:	50                   	push   eax
c001ff4a:	e8 4e fa ff ff       	call   c001f99d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff4f:	83 c4 1c             	add    esp,0x1c
c001ff52:	52                   	push   edx
c001ff53:	50                   	push   eax
c001ff54:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff58:	2d c8 00 00 00       	sub    eax,0xc8
c001ff5d:	50                   	push   eax
c001ff5e:	e9 75 fc ff ff       	jmp    c001fbd8 <Vm::x87Handler(regs*)+0xad>
c001ff63:	83 c0 18             	add    eax,0x18
c001ff66:	3c 07                	cmp    al,0x7
c001ff68:	0f 87 3b 04 00 00    	ja     c00203a9 <Vm::x87Handler(regs*)+0x87e>
c001ff6e:	83 ec 0c             	sub    esp,0xc
c001ff71:	6a 00                	push   0x0
c001ff73:	e8 76 fa ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001ff78:	89 c6                	mov    esi,eax
c001ff7a:	89 d7                	mov    edi,edx
c001ff7c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff80:	2d e8 00 00 00       	sub    eax,0xe8
c001ff85:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff88:	e8 61 fa ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001ff8d:	57                   	push   edi
c001ff8e:	56                   	push   esi
c001ff8f:	52                   	push   edx
c001ff90:	50                   	push   eax
c001ff91:	e8 f8 f9 ff ff       	call   c001f98e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff96:	83 c4 1c             	add    esp,0x1c
c001ff99:	52                   	push   edx
c001ff9a:	50                   	push   eax
c001ff9b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff9f:	2d e8 00 00 00       	sub    eax,0xe8
c001ffa4:	eb b7                	jmp    c001ff5d <Vm::x87Handler(regs*)+0x432>
c001ffa6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffaa:	8d 50 40             	lea    edx,[eax+0x40]
c001ffad:	80 fa 07             	cmp    dl,0x7
c001ffb0:	77 3a                	ja     c001ffec <Vm::x87Handler(regs*)+0x4c1>
c001ffb2:	83 ec 0c             	sub    esp,0xc
c001ffb5:	2d c0 00 00 00       	sub    eax,0xc0
c001ffba:	50                   	push   eax
c001ffbb:	e8 2e fa ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001ffc0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc7:	89 c6                	mov    esi,eax
c001ffc9:	89 d7                	mov    edi,edx
c001ffcb:	e8 1e fa ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c001ffd0:	57                   	push   edi
c001ffd1:	56                   	push   esi
c001ffd2:	52                   	push   edx
c001ffd3:	50                   	push   eax
c001ffd4:	e8 8b f9 ff ff       	call   c001f964 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ffd9:	83 c4 1c             	add    esp,0x1c
c001ffdc:	52                   	push   edx
c001ffdd:	50                   	push   eax
c001ffde:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffe2:	2d c0 00 00 00       	sub    eax,0xc0
c001ffe7:	e9 9e 01 00 00       	jmp    c002018a <Vm::x87Handler(regs*)+0x65f>
c001ffec:	8d 50 20             	lea    edx,[eax+0x20]
c001ffef:	80 fa 07             	cmp    dl,0x7
c001fff2:	77 3a                	ja     c002002e <Vm::x87Handler(regs*)+0x503>
c001fff4:	83 ec 0c             	sub    esp,0xc
c001fff7:	2d e0 00 00 00       	sub    eax,0xe0
c001fffc:	50                   	push   eax
c001fffd:	e8 ec f9 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020002:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020009:	89 c6                	mov    esi,eax
c002000b:	89 d7                	mov    edi,edx
c002000d:	e8 dc f9 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020012:	57                   	push   edi
c0020013:	56                   	push   esi
c0020014:	52                   	push   edx
c0020015:	50                   	push   eax
c0020016:	e8 73 f9 ff ff       	call   c001f98e <Vm::fpuSub(unsigned long long, unsigned long long)>
c002001b:	83 c4 1c             	add    esp,0x1c
c002001e:	52                   	push   edx
c002001f:	50                   	push   eax
c0020020:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020024:	2d e0 00 00 00       	sub    eax,0xe0
c0020029:	e9 5c 01 00 00       	jmp    c002018a <Vm::x87Handler(regs*)+0x65f>
c002002e:	8d 50 18             	lea    edx,[eax+0x18]
c0020031:	80 fa 07             	cmp    dl,0x7
c0020034:	77 3b                	ja     c0020071 <Vm::x87Handler(regs*)+0x546>
c0020036:	83 ec 0c             	sub    esp,0xc
c0020039:	6a 00                	push   0x0
c002003b:	e8 ae f9 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020040:	89 c6                	mov    esi,eax
c0020042:	89 d7                	mov    edi,edx
c0020044:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020048:	2d e8 00 00 00       	sub    eax,0xe8
c002004d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020050:	e8 99 f9 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020055:	57                   	push   edi
c0020056:	56                   	push   esi
c0020057:	52                   	push   edx
c0020058:	50                   	push   eax
c0020059:	e8 30 f9 ff ff       	call   c001f98e <Vm::fpuSub(unsigned long long, unsigned long long)>
c002005e:	83 c4 1c             	add    esp,0x1c
c0020061:	52                   	push   edx
c0020062:	50                   	push   eax
c0020063:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020067:	2d e8 00 00 00       	sub    eax,0xe8
c002006c:	e9 19 01 00 00       	jmp    c002018a <Vm::x87Handler(regs*)+0x65f>
c0020071:	8d 50 38             	lea    edx,[eax+0x38]
c0020074:	80 fa 07             	cmp    dl,0x7
c0020077:	77 37                	ja     c00200b0 <Vm::x87Handler(regs*)+0x585>
c0020079:	83 ec 0c             	sub    esp,0xc
c002007c:	2d c8 00 00 00       	sub    eax,0xc8
c0020081:	50                   	push   eax
c0020082:	e8 67 f9 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020087:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002008e:	89 c6                	mov    esi,eax
c0020090:	89 d7                	mov    edi,edx
c0020092:	e8 57 f9 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020097:	57                   	push   edi
c0020098:	56                   	push   esi
c0020099:	52                   	push   edx
c002009a:	50                   	push   eax
c002009b:	e8 fd f8 ff ff       	call   c001f99d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200a0:	83 c4 1c             	add    esp,0x1c
c00200a3:	52                   	push   edx
c00200a4:	50                   	push   eax
c00200a5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a9:	2d c8 00 00 00       	sub    eax,0xc8
c00200ae:	eb 7d                	jmp    c002012d <Vm::x87Handler(regs*)+0x602>
c00200b0:	3c f7                	cmp    al,0xf7
c00200b2:	76 38                	jbe    c00200ec <Vm::x87Handler(regs*)+0x5c1>
c00200b4:	83 ec 0c             	sub    esp,0xc
c00200b7:	6a 00                	push   0x0
c00200b9:	e8 30 f9 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00200be:	89 c6                	mov    esi,eax
c00200c0:	89 d7                	mov    edi,edx
c00200c2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c6:	2d f8 00 00 00       	sub    eax,0xf8
c00200cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00200ce:	e8 1b f9 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00200d3:	57                   	push   edi
c00200d4:	56                   	push   esi
c00200d5:	52                   	push   edx
c00200d6:	50                   	push   eax
c00200d7:	e8 e0 f8 ff ff       	call   c001f9bc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200dc:	83 c4 1c             	add    esp,0x1c
c00200df:	52                   	push   edx
c00200e0:	50                   	push   eax
c00200e1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e5:	2d f8 00 00 00       	sub    eax,0xf8
c00200ea:	eb 41                	jmp    c002012d <Vm::x87Handler(regs*)+0x602>
c00200ec:	8d 50 10             	lea    edx,[eax+0x10]
c00200ef:	80 fa 07             	cmp    dl,0x7
c00200f2:	0f 87 5a 01 00 00    	ja     c0020252 <Vm::x87Handler(regs*)+0x727>
c00200f8:	83 ec 0c             	sub    esp,0xc
c00200fb:	2d f0 00 00 00       	sub    eax,0xf0
c0020100:	50                   	push   eax
c0020101:	e8 e8 f8 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020106:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002010d:	89 c6                	mov    esi,eax
c002010f:	89 d7                	mov    edi,edx
c0020111:	e8 d8 f8 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020116:	57                   	push   edi
c0020117:	56                   	push   esi
c0020118:	52                   	push   edx
c0020119:	50                   	push   eax
c002011a:	e8 9d f8 ff ff       	call   c001f9bc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002011f:	83 c4 1c             	add    esp,0x1c
c0020122:	52                   	push   edx
c0020123:	50                   	push   eax
c0020124:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020128:	2d f0 00 00 00       	sub    eax,0xf0
c002012d:	50                   	push   eax
c002012e:	e8 fe f8 ff ff       	call   c001fa31 <Vm::fpuSetReg(int, unsigned long long)>
c0020133:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020137:	e8 9d f9 ff ff       	call   c001fad9 <Vm::fpuPop()>
c002013c:	e9 5e fa ff ff       	jmp    c001fb9f <Vm::x87Handler(regs*)+0x74>
c0020141:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020145:	8d 50 30             	lea    edx,[eax+0x30]
c0020148:	80 fa 07             	cmp    dl,0x7
c002014b:	77 1d                	ja     c002016a <Vm::x87Handler(regs*)+0x63f>
c002014d:	83 ec 0c             	sub    esp,0xc
c0020150:	6a 00                	push   0x0
c0020152:	e8 97 f8 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020157:	83 c4 0c             	add    esp,0xc
c002015a:	52                   	push   edx
c002015b:	50                   	push   eax
c002015c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020160:	2d d0 00 00 00       	sub    eax,0xd0
c0020165:	e9 f3 fd ff ff       	jmp    c001ff5d <Vm::x87Handler(regs*)+0x432>
c002016a:	8d 50 28             	lea    edx,[eax+0x28]
c002016d:	80 fa 07             	cmp    dl,0x7
c0020170:	77 28                	ja     c002019a <Vm::x87Handler(regs*)+0x66f>
c0020172:	83 ec 0c             	sub    esp,0xc
c0020175:	6a 00                	push   0x0
c0020177:	e8 72 f8 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c002017c:	83 c4 0c             	add    esp,0xc
c002017f:	52                   	push   edx
c0020180:	50                   	push   eax
c0020181:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020185:	2d d8 00 00 00       	sub    eax,0xd8
c002018a:	50                   	push   eax
c002018b:	e8 a1 f8 ff ff       	call   c001fa31 <Vm::fpuSetReg(int, unsigned long long)>
c0020190:	e8 44 f9 ff ff       	call   c001fad9 <Vm::fpuPop()>
c0020195:	e9 01 fa ff ff       	jmp    c001fb9b <Vm::x87Handler(regs*)+0x70>
c002019a:	8d 50 20             	lea    edx,[eax+0x20]
c002019d:	80 fa 07             	cmp    dl,0x7
c00201a0:	77 30                	ja     c00201d2 <Vm::x87Handler(regs*)+0x6a7>
c00201a2:	83 ec 0c             	sub    esp,0xc
c00201a5:	2d e0 00 00 00       	sub    eax,0xe0
c00201aa:	50                   	push   eax
c00201ab:	e8 3e f8 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00201b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b7:	89 c6                	mov    esi,eax
c00201b9:	89 d7                	mov    edi,edx
c00201bb:	e8 2e f8 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00201c0:	57                   	push   edi
c00201c1:	56                   	push   esi
c00201c2:	52                   	push   edx
c00201c3:	50                   	push   eax
c00201c4:	e8 48 f7 ff ff       	call   c001f911 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201c9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201cd:	e9 54 02 00 00       	jmp    c0020426 <Vm::x87Handler(regs*)+0x8fb>
c00201d2:	8d 50 18             	lea    edx,[eax+0x18]
c00201d5:	80 fa 07             	cmp    dl,0x7
c00201d8:	0f 87 43 fb ff ff    	ja     c001fd21 <Vm::x87Handler(regs*)+0x1f6>
c00201de:	83 ec 0c             	sub    esp,0xc
c00201e1:	2d e8 00 00 00       	sub    eax,0xe8
c00201e6:	50                   	push   eax
c00201e7:	e8 02 f8 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00201ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201f3:	89 c6                	mov    esi,eax
c00201f5:	89 d7                	mov    edi,edx
c00201f7:	e8 f2 f7 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00201fc:	57                   	push   edi
c00201fd:	56                   	push   esi
c00201fe:	52                   	push   edx
c00201ff:	50                   	push   eax
c0020200:	e8 0c f7 ff ff       	call   c001f911 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020205:	83 c4 20             	add    esp,0x20
c0020208:	e8 cc f8 ff ff       	call   c001fad9 <Vm::fpuPop()>
c002020d:	eb 62                	jmp    c0020271 <Vm::x87Handler(regs*)+0x746>
c002020f:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c0020213:	0f 85 0f 01 00 00    	jne    c0020328 <Vm::x87Handler(regs*)+0x7fd>
c0020219:	83 ec 0c             	sub    esp,0xc
c002021c:	6a 01                	push   0x1
c002021e:	e8 cb f7 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020223:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002022a:	89 c6                	mov    esi,eax
c002022c:	89 d7                	mov    edi,edx
c002022e:	e8 bb f7 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020233:	57                   	push   edi
c0020234:	56                   	push   esi
c0020235:	52                   	push   edx
c0020236:	50                   	push   eax
c0020237:	e8 d5 f6 ff ff       	call   c001f911 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002023c:	83 c4 20             	add    esp,0x20
c002023f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020243:	e8 91 f8 ff ff       	call   c001fad9 <Vm::fpuPop()>
c0020248:	e8 8c f8 ff ff       	call   c001fad9 <Vm::fpuPop()>
c002024d:	e9 50 f9 ff ff       	jmp    c001fba2 <Vm::x87Handler(regs*)+0x77>
c0020252:	3c d9                	cmp    al,0xd9
c0020254:	0f 85 b5 02 00 00    	jne    c002050f <Vm::x87Handler(regs*)+0x9e4>
c002025a:	eb bd                	jmp    c0020219 <Vm::x87Handler(regs*)+0x6ee>
c002025c:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020260:	0f 85 ea 02 00 00    	jne    c0020550 <Vm::x87Handler(regs*)+0xa25>
c0020266:	0f b7 05 00 24 03 c0 	movzx  eax,WORD PTR ds:0xc0032400
c002026d:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020271:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020275:	e9 28 f9 ff ff       	jmp    c001fba2 <Vm::x87Handler(regs*)+0x77>
c002027a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002027e:	84 d2                	test   dl,dl
c0020280:	75 0f                	jne    c0020291 <Vm::x87Handler(regs*)+0x766>
c0020282:	83 ec 0c             	sub    esp,0xc
c0020285:	ff 36                	push   DWORD PTR [esi]
c0020287:	e8 b1 f4 ff ff       	call   c001f73d <Vm::fpu32ToInternal(unsigned int)>
c002028c:	e9 2c 01 00 00       	jmp    c00203bd <Vm::x87Handler(regs*)+0x892>
c0020291:	80 fa 01             	cmp    dl,0x1
c0020294:	75 0f                	jne    c00202a5 <Vm::x87Handler(regs*)+0x77a>
c0020296:	83 ec 0c             	sub    esp,0xc
c0020299:	ff 36                	push   DWORD PTR [esi]
c002029b:	e8 9d f4 ff ff       	call   c001f73d <Vm::fpu32ToInternal(unsigned int)>
c00202a0:	e9 81 02 00 00       	jmp    c0020526 <Vm::x87Handler(regs*)+0x9fb>
c00202a5:	80 fa 04             	cmp    dl,0x4
c00202a8:	75 0f                	jne    c00202b9 <Vm::x87Handler(regs*)+0x78e>
c00202aa:	83 ec 0c             	sub    esp,0xc
c00202ad:	ff 36                	push   DWORD PTR [esi]
c00202af:	e8 89 f4 ff ff       	call   c001f73d <Vm::fpu32ToInternal(unsigned int)>
c00202b4:	e9 86 01 00 00       	jmp    c002043f <Vm::x87Handler(regs*)+0x914>
c00202b9:	80 fa 05             	cmp    dl,0x5
c00202bc:	75 1b                	jne    c00202d9 <Vm::x87Handler(regs*)+0x7ae>
c00202be:	83 ec 0c             	sub    esp,0xc
c00202c1:	6a 00                	push   0x0
c00202c3:	e8 26 f7 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00202c8:	89 c7                	mov    edi,eax
c00202ca:	89 d5                	mov    ebp,edx
c00202cc:	58                   	pop    eax
c00202cd:	ff 36                	push   DWORD PTR [esi]
c00202cf:	e8 69 f4 ff ff       	call   c001f73d <Vm::fpu32ToInternal(unsigned int)>
c00202d4:	e9 a3 01 00 00       	jmp    c002047c <Vm::x87Handler(regs*)+0x951>
c00202d9:	80 fa 06             	cmp    dl,0x6
c00202dc:	75 0f                	jne    c00202ed <Vm::x87Handler(regs*)+0x7c2>
c00202de:	83 ec 0c             	sub    esp,0xc
c00202e1:	ff 36                	push   DWORD PTR [esi]
c00202e3:	e8 55 f4 ff ff       	call   c001f73d <Vm::fpu32ToInternal(unsigned int)>
c00202e8:	e9 ae 01 00 00       	jmp    c002049b <Vm::x87Handler(regs*)+0x970>
c00202ed:	31 c0                	xor    eax,eax
c00202ef:	80 fa 07             	cmp    dl,0x7
c00202f2:	0f 85 94 02 00 00    	jne    c002058c <Vm::x87Handler(regs*)+0xa61>
c00202f8:	83 ec 0c             	sub    esp,0xc
c00202fb:	6a 00                	push   0x0
c00202fd:	e8 ec f6 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020302:	89 c7                	mov    edi,eax
c0020304:	89 d5                	mov    ebp,edx
c0020306:	58                   	pop    eax
c0020307:	ff 36                	push   DWORD PTR [esi]
c0020309:	e8 2f f4 ff ff       	call   c001f73d <Vm::fpu32ToInternal(unsigned int)>
c002030e:	e9 cb 01 00 00       	jmp    c00204de <Vm::x87Handler(regs*)+0x9b3>
c0020313:	80 fa 03             	cmp    dl,0x3
c0020316:	0f 85 d3 01 00 00    	jne    c00204ef <Vm::x87Handler(regs*)+0x9c4>
c002031c:	e8 b8 f7 ff ff       	call   c001fad9 <Vm::fpuPop()>
c0020321:	51                   	push   ecx
c0020322:	51                   	push   ecx
c0020323:	e9 de 01 00 00       	jmp    c0020506 <Vm::x87Handler(regs*)+0x9db>
c0020328:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002032c:	80 fa 01             	cmp    dl,0x1
c002032f:	75 09                	jne    c002033a <Vm::x87Handler(regs*)+0x80f>
c0020331:	57                   	push   edi
c0020332:	57                   	push   edi
c0020333:	8b 06                	mov    eax,DWORD PTR [esi]
c0020335:	e9 e3 01 00 00       	jmp    c002051d <Vm::x87Handler(regs*)+0x9f2>
c002033a:	80 fa 04             	cmp    dl,0x4
c002033d:	75 12                	jne    c0020351 <Vm::x87Handler(regs*)+0x826>
c002033f:	31 d2                	xor    edx,edx
c0020341:	51                   	push   ecx
c0020342:	51                   	push   ecx
c0020343:	8b 06                	mov    eax,DWORD PTR [esi]
c0020345:	52                   	push   edx
c0020346:	50                   	push   eax
c0020347:	e8 d0 f4 ff ff       	call   c001f81c <Vm::fpuLongToFloat(long long)>
c002034c:	e9 ee 00 00 00       	jmp    c002043f <Vm::x87Handler(regs*)+0x914>
c0020351:	31 c0                	xor    eax,eax
c0020353:	80 fa 07             	cmp    dl,0x7
c0020356:	0f 85 30 02 00 00    	jne    c002058c <Vm::x87Handler(regs*)+0xa61>
c002035c:	83 ec 0c             	sub    esp,0xc
c002035f:	6a 00                	push   0x0
c0020361:	e8 88 f6 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020366:	89 c7                	mov    edi,eax
c0020368:	89 d5                	mov    ebp,edx
c002036a:	58                   	pop    eax
c002036b:	8b 06                	mov    eax,DWORD PTR [esi]
c002036d:	5a                   	pop    edx
c002036e:	31 d2                	xor    edx,edx
c0020370:	52                   	push   edx
c0020371:	50                   	push   eax
c0020372:	e8 a5 f4 ff ff       	call   c001f81c <Vm::fpuLongToFloat(long long)>
c0020377:	e9 62 01 00 00       	jmp    c00204de <Vm::x87Handler(regs*)+0x9b3>
c002037c:	84 d2                	test   dl,dl
c002037e:	75 0d                	jne    c002038d <Vm::x87Handler(regs*)+0x862>
c0020380:	31 d2                	xor    edx,edx
c0020382:	55                   	push   ebp
c0020383:	55                   	push   ebp
c0020384:	8b 06                	mov    eax,DWORD PTR [esi]
c0020386:	52                   	push   edx
c0020387:	50                   	push   eax
c0020388:	e9 d3 01 00 00       	jmp    c0020560 <Vm::x87Handler(regs*)+0xa35>
c002038d:	31 c0                	xor    eax,eax
c002038f:	80 fa 02             	cmp    dl,0x2
c0020392:	0f 85 f4 01 00 00    	jne    c002058c <Vm::x87Handler(regs*)+0xa61>
c0020398:	83 ec 0c             	sub    esp,0xc
c002039b:	6a 00                	push   0x0
c002039d:	e8 4c f6 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00203a2:	59                   	pop    ecx
c00203a3:	5f                   	pop    edi
c00203a4:	e9 6a f9 ff ff       	jmp    c001fd13 <Vm::x87Handler(regs*)+0x1e8>
c00203a9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203ad:	84 d2                	test   dl,dl
c00203af:	75 2a                	jne    c00203db <Vm::x87Handler(regs*)+0x8b0>
c00203b1:	50                   	push   eax
c00203b2:	50                   	push   eax
c00203b3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b6:	ff 36                	push   DWORD PTR [esi]
c00203b8:	e8 c5 f3 ff ff       	call   c001f782 <Vm::fpu64ToInternal(unsigned long long)>
c00203bd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203c4:	89 c6                	mov    esi,eax
c00203c6:	89 d7                	mov    edi,edx
c00203c8:	e8 21 f6 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00203cd:	57                   	push   edi
c00203ce:	56                   	push   esi
c00203cf:	52                   	push   edx
c00203d0:	50                   	push   eax
c00203d1:	e8 8e f5 ff ff       	call   c001f964 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203d6:	e9 64 01 00 00       	jmp    c002053f <Vm::x87Handler(regs*)+0xa14>
c00203db:	80 fa 01             	cmp    dl,0x1
c00203de:	75 11                	jne    c00203f1 <Vm::x87Handler(regs*)+0x8c6>
c00203e0:	50                   	push   eax
c00203e1:	50                   	push   eax
c00203e2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e5:	ff 36                	push   DWORD PTR [esi]
c00203e7:	e8 96 f3 ff ff       	call   c001f782 <Vm::fpu64ToInternal(unsigned long long)>
c00203ec:	e9 35 01 00 00       	jmp    c0020526 <Vm::x87Handler(regs*)+0x9fb>
c00203f1:	80 fa 02             	cmp    dl,0x2
c00203f4:	0f 85 54 f9 ff ff    	jne    c001fd4e <Vm::x87Handler(regs*)+0x223>
c00203fa:	55                   	push   ebp
c00203fb:	55                   	push   ebp
c00203fc:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203ff:	ff 36                	push   DWORD PTR [esi]
c0020401:	e8 7c f3 ff ff       	call   c001f782 <Vm::fpu64ToInternal(unsigned long long)>
c0020406:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002040d:	89 c6                	mov    esi,eax
c002040f:	89 d7                	mov    edi,edx
c0020411:	e8 d8 f5 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020416:	57                   	push   edi
c0020417:	56                   	push   esi
c0020418:	52                   	push   edx
c0020419:	50                   	push   eax
c002041a:	e8 f2 f4 ff ff       	call   c001f911 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002041f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020423:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020426:	83 c4 20             	add    esp,0x20
c0020429:	e9 74 f7 ff ff       	jmp    c001fba2 <Vm::x87Handler(regs*)+0x77>
c002042e:	80 fa 04             	cmp    dl,0x4
c0020431:	75 2a                	jne    c002045d <Vm::x87Handler(regs*)+0x932>
c0020433:	51                   	push   ecx
c0020434:	51                   	push   ecx
c0020435:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020438:	ff 36                	push   DWORD PTR [esi]
c002043a:	e8 43 f3 ff ff       	call   c001f782 <Vm::fpu64ToInternal(unsigned long long)>
c002043f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020446:	89 c6                	mov    esi,eax
c0020448:	89 d7                	mov    edi,edx
c002044a:	e8 9f f5 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c002044f:	57                   	push   edi
c0020450:	56                   	push   esi
c0020451:	52                   	push   edx
c0020452:	50                   	push   eax
c0020453:	e8 36 f5 ff ff       	call   c001f98e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020458:	e9 e2 00 00 00       	jmp    c002053f <Vm::x87Handler(regs*)+0xa14>
c002045d:	80 fa 05             	cmp    dl,0x5
c0020460:	75 28                	jne    c002048a <Vm::x87Handler(regs*)+0x95f>
c0020462:	83 ec 0c             	sub    esp,0xc
c0020465:	6a 00                	push   0x0
c0020467:	e8 82 f5 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c002046c:	89 c7                	mov    edi,eax
c002046e:	89 d5                	mov    ebp,edx
c0020470:	58                   	pop    eax
c0020471:	5a                   	pop    edx
c0020472:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020475:	ff 36                	push   DWORD PTR [esi]
c0020477:	e8 06 f3 ff ff       	call   c001f782 <Vm::fpu64ToInternal(unsigned long long)>
c002047c:	83 c4 10             	add    esp,0x10
c002047f:	55                   	push   ebp
c0020480:	57                   	push   edi
c0020481:	52                   	push   edx
c0020482:	50                   	push   eax
c0020483:	e8 06 f5 ff ff       	call   c001f98e <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020488:	eb 60                	jmp    c00204ea <Vm::x87Handler(regs*)+0x9bf>
c002048a:	80 fa 06             	cmp    dl,0x6
c002048d:	75 2a                	jne    c00204b9 <Vm::x87Handler(regs*)+0x98e>
c002048f:	51                   	push   ecx
c0020490:	51                   	push   ecx
c0020491:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020494:	ff 36                	push   DWORD PTR [esi]
c0020496:	e8 e7 f2 ff ff       	call   c001f782 <Vm::fpu64ToInternal(unsigned long long)>
c002049b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204a2:	89 c6                	mov    esi,eax
c00204a4:	89 d7                	mov    edi,edx
c00204a6:	e8 43 f5 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00204ab:	57                   	push   edi
c00204ac:	56                   	push   esi
c00204ad:	52                   	push   edx
c00204ae:	50                   	push   eax
c00204af:	e8 08 f5 ff ff       	call   c001f9bc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204b4:	e9 86 00 00 00       	jmp    c002053f <Vm::x87Handler(regs*)+0xa14>
c00204b9:	31 c0                	xor    eax,eax
c00204bb:	80 fa 07             	cmp    dl,0x7
c00204be:	0f 85 c8 00 00 00    	jne    c002058c <Vm::x87Handler(regs*)+0xa61>
c00204c4:	83 ec 0c             	sub    esp,0xc
c00204c7:	6a 00                	push   0x0
c00204c9:	e8 20 f5 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c00204ce:	89 c7                	mov    edi,eax
c00204d0:	89 d5                	mov    ebp,edx
c00204d2:	58                   	pop    eax
c00204d3:	5a                   	pop    edx
c00204d4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204d7:	ff 36                	push   DWORD PTR [esi]
c00204d9:	e8 a4 f2 ff ff       	call   c001f782 <Vm::fpu64ToInternal(unsigned long long)>
c00204de:	83 c4 10             	add    esp,0x10
c00204e1:	55                   	push   ebp
c00204e2:	57                   	push   edi
c00204e3:	52                   	push   edx
c00204e4:	50                   	push   eax
c00204e5:	e8 d2 f4 ff ff       	call   c001f9bc <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204ea:	83 c4 0c             	add    esp,0xc
c00204ed:	eb 53                	jmp    c0020542 <Vm::x87Handler(regs*)+0xa17>
c00204ef:	31 c0                	xor    eax,eax
c00204f1:	80 fa 02             	cmp    dl,0x2
c00204f4:	0f 85 92 00 00 00    	jne    c002058c <Vm::x87Handler(regs*)+0xa61>
c00204fa:	83 ec 0c             	sub    esp,0xc
c00204fd:	6a 00                	push   0x0
c00204ff:	e8 ea f4 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020504:	59                   	pop    ecx
c0020505:	5f                   	pop    edi
c0020506:	52                   	push   edx
c0020507:	50                   	push   eax
c0020508:	e8 27 f2 ff ff       	call   c001f734 <Vm::fpuInternalTo64(unsigned long long)>
c002050d:	eb 70                	jmp    c002057f <Vm::x87Handler(regs*)+0xa54>
c002050f:	31 c0                	xor    eax,eax
c0020511:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020516:	75 74                	jne    c002058c <Vm::x87Handler(regs*)+0xa61>
c0020518:	50                   	push   eax
c0020519:	50                   	push   eax
c002051a:	0f b7 06             	movzx  eax,WORD PTR [esi]
c002051d:	31 d2                	xor    edx,edx
c002051f:	52                   	push   edx
c0020520:	50                   	push   eax
c0020521:	e8 f6 f2 ff ff       	call   c001f81c <Vm::fpuLongToFloat(long long)>
c0020526:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002052d:	89 c6                	mov    esi,eax
c002052f:	89 d7                	mov    edi,edx
c0020531:	e8 b8 f4 ff ff       	call   c001f9ee <Vm::fpuGetReg(int)>
c0020536:	57                   	push   edi
c0020537:	56                   	push   esi
c0020538:	52                   	push   edx
c0020539:	50                   	push   eax
c002053a:	e8 5e f4 ff ff       	call   c001f99d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002053f:	83 c4 1c             	add    esp,0x1c
c0020542:	52                   	push   edx
c0020543:	50                   	push   eax
c0020544:	6a 00                	push   0x0
c0020546:	e8 e6 f4 ff ff       	call   c001fa31 <Vm::fpuSetReg(int, unsigned long long)>
c002054b:	e9 f2 f7 ff ff       	jmp    c001fd42 <Vm::x87Handler(regs*)+0x217>
c0020550:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020554:	80 fa 05             	cmp    dl,0x5
c0020557:	75 11                	jne    c002056a <Vm::x87Handler(regs*)+0xa3f>
c0020559:	55                   	push   ebp
c002055a:	55                   	push   ebp
c002055b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002055e:	ff 36                	push   DWORD PTR [esi]
c0020560:	e8 81 f2 ff ff       	call   c001f7e6 <Vm::fpuULongToFloat(unsigned long long)>
c0020565:	e9 cf f7 ff ff       	jmp    c001fd39 <Vm::x87Handler(regs*)+0x20e>
c002056a:	31 c0                	xor    eax,eax
c002056c:	80 fa 07             	cmp    dl,0x7
c002056f:	75 1b                	jne    c002058c <Vm::x87Handler(regs*)+0xa61>
c0020571:	e8 63 f5 ff ff       	call   c001fad9 <Vm::fpuPop()>
c0020576:	51                   	push   ecx
c0020577:	51                   	push   ecx
c0020578:	52                   	push   edx
c0020579:	50                   	push   eax
c002057a:	e8 0c f2 ff ff       	call   c001f78b <Vm::fpuFloatToLong(unsigned long long)>
c002057f:	83 c4 10             	add    esp,0x10
c0020582:	89 06                	mov    DWORD PTR [esi],eax
c0020584:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020587:	e9 f8 f7 ff ff       	jmp    c001fd84 <Vm::x87Handler(regs*)+0x259>
c002058c:	83 c4 1c             	add    esp,0x1c
c002058f:	5b                   	pop    ebx
c0020590:	5e                   	pop    esi
c0020591:	5f                   	pop    edi
c0020592:	5d                   	pop    ebp
c0020593:	c3                   	ret    

c0020594 <__static_initialization_and_destruction_0(int, int)>:
c0020594:	83 ec 0c             	sub    esp,0xc
c0020597:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c002059c:	75 1a                	jne    c00205b8 <__static_initialization_and_destruction_0(int, int)+0x24>
c002059e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205a6:	75 10                	jne    c00205b8 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205a8:	83 ec 0c             	sub    esp,0xc
c00205ab:	68 00 24 03 c0       	push   0xc0032400
c00205b0:	e8 37 90 00 00       	call   c00295ec <Vm::_FPUState::_FPUState()>
c00205b5:	83 c4 10             	add    esp,0x10
c00205b8:	90                   	nop
c00205b9:	83 c4 0c             	add    esp,0xc
c00205bc:	c3                   	ret    

c00205bd <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00205bd:	83 ec 0c             	sub    esp,0xc
c00205c0:	83 ec 08             	sub    esp,0x8
c00205c3:	68 ff ff 00 00       	push   0xffff
c00205c8:	6a 01                	push   0x1
c00205ca:	e8 c5 ff ff ff       	call   c0020594 <__static_initialization_and_destruction_0(int, int)>
c00205cf:	83 c4 10             	add    esp,0x10
c00205d2:	83 c4 0c             	add    esp,0xc
c00205d5:	c3                   	ret    

c00205d6 <FAT::getName()>:
c00205d6:	b8 68 d0 02 c0       	mov    eax,0xc002d068
c00205db:	c3                   	ret    

c00205dc <FAT::tell(void*, unsigned long long*)>:
c00205dc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205e1:	75 06                	jne    c00205e9 <FAT::tell(void*, unsigned long long*)+0xd>
c00205e3:	b8 04 00 00 00       	mov    eax,0x4
c00205e8:	c3                   	ret    
c00205e9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205ee:	75 06                	jne    c00205f6 <FAT::tell(void*, unsigned long long*)+0x1a>
c00205f0:	b8 04 00 00 00       	mov    eax,0x4
c00205f5:	c3                   	ret    
c00205f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205fa:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205fd:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020600:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020604:	89 01                	mov    DWORD PTR [ecx],eax
c0020606:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020609:	b8 00 00 00 00       	mov    eax,0x0
c002060e:	c3                   	ret    
c002060f:	90                   	nop

c0020610 <FAT::stat(void*, unsigned long long*)>:
c0020610:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020615:	75 06                	jne    c002061d <FAT::stat(void*, unsigned long long*)+0xd>
c0020617:	b8 04 00 00 00       	mov    eax,0x4
c002061c:	c3                   	ret    
c002061d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020622:	75 06                	jne    c002062a <FAT::stat(void*, unsigned long long*)+0x1a>
c0020624:	b8 04 00 00 00       	mov    eax,0x4
c0020629:	c3                   	ret    
c002062a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002062e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020631:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020634:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020638:	89 01                	mov    DWORD PTR [ecx],eax
c002063a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002063d:	b8 00 00 00 00       	mov    eax,0x0
c0020642:	c3                   	ret    
c0020643:	90                   	nop

c0020644 <FAT::~FAT()>:
c0020644:	83 ec 0c             	sub    esp,0xc
c0020647:	ba f8 d0 02 c0       	mov    edx,0xc002d0f8
c002064c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020650:	89 10                	mov    DWORD PTR [eax],edx
c0020652:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020656:	83 ec 0c             	sub    esp,0xc
c0020659:	50                   	push   eax
c002065a:	e8 4b 25 ff ff       	call   c0012baa <Filesystem::~Filesystem()>
c002065f:	83 c4 10             	add    esp,0x10
c0020662:	90                   	nop
c0020663:	83 c4 0c             	add    esp,0xc
c0020666:	c3                   	ret    
c0020667:	90                   	nop

c0020668 <FAT::~FAT()>:
c0020668:	83 ec 0c             	sub    esp,0xc
c002066b:	83 ec 0c             	sub    esp,0xc
c002066e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020672:	e8 cd ff ff ff       	call   c0020644 <FAT::~FAT()>
c0020677:	83 c4 10             	add    esp,0x10
c002067a:	83 ec 08             	sub    esp,0x8
c002067d:	6a 08                	push   0x8
c002067f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020683:	e8 13 21 ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0020688:	83 c4 10             	add    esp,0x10
c002068b:	83 c4 0c             	add    esp,0xc
c002068e:	c3                   	ret    
c002068f:	90                   	nop

c0020690 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020690:	83 ec 1c             	sub    esp,0x1c
c0020693:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c002069a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002069f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206a3:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c00206aa:	83 f8 ff             	cmp    eax,0xffffffff
c00206ad:	75 34                	jne    c00206e3 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206af:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206b3:	88 c2                	mov    dl,al
c00206b5:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c00206ba:	01 d0                	add    eax,edx
c00206bc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206c0:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c00206c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206ca:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c00206d1:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c00206d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00206da:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c00206e1:	eb 17                	jmp    c00206fa <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206e3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206e7:	88 c2                	mov    dl,al
c00206e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206ed:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c00206f4:	01 d0                	add    eax,edx
c00206f6:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206fa:	83 ec 04             	sub    esp,0x4
c00206fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020701:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020705:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020709:	50                   	push   eax
c002070a:	e8 ef 65 fe ff       	call   c0006cfe <f_getlabel>
c002070f:	83 c4 10             	add    esp,0x10
c0020712:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020716:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002071b:	75 07                	jne    c0020724 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c002071d:	b8 00 00 00 00       	mov    eax,0x0
c0020722:	eb 05                	jmp    c0020729 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020724:	b8 01 00 00 00       	mov    eax,0x1
c0020729:	83 c4 1c             	add    esp,0x1c
c002072c:	c3                   	ret    
c002072d:	90                   	nop

c002072e <FAT::setlabel(LogicalDisk*, int, char*)>:
c002072e:	57                   	push   edi
c002072f:	83 ec 58             	sub    esp,0x58
c0020732:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c002073a:	8d 54 24 10          	lea    edx,[esp+0x10]
c002073e:	b9 0f 00 00 00       	mov    ecx,0xf
c0020743:	b8 00 00 00 00       	mov    eax,0x0
c0020748:	fc                   	cld    
c0020749:	89 d7                	mov    edi,edx
c002074b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002074d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020751:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020758:	83 f8 ff             	cmp    eax,0xffffffff
c002075b:	75 34                	jne    c0020791 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c002075d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020761:	88 c2                	mov    dl,al
c0020763:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020768:	01 d0                	add    eax,edx
c002076a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002076e:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c0020774:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020778:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c002077f:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020784:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020788:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c002078f:	eb 17                	jmp    c00207a8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020791:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020795:	88 c2                	mov    dl,al
c0020797:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002079b:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c00207a2:	01 d0                	add    eax,edx
c00207a4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207a8:	83 ec 08             	sub    esp,0x8
c00207ab:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207af:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207b3:	50                   	push   eax
c00207b4:	e8 93 01 fe ff       	call   c000094c <strcat>
c00207b9:	83 c4 10             	add    esp,0x10
c00207bc:	83 ec 0c             	sub    esp,0xc
c00207bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207c3:	50                   	push   eax
c00207c4:	e8 23 67 fe ff       	call   c0006eec <f_setlabel>
c00207c9:	83 c4 10             	add    esp,0x10
c00207cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00207d0:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00207d5:	75 07                	jne    c00207de <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00207d7:	b8 00 00 00 00       	mov    eax,0x0
c00207dc:	eb 05                	jmp    c00207e3 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00207de:	b8 01 00 00 00       	mov    eax,0x1
c00207e3:	83 c4 58             	add    esp,0x58
c00207e6:	5f                   	pop    edi
c00207e7:	c3                   	ret    

c00207e8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207e8:	83 ec 2c             	sub    esp,0x2c
c00207eb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207f3:	83 ec 08             	sub    esp,0x8
c00207f6:	68 8c d0 02 c0       	push   0xc002d08c
c00207fb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207ff:	e8 94 00 fe ff       	call   c0000898 <strcmp>
c0020804:	83 c4 10             	add    esp,0x10
c0020807:	85 c0                	test   eax,eax
c0020809:	0f 94 c0             	sete   al
c002080c:	84 c0                	test   al,al
c002080e:	74 0d                	je     c002081d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020810:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020818:	e9 a6 00 00 00       	jmp    c00208c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002081d:	83 ec 08             	sub    esp,0x8
c0020820:	68 7e d0 02 c0       	push   0xc002d07e
c0020825:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020829:	e8 6a 00 fe ff       	call   c0000898 <strcmp>
c002082e:	83 c4 10             	add    esp,0x10
c0020831:	85 c0                	test   eax,eax
c0020833:	0f 94 c0             	sete   al
c0020836:	84 c0                	test   al,al
c0020838:	74 0a                	je     c0020844 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c002083a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020842:	eb 7f                	jmp    c00208c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020844:	83 ec 08             	sub    esp,0x8
c0020847:	68 84 d0 02 c0       	push   0xc002d084
c002084c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020850:	e8 43 00 fe ff       	call   c0000898 <strcmp>
c0020855:	83 c4 10             	add    esp,0x10
c0020858:	85 c0                	test   eax,eax
c002085a:	0f 94 c0             	sete   al
c002085d:	84 c0                	test   al,al
c002085f:	74 0a                	je     c002086b <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020861:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020869:	eb 58                	jmp    c00208c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002086b:	83 ec 08             	sub    esp,0x8
c002086e:	68 4c 9d 02 c0       	push   0xc0029d4c
c0020873:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020877:	e8 1c 00 fe ff       	call   c0000898 <strcmp>
c002087c:	83 c4 10             	add    esp,0x10
c002087f:	85 c0                	test   eax,eax
c0020881:	0f 94 c0             	sete   al
c0020884:	84 c0                	test   al,al
c0020886:	74 0a                	je     c0020892 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020888:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020890:	eb 31                	jmp    c00208c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020892:	83 ec 08             	sub    esp,0x8
c0020895:	68 8a d0 02 c0       	push   0xc002d08a
c002089a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002089e:	e8 f5 ff fd ff       	call   c0000898 <strcmp>
c00208a3:	83 c4 10             	add    esp,0x10
c00208a6:	85 c0                	test   eax,eax
c00208a8:	0f 94 c0             	sete   al
c00208ab:	84 c0                	test   al,al
c00208ad:	74 0a                	je     c00208b9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208af:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208b7:	eb 0a                	jmp    c00208c3 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208b9:	b8 08 00 00 00       	mov    eax,0x8
c00208be:	e9 04 01 00 00       	jmp    c00209c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208c3:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00208ca:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00208cf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208d3:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c00208da:	83 f8 ff             	cmp    eax,0xffffffff
c00208dd:	75 34                	jne    c0020913 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00208df:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208e3:	88 c2                	mov    dl,al
c00208e5:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c00208ea:	01 d0                	add    eax,edx
c00208ec:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208f0:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c00208f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208fa:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0020901:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020906:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c002090a:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0020911:	eb 17                	jmp    c002092a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020913:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020917:	88 c2                	mov    dl,al
c0020919:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002091d:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020924:	01 d0                	add    eax,edx
c0020926:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002092a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002092e:	88 04 24             	mov    BYTE PTR [esp],al
c0020931:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020935:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020939:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020941:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002094e:	83 ec 0c             	sub    esp,0xc
c0020951:	68 00 20 00 00       	push   0x2000
c0020956:	e8 31 ef fe ff       	call   c000f88c <malloc>
c002095b:	83 c4 10             	add    esp,0x10
c002095e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020962:	68 00 20 00 00       	push   0x2000
c0020967:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002096b:	8d 44 24 08          	lea    eax,[esp+0x8]
c002096f:	50                   	push   eax
c0020970:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020974:	50                   	push   eax
c0020975:	e8 bd 69 fe ff       	call   c0007337 <f_mkfs>
c002097a:	83 c4 10             	add    esp,0x10
c002097d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020981:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020986:	75 07                	jne    c002098f <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020988:	b8 00 00 00 00       	mov    eax,0x0
c002098d:	eb 38                	jmp    c00209c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002098f:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020994:	75 17                	jne    c00209ad <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020996:	83 ec 0c             	sub    esp,0xc
c0020999:	68 c8 d0 02 c0       	push   0xc002d0c8
c002099e:	e8 d8 1e ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00209a3:	83 c4 10             	add    esp,0x10
c00209a6:	b8 09 00 00 00       	mov    eax,0x9
c00209ab:	eb 1a                	jmp    c00209c7 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209b1:	83 ec 08             	sub    esp,0x8
c00209b4:	50                   	push   eax
c00209b5:	68 90 d0 02 c0       	push   0xc002d090
c00209ba:	e8 bc 1e ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00209bf:	83 c4 10             	add    esp,0x10
c00209c2:	b8 01 00 00 00       	mov    eax,0x1
c00209c7:	83 c4 2c             	add    esp,0x2c
c00209ca:	c3                   	ret    
c00209cb:	90                   	nop

c00209cc <FAT::tryMount(LogicalDisk*, int)>:
c00209cc:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00209d2:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c00209d7:	83 f8 14             	cmp    eax,0x14
c00209da:	75 17                	jne    c00209f3 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00209dc:	83 ec 0c             	sub    esp,0xc
c00209df:	68 a2 d0 02 c0       	push   0xc002d0a2
c00209e4:	e8 c8 98 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00209e9:	83 c4 10             	add    esp,0x10
c00209ec:	b0 00                	mov    al,0x0
c00209ee:	e9 d7 01 00 00       	jmp    c0020bca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209f3:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209fa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020a00:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a06:	3d 00 02 00 00       	cmp    eax,0x200
c0020a0b:	74 07                	je     c0020a14 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a0d:	b0 00                	mov    al,0x0
c0020a0f:	e9 b6 01 00 00       	jmp    c0020bca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a14:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a1c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a23:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c0020a2a:	83 f8 ff             	cmp    eax,0xffffffff
c0020a2d:	74 07                	je     c0020a36 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a2f:	b0 01                	mov    al,0x1
c0020a31:	e9 94 01 00 00       	jmp    c0020bca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a36:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a40:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a48:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a4f:	88 c2                	mov    dl,al
c0020a51:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020a56:	01 d0                	add    eax,edx
c0020a58:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a5f:	8b 15 60 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032460
c0020a65:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a6c:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0020a73:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020a78:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a7f:	89 14 85 00 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb00],edx
c0020a86:	83 ec 0c             	sub    esp,0xc
c0020a89:	68 54 02 00 00       	push   0x254
c0020a8e:	e8 f9 ed fe ff       	call   c000f88c <malloc>
c0020a93:	83 c4 10             	add    esp,0x10
c0020a96:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a9d:	83 ec 04             	sub    esp,0x4
c0020aa0:	6a 00                	push   0x0
c0020aa2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aa9:	50                   	push   eax
c0020aaa:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ab1:	e8 3f 44 fe ff       	call   c0004ef5 <f_mount>
c0020ab6:	83 c4 10             	add    esp,0x10
c0020ab9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020ac0:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020ac8:	74 19                	je     c0020ae3 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020aca:	83 ec 0c             	sub    esp,0xc
c0020acd:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ad4:	e8 d3 ed fe ff       	call   c000f8ac <rfree>
c0020ad9:	83 c4 10             	add    esp,0x10
c0020adc:	b0 00                	mov    al,0x0
c0020ade:	e9 e7 00 00 00       	jmp    c0020bca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020ae3:	83 ec 04             	sub    esp,0x4
c0020ae6:	68 00 01 00 00       	push   0x100
c0020aeb:	6a 00                	push   0x0
c0020aed:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020af4:	50                   	push   eax
c0020af5:	e8 56 fc fd ff       	call   c0000750 <memset>
c0020afa:	83 c4 10             	add    esp,0x10
c0020afd:	83 ec 08             	sub    esp,0x8
c0020b00:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b07:	50                   	push   eax
c0020b08:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b0f:	50                   	push   eax
c0020b10:	e8 37 fe fd ff       	call   c000094c <strcat>
c0020b15:	83 c4 10             	add    esp,0x10
c0020b18:	83 ec 08             	sub    esp,0x8
c0020b1b:	68 b0 d0 02 c0       	push   0xc002d0b0
c0020b20:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b27:	50                   	push   eax
c0020b28:	e8 1f fe fd ff       	call   c000094c <strcat>
c0020b2d:	83 c4 10             	add    esp,0x10
c0020b30:	83 ec 04             	sub    esp,0x4
c0020b33:	6a 01                	push   0x1
c0020b35:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b3c:	50                   	push   eax
c0020b3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b41:	50                   	push   eax
c0020b42:	e8 10 44 fe ff       	call   c0004f57 <f_open>
c0020b47:	83 c4 10             	add    esp,0x10
c0020b4a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b51:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b58:	85 c0                	test   eax,eax
c0020b5a:	74 0a                	je     c0020b66 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b5c:	78 2d                	js     c0020b8b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b5e:	83 e8 04             	sub    eax,0x4
c0020b61:	83 f8 01             	cmp    eax,0x1
c0020b64:	77 25                	ja     c0020b8b <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b66:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b6e:	83 ec 0c             	sub    esp,0xc
c0020b71:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b75:	50                   	push   eax
c0020b76:	e8 2e 4f fe ff       	call   c0005aa9 <f_close>
c0020b7b:	83 c4 10             	add    esp,0x10
c0020b7e:	90                   	nop
c0020b7f:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b87:	74 3a                	je     c0020bc3 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b89:	eb 2d                	jmp    c0020bb8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b8b:	83 ec 0c             	sub    esp,0xc
c0020b8e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b95:	e8 12 ed fe ff       	call   c000f8ac <rfree>
c0020b9a:	83 c4 10             	add    esp,0x10
c0020b9d:	83 ec 04             	sub    esp,0x4
c0020ba0:	6a 00                	push   0x0
c0020ba2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ba9:	50                   	push   eax
c0020baa:	6a 00                	push   0x0
c0020bac:	e8 44 43 fe ff       	call   c0004ef5 <f_mount>
c0020bb1:	83 c4 10             	add    esp,0x10
c0020bb4:	b0 00                	mov    al,0x0
c0020bb6:	eb 12                	jmp    c0020bca <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020bb8:	a1 60 24 03 c0       	mov    eax,ds:0xc0032460
c0020bbd:	40                   	inc    eax
c0020bbe:	a3 60 24 03 c0       	mov    ds:0xc0032460,eax
c0020bc3:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020bca:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020bd0:	c3                   	ret    
c0020bd1:	90                   	nop

c0020bd2 <FAT::getFileFirstSector(char const*)>:
c0020bd2:	53                   	push   ebx
c0020bd3:	83 ec 28             	sub    esp,0x28
c0020bd6:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0020bde:	83 ec 0c             	sub    esp,0xc
c0020be1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020be5:	e8 a2 ec fe ff       	call   c000f88c <malloc>
c0020bea:	83 c4 10             	add    esp,0x10
c0020bed:	89 c3                	mov    ebx,eax
c0020bef:	a1 90 23 03 c0       	mov    eax,ds:0xc0032390
c0020bf4:	83 ec 04             	sub    esp,0x4
c0020bf7:	50                   	push   eax
c0020bf8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020bfc:	53                   	push   ebx
c0020bfd:	e8 d8 21 ff ff       	call   c0012dda <File::File(char const*, Process*)>
c0020c02:	83 c4 10             	add    esp,0x10
c0020c05:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0020c09:	83 ec 08             	sub    esp,0x8
c0020c0c:	6a 01                	push   0x1
c0020c0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020c12:	e8 27 22 ff ff       	call   c0012e3e <File::open(FileOpenMode)>
c0020c17:	83 c4 10             	add    esp,0x10
c0020c1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c1e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c20:	83 c0 0c             	add    eax,0xc
c0020c23:	8b 00                	mov    eax,DWORD PTR [eax]
c0020c25:	83 ec 0c             	sub    esp,0xc
c0020c28:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020c2c:	52                   	push   edx
c0020c2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020c31:	52                   	push   edx
c0020c32:	6a 00                	push   0x0
c0020c34:	6a 04                	push   0x4
c0020c36:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0020c3a:	ff d0                	call   eax
c0020c3c:	83 c4 20             	add    esp,0x20
c0020c3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020c43:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0020c49:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020c4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c51:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020c54:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020c57:	83 ec 04             	sub    esp,0x4
c0020c5a:	52                   	push   edx
c0020c5b:	50                   	push   eax
c0020c5c:	68 bb d0 02 c0       	push   0xc002d0bb
c0020c61:	e8 15 1c ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0020c66:	83 c4 10             	add    esp,0x10
c0020c69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c6d:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0020c70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0020c73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020c77:	83 ec 0c             	sub    esp,0xc
c0020c7a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0020c7e:	e8 19 22 ff ff       	call   c0012e9c <File::close()>
c0020c83:	83 c4 10             	add    esp,0x10
c0020c86:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c8a:	ba 00 00 00 00       	mov    edx,0x0
c0020c8f:	83 c4 28             	add    esp,0x28
c0020c92:	5b                   	pop    ebx
c0020c93:	c3                   	ret    

c0020c94 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020c94:	57                   	push   edi
c0020c95:	56                   	push   esi
c0020c96:	53                   	push   ebx
c0020c97:	81 ec 50 02 00 00    	sub    esp,0x250
c0020c9d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0020ca5:	74 0a                	je     c0020cb1 <FAT::readDir(void*, unsigned long, void*, int*)+0x1d>
c0020ca7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0020caf:	75 0a                	jne    c0020cbb <FAT::readDir(void*, unsigned long, void*, int*)+0x27>
c0020cb1:	b8 04 00 00 00       	mov    eax,0x4
c0020cb6:	e9 29 01 00 00       	jmp    c0020de4 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020cbb:	83 ec 08             	sub    esp,0x8
c0020cbe:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020cc5:	50                   	push   eax
c0020cc6:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0020ccd:	e8 e1 53 fe ff       	call   c00060b3 <f_readdir>
c0020cd2:	83 c4 10             	add    esp,0x10
c0020cd5:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0020cdc:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c0020ce3:	83 ec 0c             	sub    esp,0xc
c0020ce6:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0020ced:	83 c0 1a             	add    eax,0x1a
c0020cf0:	50                   	push   eax
c0020cf1:	e8 76 fa fd ff       	call   c000076c <strlen>
c0020cf6:	83 c4 10             	add    esp,0x10
c0020cf9:	ba 00 00 00 00       	mov    edx,0x0
c0020cfe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020d06:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0020d0d:	0f b6 c0             	movzx  eax,al
c0020d10:	83 e0 10             	and    eax,0x10
c0020d13:	74 07                	je     c0020d1c <FAT::readDir(void*, unsigned long, void*, int*)+0x88>
c0020d15:	b8 02 00 00 00       	mov    eax,0x2
c0020d1a:	eb 05                	jmp    c0020d21 <FAT::readDir(void*, unsigned long, void*, int*)+0x8d>
c0020d1c:	b8 01 00 00 00       	mov    eax,0x1
c0020d21:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0020d25:	83 ec 08             	sub    esp,0x8
c0020d28:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020d2f:	83 c0 1a             	add    eax,0x1a
c0020d32:	50                   	push   eax
c0020d33:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020d37:	83 c0 10             	add    eax,0x10
c0020d3a:	50                   	push   eax
c0020d3b:	e8 cc fa fd ff       	call   c000080c <strcpy>
c0020d40:	83 c4 10             	add    esp,0x10
c0020d43:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0020d4a:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0020d51:	8d 44 24 04          	lea    eax,[esp+0x4]
c0020d55:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0020d5c:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0020d63:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0020d6a:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0020d71:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0020d78:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0020d7f:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0020d86:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0020d8d:	89 c6                	mov    esi,eax
c0020d8f:	89 d7                	mov    edi,edx
c0020d91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020d93:	89 c8                	mov    eax,ecx
c0020d95:	89 fa                	mov    edx,edi
c0020d97:	89 f3                	mov    ebx,esi
c0020d99:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0020da0:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0020da7:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0020dae:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0020db5:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020dbb:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0020dc2:	84 c0                	test   al,al
c0020dc4:	75 07                	jne    c0020dcd <FAT::readDir(void*, unsigned long, void*, int*)+0x139>
c0020dc6:	b8 07 00 00 00       	mov    eax,0x7
c0020dcb:	eb 17                	jmp    c0020de4 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020dcd:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0020dd4:	85 c0                	test   eax,eax
c0020dd6:	75 07                	jne    c0020ddf <FAT::readDir(void*, unsigned long, void*, int*)+0x14b>
c0020dd8:	b8 00 00 00 00       	mov    eax,0x0
c0020ddd:	eb 05                	jmp    c0020de4 <FAT::readDir(void*, unsigned long, void*, int*)+0x150>
c0020ddf:	b8 01 00 00 00       	mov    eax,0x1
c0020de4:	81 c4 50 02 00 00    	add    esp,0x250
c0020dea:	5b                   	pop    ebx
c0020deb:	5e                   	pop    esi
c0020dec:	5f                   	pop    edi
c0020ded:	c3                   	ret    

c0020dee <FAT::read(void*, unsigned long, void*, int*)>:
c0020dee:	83 ec 1c             	sub    esp,0x1c
c0020df1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020df6:	74 07                	je     c0020dff <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020df8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020dfd:	75 07                	jne    c0020e06 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020dff:	b8 04 00 00 00       	mov    eax,0x4
c0020e04:	eb 3d                	jmp    c0020e43 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e06:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e0a:	50                   	push   eax
c0020e0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e0f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e13:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e17:	e8 77 45 fe ff       	call   c0005393 <f_read>
c0020e1c:	83 c4 10             	add    esp,0x10
c0020e1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e23:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e27:	89 c2                	mov    edx,eax
c0020e29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020e2d:	89 10                	mov    DWORD PTR [eax],edx
c0020e2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e33:	85 c0                	test   eax,eax
c0020e35:	75 07                	jne    c0020e3e <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020e37:	b8 00 00 00 00       	mov    eax,0x0
c0020e3c:	eb 05                	jmp    c0020e43 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020e3e:	b8 01 00 00 00       	mov    eax,0x1
c0020e43:	83 c4 1c             	add    esp,0x1c
c0020e46:	c3                   	ret    
c0020e47:	90                   	nop

c0020e48 <FAT::write(void*, unsigned long, void*, int*)>:
c0020e48:	83 ec 1c             	sub    esp,0x1c
c0020e4b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020e50:	74 07                	je     c0020e59 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020e52:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020e57:	75 07                	jne    c0020e60 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020e59:	b8 04 00 00 00       	mov    eax,0x4
c0020e5e:	eb 3d                	jmp    c0020e9d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020e60:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e64:	50                   	push   eax
c0020e65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020e69:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020e6d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020e71:	e8 9d 47 fe ff       	call   c0005613 <f_write>
c0020e76:	83 c4 10             	add    esp,0x10
c0020e79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020e81:	89 c2                	mov    edx,eax
c0020e83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020e87:	89 10                	mov    DWORD PTR [eax],edx
c0020e89:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e8d:	85 c0                	test   eax,eax
c0020e8f:	75 07                	jne    c0020e98 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020e91:	b8 00 00 00 00       	mov    eax,0x0
c0020e96:	eb 05                	jmp    c0020e9d <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020e98:	b8 01 00 00 00       	mov    eax,0x1
c0020e9d:	83 c4 1c             	add    esp,0x1c
c0020ea0:	c3                   	ret    
c0020ea1:	90                   	nop

c0020ea2 <FAT::close(void*)>:
c0020ea2:	83 ec 1c             	sub    esp,0x1c
c0020ea5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020eaa:	75 07                	jne    c0020eb3 <FAT::close(void*)+0x11>
c0020eac:	b8 04 00 00 00       	mov    eax,0x4
c0020eb1:	eb 36                	jmp    c0020ee9 <FAT::close(void*)+0x47>
c0020eb3:	83 ec 0c             	sub    esp,0xc
c0020eb6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020eba:	e8 ea 4b fe ff       	call   c0005aa9 <f_close>
c0020ebf:	83 c4 10             	add    esp,0x10
c0020ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ec6:	83 ec 0c             	sub    esp,0xc
c0020ec9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ecd:	e8 ca e9 fe ff       	call   c000f89c <free>
c0020ed2:	83 c4 10             	add    esp,0x10
c0020ed5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020ed9:	85 c0                	test   eax,eax
c0020edb:	75 07                	jne    c0020ee4 <FAT::close(void*)+0x42>
c0020edd:	b8 00 00 00 00       	mov    eax,0x0
c0020ee2:	eb 05                	jmp    c0020ee9 <FAT::close(void*)+0x47>
c0020ee4:	b8 01 00 00 00       	mov    eax,0x1
c0020ee9:	83 c4 1c             	add    esp,0x1c
c0020eec:	c3                   	ret    
c0020eed:	90                   	nop

c0020eee <FAT::closeDir(void*)>:
c0020eee:	83 ec 1c             	sub    esp,0x1c
c0020ef1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ef6:	75 07                	jne    c0020eff <FAT::closeDir(void*)+0x11>
c0020ef8:	b8 04 00 00 00       	mov    eax,0x4
c0020efd:	eb 36                	jmp    c0020f35 <FAT::closeDir(void*)+0x47>
c0020eff:	83 ec 0c             	sub    esp,0xc
c0020f02:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f06:	e8 86 51 fe ff       	call   c0006091 <f_closedir>
c0020f0b:	83 c4 10             	add    esp,0x10
c0020f0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f12:	83 ec 0c             	sub    esp,0xc
c0020f15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020f19:	e8 7e e9 fe ff       	call   c000f89c <free>
c0020f1e:	83 c4 10             	add    esp,0x10
c0020f21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f25:	85 c0                	test   eax,eax
c0020f27:	75 07                	jne    c0020f30 <FAT::closeDir(void*)+0x42>
c0020f29:	b8 00 00 00 00       	mov    eax,0x0
c0020f2e:	eb 05                	jmp    c0020f35 <FAT::closeDir(void*)+0x47>
c0020f30:	b8 01 00 00 00       	mov    eax,0x1
c0020f35:	83 c4 1c             	add    esp,0x1c
c0020f38:	c3                   	ret    
c0020f39:	90                   	nop

c0020f3a <FAT::seek(void*, unsigned long long)>:
c0020f3a:	83 ec 2c             	sub    esp,0x2c
c0020f3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020f45:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020f49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020f4d:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020f52:	75 07                	jne    c0020f5b <FAT::seek(void*, unsigned long long)+0x21>
c0020f54:	b8 04 00 00 00       	mov    eax,0x4
c0020f59:	eb 2f                	jmp    c0020f8a <FAT::seek(void*, unsigned long long)+0x50>
c0020f5b:	83 ec 04             	sub    esp,0x4
c0020f5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020f62:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020f66:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020f6a:	e8 69 4b fe ff       	call   c0005ad8 <f_lseek>
c0020f6f:	83 c4 10             	add    esp,0x10
c0020f72:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f7a:	85 c0                	test   eax,eax
c0020f7c:	75 07                	jne    c0020f85 <FAT::seek(void*, unsigned long long)+0x4b>
c0020f7e:	b8 00 00 00 00       	mov    eax,0x0
c0020f83:	eb 05                	jmp    c0020f8a <FAT::seek(void*, unsigned long long)+0x50>
c0020f85:	b8 01 00 00 00       	mov    eax,0x1
c0020f8a:	83 c4 2c             	add    esp,0x2c
c0020f8d:	c3                   	ret    

c0020f8e <fatWrapperReadDisk>:
c0020f8e:	83 ec 1c             	sub    esp,0x1c
c0020f91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020f95:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020f99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020f9d:	89 04 24             	mov    DWORD PTR [esp],eax
c0020fa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020fa4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020fa8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020fad:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c0020fb4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020fb8:	83 ec 0c             	sub    esp,0xc
c0020fbb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020fbf:	52                   	push   edx
c0020fc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020fc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020fc8:	50                   	push   eax
c0020fc9:	e8 2a 52 ff ff       	call   c00161f8 <LogicalDisk::read(unsigned long long, int, void*)>
c0020fce:	83 c4 20             	add    esp,0x20
c0020fd1:	83 c4 1c             	add    esp,0x1c
c0020fd4:	c3                   	ret    

c0020fd5 <fatWrapperWriteDisk>:
c0020fd5:	83 ec 1c             	sub    esp,0x1c
c0020fd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020fdc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020fe0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020fe4:	89 04 24             	mov    DWORD PTR [esp],eax
c0020fe7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020feb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020fef:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ff4:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c0020ffb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020fff:	83 ec 0c             	sub    esp,0xc
c0021002:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021006:	52                   	push   edx
c0021007:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002100b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002100f:	50                   	push   eax
c0021010:	e8 4f 52 ff ff       	call   c0016264 <LogicalDisk::write(unsigned long long, int, void*)>
c0021015:	83 c4 20             	add    esp,0x20
c0021018:	83 c4 1c             	add    esp,0x1c
c002101b:	c3                   	ret    

c002101c <fatWrapperIoctl>:
c002101c:	53                   	push   ebx
c002101d:	83 ec 28             	sub    esp,0x28
c0021020:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021024:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0021028:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c002102c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021030:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0021035:	75 31                	jne    c0021068 <fatWrapperIoctl+0x4c>
c0021037:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002103b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002103f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021044:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c002104b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021051:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021057:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002105b:	66 89 02             	mov    WORD PTR [edx],ax
c002105e:	b8 00 00 00 00       	mov    eax,0x0
c0021063:	e9 b2 00 00 00       	jmp    c002111a <fatWrapperIoctl+0xfe>
c0021068:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c002106d:	75 6a                	jne    c00210d9 <fatWrapperIoctl+0xbd>
c002106f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021073:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021077:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002107c:	8b 04 85 40 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0bc0]
c0021083:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021089:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c002108f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0021095:	89 c8                	mov    eax,ecx
c0021097:	89 da                	mov    edx,ebx
c0021099:	0f a4 c2 0a          	shld   edx,eax,0xa
c002109d:	c1 e0 0a             	shl    eax,0xa
c00210a0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00210a5:	8b 0c 8d 40 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0bc0]
c00210ac:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00210b2:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00210b8:	89 cb                	mov    ebx,ecx
c00210ba:	c1 fb 1f             	sar    ebx,0x1f
c00210bd:	53                   	push   ebx
c00210be:	51                   	push   ecx
c00210bf:	52                   	push   edx
c00210c0:	50                   	push   eax
c00210c1:	e8 de 60 00 00       	call   c00271a4 <__udivdi3>
c00210c6:	83 c4 10             	add    esp,0x10
c00210c9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00210cd:	89 01                	mov    DWORD PTR [ecx],eax
c00210cf:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00210d2:	b8 00 00 00 00       	mov    eax,0x0
c00210d7:	eb 41                	jmp    c002111a <fatWrapperIoctl+0xfe>
c00210d9:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00210de:	75 07                	jne    c00210e7 <fatWrapperIoctl+0xcb>
c00210e0:	b8 00 00 00 00       	mov    eax,0x0
c00210e5:	eb 33                	jmp    c002111a <fatWrapperIoctl+0xfe>
c00210e7:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00210ec:	75 19                	jne    c0021107 <fatWrapperIoctl+0xeb>
c00210ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00210f2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00210f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00210fa:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021100:	b8 00 00 00 00       	mov    eax,0x0
c0021105:	eb 13                	jmp    c002111a <fatWrapperIoctl+0xfe>
c0021107:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c002110c:	75 07                	jne    c0021115 <fatWrapperIoctl+0xf9>
c002110e:	b8 00 00 00 00       	mov    eax,0x0
c0021113:	eb 05                	jmp    c002111a <fatWrapperIoctl+0xfe>
c0021115:	b8 04 00 00 00       	mov    eax,0x4
c002111a:	83 c4 28             	add    esp,0x28
c002111d:	5b                   	pop    ebx
c002111e:	c3                   	ret    
c002111f:	90                   	nop

c0021120 <FAT::FAT()>:
c0021120:	83 ec 1c             	sub    esp,0x1c
c0021123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021127:	83 ec 0c             	sub    esp,0xc
c002112a:	50                   	push   eax
c002112b:	e8 56 1a ff ff       	call   c0012b86 <Filesystem::Filesystem()>
c0021130:	83 c4 10             	add    esp,0x10
c0021133:	ba f8 d0 02 c0       	mov    edx,0xc002d0f8
c0021138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002113c:	89 10                	mov    DWORD PTR [eax],edx
c002113e:	c7 05 60 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032460,0x0
c0021148:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021150:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0021155:	7f 15                	jg     c002116c <FAT::FAT()+0x4c>
c0021157:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002115b:	c7 04 85 80 24 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdb80],0xffffffff
c0021166:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002116a:	eb e4                	jmp    c0021150 <FAT::FAT()+0x30>
c002116c:	90                   	nop
c002116d:	83 c4 1c             	add    esp,0x1c
c0021170:	c3                   	ret    
c0021171:	90                   	nop

c0021172 <FAT::fixFilepath(char*)>:
c0021172:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021176:	8a 00                	mov    al,BYTE PTR [eax]
c0021178:	3c 40                	cmp    al,0x40
c002117a:	7e 2c                	jle    c00211a8 <FAT::fixFilepath(char*)+0x36>
c002117c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021180:	8a 00                	mov    al,BYTE PTR [eax]
c0021182:	83 e8 41             	sub    eax,0x41
c0021185:	88 c2                	mov    dl,al
c0021187:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002118b:	88 10                	mov    BYTE PTR [eax],dl
c002118d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021191:	8a 00                	mov    al,BYTE PTR [eax]
c0021193:	0f be c0             	movsx  eax,al
c0021196:	8b 04 85 80 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb80]
c002119d:	83 c0 30             	add    eax,0x30
c00211a0:	88 c2                	mov    dl,al
c00211a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211a6:	88 10                	mov    BYTE PTR [eax],dl
c00211a8:	90                   	nop
c00211a9:	c3                   	ret    

c00211aa <FAT::open(char const*, void**, FileOpenMode)>:
c00211aa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211b0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211b8:	74 0a                	je     c00211c4 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00211ba:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00211c2:	75 0a                	jne    c00211ce <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00211c4:	b8 04 00 00 00       	mov    eax,0x4
c00211c9:	e9 fd 00 00 00       	jmp    c00212cb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211ce:	83 ec 08             	sub    esp,0x8
c00211d1:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211d8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211dc:	50                   	push   eax
c00211dd:	e8 2a f6 fd ff       	call   c000080c <strcpy>
c00211e2:	83 c4 10             	add    esp,0x10
c00211e5:	83 ec 08             	sub    esp,0x8
c00211e8:	8d 44 24 10          	lea    eax,[esp+0x10]
c00211ec:	50                   	push   eax
c00211ed:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211f4:	e8 79 ff ff ff       	call   c0021172 <FAT::fixFilepath(char*)>
c00211f9:	83 c4 10             	add    esp,0x10
c00211fc:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0021204:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002120b:	83 e0 01             	and    eax,0x1
c002120e:	74 08                	je     c0021218 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021210:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0021218:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002121f:	83 e0 04             	and    eax,0x4
c0021222:	74 10                	je     c0021234 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0021224:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c002122c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021234:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002123b:	83 e0 02             	and    eax,0x2
c002123e:	74 08                	je     c0021248 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021240:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0021248:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002124f:	83 e0 08             	and    eax,0x8
c0021252:	74 08                	je     c002125c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0021254:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002125c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021263:	83 e0 10             	and    eax,0x10
c0021266:	74 08                	je     c0021270 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0021268:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021270:	83 ec 0c             	sub    esp,0xc
c0021273:	68 50 02 00 00       	push   0x250
c0021278:	e8 0f e6 fe ff       	call   c000f88c <malloc>
c002127d:	83 c4 10             	add    esp,0x10
c0021280:	89 c2                	mov    edx,eax
c0021282:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021289:	89 10                	mov    DWORD PTR [eax],edx
c002128b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021293:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002129a:	8b 00                	mov    eax,DWORD PTR [eax]
c002129c:	83 ec 04             	sub    esp,0x4
c002129f:	52                   	push   edx
c00212a0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00212a4:	52                   	push   edx
c00212a5:	50                   	push   eax
c00212a6:	e8 ac 3c fe ff       	call   c0004f57 <f_open>
c00212ab:	83 c4 10             	add    esp,0x10
c00212ae:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00212b5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00212bd:	74 07                	je     c00212c6 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00212bf:	b8 01 00 00 00       	mov    eax,0x1
c00212c4:	eb 05                	jmp    c00212cb <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00212c6:	b8 00 00 00 00       	mov    eax,0x0
c00212cb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00212d1:	c3                   	ret    

c00212d2 <FAT::openDir(char const*, void**)>:
c00212d2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00212d8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00212e0:	74 0a                	je     c00212ec <FAT::openDir(char const*, void**)+0x1a>
c00212e2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00212ea:	75 07                	jne    c00212f3 <FAT::openDir(char const*, void**)+0x21>
c00212ec:	b8 04 00 00 00       	mov    eax,0x4
c00212f1:	eb 7d                	jmp    c0021370 <FAT::openDir(char const*, void**)+0x9e>
c00212f3:	83 ec 08             	sub    esp,0x8
c00212f6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00212fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021301:	50                   	push   eax
c0021302:	e8 05 f5 fd ff       	call   c000080c <strcpy>
c0021307:	83 c4 10             	add    esp,0x10
c002130a:	83 ec 08             	sub    esp,0x8
c002130d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021311:	50                   	push   eax
c0021312:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021319:	e8 54 fe ff ff       	call   c0021172 <FAT::fixFilepath(char*)>
c002131e:	83 c4 10             	add    esp,0x10
c0021321:	83 ec 0c             	sub    esp,0xc
c0021324:	6a 4c                	push   0x4c
c0021326:	e8 61 e5 fe ff       	call   c000f88c <malloc>
c002132b:	83 c4 10             	add    esp,0x10
c002132e:	89 c2                	mov    edx,eax
c0021330:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021337:	89 10                	mov    DWORD PTR [eax],edx
c0021339:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021340:	8b 00                	mov    eax,DWORD PTR [eax]
c0021342:	83 ec 08             	sub    esp,0x8
c0021345:	8d 54 24 14          	lea    edx,[esp+0x14]
c0021349:	52                   	push   edx
c002134a:	50                   	push   eax
c002134b:	e8 3f 4c fe ff       	call   c0005f8f <f_opendir>
c0021350:	83 c4 10             	add    esp,0x10
c0021353:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002135a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021362:	74 07                	je     c002136b <FAT::openDir(char const*, void**)+0x99>
c0021364:	b8 01 00 00 00       	mov    eax,0x1
c0021369:	eb 05                	jmp    c0021370 <FAT::openDir(char const*, void**)+0x9e>
c002136b:	b8 00 00 00 00       	mov    eax,0x0
c0021370:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021376:	c3                   	ret    
c0021377:	90                   	nop

c0021378 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021378:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002137e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0021386:	75 0a                	jne    c0021392 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021388:	b8 04 00 00 00       	mov    eax,0x4
c002138d:	e9 c9 00 00 00       	jmp    c002145b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021392:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c002139a:	75 0a                	jne    c00213a6 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002139c:	b8 04 00 00 00       	mov    eax,0x4
c00213a1:	e9 b5 00 00 00       	jmp    c002145b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213a6:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c00213ae:	75 0a                	jne    c00213ba <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c00213b0:	b8 04 00 00 00       	mov    eax,0x4
c00213b5:	e9 a1 00 00 00       	jmp    c002145b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00213ba:	83 ec 08             	sub    esp,0x8
c00213bd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00213c4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00213cb:	50                   	push   eax
c00213cc:	e8 3b f4 fd ff       	call   c000080c <strcpy>
c00213d1:	83 c4 10             	add    esp,0x10
c00213d4:	83 ec 08             	sub    esp,0x8
c00213d7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00213de:	50                   	push   eax
c00213df:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00213e6:	e8 87 fd ff ff       	call   c0021172 <FAT::fixFilepath(char*)>
c00213eb:	83 c4 10             	add    esp,0x10
c00213ee:	83 ec 08             	sub    esp,0x8
c00213f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00213f5:	50                   	push   eax
c00213f6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00213fd:	50                   	push   eax
c00213fe:	e8 4b 4d fe ff       	call   c000614e <f_stat>
c0021403:	83 c4 10             	add    esp,0x10
c0021406:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002140d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021414:	85 c0                	test   eax,eax
c0021416:	74 07                	je     c002141f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0021418:	83 f8 04             	cmp    eax,0x4
c002141b:	74 32                	je     c002144f <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c002141d:	eb 37                	jmp    c0021456 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c002141f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021423:	0f b6 c0             	movzx  eax,al
c0021426:	83 e0 10             	and    eax,0x10
c0021429:	0f 95 c2             	setne  dl
c002142c:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021433:	88 10                	mov    BYTE PTR [eax],dl
c0021435:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021438:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002143c:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021443:	89 01                	mov    DWORD PTR [ecx],eax
c0021445:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0021448:	b8 00 00 00 00       	mov    eax,0x0
c002144d:	eb 0c                	jmp    c002145b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002144f:	b8 02 00 00 00       	mov    eax,0x2
c0021454:	eb 05                	jmp    c002145b <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021456:	b8 01 00 00 00       	mov    eax,0x1
c002145b:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021461:	c3                   	ret    

c0021462 <FAT::unlink(char const*)>:
c0021462:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021468:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021470:	75 07                	jne    c0021479 <FAT::unlink(char const*)+0x17>
c0021472:	b8 04 00 00 00       	mov    eax,0x4
c0021477:	eb 5c                	jmp    c00214d5 <FAT::unlink(char const*)+0x73>
c0021479:	83 ec 08             	sub    esp,0x8
c002147c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021483:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021487:	50                   	push   eax
c0021488:	e8 7f f3 fd ff       	call   c000080c <strcpy>
c002148d:	83 c4 10             	add    esp,0x10
c0021490:	83 ec 08             	sub    esp,0x8
c0021493:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021497:	50                   	push   eax
c0021498:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002149f:	e8 ce fc ff ff       	call   c0021172 <FAT::fixFilepath(char*)>
c00214a4:	83 c4 10             	add    esp,0x10
c00214a7:	83 ec 0c             	sub    esp,0xc
c00214aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00214ae:	50                   	push   eax
c00214af:	e8 ec 4f fe ff       	call   c00064a0 <f_unlink>
c00214b4:	83 c4 10             	add    esp,0x10
c00214b7:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00214be:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00214c5:	85 c0                	test   eax,eax
c00214c7:	75 07                	jne    c00214d0 <FAT::unlink(char const*)+0x6e>
c00214c9:	b8 00 00 00 00       	mov    eax,0x0
c00214ce:	eb 05                	jmp    c00214d5 <FAT::unlink(char const*)+0x73>
c00214d0:	b8 01 00 00 00       	mov    eax,0x1
c00214d5:	81 c4 1c 01 00 00    	add    esp,0x11c
c00214db:	c3                   	ret    

c00214dc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00214dc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00214e2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00214e9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00214f0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00214f4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00214f8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021500:	75 0a                	jne    c002150c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021502:	b8 04 00 00 00       	mov    eax,0x4
c0021507:	e9 1c 01 00 00       	jmp    c0021628 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c002150c:	83 ec 08             	sub    esp,0x8
c002150f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021516:	8d 44 24 24          	lea    eax,[esp+0x24]
c002151a:	50                   	push   eax
c002151b:	e8 ec f2 fd ff       	call   c000080c <strcpy>
c0021520:	83 c4 10             	add    esp,0x10
c0021523:	83 ec 08             	sub    esp,0x8
c0021526:	8d 44 24 20          	lea    eax,[esp+0x20]
c002152a:	50                   	push   eax
c002152b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021532:	e8 3b fc ff ff       	call   c0021172 <FAT::fixFilepath(char*)>
c0021537:	83 c4 10             	add    esp,0x10
c002153a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021542:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c002154a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002154f:	83 e0 01             	and    eax,0x1
c0021552:	74 08                	je     c002155c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021554:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002155c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021561:	83 e0 02             	and    eax,0x2
c0021564:	74 08                	je     c002156e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021566:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002156e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021573:	83 e0 04             	and    eax,0x4
c0021576:	74 08                	je     c0021580 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021578:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021580:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021585:	83 e0 08             	and    eax,0x8
c0021588:	74 08                	je     c0021592 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c002158a:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021592:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021597:	83 e0 01             	and    eax,0x1
c002159a:	74 08                	je     c00215a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002159c:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c00215a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215a9:	83 e0 02             	and    eax,0x2
c00215ac:	74 08                	je     c00215b6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c00215ae:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c00215b6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215bb:	83 e0 04             	and    eax,0x4
c00215be:	74 08                	je     c00215c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00215c0:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00215c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215cd:	83 e0 08             	and    eax,0x8
c00215d0:	74 08                	je     c00215da <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00215d2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00215da:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00215e1:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00215e8:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00215f0:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00215f8:	83 ec 04             	sub    esp,0x4
c00215fb:	52                   	push   edx
c00215fc:	50                   	push   eax
c00215fd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021601:	50                   	push   eax
c0021602:	e8 3b 55 fe ff       	call   c0006b42 <f_chmod>
c0021607:	83 c4 10             	add    esp,0x10
c002160a:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021611:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021618:	85 c0                	test   eax,eax
c002161a:	75 07                	jne    c0021623 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c002161c:	b8 00 00 00 00       	mov    eax,0x0
c0021621:	eb 05                	jmp    c0021628 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021623:	b8 01 00 00 00       	mov    eax,0x1
c0021628:	81 c4 2c 01 00 00    	add    esp,0x12c
c002162e:	c3                   	ret    
c002162f:	90                   	nop

c0021630 <FAT::rename(char const*, char const*)>:
c0021630:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021636:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c002163e:	74 0a                	je     c002164a <FAT::rename(char const*, char const*)+0x1a>
c0021640:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021648:	75 0a                	jne    c0021654 <FAT::rename(char const*, char const*)+0x24>
c002164a:	b8 04 00 00 00       	mov    eax,0x4
c002164f:	e9 98 00 00 00       	jmp    c00216ec <FAT::rename(char const*, char const*)+0xbc>
c0021654:	83 ec 08             	sub    esp,0x8
c0021657:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002165e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021665:	50                   	push   eax
c0021666:	e8 a1 f1 fd ff       	call   c000080c <strcpy>
c002166b:	83 c4 10             	add    esp,0x10
c002166e:	83 ec 08             	sub    esp,0x8
c0021671:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021678:	50                   	push   eax
c0021679:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021680:	e8 ed fa ff ff       	call   c0021172 <FAT::fixFilepath(char*)>
c0021685:	83 c4 10             	add    esp,0x10
c0021688:	83 ec 08             	sub    esp,0x8
c002168b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021692:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021696:	50                   	push   eax
c0021697:	e8 70 f1 fd ff       	call   c000080c <strcpy>
c002169c:	83 c4 10             	add    esp,0x10
c002169f:	83 ec 08             	sub    esp,0x8
c00216a2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216a6:	50                   	push   eax
c00216a7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00216ae:	e8 bf fa ff ff       	call   c0021172 <FAT::fixFilepath(char*)>
c00216b3:	83 c4 10             	add    esp,0x10
c00216b6:	83 ec 08             	sub    esp,0x8
c00216b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00216bd:	50                   	push   eax
c00216be:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00216c5:	50                   	push   eax
c00216c6:	e8 84 51 fe ff       	call   c000684f <f_rename>
c00216cb:	83 c4 10             	add    esp,0x10
c00216ce:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00216d5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00216dc:	85 c0                	test   eax,eax
c00216de:	75 07                	jne    c00216e7 <FAT::rename(char const*, char const*)+0xb7>
c00216e0:	b8 00 00 00 00       	mov    eax,0x0
c00216e5:	eb 05                	jmp    c00216ec <FAT::rename(char const*, char const*)+0xbc>
c00216e7:	b8 01 00 00 00       	mov    eax,0x1
c00216ec:	81 c4 1c 02 00 00    	add    esp,0x21c
c00216f2:	c3                   	ret    
c00216f3:	90                   	nop

c00216f4 <FAT::mkdir(char const*)>:
c00216f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00216fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021702:	75 07                	jne    c002170b <FAT::mkdir(char const*)+0x17>
c0021704:	b8 04 00 00 00       	mov    eax,0x4
c0021709:	eb 5c                	jmp    c0021767 <FAT::mkdir(char const*)+0x73>
c002170b:	83 ec 08             	sub    esp,0x8
c002170e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021715:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021719:	50                   	push   eax
c002171a:	e8 ed f0 fd ff       	call   c000080c <strcpy>
c002171f:	83 c4 10             	add    esp,0x10
c0021722:	83 ec 08             	sub    esp,0x8
c0021725:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021729:	50                   	push   eax
c002172a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021731:	e8 3c fa ff ff       	call   c0021172 <FAT::fixFilepath(char*)>
c0021736:	83 c4 10             	add    esp,0x10
c0021739:	83 ec 0c             	sub    esp,0xc
c002173c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021740:	50                   	push   eax
c0021741:	e8 dd 4e fe ff       	call   c0006623 <f_mkdir>
c0021746:	83 c4 10             	add    esp,0x10
c0021749:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021750:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021757:	85 c0                	test   eax,eax
c0021759:	75 07                	jne    c0021762 <FAT::mkdir(char const*)+0x6e>
c002175b:	b8 00 00 00 00       	mov    eax,0x0
c0021760:	eb 05                	jmp    c0021767 <FAT::mkdir(char const*)+0x73>
c0021762:	b8 01 00 00 00       	mov    eax,0x1
c0021767:	81 c4 1c 01 00 00    	add    esp,0x11c
c002176d:	c3                   	ret    

c002176e <FAT::exists(char const*)>:
c002176e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021774:	83 ec 08             	sub    esp,0x8
c0021777:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002177e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021782:	50                   	push   eax
c0021783:	e8 84 f0 fd ff       	call   c000080c <strcpy>
c0021788:	83 c4 10             	add    esp,0x10
c002178b:	83 ec 08             	sub    esp,0x8
c002178e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021792:	50                   	push   eax
c0021793:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002179a:	e8 d3 f9 ff ff       	call   c0021172 <FAT::fixFilepath(char*)>
c002179f:	83 c4 10             	add    esp,0x10
c00217a2:	83 ec 08             	sub    esp,0x8
c00217a5:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c00217ac:	50                   	push   eax
c00217ad:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00217b1:	50                   	push   eax
c00217b2:	e8 97 49 fe ff       	call   c000614e <f_stat>
c00217b7:	83 c4 10             	add    esp,0x10
c00217ba:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00217c1:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00217c8:	85 c0                	test   eax,eax
c00217ca:	75 04                	jne    c00217d0 <FAT::exists(char const*)+0x62>
c00217cc:	b0 01                	mov    al,0x1
c00217ce:	eb 02                	jmp    c00217d2 <FAT::exists(char const*)+0x64>
c00217d0:	b0 00                	mov    al,0x0
c00217d2:	81 c4 2c 02 00 00    	add    esp,0x22c
c00217d8:	c3                   	ret    
c00217d9:	90                   	nop

c00217da <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00217da:	b8 08 00 00 00       	mov    eax,0x8
c00217df:	c3                   	ret    

c00217e0 <ISO9660::seek(void*, unsigned long long)>:
c00217e0:	53                   	push   ebx
c00217e1:	b8 04 00 00 00       	mov    eax,0x4
c00217e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00217ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00217ee:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00217f2:	85 d2                	test   edx,edx
c00217f4:	74 17                	je     c002180d <ISO9660::seek(void*, unsigned long long)+0x2d>
c00217f6:	89 c8                	mov    eax,ecx
c00217f8:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00217fb:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00217fe:	b8 01 00 00 00       	mov    eax,0x1
c0021803:	73 08                	jae    c002180d <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021805:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021808:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c002180b:	31 c0                	xor    eax,eax
c002180d:	5b                   	pop    ebx
c002180e:	c3                   	ret    
c002180f:	90                   	nop

c0021810 <ISO9660::tell(void*, unsigned long long*)>:
c0021810:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021814:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021818:	85 d2                	test   edx,edx
c002181a:	74 12                	je     c002182e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c002181c:	85 c0                	test   eax,eax
c002181e:	74 0e                	je     c002182e <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021820:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021823:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021826:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021829:	89 10                	mov    DWORD PTR [eax],edx
c002182b:	31 c0                	xor    eax,eax
c002182d:	c3                   	ret    
c002182e:	b8 04 00 00 00       	mov    eax,0x4
c0021833:	c3                   	ret    

c0021834 <ISO9660::getName()>:
c0021834:	b8 58 d1 02 c0       	mov    eax,0xc002d158
c0021839:	c3                   	ret    

c002183a <ISO9660::stat(void*, unsigned long long*)>:
c002183a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002183e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021842:	85 d2                	test   edx,edx
c0021844:	74 12                	je     c0021858 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021846:	85 c0                	test   eax,eax
c0021848:	74 0e                	je     c0021858 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002184a:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002184d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021850:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021853:	89 10                	mov    DWORD PTR [eax],edx
c0021855:	31 c0                	xor    eax,eax
c0021857:	c3                   	ret    
c0021858:	b8 04 00 00 00       	mov    eax,0x4
c002185d:	c3                   	ret    

c002185e <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002185e:	b8 01 00 00 00       	mov    eax,0x1
c0021863:	c3                   	ret    

c0021864 <ISO9660::unlink(char const*)>:
c0021864:	b8 01 00 00 00       	mov    eax,0x1
c0021869:	c3                   	ret    

c002186a <ISO9660::write(void*, unsigned long, void*, int*)>:
c002186a:	b8 01 00 00 00       	mov    eax,0x1
c002186f:	c3                   	ret    

c0021870 <ISO9660::rename(char const*, char const*)>:
c0021870:	b8 01 00 00 00       	mov    eax,0x1
c0021875:	c3                   	ret    

c0021876 <ISO9660::mkdir(char const*)>:
c0021876:	b8 01 00 00 00       	mov    eax,0x1
c002187b:	c3                   	ret    

c002187c <ISO9660::close(void*)>:
c002187c:	83 ec 0c             	sub    esp,0xc
c002187f:	b8 04 00 00 00       	mov    eax,0x4
c0021884:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021888:	85 d2                	test   edx,edx
c002188a:	74 0e                	je     c002189a <ISO9660::close(void*)+0x1e>
c002188c:	83 ec 0c             	sub    esp,0xc
c002188f:	52                   	push   edx
c0021890:	e8 07 e0 fe ff       	call   c000f89c <free>
c0021895:	83 c4 10             	add    esp,0x10
c0021898:	31 c0                	xor    eax,eax
c002189a:	83 c4 0c             	add    esp,0xc
c002189d:	c3                   	ret    

c002189e <ISO9660::closeDir(void*)>:
c002189e:	83 ec 0c             	sub    esp,0xc
c00218a1:	b8 04 00 00 00       	mov    eax,0x4
c00218a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00218aa:	85 d2                	test   edx,edx
c00218ac:	74 0e                	je     c00218bc <ISO9660::closeDir(void*)+0x1e>
c00218ae:	83 ec 0c             	sub    esp,0xc
c00218b1:	52                   	push   edx
c00218b2:	e8 e5 df fe ff       	call   c000f89c <free>
c00218b7:	83 c4 10             	add    esp,0x10
c00218ba:	31 c0                	xor    eax,eax
c00218bc:	83 c4 0c             	add    esp,0xc
c00218bf:	c3                   	ret    

c00218c0 <ISO9660::~ISO9660()>:
c00218c0:	83 ec 0c             	sub    esp,0xc
c00218c3:	ba bc d1 02 c0       	mov    edx,0xc002d1bc
c00218c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218cc:	89 10                	mov    DWORD PTR [eax],edx
c00218ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d2:	83 ec 0c             	sub    esp,0xc
c00218d5:	50                   	push   eax
c00218d6:	e8 cf 12 ff ff       	call   c0012baa <Filesystem::~Filesystem()>
c00218db:	83 c4 10             	add    esp,0x10
c00218de:	90                   	nop
c00218df:	83 c4 0c             	add    esp,0xc
c00218e2:	c3                   	ret    
c00218e3:	90                   	nop

c00218e4 <ISO9660::~ISO9660()>:
c00218e4:	83 ec 0c             	sub    esp,0xc
c00218e7:	83 ec 0c             	sub    esp,0xc
c00218ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218ee:	e8 cd ff ff ff       	call   c00218c0 <ISO9660::~ISO9660()>
c00218f3:	83 c4 10             	add    esp,0x10
c00218f6:	83 ec 08             	sub    esp,0x8
c00218f9:	6a 08                	push   0x8
c00218fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00218ff:	e8 97 0e ff ff       	call   c001279b <operator delete(void*, unsigned long)>
c0021904:	83 c4 10             	add    esp,0x10
c0021907:	83 c4 0c             	add    esp,0xc
c002190a:	c3                   	ret    

c002190b <__memmem(unsigned char*, int, unsigned char*, int)>:
c002190b:	55                   	push   ebp
c002190c:	31 c9                	xor    ecx,ecx
c002190e:	57                   	push   edi
c002190f:	56                   	push   esi
c0021910:	53                   	push   ebx
c0021911:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021915:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021919:	89 eb                	mov    ebx,ebp
c002191b:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c002191f:	39 ce                	cmp    esi,ecx
c0021921:	7e 17                	jle    c002193a <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021923:	31 d2                	xor    edx,edx
c0021925:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021929:	7d 13                	jge    c002193e <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c002192b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002192f:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021932:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021935:	75 0d                	jne    c0021944 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021937:	42                   	inc    edx
c0021938:	eb eb                	jmp    c0021925 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c002193a:	31 c0                	xor    eax,eax
c002193c:	eb 0a                	jmp    c0021948 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002193e:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021942:	eb 04                	jmp    c0021948 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021944:	41                   	inc    ecx
c0021945:	43                   	inc    ebx
c0021946:	eb d7                	jmp    c002191f <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021948:	5b                   	pop    ebx
c0021949:	5e                   	pop    esi
c002194a:	5f                   	pop    edi
c002194b:	5d                   	pop    ebp
c002194c:	c3                   	ret    

c002194d <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002194d:	57                   	push   edi
c002194e:	56                   	push   esi
c002194f:	53                   	push   ebx
c0021950:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021954:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021958:	39 0d 60 25 03 c0    	cmp    DWORD PTR ds:0xc0032560,ecx
c002195e:	75 08                	jne    c0021968 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021960:	38 05 d4 e3 02 c0    	cmp    BYTE PTR ds:0xc002e3d4,al
c0021966:	74 2b                	je     c0021993 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021968:	83 ec 0c             	sub    esp,0xc
c002196b:	a2 d4 e3 02 c0       	mov    ds:0xc002e3d4,al
c0021970:	68 80 25 03 c0       	push   0xc0032580
c0021975:	0f be c0             	movsx  eax,al
c0021978:	6a 01                	push   0x1
c002197a:	89 0d 60 25 03 c0    	mov    DWORD PTR ds:0xc0032560,ecx
c0021980:	31 db                	xor    ebx,ebx
c0021982:	53                   	push   ebx
c0021983:	51                   	push   ecx
c0021984:	ff 34 85 3c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0cc4]
c002198b:	e8 68 48 ff ff       	call   c00161f8 <LogicalDisk::read(unsigned long long, int, void*)>
c0021990:	83 c4 20             	add    esp,0x20
c0021993:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021997:	be 80 25 03 c0       	mov    esi,0xc0032580
c002199c:	b9 00 08 00 00       	mov    ecx,0x800
c00219a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00219a3:	5b                   	pop    ebx
c00219a4:	5e                   	pop    esi
c00219a5:	5f                   	pop    edi
c00219a6:	c3                   	ret    
c00219a7:	90                   	nop

c00219a8 <ISO9660::tryMount(LogicalDisk*, int)>:
c00219a8:	81 ec 10 08 00 00    	sub    esp,0x810
c00219ae:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00219b5:	83 c0 41             	add    eax,0x41
c00219b8:	0f be c0             	movsx  eax,al
c00219bb:	50                   	push   eax
c00219bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00219c0:	50                   	push   eax
c00219c1:	6a 10                	push   0x10
c00219c3:	e8 85 ff ff ff       	call   c002194d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00219c8:	83 c4 10             	add    esp,0x10
c00219cb:	31 c0                	xor    eax,eax
c00219cd:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00219d2:	75 1d                	jne    c00219f1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00219d4:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00219d9:	75 16                	jne    c00219f1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00219db:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00219e0:	75 0f                	jne    c00219f1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00219e2:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00219e7:	75 08                	jne    c00219f1 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00219e9:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00219ee:	0f 94 c0             	sete   al
c00219f1:	81 c4 0c 08 00 00    	add    esp,0x80c
c00219f7:	c3                   	ret    

c00219f8 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00219f8:	55                   	push   ebp
c00219f9:	57                   	push   edi
c00219fa:	56                   	push   esi
c00219fb:	53                   	push   ebx
c00219fc:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021a02:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021a09:	85 ed                	test   ebp,ebp
c0021a0b:	0f 84 da 01 00 00    	je     c0021beb <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a11:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021a19:	0f 84 cc 01 00 00    	je     c0021beb <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c0021a1f:	b8 01 00 00 00       	mov    eax,0x1
c0021a24:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021a28:	0f 85 c2 01 00 00    	jne    c0021bf0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021a2e:	31 d2                	xor    edx,edx
c0021a30:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021a37:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021a3a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0021a3d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0021a40:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a47:	01 c8                	add    eax,ecx
c0021a49:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021a4c:	11 da                	adc    edx,ebx
c0021a4e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0021a52:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021a56:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021a5a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021a5e:	19 d7                	sbb    edi,edx
c0021a60:	72 11                	jb     c0021a73 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c0021a62:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a65:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a69:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021a6d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021a71:	eb 0c                	jmp    c0021a7f <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021a73:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0021a77:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021a7b:	29 ce                	sub    esi,ecx
c0021a7d:	19 df                	sbb    edi,ebx
c0021a7f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021a82:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021a85:	0f a4 c2 0b          	shld   edx,eax,0xb
c0021a89:	c1 e0 0b             	shl    eax,0xb
c0021a8c:	01 c8                	add    eax,ecx
c0021a8e:	11 da                	adc    edx,ebx
c0021a90:	89 04 24             	mov    DWORD PTR [esp],eax
c0021a93:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021a97:	51                   	push   ecx
c0021a98:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a9c:	50                   	push   eax
c0021a9d:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c0021aa1:	53                   	push   ebx
c0021aa2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0021aa6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021aaa:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021aae:	50                   	push   eax
c0021aaf:	e8 99 fe ff ff       	call   c002194d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021ab4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021ab7:	b8 00 08 00 00       	mov    eax,0x800
c0021abc:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0021ac2:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c0021ac6:	29 d0                	sub    eax,edx
c0021ac8:	83 c4 10             	add    esp,0x10
c0021acb:	89 f9                	mov    ecx,edi
c0021acd:	39 c6                	cmp    esi,eax
c0021acf:	83 d9 00             	sbb    ecx,0x0
c0021ad2:	7d 1b                	jge    c0021aef <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c0021ad4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021ad9:	75 12                	jne    c0021aed <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c0021adb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ae2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021ae8:	e9 fa 00 00 00       	jmp    c0021be7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021aed:	89 f0                	mov    eax,esi
c0021aef:	01 d3                	add    ebx,edx
c0021af1:	31 d2                	xor    edx,edx
c0021af3:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0021af7:	39 c2                	cmp    edx,eax
c0021af9:	7d 14                	jge    c0021b0f <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0021afb:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021b02:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021b06:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021b09:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0021b0c:	42                   	inc    edx
c0021b0d:	eb e8                	jmp    c0021af7 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0021b0f:	89 c2                	mov    edx,eax
c0021b11:	85 c0                	test   eax,eax
c0021b13:	79 02                	jns    c0021b17 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c0021b15:	31 d2                	xor    edx,edx
c0021b17:	01 c2                	add    edx,eax
c0021b19:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0021b1c:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c0021b23:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0021b27:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0021b2b:	99                   	cdq    
c0021b2c:	01 c1                	add    ecx,eax
c0021b2e:	11 d3                	adc    ebx,edx
c0021b30:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021b34:	29 c6                	sub    esi,eax
c0021b36:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0021b3a:	19 d7                	sbb    edi,edx
c0021b3c:	89 34 24             	mov    DWORD PTR [esp],esi
c0021b3f:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021b43:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021b48:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021b4b:	b8 00 00 00 00       	mov    eax,0x0
c0021b50:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b54:	7d 43                	jge    c0021b99 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c0021b56:	52                   	push   edx
c0021b57:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021b5b:	50                   	push   eax
c0021b5c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021b60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021b64:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021b68:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021b6c:	50                   	push   eax
c0021b6d:	e8 db fd ff ff       	call   c002194d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b72:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021b7a:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021b7f:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c0021b87:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021b8f:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021b94:	83 c4 10             	add    esp,0x10
c0021b97:	eb aa                	jmp    c0021b43 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c0021b99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021b9d:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021ba0:	74 2a                	je     c0021bcc <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c0021ba2:	50                   	push   eax
c0021ba3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021ba7:	50                   	push   eax
c0021ba8:	8d 74 24 28          	lea    esi,[esp+0x28]
c0021bac:	56                   	push   esi
c0021bad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0021bb1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0021bb5:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0021bb9:	51                   	push   ecx
c0021bba:	e8 8e fd ff ff       	call   c002194d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021bbf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021bc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021bc7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021bc9:	83 c4 10             	add    esp,0x10
c0021bcc:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021bd3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0021bd7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021bdb:	89 18                	mov    DWORD PTR [eax],ebx
c0021bdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021be1:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021be4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021be7:	31 c0                	xor    eax,eax
c0021be9:	eb 05                	jmp    c0021bf0 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c0021beb:	b8 04 00 00 00       	mov    eax,0x4
c0021bf0:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021bf6:	5b                   	pop    ebx
c0021bf7:	5e                   	pop    esi
c0021bf8:	5f                   	pop    edi
c0021bf9:	5d                   	pop    ebp
c0021bfa:	c3                   	ret    
c0021bfb:	90                   	nop

c0021bfc <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021bfc:	55                   	push   ebp
c0021bfd:	57                   	push   edi
c0021bfe:	56                   	push   esi
c0021bff:	53                   	push   ebx
c0021c00:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021c06:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0021c0d:	85 ed                	test   ebp,ebp
c0021c0f:	0f 84 51 02 00 00    	je     c0021e66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c15:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021c1d:	0f 84 43 02 00 00    	je     c0021e66 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c0021c23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c26:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c0021c29:	75 0a                	jne    c0021c35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021c2b:	b8 07 00 00 00       	mov    eax,0x7
c0021c30:	e9 36 02 00 00       	jmp    c0021e6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021c35:	50                   	push   eax
c0021c36:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021c3a:	50                   	push   eax
c0021c3b:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021c42:	53                   	push   ebx
c0021c43:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c46:	c1 e0 0b             	shl    eax,0xb
c0021c49:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c0021c4c:	c1 e8 0b             	shr    eax,0xb
c0021c4f:	50                   	push   eax
c0021c50:	e8 f8 fc ff ff       	call   c002194d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021c55:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021c58:	83 c4 10             	add    esp,0x10
c0021c5b:	89 c1                	mov    ecx,eax
c0021c5d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0021c60:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021c66:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021c69:	84 db                	test   bl,bl
c0021c6b:	0f 85 8b 00 00 00    	jne    c0021cfc <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c0021c71:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c0021c77:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0021c7a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0021c80:	29 c6                	sub    esi,eax
c0021c82:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0021c86:	89 f3                	mov    ebx,esi
c0021c88:	89 f1                	mov    ecx,esi
c0021c8a:	c1 fb 1f             	sar    ebx,0x1f
c0021c8d:	01 f0                	add    eax,esi
c0021c8f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0021c92:	11 da                	adc    edx,ebx
c0021c94:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c97:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021c9b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021c9e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021ca1:	89 d8                	mov    eax,ebx
c0021ca3:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c0021ca7:	ba 00 00 00 00       	mov    edx,0x0
c0021cac:	19 f8                	sbb    eax,edi
c0021cae:	b8 00 00 00 00       	mov    eax,0x0
c0021cb3:	73 08                	jae    c0021cbd <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0021cb5:	89 f0                	mov    eax,esi
c0021cb7:	89 fa                	mov    edx,edi
c0021cb9:	29 c8                	sub    eax,ecx
c0021cbb:	19 da                	sbb    edx,ebx
c0021cbd:	89 d7                	mov    edi,edx
c0021cbf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021cc2:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021cc5:	09 c7                	or     edi,eax
c0021cc7:	0f 84 5e ff ff ff    	je     c0021c2b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021ccd:	57                   	push   edi
c0021cce:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021cd2:	50                   	push   eax
c0021cd3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021cda:	53                   	push   ebx
c0021cdb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021cde:	c1 e0 0b             	shl    eax,0xb
c0021ce1:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0021ce5:	c1 e8 0b             	shr    eax,0xb
c0021ce8:	50                   	push   eax
c0021ce9:	e8 5f fc ff ff       	call   c002194d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021cee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021cf1:	83 c4 10             	add    esp,0x10
c0021cf4:	25 ff 07 00 00       	and    eax,0x7ff
c0021cf9:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021cfc:	31 ff                	xor    edi,edi
c0021cfe:	56                   	push   esi
c0021cff:	6a 28                	push   0x28
c0021d01:	6a 00                	push   0x0
c0021d03:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021d07:	50                   	push   eax
c0021d08:	e8 43 ea fd ff       	call   c0000750 <memset>
c0021d0d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d10:	25 ff 07 00 00       	and    eax,0x7ff
c0021d15:	89 c6                	mov    esi,eax
c0021d17:	83 c6 21             	add    esi,0x21
c0021d1a:	83 d7 00             	adc    edi,0x0
c0021d1d:	83 c4 10             	add    esp,0x10
c0021d20:	31 c9                	xor    ecx,ecx
c0021d22:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c0021d29:	83 f9 28             	cmp    ecx,0x28
c0021d2c:	88 04 24             	mov    BYTE PTR [esp],al
c0021d2f:	0f 94 c2             	sete   dl
c0021d32:	88 d0                	mov    al,dl
c0021d34:	ba ff 07 00 00       	mov    edx,0x7ff
c0021d39:	39 f2                	cmp    edx,esi
c0021d3b:	ba 00 00 00 00       	mov    edx,0x0
c0021d40:	19 fa                	sbb    edx,edi
c0021d42:	0f 92 c2             	setb   dl
c0021d45:	09 c2                	or     edx,eax
c0021d47:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021d4b:	0f 94 c0             	sete   al
c0021d4e:	08 d0                	or     al,dl
c0021d50:	75 16                	jne    c0021d68 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021d52:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021d56:	74 10                	je     c0021d68 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c0021d58:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021d5b:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021d5f:	41                   	inc    ecx
c0021d60:	83 c6 01             	add    esi,0x1
c0021d63:	83 d7 00             	adc    edi,0x0
c0021d66:	eb ba                	jmp    c0021d22 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c0021d68:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021d6f:	83 ec 0c             	sub    esp,0xc
c0021d72:	8d 74 24 24          	lea    esi,[esp+0x24]
c0021d76:	56                   	push   esi
c0021d77:	e8 f0 e9 fd ff       	call   c000076c <strlen>
c0021d7c:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0021d83:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021d87:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021d8f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021d92:	5a                   	pop    edx
c0021d93:	25 ff 07 00 00       	and    eax,0x7ff
c0021d98:	59                   	pop    ecx
c0021d99:	01 f8                	add    eax,edi
c0021d9b:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021da1:	83 e0 02             	and    eax,0x2
c0021da4:	3c 01                	cmp    al,0x1
c0021da6:	19 c0                	sbb    eax,eax
c0021da8:	83 c0 02             	add    eax,0x2
c0021dab:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021daf:	56                   	push   esi
c0021db0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021db4:	50                   	push   eax
c0021db5:	e8 52 ea fd ff       	call   c000080c <strcpy>
c0021dba:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021dbe:	83 c4 10             	add    esp,0x10
c0021dc1:	84 c0                	test   al,al
c0021dc3:	75 21                	jne    c0021de6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0021dc5:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021dcd:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021dd5:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021ddd:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021de4:	eb 28                	jmp    c0021e0e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021de6:	fe c8                	dec    al
c0021de8:	75 24                	jne    c0021e0e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c0021dea:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021df2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021dfa:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021e02:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021e09:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021e0e:	8d 74 24 40          	lea    esi,[esp+0x40]
c0021e12:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c0021e19:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c0021e20:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021e22:	0f b6 f3             	movzx  esi,bl
c0021e25:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c0021e2c:	31 db                	xor    ebx,ebx
c0021e2e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021e34:	89 df                	mov    edi,ebx
c0021e36:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c0021e39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021e3c:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c0021e3f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021e42:	39 c6                	cmp    esi,eax
c0021e44:	19 d7                	sbb    edi,edx
c0021e46:	72 10                	jb     c0021e58 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c0021e48:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0021e4f:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c0021e56:	eb 0a                	jmp    c0021e62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c0021e58:	29 f0                	sub    eax,esi
c0021e5a:	19 da                	sbb    edx,ebx
c0021e5c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0021e5f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0021e62:	31 c0                	xor    eax,eax
c0021e64:	eb 05                	jmp    c0021e6b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021e66:	b8 04 00 00 00       	mov    eax,0x4
c0021e6b:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021e71:	5b                   	pop    ebx
c0021e72:	5e                   	pop    esi
c0021e73:	5f                   	pop    edi
c0021e74:	5d                   	pop    ebp
c0021e75:	c3                   	ret    

c0021e76 <readRoot(unsigned int*, unsigned int*, char)>:
c0021e76:	57                   	push   edi
c0021e77:	56                   	push   esi
c0021e78:	81 ec 38 08 00 00    	sub    esp,0x838
c0021e7e:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021e86:	50                   	push   eax
c0021e87:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021e8b:	50                   	push   eax
c0021e8c:	6a 10                	push   0x10
c0021e8e:	e8 ba fa ff ff       	call   c002194d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e93:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c0021e9a:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0021e9e:	b9 22 00 00 00       	mov    ecx,0x22
c0021ea3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021ea5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021eac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021eb0:	89 10                	mov    DWORD PTR [eax],edx
c0021eb2:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021eb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021ebd:	89 10                	mov    DWORD PTR [eax],edx
c0021ebf:	81 c4 44 08 00 00    	add    esp,0x844
c0021ec5:	b0 01                	mov    al,0x1
c0021ec7:	5e                   	pop    esi
c0021ec8:	5f                   	pop    edi
c0021ec9:	c3                   	ret    

c0021eca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021eca:	55                   	push   ebp
c0021ecb:	57                   	push   edi
c0021ecc:	56                   	push   esi
c0021ecd:	53                   	push   ebx
c0021ece:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021ed4:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021edb:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021ee2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021ee6:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021eea:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021eee:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021ef2:	75 03                	jne    c0021ef7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021ef4:	83 c3 02             	add    ebx,0x2
c0021ef7:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021efa:	75 03                	jne    c0021eff <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021efc:	43                   	inc    ebx
c0021efd:	eb f8                	jmp    c0021ef7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021eff:	51                   	push   ecx
c0021f00:	68 00 01 00 00       	push   0x100
c0021f05:	6a 00                	push   0x0
c0021f07:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021f0b:	50                   	push   eax
c0021f0c:	e8 3f e8 fd ff       	call   c0000750 <memset>
c0021f11:	83 c4 10             	add    esp,0x10
c0021f14:	31 d2                	xor    edx,edx
c0021f16:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021f19:	84 c0                	test   al,al
c0021f1b:	74 21                	je     c0021f3e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021f1d:	3c 2f                	cmp    al,0x2f
c0021f1f:	75 0b                	jne    c0021f2c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021f21:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021f25:	bd 01 00 00 00       	mov    ebp,0x1
c0021f2a:	eb 14                	jmp    c0021f40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021f2c:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021f2f:	80 f9 19             	cmp    cl,0x19
c0021f32:	77 03                	ja     c0021f37 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021f34:	83 e8 20             	sub    eax,0x20
c0021f37:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021f3b:	42                   	inc    edx
c0021f3c:	eb d8                	jmp    c0021f16 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021f3e:	31 ed                	xor    ebp,ebp
c0021f40:	83 ec 0c             	sub    esp,0xc
c0021f43:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021f4a:	e8 3d d9 fe ff       	call   c000f88c <malloc>
c0021f4f:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021f56:	89 c6                	mov    esi,eax
c0021f58:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021f5e:	c1 ef 0b             	shr    edi,0xb
c0021f61:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021f68:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021f6c:	83 c4 10             	add    esp,0x10
c0021f6f:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021f74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021f78:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021f7f:	74 28                	je     c0021fa9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021f81:	52                   	push   edx
c0021f82:	57                   	push   edi
c0021f83:	50                   	push   eax
c0021f84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021f88:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021f8f:	e8 b9 f9 ff ff       	call   c002194d <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021f98:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021f9f:	05 00 08 00 00       	add    eax,0x800
c0021fa4:	83 c4 10             	add    esp,0x10
c0021fa7:	eb cb                	jmp    c0021f74 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021fa9:	83 ec 0c             	sub    esp,0xc
c0021fac:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021fb0:	57                   	push   edi
c0021fb1:	e8 b6 e7 fd ff       	call   c000076c <strlen>
c0021fb6:	50                   	push   eax
c0021fb7:	57                   	push   edi
c0021fb8:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021fbf:	56                   	push   esi
c0021fc0:	e8 46 f9 ff ff       	call   c002190b <__memmem(unsigned char*, int, unsigned char*, int)>
c0021fc5:	83 c4 20             	add    esp,0x20
c0021fc8:	85 c0                	test   eax,eax
c0021fca:	75 13                	jne    c0021fdf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021fcc:	83 ec 0c             	sub    esp,0xc
c0021fcf:	56                   	push   esi
c0021fd0:	e8 c7 d8 fe ff       	call   c000f89c <free>
c0021fd5:	83 c4 10             	add    esp,0x10
c0021fd8:	31 c0                	xor    eax,eax
c0021fda:	e9 b3 00 00 00       	jmp    c0022092 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021fdf:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021fe3:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021fe7:	c1 e7 08             	shl    edi,0x8
c0021fea:	c1 e2 10             	shl    edx,0x10
c0021fed:	09 d7                	or     edi,edx
c0021fef:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021ff3:	09 d7                	or     edi,edx
c0021ff5:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021ff9:	c1 e2 18             	shl    edx,0x18
c0021ffc:	09 d7                	or     edi,edx
c0021ffe:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022002:	89 d1                	mov    ecx,edx
c0022004:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0022008:	c1 e1 08             	shl    ecx,0x8
c002200b:	c1 e2 10             	shl    edx,0x10
c002200e:	09 ca                	or     edx,ecx
c0022010:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0022014:	09 ca                	or     edx,ecx
c0022016:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c002201a:	c1 e1 18             	shl    ecx,0x18
c002201d:	09 ca                	or     edx,ecx
c002201f:	89 e9                	mov    ecx,ebp
c0022021:	84 c9                	test   cl,cl
c0022023:	74 3c                	je     c0022061 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0022025:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0022029:	83 ec 0c             	sub    esp,0xc
c002202c:	56                   	push   esi
c002202d:	e8 6a d8 fe ff       	call   c000f89c <free>
c0022032:	83 c4 0c             	add    esp,0xc
c0022035:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c002203c:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0022041:	50                   	push   eax
c0022042:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022049:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0022050:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022054:	52                   	push   edx
c0022055:	57                   	push   edi
c0022056:	53                   	push   ebx
c0022057:	e8 6e fe ff ff       	call   c0021eca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c002205c:	83 c4 20             	add    esp,0x20
c002205f:	eb 31                	jmp    c0022092 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022061:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0022064:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c002206b:	d0 e8                	shr    al,1
c002206d:	89 3b                	mov    DWORD PTR [ebx],edi
c002206f:	83 e0 01             	and    eax,0x1
c0022072:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0022079:	83 ec 0c             	sub    esp,0xc
c002207c:	89 13                	mov    DWORD PTR [ebx],edx
c002207e:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0022085:	89 03                	mov    DWORD PTR [ebx],eax
c0022087:	56                   	push   esi
c0022088:	e8 0f d8 fe ff       	call   c000f89c <free>
c002208d:	83 c4 10             	add    esp,0x10
c0022090:	b0 01                	mov    al,0x1
c0022092:	81 c4 1c 01 00 00    	add    esp,0x11c
c0022098:	5b                   	pop    ebx
c0022099:	5e                   	pop    esi
c002209a:	5f                   	pop    edi
c002209b:	5d                   	pop    ebp
c002209c:	c3                   	ret    

c002209d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c002209d:	55                   	push   ebp
c002209e:	57                   	push   edi
c002209f:	56                   	push   esi
c00220a0:	53                   	push   ebx
c00220a1:	83 ec 20             	sub    esp,0x20
c00220a4:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00220a8:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00220ac:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00220b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00220b8:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00220c0:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c00220c5:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c00220cb:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c00220d1:	57                   	push   edi
c00220d2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00220d6:	50                   	push   eax
c00220d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00220db:	50                   	push   eax
c00220dc:	e8 95 fd ff ff       	call   c0021e76 <readRoot(unsigned int*, unsigned int*, char)>
c00220e1:	5a                   	pop    edx
c00220e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00220e6:	e8 81 e6 fd ff       	call   c000076c <strlen>
c00220eb:	83 c4 10             	add    esp,0x10
c00220ee:	83 f8 03             	cmp    eax,0x3
c00220f1:	77 17                	ja     c002210a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c00220f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220f7:	89 03                	mov    DWORD PTR [ebx],eax
c00220f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00220fd:	89 06                	mov    DWORD PTR [esi],eax
c00220ff:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022106:	b0 01                	mov    al,0x1
c0022108:	eb 19                	jmp    c0022123 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002210a:	50                   	push   eax
c002210b:	55                   	push   ebp
c002210c:	57                   	push   edi
c002210d:	56                   	push   esi
c002210e:	53                   	push   ebx
c002210f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022113:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022117:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002211b:	e8 aa fd ff ff       	call   c0021eca <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022120:	83 c4 20             	add    esp,0x20
c0022123:	83 c4 1c             	add    esp,0x1c
c0022126:	5b                   	pop    ebx
c0022127:	5e                   	pop    esi
c0022128:	5f                   	pop    edi
c0022129:	5d                   	pop    ebp
c002212a:	c3                   	ret    
c002212b:	90                   	nop

c002212c <ISO9660::open(char const*, void**, FileOpenMode)>:
c002212c:	57                   	push   edi
c002212d:	56                   	push   esi
c002212e:	53                   	push   ebx
c002212f:	83 ec 10             	sub    esp,0x10
c0022132:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022136:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002213a:	85 ff                	test   edi,edi
c002213c:	0f 84 9d 00 00 00    	je     c00221df <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022142:	85 f6                	test   esi,esi
c0022144:	0f 84 95 00 00 00    	je     c00221df <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002214a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c002214f:	74 17                	je     c0022168 <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022151:	83 ec 0c             	sub    esp,0xc
c0022154:	68 73 d1 02 c0       	push   0xc002d173
c0022159:	e8 1d 07 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c002215e:	83 c4 10             	add    esp,0x10
c0022161:	b8 03 00 00 00       	mov    eax,0x3
c0022166:	eb 7c                	jmp    c00221e4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022168:	83 ec 0c             	sub    esp,0xc
c002216b:	6a 1c                	push   0x1c
c002216d:	e8 1a d7 fe ff       	call   c000f88c <malloc>
c0022172:	89 07                	mov    DWORD PTR [edi],eax
c0022174:	89 c3                	mov    ebx,eax
c0022176:	58                   	pop    eax
c0022177:	8d 44 24 18          	lea    eax,[esp+0x18]
c002217b:	50                   	push   eax
c002217c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002217f:	50                   	push   eax
c0022180:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022184:	50                   	push   eax
c0022185:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022189:	50                   	push   eax
c002218a:	56                   	push   esi
c002218b:	e8 0d ff ff ff       	call   c002209d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022190:	83 c4 20             	add    esp,0x20
c0022193:	84 c0                	test   al,al
c0022195:	74 07                	je     c002219e <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022197:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002219c:	74 0b                	je     c00221a9 <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c002219e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00221a2:	b8 01 00 00 00       	mov    eax,0x1
c00221a7:	eb 3b                	jmp    c00221e4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00221a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00221ad:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00221b1:	89 03                	mov    DWORD PTR [ebx],eax
c00221b3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00221ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00221be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00221c5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00221cc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00221cf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00221d6:	8a 06                	mov    al,BYTE PTR [esi]
c00221d8:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00221db:	31 c0                	xor    eax,eax
c00221dd:	eb 05                	jmp    c00221e4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00221df:	b8 04 00 00 00       	mov    eax,0x4
c00221e4:	83 c4 10             	add    esp,0x10
c00221e7:	5b                   	pop    ebx
c00221e8:	5e                   	pop    esi
c00221e9:	5f                   	pop    edi
c00221ea:	c3                   	ret    
c00221eb:	90                   	nop

c00221ec <ISO9660::exists(char const*)>:
c00221ec:	83 ec 28             	sub    esp,0x28
c00221ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00221f3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00221f7:	52                   	push   edx
c00221f8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00221fb:	52                   	push   edx
c00221fc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022200:	52                   	push   edx
c0022201:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022205:	52                   	push   edx
c0022206:	50                   	push   eax
c0022207:	e8 91 fe ff ff       	call   c002209d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002220c:	83 c4 3c             	add    esp,0x3c
c002220f:	c3                   	ret    

c0022210 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022210:	56                   	push   esi
c0022211:	53                   	push   ebx
c0022212:	83 ec 14             	sub    esp,0x14
c0022215:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022219:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002221d:	85 db                	test   ebx,ebx
c002221f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022223:	0f 94 c2             	sete   dl
c0022226:	85 f6                	test   esi,esi
c0022228:	0f 94 c0             	sete   al
c002222b:	08 c2                	or     dl,al
c002222d:	75 68                	jne    c0022297 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002222f:	85 c9                	test   ecx,ecx
c0022231:	74 64                	je     c0022297 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022233:	83 ec 0c             	sub    esp,0xc
c0022236:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0022239:	8d 44 24 18          	lea    eax,[esp+0x18]
c002223d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022243:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002224a:	50                   	push   eax
c002224b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c002224e:	50                   	push   eax
c002224f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022253:	50                   	push   eax
c0022254:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022258:	50                   	push   eax
c0022259:	51                   	push   ecx
c002225a:	e8 3e fe ff ff       	call   c002209d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002225f:	83 c4 20             	add    esp,0x20
c0022262:	ba 01 00 00 00       	mov    edx,0x1
c0022267:	84 c0                	test   al,al
c0022269:	74 31                	je     c002229c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002226b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002226f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022276:	89 03                	mov    DWORD PTR [ebx],eax
c0022278:	ba 00 00 00 00       	mov    edx,0x0
c002227d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022281:	85 c0                	test   eax,eax
c0022283:	0f 95 06             	setne  BYTE PTR [esi]
c0022286:	74 14                	je     c002229c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022288:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002228e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022295:	eb 05                	jmp    c002229c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022297:	ba 04 00 00 00       	mov    edx,0x4
c002229c:	83 c4 14             	add    esp,0x14
c002229f:	89 d0                	mov    eax,edx
c00222a1:	5b                   	pop    ebx
c00222a2:	5e                   	pop    esi
c00222a3:	c3                   	ret    

c00222a4 <ISO9660::openDir(char const*, void**)>:
c00222a4:	57                   	push   edi
c00222a5:	56                   	push   esi
c00222a6:	53                   	push   ebx
c00222a7:	83 ec 10             	sub    esp,0x10
c00222aa:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00222ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00222b2:	85 ff                	test   edi,edi
c00222b4:	0f 84 95 00 00 00    	je     c002234f <ISO9660::openDir(char const*, void**)+0xab>
c00222ba:	85 f6                	test   esi,esi
c00222bc:	0f 84 8d 00 00 00    	je     c002234f <ISO9660::openDir(char const*, void**)+0xab>
c00222c2:	83 ec 0c             	sub    esp,0xc
c00222c5:	6a 1c                	push   0x1c
c00222c7:	e8 c0 d5 fe ff       	call   c000f88c <malloc>
c00222cc:	89 07                	mov    DWORD PTR [edi],eax
c00222ce:	89 c3                	mov    ebx,eax
c00222d0:	59                   	pop    ecx
c00222d1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00222d5:	50                   	push   eax
c00222d6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00222d9:	50                   	push   eax
c00222da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222de:	50                   	push   eax
c00222df:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00222e3:	50                   	push   eax
c00222e4:	56                   	push   esi
c00222e5:	e8 b3 fd ff ff       	call   c002209d <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00222ea:	83 c4 20             	add    esp,0x20
c00222ed:	84 c0                	test   al,al
c00222ef:	74 07                	je     c00222f8 <ISO9660::openDir(char const*, void**)+0x54>
c00222f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00222f6:	75 21                	jne    c0022319 <ISO9660::openDir(char const*, void**)+0x75>
c00222f8:	0f b6 c0             	movzx  eax,al
c00222fb:	52                   	push   edx
c00222fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022300:	50                   	push   eax
c0022301:	68 99 d1 02 c0       	push   0xc002d199
c0022306:	e8 70 05 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c002230b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c002230f:	83 c4 10             	add    esp,0x10
c0022312:	b8 01 00 00 00       	mov    eax,0x1
c0022317:	eb 3b                	jmp    c0022354 <ISO9660::openDir(char const*, void**)+0xb0>
c0022319:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002231d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022321:	89 03                	mov    DWORD PTR [ebx],eax
c0022323:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002232a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002232e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022335:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002233c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002233f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022346:	8a 06                	mov    al,BYTE PTR [esi]
c0022348:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002234b:	31 c0                	xor    eax,eax
c002234d:	eb 05                	jmp    c0022354 <ISO9660::openDir(char const*, void**)+0xb0>
c002234f:	b8 04 00 00 00       	mov    eax,0x4
c0022354:	83 c4 10             	add    esp,0x10
c0022357:	5b                   	pop    ebx
c0022358:	5e                   	pop    esi
c0022359:	5f                   	pop    edi
c002235a:	c3                   	ret    
c002235b:	90                   	nop

c002235c <ISO9660::ISO9660()>:
c002235c:	83 ec 0c             	sub    esp,0xc
c002235f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022363:	83 ec 0c             	sub    esp,0xc
c0022366:	50                   	push   eax
c0022367:	e8 1a 08 ff ff       	call   c0012b86 <Filesystem::Filesystem()>
c002236c:	83 c4 10             	add    esp,0x10
c002236f:	ba bc d1 02 c0       	mov    edx,0xc002d1bc
c0022374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022378:	89 10                	mov    DWORD PTR [eax],edx
c002237a:	90                   	nop
c002237b:	83 c4 0c             	add    esp,0xc
c002237e:	c3                   	ret    
c002237f:	90                   	nop

c0022380 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022380:	83 ec 1c             	sub    esp,0x1c
c0022383:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022387:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002238b:	89 10                	mov    DWORD PTR [eax],edx
c002238d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022391:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022395:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022398:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002239c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00223a0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00223a3:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00223a8:	75 23                	jne    c00223cd <SoundChannel::SoundChannel(int, int, int, int)+0x4d>
c00223aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00223b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00223b7:	0f af c2             	imul   eax,edx
c00223ba:	85 c0                	test   eax,eax
c00223bc:	79 03                	jns    c00223c1 <SoundChannel::SoundChannel(int, int, int, int)+0x41>
c00223be:	83 c0 03             	add    eax,0x3
c00223c1:	c1 f8 02             	sar    eax,0x2
c00223c4:	05 a0 0f 00 00       	add    eax,0xfa0
c00223c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00223cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223d1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00223d5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00223d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223dc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00223e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223e7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00223ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00223f5:	c1 e0 02             	shl    eax,0x2
c00223f8:	83 ec 0c             	sub    esp,0xc
c00223fb:	50                   	push   eax
c00223fc:	e8 8b d4 fe ff       	call   c000f88c <malloc>
c0022401:	83 c4 10             	add    esp,0x10
c0022404:	89 c2                	mov    edx,eax
c0022406:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002240a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002240d:	83 ec 04             	sub    esp,0x4
c0022410:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022414:	50                   	push   eax
c0022415:	6a 01                	push   0x1
c0022417:	6a 04                	push   0x4
c0022419:	e8 47 67 fe ff       	call   c0008b65 <src_new>
c002241e:	83 c4 10             	add    esp,0x10
c0022421:	89 c2                	mov    edx,eax
c0022423:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022427:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c002242a:	83 ec 0c             	sub    esp,0xc
c002242d:	68 1c d2 02 c0       	push   0xc002d21c
c0022432:	e8 44 04 ff ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022437:	83 c4 10             	add    esp,0x10
c002243a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002243e:	85 c0                	test   eax,eax
c0022440:	74 10                	je     c0022452 <SoundChannel::SoundChannel(int, int, int, int)+0xd2>
c0022442:	83 ec 0c             	sub    esp,0xc
c0022445:	68 32 d2 02 c0       	push   0xc002d232
c002244a:	e8 62 7e ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c002244f:	83 c4 10             	add    esp,0x10
c0022452:	a0 80 31 03 c0       	mov    al,ds:0xc0033180
c0022457:	83 f0 01             	xor    eax,0x1
c002245a:	84 c0                	test   al,al
c002245c:	74 57                	je     c00224b5 <SoundChannel::SoundChannel(int, int, int, int)+0x135>
c002245e:	a1 4c d2 02 c0       	mov    eax,ds:0xc002d24c
c0022463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022467:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002246f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022477:	7f 35                	jg     c00224ae <SoundChannel::SoundChannel(int, int, int, int)+0x12e>
c0022479:	83 ec 0c             	sub    esp,0xc
c002247c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022480:	e8 4a 56 00 00       	call   c0027acf <__floatsisf>
c0022485:	83 c4 10             	add    esp,0x10
c0022488:	8b 15 4c d2 02 c0    	mov    edx,DWORD PTR ds:0xc002d24c
c002248e:	83 ec 08             	sub    esp,0x8
c0022491:	52                   	push   edx
c0022492:	50                   	push   eax
c0022493:	e8 49 52 00 00       	call   c00276e1 <__mulsf3>
c0022498:	83 c4 10             	add    esp,0x10
c002249b:	89 c2                	mov    edx,eax
c002249d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00224a1:	89 14 85 80 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd280],edx
c00224a8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00224ac:	eb c1                	jmp    c002246f <SoundChannel::SoundChannel(int, int, int, int)+0xef>
c00224ae:	c6 05 80 31 03 c0 01 	mov    BYTE PTR ds:0xc0033180,0x1
c00224b5:	90                   	nop
c00224b6:	83 c4 1c             	add    esp,0x1c
c00224b9:	c3                   	ret    

c00224ba <SoundChannel::~SoundChannel()>:
c00224ba:	83 ec 0c             	sub    esp,0xc
c00224bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00224c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00224c4:	83 ec 0c             	sub    esp,0xc
c00224c7:	50                   	push   eax
c00224c8:	e8 cf d3 fe ff       	call   c000f89c <free>
c00224cd:	83 c4 10             	add    esp,0x10
c00224d0:	90                   	nop
c00224d1:	83 c4 0c             	add    esp,0xc
c00224d4:	c3                   	ret    
c00224d5:	90                   	nop

c00224d6 <SoundChannel::getSampleRate()>:
c00224d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224da:	8b 00                	mov    eax,DWORD PTR [eax]
c00224dc:	c3                   	ret    
c00224dd:	90                   	nop

c00224de <SoundChannel::getBits()>:
c00224de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00224e5:	c3                   	ret    

c00224e6 <SoundChannel::getBufferUsed()>:
c00224e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224ea:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00224ed:	c3                   	ret    

c00224ee <SoundChannel::getBufferSize()>:
c00224ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00224f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00224f5:	c3                   	ret    

c00224f6 <SoundChannel::unbuffer(float*, int, int)>:
c00224f6:	56                   	push   esi
c00224f7:	53                   	push   ebx
c00224f8:	83 ec 40             	sub    esp,0x40
c00224fb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00224ff:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022502:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022506:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022509:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002250d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022511:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022515:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022519:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002251d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022521:	e8 a9 55 00 00       	call   c0027acf <__floatsisf>
c0022526:	5a                   	pop    edx
c0022527:	89 c6                	mov    esi,eax
c0022529:	ff 33                	push   DWORD PTR [ebx]
c002252b:	e8 9f 55 00 00       	call   c0027acf <__floatsisf>
c0022530:	59                   	pop    ecx
c0022531:	5a                   	pop    edx
c0022532:	50                   	push   eax
c0022533:	56                   	push   esi
c0022534:	e8 6b 53 00 00       	call   c00278a4 <__divsf3>
c0022539:	89 04 24             	mov    DWORD PTR [esp],eax
c002253c:	e8 5e 68 00 00       	call   c0028d9f <__extendsfdf2>
c0022541:	59                   	pop    ecx
c0022542:	5e                   	pop    esi
c0022543:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022547:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c002254b:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022553:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022557:	50                   	push   eax
c0022558:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c002255b:	e8 fa 61 fe ff       	call   c000875a <src_process>
c0022560:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022564:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022567:	83 c4 0c             	add    esp,0xc
c002256a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002256d:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022570:	29 d0                	sub    eax,edx
c0022572:	c1 e0 02             	shl    eax,0x2
c0022575:	50                   	push   eax
c0022576:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022579:	50                   	push   eax
c002257a:	51                   	push   ecx
c002257b:	e8 08 e1 fd ff       	call   c0000688 <memmove>
c0022580:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022584:	83 c4 44             	add    esp,0x44
c0022587:	5b                   	pop    ebx
c0022588:	5e                   	pop    esi
c0022589:	c3                   	ret    

c002258a <SoundChannel::buffer16(short*, int)>:
c002258a:	55                   	push   ebp
c002258b:	57                   	push   edi
c002258c:	56                   	push   esi
c002258d:	53                   	push   ebx
c002258e:	83 ec 1c             	sub    esp,0x1c
c0022591:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022595:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c0022598:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c002259b:	0f 84 d2 00 00 00    	je     c0022673 <SoundChannel::buffer16(short*, int)+0xe9>
c00225a1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00225a5:	85 ed                	test   ebp,ebp
c00225a7:	0f 8e c6 00 00 00    	jle    c0022673 <SoundChannel::buffer16(short*, int)+0xe9>
c00225ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00225b1:	bd 00 00 00 38       	mov    ebp,0x38000000
c00225b6:	83 ec 0c             	sub    esp,0xc
c00225b9:	0f bf 00             	movsx  eax,WORD PTR [eax]
c00225bc:	50                   	push   eax
c00225bd:	e8 0d 55 00 00       	call   c0027acf <__floatsisf>
c00225c2:	59                   	pop    ecx
c00225c3:	8d 4e 01             	lea    ecx,[esi+0x1]
c00225c6:	5f                   	pop    edi
c00225c7:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00225ca:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c00225cd:	55                   	push   ebp
c00225ce:	50                   	push   eax
c00225cf:	e8 0d 51 00 00       	call   c00276e1 <__mulsf3>
c00225d4:	83 c4 10             	add    esp,0x10
c00225d7:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c00225da:	8b 73 1c             	mov    esi,DWORD PTR [ebx+0x1c]
c00225dd:	3b 73 14             	cmp    esi,DWORD PTR [ebx+0x14]
c00225e0:	0f 84 99 00 00 00    	je     c002267f <SoundChannel::buffer16(short*, int)+0xf5>
c00225e6:	83 7c 24 38 01       	cmp    DWORD PTR [esp+0x38],0x1
c00225eb:	74 78                	je     c0022665 <SoundChannel::buffer16(short*, int)+0xdb>
c00225ed:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00225f1:	83 ec 0c             	sub    esp,0xc
c00225f4:	0f bf 40 02          	movsx  eax,WORD PTR [eax+0x2]
c00225f8:	50                   	push   eax
c00225f9:	e8 d1 54 00 00       	call   c0027acf <__floatsisf>
c00225fe:	5f                   	pop    edi
c00225ff:	8d 4e 01             	lea    ecx,[esi+0x1]
c0022602:	5a                   	pop    edx
c0022603:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0022606:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022609:	55                   	push   ebp
c002260a:	50                   	push   eax
c002260b:	e8 d1 50 00 00       	call   c00276e1 <__mulsf3>
c0022610:	83 c4 10             	add    esp,0x10
c0022613:	89 04 b7             	mov    DWORD PTR [edi+esi*4],eax
c0022616:	be 02 00 00 00       	mov    esi,0x2
c002261b:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002261e:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c0022621:	74 46                	je     c0022669 <SoundChannel::buffer16(short*, int)+0xdf>
c0022623:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0022627:	eb 36                	jmp    c002265f <SoundChannel::buffer16(short*, int)+0xd5>
c0022629:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c002262d:	83 ec 0c             	sub    esp,0xc
c0022630:	0f bf 04 70          	movsx  eax,WORD PTR [eax+esi*2]
c0022634:	46                   	inc    esi
c0022635:	50                   	push   eax
c0022636:	e8 94 54 00 00       	call   c0027acf <__floatsisf>
c002263b:	5a                   	pop    edx
c002263c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c002263f:	59                   	pop    ecx
c0022640:	8d 4f 01             	lea    ecx,[edi+0x1]
c0022643:	89 4b 1c             	mov    DWORD PTR [ebx+0x1c],ecx
c0022646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002264a:	50                   	push   eax
c002264b:	e8 91 50 00 00       	call   c00276e1 <__mulsf3>
c0022650:	83 c4 10             	add    esp,0x10
c0022653:	89 44 bd 00          	mov    DWORD PTR [ebp+edi*4+0x0],eax
c0022657:	8b 7b 1c             	mov    edi,DWORD PTR [ebx+0x1c]
c002265a:	3b 7b 14             	cmp    edi,DWORD PTR [ebx+0x14]
c002265d:	74 0a                	je     c0022669 <SoundChannel::buffer16(short*, int)+0xdf>
c002265f:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
c0022663:	75 c4                	jne    c0022629 <SoundChannel::buffer16(short*, int)+0x9f>
c0022665:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0022669:	83 c4 1c             	add    esp,0x1c
c002266c:	89 f0                	mov    eax,esi
c002266e:	5b                   	pop    ebx
c002266f:	5e                   	pop    esi
c0022670:	5f                   	pop    edi
c0022671:	5d                   	pop    ebp
c0022672:	c3                   	ret    
c0022673:	83 c4 1c             	add    esp,0x1c
c0022676:	31 f6                	xor    esi,esi
c0022678:	5b                   	pop    ebx
c0022679:	89 f0                	mov    eax,esi
c002267b:	5e                   	pop    esi
c002267c:	5f                   	pop    edi
c002267d:	5d                   	pop    ebp
c002267e:	c3                   	ret    
c002267f:	be 01 00 00 00       	mov    esi,0x1
c0022684:	eb e3                	jmp    c0022669 <SoundChannel::buffer16(short*, int)+0xdf>

c0022686 <SoundChannel::buffer8(unsigned char*, int)>:
c0022686:	55                   	push   ebp
c0022687:	57                   	push   edi
c0022688:	56                   	push   esi
c0022689:	53                   	push   ebx
c002268a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002268e:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022692:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022695:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022699:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002269c:	74 7a                	je     c0022718 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002269e:	85 ff                	test   edi,edi
c00226a0:	7e 76                	jle    c0022718 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00226a2:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00226a6:	8d 70 01             	lea    esi,[eax+0x1]
c00226a9:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00226ac:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00226af:	8b 1c 9d 80 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd280]
c00226b6:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00226b9:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00226bc:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00226bf:	74 5e                	je     c002271f <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00226c1:	83 ff 01             	cmp    edi,0x1
c00226c4:	74 4b                	je     c0022711 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00226c6:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00226ca:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00226cd:	8d 70 01             	lea    esi,[eax+0x1]
c00226d0:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00226d3:	8b 1c 9d 80 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd280]
c00226da:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00226dd:	b8 02 00 00 00       	mov    eax,0x2
c00226e2:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00226e5:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00226e8:	75 23                	jne    c002270d <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00226ea:	eb 27                	jmp    c0022713 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00226ec:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00226f1:	8d 71 01             	lea    esi,[ecx+0x1]
c00226f4:	40                   	inc    eax
c00226f5:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00226f8:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00226fb:	8b 1c 9d 80 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd280]
c0022702:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022705:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022708:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002270b:	74 06                	je     c0022713 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002270d:	39 c7                	cmp    edi,eax
c002270f:	75 db                	jne    c00226ec <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022711:	89 f8                	mov    eax,edi
c0022713:	5b                   	pop    ebx
c0022714:	5e                   	pop    esi
c0022715:	5f                   	pop    edi
c0022716:	5d                   	pop    ebp
c0022717:	c3                   	ret    
c0022718:	5b                   	pop    ebx
c0022719:	31 c0                	xor    eax,eax
c002271b:	5e                   	pop    esi
c002271c:	5f                   	pop    edi
c002271d:	5d                   	pop    ebp
c002271e:	c3                   	ret    
c002271f:	b8 01 00 00 00       	mov    eax,0x1
c0022724:	eb ed                	jmp    c0022713 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022726 <SoundDevice::SoundDevice(char const*)>:
c0022726:	83 ec 1c             	sub    esp,0x1c
c0022729:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002272d:	83 ec 08             	sub    esp,0x8
c0022730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022734:	50                   	push   eax
c0022735:	e8 7e 17 ff ff       	call   c0013eb8 <Device::Device(char const*)>
c002273a:	83 c4 10             	add    esp,0x10
c002273d:	ba 4c d3 02 c0       	mov    edx,0xc002d34c
c0022742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022746:	89 10                	mov    DWORD PTR [eax],edx
c0022748:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002274c:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022756:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002275a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022764:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002276c:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022771:	7f 19                	jg     c002278c <SoundDevice::SoundDevice(char const*)+0x66>
c0022773:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022777:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002277b:	83 c2 54             	add    edx,0x54
c002277e:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022786:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002278a:	eb e0                	jmp    c002276c <SoundDevice::SoundDevice(char const*)+0x46>
c002278c:	90                   	nop
c002278d:	83 c4 1c             	add    esp,0x1c
c0022790:	c3                   	ret    
c0022791:	90                   	nop

c0022792 <SoundDevice::~SoundDevice()>:
c0022792:	53                   	push   ebx
c0022793:	83 ec 18             	sub    esp,0x18
c0022796:	ba 4c d3 02 c0       	mov    edx,0xc002d34c
c002279b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002279f:	89 10                	mov    DWORD PTR [eax],edx
c00227a1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00227a9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00227ae:	7f 46                	jg     c00227f6 <SoundDevice::~SoundDevice()+0x64>
c00227b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00227b8:	83 c2 54             	add    edx,0x54
c00227bb:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00227bf:	85 c0                	test   eax,eax
c00227c1:	74 2d                	je     c00227f0 <SoundDevice::~SoundDevice()+0x5e>
c00227c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00227cb:	83 c2 54             	add    edx,0x54
c00227ce:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00227d2:	85 db                	test   ebx,ebx
c00227d4:	74 1a                	je     c00227f0 <SoundDevice::~SoundDevice()+0x5e>
c00227d6:	83 ec 0c             	sub    esp,0xc
c00227d9:	53                   	push   ebx
c00227da:	e8 db fc ff ff       	call   c00224ba <SoundChannel::~SoundChannel()>
c00227df:	83 c4 10             	add    esp,0x10
c00227e2:	83 ec 08             	sub    esp,0x8
c00227e5:	6a 2c                	push   0x2c
c00227e7:	53                   	push   ebx
c00227e8:	e8 ae ff fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00227ed:	83 c4 10             	add    esp,0x10
c00227f0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00227f4:	eb b3                	jmp    c00227a9 <SoundDevice::~SoundDevice()+0x17>
c00227f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00227fa:	83 ec 0c             	sub    esp,0xc
c00227fd:	50                   	push   eax
c00227fe:	e8 7f 13 ff ff       	call   c0013b82 <Device::~Device()>
c0022803:	83 c4 10             	add    esp,0x10
c0022806:	90                   	nop
c0022807:	83 c4 18             	add    esp,0x18
c002280a:	5b                   	pop    ebx
c002280b:	c3                   	ret    

c002280c <SoundDevice::~SoundDevice()>:
c002280c:	83 ec 0c             	sub    esp,0xc
c002280f:	83 ec 0c             	sub    esp,0xc
c0022812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022816:	e8 77 ff ff ff       	call   c0022792 <SoundDevice::~SoundDevice()>
c002281b:	83 c4 10             	add    esp,0x10
c002281e:	83 ec 08             	sub    esp,0x8
c0022821:	68 e4 01 00 00       	push   0x1e4
c0022826:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002282a:	e8 6c ff fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c002282f:	83 c4 10             	add    esp,0x10
c0022832:	83 c4 0c             	add    esp,0xc
c0022835:	c3                   	ret    

c0022836 <SoundDevice::getFreeChannelNum()>:
c0022836:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002283a:	31 c0                	xor    eax,eax
c002283c:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022844:	74 09                	je     c002284f <SoundDevice::getFreeChannelNum()+0x19>
c0022846:	40                   	inc    eax
c0022847:	83 f8 20             	cmp    eax,0x20
c002284a:	75 f0                	jne    c002283c <SoundDevice::getFreeChannelNum()+0x6>
c002284c:	83 c8 ff             	or     eax,0xffffffff
c002284f:	c3                   	ret    

c0022850 <SoundDevice::addChannel(SoundChannel*)>:
c0022850:	56                   	push   esi
c0022851:	53                   	push   ebx
c0022852:	51                   	push   ecx
c0022853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022857:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002285b:	53                   	push   ebx
c002285c:	e8 d5 ff ff ff       	call   c0022836 <SoundDevice::getFreeChannelNum()>
c0022861:	5a                   	pop    edx
c0022862:	83 f8 ff             	cmp    eax,0xffffffff
c0022865:	74 51                	je     c00228b8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022867:	85 f6                	test   esi,esi
c0022869:	74 4d                	je     c00228b8 <SoundDevice::addChannel(SoundChannel*)+0x68>
c002286b:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022872:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022879:	75 30                	jne    c00228ab <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002287b:	83 ec 0c             	sub    esp,0xc
c002287e:	56                   	push   esi
c002287f:	e8 52 fc ff ff       	call   c00224d6 <SoundChannel::getSampleRate()>
c0022884:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002288a:	89 34 24             	mov    DWORD PTR [esp],esi
c002288d:	e8 4c fc ff ff       	call   c00224de <SoundChannel::getBits()>
c0022892:	83 c4 0c             	add    esp,0xc
c0022895:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002289b:	8b 13                	mov    edx,DWORD PTR [ebx]
c002289d:	50                   	push   eax
c002289e:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00228a4:	53                   	push   ebx
c00228a5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00228a8:	83 c4 10             	add    esp,0x10
c00228ab:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00228b1:	b8 01 00 00 00       	mov    eax,0x1
c00228b6:	eb 03                	jmp    c00228bb <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00228b8:	83 c8 ff             	or     eax,0xffffffff
c00228bb:	5a                   	pop    edx
c00228bc:	5b                   	pop    ebx
c00228bd:	5e                   	pop    esi
c00228be:	c3                   	ret    
c00228bf:	90                   	nop

c00228c0 <SoundDevice::removeChannel(int)>:
c00228c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00228c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228c8:	83 fa 1f             	cmp    edx,0x1f
c00228cb:	77 23                	ja     c00228f0 <SoundDevice::removeChannel(int)+0x30>
c00228cd:	8d 14 90             	lea    edx,[eax+edx*4]
c00228d0:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00228d7:	74 17                	je     c00228f0 <SoundDevice::removeChannel(int)+0x30>
c00228d9:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00228e3:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00228e9:	75 05                	jne    c00228f0 <SoundDevice::removeChannel(int)+0x30>
c00228eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00228ed:	ff 60 28             	jmp    DWORD PTR [eax+0x28]
c00228f0:	c3                   	ret    
c00228f1:	90                   	nop

c00228f2 <SoundDevice::floatTo16(float*, short*, int)>:
c00228f2:	57                   	push   edi
c00228f3:	56                   	push   esi
c00228f4:	53                   	push   ebx
c00228f5:	31 db                	xor    ebx,ebx
c00228f7:	83 ec 10             	sub    esp,0x10
c00228fa:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00228fe:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022902:	0f 8d d0 00 00 00    	jge    c00229d8 <SoundDevice::floatTo16(float*, short*, int)+0xe6>
c0022908:	83 ec 0c             	sub    esp,0xc
c002290b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002290f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022912:	e8 88 64 00 00       	call   c0028d9f <__extendsfdf2>
c0022917:	83 c4 10             	add    esp,0x10
c002291a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002291e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022922:	68 00 00 f0 3f       	push   0x3ff00000
c0022927:	6a 00                	push   0x0
c0022929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002292d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022931:	e8 f5 53 00 00       	call   c0027d2b <__adddf3>
c0022936:	83 c4 10             	add    esp,0x10
c0022939:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002293d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022941:	68 00 00 e0 3f       	push   0x3fe00000
c0022946:	6a 00                	push   0x0
c0022948:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002294c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022950:	e8 53 5a 00 00       	call   c00283a8 <__muldf3>
c0022955:	83 c4 10             	add    esp,0x10
c0022958:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002295c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022960:	68 c0 ff df 40       	push   0x40dfffc0
c0022965:	6a 00                	push   0x0
c0022967:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002296b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002296f:	e8 34 5a 00 00       	call   c00283a8 <__muldf3>
c0022974:	59                   	pop    ecx
c0022975:	5f                   	pop    edi
c0022976:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002297a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c002297e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022982:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022986:	e8 f0 62 00 00       	call   c0028c7b <__truncdfsf2>
c002298b:	5a                   	pop    edx
c002298c:	89 c7                	mov    edi,eax
c002298e:	59                   	pop    ecx
c002298f:	68 00 fe ff 46       	push   0x46fffe00
c0022994:	50                   	push   eax
c0022995:	e8 8b 53 00 00       	call   c0027d25 <__gesf2>
c002299a:	83 c4 10             	add    esp,0x10
c002299d:	85 c0                	test   eax,eax
c002299f:	78 08                	js     c00229a9 <SoundDevice::floatTo16(float*, short*, int)+0xb7>
c00229a1:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c00229a7:	eb 29                	jmp    c00229d2 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00229a9:	50                   	push   eax
c00229aa:	50                   	push   eax
c00229ab:	6a 00                	push   0x0
c00229ad:	57                   	push   edi
c00229ae:	e8 76 53 00 00       	call   c0027d29 <__lesf2>
c00229b3:	83 c4 10             	add    esp,0x10
c00229b6:	85 c0                	test   eax,eax
c00229b8:	7f 08                	jg     c00229c2 <SoundDevice::floatTo16(float*, short*, int)+0xd0>
c00229ba:	66 c7 04 5e 00 00    	mov    WORD PTR [esi+ebx*2],0x0
c00229c0:	eb 10                	jmp    c00229d2 <SoundDevice::floatTo16(float*, short*, int)+0xe0>
c00229c2:	83 ec 0c             	sub    esp,0xc
c00229c5:	57                   	push   edi
c00229c6:	e8 71 64 00 00       	call   c0028e3c <lrintf>
c00229cb:	83 c4 10             	add    esp,0x10
c00229ce:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c00229d2:	43                   	inc    ebx
c00229d3:	e9 26 ff ff ff       	jmp    c00228fe <SoundDevice::floatTo16(float*, short*, int)+0xc>
c00229d8:	83 c4 10             	add    esp,0x10
c00229db:	5b                   	pop    ebx
c00229dc:	5e                   	pop    esi
c00229dd:	5f                   	pop    edi
c00229de:	c3                   	ret    
c00229df:	90                   	nop

c00229e0 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00229e0:	57                   	push   edi
c00229e1:	56                   	push   esi
c00229e2:	53                   	push   ebx
c00229e3:	31 db                	xor    ebx,ebx
c00229e5:	83 ec 10             	sub    esp,0x10
c00229e8:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00229ec:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c00229f0:	0f 8d cb 00 00 00    	jge    c0022ac1 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c00229f6:	83 ec 0c             	sub    esp,0xc
c00229f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00229fd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022a00:	e8 9a 63 00 00       	call   c0028d9f <__extendsfdf2>
c0022a05:	83 c4 10             	add    esp,0x10
c0022a08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a10:	68 00 00 f0 3f       	push   0x3ff00000
c0022a15:	6a 00                	push   0x0
c0022a17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a1f:	e8 07 53 00 00       	call   c0027d2b <__adddf3>
c0022a24:	83 c4 10             	add    esp,0x10
c0022a27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a2f:	68 00 00 e0 3f       	push   0x3fe00000
c0022a34:	6a 00                	push   0x0
c0022a36:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a3e:	e8 65 59 00 00       	call   c00283a8 <__muldf3>
c0022a43:	83 c4 10             	add    esp,0x10
c0022a46:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a4a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022a4e:	68 00 00 60 40       	push   0x40600000
c0022a53:	6a 00                	push   0x0
c0022a55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a59:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a5d:	e8 46 59 00 00       	call   c00283a8 <__muldf3>
c0022a62:	59                   	pop    ecx
c0022a63:	5f                   	pop    edi
c0022a64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022a68:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a74:	e8 02 62 00 00       	call   c0028c7b <__truncdfsf2>
c0022a79:	5a                   	pop    edx
c0022a7a:	89 c7                	mov    edi,eax
c0022a7c:	59                   	pop    ecx
c0022a7d:	68 00 00 fe 42       	push   0x42fe0000
c0022a82:	50                   	push   eax
c0022a83:	e8 9d 52 00 00       	call   c0027d25 <__gesf2>
c0022a88:	83 c4 10             	add    esp,0x10
c0022a8b:	85 c0                	test   eax,eax
c0022a8d:	78 06                	js     c0022a95 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022a8f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022a93:	eb 26                	jmp    c0022abb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022a95:	50                   	push   eax
c0022a96:	50                   	push   eax
c0022a97:	6a 00                	push   0x0
c0022a99:	57                   	push   edi
c0022a9a:	e8 8a 52 00 00       	call   c0027d29 <__lesf2>
c0022a9f:	83 c4 10             	add    esp,0x10
c0022aa2:	85 c0                	test   eax,eax
c0022aa4:	7f 06                	jg     c0022aac <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022aa6:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022aaa:	eb 0f                	jmp    c0022abb <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022aac:	83 ec 0c             	sub    esp,0xc
c0022aaf:	57                   	push   edi
c0022ab0:	e8 87 63 00 00       	call   c0028e3c <lrintf>
c0022ab5:	83 c4 10             	add    esp,0x10
c0022ab8:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022abb:	43                   	inc    ebx
c0022abc:	e9 2b ff ff ff       	jmp    c00229ec <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022ac1:	83 c4 10             	add    esp,0x10
c0022ac4:	5b                   	pop    ebx
c0022ac5:	5e                   	pop    esi
c0022ac6:	5f                   	pop    edi
c0022ac7:	c3                   	ret    

c0022ac8 <SoundDevice::getAudio(int, float*, float*)>:
c0022ac8:	55                   	push   ebp
c0022ac9:	57                   	push   edi
c0022aca:	56                   	push   esi
c0022acb:	53                   	push   ebx
c0022acc:	83 ec 28             	sub    esp,0x28
c0022acf:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0022ad3:	68 50 d2 02 c0       	push   0xc002d250
c0022ad8:	e8 9e fd fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022add:	59                   	pop    ecx
c0022ade:	5e                   	pop    esi
c0022adf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022ae3:	68 67 d2 02 c0       	push   0xc002d267
c0022ae8:	e8 8e fd fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022aed:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022af1:	83 c4 0c             	add    esp,0xc
c0022af4:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
c0022afb:	56                   	push   esi
c0022afc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022b00:	68 89 d2 02 c0       	push   0xc002d289
c0022b05:	e8 71 fd fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022b0a:	83 c4 0c             	add    esp,0xc
c0022b0d:	56                   	push   esi
c0022b0e:	31 f6                	xor    esi,esi
c0022b10:	6a 00                	push   0x0
c0022b12:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022b16:	e8 35 dc fd ff       	call   c0000750 <memset>
c0022b1b:	83 c4 10             	add    esp,0x10
c0022b1e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022b26:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0022b2e:	8b 84 b3 5c 01 00 00 	mov    eax,DWORD PTR [ebx+esi*4+0x15c]
c0022b35:	85 c0                	test   eax,eax
c0022b37:	0f 84 d7 00 00 00    	je     c0022c14 <SoundDevice::getAudio(int, float*, float*)+0x14c>
c0022b3d:	83 ec 0c             	sub    esp,0xc
c0022b40:	50                   	push   eax
c0022b41:	e8 a8 f9 ff ff       	call   c00224ee <SoundChannel::getBufferSize()>
c0022b46:	5f                   	pop    edi
c0022b47:	5d                   	pop    ebp
c0022b48:	50                   	push   eax
c0022b49:	68 ad d2 02 c0       	push   0xc002d2ad
c0022b4e:	e8 28 fd fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022b53:	58                   	pop    eax
c0022b54:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022b5b:	e8 86 f9 ff ff       	call   c00224e6 <SoundChannel::getBufferUsed()>
c0022b60:	5a                   	pop    edx
c0022b61:	59                   	pop    ecx
c0022b62:	50                   	push   eax
c0022b63:	68 c0 d2 02 c0       	push   0xc002d2c0
c0022b68:	e8 0e fd fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022b6d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0022b71:	99                   	cdq    
c0022b72:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022b78:	50                   	push   eax
c0022b79:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022b7f:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022b83:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022b8a:	e8 67 f9 ff ff       	call   c00224f6 <SoundChannel::unbuffer(float*, int, int)>
c0022b8f:	83 c4 14             	add    esp,0x14
c0022b92:	89 c5                	mov    ebp,eax
c0022b94:	ff b4 b3 5c 01 00 00 	push   DWORD PTR [ebx+esi*4+0x15c]
c0022b9b:	e8 46 f9 ff ff       	call   c00224e6 <SoundChannel::getBufferUsed()>
c0022ba0:	5f                   	pop    edi
c0022ba1:	5a                   	pop    edx
c0022ba2:	50                   	push   eax
c0022ba3:	68 d8 d2 02 c0       	push   0xc002d2d8
c0022ba8:	e8 ce fc fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022bad:	56                   	push   esi
c0022bae:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022bb2:	99                   	cdq    
c0022bb3:	f7 bb 58 01 00 00    	idiv   DWORD PTR [ebx+0x158]
c0022bb9:	50                   	push   eax
c0022bba:	55                   	push   ebp
c0022bbb:	68 f0 d2 02 c0       	push   0xc002d2f0
c0022bc0:	e8 b6 fc fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022bc5:	83 c4 20             	add    esp,0x20
c0022bc8:	31 c0                	xor    eax,eax
c0022bca:	39 e8                	cmp    eax,ebp
c0022bcc:	7d 1e                	jge    c0022bec <SoundDevice::getAudio(int, float*, float*)+0x124>
c0022bce:	8b 93 58 01 00 00    	mov    edx,DWORD PTR [ebx+0x158]
c0022bd4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0022bd8:	0f af d0             	imul   edx,eax
c0022bdb:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c0022bde:	03 54 24 0c          	add    edx,DWORD PTR [esp+0xc]
c0022be2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022be6:	40                   	inc    eax
c0022be7:	89 0c 97             	mov    DWORD PTR [edi+edx*4],ecx
c0022bea:	eb de                	jmp    c0022bca <SoundDevice::getAudio(int, float*, float*)+0x102>
c0022bec:	50                   	push   eax
c0022bed:	50                   	push   eax
c0022bee:	55                   	push   ebp
c0022bef:	68 1d d3 02 c0       	push   0xc002d31d
c0022bf4:	e8 82 fc fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022bf9:	01 6c 24 18          	add    DWORD PTR [esp+0x18],ebp
c0022bfd:	5a                   	pop    edx
c0022bfe:	59                   	pop    ecx
c0022bff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022c03:	68 2e d3 02 c0       	push   0xc002d32e
c0022c08:	e8 6e fc fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022c0d:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0022c11:	83 c4 10             	add    esp,0x10
c0022c14:	46                   	inc    esi
c0022c15:	83 fe 20             	cmp    esi,0x20
c0022c18:	0f 85 10 ff ff ff    	jne    c0022b2e <SoundDevice::getAudio(int, float*, float*)+0x66>
c0022c1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022c22:	83 c4 1c             	add    esp,0x1c
c0022c25:	5b                   	pop    ebx
c0022c26:	5e                   	pop    esi
c0022c27:	5f                   	pop    edi
c0022c28:	5d                   	pop    ebp
c0022c29:	c3                   	ret    

c0022c2a <PCI::open(int, int, void*)>:
c0022c2a:	83 ec 18             	sub    esp,0x18
c0022c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c31:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022c35:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c3b:	8b 10                	mov    edx,DWORD PTR [eax]
c0022c3d:	50                   	push   eax
c0022c3e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0022c41:	31 c0                	xor    eax,eax
c0022c43:	83 c4 1c             	add    esp,0x1c
c0022c46:	c3                   	ret    
c0022c47:	90                   	nop

c0022c48 <PCI::close(int, int, void*)>:
c0022c48:	31 c0                	xor    eax,eax
c0022c4a:	c3                   	ret    
c0022c4b:	90                   	nop

c0022c4c <PCI::PCI()>:
c0022c4c:	83 ec 0c             	sub    esp,0xc
c0022c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c53:	83 ec 08             	sub    esp,0x8
c0022c56:	68 7c d3 02 c0       	push   0xc002d37c
c0022c5b:	50                   	push   eax
c0022c5c:	e8 bb 08 ff ff       	call   c001351c <Bus::Bus(char const*)>
c0022c61:	83 c4 10             	add    esp,0x10
c0022c64:	ba 90 d4 02 c0       	mov    edx,0xc002d490
c0022c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c6d:	89 10                	mov    DWORD PTR [eax],edx
c0022c6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c73:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0022c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c81:	a3 84 31 03 c0       	mov    ds:0xc0033184,eax
c0022c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c8a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022c90:	0f b6 d0             	movzx  edx,al
c0022c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c97:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ca2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022ca8:	0f b6 d0             	movzx  edx,al
c0022cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022caf:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022cbe:	8d 50 01             	lea    edx,[eax+0x1]
c0022cc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022cc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0022ccb:	0f b6 d0             	movzx  edx,al
c0022cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022cd6:	83 c9 c0             	or     ecx,0xffffffc0
c0022cd9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022cdd:	90                   	nop
c0022cde:	83 c4 0c             	add    esp,0xc
c0022ce1:	c3                   	ret    

c0022ce2 <PCI::readBAR8(unsigned int, int)>:
c0022ce2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022ce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022cea:	f6 c2 01             	test   dl,0x1
c0022ced:	74 07                	je     c0022cf6 <PCI::readBAR8(unsigned int, int)+0x14>
c0022cef:	83 e2 fc             	and    edx,0xfffffffc
c0022cf2:	01 c2                	add    edx,eax
c0022cf4:	ec                   	in     al,dx
c0022cf5:	c3                   	ret    
c0022cf6:	83 e2 f0             	and    edx,0xfffffff0
c0022cf9:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0022cfc:	c3                   	ret    
c0022cfd:	90                   	nop

c0022cfe <PCI::readBAR16(unsigned int, int)>:
c0022cfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d06:	f6 c2 01             	test   dl,0x1
c0022d09:	74 08                	je     c0022d13 <PCI::readBAR16(unsigned int, int)+0x15>
c0022d0b:	83 e2 fc             	and    edx,0xfffffffc
c0022d0e:	01 c2                	add    edx,eax
c0022d10:	66 ed                	in     ax,dx
c0022d12:	c3                   	ret    
c0022d13:	83 e2 f0             	and    edx,0xfffffff0
c0022d16:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0022d1a:	c3                   	ret    
c0022d1b:	90                   	nop

c0022d1c <PCI::readBAR32(unsigned int, int)>:
c0022d1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d24:	f6 c2 01             	test   dl,0x1
c0022d27:	74 07                	je     c0022d30 <PCI::readBAR32(unsigned int, int)+0x14>
c0022d29:	83 e2 fc             	and    edx,0xfffffffc
c0022d2c:	01 c2                	add    edx,eax
c0022d2e:	ed                   	in     eax,dx
c0022d2f:	c3                   	ret    
c0022d30:	83 e2 f0             	and    edx,0xfffffff0
c0022d33:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0022d36:	c3                   	ret    
c0022d37:	90                   	nop

c0022d38 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0022d38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022d3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022d40:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022d44:	f6 c2 01             	test   dl,0x1
c0022d47:	74 07                	je     c0022d50 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0022d49:	83 e2 fc             	and    edx,0xfffffffc
c0022d4c:	01 ca                	add    edx,ecx
c0022d4e:	ee                   	out    dx,al
c0022d4f:	c3                   	ret    
c0022d50:	83 e2 f0             	and    edx,0xfffffff0
c0022d53:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0022d56:	c3                   	ret    
c0022d57:	90                   	nop

c0022d58 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0022d58:	57                   	push   edi
c0022d59:	56                   	push   esi
c0022d5a:	53                   	push   ebx
c0022d5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d5f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0022d63:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0022d67:	f6 c2 01             	test   dl,0x1
c0022d6a:	74 24                	je     c0022d90 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x38>
c0022d6c:	89 d3                	mov    ebx,edx
c0022d6e:	83 e3 fc             	and    ebx,0xfffffffc
c0022d71:	50                   	push   eax
c0022d72:	0f b7 c7             	movzx  eax,di
c0022d75:	50                   	push   eax
c0022d76:	8d 04 33             	lea    eax,[ebx+esi*1]
c0022d79:	50                   	push   eax
c0022d7a:	68 84 d3 02 c0       	push   0xc002d384
c0022d7f:	e8 f7 fa fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0022d84:	8d 14 33             	lea    edx,[ebx+esi*1]
c0022d87:	89 f8                	mov    eax,edi
c0022d89:	66 ef                	out    dx,ax
c0022d8b:	83 c4 10             	add    esp,0x10
c0022d8e:	eb 07                	jmp    c0022d97 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x3f>
c0022d90:	83 e2 f0             	and    edx,0xfffffff0
c0022d93:	66 89 3c 32          	mov    WORD PTR [edx+esi*1],di
c0022d97:	5b                   	pop    ebx
c0022d98:	5e                   	pop    esi
c0022d99:	5f                   	pop    edi
c0022d9a:	c3                   	ret    
c0022d9b:	90                   	nop

c0022d9c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0022d9c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022da0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022da4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022da8:	f6 c2 01             	test   dl,0x1
c0022dab:	74 07                	je     c0022db4 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0022dad:	83 e2 fc             	and    edx,0xfffffffc
c0022db0:	01 ca                	add    edx,ecx
c0022db2:	ef                   	out    dx,eax
c0022db3:	c3                   	ret    
c0022db4:	83 e2 f0             	and    edx,0xfffffff0
c0022db7:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0022dba:	c3                   	ret    
c0022dbb:	90                   	nop

c0022dbc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022dbc:	55                   	push   ebp
c0022dbd:	57                   	push   edi
c0022dbe:	56                   	push   esi
c0022dbf:	53                   	push   ebx
c0022dc0:	83 ec 0c             	sub    esp,0xc
c0022dc3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0022dc7:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0022dcb:	89 f0                	mov    eax,esi
c0022dcd:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0022dd1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022dd5:	3c 07                	cmp    al,0x7
c0022dd7:	76 10                	jbe    c0022de9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0022dd9:	83 ec 0c             	sub    esp,0xc
c0022ddc:	68 9b d3 02 c0       	push   0xc002d39b
c0022de1:	e8 cb 74 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0022de6:	83 c4 10             	add    esp,0x10
c0022de9:	80 fb 0f             	cmp    bl,0xf
c0022dec:	76 10                	jbe    c0022dfe <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c0022dee:	83 ec 0c             	sub    esp,0xc
c0022df1:	68 cb d3 02 c0       	push   0xc002d3cb
c0022df6:	e8 b6 74 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0022dfb:	83 c4 10             	add    esp,0x10
c0022dfe:	8d 04 36             	lea    eax,[esi+esi*1]
c0022e01:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e06:	83 c8 f0             	or     eax,0xfffffff0
c0022e09:	ee                   	out    dx,al
c0022e0a:	ba fa 0c 00 00       	mov    edx,0xcfa
c0022e0f:	89 e8                	mov    eax,ebp
c0022e11:	ee                   	out    dx,al
c0022e12:	83 c4 0c             	add    esp,0xc
c0022e15:	89 d8                	mov    eax,ebx
c0022e17:	66 81 e7 fc 00       	and    di,0xfc
c0022e1c:	5b                   	pop    ebx
c0022e1d:	c1 e0 08             	shl    eax,0x8
c0022e20:	5e                   	pop    esi
c0022e21:	09 f8                	or     eax,edi
c0022e23:	5f                   	pop    edi
c0022e24:	66 0d 00 c0          	or     ax,0xc000
c0022e28:	5d                   	pop    ebp
c0022e29:	c3                   	ret    

c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022e2a:	57                   	push   edi
c0022e2b:	56                   	push   esi
c0022e2c:	53                   	push   ebx
c0022e2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022e31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022e35:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0022e3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0022e3f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022e43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0022e47:	83 ff 01             	cmp    edi,0x1
c0022e4a:	75 3e                	jne    c0022e8a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0022e4c:	89 de                	mov    esi,ebx
c0022e4e:	0f b6 c0             	movzx  eax,al
c0022e51:	81 e6 fc 00 00 00    	and    esi,0xfc
c0022e57:	c1 e0 10             	shl    eax,0x10
c0022e5a:	0f b6 c9             	movzx  ecx,cl
c0022e5d:	09 f0                	or     eax,esi
c0022e5f:	c1 e1 08             	shl    ecx,0x8
c0022e62:	0f b6 d2             	movzx  edx,dl
c0022e65:	09 c8                	or     eax,ecx
c0022e67:	c1 e2 0b             	shl    edx,0xb
c0022e6a:	09 d0                	or     eax,edx
c0022e6c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022e71:	0d 00 00 00 80       	or     eax,0x80000000
c0022e76:	ef                   	out    dx,eax
c0022e77:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022e7c:	ed                   	in     eax,dx
c0022e7d:	83 e3 02             	and    ebx,0x2
c0022e80:	0f b6 cb             	movzx  ecx,bl
c0022e83:	c1 e1 03             	shl    ecx,0x3
c0022e86:	d3 e8                	shr    eax,cl
c0022e88:	eb 43                	jmp    c0022ecd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022e8a:	83 ff 02             	cmp    edi,0x2
c0022e8d:	75 2c                	jne    c0022ebb <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c0022e8f:	83 ec 0c             	sub    esp,0xc
c0022e92:	0f b6 c9             	movzx  ecx,cl
c0022e95:	0f b6 d2             	movzx  edx,dl
c0022e98:	0f b6 fb             	movzx  edi,bl
c0022e9b:	0f b6 c0             	movzx  eax,al
c0022e9e:	57                   	push   edi
c0022e9f:	51                   	push   ecx
c0022ea0:	52                   	push   edx
c0022ea1:	50                   	push   eax
c0022ea2:	56                   	push   esi
c0022ea3:	e8 14 ff ff ff       	call   c0022dbc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ea8:	89 c2                	mov    edx,eax
c0022eaa:	ed                   	in     eax,dx
c0022eab:	83 e3 02             	and    ebx,0x2
c0022eae:	83 c4 20             	add    esp,0x20
c0022eb1:	0f b6 cb             	movzx  ecx,bl
c0022eb4:	c1 e1 03             	shl    ecx,0x3
c0022eb7:	d3 e8                	shr    eax,cl
c0022eb9:	eb 12                	jmp    c0022ecd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0022ebb:	83 ec 0c             	sub    esp,0xc
c0022ebe:	68 fb d3 02 c0       	push   0xc002d3fb
c0022ec3:	e8 e9 73 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0022ec8:	83 c4 10             	add    esp,0x10
c0022ecb:	31 c0                	xor    eax,eax
c0022ecd:	5b                   	pop    ebx
c0022ece:	5e                   	pop    esi
c0022ecf:	5f                   	pop    edi
c0022ed0:	c3                   	ret    
c0022ed1:	90                   	nop

c0022ed2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022ed2:	83 ec 18             	sub    esp,0x18
c0022ed5:	6a 00                	push   0x0
c0022ed7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022edc:	50                   	push   eax
c0022edd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ee2:	50                   	push   eax
c0022ee3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022ee8:	50                   	push   eax
c0022ee9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022eed:	e8 38 ff ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ef2:	83 c4 2c             	add    esp,0x2c
c0022ef5:	c3                   	ret    

c0022ef6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022ef6:	83 ec 18             	sub    esp,0x18
c0022ef9:	6a 0e                	push   0xe
c0022efb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f00:	50                   	push   eax
c0022f01:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f06:	50                   	push   eax
c0022f07:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f0c:	50                   	push   eax
c0022f0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f11:	e8 14 ff ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f16:	83 c4 2c             	add    esp,0x2c
c0022f19:	0f b6 c0             	movzx  eax,al
c0022f1c:	c3                   	ret    
c0022f1d:	90                   	nop

c0022f1e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022f1e:	55                   	push   ebp
c0022f1f:	57                   	push   edi
c0022f20:	56                   	push   esi
c0022f21:	53                   	push   ebx
c0022f22:	83 ec 18             	sub    esp,0x18
c0022f25:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c0022f2a:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c0022f2f:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0022f34:	6a 0a                	push   0xa
c0022f36:	56                   	push   esi
c0022f37:	55                   	push   ebp
c0022f38:	57                   	push   edi
c0022f39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022f3d:	e8 e8 fe ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f42:	83 c4 14             	add    esp,0x14
c0022f45:	89 c3                	mov    ebx,eax
c0022f47:	6a 0a                	push   0xa
c0022f49:	0f b6 db             	movzx  ebx,bl
c0022f4c:	56                   	push   esi
c0022f4d:	55                   	push   ebp
c0022f4e:	57                   	push   edi
c0022f4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022f53:	e8 d2 fe ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f58:	83 c4 2c             	add    esp,0x2c
c0022f5b:	25 00 ff 00 00       	and    eax,0xff00
c0022f60:	09 d8                	or     eax,ebx
c0022f62:	5b                   	pop    ebx
c0022f63:	5e                   	pop    esi
c0022f64:	5f                   	pop    edi
c0022f65:	5d                   	pop    ebp
c0022f66:	c3                   	ret    
c0022f67:	90                   	nop

c0022f68 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022f68:	83 ec 18             	sub    esp,0x18
c0022f6b:	6a 08                	push   0x8
c0022f6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f72:	50                   	push   eax
c0022f73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f78:	50                   	push   eax
c0022f79:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f7e:	50                   	push   eax
c0022f7f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022f83:	e8 a2 fe ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022f88:	83 c4 2c             	add    esp,0x2c
c0022f8b:	0f b6 c4             	movzx  eax,ah
c0022f8e:	c3                   	ret    
c0022f8f:	90                   	nop

c0022f90 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022f90:	83 ec 18             	sub    esp,0x18
c0022f93:	6a 08                	push   0x8
c0022f95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022f9a:	50                   	push   eax
c0022f9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fa0:	50                   	push   eax
c0022fa1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fa6:	50                   	push   eax
c0022fa7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fab:	e8 7a fe ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fb0:	83 c4 2c             	add    esp,0x2c
c0022fb3:	c3                   	ret    

c0022fb4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022fb4:	83 ec 18             	sub    esp,0x18
c0022fb7:	6a 3c                	push   0x3c
c0022fb9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fbe:	50                   	push   eax
c0022fbf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fc4:	50                   	push   eax
c0022fc5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fca:	50                   	push   eax
c0022fcb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022fcf:	e8 56 fe ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022fd4:	83 c4 2c             	add    esp,0x2c
c0022fd7:	c3                   	ret    

c0022fd8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022fd8:	83 ec 18             	sub    esp,0x18
c0022fdb:	6a 18                	push   0x18
c0022fdd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fe2:	50                   	push   eax
c0022fe3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fe8:	50                   	push   eax
c0022fe9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0022fee:	50                   	push   eax
c0022fef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022ff3:	e8 32 fe ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ff8:	83 c4 2c             	add    esp,0x2c
c0022ffb:	0f b6 c4             	movzx  eax,ah
c0022ffe:	c3                   	ret    
c0022fff:	90                   	nop

c0023000 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023000:	55                   	push   ebp
c0023001:	57                   	push   edi
c0023002:	56                   	push   esi
c0023003:	53                   	push   ebx
c0023004:	83 ec 28             	sub    esp,0x28
c0023007:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c002300b:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c0023010:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c0023015:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c002301a:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0023021:	8d 43 12             	lea    eax,[ebx+0x12]
c0023024:	83 c3 10             	add    ebx,0x10
c0023027:	0f b6 c0             	movzx  eax,al
c002302a:	0f b6 db             	movzx  ebx,bl
c002302d:	50                   	push   eax
c002302e:	51                   	push   ecx
c002302f:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0023033:	57                   	push   edi
c0023034:	55                   	push   ebp
c0023035:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023039:	e8 ec fd ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002303e:	83 c4 14             	add    esp,0x14
c0023041:	89 c6                	mov    esi,eax
c0023043:	53                   	push   ebx
c0023044:	c1 e6 10             	shl    esi,0x10
c0023047:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002304b:	51                   	push   ecx
c002304c:	57                   	push   edi
c002304d:	55                   	push   ebp
c002304e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023052:	e8 d3 fd ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023057:	83 c4 3c             	add    esp,0x3c
c002305a:	0f b7 c0             	movzx  eax,ax
c002305d:	5b                   	pop    ebx
c002305e:	09 f0                	or     eax,esi
c0023060:	5e                   	pop    esi
c0023061:	5f                   	pop    edi
c0023062:	5d                   	pop    ebp
c0023063:	c3                   	ret    

c0023064 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023064:	55                   	push   ebp
c0023065:	57                   	push   edi
c0023066:	56                   	push   esi
c0023067:	53                   	push   ebx
c0023068:	83 ec 0c             	sub    esp,0xc
c002306b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002306f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023073:	89 f5                	mov    ebp,esi
c0023075:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c002307b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002307f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023083:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023087:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002308b:	83 f9 01             	cmp    ecx,0x1
c002308e:	75 5d                	jne    c00230ed <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0023090:	0f b6 c8             	movzx  ecx,al
c0023093:	0f b6 d2             	movzx  edx,dl
c0023096:	c1 e1 10             	shl    ecx,0x10
c0023099:	c1 e2 0b             	shl    edx,0xb
c002309c:	89 f0                	mov    eax,esi
c002309e:	25 fc 00 00 00       	and    eax,0xfc
c00230a3:	09 c1                	or     ecx,eax
c00230a5:	89 e8                	mov    eax,ebp
c00230a7:	0f b6 c0             	movzx  eax,al
c00230aa:	c1 e0 08             	shl    eax,0x8
c00230ad:	09 c1                	or     ecx,eax
c00230af:	09 d1                	or     ecx,edx
c00230b1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00230b6:	81 c9 00 00 00 80    	or     ecx,0x80000000
c00230bc:	89 c8                	mov    eax,ecx
c00230be:	ef                   	out    dx,eax
c00230bf:	ba fc 0c 00 00       	mov    edx,0xcfc
c00230c4:	ed                   	in     eax,dx
c00230c5:	0f b7 db             	movzx  ebx,bx
c00230c8:	83 e6 02             	and    esi,0x2
c00230cb:	74 0a                	je     c00230d7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c00230cd:	0f b7 d0             	movzx  edx,ax
c00230d0:	c1 e3 10             	shl    ebx,0x10
c00230d3:	09 d3                	or     ebx,edx
c00230d5:	eb 05                	jmp    c00230dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00230d7:	66 31 c0             	xor    ax,ax
c00230da:	09 c3                	or     ebx,eax
c00230dc:	ba f8 0c 00 00       	mov    edx,0xcf8
c00230e1:	89 c8                	mov    eax,ecx
c00230e3:	ef                   	out    dx,eax
c00230e4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00230e9:	89 d8                	mov    eax,ebx
c00230eb:	eb 41                	jmp    c002312e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00230ed:	83 f9 02             	cmp    ecx,0x2
c00230f0:	75 45                	jne    c0023137 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00230f2:	83 ec 0c             	sub    esp,0xc
c00230f5:	0f b6 d2             	movzx  edx,dl
c00230f8:	89 f1                	mov    ecx,esi
c00230fa:	0f b6 c0             	movzx  eax,al
c00230fd:	0f b6 f1             	movzx  esi,cl
c0023100:	89 e9                	mov    ecx,ebp
c0023102:	56                   	push   esi
c0023103:	0f b6 c9             	movzx  ecx,cl
c0023106:	51                   	push   ecx
c0023107:	52                   	push   edx
c0023108:	50                   	push   eax
c0023109:	57                   	push   edi
c002310a:	e8 ad fc ff ff       	call   c0022dbc <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c002310f:	89 c2                	mov    edx,eax
c0023111:	ed                   	in     eax,dx
c0023112:	83 c4 20             	add    esp,0x20
c0023115:	0f b7 db             	movzx  ebx,bx
c0023118:	f6 c2 02             	test   dl,0x2
c002311b:	74 0c                	je     c0023129 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c002311d:	0f b7 c8             	movzx  ecx,ax
c0023120:	89 d8                	mov    eax,ebx
c0023122:	c1 e0 10             	shl    eax,0x10
c0023125:	09 c8                	or     eax,ecx
c0023127:	eb 05                	jmp    c002312e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c0023129:	66 31 c0             	xor    ax,ax
c002312c:	09 d8                	or     eax,ebx
c002312e:	ef                   	out    dx,eax
c002312f:	83 c4 0c             	add    esp,0xc
c0023132:	5b                   	pop    ebx
c0023133:	5e                   	pop    esi
c0023134:	5f                   	pop    edi
c0023135:	5d                   	pop    ebp
c0023136:	c3                   	ret    
c0023137:	c7 44 24 20 fb d3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002d3fb
c002313f:	83 c4 0c             	add    esp,0xc
c0023142:	5b                   	pop    ebx
c0023143:	5e                   	pop    esi
c0023144:	5f                   	pop    edi
c0023145:	5d                   	pop    ebp
c0023146:	e9 66 71 ff ff       	jmp    c001a2b1 <Krnl::panic(char const*)>
c002314b:	90                   	nop

c002314c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c002314c:	55                   	push   ebp
c002314d:	57                   	push   edi
c002314e:	56                   	push   esi
c002314f:	53                   	push   ebx
c0023150:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0023156:	80 3d 90 31 03 c0 00 	cmp    BYTE PTR ds:0xc0033190,0x0
c002315d:	0f 85 96 00 00 00    	jne    c00231f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xad>
c0023163:	83 ec 0c             	sub    esp,0xc
c0023166:	68 14 01 00 00       	push   0x114
c002316b:	e8 1c c7 fe ff       	call   c000f88c <malloc>
c0023170:	83 c4 0c             	add    esp,0xc
c0023173:	89 c3                	mov    ebx,eax
c0023175:	ff 35 90 23 03 c0    	push   DWORD PTR ds:0xc0032390
c002317b:	68 01 d4 02 c0       	push   0xc002d401
c0023180:	50                   	push   eax
c0023181:	e8 54 fc fe ff       	call   c0012dda <File::File(char const*, Process*)>
c0023186:	5a                   	pop    edx
c0023187:	59                   	pop    ecx
c0023188:	6a 01                	push   0x1
c002318a:	53                   	push   ebx
c002318b:	e8 ae fc fe ff       	call   c0012e3e <File::open(FileOpenMode)>
c0023190:	83 c4 0c             	add    esp,0xc
c0023193:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0023197:	50                   	push   eax
c0023198:	8d 44 24 28          	lea    eax,[esp+0x28]
c002319c:	50                   	push   eax
c002319d:	53                   	push   ebx
c002319e:	e8 47 ff fe ff       	call   c00130ea <File::stat(unsigned long long*, bool*)>
c00231a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00231a7:	40                   	inc    eax
c00231a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00231ab:	e8 dc c6 fe ff       	call   c000f88c <malloc>
c00231b0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00231b4:	a3 8c 31 03 c0       	mov    ds:0xc003318c,eax
c00231b9:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c00231bd:	5e                   	pop    esi
c00231be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00231c0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c00231c4:	51                   	push   ecx
c00231c5:	50                   	push   eax
c00231c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00231ca:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00231ce:	53                   	push   ebx
c00231cf:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00231d2:	83 c4 14             	add    esp,0x14
c00231d5:	53                   	push   ebx
c00231d6:	e8 c1 fc fe ff       	call   c0012e9c <File::close()>
c00231db:	5f                   	pop    edi
c00231dc:	5d                   	pop    ebp
c00231dd:	ff 35 8c 31 03 c0    	push   DWORD PTR ds:0xc003318c
c00231e3:	68 1a d4 02 c0       	push   0xc002d41a
c00231e8:	e8 8e f6 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00231ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00231f1:	83 c4 10             	add    esp,0x10
c00231f4:	a3 88 31 03 c0       	mov    ds:0xc0033188,eax
c00231f9:	a1 88 31 03 c0       	mov    eax,ds:0xc0033188
c00231fe:	8b 15 8c 31 03 c0    	mov    edx,DWORD PTR ds:0xc003318c
c0023204:	89 04 24             	mov    DWORD PTR [esp],eax
c0023207:	31 ff                	xor    edi,edi
c0023209:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c0023211:	31 f6                	xor    esi,esi
c0023213:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0023218:	31 db                	xor    ebx,ebx
c002321a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c0023222:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0023227:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c002322e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c0023232:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c0023239:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c002323d:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023240:	0f 8e 6b 01 00 00    	jle    c00233b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x265>
c0023246:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023249:	d4 40                	aam    0x40
c002324b:	d5 39                	aad    0x39
c002324d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0023251:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0023255:	d4 40                	aam    0x40
c0023257:	d5 39                	aad    0x39
c0023259:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002325d:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c0023261:	d4 40                	aam    0x40
c0023263:	d5 39                	aad    0x39
c0023265:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0023269:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c002326d:	d4 40                	aam    0x40
c002326f:	d5 39                	aad    0x39
c0023271:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023275:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0023279:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c002327d:	3c 56                	cmp    al,0x56
c002327f:	74 45                	je     c00232c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x17a>
c0023281:	d4 40                	aam    0x40
c0023283:	d5 39                	aad    0x39
c0023285:	8d 48 d0             	lea    ecx,[eax-0x30]
c0023288:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c002328c:	0f b6 c9             	movzx  ecx,cl
c002328f:	c1 e1 04             	shl    ecx,0x4
c0023292:	d4 40                	aam    0x40
c0023294:	d5 39                	aad    0x39
c0023296:	8d 58 d0             	lea    ebx,[eax-0x30]
c0023299:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c002329d:	0f b6 db             	movzx  ebx,bl
c00232a0:	09 cb                	or     ebx,ecx
c00232a2:	c1 e3 04             	shl    ebx,0x4
c00232a5:	d4 40                	aam    0x40
c00232a7:	d5 39                	aad    0x39
c00232a9:	8d 48 d0             	lea    ecx,[eax-0x30]
c00232ac:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c00232b0:	0f b6 c9             	movzx  ecx,cl
c00232b3:	09 cb                	or     ebx,ecx
c00232b5:	c1 e3 04             	shl    ebx,0x4
c00232b8:	89 d9                	mov    ecx,ebx
c00232ba:	d4 40                	aam    0x40
c00232bc:	d5 39                	aad    0x39
c00232be:	8d 58 d0             	lea    ebx,[eax-0x30]
c00232c1:	0f b6 db             	movzx  ebx,bl
c00232c4:	09 cb                	or     ebx,ecx
c00232c6:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c00232ca:	80 f9 44             	cmp    cl,0x44
c00232cd:	74 47                	je     c0023316 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ca>
c00232cf:	88 c8                	mov    al,cl
c00232d1:	d4 40                	aam    0x40
c00232d3:	d5 39                	aad    0x39
c00232d5:	83 e8 30             	sub    eax,0x30
c00232d8:	0f b6 e8             	movzx  ebp,al
c00232db:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c00232df:	c1 e5 04             	shl    ebp,0x4
c00232e2:	d4 40                	aam    0x40
c00232e4:	d5 39                	aad    0x39
c00232e6:	83 e8 30             	sub    eax,0x30
c00232e9:	0f b6 f0             	movzx  esi,al
c00232ec:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00232f0:	09 ee                	or     esi,ebp
c00232f2:	c1 e6 04             	shl    esi,0x4
c00232f5:	d4 40                	aam    0x40
c00232f7:	d5 39                	aad    0x39
c00232f9:	83 e8 30             	sub    eax,0x30
c00232fc:	0f b6 e8             	movzx  ebp,al
c00232ff:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c0023303:	09 ee                	or     esi,ebp
c0023305:	c1 e6 04             	shl    esi,0x4
c0023308:	89 f5                	mov    ebp,esi
c002330a:	d4 40                	aam    0x40
c002330c:	d5 39                	aad    0x39
c002330e:	83 e8 30             	sub    eax,0x30
c0023311:	0f b6 f0             	movzx  esi,al
c0023314:	09 ee                	or     esi,ebp
c0023316:	83 c7 10             	add    edi,0x10
c0023319:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c002331d:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0023320:	3c 0a                	cmp    al,0xa
c0023322:	74 09                	je     c002332d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e1>
c0023324:	45                   	inc    ebp
c0023325:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0023328:	75 16                	jne    c0023340 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f4>
c002332a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002332d:	3c 0a                	cmp    al,0xa
c002332f:	0f 94 c0             	sete   al
c0023332:	0f b6 c0             	movzx  eax,al
c0023335:	01 c7                	add    edi,eax
c0023337:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c002333c:	75 0c                	jne    c002334a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1fe>
c002333e:	eb 15                	jmp    c0023355 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c0023340:	47                   	inc    edi
c0023341:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c0023344:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0023348:	eb d3                	jmp    c002331d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1d1>
c002334a:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c002334f:	0f 85 e8 fe ff ff    	jne    c002323d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023355:	80 f9 44             	cmp    cl,0x44
c0023358:	74 0b                	je     c0023365 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x219>
c002335a:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c002335f:	0f 85 d8 fe ff ff    	jne    c002323d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023365:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0023369:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c002336d:	c1 e1 04             	shl    ecx,0x4
c0023370:	83 e8 30             	sub    eax,0x30
c0023373:	09 c8                	or     eax,ecx
c0023375:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0023379:	0f 85 be fe ff ff    	jne    c002323d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c002337f:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0023383:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023387:	c1 e1 04             	shl    ecx,0x4
c002338a:	83 e8 30             	sub    eax,0x30
c002338d:	09 c8                	or     eax,ecx
c002338f:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0023393:	0f 85 a4 fe ff ff    	jne    c002323d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xf1>
c0023399:	50                   	push   eax
c002339a:	50                   	push   eax
c002339b:	8d 44 24 28          	lea    eax,[esp+0x28]
c002339f:	50                   	push   eax
c00233a0:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c00233a7:	e8 60 d4 fd ff       	call   c000080c <strcpy>
c00233ac:	83 c4 10             	add    esp,0x10
c00233af:	eb 15                	jmp    c00233c6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x27a>
c00233b1:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00233b8:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c00233c3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00233c6:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c00233cd:	81 c4 2c 01 00 00    	add    esp,0x12c
c00233d3:	5b                   	pop    ebx
c00233d4:	5e                   	pop    esi
c00233d5:	5f                   	pop    edi
c00233d6:	5d                   	pop    ebp
c00233d7:	c3                   	ret    

c00233d8 <PCI::checkBus(unsigned char)>:
c00233d8:	56                   	push   esi
c00233d9:	53                   	push   ebx
c00233da:	31 db                	xor    ebx,ebx
c00233dc:	51                   	push   ecx
c00233dd:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00233e2:	52                   	push   edx
c00233e3:	53                   	push   ebx
c00233e4:	43                   	inc    ebx
c00233e5:	56                   	push   esi
c00233e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233ea:	e8 37 03 00 00       	call   c0023726 <PCI::checkDevice(unsigned char, unsigned char)>
c00233ef:	83 c4 10             	add    esp,0x10
c00233f2:	83 fb 20             	cmp    ebx,0x20
c00233f5:	75 eb                	jne    c00233e2 <PCI::checkBus(unsigned char)+0xa>
c00233f7:	58                   	pop    eax
c00233f8:	5b                   	pop    ebx
c00233f9:	5e                   	pop    esi
c00233fa:	c3                   	ret    
c00233fb:	90                   	nop

c00233fc <PCI::foundDevice(PCIDeviceInfo)>:
c00233fc:	55                   	push   ebp
c00233fd:	57                   	push   edi
c00233fe:	56                   	push   esi
c00233ff:	53                   	push   ebx
c0023400:	83 ec 1c             	sub    esp,0x1c
c0023403:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023407:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c002340d:	0f 84 52 01 00 00    	je     c0023565 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023413:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0023417:	66 81 f9 06 04       	cmp    cx,0x406
c002341c:	75 2c                	jne    c002344a <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c002341e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0023423:	50                   	push   eax
c0023424:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0023429:	50                   	push   eax
c002342a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c002342f:	50                   	push   eax
c0023430:	56                   	push   esi
c0023431:	e8 a2 fb ff ff       	call   c0022fd8 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0023436:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002343a:	0f b6 c0             	movzx  eax,al
c002343d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0023441:	83 c4 2c             	add    esp,0x2c
c0023444:	5b                   	pop    ebx
c0023445:	5e                   	pop    esi
c0023446:	5f                   	pop    edi
c0023447:	5d                   	pop    ebp
c0023448:	eb 8e                	jmp    c00233d8 <PCI::checkBus(unsigned char)>
c002344a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002344e:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0023454:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023458:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c002345c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023460:	88 d3                	mov    bl,dl
c0023462:	85 c0                	test   eax,eax
c0023464:	74 33                	je     c0023499 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0023466:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023469:	85 d2                	test   edx,edx
c002346b:	74 28                	je     c0023495 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002346d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0023473:	31 ef                	xor    edi,ebp
c0023475:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c002347b:	75 18                	jne    c0023495 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c002347d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023481:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0023487:	75 0c                	jne    c0023495 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023489:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c002348f:	0f 84 d0 00 00 00    	je     c0023565 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0023495:	8b 00                	mov    eax,DWORD PTR [eax]
c0023497:	eb c9                	jmp    c0023462 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023499:	66 81 f9 01 06       	cmp    cx,0x601
c002349e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00234a2:	75 19                	jne    c00234bd <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c00234a4:	83 ec 0c             	sub    esp,0xc
c00234a7:	68 64 01 00 00       	push   0x164
c00234ac:	e8 db c3 fe ff       	call   c000f88c <malloc>
c00234b1:	89 c5                	mov    ebp,eax
c00234b3:	89 04 24             	mov    DWORD PTR [esp],eax
c00234b6:	e8 a1 0f 00 00       	call   c002445c <SATABus::SATABus()>
c00234bb:	eb 1e                	jmp    c00234db <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00234bd:	66 81 f9 01 01       	cmp    cx,0x101
c00234c2:	75 60                	jne    c0023524 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00234c4:	83 ec 0c             	sub    esp,0xc
c00234c7:	68 70 02 00 00       	push   0x270
c00234cc:	e8 bb c3 fe ff       	call   c000f88c <malloc>
c00234d1:	89 c5                	mov    ebp,eax
c00234d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00234d6:	e8 0f 03 00 00       	call   c00237ea <IDE::IDE()>
c00234db:	58                   	pop    eax
c00234dc:	5a                   	pop    edx
c00234dd:	55                   	push   ebp
c00234de:	56                   	push   esi
c00234df:	e8 d0 07 ff ff       	call   c0013cb4 <Device::addChild(Device*)>
c00234e4:	83 ec 1c             	sub    esp,0x1c
c00234e7:	b9 09 00 00 00       	mov    ecx,0x9
c00234ec:	fc                   	cld    
c00234ed:	89 e7                	mov    edi,esp
c00234ef:	89 de                	mov    esi,ebx
c00234f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00234f3:	55                   	push   ebp
c00234f4:	e8 cd 06 ff ff       	call   c0013bc6 <Device::preOpenPCI(PCIDeviceInfo)>
c00234f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00234fc:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0023500:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0023508:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0023510:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0023518:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002351b:	83 c4 4c             	add    esp,0x4c
c002351e:	5b                   	pop    ebx
c002351f:	5e                   	pop    esi
c0023520:	5f                   	pop    edi
c0023521:	5d                   	pop    ebp
c0023522:	ff e0                	jmp    eax
c0023524:	83 ec 0c             	sub    esp,0xc
c0023527:	68 58 01 00 00       	push   0x158
c002352c:	e8 5b c3 fe ff       	call   c000f88c <malloc>
c0023531:	89 c5                	mov    ebp,eax
c0023533:	58                   	pop    eax
c0023534:	5a                   	pop    edx
c0023535:	68 2c d4 02 c0       	push   0xc002d42c
c002353a:	55                   	push   ebp
c002353b:	e8 7e 0a ff ff       	call   c0013fbe <DriverlessDevice::DriverlessDevice(char const*)>
c0023540:	59                   	pop    ecx
c0023541:	5f                   	pop    edi
c0023542:	55                   	push   ebp
c0023543:	56                   	push   esi
c0023544:	e8 6b 07 ff ff       	call   c0013cb4 <Device::addChild(Device*)>
c0023549:	b9 09 00 00 00       	mov    ecx,0x9
c002354e:	fc                   	cld    
c002354f:	89 df                	mov    edi,ebx
c0023551:	89 de                	mov    esi,ebx
c0023553:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023555:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023559:	83 c4 2c             	add    esp,0x2c
c002355c:	5b                   	pop    ebx
c002355d:	5e                   	pop    esi
c002355e:	5f                   	pop    edi
c002355f:	5d                   	pop    ebp
c0023560:	e9 61 06 ff ff       	jmp    c0013bc6 <Device::preOpenPCI(PCIDeviceInfo)>
c0023565:	83 c4 1c             	add    esp,0x1c
c0023568:	5b                   	pop    ebx
c0023569:	5e                   	pop    esi
c002356a:	5f                   	pop    edi
c002356b:	5d                   	pop    ebp
c002356c:	c3                   	ret    
c002356d:	90                   	nop

c002356e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002356e:	55                   	push   ebp
c002356f:	57                   	push   edi
c0023570:	56                   	push   esi
c0023571:	53                   	push   ebx
c0023572:	83 ec 68             	sub    esp,0x68
c0023575:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0023579:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0023580:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023584:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c002358b:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c0023590:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023594:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c002359b:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00235a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00235a4:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c00235a9:	6a 0c                	push   0xc
c00235ab:	57                   	push   edi
c00235ac:	53                   	push   ebx
c00235ad:	56                   	push   esi
c00235ae:	55                   	push   ebp
c00235af:	e8 76 f8 ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235b4:	83 c4 20             	add    esp,0x20
c00235b7:	57                   	push   edi
c00235b8:	53                   	push   ebx
c00235b9:	56                   	push   esi
c00235ba:	55                   	push   ebp
c00235bb:	e8 5e f9 ff ff       	call   c0022f1e <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00235c0:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c00235c5:	57                   	push   edi
c00235c6:	53                   	push   ebx
c00235c7:	56                   	push   esi
c00235c8:	55                   	push   ebp
c00235c9:	e8 e6 f9 ff ff       	call   c0022fb4 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00235ce:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00235d2:	83 c4 14             	add    esp,0x14
c00235d5:	6a 3c                	push   0x3c
c00235d7:	57                   	push   edi
c00235d8:	53                   	push   ebx
c00235d9:	56                   	push   esi
c00235da:	55                   	push   ebp
c00235db:	e8 4a f8 ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235e0:	0f b6 c4             	movzx  eax,ah
c00235e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00235e7:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00235eb:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00235ef:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00235f4:	83 c4 20             	add    esp,0x20
c00235f7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00235fd:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0023604:	74 7c                	je     c0023682 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c0023606:	31 c0                	xor    eax,eax
c0023608:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c002360e:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023614:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c002361a:	7e 66                	jle    c0023682 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c002361c:	8d 14 c2             	lea    edx,[edx+eax*8]
c002361f:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0023626:	39 cb                	cmp    ebx,ecx
c0023628:	75 55                	jne    c002367f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c002362a:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0023631:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0023635:	75 48                	jne    c002367f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c0023637:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002363b:	83 ec 0c             	sub    esp,0xc
c002363e:	68 46 d4 02 c0       	push   0xc002d446
c0023643:	e8 33 f2 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0023648:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002364c:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c0023652:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023656:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c002365c:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c0023664:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c0023668:	52                   	push   edx
c0023669:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002366d:	53                   	push   ebx
c002366e:	68 6b d4 02 c0       	push   0xc002d46b
c0023673:	e8 03 f2 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0023678:	83 c4 20             	add    esp,0x20
c002367b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002367f:	40                   	inc    eax
c0023680:	eb 86                	jmp    c0023608 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c0023682:	31 d2                	xor    edx,edx
c0023684:	83 ec 0c             	sub    esp,0xc
c0023687:	57                   	push   edi
c0023688:	53                   	push   ebx
c0023689:	56                   	push   esi
c002368a:	52                   	push   edx
c002368b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c002368f:	55                   	push   ebp
c0023690:	e8 6b f9 ff ff       	call   c0023000 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023695:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0023699:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002369d:	42                   	inc    edx
c002369e:	83 c4 20             	add    esp,0x20
c00236a1:	83 fa 06             	cmp    edx,0x6
c00236a4:	75 de                	jne    c0023684 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c00236a6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00236ab:	83 ec 0c             	sub    esp,0xc
c00236ae:	86 e0                	xchg   al,ah
c00236b0:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c00236b5:	6a 02                	push   0x2
c00236b7:	57                   	push   edi
c00236b8:	53                   	push   ebx
c00236b9:	56                   	push   esi
c00236ba:	55                   	push   ebp
c00236bb:	e8 6a f7 ff ff       	call   c0022e2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00236c0:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c00236c5:	83 c4 20             	add    esp,0x20
c00236c8:	57                   	push   edi
c00236c9:	53                   	push   ebx
c00236ca:	56                   	push   esi
c00236cb:	55                   	push   ebp
c00236cc:	e8 97 f8 ff ff       	call   c0022f68 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c00236d1:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00236d5:	57                   	push   edi
c00236d6:	53                   	push   ebx
c00236d7:	56                   	push   esi
c00236d8:	55                   	push   ebp
c00236d9:	e8 f4 f7 ff ff       	call   c0022ed2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00236de:	b9 09 00 00 00       	mov    ecx,0x9
c00236e3:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c00236e8:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c00236ec:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c00236f0:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00236f4:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c00236f8:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00236fc:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0023700:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0023704:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0023708:	83 ec 0c             	sub    esp,0xc
c002370b:	fc                   	cld    
c002370c:	89 e7                	mov    edi,esp
c002370e:	8d 74 24 58          	lea    esi,[esp+0x58]
c0023712:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023714:	55                   	push   ebp
c0023715:	e8 e2 fc ff ff       	call   c00233fc <PCI::foundDevice(PCIDeviceInfo)>
c002371a:	81 c4 8c 00 00 00    	add    esp,0x8c
c0023720:	5b                   	pop    ebx
c0023721:	5e                   	pop    esi
c0023722:	5f                   	pop    edi
c0023723:	5d                   	pop    ebp
c0023724:	c3                   	ret    
c0023725:	90                   	nop

c0023726 <PCI::checkDevice(unsigned char, unsigned char)>:
c0023726:	55                   	push   ebp
c0023727:	57                   	push   edi
c0023728:	56                   	push   esi
c0023729:	53                   	push   ebx
c002372a:	83 ec 0c             	sub    esp,0xc
c002372d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0023731:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0023736:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c002373b:	6a 00                	push   0x0
c002373d:	56                   	push   esi
c002373e:	57                   	push   edi
c002373f:	55                   	push   ebp
c0023740:	e8 8d f7 ff ff       	call   c0022ed2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023745:	6a 00                	push   0x0
c0023747:	56                   	push   esi
c0023748:	57                   	push   edi
c0023749:	55                   	push   ebp
c002374a:	e8 1f fe ff ff       	call   c002356e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c002374f:	83 c4 20             	add    esp,0x20
c0023752:	6a 00                	push   0x0
c0023754:	56                   	push   esi
c0023755:	57                   	push   edi
c0023756:	55                   	push   ebp
c0023757:	e8 9a f7 ff ff       	call   c0022ef6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002375c:	83 c4 10             	add    esp,0x10
c002375f:	84 c0                	test   al,al
c0023761:	79 27                	jns    c002378a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023763:	bb 01 00 00 00       	mov    ebx,0x1
c0023768:	53                   	push   ebx
c0023769:	56                   	push   esi
c002376a:	57                   	push   edi
c002376b:	55                   	push   ebp
c002376c:	e8 61 f7 ff ff       	call   c0022ed2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023771:	83 c4 10             	add    esp,0x10
c0023774:	66 40                	inc    ax
c0023776:	74 0c                	je     c0023784 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0023778:	53                   	push   ebx
c0023779:	56                   	push   esi
c002377a:	57                   	push   edi
c002377b:	55                   	push   ebp
c002377c:	e8 ed fd ff ff       	call   c002356e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023781:	83 c4 10             	add    esp,0x10
c0023784:	43                   	inc    ebx
c0023785:	83 fb 08             	cmp    ebx,0x8
c0023788:	75 de                	jne    c0023768 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002378a:	83 c4 0c             	add    esp,0xc
c002378d:	5b                   	pop    ebx
c002378e:	5e                   	pop    esi
c002378f:	5f                   	pop    edi
c0023790:	5d                   	pop    ebp
c0023791:	c3                   	ret    

c0023792 <PCI::detect()>:
c0023792:	56                   	push   esi
c0023793:	53                   	push   ebx
c0023794:	53                   	push   ebx
c0023795:	31 db                	xor    ebx,ebx
c0023797:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002379b:	6a 00                	push   0x0
c002379d:	6a 00                	push   0x0
c002379f:	6a 00                	push   0x0
c00237a1:	56                   	push   esi
c00237a2:	e8 4f f7 ff ff       	call   c0022ef6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00237a7:	83 c4 10             	add    esp,0x10
c00237aa:	a8 80                	test   al,0x80
c00237ac:	75 21                	jne    c00237cf <PCI::detect()+0x3d>
c00237ae:	51                   	push   ecx
c00237af:	51                   	push   ecx
c00237b0:	6a 00                	push   0x0
c00237b2:	56                   	push   esi
c00237b3:	e8 20 fc ff ff       	call   c00233d8 <PCI::checkBus(unsigned char)>
c00237b8:	83 c4 10             	add    esp,0x10
c00237bb:	eb 24                	jmp    c00237e1 <PCI::detect()+0x4f>
c00237bd:	52                   	push   edx
c00237be:	52                   	push   edx
c00237bf:	53                   	push   ebx
c00237c0:	43                   	inc    ebx
c00237c1:	56                   	push   esi
c00237c2:	e8 11 fc ff ff       	call   c00233d8 <PCI::checkBus(unsigned char)>
c00237c7:	83 c4 10             	add    esp,0x10
c00237ca:	83 fb 08             	cmp    ebx,0x8
c00237cd:	74 12                	je     c00237e1 <PCI::detect()+0x4f>
c00237cf:	53                   	push   ebx
c00237d0:	6a 00                	push   0x0
c00237d2:	6a 00                	push   0x0
c00237d4:	56                   	push   esi
c00237d5:	e8 f8 f6 ff ff       	call   c0022ed2 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00237da:	83 c4 10             	add    esp,0x10
c00237dd:	66 40                	inc    ax
c00237df:	74 dc                	je     c00237bd <PCI::detect()+0x2b>
c00237e1:	58                   	pop    eax
c00237e2:	5b                   	pop    ebx
c00237e3:	5e                   	pop    esi
c00237e4:	c3                   	ret    
c00237e5:	90                   	nop

c00237e6 <IDE::close(int, int, void*)>:
c00237e6:	83 c8 ff             	or     eax,0xffffffff
c00237e9:	c3                   	ret    

c00237ea <IDE::IDE()>:
c00237ea:	83 ec 0c             	sub    esp,0xc
c00237ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237f1:	83 ec 08             	sub    esp,0x8
c00237f4:	68 b4 d4 02 c0       	push   0xc002d4b4
c00237f9:	50                   	push   eax
c00237fa:	e8 63 08 ff ff       	call   c0014062 <HardDiskController::HardDiskController(char const*)>
c00237ff:	83 c4 10             	add    esp,0x10
c0023802:	ba f4 d6 02 c0       	mov    edx,0xc002d6f4
c0023807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002380b:	89 10                	mov    DWORD PTR [eax],edx
c002380d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023811:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023818:	90                   	nop
c0023819:	83 c4 0c             	add    esp,0xc
c002381c:	c3                   	ret    
c002381d:	90                   	nop

c002381e <IDE::prepareInterrupt(unsigned char)>:
c002381e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0023823:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023827:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002382f:	c3                   	ret    

c0023830 <selectDrive(unsigned char, unsigned char)>:
c0023830:	c3                   	ret    
c0023831:	90                   	nop

c0023832 <IDE::getBase(unsigned char)>:
c0023832:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023837:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002383b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0023843:	c3                   	ret    

c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0023844:	55                   	push   ebp
c0023845:	57                   	push   edi
c0023846:	56                   	push   esi
c0023847:	53                   	push   ebx
c0023848:	83 ec 1c             	sub    esp,0x1c
c002384b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002384f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023853:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023856:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002385a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002385e:	80 f9 03             	cmp    cl,0x3
c0023861:	77 51                	ja     c00238b4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023863:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023867:	0f b6 f2             	movzx  esi,dl
c002386a:	0f b6 db             	movzx  ebx,bl
c002386d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023870:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023874:	83 ca 80             	or     edx,0xffffff80
c0023877:	0f b6 d2             	movzx  edx,dl
c002387a:	52                   	push   edx
c002387b:	6a 0c                	push   0xc
c002387d:	56                   	push   esi
c002387e:	57                   	push   edi
c002387f:	e8 c0 ff ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023884:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0023889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002388d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023891:	ee                   	out    dx,al
c0023892:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023897:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002389b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c002389f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00238a3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00238ab:	83 c4 2c             	add    esp,0x2c
c00238ae:	5b                   	pop    ebx
c00238af:	5e                   	pop    esi
c00238b0:	5f                   	pop    edi
c00238b1:	5d                   	pop    ebp
c00238b2:	eb 90                	jmp    c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238b4:	80 fb 07             	cmp    bl,0x7
c00238b7:	77 12                	ja     c00238cb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c00238b9:	0f b6 d2             	movzx  edx,dl
c00238bc:	0f b6 db             	movzx  ebx,bl
c00238bf:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c00238c7:	89 da                	mov    edx,ebx
c00238c9:	eb 2f                	jmp    c00238fa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00238cb:	80 fb 0d             	cmp    bl,0xd
c00238ce:	77 13                	ja     c00238e3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c00238d0:	0f b6 d2             	movzx  edx,dl
c00238d3:	0f b6 db             	movzx  ebx,bl
c00238d6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c00238dd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c00238e1:	eb 17                	jmp    c00238fa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c00238e3:	80 fb 15             	cmp    bl,0x15
c00238e6:	77 13                	ja     c00238fb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c00238e8:	0f b6 d2             	movzx  edx,dl
c00238eb:	0f b6 db             	movzx  ebx,bl
c00238ee:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00238f6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00238fa:	ee                   	out    dx,al
c00238fb:	83 c4 1c             	add    esp,0x1c
c00238fe:	5b                   	pop    ebx
c00238ff:	5e                   	pop    esi
c0023900:	5f                   	pop    edi
c0023901:	5d                   	pop    ebp
c0023902:	c3                   	ret    
c0023903:	90                   	nop

c0023904 <IDE::read(unsigned char, unsigned char)>:
c0023904:	55                   	push   ebp
c0023905:	57                   	push   edi
c0023906:	56                   	push   esi
c0023907:	53                   	push   ebx
c0023908:	83 ec 1c             	sub    esp,0x1c
c002390b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002390f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023913:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023916:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002391a:	3c 03                	cmp    al,0x3
c002391c:	77 43                	ja     c0023961 <IDE::read(unsigned char, unsigned char)+0x5d>
c002391e:	0f b6 f2             	movzx  esi,dl
c0023921:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023924:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023928:	83 c8 80             	or     eax,0xffffff80
c002392b:	0f b6 c0             	movzx  eax,al
c002392e:	50                   	push   eax
c002392f:	6a 0c                	push   0xc
c0023931:	56                   	push   esi
c0023932:	57                   	push   edi
c0023933:	e8 0c ff ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023938:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002393d:	0f b6 c3             	movzx  eax,bl
c0023940:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0023944:	ec                   	in     al,dx
c0023945:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023949:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c002394e:	52                   	push   edx
c002394f:	6a 0c                	push   0xc
c0023951:	56                   	push   esi
c0023952:	57                   	push   edi
c0023953:	e8 ec fe ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023958:	83 c4 20             	add    esp,0x20
c002395b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002395f:	eb 49                	jmp    c00239aa <IDE::read(unsigned char, unsigned char)+0xa6>
c0023961:	80 fb 07             	cmp    bl,0x7
c0023964:	77 12                	ja     c0023978 <IDE::read(unsigned char, unsigned char)+0x74>
c0023966:	0f b6 d2             	movzx  edx,dl
c0023969:	0f b6 c3             	movzx  eax,bl
c002396c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023974:	89 c2                	mov    edx,eax
c0023976:	eb 31                	jmp    c00239a9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023978:	80 fb 0d             	cmp    bl,0xd
c002397b:	77 13                	ja     c0023990 <IDE::read(unsigned char, unsigned char)+0x8c>
c002397d:	0f b6 d2             	movzx  edx,dl
c0023980:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023987:	0f b6 d3             	movzx  edx,bl
c002398a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c002398e:	eb 19                	jmp    c00239a9 <IDE::read(unsigned char, unsigned char)+0xa5>
c0023990:	31 c0                	xor    eax,eax
c0023992:	80 fb 15             	cmp    bl,0x15
c0023995:	77 13                	ja     c00239aa <IDE::read(unsigned char, unsigned char)+0xa6>
c0023997:	0f b6 d2             	movzx  edx,dl
c002399a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00239a2:	0f b6 d3             	movzx  edx,bl
c00239a5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00239a9:	ec                   	in     al,dx
c00239aa:	83 c4 1c             	add    esp,0x1c
c00239ad:	5b                   	pop    ebx
c00239ae:	5e                   	pop    esi
c00239af:	5f                   	pop    edi
c00239b0:	5d                   	pop    ebp
c00239b1:	c3                   	ret    

c00239b2 <IDE::waitInterrupt(unsigned char)>:
c00239b2:	55                   	push   ebp
c00239b3:	57                   	push   edi
c00239b4:	56                   	push   esi
c00239b5:	53                   	push   ebx
c00239b6:	31 db                	xor    ebx,ebx
c00239b8:	83 ec 0c             	sub    esp,0xc
c00239bb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00239bf:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c00239c4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c00239cc:	89 e8                	mov    eax,ebp
c00239ce:	84 c0                	test   al,al
c00239d0:	75 34                	jne    c0023a06 <IDE::waitInterrupt(unsigned char)+0x54>
c00239d2:	52                   	push   edx
c00239d3:	6a 0c                	push   0xc
c00239d5:	56                   	push   esi
c00239d6:	57                   	push   edi
c00239d7:	e8 28 ff ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c00239dc:	83 c4 10             	add    esp,0x10
c00239df:	a8 01                	test   al,0x1
c00239e1:	75 2b                	jne    c0023a0e <IDE::waitInterrupt(unsigned char)+0x5c>
c00239e3:	f6 c3 04             	test   bl,0x4
c00239e6:	75 16                	jne    c00239fe <IDE::waitInterrupt(unsigned char)+0x4c>
c00239e8:	83 fb 32             	cmp    ebx,0x32
c00239eb:	7e 11                	jle    c00239fe <IDE::waitInterrupt(unsigned char)+0x4c>
c00239ed:	50                   	push   eax
c00239ee:	50                   	push   eax
c00239ef:	6a 00                	push   0x0
c00239f1:	68 80 96 98 00       	push   0x989680
c00239f6:	e8 6c a9 ff ff       	call   c001e367 <nanoSleep(unsigned long long)>
c00239fb:	83 c4 10             	add    esp,0x10
c00239fe:	83 fb 3c             	cmp    ebx,0x3c
c0023a01:	74 0b                	je     c0023a0e <IDE::waitInterrupt(unsigned char)+0x5c>
c0023a03:	43                   	inc    ebx
c0023a04:	eb be                	jmp    c00239c4 <IDE::waitInterrupt(unsigned char)+0x12>
c0023a06:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0023a0e:	83 c4 0c             	add    esp,0xc
c0023a11:	89 e8                	mov    eax,ebp
c0023a13:	5b                   	pop    ebx
c0023a14:	5e                   	pop    esi
c0023a15:	5f                   	pop    edi
c0023a16:	5d                   	pop    ebp
c0023a17:	c3                   	ret    

c0023a18 <ideChannel0IRQHandler(regs*, void*)>:
c0023a18:	83 ec 10             	sub    esp,0x10
c0023a1b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a1f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023a26:	6a 07                	push   0x7
c0023a28:	6a 00                	push   0x0
c0023a2a:	50                   	push   eax
c0023a2b:	e8 d4 fe ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0023a30:	83 c4 1c             	add    esp,0x1c
c0023a33:	c3                   	ret    

c0023a34 <ideChannel1IRQHandler(regs*, void*)>:
c0023a34:	83 ec 10             	sub    esp,0x10
c0023a37:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a3b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0023a42:	6a 07                	push   0x7
c0023a44:	6a 01                	push   0x1
c0023a46:	50                   	push   eax
c0023a47:	e8 b8 fe ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0023a4c:	83 c4 1c             	add    esp,0x1c
c0023a4f:	c3                   	ret    

c0023a50 <IDE::enableIRQs(unsigned char, bool)>:
c0023a50:	57                   	push   edi
c0023a51:	56                   	push   esi
c0023a52:	be 04 00 00 00       	mov    esi,0x4
c0023a57:	53                   	push   ebx
c0023a58:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023a5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023a61:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023a66:	0f 94 c0             	sete   al
c0023a69:	d1 e0                	shl    eax,1
c0023a6b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023a72:	0f b6 c0             	movzx  eax,al
c0023a75:	50                   	push   eax
c0023a76:	6a 0c                	push   0xc
c0023a78:	57                   	push   edi
c0023a79:	53                   	push   ebx
c0023a7a:	e8 c5 fd ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a7f:	83 c4 10             	add    esp,0x10
c0023a82:	50                   	push   eax
c0023a83:	6a 0c                	push   0xc
c0023a85:	57                   	push   edi
c0023a86:	53                   	push   ebx
c0023a87:	e8 78 fe ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0023a8c:	83 c4 10             	add    esp,0x10
c0023a8f:	4e                   	dec    esi
c0023a90:	75 f0                	jne    c0023a82 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023a92:	5b                   	pop    ebx
c0023a93:	5e                   	pop    esi
c0023a94:	5f                   	pop    edi
c0023a95:	c3                   	ret    

c0023a96 <IDE::open(int, int, void*)>:
c0023a96:	55                   	push   ebp
c0023a97:	57                   	push   edi
c0023a98:	56                   	push   esi
c0023a99:	53                   	push   ebx
c0023a9a:	83 ec 1c             	sub    esp,0x1c
c0023a9d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023aa1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023aaa:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023ab3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023aba:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023ac1:	0f 85 b0 02 00 00    	jne    c0023d77 <IDE::open(int, int, void*)+0x2e1>
c0023ac7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023acd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023ad1:	83 e0 7f             	and    eax,0x7f
c0023ad4:	3c 05                	cmp    al,0x5
c0023ad6:	74 04                	je     c0023adc <IDE::open(int, int, void*)+0x46>
c0023ad8:	3c 0f                	cmp    al,0xf
c0023ada:	75 32                	jne    c0023b0e <IDE::open(int, int, void*)+0x78>
c0023adc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023ae2:	83 e0 fc             	and    eax,0xfffffffc
c0023ae5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023aec:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023af2:	83 e0 fc             	and    eax,0xfffffffc
c0023af5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023afc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023b02:	83 e0 fc             	and    eax,0xfffffffc
c0023b05:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023b0c:	eb 14                	jmp    c0023b22 <IDE::open(int, int, void*)+0x8c>
c0023b0e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023b18:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023b22:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023b29:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023b30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023b34:	89 c6                	mov    esi,eax
c0023b36:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023b3b:	c1 e6 10             	shl    esi,0x10
c0023b3e:	89 e8                	mov    eax,ebp
c0023b40:	89 fa                	mov    edx,edi
c0023b42:	c1 e0 0b             	shl    eax,0xb
c0023b45:	09 f0                	or     eax,esi
c0023b47:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023b4e:	c1 e6 08             	shl    esi,0x8
c0023b51:	09 c6                	or     esi,eax
c0023b53:	89 f0                	mov    eax,esi
c0023b55:	0d 08 00 00 80       	or     eax,0x80000008
c0023b5a:	ef                   	out    dx,eax
c0023b5b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023b60:	89 ca                	mov    edx,ecx
c0023b62:	ed                   	in     eax,dx
c0023b63:	c1 e8 10             	shr    eax,0x10
c0023b66:	3d ff ff 00 00       	cmp    eax,0xffff
c0023b6b:	0f 84 f5 00 00 00    	je     c0023c66 <IDE::open(int, int, void*)+0x1d0>
c0023b71:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023b77:	89 fa                	mov    edx,edi
c0023b79:	89 f0                	mov    eax,esi
c0023b7b:	ef                   	out    dx,eax
c0023b7c:	b0 fe                	mov    al,0xfe
c0023b7e:	89 ca                	mov    edx,ecx
c0023b80:	ee                   	out    dx,al
c0023b81:	89 f0                	mov    eax,esi
c0023b83:	89 fa                	mov    edx,edi
c0023b85:	ef                   	out    dx,eax
c0023b86:	89 ca                	mov    edx,ecx
c0023b88:	ed                   	in     eax,dx
c0023b89:	3c fe                	cmp    al,0xfe
c0023b8b:	0f 85 a9 00 00 00    	jne    c0023c3a <IDE::open(int, int, void*)+0x1a4>
c0023b91:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c0023b97:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023b9e:	74 33                	je     c0023bd3 <IDE::open(int, int, void*)+0x13d>
c0023ba0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023ba6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023baa:	40                   	inc    eax
c0023bab:	83 ec 0c             	sub    esp,0xc
c0023bae:	0f b6 c0             	movzx  eax,al
c0023bb1:	50                   	push   eax
c0023bb2:	55                   	push   ebp
c0023bb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023bb7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023bbd:	51                   	push   ecx
c0023bbe:	e8 a1 41 ff ff       	call   c0017d64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023bc3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023bc8:	83 c4 1c             	add    esp,0x1c
c0023bcb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023bd1:	eb 0a                	jmp    c0023bdd <IDE::open(int, int, void*)+0x147>
c0023bd3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023bdd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023be4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023beb:	c1 e1 10             	shl    ecx,0x10
c0023bee:	c1 e0 08             	shl    eax,0x8
c0023bf1:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023bf6:	09 c1                	or     ecx,eax
c0023bf8:	89 fa                	mov    edx,edi
c0023bfa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023c01:	c1 e0 0b             	shl    eax,0xb
c0023c04:	09 c1                	or     ecx,eax
c0023c06:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023c0c:	89 c8                	mov    eax,ecx
c0023c0e:	ef                   	out    dx,eax
c0023c0f:	be fc 0c 00 00       	mov    esi,0xcfc
c0023c14:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023c1a:	89 f2                	mov    edx,esi
c0023c1c:	ee                   	out    dx,al
c0023c1d:	89 c8                	mov    eax,ecx
c0023c1f:	89 fa                	mov    edx,edi
c0023c21:	ef                   	out    dx,eax
c0023c22:	89 f2                	mov    edx,esi
c0023c24:	ed                   	in     eax,dx
c0023c25:	0f b6 c0             	movzx  eax,al
c0023c28:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023c2e:	74 46                	je     c0023c76 <IDE::open(int, int, void*)+0x1e0>
c0023c30:	83 ec 0c             	sub    esp,0xc
c0023c33:	68 cc d4 02 c0       	push   0xc002d4cc
c0023c38:	eb 34                	jmp    c0023c6e <IDE::open(int, int, void*)+0x1d8>
c0023c3a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023c43:	75 17                	jne    c0023c5c <IDE::open(int, int, void*)+0x1c6>
c0023c45:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023c4a:	74 07                	je     c0023c53 <IDE::open(int, int, void*)+0x1bd>
c0023c4c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023c51:	75 09                	jne    c0023c5c <IDE::open(int, int, void*)+0x1c6>
c0023c53:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023c5a:	eb 1a                	jmp    c0023c76 <IDE::open(int, int, void*)+0x1e0>
c0023c5c:	83 ec 0c             	sub    esp,0xc
c0023c5f:	68 d4 d4 02 c0       	push   0xc002d4d4
c0023c64:	eb 08                	jmp    c0023c6e <IDE::open(int, int, void*)+0x1d8>
c0023c66:	83 ec 0c             	sub    esp,0xc
c0023c69:	68 05 d5 02 c0       	push   0xc002d505
c0023c6e:	e8 3e 66 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0023c73:	83 c4 10             	add    esp,0x10
c0023c76:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023c7d:	79 1a                	jns    c0023c99 <IDE::open(int, int, void*)+0x203>
c0023c7f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023c85:	83 e0 fc             	and    eax,0xfffffffc
c0023c88:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023c8f:	83 c0 08             	add    eax,0x8
c0023c92:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023c99:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023c9f:	89 c2                	mov    edx,eax
c0023ca1:	83 e2 0f             	and    edx,0xf
c0023ca4:	66 83 fa 08          	cmp    dx,0x8
c0023ca8:	75 0a                	jne    c0023cb4 <IDE::open(int, int, void*)+0x21e>
c0023caa:	83 e8 02             	sub    eax,0x2
c0023cad:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023cb4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023cba:	89 c2                	mov    edx,eax
c0023cbc:	83 e2 0f             	and    edx,0xf
c0023cbf:	66 83 fa 08          	cmp    dx,0x8
c0023cc3:	75 0a                	jne    c0023ccf <IDE::open(int, int, void*)+0x239>
c0023cc5:	83 e8 02             	sub    eax,0x2
c0023cc8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023ccf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023cd6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023cdd:	89 d0                	mov    eax,edx
c0023cdf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023ce2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023ce6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023cea:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023ced:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023cf2:	0f b6 c9             	movzx  ecx,cl
c0023cf5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023cfc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023cff:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d03:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023d07:	8d 50 02             	lea    edx,[eax+0x2]
c0023d0a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d0f:	0f b6 d2             	movzx  edx,dl
c0023d12:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023d18:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d1b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d1f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023d23:	8d 48 03             	lea    ecx,[eax+0x3]
c0023d26:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d2b:	0f b6 c9             	movzx  ecx,cl
c0023d2e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023d34:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023d37:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023d3b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023d3f:	8d 50 04             	lea    edx,[eax+0x4]
c0023d42:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023d48:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023d4d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023d54:	66 85 f6             	test   si,si
c0023d57:	74 3e                	je     c0023d97 <IDE::open(int, int, void*)+0x301>
c0023d59:	0f b6 d2             	movzx  edx,dl
c0023d5c:	83 c0 05             	add    eax,0x5
c0023d5f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d62:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d66:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023d6a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023d70:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d75:	eb 20                	jmp    c0023d97 <IDE::open(int, int, void*)+0x301>
c0023d77:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d81:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d8b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023d92:	e9 02 ff ff ff       	jmp    c0023c99 <IDE::open(int, int, void*)+0x203>
c0023d97:	52                   	push   edx
c0023d98:	52                   	push   edx
c0023d99:	6a 00                	push   0x0
c0023d9b:	53                   	push   ebx
c0023d9c:	e8 7d fa ff ff       	call   c002381e <IDE::prepareInterrupt(unsigned char)>
c0023da1:	59                   	pop    ecx
c0023da2:	5e                   	pop    esi
c0023da3:	6a 01                	push   0x1
c0023da5:	53                   	push   ebx
c0023da6:	e8 73 fa ff ff       	call   c002381e <IDE::prepareInterrupt(unsigned char)>
c0023dab:	83 c4 0c             	add    esp,0xc
c0023dae:	6a 00                	push   0x0
c0023db0:	6a 00                	push   0x0
c0023db2:	53                   	push   ebx
c0023db3:	e8 98 fc ff ff       	call   c0023a50 <IDE::enableIRQs(unsigned char, bool)>
c0023db8:	83 c4 0c             	add    esp,0xc
c0023dbb:	6a 00                	push   0x0
c0023dbd:	6a 01                	push   0x1
c0023dbf:	53                   	push   ebx
c0023dc0:	e8 8b fc ff ff       	call   c0023a50 <IDE::enableIRQs(unsigned char, bool)>
c0023dc5:	83 c4 10             	add    esp,0x10
c0023dc8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023dcf:	74 40                	je     c0023e11 <IDE::open(int, int, void*)+0x37b>
c0023dd1:	83 ec 0c             	sub    esp,0xc
c0023dd4:	68 2f d5 02 c0       	push   0xc002d52f
c0023dd9:	e8 9d ea fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0023dde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023de1:	6a 01                	push   0x1
c0023de3:	68 18 3a 02 c0       	push   0xc0023a18
c0023de8:	6a 0e                	push   0xe
c0023dea:	53                   	push   ebx
c0023deb:	e8 3c fe fe ff       	call   c0013c2c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023df0:	83 c4 14             	add    esp,0x14
c0023df3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023df9:	53                   	push   ebx
c0023dfa:	6a 01                	push   0x1
c0023dfc:	68 34 3a 02 c0       	push   0xc0023a34
c0023e01:	6a 0f                	push   0xf
c0023e03:	53                   	push   ebx
c0023e04:	e8 23 fe fe ff       	call   c0013c2c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e09:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023e0f:	eb 4a                	jmp    c0023e5b <IDE::open(int, int, void*)+0x3c5>
c0023e11:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023e1b:	50                   	push   eax
c0023e1c:	6a 0f                	push   0xf
c0023e1e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e24:	68 4b d5 02 c0       	push   0xc002d54b
c0023e29:	e8 4d ea fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0023e2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023e31:	6a 00                	push   0x0
c0023e33:	68 18 3a 02 c0       	push   0xc0023a18
c0023e38:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023e3e:	53                   	push   ebx
c0023e3f:	e8 e8 fd fe ff       	call   c0013c2c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e44:	83 c4 14             	add    esp,0x14
c0023e47:	53                   	push   ebx
c0023e48:	6a 00                	push   0x0
c0023e4a:	68 34 3a 02 c0       	push   0xc0023a34
c0023e4f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023e55:	53                   	push   ebx
c0023e56:	e8 d1 fd fe ff       	call   c0013c2c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e5d:	83 c4 20             	add    esp,0x20
c0023e60:	83 ec 0c             	sub    esp,0xc
c0023e63:	53                   	push   ebx
c0023e64:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023e67:	83 c4 0c             	add    esp,0xc
c0023e6a:	6a 07                	push   0x7
c0023e6c:	6a 00                	push   0x0
c0023e6e:	53                   	push   ebx
c0023e6f:	e8 90 fa ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0023e74:	83 c4 0c             	add    esp,0xc
c0023e77:	6a 07                	push   0x7
c0023e79:	6a 01                	push   0x1
c0023e7b:	53                   	push   ebx
c0023e7c:	e8 83 fa ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0023e81:	83 c4 0c             	add    esp,0xc
c0023e84:	6a 01                	push   0x1
c0023e86:	6a 00                	push   0x0
c0023e88:	53                   	push   ebx
c0023e89:	e8 c2 fb ff ff       	call   c0023a50 <IDE::enableIRQs(unsigned char, bool)>
c0023e8e:	83 c4 0c             	add    esp,0xc
c0023e91:	6a 01                	push   0x1
c0023e93:	6a 01                	push   0x1
c0023e95:	53                   	push   ebx
c0023e96:	e8 b5 fb ff ff       	call   c0023a50 <IDE::enableIRQs(unsigned char, bool)>
c0023e9b:	83 c4 2c             	add    esp,0x2c
c0023e9e:	31 c0                	xor    eax,eax
c0023ea0:	5b                   	pop    ebx
c0023ea1:	5e                   	pop    esi
c0023ea2:	5f                   	pop    edi
c0023ea3:	5d                   	pop    ebp
c0023ea4:	c3                   	ret    
c0023ea5:	90                   	nop

c0023ea6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023ea6:	55                   	push   ebp
c0023ea7:	57                   	push   edi
c0023ea8:	56                   	push   esi
c0023ea9:	53                   	push   ebx
c0023eaa:	83 ec 1c             	sub    esp,0x1c
c0023ead:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023eb1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023eb5:	8d 50 f8             	lea    edx,[eax-0x8]
c0023eb8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023ebc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023ec0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023ec4:	80 fa 03             	cmp    dl,0x3
c0023ec7:	77 5d                	ja     c0023f26 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023ec9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023ecd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023ed1:	0f b6 db             	movzx  ebx,bl
c0023ed4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023ed7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023edb:	83 ca 80             	or     edx,0xffffff80
c0023ede:	0f b6 d2             	movzx  edx,dl
c0023ee1:	52                   	push   edx
c0023ee2:	6a 0c                	push   0xc
c0023ee4:	53                   	push   ebx
c0023ee5:	56                   	push   esi
c0023ee6:	e8 59 f9 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eeb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023ef0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ef4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023ef8:	0f b6 c0             	movzx  eax,al
c0023efb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023eff:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f01:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023f06:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023f0a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023f0e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023f12:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023f1a:	83 c4 2c             	add    esp,0x2c
c0023f1d:	5b                   	pop    ebx
c0023f1e:	5e                   	pop    esi
c0023f1f:	5f                   	pop    edi
c0023f20:	5d                   	pop    ebp
c0023f21:	e9 1e f9 ff ff       	jmp    c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f26:	3c 07                	cmp    al,0x7
c0023f28:	77 10                	ja     c0023f3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023f2a:	0f b6 db             	movzx  ebx,bl
c0023f2d:	0f b6 d0             	movzx  edx,al
c0023f30:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023f38:	eb 2d                	jmp    c0023f67 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f3a:	3c 0d                	cmp    al,0xd
c0023f3c:	77 13                	ja     c0023f51 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023f3e:	0f b6 db             	movzx  ebx,bl
c0023f41:	0f b6 c0             	movzx  eax,al
c0023f44:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023f4b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023f4f:	eb 16                	jmp    c0023f67 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f51:	3c 15                	cmp    al,0x15
c0023f53:	77 14                	ja     c0023f69 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023f55:	0f b6 db             	movzx  ebx,bl
c0023f58:	0f b6 c0             	movzx  eax,al
c0023f5b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023f63:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023f67:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f69:	83 c4 1c             	add    esp,0x1c
c0023f6c:	5b                   	pop    ebx
c0023f6d:	5e                   	pop    esi
c0023f6e:	5f                   	pop    edi
c0023f6f:	5d                   	pop    ebp
c0023f70:	c3                   	ret    
c0023f71:	90                   	nop

c0023f72 <IDE::detect()>:
c0023f72:	55                   	push   ebp
c0023f73:	57                   	push   edi
c0023f74:	56                   	push   esi
c0023f75:	53                   	push   ebx
c0023f76:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023f7c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023f83:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023f8a:	0f 85 be 02 00 00    	jne    c002424e <IDE::detect()+0x2dc>
c0023f90:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023f97:	31 f6                	xor    esi,esi
c0023f99:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023fa1:	31 ed                	xor    ebp,ebp
c0023fa3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023fa7:	c1 e0 06             	shl    eax,0x6
c0023faa:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023fb2:	89 e8                	mov    eax,ebp
c0023fb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023fb8:	c1 e0 04             	shl    eax,0x4
c0023fbb:	83 c8 a0             	or     eax,0xffffffa0
c0023fbe:	0f b6 c0             	movzx  eax,al
c0023fc1:	50                   	push   eax
c0023fc2:	6a 06                	push   0x6
c0023fc4:	56                   	push   esi
c0023fc5:	53                   	push   ebx
c0023fc6:	e8 79 f8 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fcb:	83 c4 0c             	add    esp,0xc
c0023fce:	6a 0c                	push   0xc
c0023fd0:	56                   	push   esi
c0023fd1:	53                   	push   ebx
c0023fd2:	e8 2d f9 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0023fd7:	83 c4 0c             	add    esp,0xc
c0023fda:	6a 0c                	push   0xc
c0023fdc:	56                   	push   esi
c0023fdd:	53                   	push   ebx
c0023fde:	e8 21 f9 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0023fe3:	83 c4 0c             	add    esp,0xc
c0023fe6:	6a 0c                	push   0xc
c0023fe8:	56                   	push   esi
c0023fe9:	53                   	push   ebx
c0023fea:	e8 15 f9 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0023fef:	83 c4 0c             	add    esp,0xc
c0023ff2:	6a 0c                	push   0xc
c0023ff4:	56                   	push   esi
c0023ff5:	53                   	push   ebx
c0023ff6:	e8 09 f9 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0023ffb:	68 ec 00 00 00       	push   0xec
c0024000:	6a 07                	push   0x7
c0024002:	56                   	push   esi
c0024003:	53                   	push   ebx
c0024004:	e8 3b f8 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024009:	83 c4 1c             	add    esp,0x1c
c002400c:	6a 0c                	push   0xc
c002400e:	56                   	push   esi
c002400f:	53                   	push   ebx
c0024010:	e8 ef f8 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0024015:	83 c4 0c             	add    esp,0xc
c0024018:	6a 0c                	push   0xc
c002401a:	56                   	push   esi
c002401b:	53                   	push   ebx
c002401c:	e8 e3 f8 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0024021:	83 c4 0c             	add    esp,0xc
c0024024:	6a 0c                	push   0xc
c0024026:	56                   	push   esi
c0024027:	53                   	push   ebx
c0024028:	e8 d7 f8 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c002402d:	83 c4 0c             	add    esp,0xc
c0024030:	6a 0c                	push   0xc
c0024032:	56                   	push   esi
c0024033:	53                   	push   ebx
c0024034:	e8 cb f8 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0024039:	83 c4 0c             	add    esp,0xc
c002403c:	6a 0c                	push   0xc
c002403e:	56                   	push   esi
c002403f:	53                   	push   ebx
c0024040:	e8 bf f8 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0024045:	83 c4 10             	add    esp,0x10
c0024048:	84 c0                	test   al,al
c002404a:	0f 84 8b 01 00 00    	je     c00241db <IDE::detect()+0x269>
c0024050:	31 ff                	xor    edi,edi
c0024052:	50                   	push   eax
c0024053:	6a 0c                	push   0xc
c0024055:	56                   	push   esi
c0024056:	53                   	push   ebx
c0024057:	e8 a8 f8 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c002405c:	83 c4 10             	add    esp,0x10
c002405f:	a8 01                	test   al,0x1
c0024061:	0f 85 8e 01 00 00    	jne    c00241f5 <IDE::detect()+0x283>
c0024067:	84 c0                	test   al,al
c0024069:	78 04                	js     c002406f <IDE::detect()+0xfd>
c002406b:	a8 08                	test   al,0x8
c002406d:	75 27                	jne    c0024096 <IDE::detect()+0x124>
c002406f:	47                   	inc    edi
c0024070:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024076:	7e da                	jle    c0024052 <IDE::detect()+0xe0>
c0024078:	50                   	push   eax
c0024079:	50                   	push   eax
c002407a:	6a 00                	push   0x0
c002407c:	68 40 4b 4c 00       	push   0x4c4b40
c0024081:	e8 e1 a2 ff ff       	call   c001e367 <nanoSleep(unsigned long long)>
c0024086:	83 c4 10             	add    esp,0x10
c0024089:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002408f:	75 c1                	jne    c0024052 <IDE::detect()+0xe0>
c0024091:	e9 5f 01 00 00       	jmp    c00241f5 <IDE::detect()+0x283>
c0024096:	31 c9                	xor    ecx,ecx
c0024098:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002409c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00240a0:	83 ec 0c             	sub    esp,0xc
c00240a3:	68 80 00 00 00       	push   0x80
c00240a8:	57                   	push   edi
c00240a9:	6a 00                	push   0x0
c00240ab:	56                   	push   esi
c00240ac:	53                   	push   ebx
c00240ad:	e8 f4 fd ff ff       	call   c0023ea6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c00240b2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c00240b7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00240bb:	89 d1                	mov    ecx,edx
c00240bd:	c1 e0 06             	shl    eax,0x6
c00240c0:	01 d8                	add    eax,ebx
c00240c2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00240c9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00240d0:	89 f2                	mov    edx,esi
c00240d2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00240d8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00240dc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00240e2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00240e6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00240ed:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00240f5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00240fc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0024104:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002410a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0024111:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0024117:	8d 54 24 58          	lea    edx,[esp+0x58]
c002411b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002411f:	83 c4 20             	add    esp,0x20
c0024122:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0024125:	83 c0 02             	add    eax,0x2
c0024128:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002412e:	83 c7 02             	add    edi,0x2
c0024131:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0024134:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002413a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002413e:	75 e2                	jne    c0024122 <IDE::detect()+0x1b0>
c0024140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0024144:	c1 e0 06             	shl    eax,0x6
c0024147:	01 d8                	add    eax,ebx
c0024149:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002414f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024156:	66 c1 ea 09          	shr    dx,0x9
c002415a:	83 e2 01             	and    edx,0x1
c002415d:	84 c9                	test   cl,cl
c002415f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024165:	75 2f                	jne    c0024196 <IDE::detect()+0x224>
c0024167:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002416d:	85 c0                	test   eax,eax
c002416f:	74 66                	je     c00241d7 <IDE::detect()+0x265>
c0024171:	50                   	push   eax
c0024172:	55                   	push   ebp
c0024173:	56                   	push   esi
c0024174:	68 67 d5 02 c0       	push   0xc002d567
c0024179:	e8 fd e6 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c002417e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024185:	e8 02 b7 fe ff       	call   c000f88c <malloc>
c002418a:	89 c7                	mov    edi,eax
c002418c:	89 04 24             	mov    DWORD PTR [esp],eax
c002418f:	e8 78 06 00 00       	call   c002480c <ATA::ATA()>
c0024194:	eb 28                	jmp    c00241be <IDE::detect()+0x24c>
c0024196:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002419c:	55                   	push   ebp
c002419d:	56                   	push   esi
c002419e:	68 96 d5 02 c0       	push   0xc002d596
c00241a3:	e8 d3 e6 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00241a8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c00241af:	e8 d8 b6 fe ff       	call   c000f88c <malloc>
c00241b4:	89 c7                	mov    edi,eax
c00241b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00241b9:	e8 56 0c 00 00       	call   c0024e14 <ATAPI::ATAPI()>
c00241be:	5a                   	pop    edx
c00241bf:	59                   	pop    ecx
c00241c0:	57                   	push   edi
c00241c1:	53                   	push   ebx
c00241c2:	e8 ed fa fe ff       	call   c0013cb4 <Device::addChild(Device*)>
c00241c7:	8b 07                	mov    eax,DWORD PTR [edi]
c00241c9:	53                   	push   ebx
c00241ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00241ce:	6a 00                	push   0x0
c00241d0:	57                   	push   edi
c00241d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00241d4:	83 c4 20             	add    esp,0x20
c00241d7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00241db:	4d                   	dec    ebp
c00241dc:	74 0a                	je     c00241e8 <IDE::detect()+0x276>
c00241de:	bd 01 00 00 00       	mov    ebp,0x1
c00241e3:	e9 bb fd ff ff       	jmp    c0023fa3 <IDE::detect()+0x31>
c00241e8:	4e                   	dec    esi
c00241e9:	74 63                	je     c002424e <IDE::detect()+0x2dc>
c00241eb:	be 01 00 00 00       	mov    esi,0x1
c00241f0:	e9 ac fd ff ff       	jmp    c0023fa1 <IDE::detect()+0x2f>
c00241f5:	50                   	push   eax
c00241f6:	6a 04                	push   0x4
c00241f8:	56                   	push   esi
c00241f9:	53                   	push   ebx
c00241fa:	e8 05 f7 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c00241ff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0024203:	83 c4 0c             	add    esp,0xc
c0024206:	6a 05                	push   0x5
c0024208:	56                   	push   esi
c0024209:	53                   	push   ebx
c002420a:	e8 f5 f6 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c002420f:	83 c4 10             	add    esp,0x10
c0024212:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0024216:	80 fa 14             	cmp    dl,0x14
c0024219:	75 04                	jne    c002421f <IDE::detect()+0x2ad>
c002421b:	3c eb                	cmp    al,0xeb
c002421d:	eb 07                	jmp    c0024226 <IDE::detect()+0x2b4>
c002421f:	3c 96                	cmp    al,0x96
c0024221:	75 b8                	jne    c00241db <IDE::detect()+0x269>
c0024223:	80 fa 69             	cmp    dl,0x69
c0024226:	75 b3                	jne    c00241db <IDE::detect()+0x269>
c0024228:	68 a1 00 00 00       	push   0xa1
c002422d:	6a 07                	push   0x7
c002422f:	56                   	push   esi
c0024230:	53                   	push   ebx
c0024231:	e8 0e f6 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024236:	5f                   	pop    edi
c0024237:	58                   	pop    eax
c0024238:	6a 00                	push   0x0
c002423a:	68 40 42 0f 00       	push   0xf4240
c002423f:	e8 23 a1 ff ff       	call   c001e367 <nanoSleep(unsigned long long)>
c0024244:	83 c4 10             	add    esp,0x10
c0024247:	b1 01                	mov    cl,0x1
c0024249:	e9 4a fe ff ff       	jmp    c0024098 <IDE::detect()+0x126>
c002424e:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024254:	5b                   	pop    ebx
c0024255:	5e                   	pop    esi
c0024256:	5f                   	pop    edi
c0024257:	5d                   	pop    ebp
c0024258:	c3                   	ret    
c0024259:	90                   	nop

c002425a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002425a:	55                   	push   ebp
c002425b:	57                   	push   edi
c002425c:	56                   	push   esi
c002425d:	53                   	push   ebx
c002425e:	83 ec 1c             	sub    esp,0x1c
c0024261:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024265:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0024269:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002426d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024271:	88 c3                	mov    bl,al
c0024273:	84 c0                	test   al,al
c0024275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024279:	0f 84 67 01 00 00    	je     c00243e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002427f:	83 ec 0c             	sub    esp,0xc
c0024282:	68 c7 d5 02 c0       	push   0xc002d5c7
c0024287:	e8 ef e5 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c002428c:	83 c4 10             	add    esp,0x10
c002428f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024293:	3c 01                	cmp    al,0x1
c0024295:	75 17                	jne    c00242ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024297:	83 ec 0c             	sub    esp,0xc
c002429a:	b3 13                	mov    bl,0x13
c002429c:	68 d3 d5 02 c0       	push   0xc002d5d3
c00242a1:	e8 d5 e5 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00242a6:	83 c4 10             	add    esp,0x10
c00242a9:	e9 25 01 00 00       	jmp    c00243d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00242ae:	3c 02                	cmp    al,0x2
c00242b0:	0f 85 ef 00 00 00    	jne    c00243a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c00242b6:	d1 e6                	shl    esi,1
c00242b8:	09 ee                	or     esi,ebp
c00242ba:	52                   	push   edx
c00242bb:	89 f0                	mov    eax,esi
c00242bd:	6a 01                	push   0x1
c00242bf:	0f b6 f0             	movzx  esi,al
c00242c2:	c1 e6 06             	shl    esi,0x6
c00242c5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00242cd:	50                   	push   eax
c00242ce:	57                   	push   edi
c00242cf:	e8 30 f6 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c00242d4:	83 c4 10             	add    esp,0x10
c00242d7:	89 c6                	mov    esi,eax
c00242d9:	a8 01                	test   al,0x1
c00242db:	74 12                	je     c00242ef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00242dd:	83 ec 0c             	sub    esp,0xc
c00242e0:	b3 07                	mov    bl,0x7
c00242e2:	68 e8 d5 02 c0       	push   0xc002d5e8
c00242e7:	e8 8f e5 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00242ec:	83 c4 10             	add    esp,0x10
c00242ef:	f7 c6 02 00 00 00    	test   esi,0x2
c00242f5:	74 12                	je     c0024309 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00242f7:	83 ec 0c             	sub    esp,0xc
c00242fa:	b3 03                	mov    bl,0x3
c00242fc:	68 06 d6 02 c0       	push   0xc002d606
c0024301:	e8 75 e5 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0024306:	83 c4 10             	add    esp,0x10
c0024309:	f7 c6 04 00 00 00    	test   esi,0x4
c002430f:	74 12                	je     c0024323 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0024311:	83 ec 0c             	sub    esp,0xc
c0024314:	b3 14                	mov    bl,0x14
c0024316:	68 26 d6 02 c0       	push   0xc002d626
c002431b:	e8 5b e5 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0024320:	83 c4 10             	add    esp,0x10
c0024323:	f7 c6 08 00 00 00    	test   esi,0x8
c0024329:	74 12                	je     c002433d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c002432b:	83 ec 0c             	sub    esp,0xc
c002432e:	b3 03                	mov    bl,0x3
c0024330:	68 06 d6 02 c0       	push   0xc002d606
c0024335:	e8 41 e5 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c002433a:	83 c4 10             	add    esp,0x10
c002433d:	f7 c6 10 00 00 00    	test   esi,0x10
c0024343:	74 12                	je     c0024357 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0024345:	83 ec 0c             	sub    esp,0xc
c0024348:	b3 15                	mov    bl,0x15
c002434a:	68 3e d6 02 c0       	push   0xc002d63e
c002434f:	e8 27 e5 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0024354:	83 c4 10             	add    esp,0x10
c0024357:	f7 c6 20 00 00 00    	test   esi,0x20
c002435d:	74 12                	je     c0024371 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002435f:	83 ec 0c             	sub    esp,0xc
c0024362:	b3 03                	mov    bl,0x3
c0024364:	68 06 d6 02 c0       	push   0xc002d606
c0024369:	e8 0d e5 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c002436e:	83 c4 10             	add    esp,0x10
c0024371:	f7 c6 40 00 00 00    	test   esi,0x40
c0024377:	74 12                	je     c002438b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0024379:	83 ec 0c             	sub    esp,0xc
c002437c:	b3 16                	mov    bl,0x16
c002437e:	68 58 d6 02 c0       	push   0xc002d658
c0024383:	e8 f3 e4 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0024388:	83 c4 10             	add    esp,0x10
c002438b:	89 f0                	mov    eax,esi
c002438d:	84 c0                	test   al,al
c002438f:	79 42                	jns    c00243d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024391:	83 ec 0c             	sub    esp,0xc
c0024394:	b3 0d                	mov    bl,0xd
c0024396:	68 79 d6 02 c0       	push   0xc002d679
c002439b:	e8 db e4 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00243a0:	83 c4 10             	add    esp,0x10
c00243a3:	eb 2e                	jmp    c00243d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243a5:	3c 03                	cmp    al,0x3
c00243a7:	75 14                	jne    c00243bd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c00243a9:	83 ec 0c             	sub    esp,0xc
c00243ac:	b3 17                	mov    bl,0x17
c00243ae:	68 8d d6 02 c0       	push   0xc002d68d
c00243b3:	e8 c3 e4 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00243b8:	83 c4 10             	add    esp,0x10
c00243bb:	eb 16                	jmp    c00243d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243bd:	3c 04                	cmp    al,0x4
c00243bf:	75 12                	jne    c00243d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c00243c1:	83 ec 0c             	sub    esp,0xc
c00243c4:	b3 08                	mov    bl,0x8
c00243c6:	68 a3 d6 02 c0       	push   0xc002d6a3
c00243cb:	e8 ab e4 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00243d0:	83 c4 10             	add    esp,0x10
c00243d3:	50                   	push   eax
c00243d4:	50                   	push   eax
c00243d5:	0f b6 c3             	movzx  eax,bl
c00243d8:	50                   	push   eax
c00243d9:	68 bb d6 02 c0       	push   0xc002d6bb
c00243de:	e8 98 e4 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00243e3:	83 c4 10             	add    esp,0x10
c00243e6:	83 c4 1c             	add    esp,0x1c
c00243e9:	88 d8                	mov    al,bl
c00243eb:	5b                   	pop    ebx
c00243ec:	5e                   	pop    esi
c00243ed:	5f                   	pop    edi
c00243ee:	5d                   	pop    ebp
c00243ef:	c3                   	ret    

c00243f0 <IDE::polling(unsigned char, unsigned int)>:
c00243f0:	57                   	push   edi
c00243f1:	56                   	push   esi
c00243f2:	53                   	push   ebx
c00243f3:	bb 04 00 00 00       	mov    ebx,0x4
c00243f8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00243fc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0024401:	52                   	push   edx
c0024402:	6a 0c                	push   0xc
c0024404:	56                   	push   esi
c0024405:	57                   	push   edi
c0024406:	e8 f9 f4 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c002440b:	83 c4 10             	add    esp,0x10
c002440e:	4b                   	dec    ebx
c002440f:	75 f0                	jne    c0024401 <IDE::polling(unsigned char, unsigned int)+0x11>
c0024411:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024416:	50                   	push   eax
c0024417:	6a 0c                	push   0xc
c0024419:	56                   	push   esi
c002441a:	57                   	push   edi
c002441b:	e8 e4 f4 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0024420:	83 c4 10             	add    esp,0x10
c0024423:	a8 01                	test   al,0x1
c0024425:	74 12                	je     c0024439 <IDE::polling(unsigned char, unsigned int)+0x49>
c0024427:	83 ec 0c             	sub    esp,0xc
c002442a:	68 d5 d6 02 c0       	push   0xc002d6d5
c002442f:	e8 47 e4 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0024434:	83 c4 10             	add    esp,0x10
c0024437:	eb 17                	jmp    c0024450 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024439:	a8 20                	test   al,0x20
c002443b:	75 0f                	jne    c002444c <IDE::polling(unsigned char, unsigned int)+0x5c>
c002443d:	4b                   	dec    ebx
c002443e:	74 10                	je     c0024450 <IDE::polling(unsigned char, unsigned int)+0x60>
c0024440:	84 c0                	test   al,al
c0024442:	78 d2                	js     c0024416 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024444:	a8 08                	test   al,0x8
c0024446:	74 ce                	je     c0024416 <IDE::polling(unsigned char, unsigned int)+0x26>
c0024448:	31 c0                	xor    eax,eax
c002444a:	eb 06                	jmp    c0024452 <IDE::polling(unsigned char, unsigned int)+0x62>
c002444c:	b0 01                	mov    al,0x1
c002444e:	eb 02                	jmp    c0024452 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024450:	b0 02                	mov    al,0x2
c0024452:	5b                   	pop    ebx
c0024453:	5e                   	pop    esi
c0024454:	5f                   	pop    edi
c0024455:	c3                   	ret    

c0024456 <SATABus::close(int, int, void*)>:
c0024456:	31 c0                	xor    eax,eax
c0024458:	c3                   	ret    
c0024459:	90                   	nop

c002445a <SATABus::detect()>:
c002445a:	c3                   	ret    
c002445b:	90                   	nop

c002445c <SATABus::SATABus()>:
c002445c:	83 ec 0c             	sub    esp,0xc
c002445f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024463:	83 ec 08             	sub    esp,0x8
c0024466:	68 18 d7 02 c0       	push   0xc002d718
c002446b:	50                   	push   eax
c002446c:	e8 f1 fb fe ff       	call   c0014062 <HardDiskController::HardDiskController(char const*)>
c0024471:	83 c4 10             	add    esp,0x10
c0024474:	ba d4 d7 02 c0       	mov    edx,0xc002d7d4
c0024479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002447d:	89 10                	mov    DWORD PTR [eax],edx
c002447f:	83 ec 0c             	sub    esp,0xc
c0024482:	6a 50                	push   0x50
c0024484:	e8 69 b7 fe ff       	call   c000fbf2 <Phys::allocateContiguousPages(int)>
c0024489:	83 c4 10             	add    esp,0x10
c002448c:	89 c2                	mov    edx,eax
c002448e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024492:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024498:	83 ec 0c             	sub    esp,0xc
c002449b:	6a 50                	push   0x50
c002449d:	e8 d3 cf fe ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c00244a2:	83 c4 10             	add    esp,0x10
c00244a5:	89 c2                	mov    edx,eax
c00244a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ab:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00244b1:	a1 b0 ef 02 c0       	mov    eax,ds:0xc002efb0
c00244b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00244ba:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c00244c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00244c4:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00244ca:	83 ec 0c             	sub    esp,0xc
c00244cd:	6a 03                	push   0x3
c00244cf:	6a 50                	push   0x50
c00244d1:	51                   	push   ecx
c00244d2:	52                   	push   edx
c00244d3:	50                   	push   eax
c00244d4:	e8 c9 da fe ff       	call   c0011fa2 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00244d9:	83 c4 20             	add    esp,0x20
c00244dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244e0:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00244e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244ea:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00244f0:	83 ec 04             	sub    esp,0x4
c00244f3:	52                   	push   edx
c00244f4:	50                   	push   eax
c00244f5:	68 3c d7 02 c0       	push   0xc002d73c
c00244fa:	e8 7c e3 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00244ff:	83 c4 10             	add    esp,0x10
c0024502:	90                   	nop
c0024503:	83 c4 0c             	add    esp,0xc
c0024506:	c3                   	ret    
c0024507:	90                   	nop

c0024508 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0024508:	83 ec 0c             	sub    esp,0xc
c002450b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002450f:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0024512:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0024515:	09 c2                	or     edx,eax
c0024517:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002451b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024521:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024523:	31 c0                	xor    eax,eax
c0024525:	c1 e9 08             	shr    ecx,0x8
c0024528:	83 e1 0f             	and    ecx,0xf
c002452b:	39 c8                	cmp    eax,ecx
c002452d:	74 0a                	je     c0024539 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002452f:	f6 c2 01             	test   dl,0x1
c0024532:	74 18                	je     c002454c <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0024534:	d1 ea                	shr    edx,1
c0024536:	40                   	inc    eax
c0024537:	eb f2                	jmp    c002452b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0024539:	83 ec 0c             	sub    esp,0xc
c002453c:	68 60 d7 02 c0       	push   0xc002d760
c0024541:	e8 6b 5d ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0024546:	83 c4 10             	add    esp,0x10
c0024549:	83 c8 ff             	or     eax,0xffffffff
c002454c:	83 c4 0c             	add    esp,0xc
c002454f:	c3                   	ret    

c0024550 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024550:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024554:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024557:	89 c2                	mov    edx,eax
c0024559:	c1 ea 08             	shr    edx,0x8
c002455c:	83 e2 0f             	and    edx,0xf
c002455f:	fe ca                	dec    dl
c0024561:	75 31                	jne    c0024594 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024563:	83 e0 0f             	and    eax,0xf
c0024566:	3c 03                	cmp    al,0x3
c0024568:	75 2a                	jne    c0024594 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002456a:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002456d:	b8 02 00 00 00       	mov    eax,0x2
c0024572:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0024578:	74 1c                	je     c0024596 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002457a:	b8 04 00 00 00       	mov    eax,0x4
c002457f:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024585:	74 0f                	je     c0024596 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024587:	31 c0                	xor    eax,eax
c0024589:	83 fa 03             	cmp    edx,0x3
c002458c:	0f 94 c0             	sete   al
c002458f:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024593:	c3                   	ret    
c0024594:	31 c0                	xor    eax,eax
c0024596:	c3                   	ret    
c0024597:	90                   	nop

c0024598 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0024598:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002459c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002459f:	0f ba e2 0f          	bt     edx,0xf
c00245a3:	72 f7                	jb     c002459c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00245a5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245a8:	83 ca 10             	or     edx,0x10
c00245ab:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245ae:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245b1:	83 ca 01             	or     edx,0x1
c00245b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245b7:	c3                   	ret    

c00245b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00245b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00245bc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245bf:	83 e2 fe             	and    edx,0xfffffffe
c00245c2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245c5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245c8:	83 e2 ef             	and    edx,0xffffffef
c00245cb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00245ce:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245d1:	0f ba e2 0e          	bt     edx,0xe
c00245d5:	72 f7                	jb     c00245ce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00245d7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00245da:	0f ba e2 0f          	bt     edx,0xf
c00245de:	72 ee                	jb     c00245ce <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00245e0:	c3                   	ret    
c00245e1:	90                   	nop

c00245e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00245e2:	55                   	push   ebp
c00245e3:	57                   	push   edi
c00245e4:	56                   	push   esi
c00245e5:	53                   	push   ebx
c00245e6:	83 ec 1c             	sub    esp,0x1c
c00245e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00245ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00245f1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00245f5:	53                   	push   ebx
c00245f6:	89 fd                	mov    ebp,edi
c00245f8:	56                   	push   esi
c00245f9:	c1 e5 0a             	shl    ebp,0xa
c00245fc:	e8 b7 ff ff ff       	call   c00245b8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0024601:	83 ec 0c             	sub    esp,0xc
c0024604:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c002460a:	01 e8                	add    eax,ebp
c002460c:	89 03                	mov    DWORD PTR [ebx],eax
c002460e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024610:	68 00 04 00 00       	push   0x400
c0024615:	6a 00                	push   0x0
c0024617:	50                   	push   eax
c0024618:	e8 33 c1 fd ff       	call   c0000750 <memset>
c002461d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0024623:	89 fa                	mov    edx,edi
c0024625:	01 e8                	add    eax,ebp
c0024627:	c1 e7 0d             	shl    edi,0xd
c002462a:	89 03                	mov    DWORD PTR [ebx],eax
c002462c:	c1 e2 08             	shl    edx,0x8
c002462f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0024636:	81 c2 00 80 00 00    	add    edx,0x8000
c002463c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0024640:	89 d0                	mov    eax,edx
c0024642:	83 c4 1c             	add    esp,0x1c
c0024645:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c002464b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c002464e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024651:	68 00 01 00 00       	push   0x100
c0024656:	6a 00                	push   0x0
c0024658:	50                   	push   eax
c0024659:	e8 f2 c0 fd ff       	call   c0000750 <memset>
c002465e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024662:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0024668:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c002466e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024672:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024675:	83 c4 10             	add    esp,0x10
c0024678:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002467f:	31 ff                	xor    edi,edi
c0024681:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024687:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002468d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024691:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024697:	83 c5 20             	add    ebp,0x20
c002469a:	01 f8                	add    eax,edi
c002469c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002469f:	52                   	push   edx
c00246a0:	68 00 01 00 00       	push   0x100
c00246a5:	6a 00                	push   0x0
c00246a7:	50                   	push   eax
c00246a8:	e8 a3 c0 fd ff       	call   c0000750 <memset>
c00246ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00246b1:	83 c4 10             	add    esp,0x10
c00246b4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00246ba:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00246c1:	01 f8                	add    eax,edi
c00246c3:	81 c7 00 01 00 00    	add    edi,0x100
c00246c9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00246cc:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00246d2:	75 b3                	jne    c0024687 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c00246d4:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00246d8:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c00246dc:	83 c4 1c             	add    esp,0x1c
c00246df:	5b                   	pop    ebx
c00246e0:	5e                   	pop    esi
c00246e1:	5f                   	pop    edi
c00246e2:	5d                   	pop    ebp
c00246e3:	e9 b0 fe ff ff       	jmp    c0024598 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c00246e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c00246e8:	55                   	push   ebp
c00246e9:	57                   	push   edi
c00246ea:	56                   	push   esi
c00246eb:	53                   	push   ebx
c00246ec:	31 db                	xor    ebx,ebx
c00246ee:	83 ec 0c             	sub    esp,0xc
c00246f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00246f5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00246f9:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00246fc:	f7 c7 01 00 00 00    	test   edi,0x1
c0024702:	0f 84 aa 00 00 00    	je     c00247b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024708:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002470c:	89 d8                	mov    eax,ebx
c002470e:	c1 e0 07             	shl    eax,0x7
c0024711:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0024718:	55                   	push   ebp
c0024719:	56                   	push   esi
c002471a:	e8 31 fe ff ff       	call   c0024550 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c002471f:	5a                   	pop    edx
c0024720:	83 f8 01             	cmp    eax,0x1
c0024723:	59                   	pop    ecx
c0024724:	75 30                	jne    c0024756 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0024726:	50                   	push   eax
c0024727:	50                   	push   eax
c0024728:	53                   	push   ebx
c0024729:	68 85 d7 02 c0       	push   0xc002d785
c002472e:	e8 48 e1 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0024733:	83 c4 0c             	add    esp,0xc
c0024736:	53                   	push   ebx
c0024737:	55                   	push   ebp
c0024738:	56                   	push   esi
c0024739:	e8 a4 fe ff ff       	call   c00245e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002473e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024745:	e8 42 b1 fe ff       	call   c000f88c <malloc>
c002474a:	89 c5                	mov    ebp,eax
c002474c:	89 04 24             	mov    DWORD PTR [esp],eax
c002474f:	e8 24 0d 00 00       	call   c0025478 <SATA::SATA()>
c0024754:	eb 33                	jmp    c0024789 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024756:	83 f8 04             	cmp    eax,0x4
c0024759:	75 47                	jne    c00247a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002475b:	50                   	push   eax
c002475c:	50                   	push   eax
c002475d:	53                   	push   ebx
c002475e:	68 9c d7 02 c0       	push   0xc002d79c
c0024763:	e8 13 e1 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0024768:	83 c4 0c             	add    esp,0xc
c002476b:	53                   	push   ebx
c002476c:	55                   	push   ebp
c002476d:	56                   	push   esi
c002476e:	e8 6f fe ff ff       	call   c00245e2 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024773:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002477a:	e8 0d b1 fe ff       	call   c000f88c <malloc>
c002477f:	89 c5                	mov    ebp,eax
c0024781:	89 04 24             	mov    DWORD PTR [esp],eax
c0024784:	e8 65 10 00 00       	call   c00257ee <SATAPI::SATAPI()>
c0024789:	5a                   	pop    edx
c002478a:	59                   	pop    ecx
c002478b:	55                   	push   ebp
c002478c:	56                   	push   esi
c002478d:	e8 22 f5 fe ff       	call   c0013cb4 <Device::addChild(Device*)>
c0024792:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024795:	56                   	push   esi
c0024796:	6a 00                	push   0x0
c0024798:	53                   	push   ebx
c0024799:	55                   	push   ebp
c002479a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002479d:	83 c4 20             	add    esp,0x20
c00247a0:	eb 10                	jmp    c00247b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00247a2:	50                   	push   eax
c00247a3:	50                   	push   eax
c00247a4:	53                   	push   ebx
c00247a5:	68 b5 d7 02 c0       	push   0xc002d7b5
c00247aa:	e8 cc e0 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00247af:	83 c4 10             	add    esp,0x10
c00247b2:	d1 ef                	shr    edi,1
c00247b4:	43                   	inc    ebx
c00247b5:	83 fb 20             	cmp    ebx,0x20
c00247b8:	0f 85 3e ff ff ff    	jne    c00246fc <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00247be:	83 c4 0c             	add    esp,0xc
c00247c1:	5b                   	pop    ebx
c00247c2:	5e                   	pop    esi
c00247c3:	5f                   	pop    edi
c00247c4:	5d                   	pop    ebp
c00247c5:	c3                   	ret    

c00247c6 <SATABus::open(int, int, void*)>:
c00247c6:	83 ec 14             	sub    esp,0x14
c00247c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00247cd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00247d3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00247d9:	52                   	push   edx
c00247da:	50                   	push   eax
c00247db:	e8 08 ff ff ff       	call   c00246e8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00247e0:	31 c0                	xor    eax,eax
c00247e2:	83 c4 1c             	add    esp,0x1c
c00247e5:	c3                   	ret    

c00247e6 <ATA::close(int, int, void*)>:
c00247e6:	83 ec 0c             	sub    esp,0xc
c00247e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00247f3:	85 c0                	test   eax,eax
c00247f5:	74 0c                	je     c0024803 <ATA::close(int, int, void*)+0x1d>
c00247f7:	83 ec 0c             	sub    esp,0xc
c00247fa:	8b 10                	mov    edx,DWORD PTR [eax]
c00247fc:	50                   	push   eax
c00247fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024800:	83 c4 10             	add    esp,0x10
c0024803:	31 c0                	xor    eax,eax
c0024805:	83 c4 0c             	add    esp,0xc
c0024808:	c3                   	ret    
c0024809:	90                   	nop

c002480a <ATA::powerSaving(PowerSavingLevel)>:
c002480a:	c3                   	ret    
c002480b:	90                   	nop

c002480c <ATA::ATA()>:
c002480c:	83 ec 0c             	sub    esp,0xc
c002480f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024813:	83 ec 04             	sub    esp,0x4
c0024816:	68 00 02 00 00       	push   0x200
c002481b:	68 9d d8 02 c0       	push   0xc002d89d
c0024820:	50                   	push   eax
c0024821:	e8 d4 f8 fe ff       	call   c00140fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024826:	83 c4 10             	add    esp,0x10
c0024829:	ba 20 d8 02 c0       	mov    edx,0xc002d820
c002482e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024832:	89 10                	mov    DWORD PTR [eax],edx
c0024834:	90                   	nop
c0024835:	83 c4 0c             	add    esp,0xc
c0024838:	c3                   	ret    
c0024839:	90                   	nop

c002483a <ATA::flush(bool)>:
c002483a:	53                   	push   ebx
c002483b:	83 ec 08             	sub    esp,0x8
c002483e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0024843:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024847:	19 c0                	sbb    eax,eax
c0024849:	83 e0 fd             	and    eax,0xfffffffd
c002484c:	05 ea 00 00 00       	add    eax,0xea
c0024851:	50                   	push   eax
c0024852:	6a 07                	push   0x7
c0024854:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002485b:	50                   	push   eax
c002485c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024862:	e8 dd ef ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024867:	83 c4 0c             	add    esp,0xc
c002486a:	6a 00                	push   0x0
c002486c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024873:	50                   	push   eax
c0024874:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002487a:	e8 71 fb ff ff       	call   c00243f0 <IDE::polling(unsigned char, unsigned int)>
c002487f:	83 c4 18             	add    esp,0x18
c0024882:	5b                   	pop    ebx
c0024883:	c3                   	ret    

c0024884 <ATA::readyForCommand()>:
c0024884:	56                   	push   esi
c0024885:	53                   	push   ebx
c0024886:	31 db                	xor    ebx,ebx
c0024888:	50                   	push   eax
c0024889:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002488d:	50                   	push   eax
c002488e:	6a 0c                	push   0xc
c0024890:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024897:	50                   	push   eax
c0024898:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c002489e:	e8 61 f0 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c00248a3:	83 c4 10             	add    esp,0x10
c00248a6:	a8 88                	test   al,0x88
c00248a8:	74 23                	je     c00248cd <ATA::readyForCommand()+0x49>
c00248aa:	43                   	inc    ebx
c00248ab:	83 fb 63             	cmp    ebx,0x63
c00248ae:	7e dd                	jle    c002488d <ATA::readyForCommand()+0x9>
c00248b0:	51                   	push   ecx
c00248b1:	51                   	push   ecx
c00248b2:	6a 00                	push   0x0
c00248b4:	68 40 42 0f 00       	push   0xf4240
c00248b9:	e8 a9 9a ff ff       	call   c001e367 <nanoSleep(unsigned long long)>
c00248be:	83 c4 10             	add    esp,0x10
c00248c1:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00248c7:	75 c4                	jne    c002488d <ATA::readyForCommand()+0x9>
c00248c9:	31 c0                	xor    eax,eax
c00248cb:	eb 02                	jmp    c00248cf <ATA::readyForCommand()+0x4b>
c00248cd:	b0 01                	mov    al,0x1
c00248cf:	5a                   	pop    edx
c00248d0:	5b                   	pop    ebx
c00248d1:	5e                   	pop    esi
c00248d2:	c3                   	ret    
c00248d3:	90                   	nop

c00248d4 <ATA::access(unsigned long long, int, void*, bool)>:
c00248d4:	55                   	push   ebp
c00248d5:	57                   	push   edi
c00248d6:	56                   	push   esi
c00248d7:	53                   	push   ebx
c00248d8:	83 ec 2c             	sub    esp,0x2c
c00248db:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00248df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00248e3:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00248e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00248eb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00248ef:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00248f3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00248f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00248fd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024901:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024907:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002490b:	c1 e0 06             	shl    eax,0x6
c002490e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024916:	74 5d                	je     c0024975 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024918:	89 fa                	mov    edx,edi
c002491a:	89 f0                	mov    eax,esi
c002491c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0024920:	c1 ea 1c             	shr    edx,0x1c
c0024923:	89 d1                	mov    ecx,edx
c0024925:	09 c1                	or     ecx,eax
c0024927:	74 25                	je     c002494e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024929:	31 ed                	xor    ebp,ebp
c002492b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0024932:	89 fa                	mov    edx,edi
c0024934:	89 f0                	mov    eax,esi
c0024936:	0f ad d0             	shrd   eax,edx,cl
c0024939:	d3 ea                	shr    edx,cl
c002493b:	f6 c1 20             	test   cl,0x20
c002493e:	74 02                	je     c0024942 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0024940:	89 d0                	mov    eax,edx
c0024942:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0024946:	45                   	inc    ebp
c0024947:	83 fd 06             	cmp    ebp,0x6
c002494a:	75 df                	jne    c002492b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c002494c:	eb 76                	jmp    c00249c4 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002494e:	89 f0                	mov    eax,esi
c0024950:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024955:	89 fa                	mov    edx,edi
c0024957:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002495e:	0f ac d0 10          	shrd   eax,edx,0x10
c0024962:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024967:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002496b:	c1 ee 18             	shr    esi,0x18
c002496e:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024973:	eb 56                	jmp    c00249cb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024975:	6a 00                	push   0x0
c0024977:	6a 3f                	push   0x3f
c0024979:	57                   	push   edi
c002497a:	56                   	push   esi
c002497b:	e8 24 29 00 00       	call   c00272a4 <__umoddi3>
c0024980:	83 c4 10             	add    esp,0x10
c0024983:	40                   	inc    eax
c0024984:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0024988:	6a 00                	push   0x0
c002498a:	68 f0 03 00 00       	push   0x3f0
c002498f:	57                   	push   edi
c0024990:	56                   	push   esi
c0024991:	e8 0e 28 00 00       	call   c00271a4 <__udivdi3>
c0024996:	83 c4 10             	add    esp,0x10
c0024999:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c002499e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00249a5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00249aa:	6a 00                	push   0x0
c00249ac:	6a 3f                	push   0x3f
c00249ae:	57                   	push   edi
c00249af:	56                   	push   esi
c00249b0:	e8 ef 27 00 00       	call   c00271a4 <__udivdi3>
c00249b5:	83 c4 10             	add    esp,0x10
c00249b8:	89 c6                	mov    esi,eax
c00249ba:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00249bf:	83 e6 0f             	and    esi,0xf
c00249c2:	eb 07                	jmp    c00249cb <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00249c4:	31 f6                	xor    esi,esi
c00249c6:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c00249cb:	bf 01 00 00 00       	mov    edi,0x1
c00249d0:	50                   	push   eax
c00249d1:	6a 00                	push   0x0
c00249d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249da:	50                   	push   eax
c00249db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00249df:	e8 6c f0 ff ff       	call   c0023a50 <IDE::enableIRQs(unsigned char, bool)>
c00249e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00249e7:	e8 98 fe ff ff       	call   c0024884 <ATA::readyForCommand()>
c00249ec:	83 c4 10             	add    esp,0x10
c00249ef:	84 c0                	test   al,al
c00249f1:	0f 84 5a 02 00 00    	je     c0024c51 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00249f7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00249fd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024a03:	c1 e0 04             	shl    eax,0x4
c0024a06:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024a0d:	09 c6                	or     esi,eax
c0024a0f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024a14:	75 05                	jne    c0024a1b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024a16:	83 ce a0             	or     esi,0xffffffa0
c0024a19:	eb 03                	jmp    c0024a1e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024a1b:	83 ce e0             	or     esi,0xffffffe0
c0024a1e:	89 f0                	mov    eax,esi
c0024a20:	0f b6 f0             	movzx  esi,al
c0024a23:	56                   	push   esi
c0024a24:	6a 06                	push   0x6
c0024a26:	51                   	push   ecx
c0024a27:	52                   	push   edx
c0024a28:	e8 17 ee ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a2d:	83 c4 10             	add    esp,0x10
c0024a30:	6a 00                	push   0x0
c0024a32:	6a 01                	push   0x1
c0024a34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a3b:	50                   	push   eax
c0024a3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a42:	e8 fd ed ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a47:	83 c4 10             	add    esp,0x10
c0024a4a:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024a4f:	75 6e                	jne    c0024abf <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024a51:	6a 00                	push   0x0
c0024a53:	6a 08                	push   0x8
c0024a55:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a5c:	50                   	push   eax
c0024a5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a63:	e8 dc ed ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a68:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024a6d:	50                   	push   eax
c0024a6e:	6a 09                	push   0x9
c0024a70:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a77:	50                   	push   eax
c0024a78:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a7e:	e8 c1 ed ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a83:	83 c4 20             	add    esp,0x20
c0024a86:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024a8b:	50                   	push   eax
c0024a8c:	6a 0a                	push   0xa
c0024a8e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a95:	50                   	push   eax
c0024a96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a9c:	e8 a3 ed ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aa1:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024aa6:	50                   	push   eax
c0024aa7:	6a 0b                	push   0xb
c0024aa9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab0:	50                   	push   eax
c0024ab1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ab7:	e8 88 ed ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024abc:	83 c4 20             	add    esp,0x20
c0024abf:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024ac4:	50                   	push   eax
c0024ac5:	6a 02                	push   0x2
c0024ac7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ace:	50                   	push   eax
c0024acf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ad5:	e8 6a ed ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ada:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024adf:	50                   	push   eax
c0024ae0:	6a 03                	push   0x3
c0024ae2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ae9:	50                   	push   eax
c0024aea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024af0:	e8 4f ed ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024af5:	83 c4 20             	add    esp,0x20
c0024af8:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024afd:	50                   	push   eax
c0024afe:	6a 04                	push   0x4
c0024b00:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b07:	50                   	push   eax
c0024b08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b0e:	e8 31 ed ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b13:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024b18:	50                   	push   eax
c0024b19:	6a 05                	push   0x5
c0024b1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b22:	50                   	push   eax
c0024b23:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b29:	e8 16 ed ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b2e:	83 c4 20             	add    esp,0x20
c0024b31:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024b36:	0f 94 c0             	sete   al
c0024b39:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024b3e:	74 09                	je     c0024b49 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024b40:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024b47:	eb 07                	jmp    c0024b50 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024b49:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024b50:	0f b6 c0             	movzx  eax,al
c0024b53:	50                   	push   eax
c0024b54:	6a 07                	push   0x7
c0024b56:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b5d:	50                   	push   eax
c0024b5e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b64:	e8 db ec ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b69:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024b6d:	83 c4 10             	add    esp,0x10
c0024b70:	85 f6                	test   esi,esi
c0024b72:	0f 84 ba 00 00 00    	je     c0024c32 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024b78:	50                   	push   eax
c0024b79:	6a 01                	push   0x1
c0024b7b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b82:	50                   	push   eax
c0024b83:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b89:	e8 62 f8 ff ff       	call   c00243f0 <IDE::polling(unsigned char, unsigned int)>
c0024b8e:	83 c4 10             	add    esp,0x10
c0024b91:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024b97:	84 c0                	test   al,al
c0024b99:	74 2c                	je     c0024bc7 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024b9b:	0f b6 f8             	movzx  edi,al
c0024b9e:	0f b6 d2             	movzx  edx,dl
c0024ba1:	57                   	push   edi
c0024ba2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024ba9:	50                   	push   eax
c0024baa:	52                   	push   edx
c0024bab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bb1:	e8 a4 f6 ff ff       	call   c002425a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024bb6:	c7 04 24 f8 d7 02 c0 	mov    DWORD PTR [esp],0xc002d7f8
c0024bbd:	e8 b9 dc fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0024bc2:	e9 87 00 00 00       	jmp    c0024c4e <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024bc7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024bcc:	74 33                	je     c0024c01 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024bce:	31 ed                	xor    ebp,ebp
c0024bd0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024bd4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024bd8:	50                   	push   eax
c0024bd9:	50                   	push   eax
c0024bda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024be1:	50                   	push   eax
c0024be2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024be8:	e8 45 ec ff ff       	call   c0023832 <IDE::getBase(unsigned char)>
c0024bed:	89 c2                	mov    edx,eax
c0024bef:	89 f8                	mov    eax,edi
c0024bf1:	66 ef                	out    dx,ax
c0024bf3:	45                   	inc    ebp
c0024bf4:	83 c4 10             	add    esp,0x10
c0024bf7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024bfd:	75 d1                	jne    c0024bd0 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024bff:	eb 23                	jmp    c0024c24 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024c01:	0f b6 d2             	movzx  edx,dl
c0024c04:	51                   	push   ecx
c0024c05:	51                   	push   ecx
c0024c06:	52                   	push   edx
c0024c07:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024c0d:	e8 20 ec ff ff       	call   c0023832 <IDE::getBase(unsigned char)>
c0024c12:	b9 00 01 00 00       	mov    ecx,0x100
c0024c17:	89 c2                	mov    edx,eax
c0024c19:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024c1d:	fc                   	cld    
c0024c1e:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024c21:	83 c4 10             	add    esp,0x10
c0024c24:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024c2c:	4e                   	dec    esi
c0024c2d:	e9 3e ff ff ff       	jmp    c0024b70 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024c32:	31 ff                	xor    edi,edi
c0024c34:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024c39:	74 16                	je     c0024c51 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024c3b:	50                   	push   eax
c0024c3c:	50                   	push   eax
c0024c3d:	31 c0                	xor    eax,eax
c0024c3f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024c44:	0f 94 c0             	sete   al
c0024c47:	50                   	push   eax
c0024c48:	53                   	push   ebx
c0024c49:	e8 ec fb ff ff       	call   c002483a <ATA::flush(bool)>
c0024c4e:	83 c4 10             	add    esp,0x10
c0024c51:	83 c4 2c             	add    esp,0x2c
c0024c54:	89 f8                	mov    eax,edi
c0024c56:	5b                   	pop    ebx
c0024c57:	5e                   	pop    esi
c0024c58:	5f                   	pop    edi
c0024c59:	5d                   	pop    ebp
c0024c5a:	c3                   	ret    
c0024c5b:	90                   	nop

c0024c5c <ATA::read(unsigned long long, int, void*)>:
c0024c5c:	57                   	push   edi
c0024c5d:	b8 04 00 00 00       	mov    eax,0x4
c0024c62:	56                   	push   esi
c0024c63:	53                   	push   ebx
c0024c64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024c68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024c6c:	8d 7a ff             	lea    edi,[edx-0x1]
c0024c6f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024c73:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024c77:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024c7d:	77 25                	ja     c0024ca4 <ATA::read(unsigned long long, int, void*)+0x48>
c0024c7f:	b8 06 00 00 00       	mov    eax,0x6
c0024c84:	85 f6                	test   esi,esi
c0024c86:	74 1c                	je     c0024ca4 <ATA::read(unsigned long long, int, void*)+0x48>
c0024c88:	50                   	push   eax
c0024c89:	50                   	push   eax
c0024c8a:	6a 00                	push   0x0
c0024c8c:	56                   	push   esi
c0024c8d:	52                   	push   edx
c0024c8e:	53                   	push   ebx
c0024c8f:	51                   	push   ecx
c0024c90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024c94:	e8 3b fc ff ff       	call   c00248d4 <ATA::access(unsigned long long, int, void*, bool)>
c0024c99:	83 c4 20             	add    esp,0x20
c0024c9c:	85 c0                	test   eax,eax
c0024c9e:	0f 95 c0             	setne  al
c0024ca1:	0f b6 c0             	movzx  eax,al
c0024ca4:	5b                   	pop    ebx
c0024ca5:	5e                   	pop    esi
c0024ca6:	5f                   	pop    edi
c0024ca7:	c3                   	ret    

c0024ca8 <ATA::write(unsigned long long, int, void*)>:
c0024ca8:	57                   	push   edi
c0024ca9:	b8 04 00 00 00       	mov    eax,0x4
c0024cae:	56                   	push   esi
c0024caf:	53                   	push   ebx
c0024cb0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024cb4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024cb8:	8d 7a ff             	lea    edi,[edx-0x1]
c0024cbb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0024cbf:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0024cc3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0024cc9:	77 25                	ja     c0024cf0 <ATA::write(unsigned long long, int, void*)+0x48>
c0024ccb:	b8 06 00 00 00       	mov    eax,0x6
c0024cd0:	85 f6                	test   esi,esi
c0024cd2:	74 1c                	je     c0024cf0 <ATA::write(unsigned long long, int, void*)+0x48>
c0024cd4:	50                   	push   eax
c0024cd5:	50                   	push   eax
c0024cd6:	6a 01                	push   0x1
c0024cd8:	56                   	push   esi
c0024cd9:	52                   	push   edx
c0024cda:	53                   	push   ebx
c0024cdb:	51                   	push   ecx
c0024cdc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0024ce0:	e8 ef fb ff ff       	call   c00248d4 <ATA::access(unsigned long long, int, void*, bool)>
c0024ce5:	83 c4 20             	add    esp,0x20
c0024ce8:	85 c0                	test   eax,eax
c0024cea:	0f 95 c0             	setne  al
c0024ced:	0f b6 c0             	movzx  eax,al
c0024cf0:	5b                   	pop    ebx
c0024cf1:	5e                   	pop    esi
c0024cf2:	5f                   	pop    edi
c0024cf3:	c3                   	ret    

c0024cf4 <ATA::detectCHS()>:
c0024cf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024cf8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024cfe:	c1 e0 06             	shl    eax,0x6
c0024d01:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024d07:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024d11:	c7 44 24 04 03 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d803
c0024d19:	e9 93 55 ff ff       	jmp    c001a2b1 <Krnl::panic(char const*)>

c0024d1e <ATA::open(int, int, void*)>:
c0024d1e:	53                   	push   ebx
c0024d1f:	83 ec 08             	sub    esp,0x8
c0024d22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d2e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d34:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d3a:	c1 e0 06             	shl    eax,0x6
c0024d3d:	01 d0                	add    eax,edx
c0024d3f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024d46:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024d4c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024d53:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024d5d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024d63:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024d6a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024d71:	75 0c                	jne    c0024d7f <ATA::open(int, int, void*)+0x61>
c0024d73:	83 ec 0c             	sub    esp,0xc
c0024d76:	53                   	push   ebx
c0024d77:	e8 78 ff ff ff       	call   c0024cf4 <ATA::detectCHS()>
c0024d7c:	83 c4 10             	add    esp,0x10
c0024d7f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024d85:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024d8b:	c1 e0 06             	shl    eax,0x6
c0024d8e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024d95:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024d9f:	d1 e8                	shr    eax,1
c0024da1:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024da7:	6a 04                	push   0x4
c0024da9:	6a 0c                	push   0xc
c0024dab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024db2:	50                   	push   eax
c0024db3:	52                   	push   edx
c0024db4:	e8 8b ea ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024db9:	90                   	nop
c0024dba:	90                   	nop
c0024dbb:	6a 00                	push   0x0
c0024dbd:	6a 0c                	push   0xc
c0024dbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024dc6:	50                   	push   eax
c0024dc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024dcd:	e8 72 ea ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dd2:	83 c4 14             	add    esp,0x14
c0024dd5:	53                   	push   ebx
c0024dd6:	e8 87 f3 fe ff       	call   c0014162 <PhysicalDisk::startCache()>
c0024ddb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dde:	e8 39 16 ff ff       	call   c001641c <createPartitionsForDisk(PhysicalDisk*)>
c0024de3:	31 c0                	xor    eax,eax
c0024de5:	83 c4 18             	add    esp,0x18
c0024de8:	5b                   	pop    ebx
c0024de9:	c3                   	ret    

c0024dea <ATAPI::write(unsigned long long, int, void*)>:
c0024dea:	b8 03 00 00 00       	mov    eax,0x3
c0024def:	c3                   	ret    

c0024df0 <ATAPI::close(int, int, void*)>:
c0024df0:	83 ec 0c             	sub    esp,0xc
c0024df3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024df7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024dfd:	85 c0                	test   eax,eax
c0024dff:	74 0c                	je     c0024e0d <ATAPI::close(int, int, void*)+0x1d>
c0024e01:	83 ec 0c             	sub    esp,0xc
c0024e04:	8b 10                	mov    edx,DWORD PTR [eax]
c0024e06:	50                   	push   eax
c0024e07:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024e0a:	83 c4 10             	add    esp,0x10
c0024e0d:	31 c0                	xor    eax,eax
c0024e0f:	83 c4 0c             	add    esp,0xc
c0024e12:	c3                   	ret    
c0024e13:	90                   	nop

c0024e14 <ATAPI::ATAPI()>:
c0024e14:	83 ec 0c             	sub    esp,0xc
c0024e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e1b:	83 ec 04             	sub    esp,0x4
c0024e1e:	68 00 08 00 00       	push   0x800
c0024e23:	68 3d d9 02 c0       	push   0xc002d93d
c0024e28:	50                   	push   eax
c0024e29:	e8 cc f2 fe ff       	call   c00140fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e2e:	83 c4 10             	add    esp,0x10
c0024e31:	ba 58 d8 02 c0       	mov    edx,0xc002d858
c0024e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e3a:	89 10                	mov    DWORD PTR [eax],edx
c0024e3c:	90                   	nop
c0024e3d:	83 c4 0c             	add    esp,0xc
c0024e40:	c3                   	ret    
c0024e41:	90                   	nop

c0024e42 <ATAPI::readyForCommand()>:
c0024e42:	56                   	push   esi
c0024e43:	53                   	push   ebx
c0024e44:	31 db                	xor    ebx,ebx
c0024e46:	50                   	push   eax
c0024e47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024e4b:	50                   	push   eax
c0024e4c:	6a 0c                	push   0xc
c0024e4e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024e55:	50                   	push   eax
c0024e56:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024e5c:	e8 a3 ea ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0024e61:	83 c4 10             	add    esp,0x10
c0024e64:	a8 88                	test   al,0x88
c0024e66:	74 23                	je     c0024e8b <ATAPI::readyForCommand()+0x49>
c0024e68:	43                   	inc    ebx
c0024e69:	83 fb 63             	cmp    ebx,0x63
c0024e6c:	7e dd                	jle    c0024e4b <ATAPI::readyForCommand()+0x9>
c0024e6e:	51                   	push   ecx
c0024e6f:	51                   	push   ecx
c0024e70:	6a 00                	push   0x0
c0024e72:	68 40 42 0f 00       	push   0xf4240
c0024e77:	e8 eb 94 ff ff       	call   c001e367 <nanoSleep(unsigned long long)>
c0024e7c:	83 c4 10             	add    esp,0x10
c0024e7f:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024e85:	75 c4                	jne    c0024e4b <ATAPI::readyForCommand()+0x9>
c0024e87:	31 c0                	xor    eax,eax
c0024e89:	eb 02                	jmp    c0024e8d <ATAPI::readyForCommand()+0x4b>
c0024e8b:	b0 01                	mov    al,0x1
c0024e8d:	5a                   	pop    edx
c0024e8e:	5b                   	pop    ebx
c0024e8f:	5e                   	pop    esi
c0024e90:	c3                   	ret    
c0024e91:	90                   	nop

c0024e92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024e92:	55                   	push   ebp
c0024e93:	57                   	push   edi
c0024e94:	56                   	push   esi
c0024e95:	53                   	push   ebx
c0024e96:	83 ec 20             	sub    esp,0x20
c0024e99:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024e9d:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024ea1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024ea5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024ea9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024ead:	6a 01                	push   0x1
c0024eaf:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024eb6:	50                   	push   eax
c0024eb7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ebd:	e8 8e eb ff ff       	call   c0023a50 <IDE::enableIRQs(unsigned char, bool)>
c0024ec2:	5e                   	pop    esi
c0024ec3:	58                   	pop    eax
c0024ec4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ecb:	50                   	push   eax
c0024ecc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ed2:	e8 47 e9 ff ff       	call   c002381e <IDE::prepareInterrupt(unsigned char)>
c0024ed7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024eda:	e8 63 ff ff ff       	call   c0024e42 <ATAPI::readyForCommand()>
c0024edf:	83 c4 10             	add    esp,0x10
c0024ee2:	84 c0                	test   al,al
c0024ee4:	75 0a                	jne    c0024ef0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024ee6:	bb 01 00 00 00       	mov    ebx,0x1
c0024eeb:	e9 57 02 00 00       	jmp    c0025147 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024ef0:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024ef6:	c1 e0 04             	shl    eax,0x4
c0024ef9:	0f b6 c0             	movzx  eax,al
c0024efc:	50                   	push   eax
c0024efd:	6a 06                	push   0x6
c0024eff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f06:	50                   	push   eax
c0024f07:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f0d:	e8 32 e9 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f12:	6a 00                	push   0x0
c0024f14:	6a 01                	push   0x1
c0024f16:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f1d:	50                   	push   eax
c0024f1e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f24:	e8 1b e9 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f29:	83 c4 20             	add    esp,0x20
c0024f2c:	0f b6 c3             	movzx  eax,bl
c0024f2f:	0f b6 df             	movzx  ebx,bh
c0024f32:	50                   	push   eax
c0024f33:	6a 04                	push   0x4
c0024f35:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f3c:	50                   	push   eax
c0024f3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f43:	e8 fc e8 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f48:	53                   	push   ebx
c0024f49:	6a 05                	push   0x5
c0024f4b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f52:	50                   	push   eax
c0024f53:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f59:	e8 e6 e8 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f5e:	83 c4 20             	add    esp,0x20
c0024f61:	68 a0 00 00 00       	push   0xa0
c0024f66:	6a 07                	push   0x7
c0024f68:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f6f:	50                   	push   eax
c0024f70:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f76:	e8 c9 e8 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f7b:	83 c4 0c             	add    esp,0xc
c0024f7e:	6a 01                	push   0x1
c0024f80:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f87:	50                   	push   eax
c0024f88:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f8e:	e8 5d f4 ff ff       	call   c00243f0 <IDE::polling(unsigned char, unsigned int)>
c0024f93:	83 c4 10             	add    esp,0x10
c0024f96:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024f9c:	84 c0                	test   al,al
c0024f9e:	74 23                	je     c0024fc3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024fa0:	0f b6 d8             	movzx  ebx,al
c0024fa3:	0f b6 d2             	movzx  edx,dl
c0024fa6:	53                   	push   ebx
c0024fa7:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024fae:	50                   	push   eax
c0024faf:	52                   	push   edx
c0024fb0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fb6:	e8 9f f2 ff ff       	call   c002425a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024fbb:	83 c4 10             	add    esp,0x10
c0024fbe:	e9 84 01 00 00       	jmp    c0025147 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024fc3:	0f b6 d2             	movzx  edx,dl
c0024fc6:	53                   	push   ebx
c0024fc7:	53                   	push   ebx
c0024fc8:	52                   	push   edx
c0024fc9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fcf:	e8 5e e8 ff ff       	call   c0023832 <IDE::getBase(unsigned char)>
c0024fd4:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024fd8:	b9 06 00 00 00       	mov    ecx,0x6
c0024fdd:	89 c2                	mov    edx,eax
c0024fdf:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024fe2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024fe6:	83 c4 10             	add    esp,0x10
c0024fe9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024fef:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024ff6:	85 db                	test   ebx,ebx
c0024ff8:	0f 84 ec 00 00 00    	je     c00250ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024ffe:	51                   	push   ecx
c0024fff:	51                   	push   ecx
c0025000:	52                   	push   edx
c0025001:	50                   	push   eax
c0025002:	e8 ab e9 ff ff       	call   c00239b2 <IDE::waitInterrupt(unsigned char)>
c0025007:	83 c4 10             	add    esp,0x10
c002500a:	84 c0                	test   al,al
c002500c:	0f 84 d4 fe ff ff    	je     c0024ee6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0025012:	56                   	push   esi
c0025013:	56                   	push   esi
c0025014:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002501b:	50                   	push   eax
c002501c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025022:	e8 f7 e7 ff ff       	call   c002381e <IDE::prepareInterrupt(unsigned char)>
c0025027:	83 c4 0c             	add    esp,0xc
c002502a:	6a 04                	push   0x4
c002502c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025033:	50                   	push   eax
c0025034:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002503a:	e8 c5 e8 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c002503f:	83 c4 0c             	add    esp,0xc
c0025042:	89 c6                	mov    esi,eax
c0025044:	6a 05                	push   0x5
c0025046:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002504d:	50                   	push   eax
c002504e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025054:	e8 ab e8 ff ff       	call   c0023904 <IDE::read(unsigned char, unsigned char)>
c0025059:	89 f1                	mov    ecx,esi
c002505b:	0f b6 c0             	movzx  eax,al
c002505e:	0f b6 f1             	movzx  esi,cl
c0025061:	c1 e0 08             	shl    eax,0x8
c0025064:	09 c6                	or     esi,eax
c0025066:	d1 fe                	sar    esi,1
c0025068:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c002506c:	83 c4 10             	add    esp,0x10
c002506f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0025074:	74 41                	je     c00250b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0025076:	31 c9                	xor    ecx,ecx
c0025078:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c002507e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0025085:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025089:	75 0a                	jne    c0025095 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002508b:	01 c9                	add    ecx,ecx
c002508d:	01 cd                	add    ebp,ecx
c002508f:	4b                   	dec    ebx
c0025090:	e9 54 ff ff ff       	jmp    c0024fe9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0025095:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002509a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002509e:	51                   	push   ecx
c002509f:	51                   	push   ecx
c00250a0:	52                   	push   edx
c00250a1:	50                   	push   eax
c00250a2:	e8 8b e7 ff ff       	call   c0023832 <IDE::getBase(unsigned char)>
c00250a7:	89 c2                	mov    edx,eax
c00250a9:	89 f0                	mov    eax,esi
c00250ab:	66 ef                	out    dx,ax
c00250ad:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00250b1:	83 c4 10             	add    esp,0x10
c00250b4:	41                   	inc    ecx
c00250b5:	eb c1                	jmp    c0025078 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00250b7:	31 f6                	xor    esi,esi
c00250b9:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250bf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250c6:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00250ca:	75 06                	jne    c00250d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00250cc:	01 f6                	add    esi,esi
c00250ce:	01 f5                	add    ebp,esi
c00250d0:	eb bd                	jmp    c002508f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00250d2:	51                   	push   ecx
c00250d3:	51                   	push   ecx
c00250d4:	52                   	push   edx
c00250d5:	50                   	push   eax
c00250d6:	e8 57 e7 ff ff       	call   c0023832 <IDE::getBase(unsigned char)>
c00250db:	89 c2                	mov    edx,eax
c00250dd:	66 ed                	in     ax,dx
c00250df:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00250e4:	83 c4 10             	add    esp,0x10
c00250e7:	46                   	inc    esi
c00250e8:	eb cf                	jmp    c00250b9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00250ea:	51                   	push   ecx
c00250eb:	51                   	push   ecx
c00250ec:	52                   	push   edx
c00250ed:	50                   	push   eax
c00250ee:	e8 bf e8 ff ff       	call   c00239b2 <IDE::waitInterrupt(unsigned char)>
c00250f3:	83 c4 10             	add    esp,0x10
c00250f6:	84 c0                	test   al,al
c00250f8:	0f 84 e8 fd ff ff    	je     c0024ee6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00250fe:	bb a0 86 01 00       	mov    ebx,0x186a0
c0025103:	52                   	push   edx
c0025104:	52                   	push   edx
c0025105:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002510c:	50                   	push   eax
c002510d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025113:	e8 06 e7 ff ff       	call   c002381e <IDE::prepareInterrupt(unsigned char)>
c0025118:	83 c4 10             	add    esp,0x10
c002511b:	50                   	push   eax
c002511c:	50                   	push   eax
c002511d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025124:	50                   	push   eax
c0025125:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002512b:	e8 02 e7 ff ff       	call   c0023832 <IDE::getBase(unsigned char)>
c0025130:	8d 50 07             	lea    edx,[eax+0x7]
c0025133:	ec                   	in     al,dx
c0025134:	83 c4 10             	add    esp,0x10
c0025137:	a8 88                	test   al,0x88
c0025139:	74 0a                	je     c0025145 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002513b:	4b                   	dec    ebx
c002513c:	75 dd                	jne    c002511b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c002513e:	bb 02 00 00 00       	mov    ebx,0x2
c0025143:	eb 02                	jmp    c0025147 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0025145:	31 db                	xor    ebx,ebx
c0025147:	83 c4 1c             	add    esp,0x1c
c002514a:	89 d8                	mov    eax,ebx
c002514c:	5b                   	pop    ebx
c002514d:	5e                   	pop    esi
c002514e:	5f                   	pop    edi
c002514f:	5d                   	pop    ebp
c0025150:	c3                   	ret    
c0025151:	90                   	nop

c0025152 <ATAPI::diskRemoved()>:
c0025152:	83 ec 18             	sub    esp,0x18
c0025155:	68 49 d9 02 c0       	push   0xc002d949
c002515a:	e8 1c d7 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c002515f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025163:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002516a:	83 c4 1c             	add    esp,0x1c
c002516d:	c3                   	ret    

c002516e <ATAPI::eject()>:
c002516e:	57                   	push   edi
c002516f:	b9 03 00 00 00       	mov    ecx,0x3
c0025174:	53                   	push   ebx
c0025175:	83 ec 14             	sub    esp,0x14
c0025178:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002517c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025180:	fc                   	cld    
c0025181:	31 c0                	xor    eax,eax
c0025183:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025185:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002518a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c002518f:	50                   	push   eax
c0025190:	50                   	push   eax
c0025191:	6a 00                	push   0x0
c0025193:	6a 00                	push   0x0
c0025195:	6a 00                	push   0x0
c0025197:	6a 02                	push   0x2
c0025199:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002519d:	50                   	push   eax
c002519e:	53                   	push   ebx
c002519f:	e8 ee fc ff ff       	call   c0024e92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251a4:	83 c4 14             	add    esp,0x14
c00251a7:	53                   	push   ebx
c00251a8:	e8 a5 ff ff ff       	call   c0025152 <ATAPI::diskRemoved()>
c00251ad:	83 c4 24             	add    esp,0x24
c00251b0:	31 c0                	xor    eax,eax
c00251b2:	5b                   	pop    ebx
c00251b3:	5f                   	pop    edi
c00251b4:	c3                   	ret    
c00251b5:	90                   	nop

c00251b6 <ATAPI::diskInserted()>:
c00251b6:	53                   	push   ebx
c00251b7:	83 ec 14             	sub    esp,0x14
c00251ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00251be:	68 60 d9 02 c0       	push   0xc002d960
c00251c3:	e8 b3 d6 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00251c8:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00251cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251d2:	e8 8b ef fe ff       	call   c0014162 <PhysicalDisk::startCache()>
c00251d7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00251db:	83 c4 18             	add    esp,0x18
c00251de:	5b                   	pop    ebx
c00251df:	e9 38 12 ff ff       	jmp    c001641c <createPartitionsForDisk(PhysicalDisk*)>

c00251e4 <ATAPI::detectMedia()>:
c00251e4:	56                   	push   esi
c00251e5:	53                   	push   ebx
c00251e6:	83 ec 28             	sub    esp,0x28
c00251e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251ed:	6a 0c                	push   0xc
c00251ef:	6a 00                	push   0x0
c00251f1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00251f5:	56                   	push   esi
c00251f6:	e8 55 b5 fd ff       	call   c0000750 <memset>
c00251fb:	58                   	pop    eax
c00251fc:	5a                   	pop    edx
c00251fd:	6a 00                	push   0x0
c00251ff:	6a 00                	push   0x0
c0025201:	6a 00                	push   0x0
c0025203:	6a 00                	push   0x0
c0025205:	56                   	push   esi
c0025206:	53                   	push   ebx
c0025207:	e8 86 fc ff ff       	call   c0024e92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002520c:	83 c4 1c             	add    esp,0x1c
c002520f:	6a 0c                	push   0xc
c0025211:	6a 00                	push   0x0
c0025213:	56                   	push   esi
c0025214:	e8 37 b5 fd ff       	call   c0000750 <memset>
c0025219:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c002521e:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025223:	59                   	pop    ecx
c0025224:	58                   	pop    eax
c0025225:	6a 01                	push   0x1
c0025227:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002522b:	50                   	push   eax
c002522c:	6a 00                	push   0x0
c002522e:	6a 12                	push   0x12
c0025230:	56                   	push   esi
c0025231:	53                   	push   ebx
c0025232:	e8 5b fc ff ff       	call   c0024e92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025237:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002523b:	83 c4 20             	add    esp,0x20
c002523e:	83 e0 7f             	and    eax,0x7f
c0025241:	3c 70                	cmp    al,0x70
c0025243:	74 15                	je     c002525a <ATAPI::detectMedia()+0x76>
c0025245:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002524c:	75 0c                	jne    c002525a <ATAPI::detectMedia()+0x76>
c002524e:	83 ec 0c             	sub    esp,0xc
c0025251:	53                   	push   ebx
c0025252:	e8 5f ff ff ff       	call   c00251b6 <ATAPI::diskInserted()>
c0025257:	83 c4 10             	add    esp,0x10
c002525a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c002525e:	83 e0 0f             	and    eax,0xf
c0025261:	3c 02                	cmp    al,0x2
c0025263:	75 1b                	jne    c0025280 <ATAPI::detectMedia()+0x9c>
c0025265:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002526a:	75 2d                	jne    c0025299 <ATAPI::detectMedia()+0xb5>
c002526c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025273:	74 24                	je     c0025299 <ATAPI::detectMedia()+0xb5>
c0025275:	83 ec 0c             	sub    esp,0xc
c0025278:	53                   	push   ebx
c0025279:	e8 d4 fe ff ff       	call   c0025152 <ATAPI::diskRemoved()>
c002527e:	eb 16                	jmp    c0025296 <ATAPI::detectMedia()+0xb2>
c0025280:	84 c0                	test   al,al
c0025282:	75 15                	jne    c0025299 <ATAPI::detectMedia()+0xb5>
c0025284:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002528b:	75 0c                	jne    c0025299 <ATAPI::detectMedia()+0xb5>
c002528d:	83 ec 0c             	sub    esp,0xc
c0025290:	53                   	push   ebx
c0025291:	e8 20 ff ff ff       	call   c00251b6 <ATAPI::diskInserted()>
c0025296:	83 c4 10             	add    esp,0x10
c0025299:	83 c4 24             	add    esp,0x24
c002529c:	5b                   	pop    ebx
c002529d:	5e                   	pop    esi
c002529e:	c3                   	ret    
c002529f:	90                   	nop

c00252a0 <ATAPI::open(int, int, void*)>:
c00252a0:	53                   	push   ebx
c00252a1:	83 ec 08             	sub    esp,0x8
c00252a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00252a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00252ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00252b0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00252b6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00252bc:	c1 e0 06             	shl    eax,0x6
c00252bf:	01 d0                	add    eax,edx
c00252c1:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00252c8:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00252ce:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00252d5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00252df:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00252e5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00252ec:	6a 04                	push   0x4
c00252ee:	6a 0c                	push   0xc
c00252f0:	51                   	push   ecx
c00252f1:	52                   	push   edx
c00252f2:	e8 4d e5 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252f7:	90                   	nop
c00252f8:	90                   	nop
c00252f9:	6a 00                	push   0x0
c00252fb:	6a 0c                	push   0xc
c00252fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0025304:	50                   	push   eax
c0025305:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002530b:	e8 34 e5 ff ff       	call   c0023844 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0025310:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025317:	83 c4 14             	add    esp,0x14
c002531a:	53                   	push   ebx
c002531b:	e8 c4 fe ff ff       	call   c00251e4 <ATAPI::detectMedia()>
c0025320:	31 c0                	xor    eax,eax
c0025322:	83 c4 18             	add    esp,0x18
c0025325:	5b                   	pop    ebx
c0025326:	c3                   	ret    
c0025327:	90                   	nop

c0025328 <ATAPI::read(unsigned long long, int, void*)>:
c0025328:	55                   	push   ebp
c0025329:	57                   	push   edi
c002532a:	56                   	push   esi
c002532b:	53                   	push   ebx
c002532c:	83 ec 1c             	sub    esp,0x1c
c002532f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0025333:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025337:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002533b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025342:	74 41                	je     c0025385 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0025344:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025348:	b9 03 00 00 00       	mov    ecx,0x3
c002534d:	fc                   	cld    
c002534e:	31 c0                	xor    eax,eax
c0025350:	86 fb                	xchg   bl,bh
c0025352:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025354:	c1 c3 10             	rol    ebx,0x10
c0025357:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c002535c:	89 e8                	mov    eax,ebp
c002535e:	86 fb                	xchg   bl,bh
c0025360:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025364:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025368:	50                   	push   eax
c0025369:	50                   	push   eax
c002536a:	55                   	push   ebp
c002536b:	c1 e5 0b             	shl    ebp,0xb
c002536e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025372:	6a 00                	push   0x0
c0025374:	55                   	push   ebp
c0025375:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025379:	50                   	push   eax
c002537a:	56                   	push   esi
c002537b:	e8 12 fb ff ff       	call   c0024e92 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025380:	83 c4 20             	add    esp,0x20
c0025383:	eb 1a                	jmp    c002539f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0025385:	83 ec 0c             	sub    esp,0xc
c0025388:	56                   	push   esi
c0025389:	e8 56 fe ff ff       	call   c00251e4 <ATAPI::detectMedia()>
c002538e:	83 c4 10             	add    esp,0x10
c0025391:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025398:	75 aa                	jne    c0025344 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002539a:	b8 02 00 00 00       	mov    eax,0x2
c002539f:	83 c4 1c             	add    esp,0x1c
c00253a2:	5b                   	pop    ebx
c00253a3:	5e                   	pop    esi
c00253a4:	5f                   	pop    edi
c00253a5:	5d                   	pop    ebp
c00253a6:	c3                   	ret    
c00253a7:	90                   	nop

c00253a8 <SATA::close(int, int, void*)>:
c00253a8:	83 ec 0c             	sub    esp,0xc
c00253ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00253af:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00253b5:	85 c0                	test   eax,eax
c00253b7:	74 0c                	je     c00253c5 <SATA::close(int, int, void*)+0x1d>
c00253b9:	83 ec 0c             	sub    esp,0xc
c00253bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00253be:	50                   	push   eax
c00253bf:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00253c2:	83 c4 10             	add    esp,0x10
c00253c5:	31 c0                	xor    eax,eax
c00253c7:	83 c4 0c             	add    esp,0xc
c00253ca:	c3                   	ret    
c00253cb:	90                   	nop

c00253cc <SATA::powerSaving(PowerSavingLevel)>:
c00253cc:	c3                   	ret    
c00253cd:	90                   	nop

c00253ce <SATA::open(int, int, void*)>:
c00253ce:	56                   	push   esi
c00253cf:	53                   	push   ebx
c00253d0:	50                   	push   eax
c00253d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253d9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00253e3:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253e9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253f7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025401:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025407:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002540e:	e8 2a a7 fe ff       	call   c000fb3d <Phys::allocatePage()>
c0025413:	89 c6                	mov    esi,eax
c0025415:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002541b:	81 c6 00 10 00 00    	add    esi,0x1000
c0025421:	e8 17 a7 fe ff       	call   c000fb3d <Phys::allocatePage()>
c0025426:	39 c6                	cmp    esi,eax
c0025428:	74 10                	je     c002543a <SATA::open(int, int, void*)+0x6c>
c002542a:	83 ec 0c             	sub    esp,0xc
c002542d:	68 88 d8 02 c0       	push   0xc002d888
c0025432:	e8 7a 4e ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0025437:	83 c4 10             	add    esp,0x10
c002543a:	83 ec 0c             	sub    esp,0xc
c002543d:	6a 02                	push   0x2
c002543f:	e8 31 c0 fe ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c0025444:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002544a:	6a 03                	push   0x3
c002544c:	50                   	push   eax
c002544d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0025453:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c0025459:	e8 4e c8 fe ff       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c002545e:	83 c4 14             	add    esp,0x14
c0025461:	53                   	push   ebx
c0025462:	e8 fb ec fe ff       	call   c0014162 <PhysicalDisk::startCache()>
c0025467:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002546a:	e8 ad 0f ff ff       	call   c001641c <createPartitionsForDisk(PhysicalDisk*)>
c002546f:	83 c4 14             	add    esp,0x14
c0025472:	31 c0                	xor    eax,eax
c0025474:	5b                   	pop    ebx
c0025475:	5e                   	pop    esi
c0025476:	c3                   	ret    
c0025477:	90                   	nop

c0025478 <SATA::SATA()>:
c0025478:	83 ec 0c             	sub    esp,0xc
c002547b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002547f:	83 ec 04             	sub    esp,0x4
c0025482:	68 00 02 00 00       	push   0x200
c0025487:	68 9c d8 02 c0       	push   0xc002d89c
c002548c:	50                   	push   eax
c002548d:	e8 68 ec fe ff       	call   c00140fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025492:	83 c4 10             	add    esp,0x10
c0025495:	ba 0c d9 02 c0       	mov    edx,0xc002d90c
c002549a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002549e:	89 10                	mov    DWORD PTR [eax],edx
c00254a0:	90                   	nop
c00254a1:	83 c4 0c             	add    esp,0xc
c00254a4:	c3                   	ret    
c00254a5:	90                   	nop

c00254a6 <SATA::access(unsigned long long, int, void*, bool)>:
c00254a6:	55                   	push   ebp
c00254a7:	57                   	push   edi
c00254a8:	56                   	push   esi
c00254a9:	53                   	push   ebx
c00254aa:	83 ec 2c             	sub    esp,0x2c
c00254ad:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00254b1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00254b5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00254b9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00254bd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00254c1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00254c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00254ca:	7e 10                	jle    c00254dc <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00254cc:	83 ec 0c             	sub    esp,0xc
c00254cf:	68 ac d8 02 c0       	push   0xc002d8ac
c00254d4:	e8 d8 4d ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00254d9:	83 c4 10             	add    esp,0x10
c00254dc:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00254e2:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00254e8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00254ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00254f2:	89 d0                	mov    eax,edx
c00254f4:	c1 e0 07             	shl    eax,0x7
c00254f7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00254fb:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025505:	51                   	push   ecx
c0025506:	8d 42 02             	lea    eax,[edx+0x2]
c0025509:	51                   	push   ecx
c002550a:	c1 e0 07             	shl    eax,0x7
c002550d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025511:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0025515:	50                   	push   eax
c0025516:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002551c:	e8 e7 ef ff ff       	call   c0024508 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0025521:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0025525:	83 c4 10             	add    esp,0x10
c0025528:	b8 01 00 00 00       	mov    eax,0x1
c002552d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0025532:	0f 84 cb 01 00 00    	je     c0025703 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025538:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002553c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025540:	c1 e0 09             	shl    eax,0x9
c0025543:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025548:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002554c:	74 0e                	je     c002555c <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c002554e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025554:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0025558:	89 c1                	mov    ecx,eax
c002555a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002555c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025560:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025566:	8d 42 02             	lea    eax,[edx+0x2]
c0025569:	c1 e0 07             	shl    eax,0x7
c002556c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025570:	8b 00                	mov    eax,DWORD PTR [eax]
c0025572:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025578:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c002557e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025582:	c1 e1 05             	shl    ecx,0x5
c0025585:	01 c8                	add    eax,ecx
c0025587:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c002558b:	83 e1 01             	and    ecx,0x1
c002558e:	89 ce                	mov    esi,ecx
c0025590:	8a 08                	mov    cl,BYTE PTR [eax]
c0025592:	c1 e6 06             	shl    esi,0x6
c0025595:	83 e1 bf             	and    ecx,0xffffffbf
c0025598:	09 f1                	or     ecx,esi
c002559a:	88 08                	mov    BYTE PTR [eax],cl
c002559c:	8b 08                	mov    ecx,DWORD PTR [eax]
c002559e:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00255a4:	81 c9 05 00 01 00    	or     ecx,0x10005
c00255aa:	89 08                	mov    DWORD PTR [eax],ecx
c00255ac:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c00255b2:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00255b8:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00255be:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00255c1:	50                   	push   eax
c00255c2:	68 90 00 00 00       	push   0x90
c00255c7:	6a 00                	push   0x0
c00255c9:	56                   	push   esi
c00255ca:	e8 81 b1 fd ff       	call   c0000750 <memset>
c00255cf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00255d5:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00255d9:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00255df:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00255e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00255e7:	83 c4 10             	add    esp,0x10
c00255ea:	48                   	dec    eax
c00255eb:	25 ff ff 3f 00       	and    eax,0x3fffff
c00255f0:	89 c1                	mov    ecx,eax
c00255f2:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00255f8:	25 00 00 c0 ff       	and    eax,0xffc00000
c00255fd:	09 c8                	or     eax,ecx
c00255ff:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0025605:	66 8b 06             	mov    ax,WORD PTR [esi]
c0025608:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c002560f:	66 25 00 7f          	and    ax,0x7f00
c0025613:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025617:	66 0d 27 80          	or     ax,0x8027
c002561b:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c0025620:	66 89 06             	mov    WORD PTR [esi],ax
c0025623:	19 c0                	sbb    eax,eax
c0025625:	83 e0 f0             	and    eax,0xfffffff0
c0025628:	83 c0 35             	add    eax,0x35
c002562b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c002562e:	89 e8                	mov    eax,ebp
c0025630:	c1 e8 10             	shr    eax,0x10
c0025633:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025636:	89 e8                	mov    eax,ebp
c0025638:	c1 e8 18             	shr    eax,0x18
c002563b:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c002563e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0025642:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c0025645:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025649:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c002564c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025650:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c0025654:	89 d6                	mov    esi,edx
c0025656:	31 c0                	xor    eax,eax
c0025658:	c1 e6 07             	shl    esi,0x7
c002565b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c002565f:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c0025665:	80 e1 88             	and    cl,0x88
c0025668:	74 0a                	je     c0025674 <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c002566a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002566f:	74 0a                	je     c002567b <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c0025671:	40                   	inc    eax
c0025672:	eb eb                	jmp    c002565f <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c0025674:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025679:	75 0a                	jne    c0025685 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c002567b:	83 ec 0c             	sub    esp,0xc
c002567e:	68 e5 d8 02 c0       	push   0xc002d8e5
c0025683:	eb 56                	jmp    c00256db <SATA::access(unsigned long long, int, void*, bool)+0x235>
c0025685:	b8 01 00 00 00       	mov    eax,0x1
c002568a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002568e:	c1 e2 07             	shl    edx,0x7
c0025691:	d3 e0                	shl    eax,cl
c0025693:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025697:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c002569d:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c00256a3:	85 c8                	test   eax,ecx
c00256a5:	74 20                	je     c00256c7 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c00256a7:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c00256ad:	0f ba e1 1e          	bt     ecx,0x1e
c00256b1:	73 ea                	jae    c002569d <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c00256b3:	83 ec 0c             	sub    esp,0xc
c00256b6:	68 f3 d8 02 c0       	push   0xc002d8f3
c00256bb:	e8 f1 4b ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00256c0:	83 c4 10             	add    esp,0x10
c00256c3:	31 c0                	xor    eax,eax
c00256c5:	eb 3c                	jmp    c0025703 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256c7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00256cd:	0f ba e0 1e          	bt     eax,0x1e
c00256d1:	73 17                	jae    c00256ea <SATA::access(unsigned long long, int, void*, bool)+0x244>
c00256d3:	83 ec 0c             	sub    esp,0xc
c00256d6:	68 f3 d8 02 c0       	push   0xc002d8f3
c00256db:	e8 d1 4b ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00256e0:	83 c4 10             	add    esp,0x10
c00256e3:	b8 01 00 00 00       	mov    eax,0x1
c00256e8:	eb 19                	jmp    c0025703 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256ea:	31 c0                	xor    eax,eax
c00256ec:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00256f1:	75 10                	jne    c0025703 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256f3:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00256f9:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00256fd:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0025701:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025703:	83 c4 2c             	add    esp,0x2c
c0025706:	5b                   	pop    ebx
c0025707:	5e                   	pop    esi
c0025708:	5f                   	pop    edi
c0025709:	5d                   	pop    ebp
c002570a:	c3                   	ret    
c002570b:	90                   	nop

c002570c <SATA::read(unsigned long long, int, void*)>:
c002570c:	57                   	push   edi
c002570d:	b8 04 00 00 00       	mov    eax,0x4
c0025712:	56                   	push   esi
c0025713:	53                   	push   ebx
c0025714:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025718:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002571c:	8d 7a ff             	lea    edi,[edx-0x1]
c002571f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025723:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0025727:	81 ff fe 00 00 00    	cmp    edi,0xfe
c002572d:	77 25                	ja     c0025754 <SATA::read(unsigned long long, int, void*)+0x48>
c002572f:	b8 06 00 00 00       	mov    eax,0x6
c0025734:	85 f6                	test   esi,esi
c0025736:	74 1c                	je     c0025754 <SATA::read(unsigned long long, int, void*)+0x48>
c0025738:	50                   	push   eax
c0025739:	50                   	push   eax
c002573a:	6a 00                	push   0x0
c002573c:	56                   	push   esi
c002573d:	52                   	push   edx
c002573e:	53                   	push   ebx
c002573f:	51                   	push   ecx
c0025740:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0025744:	e8 5d fd ff ff       	call   c00254a6 <SATA::access(unsigned long long, int, void*, bool)>
c0025749:	83 c4 20             	add    esp,0x20
c002574c:	85 c0                	test   eax,eax
c002574e:	0f 95 c0             	setne  al
c0025751:	0f b6 c0             	movzx  eax,al
c0025754:	5b                   	pop    ebx
c0025755:	5e                   	pop    esi
c0025756:	5f                   	pop    edi
c0025757:	c3                   	ret    

c0025758 <SATA::write(unsigned long long, int, void*)>:
c0025758:	55                   	push   ebp
c0025759:	b8 04 00 00 00       	mov    eax,0x4
c002575e:	57                   	push   edi
c002575f:	56                   	push   esi
c0025760:	53                   	push   ebx
c0025761:	83 ec 0c             	sub    esp,0xc
c0025764:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025768:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002576c:	8d 73 ff             	lea    esi,[ebx-0x1]
c002576f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025773:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025777:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002577d:	77 3d                	ja     c00257bc <SATA::write(unsigned long long, int, void*)+0x64>
c002577f:	b8 06 00 00 00       	mov    eax,0x6
c0025784:	85 ed                	test   ebp,ebp
c0025786:	74 34                	je     c00257bc <SATA::write(unsigned long long, int, void*)+0x64>
c0025788:	c1 e3 09             	shl    ebx,0x9
c002578b:	01 eb                	add    ebx,ebp
c002578d:	89 d6                	mov    esi,edx
c002578f:	89 cf                	mov    edi,ecx
c0025791:	83 c6 01             	add    esi,0x1
c0025794:	83 d7 00             	adc    edi,0x0
c0025797:	50                   	push   eax
c0025798:	50                   	push   eax
c0025799:	6a 01                	push   0x1
c002579b:	55                   	push   ebp
c002579c:	81 c5 00 02 00 00    	add    ebp,0x200
c00257a2:	6a 01                	push   0x1
c00257a4:	51                   	push   ecx
c00257a5:	52                   	push   edx
c00257a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00257aa:	e8 f7 fc ff ff       	call   c00254a6 <SATA::access(unsigned long long, int, void*, bool)>
c00257af:	83 c4 20             	add    esp,0x20
c00257b2:	89 f2                	mov    edx,esi
c00257b4:	89 f9                	mov    ecx,edi
c00257b6:	39 dd                	cmp    ebp,ebx
c00257b8:	75 d3                	jne    c002578d <SATA::write(unsigned long long, int, void*)+0x35>
c00257ba:	31 c0                	xor    eax,eax
c00257bc:	83 c4 0c             	add    esp,0xc
c00257bf:	5b                   	pop    ebx
c00257c0:	5e                   	pop    esi
c00257c1:	5f                   	pop    edi
c00257c2:	5d                   	pop    ebp
c00257c3:	c3                   	ret    

c00257c4 <SATAPI::write(unsigned long long, int, void*)>:
c00257c4:	b8 03 00 00 00       	mov    eax,0x3
c00257c9:	c3                   	ret    

c00257ca <SATAPI::close(int, int, void*)>:
c00257ca:	83 ec 0c             	sub    esp,0xc
c00257cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257d1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257d7:	85 c0                	test   eax,eax
c00257d9:	74 0c                	je     c00257e7 <SATAPI::close(int, int, void*)+0x1d>
c00257db:	83 ec 0c             	sub    esp,0xc
c00257de:	8b 10                	mov    edx,DWORD PTR [eax]
c00257e0:	50                   	push   eax
c00257e1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00257e4:	83 c4 10             	add    esp,0x10
c00257e7:	31 c0                	xor    eax,eax
c00257e9:	83 c4 0c             	add    esp,0xc
c00257ec:	c3                   	ret    
c00257ed:	90                   	nop

c00257ee <SATAPI::SATAPI()>:
c00257ee:	83 ec 0c             	sub    esp,0xc
c00257f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f5:	83 ec 04             	sub    esp,0x4
c00257f8:	68 00 08 00 00       	push   0x800
c00257fd:	68 3c d9 02 c0       	push   0xc002d93c
c0025802:	50                   	push   eax
c0025803:	e8 f2 e8 fe ff       	call   c00140fa <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025808:	83 c4 10             	add    esp,0x10
c002580b:	ba e8 d9 02 c0       	mov    edx,0xc002d9e8
c0025810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025814:	89 10                	mov    DWORD PTR [eax],edx
c0025816:	90                   	nop
c0025817:	83 c4 0c             	add    esp,0xc
c002581a:	c3                   	ret    
c002581b:	90                   	nop

c002581c <SATAPI::diskRemoved()>:
c002581c:	83 ec 18             	sub    esp,0x18
c002581f:	68 48 d9 02 c0       	push   0xc002d948
c0025824:	e8 52 d0 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0025829:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002582d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025834:	83 c4 1c             	add    esp,0x1c
c0025837:	c3                   	ret    

c0025838 <SATAPI::diskInserted()>:
c0025838:	53                   	push   ebx
c0025839:	83 ec 14             	sub    esp,0x14
c002583c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025840:	68 5f d9 02 c0       	push   0xc002d95f
c0025845:	e8 31 d0 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c002584a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025851:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025854:	e8 09 e9 fe ff       	call   c0014162 <PhysicalDisk::startCache()>
c0025859:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002585d:	83 c4 18             	add    esp,0x18
c0025860:	5b                   	pop    ebx
c0025861:	e9 b6 0b ff ff       	jmp    c001641c <createPartitionsForDisk(PhysicalDisk*)>

c0025866 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025866:	55                   	push   ebp
c0025867:	57                   	push   edi
c0025868:	56                   	push   esi
c0025869:	53                   	push   ebx
c002586a:	83 ec 34             	sub    esp,0x34
c002586d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025871:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025875:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025879:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002587d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0025881:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0025887:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002588d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025891:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0025897:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002589b:	c1 e0 07             	shl    eax,0x7
c002589e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00258a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00258a6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00258b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258b4:	8d 58 02             	lea    ebx,[eax+0x2]
c00258b7:	c1 e3 07             	shl    ebx,0x7
c00258ba:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00258be:	53                   	push   ebx
c00258bf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00258c5:	e8 3e ec ff ff       	call   c0024508 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00258ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00258ce:	83 c4 10             	add    esp,0x10
c00258d1:	b8 01 00 00 00       	mov    eax,0x1
c00258d6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00258db:	0f 84 85 01 00 00    	je     c0025a66 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c00258e1:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00258e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00258e9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00258ef:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00258f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00258f9:	c1 e1 05             	shl    ecx,0x5
c00258fc:	01 c8                	add    eax,ecx
c00258fe:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025900:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025906:	81 c9 25 00 01 00    	or     ecx,0x10025
c002590c:	89 08                	mov    DWORD PTR [eax],ecx
c002590e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025914:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002591a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025920:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025923:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025926:	50                   	push   eax
c0025927:	68 90 00 00 00       	push   0x90
c002592c:	6a 00                	push   0x0
c002592e:	53                   	push   ebx
c002592f:	e8 1c ae fd ff       	call   c0000750 <memset>
c0025934:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025938:	b9 0c 00 00 00       	mov    ecx,0xc
c002593d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002593f:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025945:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025949:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002594f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025953:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025957:	48                   	dec    eax
c0025958:	25 ff ff 3f 00       	and    eax,0x3fffff
c002595d:	89 c1                	mov    ecx,eax
c002595f:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025965:	25 00 00 c0 ff       	and    eax,0xffc00000
c002596a:	09 c8                	or     eax,ecx
c002596c:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025972:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025975:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002597c:	66 25 00 7f          	and    ax,0x7f00
c0025980:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0025984:	66 0d 27 80          	or     ax,0x8027
c0025988:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c002598c:	66 89 03             	mov    WORD PTR [ebx],ax
c002598f:	89 d0                	mov    eax,edx
c0025991:	c1 ea 18             	shr    edx,0x18
c0025994:	c1 e8 10             	shr    eax,0x10
c0025997:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002599a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c002599d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00259a1:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00259a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00259a8:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00259ab:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00259af:	83 c4 10             	add    esp,0x10
c00259b2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00259b6:	31 c0                	xor    eax,eax
c00259b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00259bc:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c00259c2:	80 e2 88             	and    dl,0x88
c00259c5:	74 0a                	je     c00259d1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00259c7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259cc:	74 0a                	je     c00259d8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c00259ce:	40                   	inc    eax
c00259cf:	eb eb                	jmp    c00259bc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c00259d1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259d6:	75 0f                	jne    c00259e7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c00259d8:	83 ec 0c             	sub    esp,0xc
c00259db:	68 e5 d8 02 c0       	push   0xc002d8e5
c00259e0:	e8 cc 48 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00259e5:	eb 3f                	jmp    c0025a26 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c00259e7:	ba 01 00 00 00       	mov    edx,0x1
c00259ec:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00259f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00259f4:	d3 e2                	shl    edx,cl
c00259f6:	c1 e0 07             	shl    eax,0x7
c00259f9:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c00259ff:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a03:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025a09:	85 ca                	test   edx,ecx
c0025a0b:	74 23                	je     c0025a30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025a0d:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025a13:	0f ba e1 1e          	bt     ecx,0x1e
c0025a17:	73 ea                	jae    c0025a03 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025a19:	83 ec 0c             	sub    esp,0xc
c0025a1c:	68 77 d9 02 c0       	push   0xc002d977
c0025a21:	e8 55 ce fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0025a26:	83 c4 10             	add    esp,0x10
c0025a29:	b8 01 00 00 00       	mov    eax,0x1
c0025a2e:	eb 36                	jmp    c0025a66 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025a30:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025a36:	0f ba e0 1e          	bt     eax,0x1e
c0025a3a:	73 0a                	jae    c0025a46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025a3c:	83 ec 0c             	sub    esp,0xc
c0025a3f:	68 8a d9 02 c0       	push   0xc002d98a
c0025a44:	eb db                	jmp    c0025a21 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025a46:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025a4b:	74 17                	je     c0025a64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025a4d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025a52:	74 10                	je     c0025a64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025a54:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025a5a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025a5e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025a62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025a64:	31 c0                	xor    eax,eax
c0025a66:	83 c4 2c             	add    esp,0x2c
c0025a69:	5b                   	pop    ebx
c0025a6a:	5e                   	pop    esi
c0025a6b:	5f                   	pop    edi
c0025a6c:	5d                   	pop    ebp
c0025a6d:	c3                   	ret    

c0025a6e <SATAPI::eject()>:
c0025a6e:	57                   	push   edi
c0025a6f:	b9 03 00 00 00       	mov    ecx,0x3
c0025a74:	53                   	push   ebx
c0025a75:	83 ec 14             	sub    esp,0x14
c0025a78:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025a7c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025a80:	fc                   	cld    
c0025a81:	31 c0                	xor    eax,eax
c0025a83:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025a85:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025a8a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025a8f:	50                   	push   eax
c0025a90:	6a 00                	push   0x0
c0025a92:	6a 00                	push   0x0
c0025a94:	6a 00                	push   0x0
c0025a96:	6a 00                	push   0x0
c0025a98:	6a 02                	push   0x2
c0025a9a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025a9e:	50                   	push   eax
c0025a9f:	53                   	push   ebx
c0025aa0:	e8 c1 fd ff ff       	call   c0025866 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025aa5:	83 c4 14             	add    esp,0x14
c0025aa8:	53                   	push   ebx
c0025aa9:	e8 6e fd ff ff       	call   c002581c <SATAPI::diskRemoved()>
c0025aae:	83 c4 24             	add    esp,0x24
c0025ab1:	31 c0                	xor    eax,eax
c0025ab3:	5b                   	pop    ebx
c0025ab4:	5f                   	pop    edi
c0025ab5:	c3                   	ret    

c0025ab6 <SATAPI::detectMedia()>:
c0025ab6:	56                   	push   esi
c0025ab7:	53                   	push   ebx
c0025ab8:	83 ec 28             	sub    esp,0x28
c0025abb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025abf:	6a 0c                	push   0xc
c0025ac1:	6a 00                	push   0x0
c0025ac3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025ac7:	56                   	push   esi
c0025ac8:	e8 83 ac fd ff       	call   c0000750 <memset>
c0025acd:	83 c4 0c             	add    esp,0xc
c0025ad0:	6a 00                	push   0x0
c0025ad2:	6a 00                	push   0x0
c0025ad4:	6a 00                	push   0x0
c0025ad6:	6a 00                	push   0x0
c0025ad8:	6a 00                	push   0x0
c0025ada:	56                   	push   esi
c0025adb:	53                   	push   ebx
c0025adc:	e8 85 fd ff ff       	call   c0025866 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ae1:	83 c4 1c             	add    esp,0x1c
c0025ae4:	6a 0c                	push   0xc
c0025ae6:	6a 00                	push   0x0
c0025ae8:	56                   	push   esi
c0025ae9:	e8 62 ac fd ff       	call   c0000750 <memset>
c0025aee:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025af3:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025af8:	83 c4 0c             	add    esp,0xc
c0025afb:	6a 01                	push   0x1
c0025afd:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b01:	50                   	push   eax
c0025b02:	6a 00                	push   0x0
c0025b04:	6a 00                	push   0x0
c0025b06:	6a 12                	push   0x12
c0025b08:	56                   	push   esi
c0025b09:	53                   	push   ebx
c0025b0a:	e8 57 fd ff ff       	call   c0025866 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b0f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b13:	83 c4 20             	add    esp,0x20
c0025b16:	83 e0 7f             	and    eax,0x7f
c0025b19:	3c 70                	cmp    al,0x70
c0025b1b:	74 15                	je     c0025b32 <SATAPI::detectMedia()+0x7c>
c0025b1d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b24:	75 0c                	jne    c0025b32 <SATAPI::detectMedia()+0x7c>
c0025b26:	83 ec 0c             	sub    esp,0xc
c0025b29:	53                   	push   ebx
c0025b2a:	e8 09 fd ff ff       	call   c0025838 <SATAPI::diskInserted()>
c0025b2f:	83 c4 10             	add    esp,0x10
c0025b32:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025b36:	83 e0 0f             	and    eax,0xf
c0025b39:	3c 02                	cmp    al,0x2
c0025b3b:	75 1b                	jne    c0025b58 <SATAPI::detectMedia()+0xa2>
c0025b3d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025b42:	75 2d                	jne    c0025b71 <SATAPI::detectMedia()+0xbb>
c0025b44:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b4b:	74 24                	je     c0025b71 <SATAPI::detectMedia()+0xbb>
c0025b4d:	83 ec 0c             	sub    esp,0xc
c0025b50:	53                   	push   ebx
c0025b51:	e8 c6 fc ff ff       	call   c002581c <SATAPI::diskRemoved()>
c0025b56:	eb 16                	jmp    c0025b6e <SATAPI::detectMedia()+0xb8>
c0025b58:	84 c0                	test   al,al
c0025b5a:	75 15                	jne    c0025b71 <SATAPI::detectMedia()+0xbb>
c0025b5c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b63:	75 0c                	jne    c0025b71 <SATAPI::detectMedia()+0xbb>
c0025b65:	83 ec 0c             	sub    esp,0xc
c0025b68:	53                   	push   ebx
c0025b69:	e8 ca fc ff ff       	call   c0025838 <SATAPI::diskInserted()>
c0025b6e:	83 c4 10             	add    esp,0x10
c0025b71:	83 c4 24             	add    esp,0x24
c0025b74:	5b                   	pop    ebx
c0025b75:	5e                   	pop    esi
c0025b76:	c3                   	ret    
c0025b77:	90                   	nop

c0025b78 <SATAPI::open(int, int, void*)>:
c0025b78:	56                   	push   esi
c0025b79:	53                   	push   ebx
c0025b7a:	50                   	push   eax
c0025b7b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025b83:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025b8d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025b93:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025b9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ba1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025bab:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025bb1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025bb8:	e8 80 9f fe ff       	call   c000fb3d <Phys::allocatePage()>
c0025bbd:	89 c6                	mov    esi,eax
c0025bbf:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025bc5:	81 c6 00 10 00 00    	add    esi,0x1000
c0025bcb:	e8 6d 9f fe ff       	call   c000fb3d <Phys::allocatePage()>
c0025bd0:	39 c6                	cmp    esi,eax
c0025bd2:	74 10                	je     c0025be4 <SATAPI::open(int, int, void*)+0x6c>
c0025bd4:	83 ec 0c             	sub    esp,0xc
c0025bd7:	68 9f d9 02 c0       	push   0xc002d99f
c0025bdc:	e8 d0 46 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0025be1:	83 c4 10             	add    esp,0x10
c0025be4:	83 ec 0c             	sub    esp,0xc
c0025be7:	6a 02                	push   0x2
c0025be9:	e8 87 b8 fe ff       	call   c0011475 <Virt::allocateKernelVirtualPages(int)>
c0025bee:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025bf4:	6a 03                	push   0x3
c0025bf6:	50                   	push   eax
c0025bf7:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025bfd:	ff 35 b0 ef 02 c0    	push   DWORD PTR ds:0xc002efb0
c0025c03:	e8 a4 c0 fe ff       	call   c0011cac <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c08:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c0f:	83 c4 14             	add    esp,0x14
c0025c12:	53                   	push   ebx
c0025c13:	e8 9e fe ff ff       	call   c0025ab6 <SATAPI::detectMedia()>
c0025c18:	83 c4 14             	add    esp,0x14
c0025c1b:	31 c0                	xor    eax,eax
c0025c1d:	5b                   	pop    ebx
c0025c1e:	5e                   	pop    esi
c0025c1f:	c3                   	ret    

c0025c20 <SATAPI::read(unsigned long long, int, void*)>:
c0025c20:	55                   	push   ebp
c0025c21:	57                   	push   edi
c0025c22:	56                   	push   esi
c0025c23:	53                   	push   ebx
c0025c24:	83 ec 1c             	sub    esp,0x1c
c0025c27:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c2b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c2f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025c33:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c3a:	74 19                	je     c0025c55 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025c3c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025c41:	7e 2e                	jle    c0025c71 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c43:	83 ec 0c             	sub    esp,0xc
c0025c46:	68 b5 d9 02 c0       	push   0xc002d9b5
c0025c4b:	e8 61 46 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0025c50:	83 c4 10             	add    esp,0x10
c0025c53:	eb 1c                	jmp    c0025c71 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c55:	83 ec 0c             	sub    esp,0xc
c0025c58:	55                   	push   ebp
c0025c59:	e8 58 fe ff ff       	call   c0025ab6 <SATAPI::detectMedia()>
c0025c5e:	83 c4 10             	add    esp,0x10
c0025c61:	b8 02 00 00 00       	mov    eax,0x2
c0025c66:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c6d:	75 cd                	jne    c0025c3c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025c6f:	eb 49                	jmp    c0025cba <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025c71:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025c75:	b9 03 00 00 00       	mov    ecx,0x3
c0025c7a:	fc                   	cld    
c0025c7b:	31 c0                	xor    eax,eax
c0025c7d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025c7f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025c84:	89 d8                	mov    eax,ebx
c0025c86:	86 e0                	xchg   al,ah
c0025c88:	c1 c0 10             	rol    eax,0x10
c0025c8b:	86 e0                	xchg   al,ah
c0025c8d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025c91:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025c95:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025c99:	50                   	push   eax
c0025c9a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025c9e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025ca2:	56                   	push   esi
c0025ca3:	53                   	push   ebx
c0025ca4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025ca8:	c1 e0 0b             	shl    eax,0xb
c0025cab:	50                   	push   eax
c0025cac:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025cb0:	50                   	push   eax
c0025cb1:	55                   	push   ebp
c0025cb2:	e8 af fb ff ff       	call   c0025866 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025cb7:	83 c4 20             	add    esp,0x20
c0025cba:	83 c4 1c             	add    esp,0x1c
c0025cbd:	5b                   	pop    ebx
c0025cbe:	5e                   	pop    esi
c0025cbf:	5f                   	pop    edi
c0025cc0:	5d                   	pop    ebp
c0025cc1:	c3                   	ret    

c0025cc2 <AVX::open(int, int, void*)>:
c0025cc2:	83 ec 0c             	sub    esp,0xc
c0025cc5:	e8 3e 11 00 00       	call   c0026e08 <avxInit>
c0025cca:	b8 00 00 00 00       	mov    eax,0x0
c0025ccf:	83 c4 0c             	add    esp,0xc
c0025cd2:	c3                   	ret    
c0025cd3:	90                   	nop

c0025cd4 <AVX::close(int, int, void*)>:
c0025cd4:	83 ec 0c             	sub    esp,0xc
c0025cd7:	e8 2d 11 00 00       	call   c0026e09 <avxClose>
c0025cdc:	b8 00 00 00 00       	mov    eax,0x0
c0025ce1:	83 c4 0c             	add    esp,0xc
c0025ce4:	c3                   	ret    
c0025ce5:	90                   	nop

c0025ce6 <AVX::available()>:
c0025ce6:	83 ec 0c             	sub    esp,0xc
c0025ce9:	e8 12 11 00 00       	call   c0026e00 <avxDetect>
c0025cee:	85 c0                	test   eax,eax
c0025cf0:	0f 95 c0             	setne  al
c0025cf3:	83 c4 0c             	add    esp,0xc
c0025cf6:	c3                   	ret    
c0025cf7:	90                   	nop

c0025cf8 <AVX::save(void*)>:
c0025cf8:	83 ec 0c             	sub    esp,0xc
c0025cfb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025cff:	83 ec 0c             	sub    esp,0xc
c0025d02:	50                   	push   eax
c0025d03:	e8 fe 10 00 00       	call   c0026e06 <avxSave>
c0025d08:	83 c4 10             	add    esp,0x10
c0025d0b:	90                   	nop
c0025d0c:	83 c4 0c             	add    esp,0xc
c0025d0f:	c3                   	ret    

c0025d10 <AVX::load(void*)>:
c0025d10:	83 ec 0c             	sub    esp,0xc
c0025d13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d17:	83 ec 0c             	sub    esp,0xc
c0025d1a:	50                   	push   eax
c0025d1b:	e8 e7 10 00 00       	call   c0026e07 <avxLoad>
c0025d20:	83 c4 10             	add    esp,0x10
c0025d23:	90                   	nop
c0025d24:	83 c4 0c             	add    esp,0xc
c0025d27:	c3                   	ret    

c0025d28 <AVX::AVX()>:
c0025d28:	83 ec 0c             	sub    esp,0xc
c0025d2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d2f:	83 ec 08             	sub    esp,0x8
c0025d32:	68 18 da 02 c0       	push   0xc002da18
c0025d37:	50                   	push   eax
c0025d38:	e8 9b e4 fe ff       	call   c00141d8 <FPU::FPU(char const*)>
c0025d3d:	83 c4 10             	add    esp,0x10
c0025d40:	ba 28 da 02 c0       	mov    edx,0xc002da28
c0025d45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d49:	89 10                	mov    DWORD PTR [eax],edx
c0025d4b:	90                   	nop
c0025d4c:	83 c4 0c             	add    esp,0xc
c0025d4f:	c3                   	ret    

c0025d50 <MMX::available()>:
c0025d50:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0025d55:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025d5b:	83 e0 20             	and    eax,0x20
c0025d5e:	84 c0                	test   al,al
c0025d60:	0f 95 c0             	setne  al
c0025d63:	c3                   	ret    

c0025d64 <MMX::open(int, int, void*)>:
c0025d64:	83 ec 0c             	sub    esp,0xc
c0025d67:	e8 26 11 00 00       	call   c0026e92 <x87Init>
c0025d6c:	b8 00 00 00 00       	mov    eax,0x0
c0025d71:	83 c4 0c             	add    esp,0xc
c0025d74:	c3                   	ret    
c0025d75:	90                   	nop

c0025d76 <MMX::close(int, int, void*)>:
c0025d76:	83 ec 0c             	sub    esp,0xc
c0025d79:	e8 2e 11 00 00       	call   c0026eac <x87Close>
c0025d7e:	b8 00 00 00 00       	mov    eax,0x0
c0025d83:	83 c4 0c             	add    esp,0xc
c0025d86:	c3                   	ret    
c0025d87:	90                   	nop

c0025d88 <MMX::save(void*)>:
c0025d88:	83 ec 0c             	sub    esp,0xc
c0025d8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d8f:	83 ec 0c             	sub    esp,0xc
c0025d92:	50                   	push   eax
c0025d93:	e8 e9 10 00 00       	call   c0026e81 <x87Save>
c0025d98:	83 c4 10             	add    esp,0x10
c0025d9b:	90                   	nop
c0025d9c:	83 c4 0c             	add    esp,0xc
c0025d9f:	c3                   	ret    

c0025da0 <MMX::load(void*)>:
c0025da0:	83 ec 0c             	sub    esp,0xc
c0025da3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025da7:	83 ec 0c             	sub    esp,0xc
c0025daa:	50                   	push   eax
c0025dab:	e8 da 10 00 00       	call   c0026e8a <x87Load>
c0025db0:	83 c4 10             	add    esp,0x10
c0025db3:	90                   	nop
c0025db4:	83 c4 0c             	add    esp,0xc
c0025db7:	c3                   	ret    

c0025db8 <MMX::MMX()>:
c0025db8:	83 ec 0c             	sub    esp,0xc
c0025dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dbf:	83 ec 08             	sub    esp,0x8
c0025dc2:	68 58 da 02 c0       	push   0xc002da58
c0025dc7:	50                   	push   eax
c0025dc8:	e8 0b e4 fe ff       	call   c00141d8 <FPU::FPU(char const*)>
c0025dcd:	83 c4 10             	add    esp,0x10
c0025dd0:	ba 68 da 02 c0       	mov    edx,0xc002da68
c0025dd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025dd9:	89 10                	mov    DWORD PTR [eax],edx
c0025ddb:	90                   	nop
c0025ddc:	83 c4 0c             	add    esp,0xc
c0025ddf:	c3                   	ret    

c0025de0 <SSE::open(int, int, void*)>:
c0025de0:	83 ec 0c             	sub    esp,0xc
c0025de3:	e8 5c 10 00 00       	call   c0026e44 <sseInit>
c0025de8:	b8 00 00 00 00       	mov    eax,0x0
c0025ded:	83 c4 0c             	add    esp,0xc
c0025df0:	c3                   	ret    
c0025df1:	90                   	nop

c0025df2 <SSE::close(int, int, void*)>:
c0025df2:	83 ec 0c             	sub    esp,0xc
c0025df5:	e8 5a 10 00 00       	call   c0026e54 <sseClose>
c0025dfa:	b8 00 00 00 00       	mov    eax,0x0
c0025dff:	83 c4 0c             	add    esp,0xc
c0025e02:	c3                   	ret    
c0025e03:	90                   	nop

c0025e04 <SSE::available()>:
c0025e04:	83 ec 1c             	sub    esp,0x1c
c0025e07:	e8 14 10 00 00       	call   c0026e20 <absolutelyNoChanceInHell>
c0025e0c:	85 c0                	test   eax,eax
c0025e0e:	0f 95 c0             	setne  al
c0025e11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e15:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e19:	83 c4 1c             	add    esp,0x1c
c0025e1c:	c3                   	ret    
c0025e1d:	90                   	nop

c0025e1e <SSE::save(void*)>:
c0025e1e:	83 ec 0c             	sub    esp,0xc
c0025e21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e25:	83 ec 0c             	sub    esp,0xc
c0025e28:	50                   	push   eax
c0025e29:	e8 0a 10 00 00       	call   c0026e38 <sseSave>
c0025e2e:	83 c4 10             	add    esp,0x10
c0025e31:	90                   	nop
c0025e32:	83 c4 0c             	add    esp,0xc
c0025e35:	c3                   	ret    

c0025e36 <SSE::load(void*)>:
c0025e36:	83 ec 0c             	sub    esp,0xc
c0025e39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e3d:	83 ec 0c             	sub    esp,0xc
c0025e40:	50                   	push   eax
c0025e41:	e8 f8 0f 00 00       	call   c0026e3e <sseLoad>
c0025e46:	83 c4 10             	add    esp,0x10
c0025e49:	90                   	nop
c0025e4a:	83 c4 0c             	add    esp,0xc
c0025e4d:	c3                   	ret    

c0025e4e <SSE::SSE()>:
c0025e4e:	83 ec 0c             	sub    esp,0xc
c0025e51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e55:	83 ec 08             	sub    esp,0x8
c0025e58:	68 98 da 02 c0       	push   0xc002da98
c0025e5d:	50                   	push   eax
c0025e5e:	e8 75 e3 fe ff       	call   c00141d8 <FPU::FPU(char const*)>
c0025e63:	83 c4 10             	add    esp,0x10
c0025e66:	ba a8 da 02 c0       	mov    edx,0xc002daa8
c0025e6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e6f:	89 10                	mov    DWORD PTR [eax],edx
c0025e71:	90                   	nop
c0025e72:	83 c4 0c             	add    esp,0xc
c0025e75:	c3                   	ret    

c0025e76 <x87::open(int, int, void*)>:
c0025e76:	83 ec 0c             	sub    esp,0xc
c0025e79:	e8 14 10 00 00       	call   c0026e92 <x87Init>
c0025e7e:	b8 00 00 00 00       	mov    eax,0x0
c0025e83:	83 c4 0c             	add    esp,0xc
c0025e86:	c3                   	ret    
c0025e87:	90                   	nop

c0025e88 <x87::close(int, int, void*)>:
c0025e88:	83 ec 0c             	sub    esp,0xc
c0025e8b:	e8 1c 10 00 00       	call   c0026eac <x87Close>
c0025e90:	b8 00 00 00 00       	mov    eax,0x0
c0025e95:	83 c4 0c             	add    esp,0xc
c0025e98:	c3                   	ret    
c0025e99:	90                   	nop

c0025e9a <x87::available()>:
c0025e9a:	83 ec 0c             	sub    esp,0xc
c0025e9d:	e8 c4 0f 00 00       	call   c0026e66 <x87Detect>
c0025ea2:	85 c0                	test   eax,eax
c0025ea4:	0f 95 c0             	setne  al
c0025ea7:	83 c4 0c             	add    esp,0xc
c0025eaa:	c3                   	ret    
c0025eab:	90                   	nop

c0025eac <x87::save(void*)>:
c0025eac:	83 ec 0c             	sub    esp,0xc
c0025eaf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025eb3:	83 ec 0c             	sub    esp,0xc
c0025eb6:	50                   	push   eax
c0025eb7:	e8 c5 0f 00 00       	call   c0026e81 <x87Save>
c0025ebc:	83 c4 10             	add    esp,0x10
c0025ebf:	90                   	nop
c0025ec0:	83 c4 0c             	add    esp,0xc
c0025ec3:	c3                   	ret    

c0025ec4 <x87::load(void*)>:
c0025ec4:	83 ec 0c             	sub    esp,0xc
c0025ec7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ecb:	83 ec 0c             	sub    esp,0xc
c0025ece:	50                   	push   eax
c0025ecf:	e8 b6 0f 00 00       	call   c0026e8a <x87Load>
c0025ed4:	83 c4 10             	add    esp,0x10
c0025ed7:	90                   	nop
c0025ed8:	83 c4 0c             	add    esp,0xc
c0025edb:	c3                   	ret    

c0025edc <x87::x87()>:
c0025edc:	83 ec 0c             	sub    esp,0xc
c0025edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee3:	83 ec 08             	sub    esp,0x8
c0025ee6:	68 d8 da 02 c0       	push   0xc002dad8
c0025eeb:	50                   	push   eax
c0025eec:	e8 e7 e2 fe ff       	call   c00141d8 <FPU::FPU(char const*)>
c0025ef1:	83 c4 10             	add    esp,0x10
c0025ef4:	ba e8 da 02 c0       	mov    edx,0xc002dae8
c0025ef9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025efd:	89 10                	mov    DWORD PTR [eax],edx
c0025eff:	90                   	nop
c0025f00:	83 c4 0c             	add    esp,0xc
c0025f03:	c3                   	ret    

c0025f04 <APIC::disable()>:
c0025f04:	90                   	nop
c0025f05:	c3                   	ret    

c0025f06 <APIC::close(int, int, void*)>:
c0025f06:	55                   	push   ebp
c0025f07:	89 e5                	mov    ebp,esp
c0025f09:	83 ec 08             	sub    esp,0x8
c0025f0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f11:	83 c0 3c             	add    eax,0x3c
c0025f14:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f16:	83 ec 0c             	sub    esp,0xc
c0025f19:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f1c:	ff d0                	call   eax
c0025f1e:	83 c4 10             	add    esp,0x10
c0025f21:	b8 00 00 00 00       	mov    eax,0x0
c0025f26:	c9                   	leave  
c0025f27:	c3                   	ret    

c0025f28 <IOAPIC::close(int, int, void*)>:
c0025f28:	b8 00 00 00 00       	mov    eax,0x0
c0025f2d:	c3                   	ret    

c0025f2e <APIC::io_wait()>:
c0025f2e:	eb 00                	jmp    c0025f30 <APIC::io_wait()+0x2>
c0025f30:	eb 00                	jmp    c0025f32 <APIC::io_wait()+0x4>
c0025f32:	90                   	nop
c0025f33:	c3                   	ret    

c0025f34 <APIC::getBase()>:
c0025f34:	55                   	push   ebp
c0025f35:	89 e5                	mov    ebp,esp
c0025f37:	83 ec 18             	sub    esp,0x18
c0025f3a:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0025f3f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f45:	83 e0 08             	and    eax,0x8
c0025f48:	84 c0                	test   al,al
c0025f4a:	75 07                	jne    c0025f53 <APIC::getBase()+0x1f>
c0025f4c:	b8 00 00 00 00       	mov    eax,0x0
c0025f51:	eb 21                	jmp    c0025f74 <APIC::getBase()+0x40>
c0025f53:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0025f58:	83 ec 08             	sub    esp,0x8
c0025f5b:	6a 1b                	push   0x1b
c0025f5d:	50                   	push   eax
c0025f5e:	e8 cf 8e fe ff       	call   c000ee32 <Computer::rdmsr(unsigned int)>
c0025f63:	83 c4 10             	add    esp,0x10
c0025f66:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f69:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f6f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025f74:	c9                   	leave  
c0025f75:	c3                   	ret    

c0025f76 <APIC::eoi(unsigned char)>:
c0025f76:	55                   	push   ebp
c0025f77:	89 e5                	mov    ebp,esp
c0025f79:	83 ec 28             	sub    esp,0x28
c0025f7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f7f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025f82:	83 ec 0c             	sub    esp,0xc
c0025f85:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f88:	e8 a7 ff ff ff       	call   c0025f34 <APIC::getBase()>
c0025f8d:	83 c4 10             	add    esp,0x10
c0025f90:	05 b0 00 00 00       	add    eax,0xb0
c0025f95:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025f98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025f9b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025fa1:	90                   	nop
c0025fa2:	c9                   	leave  
c0025fa3:	c3                   	ret    

c0025fa4 <APIC::open(int, int, void*)>:
c0025fa4:	55                   	push   ebp
c0025fa5:	89 e5                	mov    ebp,esp
c0025fa7:	57                   	push   edi
c0025fa8:	56                   	push   esi
c0025fa9:	53                   	push   ebx
c0025faa:	83 ec 2c             	sub    esp,0x2c
c0025fad:	83 ec 0c             	sub    esp,0xc
c0025fb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fb3:	e8 7c ff ff ff       	call   c0025f34 <APIC::getBase()>
c0025fb8:	83 c4 10             	add    esp,0x10
c0025fbb:	89 c2                	mov    edx,eax
c0025fbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fc0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025fc6:	0f b6 f8             	movzx  edi,al
c0025fc9:	89 d0                	mov    eax,edx
c0025fcb:	ba 00 00 00 00       	mov    edx,0x0
c0025fd0:	89 c1                	mov    ecx,eax
c0025fd2:	80 e5 ff             	and    ch,0xff
c0025fd5:	89 cb                	mov    ebx,ecx
c0025fd7:	0f b6 f2             	movzx  esi,dl
c0025fda:	89 d8                	mov    eax,ebx
c0025fdc:	89 f2                	mov    edx,esi
c0025fde:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025fe1:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025fe4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025fe8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025fec:	83 e0 00             	and    eax,0x0
c0025fef:	09 d0                	or     eax,edx
c0025ff1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ff8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025ffe:	8d 50 01             	lea    edx,[eax+0x1]
c0026001:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026004:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002600a:	0f b6 d0             	movzx  edx,al
c002600d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026010:	83 c2 08             	add    edx,0x8
c0026013:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026017:	0f b6 c9             	movzx  ecx,cl
c002601a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026020:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026024:	83 ec 0c             	sub    esp,0xc
c0026027:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002602a:	e8 05 ff ff ff       	call   c0025f34 <APIC::getBase()>
c002602f:	83 c4 10             	add    esp,0x10
c0026032:	05 f0 00 00 00       	add    eax,0xf0
c0026037:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002603a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002603d:	8b 00                	mov    eax,DWORD PTR [eax]
c002603f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026042:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026049:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026050:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026053:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026056:	89 10                	mov    DWORD PTR [eax],edx
c0026058:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002605f:	a1 10 17 03 c0       	mov    eax,ds:0xc0031710
c0026064:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026067:	7d 7c                	jge    c00260e5 <APIC::open(int, int, void*)+0x141>
c0026069:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002606c:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c0026073:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026076:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026079:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c0026080:	c1 e8 08             	shr    eax,0x8
c0026083:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0026087:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002608a:	8b 04 85 20 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8e0]
c0026091:	c1 e8 18             	shr    eax,0x18
c0026094:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0026097:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002609b:	75 40                	jne    c00260dd <APIC::open(int, int, void*)+0x139>
c002609d:	83 ec 0c             	sub    esp,0xc
c00260a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260a3:	e8 8c fe ff ff       	call   c0025f34 <APIC::getBase()>
c00260a8:	83 c4 10             	add    esp,0x10
c00260ab:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00260af:	75 07                	jne    c00260b8 <APIC::open(int, int, void*)+0x114>
c00260b1:	ba 60 03 00 00       	mov    edx,0x360
c00260b6:	eb 05                	jmp    c00260bd <APIC::open(int, int, void*)+0x119>
c00260b8:	ba 50 03 00 00       	mov    edx,0x350
c00260bd:	01 d0                	add    eax,edx
c00260bf:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00260c2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00260c7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00260ca:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00260d1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00260d5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260d8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260db:	89 10                	mov    DWORD PTR [eax],edx
c00260dd:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00260e0:	e9 7a ff ff ff       	jmp    c002605f <APIC::open(int, int, void*)+0xbb>
c00260e5:	b8 00 00 00 00       	mov    eax,0x0
c00260ea:	8d 65 f4             	lea    esp,[ebp-0xc]
c00260ed:	5b                   	pop    ebx
c00260ee:	5e                   	pop    esi
c00260ef:	5f                   	pop    edi
c00260f0:	5d                   	pop    ebp
c00260f1:	c3                   	ret    

c00260f2 <IOAPIC::IOAPIC()>:
c00260f2:	83 ec 0c             	sub    esp,0xc
c00260f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00260f9:	83 ec 08             	sub    esp,0x8
c00260fc:	68 18 db 02 c0       	push   0xc002db18
c0026101:	50                   	push   eax
c0026102:	e8 b1 dd fe ff       	call   c0013eb8 <Device::Device(char const*)>
c0026107:	83 c4 10             	add    esp,0x10
c002610a:	ba 40 dc 02 c0       	mov    edx,0xc002dc40
c002610f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026113:	89 10                	mov    DWORD PTR [eax],edx
c0026115:	90                   	nop
c0026116:	83 c4 0c             	add    esp,0xc
c0026119:	c3                   	ret    

c002611a <APIC::APIC()>:
c002611a:	53                   	push   ebx
c002611b:	83 ec 18             	sub    esp,0x18
c002611e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026122:	83 ec 08             	sub    esp,0x8
c0026125:	68 20 db 02 c0       	push   0xc002db20
c002612a:	50                   	push   eax
c002612b:	e8 02 e5 fe ff       	call   c0014632 <InterruptController::InterruptController(char const*)>
c0026130:	83 c4 10             	add    esp,0x10
c0026133:	ba f8 db 02 c0       	mov    edx,0xc002dbf8
c0026138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002613c:	89 10                	mov    DWORD PTR [eax],edx
c002613e:	a0 e0 31 03 c0       	mov    al,ds:0xc00331e0
c0026143:	83 f0 01             	xor    eax,0x1
c0026146:	84 c0                	test   al,al
c0026148:	0f 84 a1 00 00 00    	je     c00261ef <APIC::APIC()+0xd5>
c002614e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026153:	a0 c0 17 03 c0       	mov    al,ds:0xc00317c0
c0026158:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002615c:	0f 83 86 00 00 00    	jae    c00261e8 <APIC::APIC()+0xce>
c0026162:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002616a:	83 ec 0c             	sub    esp,0xc
c002616d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026171:	e8 16 97 fe ff       	call   c000f88c <malloc>
c0026176:	83 c4 10             	add    esp,0x10
c0026179:	89 c3                	mov    ebx,eax
c002617b:	83 ec 0c             	sub    esp,0xc
c002617e:	53                   	push   ebx
c002617f:	e8 6e ff ff ff       	call   c00260f2 <IOAPIC::IOAPIC()>
c0026184:	83 c4 10             	add    esp,0x10
c0026187:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c002618b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0026190:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0026194:	89 14 85 c0 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce40],edx
c002619b:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c00261a0:	40                   	inc    eax
c00261a1:	a3 a0 31 03 c0       	mov    ds:0xc00331a0,eax
c00261a6:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00261ab:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00261b1:	83 ec 08             	sub    esp,0x8
c00261b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261b8:	50                   	push   eax
c00261b9:	e8 f6 da fe ff       	call   c0013cb4 <Device::addChild(Device*)>
c00261be:	83 c4 10             	add    esp,0x10
c00261c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00261c7:	83 c0 08             	add    eax,0x8
c00261ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00261cc:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00261d1:	6a 00                	push   0x0
c00261d3:	6a 00                	push   0x0
c00261d5:	52                   	push   edx
c00261d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00261da:	ff d0                	call   eax
c00261dc:	83 c4 10             	add    esp,0x10
c00261df:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00261e3:	e9 6b ff ff ff       	jmp    c0026153 <APIC::APIC()+0x39>
c00261e8:	c6 05 e0 31 03 c0 01 	mov    BYTE PTR ds:0xc00331e0,0x1
c00261ef:	90                   	nop
c00261f0:	83 c4 18             	add    esp,0x18
c00261f3:	5b                   	pop    ebx
c00261f4:	c3                   	ret    
c00261f5:	90                   	nop

c00261f6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00261f6:	55                   	push   ebp
c00261f7:	89 e5                	mov    ebp,esp
c00261f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00261fc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026202:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026205:	72 1d                	jb     c0026224 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002620a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026213:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026219:	01 d0                	add    eax,edx
c002621b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002621e:	73 04                	jae    c0026224 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026220:	b0 01                	mov    al,0x1
c0026222:	eb 02                	jmp    c0026226 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026224:	b0 00                	mov    al,0x0
c0026226:	5d                   	pop    ebp
c0026227:	c3                   	ret    

c0026228 <IOAPIC::read(int)>:
c0026228:	55                   	push   ebp
c0026229:	89 e5                	mov    ebp,esp
c002622b:	83 ec 10             	sub    esp,0x10
c002622e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026231:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026237:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002623a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002623d:	0f b6 d0             	movzx  edx,al
c0026240:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026243:	89 10                	mov    DWORD PTR [eax],edx
c0026245:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026248:	83 c0 10             	add    eax,0x10
c002624b:	8b 00                	mov    eax,DWORD PTR [eax]
c002624d:	c9                   	leave  
c002624e:	c3                   	ret    
c002624f:	90                   	nop

c0026250 <IOAPIC::open(int, int, void*)>:
c0026250:	55                   	push   ebp
c0026251:	89 e5                	mov    ebp,esp
c0026253:	57                   	push   edi
c0026254:	56                   	push   esi
c0026255:	53                   	push   ebx
c0026256:	83 ec 0c             	sub    esp,0xc
c0026259:	83 ec 0c             	sub    esp,0xc
c002625c:	68 4b db 02 c0       	push   0xc002db4b
c0026261:	e8 15 c6 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0026266:	83 c4 10             	add    esp,0x10
c0026269:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002626c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002626f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026278:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002627e:	8b 14 85 00 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce800]
c0026285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026288:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002628e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026291:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0026297:	8b 14 85 80 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce780]
c002629e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262a1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00262a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262aa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00262b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262b3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262b9:	0f b6 f8             	movzx  edi,al
c00262bc:	89 d0                	mov    eax,edx
c00262be:	ba 00 00 00 00       	mov    edx,0x0
c00262c3:	89 c1                	mov    ecx,eax
c00262c5:	80 e5 ff             	and    ch,0xff
c00262c8:	89 cb                	mov    ebx,ecx
c00262ca:	0f b6 f2             	movzx  esi,dl
c00262cd:	89 d8                	mov    eax,ebx
c00262cf:	89 f2                	mov    edx,esi
c00262d1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262d4:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262d7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262db:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262df:	83 e0 00             	and    eax,0x0
c00262e2:	09 d0                	or     eax,edx
c00262e4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00262e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262eb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262f1:	8d 50 01             	lea    edx,[eax+0x1]
c00262f4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262f7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00262fd:	0f b6 d0             	movzx  edx,al
c0026300:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026303:	83 c2 08             	add    edx,0x8
c0026306:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002630a:	0f b6 c9             	movzx  ecx,cl
c002630d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026313:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026317:	83 ec 08             	sub    esp,0x8
c002631a:	6a 01                	push   0x1
c002631c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002631f:	e8 04 ff ff ff       	call   c0026228 <IOAPIC::read(int)>
c0026324:	83 c4 10             	add    esp,0x10
c0026327:	c1 f8 10             	sar    eax,0x10
c002632a:	0f b6 c0             	movzx  eax,al
c002632d:	8d 50 01             	lea    edx,[eax+0x1]
c0026330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026333:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026339:	b8 00 00 00 00       	mov    eax,0x0
c002633e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026341:	5b                   	pop    ebx
c0026342:	5e                   	pop    esi
c0026343:	5f                   	pop    edi
c0026344:	5d                   	pop    ebp
c0026345:	c3                   	ret    

c0026346 <IOAPIC::write(int, int)>:
c0026346:	55                   	push   ebp
c0026347:	89 e5                	mov    ebp,esp
c0026349:	83 ec 10             	sub    esp,0x10
c002634c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002634f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026355:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002635b:	0f b6 d0             	movzx  edx,al
c002635e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026361:	89 10                	mov    DWORD PTR [eax],edx
c0026363:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026366:	8d 50 10             	lea    edx,[eax+0x10]
c0026369:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002636c:	89 02                	mov    DWORD PTR [edx],eax
c002636e:	90                   	nop
c002636f:	c9                   	leave  
c0026370:	c3                   	ret    
c0026371:	90                   	nop

c0026372 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0026372:	55                   	push   ebp
c0026373:	89 e5                	mov    ebp,esp
c0026375:	53                   	push   ebx
c0026376:	83 ec 2c             	sub    esp,0x2c
c0026379:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002637c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002637f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0026382:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0026385:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0026388:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002638b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002638e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026391:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026394:	88 d8                	mov    al,bl
c0026396:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0026399:	88 c8                	mov    al,cl
c002639b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002639e:	88 d0                	mov    al,dl
c00263a0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00263a3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263a7:	83 c0 08             	add    eax,0x8
c00263aa:	01 c0                	add    eax,eax
c00263ac:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263af:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263b3:	83 c0 08             	add    eax,0x8
c00263b6:	01 c0                	add    eax,eax
c00263b8:	40                   	inc    eax
c00263b9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00263bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263bf:	50                   	push   eax
c00263c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263c3:	e8 60 fe ff ff       	call   c0026228 <IOAPIC::read(int)>
c00263c8:	83 c4 08             	add    esp,0x8
c00263cb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00263ce:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00263d5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00263d8:	c1 e0 18             	shl    eax,0x18
c00263db:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00263de:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00263e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263e4:	52                   	push   edx
c00263e5:	50                   	push   eax
c00263e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263e9:	e8 58 ff ff ff       	call   c0026346 <IOAPIC::write(int, int)>
c00263ee:	83 c4 0c             	add    esp,0xc
c00263f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00263f4:	50                   	push   eax
c00263f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263f8:	e8 2b fe ff ff       	call   c0026228 <IOAPIC::read(int)>
c00263fd:	83 c4 08             	add    esp,0x8
c0026400:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026403:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002640a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026411:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026418:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002641c:	74 09                	je     c0026427 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002641e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026425:	eb 07                	jmp    c002642e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026427:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002642e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026432:	74 09                	je     c002643d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026434:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002643b:	eb 07                	jmp    c0026444 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002643d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026444:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002644b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002644f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026452:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026455:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026458:	52                   	push   edx
c0026459:	50                   	push   eax
c002645a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002645d:	e8 e4 fe ff ff       	call   c0026346 <IOAPIC::write(int, int)>
c0026462:	83 c4 0c             	add    esp,0xc
c0026465:	90                   	nop
c0026466:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026469:	c9                   	leave  
c002646a:	c3                   	ret    
c002646b:	90                   	nop

c002646c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002646c:	55                   	push   ebp
c002646d:	89 e5                	mov    ebp,esp
c002646f:	57                   	push   edi
c0026470:	56                   	push   esi
c0026471:	53                   	push   ebx
c0026472:	83 ec 2c             	sub    esp,0x2c
c0026475:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026478:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002647b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002647f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0026483:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0026487:	74 5a                	je     c00264e3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0026489:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c002648d:	7f 44                	jg     c00264d3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002648f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026492:	05 a0 e0 02 c0       	add    eax,0xc002e0a0
c0026497:	8a 00                	mov    al,BYTE PTR [eax]
c0026499:	0f b6 c0             	movzx  eax,al
c002649c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002649f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264a2:	66 8b 84 00 a0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce860]
c00264aa:	0f b7 c0             	movzx  eax,ax
c00264ad:	83 e0 02             	and    eax,0x2
c00264b0:	85 c0                	test   eax,eax
c00264b2:	74 04                	je     c00264b8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00264b4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00264b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264bb:	66 8b 84 00 a0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce860]
c00264c3:	0f b7 c0             	movzx  eax,ax
c00264c6:	83 e0 08             	and    eax,0x8
c00264c9:	85 c0                	test   eax,eax
c00264cb:	74 16                	je     c00264e3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264cd:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264d1:	eb 10                	jmp    c00264e3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264d3:	83 ec 0c             	sub    esp,0xc
c00264d6:	68 5c db 02 c0       	push   0xc002db5c
c00264db:	e8 d1 3d ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00264e0:	83 c4 10             	add    esp,0x10
c00264e3:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00264e7:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c00264ec:	83 ec 08             	sub    esp,0x8
c00264ef:	50                   	push   eax
c00264f0:	68 94 db 02 c0       	push   0xc002db94
c00264f5:	e8 81 c3 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00264fa:	83 c4 10             	add    esp,0x10
c00264fd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026504:	a1 a0 31 03 c0       	mov    eax,ds:0xc00331a0
c0026509:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002650c:	7d 67                	jge    c0026575 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002650e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026511:	8b 04 85 c0 31 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcce40]
c0026518:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002651b:	83 ec 08             	sub    esp,0x8
c002651e:	52                   	push   edx
c002651f:	50                   	push   eax
c0026520:	e8 d1 fc ff ff       	call   c00261f6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026525:	83 c4 10             	add    esp,0x10
c0026528:	84 c0                	test   al,al
c002652a:	74 44                	je     c0026570 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002652c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002652f:	8b 1c 85 c0 31 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcce40]
c0026536:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002653a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002653d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026541:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026544:	83 c0 20             	add    eax,0x20
c0026547:	0f b6 f0             	movzx  esi,al
c002654a:	b8 00 00 00 00       	mov    eax,0x0
c002654f:	99                   	cdq    
c0026550:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026553:	0f b6 c9             	movzx  ecx,cl
c0026556:	83 ec 04             	sub    esp,0x4
c0026559:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002655c:	57                   	push   edi
c002655d:	56                   	push   esi
c002655e:	52                   	push   edx
c002655f:	50                   	push   eax
c0026560:	51                   	push   ecx
c0026561:	53                   	push   ebx
c0026562:	e8 0b fe ff ff       	call   c0026372 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026567:	83 c4 20             	add    esp,0x20
c002656a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002656e:	eb 05                	jmp    c0026575 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026570:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026573:	eb 8f                	jmp    c0026504 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026575:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026578:	83 f0 01             	xor    eax,0x1
c002657b:	84 c0                	test   al,al
c002657d:	74 10                	je     c002658f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002657f:	83 ec 0c             	sub    esp,0xc
c0026582:	68 ab db 02 c0       	push   0xc002dbab
c0026587:	e8 25 3d ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c002658c:	83 c4 10             	add    esp,0x10
c002658f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0026593:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c002659a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002659e:	7f 65                	jg     c0026605 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00265a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265a3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265a6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265ad:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265b0:	01 ca                	add    edx,ecx
c00265b2:	83 c2 54             	add    edx,0x54
c00265b5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00265b9:	85 c0                	test   eax,eax
c00265bb:	75 43                	jne    c0026600 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00265bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265c3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265ca:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265cd:	01 ca                	add    edx,ecx
c00265cf:	8d 4a 54             	lea    ecx,[edx+0x54]
c00265d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00265d5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00265d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265df:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265e6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265e9:	01 ca                	add    edx,ecx
c00265eb:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00265f1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00265f4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00265f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265fb:	83 e8 20             	sub    eax,0x20
c00265fe:	eb 1a                	jmp    c002661a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026600:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026603:	eb 95                	jmp    c002659a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026605:	83 ec 0c             	sub    esp,0xc
c0026608:	68 b8 db 02 c0       	push   0xc002dbb8
c002660d:	e8 9f 3c ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0026612:	83 c4 10             	add    esp,0x10
c0026615:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002661a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002661d:	5b                   	pop    ebx
c002661e:	5e                   	pop    esi
c002661f:	5f                   	pop    edi
c0026620:	5d                   	pop    ebp
c0026621:	c3                   	ret    

c0026622 <PIC::disable()>:
c0026622:	55                   	push   ebp
c0026623:	89 e5                	mov    ebp,esp
c0026625:	83 ec 10             	sub    esp,0x10
c0026628:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002662e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026632:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026635:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026639:	ee                   	out    dx,al
c002663a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026640:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026644:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026647:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002664b:	ee                   	out    dx,al
c002664c:	90                   	nop
c002664d:	c9                   	leave  
c002664e:	c3                   	ret    
c002664f:	90                   	nop

c0026650 <PIC::close(int, int, void*)>:
c0026650:	55                   	push   ebp
c0026651:	89 e5                	mov    ebp,esp
c0026653:	83 ec 08             	sub    esp,0x8
c0026656:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026659:	8b 00                	mov    eax,DWORD PTR [eax]
c002665b:	83 c0 3c             	add    eax,0x3c
c002665e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026660:	83 ec 0c             	sub    esp,0xc
c0026663:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026666:	ff d0                	call   eax
c0026668:	83 c4 10             	add    esp,0x10
c002666b:	b8 00 00 00 00       	mov    eax,0x0
c0026670:	c9                   	leave  
c0026671:	c3                   	ret    

c0026672 <PIC::PIC()>:
c0026672:	83 ec 0c             	sub    esp,0xc
c0026675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026679:	83 ec 08             	sub    esp,0x8
c002667c:	68 64 dc 02 c0       	push   0xc002dc64
c0026681:	50                   	push   eax
c0026682:	e8 ab df fe ff       	call   c0014632 <InterruptController::InterruptController(char const*)>
c0026687:	83 c4 10             	add    esp,0x10
c002668a:	ba 90 dc 02 c0       	mov    edx,0xc002dc90
c002668f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026693:	89 10                	mov    DWORD PTR [eax],edx
c0026695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026699:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002669f:	0f b6 d0             	movzx  edx,al
c00266a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00266ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266b7:	0f b6 d0             	movzx  edx,al
c00266ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266be:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00266c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266cd:	8d 50 01             	lea    edx,[eax+0x1]
c00266d0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266d4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266da:	0f b6 d0             	movzx  edx,al
c00266dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266e5:	83 e1 3f             	and    ecx,0x3f
c00266e8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266f0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266f6:	0f b6 d0             	movzx  edx,al
c00266f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266fd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026708:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002670e:	0f b6 d0             	movzx  edx,al
c0026711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026715:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002671a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026724:	8d 50 01             	lea    edx,[eax+0x1]
c0026727:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002672b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026731:	0f b6 d0             	movzx  edx,al
c0026734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026738:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002673c:	83 e1 3f             	and    ecx,0x3f
c002673f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026743:	90                   	nop
c0026744:	83 c4 0c             	add    esp,0xc
c0026747:	c3                   	ret    

c0026748 <PIC::ioWait()>:
c0026748:	eb 00                	jmp    c002674a <PIC::ioWait()+0x2>
c002674a:	eb 00                	jmp    c002674c <PIC::ioWait()+0x4>
c002674c:	90                   	nop
c002674d:	c3                   	ret    

c002674e <PIC::getIRQReg(int)>:
c002674e:	55                   	push   ebp
c002674f:	89 e5                	mov    ebp,esp
c0026751:	83 ec 10             	sub    esp,0x10
c0026754:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026757:	0f b6 c0             	movzx  eax,al
c002675a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026760:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026763:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026766:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002676a:	ee                   	out    dx,al
c002676b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002676e:	0f b6 c0             	movzx  eax,al
c0026771:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026777:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002677a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002677d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026781:	ee                   	out    dx,al
c0026782:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026788:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002678c:	89 c2                	mov    edx,eax
c002678e:	ec                   	in     al,dx
c002678f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026792:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026795:	0f b6 c0             	movzx  eax,al
c0026798:	c1 e0 08             	shl    eax,0x8
c002679b:	89 c1                	mov    ecx,eax
c002679d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00267a3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00267a7:	89 c2                	mov    edx,eax
c00267a9:	ec                   	in     al,dx
c00267aa:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00267ad:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00267b0:	0f b6 c0             	movzx  eax,al
c00267b3:	09 c8                	or     eax,ecx
c00267b5:	c9                   	leave  
c00267b6:	c3                   	ret    
c00267b7:	90                   	nop

c00267b8 <PIC::eoi(unsigned char)>:
c00267b8:	55                   	push   ebp
c00267b9:	89 e5                	mov    ebp,esp
c00267bb:	83 ec 14             	sub    esp,0x14
c00267be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267c1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00267c4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00267c8:	75 1e                	jne    c00267e8 <PIC::eoi(unsigned char)+0x30>
c00267ca:	6a 0b                	push   0xb
c00267cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267cf:	e8 7a ff ff ff       	call   c002674e <PIC::getIRQReg(int)>
c00267d4:	83 c4 08             	add    esp,0x8
c00267d7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00267db:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00267df:	25 80 00 00 00       	and    eax,0x80
c00267e4:	85 c0                	test   eax,eax
c00267e6:	74 5f                	je     c0026847 <PIC::eoi(unsigned char)+0x8f>
c00267e8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00267ec:	75 2d                	jne    c002681b <PIC::eoi(unsigned char)+0x63>
c00267ee:	6a 0b                	push   0xb
c00267f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267f3:	e8 56 ff ff ff       	call   c002674e <PIC::getIRQReg(int)>
c00267f8:	83 c4 08             	add    esp,0x8
c00267fb:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00267ff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026802:	66 85 c0             	test   ax,ax
c0026805:	78 14                	js     c002681b <PIC::eoi(unsigned char)+0x63>
c0026807:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002680d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026811:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026814:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026818:	ee                   	out    dx,al
c0026819:	eb 2d                	jmp    c0026848 <PIC::eoi(unsigned char)+0x90>
c002681b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002681f:	76 12                	jbe    c0026833 <PIC::eoi(unsigned char)+0x7b>
c0026821:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026827:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002682b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002682e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026832:	ee                   	out    dx,al
c0026833:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026839:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002683d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026840:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026844:	ee                   	out    dx,al
c0026845:	eb 01                	jmp    c0026848 <PIC::eoi(unsigned char)+0x90>
c0026847:	90                   	nop
c0026848:	c9                   	leave  
c0026849:	c3                   	ret    

c002684a <PIC::remap()>:
c002684a:	55                   	push   ebp
c002684b:	89 e5                	mov    ebp,esp
c002684d:	83 ec 48             	sub    esp,0x48
c0026850:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026857:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002685e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026864:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026867:	89 c2                	mov    edx,eax
c0026869:	ec                   	in     al,dx
c002686a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002686d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026870:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026873:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026879:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002687c:	89 c2                	mov    edx,eax
c002687e:	ec                   	in     al,dx
c002687f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026882:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026885:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026888:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002688e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026892:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026895:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026898:	ee                   	out    dx,al
c0026899:	83 ec 0c             	sub    esp,0xc
c002689c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002689f:	e8 a4 fe ff ff       	call   c0026748 <PIC::ioWait()>
c00268a4:	83 c4 10             	add    esp,0x10
c00268a7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00268ad:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00268b1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00268b4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00268b7:	ee                   	out    dx,al
c00268b8:	83 ec 0c             	sub    esp,0xc
c00268bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268be:	e8 85 fe ff ff       	call   c0026748 <PIC::ioWait()>
c00268c3:	83 c4 10             	add    esp,0x10
c00268c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00268c9:	0f b6 c0             	movzx  eax,al
c00268cc:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00268d2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00268d5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00268d8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00268db:	ee                   	out    dx,al
c00268dc:	83 ec 0c             	sub    esp,0xc
c00268df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268e2:	e8 61 fe ff ff       	call   c0026748 <PIC::ioWait()>
c00268e7:	83 c4 10             	add    esp,0x10
c00268ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268ed:	0f b6 c0             	movzx  eax,al
c00268f0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00268f6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00268f9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00268fc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00268ff:	ee                   	out    dx,al
c0026900:	83 ec 0c             	sub    esp,0xc
c0026903:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026906:	e8 3d fe ff ff       	call   c0026748 <PIC::ioWait()>
c002690b:	83 c4 10             	add    esp,0x10
c002690e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026914:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026918:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002691b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002691e:	ee                   	out    dx,al
c002691f:	83 ec 0c             	sub    esp,0xc
c0026922:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026925:	e8 1e fe ff ff       	call   c0026748 <PIC::ioWait()>
c002692a:	83 c4 10             	add    esp,0x10
c002692d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026933:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026937:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002693a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002693d:	ee                   	out    dx,al
c002693e:	83 ec 0c             	sub    esp,0xc
c0026941:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026944:	e8 ff fd ff ff       	call   c0026748 <PIC::ioWait()>
c0026949:	83 c4 10             	add    esp,0x10
c002694c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026952:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026956:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026959:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002695c:	ee                   	out    dx,al
c002695d:	83 ec 0c             	sub    esp,0xc
c0026960:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026963:	e8 e0 fd ff ff       	call   c0026748 <PIC::ioWait()>
c0026968:	83 c4 10             	add    esp,0x10
c002696b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026971:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026975:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026978:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002697b:	ee                   	out    dx,al
c002697c:	83 ec 0c             	sub    esp,0xc
c002697f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026982:	e8 c1 fd ff ff       	call   c0026748 <PIC::ioWait()>
c0026987:	83 c4 10             	add    esp,0x10
c002698a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002698e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026994:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026997:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002699a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002699d:	ee                   	out    dx,al
c002699e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00269a2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00269a8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00269ab:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00269ae:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00269b1:	ee                   	out    dx,al
c00269b2:	90                   	nop
c00269b3:	c9                   	leave  
c00269b4:	c3                   	ret    
c00269b5:	90                   	nop

c00269b6 <PIC::open(int, int, void*)>:
c00269b6:	55                   	push   ebp
c00269b7:	89 e5                	mov    ebp,esp
c00269b9:	83 ec 18             	sub    esp,0x18
c00269bc:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00269c2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00269c6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00269c9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00269cd:	ee                   	out    dx,al
c00269ce:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00269d4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00269d8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00269db:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00269df:	ee                   	out    dx,al
c00269e0:	83 ec 0c             	sub    esp,0xc
c00269e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269e6:	e8 5f fe ff ff       	call   c002684a <PIC::remap()>
c00269eb:	83 c4 10             	add    esp,0x10
c00269ee:	b8 00 00 00 00       	mov    eax,0x0
c00269f3:	c9                   	leave  
c00269f4:	c3                   	ret    
c00269f5:	90                   	nop

c00269f6 <APICTimer::close(int, int, void*)>:
c00269f6:	b8 00 00 00 00       	mov    eax,0x0
c00269fb:	c3                   	ret    

c00269fc <apicTimerHandler(regs*, void*)>:
c00269fc:	83 ec 0c             	sub    esp,0xc
c00269ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a03:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a05:	99                   	cdq    
c0026a06:	52                   	push   edx
c0026a07:	50                   	push   eax
c0026a08:	6a 00                	push   0x0
c0026a0a:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a0f:	e8 90 07 00 00       	call   c00271a4 <__udivdi3>
c0026a14:	83 c4 10             	add    esp,0x10
c0026a17:	83 ec 08             	sub    esp,0x8
c0026a1a:	52                   	push   edx
c0026a1b:	50                   	push   eax
c0026a1c:	e8 a0 fd fe ff       	call   c00167c1 <timerHandler(unsigned long long)>
c0026a21:	83 c4 10             	add    esp,0x10
c0026a24:	90                   	nop
c0026a25:	83 c4 0c             	add    esp,0xc
c0026a28:	c3                   	ret    
c0026a29:	90                   	nop

c0026a2a <APICTimer::write(int)>:
c0026a2a:	53                   	push   ebx
c0026a2b:	83 ec 28             	sub    esp,0x28
c0026a2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a32:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026a36:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a3c:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0026a41:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a47:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026a4d:	83 ec 0c             	sub    esp,0xc
c0026a50:	50                   	push   eax
c0026a51:	e8 de f4 ff ff       	call   c0025f34 <APIC::getBase()>
c0026a56:	83 c4 10             	add    esp,0x10
c0026a59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026a5d:	a1 b0 f4 02 c0       	mov    eax,ds:0xc002f4b0
c0026a62:	8b 15 b4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4b4
c0026a68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026a6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026a70:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a74:	05 e0 03 00 00       	add    eax,0x3e0
c0026a79:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026a7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a83:	05 80 03 00 00       	add    eax,0x380
c0026a88:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026a8e:	fb                   	sti    
c0026a8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026a93:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026a97:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026a9c:	83 d2 00             	adc    edx,0x0
c0026a9f:	89 c1                	mov    ecx,eax
c0026aa1:	89 d3                	mov    ebx,edx
c0026aa3:	a1 b0 f4 02 c0       	mov    eax,ds:0xc002f4b0
c0026aa8:	8b 15 b4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4b4
c0026aae:	39 c8                	cmp    eax,ecx
c0026ab0:	89 d0                	mov    eax,edx
c0026ab2:	19 d8                	sbb    eax,ebx
c0026ab4:	73 02                	jae    c0026ab8 <APICTimer::write(int)+0x8e>
c0026ab6:	eb d7                	jmp    c0026a8f <APICTimer::write(int)+0x65>
c0026ab8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026abc:	05 20 03 00 00       	add    eax,0x320
c0026ac1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026ac7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026acb:	05 90 03 00 00       	add    eax,0x390
c0026ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026ad2:	f7 d0                	not    eax
c0026ad4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026ad8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026adc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026ae0:	ba 00 00 00 00       	mov    edx,0x0
c0026ae5:	f7 f3                	div    ebx
c0026ae7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026aeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026aef:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026af5:	0d 00 00 02 00       	or     eax,0x20000
c0026afa:	89 c2                	mov    edx,eax
c0026afc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b00:	05 20 03 00 00       	add    eax,0x320
c0026b05:	89 10                	mov    DWORD PTR [eax],edx
c0026b07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b0b:	05 e0 03 00 00       	add    eax,0x3e0
c0026b10:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b1a:	05 80 03 00 00       	add    eax,0x380
c0026b1f:	89 c2                	mov    edx,eax
c0026b21:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b25:	89 02                	mov    DWORD PTR [edx],eax
c0026b27:	90                   	nop
c0026b28:	83 c4 28             	add    esp,0x28
c0026b2b:	5b                   	pop    ebx
c0026b2c:	c3                   	ret    
c0026b2d:	90                   	nop

c0026b2e <APICTimer::open(int, int, void*)>:
c0026b2e:	57                   	push   edi
c0026b2f:	56                   	push   esi
c0026b30:	53                   	push   ebx
c0026b31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b35:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b37:	83 c0 24             	add    eax,0x24
c0026b3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b3c:	83 ec 08             	sub    esp,0x8
c0026b3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b47:	ff d0                	call   eax
c0026b49:	83 c4 10             	add    esp,0x10
c0026b4c:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0026b51:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b57:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b5d:	83 ec 0c             	sub    esp,0xc
c0026b60:	50                   	push   eax
c0026b61:	e8 ce f3 ff ff       	call   c0025f34 <APIC::getBase()>
c0026b66:	83 c4 10             	add    esp,0x10
c0026b69:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b73:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026b79:	0f b6 f8             	movzx  edi,al
c0026b7c:	89 d0                	mov    eax,edx
c0026b7e:	ba 00 00 00 00       	mov    edx,0x0
c0026b83:	89 c1                	mov    ecx,eax
c0026b85:	80 e5 ff             	and    ch,0xff
c0026b88:	89 cb                	mov    ebx,ecx
c0026b8a:	0f b6 f2             	movzx  esi,dl
c0026b8d:	89 d8                	mov    eax,ebx
c0026b8f:	89 f2                	mov    edx,esi
c0026b91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026b95:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026b98:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026b9c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026ba0:	83 e0 00             	and    eax,0x0
c0026ba3:	09 d0                	or     eax,edx
c0026ba5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bad:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bb3:	8d 50 01             	lea    edx,[eax+0x1]
c0026bb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bba:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026bc0:	0f b6 d0             	movzx  edx,al
c0026bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bc7:	83 c2 08             	add    edx,0x8
c0026bca:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026bce:	0f b6 c9             	movzx  ecx,cl
c0026bd1:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026bd7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bdf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026be3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bed:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026bf1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026bf7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026bfb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c01:	83 ec 0c             	sub    esp,0xc
c0026c04:	51                   	push   ecx
c0026c05:	6a 01                	push   0x1
c0026c07:	68 fc 69 02 c0       	push   0xc00269fc
c0026c0c:	52                   	push   edx
c0026c0d:	50                   	push   eax
c0026c0e:	e8 19 d0 fe ff       	call   c0013c2c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c13:	83 c4 20             	add    esp,0x20
c0026c16:	89 c2                	mov    edx,eax
c0026c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c1c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c22:	b8 00 00 00 00       	mov    eax,0x0
c0026c27:	5b                   	pop    ebx
c0026c28:	5e                   	pop    esi
c0026c29:	5f                   	pop    edi
c0026c2a:	c3                   	ret    
c0026c2b:	90                   	nop

c0026c2c <APICTimer::APICTimer()>:
c0026c2c:	83 ec 0c             	sub    esp,0xc
c0026c2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c33:	83 ec 08             	sub    esp,0x8
c0026c36:	68 d0 dc 02 c0       	push   0xc002dcd0
c0026c3b:	50                   	push   eax
c0026c3c:	e8 f1 fa fe ff       	call   c0016732 <Timer::Timer(char const*)>
c0026c41:	83 c4 10             	add    esp,0x10
c0026c44:	ba e4 dc 02 c0       	mov    edx,0xc002dce4
c0026c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c4d:	89 10                	mov    DWORD PTR [eax],edx
c0026c4f:	90                   	nop
c0026c50:	83 c4 0c             	add    esp,0xc
c0026c53:	c3                   	ret    

c0026c54 <PIT::write(int)>:
c0026c54:	83 ec 10             	sub    esp,0x10
c0026c57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c5f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026c65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026c69:	a3 e4 31 03 c0       	mov    ds:0xc00331e4,eax
c0026c6e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026c73:	99                   	cdq    
c0026c74:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026c78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c7c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026c83:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026c88:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026c8c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026c91:	ee                   	out    dx,al
c0026c92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026c96:	0f b6 c0             	movzx  eax,al
c0026c99:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026ca0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026ca4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026ca8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026cad:	ee                   	out    dx,al
c0026cae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cb2:	c1 f8 08             	sar    eax,0x8
c0026cb5:	0f b6 c0             	movzx  eax,al
c0026cb8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026cbf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026cc3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026cc7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026ccc:	ee                   	out    dx,al
c0026ccd:	90                   	nop
c0026cce:	83 c4 10             	add    esp,0x10
c0026cd1:	c3                   	ret    

c0026cd2 <pitHandler(regs*, void*)>:
c0026cd2:	83 ec 0c             	sub    esp,0xc
c0026cd5:	a1 e4 31 03 c0       	mov    eax,ds:0xc00331e4
c0026cda:	99                   	cdq    
c0026cdb:	52                   	push   edx
c0026cdc:	50                   	push   eax
c0026cdd:	6a 00                	push   0x0
c0026cdf:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026ce4:	e8 bb 04 00 00       	call   c00271a4 <__udivdi3>
c0026ce9:	83 c4 10             	add    esp,0x10
c0026cec:	83 ec 08             	sub    esp,0x8
c0026cef:	52                   	push   edx
c0026cf0:	50                   	push   eax
c0026cf1:	e8 cb fa fe ff       	call   c00167c1 <timerHandler(unsigned long long)>
c0026cf6:	83 c4 10             	add    esp,0x10
c0026cf9:	90                   	nop
c0026cfa:	83 c4 0c             	add    esp,0xc
c0026cfd:	c3                   	ret    

c0026cfe <PIT::open(int, int, void*)>:
c0026cfe:	83 ec 0c             	sub    esp,0xc
c0026d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d05:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d07:	83 c0 24             	add    eax,0x24
c0026d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d0c:	83 ec 08             	sub    esp,0x8
c0026d0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d17:	ff d0                	call   eax
c0026d19:	83 c4 10             	add    esp,0x10
c0026d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d20:	83 ec 0c             	sub    esp,0xc
c0026d23:	6a 00                	push   0x0
c0026d25:	6a 01                	push   0x1
c0026d27:	68 d2 6c 02 c0       	push   0xc0026cd2
c0026d2c:	6a 00                	push   0x0
c0026d2e:	50                   	push   eax
c0026d2f:	e8 f8 ce fe ff       	call   c0013c2c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d34:	83 c4 20             	add    esp,0x20
c0026d37:	89 c2                	mov    edx,eax
c0026d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d3d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d43:	b8 00 00 00 00       	mov    eax,0x0
c0026d48:	83 c4 0c             	add    esp,0xc
c0026d4b:	c3                   	ret    

c0026d4c <PIT::close(int, int, void*)>:
c0026d4c:	83 ec 0c             	sub    esp,0xc
c0026d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d53:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026d5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d61:	6a 01                	push   0x1
c0026d63:	68 d2 6c 02 c0       	push   0xc0026cd2
c0026d68:	6a 00                	push   0x0
c0026d6a:	50                   	push   eax
c0026d6b:	e8 06 cf fe ff       	call   c0013c76 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026d70:	83 c4 10             	add    esp,0x10
c0026d73:	b8 00 00 00 00       	mov    eax,0x0
c0026d78:	83 c4 0c             	add    esp,0xc
c0026d7b:	c3                   	ret    

c0026d7c <PIT::PIT()>:
c0026d7c:	83 ec 0c             	sub    esp,0xc
c0026d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d83:	83 ec 08             	sub    esp,0x8
c0026d86:	68 0c dd 02 c0       	push   0xc002dd0c
c0026d8b:	50                   	push   eax
c0026d8c:	e8 a1 f9 fe ff       	call   c0016732 <Timer::Timer(char const*)>
c0026d91:	83 c4 10             	add    esp,0x10
c0026d94:	ba 34 dd 02 c0       	mov    edx,0xc002dd34
c0026d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d9d:	89 10                	mov    DWORD PTR [eax],edx
c0026d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026da9:	0f b6 d0             	movzx  edx,al
c0026dac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026db0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dbb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026dc1:	0f b6 d0             	movzx  edx,al
c0026dc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dc8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026dcd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026dd7:	8d 50 01             	lea    edx,[eax+0x1]
c0026dda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026dde:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026de4:	0f b6 d0             	movzx  edx,al
c0026de7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026deb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026def:	83 e1 3f             	and    ecx,0x3f
c0026df2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026df6:	90                   	nop
c0026df7:	83 c4 0c             	add    esp,0xc
c0026dfa:	c3                   	ret    
c0026dfb:	66 90                	xchg   ax,ax
c0026dfd:	66 90                	xchg   ax,ax
c0026dff:	90                   	nop

c0026e00 <avxDetect>:
c0026e00:	b8 00 00 00 00       	mov    eax,0x0
c0026e05:	c3                   	ret    

c0026e06 <avxSave>:
c0026e06:	c3                   	ret    

c0026e07 <avxLoad>:
c0026e07:	c3                   	ret    

c0026e08 <avxInit>:
c0026e08:	c3                   	ret    

c0026e09 <avxClose>:
c0026e09:	c3                   	ret    

c0026e0a <wouldSheSayYes>:
c0026e0a:	c3                   	ret    
c0026e0b:	49                   	dec    ecx
c0026e0c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e10:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e14:	75 20                	jne    c0026e36 <sseDetect.noSSE+0x1>
c0026e16:	4e                   	dec    esi
c0026e17:	79 61                	jns    c0026e7a <x87Detect+0x14>
c0026e19:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e1e:	66 90                	xchg   ax,ax

c0026e20 <absolutelyNoChanceInHell>:
c0026e20:	b8 01 00 00 00       	mov    eax,0x1
c0026e25:	0f a2                	cpuid  
c0026e27:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e2d:	74 06                	je     c0026e35 <sseDetect.noSSE>
c0026e2f:	b8 01 00 00 00       	mov    eax,0x1
c0026e34:	c3                   	ret    

c0026e35 <sseDetect.noSSE>:
c0026e35:	31 c0                	xor    eax,eax
c0026e37:	c3                   	ret    

c0026e38 <sseSave>:
c0026e38:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026e3d:	c3                   	ret    

c0026e3e <sseLoad>:
c0026e3e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026e43:	c3                   	ret    

c0026e44 <sseInit>:
c0026e44:	e8 49 00 00 00       	call   c0026e92 <x87Init>
c0026e49:	0f 20 e0             	mov    eax,cr4
c0026e4c:	66 0d 00 06          	or     ax,0x600
c0026e50:	0f 22 e0             	mov    cr4,eax
c0026e53:	c3                   	ret    

c0026e54 <sseClose>:
c0026e54:	c3                   	ret    
c0026e55:	66 90                	xchg   ax,ax
c0026e57:	66 90                	xchg   ax,ax
c0026e59:	66 90                	xchg   ax,ax
c0026e5b:	66 90                	xchg   ax,ax
c0026e5d:	66 90                	xchg   ax,ax
c0026e5f:	90                   	nop

c0026e60 <value_37F>:
c0026e60:	7f 03                	jg     c0026e65 <value_37A+0x1>

c0026e62 <value_37E>:
c0026e62:	7e 03                	jle    c0026e67 <x87Detect+0x1>

c0026e64 <value_37A>:
c0026e64:	7a 03                	jp     c0026e69 <x87Detect+0x3>

c0026e66 <x87Detect>:
c0026e66:	b8 01 00 00 00       	mov    eax,0x1
c0026e6b:	0f a2                	cpuid  
c0026e6d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026e73:	74 06                	je     c0026e7b <x87Detect.nox87>
c0026e75:	b8 01 00 00 00       	mov    eax,0x1
c0026e7a:	c3                   	ret    

c0026e7b <x87Detect.nox87>:
c0026e7b:	b8 00 00 00 00       	mov    eax,0x0
c0026e80:	c3                   	ret    

c0026e81 <x87Save>:
c0026e81:	55                   	push   ebp
c0026e82:	89 e5                	mov    ebp,esp
c0026e84:	9b dd 75 08          	fsave  [ebp+0x8]
c0026e88:	c9                   	leave  
c0026e89:	c3                   	ret    

c0026e8a <x87Load>:
c0026e8a:	55                   	push   ebp
c0026e8b:	89 e5                	mov    ebp,esp
c0026e8d:	dd 65 08             	frstor [ebp+0x8]
c0026e90:	c9                   	leave  
c0026e91:	c3                   	ret    

c0026e92 <x87Init>:
c0026e92:	9b db e3             	finit  
c0026e95:	0f 20 c0             	mov    eax,cr0
c0026e98:	66 25 fb ff          	and    ax,0xfffb
c0026e9c:	66 0d 22 00          	or     ax,0x22
c0026ea0:	0f 22 c0             	mov    cr0,eax
c0026ea3:	0f 06                	clts   
c0026ea5:	d9 2d 64 6e 02 c0    	fldcw  WORD PTR ds:0xc0026e64
c0026eab:	c3                   	ret    

c0026eac <x87Close>:
c0026eac:	c3                   	ret    
c0026ead:	66 90                	xchg   ax,ax
c0026eaf:	90                   	nop

c0026eb0 <__do_global_ctors_aux>:
c0026eb0:	a1 e8 9a 02 c0       	mov    eax,ds:0xc0029ae8
c0026eb5:	83 f8 ff             	cmp    eax,0xffffffff
c0026eb8:	74 1a                	je     c0026ed4 <__do_global_ctors_aux+0x24>
c0026eba:	55                   	push   ebp
c0026ebb:	89 e5                	mov    ebp,esp
c0026ebd:	53                   	push   ebx
c0026ebe:	52                   	push   edx
c0026ebf:	bb e8 9a 02 c0       	mov    ebx,0xc0029ae8
c0026ec4:	ff d0                	call   eax
c0026ec6:	83 eb 04             	sub    ebx,0x4
c0026ec9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026ecb:	83 f8 ff             	cmp    eax,0xffffffff
c0026ece:	75 f4                	jne    c0026ec4 <__do_global_ctors_aux+0x14>
c0026ed0:	58                   	pop    eax
c0026ed1:	5b                   	pop    ebx
c0026ed2:	5d                   	pop    ebp
c0026ed3:	c3                   	ret    
c0026ed4:	c3                   	ret    
c0026ed5:	66 90                	xchg   ax,ax
c0026ed7:	90                   	nop

c0026ed8 <__divdi3>:
c0026ed8:	55                   	push   ebp
c0026ed9:	57                   	push   edi
c0026eda:	56                   	push   esi
c0026edb:	53                   	push   ebx
c0026edc:	83 ec 1c             	sub    esp,0x1c
c0026edf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026ee3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026ee7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026eea:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026eee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026ef2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026ef6:	85 db                	test   ebx,ebx
c0026ef8:	0f 88 8e 00 00 00    	js     c0026f8c <__divdi3+0xb4>
c0026efe:	89 dd                	mov    ebp,ebx
c0026f00:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f08:	89 d3                	mov    ebx,edx
c0026f0a:	85 d2                	test   edx,edx
c0026f0c:	79 0d                	jns    c0026f1b <__divdi3+0x43>
c0026f0e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f12:	f7 d8                	neg    eax
c0026f14:	83 d2 00             	adc    edx,0x0
c0026f17:	f7 da                	neg    edx
c0026f19:	89 d3                	mov    ebx,edx
c0026f1b:	89 c7                	mov    edi,eax
c0026f1d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f20:	85 db                	test   ebx,ebx
c0026f22:	75 48                	jne    c0026f6c <__divdi3+0x94>
c0026f24:	39 ef                	cmp    edi,ebp
c0026f26:	76 24                	jbe    c0026f4c <__divdi3+0x74>
c0026f28:	89 ea                	mov    edx,ebp
c0026f2a:	f7 f7                	div    edi
c0026f2c:	89 c1                	mov    ecx,eax
c0026f2e:	31 f6                	xor    esi,esi
c0026f30:	89 c8                	mov    eax,ecx
c0026f32:	89 f2                	mov    edx,esi
c0026f34:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f38:	85 c9                	test   ecx,ecx
c0026f3a:	74 07                	je     c0026f43 <__divdi3+0x6b>
c0026f3c:	f7 d8                	neg    eax
c0026f3e:	83 d2 00             	adc    edx,0x0
c0026f41:	f7 da                	neg    edx
c0026f43:	83 c4 1c             	add    esp,0x1c
c0026f46:	5b                   	pop    ebx
c0026f47:	5e                   	pop    esi
c0026f48:	5f                   	pop    edi
c0026f49:	5d                   	pop    ebp
c0026f4a:	c3                   	ret    
c0026f4b:	90                   	nop
c0026f4c:	85 ff                	test   edi,edi
c0026f4e:	75 0b                	jne    c0026f5b <__divdi3+0x83>
c0026f50:	b8 01 00 00 00       	mov    eax,0x1
c0026f55:	31 d2                	xor    edx,edx
c0026f57:	f7 f3                	div    ebx
c0026f59:	89 c7                	mov    edi,eax
c0026f5b:	31 d2                	xor    edx,edx
c0026f5d:	89 e8                	mov    eax,ebp
c0026f5f:	f7 f7                	div    edi
c0026f61:	89 c6                	mov    esi,eax
c0026f63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f66:	f7 f7                	div    edi
c0026f68:	89 c1                	mov    ecx,eax
c0026f6a:	eb c4                	jmp    c0026f30 <__divdi3+0x58>
c0026f6c:	39 eb                	cmp    ebx,ebp
c0026f6e:	77 3c                	ja     c0026fac <__divdi3+0xd4>
c0026f70:	0f bd f3             	bsr    esi,ebx
c0026f73:	83 f6 1f             	xor    esi,0x1f
c0026f76:	75 40                	jne    c0026fb8 <__divdi3+0xe0>
c0026f78:	39 eb                	cmp    ebx,ebp
c0026f7a:	72 09                	jb     c0026f85 <__divdi3+0xad>
c0026f7c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026f7f:	0f 87 97 00 00 00    	ja     c002701c <__divdi3+0x144>
c0026f85:	b9 01 00 00 00       	mov    ecx,0x1
c0026f8a:	eb a4                	jmp    c0026f30 <__divdi3+0x58>
c0026f8c:	f7 d9                	neg    ecx
c0026f8e:	83 d3 00             	adc    ebx,0x0
c0026f91:	f7 db                	neg    ebx
c0026f93:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f96:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f9a:	89 dd                	mov    ebp,ebx
c0026f9c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026fa4:	e9 5f ff ff ff       	jmp    c0026f08 <__divdi3+0x30>
c0026fa9:	8d 76 00             	lea    esi,[esi+0x0]
c0026fac:	31 f6                	xor    esi,esi
c0026fae:	31 c9                	xor    ecx,ecx
c0026fb0:	e9 7b ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c0026fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0026fb8:	b8 20 00 00 00       	mov    eax,0x20
c0026fbd:	29 f0                	sub    eax,esi
c0026fbf:	89 f1                	mov    ecx,esi
c0026fc1:	d3 e3                	shl    ebx,cl
c0026fc3:	89 fa                	mov    edx,edi
c0026fc5:	88 c1                	mov    cl,al
c0026fc7:	d3 ea                	shr    edx,cl
c0026fc9:	09 da                	or     edx,ebx
c0026fcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026fcf:	89 f1                	mov    ecx,esi
c0026fd1:	d3 e7                	shl    edi,cl
c0026fd3:	89 eb                	mov    ebx,ebp
c0026fd5:	88 c1                	mov    cl,al
c0026fd7:	d3 eb                	shr    ebx,cl
c0026fd9:	89 f1                	mov    ecx,esi
c0026fdb:	d3 e5                	shl    ebp,cl
c0026fdd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026fe0:	88 c1                	mov    cl,al
c0026fe2:	d3 ea                	shr    edx,cl
c0026fe4:	09 d5                	or     ebp,edx
c0026fe6:	89 e8                	mov    eax,ebp
c0026fe8:	89 da                	mov    edx,ebx
c0026fea:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026fee:	89 d3                	mov    ebx,edx
c0026ff0:	89 c5                	mov    ebp,eax
c0026ff2:	f7 e7                	mul    edi
c0026ff4:	39 d3                	cmp    ebx,edx
c0026ff6:	72 18                	jb     c0027010 <__divdi3+0x138>
c0026ff8:	74 0a                	je     c0027004 <__divdi3+0x12c>
c0026ffa:	89 e9                	mov    ecx,ebp
c0026ffc:	31 f6                	xor    esi,esi
c0026ffe:	e9 2d ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c0027003:	90                   	nop
c0027004:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027007:	89 f1                	mov    ecx,esi
c0027009:	d3 e7                	shl    edi,cl
c002700b:	39 c7                	cmp    edi,eax
c002700d:	73 eb                	jae    c0026ffa <__divdi3+0x122>
c002700f:	90                   	nop
c0027010:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027013:	31 f6                	xor    esi,esi
c0027015:	e9 16 ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c002701a:	66 90                	xchg   ax,ax
c002701c:	31 c9                	xor    ecx,ecx
c002701e:	e9 0d ff ff ff       	jmp    c0026f30 <__divdi3+0x58>
c0027023:	90                   	nop

c0027024 <__moddi3>:
c0027024:	55                   	push   ebp
c0027025:	57                   	push   edi
c0027026:	56                   	push   esi
c0027027:	53                   	push   ebx
c0027028:	83 ec 2c             	sub    esp,0x2c
c002702b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002702f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027033:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027037:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002703b:	85 db                	test   ebx,ebx
c002703d:	0f 88 85 00 00 00    	js     c00270c8 <__moddi3+0xa4>
c0027043:	89 de                	mov    esi,ebx
c0027045:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002704d:	89 d7                	mov    edi,edx
c002704f:	85 d2                	test   edx,edx
c0027051:	79 09                	jns    c002705c <__moddi3+0x38>
c0027053:	f7 d8                	neg    eax
c0027055:	83 d2 00             	adc    edx,0x0
c0027058:	f7 da                	neg    edx
c002705a:	89 d7                	mov    edi,edx
c002705c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027060:	89 cd                	mov    ebp,ecx
c0027062:	85 ff                	test   edi,edi
c0027064:	75 52                	jne    c00270b8 <__moddi3+0x94>
c0027066:	89 c3                	mov    ebx,eax
c0027068:	39 f0                	cmp    eax,esi
c002706a:	76 24                	jbe    c0027090 <__moddi3+0x6c>
c002706c:	89 c8                	mov    eax,ecx
c002706e:	89 f2                	mov    edx,esi
c0027070:	f7 f3                	div    ebx
c0027072:	89 d6                	mov    esi,edx
c0027074:	89 f0                	mov    eax,esi
c0027076:	31 d2                	xor    edx,edx
c0027078:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002707c:	85 c9                	test   ecx,ecx
c002707e:	74 07                	je     c0027087 <__moddi3+0x63>
c0027080:	f7 d8                	neg    eax
c0027082:	83 d2 00             	adc    edx,0x0
c0027085:	f7 da                	neg    edx
c0027087:	83 c4 2c             	add    esp,0x2c
c002708a:	5b                   	pop    ebx
c002708b:	5e                   	pop    esi
c002708c:	5f                   	pop    edi
c002708d:	5d                   	pop    ebp
c002708e:	c3                   	ret    
c002708f:	90                   	nop
c0027090:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0027094:	85 db                	test   ebx,ebx
c0027096:	75 0d                	jne    c00270a5 <__moddi3+0x81>
c0027098:	b8 01 00 00 00       	mov    eax,0x1
c002709d:	31 d2                	xor    edx,edx
c002709f:	f7 f7                	div    edi
c00270a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270a5:	89 f0                	mov    eax,esi
c00270a7:	31 d2                	xor    edx,edx
c00270a9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00270ad:	f7 f7                	div    edi
c00270af:	89 e8                	mov    eax,ebp
c00270b1:	f7 f7                	div    edi
c00270b3:	89 d6                	mov    esi,edx
c00270b5:	eb bd                	jmp    c0027074 <__moddi3+0x50>
c00270b7:	90                   	nop
c00270b8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00270bc:	39 f7                	cmp    edi,esi
c00270be:	76 20                	jbe    c00270e0 <__moddi3+0xbc>
c00270c0:	89 c8                	mov    eax,ecx
c00270c2:	89 f2                	mov    edx,esi
c00270c4:	eb b2                	jmp    c0027078 <__moddi3+0x54>
c00270c6:	66 90                	xchg   ax,ax
c00270c8:	f7 d9                	neg    ecx
c00270ca:	83 d3 00             	adc    ebx,0x0
c00270cd:	f7 db                	neg    ebx
c00270cf:	89 de                	mov    esi,ebx
c00270d1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00270d9:	e9 6f ff ff ff       	jmp    c002704d <__moddi3+0x29>
c00270de:	66 90                	xchg   ax,ax
c00270e0:	0f bd c7             	bsr    eax,edi
c00270e3:	83 f0 1f             	xor    eax,0x1f
c00270e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00270ea:	75 24                	jne    c0027110 <__moddi3+0xec>
c00270ec:	39 f7                	cmp    edi,esi
c00270ee:	72 06                	jb     c00270f6 <__moddi3+0xd2>
c00270f0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00270f4:	77 0c                	ja     c0027102 <__moddi3+0xde>
c00270f6:	89 e9                	mov    ecx,ebp
c00270f8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00270fc:	19 fe                	sbb    esi,edi
c00270fe:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027102:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027106:	89 f2                	mov    edx,esi
c0027108:	e9 6b ff ff ff       	jmp    c0027078 <__moddi3+0x54>
c002710d:	8d 76 00             	lea    esi,[esi+0x0]
c0027110:	b8 20 00 00 00       	mov    eax,0x20
c0027115:	89 c2                	mov    edx,eax
c0027117:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002711b:	29 da                	sub    edx,ebx
c002711d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027121:	88 d9                	mov    cl,bl
c0027123:	d3 e7                	shl    edi,cl
c0027125:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027129:	88 d1                	mov    cl,dl
c002712b:	d3 e8                	shr    eax,cl
c002712d:	09 c7                	or     edi,eax
c002712f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027133:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027137:	89 d8                	mov    eax,ebx
c0027139:	88 d9                	mov    cl,bl
c002713b:	d3 e7                	shl    edi,cl
c002713d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027141:	89 f3                	mov    ebx,esi
c0027143:	88 d1                	mov    cl,dl
c0027145:	d3 eb                	shr    ebx,cl
c0027147:	89 c7                	mov    edi,eax
c0027149:	88 c1                	mov    cl,al
c002714b:	d3 e6                	shl    esi,cl
c002714d:	89 e8                	mov    eax,ebp
c002714f:	88 d1                	mov    cl,dl
c0027151:	d3 e8                	shr    eax,cl
c0027153:	09 f0                	or     eax,esi
c0027155:	89 f9                	mov    ecx,edi
c0027157:	d3 e5                	shl    ebp,cl
c0027159:	89 da                	mov    edx,ebx
c002715b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002715f:	89 d3                	mov    ebx,edx
c0027161:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027165:	89 c6                	mov    esi,eax
c0027167:	89 d1                	mov    ecx,edx
c0027169:	39 d3                	cmp    ebx,edx
c002716b:	72 27                	jb     c0027194 <__moddi3+0x170>
c002716d:	74 21                	je     c0027190 <__moddi3+0x16c>
c002716f:	29 f5                	sub    ebp,esi
c0027171:	19 cb                	sbb    ebx,ecx
c0027173:	89 de                	mov    esi,ebx
c0027175:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027179:	d3 e6                	shl    esi,cl
c002717b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002717f:	89 f9                	mov    ecx,edi
c0027181:	d3 ed                	shr    ebp,cl
c0027183:	09 ee                	or     esi,ebp
c0027185:	89 f0                	mov    eax,esi
c0027187:	d3 eb                	shr    ebx,cl
c0027189:	89 da                	mov    edx,ebx
c002718b:	e9 e8 fe ff ff       	jmp    c0027078 <__moddi3+0x54>
c0027190:	39 c5                	cmp    ebp,eax
c0027192:	73 db                	jae    c002716f <__moddi3+0x14b>
c0027194:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0027198:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002719c:	89 d1                	mov    ecx,edx
c002719e:	89 c6                	mov    esi,eax
c00271a0:	eb cd                	jmp    c002716f <__moddi3+0x14b>
c00271a2:	66 90                	xchg   ax,ax

c00271a4 <__udivdi3>:
c00271a4:	55                   	push   ebp
c00271a5:	57                   	push   edi
c00271a6:	56                   	push   esi
c00271a7:	53                   	push   ebx
c00271a8:	83 ec 1c             	sub    esp,0x1c
c00271ab:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00271af:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00271b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00271b7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00271bb:	85 d2                	test   edx,edx
c00271bd:	75 41                	jne    c0027200 <__udivdi3+0x5c>
c00271bf:	39 f7                	cmp    edi,esi
c00271c1:	76 15                	jbe    c00271d8 <__udivdi3+0x34>
c00271c3:	89 e8                	mov    eax,ebp
c00271c5:	89 f2                	mov    edx,esi
c00271c7:	f7 f7                	div    edi
c00271c9:	31 db                	xor    ebx,ebx
c00271cb:	89 da                	mov    edx,ebx
c00271cd:	83 c4 1c             	add    esp,0x1c
c00271d0:	5b                   	pop    ebx
c00271d1:	5e                   	pop    esi
c00271d2:	5f                   	pop    edi
c00271d3:	5d                   	pop    ebp
c00271d4:	c3                   	ret    
c00271d5:	8d 76 00             	lea    esi,[esi+0x0]
c00271d8:	89 f9                	mov    ecx,edi
c00271da:	85 ff                	test   edi,edi
c00271dc:	75 0b                	jne    c00271e9 <__udivdi3+0x45>
c00271de:	b8 01 00 00 00       	mov    eax,0x1
c00271e3:	31 d2                	xor    edx,edx
c00271e5:	f7 f7                	div    edi
c00271e7:	89 c1                	mov    ecx,eax
c00271e9:	31 d2                	xor    edx,edx
c00271eb:	89 f0                	mov    eax,esi
c00271ed:	f7 f1                	div    ecx
c00271ef:	89 c3                	mov    ebx,eax
c00271f1:	89 e8                	mov    eax,ebp
c00271f3:	f7 f1                	div    ecx
c00271f5:	89 da                	mov    edx,ebx
c00271f7:	83 c4 1c             	add    esp,0x1c
c00271fa:	5b                   	pop    ebx
c00271fb:	5e                   	pop    esi
c00271fc:	5f                   	pop    edi
c00271fd:	5d                   	pop    ebp
c00271fe:	c3                   	ret    
c00271ff:	90                   	nop
c0027200:	39 f2                	cmp    edx,esi
c0027202:	77 1c                	ja     c0027220 <__udivdi3+0x7c>
c0027204:	0f bd da             	bsr    ebx,edx
c0027207:	83 f3 1f             	xor    ebx,0x1f
c002720a:	75 24                	jne    c0027230 <__udivdi3+0x8c>
c002720c:	39 f2                	cmp    edx,esi
c002720e:	72 08                	jb     c0027218 <__udivdi3+0x74>
c0027210:	39 ef                	cmp    edi,ebp
c0027212:	0f 87 84 00 00 00    	ja     c002729c <__udivdi3+0xf8>
c0027218:	b8 01 00 00 00       	mov    eax,0x1
c002721d:	eb ac                	jmp    c00271cb <__udivdi3+0x27>
c002721f:	90                   	nop
c0027220:	31 db                	xor    ebx,ebx
c0027222:	31 c0                	xor    eax,eax
c0027224:	89 da                	mov    edx,ebx
c0027226:	83 c4 1c             	add    esp,0x1c
c0027229:	5b                   	pop    ebx
c002722a:	5e                   	pop    esi
c002722b:	5f                   	pop    edi
c002722c:	5d                   	pop    ebp
c002722d:	c3                   	ret    
c002722e:	66 90                	xchg   ax,ax
c0027230:	b8 20 00 00 00       	mov    eax,0x20
c0027235:	29 d8                	sub    eax,ebx
c0027237:	88 d9                	mov    cl,bl
c0027239:	d3 e2                	shl    edx,cl
c002723b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002723f:	89 fa                	mov    edx,edi
c0027241:	88 c1                	mov    cl,al
c0027243:	d3 ea                	shr    edx,cl
c0027245:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027249:	09 d1                	or     ecx,edx
c002724b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002724f:	88 d9                	mov    cl,bl
c0027251:	d3 e7                	shl    edi,cl
c0027253:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027257:	89 f7                	mov    edi,esi
c0027259:	88 c1                	mov    cl,al
c002725b:	d3 ef                	shr    edi,cl
c002725d:	88 d9                	mov    cl,bl
c002725f:	d3 e6                	shl    esi,cl
c0027261:	89 ea                	mov    edx,ebp
c0027263:	88 c1                	mov    cl,al
c0027265:	d3 ea                	shr    edx,cl
c0027267:	09 d6                	or     esi,edx
c0027269:	89 f0                	mov    eax,esi
c002726b:	89 fa                	mov    edx,edi
c002726d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027271:	89 d7                	mov    edi,edx
c0027273:	89 c6                	mov    esi,eax
c0027275:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027279:	39 d7                	cmp    edi,edx
c002727b:	72 13                	jb     c0027290 <__udivdi3+0xec>
c002727d:	74 09                	je     c0027288 <__udivdi3+0xe4>
c002727f:	89 f0                	mov    eax,esi
c0027281:	31 db                	xor    ebx,ebx
c0027283:	e9 43 ff ff ff       	jmp    c00271cb <__udivdi3+0x27>
c0027288:	88 d9                	mov    cl,bl
c002728a:	d3 e5                	shl    ebp,cl
c002728c:	39 c5                	cmp    ebp,eax
c002728e:	73 ef                	jae    c002727f <__udivdi3+0xdb>
c0027290:	8d 46 ff             	lea    eax,[esi-0x1]
c0027293:	31 db                	xor    ebx,ebx
c0027295:	e9 31 ff ff ff       	jmp    c00271cb <__udivdi3+0x27>
c002729a:	66 90                	xchg   ax,ax
c002729c:	31 c0                	xor    eax,eax
c002729e:	e9 28 ff ff ff       	jmp    c00271cb <__udivdi3+0x27>
c00272a3:	90                   	nop

c00272a4 <__umoddi3>:
c00272a4:	55                   	push   ebp
c00272a5:	57                   	push   edi
c00272a6:	56                   	push   esi
c00272a7:	53                   	push   ebx
c00272a8:	83 ec 1c             	sub    esp,0x1c
c00272ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00272af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00272b3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00272b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00272bb:	89 da                	mov    edx,ebx
c00272bd:	85 c0                	test   eax,eax
c00272bf:	75 37                	jne    c00272f8 <__umoddi3+0x54>
c00272c1:	39 df                	cmp    edi,ebx
c00272c3:	76 13                	jbe    c00272d8 <__umoddi3+0x34>
c00272c5:	89 f0                	mov    eax,esi
c00272c7:	f7 f7                	div    edi
c00272c9:	89 d0                	mov    eax,edx
c00272cb:	31 d2                	xor    edx,edx
c00272cd:	83 c4 1c             	add    esp,0x1c
c00272d0:	5b                   	pop    ebx
c00272d1:	5e                   	pop    esi
c00272d2:	5f                   	pop    edi
c00272d3:	5d                   	pop    ebp
c00272d4:	c3                   	ret    
c00272d5:	8d 76 00             	lea    esi,[esi+0x0]
c00272d8:	89 fd                	mov    ebp,edi
c00272da:	85 ff                	test   edi,edi
c00272dc:	75 0b                	jne    c00272e9 <__umoddi3+0x45>
c00272de:	b8 01 00 00 00       	mov    eax,0x1
c00272e3:	31 d2                	xor    edx,edx
c00272e5:	f7 f7                	div    edi
c00272e7:	89 c5                	mov    ebp,eax
c00272e9:	89 d8                	mov    eax,ebx
c00272eb:	31 d2                	xor    edx,edx
c00272ed:	f7 f5                	div    ebp
c00272ef:	89 f0                	mov    eax,esi
c00272f1:	f7 f5                	div    ebp
c00272f3:	89 d0                	mov    eax,edx
c00272f5:	eb d4                	jmp    c00272cb <__umoddi3+0x27>
c00272f7:	90                   	nop
c00272f8:	89 f1                	mov    ecx,esi
c00272fa:	39 d8                	cmp    eax,ebx
c00272fc:	76 0a                	jbe    c0027308 <__umoddi3+0x64>
c00272fe:	89 f0                	mov    eax,esi
c0027300:	83 c4 1c             	add    esp,0x1c
c0027303:	5b                   	pop    ebx
c0027304:	5e                   	pop    esi
c0027305:	5f                   	pop    edi
c0027306:	5d                   	pop    ebp
c0027307:	c3                   	ret    
c0027308:	0f bd e8             	bsr    ebp,eax
c002730b:	83 f5 1f             	xor    ebp,0x1f
c002730e:	75 1c                	jne    c002732c <__umoddi3+0x88>
c0027310:	39 d8                	cmp    eax,ebx
c0027312:	72 04                	jb     c0027318 <__umoddi3+0x74>
c0027314:	39 f7                	cmp    edi,esi
c0027316:	77 08                	ja     c0027320 <__umoddi3+0x7c>
c0027318:	89 da                	mov    edx,ebx
c002731a:	29 fe                	sub    esi,edi
c002731c:	19 c2                	sbb    edx,eax
c002731e:	89 f1                	mov    ecx,esi
c0027320:	89 c8                	mov    eax,ecx
c0027322:	83 c4 1c             	add    esp,0x1c
c0027325:	5b                   	pop    ebx
c0027326:	5e                   	pop    esi
c0027327:	5f                   	pop    edi
c0027328:	5d                   	pop    ebp
c0027329:	c3                   	ret    
c002732a:	66 90                	xchg   ax,ax
c002732c:	ba 20 00 00 00       	mov    edx,0x20
c0027331:	29 ea                	sub    edx,ebp
c0027333:	89 e9                	mov    ecx,ebp
c0027335:	d3 e0                	shl    eax,cl
c0027337:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002733b:	89 f8                	mov    eax,edi
c002733d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027341:	88 d1                	mov    cl,dl
c0027343:	d3 e8                	shr    eax,cl
c0027345:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027349:	09 c1                	or     ecx,eax
c002734b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002734f:	89 e9                	mov    ecx,ebp
c0027351:	d3 e7                	shl    edi,cl
c0027353:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027357:	89 d8                	mov    eax,ebx
c0027359:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002735d:	88 d1                	mov    cl,dl
c002735f:	d3 e8                	shr    eax,cl
c0027361:	89 c7                	mov    edi,eax
c0027363:	89 e9                	mov    ecx,ebp
c0027365:	d3 e3                	shl    ebx,cl
c0027367:	89 f0                	mov    eax,esi
c0027369:	88 d1                	mov    cl,dl
c002736b:	d3 e8                	shr    eax,cl
c002736d:	09 d8                	or     eax,ebx
c002736f:	89 e9                	mov    ecx,ebp
c0027371:	d3 e6                	shl    esi,cl
c0027373:	89 f3                	mov    ebx,esi
c0027375:	89 fa                	mov    edx,edi
c0027377:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002737b:	89 d1                	mov    ecx,edx
c002737d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027381:	89 c6                	mov    esi,eax
c0027383:	89 d7                	mov    edi,edx
c0027385:	39 d1                	cmp    ecx,edx
c0027387:	72 27                	jb     c00273b0 <__umoddi3+0x10c>
c0027389:	74 21                	je     c00273ac <__umoddi3+0x108>
c002738b:	89 ca                	mov    edx,ecx
c002738d:	29 f3                	sub    ebx,esi
c002738f:	19 fa                	sbb    edx,edi
c0027391:	89 d0                	mov    eax,edx
c0027393:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0027397:	d3 e0                	shl    eax,cl
c0027399:	89 e9                	mov    ecx,ebp
c002739b:	d3 eb                	shr    ebx,cl
c002739d:	09 d8                	or     eax,ebx
c002739f:	d3 ea                	shr    edx,cl
c00273a1:	83 c4 1c             	add    esp,0x1c
c00273a4:	5b                   	pop    ebx
c00273a5:	5e                   	pop    esi
c00273a6:	5f                   	pop    edi
c00273a7:	5d                   	pop    ebp
c00273a8:	c3                   	ret    
c00273a9:	8d 76 00             	lea    esi,[esi+0x0]
c00273ac:	39 c3                	cmp    ebx,eax
c00273ae:	73 db                	jae    c002738b <__umoddi3+0xe7>
c00273b0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00273b4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00273b8:	89 d7                	mov    edi,edx
c00273ba:	89 c6                	mov    esi,eax
c00273bc:	eb cd                	jmp    c002738b <__umoddi3+0xe7>

c00273be <__addsf3>:
c00273be:	55                   	push   ebp
c00273bf:	89 e5                	mov    ebp,esp
c00273c1:	57                   	push   edi
c00273c2:	56                   	push   esi
c00273c3:	53                   	push   ebx
c00273c4:	83 ec 08             	sub    esp,0x8
c00273c7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00273ca:	89 fa                	mov    edx,edi
c00273cc:	89 f8                	mov    eax,edi
c00273ce:	c1 f8 17             	sar    eax,0x17
c00273d1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273d4:	c1 e2 08             	shl    edx,0x8
c00273d7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273dd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00273e0:	89 de                	mov    esi,ebx
c00273e2:	c1 fe 17             	sar    esi,0x17
c00273e5:	c1 e3 08             	shl    ebx,0x8
c00273e8:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00273ee:	31 f0                	xor    eax,esi
c00273f0:	0f 88 3b 01 00 00    	js     c0027531 <__addsf3+0x173>
c00273f6:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00273f9:	29 f1                	sub    ecx,esi
c00273fb:	85 c9                	test   ecx,ecx
c00273fd:	7e 54                	jle    c0027453 <__addsf3+0x95>
c00273ff:	89 f0                	mov    eax,esi
c0027401:	84 c0                	test   al,al
c0027403:	75 10                	jne    c0027415 <__addsf3+0x57>
c0027405:	85 db                	test   ebx,ebx
c0027407:	0f 84 aa 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c002740d:	49                   	dec    ecx
c002740e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027411:	74 38                	je     c002744b <__addsf3+0x8d>
c0027413:	eb 13                	jmp    c0027428 <__addsf3+0x6a>
c0027415:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027418:	f7 d0                	not    eax
c002741a:	84 c0                	test   al,al
c002741c:	0f 84 95 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027422:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027428:	83 f9 1f             	cmp    ecx,0x1f
c002742b:	0f 8f 86 02 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c0027431:	89 de                	mov    esi,ebx
c0027433:	d3 ee                	shr    esi,cl
c0027435:	b8 20 00 00 00       	mov    eax,0x20
c002743a:	29 c8                	sub    eax,ecx
c002743c:	89 c1                	mov    ecx,eax
c002743e:	d3 e3                	shl    ebx,cl
c0027440:	31 c0                	xor    eax,eax
c0027442:	85 db                	test   ebx,ebx
c0027444:	0f 95 c0             	setne  al
c0027447:	09 f0                	or     eax,esi
c0027449:	01 d0                	add    eax,edx
c002744b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002744e:	e9 b6 00 00 00       	jmp    c0027509 <__addsf3+0x14b>
c0027453:	74 5c                	je     c00274b1 <__addsf3+0xf3>
c0027455:	89 f1                	mov    ecx,esi
c0027457:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002745a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002745d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027461:	75 14                	jne    c0027477 <__addsf3+0xb9>
c0027463:	85 d2                	test   edx,edx
c0027465:	0f 84 4c 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c002746b:	49                   	dec    ecx
c002746c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002746f:	0f 84 94 00 00 00    	je     c0027509 <__addsf3+0x14b>
c0027475:	eb 12                	jmp    c0027489 <__addsf3+0xcb>
c0027477:	89 f0                	mov    eax,esi
c0027479:	f7 d0                	not    eax
c002747b:	84 c0                	test   al,al
c002747d:	0f 84 34 02 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027483:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027489:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002748c:	83 f9 1f             	cmp    ecx,0x1f
c002748f:	0f 8f 22 02 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c0027495:	89 d7                	mov    edi,edx
c0027497:	d3 ef                	shr    edi,cl
c0027499:	b8 20 00 00 00       	mov    eax,0x20
c002749e:	29 c8                	sub    eax,ecx
c00274a0:	89 c1                	mov    ecx,eax
c00274a2:	d3 e2                	shl    edx,cl
c00274a4:	31 c0                	xor    eax,eax
c00274a6:	85 d2                	test   edx,edx
c00274a8:	0f 95 c0             	setne  al
c00274ab:	09 f8                	or     eax,edi
c00274ad:	01 d8                	add    eax,ebx
c00274af:	eb 58                	jmp    c0027509 <__addsf3+0x14b>
c00274b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00274b4:	8d 70 01             	lea    esi,[eax+0x1]
c00274b7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00274bd:	75 32                	jne    c00274f1 <__addsf3+0x133>
c00274bf:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274c3:	75 1f                	jne    c00274e4 <__addsf3+0x126>
c00274c5:	85 d2                	test   edx,edx
c00274c7:	0f 84 e0 01 00 00    	je     c00276ad <__addsf3+0x2ef>
c00274cd:	85 db                	test   ebx,ebx
c00274cf:	0f 84 e2 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c00274d5:	89 d0                	mov    eax,edx
c00274d7:	01 d8                	add    eax,ebx
c00274d9:	0f 89 a9 01 00 00    	jns    c0027688 <__addsf3+0x2ca>
c00274df:	e9 9d 01 00 00       	jmp    c0027681 <__addsf3+0x2c3>
c00274e4:	85 d2                	test   edx,edx
c00274e6:	0f 85 cb 01 00 00    	jne    c00276b7 <__addsf3+0x2f9>
c00274ec:	e9 bc 01 00 00       	jmp    c00276ad <__addsf3+0x2ef>
c00274f1:	31 c0                	xor    eax,eax
c00274f3:	89 f1                	mov    ecx,esi
c00274f5:	f7 d1                	not    ecx
c00274f7:	84 c9                	test   cl,cl
c00274f9:	0f 84 90 01 00 00    	je     c002768f <__addsf3+0x2d1>
c00274ff:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027502:	d1 e8                	shr    eax,1
c0027504:	e9 86 01 00 00       	jmp    c002768f <__addsf3+0x2d1>
c0027509:	85 c0                	test   eax,eax
c002750b:	0f 89 7e 01 00 00    	jns    c002768f <__addsf3+0x2d1>
c0027511:	46                   	inc    esi
c0027512:	89 f2                	mov    edx,esi
c0027514:	f7 d2                	not    edx
c0027516:	84 d2                	test   dl,dl
c0027518:	0f 84 6f 01 00 00    	je     c002768d <__addsf3+0x2cf>
c002751e:	89 c2                	mov    edx,eax
c0027520:	83 e2 01             	and    edx,0x1
c0027523:	d1 e8                	shr    eax,1
c0027525:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002752a:	09 d0                	or     eax,edx
c002752c:	e9 5e 01 00 00       	jmp    c002768f <__addsf3+0x2d1>
c0027531:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027535:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027538:	89 f0                	mov    eax,esi
c002753a:	0f b6 c0             	movzx  eax,al
c002753d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027540:	29 c1                	sub    ecx,eax
c0027542:	85 c9                	test   ecx,ecx
c0027544:	7e 55                	jle    c002759b <__addsf3+0x1dd>
c0027546:	85 c0                	test   eax,eax
c0027548:	75 11                	jne    c002755b <__addsf3+0x19d>
c002754a:	85 db                	test   ebx,ebx
c002754c:	0f 84 65 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027552:	49                   	dec    ecx
c0027553:	75 19                	jne    c002756e <__addsf3+0x1b0>
c0027555:	89 d0                	mov    eax,edx
c0027557:	29 d8                	sub    eax,ebx
c0027559:	eb 38                	jmp    c0027593 <__addsf3+0x1d5>
c002755b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002755e:	f7 d0                	not    eax
c0027560:	84 c0                	test   al,al
c0027562:	0f 84 4f 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027568:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002756e:	83 f9 1f             	cmp    ecx,0x1f
c0027571:	0f 8f 40 01 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c0027577:	89 de                	mov    esi,ebx
c0027579:	d3 ee                	shr    esi,cl
c002757b:	b8 20 00 00 00       	mov    eax,0x20
c0027580:	29 c8                	sub    eax,ecx
c0027582:	89 c1                	mov    ecx,eax
c0027584:	d3 e3                	shl    ebx,cl
c0027586:	31 c0                	xor    eax,eax
c0027588:	85 db                	test   ebx,ebx
c002758a:	0f 95 c0             	setne  al
c002758d:	09 f0                	or     eax,esi
c002758f:	29 c2                	sub    edx,eax
c0027591:	89 d0                	mov    eax,edx
c0027593:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027596:	e9 af 00 00 00       	jmp    c002764a <__addsf3+0x28c>
c002759b:	74 5c                	je     c00275f9 <__addsf3+0x23b>
c002759d:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00275a0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275a3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00275a7:	75 14                	jne    c00275bd <__addsf3+0x1ff>
c00275a9:	85 d2                	test   edx,edx
c00275ab:	0f 84 06 01 00 00    	je     c00276b7 <__addsf3+0x2f9>
c00275b1:	48                   	dec    eax
c00275b2:	75 1b                	jne    c00275cf <__addsf3+0x211>
c00275b4:	89 d8                	mov    eax,ebx
c00275b6:	29 d0                	sub    eax,edx
c00275b8:	e9 8d 00 00 00       	jmp    c002764a <__addsf3+0x28c>
c00275bd:	89 f1                	mov    ecx,esi
c00275bf:	f7 d1                	not    ecx
c00275c1:	84 c9                	test   cl,cl
c00275c3:	0f 84 ee 00 00 00    	je     c00276b7 <__addsf3+0x2f9>
c00275c9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00275cf:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275d2:	83 f8 1f             	cmp    eax,0x1f
c00275d5:	0f 8f dc 00 00 00    	jg     c00276b7 <__addsf3+0x2f9>
c00275db:	89 d7                	mov    edi,edx
c00275dd:	88 c1                	mov    cl,al
c00275df:	d3 ef                	shr    edi,cl
c00275e1:	b9 20 00 00 00       	mov    ecx,0x20
c00275e6:	29 c1                	sub    ecx,eax
c00275e8:	d3 e2                	shl    edx,cl
c00275ea:	31 c0                	xor    eax,eax
c00275ec:	85 d2                	test   edx,edx
c00275ee:	0f 95 c0             	setne  al
c00275f1:	09 f8                	or     eax,edi
c00275f3:	29 c3                	sub    ebx,eax
c00275f5:	89 d8                	mov    eax,ebx
c00275f7:	eb 51                	jmp    c002764a <__addsf3+0x28c>
c00275f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00275fc:	40                   	inc    eax
c00275fd:	a8 fe                	test   al,0xfe
c00275ff:	75 3d                	jne    c002763e <__addsf3+0x280>
c0027601:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027605:	0f 85 a7 00 00 00    	jne    c00276b2 <__addsf3+0x2f4>
c002760b:	85 d2                	test   edx,edx
c002760d:	75 12                	jne    c0027621 <__addsf3+0x263>
c002760f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027612:	85 db                	test   ebx,ebx
c0027614:	0f 85 9d 00 00 00    	jne    c00276b7 <__addsf3+0x2f9>
c002761a:	31 ff                	xor    edi,edi
c002761c:	e9 96 00 00 00       	jmp    c00276b7 <__addsf3+0x2f9>
c0027621:	85 db                	test   ebx,ebx
c0027623:	0f 84 8e 00 00 00    	je     c00276b7 <__addsf3+0x2f9>
c0027629:	89 d0                	mov    eax,edx
c002762b:	29 d8                	sub    eax,ebx
c002762d:	79 06                	jns    c0027635 <__addsf3+0x277>
c002762f:	89 d8                	mov    eax,ebx
c0027631:	29 d0                	sub    eax,edx
c0027633:	eb 5a                	jmp    c002768f <__addsf3+0x2d1>
c0027635:	bf 00 00 00 00       	mov    edi,0x0
c002763a:	74 7b                	je     c00276b7 <__addsf3+0x2f9>
c002763c:	eb 4a                	jmp    c0027688 <__addsf3+0x2ca>
c002763e:	89 d0                	mov    eax,edx
c0027640:	29 d8                	sub    eax,ebx
c0027642:	79 12                	jns    c0027656 <__addsf3+0x298>
c0027644:	89 d8                	mov    eax,ebx
c0027646:	29 d0                	sub    eax,edx
c0027648:	eb 09                	jmp    c0027653 <__addsf3+0x295>
c002764a:	85 c0                	test   eax,eax
c002764c:	79 41                	jns    c002768f <__addsf3+0x2d1>
c002764e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027653:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027656:	31 f6                	xor    esi,esi
c0027658:	85 c0                	test   eax,eax
c002765a:	74 33                	je     c002768f <__addsf3+0x2d1>
c002765c:	0f bd c8             	bsr    ecx,eax
c002765f:	83 f1 1f             	xor    ecx,0x1f
c0027662:	d3 e0                	shl    eax,cl
c0027664:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027668:	39 ca                	cmp    edx,ecx
c002766a:	7f 10                	jg     c002767c <__addsf3+0x2be>
c002766c:	29 d1                	sub    ecx,edx
c002766e:	41                   	inc    ecx
c002766f:	d3 e8                	shr    eax,cl
c0027671:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027674:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002767a:	eb 13                	jmp    c002768f <__addsf3+0x2d1>
c002767c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002767f:	29 ce                	sub    esi,ecx
c0027681:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027686:	eb 07                	jmp    c002768f <__addsf3+0x2d1>
c0027688:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002768b:	eb 02                	jmp    c002768f <__addsf3+0x2d1>
c002768d:	31 c0                	xor    eax,eax
c002768f:	89 c2                	mov    edx,eax
c0027691:	c1 ea 08             	shr    edx,0x8
c0027694:	a8 7f                	test   al,0x7f
c0027696:	0f 95 c1             	setne  cl
c0027699:	09 d1                	or     ecx,edx
c002769b:	83 e1 01             	and    ecx,0x1
c002769e:	c1 e8 07             	shr    eax,0x7
c00276a1:	21 c8                	and    eax,ecx
c00276a3:	c1 e6 17             	shl    esi,0x17
c00276a6:	09 d6                	or     esi,edx
c00276a8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00276ab:	eb 0a                	jmp    c00276b7 <__addsf3+0x2f9>
c00276ad:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276b0:	eb 05                	jmp    c00276b7 <__addsf3+0x2f9>
c00276b2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00276b7:	89 f8                	mov    eax,edi
c00276b9:	5a                   	pop    edx
c00276ba:	59                   	pop    ecx
c00276bb:	5b                   	pop    ebx
c00276bc:	5e                   	pop    esi
c00276bd:	5f                   	pop    edi
c00276be:	5d                   	pop    ebp
c00276bf:	c3                   	ret    

c00276c0 <__subsf3>:
c00276c0:	55                   	push   ebp
c00276c1:	89 e5                	mov    ebp,esp
c00276c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00276c6:	05 00 00 00 80       	add    eax,0x80000000
c00276cb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00276ce:	5d                   	pop    ebp
c00276cf:	e9 ea fc ff ff       	jmp    c00273be <__addsf3>

c00276d4 <__negsf2>:
c00276d4:	55                   	push   ebp
c00276d5:	89 e5                	mov    ebp,esp
c00276d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00276da:	05 00 00 00 80       	add    eax,0x80000000
c00276df:	5d                   	pop    ebp
c00276e0:	c3                   	ret    

c00276e1 <__mulsf3>:
c00276e1:	55                   	push   ebp
c00276e2:	89 e5                	mov    ebp,esp
c00276e4:	57                   	push   edi
c00276e5:	56                   	push   esi
c00276e6:	53                   	push   ebx
c00276e7:	83 ec 1c             	sub    esp,0x1c
c00276ea:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c00276ed:	89 f0                	mov    eax,esi
c00276ef:	89 f1                	mov    ecx,esi
c00276f1:	c1 f9 17             	sar    ecx,0x17
c00276f4:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00276f7:	c1 e0 08             	shl    eax,0x8
c00276fa:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00276ff:	89 c1                	mov    ecx,eax
c0027701:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027704:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027707:	89 c7                	mov    edi,eax
c0027709:	c1 ff 17             	sar    edi,0x17
c002770c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027710:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027713:	89 f8                	mov    eax,edi
c0027715:	0f b6 c0             	movzx  eax,al
c0027718:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002771b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002771f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027722:	42                   	inc    edx
c0027723:	80 e2 fe             	and    dl,0xfe
c0027726:	75 7b                	jne    c00277a3 <__mulsf3+0xc2>
c0027728:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002772c:	74 54                	je     c0027782 <__mulsf3+0xa1>
c002772e:	85 c9                	test   ecx,ecx
c0027730:	0f 85 64 01 00 00    	jne    c002789a <__mulsf3+0x1b9>
c0027736:	8d 57 01             	lea    edx,[edi+0x1]
c0027739:	80 e2 fe             	and    dl,0xfe
c002773c:	75 1f                	jne    c002775d <__mulsf3+0x7c>
c002773e:	85 c0                	test   eax,eax
c0027740:	b8 00 00 00 00       	mov    eax,0x0
c0027745:	74 29                	je     c0027770 <__mulsf3+0x8f>
c0027747:	53                   	push   ebx
c0027748:	53                   	push   ebx
c0027749:	50                   	push   eax
c002774a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002774d:	e8 96 05 00 00       	call   c0027ce8 <__nesf2>
c0027752:	83 c4 10             	add    esp,0x10
c0027755:	85 c0                	test   eax,eax
c0027757:	0f 85 3a 01 00 00    	jne    c0027897 <__mulsf3+0x1b6>
c002775d:	85 ff                	test   edi,edi
c002775f:	0f 89 35 01 00 00    	jns    c002789a <__mulsf3+0x1b9>
c0027765:	81 c6 00 00 00 80    	add    esi,0x80000000
c002776b:	e9 2a 01 00 00       	jmp    c002789a <__mulsf3+0x1b9>
c0027770:	51                   	push   ecx
c0027771:	51                   	push   ecx
c0027772:	50                   	push   eax
c0027773:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027776:	e8 6d 05 00 00       	call   c0027ce8 <__nesf2>
c002777b:	83 c4 10             	add    esp,0x10
c002777e:	85 c0                	test   eax,eax
c0027780:	eb 15                	jmp    c0027797 <__mulsf3+0xb6>
c0027782:	85 c9                	test   ecx,ecx
c0027784:	74 0b                	je     c0027791 <__mulsf3+0xb0>
c0027786:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027789:	01 c9                	add    ecx,ecx
c002778b:	78 16                	js     c00277a3 <__mulsf3+0xc2>
c002778d:	89 d3                	mov    ebx,edx
c002778f:	eb f5                	jmp    c0027786 <__mulsf3+0xa5>
c0027791:	89 f8                	mov    eax,edi
c0027793:	f7 d0                	not    eax
c0027795:	84 c0                	test   al,al
c0027797:	75 c4                	jne    c002775d <__mulsf3+0x7c>
c0027799:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c002779e:	e9 f7 00 00 00       	jmp    c002789a <__mulsf3+0x1b9>
c00277a3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277a6:	c1 e6 08             	shl    esi,0x8
c00277a9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00277af:	8d 57 01             	lea    edx,[edi+0x1]
c00277b2:	80 e2 fe             	and    dl,0xfe
c00277b5:	75 63                	jne    c002781a <__mulsf3+0x139>
c00277b7:	85 c0                	test   eax,eax
c00277b9:	74 2f                	je     c00277ea <__mulsf3+0x109>
c00277bb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00277bf:	0f 89 d2 00 00 00    	jns    c0027897 <__mulsf3+0x1b6>
c00277c5:	52                   	push   edx
c00277c6:	52                   	push   edx
c00277c7:	6a 00                	push   0x0
c00277c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277cc:	e8 dc 04 00 00       	call   c0027cad <__eqsf2>
c00277d1:	83 c4 10             	add    esp,0x10
c00277d4:	85 c0                	test   eax,eax
c00277d6:	0f 85 bb 00 00 00    	jne    c0027897 <__mulsf3+0x1b6>
c00277dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277df:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00277e5:	e9 b0 00 00 00       	jmp    c002789a <__mulsf3+0x1b9>
c00277ea:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00277ed:	50                   	push   eax
c00277ee:	50                   	push   eax
c00277ef:	6a 00                	push   0x0
c00277f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277f4:	e8 b4 04 00 00       	call   c0027cad <__eqsf2>
c00277f9:	83 c4 10             	add    esp,0x10
c00277fc:	85 c0                	test   eax,eax
c00277fe:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027801:	75 0c                	jne    c002780f <__mulsf3+0x12e>
c0027803:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027807:	0f 89 8a 00 00 00    	jns    c0027897 <__mulsf3+0x1b6>
c002780d:	eb cd                	jmp    c00277dc <__mulsf3+0xfb>
c002780f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027812:	01 f6                	add    esi,esi
c0027814:	78 04                	js     c002781a <__mulsf3+0x139>
c0027816:	89 c3                	mov    ebx,eax
c0027818:	eb f5                	jmp    c002780f <__mulsf3+0x12e>
c002781a:	89 c8                	mov    eax,ecx
c002781c:	0d 00 00 00 80       	or     eax,0x80000000
c0027821:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027827:	f7 e6                	mul    esi
c0027829:	85 c0                	test   eax,eax
c002782b:	0f 95 c0             	setne  al
c002782e:	0f b6 c0             	movzx  eax,al
c0027831:	09 c2                	or     edx,eax
c0027833:	78 03                	js     c0027838 <__mulsf3+0x157>
c0027835:	01 d2                	add    edx,edx
c0027837:	4b                   	dec    ebx
c0027838:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002783e:	7f 22                	jg     c0027862 <__mulsf3+0x181>
c0027840:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027846:	85 db                	test   ebx,ebx
c0027848:	7f 23                	jg     c002786d <__mulsf3+0x18c>
c002784a:	83 fb e9             	cmp    ebx,0xffffffe9
c002784d:	7c 1a                	jl     c0027869 <__mulsf3+0x188>
c002784f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027855:	b9 01 00 00 00       	mov    ecx,0x1
c002785a:	29 d9                	sub    ecx,ebx
c002785c:	d3 ea                	shr    edx,cl
c002785e:	31 db                	xor    ebx,ebx
c0027860:	eb 0b                	jmp    c002786d <__mulsf3+0x18c>
c0027862:	bb ff 00 00 00       	mov    ebx,0xff
c0027867:	eb 02                	jmp    c002786b <__mulsf3+0x18a>
c0027869:	31 db                	xor    ebx,ebx
c002786b:	31 d2                	xor    edx,edx
c002786d:	89 d0                	mov    eax,edx
c002786f:	c1 e8 08             	shr    eax,0x8
c0027872:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027875:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002787b:	09 fb                	or     ebx,edi
c002787d:	c1 e3 17             	shl    ebx,0x17
c0027880:	09 c3                	or     ebx,eax
c0027882:	f6 c2 7f             	test   dl,0x7f
c0027885:	0f 95 c1             	setne  cl
c0027888:	09 c8                	or     eax,ecx
c002788a:	83 e0 01             	and    eax,0x1
c002788d:	c1 ea 07             	shr    edx,0x7
c0027890:	21 c2                	and    edx,eax
c0027892:	8d 34 13             	lea    esi,[ebx+edx*1]
c0027895:	eb 03                	jmp    c002789a <__mulsf3+0x1b9>
c0027897:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c002789a:	89 f0                	mov    eax,esi
c002789c:	8d 65 f4             	lea    esp,[ebp-0xc]
c002789f:	5b                   	pop    ebx
c00278a0:	5e                   	pop    esi
c00278a1:	5f                   	pop    edi
c00278a2:	5d                   	pop    ebp
c00278a3:	c3                   	ret    

c00278a4 <__divsf3>:
c00278a4:	55                   	push   ebp
c00278a5:	89 e5                	mov    ebp,esp
c00278a7:	57                   	push   edi
c00278a8:	56                   	push   esi
c00278a9:	53                   	push   ebx
c00278aa:	83 ec 1c             	sub    esp,0x1c
c00278ad:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00278b0:	89 d8                	mov    eax,ebx
c00278b2:	89 d9                	mov    ecx,ebx
c00278b4:	c1 f9 17             	sar    ecx,0x17
c00278b7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00278ba:	c1 e0 08             	shl    eax,0x8
c00278bd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278c2:	89 c1                	mov    ecx,eax
c00278c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278c7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00278ca:	89 c7                	mov    edi,eax
c00278cc:	c1 ff 17             	sar    edi,0x17
c00278cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00278d3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00278d6:	89 f8                	mov    eax,edi
c00278d8:	0f b6 c0             	movzx  eax,al
c00278db:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00278de:	29 c6                	sub    esi,eax
c00278e0:	83 c6 7f             	add    esi,0x7f
c00278e3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00278e6:	42                   	inc    edx
c00278e7:	80 e2 fe             	and    dl,0xfe
c00278ea:	0f 85 9c 00 00 00    	jne    c002798c <__divsf3+0xe8>
c00278f0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00278f4:	74 33                	je     c0027929 <__divsf3+0x85>
c00278f6:	85 c9                	test   ecx,ecx
c00278f8:	0f 85 c7 01 00 00    	jne    c0027ac5 <__divsf3+0x221>
c00278fe:	8d 57 01             	lea    edx,[edi+0x1]
c0027901:	80 e2 fe             	and    dl,0xfe
c0027904:	75 2f                	jne    c0027935 <__divsf3+0x91>
c0027906:	85 c0                	test   eax,eax
c0027908:	74 2b                	je     c0027935 <__divsf3+0x91>
c002790a:	51                   	push   ecx
c002790b:	51                   	push   ecx
c002790c:	6a 00                	push   0x0
c002790e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027911:	e8 d2 03 00 00       	call   c0027ce8 <__nesf2>
c0027916:	83 c4 10             	add    esp,0x10
c0027919:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002791c:	85 c0                	test   eax,eax
c002791e:	0f 85 a1 01 00 00    	jne    c0027ac5 <__divsf3+0x221>
c0027924:	e9 92 01 00 00       	jmp    c0027abb <__divsf3+0x217>
c0027929:	85 c9                	test   ecx,ecx
c002792b:	75 1b                	jne    c0027948 <__divsf3+0xa4>
c002792d:	8d 57 01             	lea    edx,[edi+0x1]
c0027930:	80 e2 fe             	and    dl,0xfe
c0027933:	74 1e                	je     c0027953 <__divsf3+0xaf>
c0027935:	85 ff                	test   edi,edi
c0027937:	0f 89 88 01 00 00    	jns    c0027ac5 <__divsf3+0x221>
c002793d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027943:	e9 7d 01 00 00       	jmp    c0027ac5 <__divsf3+0x221>
c0027948:	8d 56 ff             	lea    edx,[esi-0x1]
c002794b:	01 c9                	add    ecx,ecx
c002794d:	78 3d                	js     c002798c <__divsf3+0xe8>
c002794f:	89 d6                	mov    esi,edx
c0027951:	eb f5                	jmp    c0027948 <__divsf3+0xa4>
c0027953:	85 c0                	test   eax,eax
c0027955:	b8 00 00 00 00       	mov    eax,0x0
c002795a:	74 18                	je     c0027974 <__divsf3+0xd0>
c002795c:	52                   	push   edx
c002795d:	52                   	push   edx
c002795e:	50                   	push   eax
c002795f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027962:	e8 81 03 00 00       	call   c0027ce8 <__nesf2>
c0027967:	83 c4 10             	add    esp,0x10
c002796a:	85 c0                	test   eax,eax
c002796c:	0f 85 50 01 00 00    	jne    c0027ac2 <__divsf3+0x21e>
c0027972:	eb c1                	jmp    c0027935 <__divsf3+0x91>
c0027974:	56                   	push   esi
c0027975:	56                   	push   esi
c0027976:	50                   	push   eax
c0027977:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002797a:	e8 69 03 00 00       	call   c0027ce8 <__nesf2>
c002797f:	83 c4 10             	add    esp,0x10
c0027982:	85 c0                	test   eax,eax
c0027984:	0f 84 31 01 00 00    	je     c0027abb <__divsf3+0x217>
c002798a:	eb a9                	jmp    c0027935 <__divsf3+0x91>
c002798c:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c002798f:	c1 e3 08             	shl    ebx,0x8
c0027992:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027998:	8d 57 01             	lea    edx,[edi+0x1]
c002799b:	80 e2 fe             	and    dl,0xfe
c002799e:	75 71                	jne    c0027a11 <__divsf3+0x16d>
c00279a0:	85 c0                	test   eax,eax
c00279a2:	ba 00 00 00 00       	mov    edx,0x0
c00279a7:	74 2f                	je     c00279d8 <__divsf3+0x134>
c00279a9:	51                   	push   ecx
c00279aa:	51                   	push   ecx
c00279ab:	52                   	push   edx
c00279ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279af:	e8 f9 02 00 00       	call   c0027cad <__eqsf2>
c00279b4:	83 c4 10             	add    esp,0x10
c00279b7:	85 c0                	test   eax,eax
c00279b9:	0f 85 03 01 00 00    	jne    c0027ac2 <__divsf3+0x21e>
c00279bf:	31 d2                	xor    edx,edx
c00279c1:	89 d3                	mov    ebx,edx
c00279c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279c6:	31 f8                	xor    eax,edi
c00279c8:	0f 89 f7 00 00 00    	jns    c0027ac5 <__divsf3+0x221>
c00279ce:	bb 00 00 00 80       	mov    ebx,0x80000000
c00279d3:	e9 ed 00 00 00       	jmp    c0027ac5 <__divsf3+0x221>
c00279d8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00279db:	50                   	push   eax
c00279dc:	50                   	push   eax
c00279dd:	52                   	push   edx
c00279de:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279e1:	e8 c7 02 00 00       	call   c0027cad <__eqsf2>
c00279e6:	83 c4 10             	add    esp,0x10
c00279e9:	85 c0                	test   eax,eax
c00279eb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279ee:	75 16                	jne    c0027a06 <__divsf3+0x162>
c00279f0:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00279f3:	31 fb                	xor    ebx,edi
c00279f5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00279fb:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a01:	e9 bf 00 00 00       	jmp    c0027ac5 <__divsf3+0x221>
c0027a06:	8d 46 01             	lea    eax,[esi+0x1]
c0027a09:	01 db                	add    ebx,ebx
c0027a0b:	78 04                	js     c0027a11 <__divsf3+0x16d>
c0027a0d:	89 c6                	mov    esi,eax
c0027a0f:	eb f5                	jmp    c0027a06 <__divsf3+0x162>
c0027a11:	89 c8                	mov    eax,ecx
c0027a13:	0d 00 00 00 80       	or     eax,0x80000000
c0027a18:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a1e:	31 d2                	xor    edx,edx
c0027a20:	39 d8                	cmp    eax,ebx
c0027a22:	72 07                	jb     c0027a2b <__divsf3+0x187>
c0027a24:	29 d8                	sub    eax,ebx
c0027a26:	ba 01 00 00 00       	mov    edx,0x1
c0027a2b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027a32:	01 d2                	add    edx,edx
c0027a34:	89 c1                	mov    ecx,eax
c0027a36:	01 c0                	add    eax,eax
c0027a38:	85 c9                	test   ecx,ecx
c0027a3a:	78 04                	js     c0027a40 <__divsf3+0x19c>
c0027a3c:	39 c3                	cmp    ebx,eax
c0027a3e:	77 05                	ja     c0027a45 <__divsf3+0x1a1>
c0027a40:	29 d8                	sub    eax,ebx
c0027a42:	83 ca 01             	or     edx,0x1
c0027a45:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027a48:	75 e8                	jne    c0027a32 <__divsf3+0x18e>
c0027a4a:	85 c0                	test   eax,eax
c0027a4c:	0f 95 c0             	setne  al
c0027a4f:	0f b6 c0             	movzx  eax,al
c0027a52:	c1 e2 06             	shl    edx,0x6
c0027a55:	09 c2                	or     edx,eax
c0027a57:	78 03                	js     c0027a5c <__divsf3+0x1b8>
c0027a59:	01 d2                	add    edx,edx
c0027a5b:	4e                   	dec    esi
c0027a5c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027a62:	7f 22                	jg     c0027a86 <__divsf3+0x1e2>
c0027a64:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a6a:	85 f6                	test   esi,esi
c0027a6c:	7f 23                	jg     c0027a91 <__divsf3+0x1ed>
c0027a6e:	83 fe e9             	cmp    esi,0xffffffe9
c0027a71:	7c 1a                	jl     c0027a8d <__divsf3+0x1e9>
c0027a73:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a79:	b9 01 00 00 00       	mov    ecx,0x1
c0027a7e:	29 f1                	sub    ecx,esi
c0027a80:	d3 ea                	shr    edx,cl
c0027a82:	31 f6                	xor    esi,esi
c0027a84:	eb 0b                	jmp    c0027a91 <__divsf3+0x1ed>
c0027a86:	be ff 00 00 00       	mov    esi,0xff
c0027a8b:	eb 02                	jmp    c0027a8f <__divsf3+0x1eb>
c0027a8d:	31 f6                	xor    esi,esi
c0027a8f:	31 d2                	xor    edx,edx
c0027a91:	89 d0                	mov    eax,edx
c0027a93:	c1 e8 08             	shr    eax,0x8
c0027a96:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027a99:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027a9f:	09 fe                	or     esi,edi
c0027aa1:	c1 e6 17             	shl    esi,0x17
c0027aa4:	09 c6                	or     esi,eax
c0027aa6:	f6 c2 7f             	test   dl,0x7f
c0027aa9:	0f 95 c1             	setne  cl
c0027aac:	09 c8                	or     eax,ecx
c0027aae:	83 e0 01             	and    eax,0x1
c0027ab1:	c1 ea 07             	shr    edx,0x7
c0027ab4:	21 c2                	and    edx,eax
c0027ab6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027ab9:	eb 0a                	jmp    c0027ac5 <__divsf3+0x221>
c0027abb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027ac0:	eb 03                	jmp    c0027ac5 <__divsf3+0x221>
c0027ac2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027ac5:	89 d8                	mov    eax,ebx
c0027ac7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027aca:	5b                   	pop    ebx
c0027acb:	5e                   	pop    esi
c0027acc:	5f                   	pop    edi
c0027acd:	5d                   	pop    ebp
c0027ace:	c3                   	ret    

c0027acf <__floatsisf>:
c0027acf:	55                   	push   ebp
c0027ad0:	89 e5                	mov    ebp,esp
c0027ad2:	53                   	push   ebx
c0027ad3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027ad6:	85 d2                	test   edx,edx
c0027ad8:	7e 2b                	jle    c0027b05 <__floatsisf+0x36>
c0027ada:	0f bd ca             	bsr    ecx,edx
c0027add:	83 f1 1f             	xor    ecx,0x1f
c0027ae0:	d3 e2                	shl    edx,cl
c0027ae2:	89 d0                	mov    eax,edx
c0027ae4:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027ae9:	89 c3                	mov    ebx,eax
c0027aeb:	c1 eb 08             	shr    ebx,0x8
c0027aee:	80 e2 7f             	and    dl,0x7f
c0027af1:	0f 95 c2             	setne  dl
c0027af4:	09 da                	or     edx,ebx
c0027af6:	83 e2 01             	and    edx,0x1
c0027af9:	c1 e8 07             	shr    eax,0x7
c0027afc:	21 c2                	and    edx,eax
c0027afe:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b03:	eb 32                	jmp    c0027b37 <__floatsisf+0x68>
c0027b05:	b8 00 00 00 00       	mov    eax,0x0
c0027b0a:	74 34                	je     c0027b40 <__floatsisf+0x71>
c0027b0c:	f7 da                	neg    edx
c0027b0e:	0f bd ca             	bsr    ecx,edx
c0027b11:	83 f1 1f             	xor    ecx,0x1f
c0027b14:	d3 e2                	shl    edx,cl
c0027b16:	89 d0                	mov    eax,edx
c0027b18:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b1d:	89 c3                	mov    ebx,eax
c0027b1f:	c1 eb 08             	shr    ebx,0x8
c0027b22:	80 e2 7f             	and    dl,0x7f
c0027b25:	0f 95 c2             	setne  dl
c0027b28:	09 da                	or     edx,ebx
c0027b2a:	83 e2 01             	and    edx,0x1
c0027b2d:	c1 e8 07             	shr    eax,0x7
c0027b30:	21 c2                	and    edx,eax
c0027b32:	b8 9e 01 00 00       	mov    eax,0x19e
c0027b37:	29 c8                	sub    eax,ecx
c0027b39:	c1 e0 17             	shl    eax,0x17
c0027b3c:	09 d8                	or     eax,ebx
c0027b3e:	01 d0                	add    eax,edx
c0027b40:	5b                   	pop    ebx
c0027b41:	5d                   	pop    ebp
c0027b42:	c3                   	ret    

c0027b43 <__floatunsisf>:
c0027b43:	55                   	push   ebp
c0027b44:	89 e5                	mov    ebp,esp
c0027b46:	53                   	push   ebx
c0027b47:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b4a:	31 c0                	xor    eax,eax
c0027b4c:	85 d2                	test   edx,edx
c0027b4e:	74 32                	je     c0027b82 <__floatunsisf+0x3f>
c0027b50:	0f bd ca             	bsr    ecx,edx
c0027b53:	83 f1 1f             	xor    ecx,0x1f
c0027b56:	d3 e2                	shl    edx,cl
c0027b58:	89 d0                	mov    eax,edx
c0027b5a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b5f:	89 c3                	mov    ebx,eax
c0027b61:	c1 eb 08             	shr    ebx,0x8
c0027b64:	80 e2 7f             	and    dl,0x7f
c0027b67:	0f 95 c2             	setne  dl
c0027b6a:	09 da                	or     edx,ebx
c0027b6c:	83 e2 01             	and    edx,0x1
c0027b6f:	c1 e8 07             	shr    eax,0x7
c0027b72:	21 c2                	and    edx,eax
c0027b74:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b79:	29 c8                	sub    eax,ecx
c0027b7b:	c1 e0 17             	shl    eax,0x17
c0027b7e:	09 d8                	or     eax,ebx
c0027b80:	01 d0                	add    eax,edx
c0027b82:	5b                   	pop    ebx
c0027b83:	5d                   	pop    ebp
c0027b84:	c3                   	ret    

c0027b85 <__fixsfsi>:
c0027b85:	55                   	push   ebp
c0027b86:	89 e5                	mov    ebp,esp
c0027b88:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b8b:	89 d1                	mov    ecx,edx
c0027b8d:	c1 e1 08             	shl    ecx,0x8
c0027b90:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027b96:	c1 fa 17             	sar    edx,0x17
c0027b99:	78 1c                	js     c0027bb7 <__fixsfsi+0x32>
c0027b9b:	83 ea 7f             	sub    edx,0x7f
c0027b9e:	31 c0                	xor    eax,eax
c0027ba0:	83 fa 1e             	cmp    edx,0x1e
c0027ba3:	77 40                	ja     c0027be5 <__fixsfsi+0x60>
c0027ba5:	89 c8                	mov    eax,ecx
c0027ba7:	0d 00 00 00 80       	or     eax,0x80000000
c0027bac:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bb1:	29 d1                	sub    ecx,edx
c0027bb3:	d3 e8                	shr    eax,cl
c0027bb5:	eb 2e                	jmp    c0027be5 <__fixsfsi+0x60>
c0027bb7:	31 c0                	xor    eax,eax
c0027bb9:	81 c2 81 00 00 00    	add    edx,0x81
c0027bbf:	78 24                	js     c0027be5 <__fixsfsi+0x60>
c0027bc1:	83 fa 1e             	cmp    edx,0x1e
c0027bc4:	7e 09                	jle    c0027bcf <__fixsfsi+0x4a>
c0027bc6:	83 fa 1f             	cmp    edx,0x1f
c0027bc9:	75 18                	jne    c0027be3 <__fixsfsi+0x5e>
c0027bcb:	85 c9                	test   ecx,ecx
c0027bcd:	75 14                	jne    c0027be3 <__fixsfsi+0x5e>
c0027bcf:	89 c8                	mov    eax,ecx
c0027bd1:	0d 00 00 00 80       	or     eax,0x80000000
c0027bd6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bdb:	29 d1                	sub    ecx,edx
c0027bdd:	d3 e8                	shr    eax,cl
c0027bdf:	f7 d8                	neg    eax
c0027be1:	eb 02                	jmp    c0027be5 <__fixsfsi+0x60>
c0027be3:	31 c0                	xor    eax,eax
c0027be5:	5d                   	pop    ebp
c0027be6:	c3                   	ret    

c0027be7 <__fixunssfsi>:
c0027be7:	55                   	push   ebp
c0027be8:	89 e5                	mov    ebp,esp
c0027bea:	53                   	push   ebx
c0027beb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bee:	89 d3                	mov    ebx,edx
c0027bf0:	c1 fb 17             	sar    ebx,0x17
c0027bf3:	83 eb 7f             	sub    ebx,0x7f
c0027bf6:	31 c0                	xor    eax,eax
c0027bf8:	83 fb 1f             	cmp    ebx,0x1f
c0027bfb:	77 18                	ja     c0027c15 <__fixunssfsi+0x2e>
c0027bfd:	89 d0                	mov    eax,edx
c0027bff:	c1 e0 08             	shl    eax,0x8
c0027c02:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c07:	0d 00 00 00 80       	or     eax,0x80000000
c0027c0c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c11:	29 d9                	sub    ecx,ebx
c0027c13:	d3 e8                	shr    eax,cl
c0027c15:	5b                   	pop    ebx
c0027c16:	5d                   	pop    ebp
c0027c17:	c3                   	ret    

c0027c18 <__cmpsf2>:
c0027c18:	55                   	push   ebp
c0027c19:	89 e5                	mov    ebp,esp
c0027c1b:	57                   	push   edi
c0027c1c:	56                   	push   esi
c0027c1d:	53                   	push   ebx
c0027c1e:	83 ec 24             	sub    esp,0x24
c0027c21:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c24:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c27:	e8 4f 10 00 00       	call   c0028c7b <__truncdfsf2>
c0027c2c:	5a                   	pop    edx
c0027c2d:	59                   	pop    ecx
c0027c2e:	89 c3                	mov    ebx,eax
c0027c30:	c1 e8 17             	shr    eax,0x17
c0027c33:	0f b6 f0             	movzx  esi,al
c0027c36:	89 d8                	mov    eax,ebx
c0027c38:	c1 e8 1f             	shr    eax,0x1f
c0027c3b:	31 c6                	xor    esi,eax
c0027c3d:	c1 e3 08             	shl    ebx,0x8
c0027c40:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c43:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c46:	e8 30 10 00 00       	call   c0028c7b <__truncdfsf2>
c0027c4b:	83 c4 10             	add    esp,0x10
c0027c4e:	89 c1                	mov    ecx,eax
c0027c50:	c1 e9 17             	shr    ecx,0x17
c0027c53:	0f b6 c9             	movzx  ecx,cl
c0027c56:	89 c7                	mov    edi,eax
c0027c58:	c1 ef 1f             	shr    edi,0x1f
c0027c5b:	89 ca                	mov    edx,ecx
c0027c5d:	31 fa                	xor    edx,edi
c0027c5f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c62:	c1 e0 08             	shl    eax,0x8
c0027c65:	89 c2                	mov    edx,eax
c0027c67:	89 d8                	mov    eax,ebx
c0027c69:	09 d0                	or     eax,edx
c0027c6b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c70:	09 f0                	or     eax,esi
c0027c72:	75 08                	jne    c0027c7c <__cmpsf2+0x64>
c0027c74:	31 c0                	xor    eax,eax
c0027c76:	39 f9                	cmp    ecx,edi
c0027c78:	75 0c                	jne    c0027c86 <__cmpsf2+0x6e>
c0027c7a:	eb 29                	jmp    c0027ca5 <__cmpsf2+0x8d>
c0027c7c:	b8 01 00 00 00       	mov    eax,0x1
c0027c81:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027c84:	7f 1f                	jg     c0027ca5 <__cmpsf2+0x8d>
c0027c86:	83 c8 ff             	or     eax,0xffffffff
c0027c89:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027c8c:	7c 17                	jl     c0027ca5 <__cmpsf2+0x8d>
c0027c8e:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027c94:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027c9a:	b8 01 00 00 00       	mov    eax,0x1
c0027c9f:	39 d3                	cmp    ebx,edx
c0027ca1:	77 02                	ja     c0027ca5 <__cmpsf2+0x8d>
c0027ca3:	19 c0                	sbb    eax,eax
c0027ca5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027ca8:	5b                   	pop    ebx
c0027ca9:	5e                   	pop    esi
c0027caa:	5f                   	pop    edi
c0027cab:	5d                   	pop    ebp
c0027cac:	c3                   	ret    

c0027cad <__eqsf2>:
c0027cad:	55                   	push   ebp
c0027cae:	89 e5                	mov    ebp,esp
c0027cb0:	83 ec 24             	sub    esp,0x24
c0027cb3:	6a 01                	push   0x1
c0027cb5:	83 ec 0c             	sub    esp,0xc
c0027cb8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cbb:	e8 df 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027cc0:	83 c4 10             	add    esp,0x10
c0027cc3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027cc6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027cc9:	52                   	push   edx
c0027cca:	50                   	push   eax
c0027ccb:	50                   	push   eax
c0027ccc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027ccf:	e8 cb 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027cd4:	59                   	pop    ecx
c0027cd5:	59                   	pop    ecx
c0027cd6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027cd9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027cdc:	52                   	push   edx
c0027cdd:	50                   	push   eax
c0027cde:	e8 35 ff ff ff       	call   c0027c18 <__cmpsf2>
c0027ce3:	83 c4 20             	add    esp,0x20
c0027ce6:	c9                   	leave  
c0027ce7:	c3                   	ret    

c0027ce8 <__nesf2>:
c0027ce8:	eb c3                	jmp    c0027cad <__eqsf2>

c0027cea <__gtsf2>:
c0027cea:	55                   	push   ebp
c0027ceb:	89 e5                	mov    ebp,esp
c0027ced:	83 ec 24             	sub    esp,0x24
c0027cf0:	6a ff                	push   0xffffffff
c0027cf2:	83 ec 0c             	sub    esp,0xc
c0027cf5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cf8:	e8 a2 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027cfd:	83 c4 10             	add    esp,0x10
c0027d00:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d03:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d06:	52                   	push   edx
c0027d07:	50                   	push   eax
c0027d08:	50                   	push   eax
c0027d09:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d0c:	e8 8e 10 00 00       	call   c0028d9f <__extendsfdf2>
c0027d11:	59                   	pop    ecx
c0027d12:	59                   	pop    ecx
c0027d13:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d16:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d19:	52                   	push   edx
c0027d1a:	50                   	push   eax
c0027d1b:	e8 f8 fe ff ff       	call   c0027c18 <__cmpsf2>
c0027d20:	83 c4 20             	add    esp,0x20
c0027d23:	c9                   	leave  
c0027d24:	c3                   	ret    

c0027d25 <__gesf2>:
c0027d25:	eb c3                	jmp    c0027cea <__gtsf2>

c0027d27 <__ltsf2>:
c0027d27:	eb 84                	jmp    c0027cad <__eqsf2>

c0027d29 <__lesf2>:
c0027d29:	eb 82                	jmp    c0027cad <__eqsf2>

c0027d2b <__adddf3>:
c0027d2b:	55                   	push   ebp
c0027d2c:	89 e5                	mov    ebp,esp
c0027d2e:	57                   	push   edi
c0027d2f:	56                   	push   esi
c0027d30:	53                   	push   ebx
c0027d31:	83 ec 24             	sub    esp,0x24
c0027d34:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d37:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d3a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d3d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d40:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d43:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d46:	89 c8                	mov    eax,ecx
c0027d48:	89 ce                	mov    esi,ecx
c0027d4a:	c1 fe 14             	sar    esi,0x14
c0027d4d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027d50:	89 fb                	mov    ebx,edi
c0027d52:	89 fa                	mov    edx,edi
c0027d54:	c1 e2 0b             	shl    edx,0xb
c0027d57:	c1 e0 0b             	shl    eax,0xb
c0027d5a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d5f:	c1 eb 15             	shr    ebx,0x15
c0027d62:	09 d8                	or     eax,ebx
c0027d64:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d67:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027d6a:	c1 fe 14             	sar    esi,0x14
c0027d6d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027d70:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027d73:	89 f3                	mov    ebx,esi
c0027d75:	c1 e3 0b             	shl    ebx,0xb
c0027d78:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d7b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d7e:	c1 e3 0b             	shl    ebx,0xb
c0027d81:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027d87:	c1 ee 15             	shr    esi,0x15
c0027d8a:	09 f3                	or     ebx,esi
c0027d8c:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027d8f:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027d92:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027d95:	0f 88 5f 02 00 00    	js     c0027ffa <__adddf3+0x2cf>
c0027d9b:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027d9e:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027da1:	85 db                	test   ebx,ebx
c0027da3:	0f 8e c7 00 00 00    	jle    c0027e70 <__adddf3+0x145>
c0027da9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027db0:	75 1a                	jne    c0027dcc <__adddf3+0xa1>
c0027db2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027db5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027db8:	0f 84 b2 05 00 00    	je     c0028370 <__adddf3+0x645>
c0027dbe:	4b                   	dec    ebx
c0027dbf:	75 23                	jne    c0027de4 <__adddf3+0xb9>
c0027dc1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027dc4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027dc7:	e9 99 00 00 00       	jmp    c0027e65 <__adddf3+0x13a>
c0027dcc:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027dcf:	f7 d6                	not    esi
c0027dd1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027dd7:	0f 84 93 05 00 00    	je     c0028370 <__adddf3+0x645>
c0027ddd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027de4:	83 fb 1f             	cmp    ebx,0x1f
c0027de7:	7e 42                	jle    c0027e2b <__adddf3+0x100>
c0027de9:	83 fb 3f             	cmp    ebx,0x3f
c0027dec:	0f 8f 7e 05 00 00    	jg     c0028370 <__adddf3+0x645>
c0027df2:	83 e3 1f             	and    ebx,0x1f
c0027df5:	89 d9                	mov    ecx,ebx
c0027df7:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027dfa:	d3 ef                	shr    edi,cl
c0027dfc:	31 db                	xor    ebx,ebx
c0027dfe:	85 c9                	test   ecx,ecx
c0027e00:	74 15                	je     c0027e17 <__adddf3+0xec>
c0027e02:	be 20 00 00 00       	mov    esi,0x20
c0027e07:	29 ce                	sub    esi,ecx
c0027e09:	89 f1                	mov    ecx,esi
c0027e0b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e0e:	d3 e6                	shl    esi,cl
c0027e10:	31 db                	xor    ebx,ebx
c0027e12:	85 f6                	test   esi,esi
c0027e14:	0f 95 c3             	setne  bl
c0027e17:	31 c9                	xor    ecx,ecx
c0027e19:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e1d:	0f 95 c1             	setne  cl
c0027e20:	09 cf                	or     edi,ecx
c0027e22:	09 fb                	or     ebx,edi
c0027e24:	01 da                	add    edx,ebx
c0027e26:	83 d0 00             	adc    eax,0x0
c0027e29:	eb 3a                	jmp    c0027e65 <__adddf3+0x13a>
c0027e2b:	bf 20 00 00 00       	mov    edi,0x20
c0027e30:	29 df                	sub    edi,ebx
c0027e32:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e35:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e38:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e3b:	d3 e6                	shl    esi,cl
c0027e3d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e40:	88 d9                	mov    cl,bl
c0027e42:	d3 ef                	shr    edi,cl
c0027e44:	09 fe                	or     esi,edi
c0027e46:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e49:	88 d9                	mov    cl,bl
c0027e4b:	d3 ef                	shr    edi,cl
c0027e4d:	89 fb                	mov    ebx,edi
c0027e4f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e52:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e55:	d3 e7                	shl    edi,cl
c0027e57:	85 ff                	test   edi,edi
c0027e59:	0f 95 c1             	setne  cl
c0027e5c:	0f b6 c9             	movzx  ecx,cl
c0027e5f:	09 ce                	or     esi,ecx
c0027e61:	01 f2                	add    edx,esi
c0027e63:	11 d8                	adc    eax,ebx
c0027e65:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e68:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e6b:	e9 52 01 00 00       	jmp    c0027fc2 <__adddf3+0x297>
c0027e70:	0f 84 d5 00 00 00    	je     c0027f4b <__adddf3+0x220>
c0027e76:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e79:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027e7c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e7f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027e82:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027e89:	75 20                	jne    c0027eab <__adddf3+0x180>
c0027e8b:	89 d6                	mov    esi,edx
c0027e8d:	09 c6                	or     esi,eax
c0027e8f:	0f 84 db 04 00 00    	je     c0028370 <__adddf3+0x645>
c0027e95:	4b                   	dec    ebx
c0027e96:	75 29                	jne    c0027ec1 <__adddf3+0x196>
c0027e98:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e9b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027e9e:	01 d1                	add    ecx,edx
c0027ea0:	11 c6                	adc    esi,eax
c0027ea2:	89 f0                	mov    eax,esi
c0027ea4:	89 ca                	mov    edx,ecx
c0027ea6:	e9 17 01 00 00       	jmp    c0027fc2 <__adddf3+0x297>
c0027eab:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027eae:	f7 d6                	not    esi
c0027eb0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027eb6:	0f 84 b4 04 00 00    	je     c0028370 <__adddf3+0x645>
c0027ebc:	0d 00 00 00 80       	or     eax,0x80000000
c0027ec1:	83 fb 1f             	cmp    ebx,0x1f
c0027ec4:	7e 48                	jle    c0027f0e <__adddf3+0x1e3>
c0027ec6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ec9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ecc:	83 fb 3f             	cmp    ebx,0x3f
c0027ecf:	0f 8f 9b 04 00 00    	jg     c0028370 <__adddf3+0x645>
c0027ed5:	83 e3 1f             	and    ebx,0x1f
c0027ed8:	89 d9                	mov    ecx,ebx
c0027eda:	89 c7                	mov    edi,eax
c0027edc:	d3 ef                	shr    edi,cl
c0027ede:	31 db                	xor    ebx,ebx
c0027ee0:	85 c9                	test   ecx,ecx
c0027ee2:	74 12                	je     c0027ef6 <__adddf3+0x1cb>
c0027ee4:	be 20 00 00 00       	mov    esi,0x20
c0027ee9:	29 ce                	sub    esi,ecx
c0027eeb:	89 f1                	mov    ecx,esi
c0027eed:	d3 e0                	shl    eax,cl
c0027eef:	31 db                	xor    ebx,ebx
c0027ef1:	85 c0                	test   eax,eax
c0027ef3:	0f 95 c3             	setne  bl
c0027ef6:	31 c0                	xor    eax,eax
c0027ef8:	85 d2                	test   edx,edx
c0027efa:	0f 95 c0             	setne  al
c0027efd:	09 c7                	or     edi,eax
c0027eff:	09 fb                	or     ebx,edi
c0027f01:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f04:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f07:	01 da                	add    edx,ebx
c0027f09:	83 d6 00             	adc    esi,0x0
c0027f0c:	eb 39                	jmp    c0027f47 <__adddf3+0x21c>
c0027f0e:	be 20 00 00 00       	mov    esi,0x20
c0027f13:	29 de                	sub    esi,ebx
c0027f15:	89 c7                	mov    edi,eax
c0027f17:	89 f1                	mov    ecx,esi
c0027f19:	d3 e7                	shl    edi,cl
c0027f1b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f1e:	89 d7                	mov    edi,edx
c0027f20:	88 d9                	mov    cl,bl
c0027f22:	d3 ef                	shr    edi,cl
c0027f24:	89 f9                	mov    ecx,edi
c0027f26:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f29:	09 cf                	or     edi,ecx
c0027f2b:	88 d9                	mov    cl,bl
c0027f2d:	d3 e8                	shr    eax,cl
c0027f2f:	89 f1                	mov    ecx,esi
c0027f31:	d3 e2                	shl    edx,cl
c0027f33:	85 d2                	test   edx,edx
c0027f35:	0f 95 c2             	setne  dl
c0027f38:	0f b6 d2             	movzx  edx,dl
c0027f3b:	09 d7                	or     edi,edx
c0027f3d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f40:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f43:	01 fa                	add    edx,edi
c0027f45:	11 c6                	adc    esi,eax
c0027f47:	89 f0                	mov    eax,esi
c0027f49:	eb 77                	jmp    c0027fc2 <__adddf3+0x297>
c0027f4b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f4e:	46                   	inc    esi
c0027f4f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027f52:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f58:	75 41                	jne    c0027f9b <__adddf3+0x270>
c0027f5a:	89 d3                	mov    ebx,edx
c0027f5c:	09 c3                	or     ebx,eax
c0027f5e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027f65:	75 27                	jne    c0027f8e <__adddf3+0x263>
c0027f67:	85 db                	test   ebx,ebx
c0027f69:	0f 84 fb 03 00 00    	je     c002836a <__adddf3+0x63f>
c0027f6f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f72:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027f75:	0f 84 f5 03 00 00    	je     c0028370 <__adddf3+0x645>
c0027f7b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f7e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027f81:	85 c0                	test   eax,eax
c0027f83:	0f 89 91 03 00 00    	jns    c002831a <__adddf3+0x5ef>
c0027f89:	e9 85 03 00 00       	jmp    c0028313 <__adddf3+0x5e8>
c0027f8e:	85 db                	test   ebx,ebx
c0027f90:	0f 85 da 03 00 00    	jne    c0028370 <__adddf3+0x645>
c0027f96:	e9 cf 03 00 00       	jmp    c002836a <__adddf3+0x63f>
c0027f9b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f9e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fa1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fa4:	f7 d1                	not    ecx
c0027fa6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fac:	0f 84 70 03 00 00    	je     c0028322 <__adddf3+0x5f7>
c0027fb2:	d1 ea                	shr    edx,1
c0027fb4:	89 c1                	mov    ecx,eax
c0027fb6:	c1 e1 1f             	shl    ecx,0x1f
c0027fb9:	09 ca                	or     edx,ecx
c0027fbb:	d1 e8                	shr    eax,1
c0027fbd:	e9 6f 03 00 00       	jmp    c0028331 <__adddf3+0x606>
c0027fc2:	85 c0                	test   eax,eax
c0027fc4:	0f 89 67 03 00 00    	jns    c0028331 <__adddf3+0x606>
c0027fca:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027fcd:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fd0:	f7 d1                	not    ecx
c0027fd2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fd8:	0f 84 44 03 00 00    	je     c0028322 <__adddf3+0x5f7>
c0027fde:	89 d1                	mov    ecx,edx
c0027fe0:	d1 e9                	shr    ecx,1
c0027fe2:	83 e2 01             	and    edx,0x1
c0027fe5:	09 ca                	or     edx,ecx
c0027fe7:	89 c1                	mov    ecx,eax
c0027fe9:	c1 e1 1f             	shl    ecx,0x1f
c0027fec:	09 ca                	or     edx,ecx
c0027fee:	d1 e8                	shr    eax,1
c0027ff0:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0027ff5:	e9 37 03 00 00       	jmp    c0028331 <__adddf3+0x606>
c0027ffa:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027ffd:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028003:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028006:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028009:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002800f:	29 de                	sub    esi,ebx
c0028011:	85 f6                	test   esi,esi
c0028013:	0f 8e bd 00 00 00    	jle    c00280d6 <__adddf3+0x3ab>
c0028019:	85 db                	test   ebx,ebx
c002801b:	75 17                	jne    c0028034 <__adddf3+0x309>
c002801d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028020:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028023:	0f 84 47 03 00 00    	je     c0028370 <__adddf3+0x645>
c0028029:	4e                   	dec    esi
c002802a:	75 20                	jne    c002804c <__adddf3+0x321>
c002802c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002802f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028032:	eb 5b                	jmp    c002808f <__adddf3+0x364>
c0028034:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028037:	f7 d3                	not    ebx
c0028039:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002803f:	0f 84 2b 03 00 00    	je     c0028370 <__adddf3+0x645>
c0028045:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002804c:	83 fe 1f             	cmp    esi,0x1f
c002804f:	7e 49                	jle    c002809a <__adddf3+0x36f>
c0028051:	83 fe 3f             	cmp    esi,0x3f
c0028054:	0f 8f 16 03 00 00    	jg     c0028370 <__adddf3+0x645>
c002805a:	83 e6 1f             	and    esi,0x1f
c002805d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028060:	89 f1                	mov    ecx,esi
c0028062:	d3 ef                	shr    edi,cl
c0028064:	31 db                	xor    ebx,ebx
c0028066:	85 f6                	test   esi,esi
c0028068:	74 13                	je     c002807d <__adddf3+0x352>
c002806a:	b9 20 00 00 00       	mov    ecx,0x20
c002806f:	29 f1                	sub    ecx,esi
c0028071:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028074:	d3 e6                	shl    esi,cl
c0028076:	31 db                	xor    ebx,ebx
c0028078:	85 f6                	test   esi,esi
c002807a:	0f 95 c3             	setne  bl
c002807d:	31 c9                	xor    ecx,ecx
c002807f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0028083:	0f 95 c1             	setne  cl
c0028086:	09 cf                	or     edi,ecx
c0028088:	09 fb                	or     ebx,edi
c002808a:	29 da                	sub    edx,ebx
c002808c:	83 d8 00             	sbb    eax,0x0
c002808f:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028092:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028095:	e9 aa 01 00 00       	jmp    c0028244 <__adddf3+0x519>
c002809a:	bf 20 00 00 00       	mov    edi,0x20
c002809f:	29 f7                	sub    edi,esi
c00280a1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280a4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280a7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280aa:	d3 e3                	shl    ebx,cl
c00280ac:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280af:	89 f1                	mov    ecx,esi
c00280b1:	d3 ef                	shr    edi,cl
c00280b3:	09 fb                	or     ebx,edi
c00280b5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280b8:	89 f1                	mov    ecx,esi
c00280ba:	d3 ef                	shr    edi,cl
c00280bc:	89 fe                	mov    esi,edi
c00280be:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280c1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280c4:	d3 e7                	shl    edi,cl
c00280c6:	85 ff                	test   edi,edi
c00280c8:	0f 95 c1             	setne  cl
c00280cb:	0f b6 c9             	movzx  ecx,cl
c00280ce:	09 cb                	or     ebx,ecx
c00280d0:	29 da                	sub    edx,ebx
c00280d2:	19 f0                	sbb    eax,esi
c00280d4:	eb b9                	jmp    c002808f <__adddf3+0x364>
c00280d6:	0f 84 cd 00 00 00    	je     c00281a9 <__adddf3+0x47e>
c00280dc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00280df:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00280e2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00280e5:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00280e9:	75 1b                	jne    c0028106 <__adddf3+0x3db>
c00280eb:	89 d6                	mov    esi,edx
c00280ed:	09 c6                	or     esi,eax
c00280ef:	0f 84 7b 02 00 00    	je     c0028370 <__adddf3+0x645>
c00280f5:	4b                   	dec    ebx
c00280f6:	75 24                	jne    c002811c <__adddf3+0x3f1>
c00280f8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280fb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00280fe:	29 d1                	sub    ecx,edx
c0028100:	19 c6                	sbb    esi,eax
c0028102:	89 ca                	mov    edx,ecx
c0028104:	eb 61                	jmp    c0028167 <__adddf3+0x43c>
c0028106:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028109:	f7 d6                	not    esi
c002810b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028111:	0f 84 59 02 00 00    	je     c0028370 <__adddf3+0x645>
c0028117:	0d 00 00 00 80       	or     eax,0x80000000
c002811c:	83 fb 1f             	cmp    ebx,0x1f
c002811f:	7e 4d                	jle    c002816e <__adddf3+0x443>
c0028121:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028124:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028127:	83 fb 3f             	cmp    ebx,0x3f
c002812a:	0f 8f 40 02 00 00    	jg     c0028370 <__adddf3+0x645>
c0028130:	83 e3 1f             	and    ebx,0x1f
c0028133:	89 d9                	mov    ecx,ebx
c0028135:	89 c7                	mov    edi,eax
c0028137:	d3 ef                	shr    edi,cl
c0028139:	31 db                	xor    ebx,ebx
c002813b:	85 c9                	test   ecx,ecx
c002813d:	74 12                	je     c0028151 <__adddf3+0x426>
c002813f:	be 20 00 00 00       	mov    esi,0x20
c0028144:	29 ce                	sub    esi,ecx
c0028146:	89 f1                	mov    ecx,esi
c0028148:	d3 e0                	shl    eax,cl
c002814a:	31 db                	xor    ebx,ebx
c002814c:	85 c0                	test   eax,eax
c002814e:	0f 95 c3             	setne  bl
c0028151:	31 c0                	xor    eax,eax
c0028153:	85 d2                	test   edx,edx
c0028155:	0f 95 c0             	setne  al
c0028158:	09 c7                	or     edi,eax
c002815a:	09 fb                	or     ebx,edi
c002815c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002815f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028162:	29 da                	sub    edx,ebx
c0028164:	83 de 00             	sbb    esi,0x0
c0028167:	89 f0                	mov    eax,esi
c0028169:	e9 d6 00 00 00       	jmp    c0028244 <__adddf3+0x519>
c002816e:	be 20 00 00 00       	mov    esi,0x20
c0028173:	29 de                	sub    esi,ebx
c0028175:	89 c7                	mov    edi,eax
c0028177:	89 f1                	mov    ecx,esi
c0028179:	d3 e7                	shl    edi,cl
c002817b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002817e:	89 d7                	mov    edi,edx
c0028180:	88 d9                	mov    cl,bl
c0028182:	d3 ef                	shr    edi,cl
c0028184:	89 f9                	mov    ecx,edi
c0028186:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028189:	09 cf                	or     edi,ecx
c002818b:	88 d9                	mov    cl,bl
c002818d:	d3 e8                	shr    eax,cl
c002818f:	89 f1                	mov    ecx,esi
c0028191:	d3 e2                	shl    edx,cl
c0028193:	85 d2                	test   edx,edx
c0028195:	0f 95 c2             	setne  dl
c0028198:	0f b6 d2             	movzx  edx,dl
c002819b:	09 d7                	or     edi,edx
c002819d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281a0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281a3:	29 fa                	sub    edx,edi
c00281a5:	19 c6                	sbb    esi,eax
c00281a7:	eb be                	jmp    c0028167 <__adddf3+0x43c>
c00281a9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281ac:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281af:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00281b5:	75 6a                	jne    c0028221 <__adddf3+0x4f6>
c00281b7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00281bb:	75 58                	jne    c0028215 <__adddf3+0x4ea>
c00281bd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00281c0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00281c3:	89 d6                	mov    esi,edx
c00281c5:	09 c6                	or     esi,eax
c00281c7:	75 17                	jne    c00281e0 <__adddf3+0x4b5>
c00281c9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281cc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281cf:	85 db                	test   ebx,ebx
c00281d1:	0f 85 99 01 00 00    	jne    c0028370 <__adddf3+0x645>
c00281d7:	31 ff                	xor    edi,edi
c00281d9:	31 c9                	xor    ecx,ecx
c00281db:	e9 90 01 00 00       	jmp    c0028370 <__adddf3+0x645>
c00281e0:	85 db                	test   ebx,ebx
c00281e2:	0f 84 88 01 00 00    	je     c0028370 <__adddf3+0x645>
c00281e8:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00281eb:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00281ee:	85 c0                	test   eax,eax
c00281f0:	79 10                	jns    c0028202 <__adddf3+0x4d7>
c00281f2:	31 c9                	xor    ecx,ecx
c00281f4:	f7 da                	neg    edx
c00281f6:	0f 95 c1             	setne  cl
c00281f9:	01 c8                	add    eax,ecx
c00281fb:	f7 d8                	neg    eax
c00281fd:	e9 2f 01 00 00       	jmp    c0028331 <__adddf3+0x606>
c0028202:	31 ff                	xor    edi,edi
c0028204:	31 c9                	xor    ecx,ecx
c0028206:	89 c3                	mov    ebx,eax
c0028208:	09 d3                	or     ebx,edx
c002820a:	0f 84 60 01 00 00    	je     c0028370 <__adddf3+0x645>
c0028210:	e9 05 01 00 00       	jmp    c002831a <__adddf3+0x5ef>
c0028215:	31 ff                	xor    edi,edi
c0028217:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002821c:	e9 4f 01 00 00       	jmp    c0028370 <__adddf3+0x645>
c0028221:	89 c1                	mov    ecx,eax
c0028223:	89 d0                	mov    eax,edx
c0028225:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028228:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002822b:	89 ca                	mov    edx,ecx
c002822d:	85 c9                	test   ecx,ecx
c002822f:	79 2c                	jns    c002825d <__adddf3+0x532>
c0028231:	31 c9                	xor    ecx,ecx
c0028233:	f7 d8                	neg    eax
c0028235:	0f 95 c1             	setne  cl
c0028238:	01 ca                	add    edx,ecx
c002823a:	f7 da                	neg    edx
c002823c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002823f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028242:	eb 19                	jmp    c002825d <__adddf3+0x532>
c0028244:	85 c0                	test   eax,eax
c0028246:	0f 89 e5 00 00 00    	jns    c0028331 <__adddf3+0x606>
c002824c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028251:	89 c1                	mov    ecx,eax
c0028253:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028256:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028259:	89 d0                	mov    eax,edx
c002825b:	89 ca                	mov    edx,ecx
c002825d:	85 d2                	test   edx,edx
c002825f:	74 59                	je     c00282ba <__adddf3+0x58f>
c0028261:	0f bd da             	bsr    ebx,edx
c0028264:	83 f3 1f             	xor    ebx,0x1f
c0028267:	88 d9                	mov    cl,bl
c0028269:	d3 e2                	shl    edx,cl
c002826b:	bf 20 00 00 00       	mov    edi,0x20
c0028270:	89 f9                	mov    ecx,edi
c0028272:	29 d9                	sub    ecx,ebx
c0028274:	89 c6                	mov    esi,eax
c0028276:	d3 ee                	shr    esi,cl
c0028278:	09 d6                	or     esi,edx
c002827a:	88 d9                	mov    cl,bl
c002827c:	d3 e0                	shl    eax,cl
c002827e:	89 c2                	mov    edx,eax
c0028280:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028283:	25 ff 07 00 00       	and    eax,0x7ff
c0028288:	39 d8                	cmp    eax,ebx
c002828a:	7f 22                	jg     c00282ae <__adddf3+0x583>
c002828c:	29 c3                	sub    ebx,eax
c002828e:	43                   	inc    ebx
c002828f:	88 d9                	mov    cl,bl
c0028291:	d3 ea                	shr    edx,cl
c0028293:	29 df                	sub    edi,ebx
c0028295:	89 f9                	mov    ecx,edi
c0028297:	89 f0                	mov    eax,esi
c0028299:	d3 e0                	shl    eax,cl
c002829b:	09 c2                	or     edx,eax
c002829d:	89 f0                	mov    eax,esi
c002829f:	88 d9                	mov    cl,bl
c00282a1:	d3 e8                	shr    eax,cl
c00282a3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282a6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00282ac:	eb 6f                	jmp    c002831d <__adddf3+0x5f2>
c00282ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282b1:	29 d8                	sub    eax,ebx
c00282b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00282b6:	89 f0                	mov    eax,esi
c00282b8:	eb 59                	jmp    c0028313 <__adddf3+0x5e8>
c00282ba:	85 c0                	test   eax,eax
c00282bc:	74 6a                	je     c0028328 <__adddf3+0x5fd>
c00282be:	0f bd c8             	bsr    ecx,eax
c00282c1:	83 f1 1f             	xor    ecx,0x1f
c00282c4:	d3 e0                	shl    eax,cl
c00282c6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282c9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282cf:	83 c1 20             	add    ecx,0x20
c00282d2:	39 cb                	cmp    ebx,ecx
c00282d4:	7f 35                	jg     c002830b <__adddf3+0x5e0>
c00282d6:	29 d9                	sub    ecx,ebx
c00282d8:	8d 71 01             	lea    esi,[ecx+0x1]
c00282db:	83 fe 1f             	cmp    esi,0x1f
c00282de:	7e 09                	jle    c00282e9 <__adddf3+0x5be>
c00282e0:	83 e9 1f             	sub    ecx,0x1f
c00282e3:	d3 e8                	shr    eax,cl
c00282e5:	89 c3                	mov    ebx,eax
c00282e7:	eb 11                	jmp    c00282fa <__adddf3+0x5cf>
c00282e9:	b9 20 00 00 00       	mov    ecx,0x20
c00282ee:	29 f1                	sub    ecx,esi
c00282f0:	89 c3                	mov    ebx,eax
c00282f2:	d3 e3                	shl    ebx,cl
c00282f4:	89 f1                	mov    ecx,esi
c00282f6:	d3 e8                	shr    eax,cl
c00282f8:	89 c2                	mov    edx,eax
c00282fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282fd:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028302:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028305:	89 d0                	mov    eax,edx
c0028307:	89 da                	mov    edx,ebx
c0028309:	eb 26                	jmp    c0028331 <__adddf3+0x606>
c002830b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002830e:	29 cf                	sub    edi,ecx
c0028310:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028313:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028318:	eb 17                	jmp    c0028331 <__adddf3+0x606>
c002831a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002831d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028320:	eb 0f                	jmp    c0028331 <__adddf3+0x606>
c0028322:	31 d2                	xor    edx,edx
c0028324:	31 c0                	xor    eax,eax
c0028326:	eb 09                	jmp    c0028331 <__adddf3+0x606>
c0028328:	89 c2                	mov    edx,eax
c002832a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028331:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028334:	c1 e1 14             	shl    ecx,0x14
c0028337:	89 c3                	mov    ebx,eax
c0028339:	c1 eb 0b             	shr    ebx,0xb
c002833c:	09 d9                	or     ecx,ebx
c002833e:	89 d3                	mov    ebx,edx
c0028340:	c1 eb 0b             	shr    ebx,0xb
c0028343:	c1 e0 15             	shl    eax,0x15
c0028346:	09 d8                	or     eax,ebx
c0028348:	89 c7                	mov    edi,eax
c002834a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028350:	0f 95 c0             	setne  al
c0028353:	89 c6                	mov    esi,eax
c0028355:	09 f3                	or     ebx,esi
c0028357:	83 e3 01             	and    ebx,0x1
c002835a:	c1 ea 0a             	shr    edx,0xa
c002835d:	21 da                	and    edx,ebx
c002835f:	89 f8                	mov    eax,edi
c0028361:	01 d0                	add    eax,edx
c0028363:	83 d1 00             	adc    ecx,0x0
c0028366:	89 c7                	mov    edi,eax
c0028368:	eb 06                	jmp    c0028370 <__adddf3+0x645>
c002836a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002836d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028370:	89 f8                	mov    eax,edi
c0028372:	89 ca                	mov    edx,ecx
c0028374:	83 c4 24             	add    esp,0x24
c0028377:	5b                   	pop    ebx
c0028378:	5e                   	pop    esi
c0028379:	5f                   	pop    edi
c002837a:	5d                   	pop    ebp
c002837b:	c3                   	ret    

c002837c <__subdf3>:
c002837c:	55                   	push   ebp
c002837d:	89 e5                	mov    ebp,esp
c002837f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0028382:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028385:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002838b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002838e:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0028391:	5d                   	pop    ebp
c0028392:	e9 94 f9 ff ff       	jmp    c0027d2b <__adddf3>

c0028397 <__negdf2>:
c0028397:	55                   	push   ebp
c0028398:	89 e5                	mov    ebp,esp
c002839a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002839d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283a0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283a6:	5d                   	pop    ebp
c00283a7:	c3                   	ret    

c00283a8 <__muldf3>:
c00283a8:	55                   	push   ebp
c00283a9:	89 e5                	mov    ebp,esp
c00283ab:	57                   	push   edi
c00283ac:	56                   	push   esi
c00283ad:	53                   	push   ebx
c00283ae:	83 ec 24             	sub    esp,0x24
c00283b1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00283b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00283b7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283ba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283bd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00283c0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00283c3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283c6:	89 c8                	mov    eax,ecx
c00283c8:	c1 f8 14             	sar    eax,0x14
c00283cb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00283ce:	89 f8                	mov    eax,edi
c00283d0:	89 fb                	mov    ebx,edi
c00283d2:	c1 e3 0b             	shl    ebx,0xb
c00283d5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00283d8:	c1 e1 0b             	shl    ecx,0xb
c00283db:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c00283e1:	c1 e8 15             	shr    eax,0x15
c00283e4:	09 c1                	or     ecx,eax
c00283e6:	89 d6                	mov    esi,edx
c00283e8:	89 d0                	mov    eax,edx
c00283ea:	c1 f8 14             	sar    eax,0x14
c00283ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00283f0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00283f3:	89 c3                	mov    ebx,eax
c00283f5:	c1 e3 0b             	shl    ebx,0xb
c00283f8:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00283fb:	c1 e6 0b             	shl    esi,0xb
c00283fe:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028404:	c1 e8 15             	shr    eax,0x15
c0028407:	09 c6                	or     esi,eax
c0028409:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002840c:	25 ff 07 00 00       	and    eax,0x7ff
c0028411:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028414:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028417:	25 ff 07 00 00       	and    eax,0x7ff
c002841c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002841f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028422:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028425:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002842c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002842f:	40                   	inc    eax
c0028430:	a9 fe 07 00 00       	test   eax,0x7fe
c0028435:	0f 85 8d 00 00 00    	jne    c00284c8 <__muldf3+0x120>
c002843b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002843e:	09 c8                	or     eax,ecx
c0028440:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028444:	74 44                	je     c002848a <__muldf3+0xe2>
c0028446:	85 c0                	test   eax,eax
c0028448:	0f 85 31 02 00 00    	jne    c002867f <__muldf3+0x2d7>
c002844e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028451:	40                   	inc    eax
c0028452:	a9 fe 07 00 00       	test   eax,0x7fe
c0028457:	75 13                	jne    c002846c <__muldf3+0xc4>
c0028459:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002845c:	09 f1                	or     ecx,esi
c002845e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028462:	74 22                	je     c0028486 <__muldf3+0xde>
c0028464:	85 c9                	test   ecx,ecx
c0028466:	0f 85 0d 02 00 00    	jne    c0028679 <__muldf3+0x2d1>
c002846c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028470:	0f 89 09 02 00 00    	jns    c002867f <__muldf3+0x2d7>
c0028476:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028479:	05 00 00 00 80       	add    eax,0x80000000
c002847e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028481:	e9 f9 01 00 00       	jmp    c002867f <__muldf3+0x2d7>
c0028486:	85 c9                	test   ecx,ecx
c0028488:	eb 2e                	jmp    c00284b8 <__muldf3+0x110>
c002848a:	85 c0                	test   eax,eax
c002848c:	74 20                	je     c00284ae <__muldf3+0x106>
c002848e:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0028491:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028494:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0028497:	c1 ef 1f             	shr    edi,0x1f
c002849a:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c002849d:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00284a0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00284a3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284a6:	09 f9                	or     ecx,edi
c00284a8:	78 1e                	js     c00284c8 <__muldf3+0x120>
c00284aa:	89 c3                	mov    ebx,eax
c00284ac:	eb e0                	jmp    c002848e <__muldf3+0xe6>
c00284ae:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284b1:	f7 d0                	not    eax
c00284b3:	a9 ff 07 00 00       	test   eax,0x7ff
c00284b8:	75 b2                	jne    c002846c <__muldf3+0xc4>
c00284ba:	31 ff                	xor    edi,edi
c00284bc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00284c3:	e9 b7 01 00 00       	jmp    c002867f <__muldf3+0x2d7>
c00284c8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284cb:	40                   	inc    eax
c00284cc:	a9 fe 07 00 00       	test   eax,0x7fe
c00284d1:	75 57                	jne    c002852a <__muldf3+0x182>
c00284d3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00284d6:	09 f0                	or     eax,esi
c00284d8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284dc:	74 23                	je     c0028501 <__muldf3+0x159>
c00284de:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c00284e2:	0f 89 91 01 00 00    	jns    c0028679 <__muldf3+0x2d1>
c00284e8:	85 c0                	test   eax,eax
c00284ea:	0f 85 89 01 00 00    	jne    c0028679 <__muldf3+0x2d1>
c00284f0:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00284f3:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c00284f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284fc:	e9 7e 01 00 00       	jmp    c002867f <__muldf3+0x2d7>
c0028501:	85 c0                	test   eax,eax
c0028503:	75 0c                	jne    c0028511 <__muldf3+0x169>
c0028505:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028509:	0f 89 6a 01 00 00    	jns    c0028679 <__muldf3+0x2d1>
c002850f:	eb df                	jmp    c00284f0 <__muldf3+0x148>
c0028511:	01 f6                	add    esi,esi
c0028513:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028516:	c1 ea 1f             	shr    edx,0x1f
c0028519:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002851c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002851f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028522:	09 d6                	or     esi,edx
c0028524:	78 04                	js     c002852a <__muldf3+0x182>
c0028526:	89 c3                	mov    ebx,eax
c0028528:	eb e7                	jmp    c0028511 <__muldf3+0x169>
c002852a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028530:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028536:	89 c8                	mov    eax,ecx
c0028538:	f7 e6                	mul    esi
c002853a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002853d:	89 c7                	mov    edi,eax
c002853f:	89 c8                	mov    eax,ecx
c0028541:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028544:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028547:	89 c1                	mov    ecx,eax
c0028549:	89 f0                	mov    eax,esi
c002854b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002854e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028551:	89 c6                	mov    esi,eax
c0028553:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028556:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028559:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002855c:	31 c0                	xor    eax,eax
c002855e:	01 f1                	add    ecx,esi
c0028560:	0f 92 c0             	setb   al
c0028563:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028566:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028569:	83 d6 00             	adc    esi,0x0
c002856c:	01 c7                	add    edi,eax
c002856e:	83 d6 00             	adc    esi,0x0
c0028571:	01 ca                	add    edx,ecx
c0028573:	0f 92 c1             	setb   cl
c0028576:	0f b6 c9             	movzx  ecx,cl
c0028579:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002857c:	83 d6 00             	adc    esi,0x0
c002857f:	01 cf                	add    edi,ecx
c0028581:	83 d6 00             	adc    esi,0x0
c0028584:	31 c9                	xor    ecx,ecx
c0028586:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0028589:	0f 95 c1             	setne  cl
c002858c:	09 cf                	or     edi,ecx
c002858e:	85 f6                	test   esi,esi
c0028590:	78 0c                	js     c002859e <__muldf3+0x1f6>
c0028592:	01 f6                	add    esi,esi
c0028594:	89 f8                	mov    eax,edi
c0028596:	c1 e8 1f             	shr    eax,0x1f
c0028599:	09 c6                	or     esi,eax
c002859b:	01 ff                	add    edi,edi
c002859d:	4b                   	dec    ebx
c002859e:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00285a4:	0f 8f 85 00 00 00    	jg     c002862f <__muldf3+0x287>
c00285aa:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00285b0:	85 db                	test   ebx,ebx
c00285b2:	0f 8f 84 00 00 00    	jg     c002863c <__muldf3+0x294>
c00285b8:	83 fb cc             	cmp    ebx,0xffffffcc
c00285bb:	7c 79                	jl     c0028636 <__muldf3+0x28e>
c00285bd:	ba 01 00 00 00       	mov    edx,0x1
c00285c2:	29 da                	sub    edx,ebx
c00285c4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00285ca:	83 fa 1f             	cmp    edx,0x1f
c00285cd:	7e 30                	jle    c00285ff <__muldf3+0x257>
c00285cf:	83 fa 20             	cmp    edx,0x20
c00285d2:	75 0b                	jne    c00285df <__muldf3+0x237>
c00285d4:	31 c0                	xor    eax,eax
c00285d6:	85 ff                	test   edi,edi
c00285d8:	0f 95 c0             	setne  al
c00285db:	89 c7                	mov    edi,eax
c00285dd:	eb 1a                	jmp    c00285f9 <__muldf3+0x251>
c00285df:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c00285e2:	89 f0                	mov    eax,esi
c00285e4:	d3 e0                	shl    eax,cl
c00285e6:	09 f8                	or     eax,edi
c00285e8:	0f 95 c0             	setne  al
c00285eb:	0f b6 c0             	movzx  eax,al
c00285ee:	89 c7                	mov    edi,eax
c00285f0:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c00285f5:	29 d9                	sub    ecx,ebx
c00285f7:	d3 ee                	shr    esi,cl
c00285f9:	09 f7                	or     edi,esi
c00285fb:	31 db                	xor    ebx,ebx
c00285fd:	eb 3b                	jmp    c002863a <__muldf3+0x292>
c00285ff:	83 c3 1f             	add    ebx,0x1f
c0028602:	89 f0                	mov    eax,esi
c0028604:	88 d9                	mov    cl,bl
c0028606:	d3 e0                	shl    eax,cl
c0028608:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002860b:	89 f8                	mov    eax,edi
c002860d:	88 d1                	mov    cl,dl
c002860f:	d3 e8                	shr    eax,cl
c0028611:	89 c1                	mov    ecx,eax
c0028613:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028616:	09 c8                	or     eax,ecx
c0028618:	88 d9                	mov    cl,bl
c002861a:	d3 e7                	shl    edi,cl
c002861c:	31 db                	xor    ebx,ebx
c002861e:	85 ff                	test   edi,edi
c0028620:	0f 95 c3             	setne  bl
c0028623:	89 df                	mov    edi,ebx
c0028625:	09 c7                	or     edi,eax
c0028627:	88 d1                	mov    cl,dl
c0028629:	d3 ee                	shr    esi,cl
c002862b:	31 db                	xor    ebx,ebx
c002862d:	eb 0d                	jmp    c002863c <__muldf3+0x294>
c002862f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028634:	eb 02                	jmp    c0028638 <__muldf3+0x290>
c0028636:	31 db                	xor    ebx,ebx
c0028638:	31 ff                	xor    edi,edi
c002863a:	31 f6                	xor    esi,esi
c002863c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002863f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028642:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028647:	09 c3                	or     ebx,eax
c0028649:	c1 e3 14             	shl    ebx,0x14
c002864c:	89 f0                	mov    eax,esi
c002864e:	c1 e8 0b             	shr    eax,0xb
c0028651:	09 c3                	or     ebx,eax
c0028653:	89 f8                	mov    eax,edi
c0028655:	c1 e8 0b             	shr    eax,0xb
c0028658:	c1 e6 15             	shl    esi,0x15
c002865b:	09 c6                	or     esi,eax
c002865d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028663:	0f 95 c1             	setne  cl
c0028666:	09 c8                	or     eax,ecx
c0028668:	83 e0 01             	and    eax,0x1
c002866b:	c1 ef 0a             	shr    edi,0xa
c002866e:	21 c7                	and    edi,eax
c0028670:	01 f7                	add    edi,esi
c0028672:	83 d3 00             	adc    ebx,0x0
c0028675:	89 da                	mov    edx,ebx
c0028677:	eb 03                	jmp    c002867c <__muldf3+0x2d4>
c0028679:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002867c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002867f:	89 f8                	mov    eax,edi
c0028681:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028684:	83 c4 24             	add    esp,0x24
c0028687:	5b                   	pop    ebx
c0028688:	5e                   	pop    esi
c0028689:	5f                   	pop    edi
c002868a:	5d                   	pop    ebp
c002868b:	c3                   	ret    

c002868c <__divdf3>:
c002868c:	55                   	push   ebp
c002868d:	89 e5                	mov    ebp,esp
c002868f:	57                   	push   edi
c0028690:	56                   	push   esi
c0028691:	53                   	push   ebx
c0028692:	83 ec 2c             	sub    esp,0x2c
c0028695:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0028698:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002869b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002869e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286a1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00286a4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286a7:	89 ce                	mov    esi,ecx
c00286a9:	89 c8                	mov    eax,ecx
c00286ab:	c1 f8 14             	sar    eax,0x14
c00286ae:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00286b1:	89 f8                	mov    eax,edi
c00286b3:	89 fb                	mov    ebx,edi
c00286b5:	c1 e3 0b             	shl    ebx,0xb
c00286b8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00286bb:	c1 e6 0b             	shl    esi,0xb
c00286be:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00286c4:	c1 e8 15             	shr    eax,0x15
c00286c7:	09 c6                	or     esi,eax
c00286c9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00286cc:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00286cf:	89 c2                	mov    edx,eax
c00286d1:	c1 fa 14             	sar    edx,0x14
c00286d4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00286d7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00286da:	89 de                	mov    esi,ebx
c00286dc:	c1 e6 0b             	shl    esi,0xb
c00286df:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00286e2:	c1 e0 0b             	shl    eax,0xb
c00286e5:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00286ea:	c1 eb 15             	shr    ebx,0x15
c00286ed:	09 d8                	or     eax,ebx
c00286ef:	89 c2                	mov    edx,eax
c00286f1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00286f4:	25 ff 07 00 00       	and    eax,0x7ff
c00286f9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00286fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00286ff:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028705:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028708:	29 d8                	sub    eax,ebx
c002870a:	05 ff 03 00 00       	add    eax,0x3ff
c002870f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028712:	46                   	inc    esi
c0028713:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028719:	0f 85 a5 00 00 00    	jne    c00287c4 <__divdf3+0x138>
c002871f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028722:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028725:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028729:	74 2a                	je     c0028755 <__divdf3+0xc9>
c002872b:	85 f6                	test   esi,esi
c002872d:	0f 85 cc 02 00 00    	jne    c00289ff <__divdf3+0x373>
c0028733:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028736:	40                   	inc    eax
c0028737:	a9 fe 07 00 00       	test   eax,0x7fe
c002873c:	75 26                	jne    c0028764 <__divdf3+0xd8>
c002873e:	85 db                	test   ebx,ebx
c0028740:	74 22                	je     c0028764 <__divdf3+0xd8>
c0028742:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028745:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028748:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002874b:	09 d0                	or     eax,edx
c002874d:	0f 85 ac 02 00 00    	jne    c00289ff <__divdf3+0x373>
c0028753:	eb 63                	jmp    c00287b8 <__divdf3+0x12c>
c0028755:	85 f6                	test   esi,esi
c0028757:	75 22                	jne    c002877b <__divdf3+0xef>
c0028759:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002875c:	40                   	inc    eax
c002875d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028762:	74 36                	je     c002879a <__divdf3+0x10e>
c0028764:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028768:	0f 89 91 02 00 00    	jns    c00289ff <__divdf3+0x373>
c002876e:	89 f8                	mov    eax,edi
c0028770:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028776:	e9 80 02 00 00       	jmp    c00289fb <__divdf3+0x36f>
c002877b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002877e:	01 f6                	add    esi,esi
c0028780:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028783:	c1 ef 1f             	shr    edi,0x1f
c0028786:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028789:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c002878c:	8d 48 ff             	lea    ecx,[eax-0x1]
c002878f:	09 f7                	or     edi,esi
c0028791:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0028794:	78 2e                	js     c00287c4 <__divdf3+0x138>
c0028796:	89 c8                	mov    eax,ecx
c0028798:	eb e1                	jmp    c002877b <__divdf3+0xef>
c002879a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002879d:	09 d0                	or     eax,edx
c002879f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287a3:	74 0f                	je     c00287b4 <__divdf3+0x128>
c00287a5:	85 c0                	test   eax,eax
c00287a7:	74 bb                	je     c0028764 <__divdf3+0xd8>
c00287a9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287ac:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287af:	e9 4b 02 00 00       	jmp    c00289ff <__divdf3+0x373>
c00287b4:	85 c0                	test   eax,eax
c00287b6:	75 ac                	jne    c0028764 <__divdf3+0xd8>
c00287b8:	31 ff                	xor    edi,edi
c00287ba:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00287bf:	e9 3b 02 00 00       	jmp    c00289ff <__divdf3+0x373>
c00287c4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00287c7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00287ca:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00287d0:	75 6b                	jne    c002883d <__divdf3+0x1b1>
c00287d2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00287d5:	09 d6                	or     esi,edx
c00287d7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287db:	74 28                	je     c0028805 <__divdf3+0x179>
c00287dd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287e0:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287e3:	85 f6                	test   esi,esi
c00287e5:	0f 85 14 02 00 00    	jne    c00289ff <__divdf3+0x373>
c00287eb:	31 ff                	xor    edi,edi
c00287ed:	31 c9                	xor    ecx,ecx
c00287ef:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00287f2:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00287f5:	0f 89 04 02 00 00    	jns    c00289ff <__divdf3+0x373>
c00287fb:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028800:	e9 fa 01 00 00       	jmp    c00289ff <__divdf3+0x373>
c0028805:	85 f6                	test   esi,esi
c0028807:	75 1b                	jne    c0028824 <__divdf3+0x198>
c0028809:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002880c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002880f:	25 00 00 00 80       	and    eax,0x80000000
c0028814:	31 c9                	xor    ecx,ecx
c0028816:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002881b:	89 cf                	mov    edi,ecx
c002881d:	89 c1                	mov    ecx,eax
c002881f:	e9 db 01 00 00       	jmp    c00289ff <__divdf3+0x373>
c0028824:	01 d2                	add    edx,edx
c0028826:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028829:	c1 eb 1f             	shr    ebx,0x1f
c002882c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002882f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028832:	8d 48 01             	lea    ecx,[eax+0x1]
c0028835:	09 da                	or     edx,ebx
c0028837:	78 04                	js     c002883d <__divdf3+0x1b1>
c0028839:	89 c8                	mov    eax,ecx
c002883b:	eb e7                	jmp    c0028824 <__divdf3+0x198>
c002883d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028840:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028846:	81 ca 00 00 00 80    	or     edx,0x80000000
c002884c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002884f:	39 d6                	cmp    esi,edx
c0028851:	77 0d                	ja     c0028860 <__divdf3+0x1d4>
c0028853:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028856:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028859:	72 1b                	jb     c0028876 <__divdf3+0x1ea>
c002885b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002885e:	75 16                	jne    c0028876 <__divdf3+0x1ea>
c0028860:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028863:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028866:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028869:	83 de 00             	sbb    esi,0x0
c002886c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002886f:	ba 01 00 00 00       	mov    edx,0x1
c0028874:	eb 02                	jmp    c0028878 <__divdf3+0x1ec>
c0028876:	31 d2                	xor    edx,edx
c0028878:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002887f:	31 ff                	xor    edi,edi
c0028881:	01 ff                	add    edi,edi
c0028883:	89 d1                	mov    ecx,edx
c0028885:	c1 e9 1f             	shr    ecx,0x1f
c0028888:	09 cf                	or     edi,ecx
c002888a:	8d 1c 12             	lea    ebx,[edx+edx*1]
c002888d:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028890:	89 da                	mov    edx,ebx
c0028892:	89 f3                	mov    ebx,esi
c0028894:	8d 34 36             	lea    esi,[esi+esi*1]
c0028897:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002889a:	c1 e9 1f             	shr    ecx,0x1f
c002889d:	09 ce                	or     esi,ecx
c002889f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288a2:	01 c9                	add    ecx,ecx
c00288a4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00288a7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288aa:	85 db                	test   ebx,ebx
c00288ac:	78 29                	js     c00288d7 <__divdf3+0x24b>
c00288ae:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00288b1:	72 07                	jb     c00288ba <__divdf3+0x22e>
c00288b3:	75 3c                	jne    c00288f1 <__divdf3+0x265>
c00288b5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288b8:	77 37                	ja     c00288f1 <__divdf3+0x265>
c00288ba:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288bd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00288c0:	31 d2                	xor    edx,edx
c00288c2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00288c5:	0f 97 c2             	seta   dl
c00288c8:	29 d6                	sub    esi,edx
c00288ca:	89 d9                	mov    ecx,ebx
c00288cc:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00288cf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288d2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00288d5:	eb 17                	jmp    c00288ee <__divdf3+0x262>
c00288d7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288da:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288dd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288e0:	0f 97 c1             	seta   cl
c00288e3:	0f b6 c9             	movzx  ecx,cl
c00288e6:	29 ce                	sub    esi,ecx
c00288e8:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00288eb:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00288ee:	83 ca 01             	or     edx,0x1
c00288f1:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00288f4:	75 8b                	jne    c0028881 <__divdf3+0x1f5>
c00288f6:	c1 e7 09             	shl    edi,0x9
c00288f9:	89 d1                	mov    ecx,edx
c00288fb:	c1 e9 17             	shr    ecx,0x17
c00288fe:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028901:	09 f3                	or     ebx,esi
c0028903:	0f 95 c3             	setne  bl
c0028906:	0f b6 db             	movzx  ebx,bl
c0028909:	c1 e2 09             	shl    edx,0x9
c002890c:	09 d3                	or     ebx,edx
c002890e:	89 ca                	mov    edx,ecx
c0028910:	09 fa                	or     edx,edi
c0028912:	78 0c                	js     c0028920 <__divdf3+0x294>
c0028914:	01 d2                	add    edx,edx
c0028916:	89 d9                	mov    ecx,ebx
c0028918:	c1 e9 1f             	shr    ecx,0x1f
c002891b:	09 ca                	or     edx,ecx
c002891d:	01 db                	add    ebx,ebx
c002891f:	48                   	dec    eax
c0028920:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028925:	0f 8f 83 00 00 00    	jg     c00289ae <__divdf3+0x322>
c002892b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028931:	85 c0                	test   eax,eax
c0028933:	0f 8f 82 00 00 00    	jg     c00289bb <__divdf3+0x32f>
c0028939:	83 f8 cc             	cmp    eax,0xffffffcc
c002893c:	7c 77                	jl     c00289b5 <__divdf3+0x329>
c002893e:	be 01 00 00 00       	mov    esi,0x1
c0028943:	29 c6                	sub    esi,eax
c0028945:	81 ca 00 00 00 80    	or     edx,0x80000000
c002894b:	83 fe 1f             	cmp    esi,0x1f
c002894e:	7e 2f                	jle    c002897f <__divdf3+0x2f3>
c0028950:	83 fe 20             	cmp    esi,0x20
c0028953:	75 0a                	jne    c002895f <__divdf3+0x2d3>
c0028955:	85 db                	test   ebx,ebx
c0028957:	0f 95 c3             	setne  bl
c002895a:	0f b6 db             	movzx  ebx,bl
c002895d:	eb 1a                	jmp    c0028979 <__divdf3+0x2ed>
c002895f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028962:	89 d7                	mov    edi,edx
c0028964:	d3 e7                	shl    edi,cl
c0028966:	89 f9                	mov    ecx,edi
c0028968:	09 d9                	or     ecx,ebx
c002896a:	0f 95 c3             	setne  bl
c002896d:	0f b6 db             	movzx  ebx,bl
c0028970:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028975:	29 c1                	sub    ecx,eax
c0028977:	d3 ea                	shr    edx,cl
c0028979:	09 d3                	or     ebx,edx
c002897b:	31 c0                	xor    eax,eax
c002897d:	eb 3a                	jmp    c00289b9 <__divdf3+0x32d>
c002897f:	83 c0 1f             	add    eax,0x1f
c0028982:	89 d7                	mov    edi,edx
c0028984:	88 c1                	mov    cl,al
c0028986:	d3 e7                	shl    edi,cl
c0028988:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002898b:	89 df                	mov    edi,ebx
c002898d:	89 f1                	mov    ecx,esi
c002898f:	d3 ef                	shr    edi,cl
c0028991:	89 f9                	mov    ecx,edi
c0028993:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0028996:	09 cf                	or     edi,ecx
c0028998:	88 c1                	mov    cl,al
c002899a:	d3 e3                	shl    ebx,cl
c002899c:	85 db                	test   ebx,ebx
c002899e:	0f 95 c3             	setne  bl
c00289a1:	0f b6 db             	movzx  ebx,bl
c00289a4:	09 fb                	or     ebx,edi
c00289a6:	89 f1                	mov    ecx,esi
c00289a8:	d3 ea                	shr    edx,cl
c00289aa:	31 c0                	xor    eax,eax
c00289ac:	eb 0d                	jmp    c00289bb <__divdf3+0x32f>
c00289ae:	b8 ff 07 00 00       	mov    eax,0x7ff
c00289b3:	eb 02                	jmp    c00289b7 <__divdf3+0x32b>
c00289b5:	31 c0                	xor    eax,eax
c00289b7:	31 db                	xor    ebx,ebx
c00289b9:	31 d2                	xor    edx,edx
c00289bb:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00289be:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00289c1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00289c7:	09 c8                	or     eax,ecx
c00289c9:	c1 e0 14             	shl    eax,0x14
c00289cc:	89 d1                	mov    ecx,edx
c00289ce:	c1 e9 0b             	shr    ecx,0xb
c00289d1:	09 c8                	or     eax,ecx
c00289d3:	89 c6                	mov    esi,eax
c00289d5:	89 d9                	mov    ecx,ebx
c00289d7:	c1 e9 0b             	shr    ecx,0xb
c00289da:	c1 e2 15             	shl    edx,0x15
c00289dd:	09 ca                	or     edx,ecx
c00289df:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00289e5:	0f 95 c0             	setne  al
c00289e8:	09 c1                	or     ecx,eax
c00289ea:	83 e1 01             	and    ecx,0x1
c00289ed:	c1 eb 0a             	shr    ebx,0xa
c00289f0:	21 cb                	and    ebx,ecx
c00289f2:	01 d3                	add    ebx,edx
c00289f4:	89 d8                	mov    eax,ebx
c00289f6:	83 d6 00             	adc    esi,0x0
c00289f9:	89 f2                	mov    edx,esi
c00289fb:	89 c7                	mov    edi,eax
c00289fd:	89 d1                	mov    ecx,edx
c00289ff:	89 f8                	mov    eax,edi
c0028a01:	89 ca                	mov    edx,ecx
c0028a03:	83 c4 2c             	add    esp,0x2c
c0028a06:	5b                   	pop    ebx
c0028a07:	5e                   	pop    esi
c0028a08:	5f                   	pop    edi
c0028a09:	5d                   	pop    ebp
c0028a0a:	c3                   	ret    

c0028a0b <__floatsidf>:
c0028a0b:	55                   	push   ebp
c0028a0c:	89 e5                	mov    ebp,esp
c0028a0e:	56                   	push   esi
c0028a0f:	53                   	push   ebx
c0028a10:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a13:	85 db                	test   ebx,ebx
c0028a15:	7e 15                	jle    c0028a2c <__floatsidf+0x21>
c0028a17:	0f bd cb             	bsr    ecx,ebx
c0028a1a:	83 f1 1f             	xor    ecx,0x1f
c0028a1d:	d3 e3                	shl    ebx,cl
c0028a1f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a25:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a2a:	eb 21                	jmp    c0028a4d <__floatsidf+0x42>
c0028a2c:	b8 00 00 00 00       	mov    eax,0x0
c0028a31:	ba 00 00 00 00       	mov    edx,0x0
c0028a36:	74 2a                	je     c0028a62 <__floatsidf+0x57>
c0028a38:	f7 db                	neg    ebx
c0028a3a:	0f bd cb             	bsr    ecx,ebx
c0028a3d:	83 f1 1f             	xor    ecx,0x1f
c0028a40:	d3 e3                	shl    ebx,cl
c0028a42:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a48:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028a4d:	29 c8                	sub    eax,ecx
c0028a4f:	c1 e0 14             	shl    eax,0x14
c0028a52:	89 c1                	mov    ecx,eax
c0028a54:	89 de                	mov    esi,ebx
c0028a56:	c1 ee 0b             	shr    esi,0xb
c0028a59:	09 f1                	or     ecx,esi
c0028a5b:	89 ca                	mov    edx,ecx
c0028a5d:	c1 e3 15             	shl    ebx,0x15
c0028a60:	89 d8                	mov    eax,ebx
c0028a62:	5b                   	pop    ebx
c0028a63:	5e                   	pop    esi
c0028a64:	5d                   	pop    ebp
c0028a65:	c3                   	ret    

c0028a66 <__floatunsidf>:
c0028a66:	55                   	push   ebp
c0028a67:	89 e5                	mov    ebp,esp
c0028a69:	56                   	push   esi
c0028a6a:	53                   	push   ebx
c0028a6b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a6e:	85 db                	test   ebx,ebx
c0028a70:	74 2a                	je     c0028a9c <__floatunsidf+0x36>
c0028a72:	0f bd cb             	bsr    ecx,ebx
c0028a75:	83 f1 1f             	xor    ecx,0x1f
c0028a78:	d3 e3                	shl    ebx,cl
c0028a7a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a80:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a85:	29 c8                	sub    eax,ecx
c0028a87:	c1 e0 14             	shl    eax,0x14
c0028a8a:	89 c1                	mov    ecx,eax
c0028a8c:	89 de                	mov    esi,ebx
c0028a8e:	c1 ee 0b             	shr    esi,0xb
c0028a91:	09 f1                	or     ecx,esi
c0028a93:	89 ca                	mov    edx,ecx
c0028a95:	c1 e3 15             	shl    ebx,0x15
c0028a98:	89 d8                	mov    eax,ebx
c0028a9a:	eb 04                	jmp    c0028aa0 <__floatunsidf+0x3a>
c0028a9c:	31 c0                	xor    eax,eax
c0028a9e:	31 d2                	xor    edx,edx
c0028aa0:	5b                   	pop    ebx
c0028aa1:	5e                   	pop    esi
c0028aa2:	5d                   	pop    ebp
c0028aa3:	c3                   	ret    

c0028aa4 <__fixdfsi>:
c0028aa4:	55                   	push   ebp
c0028aa5:	89 e5                	mov    ebp,esp
c0028aa7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028aaa:	89 d1                	mov    ecx,edx
c0028aac:	c1 e1 0b             	shl    ecx,0xb
c0028aaf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ab5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028ab8:	c1 e8 15             	shr    eax,0x15
c0028abb:	09 c1                	or     ecx,eax
c0028abd:	c1 fa 14             	sar    edx,0x14
c0028ac0:	78 1f                	js     c0028ae1 <__fixdfsi+0x3d>
c0028ac2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028ac8:	31 c0                	xor    eax,eax
c0028aca:	83 fa 1e             	cmp    edx,0x1e
c0028acd:	77 40                	ja     c0028b0f <__fixdfsi+0x6b>
c0028acf:	89 c8                	mov    eax,ecx
c0028ad1:	0d 00 00 00 80       	or     eax,0x80000000
c0028ad6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028adb:	29 d1                	sub    ecx,edx
c0028add:	d3 e8                	shr    eax,cl
c0028adf:	eb 2e                	jmp    c0028b0f <__fixdfsi+0x6b>
c0028ae1:	31 c0                	xor    eax,eax
c0028ae3:	81 c2 01 04 00 00    	add    edx,0x401
c0028ae9:	78 24                	js     c0028b0f <__fixdfsi+0x6b>
c0028aeb:	83 fa 1e             	cmp    edx,0x1e
c0028aee:	7e 09                	jle    c0028af9 <__fixdfsi+0x55>
c0028af0:	83 fa 1f             	cmp    edx,0x1f
c0028af3:	75 18                	jne    c0028b0d <__fixdfsi+0x69>
c0028af5:	85 c9                	test   ecx,ecx
c0028af7:	75 14                	jne    c0028b0d <__fixdfsi+0x69>
c0028af9:	89 c8                	mov    eax,ecx
c0028afb:	0d 00 00 00 80       	or     eax,0x80000000
c0028b00:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b05:	29 d1                	sub    ecx,edx
c0028b07:	d3 e8                	shr    eax,cl
c0028b09:	f7 d8                	neg    eax
c0028b0b:	eb 02                	jmp    c0028b0f <__fixdfsi+0x6b>
c0028b0d:	31 c0                	xor    eax,eax
c0028b0f:	5d                   	pop    ebp
c0028b10:	c3                   	ret    

c0028b11 <__fixunsdfsi>:
c0028b11:	55                   	push   ebp
c0028b12:	89 e5                	mov    ebp,esp
c0028b14:	53                   	push   ebx
c0028b15:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b18:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b1b:	89 d3                	mov    ebx,edx
c0028b1d:	c1 fb 14             	sar    ebx,0x14
c0028b20:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b26:	31 c0                	xor    eax,eax
c0028b28:	83 fb 1f             	cmp    ebx,0x1f
c0028b2b:	77 1d                	ja     c0028b4a <__fixunsdfsi+0x39>
c0028b2d:	89 d0                	mov    eax,edx
c0028b2f:	c1 e0 0b             	shl    eax,0xb
c0028b32:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b37:	c1 e9 15             	shr    ecx,0x15
c0028b3a:	09 c8                	or     eax,ecx
c0028b3c:	0d 00 00 00 80       	or     eax,0x80000000
c0028b41:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b46:	29 d9                	sub    ecx,ebx
c0028b48:	d3 e8                	shr    eax,cl
c0028b4a:	5b                   	pop    ebx
c0028b4b:	5d                   	pop    ebp
c0028b4c:	c3                   	ret    

c0028b4d <__cmpdf2>:
c0028b4d:	55                   	push   ebp
c0028b4e:	89 e5                	mov    ebp,esp
c0028b50:	57                   	push   edi
c0028b51:	56                   	push   esi
c0028b52:	53                   	push   ebx
c0028b53:	83 ec 0c             	sub    esp,0xc
c0028b56:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028b59:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028b5c:	89 ca                	mov    edx,ecx
c0028b5e:	c1 ea 14             	shr    edx,0x14
c0028b61:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028b67:	89 cb                	mov    ebx,ecx
c0028b69:	c1 fb 1f             	sar    ebx,0x1f
c0028b6c:	31 da                	xor    edx,ebx
c0028b6e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b71:	89 df                	mov    edi,ebx
c0028b73:	c1 e7 0b             	shl    edi,0xb
c0028b76:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028b79:	c1 e1 0b             	shl    ecx,0xb
c0028b7c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028b82:	c1 eb 15             	shr    ebx,0x15
c0028b85:	09 d9                	or     ecx,ebx
c0028b87:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028b8a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028b8d:	89 ce                	mov    esi,ecx
c0028b8f:	c1 ee 14             	shr    esi,0x14
c0028b92:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028b98:	89 cb                	mov    ebx,ecx
c0028b9a:	c1 fb 1f             	sar    ebx,0x1f
c0028b9d:	31 de                	xor    esi,ebx
c0028b9f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028ba2:	89 df                	mov    edi,ebx
c0028ba4:	c1 e7 0b             	shl    edi,0xb
c0028ba7:	c1 e1 0b             	shl    ecx,0xb
c0028baa:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bb0:	c1 eb 15             	shr    ebx,0x15
c0028bb3:	09 d9                	or     ecx,ebx
c0028bb5:	89 d3                	mov    ebx,edx
c0028bb7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bbd:	43                   	inc    ebx
c0028bbe:	83 fb 01             	cmp    ebx,0x1
c0028bc1:	77 08                	ja     c0028bcb <__cmpdf2+0x7e>
c0028bc3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028bc6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028bc9:	75 68                	jne    c0028c33 <__cmpdf2+0xe6>
c0028bcb:	89 f3                	mov    ebx,esi
c0028bcd:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bd3:	43                   	inc    ebx
c0028bd4:	83 fb 01             	cmp    ebx,0x1
c0028bd7:	77 06                	ja     c0028bdf <__cmpdf2+0x92>
c0028bd9:	89 fb                	mov    ebx,edi
c0028bdb:	09 cb                	or     ebx,ecx
c0028bdd:	75 54                	jne    c0028c33 <__cmpdf2+0xe6>
c0028bdf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028be2:	09 f8                	or     eax,edi
c0028be4:	09 c8                	or     eax,ecx
c0028be6:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028be9:	75 12                	jne    c0028bfd <__cmpdf2+0xb0>
c0028beb:	8d 42 01             	lea    eax,[edx+0x1]
c0028bee:	83 f8 01             	cmp    eax,0x1
c0028bf1:	77 0a                	ja     c0028bfd <__cmpdf2+0xb0>
c0028bf3:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028bf6:	31 c0                	xor    eax,eax
c0028bf8:	83 fb 01             	cmp    ebx,0x1
c0028bfb:	76 36                	jbe    c0028c33 <__cmpdf2+0xe6>
c0028bfd:	b8 01 00 00 00       	mov    eax,0x1
c0028c02:	39 f2                	cmp    edx,esi
c0028c04:	7f 2d                	jg     c0028c33 <__cmpdf2+0xe6>
c0028c06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c0b:	7c 26                	jl     c0028c33 <__cmpdf2+0xe6>
c0028c0d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c10:	77 07                	ja     c0028c19 <__cmpdf2+0xcc>
c0028c12:	72 16                	jb     c0028c2a <__cmpdf2+0xdd>
c0028c14:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c17:	76 0a                	jbe    c0028c23 <__cmpdf2+0xd6>
c0028c19:	89 d0                	mov    eax,edx
c0028c1b:	c1 f8 1f             	sar    eax,0x1f
c0028c1e:	83 c8 01             	or     eax,0x1
c0028c21:	eb 10                	jmp    c0028c33 <__cmpdf2+0xe6>
c0028c23:	b8 00 00 00 00       	mov    eax,0x0
c0028c28:	73 09                	jae    c0028c33 <__cmpdf2+0xe6>
c0028c2a:	89 d0                	mov    eax,edx
c0028c2c:	c1 f8 1f             	sar    eax,0x1f
c0028c2f:	83 e0 02             	and    eax,0x2
c0028c32:	48                   	dec    eax
c0028c33:	83 c4 0c             	add    esp,0xc
c0028c36:	5b                   	pop    ebx
c0028c37:	5e                   	pop    esi
c0028c38:	5f                   	pop    edi
c0028c39:	5d                   	pop    ebp
c0028c3a:	c3                   	ret    

c0028c3b <__eqdf2>:
c0028c3b:	55                   	push   ebp
c0028c3c:	89 e5                	mov    ebp,esp
c0028c3e:	50                   	push   eax
c0028c3f:	6a 01                	push   0x1
c0028c41:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c44:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c47:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c4a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c4d:	e8 fb fe ff ff       	call   c0028b4d <__cmpdf2>
c0028c52:	83 c4 18             	add    esp,0x18
c0028c55:	c9                   	leave  
c0028c56:	c3                   	ret    

c0028c57 <__nedf2>:
c0028c57:	eb e2                	jmp    c0028c3b <__eqdf2>

c0028c59 <__gtdf2>:
c0028c59:	55                   	push   ebp
c0028c5a:	89 e5                	mov    ebp,esp
c0028c5c:	50                   	push   eax
c0028c5d:	6a ff                	push   0xffffffff
c0028c5f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c62:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c65:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c6b:	e8 dd fe ff ff       	call   c0028b4d <__cmpdf2>
c0028c70:	83 c4 18             	add    esp,0x18
c0028c73:	c9                   	leave  
c0028c74:	c3                   	ret    

c0028c75 <__gedf2>:
c0028c75:	eb e2                	jmp    c0028c59 <__gtdf2>

c0028c77 <__ltdf2>:
c0028c77:	eb c2                	jmp    c0028c3b <__eqdf2>

c0028c79 <__ledf2>:
c0028c79:	eb c0                	jmp    c0028c3b <__eqdf2>

c0028c7b <__truncdfsf2>:
c0028c7b:	55                   	push   ebp
c0028c7c:	89 e5                	mov    ebp,esp
c0028c7e:	57                   	push   edi
c0028c7f:	56                   	push   esi
c0028c80:	53                   	push   ebx
c0028c81:	83 ec 0c             	sub    esp,0xc
c0028c84:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028c87:	89 d1                	mov    ecx,edx
c0028c89:	c1 f9 14             	sar    ecx,0x14
c0028c8c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028c8f:	89 df                	mov    edi,ebx
c0028c91:	c1 e7 0b             	shl    edi,0xb
c0028c94:	89 d0                	mov    eax,edx
c0028c96:	c1 e0 0b             	shl    eax,0xb
c0028c99:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028c9e:	c1 eb 15             	shr    ebx,0x15
c0028ca1:	09 d8                	or     eax,ebx
c0028ca3:	89 cb                	mov    ebx,ecx
c0028ca5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028cab:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028cb1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028cb7:	0f 86 9e 00 00 00    	jbe    c0028d5b <__truncdfsf2+0xe0>
c0028cbd:	85 db                	test   ebx,ebx
c0028cbf:	75 0a                	jne    c0028ccb <__truncdfsf2+0x50>
c0028cc1:	c1 fa 17             	sar    edx,0x17
c0028cc4:	30 d2                	xor    dl,dl
c0028cc6:	e9 84 00 00 00       	jmp    c0028d4f <__truncdfsf2+0xd4>
c0028ccb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028cd1:	83 fe 83             	cmp    esi,0xffffff83
c0028cd4:	7d 4b                	jge    c0028d21 <__truncdfsf2+0xa6>
c0028cd6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028cdb:	29 f1                	sub    ecx,esi
c0028cdd:	83 f9 1f             	cmp    ecx,0x1f
c0028ce0:	7f 6b                	jg     c0028d4d <__truncdfsf2+0xd2>
c0028ce2:	0d 00 00 00 80       	or     eax,0x80000000
c0028ce7:	89 c3                	mov    ebx,eax
c0028ce9:	d3 eb                	shr    ebx,cl
c0028ceb:	be 01 00 00 00       	mov    esi,0x1
c0028cf0:	d3 e6                	shl    esi,cl
c0028cf2:	4e                   	dec    esi
c0028cf3:	21 f0                	and    eax,esi
c0028cf5:	09 f8                	or     eax,edi
c0028cf7:	0f 95 c0             	setne  al
c0028cfa:	0f b6 c0             	movzx  eax,al
c0028cfd:	09 c3                	or     ebx,eax
c0028cff:	89 d9                	mov    ecx,ebx
c0028d01:	c1 e9 08             	shr    ecx,0x8
c0028d04:	f6 c3 7f             	test   bl,0x7f
c0028d07:	0f 95 c0             	setne  al
c0028d0a:	09 c8                	or     eax,ecx
c0028d0c:	83 e0 01             	and    eax,0x1
c0028d0f:	c1 eb 07             	shr    ebx,0x7
c0028d12:	21 c3                	and    ebx,eax
c0028d14:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d1a:	09 d1                	or     ecx,edx
c0028d1c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d1f:	eb 76                	jmp    c0028d97 <__truncdfsf2+0x11c>
c0028d21:	83 c6 80             	add    esi,0xffffff80
c0028d24:	7e 1d                	jle    c0028d43 <__truncdfsf2+0xc8>
c0028d26:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d2c:	75 0b                	jne    c0028d39 <__truncdfsf2+0xbe>
c0028d2e:	09 f8                	or     eax,edi
c0028d30:	74 09                	je     c0028d3b <__truncdfsf2+0xc0>
c0028d32:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028d37:	eb 02                	jmp    c0028d3b <__truncdfsf2+0xc0>
c0028d39:	31 c0                	xor    eax,eax
c0028d3b:	c1 fa 17             	sar    edx,0x17
c0028d3e:	80 ca ff             	or     dl,0xff
c0028d41:	eb 0e                	jmp    c0028d51 <__truncdfsf2+0xd6>
c0028d43:	c1 fa 1f             	sar    edx,0x1f
c0028d46:	c1 e2 08             	shl    edx,0x8
c0028d49:	09 ca                	or     edx,ecx
c0028d4b:	eb 04                	jmp    c0028d51 <__truncdfsf2+0xd6>
c0028d4d:	31 d2                	xor    edx,edx
c0028d4f:	31 c0                	xor    eax,eax
c0028d51:	c1 e2 17             	shl    edx,0x17
c0028d54:	c1 e8 08             	shr    eax,0x8
c0028d57:	09 d0                	or     eax,edx
c0028d59:	eb 3c                	jmp    c0028d97 <__truncdfsf2+0x11c>
c0028d5b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028d61:	89 ca                	mov    edx,ecx
c0028d63:	c1 fa 0b             	sar    edx,0xb
c0028d66:	c1 e2 08             	shl    edx,0x8
c0028d69:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028d6c:	31 db                	xor    ebx,ebx
c0028d6e:	85 ff                	test   edi,edi
c0028d70:	0f 95 c3             	setne  bl
c0028d73:	09 d8                	or     eax,ebx
c0028d75:	89 c3                	mov    ebx,eax
c0028d77:	c1 eb 08             	shr    ebx,0x8
c0028d7a:	a8 7f                	test   al,0x7f
c0028d7c:	0f 95 c2             	setne  dl
c0028d7f:	89 d6                	mov    esi,edx
c0028d81:	09 de                	or     esi,ebx
c0028d83:	83 e6 01             	and    esi,0x1
c0028d86:	c1 e8 07             	shr    eax,0x7
c0028d89:	21 f0                	and    eax,esi
c0028d8b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028d8e:	09 ca                	or     edx,ecx
c0028d90:	c1 e2 17             	shl    edx,0x17
c0028d93:	09 da                	or     edx,ebx
c0028d95:	01 d0                	add    eax,edx
c0028d97:	83 c4 0c             	add    esp,0xc
c0028d9a:	5b                   	pop    ebx
c0028d9b:	5e                   	pop    esi
c0028d9c:	5f                   	pop    edi
c0028d9d:	5d                   	pop    ebp
c0028d9e:	c3                   	ret    

c0028d9f <__extendsfdf2>:
c0028d9f:	55                   	push   ebp
c0028da0:	89 e5                	mov    ebp,esp
c0028da2:	57                   	push   edi
c0028da3:	56                   	push   esi
c0028da4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028da7:	89 d1                	mov    ecx,edx
c0028da9:	c1 f9 17             	sar    ecx,0x17
c0028dac:	c1 e2 08             	shl    edx,0x8
c0028daf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028db5:	89 c8                	mov    eax,ecx
c0028db7:	80 e4 f8             	and    ah,0xf8
c0028dba:	8d 71 01             	lea    esi,[ecx+0x1]
c0028dbd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028dc3:	75 27                	jne    c0028dec <__extendsfdf2+0x4d>
c0028dc5:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028dcb:	75 18                	jne    c0028de5 <__extendsfdf2+0x46>
c0028dcd:	85 d2                	test   edx,edx
c0028dcf:	74 20                	je     c0028df1 <__extendsfdf2+0x52>
c0028dd1:	41                   	inc    ecx
c0028dd2:	01 d2                	add    edx,edx
c0028dd4:	79 fb                	jns    c0028dd1 <__extendsfdf2+0x32>
c0028dd6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028ddc:	29 c8                	sub    eax,ecx
c0028dde:	05 81 03 00 00       	add    eax,0x381
c0028de3:	eb 0c                	jmp    c0028df1 <__extendsfdf2+0x52>
c0028de5:	05 00 07 00 00       	add    eax,0x700
c0028dea:	eb 05                	jmp    c0028df1 <__extendsfdf2+0x52>
c0028dec:	05 80 03 00 00       	add    eax,0x380
c0028df1:	c1 e0 14             	shl    eax,0x14
c0028df4:	89 c1                	mov    ecx,eax
c0028df6:	89 d0                	mov    eax,edx
c0028df8:	c1 e8 0b             	shr    eax,0xb
c0028dfb:	09 c1                	or     ecx,eax
c0028dfd:	c1 e2 15             	shl    edx,0x15
c0028e00:	89 d0                	mov    eax,edx
c0028e02:	89 ca                	mov    edx,ecx
c0028e04:	5e                   	pop    esi
c0028e05:	5f                   	pop    edi
c0028e06:	5d                   	pop    ebp
c0028e07:	c3                   	ret    
c0028e08:	66 90                	xchg   ax,ax
c0028e0a:	66 90                	xchg   ax,ax
c0028e0c:	66 90                	xchg   ax,ax
c0028e0e:	66 90                	xchg   ax,ax

c0028e10 <fabs>:
c0028e10:	83 ec 0c             	sub    esp,0xc
c0028e13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e17:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e1e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e27:	dd 04 24             	fld    QWORD PTR [esp]
c0028e2a:	83 c4 0c             	add    esp,0xc
c0028e2d:	c3                   	ret    
c0028e2e:	66 90                	xchg   ax,ax

c0028e30 <lrint>:
c0028e30:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028e34:	83 ec 04             	sub    esp,0x4
c0028e37:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e3a:	58                   	pop    eax
c0028e3b:	c3                   	ret    

c0028e3c <lrintf>:
c0028e3c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028e40:	83 ec 04             	sub    esp,0x4
c0028e43:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e46:	58                   	pop    eax
c0028e47:	c3                   	ret    

Disassembly of section .init:

c0028e48 <_init>:
c0028e48:	55                   	push   ebp
c0028e49:	89 e5                	mov    ebp,esp
c0028e4b:	e8 c8 72 fd ff       	call   c0000118 <frame_dummy>
c0028e50:	e8 5b e0 ff ff       	call   c0026eb0 <__do_global_ctors_aux>
c0028e55:	5d                   	pop    ebp
c0028e56:	c3                   	ret    

Disassembly of section .fini:

c0028e57 <_fini>:
c0028e57:	55                   	push   ebp
c0028e58:	89 e5                	mov    ebp,esp
c0028e5a:	e8 49 72 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028e5f:	5d                   	pop    ebp
c0028e60:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028e62 <Computer::~Computer()>:
c0028e62:	83 ec 0c             	sub    esp,0xc
c0028e65:	ba 88 aa 02 c0       	mov    edx,0xc002aa88
c0028e6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e6e:	89 10                	mov    DWORD PTR [eax],edx
c0028e70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e74:	83 ec 0c             	sub    esp,0xc
c0028e77:	50                   	push   eax
c0028e78:	e8 05 ad fe ff       	call   c0013b82 <Device::~Device()>
c0028e7d:	83 c4 10             	add    esp,0x10
c0028e80:	90                   	nop
c0028e81:	83 c4 0c             	add    esp,0xc
c0028e84:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028e86 <Computer::~Computer()>:
c0028e86:	83 ec 0c             	sub    esp,0xc
c0028e89:	83 ec 0c             	sub    esp,0xc
c0028e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e90:	e8 cd ff ff ff       	call   c0028e62 <Computer::~Computer()>
c0028e95:	83 c4 10             	add    esp,0x10
c0028e98:	83 ec 08             	sub    esp,0x8
c0028e9b:	68 ec 01 00 00       	push   0x1ec
c0028ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ea4:	e8 f2 98 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0028ea9:	83 c4 10             	add    esp,0x10
c0028eac:	83 c4 0c             	add    esp,0xc
c0028eaf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028eb0 <idleCommon()>:
c0028eb0:	83 ec 0c             	sub    esp,0xc
c0028eb3:	fa                   	cli    
c0028eb4:	ff 05 68 23 03 c0    	inc    DWORD PTR ds:0xc0032368
c0028eba:	e8 a5 51 ff ff       	call   c001e064 <schedule()>
c0028ebf:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c0028ec4:	48                   	dec    eax
c0028ec5:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c0028eca:	75 01                	jne    c0028ecd <idleCommon()+0x1d>
c0028ecc:	fb                   	sti    
c0028ecd:	83 c4 0c             	add    esp,0xc
c0028ed0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028ed2 <LinkedList<UnixFile>::~LinkedList()>:
c0028ed2:	90                   	nop
c0028ed3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028ed4 <LinkedList<UnixFile>::LinkedList()>:
c0028ed4:	83 ec 0c             	sub    esp,0xc
c0028ed7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028edb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ee1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ee5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ef0:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f10:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f17:	83 ec 0c             	sub    esp,0xc
c0028f1a:	68 fa ac 02 c0       	push   0xc002acfa
c0028f1f:	e8 57 99 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0028f24:	83 c4 10             	add    esp,0x10
c0028f27:	90                   	nop
c0028f28:	83 c4 0c             	add    esp,0xc
c0028f2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f2c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f2c:	83 ec 0c             	sub    esp,0xc
c0028f2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f34:	75 10                	jne    c0028f46 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028f36:	83 ec 0c             	sub    esp,0xc
c0028f39:	68 14 ad 02 c0       	push   0xc002ad14
c0028f3e:	e8 6e 13 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0028f43:	83 c4 10             	add    esp,0x10
c0028f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f4c:	85 c0                	test   eax,eax
c0028f4e:	74 34                	je     c0028f84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f57:	85 c0                	test   eax,eax
c0028f59:	74 29                	je     c0028f84 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f66:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f71:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f7b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f82:	eb 65                	jmp    c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028f84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f88:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f8a:	85 c0                	test   eax,eax
c0028f8c:	75 4b                	jne    c0028fd9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f92:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f95:	85 c0                	test   eax,eax
c0028f97:	75 40                	jne    c0028fd9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f9d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fa1:	89 10                	mov    DWORD PTR [eax],edx
c0028fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fb5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fc3:	85 c0                	test   eax,eax
c0028fc5:	74 22                	je     c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fc7:	83 ec 0c             	sub    esp,0xc
c0028fca:	68 36 ad 02 c0       	push   0xc002ad36
c0028fcf:	e8 dd 12 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0028fd4:	83 c4 10             	add    esp,0x10
c0028fd7:	eb 10                	jmp    c0028fe9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fd9:	83 ec 0c             	sub    esp,0xc
c0028fdc:	68 40 ad 02 c0       	push   0xc002ad40
c0028fe1:	e8 cb 12 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0028fe6:	83 c4 10             	add    esp,0x10
c0028fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ff0:	8d 50 01             	lea    edx,[eax+0x1]
c0028ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ff7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028ffa:	90                   	nop
c0028ffb:	83 c4 0c             	add    esp,0xc
c0028ffe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029000 <LinkedList<UnixFile>::getFirstElement()>:
c0029000:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029004:	8b 00                	mov    eax,DWORD PTR [eax]
c0029006:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029008 <LinkedList<UnixFile>::removeFirst()>:
c0029008:	83 ec 0c             	sub    esp,0xc
c002900b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029011:	85 c0                	test   eax,eax
c0029013:	75 12                	jne    c0029027 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029015:	83 ec 0c             	sub    esp,0xc
c0029018:	68 4c ad 02 c0       	push   0xc002ad4c
c002901d:	e8 8f 12 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0029022:	83 c4 10             	add    esp,0x10
c0029025:	eb 7e                	jmp    c00290a5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029027:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002902e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029031:	85 c0                	test   eax,eax
c0029033:	74 10                	je     c0029045 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029035:	83 ec 0c             	sub    esp,0xc
c0029038:	68 97 ad 02 c0       	push   0xc002ad97
c002903d:	e8 6f 12 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0029042:	83 c4 10             	add    esp,0x10
c0029045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029049:	8b 00                	mov    eax,DWORD PTR [eax]
c002904b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002904e:	85 c0                	test   eax,eax
c0029050:	75 33                	jne    c0029085 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029056:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002905c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029060:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002906b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002906e:	83 f8 01             	cmp    eax,0x1
c0029071:	74 21                	je     c0029094 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029073:	83 ec 0c             	sub    esp,0xc
c0029076:	68 70 ad 02 c0       	push   0xc002ad70
c002907b:	e8 31 12 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0029080:	83 c4 10             	add    esp,0x10
c0029083:	eb 0f                	jmp    c0029094 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029089:	8b 00                	mov    eax,DWORD PTR [eax]
c002908b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002908e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029092:	89 10                	mov    DWORD PTR [eax],edx
c0029094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029098:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002909b:	8d 50 ff             	lea    edx,[eax-0x1]
c002909e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290a5:	83 c4 0c             	add    esp,0xc
c00290a8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00290aa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00290aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00290ae:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290b1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00290b2 <DriverlessDevice::~DriverlessDevice()>:
c00290b2:	ba 3c b5 02 c0       	mov    edx,0xc002b53c
c00290b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290bb:	89 10                	mov    DWORD PTR [eax],edx
c00290bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290c1:	50                   	push   eax
c00290c2:	e8 bb aa fe ff       	call   c0013b82 <Device::~Device()>
c00290c7:	83 c4 04             	add    esp,0x4
c00290ca:	90                   	nop
c00290cb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00290cc <DriverlessDevice::~DriverlessDevice()>:
c00290cc:	83 ec 0c             	sub    esp,0xc
c00290cf:	83 ec 0c             	sub    esp,0xc
c00290d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290d6:	e8 d7 ff ff ff       	call   c00290b2 <DriverlessDevice::~DriverlessDevice()>
c00290db:	83 c4 10             	add    esp,0x10
c00290de:	83 ec 08             	sub    esp,0x8
c00290e1:	68 58 01 00 00       	push   0x158
c00290e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ea:	e8 ac 96 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00290ef:	83 c4 10             	add    esp,0x10
c00290f2:	83 c4 0c             	add    esp,0xc
c00290f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00290f6 <LinkedList<Device>::addElement(Device*)>:
c00290f6:	83 ec 0c             	sub    esp,0xc
c00290f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00290fe:	75 10                	jne    c0029110 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029100:	83 ec 0c             	sub    esp,0xc
c0029103:	68 14 ad 02 c0       	push   0xc002ad14
c0029108:	e8 a4 11 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c002910d:	83 c4 10             	add    esp,0x10
c0029110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029114:	8b 00                	mov    eax,DWORD PTR [eax]
c0029116:	85 c0                	test   eax,eax
c0029118:	74 3a                	je     c0029154 <LinkedList<Device>::addElement(Device*)+0x5e>
c002911a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002911e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029121:	85 c0                	test   eax,eax
c0029123:	74 2f                	je     c0029154 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029129:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002912c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029130:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002913e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029141:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029145:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029148:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029152:	eb 68                	jmp    c00291bc <LinkedList<Device>::addElement(Device*)+0xc6>
c0029154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029158:	8b 00                	mov    eax,DWORD PTR [eax]
c002915a:	85 c0                	test   eax,eax
c002915c:	75 4e                	jne    c00291ac <LinkedList<Device>::addElement(Device*)+0xb6>
c002915e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029162:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029165:	85 c0                	test   eax,eax
c0029167:	75 43                	jne    c00291ac <LinkedList<Device>::addElement(Device*)+0xb6>
c0029169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002916d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029171:	89 10                	mov    DWORD PTR [eax],edx
c0029173:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029177:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002917b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029185:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c002918f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029193:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029196:	85 c0                	test   eax,eax
c0029198:	74 22                	je     c00291bc <LinkedList<Device>::addElement(Device*)+0xc6>
c002919a:	83 ec 0c             	sub    esp,0xc
c002919d:	68 36 ad 02 c0       	push   0xc002ad36
c00291a2:	e8 0a 11 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00291a7:	83 c4 10             	add    esp,0x10
c00291aa:	eb 10                	jmp    c00291bc <LinkedList<Device>::addElement(Device*)+0xc6>
c00291ac:	83 ec 0c             	sub    esp,0xc
c00291af:	68 40 ad 02 c0       	push   0xc002ad40
c00291b4:	e8 f8 10 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00291b9:	83 c4 10             	add    esp,0x10
c00291bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291c3:	8d 50 01             	lea    edx,[eax+0x1]
c00291c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291cd:	90                   	nop
c00291ce:	83 c4 0c             	add    esp,0xc
c00291d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00291d2 <LinkedList<Device>::LinkedList()>:
c00291d2:	83 ec 0c             	sub    esp,0xc
c00291d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00291ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ee:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00291f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029203:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002920a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002920e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029215:	83 ec 0c             	sub    esp,0xc
c0029218:	68 fa ac 02 c0       	push   0xc002acfa
c002921d:	e8 59 96 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c0029222:	83 c4 10             	add    esp,0x10
c0029225:	90                   	nop
c0029226:	83 c4 0c             	add    esp,0xc
c0029229:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002922a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002922a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002922e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029230:	85 c0                	test   eax,eax
c0029232:	75 0e                	jne    c0029242 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029238:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002923b:	85 c0                	test   eax,eax
c002923d:	75 03                	jne    c0029242 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002923f:	b0 01                	mov    al,0x1
c0029241:	c3                   	ret    
c0029242:	b0 00                	mov    al,0x0
c0029244:	90                   	nop
c0029245:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029246 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002924a:	8b 00                	mov    eax,DWORD PTR [eax]
c002924c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002924e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002924e:	83 ec 0c             	sub    esp,0xc
c0029251:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029255:	8b 00                	mov    eax,DWORD PTR [eax]
c0029257:	85 c0                	test   eax,eax
c0029259:	75 15                	jne    c0029270 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002925b:	83 ec 0c             	sub    esp,0xc
c002925e:	68 4c ad 02 c0       	push   0xc002ad4c
c0029263:	e8 49 10 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0029268:	83 c4 10             	add    esp,0x10
c002926b:	e9 88 00 00 00       	jmp    c00292f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029274:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029277:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002927a:	85 c0                	test   eax,eax
c002927c:	0f 95 c0             	setne  al
c002927f:	84 c0                	test   al,al
c0029281:	74 10                	je     c0029293 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0029283:	83 ec 0c             	sub    esp,0xc
c0029286:	68 97 ad 02 c0       	push   0xc002ad97
c002928b:	e8 21 10 ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0029290:	83 c4 10             	add    esp,0x10
c0029293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029297:	8b 00                	mov    eax,DWORD PTR [eax]
c0029299:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002929c:	85 c0                	test   eax,eax
c002929e:	0f 94 c0             	sete   al
c00292a1:	84 c0                	test   al,al
c00292a3:	74 33                	je     c00292d8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00292a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292be:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292c1:	83 f8 01             	cmp    eax,0x1
c00292c4:	74 21                	je     c00292e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292c6:	83 ec 0c             	sub    esp,0xc
c00292c9:	68 70 ad 02 c0       	push   0xc002ad70
c00292ce:	e8 de 0f ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00292d3:	83 c4 10             	add    esp,0x10
c00292d6:	eb 0f                	jmp    c00292e7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00292de:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00292e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292e5:	89 10                	mov    DWORD PTR [eax],edx
c00292e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292ee:	8d 50 ff             	lea    edx,[eax-0x1]
c00292f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292f5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00292f8:	83 c4 0c             	add    esp,0xc
c00292fb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c00292fc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c00292fc:	83 ec 0c             	sub    esp,0xc
c00292ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029304:	75 10                	jne    c0029316 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029306:	83 ec 0c             	sub    esp,0xc
c0029309:	68 14 ad 02 c0       	push   0xc002ad14
c002930e:	e8 9e 0f ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0029313:	83 c4 10             	add    esp,0x10
c0029316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002931a:	8b 00                	mov    eax,DWORD PTR [eax]
c002931c:	85 c0                	test   eax,eax
c002931e:	74 34                	je     c0029354 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029324:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029327:	85 c0                	test   eax,eax
c0029329:	74 29                	je     c0029354 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002932b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002932f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029332:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029336:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029339:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029341:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029348:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002934b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029352:	eb 65                	jmp    c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029358:	8b 00                	mov    eax,DWORD PTR [eax]
c002935a:	85 c0                	test   eax,eax
c002935c:	75 4b                	jne    c00293a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002935e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029362:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029365:	85 c0                	test   eax,eax
c0029367:	75 40                	jne    c00293a9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002936d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029371:	89 10                	mov    DWORD PTR [eax],edx
c0029373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029377:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002937b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002937e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029382:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029385:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002938c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029390:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029393:	85 c0                	test   eax,eax
c0029395:	74 22                	je     c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029397:	83 ec 0c             	sub    esp,0xc
c002939a:	68 36 ad 02 c0       	push   0xc002ad36
c002939f:	e8 0d 0f ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00293a4:	83 c4 10             	add    esp,0x10
c00293a7:	eb 10                	jmp    c00293b9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293a9:	83 ec 0c             	sub    esp,0xc
c00293ac:	68 40 ad 02 c0       	push   0xc002ad40
c00293b1:	e8 fb 0e ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00293b6:	83 c4 10             	add    esp,0x10
c00293b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293bd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293c0:	8d 50 01             	lea    edx,[eax+0x1]
c00293c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293c7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293ca:	90                   	nop
c00293cb:	83 c4 0c             	add    esp,0xc
c00293ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00293d0 <ACPI::~ACPI()>:
c00293d0:	83 ec 0c             	sub    esp,0xc
c00293d3:	ba 0c bf 02 c0       	mov    edx,0xc002bf0c
c00293d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293dc:	89 10                	mov    DWORD PTR [eax],edx
c00293de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e2:	83 ec 0c             	sub    esp,0xc
c00293e5:	50                   	push   eax
c00293e6:	e8 97 a7 fe ff       	call   c0013b82 <Device::~Device()>
c00293eb:	83 c4 10             	add    esp,0x10
c00293ee:	90                   	nop
c00293ef:	83 c4 0c             	add    esp,0xc
c00293f2:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c00293f4 <ACPI::~ACPI()>:
c00293f4:	83 ec 0c             	sub    esp,0xc
c00293f7:	83 ec 0c             	sub    esp,0xc
c00293fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00293fe:	e8 cd ff ff ff       	call   c00293d0 <ACPI::~ACPI()>
c0029403:	83 c4 10             	add    esp,0x10
c0029406:	83 ec 08             	sub    esp,0x8
c0029409:	68 64 12 00 00       	push   0x1264
c002940e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029412:	e8 84 93 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029417:	83 c4 10             	add    esp,0x10
c002941a:	83 c4 0c             	add    esp,0xc
c002941d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002941e <LinkedList<Device>::~LinkedList()>:
c002941e:	90                   	nop
c002941f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029420 <LinkedList<Device>::isEmpty()>:
c0029420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029424:	8b 00                	mov    eax,DWORD PTR [eax]
c0029426:	85 c0                	test   eax,eax
c0029428:	75 0e                	jne    c0029438 <LinkedList<Device>::isEmpty()+0x18>
c002942a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002942e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029431:	85 c0                	test   eax,eax
c0029433:	75 03                	jne    c0029438 <LinkedList<Device>::isEmpty()+0x18>
c0029435:	b0 01                	mov    al,0x1
c0029437:	c3                   	ret    
c0029438:	b0 00                	mov    al,0x0
c002943a:	90                   	nop
c002943b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002943c <LinkedList<Device>::getFirstElement()>:
c002943c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029440:	8b 00                	mov    eax,DWORD PTR [eax]
c0029442:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029444 <LinkedList<Device>::removeFirst()>:
c0029444:	83 ec 0c             	sub    esp,0xc
c0029447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002944b:	8b 00                	mov    eax,DWORD PTR [eax]
c002944d:	85 c0                	test   eax,eax
c002944f:	75 15                	jne    c0029466 <LinkedList<Device>::removeFirst()+0x22>
c0029451:	83 ec 0c             	sub    esp,0xc
c0029454:	68 4c ad 02 c0       	push   0xc002ad4c
c0029459:	e8 53 0e ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c002945e:	83 c4 10             	add    esp,0x10
c0029461:	e9 87 00 00 00       	jmp    c00294ed <LinkedList<Device>::removeFirst()+0xa9>
c0029466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002946d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029473:	85 c0                	test   eax,eax
c0029475:	74 10                	je     c0029487 <LinkedList<Device>::removeFirst()+0x43>
c0029477:	83 ec 0c             	sub    esp,0xc
c002947a:	68 97 ad 02 c0       	push   0xc002ad97
c002947f:	e8 2d 0e ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c0029484:	83 c4 10             	add    esp,0x10
c0029487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948b:	8b 00                	mov    eax,DWORD PTR [eax]
c002948d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029493:	85 c0                	test   eax,eax
c0029495:	75 33                	jne    c00294ca <LinkedList<Device>::removeFirst()+0x86>
c0029497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002949b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294b3:	83 f8 01             	cmp    eax,0x1
c00294b6:	74 24                	je     c00294dc <LinkedList<Device>::removeFirst()+0x98>
c00294b8:	83 ec 0c             	sub    esp,0xc
c00294bb:	68 70 ad 02 c0       	push   0xc002ad70
c00294c0:	e8 ec 0d ff ff       	call   c001a2b1 <Krnl::panic(char const*)>
c00294c5:	83 c4 10             	add    esp,0x10
c00294c8:	eb 12                	jmp    c00294dc <LinkedList<Device>::removeFirst()+0x98>
c00294ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00294d0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00294d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294da:	89 10                	mov    DWORD PTR [eax],edx
c00294dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294e3:	8d 50 ff             	lea    edx,[eax-0x1]
c00294e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00294ed:	83 c4 0c             	add    esp,0xc
c00294f0:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00294f2 <CPU::~CPU()>:
c00294f2:	83 ec 0c             	sub    esp,0xc
c00294f5:	ba fc c2 02 c0       	mov    edx,0xc002c2fc
c00294fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fe:	89 10                	mov    DWORD PTR [eax],edx
c0029500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029504:	83 ec 0c             	sub    esp,0xc
c0029507:	50                   	push   eax
c0029508:	e8 75 a6 fe ff       	call   c0013b82 <Device::~Device()>
c002950d:	83 c4 10             	add    esp,0x10
c0029510:	90                   	nop
c0029511:	83 c4 0c             	add    esp,0xc
c0029514:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029516 <CPU::~CPU()>:
c0029516:	83 ec 0c             	sub    esp,0xc
c0029519:	83 ec 0c             	sub    esp,0xc
c002951c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029520:	e8 cd ff ff ff       	call   c00294f2 <CPU::~CPU()>
c0029525:	83 c4 10             	add    esp,0x10
c0029528:	83 ec 08             	sub    esp,0x8
c002952b:	68 98 11 00 00       	push   0x1198
c0029530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029534:	e8 62 92 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029539:	83 c4 10             	add    esp,0x10
c002953c:	83 c4 0c             	add    esp,0xc
c002953f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029540 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029540:	90                   	nop
c0029541:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029542 <ThreadControlBlock::ThreadControlBlock()>:
c0029542:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029546:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002954d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029551:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002955c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029567:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002956e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029572:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029579:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002957d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0029581:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029585:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0029589:	90                   	nop
c002958a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c002958c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c002958c:	83 ec 0c             	sub    esp,0xc
c002958f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029593:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0029599:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002959d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295a8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295cf:	83 ec 0c             	sub    esp,0xc
c00295d2:	68 fa ac 02 c0       	push   0xc002acfa
c00295d7:	e8 9f 92 fe ff       	call   c001287b <Dbg::kprintf(char const*, ...)>
c00295dc:	83 c4 10             	add    esp,0x10
c00295df:	90                   	nop
c00295e0:	83 c4 0c             	add    esp,0xc
c00295e3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c00295e4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c00295e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00295e8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00295eb:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c00295ec <Vm::_FPUState::_FPUState()>:
c00295ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295f0:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c00295f7:	90                   	nop
c00295f8:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00295fa <PCI::~PCI()>:
c00295fa:	83 ec 0c             	sub    esp,0xc
c00295fd:	ba 90 d4 02 c0       	mov    edx,0xc002d490
c0029602:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029606:	89 10                	mov    DWORD PTR [eax],edx
c0029608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002960c:	83 ec 0c             	sub    esp,0xc
c002960f:	50                   	push   eax
c0029610:	e8 3d 9f fe ff       	call   c0013552 <Bus::~Bus()>
c0029615:	83 c4 10             	add    esp,0x10
c0029618:	90                   	nop
c0029619:	83 c4 0c             	add    esp,0xc
c002961c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002961e <PCI::~PCI()>:
c002961e:	83 ec 0c             	sub    esp,0xc
c0029621:	83 ec 0c             	sub    esp,0xc
c0029624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029628:	e8 cd ff ff ff       	call   c00295fa <PCI::~PCI()>
c002962d:	83 c4 10             	add    esp,0x10
c0029630:	83 ec 08             	sub    esp,0x8
c0029633:	68 5c 01 00 00       	push   0x15c
c0029638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002963c:	e8 5a 91 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029641:	83 c4 10             	add    esp,0x10
c0029644:	83 c4 0c             	add    esp,0xc
c0029647:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029648 <IDE::~IDE()>:
c0029648:	83 ec 0c             	sub    esp,0xc
c002964b:	ba f4 d6 02 c0       	mov    edx,0xc002d6f4
c0029650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029654:	89 10                	mov    DWORD PTR [eax],edx
c0029656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002965a:	83 ec 0c             	sub    esp,0xc
c002965d:	50                   	push   eax
c002965e:	e8 35 aa fe ff       	call   c0014098 <HardDiskController::~HardDiskController()>
c0029663:	83 c4 10             	add    esp,0x10
c0029666:	90                   	nop
c0029667:	83 c4 0c             	add    esp,0xc
c002966a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002966c <IDE::~IDE()>:
c002966c:	83 ec 0c             	sub    esp,0xc
c002966f:	83 ec 0c             	sub    esp,0xc
c0029672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029676:	e8 cd ff ff ff       	call   c0029648 <IDE::~IDE()>
c002967b:	83 c4 10             	add    esp,0x10
c002967e:	83 ec 08             	sub    esp,0x8
c0029681:	68 70 02 00 00       	push   0x270
c0029686:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002968a:	e8 0c 91 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c002968f:	83 c4 10             	add    esp,0x10
c0029692:	83 c4 0c             	add    esp,0xc
c0029695:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0029696 <SATABus::~SATABus()>:
c0029696:	83 ec 0c             	sub    esp,0xc
c0029699:	ba d4 d7 02 c0       	mov    edx,0xc002d7d4
c002969e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a2:	89 10                	mov    DWORD PTR [eax],edx
c00296a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296a8:	83 ec 0c             	sub    esp,0xc
c00296ab:	50                   	push   eax
c00296ac:	e8 e7 a9 fe ff       	call   c0014098 <HardDiskController::~HardDiskController()>
c00296b1:	83 c4 10             	add    esp,0x10
c00296b4:	90                   	nop
c00296b5:	83 c4 0c             	add    esp,0xc
c00296b8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00296ba <SATABus::~SATABus()>:
c00296ba:	83 ec 0c             	sub    esp,0xc
c00296bd:	83 ec 0c             	sub    esp,0xc
c00296c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296c4:	e8 cd ff ff ff       	call   c0029696 <SATABus::~SATABus()>
c00296c9:	83 c4 10             	add    esp,0x10
c00296cc:	83 ec 08             	sub    esp,0x8
c00296cf:	68 64 01 00 00       	push   0x164
c00296d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296d8:	e8 be 90 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00296dd:	83 c4 10             	add    esp,0x10
c00296e0:	83 c4 0c             	add    esp,0xc
c00296e3:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c00296e4 <ATA::~ATA()>:
c00296e4:	83 ec 0c             	sub    esp,0xc
c00296e7:	ba 20 d8 02 c0       	mov    edx,0xc002d820
c00296ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f0:	89 10                	mov    DWORD PTR [eax],edx
c00296f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296f6:	83 ec 0c             	sub    esp,0xc
c00296f9:	50                   	push   eax
c00296fa:	e8 8b aa fe ff       	call   c001418a <PhysicalDisk::~PhysicalDisk()>
c00296ff:	83 c4 10             	add    esp,0x10
c0029702:	90                   	nop
c0029703:	83 c4 0c             	add    esp,0xc
c0029706:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029708 <ATA::~ATA()>:
c0029708:	83 ec 0c             	sub    esp,0xc
c002970b:	83 ec 0c             	sub    esp,0xc
c002970e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029712:	e8 cd ff ff ff       	call   c00296e4 <ATA::~ATA()>
c0029717:	83 c4 10             	add    esp,0x10
c002971a:	83 ec 08             	sub    esp,0x8
c002971d:	68 7c 01 00 00       	push   0x17c
c0029722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029726:	e8 70 90 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c002972b:	83 c4 10             	add    esp,0x10
c002972e:	83 c4 0c             	add    esp,0xc
c0029731:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029732 <ATAPI::~ATAPI()>:
c0029732:	83 ec 0c             	sub    esp,0xc
c0029735:	ba 58 d8 02 c0       	mov    edx,0xc002d858
c002973a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002973e:	89 10                	mov    DWORD PTR [eax],edx
c0029740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029744:	83 ec 0c             	sub    esp,0xc
c0029747:	50                   	push   eax
c0029748:	e8 3d aa fe ff       	call   c001418a <PhysicalDisk::~PhysicalDisk()>
c002974d:	83 c4 10             	add    esp,0x10
c0029750:	90                   	nop
c0029751:	83 c4 0c             	add    esp,0xc
c0029754:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029756 <ATAPI::~ATAPI()>:
c0029756:	83 ec 0c             	sub    esp,0xc
c0029759:	83 ec 0c             	sub    esp,0xc
c002975c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029760:	e8 cd ff ff ff       	call   c0029732 <ATAPI::~ATAPI()>
c0029765:	83 c4 10             	add    esp,0x10
c0029768:	83 ec 08             	sub    esp,0x8
c002976b:	68 80 01 00 00       	push   0x180
c0029770:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029774:	e8 22 90 fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029779:	83 c4 10             	add    esp,0x10
c002977c:	83 c4 0c             	add    esp,0xc
c002977f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0029780 <SATA::~SATA()>:
c0029780:	83 ec 0c             	sub    esp,0xc
c0029783:	ba 0c d9 02 c0       	mov    edx,0xc002d90c
c0029788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002978c:	89 10                	mov    DWORD PTR [eax],edx
c002978e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029792:	83 ec 0c             	sub    esp,0xc
c0029795:	50                   	push   eax
c0029796:	e8 ef a9 fe ff       	call   c001418a <PhysicalDisk::~PhysicalDisk()>
c002979b:	83 c4 10             	add    esp,0x10
c002979e:	90                   	nop
c002979f:	83 c4 0c             	add    esp,0xc
c00297a2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00297a4 <SATA::~SATA()>:
c00297a4:	83 ec 0c             	sub    esp,0xc
c00297a7:	83 ec 0c             	sub    esp,0xc
c00297aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297ae:	e8 cd ff ff ff       	call   c0029780 <SATA::~SATA()>
c00297b3:	83 c4 10             	add    esp,0x10
c00297b6:	83 ec 08             	sub    esp,0x8
c00297b9:	68 7c 01 00 00       	push   0x17c
c00297be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297c2:	e8 d4 8f fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00297c7:	83 c4 10             	add    esp,0x10
c00297ca:	83 c4 0c             	add    esp,0xc
c00297cd:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00297ce <SATAPI::~SATAPI()>:
c00297ce:	83 ec 0c             	sub    esp,0xc
c00297d1:	ba e8 d9 02 c0       	mov    edx,0xc002d9e8
c00297d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297da:	89 10                	mov    DWORD PTR [eax],edx
c00297dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297e0:	83 ec 0c             	sub    esp,0xc
c00297e3:	50                   	push   eax
c00297e4:	e8 a1 a9 fe ff       	call   c001418a <PhysicalDisk::~PhysicalDisk()>
c00297e9:	83 c4 10             	add    esp,0x10
c00297ec:	90                   	nop
c00297ed:	83 c4 0c             	add    esp,0xc
c00297f0:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c00297f2 <SATAPI::~SATAPI()>:
c00297f2:	83 ec 0c             	sub    esp,0xc
c00297f5:	83 ec 0c             	sub    esp,0xc
c00297f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297fc:	e8 cd ff ff ff       	call   c00297ce <SATAPI::~SATAPI()>
c0029801:	83 c4 10             	add    esp,0x10
c0029804:	83 ec 08             	sub    esp,0x8
c0029807:	68 80 01 00 00       	push   0x180
c002980c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029810:	e8 86 8f fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029815:	83 c4 10             	add    esp,0x10
c0029818:	83 c4 0c             	add    esp,0xc
c002981b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002981c <AVX::~AVX()>:
c002981c:	83 ec 0c             	sub    esp,0xc
c002981f:	ba 28 da 02 c0       	mov    edx,0xc002da28
c0029824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029828:	89 10                	mov    DWORD PTR [eax],edx
c002982a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002982e:	83 ec 0c             	sub    esp,0xc
c0029831:	50                   	push   eax
c0029832:	e8 d7 a9 fe ff       	call   c001420e <FPU::~FPU()>
c0029837:	83 c4 10             	add    esp,0x10
c002983a:	90                   	nop
c002983b:	83 c4 0c             	add    esp,0xc
c002983e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029840 <AVX::~AVX()>:
c0029840:	83 ec 0c             	sub    esp,0xc
c0029843:	83 ec 0c             	sub    esp,0xc
c0029846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002984a:	e8 cd ff ff ff       	call   c002981c <AVX::~AVX()>
c002984f:	83 c4 10             	add    esp,0x10
c0029852:	83 ec 08             	sub    esp,0x8
c0029855:	68 58 01 00 00       	push   0x158
c002985a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002985e:	e8 38 8f fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029863:	83 c4 10             	add    esp,0x10
c0029866:	83 c4 0c             	add    esp,0xc
c0029869:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002986a <MMX::~MMX()>:
c002986a:	83 ec 0c             	sub    esp,0xc
c002986d:	ba 68 da 02 c0       	mov    edx,0xc002da68
c0029872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029876:	89 10                	mov    DWORD PTR [eax],edx
c0029878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002987c:	83 ec 0c             	sub    esp,0xc
c002987f:	50                   	push   eax
c0029880:	e8 89 a9 fe ff       	call   c001420e <FPU::~FPU()>
c0029885:	83 c4 10             	add    esp,0x10
c0029888:	90                   	nop
c0029889:	83 c4 0c             	add    esp,0xc
c002988c:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c002988e <MMX::~MMX()>:
c002988e:	83 ec 0c             	sub    esp,0xc
c0029891:	83 ec 0c             	sub    esp,0xc
c0029894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029898:	e8 cd ff ff ff       	call   c002986a <MMX::~MMX()>
c002989d:	83 c4 10             	add    esp,0x10
c00298a0:	83 ec 08             	sub    esp,0x8
c00298a3:	68 58 01 00 00       	push   0x158
c00298a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298ac:	e8 ea 8e fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00298b1:	83 c4 10             	add    esp,0x10
c00298b4:	83 c4 0c             	add    esp,0xc
c00298b7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00298b8 <SSE::~SSE()>:
c00298b8:	83 ec 0c             	sub    esp,0xc
c00298bb:	ba a8 da 02 c0       	mov    edx,0xc002daa8
c00298c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298c4:	89 10                	mov    DWORD PTR [eax],edx
c00298c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ca:	83 ec 0c             	sub    esp,0xc
c00298cd:	50                   	push   eax
c00298ce:	e8 3b a9 fe ff       	call   c001420e <FPU::~FPU()>
c00298d3:	83 c4 10             	add    esp,0x10
c00298d6:	90                   	nop
c00298d7:	83 c4 0c             	add    esp,0xc
c00298da:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00298dc <SSE::~SSE()>:
c00298dc:	83 ec 0c             	sub    esp,0xc
c00298df:	83 ec 0c             	sub    esp,0xc
c00298e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298e6:	e8 cd ff ff ff       	call   c00298b8 <SSE::~SSE()>
c00298eb:	83 c4 10             	add    esp,0x10
c00298ee:	83 ec 08             	sub    esp,0x8
c00298f1:	68 58 01 00 00       	push   0x158
c00298f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298fa:	e8 9c 8e fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00298ff:	83 c4 10             	add    esp,0x10
c0029902:	83 c4 0c             	add    esp,0xc
c0029905:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029906 <x87::~x87()>:
c0029906:	83 ec 0c             	sub    esp,0xc
c0029909:	ba e8 da 02 c0       	mov    edx,0xc002dae8
c002990e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029912:	89 10                	mov    DWORD PTR [eax],edx
c0029914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029918:	83 ec 0c             	sub    esp,0xc
c002991b:	50                   	push   eax
c002991c:	e8 ed a8 fe ff       	call   c001420e <FPU::~FPU()>
c0029921:	83 c4 10             	add    esp,0x10
c0029924:	90                   	nop
c0029925:	83 c4 0c             	add    esp,0xc
c0029928:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002992a <x87::~x87()>:
c002992a:	83 ec 0c             	sub    esp,0xc
c002992d:	83 ec 0c             	sub    esp,0xc
c0029930:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029934:	e8 cd ff ff ff       	call   c0029906 <x87::~x87()>
c0029939:	83 c4 10             	add    esp,0x10
c002993c:	83 ec 08             	sub    esp,0x8
c002993f:	68 58 01 00 00       	push   0x158
c0029944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029948:	e8 4e 8e fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c002994d:	83 c4 10             	add    esp,0x10
c0029950:	83 c4 0c             	add    esp,0xc
c0029953:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029954 <IOAPIC::~IOAPIC()>:
c0029954:	83 ec 0c             	sub    esp,0xc
c0029957:	ba 40 dc 02 c0       	mov    edx,0xc002dc40
c002995c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029960:	89 10                	mov    DWORD PTR [eax],edx
c0029962:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029966:	83 ec 0c             	sub    esp,0xc
c0029969:	50                   	push   eax
c002996a:	e8 13 a2 fe ff       	call   c0013b82 <Device::~Device()>
c002996f:	83 c4 10             	add    esp,0x10
c0029972:	90                   	nop
c0029973:	83 c4 0c             	add    esp,0xc
c0029976:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029978 <IOAPIC::~IOAPIC()>:
c0029978:	83 ec 0c             	sub    esp,0xc
c002997b:	83 ec 0c             	sub    esp,0xc
c002997e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029982:	e8 cd ff ff ff       	call   c0029954 <IOAPIC::~IOAPIC()>
c0029987:	83 c4 10             	add    esp,0x10
c002998a:	83 ec 08             	sub    esp,0x8
c002998d:	68 68 01 00 00       	push   0x168
c0029992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029996:	e8 00 8e fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c002999b:	83 c4 10             	add    esp,0x10
c002999e:	83 c4 0c             	add    esp,0xc
c00299a1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00299a2 <APIC::~APIC()>:
c00299a2:	83 ec 0c             	sub    esp,0xc
c00299a5:	ba f8 db 02 c0       	mov    edx,0xc002dbf8
c00299aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ae:	89 10                	mov    DWORD PTR [eax],edx
c00299b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299b4:	83 ec 0c             	sub    esp,0xc
c00299b7:	50                   	push   eax
c00299b8:	e8 1b ad fe ff       	call   c00146d8 <InterruptController::~InterruptController()>
c00299bd:	83 c4 10             	add    esp,0x10
c00299c0:	90                   	nop
c00299c1:	83 c4 0c             	add    esp,0xc
c00299c4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00299c6 <APIC::~APIC()>:
c00299c6:	83 ec 0c             	sub    esp,0xc
c00299c9:	83 ec 0c             	sub    esp,0xc
c00299cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299d0:	e8 cd ff ff ff       	call   c00299a2 <APIC::~APIC()>
c00299d5:	83 c4 10             	add    esp,0x10
c00299d8:	83 ec 08             	sub    esp,0x8
c00299db:	68 58 21 00 00       	push   0x2158
c00299e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299e4:	e8 b2 8d fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c00299e9:	83 c4 10             	add    esp,0x10
c00299ec:	83 c4 0c             	add    esp,0xc
c00299ef:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00299f0 <PIC::~PIC()>:
c00299f0:	83 ec 0c             	sub    esp,0xc
c00299f3:	ba 90 dc 02 c0       	mov    edx,0xc002dc90
c00299f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299fc:	89 10                	mov    DWORD PTR [eax],edx
c00299fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a02:	83 ec 0c             	sub    esp,0xc
c0029a05:	50                   	push   eax
c0029a06:	e8 cd ac fe ff       	call   c00146d8 <InterruptController::~InterruptController()>
c0029a0b:	83 c4 10             	add    esp,0x10
c0029a0e:	90                   	nop
c0029a0f:	83 c4 0c             	add    esp,0xc
c0029a12:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a14 <PIC::~PIC()>:
c0029a14:	83 ec 0c             	sub    esp,0xc
c0029a17:	83 ec 0c             	sub    esp,0xc
c0029a1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a1e:	e8 cd ff ff ff       	call   c00299f0 <PIC::~PIC()>
c0029a23:	83 c4 10             	add    esp,0x10
c0029a26:	83 ec 08             	sub    esp,0x8
c0029a29:	68 58 21 00 00       	push   0x2158
c0029a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a32:	e8 64 8d fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029a37:	83 c4 10             	add    esp,0x10
c0029a3a:	83 c4 0c             	add    esp,0xc
c0029a3d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a3e <APICTimer::~APICTimer()>:
c0029a3e:	83 ec 0c             	sub    esp,0xc
c0029a41:	ba e4 dc 02 c0       	mov    edx,0xc002dce4
c0029a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a4a:	89 10                	mov    DWORD PTR [eax],edx
c0029a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a50:	83 ec 0c             	sub    esp,0xc
c0029a53:	50                   	push   eax
c0029a54:	e8 0f cd fe ff       	call   c0016768 <Timer::~Timer()>
c0029a59:	83 c4 10             	add    esp,0x10
c0029a5c:	90                   	nop
c0029a5d:	83 c4 0c             	add    esp,0xc
c0029a60:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029a62 <APICTimer::~APICTimer()>:
c0029a62:	83 ec 0c             	sub    esp,0xc
c0029a65:	83 ec 0c             	sub    esp,0xc
c0029a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a6c:	e8 cd ff ff ff       	call   c0029a3e <APICTimer::~APICTimer()>
c0029a71:	83 c4 10             	add    esp,0x10
c0029a74:	83 ec 08             	sub    esp,0x8
c0029a77:	68 60 01 00 00       	push   0x160
c0029a7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a80:	e8 16 8d fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029a85:	83 c4 10             	add    esp,0x10
c0029a88:	83 c4 0c             	add    esp,0xc
c0029a8b:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029a8c <PIT::~PIT()>:
c0029a8c:	83 ec 0c             	sub    esp,0xc
c0029a8f:	ba 34 dd 02 c0       	mov    edx,0xc002dd34
c0029a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a98:	89 10                	mov    DWORD PTR [eax],edx
c0029a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a9e:	83 ec 0c             	sub    esp,0xc
c0029aa1:	50                   	push   eax
c0029aa2:	e8 c1 cc fe ff       	call   c0016768 <Timer::~Timer()>
c0029aa7:	83 c4 10             	add    esp,0x10
c0029aaa:	90                   	nop
c0029aab:	83 c4 0c             	add    esp,0xc
c0029aae:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029ab0 <PIT::~PIT()>:
c0029ab0:	83 ec 0c             	sub    esp,0xc
c0029ab3:	83 ec 0c             	sub    esp,0xc
c0029ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aba:	e8 cd ff ff ff       	call   c0029a8c <PIT::~PIT()>
c0029abf:	83 c4 10             	add    esp,0x10
c0029ac2:	83 ec 08             	sub    esp,0x8
c0029ac5:	68 5c 01 00 00       	push   0x15c
c0029aca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ace:	e8 c8 8c fe ff       	call   c001279b <operator delete(void*, unsigned long)>
c0029ad3:	83 c4 10             	add    esp,0x10
c0029ad6:	83 c4 0c             	add    esp,0xc
c0029ad9:	c3                   	ret    
