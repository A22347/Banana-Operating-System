
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 b5 9a 00 00       	call   c0009ad5 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 89 28 02 00       	call   c00228ae <_init>
c0000025:	c3                   	ret    
c0000026:	bb 32 35 02 c0       	mov    ebx,0xc0023532
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 40 35 02 c0    	cmp    ebx,0xc0023540
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 38 79 02 c0       	mov    eax,0xc0027938
c0000049:	3d 38 79 02 c0       	cmp    eax,0xc0027938
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 38 79 02 c0       	push   0xc0027938
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 38 79 02 c0       	mov    eax,0xc0027938
c0000075:	2d 38 79 02 c0       	sub    eax,0xc0027938
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 38 79 02 c0       	push   0xc0027938
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c0 7a 02 c0 00 	cmp    BYTE PTR ds:0xc0027ac0,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 48 35 02 c0       	mov    ebx,0xc0023548
c00000bb:	81 eb 44 35 02 c0    	sub    ebx,0xc0023544
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 44 35 02 c0       	mov    esi,0xc0023544
c00000ca:	a1 c4 7a 02 c0       	mov    eax,ds:0xc0027ac4
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 c4 7a 02 c0       	mov    ds:0xc0027ac4,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 c4 7a 02 c0       	mov    eax,ds:0xc0027ac4
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 38 79 02 c0       	push   0xc0027938
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c0 7a 02 c0 01 	mov    BYTE PTR ds:0xc0027ac0,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 c8 7a 02 c0       	push   0xc0027ac8
c000012c:	68 38 79 02 c0       	push   0xc0027938
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 84 7b 01 00       	call   c0017e5c <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 78 c7 00 00       	call   c000ca68 <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 62 7b 01 00       	call   c0017e5c <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 2b 80 01 00       	call   c0018344 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 6e 86 01 00       	call   c0018990 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 10 7f 02 c0 	lgdtd  ds:0xc0027f10
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 ce e5 00 00       	call   c000eae5 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 e0 7a 02 c0       	mov    ds:0xc0027ae0,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 e0 7a 02 c0    	mov    DWORD PTR ds:0xc0027ae0,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d e0 7a 02 c0    	mov    ebx,DWORD PTR ds:0xc0027ae0
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 60 35 02 c0 02 	test   BYTE PTR [edx-0x3ffdcaa0],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 60 35 02 c0 01 	test   BYTE PTR [edx-0x3ffdcaa0],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 60 35 02 c0 08 	test   BYTE PTR [edx-0x3ffdcaa0],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 60 35 02 c0 04 	test   BYTE PTR [ebx-0x3ffdcaa0],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 60 35 02 c0 01 	test   BYTE PTR [edx-0x3ffdcaa0],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 00 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027b00
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 00 7b 02 c0    	mov    DWORD PTR ds:0xc0027b00,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 04 7b 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd84fc]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 04 7b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd84fc],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 00 7b 02 c0    	mov    DWORD PTR ds:0xc0027b00,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 2c 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b2c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 3c 7b 02 c0    	mov    ecx,DWORD PTR ds:0xc0027b3c
c0000d6c:	c7 42 0c 34 7b 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027b34
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 3c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b3c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 2c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b2c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 00 7b 02 c0 02 	test   BYTE PTR ds:0xc0027b00,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 8b 8a 00 00       	call   c00098d8 <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 cd 89 00 00       	call   c00098d8 <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 b7 89 00 00       	call   c00098d8 <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 93 89 00 00       	call   c00098d8 <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 00 7b 02 c0    	mov    edi,DWORD PTR ds:0xc0027b00
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 04 7b 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd84fc]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 04 7b 02 c0 	mov    DWORD PTR [edx*4-0x3ffd84fc],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 34 7b 02 c0 	lea    edx,[eax*8-0x3ffd84cc]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d 40 7b 02 c0    	mov    ebx,DWORD PTR ds:0xc0027b40
c00010ee:	81 fb 34 7b 02 c0    	cmp    ebx,0xc0027b34
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 34 7b 02 c0       	cmp    eax,0xc0027b34
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 30 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b30,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 3c 7b 02 c0       	mov    ds:0xc0027b3c,eax
c000112a:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c000112f:	a3 30 7b 02 c0       	mov    ds:0xc0027b30,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 34 7b 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027b34
c000113d:	c7 40 0c 34 7b 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027b34
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 40 7b 02 c0       	mov    ds:0xc0027b40,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 34 7b 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027b34
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 f8 7a 02 c0 	lea    ebp,[edx*4-0x3ffd8508]
c000118e:	8b 14 95 00 7b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8500]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 00 7b 02 c0 	lea    ecx,[edx*4-0x3ffd8500]
c00011a9:	8b 14 95 00 7b 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8500]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 34 7e 02 c0 	or     DWORD PTR [edi*4-0x3ffd81cc],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 34 7b 02 c0 	lea    eax,[eax*8-0x3ffd84cc]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 3c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b3c,ecx
c0001263:	89 0d 40 7b 02 c0    	mov    DWORD PTR ds:0xc0027b40,ecx
c0001269:	c7 41 08 34 7b 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027b34
c0001270:	c7 41 0c 34 7b 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027b34
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 2c 7b 02 c0 	lea    edx,[ecx*8-0x3ffd84d4]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 34 7e 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd81cc]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 34 7e 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd81cc]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 2c 7b 02 c0 	lea    edx,[eax*4-0x3ffd84d4]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 34 7e 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd81cc],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 3c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b3c,edi
c0001336:	89 3d 40 7b 02 c0    	mov    DWORD PTR ds:0xc0027b40,edi
c000133c:	c7 47 08 34 7b 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027b34
c0001343:	c7 47 0c 34 7b 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027b34
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 30 7b 02 c0    	mov    DWORD PTR ds:0xc0027b30,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 2c 7b 02 c0       	mov    eax,ds:0xc0027b2c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 2c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b2c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 00 7b 02 c0       	mov    edx,0xc0027b00
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 00 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b00,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d 54 7e 02 c0    	mov    ebx,DWORD PTR ds:0xc0027e54
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 54 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027e54,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d 54 7e 02 c0    	mov    DWORD PTR ds:0xc0027e54,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 2c 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b2c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 2c 7b 02 c0    	mov    DWORD PTR ds:0xc0027b2c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 00 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b00,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 5c 7e 02 c0    	push   DWORD PTR ds:0xc0027e5c
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 00 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b00,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 5c 7e 02 c0       	mov    eax,ds:0xc0027e5c
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 2c 7b 02 c0 00 	cmp    DWORD PTR ds:0xc0027b2c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 2c 7b 02 c0       	mov    eax,ds:0xc0027b2c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 04 7b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd84fc]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 34 7b 02 c0       	mov    eax,0xc0027b34
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 2c 7e 02 c0       	cmp    eax,0xc0027e2c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 68 7e 02 c0       	mov    eax,ds:0xc0027e68
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 50 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e50
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 64 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e64
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 74 7e 02 c0    	mov    esi,DWORD PTR ds:0xc0027e74
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 00 7b 02 c0       	mov    eax,0xc0027b00
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 64 36 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdc99c]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 00 7b 02 c0       	mov    eax,ds:0xc0027b00
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 00 7b 02 c0       	mov    ds:0xc0027b00,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d 44 7e 02 c0    	mov    DWORD PTR ds:0xc0027e44,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d 48 7e 02 c0    	mov    DWORD PTR ds:0xc0027e48,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d 4c 7e 02 c0    	mov    DWORD PTR ds:0xc0027e4c,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 54 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027e54,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 c0 95 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6a40]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 26 9c 01 00       	jmp    c001b74c <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 c0 95 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6a40]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 58 9c 01 00       	jmp    c001b794 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 c0 95 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd6a40]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 81 9c 01 00       	jmp    c001b7dc <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 56 08 02 00       	call   c0022694 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 80 37 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdc880]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 80 37 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdc880]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 80 36 02 c0       	mov    edx,0xc0023680
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba d4 62 02 c0       	mov    edx,0xc00262d4
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba ac 37 02 c0       	mov    edx,0xc00237ac
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 90 37 02 c0       	mov    edx,0xc0023790
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 a0 7e 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd8160]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 80 7e 02 c0    	mov    ax,ds:0xc0027e80
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 80 7e 02 c0    	mov    ds:0xc0027e80,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 53 f6 01 00       	call   c0022694 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 b2 37 02 c0       	mov    eax,0xc00237b2
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad 00 37 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdc900]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 bb 37 02 c0       	mov    eax,0xc00237bb
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 80 37 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc880]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 1e e0 01 00       	call   c0022694 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 90 37 02 c0       	mov    edx,0xc0023790
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 80 36 02 c0       	mov    edx,0xc0023680
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 90 36 02 c0       	mov    edx,0xc0023690
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 a0 7e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8160]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 a0 7e 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8160],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 e5 c9 01 00       	call   c0022694 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 cb c9 01 00       	call   c0022694 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 d7 36 02 c0       	mov    eax,0xc00236d7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 d0 36 02 c0       	mov    eax,0xc00236d0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 64 b5 01 00       	call   c0022694 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 a0 7e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8160]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be c0 36 02 c0       	mov    esi,0xc00236c0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 d8 ae 01 00       	call   c0022694 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba a0 36 02 c0       	mov    edx,0xc00236a0
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba b0 36 02 c0       	mov    edx,0xc00236b0
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba c2 37 02 c0       	mov    edx,0xc00237c2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ce 37 02 c0       	mov    edx,0xc00237ce
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba e2 37 02 c0       	mov    edx,0xc00237e2
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 3c 14 00 00       	call   c0009a0f <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 34 14 00 00       	call   c0009a1f <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c 00 3b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0023b00
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 00 3b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023b00
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 00 39 02 c0       	mov    eax,0xc0023900
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 40 38 02 c0       	mov    eax,0xc0023840
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 00 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc800]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 96 11 00 00       	jmp    c0009a0f <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 b1 11 00 00       	jmp    c0009a2f <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000888b:	48                   	dec    eax
c000888c:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00088a2:	48                   	dec    eax
c00088a3:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00088b3:	ff 05 24 94 02 c0    	inc    DWORD PTR ds:0xc0029424
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c00088c2:	48                   	dec    eax
c00088c3:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 20 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029420,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c00088dd:	e8 ce fc 00 00       	call   c00185b0 <schedule()>
c00088e2:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00088e7:	48                   	dec    eax
c00088e8:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 30 80 02 c0       	mov    eax,ds:0xc0028030
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 00 3c 02 c0       	push   0xc0023c00
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 08 7f 02 c0       	mov    eax,0xc0027f08
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 09 3c 02 c0       	push   0xc0023c09
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 94 26 02 c0       	mov    eax,0xc0022694
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 13 3c 02 c0       	push   0xc0023c13
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 c8 23 02 c0       	mov    eax,0xc00223c8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 1c 3c 02 c0       	push   0xc0023c1c
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 94 27 02 c0       	mov    eax,0xc0022794
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 26 3c 02 c0       	push   0xc0023c26
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 14 25 02 c0       	mov    eax,0xc0022514
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 2f 3c 02 c0       	push   0xc0023c2f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 0c 7f 02 c0       	mov    eax,0xc0027f0c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 3c 3c 02 c0       	push   0xc0023c3c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 0d 7f 02 c0       	mov    eax,0xc0027f0d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 b3 59 00 00       	call   c000e3f8 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 49 3c 02 c0       	push   0xc0023c49
c0008a75:	e8 ef 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 60 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c60
c0008a82:	e8 e2 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 7c 0f 00 00       	call   c0009a0f <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0008aa2:	68 79 3c 02 c0       	push   0xc0023c79
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 dd f6 00 00       	call   c001818c <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 07 94 00 c0       	push   0xc0009407
c0008abe:	53                   	push   ebx
c0008abf:	e8 d0 f8 00 00       	call   c0018394 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 d8 8d 01 c0       	push   0xc0018dd8
c0008acd:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0008ad3:	e8 bc f8 00 00       	call   c0018394 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 08 94 02 c0       	mov    ds:0xc0029408,eax
c0008ae0:	68 20 3e 02 c0       	push   0xc0023e20
c0008ae5:	c6 05 0d 7f 02 c0 01 	mov    BYTE PTR ds:0xc0027f0d,0x1
c0008aec:	e8 78 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008af1:	e8 bd 06 01 00       	call   c00191b3 <Vm::initialise8086()>
c0008af6:	e8 97 45 00 00       	call   c000d092 <Fs::initVFS()>
c0008afb:	c7 04 24 86 3c 02 c0 	mov    DWORD PTR [esp],0xc0023c86
c0008b02:	e8 62 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b07:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 20 3e 02 c0       	push   0xc0023e20
c0008b26:	e8 3e 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 ca de 00 00       	call   c00169fa <Sys::loadSyscalls()>
c0008b30:	e8 65 bd 00 00       	call   c001489a <Krnl::loadSystemEnv()>
c0008b35:	e8 b7 c1 00 00       	call   c0014cf1 <Krnl::setupPowerManager()>
c0008b3a:	83 c4 0c             	add    esp,0xc
c0008b3d:	6a 3a                	push   0x3a
c0008b3f:	68 a0 3c 02 c0       	push   0xc0023ca0
c0008b44:	68 a9 3c 02 c0       	push   0xc0023ca9
c0008b49:	e8 6f cc 00 00       	call   c00157bd <Reg::readIntWithDefault(char*, char*, int)>
c0008b4e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b51:	e8 5a 51 00 00       	call   c000dcb0 <User::loadClockSettings(int)>
c0008b56:	c7 04 24 44 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e44
c0008b5d:	e8 07 0f 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b62:	58                   	pop    eax
c0008b63:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0008b68:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b6e:	e8 45 58 00 00       	call   c000e3b8 <Device::loadDriversForAll()>
c0008b73:	c7 04 24 b1 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cb1
c0008b7a:	e8 ea 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b7f:	e8 7e b8 00 00       	call   c0014402 <Krnl::startCPUs()>
c0008b84:	c7 04 24 cb 3c 02 c0 	mov    DWORD PTR [esp],0xc0023ccb
c0008b8b:	e8 d9 0e 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0008b90:	5a                   	pop    edx
c0008b91:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c0008b97:	59                   	pop    ecx
c0008b98:	6a 01                	push   0x1
c0008b9a:	68 dc 3c 02 c0       	push   0xc0023cdc
c0008b9f:	e8 26 f0 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c0008ba4:	5a                   	pop    edx
c0008ba5:	59                   	pop    ecx
c0008ba6:	53                   	push   ebx
c0008ba7:	50                   	push   eax
c0008ba8:	e8 4e f2 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c0008bad:	83 c4 10             	add    esp,0x10
c0008bb0:	83 ec 0c             	sub    esp,0xc
c0008bb3:	6a 02                	push   0x2
c0008bb5:	e8 ee fb 00 00       	call   c00187a8 <blockTask(TaskState)>
c0008bba:	83 c4 10             	add    esp,0x10
c0008bbd:	eb f1                	jmp    c0008bb0 <Krnl::firstTask()+0x144>
c0008bbf:	90                   	nop

c0008bc0 <Computer::Computer()>:
c0008bc0:	83 ec 0c             	sub    esp,0xc
c0008bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc7:	83 ec 08             	sub    esp,0x8
c0008bca:	68 f8 3c 02 c0       	push   0xc0023cf8
c0008bcf:	50                   	push   eax
c0008bd0:	e8 9d 58 00 00       	call   c000e472 <Device::Device(char const*)>
c0008bd5:	83 c4 10             	add    esp,0x10
c0008bd8:	ba f4 3e 02 c0       	mov    edx,0xc0023ef4
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	89 10                	mov    DWORD PTR [eax],edx
c0008be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008bf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c03:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c09:	83 ca 04             	or     edx,0x4
c0008c0c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c16:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c1c:	0f b6 d0             	movzx  edx,al
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c34:	0f b6 d0             	movzx  edx,al
c0008c37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c4a:	8d 50 01             	lea    edx,[eax+0x1]
c0008c4d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c51:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c57:	0f b6 d0             	movzx  edx,al
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c62:	83 e1 3f             	and    ecx,0x3f
c0008c65:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c73:	0f b6 d0             	movzx  edx,al
c0008c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c8b:	0f b6 d0             	movzx  edx,al
c0008c8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c92:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ca1:	8d 50 01             	lea    edx,[eax+0x1]
c0008ca4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cae:	0f b6 d0             	movzx  edx,al
c0008cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb9:	83 e1 3f             	and    ecx,0x3f
c0008cbc:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cca:	0f b6 d0             	movzx  edx,al
c0008ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cdc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008ce2:	0f b6 d0             	movzx  edx,al
c0008ce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf8:	8d 50 01             	lea    edx,[eax+0x1]
c0008cfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cff:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008d05:	0f b6 d0             	movzx  edx,al
c0008d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d10:	83 e1 3f             	and    ecx,0x3f
c0008d13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d17:	90                   	nop
c0008d18:	83 c4 0c             	add    esp,0xc
c0008d1b:	c3                   	ret    

c0008d1c <Computer::setBootMessage(char const*)>:
c0008d1c:	c3                   	ret    
c0008d1d:	90                   	nop

c0008d1e <Computer::detectFeatures()>:
c0008d1e:	55                   	push   ebp
c0008d1f:	57                   	push   edi
c0008d20:	56                   	push   esi
c0008d21:	53                   	push   ebx
c0008d22:	83 ec 1c             	sub    esp,0x1c
c0008d25:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d29:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d33:	e8 e1 74 ff ff       	call   c0000219 <detectCPUID>
c0008d38:	85 c0                	test   eax,eax
c0008d3a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d40:	0f 95 c2             	setne  dl
c0008d43:	83 e0 fd             	and    eax,0xfffffffd
c0008d46:	d1 e2                	shl    edx,1
c0008d48:	09 d0                	or     eax,edx
c0008d4a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d50:	a8 02                	test   al,0x2
c0008d52:	75 46                	jne    c0008d9a <Computer::detectFeatures()+0x7c>
c0008d54:	f6 05 21 7f 02 c0 04 	test   BYTE PTR ds:0xc0027f21,0x4
c0008d5b:	74 07                	je     c0008d64 <Computer::detectFeatures()+0x46>
c0008d5d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d64:	e8 ed 95 01 00       	call   c0022356 <x87Detect>
c0008d69:	83 e0 01             	and    eax,0x1
c0008d6c:	c1 e0 04             	shl    eax,0x4
c0008d6f:	88 c2                	mov    dl,al
c0008d71:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d77:	83 e0 ef             	and    eax,0xffffffef
c0008d7a:	09 d0                	or     eax,edx
c0008d7c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d82:	a8 10                	test   al,0x10
c0008d84:	0f 85 2a 01 00 00    	jne    c0008eb4 <Computer::detectFeatures()+0x196>
c0008d8a:	84 c0                	test   al,al
c0008d8c:	0f 88 45 01 00 00    	js     c0008ed7 <Computer::detectFeatures()+0x1b9>
c0008d92:	83 c4 1c             	add    esp,0x1c
c0008d95:	5b                   	pop    ebx
c0008d96:	5e                   	pop    esi
c0008d97:	5f                   	pop    edi
c0008d98:	5d                   	pop    ebp
c0008d99:	c3                   	ret    
c0008d9a:	83 ec 0c             	sub    esp,0xc
c0008d9d:	6a 20                	push   0x20
c0008d9f:	e8 02 a5 00 00       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c0008da4:	83 e0 01             	and    eax,0x1
c0008da7:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008dae:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008db4:	83 e0 f7             	and    eax,0xfffffff7
c0008db7:	09 d0                	or     eax,edx
c0008db9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008dbf:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc6:	e8 db a4 00 00       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c0008dcb:	83 e0 01             	and    eax,0x1
c0008dce:	88 c2                	mov    dl,al
c0008dd0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd6:	83 e0 fe             	and    eax,0xfffffffe
c0008dd9:	09 d0                	or     eax,edx
c0008ddb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008de1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de8:	e8 b9 a4 00 00       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c0008ded:	c1 e0 07             	shl    eax,0x7
c0008df0:	88 c2                	mov    dl,al
c0008df2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df8:	83 e0 7f             	and    eax,0x7f
c0008dfb:	09 d0                	or     eax,edx
c0008dfd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008e03:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e0a:	e8 97 a4 00 00       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c0008e0f:	83 c4 10             	add    esp,0x10
c0008e12:	83 e0 01             	and    eax,0x1
c0008e15:	c1 e0 05             	shl    eax,0x5
c0008e18:	88 c2                	mov    dl,al
c0008e1a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e20:	83 e0 df             	and    eax,0xffffffdf
c0008e23:	09 d0                	or     eax,edx
c0008e25:	f7 05 20 7f 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0027f20,0x401
c0008e2f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e35:	0f 84 c2 00 00 00    	je     c0008efd <Computer::detectFeatures()+0x1df>
c0008e3b:	83 e0 fe             	and    eax,0xfffffffe
c0008e3e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e44:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e4a:	88 c2                	mov    dl,al
c0008e4c:	83 e2 09             	and    edx,0x9
c0008e4f:	fe ca                	dec    dl
c0008e51:	75 09                	jne    c0008e5c <Computer::detectFeatures()+0x13e>
c0008e53:	83 e0 fe             	and    eax,0xfffffffe
c0008e56:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e5c:	83 ec 0c             	sub    esp,0xc
c0008e5f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e63:	50                   	push   eax
c0008e64:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e68:	55                   	push   ebp
c0008e69:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e6d:	57                   	push   edi
c0008e6e:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e72:	56                   	push   esi
c0008e73:	68 00 00 00 80       	push   0x80000000
c0008e78:	e8 a5 a3 00 00       	call   c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e7d:	83 c4 20             	add    esp,0x20
c0008e80:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e87:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e8b:	0f 86 c3 fe ff ff    	jbe    c0008d54 <Computer::detectFeatures()+0x36>
c0008e91:	83 ec 0c             	sub    esp,0xc
c0008e94:	50                   	push   eax
c0008e95:	55                   	push   ebp
c0008e96:	57                   	push   edi
c0008e97:	56                   	push   esi
c0008e98:	68 01 00 00 80       	push   0x80000001
c0008e9d:	e8 80 a3 00 00       	call   c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008ea2:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008eac:	83 c4 20             	add    esp,0x20
c0008eaf:	e9 a0 fe ff ff       	jmp    c0008d54 <Computer::detectFeatures()+0x36>
c0008eb4:	e8 57 94 01 00       	call   c0022310 <absolutelyNoChanceInHell>
c0008eb9:	88 c2                	mov    dl,al
c0008ebb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ec1:	c1 e2 07             	shl    edx,0x7
c0008ec4:	83 e0 7f             	and    eax,0x7f
c0008ec7:	09 d0                	or     eax,edx
c0008ec9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ecf:	84 c0                	test   al,al
c0008ed1:	0f 89 bb fe ff ff    	jns    c0008d92 <Computer::detectFeatures()+0x74>
c0008ed7:	e8 14 94 01 00       	call   c00222f0 <avxDetect>
c0008edc:	83 e0 01             	and    eax,0x1
c0008edf:	c1 e0 05             	shl    eax,0x5
c0008ee2:	88 c2                	mov    dl,al
c0008ee4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008eea:	83 e0 df             	and    eax,0xffffffdf
c0008eed:	09 d0                	or     eax,edx
c0008eef:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ef5:	83 c4 1c             	add    esp,0x1c
c0008ef8:	5b                   	pop    ebx
c0008ef9:	5e                   	pop    esi
c0008efa:	5f                   	pop    edi
c0008efb:	5d                   	pop    ebp
c0008efc:	c3                   	ret    
c0008efd:	83 ec 0c             	sub    esp,0xc
c0008f00:	68 00 02 00 00       	push   0x200
c0008f05:	e8 9c a3 00 00       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c0008f0a:	83 c4 10             	add    esp,0x10
c0008f0d:	83 e0 01             	and    eax,0x1
c0008f10:	88 c2                	mov    dl,al
c0008f12:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f18:	83 e0 fe             	and    eax,0xfffffffe
c0008f1b:	09 d0                	or     eax,edx
c0008f1d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f23:	e9 1c ff ff ff       	jmp    c0008e44 <Computer::detectFeatures()+0x126>

c0008f28 <Computer::displayFeatures()>:
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <Computer::rdmsr(unsigned int)>:
c0008f2a:	83 ec 0c             	sub    esp,0xc
c0008f2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f31:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f38:	74 0a                	je     c0008f44 <Computer::rdmsr(unsigned int)+0x1a>
c0008f3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f3e:	0f 32                	rdmsr  
c0008f40:	83 c4 0c             	add    esp,0xc
c0008f43:	c3                   	ret    
c0008f44:	83 ec 0c             	sub    esp,0xc
c0008f47:	68 01 3d 02 c0       	push   0xc0023d01
c0008f4c:	e8 52 ba 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0008f51:	83 c4 10             	add    esp,0x10
c0008f54:	eb e4                	jmp    c0008f3a <Computer::rdmsr(unsigned int)+0x10>

c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f56:	57                   	push   edi
c0008f57:	56                   	push   esi
c0008f58:	52                   	push   edx
c0008f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f5d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f61:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f65:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f6c:	74 0e                	je     c0008f7c <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f6e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f72:	89 f0                	mov    eax,esi
c0008f74:	89 fa                	mov    edx,edi
c0008f76:	0f 30                	wrmsr  
c0008f78:	58                   	pop    eax
c0008f79:	5e                   	pop    esi
c0008f7a:	5f                   	pop    edi
c0008f7b:	c3                   	ret    
c0008f7c:	83 ec 0c             	sub    esp,0xc
c0008f7f:	68 07 3d 02 c0       	push   0xc0023d07
c0008f84:	e8 1a ba 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0008f89:	83 c4 10             	add    esp,0x10
c0008f8c:	eb e0                	jmp    c0008f6e <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f8e <Computer::shutdown()>:
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f95:	8b 10                	mov    edx,DWORD PTR [eax]
c0008f97:	6a 00                	push   0x0
c0008f99:	6a 00                	push   0x0
c0008f9b:	6a 00                	push   0x0
c0008f9d:	50                   	push   eax
c0008f9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fa1:	83 c4 1c             	add    esp,0x1c
c0008fa4:	c3                   	ret    
c0008fa5:	90                   	nop

c0008fa6 <Computer::restart()>:
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fad:	8b 10                	mov    edx,DWORD PTR [eax]
c0008faf:	6a 00                	push   0x0
c0008fb1:	6a 00                	push   0x0
c0008fb3:	6a 01                	push   0x1
c0008fb5:	50                   	push   eax
c0008fb6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0008fb9:	83 c4 1c             	add    esp,0x1c
c0008fbc:	c3                   	ret    
c0008fbd:	90                   	nop

c0008fbe <Computer::sleep()>:
c0008fbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fc2:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008fc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fcc:	e9 a3 98 00 00       	jmp    c0012874 <ACPI::sleep()>
c0008fd1:	90                   	nop

c0008fd2 <Computer::nmiEnabled()>:
c0008fd2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fd6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008fdc:	c3                   	ret    
c0008fdd:	90                   	nop

c0008fde <Computer::readCMOS(unsigned char)>:
c0008fde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fe2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008fe9:	19 c0                	sbb    eax,eax
c0008feb:	83 e0 80             	and    eax,0xffffff80
c0008fee:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008ff2:	e6 70                	out    0x70,al
c0008ff4:	e4 71                	in     al,0x71
c0008ff6:	c3                   	ret    
c0008ff7:	90                   	nop

c0008ff8 <Computer::enableNMI(bool)>:
c0008ff8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008ffc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009000:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0009006:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000900e:	eb ce                	jmp    c0008fde <Computer::readCMOS(unsigned char)>

c0009010 <Computer::open(int, int, void*)>:
c0009010:	56                   	push   esi
c0009011:	53                   	push   ebx
c0009012:	83 ec 10             	sub    esp,0x10
c0009015:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009019:	68 64 3e 02 c0       	push   0xc0023e64
c000901e:	e8 46 0a 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009023:	58                   	pop    eax
c0009024:	f6 05 20 7f 02 c0 04 	test   BYTE PTR ds:0xc0027f20,0x4
c000902b:	5a                   	pop    edx
c000902c:	0f 94 05 e0 72 02 c0 	sete   BYTE PTR ds:0xc00272e0
c0009033:	68 58 01 00 00       	push   0x158
c0009038:	68 0d 3d 02 c0       	push   0xc0023d0d
c000903d:	e8 b9 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009042:	59                   	pop    ecx
c0009043:	5e                   	pop    esi
c0009044:	68 14 01 00 00       	push   0x114
c0009049:	68 23 3d 02 c0       	push   0xc0023d23
c000904e:	e8 a8 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009053:	58                   	pop    eax
c0009054:	5a                   	pop    edx
c0009055:	6a 14                	push   0x14
c0009057:	68 37 3d 02 c0       	push   0xc0023d37
c000905c:	e8 9a 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009061:	59                   	pop    ecx
c0009062:	5e                   	pop    esi
c0009063:	68 1f 07 00 00       	push   0x71f
c0009068:	68 4a 3d 02 c0       	push   0xc0023d4a
c000906d:	e8 89 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009072:	58                   	pop    eax
c0009073:	5a                   	pop    edx
c0009074:	6a 5f                	push   0x5f
c0009076:	68 61 3d 02 c0       	push   0xc0023d61
c000907b:	e8 7b 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009080:	c7 04 24 77 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d77
c0009087:	e8 6f 3c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000908c:	c7 04 24 89 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d89
c0009093:	e8 d1 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009098:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000909f:	e8 6b 09 00 00       	call   c0009a0f <malloc>
c00090a4:	89 c6                	mov    esi,eax
c00090a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00090a9:	e8 7e 90 00 00       	call   c001212c <ACPI::ACPI()>
c00090ae:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c00090b4:	c7 04 24 a3 3d 02 c0 	mov    DWORD PTR [esp],0xc0023da3
c00090bb:	e8 a9 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090c0:	59                   	pop    ecx
c00090c1:	5e                   	pop    esi
c00090c2:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c00090c8:	53                   	push   ebx
c00090c9:	e8 a0 51 00 00       	call   c000e26e <Device::addChild(Device*)>
c00090ce:	c7 04 24 88 3e 02 c0 	mov    DWORD PTR [esp],0xc0023e88
c00090d5:	e8 8f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00090dd:	e8 3c fc ff ff       	call   c0008d1e <Computer::detectFeatures()>
c00090e2:	c7 04 24 a8 3e 02 c0 	mov    DWORD PTR [esp],0xc0023ea8
c00090e9:	e8 7b 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090ee:	c7 04 24 bd 3d 02 c0 	mov    DWORD PTR [esp],0xc0023dbd
c00090f5:	e8 6f 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00090fa:	58                   	pop    eax
c00090fb:	5a                   	pop    edx
c00090fc:	6a 01                	push   0x1
c00090fe:	53                   	push   ebx
c00090ff:	e8 f4 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c0009104:	c7 04 24 b1 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cb1
c000910b:	e8 59 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009110:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c0009117:	e8 f3 08 00 00       	call   c0009a0f <malloc>
c000911c:	89 04 24             	mov    DWORD PTR [esp],eax
c000911f:	89 c6                	mov    esi,eax
c0009121:	e8 38 a2 00 00       	call   c001335e <CPU::CPU()>
c0009126:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000912c:	59                   	pop    ecx
c000912d:	58                   	pop    eax
c000912e:	56                   	push   esi
c000912f:	53                   	push   ebx
c0009130:	e8 39 51 00 00       	call   c000e26e <Device::addChild(Device*)>
c0009135:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000913b:	8b 10                	mov    edx,DWORD PTR [eax]
c000913d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009141:	6a 00                	push   0x0
c0009143:	6a 00                	push   0x0
c0009145:	50                   	push   eax
c0009146:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009149:	83 c4 14             	add    esp,0x14
c000914c:	68 c8 3e 02 c0       	push   0xc0023ec8
c0009151:	e8 13 09 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009156:	e8 af 56 00 00       	call   c000e80a <setupFPU()>
c000915b:	83 c4 10             	add    esp,0x10
c000915e:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0009164:	85 c0                	test   eax,eax
c0009166:	74 1f                	je     c0009187 <Computer::open(int, int, void*)+0x177>
c0009168:	83 ec 08             	sub    esp,0x8
c000916b:	50                   	push   eax
c000916c:	53                   	push   ebx
c000916d:	e8 fc 50 00 00       	call   c000e26e <Device::addChild(Device*)>
c0009172:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c0009178:	8b 10                	mov    edx,DWORD PTR [eax]
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	6a 00                	push   0x0
c0009180:	50                   	push   eax
c0009181:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0009184:	83 c4 20             	add    esp,0x20
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	68 ce 3d 02 c0       	push   0xc0023dce
c000918f:	e8 d5 08 00 00       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009194:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c000919b:	e8 08 f3 00 00       	call   c00184a8 <setupMultitasking(void (*)())>
c00091a0:	83 c4 14             	add    esp,0x14
c00091a3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00091a8:	5b                   	pop    ebx
c00091a9:	5e                   	pop    esi
c00091aa:	c3                   	ret    
c00091ab:	90                   	nop

c00091ac <Computer::disableNMI()>:
c00091ac:	6a 00                	push   0x0
c00091ae:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00091b2:	e8 41 fe ff ff       	call   c0008ff8 <Computer::enableNMI(bool)>
c00091b7:	58                   	pop    eax
c00091b8:	5a                   	pop    edx
c00091b9:	c3                   	ret    

c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>:
c00091ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091be:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00091c5:	19 c0                	sbb    eax,eax
c00091c7:	83 e0 80             	and    eax,0xffffff80
c00091ca:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00091ce:	e6 70                	out    0x70,al
c00091d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00091d4:	e6 71                	out    0x71,al
c00091d6:	c3                   	ret    
c00091d7:	90                   	nop

c00091d8 <Computer::handleNMI()>:
c00091d8:	56                   	push   esi
c00091d9:	53                   	push   ebx
c00091da:	83 ec 10             	sub    esp,0x10
c00091dd:	e4 92                	in     al,0x92
c00091df:	89 c6                	mov    esi,eax
c00091e1:	e4 61                	in     al,0x61
c00091e3:	68 e9 3d 02 c0       	push   0xc0023de9
c00091e8:	88 c3                	mov    bl,al
c00091ea:	e8 0c 3b 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00091ef:	83 c4 10             	add    esp,0x10
c00091f2:	83 e6 10             	and    esi,0x10
c00091f5:	75 0d                	jne    c0009204 <Computer::handleNMI()+0x2c>
c00091f7:	f6 c3 40             	test   bl,0x40
c00091fa:	75 1d                	jne    c0009219 <Computer::handleNMI()+0x41>
c00091fc:	84 db                	test   bl,bl
c00091fe:	78 2d                	js     c000922d <Computer::handleNMI()+0x55>
c0009200:	58                   	pop    eax
c0009201:	5b                   	pop    ebx
c0009202:	5e                   	pop    esi
c0009203:	c3                   	ret    
c0009204:	83 ec 0c             	sub    esp,0xc
c0009207:	68 fa 3d 02 c0       	push   0xc0023dfa
c000920c:	e8 92 b7 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0009211:	83 c4 10             	add    esp,0x10
c0009214:	f6 c3 40             	test   bl,0x40
c0009217:	74 e3                	je     c00091fc <Computer::handleNMI()+0x24>
c0009219:	83 ec 0c             	sub    esp,0xc
c000921c:	68 07 3e 02 c0       	push   0xc0023e07
c0009221:	e8 7d b7 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0009226:	83 c4 10             	add    esp,0x10
c0009229:	84 db                	test   bl,bl
c000922b:	79 d3                	jns    c0009200 <Computer::handleNMI()+0x28>
c000922d:	c7 44 24 10 11 3e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023e11
c0009235:	5a                   	pop    edx
c0009236:	5b                   	pop    ebx
c0009237:	5e                   	pop    esi
c0009238:	e9 66 b7 00 00       	jmp    c00149a3 <Krnl::panic(char const*)>
c000923d:	90                   	nop

c000923e <Computer::setDiskActivityLight(int, bool)>:
c000923e:	56                   	push   esi
c000923f:	53                   	push   ebx
c0009240:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009244:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009249:	77 1b                	ja     c0009266 <Computer::setDiskActivityLight(int, bool)+0x28>
c000924b:	e4 92                	in     al,0x92
c000924d:	bb 40 00 00 00       	mov    ebx,0x40
c0009252:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0009256:	89 da                	mov    edx,ebx
c0009258:	d3 e2                	shl    edx,cl
c000925a:	89 f1                	mov    ecx,esi
c000925c:	f7 d2                	not    edx
c000925e:	d3 e3                	shl    ebx,cl
c0009260:	21 d0                	and    eax,edx
c0009262:	09 d8                	or     eax,ebx
c0009264:	e6 92                	out    0x92,al
c0009266:	5b                   	pop    ebx
c0009267:	5e                   	pop    esi
c0009268:	c3                   	ret    
c0009269:	90                   	nop

c000926a <GDTEntry::setBase(unsigned int)>:
c000926a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000926e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009272:	89 c1                	mov    ecx,eax
c0009274:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0009278:	c1 e9 10             	shr    ecx,0x10
c000927b:	c1 e8 18             	shr    eax,0x18
c000927e:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009281:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c0009284:	c3                   	ret    
c0009285:	90                   	nop

c0009286 <GDTEntry::setLimit(unsigned int)>:
c0009286:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000928a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000928e:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009291:	66 89 01             	mov    WORD PTR [ecx],ax
c0009294:	83 e2 f0             	and    edx,0xfffffff0
c0009297:	c1 e8 10             	shr    eax,0x10
c000929a:	83 e0 0f             	and    eax,0xf
c000929d:	09 d0                	or     eax,edx
c000929f:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c00092a2:	c3                   	ret    
c00092a3:	90                   	nop

c00092a4 <GDT::GDT()>:
c00092a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00092b8:	90                   	nop
c00092b9:	c3                   	ret    

c00092ba <GDT::addEntry(GDTEntry)>:
c00092ba:	53                   	push   ebx
c00092bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00092bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00092c3:	8b 02                	mov    eax,DWORD PTR [edx]
c00092c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092c9:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00092cd:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00092d1:	8d 48 01             	lea    ecx,[eax+0x1]
c00092d4:	c1 e0 03             	shl    eax,0x3
c00092d7:	89 0a                	mov    DWORD PTR [edx],ecx
c00092d9:	5b                   	pop    ebx
c00092da:	c3                   	ret    
c00092db:	90                   	nop

c00092dc <GDT::getNumberOfEntries()>:
c00092dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00092e2:	c3                   	ret    
c00092e3:	90                   	nop

c00092e4 <GDT::flush()>:
c00092e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092e8:	8b 10                	mov    edx,DWORD PTR [eax]
c00092ea:	83 c0 04             	add    eax,0x4
c00092ed:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092f4:	a3 12 7f 02 c0       	mov    ds:0xc0027f12,eax
c00092f9:	66 89 15 10 7f 02 c0 	mov    WORD PTR ds:0xc0027f10,dx
c0009300:	e9 80 70 ff ff       	jmp    c0000385 <loadGDT>
c0009305:	90                   	nop

c0009306 <GDT::setup()>:
c0009306:	55                   	push   ebp
c0009307:	57                   	push   edi
c0009308:	56                   	push   esi
c0009309:	53                   	push   ebx
c000930a:	83 ec 3c             	sub    esp,0x3c
c000930d:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0009311:	6a 00                	push   0x0
c0009313:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0009317:	53                   	push   ebx
c0009318:	e8 4d ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000931d:	6a 00                	push   0x0
c000931f:	53                   	push   ebx
c0009320:	e8 61 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009325:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000932d:	6a 00                	push   0x0
c000932f:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0009333:	53                   	push   ebx
c0009334:	e8 31 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009339:	68 ff ff ff 00       	push   0xffffff
c000933e:	53                   	push   ebx
c000933f:	e8 42 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009344:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0009348:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000934d:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009352:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009356:	83 c4 20             	add    esp,0x20
c0009359:	6a 00                	push   0x0
c000935b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000935f:	53                   	push   ebx
c0009360:	e8 05 ff ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c0009365:	68 ff ff ff 00       	push   0xffffff
c000936a:	53                   	push   ebx
c000936b:	e8 16 ff ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c0009370:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0009374:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009378:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000937c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009380:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009384:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009389:	0d 00 92 c0 00       	or     eax,0xc09200
c000938e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009392:	89 d8                	mov    eax,ebx
c0009394:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009398:	80 cc 60             	or     ah,0x60
c000939b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000939f:	83 c4 0c             	add    esp,0xc
c00093a2:	89 f8                	mov    eax,edi
c00093a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093a8:	80 cc 60             	or     ah,0x60
c00093ab:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00093af:	89 c7                	mov    edi,eax
c00093b1:	55                   	push   ebp
c00093b2:	e8 03 ff ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093b7:	83 c4 0c             	add    esp,0xc
c00093ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00093c2:	55                   	push   ebp
c00093c3:	e8 f2 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093c8:	83 c4 0c             	add    esp,0xc
c00093cb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093cf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00093d3:	55                   	push   ebp
c00093d4:	e8 e1 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093d9:	83 c4 0c             	add    esp,0xc
c00093dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00093e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00093e4:	53                   	push   ebx
c00093e5:	51                   	push   ecx
c00093e6:	55                   	push   ebp
c00093e7:	e8 ce fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093ec:	83 c4 0c             	add    esp,0xc
c00093ef:	57                   	push   edi
c00093f0:	56                   	push   esi
c00093f1:	55                   	push   ebp
c00093f2:	e8 c3 fe ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c00093f7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093fa:	e8 e5 fe ff ff       	call   c00092e4 <GDT::flush()>
c00093ff:	83 c4 4c             	add    esp,0x4c
c0009402:	5b                   	pop    ebx
c0009403:	5e                   	pop    esi
c0009404:	5f                   	pop    edi
c0009405:	5d                   	pop    ebp
c0009406:	c3                   	ret    

c0009407 <idleFunction(void*)>:
c0009407:	53                   	push   ebx
c0009408:	83 ec 08             	sub    esp,0x8
c000940b:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0009410:	48                   	dec    eax
c0009411:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0009416:	75 01                	jne    c0009419 <idleFunction(void*)+0x12>
c0009418:	fb                   	sti    
c0009419:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000941e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0009424:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000942b:	74 3c                	je     c0009469 <idleFunction(void*)+0x62>
c000942d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0009434:	74 33                	je     c0009469 <idleFunction(void*)+0x62>
c0009436:	31 db                	xor    ebx,ebx
c0009438:	52                   	push   edx
c0009439:	52                   	push   edx
c000943a:	68 e1 00 00 00       	push   0xe1
c000943f:	50                   	push   eax
c0009440:	e8 e5 fa ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0009445:	53                   	push   ebx
c0009446:	83 e0 02             	and    eax,0x2
c0009449:	50                   	push   eax
c000944a:	68 e1 00 00 00       	push   0xe1
c000944f:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0009455:	e8 fc fa ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c000945a:	83 c4 20             	add    esp,0x20
c000945d:	e8 52 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009462:	e8 af 94 01 00       	call   c0022916 <idleCommon()>
c0009467:	eb f4                	jmp    c000945d <idleFunction(void*)+0x56>
c0009469:	fb                   	sti    
c000946a:	f4                   	hlt    
c000946b:	e8 a6 94 01 00       	call   c0022916 <idleCommon()>
c0009470:	eb f7                	jmp    c0009469 <idleFunction(void*)+0x62>
c0009472:	66 90                	xchg   ax,ax

c0009474 <IDTEntry::IDTEntry(bool)>:
c0009474:	83 ec 04             	sub    esp,0x4
c0009477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000947b:	88 04 24             	mov    BYTE PTR [esp],al
c000947e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009482:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0009488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948c:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009490:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009494:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0009497:	83 e2 f0             	and    edx,0xfffffff0
c000949a:	83 ca 0e             	or     edx,0xe
c000949d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a4:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094a7:	83 e2 ef             	and    edx,0xffffffef
c00094aa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094ad:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00094b1:	74 05                	je     c00094b8 <IDTEntry::IDTEntry(bool)+0x44>
c00094b3:	b2 03                	mov    dl,0x3
c00094b5:	eb 05                	jmp    c00094bc <IDTEntry::IDTEntry(bool)+0x48>
c00094b7:	90                   	nop
c00094b8:	b2 00                	mov    dl,0x0
c00094ba:	66 90                	xchg   ax,ax
c00094bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094c0:	83 e2 03             	and    edx,0x3
c00094c3:	88 d1                	mov    cl,dl
c00094c5:	c1 e1 05             	shl    ecx,0x5
c00094c8:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094cb:	83 e2 9f             	and    edx,0xffffff9f
c00094ce:	09 ca                	or     edx,ecx
c00094d0:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094d7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c00094da:	83 ca 80             	or     edx,0xffffff80
c00094dd:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00094e0:	90                   	nop
c00094e1:	83 c4 04             	add    esp,0x4
c00094e4:	c3                   	ret    
c00094e5:	90                   	nop

c00094e6 <IDTEntry::setOffset(unsigned int)>:
c00094e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00094ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094ee:	66 89 02             	mov    WORD PTR [edx],ax
c00094f1:	c1 e8 10             	shr    eax,0x10
c00094f4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094f8:	c3                   	ret    
c00094f9:	90                   	nop
c00094fa:	66 90                	xchg   ax,ax

c00094fc <IDT::IDT()>:
c00094fc:	90                   	nop
c00094fd:	c3                   	ret    

c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009502:	83 c0 30             	add    eax,0x30
c0009505:	c3                   	ret    

c0009506 <IDT::addEntry(IDTEntry, int)>:
c0009506:	53                   	push   ebx
c0009507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000950b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000950f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009513:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009517:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000951a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000951e:	5b                   	pop    ebx
c000951f:	c3                   	ret    

c0009520 <IDT::addEntry(int, void (*)(), bool)>:
c0009520:	53                   	push   ebx
c0009521:	83 ec 10             	sub    esp,0x10
c0009524:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c0009529:	50                   	push   eax
c000952a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000952e:	53                   	push   ebx
c000952f:	e8 40 ff ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c0009534:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009538:	53                   	push   ebx
c0009539:	e8 a8 ff ff ff       	call   c00094e6 <IDTEntry::setOffset(unsigned int)>
c000953e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009542:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009546:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000954a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000954e:	e8 b3 ff ff ff       	call   c0009506 <IDT::addEntry(IDTEntry, int)>
c0009553:	83 c4 30             	add    esp,0x30
c0009556:	5b                   	pop    ebx
c0009557:	c3                   	ret    

c0009558 <IDT::flush()>:
c0009558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000955c:	66 c7 05 18 7f 02 c0 ff 07 	mov    WORD PTR ds:0xc0027f18,0x7ff
c0009565:	a3 1a 7f 02 c0       	mov    ds:0xc0027f1a,eax
c000956a:	0f 01 1d 18 7f 02 c0 	lidtd  ds:0xc0027f18
c0009571:	c3                   	ret    

c0009572 <IDT::setup()>:
c0009572:	57                   	push   edi
c0009573:	56                   	push   esi
c0009574:	53                   	push   ebx
c0009575:	83 ec 10             	sub    esp,0x10
c0009578:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000957c:	6a 00                	push   0x0
c000957e:	68 a5 03 00 c0       	push   0xc00003a5
c0009583:	6a 00                	push   0x0
c0009585:	53                   	push   ebx
c0009586:	e8 95 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000958b:	6a 00                	push   0x0
c000958d:	68 b5 03 00 c0       	push   0xc00003b5
c0009592:	6a 01                	push   0x1
c0009594:	53                   	push   ebx
c0009595:	e8 86 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000959a:	83 c4 20             	add    esp,0x20
c000959d:	6a 00                	push   0x0
c000959f:	68 bf 03 00 c0       	push   0xc00003bf
c00095a4:	6a 02                	push   0x2
c00095a6:	53                   	push   ebx
c00095a7:	e8 74 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ac:	6a 00                	push   0x0
c00095ae:	68 c9 03 00 c0       	push   0xc00003c9
c00095b3:	6a 03                	push   0x3
c00095b5:	53                   	push   ebx
c00095b6:	e8 65 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095bb:	83 c4 20             	add    esp,0x20
c00095be:	6a 00                	push   0x0
c00095c0:	68 d3 03 00 c0       	push   0xc00003d3
c00095c5:	6a 04                	push   0x4
c00095c7:	53                   	push   ebx
c00095c8:	e8 53 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095cd:	6a 00                	push   0x0
c00095cf:	68 dd 03 00 c0       	push   0xc00003dd
c00095d4:	6a 05                	push   0x5
c00095d6:	53                   	push   ebx
c00095d7:	e8 44 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095dc:	83 c4 20             	add    esp,0x20
c00095df:	6a 00                	push   0x0
c00095e1:	68 e7 03 00 c0       	push   0xc00003e7
c00095e6:	6a 06                	push   0x6
c00095e8:	53                   	push   ebx
c00095e9:	e8 32 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095ee:	6a 00                	push   0x0
c00095f0:	68 f1 03 00 c0       	push   0xc00003f1
c00095f5:	6a 07                	push   0x7
c00095f7:	53                   	push   ebx
c00095f8:	e8 23 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00095fd:	83 c4 20             	add    esp,0x20
c0009600:	6a 00                	push   0x0
c0009602:	68 fb 03 00 c0       	push   0xc00003fb
c0009607:	6a 08                	push   0x8
c0009609:	53                   	push   ebx
c000960a:	e8 11 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000960f:	6a 00                	push   0x0
c0009611:	68 03 04 00 c0       	push   0xc0000403
c0009616:	6a 09                	push   0x9
c0009618:	53                   	push   ebx
c0009619:	e8 02 ff ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000961e:	83 c4 20             	add    esp,0x20
c0009621:	6a 00                	push   0x0
c0009623:	68 0d 04 00 c0       	push   0xc000040d
c0009628:	6a 0a                	push   0xa
c000962a:	53                   	push   ebx
c000962b:	e8 f0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009630:	6a 00                	push   0x0
c0009632:	68 15 04 00 c0       	push   0xc0000415
c0009637:	6a 0b                	push   0xb
c0009639:	53                   	push   ebx
c000963a:	e8 e1 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000963f:	83 c4 20             	add    esp,0x20
c0009642:	6a 00                	push   0x0
c0009644:	68 1d 04 00 c0       	push   0xc000041d
c0009649:	6a 0c                	push   0xc
c000964b:	53                   	push   ebx
c000964c:	e8 cf fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009651:	6a 00                	push   0x0
c0009653:	68 25 04 00 c0       	push   0xc0000425
c0009658:	6a 0d                	push   0xd
c000965a:	53                   	push   ebx
c000965b:	e8 c0 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009660:	83 c4 20             	add    esp,0x20
c0009663:	6a 00                	push   0x0
c0009665:	68 2d 04 00 c0       	push   0xc000042d
c000966a:	6a 0e                	push   0xe
c000966c:	53                   	push   ebx
c000966d:	e8 ae fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009672:	6a 00                	push   0x0
c0009674:	68 35 04 00 c0       	push   0xc0000435
c0009679:	6a 0f                	push   0xf
c000967b:	53                   	push   ebx
c000967c:	e8 9f fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009681:	83 c4 20             	add    esp,0x20
c0009684:	6a 00                	push   0x0
c0009686:	68 3f 04 00 c0       	push   0xc000043f
c000968b:	6a 10                	push   0x10
c000968d:	53                   	push   ebx
c000968e:	e8 8d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009693:	6a 00                	push   0x0
c0009695:	68 49 04 00 c0       	push   0xc0000449
c000969a:	6a 11                	push   0x11
c000969c:	53                   	push   ebx
c000969d:	e8 7e fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096a2:	83 c4 20             	add    esp,0x20
c00096a5:	6a 00                	push   0x0
c00096a7:	68 53 04 00 c0       	push   0xc0000453
c00096ac:	6a 12                	push   0x12
c00096ae:	53                   	push   ebx
c00096af:	e8 6c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096b4:	6a 01                	push   0x1
c00096b6:	68 ed 04 00 c0       	push   0xc00004ed
c00096bb:	6a 60                	push   0x60
c00096bd:	53                   	push   ebx
c00096be:	e8 5d fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096c3:	83 c4 20             	add    esp,0x20
c00096c6:	6a 00                	push   0x0
c00096c8:	68 f4 04 00 c0       	push   0xc00004f4
c00096cd:	6a 20                	push   0x20
c00096cf:	53                   	push   ebx
c00096d0:	e8 4b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096d5:	6a 00                	push   0x0
c00096d7:	68 df 04 00 c0       	push   0xc00004df
c00096dc:	6a 21                	push   0x21
c00096de:	53                   	push   ebx
c00096df:	e8 3c fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096e4:	83 c4 20             	add    esp,0x20
c00096e7:	6a 00                	push   0x0
c00096e9:	68 e6 04 00 c0       	push   0xc00004e6
c00096ee:	6a 22                	push   0x22
c00096f0:	53                   	push   ebx
c00096f1:	e8 2a fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00096f6:	6a 00                	push   0x0
c00096f8:	68 5d 04 00 c0       	push   0xc000045d
c00096fd:	6a 23                	push   0x23
c00096ff:	53                   	push   ebx
c0009700:	e8 1b fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009705:	83 c4 20             	add    esp,0x20
c0009708:	6a 00                	push   0x0
c000970a:	68 67 04 00 c0       	push   0xc0000467
c000970f:	6a 24                	push   0x24
c0009711:	53                   	push   ebx
c0009712:	e8 09 fe ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009717:	6a 00                	push   0x0
c0009719:	68 71 04 00 c0       	push   0xc0000471
c000971e:	6a 25                	push   0x25
c0009720:	53                   	push   ebx
c0009721:	e8 fa fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009726:	83 c4 20             	add    esp,0x20
c0009729:	6a 00                	push   0x0
c000972b:	68 7b 04 00 c0       	push   0xc000047b
c0009730:	6a 26                	push   0x26
c0009732:	53                   	push   ebx
c0009733:	e8 e8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009738:	6a 00                	push   0x0
c000973a:	68 85 04 00 c0       	push   0xc0000485
c000973f:	6a 27                	push   0x27
c0009741:	53                   	push   ebx
c0009742:	e8 d9 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009747:	83 c4 20             	add    esp,0x20
c000974a:	6a 00                	push   0x0
c000974c:	68 8f 04 00 c0       	push   0xc000048f
c0009751:	6a 28                	push   0x28
c0009753:	53                   	push   ebx
c0009754:	e8 c7 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009759:	6a 00                	push   0x0
c000975b:	68 99 04 00 c0       	push   0xc0000499
c0009760:	6a 29                	push   0x29
c0009762:	53                   	push   ebx
c0009763:	e8 b8 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009768:	83 c4 20             	add    esp,0x20
c000976b:	6a 00                	push   0x0
c000976d:	68 a3 04 00 c0       	push   0xc00004a3
c0009772:	6a 2a                	push   0x2a
c0009774:	53                   	push   ebx
c0009775:	e8 a6 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000977a:	6a 00                	push   0x0
c000977c:	68 ad 04 00 c0       	push   0xc00004ad
c0009781:	6a 2b                	push   0x2b
c0009783:	53                   	push   ebx
c0009784:	e8 97 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009789:	83 c4 20             	add    esp,0x20
c000978c:	6a 00                	push   0x0
c000978e:	68 b7 04 00 c0       	push   0xc00004b7
c0009793:	6a 2c                	push   0x2c
c0009795:	53                   	push   ebx
c0009796:	e8 85 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000979b:	6a 00                	push   0x0
c000979d:	68 c1 04 00 c0       	push   0xc00004c1
c00097a2:	6a 2d                	push   0x2d
c00097a4:	53                   	push   ebx
c00097a5:	e8 76 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097aa:	83 c4 20             	add    esp,0x20
c00097ad:	6a 00                	push   0x0
c00097af:	68 cb 04 00 c0       	push   0xc00004cb
c00097b4:	6a 2e                	push   0x2e
c00097b6:	53                   	push   ebx
c00097b7:	e8 64 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097bc:	6a 00                	push   0x0
c00097be:	68 d5 04 00 c0       	push   0xc00004d5
c00097c3:	6a 2f                	push   0x2f
c00097c5:	53                   	push   ebx
c00097c6:	e8 55 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097cb:	83 c4 20             	add    esp,0x20
c00097ce:	6a 00                	push   0x0
c00097d0:	68 2b 05 00 c0       	push   0xc000052b
c00097d5:	6a 30                	push   0x30
c00097d7:	53                   	push   ebx
c00097d8:	e8 43 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097dd:	6a 00                	push   0x0
c00097df:	68 35 05 00 c0       	push   0xc0000535
c00097e4:	6a 31                	push   0x31
c00097e6:	53                   	push   ebx
c00097e7:	e8 34 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097ec:	83 c4 20             	add    esp,0x20
c00097ef:	6a 00                	push   0x0
c00097f1:	68 3f 05 00 c0       	push   0xc000053f
c00097f6:	6a 32                	push   0x32
c00097f8:	53                   	push   ebx
c00097f9:	e8 22 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c00097fe:	6a 00                	push   0x0
c0009800:	68 49 05 00 c0       	push   0xc0000549
c0009805:	6a 33                	push   0x33
c0009807:	53                   	push   ebx
c0009808:	e8 13 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000980d:	83 c4 20             	add    esp,0x20
c0009810:	6a 00                	push   0x0
c0009812:	68 53 05 00 c0       	push   0xc0000553
c0009817:	6a 34                	push   0x34
c0009819:	53                   	push   ebx
c000981a:	e8 01 fd ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000981f:	6a 00                	push   0x0
c0009821:	68 5d 05 00 c0       	push   0xc000055d
c0009826:	6a 35                	push   0x35
c0009828:	53                   	push   ebx
c0009829:	e8 f2 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000982e:	83 c4 20             	add    esp,0x20
c0009831:	6a 00                	push   0x0
c0009833:	68 67 05 00 c0       	push   0xc0000567
c0009838:	6a 36                	push   0x36
c000983a:	53                   	push   ebx
c000983b:	e8 e0 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c0009840:	6a 00                	push   0x0
c0009842:	68 71 05 00 c0       	push   0xc0000571
c0009847:	6a 37                	push   0x37
c0009849:	53                   	push   ebx
c000984a:	e8 d1 fc ff ff       	call   c0009520 <IDT::addEntry(int, void (*)(), bool)>
c000984f:	83 c4 1c             	add    esp,0x1c
c0009852:	6a 03                	push   0x3
c0009854:	6a 02                	push   0x2
c0009856:	ff 35 30 80 02 c0    	push   DWORD PTR ds:0xc0028030
c000985c:	e8 1d 29 00 00       	call   c000c17e <VAS::allocatePages(int, int)>
c0009861:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0009868:	89 c6                	mov    esi,eax
c000986a:	e8 a0 01 00 00       	call   c0009a0f <malloc>
c000986f:	81 c6 00 20 00 00    	add    esi,0x2000
c0009875:	89 04 24             	mov    DWORD PTR [esp],eax
c0009878:	89 c7                	mov    edi,eax
c000987a:	e8 99 1a 00 00       	call   c000b318 <TSS::TSS()>
c000987f:	83 c4 0c             	add    esp,0xc
c0009882:	68 fb 03 00 c0       	push   0xc00003fb
c0009887:	56                   	push   esi
c0009888:	57                   	push   edi
c0009889:	e8 ce 1a 00 00       	call   c000b35c <TSS::setup(unsigned long, unsigned long)>
c000988e:	89 c6                	mov    esi,eax
c0009890:	58                   	pop    eax
c0009891:	5a                   	pop    edx
c0009892:	6a 00                	push   0x0
c0009894:	8d 44 24 14          	lea    eax,[esp+0x14]
c0009898:	50                   	push   eax
c0009899:	e8 d6 fb ff ff       	call   c0009474 <IDTEntry::IDTEntry(bool)>
c000989e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098a2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00098a7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c00098ae:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c00098b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00098b8:	80 ce 05             	or     dh,0x5
c00098bb:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c00098be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00098c6:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00098c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00098cc:	e8 87 fc ff ff       	call   c0009558 <IDT::flush()>
c00098d1:	83 c4 20             	add    esp,0x20
c00098d4:	5b                   	pop    ebx
c00098d5:	5e                   	pop    esi
c00098d6:	5f                   	pop    edi
c00098d7:	c3                   	ret    

c00098d8 <sbrk>:
c00098d8:	55                   	push   ebp
c00098d9:	57                   	push   edi
c00098da:	56                   	push   esi
c00098db:	53                   	push   ebx
c00098dc:	83 ec 24             	sub    esp,0x24
c00098df:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00098e3:	53                   	push   ebx
c00098e4:	68 18 3f 02 c0       	push   0xc0023f18
c00098e9:	e8 0d 34 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	85 db                	test   ebx,ebx
c00098f3:	74 5f                	je     c0009954 <sbrk+0x7c>
c00098f5:	78 64                	js     c000995b <sbrk+0x83>
c00098f7:	a1 70 71 02 c0       	mov    eax,ds:0xc0027170
c00098fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009900:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c0009906:	89 dd                	mov    ebp,ebx
c0009908:	78 69                	js     c0009973 <sbrk+0x9b>
c000990a:	c1 fd 0c             	sar    ebp,0xc
c000990d:	bb 00 00 00 00       	mov    ebx,0x0
c0009912:	8b 35 30 80 02 c0    	mov    esi,DWORD PTR ds:0xc0028030
c0009918:	8b 3d 70 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027170
c000991e:	e8 a3 07 00 00       	call   c000a0c6 <Phys::allocatePage()>
c0009923:	68 01 04 00 00       	push   0x401
c0009928:	57                   	push   edi
c0009929:	50                   	push   eax
c000992a:	56                   	push   esi
c000992b:	e8 4c 27 00 00       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0009930:	81 05 70 71 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0027170,0x1000
c000993a:	43                   	inc    ebx
c000993b:	83 c4 10             	add    esp,0x10
c000993e:	39 dd                	cmp    ebp,ebx
c0009940:	75 d0                	jne    c0009912 <sbrk+0x3a>
c0009942:	0f 20 d8             	mov    eax,cr3
c0009945:	0f 22 d8             	mov    cr3,eax
c0009948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000994c:	83 c4 1c             	add    esp,0x1c
c000994f:	5b                   	pop    ebx
c0009950:	5e                   	pop    esi
c0009951:	5f                   	pop    edi
c0009952:	5d                   	pop    ebp
c0009953:	c3                   	ret    
c0009954:	a1 70 71 02 c0       	mov    eax,ds:0xc0027170
c0009959:	eb f1                	jmp    c000994c <sbrk+0x74>
c000995b:	83 ec 08             	sub    esp,0x8
c000995e:	53                   	push   ebx
c000995f:	68 44 3f 02 c0       	push   0xc0023f44
c0009964:	e8 92 33 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009969:	83 c4 10             	add    esp,0x10
c000996c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009971:	eb d9                	jmp    c000994c <sbrk+0x74>
c0009973:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c0009979:	eb 8f                	jmp    c000990a <sbrk+0x32>

c000997b <mmap>:
c000997b:	83 ec 18             	sub    esp,0x18
c000997e:	68 36 3f 02 c0       	push   0xc0023f36
c0009983:	e8 1b b0 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0009988:	b8 00 00 00 00       	mov    eax,0x0
c000998d:	83 c4 1c             	add    esp,0x1c
c0009990:	c3                   	ret    

c0009991 <munmap>:
c0009991:	83 ec 18             	sub    esp,0x18
c0009994:	68 3b 3f 02 c0       	push   0xc0023f3b
c0009999:	e8 05 b0 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000999e:	b8 00 00 00 00       	mov    eax,0x0
c00099a3:	83 c4 1c             	add    esp,0x1c
c00099a6:	c3                   	ret    

c00099a7 <liballoc_lock()>:
c00099a7:	fa                   	cli    
c00099a8:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00099ae:	b8 00 00 00 00       	mov    eax,0x0
c00099b3:	c3                   	ret    

c00099b4 <liballoc_unlock()>:
c00099b4:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00099b9:	48                   	dec    eax
c00099ba:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00099bf:	75 01                	jne    c00099c2 <liballoc_unlock()+0xe>
c00099c1:	fb                   	sti    
c00099c2:	b8 00 00 00 00       	mov    eax,0x0
c00099c7:	c3                   	ret    

c00099c8 <liballoc_alloc(int)>:
c00099c8:	83 ec 10             	sub    esp,0x10
c00099cb:	6a 01                	push   0x1
c00099cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099d1:	ff 35 30 80 02 c0    	push   DWORD PTR ds:0xc0028030
c00099d7:	e8 a2 27 00 00       	call   c000c17e <VAS::allocatePages(int, int)>
c00099dc:	83 c4 1c             	add    esp,0x1c
c00099df:	c3                   	ret    

c00099e0 <liballoc_free(void*, int)>:
c00099e0:	83 ec 14             	sub    esp,0x14
c00099e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00099e7:	ff 35 30 80 02 c0    	push   DWORD PTR ds:0xc0028030
c00099ed:	e8 36 24 00 00       	call   c000be28 <VAS::freeAllocatedPages(unsigned long)>
c00099f2:	b8 00 00 00 00       	mov    eax,0x0
c00099f7:	83 c4 1c             	add    esp,0x1c
c00099fa:	c3                   	ret    

c00099fb <realloc>:
c00099fb:	83 ec 14             	sub    esp,0x14
c00099fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a06:	e8 55 7b ff ff       	call   c0001560 <dlrealloc>
c0009a0b:	83 c4 1c             	add    esp,0x1c
c0009a0e:	c3                   	ret    

c0009a0f <malloc>:
c0009a0f:	83 ec 18             	sub    esp,0x18
c0009a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a16:	e8 08 76 ff ff       	call   c0001023 <dlmalloc>
c0009a1b:	83 c4 1c             	add    esp,0x1c
c0009a1e:	c3                   	ret    

c0009a1f <free>:
c0009a1f:	83 ec 18             	sub    esp,0x18
c0009a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a26:	e8 9d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a2b:	83 c4 1c             	add    esp,0x1c
c0009a2e:	c3                   	ret    

c0009a2f <rfree>:
c0009a2f:	83 ec 18             	sub    esp,0x18
c0009a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a36:	e8 8d 72 ff ff       	call   c0000cc8 <dlfree>
c0009a3b:	83 c4 1c             	add    esp,0x1c
c0009a3e:	c3                   	ret    

c0009a3f <calloc>:
c0009a3f:	56                   	push   esi
c0009a40:	53                   	push   ebx
c0009a41:	83 ec 10             	sub    esp,0x10
c0009a44:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009a48:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a4d:	53                   	push   ebx
c0009a4e:	e8 bc ff ff ff       	call   c0009a0f <malloc>
c0009a53:	89 c6                	mov    esi,eax
c0009a55:	83 c4 0c             	add    esp,0xc
c0009a58:	53                   	push   ebx
c0009a59:	6a 00                	push   0x0
c0009a5b:	50                   	push   eax
c0009a5c:	e8 23 6c ff ff       	call   c0000684 <memset>
c0009a61:	89 f0                	mov    eax,esi
c0009a63:	83 c4 14             	add    esp,0x14
c0009a66:	5b                   	pop    ebx
c0009a67:	5e                   	pop    esi
c0009a68:	c3                   	ret    

c0009a69 <Krnl::setBootMessage(char const*)>:
c0009a69:	57                   	push   edi
c0009a6a:	56                   	push   esi
c0009a6b:	53                   	push   ebx
c0009a6c:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a72:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a79:	68 9e 00 00 00       	push   0x9e
c0009a7e:	6a 00                	push   0x0
c0009a80:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a84:	56                   	push   esi
c0009a85:	e8 fa 6b ff ff       	call   c0000684 <memset>
c0009a8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a8d:	e8 0e 6c ff ff       	call   c00006a0 <strlen>
c0009a92:	ba 50 00 00 00       	mov    edx,0x50
c0009a97:	83 c4 10             	add    esp,0x10
c0009a9a:	29 c2                	sub    edx,eax
c0009a9c:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009aa0:	d1 ea                	shr    edx,1
c0009aa2:	84 c0                	test   al,al
c0009aa4:	74 19                	je     c0009abf <Krnl::setBootMessage(char const*)+0x56>
c0009aa6:	01 d2                	add    edx,edx
c0009aa8:	43                   	inc    ebx
c0009aa9:	01 f2                	add    edx,esi
c0009aab:	80 cc 0f             	or     ah,0xf
c0009aae:	83 c2 02             	add    edx,0x2
c0009ab1:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009ab5:	43                   	inc    ebx
c0009ab6:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009abb:	84 c0                	test   al,al
c0009abd:	75 ec                	jne    c0009aab <Krnl::setBootMessage(char const*)+0x42>
c0009abf:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009ac4:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009ac9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009acb:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009ad1:	5b                   	pop    ebx
c0009ad2:	5e                   	pop    esi
c0009ad3:	5f                   	pop    edi
c0009ad4:	c3                   	ret    

c0009ad5 <kernel_main>:
c0009ad5:	57                   	push   edi
c0009ad6:	56                   	push   esi
c0009ad7:	53                   	push   ebx
c0009ad8:	83 ec 20             	sub    esp,0x20
c0009adb:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009ae0:	a3 20 7f 02 c0       	mov    ds:0xc0027f20,eax
c0009ae5:	f6 c4 08             	test   ah,0x8
c0009ae8:	0f 85 7a 03 00 00    	jne    c0009e68 <kernel_main+0x393>
c0009aee:	31 f6                	xor    esi,esi
c0009af0:	bf f9 03 00 00       	mov    edi,0x3f9
c0009af5:	89 f0                	mov    eax,esi
c0009af7:	89 fa                	mov    edx,edi
c0009af9:	ee                   	out    dx,al
c0009afa:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aff:	b0 80                	mov    al,0x80
c0009b01:	89 da                	mov    edx,ebx
c0009b03:	ee                   	out    dx,al
c0009b04:	b1 03                	mov    cl,0x3
c0009b06:	ba f8 03 00 00       	mov    edx,0x3f8
c0009b0b:	88 c8                	mov    al,cl
c0009b0d:	ee                   	out    dx,al
c0009b0e:	89 f0                	mov    eax,esi
c0009b10:	89 fa                	mov    edx,edi
c0009b12:	ee                   	out    dx,al
c0009b13:	88 c8                	mov    al,cl
c0009b15:	89 da                	mov    edx,ebx
c0009b17:	ee                   	out    dx,al
c0009b18:	b0 c7                	mov    al,0xc7
c0009b1a:	ba fa 03 00 00       	mov    edx,0x3fa
c0009b1f:	ee                   	out    dx,al
c0009b20:	b0 0b                	mov    al,0xb
c0009b22:	ba fc 03 00 00       	mov    edx,0x3fc
c0009b27:	ee                   	out    dx,al
c0009b28:	83 ec 0c             	sub    esp,0xc
c0009b2b:	68 74 3f 02 c0       	push   0xc0023f74
c0009b30:	e8 c6 31 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009b35:	83 c4 10             	add    esp,0x10
c0009b38:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009b3f:	0f 85 eb 02 00 00    	jne    c0009e30 <kernel_main+0x35b>
c0009b45:	e8 d2 0c 00 00       	call   c000a81c <installVgaTextImplementation()>
c0009b4a:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009b51:	0f 85 94 02 00 00    	jne    c0009deb <kernel_main+0x316>
c0009b57:	0f b6 05 80 71 02 c0 	movzx  eax,BYTE PTR ds:0xc0027180
c0009b5e:	84 c0                	test   al,al
c0009b60:	74 7b                	je     c0009bdd <kernel_main+0x108>
c0009b62:	31 db                	xor    ebx,ebx
c0009b64:	bf 0a 00 00 00       	mov    edi,0xa
c0009b69:	be 05 00 00 00       	mov    esi,0x5
c0009b6e:	31 c9                	xor    ecx,ecx
c0009b70:	eb 2a                	jmp    c0009b9c <kernel_main+0xc7>
c0009b72:	3c 0d                	cmp    al,0xd
c0009b74:	74 1a                	je     c0009b90 <kernel_main+0xbb>
c0009b76:	3c 0a                	cmp    al,0xa
c0009b78:	74 40                	je     c0009bba <kernel_main+0xe5>
c0009b7a:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b7d:	80 cc 0e             	or     ah,0xe
c0009b80:	c1 e2 04             	shl    edx,0x4
c0009b83:	01 ca                	add    edx,ecx
c0009b85:	41                   	inc    ecx
c0009b86:	01 fa                	add    edx,edi
c0009b88:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b90:	43                   	inc    ebx
c0009b91:	0f b6 83 80 71 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8e80]
c0009b98:	84 c0                	test   al,al
c0009b9a:	74 32                	je     c0009bce <kernel_main+0xf9>
c0009b9c:	80 b9 b6 71 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffd8e4a],0xdb
c0009ba3:	75 cd                	jne    c0009b72 <kernel_main+0x9d>
c0009ba5:	0f b6 91 b5 71 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffd8e4b]
c0009bac:	83 e2 fe             	and    edx,0xfffffffe
c0009baf:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009bb5:	75 bb                	jne    c0009b72 <kernel_main+0x9d>
c0009bb7:	47                   	inc    edi
c0009bb8:	eb b8                	jmp    c0009b72 <kernel_main+0x9d>
c0009bba:	43                   	inc    ebx
c0009bbb:	46                   	inc    esi
c0009bbc:	31 c9                	xor    ecx,ecx
c0009bbe:	0f b6 83 80 71 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffd8e80]
c0009bc5:	bf 0a 00 00 00       	mov    edi,0xa
c0009bca:	84 c0                	test   al,al
c0009bcc:	75 ce                	jne    c0009b9c <kernel_main+0xc7>
c0009bce:	8b 15 20 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f20
c0009bd4:	80 e6 08             	and    dh,0x8
c0009bd7:	0f 85 bf 00 00 00    	jne    c0009c9c <kernel_main+0x1c7>
c0009bdd:	83 ec 0c             	sub    esp,0xc
c0009be0:	68 10 40 02 c0       	push   0xc0024010
c0009be5:	e8 7f fe ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009bea:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009bef:	05 ff 0f 00 00       	add    eax,0xfff
c0009bf4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0009bfc:	e8 44 06 00 00       	call   c000a245 <Phys::physicalMemorySetup(unsigned int)>
c0009c01:	83 c4 10             	add    esp,0x10
c0009c04:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009c0b:	0f 85 a2 01 00 00    	jne    c0009db3 <kernel_main+0x2de>
c0009c11:	e8 7e 1f 00 00       	call   c000bb94 <Virt::virtualMemorySetup()>
c0009c16:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009c1d:	0f 85 58 01 00 00    	jne    c0009d7b <kernel_main+0x2a6>
c0009c23:	83 ec 0c             	sub    esp,0xc
c0009c26:	8d 74 24 18          	lea    esi,[esp+0x18]
c0009c2a:	56                   	push   esi
c0009c2b:	e8 20 20 00 00       	call   c000bc50 <VAS::VAS()>
c0009c30:	83 c4 10             	add    esp,0x10
c0009c33:	89 35 30 80 02 c0    	mov    DWORD PTR ds:0xc0028030,esi
c0009c39:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009c40:	0f 85 fd 00 00 00    	jne    c0009d43 <kernel_main+0x26e>
c0009c46:	e8 d5 63 ff ff       	call   c0000020 <callGlobalConstructors>
c0009c4b:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009c52:	0f 85 b3 00 00 00    	jne    c0009d0b <kernel_main+0x236>
c0009c58:	83 ec 0c             	sub    esp,0xc
c0009c5b:	68 ec 01 00 00       	push   0x1ec
c0009c60:	e8 aa fd ff ff       	call   c0009a0f <malloc>
c0009c65:	89 c3                	mov    ebx,eax
c0009c67:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c6a:	e8 51 ef ff ff       	call   c0008bc0 <Computer::Computer()>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	89 1d 08 7f 02 c0    	mov    DWORD PTR ds:0xc0027f08,ebx
c0009c78:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0009c7f:	75 53                	jne    c0009cd4 <kernel_main+0x1ff>
c0009c81:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c83:	6a 00                	push   0x0
c0009c85:	6a 00                	push   0x0
c0009c87:	6a 00                	push   0x0
c0009c89:	53                   	push   ebx
c0009c8a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0009c8d:	89 34 24             	mov    DWORD PTR [esp],esi
c0009c90:	e8 6b 22 00 00       	call   c000bf00 <VAS::~VAS()>
c0009c95:	83 c4 30             	add    esp,0x30
c0009c98:	5b                   	pop    ebx
c0009c99:	5e                   	pop    esi
c0009c9a:	5f                   	pop    edi
c0009c9b:	c3                   	ret    
c0009c9c:	83 ec 0c             	sub    esp,0xc
c0009c9f:	68 bf 3f 02 c0       	push   0xc0023fbf
c0009ca4:	e8 c0 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ca9:	83 c4 10             	add    esp,0x10
c0009cac:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009cb3:	0f 85 24 ff ff ff    	jne    c0009bdd <kernel_main+0x108>
c0009cb9:	eb 04                	jmp    c0009cbf <kernel_main+0x1ea>
c0009cbb:	3c 1c                	cmp    al,0x1c
c0009cbd:	74 06                	je     c0009cc5 <kernel_main+0x1f0>
c0009cbf:	e4 60                	in     al,0x60
c0009cc1:	3c 5a                	cmp    al,0x5a
c0009cc3:	75 f6                	jne    c0009cbb <kernel_main+0x1e6>
c0009cc5:	e4 60                	in     al,0x60
c0009cc7:	3c 5a                	cmp    al,0x5a
c0009cc9:	74 fa                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccb:	3c 1c                	cmp    al,0x1c
c0009ccd:	74 f6                	je     c0009cc5 <kernel_main+0x1f0>
c0009ccf:	e9 09 ff ff ff       	jmp    c0009bdd <kernel_main+0x108>
c0009cd4:	83 ec 0c             	sub    esp,0xc
c0009cd7:	68 fe 3f 02 c0       	push   0xc0023ffe
c0009cdc:	e8 88 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009ceb:	74 0c                	je     c0009cf9 <kernel_main+0x224>
c0009ced:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c0009cf3:	eb 8c                	jmp    c0009c81 <kernel_main+0x1ac>
c0009cf5:	3c 1c                	cmp    al,0x1c
c0009cf7:	74 06                	je     c0009cff <kernel_main+0x22a>
c0009cf9:	e4 60                	in     al,0x60
c0009cfb:	3c 5a                	cmp    al,0x5a
c0009cfd:	75 f6                	jne    c0009cf5 <kernel_main+0x220>
c0009cff:	e4 60                	in     al,0x60
c0009d01:	3c 5a                	cmp    al,0x5a
c0009d03:	74 fa                	je     c0009cff <kernel_main+0x22a>
c0009d05:	3c 1c                	cmp    al,0x1c
c0009d07:	74 f6                	je     c0009cff <kernel_main+0x22a>
c0009d09:	eb e2                	jmp    c0009ced <kernel_main+0x218>
c0009d0b:	83 ec 0c             	sub    esp,0xc
c0009d0e:	68 eb 3f 02 c0       	push   0xc0023feb
c0009d13:	e8 51 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d18:	83 c4 10             	add    esp,0x10
c0009d1b:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009d22:	0f 85 30 ff ff ff    	jne    c0009c58 <kernel_main+0x183>
c0009d28:	eb 04                	jmp    c0009d2e <kernel_main+0x259>
c0009d2a:	3c 1c                	cmp    al,0x1c
c0009d2c:	74 06                	je     c0009d34 <kernel_main+0x25f>
c0009d2e:	e4 60                	in     al,0x60
c0009d30:	3c 5a                	cmp    al,0x5a
c0009d32:	75 f6                	jne    c0009d2a <kernel_main+0x255>
c0009d34:	e4 60                	in     al,0x60
c0009d36:	3c 5a                	cmp    al,0x5a
c0009d38:	74 fa                	je     c0009d34 <kernel_main+0x25f>
c0009d3a:	3c 1c                	cmp    al,0x1c
c0009d3c:	74 f6                	je     c0009d34 <kernel_main+0x25f>
c0009d3e:	e9 15 ff ff ff       	jmp    c0009c58 <kernel_main+0x183>
c0009d43:	83 ec 0c             	sub    esp,0xc
c0009d46:	68 e1 3f 02 c0       	push   0xc0023fe1
c0009d4b:	e8 19 fd ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d50:	83 c4 10             	add    esp,0x10
c0009d53:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009d5a:	0f 85 e6 fe ff ff    	jne    c0009c46 <kernel_main+0x171>
c0009d60:	eb 04                	jmp    c0009d66 <kernel_main+0x291>
c0009d62:	3c 1c                	cmp    al,0x1c
c0009d64:	74 06                	je     c0009d6c <kernel_main+0x297>
c0009d66:	e4 60                	in     al,0x60
c0009d68:	3c 5a                	cmp    al,0x5a
c0009d6a:	75 f6                	jne    c0009d62 <kernel_main+0x28d>
c0009d6c:	e4 60                	in     al,0x60
c0009d6e:	3c 5a                	cmp    al,0x5a
c0009d70:	74 fa                	je     c0009d6c <kernel_main+0x297>
c0009d72:	3c 1c                	cmp    al,0x1c
c0009d74:	74 f6                	je     c0009d6c <kernel_main+0x297>
c0009d76:	e9 cb fe ff ff       	jmp    c0009c46 <kernel_main+0x171>
c0009d7b:	83 ec 0c             	sub    esp,0xc
c0009d7e:	68 d6 3f 02 c0       	push   0xc0023fd6
c0009d83:	e8 e1 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009d88:	83 c4 10             	add    esp,0x10
c0009d8b:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009d92:	0f 85 8b fe ff ff    	jne    c0009c23 <kernel_main+0x14e>
c0009d98:	eb 04                	jmp    c0009d9e <kernel_main+0x2c9>
c0009d9a:	3c 1c                	cmp    al,0x1c
c0009d9c:	74 06                	je     c0009da4 <kernel_main+0x2cf>
c0009d9e:	e4 60                	in     al,0x60
c0009da0:	3c 5a                	cmp    al,0x5a
c0009da2:	75 f6                	jne    c0009d9a <kernel_main+0x2c5>
c0009da4:	e4 60                	in     al,0x60
c0009da6:	3c 5a                	cmp    al,0x5a
c0009da8:	74 fa                	je     c0009da4 <kernel_main+0x2cf>
c0009daa:	3c 1c                	cmp    al,0x1c
c0009dac:	74 f6                	je     c0009da4 <kernel_main+0x2cf>
c0009dae:	e9 70 fe ff ff       	jmp    c0009c23 <kernel_main+0x14e>
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	68 cb 3f 02 c0       	push   0xc0023fcb
c0009dbb:	e8 a9 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009dc0:	83 c4 10             	add    esp,0x10
c0009dc3:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009dca:	0f 85 41 fe ff ff    	jne    c0009c11 <kernel_main+0x13c>
c0009dd0:	eb 04                	jmp    c0009dd6 <kernel_main+0x301>
c0009dd2:	3c 1c                	cmp    al,0x1c
c0009dd4:	74 06                	je     c0009ddc <kernel_main+0x307>
c0009dd6:	e4 60                	in     al,0x60
c0009dd8:	3c 5a                	cmp    al,0x5a
c0009dda:	75 f6                	jne    c0009dd2 <kernel_main+0x2fd>
c0009ddc:	e4 60                	in     al,0x60
c0009dde:	3c 5a                	cmp    al,0x5a
c0009de0:	74 fa                	je     c0009ddc <kernel_main+0x307>
c0009de2:	3c 1c                	cmp    al,0x1c
c0009de4:	74 f6                	je     c0009ddc <kernel_main+0x307>
c0009de6:	e9 26 fe ff ff       	jmp    c0009c11 <kernel_main+0x13c>
c0009deb:	83 ec 0c             	sub    esp,0xc
c0009dee:	68 ad 3f 02 c0       	push   0xc0023fad
c0009df3:	e8 71 fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009df8:	8b 15 20 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f20
c0009dfe:	83 c4 10             	add    esp,0x10
c0009e01:	f6 c2 80             	test   dl,0x80
c0009e04:	74 18                	je     c0009e1e <kernel_main+0x349>
c0009e06:	0f b6 05 80 71 02 c0 	movzx  eax,BYTE PTR ds:0xc0027180
c0009e0d:	84 c0                	test   al,al
c0009e0f:	0f 85 4d fd ff ff    	jne    c0009b62 <kernel_main+0x8d>
c0009e15:	e9 ba fd ff ff       	jmp    c0009bd4 <kernel_main+0xff>
c0009e1a:	3c 1c                	cmp    al,0x1c
c0009e1c:	74 06                	je     c0009e24 <kernel_main+0x34f>
c0009e1e:	e4 60                	in     al,0x60
c0009e20:	3c 5a                	cmp    al,0x5a
c0009e22:	75 f6                	jne    c0009e1a <kernel_main+0x345>
c0009e24:	e4 60                	in     al,0x60
c0009e26:	3c 5a                	cmp    al,0x5a
c0009e28:	74 fa                	je     c0009e24 <kernel_main+0x34f>
c0009e2a:	3c 1c                	cmp    al,0x1c
c0009e2c:	74 f6                	je     c0009e24 <kernel_main+0x34f>
c0009e2e:	eb d6                	jmp    c0009e06 <kernel_main+0x331>
c0009e30:	83 ec 0c             	sub    esp,0xc
c0009e33:	68 9e 3f 02 c0       	push   0xc0023f9e
c0009e38:	e8 2c fc ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e3d:	83 c4 10             	add    esp,0x10
c0009e40:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009e47:	0f 85 f8 fc ff ff    	jne    c0009b45 <kernel_main+0x70>
c0009e4d:	eb 04                	jmp    c0009e53 <kernel_main+0x37e>
c0009e4f:	3c 1c                	cmp    al,0x1c
c0009e51:	74 06                	je     c0009e59 <kernel_main+0x384>
c0009e53:	e4 60                	in     al,0x60
c0009e55:	3c 5a                	cmp    al,0x5a
c0009e57:	75 f6                	jne    c0009e4f <kernel_main+0x37a>
c0009e59:	e4 60                	in     al,0x60
c0009e5b:	3c 5a                	cmp    al,0x5a
c0009e5d:	74 fa                	je     c0009e59 <kernel_main+0x384>
c0009e5f:	3c 1c                	cmp    al,0x1c
c0009e61:	74 f6                	je     c0009e59 <kernel_main+0x384>
c0009e63:	e9 dd fc ff ff       	jmp    c0009b45 <kernel_main+0x70>
c0009e68:	83 ec 0c             	sub    esp,0xc
c0009e6b:	68 8b 3f 02 c0       	push   0xc0023f8b
c0009e70:	e8 f4 fb ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0009e75:	83 c4 10             	add    esp,0x10
c0009e78:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0009e7f:	0f 85 69 fc ff ff    	jne    c0009aee <kernel_main+0x19>
c0009e85:	eb 04                	jmp    c0009e8b <kernel_main+0x3b6>
c0009e87:	3c 1c                	cmp    al,0x1c
c0009e89:	74 06                	je     c0009e91 <kernel_main+0x3bc>
c0009e8b:	e4 60                	in     al,0x60
c0009e8d:	3c 5a                	cmp    al,0x5a
c0009e8f:	75 f6                	jne    c0009e87 <kernel_main+0x3b2>
c0009e91:	e4 60                	in     al,0x60
c0009e93:	3c 5a                	cmp    al,0x5a
c0009e95:	74 fa                	je     c0009e91 <kernel_main+0x3bc>
c0009e97:	3c 1c                	cmp    al,0x1c
c0009e99:	74 f6                	je     c0009e91 <kernel_main+0x3bc>
c0009e9b:	e9 4e fc ff ff       	jmp    c0009aee <kernel_main+0x19>

c0009ea0 <Phys::allocateDMA(unsigned long)>:
c0009ea0:	55                   	push   ebp
c0009ea1:	31 ed                	xor    ebp,ebp
c0009ea3:	57                   	push   edi
c0009ea4:	56                   	push   esi
c0009ea5:	53                   	push   ebx
c0009ea6:	31 db                	xor    ebx,ebx
c0009ea8:	83 ec 28             	sub    esp,0x28
c0009eab:	68 2f 40 02 c0       	push   0xc002402f
c0009eb0:	e8 46 2e 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009eb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009eb9:	83 c4 10             	add    esp,0x10
c0009ebc:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009ec2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009eca:	c1 ef 0c             	shr    edi,0xc
c0009ecd:	31 c0                	xor    eax,eax
c0009ecf:	eb 19                	jmp    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009ed1:	85 c0                	test   eax,eax
c0009ed3:	75 06                	jne    c0009edb <Phys::allocateDMA(unsigned long)+0x3b>
c0009ed5:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009ed9:	89 dd                	mov    ebp,ebx
c0009edb:	8d 70 01             	lea    esi,[eax+0x1]
c0009ede:	39 f7                	cmp    edi,esi
c0009ee0:	74 3f                	je     c0009f21 <Phys::allocateDMA(unsigned long)+0x81>
c0009ee2:	89 f0                	mov    eax,esi
c0009ee4:	43                   	inc    ebx
c0009ee5:	83 fb 0f             	cmp    ebx,0xf
c0009ee8:	7f 11                	jg     c0009efb <Phys::allocateDMA(unsigned long)+0x5b>
c0009eea:	80 bb 3c 7f 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd80c4],0x0
c0009ef1:	74 de                	je     c0009ed1 <Phys::allocateDMA(unsigned long)+0x31>
c0009ef3:	31 c0                	xor    eax,eax
c0009ef5:	43                   	inc    ebx
c0009ef6:	83 fb 0f             	cmp    ebx,0xf
c0009ef9:	7e ef                	jle    c0009eea <Phys::allocateDMA(unsigned long)+0x4a>
c0009efb:	83 ec 0c             	sub    esp,0xc
c0009efe:	68 5f 40 02 c0       	push   0xc002405f
c0009f03:	e8 f3 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009f08:	c7 04 24 1c 41 02 c0 	mov    DWORD PTR [esp],0xc002411c
c0009f0f:	e8 8f aa 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0009f14:	83 c4 10             	add    esp,0x10
c0009f17:	31 c0                	xor    eax,eax
c0009f19:	83 c4 1c             	add    esp,0x1c
c0009f1c:	5b                   	pop    ebx
c0009f1d:	5e                   	pop    esi
c0009f1e:	5f                   	pop    edi
c0009f1f:	5d                   	pop    ebp
c0009f20:	c3                   	ret    
c0009f21:	89 e9                	mov    ecx,ebp
c0009f23:	c1 f9 04             	sar    ecx,0x4
c0009f26:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f2a:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009f2e:	89 ca                	mov    edx,ecx
c0009f30:	4a                   	dec    edx
c0009f31:	79 03                	jns    c0009f36 <Phys::allocateDMA(unsigned long)+0x96>
c0009f33:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009f36:	c1 fa 04             	sar    edx,0x4
c0009f39:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009f3d:	74 08                	je     c0009f47 <Phys::allocateDMA(unsigned long)+0xa7>
c0009f3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f43:	31 c0                	xor    eax,eax
c0009f45:	eb ae                	jmp    c0009ef5 <Phys::allocateDMA(unsigned long)+0x55>
c0009f47:	85 f6                	test   esi,esi
c0009f49:	74 15                	je     c0009f60 <Phys::allocateDMA(unsigned long)+0xc0>
c0009f4b:	8d 95 3c 7f 02 c0    	lea    edx,[ebp-0x3ffd80c4]
c0009f51:	8d 84 05 3d 7f 02 c0 	lea    eax,[ebp+eax*1-0x3ffd80c3]
c0009f58:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009f5b:	42                   	inc    edx
c0009f5c:	39 d0                	cmp    eax,edx
c0009f5e:	75 f8                	jne    c0009f58 <Phys::allocateDMA(unsigned long)+0xb8>
c0009f60:	83 ec 0c             	sub    esp,0xc
c0009f63:	01 3d 34 7f 02 c0    	add    DWORD PTR ds:0xc0027f34,edi
c0009f69:	68 48 40 02 c0       	push   0xc0024048
c0009f6e:	e8 88 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009f73:	83 c4 10             	add    esp,0x10
c0009f76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f7a:	85 c0                	test   eax,eax
c0009f7c:	74 23                	je     c0009fa1 <Phys::allocateDMA(unsigned long)+0x101>
c0009f7e:	83 ec 0c             	sub    esp,0xc
c0009f81:	68 6e 6d 02 c0       	push   0xc0026d6e
c0009f86:	e8 70 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009f8b:	c7 04 24 1c 41 02 c0 	mov    DWORD PTR [esp],0xc002411c
c0009f92:	e8 0c aa 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0009f97:	83 c4 10             	add    esp,0x10
c0009f9a:	89 f0                	mov    eax,esi
c0009f9c:	e9 43 ff ff ff       	jmp    c0009ee4 <Phys::allocateDMA(unsigned long)+0x44>
c0009fa1:	c1 e5 0c             	shl    ebp,0xc
c0009fa4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009faa:	e9 6a ff ff ff       	jmp    c0009f19 <Phys::allocateDMA(unsigned long)+0x79>

c0009faf <Phys::freeDMA(unsigned long, unsigned long)>:
c0009faf:	83 ec 18             	sub    esp,0x18
c0009fb2:	68 63 40 02 c0       	push   0xc0024063
c0009fb7:	e8 3f 2d 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0009fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fc0:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009fc6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009fca:	c1 ea 0c             	shr    edx,0xc
c0009fcd:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009fd2:	29 15 34 7f 02 c0    	sub    DWORD PTR ds:0xc0027f34,edx
c0009fd8:	c1 e8 0c             	shr    eax,0xc
c0009fdb:	83 c4 10             	add    esp,0x10
c0009fde:	85 d2                	test   edx,edx
c0009fe0:	74 0f                	je     c0009ff1 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009fe2:	05 3c 7f 02 c0       	add    eax,0xc0027f3c
c0009fe7:	01 c2                	add    edx,eax
c0009fe9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009fec:	40                   	inc    eax
c0009fed:	39 d0                	cmp    eax,edx
c0009fef:	75 f8                	jne    c0009fe9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009ff1:	83 c4 0c             	add    esp,0xc
c0009ff4:	c3                   	ret    

c0009ff5 <Phys::setPageState(unsigned long, bool)>:
c0009ff5:	56                   	push   esi
c0009ff6:	ba 01 00 00 00       	mov    edx,0x1
c0009ffb:	53                   	push   ebx
c0009ffc:	8b 35 c4 72 02 c0    	mov    esi,DWORD PTR ds:0xc00272c4
c000a002:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a006:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a00a:	89 c8                	mov    eax,ecx
c000a00c:	83 e1 07             	and    ecx,0x7
c000a00f:	c1 e8 03             	shr    eax,0x3
c000a012:	d3 e3                	shl    ebx,cl
c000a014:	01 c6                	add    esi,eax
c000a016:	d3 e2                	shl    edx,cl
c000a018:	f7 d2                	not    edx
c000a01a:	20 16                	and    BYTE PTR [esi],dl
c000a01c:	03 05 c4 72 02 c0    	add    eax,DWORD PTR ds:0xc00272c4
c000a022:	08 18                	or     BYTE PTR [eax],bl
c000a024:	5b                   	pop    ebx
c000a025:	5e                   	pop    esi
c000a026:	c3                   	ret    

c000a027 <Phys::getPageState(unsigned long)>:
c000a027:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a02b:	8b 15 c4 72 02 c0    	mov    edx,DWORD PTR ds:0xc00272c4
c000a031:	89 c8                	mov    eax,ecx
c000a033:	83 e1 07             	and    ecx,0x7
c000a036:	c1 e8 03             	shr    eax,0x3
c000a039:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000a03d:	d3 f8                	sar    eax,cl
c000a03f:	83 e0 01             	and    eax,0x1
c000a042:	c3                   	ret    

c000a043 <Phys::freePage(unsigned long)>:
c000a043:	53                   	push   ebx
c000a044:	83 ec 10             	sub    esp,0x10
c000a047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a04b:	53                   	push   ebx
c000a04c:	68 79 40 02 c0       	push   0xc0024079
c000a051:	e8 a5 2c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a056:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c000a05c:	83 c4 10             	add    esp,0x10
c000a05f:	3d ff ff 00 00       	cmp    eax,0xffff
c000a064:	76 3d                	jbe    c000a0a3 <Phys::freePage(unsigned long)+0x60>
c000a066:	83 ec 0c             	sub    esp,0xc
c000a069:	c1 eb 0c             	shr    ebx,0xc
c000a06c:	53                   	push   ebx
c000a06d:	e8 b5 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a072:	83 c4 10             	add    esp,0x10
c000a075:	84 c0                	test   al,al
c000a077:	74 19                	je     c000a092 <Phys::freePage(unsigned long)+0x4f>
c000a079:	83 ec 08             	sub    esp,0x8
c000a07c:	ff 0d 34 7f 02 c0    	dec    DWORD PTR ds:0xc0027f34
c000a082:	6a 00                	push   0x0
c000a084:	53                   	push   ebx
c000a085:	e8 6b ff ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a08a:	83 c4 10             	add    esp,0x10
c000a08d:	83 c4 08             	add    esp,0x8
c000a090:	5b                   	pop    ebx
c000a091:	c3                   	ret    
c000a092:	c7 44 24 10 a3 40 02 c0 	mov    DWORD PTR [esp+0x10],0xc00240a3
c000a09a:	83 c4 08             	add    esp,0x8
c000a09d:	5b                   	pop    ebx
c000a09e:	e9 00 a9 00 00       	jmp    c00149a3 <Krnl::panic(char const*)>
c000a0a3:	83 ec 08             	sub    esp,0x8
c000a0a6:	53                   	push   ebx
c000a0a7:	68 8c 40 02 c0       	push   0xc002408c
c000a0ac:	e8 4a 2c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a0b1:	58                   	pop    eax
c000a0b2:	5a                   	pop    edx
c000a0b3:	68 00 10 00 00       	push   0x1000
c000a0b8:	53                   	push   ebx
c000a0b9:	e8 f1 fe ff ff       	call   c0009faf <Phys::freeDMA(unsigned long, unsigned long)>
c000a0be:	83 c4 10             	add    esp,0x10
c000a0c1:	83 c4 08             	add    esp,0x8
c000a0c4:	5b                   	pop    ebx
c000a0c5:	c3                   	ret    

c000a0c6 <Phys::allocatePage()>:
c000a0c6:	56                   	push   esi
c000a0c7:	53                   	push   ebx
c000a0c8:	83 ec 14             	sub    esp,0x14
c000a0cb:	8b 35 28 7f 02 c0    	mov    esi,DWORD PTR ds:0xc0027f28
c000a0d1:	89 f3                	mov    ebx,esi
c000a0d3:	eb 0a                	jmp    c000a0df <Phys::allocatePage()+0x19>
c000a0d5:	89 1d 28 7f 02 c0    	mov    DWORD PTR ds:0xc0027f28,ebx
c000a0db:	39 de                	cmp    esi,ebx
c000a0dd:	74 24                	je     c000a103 <Phys::allocatePage()+0x3d>
c000a0df:	53                   	push   ebx
c000a0e0:	e8 42 ff ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a0e5:	5a                   	pop    edx
c000a0e6:	84 c0                	test   al,al
c000a0e8:	74 69                	je     c000a153 <Phys::allocatePage()+0x8d>
c000a0ea:	43                   	inc    ebx
c000a0eb:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a0f1:	75 e2                	jne    c000a0d5 <Phys::allocatePage()+0xf>
c000a0f3:	31 db                	xor    ebx,ebx
c000a0f5:	c7 05 28 7f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027f28,0x0
c000a0ff:	39 de                	cmp    esi,ebx
c000a101:	75 dc                	jne    c000a0df <Phys::allocatePage()+0x19>
c000a103:	83 ec 0c             	sub    esp,0xc
c000a106:	80 35 4c 7f 02 c0 01 	xor    BYTE PTR ds:0xc0027f4c,0x1
c000a10d:	68 44 41 02 c0       	push   0xc0024144
c000a112:	e8 e4 2b 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a117:	58                   	pop    eax
c000a118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a11d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a120:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000a126:	e8 5f 28 00 00       	call   c000c98a <VAS::scanForEviction()>
c000a12b:	83 c4 10             	add    esp,0x10
c000a12e:	85 c0                	test   eax,eax
c000a130:	75 62                	jne    c000a194 <Phys::allocatePage()+0xce>
c000a132:	83 ec 0c             	sub    esp,0xc
c000a135:	68 68 41 02 c0       	push   0xc0024168
c000a13a:	e8 64 a8 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000a13f:	83 c4 10             	add    esp,0x10
c000a142:	8b 1d 28 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f28
c000a148:	53                   	push   ebx
c000a149:	e8 d9 fe ff ff       	call   c000a027 <Phys::getPageState(unsigned long)>
c000a14e:	5a                   	pop    edx
c000a14f:	84 c0                	test   al,al
c000a151:	75 97                	jne    c000a0ea <Phys::allocatePage()+0x24>
c000a153:	6a 01                	push   0x1
c000a155:	53                   	push   ebx
c000a156:	e8 9a fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a15b:	5a                   	pop    edx
c000a15c:	a1 34 7f 02 c0       	mov    eax,ds:0xc0027f34
c000a161:	59                   	pop    ecx
c000a162:	40                   	inc    eax
c000a163:	8b 15 28 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f28
c000a169:	a3 34 7f 02 c0       	mov    ds:0xc0027f34,eax
c000a16e:	c1 e2 0c             	shl    edx,0xc
c000a171:	52                   	push   edx
c000a172:	ff 35 38 7f 02 c0    	push   DWORD PTR ds:0xc0027f38
c000a178:	50                   	push   eax
c000a179:	68 b9 40 02 c0       	push   0xc00240b9
c000a17e:	e8 78 2b 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a183:	a1 28 7f 02 c0       	mov    eax,ds:0xc0027f28
c000a188:	83 c4 10             	add    esp,0x10
c000a18b:	c1 e0 0c             	shl    eax,0xc
c000a18e:	83 c4 14             	add    esp,0x14
c000a191:	5b                   	pop    ebx
c000a192:	5e                   	pop    esi
c000a193:	c3                   	ret    
c000a194:	83 ec 08             	sub    esp,0x8
c000a197:	89 c2                	mov    edx,eax
c000a199:	6a 01                	push   0x1
c000a19b:	c1 ea 0c             	shr    edx,0xc
c000a19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1a2:	52                   	push   edx
c000a1a3:	e8 4d fe ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a1a8:	83 c4 10             	add    esp,0x10
c000a1ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a1af:	eb dd                	jmp    c000a18e <Phys::allocatePage()+0xc8>

c000a1b1 <Phys::allocateContiguousPages(int)>:
c000a1b1:	57                   	push   edi
c000a1b2:	56                   	push   esi
c000a1b3:	53                   	push   ebx
c000a1b4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a1b8:	fa                   	cli    
c000a1b9:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c000a1bf:	31 db                	xor    ebx,ebx
c000a1c1:	85 db                	test   ebx,ebx
c000a1c3:	75 11                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1c5:	e8 fc fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1ca:	83 fe 01             	cmp    esi,0x1
c000a1cd:	89 c7                	mov    edi,eax
c000a1cf:	74 21                	je     c000a1f2 <Phys::allocateContiguousPages(int)+0x41>
c000a1d1:	bb 01 00 00 00       	mov    ebx,0x1
c000a1d6:	e8 eb fe ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000a1db:	89 da                	mov    edx,ebx
c000a1dd:	c1 e2 0c             	shl    edx,0xc
c000a1e0:	01 fa                	add    edx,edi
c000a1e2:	39 c2                	cmp    edx,eax
c000a1e4:	74 20                	je     c000a206 <Phys::allocateContiguousPages(int)+0x55>
c000a1e6:	bb 01 00 00 00       	mov    ebx,0x1
c000a1eb:	89 c7                	mov    edi,eax
c000a1ed:	83 fe 01             	cmp    esi,0x1
c000a1f0:	75 e4                	jne    c000a1d6 <Phys::allocateContiguousPages(int)+0x25>
c000a1f2:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000a1f7:	48                   	dec    eax
c000a1f8:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000a1fd:	75 01                	jne    c000a200 <Phys::allocateContiguousPages(int)+0x4f>
c000a1ff:	fb                   	sti    
c000a200:	89 f8                	mov    eax,edi
c000a202:	5b                   	pop    ebx
c000a203:	5e                   	pop    esi
c000a204:	5f                   	pop    edi
c000a205:	c3                   	ret    
c000a206:	43                   	inc    ebx
c000a207:	39 f3                	cmp    ebx,esi
c000a209:	75 b6                	jne    c000a1c1 <Phys::allocateContiguousPages(int)+0x10>
c000a20b:	eb e5                	jmp    c000a1f2 <Phys::allocateContiguousPages(int)+0x41>

c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000a20d:	56                   	push   esi
c000a20e:	53                   	push   ebx
c000a20f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a213:	39 1d 2c 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f2c,ebx
c000a219:	73 06                	jae    c000a221 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000a21b:	89 1d 2c 7f 02 c0    	mov    DWORD PTR ds:0xc0027f2c,ebx
c000a221:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a225:	c1 eb 0c             	shr    ebx,0xc
c000a228:	c1 e8 0c             	shr    eax,0xc
c000a22b:	39 d8                	cmp    eax,ebx
c000a22d:	73 13                	jae    c000a242 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000a22f:	6a 00                	push   0x0
c000a231:	8d 70 01             	lea    esi,[eax+0x1]
c000a234:	50                   	push   eax
c000a235:	e8 bb fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a23a:	5a                   	pop    edx
c000a23b:	89 f0                	mov    eax,esi
c000a23d:	59                   	pop    ecx
c000a23e:	39 f3                	cmp    ebx,esi
c000a240:	75 ed                	jne    c000a22f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000a242:	5b                   	pop    ebx
c000a243:	5e                   	pop    esi
c000a244:	c3                   	ret    

c000a245 <Phys::physicalMemorySetup(unsigned int)>:
c000a245:	55                   	push   ebp
c000a246:	57                   	push   edi
c000a247:	56                   	push   esi
c000a248:	53                   	push   ebx
c000a249:	31 db                	xor    ebx,ebx
c000a24b:	83 ec 40             	sub    esp,0x40
c000a24e:	6a 10                	push   0x10
c000a250:	6a 00                	push   0x0
c000a252:	68 3c 7f 02 c0       	push   0xc0027f3c
c000a257:	e8 28 64 ff ff       	call   c0000684 <memset>
c000a25c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000a260:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a265:	05 00 10 00 00       	add    eax,0x1000
c000a26a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a26e:	5a                   	pop    edx
c000a26f:	59                   	pop    ecx
c000a270:	50                   	push   eax
c000a271:	68 d7 40 02 c0       	push   0xc00240d7
c000a276:	e8 80 2a 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a27b:	83 c4 10             	add    esp,0x10
c000a27e:	83 ec 08             	sub    esp,0x8
c000a281:	6a 01                	push   0x1
c000a283:	53                   	push   ebx
c000a284:	43                   	inc    ebx
c000a285:	e8 6b fd ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a28a:	83 c4 10             	add    esp,0x10
c000a28d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000a293:	75 e9                	jne    c000a27e <Phys::physicalMemorySetup(unsigned int)+0x39>
c000a295:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000a29c:	66 85 c0             	test   ax,ax
c000a29f:	0f 84 8e 01 00 00    	je     c000a433 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c000a2a5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a2a9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a2b1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a2b5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000a2ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a2be:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000a2c6:	eb 15                	jmp    c000a2dd <Phys::physicalMemorySetup(unsigned int)+0x98>
c000a2c8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000a2cc:	83 c3 18             	add    ebx,0x18
c000a2cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a2d3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a2d7:	0f 84 66 01 00 00    	je     c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a2dd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a2e0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a2e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a2e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a2ee:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a2f0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a2f3:	01 f0                	add    eax,esi
c000a2f5:	55                   	push   ebp
c000a2f6:	11 fa                	adc    edx,edi
c000a2f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2fc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a300:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a304:	56                   	push   esi
c000a305:	68 98 41 02 c0       	push   0xc0024198
c000a30a:	e8 ec 29 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a313:	83 c4 10             	add    esp,0x10
c000a316:	09 f8                	or     eax,edi
c000a318:	0f 85 25 01 00 00    	jne    c000a443 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a31e:	4d                   	dec    ebp
c000a31f:	75 a7                	jne    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a321:	ba 00 00 08 00       	mov    edx,0x80000
c000a326:	89 c1                	mov    ecx,eax
c000a328:	39 f2                	cmp    edx,esi
c000a32a:	19 f9                	sbb    ecx,edi
c000a32c:	0f 82 a7 00 00 00    	jb     c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a332:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a336:	89 c1                	mov    ecx,eax
c000a338:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a33c:	0f 83 97 00 00 00    	jae    c000a3d9 <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a342:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a347:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a34b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a34f:	39 fa                	cmp    edx,edi
c000a351:	19 e8                	sbb    eax,ebp
c000a353:	0f 82 a5 01 00 00    	jb     c000a4fe <Phys::physicalMemorySetup(unsigned int)+0x2b9>
c000a359:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a35d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a361:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a367:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a36c:	83 d5 ff             	adc    ebp,0xffffffff
c000a36f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a373:	31 c0                	xor    eax,eax
c000a375:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a379:	39 fa                	cmp    edx,edi
c000a37b:	89 c1                	mov    ecx,eax
c000a37d:	19 e9                	sbb    ecx,ebp
c000a37f:	0f 83 43 ff ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a385:	be 00 00 08 00       	mov    esi,0x80000
c000a38a:	57                   	push   edi
c000a38b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a38f:	57                   	push   edi
c000a390:	56                   	push   esi
c000a391:	68 bc 41 02 c0       	push   0xc00241bc
c000a396:	e8 60 29 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a39b:	5d                   	pop    ebp
c000a39c:	58                   	pop    eax
c000a39d:	57                   	push   edi
c000a39e:	56                   	push   esi
c000a39f:	e8 69 fe ff ff       	call   c000a20d <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a3a4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a3a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a3ac:	83 c4 0c             	add    esp,0xc
c000a3af:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a3b3:	03 05 38 7f 02 c0    	add    eax,DWORD PTR ds:0xc0027f38
c000a3b9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a3c0:	a3 38 7f 02 c0       	mov    ds:0xc0027f38,eax
c000a3c5:	52                   	push   edx
c000a3c6:	50                   	push   eax
c000a3c7:	68 fd 40 02 c0       	push   0xc00240fd
c000a3cc:	e8 2a 29 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000a3d1:	83 c4 10             	add    esp,0x10
c000a3d4:	e9 ef fe ff ff       	jmp    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3d9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a3dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a3e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a3e5:	39 ea                	cmp    edx,ebp
c000a3e7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a3eb:	0f 82 d7 fe ff ff    	jb     c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a3f1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a3f6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a3fa:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a3fe:	0f 83 c4 fe ff ff    	jae    c000a2c8 <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a404:	39 ee                	cmp    esi,ebp
c000a406:	89 f8                	mov    eax,edi
c000a408:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a40c:	0f 83 78 ff ff ff    	jae    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a416:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a41a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a41e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a422:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a42e:	e9 57 ff ff ff       	jmp    c000a38a <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a433:	83 ec 0c             	sub    esp,0xc
c000a436:	68 ef 40 02 c0       	push   0xc00240ef
c000a43b:	e8 63 a5 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000a440:	83 c4 10             	add    esp,0x10
c000a443:	83 ec 08             	sub    esp,0x8
c000a446:	6a 00                	push   0x0
c000a448:	6a 05                	push   0x5
c000a44a:	e8 a6 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a44f:	58                   	pop    eax
c000a450:	5a                   	pop    edx
c000a451:	6a 00                	push   0x0
c000a453:	6a 06                	push   0x6
c000a455:	e8 9b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a45a:	59                   	pop    ecx
c000a45b:	5b                   	pop    ebx
c000a45c:	bb 60 00 00 00       	mov    ebx,0x60
c000a461:	6a 00                	push   0x0
c000a463:	6a 07                	push   0x7
c000a465:	e8 8b fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a46a:	83 05 38 7f 02 c0 03 	add    DWORD PTR ds:0xc0027f38,0x3
c000a471:	83 c4 10             	add    esp,0x10
c000a474:	83 ec 08             	sub    esp,0x8
c000a477:	6a 00                	push   0x0
c000a479:	53                   	push   ebx
c000a47a:	43                   	inc    ebx
c000a47b:	e8 75 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a480:	83 c4 10             	add    esp,0x10
c000a483:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a489:	75 e9                	jne    c000a474 <Phys::physicalMemorySetup(unsigned int)+0x22f>
c000a48b:	a1 38 7f 02 c0       	mov    eax,ds:0xc0027f38
c000a490:	bb 40 01 00 00       	mov    ebx,0x140
c000a495:	83 c0 20             	add    eax,0x20
c000a498:	a3 38 7f 02 c0       	mov    ds:0xc0027f38,eax
c000a49d:	eb 22                	jmp    c000a4c1 <Phys::physicalMemorySetup(unsigned int)+0x27c>
c000a49f:	83 ec 08             	sub    esp,0x8
c000a4a2:	6a 00                	push   0x0
c000a4a4:	53                   	push   ebx
c000a4a5:	43                   	inc    ebx
c000a4a6:	e8 4a fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4ab:	a1 38 7f 02 c0       	mov    eax,ds:0xc0027f38
c000a4b0:	83 c4 10             	add    esp,0x10
c000a4b3:	40                   	inc    eax
c000a4b4:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a4ba:	a3 38 7f 02 c0       	mov    ds:0xc0027f38,eax
c000a4bf:	74 07                	je     c000a4c8 <Phys::physicalMemorySetup(unsigned int)+0x283>
c000a4c1:	3d ff 03 00 00       	cmp    eax,0x3ff
c000a4c6:	7e d7                	jle    c000a49f <Phys::physicalMemorySetup(unsigned int)+0x25a>
c000a4c8:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a4cd:	3d ff 07 00 00       	cmp    eax,0x7ff
c000a4d2:	7f 22                	jg     c000a4f6 <Phys::physicalMemorySetup(unsigned int)+0x2b1>
c000a4d4:	83 ec 08             	sub    esp,0x8
c000a4d7:	6a 00                	push   0x0
c000a4d9:	53                   	push   ebx
c000a4da:	43                   	inc    ebx
c000a4db:	e8 15 fb ff ff       	call   c0009ff5 <Phys::setPageState(unsigned long, bool)>
c000a4e0:	a1 38 7f 02 c0       	mov    eax,ds:0xc0027f38
c000a4e5:	83 c4 10             	add    esp,0x10
c000a4e8:	40                   	inc    eax
c000a4e9:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a4ef:	a3 38 7f 02 c0       	mov    ds:0xc0027f38,eax
c000a4f4:	75 d7                	jne    c000a4cd <Phys::physicalMemorySetup(unsigned int)+0x288>
c000a4f6:	83 c4 3c             	add    esp,0x3c
c000a4f9:	5b                   	pop    ebx
c000a4fa:	5e                   	pop    esi
c000a4fb:	5f                   	pop    edi
c000a4fc:	5d                   	pop    ebp
c000a4fd:	c3                   	ret    
c000a4fe:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a506:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a50e:	e9 46 fe ff ff       	jmp    c000a359 <Phys::physicalMemorySetup(unsigned int)+0x114>
c000a513:	90                   	nop

c000a514 <Pipe::isAtty()>:
c000a514:	31 c0                	xor    eax,eax
c000a516:	c3                   	ret    
c000a517:	90                   	nop

c000a518 <Pipe::~Pipe()>:
c000a518:	83 ec 0c             	sub    esp,0xc
c000a51b:	ba 28 42 02 c0       	mov    edx,0xc0024228
c000a520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a524:	89 10                	mov    DWORD PTR [eax],edx
c000a526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a52a:	83 ec 0c             	sub    esp,0xc
c000a52d:	50                   	push   eax
c000a52e:	e8 41 12 00 00       	call   c000b774 <UnixFile::~UnixFile()>
c000a533:	83 c4 10             	add    esp,0x10
c000a536:	90                   	nop
c000a537:	83 c4 0c             	add    esp,0xc
c000a53a:	c3                   	ret    
c000a53b:	90                   	nop

c000a53c <Pipe::~Pipe()>:
c000a53c:	83 ec 0c             	sub    esp,0xc
c000a53f:	83 ec 0c             	sub    esp,0xc
c000a542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a546:	e8 cd ff ff ff       	call   c000a518 <Pipe::~Pipe()>
c000a54b:	83 c4 10             	add    esp,0x10
c000a54e:	83 ec 08             	sub    esp,0x8
c000a551:	6a 20                	push   0x20
c000a553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a557:	e8 be 26 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000a55c:	83 c4 10             	add    esp,0x10
c000a55f:	83 c4 0c             	add    esp,0xc
c000a562:	c3                   	ret    
c000a563:	90                   	nop

c000a564 <Pipe::read(unsigned long long, void*, int*)>:
c000a564:	55                   	push   ebp
c000a565:	57                   	push   edi
c000a566:	56                   	push   esi
c000a567:	53                   	push   ebx
c000a568:	83 ec 1c             	sub    esp,0x1c
c000a56b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a56f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a573:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a577:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a57a:	89 c8                	mov    eax,ecx
c000a57c:	99                   	cdq    
c000a57d:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a581:	74 24                	je     c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a583:	39 f9                	cmp    ecx,edi
c000a585:	89 d1                	mov    ecx,edx
c000a587:	19 f1                	sbb    ecx,esi
c000a589:	73 1c                	jae    c000a5a7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a58b:	fa                   	cli    
c000a58c:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c000a592:	e8 19 e0 00 00       	call   c00185b0 <schedule()>
c000a597:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000a59c:	48                   	dec    eax
c000a59d:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000a5a2:	75 d3                	jne    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a4:	fb                   	sti    
c000a5a5:	eb d0                	jmp    c000a577 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a5a7:	39 f8                	cmp    eax,edi
c000a5a9:	89 d1                	mov    ecx,edx
c000a5ab:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a5ae:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a5b2:	19 f1                	sbb    ecx,esi
c000a5b4:	73 07                	jae    c000a5bd <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a5b6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5bd:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a5c0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a5c3:	29 f7                	sub    edi,esi
c000a5c5:	89 f8                	mov    eax,edi
c000a5c7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a5cb:	99                   	cdq    
c000a5cc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a5cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d3:	19 d0                	sbb    eax,edx
c000a5d5:	73 07                	jae    c000a5de <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a5d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a5da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a5de:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a5e1:	89 ea                	mov    edx,ebp
c000a5e3:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a5e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a5ec:	74 0d                	je     c000a5fb <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a5ee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a5f1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a5f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a5f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a5fb:	85 d2                	test   edx,edx
c000a5fd:	74 11                	je     c000a610 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a5ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a603:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a606:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a60a:	89 d1                	mov    ecx,edx
c000a60c:	89 c7                	mov    edi,eax
c000a60e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a610:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a613:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a616:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a619:	99                   	cdq    
c000a61a:	89 f7                	mov    edi,esi
c000a61c:	03 04 24             	add    eax,DWORD PTR [esp]
c000a61f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a623:	c1 ff 1f             	sar    edi,0x1f
c000a626:	57                   	push   edi
c000a627:	56                   	push   esi
c000a628:	52                   	push   edx
c000a629:	50                   	push   eax
c000a62a:	e8 65 81 01 00       	call   c0022794 <__umoddi3>
c000a62f:	83 c4 10             	add    esp,0x10
c000a632:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a635:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a63a:	75 10                	jne    c000a64c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a63c:	83 ec 0c             	sub    esp,0xc
c000a63f:	68 e5 41 02 c0       	push   0xc00241e5
c000a644:	e8 5a a3 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000a649:	83 c4 10             	add    esp,0x10
c000a64c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a650:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a653:	89 10                	mov    DWORD PTR [eax],edx
c000a655:	83 c4 1c             	add    esp,0x1c
c000a658:	31 c0                	xor    eax,eax
c000a65a:	5b                   	pop    ebx
c000a65b:	5e                   	pop    esi
c000a65c:	5f                   	pop    edi
c000a65d:	5d                   	pop    ebp
c000a65e:	c3                   	ret    
c000a65f:	90                   	nop

c000a660 <Pipe::write(unsigned long long, void*, int*)>:
c000a660:	55                   	push   ebp
c000a661:	57                   	push   edi
c000a662:	56                   	push   esi
c000a663:	53                   	push   ebx
c000a664:	83 ec 1c             	sub    esp,0x1c
c000a667:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a66b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a66f:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a672:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a676:	89 04 24             	mov    DWORD PTR [esp],eax
c000a679:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a67d:	89 d8                	mov    eax,ebx
c000a67f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a682:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a686:	89 d6                	mov    esi,edx
c000a688:	89 d7                	mov    edi,edx
c000a68a:	c1 ff 1f             	sar    edi,0x1f
c000a68d:	03 34 24             	add    esi,DWORD PTR [esp]
c000a690:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a694:	c1 f8 1f             	sar    eax,0x1f
c000a697:	39 f3                	cmp    ebx,esi
c000a699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6a1:	19 f8                	sbb    eax,edi
c000a6a3:	b8 01 00 00 00       	mov    eax,0x1
c000a6a8:	72 6e                	jb     c000a718 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a6aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a6ad:	01 d0                	add    eax,edx
c000a6af:	99                   	cdq    
c000a6b0:	f7 fb                	idiv   ebx
c000a6b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6b6:	29 d3                	sub    ebx,edx
c000a6b8:	89 d7                	mov    edi,edx
c000a6ba:	89 de                	mov    esi,ebx
c000a6bc:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a6bf:	c1 fb 1f             	sar    ebx,0x1f
c000a6c2:	39 f2                	cmp    edx,esi
c000a6c4:	19 d8                	sbb    eax,ebx
c000a6c6:	b8 00 00 00 00       	mov    eax,0x0
c000a6cb:	72 04                	jb     c000a6d1 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a6cd:	89 d0                	mov    eax,edx
c000a6cf:	29 f0                	sub    eax,esi
c000a6d1:	89 d3                	mov    ebx,edx
c000a6d3:	29 c3                	sub    ebx,eax
c000a6d5:	74 0b                	je     c000a6e2 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a6d7:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a6da:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a6de:	89 d9                	mov    ecx,ebx
c000a6e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6e2:	85 c0                	test   eax,eax
c000a6e4:	74 0d                	je     c000a6f3 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a6e6:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a6ea:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a6ed:	89 de                	mov    esi,ebx
c000a6ef:	89 c1                	mov    ecx,eax
c000a6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a6f3:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a6f6:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a6fb:	75 10                	jne    c000a70d <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a6fd:	83 ec 0c             	sub    esp,0xc
c000a700:	68 01 42 02 c0       	push   0xc0024201
c000a705:	e8 99 a2 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000a70a:	83 c4 10             	add    esp,0x10
c000a70d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a711:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a714:	89 08                	mov    DWORD PTR [eax],ecx
c000a716:	31 c0                	xor    eax,eax
c000a718:	83 c4 1c             	add    esp,0x1c
c000a71b:	5b                   	pop    ebx
c000a71c:	5e                   	pop    esi
c000a71d:	5f                   	pop    edi
c000a71e:	5d                   	pop    ebp
c000a71f:	c3                   	ret    

c000a720 <Pipe::Pipe(int)>:
c000a720:	83 ec 0c             	sub    esp,0xc
c000a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a727:	83 ec 08             	sub    esp,0x8
c000a72a:	6a 00                	push   0x0
c000a72c:	50                   	push   eax
c000a72d:	e8 60 0e 00 00       	call   c000b592 <UnixFile::UnixFile(int)>
c000a732:	83 c4 10             	add    esp,0x10
c000a735:	ba 28 42 02 c0       	mov    edx,0xc0024228
c000a73a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a73e:	89 10                	mov    DWORD PTR [eax],edx
c000a740:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a744:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a748:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a74f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a75a:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a761:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a765:	83 ec 0c             	sub    esp,0xc
c000a768:	50                   	push   eax
c000a769:	e8 a1 f2 ff ff       	call   c0009a0f <malloc>
c000a76e:	83 c4 10             	add    esp,0x10
c000a771:	89 c2                	mov    edx,eax
c000a773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a777:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a77a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a77e:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a782:	90                   	nop
c000a783:	83 c4 0c             	add    esp,0xc
c000a786:	c3                   	ret    
c000a787:	90                   	nop

c000a788 <VgaText::isAtty()>:
c000a788:	b0 01                	mov    al,0x1
c000a78a:	c3                   	ret    
c000a78b:	90                   	nop

c000a78c <VgaText::~VgaText()>:
c000a78c:	83 ec 0c             	sub    esp,0xc
c000a78f:	ba b0 42 02 c0       	mov    edx,0xc00242b0
c000a794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a798:	89 10                	mov    DWORD PTR [eax],edx
c000a79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a79e:	83 ec 0c             	sub    esp,0xc
c000a7a1:	50                   	push   eax
c000a7a2:	e8 cd 0f 00 00       	call   c000b774 <UnixFile::~UnixFile()>
c000a7a7:	83 c4 10             	add    esp,0x10
c000a7aa:	90                   	nop
c000a7ab:	83 c4 0c             	add    esp,0xc
c000a7ae:	c3                   	ret    
c000a7af:	90                   	nop

c000a7b0 <VgaText::~VgaText()>:
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	83 ec 0c             	sub    esp,0xc
c000a7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ba:	e8 cd ff ff ff       	call   c000a78c <VgaText::~VgaText()>
c000a7bf:	83 c4 10             	add    esp,0x10
c000a7c2:	83 ec 08             	sub    esp,0x8
c000a7c5:	68 b4 01 00 00       	push   0x1b4
c000a7ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7ce:	e8 47 24 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000a7d3:	83 c4 10             	add    esp,0x10
c000a7d6:	83 c4 0c             	add    esp,0xc
c000a7d9:	c3                   	ret    

c000a7da <VgaText::read(unsigned long long, void*, int*)>:
c000a7da:	83 ec 10             	sub    esp,0x10
c000a7dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7e1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a7e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e9:	e8 69 58 00 00       	call   c0010057 <readKeyboard(VgaText*, char*, unsigned long)>
c000a7ee:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a7f2:	89 02                	mov    DWORD PTR [edx],eax
c000a7f4:	31 c0                	xor    eax,eax
c000a7f6:	83 c4 1c             	add    esp,0x1c
c000a7f9:	c3                   	ret    

c000a7fa <setTerminalScrollLock(bool)>:
c000a7fa:	c3                   	ret    

c000a7fb <addToTerminalCycle(VgaText*)>:
c000a7fb:	8b 15 80 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f80
c000a801:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a805:	85 d2                	test   edx,edx
c000a807:	75 09                	jne    c000a812 <addToTerminalCycle(VgaText*)+0x17>
c000a809:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a80c:	a3 80 7f 02 c0       	mov    ds:0xc0027f80,eax
c000a811:	c3                   	ret    
c000a812:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a815:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a818:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a81b:	c3                   	ret    

c000a81c <installVgaTextImplementation()>:
c000a81c:	83 ec 10             	sub    esp,0x10
c000a81f:	6a 20                	push   0x20
c000a821:	6a 00                	push   0x0
c000a823:	68 60 7f 02 c0       	push   0xc0027f60
c000a828:	e8 57 5e ff ff       	call   c0000684 <memset>
c000a82d:	83 c4 1c             	add    esp,0x1c
c000a830:	c3                   	ret    

c000a831 <scrollTerminalScrollLock(int)>:
c000a831:	c3                   	ret    

c000a832 <VgaText::updateTitle()>:
c000a832:	53                   	push   ebx
c000a833:	31 c0                	xor    eax,eax
c000a835:	83 ec 58             	sub    esp,0x58
c000a838:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a83c:	89 e1                	mov    ecx,esp
c000a83e:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a842:	40                   	inc    eax
c000a843:	83 f8 50             	cmp    eax,0x50
c000a846:	75 f6                	jne    c000a83e <VgaText::updateTitle()+0xc>
c000a848:	31 c0                	xor    eax,eax
c000a84a:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a851:	84 db                	test   bl,bl
c000a853:	74 06                	je     c000a85b <VgaText::updateTitle()+0x29>
c000a855:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a858:	40                   	inc    eax
c000a859:	eb ef                	jmp    c000a84a <VgaText::updateTitle()+0x18>
c000a85b:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a85e:	85 c0                	test   eax,eax
c000a860:	74 09                	je     c000a86b <VgaText::updateTitle()+0x39>
c000a862:	53                   	push   ebx
c000a863:	53                   	push   ebx
c000a864:	51                   	push   ecx
c000a865:	52                   	push   edx
c000a866:	ff d0                	call   eax
c000a868:	83 c4 10             	add    esp,0x10
c000a86b:	83 c4 58             	add    esp,0x58
c000a86e:	5b                   	pop    ebx
c000a86f:	c3                   	ret    

c000a870 <VgaText::load()>:
c000a870:	53                   	push   ebx
c000a871:	31 c0                	xor    eax,eax
c000a873:	83 ec 58             	sub    esp,0x58
c000a876:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a87a:	89 e2                	mov    edx,esp
c000a87c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a880:	40                   	inc    eax
c000a881:	83 f8 50             	cmp    eax,0x50
c000a884:	75 f6                	jne    c000a87c <VgaText::load()+0xc>
c000a886:	31 c0                	xor    eax,eax
c000a888:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a88f:	84 c9                	test   cl,cl
c000a891:	74 06                	je     c000a899 <VgaText::load()+0x29>
c000a893:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a896:	40                   	inc    eax
c000a897:	eb ef                	jmp    c000a888 <VgaText::load()+0x18>
c000a899:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a89c:	85 c0                	test   eax,eax
c000a89e:	74 09                	je     c000a8a9 <VgaText::load()+0x39>
c000a8a0:	51                   	push   ecx
c000a8a1:	51                   	push   ecx
c000a8a2:	52                   	push   edx
c000a8a3:	53                   	push   ebx
c000a8a4:	ff d0                	call   eax
c000a8a6:	83 c4 10             	add    esp,0x10
c000a8a9:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a8ac:	85 c0                	test   eax,eax
c000a8ae:	74 09                	je     c000a8b9 <VgaText::load()+0x49>
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	53                   	push   ebx
c000a8b4:	ff d0                	call   eax
c000a8b6:	83 c4 10             	add    esp,0x10
c000a8b9:	83 c4 58             	add    esp,0x58
c000a8bc:	5b                   	pop    ebx
c000a8bd:	c3                   	ret    

c000a8be <VgaText::updateCursor()>:
c000a8be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8c2:	39 05 84 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f84,eax
c000a8c8:	75 09                	jne    c000a8d3 <VgaText::updateCursor()+0x15>
c000a8ca:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a8cd:	85 c0                	test   eax,eax
c000a8cf:	74 02                	je     c000a8d3 <VgaText::updateCursor()+0x15>
c000a8d1:	ff e0                	jmp    eax
c000a8d3:	c3                   	ret    

c000a8d4 <VgaText::doANSI_SGR(int)>:
c000a8d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a8dc:	85 d2                	test   edx,edx
c000a8de:	75 0b                	jne    c000a8eb <VgaText::doANSI_SGR(int)+0x17>
c000a8e0:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a8e3:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a8e6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a8e9:	eb 59                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8eb:	83 fa 07             	cmp    edx,0x7
c000a8ee:	75 0b                	jne    c000a8fb <VgaText::doANSI_SGR(int)+0x27>
c000a8f0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a8f3:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a8f6:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a8f9:	eb 49                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a8fb:	83 fa 1b             	cmp    edx,0x1b
c000a8fe:	74 e0                	je     c000a8e0 <VgaText::doANSI_SGR(int)+0xc>
c000a900:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a903:	83 f9 07             	cmp    ecx,0x7
c000a906:	77 09                	ja     c000a911 <VgaText::doANSI_SGR(int)+0x3d>
c000a908:	8b 14 8d 00 73 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8d00]
c000a90f:	eb 20                	jmp    c000a931 <VgaText::doANSI_SGR(int)+0x5d>
c000a911:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a914:	83 f9 07             	cmp    ecx,0x7
c000a917:	77 09                	ja     c000a922 <VgaText::doANSI_SGR(int)+0x4e>
c000a919:	8b 14 8d 00 73 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd8d00]
c000a920:	eb 22                	jmp    c000a944 <VgaText::doANSI_SGR(int)+0x70>
c000a922:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a925:	83 f9 07             	cmp    ecx,0x7
c000a928:	77 0b                	ja     c000a935 <VgaText::doANSI_SGR(int)+0x61>
c000a92a:	8b 14 95 b8 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8e48]
c000a931:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a934:	c3                   	ret    
c000a935:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a938:	83 f9 07             	cmp    ecx,0x7
c000a93b:	77 0a                	ja     c000a947 <VgaText::doANSI_SGR(int)+0x73>
c000a93d:	8b 14 95 90 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8e70]
c000a944:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a947:	c3                   	ret    

c000a948 <VgaText::setDefaultBgColour(VgaColour)>:
c000a948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a94c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a950:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a953:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a956:	c3                   	ret    
c000a957:	90                   	nop

c000a958 <VgaText::setDefaultFgColour(VgaColour)>:
c000a958:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a95c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a960:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a963:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a966:	c3                   	ret    
c000a967:	90                   	nop

c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a968:	53                   	push   ebx
c000a969:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a96d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a971:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a975:	51                   	push   ecx
c000a976:	e8 cd ff ff ff       	call   c000a948 <VgaText::setDefaultBgColour(VgaColour)>
c000a97b:	58                   	pop    eax
c000a97c:	5a                   	pop    edx
c000a97d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a981:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a985:	5b                   	pop    ebx
c000a986:	eb d0                	jmp    c000a958 <VgaText::setDefaultFgColour(VgaColour)>

c000a988 <VgaText::setTitleTextColour(VgaColour)>:
c000a988:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a98c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a990:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a993:	e9 9a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a998 <VgaText::setTitleColour(VgaColour)>:
c000a998:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a99c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a9a0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9a3:	e9 8a fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>

c000a9a8 <VgaText::setTitle(char*)>:
c000a9a8:	53                   	push   ebx
c000a9a9:	83 ec 10             	sub    esp,0x10
c000a9ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a9b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9b4:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a9ba:	50                   	push   eax
c000a9bb:	e8 80 5d ff ff       	call   c0000740 <strcpy>
c000a9c0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a9c4:	83 c4 18             	add    esp,0x18
c000a9c7:	5b                   	pop    ebx
c000a9c8:	e9 65 fe ff ff       	jmp    c000a832 <VgaText::updateTitle()>
c000a9cd:	90                   	nop

c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>:
c000a9ce:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a9d2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a9d7:	83 e0 0f             	and    eax,0xf
c000a9da:	c1 e2 04             	shl    edx,0x4
c000a9dd:	09 d0                	or     eax,edx
c000a9df:	c3                   	ret    

c000a9e0 <VgaText::scrollScreen()>:
c000a9e0:	55                   	push   ebp
c000a9e1:	b9 01 00 00 00       	mov    ecx,0x1
c000a9e6:	57                   	push   edi
c000a9e7:	56                   	push   esi
c000a9e8:	53                   	push   ebx
c000a9e9:	83 ec 0c             	sub    esp,0xc
c000a9ec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a9f0:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a9f6:	31 ff                	xor    edi,edi
c000a9f8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a9fb:	83 f9 17             	cmp    ecx,0x17
c000a9fe:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000aa01:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000aa08:	75 27                	jne    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa0a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000aa0d:	01 f5                	add    ebp,esi
c000aa0f:	f7 c7 01 00 00 00    	test   edi,0x1
c000aa15:	74 16                	je     c000aa2d <VgaText::scrollScreen()+0x4d>
c000aa17:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000aa1b:	50                   	push   eax
c000aa1c:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000aa20:	50                   	push   eax
c000aa21:	e8 a8 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa26:	5a                   	pop    edx
c000aa27:	5a                   	pop    edx
c000aa28:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000aa2b:	eb 04                	jmp    c000aa31 <VgaText::scrollScreen()+0x51>
c000aa2d:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000aa31:	47                   	inc    edi
c000aa32:	46                   	inc    esi
c000aa33:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000aa39:	75 bd                	jne    c000a9f8 <VgaText::scrollScreen()+0x18>
c000aa3b:	41                   	inc    ecx
c000aa3c:	83 f9 18             	cmp    ecx,0x18
c000aa3f:	75 af                	jne    c000a9f0 <VgaText::scrollScreen()+0x10>
c000aa41:	39 1d 84 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f84,ebx
c000aa47:	75 1b                	jne    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa49:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000aa4d:	74 05                	je     c000aa54 <VgaText::scrollScreen()+0x74>
c000aa4f:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000aa52:	eb 10                	jmp    c000aa64 <VgaText::scrollScreen()+0x84>
c000aa54:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000aa57:	85 c0                	test   eax,eax
c000aa59:	74 09                	je     c000aa64 <VgaText::scrollScreen()+0x84>
c000aa5b:	83 ec 0c             	sub    esp,0xc
c000aa5e:	53                   	push   ebx
c000aa5f:	ff d0                	call   eax
c000aa61:	83 c4 10             	add    esp,0x10
c000aa64:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000aa68:	83 c4 0c             	add    esp,0xc
c000aa6b:	5b                   	pop    ebx
c000aa6c:	5e                   	pop    esi
c000aa6d:	5f                   	pop    edi
c000aa6e:	5d                   	pop    ebp
c000aa6f:	e9 4a fe ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>:
c000aa74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000aa79:	c1 e0 08             	shl    eax,0x8
c000aa7c:	89 c2                	mov    edx,eax
c000aa7e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000aa83:	09 d0                	or     eax,edx
c000aa85:	c3                   	ret    

c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000aa86:	56                   	push   esi
c000aa87:	53                   	push   ebx
c000aa88:	51                   	push   ecx
c000aa89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aa8d:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa92:	50                   	push   eax
c000aa93:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000aa98:	50                   	push   eax
c000aa99:	e8 30 ff ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000aa9e:	5b                   	pop    ebx
c000aa9f:	0f b6 c0             	movzx  eax,al
c000aaa2:	5e                   	pop    esi
c000aaa3:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000aaa8:	50                   	push   eax
c000aaa9:	53                   	push   ebx
c000aaaa:	e8 c5 ff ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000aaaf:	5a                   	pop    edx
c000aab0:	5e                   	pop    esi
c000aab1:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000aab4:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000aaba:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000aabe:	0f b7 d2             	movzx  edx,dx
c000aac1:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000aac5:	39 0d 84 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f84,ecx
c000aacb:	75 10                	jne    c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aacd:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000aad0:	85 c0                	test   eax,eax
c000aad2:	74 09                	je     c000aadd <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000aad4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000aad8:	5a                   	pop    edx
c000aad9:	5b                   	pop    ebx
c000aada:	5e                   	pop    esi
c000aadb:	ff e0                	jmp    eax
c000aadd:	58                   	pop    eax
c000aade:	5b                   	pop    ebx
c000aadf:	5e                   	pop    esi
c000aae0:	c3                   	ret    
c000aae1:	90                   	nop

c000aae2 <VgaText::getCursorX()>:
c000aae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aae6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000aae9:	c3                   	ret    

c000aaea <VgaText::getCursorY()>:
c000aaea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaee:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000aaf1:	c3                   	ret    

c000aaf2 <VgaText::setCursor(int, int)>:
c000aaf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aaf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aafa:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000aafd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab01:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ab04:	e9 b5 fd ff ff       	jmp    c000a8be <VgaText::updateCursor()>

c000ab09 <setActiveTerminal(VgaText*)>:
c000ab09:	53                   	push   ebx
c000ab0a:	83 ec 08             	sub    esp,0x8
c000ab0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab11:	85 db                	test   ebx,ebx
c000ab13:	75 11                	jne    c000ab26 <setActiveTerminal(VgaText*)+0x1d>
c000ab15:	c7 44 24 10 3c 42 02 c0 	mov    DWORD PTR [esp+0x10],0xc002423c
c000ab1d:	83 c4 08             	add    esp,0x8
c000ab20:	5b                   	pop    ebx
c000ab21:	e9 7d 9e 00 00       	jmp    c00149a3 <Krnl::panic(char const*)>
c000ab26:	a1 84 7f 02 c0       	mov    eax,ds:0xc0027f84
c000ab2b:	85 c0                	test   eax,eax
c000ab2d:	74 0c                	je     c000ab3b <setActiveTerminal(VgaText*)+0x32>
c000ab2f:	83 ec 0c             	sub    esp,0xc
c000ab32:	50                   	push   eax
c000ab33:	e8 86 fd ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ab38:	83 c4 10             	add    esp,0x10
c000ab3b:	89 1d 84 7f 02 c0    	mov    DWORD PTR ds:0xc0027f84,ebx
c000ab41:	51                   	push   ecx
c000ab42:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab45:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab48:	53                   	push   ebx
c000ab49:	e8 a4 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab4e:	83 c4 10             	add    esp,0x10
c000ab51:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000ab55:	75 07                	jne    c000ab5e <setActiveTerminal(VgaText*)+0x55>
c000ab57:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000ab5e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ab62:	83 c4 08             	add    esp,0x8
c000ab65:	5b                   	pop    ebx
c000ab66:	e9 05 fd ff ff       	jmp    c000a870 <VgaText::load()>

c000ab6b <doTerminalCycle()>:
c000ab6b:	83 ec 18             	sub    esp,0x18
c000ab6e:	a1 80 7f 02 c0       	mov    eax,ds:0xc0027f80
c000ab73:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000ab76:	50                   	push   eax
c000ab77:	a3 80 7f 02 c0       	mov    ds:0xc0027f80,eax
c000ab7c:	e8 88 ff ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ab81:	83 c4 1c             	add    esp,0x1c
c000ab84:	c3                   	ret    
c000ab85:	90                   	nop

c000ab86 <VgaText::setCursorX(int)>:
c000ab86:	83 ec 10             	sub    esp,0x10
c000ab89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ab8d:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000ab90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab94:	50                   	push   eax
c000ab95:	e8 58 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ab9a:	83 c4 1c             	add    esp,0x1c
c000ab9d:	c3                   	ret    

c000ab9e <VgaText::setCursorY(int)>:
c000ab9e:	83 ec 10             	sub    esp,0x10
c000aba1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aba5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aba9:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000abac:	50                   	push   eax
c000abad:	e8 40 ff ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000abb2:	83 c4 1c             	add    esp,0x1c
c000abb5:	c3                   	ret    

c000abb6 <VgaText::incrementCursor(bool)>:
c000abb6:	56                   	push   esi
c000abb7:	53                   	push   ebx
c000abb8:	51                   	push   ecx
c000abb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000abbd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000abc1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000abc4:	40                   	inc    eax
c000abc5:	83 f8 50             	cmp    eax,0x50
c000abc8:	74 05                	je     c000abcf <VgaText::incrementCursor(bool)+0x19>
c000abca:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000abcd:	eb 24                	jmp    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abcf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000abd2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000abd9:	8d 50 01             	lea    edx,[eax+0x1]
c000abdc:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000abdf:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000abe2:	75 0f                	jne    c000abf3 <VgaText::incrementCursor(bool)+0x3d>
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000abea:	53                   	push   ebx
c000abeb:	e8 f0 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000abf0:	83 c4 10             	add    esp,0x10
c000abf3:	89 f0                	mov    eax,esi
c000abf5:	84 c0                	test   al,al
c000abf7:	74 0c                	je     c000ac05 <VgaText::incrementCursor(bool)+0x4f>
c000abf9:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000abfd:	5a                   	pop    edx
c000abfe:	5b                   	pop    ebx
c000abff:	5e                   	pop    esi
c000ac00:	e9 b9 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac05:	58                   	pop    eax
c000ac06:	5b                   	pop    ebx
c000ac07:	5e                   	pop    esi
c000ac08:	c3                   	ret    
c000ac09:	90                   	nop

c000ac0a <VgaText::decrementCursor(bool)>:
c000ac0a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ac0e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ac12:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000ac15:	85 c0                	test   eax,eax
c000ac17:	74 04                	je     c000ac1d <VgaText::decrementCursor(bool)+0x13>
c000ac19:	48                   	dec    eax
c000ac1a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000ac1d:	84 c9                	test   cl,cl
c000ac1f:	74 09                	je     c000ac2a <VgaText::decrementCursor(bool)+0x20>
c000ac21:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac25:	e9 94 fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000ac2a:	c3                   	ret    
c000ac2b:	90                   	nop

c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>:
c000ac2c:	53                   	push   ebx
c000ac2d:	83 ec 08             	sub    esp,0x8
c000ac30:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac34:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ac38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ac3c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ac40:	3c 07                	cmp    al,0x7
c000ac42:	75 2a                	jne    c000ac6e <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000ac44:	a1 38 80 02 c0       	mov    eax,ds:0xc0028038
c000ac49:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ac51:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000ac59:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000ac61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac65:	83 c4 08             	add    esp,0x8
c000ac68:	5b                   	pop    ebx
c000ac69:	e9 d4 2f 00 00       	jmp    c000dc42 <Buzzer::beep(int, int, bool)>
c000ac6e:	3c 0d                	cmp    al,0xd
c000ac70:	75 09                	jne    c000ac7b <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000ac72:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac79:	eb 2c                	jmp    c000aca7 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000ac7b:	3c 0a                	cmp    al,0xa
c000ac7d:	75 31                	jne    c000acb0 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000ac7f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac82:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ac89:	8d 50 01             	lea    edx,[eax+0x1]
c000ac8c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000ac8f:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000ac92:	75 0f                	jne    c000aca3 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ac9a:	53                   	push   ebx
c000ac9b:	e8 40 fd ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000aca0:	83 c4 10             	add    esp,0x10
c000aca3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000aca7:	83 c4 08             	add    esp,0x8
c000acaa:	5b                   	pop    ebx
c000acab:	e9 0e fc ff ff       	jmp    c000a8be <VgaText::updateCursor()>
c000acb0:	3c 08                	cmp    al,0x8
c000acb2:	75 25                	jne    c000acd9 <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000acb4:	50                   	push   eax
c000acb5:	50                   	push   eax
c000acb6:	6a 01                	push   0x1
c000acb8:	53                   	push   ebx
c000acb9:	e8 4c ff ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000acbe:	5a                   	pop    edx
c000acbf:	59                   	pop    ecx
c000acc0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000acc3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000acc6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000acc9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000accc:	6a 20                	push   0x20
c000acce:	53                   	push   ebx
c000accf:	e8 b2 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acd4:	83 c4 28             	add    esp,0x28
c000acd7:	5b                   	pop    ebx
c000acd8:	c3                   	ret    
c000acd9:	83 ec 08             	sub    esp,0x8
c000acdc:	0f be c0             	movsx  eax,al
c000acdf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ace2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ace5:	51                   	push   ecx
c000ace6:	52                   	push   edx
c000ace7:	50                   	push   eax
c000ace8:	53                   	push   ebx
c000ace9:	e8 98 fd ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000acee:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000acf2:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000acfa:	83 c4 28             	add    esp,0x28
c000acfd:	5b                   	pop    ebx
c000acfe:	e9 b3 fe ff ff       	jmp    c000abb6 <VgaText::incrementCursor(bool)>
c000ad03:	90                   	nop

c000ad04 <VgaText::doUpdate()>:
c000ad04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ad08:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000ad0b:	85 c0                	test   eax,eax
c000ad0d:	74 02                	je     c000ad11 <VgaText::doUpdate()+0xd>
c000ad0f:	ff e0                	jmp    eax
c000ad11:	c3                   	ret    

c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000ad12:	55                   	push   ebp
c000ad13:	31 ed                	xor    ebp,ebp
c000ad15:	57                   	push   edi
c000ad16:	56                   	push   esi
c000ad17:	53                   	push   ebx
c000ad18:	83 ec 1c             	sub    esp,0x1c
c000ad1b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ad1f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad24:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000ad2b:	50                   	push   eax
c000ad2c:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000ad31:	50                   	push   eax
c000ad32:	e8 97 fc ff ff       	call   c000a9ce <VgaText::combineColours(unsigned char, unsigned char)>
c000ad37:	59                   	pop    ecx
c000ad38:	0f b6 c0             	movzx  eax,al
c000ad3b:	5e                   	pop    esi
c000ad3c:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ad41:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ad45:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ad48:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad4c:	0f b7 f6             	movzx  esi,si
c000ad4f:	01 f6                	add    esi,esi
c000ad51:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ad54:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ad57:	84 c0                	test   al,al
c000ad59:	0f 84 fd 00 00 00    	je     c000ae5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000ad5f:	3c 0d                	cmp    al,0xd
c000ad61:	75 0c                	jne    c000ad6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000ad63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad6a:	e9 e7 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ad6f:	3c 0a                	cmp    al,0xa
c000ad71:	75 47                	jne    c000adba <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000ad73:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ad76:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ad7d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ad80:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000ad83:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000ad86:	75 0f                	jne    c000ad97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000ad88:	83 ec 0c             	sub    esp,0xc
c000ad8b:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000ad8e:	53                   	push   ebx
c000ad8f:	e8 4c fc ff ff       	call   c000a9e0 <VgaText::scrollScreen()>
c000ad94:	83 c4 10             	add    esp,0x10
c000ad97:	83 ec 0c             	sub    esp,0xc
c000ad9a:	31 ed                	xor    ebp,ebp
c000ad9c:	53                   	push   ebx
c000ad9d:	e8 1c fb ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ada2:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000adad:	0f b7 f6             	movzx  esi,si
c000adb0:	01 f6                	add    esi,esi
c000adb2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adb5:	e9 9c 00 00 00       	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adba:	3c 08                	cmp    al,0x8
c000adbc:	75 35                	jne    c000adf3 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000adbe:	56                   	push   esi
c000adbf:	56                   	push   esi
c000adc0:	6a 01                	push   0x1
c000adc2:	53                   	push   ebx
c000adc3:	e8 42 fe ff ff       	call   c000ac0a <VgaText::decrementCursor(bool)>
c000adc8:	58                   	pop    eax
c000adc9:	5a                   	pop    edx
c000adca:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000adcd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000add0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000add3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000add6:	6a 20                	push   0x20
c000add8:	53                   	push   ebx
c000add9:	e8 a8 fc ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000adde:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ade3:	83 c4 20             	add    esp,0x20
c000ade6:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000ade9:	0f b7 f6             	movzx  esi,si
c000adec:	01 f6                	add    esi,esi
c000adee:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000adf1:	eb 63                	jmp    c000ae56 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000adf3:	51                   	push   ecx
c000adf4:	51                   	push   ecx
c000adf5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adf9:	50                   	push   eax
c000adfa:	e8 75 fc ff ff       	call   c000aa74 <VgaText::combineCharAndColour(char, unsigned char)>
c000adff:	83 c4 10             	add    esp,0x10
c000ae02:	66 89 06             	mov    WORD PTR [esi],ax
c000ae05:	39 1d 84 7f 02 c0    	cmp    DWORD PTR ds:0xc0027f84,ebx
c000ae0b:	75 21                	jne    c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae0d:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ae10:	85 c0                	test   eax,eax
c000ae12:	74 1a                	je     c000ae2e <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ae14:	52                   	push   edx
c000ae15:	52                   	push   edx
c000ae16:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ae19:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ae1c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae20:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ae24:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ae27:	51                   	push   ecx
c000ae28:	53                   	push   ebx
c000ae29:	ff d0                	call   eax
c000ae2b:	83 c4 20             	add    esp,0x20
c000ae2e:	83 c6 02             	add    esi,0x2
c000ae31:	50                   	push   eax
c000ae32:	50                   	push   eax
c000ae33:	6a 00                	push   0x0
c000ae35:	53                   	push   ebx
c000ae36:	e8 7b fd ff ff       	call   c000abb6 <VgaText::incrementCursor(bool)>
c000ae3b:	83 c4 10             	add    esp,0x10
c000ae3e:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ae42:	75 0d                	jne    c000ae51 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ae44:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ae49:	0f b7 f6             	movzx  esi,si
c000ae4c:	01 f6                	add    esi,esi
c000ae4e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ae51:	bd 01 00 00 00       	mov    ebp,0x1
c000ae56:	47                   	inc    edi
c000ae57:	e9 f8 fe ff ff       	jmp    c000ad54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ae5c:	83 ec 0c             	sub    esp,0xc
c000ae5f:	53                   	push   ebx
c000ae60:	e8 59 fa ff ff       	call   c000a8be <VgaText::updateCursor()>
c000ae65:	83 c4 10             	add    esp,0x10
c000ae68:	89 e8                	mov    eax,ebp
c000ae6a:	84 c0                	test   al,al
c000ae6c:	74 0c                	je     c000ae7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ae6e:	83 ec 0c             	sub    esp,0xc
c000ae71:	53                   	push   ebx
c000ae72:	e8 8d fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ae81:	83 c4 1c             	add    esp,0x1c
c000ae84:	5b                   	pop    ebx
c000ae85:	5e                   	pop    esi
c000ae86:	5f                   	pop    edi
c000ae87:	5d                   	pop    ebp
c000ae88:	c3                   	ret    
c000ae89:	90                   	nop

c000ae8a <VgaText::clearScreen()>:
c000ae8a:	57                   	push   edi
c000ae8b:	56                   	push   esi
c000ae8c:	31 f6                	xor    esi,esi
c000ae8e:	53                   	push   ebx
c000ae8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ae93:	52                   	push   edx
c000ae94:	6a 00                	push   0x0
c000ae96:	6a 00                	push   0x0
c000ae98:	53                   	push   ebx
c000ae99:	e8 54 fc ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000ae9e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aea5:	83 c4 10             	add    esp,0x10
c000aea8:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000aeab:	7e 20                	jle    c000aecd <VgaText::clearScreen()+0x43>
c000aead:	31 ff                	xor    edi,edi
c000aeaf:	50                   	push   eax
c000aeb0:	50                   	push   eax
c000aeb1:	56                   	push   esi
c000aeb2:	57                   	push   edi
c000aeb3:	47                   	inc    edi
c000aeb4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aeb7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aeba:	6a 20                	push   0x20
c000aebc:	53                   	push   ebx
c000aebd:	e8 c4 fb ff ff       	call   c000aa86 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aec2:	83 c4 20             	add    esp,0x20
c000aec5:	83 ff 50             	cmp    edi,0x50
c000aec8:	75 e5                	jne    c000aeaf <VgaText::clearScreen()+0x25>
c000aeca:	46                   	inc    esi
c000aecb:	eb db                	jmp    c000aea8 <VgaText::clearScreen()+0x1e>
c000aecd:	83 ec 0c             	sub    esp,0xc
c000aed0:	53                   	push   ebx
c000aed1:	e8 2e fe ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000aed6:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000aedd:	83 c4 10             	add    esp,0x10
c000aee0:	5b                   	pop    ebx
c000aee1:	5e                   	pop    esi
c000aee2:	5f                   	pop    edi
c000aee3:	c3                   	ret    

c000aee4 <VgaText::putchar(char)>:
c000aee4:	56                   	push   esi
c000aee5:	53                   	push   ebx
c000aee6:	83 ec 14             	sub    esp,0x14
c000aee9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aeed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aef1:	3c 5b                	cmp    al,0x5b
c000aef3:	75 18                	jne    c000af0d <VgaText::putchar(char)+0x29>
c000aef5:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000aef9:	74 1f                	je     c000af1a <VgaText::putchar(char)+0x36>
c000aefb:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000af01:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000af08:	e9 bd 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af0d:	3c 1b                	cmp    al,0x1b
c000af0f:	75 09                	jne    c000af1a <VgaText::putchar(char)+0x36>
c000af11:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000af15:	e9 b0 00 00 00       	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000af1a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000af1d:	84 c9                	test   cl,cl
c000af1f:	0f 84 92 00 00 00    	je     c000afb7 <VgaText::putchar(char)+0xd3>
c000af25:	8d 50 c0             	lea    edx,[eax-0x40]
c000af28:	80 fa 3e             	cmp    dl,0x3e
c000af2b:	77 76                	ja     c000afa3 <VgaText::putchar(char)+0xbf>
c000af2d:	3c 6d                	cmp    al,0x6d
c000af2f:	75 47                	jne    c000af78 <VgaText::putchar(char)+0x94>
c000af31:	31 f6                	xor    esi,esi
c000af33:	31 d2                	xor    edx,edx
c000af35:	31 c0                	xor    eax,eax
c000af37:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000af3a:	7e 2d                	jle    c000af69 <VgaText::putchar(char)+0x85>
c000af3c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000af41:	80 fa 3b             	cmp    dl,0x3b
c000af44:	75 17                	jne    c000af5d <VgaText::putchar(char)+0x79>
c000af46:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000af4a:	50                   	push   eax
c000af4b:	53                   	push   ebx
c000af4c:	e8 83 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af51:	59                   	pop    ecx
c000af52:	31 d2                	xor    edx,edx
c000af54:	58                   	pop    eax
c000af55:	31 c0                	xor    eax,eax
c000af57:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000af5b:	eb 09                	jmp    c000af66 <VgaText::putchar(char)+0x82>
c000af5d:	6b c0 0a             	imul   eax,eax,0xa
c000af60:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000af64:	88 ca                	mov    dl,cl
c000af66:	46                   	inc    esi
c000af67:	eb ce                	jmp    c000af37 <VgaText::putchar(char)+0x53>
c000af69:	84 d2                	test   dl,dl
c000af6b:	74 2e                	je     c000af9b <VgaText::putchar(char)+0xb7>
c000af6d:	50                   	push   eax
c000af6e:	53                   	push   ebx
c000af6f:	e8 60 f9 ff ff       	call   c000a8d4 <VgaText::doANSI_SGR(int)>
c000af74:	58                   	pop    eax
c000af75:	5a                   	pop    edx
c000af76:	eb 23                	jmp    c000af9b <VgaText::putchar(char)+0xb7>
c000af78:	3c 4a                	cmp    al,0x4a
c000af7a:	75 1f                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af7c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000af80:	75 19                	jne    c000af9b <VgaText::putchar(char)+0xb7>
c000af82:	83 ec 0c             	sub    esp,0xc
c000af85:	53                   	push   ebx
c000af86:	e8 ff fe ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000af8b:	83 c4 0c             	add    esp,0xc
c000af8e:	6a 00                	push   0x0
c000af90:	6a 00                	push   0x0
c000af92:	53                   	push   ebx
c000af93:	e8 5a fb ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000af98:	83 c4 10             	add    esp,0x10
c000af9b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000afa1:	eb 27                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afa3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000afa6:	83 fa 0e             	cmp    edx,0xe
c000afa9:	7f 1f                	jg     c000afca <VgaText::putchar(char)+0xe6>
c000afab:	8d 4a 01             	lea    ecx,[edx+0x1]
c000afae:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000afb1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000afb5:	eb 13                	jmp    c000afca <VgaText::putchar(char)+0xe6>
c000afb7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000afba:	0f be c0             	movsx  eax,al
c000afbd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000afc0:	50                   	push   eax
c000afc1:	53                   	push   ebx
c000afc2:	e8 65 fc ff ff       	call   c000ac2c <VgaText::putchar(char, VgaColour, VgaColour)>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	83 c4 14             	add    esp,0x14
c000afcd:	5b                   	pop    ebx
c000afce:	5e                   	pop    esi
c000afcf:	c3                   	ret    

c000afd0 <VgaText::putx(unsigned int)>:
c000afd0:	57                   	push   edi
c000afd1:	b9 11 00 00 00       	mov    ecx,0x11
c000afd6:	56                   	push   esi
c000afd7:	be 4a 42 02 c0       	mov    esi,0xc002424a
c000afdc:	53                   	push   ebx
c000afdd:	83 ec 20             	sub    esp,0x20
c000afe0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000afe4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000afe8:	fc                   	cld    
c000afe9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000afeb:	be 08 00 00 00       	mov    esi,0x8
c000aff0:	50                   	push   eax
c000aff1:	50                   	push   eax
c000aff2:	89 d8                	mov    eax,ebx
c000aff4:	c1 e3 04             	shl    ebx,0x4
c000aff7:	c1 e8 1c             	shr    eax,0x1c
c000affa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000afff:	50                   	push   eax
c000b000:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000b004:	e8 db fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b009:	83 c4 10             	add    esp,0x10
c000b00c:	4e                   	dec    esi
c000b00d:	75 e1                	jne    c000aff0 <VgaText::putx(unsigned int)+0x20>
c000b00f:	83 c4 20             	add    esp,0x20
c000b012:	5b                   	pop    ebx
c000b013:	5e                   	pop    esi
c000b014:	5f                   	pop    edi
c000b015:	c3                   	ret    

c000b016 <VgaText::puts(char const*)>:
c000b016:	53                   	push   ebx
c000b017:	83 ec 08             	sub    esp,0x8
c000b01a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b01e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000b021:	84 c0                	test   al,al
c000b023:	74 12                	je     c000b037 <VgaText::puts(char const*)+0x21>
c000b025:	43                   	inc    ebx
c000b026:	51                   	push   ecx
c000b027:	51                   	push   ecx
c000b028:	50                   	push   eax
c000b029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02d:	e8 b2 fe ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b032:	83 c4 10             	add    esp,0x10
c000b035:	eb e7                	jmp    c000b01e <VgaText::puts(char const*)+0x8>
c000b037:	83 c4 08             	add    esp,0x8
c000b03a:	5b                   	pop    ebx
c000b03b:	c3                   	ret    

c000b03c <VgaText::VgaText(char const*)>:
c000b03c:	57                   	push   edi
c000b03d:	56                   	push   esi
c000b03e:	53                   	push   ebx
c000b03f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b043:	83 ec 08             	sub    esp,0x8
c000b046:	6a 00                	push   0x0
c000b048:	50                   	push   eax
c000b049:	e8 44 05 00 00       	call   c000b592 <UnixFile::UnixFile(int)>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	ba b0 42 02 c0       	mov    edx,0xc00242b0
c000b056:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b05a:	89 10                	mov    DWORD PTR [eax],edx
c000b05c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b060:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000b067:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b06b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000b07a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b07e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000b082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b086:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000b08d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b091:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000b098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b09c:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000b0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0a7:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000b0ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0b2:	8d 50 60             	lea    edx,[eax+0x60]
c000b0b5:	bb 60 7f 02 c0       	mov    ebx,0xc0027f60
c000b0ba:	b8 08 00 00 00       	mov    eax,0x8
c000b0bf:	fc                   	cld    
c000b0c0:	89 d7                	mov    edi,edx
c000b0c2:	89 de                	mov    esi,ebx
c000b0c4:	89 c1                	mov    ecx,eax
c000b0c6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b0c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0cc:	05 82 00 00 00       	add    eax,0x82
c000b0d1:	83 ec 08             	sub    esp,0x8
c000b0d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0d8:	50                   	push   eax
c000b0d9:	e8 62 56 ff ff       	call   c0000740 <strcpy>
c000b0de:	83 c4 10             	add    esp,0x10
c000b0e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0e5:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000b0ec:	83 ec 0c             	sub    esp,0xc
c000b0ef:	6a 01                	push   0x1
c000b0f1:	e8 df 08 00 00       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000b0f6:	83 c4 10             	add    esp,0x10
c000b0f9:	89 c2                	mov    edx,eax
c000b0fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b0ff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b102:	8b 1d 30 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028030
c000b108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b10c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b10f:	89 c6                	mov    esi,eax
c000b111:	e8 b0 ef ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000b116:	68 05 0c 00 00       	push   0xc05
c000b11b:	56                   	push   esi
c000b11c:	50                   	push   eax
c000b11d:	53                   	push   ebx
c000b11e:	e8 59 0f 00 00       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000b123:	83 c4 10             	add    esp,0x10
c000b126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b12a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000b12d:	83 ec 04             	sub    esp,0x4
c000b130:	68 00 0f 00 00       	push   0xf00
c000b135:	6a 00                	push   0x0
c000b137:	50                   	push   eax
c000b138:	e8 47 55 ff ff       	call   c0000684 <memset>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	83 ec 04             	sub    esp,0x4
c000b143:	6a 00                	push   0x0
c000b145:	6a 07                	push   0x7
c000b147:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b14b:	e8 18 f8 ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	83 ec 04             	sub    esp,0x4
c000b156:	6a 00                	push   0x0
c000b158:	6a 00                	push   0x0
c000b15a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b15e:	e8 8f f9 ff ff       	call   c000aaf2 <VgaText::setCursor(int, int)>
c000b163:	83 c4 10             	add    esp,0x10
c000b166:	83 ec 0c             	sub    esp,0xc
c000b169:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b16d:	e8 18 fd ff ff       	call   c000ae8a <VgaText::clearScreen()>
c000b172:	83 c4 10             	add    esp,0x10
c000b175:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b179:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000b17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b181:	05 02 01 00 00       	add    eax,0x102
c000b186:	83 ec 04             	sub    esp,0x4
c000b189:	6a 30                	push   0x30
c000b18b:	6a 00                	push   0x0
c000b18d:	50                   	push   eax
c000b18e:	e8 f1 54 ff ff       	call   c0000684 <memset>
c000b193:	83 c4 10             	add    esp,0x10
c000b196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b19a:	05 32 01 00 00       	add    eax,0x132
c000b19f:	83 ec 04             	sub    esp,0x4
c000b1a2:	68 80 00 00 00       	push   0x80
c000b1a7:	6a 00                	push   0x0
c000b1a9:	50                   	push   eax
c000b1aa:	e8 d5 54 ff ff       	call   c0000684 <memset>
c000b1af:	83 c4 10             	add    esp,0x10
c000b1b2:	90                   	nop
c000b1b3:	5b                   	pop    ebx
c000b1b4:	5e                   	pop    esi
c000b1b5:	5f                   	pop    edi
c000b1b6:	c3                   	ret    
c000b1b7:	90                   	nop

c000b1b8 <VgaText::receiveKey(unsigned char)>:
c000b1b8:	55                   	push   ebp
c000b1b9:	57                   	push   edi
c000b1ba:	56                   	push   esi
c000b1bb:	53                   	push   ebx
c000b1bc:	83 ec 1c             	sub    esp,0x1c
c000b1bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b1c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b1c7:	84 db                	test   bl,bl
c000b1c9:	0f 84 c6 00 00 00    	je     c000b295 <VgaText::receiveKey(unsigned char)+0xdd>
c000b1cf:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000b1d5:	80 fb 08             	cmp    bl,0x8
c000b1d8:	75 2c                	jne    c000b206 <VgaText::receiveKey(unsigned char)+0x4e>
c000b1da:	83 ec 0c             	sub    esp,0xc
c000b1dd:	57                   	push   edi
c000b1de:	e8 bd 54 ff ff       	call   c00006a0 <strlen>
c000b1e3:	83 c4 10             	add    esp,0x10
c000b1e6:	85 c0                	test   eax,eax
c000b1e8:	74 41                	je     c000b22b <VgaText::receiveKey(unsigned char)+0x73>
c000b1ea:	50                   	push   eax
c000b1eb:	50                   	push   eax
c000b1ec:	6a 08                	push   0x8
c000b1ee:	56                   	push   esi
c000b1ef:	e8 f0 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b1f4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b1f7:	e8 a4 54 ff ff       	call   c00006a0 <strlen>
c000b1fc:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000b204:	eb 22                	jmp    c000b228 <VgaText::receiveKey(unsigned char)+0x70>
c000b206:	0f be c3             	movsx  eax,bl
c000b209:	52                   	push   edx
c000b20a:	52                   	push   edx
c000b20b:	50                   	push   eax
c000b20c:	56                   	push   esi
c000b20d:	e8 d2 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b212:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000b216:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000b21b:	59                   	pop    ecx
c000b21c:	5d                   	pop    ebp
c000b21d:	8d 44 24 16          	lea    eax,[esp+0x16]
c000b221:	50                   	push   eax
c000b222:	57                   	push   edi
c000b223:	e8 58 56 ff ff       	call   c0000880 <strcat>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000b232:	75 05                	jne    c000b239 <VgaText::receiveKey(unsigned char)+0x81>
c000b234:	80 fb 0a             	cmp    bl,0xa
c000b237:	75 50                	jne    c000b289 <VgaText::receiveKey(unsigned char)+0xd1>
c000b239:	83 ec 0c             	sub    esp,0xc
c000b23c:	8d 9e 32 01 00 00    	lea    ebx,[esi+0x132]
c000b242:	53                   	push   ebx
c000b243:	e8 58 54 ff ff       	call   c00006a0 <strlen>
c000b248:	89 3c 24             	mov    DWORD PTR [esp],edi
c000b24b:	89 c5                	mov    ebp,eax
c000b24d:	e8 4e 54 ff ff       	call   c00006a0 <strlen>
c000b252:	83 c4 10             	add    esp,0x10
c000b255:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000b259:	3d 80 00 00 00       	cmp    eax,0x80
c000b25e:	76 10                	jbe    c000b270 <VgaText::receiveKey(unsigned char)+0xb8>
c000b260:	83 ec 0c             	sub    esp,0xc
c000b263:	68 5b 42 02 c0       	push   0xc002425b
c000b268:	e8 36 97 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000b26d:	83 c4 10             	add    esp,0x10
c000b270:	50                   	push   eax
c000b271:	50                   	push   eax
c000b272:	57                   	push   edi
c000b273:	53                   	push   ebx
c000b274:	e8 07 56 ff ff       	call   c0000880 <strcat>
c000b279:	83 c4 0c             	add    esp,0xc
c000b27c:	6a 30                	push   0x30
c000b27e:	6a 00                	push   0x0
c000b280:	57                   	push   edi
c000b281:	e8 fe 53 ff ff       	call   c0000684 <memset>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	83 ec 0c             	sub    esp,0xc
c000b28c:	56                   	push   esi
c000b28d:	e8 72 fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b292:	83 c4 10             	add    esp,0x10
c000b295:	83 c4 1c             	add    esp,0x1c
c000b298:	5b                   	pop    ebx
c000b299:	5e                   	pop    esi
c000b29a:	5f                   	pop    edi
c000b29b:	5d                   	pop    ebp
c000b29c:	c3                   	ret    
c000b29d:	90                   	nop

c000b29e <VgaText::write(unsigned long long, void*, int*)>:
c000b29e:	55                   	push   ebp
c000b29f:	57                   	push   edi
c000b2a0:	56                   	push   esi
c000b2a1:	53                   	push   ebx
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000b2a9:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000b2ad:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000b2b1:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000b2b8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000b2bb:	39 eb                	cmp    ebx,ebp
c000b2bd:	74 13                	je     c000b2d2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000b2bf:	43                   	inc    ebx
c000b2c0:	50                   	push   eax
c000b2c1:	50                   	push   eax
c000b2c2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000b2c6:	50                   	push   eax
c000b2c7:	56                   	push   esi
c000b2c8:	e8 17 fc ff ff       	call   c000aee4 <VgaText::putchar(char)>
c000b2cd:	83 c4 10             	add    esp,0x10
c000b2d0:	eb e9                	jmp    c000b2bb <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000b2d2:	83 ec 0c             	sub    esp,0xc
c000b2d5:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000b2dc:	56                   	push   esi
c000b2dd:	e8 22 fa ff ff       	call   c000ad04 <VgaText::doUpdate()>
c000b2e2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b2e6:	89 38                	mov    DWORD PTR [eax],edi
c000b2e8:	83 c4 1c             	add    esp,0x1c
c000b2eb:	31 c0                	xor    eax,eax
c000b2ed:	5b                   	pop    ebx
c000b2ee:	5e                   	pop    esi
c000b2ef:	5f                   	pop    edi
c000b2f0:	5d                   	pop    ebp
c000b2f1:	c3                   	ret    

c000b2f2 <newTerminal(char*)>:
c000b2f2:	83 ec 28             	sub    esp,0x28
c000b2f5:	68 b4 01 00 00       	push   0x1b4
c000b2fa:	e8 10 e7 ff ff       	call   c0009a0f <malloc>
c000b2ff:	5a                   	pop    edx
c000b300:	59                   	pop    ecx
c000b301:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b305:	50                   	push   eax
c000b306:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b30a:	e8 2d fd ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c000b30f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b313:	83 c4 2c             	add    esp,0x2c
c000b316:	c3                   	ret    
c000b317:	90                   	nop

c000b318 <TSS::TSS()>:
c000b318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b31c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b323:	90                   	nop
c000b324:	c3                   	ret    
c000b325:	90                   	nop
c000b326:	66 90                	xchg   ax,ax

c000b328 <TSS::setESP(unsigned long)>:
c000b328:	55                   	push   ebp
c000b329:	89 e5                	mov    ebp,esp
c000b32b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b32e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b331:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b334:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b337:	90                   	nop
c000b338:	5d                   	pop    ebp
c000b339:	c3                   	ret    
c000b33a:	66 90                	xchg   ax,ax

c000b33c <TSS::flush()>:
c000b33c:	55                   	push   ebp
c000b33d:	89 e5                	mov    ebp,esp
c000b33f:	83 ec 10             	sub    esp,0x10
c000b342:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b345:	8b 00                	mov    eax,DWORD PTR [eax]
c000b347:	83 c8 03             	or     eax,0x3
c000b34a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b34e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b352:	66 89 d0             	mov    ax,dx
c000b355:	0f 00 d8             	ltr    ax
c000b358:	90                   	nop
c000b359:	c9                   	leave  
c000b35a:	c3                   	ret    
c000b35b:	90                   	nop

c000b35c <TSS::setup(unsigned long, unsigned long)>:
c000b35c:	55                   	push   ebp
c000b35d:	89 e5                	mov    ebp,esp
c000b35f:	83 ec 18             	sub    esp,0x18
c000b362:	83 ec 0c             	sub    esp,0xc
c000b365:	6a 68                	push   0x68
c000b367:	e8 a3 e6 ff ff       	call   c0009a0f <malloc>
c000b36c:	83 c4 10             	add    esp,0x10
c000b36f:	89 c2                	mov    edx,eax
c000b371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b374:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b37a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b37d:	83 ec 04             	sub    esp,0x4
c000b380:	6a 68                	push   0x68
c000b382:	6a 00                	push   0x0
c000b384:	50                   	push   eax
c000b385:	e8 fa 52 ff ff       	call   c0000684 <memset>
c000b38a:	83 c4 10             	add    esp,0x10
c000b38d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b390:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b393:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b399:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b39c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b39f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b3ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b3b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3b7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b3bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3c3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b3c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3cf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b3d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3db:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b3e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3e7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3f3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b3fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b3ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b402:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b408:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b40b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b40e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b414:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b417:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b41e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b421:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b424:	0f 20 da             	mov    edx,cr3
c000b427:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b42a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b42d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b433:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b436:	83 ec 08             	sub    esp,0x8
c000b439:	50                   	push   eax
c000b43a:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b43d:	50                   	push   eax
c000b43e:	e8 27 de ff ff       	call   c000926a <GDTEntry::setBase(unsigned int)>
c000b443:	83 c4 10             	add    esp,0x10
c000b446:	83 ec 08             	sub    esp,0x8
c000b449:	6a 68                	push   0x68
c000b44b:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b44e:	50                   	push   eax
c000b44f:	e8 32 de ff ff       	call   c0009286 <GDTEntry::setLimit(unsigned int)>
c000b454:	83 c4 10             	add    esp,0x10
c000b457:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b45b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b45e:	83 e0 0f             	and    eax,0xf
c000b461:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b464:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b467:	83 c8 40             	or     eax,0x40
c000b46a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b46d:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000b472:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b478:	05 78 01 00 00       	add    eax,0x178
c000b47d:	83 ec 04             	sub    esp,0x4
c000b480:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b483:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b486:	50                   	push   eax
c000b487:	e8 2e de ff ff       	call   c00092ba <GDT::addEntry(GDTEntry)>
c000b48c:	83 c4 10             	add    esp,0x10
c000b48f:	89 c2                	mov    edx,eax
c000b491:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b494:	89 10                	mov    DWORD PTR [eax],edx
c000b496:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000b49b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b4a1:	05 78 01 00 00       	add    eax,0x178
c000b4a6:	83 ec 0c             	sub    esp,0xc
c000b4a9:	50                   	push   eax
c000b4aa:	e8 35 de ff ff       	call   c00092e4 <GDT::flush()>
c000b4af:	83 c4 10             	add    esp,0x10
c000b4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b4b5:	8b 00                	mov    eax,DWORD PTR [eax]
c000b4b7:	c9                   	leave  
c000b4b8:	c3                   	ret    
c000b4b9:	90                   	nop

c000b4ba <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b4ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b4c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b4ca:	75 08                	jne    c000b4d4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b4cc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b4d2:	eb 38                	jmp    c000b50c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b4d4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b4d9:	75 17                	jne    c000b4f2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b4db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b4e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b4e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b4e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000b4eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b4ef:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b4f2:	89 c1                	mov    ecx,eax
c000b4f4:	83 e1 fd             	and    ecx,0xfffffffd
c000b4f7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b4fd:	74 cd                	je     c000b4cc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b4ff:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b504:	83 e0 ef             	and    eax,0xffffffef
c000b507:	83 f8 08             	cmp    eax,0x8
c000b50a:	76 c0                	jbe    c000b4cc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b50c:	31 c0                	xor    eax,eax
c000b50e:	c3                   	ret    
c000b50f:	90                   	nop

c000b510 <ReservedFilename::isAtty()>:
c000b510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b514:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b517:	31 c0                	xor    eax,eax
c000b519:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b51f:	74 09                	je     c000b52a <ReservedFilename::isAtty()+0x1a>
c000b521:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b527:	0f 94 c0             	sete   al
c000b52a:	c3                   	ret    
c000b52b:	90                   	nop

c000b52c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b52c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b530:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b537:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b53b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b540:	75 08                	jne    c000b54a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b542:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b548:	eb 3d                	jmp    c000b587 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b54a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b54f:	75 17                	jne    c000b568 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b551:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b556:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b559:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b55f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b561:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b565:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b568:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b56d:	75 04                	jne    c000b573 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b56f:	89 0a                	mov    DWORD PTR [edx],ecx
c000b571:	eb 14                	jmp    c000b587 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b573:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b578:	74 c8                	je     c000b542 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b57a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b57f:	83 e0 ef             	and    eax,0xffffffef
c000b582:	83 f8 08             	cmp    eax,0x8
c000b585:	76 bb                	jbe    c000b542 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b587:	31 c0                	xor    eax,eax
c000b589:	c3                   	ret    

c000b58a <UnixFile::getFileDescriptor()>:
c000b58a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b58e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b591:	c3                   	ret    

c000b592 <UnixFile::UnixFile(int)>:
c000b592:	53                   	push   ebx
c000b593:	83 ec 28             	sub    esp,0x28
c000b596:	ba 78 43 02 c0       	mov    edx,0xc0024378
c000b59b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b59f:	89 10                	mov    DWORD PTR [eax],edx
c000b5a1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b5a9:	0f 8f 8c 01 00 00    	jg     c000b73b <UnixFile::UnixFile(int)+0x1a9>
c000b5af:	a1 40 73 02 c0       	mov    eax,ds:0xc0027340
c000b5b4:	8d 50 01             	lea    edx,[eax+0x1]
c000b5b7:	89 15 40 73 02 c0    	mov    DWORD PTR ds:0xc0027340,edx
c000b5bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b5c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b5c4:	83 ec 08             	sub    esp,0x8
c000b5c7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b5cb:	68 18 80 02 c0       	push   0xc0028018
c000b5d0:	e8 a7 73 01 00       	call   c002297c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b5d5:	83 c4 10             	add    esp,0x10
c000b5d8:	a0 14 80 02 c0       	mov    al,ds:0xc0028014
c000b5dd:	83 f0 01             	xor    eax,0x1
c000b5e0:	84 c0                	test   al,al
c000b5e2:	0f 84 54 01 00 00    	je     c000b73c <UnixFile::UnixFile(int)+0x1aa>
c000b5e8:	c6 05 14 80 02 c0 01 	mov    BYTE PTR ds:0xc0028014,0x1
c000b5ef:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b5f7:	83 ec 0c             	sub    esp,0xc
c000b5fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b5fe:	e8 0c e4 ff ff       	call   c0009a0f <malloc>
c000b603:	83 c4 10             	add    esp,0x10
c000b606:	89 c3                	mov    ebx,eax
c000b608:	83 ec 08             	sub    esp,0x8
c000b60b:	68 03 ff ff 0f       	push   0xfffff03
c000b610:	53                   	push   ebx
c000b611:	e8 2c 01 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b616:	83 c4 10             	add    esp,0x10
c000b619:	89 1d 0c 80 02 c0    	mov    DWORD PTR ds:0xc002800c,ebx
c000b61f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b627:	83 ec 0c             	sub    esp,0xc
c000b62a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b62e:	e8 dc e3 ff ff       	call   c0009a0f <malloc>
c000b633:	83 c4 10             	add    esp,0x10
c000b636:	89 c3                	mov    ebx,eax
c000b638:	83 ec 08             	sub    esp,0x8
c000b63b:	68 01 ff ff 0f       	push   0xfffff01
c000b640:	53                   	push   ebx
c000b641:	e8 fc 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b646:	83 c4 10             	add    esp,0x10
c000b649:	89 1d 10 80 02 c0    	mov    DWORD PTR ds:0xc0028010,ebx
c000b64f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b657:	83 ec 0c             	sub    esp,0xc
c000b65a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b65e:	e8 ac e3 ff ff       	call   c0009a0f <malloc>
c000b663:	83 c4 10             	add    esp,0x10
c000b666:	89 c3                	mov    ebx,eax
c000b668:	83 ec 08             	sub    esp,0x8
c000b66b:	68 00 ff ff 0f       	push   0xfffff00
c000b670:	53                   	push   ebx
c000b671:	e8 cc 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b676:	83 c4 10             	add    esp,0x10
c000b679:	89 1d 04 80 02 c0    	mov    DWORD PTR ds:0xc0028004,ebx
c000b67f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b687:	83 ec 0c             	sub    esp,0xc
c000b68a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b68e:	e8 7c e3 ff ff       	call   c0009a0f <malloc>
c000b693:	83 c4 10             	add    esp,0x10
c000b696:	89 c3                	mov    ebx,eax
c000b698:	83 ec 08             	sub    esp,0x8
c000b69b:	68 02 ff ff 0f       	push   0xfffff02
c000b6a0:	53                   	push   ebx
c000b6a1:	e8 9c 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b6a6:	83 c4 10             	add    esp,0x10
c000b6a9:	89 1d 08 80 02 c0    	mov    DWORD PTR ds:0xc0028008,ebx
c000b6af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b6b7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b6bc:	7f 7e                	jg     c000b73c <UnixFile::UnixFile(int)+0x1aa>
c000b6be:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b6c6:	83 ec 0c             	sub    esp,0xc
c000b6c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b6cd:	e8 3d e3 ff ff       	call   c0009a0f <malloc>
c000b6d2:	83 c4 10             	add    esp,0x10
c000b6d5:	89 c3                	mov    ebx,eax
c000b6d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6db:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b6e0:	83 ec 08             	sub    esp,0x8
c000b6e3:	50                   	push   eax
c000b6e4:	53                   	push   ebx
c000b6e5:	e8 58 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b6ea:	83 c4 10             	add    esp,0x10
c000b6ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6f1:	89 1c 85 e0 7f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8020],ebx
c000b6f8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b700:	83 ec 0c             	sub    esp,0xc
c000b703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b707:	e8 03 e3 ff ff       	call   c0009a0f <malloc>
c000b70c:	83 c4 10             	add    esp,0x10
c000b70f:	89 c3                	mov    ebx,eax
c000b711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b715:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b71a:	83 ec 08             	sub    esp,0x8
c000b71d:	50                   	push   eax
c000b71e:	53                   	push   ebx
c000b71f:	e8 1e 00 00 00       	call   c000b742 <ReservedFilename::ReservedFilename(int)>
c000b724:	83 c4 10             	add    esp,0x10
c000b727:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b72b:	89 1c 85 a0 7f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8060],ebx
c000b732:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b736:	e9 7c ff ff ff       	jmp    c000b6b7 <UnixFile::UnixFile(int)+0x125>
c000b73b:	90                   	nop
c000b73c:	83 c4 28             	add    esp,0x28
c000b73f:	5b                   	pop    ebx
c000b740:	c3                   	ret    
c000b741:	90                   	nop

c000b742 <ReservedFilename::ReservedFilename(int)>:
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b749:	83 ec 08             	sub    esp,0x8
c000b74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b750:	50                   	push   eax
c000b751:	e8 3c fe ff ff       	call   c000b592 <UnixFile::UnixFile(int)>
c000b756:	83 c4 10             	add    esp,0x10
c000b759:	ba 94 43 02 c0       	mov    edx,0xc0024394
c000b75e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b762:	89 10                	mov    DWORD PTR [eax],edx
c000b764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b768:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b76c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b76f:	90                   	nop
c000b770:	83 c4 0c             	add    esp,0xc
c000b773:	c3                   	ret    

c000b774 <UnixFile::~UnixFile()>:
c000b774:	83 ec 1c             	sub    esp,0x1c
c000b777:	ba 78 43 02 c0       	mov    edx,0xc0024378
c000b77c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b780:	89 10                	mov    DWORD PTR [eax],edx
c000b782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b786:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b789:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b78e:	7f 73                	jg     c000b803 <UnixFile::~UnixFile()+0x8f>
c000b790:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b798:	83 ec 0c             	sub    esp,0xc
c000b79b:	68 18 80 02 c0       	push   0xc0028018
c000b7a0:	e8 ab 72 01 00       	call   c0022a50 <LinkedList<UnixFile>::getFirstElement()>
c000b7a5:	83 c4 10             	add    esp,0x10
c000b7a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ac:	83 ec 0c             	sub    esp,0xc
c000b7af:	68 18 80 02 c0       	push   0xc0028018
c000b7b4:	e8 9f 72 01 00       	call   c0022a58 <LinkedList<UnixFile>::removeFirst()>
c000b7b9:	83 c4 10             	add    esp,0x10
c000b7bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7c0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b7c4:	74 40                	je     c000b806 <UnixFile::~UnixFile()+0x92>
c000b7c6:	83 ec 08             	sub    esp,0x8
c000b7c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7cd:	68 18 80 02 c0       	push   0xc0028018
c000b7d2:	e8 a5 71 01 00       	call   c002297c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b7d7:	83 c4 10             	add    esp,0x10
c000b7da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7de:	8d 50 01             	lea    edx,[eax+0x1]
c000b7e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7e5:	3d 88 13 00 00       	cmp    eax,0x1388
c000b7ea:	0f 94 c0             	sete   al
c000b7ed:	84 c0                	test   al,al
c000b7ef:	74 a7                	je     c000b798 <UnixFile::~UnixFile()+0x24>
c000b7f1:	83 ec 0c             	sub    esp,0xc
c000b7f4:	68 50 43 02 c0       	push   0xc0024350
c000b7f9:	e8 a5 91 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000b7fe:	83 c4 10             	add    esp,0x10
c000b801:	eb 95                	jmp    c000b798 <UnixFile::~UnixFile()+0x24>
c000b803:	90                   	nop
c000b804:	eb 01                	jmp    c000b807 <UnixFile::~UnixFile()+0x93>
c000b806:	90                   	nop
c000b807:	90                   	nop
c000b808:	83 c4 1c             	add    esp,0x1c
c000b80b:	c3                   	ret    

c000b80c <UnixFile::~UnixFile()>:
c000b80c:	83 ec 0c             	sub    esp,0xc
c000b80f:	83 ec 0c             	sub    esp,0xc
c000b812:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b816:	e8 59 ff ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000b81b:	83 c4 10             	add    esp,0x10
c000b81e:	83 ec 08             	sub    esp,0x8
c000b821:	6a 0c                	push   0xc
c000b823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b827:	e8 ee 13 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000b82c:	83 c4 10             	add    esp,0x10
c000b82f:	83 c4 0c             	add    esp,0xc
c000b832:	c3                   	ret    
c000b833:	90                   	nop

c000b834 <ReservedFilename::~ReservedFilename()>:
c000b834:	83 ec 0c             	sub    esp,0xc
c000b837:	ba 94 43 02 c0       	mov    edx,0xc0024394
c000b83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b840:	89 10                	mov    DWORD PTR [eax],edx
c000b842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b846:	83 ec 0c             	sub    esp,0xc
c000b849:	50                   	push   eax
c000b84a:	e8 25 ff ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000b84f:	83 c4 10             	add    esp,0x10
c000b852:	90                   	nop
c000b853:	83 c4 0c             	add    esp,0xc
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <ReservedFilename::~ReservedFilename()>:
c000b858:	83 ec 0c             	sub    esp,0xc
c000b85b:	83 ec 0c             	sub    esp,0xc
c000b85e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b862:	e8 cd ff ff ff       	call   c000b834 <ReservedFilename::~ReservedFilename()>
c000b867:	83 c4 10             	add    esp,0x10
c000b86a:	83 ec 08             	sub    esp,0x8
c000b86d:	6a 0c                	push   0xc
c000b86f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b873:	e8 a2 13 00 00       	call   c000cc1a <operator delete(void*, unsigned long)>
c000b878:	83 c4 10             	add    esp,0x10
c000b87b:	83 c4 0c             	add    esp,0xc
c000b87e:	c3                   	ret    

c000b87f <getFromFileDescriptor(int)>:
c000b87f:	53                   	push   ebx
c000b880:	83 ec 08             	sub    esp,0x8
c000b883:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b887:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b88d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b893:	7f 2c                	jg     c000b8c1 <getFromFileDescriptor(int)+0x42>
c000b895:	83 ec 0c             	sub    esp,0xc
c000b898:	68 18 80 02 c0       	push   0xc0028018
c000b89d:	e8 ae 71 01 00       	call   c0022a50 <LinkedList<UnixFile>::getFirstElement()>
c000b8a2:	83 c4 10             	add    esp,0x10
c000b8a5:	85 c0                	test   eax,eax
c000b8a7:	75 04                	jne    c000b8ad <getFromFileDescriptor(int)+0x2e>
c000b8a9:	31 c0                	xor    eax,eax
c000b8ab:	eb 6e                	jmp    c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8ad:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b8b0:	74 69                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8b2:	52                   	push   edx
c000b8b3:	52                   	push   edx
c000b8b4:	50                   	push   eax
c000b8b5:	68 18 80 02 c0       	push   0xc0028018
c000b8ba:	e8 3b 72 01 00       	call   c0022afa <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b8bf:	eb e1                	jmp    c000b8a2 <getFromFileDescriptor(int)+0x23>
c000b8c1:	a1 0c 80 02 c0       	mov    eax,ds:0xc002800c
c000b8c6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b8cc:	74 4d                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8ce:	a1 10 80 02 c0       	mov    eax,ds:0xc0028010
c000b8d3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b8d9:	74 40                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8db:	a1 08 80 02 c0       	mov    eax,ds:0xc0028008
c000b8e0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b8e6:	74 33                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8e8:	a1 04 80 02 c0       	mov    eax,ds:0xc0028004
c000b8ed:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b8f3:	74 26                	je     c000b91b <getFromFileDescriptor(int)+0x9c>
c000b8f5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b8fb:	83 f8 08             	cmp    eax,0x8
c000b8fe:	77 09                	ja     c000b909 <getFromFileDescriptor(int)+0x8a>
c000b900:	8b 04 85 e0 7f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8020]
c000b907:	eb 12                	jmp    c000b91b <getFromFileDescriptor(int)+0x9c>
c000b909:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b90f:	83 fb 08             	cmp    ebx,0x8
c000b912:	77 95                	ja     c000b8a9 <getFromFileDescriptor(int)+0x2a>
c000b914:	8b 04 9d a0 7f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd8060]
c000b91b:	83 c4 08             	add    esp,0x8
c000b91e:	5b                   	pop    ebx
c000b91f:	c3                   	ret    

c000b920 <__static_initialization_and_destruction_0(int, int)>:
c000b920:	83 ec 0c             	sub    esp,0xc
c000b923:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b928:	75 34                	jne    c000b95e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b92a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b932:	75 2a                	jne    c000b95e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b934:	83 ec 0c             	sub    esp,0xc
c000b937:	68 18 80 02 c0       	push   0xc0028018
c000b93c:	e8 f9 6f 01 00       	call   c002293a <LinkedList<UnixFile>::LinkedList()>
c000b941:	83 c4 10             	add    esp,0x10
c000b944:	83 ec 04             	sub    esp,0x4
c000b947:	68 6c 71 02 c0       	push   0xc002716c
c000b94c:	68 18 80 02 c0       	push   0xc0028018
c000b951:	68 38 29 02 c0       	push   0xc0022938
c000b956:	e8 39 12 00 00       	call   c000cb94 <__cxa_atexit>
c000b95b:	83 c4 10             	add    esp,0x10
c000b95e:	90                   	nop
c000b95f:	83 c4 0c             	add    esp,0xc
c000b962:	c3                   	ret    

c000b963 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b963:	83 ec 0c             	sub    esp,0xc
c000b966:	83 ec 08             	sub    esp,0x8
c000b969:	68 ff ff 00 00       	push   0xffff
c000b96e:	6a 01                	push   0x1
c000b970:	e8 ab ff ff ff       	call   c000b920 <__static_initialization_and_destruction_0(int, int)>
c000b975:	83 c4 10             	add    esp,0x10
c000b978:	83 c4 0c             	add    esp,0xc
c000b97b:	c3                   	ret    

c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b97c:	53                   	push   ebx
c000b97d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b981:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b985:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b98b:	89 c8                	mov    eax,ecx
c000b98d:	d1 e8                	shr    eax,1
c000b98f:	03 05 48 73 02 c0    	add    eax,DWORD PTR ds:0xc0027348
c000b995:	83 e1 01             	and    ecx,0x1
c000b998:	8a 10                	mov    dl,BYTE PTR [eax]
c000b99a:	75 09                	jne    c000b9a5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b99c:	83 e2 f0             	and    edx,0xfffffff0
c000b99f:	09 da                	or     edx,ebx
c000b9a1:	88 10                	mov    BYTE PTR [eax],dl
c000b9a3:	5b                   	pop    ebx
c000b9a4:	c3                   	ret    
c000b9a5:	c1 e3 04             	shl    ebx,0x4
c000b9a8:	83 e2 0f             	and    edx,0xf
c000b9ab:	09 da                	or     edx,ebx
c000b9ad:	88 10                	mov    BYTE PTR [eax],dl
c000b9af:	5b                   	pop    ebx
c000b9b0:	c3                   	ret    

c000b9b1 <Virt::getPageState(unsigned long)>:
c000b9b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9b5:	8b 0d 48 73 02 c0    	mov    ecx,DWORD PTR ds:0xc0027348
c000b9bb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b9c1:	89 d0                	mov    eax,edx
c000b9c3:	d1 e8                	shr    eax,1
c000b9c5:	83 e2 01             	and    edx,0x1
c000b9c8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b9cb:	75 04                	jne    c000b9d1 <Virt::getPageState(unsigned long)+0x20>
c000b9cd:	83 e0 0f             	and    eax,0xf
c000b9d0:	c3                   	ret    
c000b9d1:	c0 e8 04             	shr    al,0x4
c000b9d4:	c3                   	ret    

c000b9d5 <Virt::allocateKernelVirtualPages(int)>:
c000b9d5:	55                   	push   ebp
c000b9d6:	31 ed                	xor    ebp,ebp
c000b9d8:	57                   	push   edi
c000b9d9:	56                   	push   esi
c000b9da:	53                   	push   ebx
c000b9db:	31 db                	xor    ebx,ebx
c000b9dd:	83 ec 1c             	sub    esp,0x1c
c000b9e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b9e4:	8b 3d 44 73 02 c0    	mov    edi,DWORD PTR ds:0xc0027344
c000b9ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b9ef:	57                   	push   edi
c000b9f0:	e8 bc ff ff ff       	call   c000b9b1 <Virt::getPageState(unsigned long)>
c000b9f5:	5a                   	pop    edx
c000b9f6:	84 c0                	test   al,al
c000b9f8:	75 3a                	jne    c000ba34 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b9fa:	85 db                	test   ebx,ebx
c000b9fc:	75 02                	jne    c000ba00 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b9fe:	89 fd                	mov    ebp,edi
c000ba00:	43                   	inc    ebx
c000ba01:	39 f3                	cmp    ebx,esi
c000ba03:	74 5a                	je     c000ba5f <Virt::allocateKernelVirtualPages(int)+0x8a>
c000ba05:	47                   	inc    edi
c000ba06:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba0c:	76 31                	jbe    c000ba3f <Virt::allocateKernelVirtualPages(int)+0x6a>
c000ba0e:	c7 05 44 73 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0027344,0xc8000
c000ba18:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000ba1d:	75 28                	jne    c000ba47 <Virt::allocateKernelVirtualPages(int)+0x72>
c000ba1f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ba24:	bf 00 80 0c 00       	mov    edi,0xc8000
c000ba29:	57                   	push   edi
c000ba2a:	e8 82 ff ff ff       	call   c000b9b1 <Virt::getPageState(unsigned long)>
c000ba2f:	5a                   	pop    edx
c000ba30:	84 c0                	test   al,al
c000ba32:	74 c6                	je     c000b9fa <Virt::allocateKernelVirtualPages(int)+0x25>
c000ba34:	31 db                	xor    ebx,ebx
c000ba36:	47                   	inc    edi
c000ba37:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000ba3d:	77 cf                	ja     c000ba0e <Virt::allocateKernelVirtualPages(int)+0x39>
c000ba3f:	89 3d 44 73 02 c0    	mov    DWORD PTR ds:0xc0027344,edi
c000ba45:	eb a8                	jmp    c000b9ef <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba47:	83 ec 0c             	sub    esp,0xc
c000ba4a:	68 a8 43 02 c0       	push   0xc00243a8
c000ba4f:	e8 4f 8f 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000ba54:	8b 3d 44 73 02 c0    	mov    edi,DWORD PTR ds:0xc0027344
c000ba5a:	83 c4 10             	add    esp,0x10
c000ba5d:	eb 90                	jmp    c000b9ef <Virt::allocateKernelVirtualPages(int)+0x1a>
c000ba5f:	89 2d 44 73 02 c0    	mov    DWORD PTR ds:0xc0027344,ebp
c000ba65:	4b                   	dec    ebx
c000ba66:	74 5f                	je     c000bac7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000ba68:	85 f6                	test   esi,esi
c000ba6a:	74 3d                	je     c000baa9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba6c:	89 e8                	mov    eax,ebp
c000ba6e:	31 db                	xor    ebx,ebx
c000ba70:	8d 7e ff             	lea    edi,[esi-0x1]
c000ba73:	eb 14                	jmp    c000ba89 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000ba75:	6a 01                	push   0x1
c000ba77:	43                   	inc    ebx
c000ba78:	50                   	push   eax
c000ba79:	e8 fe fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000ba7e:	58                   	pop    eax
c000ba7f:	39 f3                	cmp    ebx,esi
c000ba81:	5a                   	pop    edx
c000ba82:	74 25                	je     c000baa9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000ba84:	a1 44 73 02 c0       	mov    eax,ds:0xc0027344
c000ba89:	8d 50 01             	lea    edx,[eax+0x1]
c000ba8c:	85 db                	test   ebx,ebx
c000ba8e:	89 15 44 73 02 c0    	mov    DWORD PTR ds:0xc0027344,edx
c000ba94:	74 20                	je     c000bab6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000ba96:	39 df                	cmp    edi,ebx
c000ba98:	75 db                	jne    c000ba75 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000ba9a:	6a 03                	push   0x3
c000ba9c:	43                   	inc    ebx
c000ba9d:	50                   	push   eax
c000ba9e:	e8 d9 fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000baa3:	59                   	pop    ecx
c000baa4:	39 f3                	cmp    ebx,esi
c000baa6:	58                   	pop    eax
c000baa7:	75 db                	jne    c000ba84 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000baa9:	83 c4 1c             	add    esp,0x1c
c000baac:	89 e8                	mov    eax,ebp
c000baae:	5b                   	pop    ebx
c000baaf:	c1 e0 0c             	shl    eax,0xc
c000bab2:	5e                   	pop    esi
c000bab3:	5f                   	pop    edi
c000bab4:	5d                   	pop    ebp
c000bab5:	c3                   	ret    
c000bab6:	6a 02                	push   0x2
c000bab8:	bb 01 00 00 00       	mov    ebx,0x1
c000babd:	50                   	push   eax
c000babe:	e8 b9 fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bac3:	58                   	pop    eax
c000bac4:	5a                   	pop    edx
c000bac5:	eb bd                	jmp    c000ba84 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000bac7:	6a 04                	push   0x4
c000bac9:	8d 45 01             	lea    eax,[ebp+0x1]
c000bacc:	55                   	push   ebp
c000bacd:	a3 44 73 02 c0       	mov    ds:0xc0027344,eax
c000bad2:	e8 a5 fe ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bad7:	59                   	pop    ecx
c000bad8:	89 e8                	mov    eax,ebp
c000bada:	5b                   	pop    ebx
c000badb:	c1 e0 0c             	shl    eax,0xc
c000bade:	83 c4 1c             	add    esp,0x1c
c000bae1:	5b                   	pop    ebx
c000bae2:	5e                   	pop    esi
c000bae3:	5f                   	pop    edi
c000bae4:	5d                   	pop    ebp
c000bae5:	c3                   	ret    

c000bae6 <Virt::freeSwapfilePage(unsigned long)>:
c000bae6:	53                   	push   ebx
c000bae7:	8b 15 2c 80 02 c0    	mov    edx,DWORD PTR ds:0xc002802c
c000baed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000baf1:	b8 01 00 00 00       	mov    eax,0x1
c000baf6:	89 cb                	mov    ebx,ecx
c000baf8:	d3 e0                	shl    eax,cl
c000bafa:	c1 eb 05             	shr    ebx,0x5
c000bafd:	f7 d0                	not    eax
c000baff:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000bb02:	5b                   	pop    ebx
c000bb03:	c3                   	ret    

c000bb04 <Virt::swapIDToSector(unsigned long)>:
c000bb04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb08:	0f af 05 4c 73 02 c0 	imul   eax,DWORD PTR ds:0xc002734c
c000bb0f:	03 05 54 73 02 c0    	add    eax,DWORD PTR ds:0xc0027354
c000bb15:	c3                   	ret    

c000bb16 <Virt::allocateSwapfilePage()>:
c000bb16:	55                   	push   ebp
c000bb17:	31 d2                	xor    edx,edx
c000bb19:	57                   	push   edi
c000bb1a:	56                   	push   esi
c000bb1b:	53                   	push   ebx
c000bb1c:	83 ec 0c             	sub    esp,0xc
c000bb1f:	8b 0d 4c 73 02 c0    	mov    ecx,DWORD PTR ds:0xc002734c
c000bb25:	a1 50 73 02 c0       	mov    eax,ds:0xc0027350
c000bb2a:	f7 f1                	div    ecx
c000bb2c:	39 0d 50 73 02 c0    	cmp    DWORD PTR ds:0xc0027350,ecx
c000bb32:	72 2d                	jb     c000bb61 <Virt::allocateSwapfilePage()+0x4b>
c000bb34:	8b 35 2c 80 02 c0    	mov    esi,DWORD PTR ds:0xc002802c
c000bb3a:	8b 16                	mov    edx,DWORD PTR [esi]
c000bb3c:	f6 c2 01             	test   dl,0x1
c000bb3f:	74 3c                	je     c000bb7d <Virt::allocateSwapfilePage()+0x67>
c000bb41:	31 c9                	xor    ecx,ecx
c000bb43:	bf 01 00 00 00       	mov    edi,0x1
c000bb48:	eb 12                	jmp    c000bb5c <Virt::allocateSwapfilePage()+0x46>
c000bb4a:	89 fd                	mov    ebp,edi
c000bb4c:	89 ca                	mov    edx,ecx
c000bb4e:	d3 e5                	shl    ebp,cl
c000bb50:	c1 ea 05             	shr    edx,0x5
c000bb53:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000bb56:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb58:	85 ea                	test   edx,ebp
c000bb5a:	74 2a                	je     c000bb86 <Virt::allocateSwapfilePage()+0x70>
c000bb5c:	41                   	inc    ecx
c000bb5d:	39 c8                	cmp    eax,ecx
c000bb5f:	77 e9                	ja     c000bb4a <Virt::allocateSwapfilePage()+0x34>
c000bb61:	83 ec 0c             	sub    esp,0xc
c000bb64:	68 60 45 02 c0       	push   0xc0024560
c000bb69:	e8 35 8e 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000bb6e:	83 c4 10             	add    esp,0x10
c000bb71:	31 c9                	xor    ecx,ecx
c000bb73:	83 c4 0c             	add    esp,0xc
c000bb76:	89 c8                	mov    eax,ecx
c000bb78:	5b                   	pop    ebx
c000bb79:	5e                   	pop    esi
c000bb7a:	5f                   	pop    edi
c000bb7b:	5d                   	pop    ebp
c000bb7c:	c3                   	ret    
c000bb7d:	89 f3                	mov    ebx,esi
c000bb7f:	bd 01 00 00 00       	mov    ebp,0x1
c000bb84:	31 c9                	xor    ecx,ecx
c000bb86:	09 ea                	or     edx,ebp
c000bb88:	89 c8                	mov    eax,ecx
c000bb8a:	89 13                	mov    DWORD PTR [ebx],edx
c000bb8c:	83 c4 0c             	add    esp,0xc
c000bb8f:	5b                   	pop    ebx
c000bb90:	5e                   	pop    esi
c000bb91:	5f                   	pop    edi
c000bb92:	5d                   	pop    ebp
c000bb93:	c3                   	ret    

c000bb94 <Virt::virtualMemorySetup()>:
c000bb94:	53                   	push   ebx
c000bb95:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bb9a:	6a 0f                	push   0xf
c000bb9c:	53                   	push   ebx
c000bb9d:	43                   	inc    ebx
c000bb9e:	e8 d9 fd ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bba3:	58                   	pop    eax
c000bba4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbaa:	5a                   	pop    edx
c000bbab:	75 ed                	jne    c000bb9a <Virt::virtualMemorySetup()+0x6>
c000bbad:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000bbb2:	6a 00                	push   0x0
c000bbb4:	53                   	push   ebx
c000bbb5:	43                   	inc    ebx
c000bbb6:	e8 c1 fd ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbbb:	59                   	pop    ecx
c000bbbc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000bbc2:	58                   	pop    eax
c000bbc3:	75 ed                	jne    c000bbb2 <Virt::virtualMemorySetup()+0x1e>
c000bbc5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000bbca:	6a 0f                	push   0xf
c000bbcc:	53                   	push   ebx
c000bbcd:	43                   	inc    ebx
c000bbce:	e8 a9 fd ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bbd3:	58                   	pop    eax
c000bbd4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000bbda:	5a                   	pop    edx
c000bbdb:	75 ed                	jne    c000bbca <Virt::virtualMemorySetup()+0x36>
c000bbdd:	5b                   	pop    ebx
c000bbde:	c3                   	ret    

c000bbdf <Virt::setupPageSwapping(int)>:
c000bbdf:	53                   	push   ebx
c000bbe0:	83 ec 0c             	sub    esp,0xc
c000bbe3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bbe7:	a1 c8 84 02 c0       	mov    eax,ds:0xc00284c8
c000bbec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000bbf2:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbf4:	53                   	push   ebx
c000bbf5:	c1 e3 0b             	shl    ebx,0xb
c000bbf8:	68 77 45 02 c0       	push   0xc0024577
c000bbfd:	50                   	push   eax
c000bbfe:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000bc01:	89 1d 50 73 02 c0    	mov    DWORD PTR ds:0xc0027350,ebx
c000bc07:	c6 05 58 73 02 c0 43 	mov    BYTE PTR ds:0xc0027358,0x43
c000bc0e:	c1 eb 08             	shr    ebx,0x8
c000bc11:	a3 54 73 02 c0       	mov    ds:0xc0027354,eax
c000bc16:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc19:	c7 05 4c 73 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002734c,0x8
c000bc23:	e8 e7 dd ff ff       	call   c0009a0f <malloc>
c000bc28:	83 c4 0c             	add    esp,0xc
c000bc2b:	89 c1                	mov    ecx,eax
c000bc2d:	a3 2c 80 02 c0       	mov    ds:0xc002802c,eax
c000bc32:	31 d2                	xor    edx,edx
c000bc34:	a1 50 73 02 c0       	mov    eax,ds:0xc0027350
c000bc39:	f7 35 4c 73 02 c0    	div    DWORD PTR ds:0xc002734c
c000bc3f:	c1 e8 05             	shr    eax,0x5
c000bc42:	50                   	push   eax
c000bc43:	6a 00                	push   0x0
c000bc45:	51                   	push   ecx
c000bc46:	e8 39 4a ff ff       	call   c0000684 <memset>
c000bc4b:	83 c4 18             	add    esp,0x18
c000bc4e:	5b                   	pop    ebx
c000bc4f:	c3                   	ret    

c000bc50 <VAS::VAS()>:
c000bc50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bc66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc6a:	a3 30 80 02 c0       	mov    ds:0xc0028030,eax
c000bc6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc73:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000bc77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc7b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000bc7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bc82:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000bc89:	90                   	nop
c000bc8a:	c3                   	ret    
c000bc8b:	90                   	nop

c000bc8c <VAS::VAS(VAS*)>:
c000bc8c:	83 ec 0c             	sub    esp,0xc
c000bc8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bc9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000bca5:	83 ec 0c             	sub    esp,0xc
c000bca8:	68 c8 43 02 c0       	push   0xc00243c8
c000bcad:	e8 f1 8c 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000bcb2:	83 c4 10             	add    esp,0x10
c000bcb5:	90                   	nop
c000bcb6:	83 c4 0c             	add    esp,0xc
c000bcb9:	c3                   	ret    

c000bcba <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000bcba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bcbe:	89 c2                	mov    edx,eax
c000bcc0:	c1 e8 0a             	shr    eax,0xa
c000bcc3:	c1 ea 16             	shr    edx,0x16
c000bcc6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bccb:	19 c9                	sbb    ecx,ecx
c000bccd:	c1 e2 0c             	shl    edx,0xc
c000bcd0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000bcd6:	25 fc 0f 00 00       	and    eax,0xffc
c000bcdb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000bce2:	01 d0                	add    eax,edx
c000bce4:	c3                   	ret    
c000bce5:	90                   	nop

c000bce6 <VAS::getPageTableEntry(unsigned long)>:
c000bce6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bcea:	89 ca                	mov    edx,ecx
c000bcec:	c1 e9 0a             	shr    ecx,0xa
c000bcef:	c1 ea 16             	shr    edx,0x16
c000bcf2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000bcf8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000bcfe:	c1 e0 0c             	shl    eax,0xc
c000bd01:	8d 04 08             	lea    eax,[eax+ecx*1]
c000bd04:	c3                   	ret    

c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>:
c000bd05:	57                   	push   edi
c000bd06:	56                   	push   esi
c000bd07:	be 01 00 00 00       	mov    esi,0x1
c000bd0c:	53                   	push   ebx
c000bd0d:	83 ec 10             	sub    esp,0x10
c000bd10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bd14:	c1 eb 0c             	shr    ebx,0xc
c000bd17:	eb 3f                	jmp    c000bd58 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000bd19:	83 ec 08             	sub    esp,0x8
c000bd1c:	57                   	push   edi
c000bd1d:	ff 35 30 80 02 c0    	push   DWORD PTR ds:0xc0028030
c000bd23:	e8 be ff ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000bd28:	83 c4 10             	add    esp,0x10
c000bd2b:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd2d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd31:	f6 c4 04             	test   ah,0x4
c000bd34:	75 5f                	jne    c000bd95 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000bd36:	80 fa 04             	cmp    dl,0x4
c000bd39:	74 78                	je     c000bdb3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000bd3b:	80 fa 02             	cmp    dl,0x2
c000bd3e:	0f 84 88 00 00 00    	je     c000bdcc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000bd44:	80 fa 03             	cmp    dl,0x3
c000bd47:	0f 84 ad 00 00 00    	je     c000bdfa <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000bd4d:	fe ca                	dec    dl
c000bd4f:	0f 84 92 00 00 00    	je     c000bde7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bd55:	43                   	inc    ebx
c000bd56:	31 f6                	xor    esi,esi
c000bd58:	53                   	push   ebx
c000bd59:	89 df                	mov    edi,ebx
c000bd5b:	e8 51 fc ff ff       	call   c000b9b1 <Virt::getPageState(unsigned long)>
c000bd60:	c1 e7 0c             	shl    edi,0xc
c000bd63:	59                   	pop    ecx
c000bd64:	84 c0                	test   al,al
c000bd66:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000bd6a:	75 ad                	jne    c000bd19 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000bd6c:	83 ec 0c             	sub    esp,0xc
c000bd6f:	68 8e 45 02 c0       	push   0xc002458e
c000bd74:	e8 2a 8c 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000bd79:	58                   	pop    eax
c000bd7a:	5a                   	pop    edx
c000bd7b:	57                   	push   edi
c000bd7c:	ff 35 30 80 02 c0    	push   DWORD PTR ds:0xc0028030
c000bd82:	e8 5f ff ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000bd87:	83 c4 10             	add    esp,0x10
c000bd8a:	8b 00                	mov    eax,DWORD PTR [eax]
c000bd8c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bd90:	f6 c4 04             	test   ah,0x4
c000bd93:	74 c0                	je     c000bd55 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bd95:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bd99:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd9e:	83 ec 0c             	sub    esp,0xc
c000bda1:	50                   	push   eax
c000bda2:	e8 9c e2 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bda7:	83 c4 10             	add    esp,0x10
c000bdaa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bdae:	80 fa 04             	cmp    dl,0x4
c000bdb1:	75 88                	jne    c000bd3b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bdb3:	89 f0                	mov    eax,esi
c000bdb5:	84 c0                	test   al,al
c000bdb7:	75 47                	jne    c000be00 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bdb9:	c7 44 24 20 ec 43 02 c0 	mov    DWORD PTR [esp+0x20],0xc00243ec
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	5b                   	pop    ebx
c000bdc5:	5e                   	pop    esi
c000bdc6:	5f                   	pop    edi
c000bdc7:	e9 d7 8b 00 00       	jmp    c00149a3 <Krnl::panic(char const*)>
c000bdcc:	89 f0                	mov    eax,esi
c000bdce:	84 c0                	test   al,al
c000bdd0:	75 15                	jne    c000bde7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000bdd2:	83 ec 0c             	sub    esp,0xc
c000bdd5:	68 aa 45 02 c0       	push   0xc00245aa
c000bdda:	e8 c4 8b 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000bddf:	83 c4 10             	add    esp,0x10
c000bde2:	e9 6e ff ff ff       	jmp    c000bd55 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bde7:	83 ec 08             	sub    esp,0x8
c000bdea:	6a 00                	push   0x0
c000bdec:	53                   	push   ebx
c000bded:	e8 8a fb ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bdf2:	83 c4 10             	add    esp,0x10
c000bdf5:	e9 5b ff ff ff       	jmp    c000bd55 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bdfa:	89 f0                	mov    eax,esi
c000bdfc:	84 c0                	test   al,al
c000bdfe:	75 15                	jne    c000be15 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000be00:	83 ec 08             	sub    esp,0x8
c000be03:	6a 00                	push   0x0
c000be05:	53                   	push   ebx
c000be06:	e8 71 fb ff ff       	call   c000b97c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000be0b:	83 c4 10             	add    esp,0x10
c000be0e:	83 c4 10             	add    esp,0x10
c000be11:	5b                   	pop    ebx
c000be12:	5e                   	pop    esi
c000be13:	5f                   	pop    edi
c000be14:	c3                   	ret    
c000be15:	c7 44 24 20 c6 45 02 c0 	mov    DWORD PTR [esp+0x20],0xc00245c6
c000be1d:	83 c4 10             	add    esp,0x10
c000be20:	5b                   	pop    ebx
c000be21:	5e                   	pop    esi
c000be22:	5f                   	pop    edi
c000be23:	e9 7b 8b 00 00       	jmp    c00149a3 <Krnl::panic(char const*)>

c000be28 <VAS::freeAllocatedPages(unsigned long)>:
c000be28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be30:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000be34:	74 09                	je     c000be3f <VAS::freeAllocatedPages(unsigned long)+0x17>
c000be36:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000be3a:	e9 c6 fe ff ff       	jmp    c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000be3f:	c7 44 24 04 10 44 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024410
c000be47:	e9 af 0e 00 00       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>

c000be4c <VAS::virtualToPhysical(unsigned long)>:
c000be4c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be50:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000be54:	e8 8d fe ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000be59:	5a                   	pop    edx
c000be5a:	8b 00                	mov    eax,DWORD PTR [eax]
c000be5c:	59                   	pop    ecx
c000be5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be62:	c3                   	ret    
c000be63:	90                   	nop

c000be64 <VAS::reflagRange(unsigned long, int, int, int)>:
c000be64:	55                   	push   ebp
c000be65:	57                   	push   edi
c000be66:	56                   	push   esi
c000be67:	53                   	push   ebx
c000be68:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be6c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000be70:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000be74:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000be78:	85 db                	test   ebx,ebx
c000be7a:	7e 22                	jle    c000be9e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000be7c:	c1 e3 0c             	shl    ebx,0xc
c000be7f:	01 f3                	add    ebx,esi
c000be81:	56                   	push   esi
c000be82:	81 c6 00 10 00 00    	add    esi,0x1000
c000be88:	55                   	push   ebp
c000be89:	e8 58 fe ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000be8e:	5a                   	pop    edx
c000be8f:	59                   	pop    ecx
c000be90:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be92:	21 f9                	and    ecx,edi
c000be94:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000be98:	39 f3                	cmp    ebx,esi
c000be9a:	89 08                	mov    DWORD PTR [eax],ecx
c000be9c:	75 e3                	jne    c000be81 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000be9e:	5b                   	pop    ebx
c000be9f:	5e                   	pop    esi
c000bea0:	5f                   	pop    edi
c000bea1:	5d                   	pop    ebp
c000bea2:	c3                   	ret    
c000bea3:	90                   	nop

c000bea4 <VAS::setToWriteCombining(unsigned long, int)>:
c000bea4:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000bea9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000beaf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000beb6:	75 01                	jne    c000beb9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000beb8:	c3                   	ret    
c000beb9:	68 80 00 00 00       	push   0x80
c000bebe:	6a ff                	push   0xffffffff
c000bec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000becc:	e8 93 ff ff ff       	call   c000be64 <VAS::reflagRange(unsigned long, int, int, int)>
c000bed1:	83 c4 14             	add    esp,0x14
c000bed4:	c3                   	ret    
c000bed5:	90                   	nop

c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>:
c000bed6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bedb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bedf:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bee6:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bee9:	19 c0                	sbb    eax,eax
c000beeb:	83 ca 03             	or     edx,0x3
c000beee:	83 e0 fc             	and    eax,0xfffffffc
c000bef1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bef8:	0f 20 d8             	mov    eax,cr3
c000befb:	0f 22 d8             	mov    cr3,eax
c000befe:	c3                   	ret    
c000beff:	90                   	nop

c000bf00 <VAS::~VAS()>:
c000bf00:	83 ec 2c             	sub    esp,0x2c
c000bf03:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf0b:	fa                   	cli    
c000bf0c:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000bf11:	40                   	inc    eax
c000bf12:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000bf17:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf1c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf1e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bf21:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bf27:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bf2b:	6a 01                	push   0x1
c000bf2d:	50                   	push   eax
c000bf2e:	e8 a3 ff ff ff       	call   c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>
c000bf33:	83 c4 0c             	add    esp,0xc
c000bf36:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bf3e:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bf46:	0f 8f d4 00 00 00    	jg     c000c020 <VAS::~VAS()+0x120>
c000bf4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf50:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bf53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf57:	c1 e2 02             	shl    edx,0x2
c000bf5a:	01 d0                	add    eax,edx
c000bf5c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf66:	83 e0 01             	and    eax,0x1
c000bf69:	0f 84 a8 00 00 00    	je     c000c017 <VAS::~VAS()+0x117>
c000bf6f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bf77:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bf7f:	7f 72                	jg     c000bff3 <VAS::~VAS()+0xf3>
c000bf81:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf85:	c1 e0 0a             	shl    eax,0xa
c000bf88:	89 c2                	mov    edx,eax
c000bf8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf8e:	01 d0                	add    eax,edx
c000bf90:	c1 e0 0c             	shl    eax,0xc
c000bf93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bf97:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bf9c:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf9e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bfa1:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bfa7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bfab:	6a 01                	push   0x1
c000bfad:	50                   	push   eax
c000bfae:	e8 07 fd ff ff       	call   c000bcba <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bfb3:	83 c4 0c             	add    esp,0xc
c000bfb6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bfbe:	8b 00                	mov    eax,DWORD PTR [eax]
c000bfc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bfc4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfc8:	25 01 04 00 00       	and    eax,0x401
c000bfcd:	3d 01 04 00 00       	cmp    eax,0x401
c000bfd2:	75 19                	jne    c000bfed <VAS::~VAS()+0xed>
c000bfd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bfdd:	83 ec 0c             	sub    esp,0xc
c000bfe0:	50                   	push   eax
c000bfe1:	e8 5d e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000bfe6:	83 c4 10             	add    esp,0x10
c000bfe9:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bfed:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bff1:	eb 84                	jmp    c000bf77 <VAS::~VAS()+0x77>
c000bff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bff7:	25 00 04 00 00       	and    eax,0x400
c000bffc:	74 19                	je     c000c017 <VAS::~VAS()+0x117>
c000bffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c002:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c007:	83 ec 0c             	sub    esp,0xc
c000c00a:	50                   	push   eax
c000c00b:	e8 33 e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c010:	83 c4 10             	add    esp,0x10
c000c013:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c017:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c01b:	e9 1e ff ff ff       	jmp    c000bf3e <VAS::~VAS()+0x3e>
c000c020:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c024:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c027:	83 ec 0c             	sub    esp,0xc
c000c02a:	50                   	push   eax
c000c02b:	e8 d5 fc ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000c030:	83 c4 10             	add    esp,0x10
c000c033:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c037:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c03a:	83 ec 0c             	sub    esp,0xc
c000c03d:	50                   	push   eax
c000c03e:	e8 00 e0 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c043:	83 c4 10             	add    esp,0x10
c000c046:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c04a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c04e:	c1 e0 02             	shl    eax,0x2
c000c051:	83 ec 08             	sub    esp,0x8
c000c054:	50                   	push   eax
c000c055:	68 34 44 02 c0       	push   0xc0024434
c000c05a:	e8 9c 0c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c05f:	83 c4 10             	add    esp,0x10
c000c062:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c067:	48                   	dec    eax
c000c068:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000c06d:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c072:	85 c0                	test   eax,eax
c000c074:	75 01                	jne    c000c077 <VAS::~VAS()+0x177>
c000c076:	fb                   	sti    
c000c077:	90                   	nop
c000c078:	83 c4 2c             	add    esp,0x2c
c000c07b:	c3                   	ret    

c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>:
c000c07c:	55                   	push   ebp
c000c07d:	57                   	push   edi
c000c07e:	56                   	push   esi
c000c07f:	53                   	push   ebx
c000c080:	83 ec 1c             	sub    esp,0x1c
c000c083:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c087:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c08b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000c091:	77 08                	ja     c000c09b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000c093:	0f 20 d8             	mov    eax,cr3
c000c096:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000c099:	75 47                	jne    c000c0e2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000c09b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c09f:	09 d8                	or     eax,ebx
c000c0a1:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0a6:	75 57                	jne    c000c0ff <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000c0a8:	89 de                	mov    esi,ebx
c000c0aa:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c0ad:	c1 ee 16             	shr    esi,0x16
c000c0b0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000c0b7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000c0bb:	74 54                	je     c000c111 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000c0bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000c0c7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000c0cb:	c1 e6 0c             	shl    esi,0xc
c000c0ce:	c1 eb 0a             	shr    ebx,0xa
c000c0d1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000c0d7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000c0da:	83 c4 1c             	add    esp,0x1c
c000c0dd:	5b                   	pop    ebx
c000c0de:	5e                   	pop    esi
c000c0df:	5f                   	pop    edi
c000c0e0:	5d                   	pop    ebp
c000c0e1:	c3                   	ret    
c000c0e2:	83 ec 0c             	sub    esp,0xc
c000c0e5:	68 54 44 02 c0       	push   0xc0024454
c000c0ea:	e8 0c 0c 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c0ef:	83 c4 10             	add    esp,0x10
c000c0f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c0f6:	09 d8                	or     eax,ebx
c000c0f8:	a9 ff 0f 00 00       	test   eax,0xfff
c000c0fd:	74 a9                	je     c000c0a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c0ff:	83 ec 0c             	sub    esp,0xc
c000c102:	68 bc 44 02 c0       	push   0xc00244bc
c000c107:	e8 97 88 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000c10c:	83 c4 10             	add    esp,0x10
c000c10f:	eb 97                	jmp    c000c0a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000c111:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c115:	e8 ac df ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c11a:	83 ec 0c             	sub    esp,0xc
c000c11d:	89 c5                	mov    ebp,eax
c000c11f:	8b 0d 30 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028030
c000c125:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c129:	6a 01                	push   0x1
c000c12b:	e8 a5 f8 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c130:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c137:	6a 01                	push   0x1
c000c139:	50                   	push   eax
c000c13a:	55                   	push   ebp
c000c13b:	81 cd 07 04 00 00    	or     ebp,0x407
c000c141:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c145:	51                   	push   ecx
c000c146:	e8 27 02 00 00       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c14b:	83 c4 1c             	add    esp,0x1c
c000c14e:	68 00 10 00 00       	push   0x1000
c000c153:	6a 00                	push   0x0
c000c155:	50                   	push   eax
c000c156:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c15a:	e8 25 45 ff ff       	call   c0000684 <memset>
c000c15f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c163:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c166:	e8 9a fb ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000c16b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c16f:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c172:	83 c4 10             	add    esp,0x10
c000c175:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000c178:	e9 40 ff ff ff       	jmp    c000c0bd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000c17d:	90                   	nop

c000c17e <VAS::allocatePages(int, int)>:
c000c17e:	55                   	push   ebp
c000c17f:	57                   	push   edi
c000c180:	56                   	push   esi
c000c181:	53                   	push   ebx
c000c182:	83 ec 1c             	sub    esp,0x1c
c000c185:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c189:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c18e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c194:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c19a:	83 e0 01             	and    eax,0x1
c000c19d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000c1a1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c1a5:	0f 85 cc 00 00 00    	jne    c000c277 <VAS::allocatePages(int, int)+0xf9>
c000c1ab:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c1ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c1b2:	85 c0                	test   eax,eax
c000c1b4:	0f 84 a1 00 00 00    	je     c000c25b <VAS::allocatePages(int, int)+0xdd>
c000c1ba:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000c1be:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c1c2:	c1 e6 0c             	shl    esi,0xc
c000c1c5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000c1c9:	85 c0                	test   eax,eax
c000c1cb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000c1ce:	7e 33                	jle    c000c203 <VAS::allocatePages(int, int)+0x85>
c000c1d0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c1d4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1d8:	81 cd 00 04 00 00    	or     ebp,0x400
c000c1de:	e8 e3 de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c1e3:	55                   	push   ebp
c000c1e4:	53                   	push   ebx
c000c1e5:	50                   	push   eax
c000c1e6:	57                   	push   edi
c000c1e7:	e8 90 fe ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c1ec:	83 c4 10             	add    esp,0x10
c000c1ef:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c1f4:	74 03                	je     c000c1f9 <VAS::allocatePages(int, int)+0x7b>
c000c1f6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c1f9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c1ff:	39 de                	cmp    esi,ebx
c000c201:	75 db                	jne    c000c1de <VAS::allocatePages(int, int)+0x60>
c000c203:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c208:	75 12                	jne    c000c21c <VAS::allocatePages(int, int)+0x9e>
c000c20a:	0f 20 d8             	mov    eax,cr3
c000c20d:	0f 22 d8             	mov    cr3,eax
c000c210:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c214:	83 c4 1c             	add    esp,0x1c
c000c217:	5b                   	pop    ebx
c000c218:	5e                   	pop    esi
c000c219:	5f                   	pop    edi
c000c21a:	5d                   	pop    ebp
c000c21b:	c3                   	ret    
c000c21c:	c1 ee 0a             	shr    esi,0xa
c000c21f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c223:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000c229:	c1 eb 0a             	shr    ebx,0xa
c000c22c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000c232:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c238:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c23e:	39 c3                	cmp    ebx,eax
c000c240:	77 ce                	ja     c000c210 <VAS::allocatePages(int, int)+0x92>
c000c242:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c245:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c24b:	39 d8                	cmp    eax,ebx
c000c24d:	73 f3                	jae    c000c242 <VAS::allocatePages(int, int)+0xc4>
c000c24f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c253:	83 c4 1c             	add    esp,0x1c
c000c256:	5b                   	pop    ebx
c000c257:	5e                   	pop    esi
c000c258:	5f                   	pop    edi
c000c259:	5d                   	pop    ebp
c000c25a:	c3                   	ret    
c000c25b:	83 ec 0c             	sub    esp,0xc
c000c25e:	68 e0 44 02 c0       	push   0xc00244e0
c000c263:	e8 3b 87 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000c268:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000c26b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c26f:	83 c4 10             	add    esp,0x10
c000c272:	e9 43 ff ff ff       	jmp    c000c1ba <VAS::allocatePages(int, int)+0x3c>
c000c277:	83 ec 0c             	sub    esp,0xc
c000c27a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000c27e:	e8 52 f7 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c283:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c287:	83 c4 10             	add    esp,0x10
c000c28a:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000c28f:	0f 87 9b 00 00 00    	ja     c000c330 <VAS::allocatePages(int, int)+0x1b2>
c000c295:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c299:	85 d2                	test   edx,edx
c000c29b:	7e 3c                	jle    c000c2d9 <VAS::allocatePages(int, int)+0x15b>
c000c29d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c2a1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c2a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c2a9:	c1 e5 0c             	shl    ebp,0xc
c000c2ac:	81 ce 00 04 00 00    	or     esi,0x400
c000c2b2:	01 dd                	add    ebp,ebx
c000c2b4:	e8 0d de ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c2b9:	56                   	push   esi
c000c2ba:	53                   	push   ebx
c000c2bb:	50                   	push   eax
c000c2bc:	57                   	push   edi
c000c2bd:	e8 ba fd ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c2c2:	83 c4 10             	add    esp,0x10
c000c2c5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2ca:	74 03                	je     c000c2cf <VAS::allocatePages(int, int)+0x151>
c000c2cc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c2cf:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c2d5:	39 dd                	cmp    ebp,ebx
c000c2d7:	75 db                	jne    c000c2b4 <VAS::allocatePages(int, int)+0x136>
c000c2d9:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c2de:	0f 84 26 ff ff ff    	je     c000c20a <VAS::allocatePages(int, int)+0x8c>
c000c2e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c2e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c2ec:	89 d3                	mov    ebx,edx
c000c2ee:	c1 e0 0c             	shl    eax,0xc
c000c2f1:	c1 eb 0a             	shr    ebx,0xa
c000c2f4:	01 d0                	add    eax,edx
c000c2f6:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c2fc:	c1 e8 0a             	shr    eax,0xa
c000c2ff:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c305:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c30a:	2d 00 00 40 00       	sub    eax,0x400000
c000c30f:	39 c3                	cmp    ebx,eax
c000c311:	0f 87 f9 fe ff ff    	ja     c000c210 <VAS::allocatePages(int, int)+0x92>
c000c317:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c31a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c320:	39 d8                	cmp    eax,ebx
c000c322:	73 f3                	jae    c000c317 <VAS::allocatePages(int, int)+0x199>
c000c324:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c328:	83 c4 1c             	add    esp,0x1c
c000c32b:	5b                   	pop    ebx
c000c32c:	5e                   	pop    esi
c000c32d:	5f                   	pop    edi
c000c32e:	5d                   	pop    ebp
c000c32f:	c3                   	ret    
c000c330:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c335:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c33b:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c342:	0f 84 4d ff ff ff    	je     c000c295 <VAS::allocatePages(int, int)+0x117>
c000c348:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c350:	e9 40 ff ff ff       	jmp    c000c295 <VAS::allocatePages(int, int)+0x117>
c000c355:	90                   	nop

c000c356 <VAS::setCPUSpecific(unsigned long)>:
c000c356:	83 ec 0c             	sub    esp,0xc
c000c359:	6a 05                	push   0x5
c000c35b:	68 00 00 40 c2       	push   0xc2400000
c000c360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	e8 0f fd ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c36d:	83 c4 1c             	add    esp,0x1c
c000c370:	c3                   	ret    
c000c371:	90                   	nop

c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c372:	55                   	push   ebp
c000c373:	57                   	push   edi
c000c374:	56                   	push   esi
c000c375:	53                   	push   ebx
c000c376:	83 ec 1c             	sub    esp,0x1c
c000c379:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c37e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c382:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c388:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c38c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c392:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c396:	83 e0 01             	and    eax,0x1
c000c399:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c39d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a1:	85 c0                	test   eax,eax
c000c3a3:	7e 39                	jle    c000c3de <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c3a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3a9:	89 f3                	mov    ebx,esi
c000c3ab:	c1 e0 0c             	shl    eax,0xc
c000c3ae:	01 f0                	add    eax,esi
c000c3b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c3b4:	55                   	push   ebp
c000c3b5:	53                   	push   ebx
c000c3b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3ba:	29 f0                	sub    eax,esi
c000c3bc:	01 d8                	add    eax,ebx
c000c3be:	50                   	push   eax
c000c3bf:	57                   	push   edi
c000c3c0:	e8 b7 fc ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c3c5:	83 c4 10             	add    esp,0x10
c000c3c8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3cd:	74 03                	je     c000c3d2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c3cf:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c3d2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c3d8:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c3dc:	75 d6                	jne    c000c3b4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c3de:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c3e3:	75 10                	jne    c000c3f5 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c3e5:	0f 20 d8             	mov    eax,cr3
c000c3e8:	0f 22 d8             	mov    cr3,eax
c000c3eb:	83 c4 1c             	add    esp,0x1c
c000c3ee:	89 f0                	mov    eax,esi
c000c3f0:	5b                   	pop    ebx
c000c3f1:	5e                   	pop    esi
c000c3f2:	5f                   	pop    edi
c000c3f3:	5d                   	pop    ebp
c000c3f4:	c3                   	ret    
c000c3f5:	89 f3                	mov    ebx,esi
c000c3f7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c3fb:	c1 eb 0a             	shr    ebx,0xa
c000c3fe:	c1 e0 0c             	shl    eax,0xc
c000c401:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c407:	01 f0                	add    eax,esi
c000c409:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c40f:	c1 e8 0a             	shr    eax,0xa
c000c412:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c417:	2d 00 00 40 00       	sub    eax,0x400000
c000c41c:	39 c3                	cmp    ebx,eax
c000c41e:	77 cb                	ja     c000c3eb <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c420:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c423:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c429:	39 d8                	cmp    eax,ebx
c000c42b:	73 f3                	jae    c000c420 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c42d:	83 c4 1c             	add    esp,0x1c
c000c430:	89 f0                	mov    eax,esi
c000c432:	5b                   	pop    ebx
c000c433:	5e                   	pop    esi
c000c434:	5f                   	pop    edi
c000c435:	5d                   	pop    ebp
c000c436:	c3                   	ret    
c000c437:	90                   	nop

c000c438 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c438:	55                   	push   ebp
c000c439:	57                   	push   edi
c000c43a:	56                   	push   esi
c000c43b:	53                   	push   ebx
c000c43c:	83 ec 1c             	sub    esp,0x1c
c000c43f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c443:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c447:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c44b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c44f:	a9 ff 0f 00 00       	test   eax,0xfff
c000c454:	75 4a                	jne    c000c4a0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c456:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c45a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c45d:	c1 eb 16             	shr    ebx,0x16
c000c460:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c467:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c46b:	74 4d                	je     c000c4ba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c46d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c471:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c475:	c1 e8 0a             	shr    eax,0xa
c000c478:	80 fa 01             	cmp    dl,0x1
c000c47b:	19 d2                	sbb    edx,edx
c000c47d:	c1 e3 0c             	shl    ebx,0xc
c000c480:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c484:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c48a:	25 fc 0f 00 00       	and    eax,0xffc
c000c48f:	01 d8                	add    eax,ebx
c000c491:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c498:	83 c4 1c             	add    esp,0x1c
c000c49b:	5b                   	pop    ebx
c000c49c:	5e                   	pop    esi
c000c49d:	5f                   	pop    edi
c000c49e:	5d                   	pop    ebp
c000c49f:	c3                   	ret    
c000c4a0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c4a4:	83 ec 0c             	sub    esp,0xc
c000c4a7:	68 0c 45 02 c0       	push   0xc002450c
c000c4ac:	e8 f2 84 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000c4b1:	83 c4 10             	add    esp,0x10
c000c4b4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c4b8:	eb 9c                	jmp    c000c456 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c4ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c4be:	e8 03 dc ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c4c3:	83 ec 0c             	sub    esp,0xc
c000c4c6:	89 c5                	mov    ebp,eax
c000c4c8:	8b 0d 30 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028030
c000c4ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c4d2:	6a 01                	push   0x1
c000c4d4:	e8 fc f4 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c4d9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c4e0:	6a 01                	push   0x1
c000c4e2:	50                   	push   eax
c000c4e3:	55                   	push   ebp
c000c4e4:	81 cd 07 04 00 00    	or     ebp,0x407
c000c4ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c4ee:	51                   	push   ecx
c000c4ef:	e8 7e fe ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c4f4:	83 c4 1c             	add    esp,0x1c
c000c4f7:	68 00 10 00 00       	push   0x1000
c000c4fc:	6a 00                	push   0x0
c000c4fe:	50                   	push   eax
c000c4ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c503:	e8 7c 41 ff ff       	call   c0000684 <memset>
c000c508:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c50c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c50f:	e8 f1 f7 ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c000c514:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c517:	83 c4 10             	add    esp,0x10
c000c51a:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c51d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c521:	e9 47 ff ff ff       	jmp    c000c46d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c526 <VAS::VAS(bool)>:
c000c526:	53                   	push   ebx
c000c527:	83 ec 28             	sub    esp,0x28
c000c52a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c52e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c532:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c536:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c53d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c541:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c548:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c54c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c550:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c553:	e8 6e db ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c558:	89 c2                	mov    edx,eax
c000c55a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c55e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c561:	8b 1d 30 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028030
c000c567:	83 ec 0c             	sub    esp,0xc
c000c56a:	6a 01                	push   0x1
c000c56c:	e8 64 f4 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c000c571:	83 c4 10             	add    esp,0x10
c000c574:	89 c2                	mov    edx,eax
c000c576:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c57a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c57d:	83 ec 0c             	sub    esp,0xc
c000c580:	6a 03                	push   0x3
c000c582:	6a 01                	push   0x1
c000c584:	52                   	push   edx
c000c585:	50                   	push   eax
c000c586:	53                   	push   ebx
c000c587:	e8 e6 fd ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c58c:	83 c4 20             	add    esp,0x20
c000c58f:	89 c2                	mov    edx,eax
c000c591:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c595:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c598:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c5a0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c5a8:	7f 1c                	jg     c000c5c6 <VAS::VAS(bool)+0xa0>
c000c5aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c5ae:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c5b1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c5b5:	c1 e2 02             	shl    edx,0x2
c000c5b8:	01 d0                	add    eax,edx
c000c5ba:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c5c0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c5c4:	eb da                	jmp    c000c5a0 <VAS::VAS(bool)+0x7a>
c000c5c6:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c5ce:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c5d6:	7f 7a                	jg     c000c652 <VAS::VAS(bool)+0x12c>
c000c5d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c5dc:	2d 00 02 00 00       	sub    eax,0x200
c000c5e1:	c1 e0 0c             	shl    eax,0xc
c000c5e4:	83 c8 03             	or     eax,0x3
c000c5e7:	89 c2                	mov    edx,eax
c000c5e9:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c5ee:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c5f4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c5fa:	83 e0 10             	and    eax,0x10
c000c5fd:	84 c0                	test   al,al
c000c5ff:	74 07                	je     c000c608 <VAS::VAS(bool)+0xe2>
c000c601:	b8 00 01 00 00       	mov    eax,0x100
c000c606:	eb 05                	jmp    c000c60d <VAS::VAS(bool)+0xe7>
c000c608:	b8 00 00 00 00       	mov    eax,0x0
c000c60d:	09 d0                	or     eax,edx
c000c60f:	89 c1                	mov    ecx,eax
c000c611:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c615:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c618:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c61c:	c1 e2 02             	shl    edx,0x2
c000c61f:	01 d0                	add    eax,edx
c000c621:	89 ca                	mov    edx,ecx
c000c623:	89 10                	mov    DWORD PTR [eax],edx
c000c625:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c629:	2d 40 03 00 00       	sub    eax,0x340
c000c62e:	83 f8 7f             	cmp    eax,0x7f
c000c631:	77 16                	ja     c000c649 <VAS::VAS(bool)+0x123>
c000c633:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c637:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c63a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c63e:	c1 e2 02             	shl    edx,0x2
c000c641:	01 d0                	add    eax,edx
c000c643:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c649:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c64d:	e9 7c ff ff ff       	jmp    c000c5ce <VAS::VAS(bool)+0xa8>
c000c652:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c657:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c65d:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c663:	83 e0 10             	and    eax,0x10
c000c666:	84 c0                	test   al,al
c000c668:	74 07                	je     c000c671 <VAS::VAS(bool)+0x14b>
c000c66a:	b8 03 41 00 00       	mov    eax,0x4103
c000c66f:	eb 05                	jmp    c000c676 <VAS::VAS(bool)+0x150>
c000c671:	b8 03 40 00 00       	mov    eax,0x4003
c000c676:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c67a:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c67d:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c683:	89 02                	mov    DWORD PTR [edx],eax
c000c685:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c68a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c690:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c696:	83 ec 08             	sub    esp,0x8
c000c699:	50                   	push   eax
c000c69a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c69e:	e8 b3 fc ff ff       	call   c000c356 <VAS::setCPUSpecific(unsigned long)>
c000c6a3:	83 c4 10             	add    esp,0x10
c000c6a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6aa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c6ad:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c6b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6b8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c6be:	83 e0 10             	and    eax,0x10
c000c6c1:	84 c0                	test   al,al
c000c6c3:	74 07                	je     c000c6cc <VAS::VAS(bool)+0x1a6>
c000c6c5:	b8 00 01 00 00       	mov    eax,0x100
c000c6ca:	eb 05                	jmp    c000c6d1 <VAS::VAS(bool)+0x1ab>
c000c6cc:	b8 00 00 00 00       	mov    eax,0x0
c000c6d1:	09 c2                	or     edx,eax
c000c6d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c6d7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c6da:	05 fc 0f 00 00       	add    eax,0xffc
c000c6df:	83 ca 03             	or     edx,0x3
c000c6e2:	89 10                	mov    DWORD PTR [eax],edx
c000c6e4:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c6e9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c6ef:	83 ec 0c             	sub    esp,0xc
c000c6f2:	50                   	push   eax
c000c6f3:	e8 76 1e 00 00       	call   c000e56e <Device::getName()>
c000c6f8:	83 c4 10             	add    esp,0x10
c000c6fb:	83 ec 08             	sub    esp,0x8
c000c6fe:	68 e0 45 02 c0       	push   0xc00245e0
c000c703:	50                   	push   eax
c000c704:	e8 c3 40 ff ff       	call   c00007cc <strcmp>
c000c709:	83 c4 10             	add    esp,0x10
c000c70c:	85 c0                	test   eax,eax
c000c70e:	0f 94 c0             	sete   al
c000c711:	84 c0                	test   al,al
c000c713:	0f 84 87 00 00 00    	je     c000c7a0 <VAS::VAS(bool)+0x27a>
c000c719:	fa                   	cli    
c000c71a:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c71f:	40                   	inc    eax
c000c720:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000c725:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c72a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c730:	05 7c 09 00 00       	add    eax,0x97c
c000c735:	83 ec 0c             	sub    esp,0xc
c000c738:	50                   	push   eax
c000c739:	e8 c0 cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c73e:	83 c4 10             	add    esp,0x10
c000c741:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c746:	89 c3                	mov    ebx,eax
c000c748:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000c74d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c753:	05 7c 09 00 00       	add    eax,0x97c
c000c758:	83 ec 0c             	sub    esp,0xc
c000c75b:	50                   	push   eax
c000c75c:	e8 9d cd ff ff       	call   c00094fe <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c761:	83 c4 10             	add    esp,0x10
c000c764:	83 ec 08             	sub    esp,0x8
c000c767:	50                   	push   eax
c000c768:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c76c:	e8 75 f5 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c771:	83 c4 10             	add    esp,0x10
c000c774:	8b 00                	mov    eax,DWORD PTR [eax]
c000c776:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c77b:	6a 11                	push   0x11
c000c77d:	53                   	push   ebx
c000c77e:	50                   	push   eax
c000c77f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c783:	e8 f4 f8 ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c000c788:	83 c4 10             	add    esp,0x10
c000c78b:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c790:	48                   	dec    eax
c000c791:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000c796:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c79b:	85 c0                	test   eax,eax
c000c79d:	75 01                	jne    c000c7a0 <VAS::VAS(bool)+0x27a>
c000c79f:	fb                   	sti    
c000c7a0:	90                   	nop
c000c7a1:	83 c4 28             	add    esp,0x28
c000c7a4:	5b                   	pop    ebx
c000c7a5:	c3                   	ret    

c000c7a6 <VAS::evict(unsigned long)>:
c000c7a6:	55                   	push   ebp
c000c7a7:	57                   	push   edi
c000c7a8:	56                   	push   esi
c000c7a9:	53                   	push   ebx
c000c7aa:	83 ec 1c             	sub    esp,0x1c
c000c7ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c7b1:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000c7b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7b9:	e8 58 f3 ff ff       	call   c000bb16 <Virt::allocateSwapfilePage()>
c000c7be:	89 c7                	mov    edi,eax
c000c7c0:	a1 4c 73 02 c0       	mov    eax,ds:0xc002734c
c000c7c5:	85 c0                	test   eax,eax
c000c7c7:	7e 3d                	jle    c000c806 <VAS::evict(unsigned long)+0x60>
c000c7c9:	89 ee                	mov    esi,ebp
c000c7cb:	31 db                	xor    ebx,ebx
c000c7cd:	83 ec 0c             	sub    esp,0xc
c000c7d0:	57                   	push   edi
c000c7d1:	e8 2e f3 ff ff       	call   c000bb04 <Virt::swapIDToSector(unsigned long)>
c000c7d6:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7d9:	01 d8                	add    eax,ebx
c000c7db:	6a 01                	push   0x1
c000c7dd:	31 d2                	xor    edx,edx
c000c7df:	43                   	inc    ebx
c000c7e0:	52                   	push   edx
c000c7e1:	81 c6 00 02 00 00    	add    esi,0x200
c000c7e7:	50                   	push   eax
c000c7e8:	0f be 05 58 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027358
c000c7ef:	ff 34 85 bc 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c44]
c000c7f6:	e8 95 3d 00 00       	call   c0010590 <LogicalDisk::write(unsigned long long, int, void*)>
c000c7fb:	83 c4 20             	add    esp,0x20
c000c7fe:	39 1d 4c 73 02 c0    	cmp    DWORD PTR ds:0xc002734c,ebx
c000c804:	7f c7                	jg     c000c7cd <VAS::evict(unsigned long)+0x27>
c000c806:	83 ec 08             	sub    esp,0x8
c000c809:	c1 e7 0b             	shl    edi,0xb
c000c80c:	55                   	push   ebp
c000c80d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c811:	e8 d0 f4 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c816:	8b 10                	mov    edx,DWORD PTR [eax]
c000c818:	89 d3                	mov    ebx,edx
c000c81a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c820:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c826:	09 d7                	or     edi,edx
c000c828:	89 38                	mov    DWORD PTR [eax],edi
c000c82a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c82d:	ff 05 28 80 02 c0    	inc    DWORD PTR ds:0xc0028028
c000c833:	e8 0b d8 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c000c838:	0f 20 d8             	mov    eax,cr3
c000c83b:	0f 22 d8             	mov    cr3,eax
c000c83e:	ff 35 28 80 02 c0    	push   DWORD PTR ds:0xc0028028
c000c844:	55                   	push   ebp
c000c845:	53                   	push   ebx
c000c846:	68 30 45 02 c0       	push   0xc0024530
c000c84b:	e8 ab 04 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c850:	a1 24 80 02 c0       	mov    eax,ds:0xc0028024
c000c855:	c7 44 24 50 ee 45 02 c0 	mov    DWORD PTR [esp+0x50],0xc00245ee
c000c85d:	8d 50 01             	lea    edx,[eax+0x1]
c000c860:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c864:	89 15 24 80 02 c0    	mov    DWORD PTR ds:0xc0028024,edx
c000c86a:	83 c4 3c             	add    esp,0x3c
c000c86d:	5b                   	pop    ebx
c000c86e:	5e                   	pop    esi
c000c86f:	5f                   	pop    edi
c000c870:	5d                   	pop    ebp
c000c871:	e9 85 04 00 00       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>

c000c876 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c876:	55                   	push   ebp
c000c877:	57                   	push   edi
c000c878:	56                   	push   esi
c000c879:	53                   	push   ebx
c000c87a:	83 ec 14             	sub    esp,0x14
c000c87d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c881:	68 ff 45 02 c0       	push   0xc00245ff
c000c886:	e8 70 04 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c88b:	83 c4 10             	add    esp,0x10
c000c88e:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000c892:	81 e5 00 f0 ff ff    	and    ebp,0xfffff000
c000c898:	74 20                	je     c000c8ba <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c89a:	83 ec 08             	sub    esp,0x8
c000c89d:	55                   	push   ebp
c000c89e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c8a2:	e8 3f f4 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c8a7:	83 c4 10             	add    esp,0x10
c000c8aa:	89 c3                	mov    ebx,eax
c000c8ac:	85 c0                	test   eax,eax
c000c8ae:	74 0a                	je     c000c8ba <VAS::tryLoadBackOffDisk(unsigned long)+0x44>
c000c8b0:	8b 38                	mov    edi,DWORD PTR [eax]
c000c8b2:	f7 c7 01 00 00 00    	test   edi,0x1
c000c8b8:	74 0a                	je     c000c8c4 <VAS::tryLoadBackOffDisk(unsigned long)+0x4e>
c000c8ba:	31 c0                	xor    eax,eax
c000c8bc:	83 c4 0c             	add    esp,0xc
c000c8bf:	5b                   	pop    ebx
c000c8c0:	5e                   	pop    esi
c000c8c1:	5f                   	pop    edi
c000c8c2:	5d                   	pop    ebp
c000c8c3:	c3                   	ret    
c000c8c4:	e8 fd d7 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000c8c9:	c1 ef 0b             	shr    edi,0xb
c000c8cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c8ce:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c8d4:	09 c2                	or     edx,eax
c000c8d6:	81 ca 01 08 00 00    	or     edx,0x801
c000c8dc:	89 13                	mov    DWORD PTR [ebx],edx
c000c8de:	8b 0d 4c 73 02 c0    	mov    ecx,DWORD PTR ds:0xc002734c
c000c8e4:	85 c9                	test   ecx,ecx
c000c8e6:	7e 3d                	jle    c000c925 <VAS::tryLoadBackOffDisk(unsigned long)+0xaf>
c000c8e8:	89 ee                	mov    esi,ebp
c000c8ea:	31 db                	xor    ebx,ebx
c000c8ec:	83 ec 0c             	sub    esp,0xc
c000c8ef:	57                   	push   edi
c000c8f0:	e8 0f f2 ff ff       	call   c000bb04 <Virt::swapIDToSector(unsigned long)>
c000c8f5:	89 34 24             	mov    DWORD PTR [esp],esi
c000c8f8:	01 d8                	add    eax,ebx
c000c8fa:	6a 01                	push   0x1
c000c8fc:	31 d2                	xor    edx,edx
c000c8fe:	43                   	inc    ebx
c000c8ff:	52                   	push   edx
c000c900:	81 c6 00 02 00 00    	add    esi,0x200
c000c906:	50                   	push   eax
c000c907:	0f be 05 58 73 02 c0 	movsx  eax,BYTE PTR ds:0xc0027358
c000c90e:	ff 34 85 bc 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c44]
c000c915:	e8 0a 3c 00 00       	call   c0010524 <LogicalDisk::read(unsigned long long, int, void*)>
c000c91a:	83 c4 20             	add    esp,0x20
c000c91d:	39 1d 4c 73 02 c0    	cmp    DWORD PTR ds:0xc002734c,ebx
c000c923:	7f c7                	jg     c000c8ec <VAS::tryLoadBackOffDisk(unsigned long)+0x76>
c000c925:	a1 28 80 02 c0       	mov    eax,ds:0xc0028028
c000c92a:	48                   	dec    eax
c000c92b:	52                   	push   edx
c000c92c:	a3 28 80 02 c0       	mov    ds:0xc0028028,eax
c000c931:	50                   	push   eax
c000c932:	55                   	push   ebp
c000c933:	68 12 46 02 c0       	push   0xc0024612
c000c938:	e8 be 03 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c93d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c940:	e8 a1 f1 ff ff       	call   c000bae6 <Virt::freeSwapfilePage(unsigned long)>
c000c945:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000c94a:	83 c4 10             	add    esp,0x10
c000c94d:	48                   	dec    eax
c000c94e:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000c953:	85 c0                	test   eax,eax
c000c955:	74 1d                	je     c000c974 <VAS::tryLoadBackOffDisk(unsigned long)+0xfe>
c000c957:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c95b:	25 ff 0f 00 00       	and    eax,0xfff
c000c960:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c965:	77 10                	ja     c000c977 <VAS::tryLoadBackOffDisk(unsigned long)+0x101>
c000c967:	0f 20 d8             	mov    eax,cr3
c000c96a:	0f 22 d8             	mov    cr3,eax
c000c96d:	b0 01                	mov    al,0x1
c000c96f:	e9 48 ff ff ff       	jmp    c000c8bc <VAS::tryLoadBackOffDisk(unsigned long)+0x46>
c000c974:	fb                   	sti    
c000c975:	eb e0                	jmp    c000c957 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000c977:	83 ec 0c             	sub    esp,0xc
c000c97a:	68 27 46 02 c0       	push   0xc0024627
c000c97f:	e8 77 03 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000c984:	83 c4 10             	add    esp,0x10
c000c987:	eb de                	jmp    c000c967 <VAS::tryLoadBackOffDisk(unsigned long)+0xf1>
c000c989:	90                   	nop

c000c98a <VAS::scanForEviction()>:
c000c98a:	57                   	push   edi
c000c98b:	31 ff                	xor    edi,edi
c000c98d:	56                   	push   esi
c000c98e:	53                   	push   ebx
c000c98f:	83 ec 10             	sub    esp,0x10
c000c992:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c996:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c999:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c99f:	75 0e                	jne    c000c9af <VAS::scanForEviction()+0x25>
c000c9a1:	89 da                	mov    edx,ebx
c000c9a3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9a6:	c1 ea 16             	shr    edx,0x16
c000c9a9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9ad:	74 4e                	je     c000c9fd <VAS::scanForEviction()+0x73>
c000c9af:	53                   	push   ebx
c000c9b0:	56                   	push   esi
c000c9b1:	e8 30 f3 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000c9b6:	5a                   	pop    edx
c000c9b7:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9b9:	59                   	pop    ecx
c000c9ba:	89 d1                	mov    ecx,edx
c000c9bc:	81 e1 01 08 00 00    	and    ecx,0x801
c000c9c2:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c9c8:	74 3e                	je     c000ca08 <VAS::scanForEviction()+0x7e>
c000c9ca:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c9d0:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c9d6:	76 2b                	jbe    c000ca03 <VAS::scanForEviction()+0x79>
c000c9d8:	47                   	inc    edi
c000c9d9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c9e0:	83 ff 03             	cmp    edi,0x3
c000c9e3:	74 32                	je     c000ca17 <VAS::scanForEviction()+0x8d>
c000c9e5:	31 db                	xor    ebx,ebx
c000c9e7:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c9ed:	75 c0                	jne    c000c9af <VAS::scanForEviction()+0x25>
c000c9ef:	89 da                	mov    edx,ebx
c000c9f1:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c9f4:	c1 ea 16             	shr    edx,0x16
c000c9f7:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c9fb:	75 b2                	jne    c000c9af <VAS::scanForEviction()+0x25>
c000c9fd:	81 c3 00 00 40 00    	add    ebx,0x400000
c000ca03:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000ca06:	eb 91                	jmp    c000c999 <VAS::scanForEviction()+0xf>
c000ca08:	f6 c2 20             	test   dl,0x20
c000ca0b:	74 13                	je     c000ca20 <VAS::scanForEviction()+0x96>
c000ca0d:	83 e2 df             	and    edx,0xffffffdf
c000ca10:	89 10                	mov    DWORD PTR [eax],edx
c000ca12:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000ca15:	eb b3                	jmp    c000c9ca <VAS::scanForEviction()+0x40>
c000ca17:	83 c4 10             	add    esp,0x10
c000ca1a:	31 c0                	xor    eax,eax
c000ca1c:	5b                   	pop    ebx
c000ca1d:	5e                   	pop    esi
c000ca1e:	5f                   	pop    edi
c000ca1f:	c3                   	ret    
c000ca20:	83 ec 08             	sub    esp,0x8
c000ca23:	89 d0                	mov    eax,edx
c000ca25:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ca2a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ca2e:	53                   	push   ebx
c000ca2f:	68 37 46 02 c0       	push   0xc0024637
c000ca34:	e8 c2 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ca39:	58                   	pop    eax
c000ca3a:	5a                   	pop    edx
c000ca3b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca3e:	56                   	push   esi
c000ca3f:	e8 62 fd ff ff       	call   c000c7a6 <VAS::evict(unsigned long)>
c000ca44:	59                   	pop    ecx
c000ca45:	5b                   	pop    ebx
c000ca46:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000ca49:	68 4b 46 02 c0       	push   0xc002464b
c000ca4e:	e8 a8 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ca53:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000ca5a:	83 c4 10             	add    esp,0x10
c000ca5d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ca61:	83 c4 10             	add    esp,0x10
c000ca64:	5b                   	pop    ebx
c000ca65:	5e                   	pop    esi
c000ca66:	5f                   	pop    edi
c000ca67:	c3                   	ret    

c000ca68 <mapVASFirstTime>:
c000ca68:	55                   	push   ebp
c000ca69:	57                   	push   edi
c000ca6a:	56                   	push   esi
c000ca6b:	53                   	push   ebx
c000ca6c:	83 ec 0c             	sub    esp,0xc
c000ca6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ca74:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ca77:	4a                   	dec    edx
c000ca78:	0f 84 fe 00 00 00    	je     c000cb7c <mapVASFirstTime+0x114>
c000ca7e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000ca81:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000ca84:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ca89:	c1 e5 15             	shl    ebp,0x15
c000ca8c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000ca91:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000ca97:	29 eb                	sub    ebx,ebp
c000ca99:	29 ef                	sub    edi,ebp
c000ca9b:	83 ec 08             	sub    esp,0x8
c000ca9e:	53                   	push   ebx
c000ca9f:	68 77 46 02 c0       	push   0xc0024677
c000caa4:	e8 52 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000caa9:	e8 18 d6 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000caae:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000cab5:	6a 01                	push   0x1
c000cab7:	53                   	push   ebx
c000cab8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cabe:	50                   	push   eax
c000cabf:	56                   	push   esi
c000cac0:	e8 ad f8 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cac5:	83 c4 20             	add    esp,0x20
c000cac8:	39 fb                	cmp    ebx,edi
c000caca:	75 cf                	jne    c000ca9b <mapVASFirstTime+0x33>
c000cacc:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000cad1:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000cad6:	29 eb                	sub    ebx,ebp
c000cad8:	29 ef                	sub    edi,ebp
c000cada:	83 ec 08             	sub    esp,0x8
c000cadd:	53                   	push   ebx
c000cade:	68 93 46 02 c0       	push   0xc0024693
c000cae3:	e8 13 02 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cae8:	58                   	pop    eax
c000cae9:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000caed:	5a                   	pop    edx
c000caee:	19 c0                	sbb    eax,eax
c000caf0:	83 e0 04             	and    eax,0x4
c000caf3:	05 03 04 00 00       	add    eax,0x403
c000caf8:	50                   	push   eax
c000caf9:	68 a7 46 02 c0       	push   0xc00246a7
c000cafe:	e8 f8 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb03:	e8 be d5 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c000cb08:	59                   	pop    ecx
c000cb09:	89 c5                	mov    ebp,eax
c000cb0b:	58                   	pop    eax
c000cb0c:	55                   	push   ebp
c000cb0d:	68 b5 46 02 c0       	push   0xc00246b5
c000cb12:	e8 e4 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb17:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000cb1b:	19 d2                	sbb    edx,edx
c000cb1d:	83 e2 04             	and    edx,0x4
c000cb20:	81 c2 03 04 00 00    	add    edx,0x403
c000cb26:	89 14 24             	mov    DWORD PTR [esp],edx
c000cb29:	6a 01                	push   0x1
c000cb2b:	53                   	push   ebx
c000cb2c:	55                   	push   ebp
c000cb2d:	56                   	push   esi
c000cb2e:	e8 3f f8 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000cb33:	83 c4 18             	add    esp,0x18
c000cb36:	53                   	push   ebx
c000cb37:	56                   	push   esi
c000cb38:	e8 a9 f1 ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c000cb3d:	5a                   	pop    edx
c000cb3e:	59                   	pop    ecx
c000cb3f:	ff 30                	push   DWORD PTR [eax]
c000cb41:	68 d1 46 02 c0       	push   0xc00246d1
c000cb46:	e8 b0 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb4b:	0f 20 d8             	mov    eax,cr3
c000cb4e:	83 c4 0c             	add    esp,0xc
c000cb51:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000cb57:	56                   	push   esi
c000cb58:	50                   	push   eax
c000cb59:	68 dc 46 02 c0       	push   0xc00246dc
c000cb5e:	e8 98 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb63:	83 c4 10             	add    esp,0x10
c000cb66:	39 df                	cmp    edi,ebx
c000cb68:	0f 85 6c ff ff ff    	jne    c000cada <mapVASFirstTime+0x72>
c000cb6e:	0f 20 d8             	mov    eax,cr3
c000cb71:	0f 22 d8             	mov    cr3,eax
c000cb74:	83 c4 0c             	add    esp,0xc
c000cb77:	5b                   	pop    ebx
c000cb78:	5e                   	pop    esi
c000cb79:	5f                   	pop    edi
c000cb7a:	5d                   	pop    ebp
c000cb7b:	c3                   	ret    
c000cb7c:	83 ec 0c             	sub    esp,0xc
c000cb7f:	68 5e 46 02 c0       	push   0xc002465e
c000cb84:	e8 72 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cb89:	83 c4 10             	add    esp,0x10
c000cb8c:	83 c4 0c             	add    esp,0xc
c000cb8f:	5b                   	pop    ebx
c000cb90:	5e                   	pop    esi
c000cb91:	5f                   	pop    edi
c000cb92:	5d                   	pop    ebp
c000cb93:	c3                   	ret    

c000cb94 <__cxa_atexit>:
c000cb94:	31 c0                	xor    eax,eax
c000cb96:	c3                   	ret    

c000cb97 <__cxa_finalize>:
c000cb97:	c3                   	ret    

c000cb98 <__stack_chk_fail>:
c000cb98:	55                   	push   ebp
c000cb99:	89 e5                	mov    ebp,esp
c000cb9b:	83 ec 14             	sub    esp,0x14
c000cb9e:	68 f4 46 02 c0       	push   0xc00246f4
c000cba3:	e8 53 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cba8:	58                   	pop    eax
c000cba9:	5a                   	pop    edx
c000cbaa:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbad:	68 44 47 02 c0       	push   0xc0024744
c000cbb2:	e8 44 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbb7:	59                   	pop    ecx
c000cbb8:	58                   	pop    eax
c000cbb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbbc:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbbf:	68 44 47 02 c0       	push   0xc0024744
c000cbc4:	e8 32 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbc9:	5a                   	pop    edx
c000cbca:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbcd:	59                   	pop    ecx
c000cbce:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbd0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbd3:	68 44 47 02 c0       	push   0xc0024744
c000cbd8:	e8 1e 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbdd:	5a                   	pop    edx
c000cbde:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cbe1:	59                   	pop    ecx
c000cbe2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe4:	8b 00                	mov    eax,DWORD PTR [eax]
c000cbe6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000cbe9:	68 44 47 02 c0       	push   0xc0024744
c000cbee:	e8 08 01 00 00       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000cbf3:	c7 04 24 4c 47 02 c0 	mov    DWORD PTR [esp],0xc002474c
c000cbfa:	e8 a4 7d 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000cbff:	83 c4 10             	add    esp,0x10
c000cc02:	c9                   	leave  
c000cc03:	c3                   	ret    

c000cc04 <__cxa_pure_virtual>:
c000cc04:	83 ec 18             	sub    esp,0x18
c000cc07:	68 64 47 02 c0       	push   0xc0024764
c000cc0c:	e8 92 7d 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000cc11:	83 c4 1c             	add    esp,0x1c
c000cc14:	c3                   	ret    

c000cc15 <operator new[](unsigned long)>:
c000cc15:	e9 f5 cd ff ff       	jmp    c0009a0f <malloc>

c000cc1a <operator delete(void*, unsigned long)>:
c000cc1a:	e9 10 ce ff ff       	jmp    c0009a2f <rfree>

c000cc1f <operator delete[](void*)>:
c000cc1f:	e9 0b ce ff ff       	jmp    c0009a2f <rfree>

c000cc24 <operator delete[](void*, unsigned long)>:
c000cc24:	e9 06 ce ff ff       	jmp    c0009a2f <rfree>

c000cc29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000cc29:	55                   	push   ebp
c000cc2a:	b9 11 00 00 00       	mov    ecx,0x11
c000cc2f:	57                   	push   edi
c000cc30:	56                   	push   esi
c000cc31:	be 4a 42 02 c0       	mov    esi,0xc002424a
c000cc36:	53                   	push   ebx
c000cc37:	83 ec 20             	sub    esp,0x20
c000cc3a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000cc3e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000cc42:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000cc46:	fc                   	cld    
c000cc47:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cc49:	89 ee                	mov    esi,ebp
c000cc4b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000cc4f:	eb 02                	jmp    c000cc53 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000cc51:	89 c6                	mov    esi,eax
c000cc53:	31 d2                	xor    edx,edx
c000cc55:	41                   	inc    ecx
c000cc56:	89 f0                	mov    eax,esi
c000cc58:	f7 f3                	div    ebx
c000cc5a:	39 de                	cmp    esi,ebx
c000cc5c:	73 f3                	jae    c000cc51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000cc5e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000cc61:	eb 02                	jmp    c000cc65 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000cc63:	89 c5                	mov    ebp,eax
c000cc65:	31 d2                	xor    edx,edx
c000cc67:	49                   	dec    ecx
c000cc68:	89 e8                	mov    eax,ebp
c000cc6a:	f7 f3                	div    ebx
c000cc6c:	39 dd                	cmp    ebp,ebx
c000cc6e:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000cc72:	88 11                	mov    BYTE PTR [ecx],dl
c000cc74:	73 ed                	jae    c000cc63 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000cc76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc7a:	83 c4 20             	add    esp,0x20
c000cc7d:	5b                   	pop    ebx
c000cc7e:	5e                   	pop    esi
c000cc7f:	5f                   	pop    edi
c000cc80:	5d                   	pop    ebp
c000cc81:	c3                   	ret    

c000cc82 <Dbg::logc(char)>:
c000cc82:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cc86:	f6 05 20 7f 02 c0 10 	test   BYTE PTR ds:0xc0027f20,0x10
c000cc8d:	75 12                	jne    c000cca1 <Dbg::logc(char)+0x1f>
c000cc8f:	ba fd 03 00 00       	mov    edx,0x3fd
c000cc94:	ec                   	in     al,dx
c000cc95:	a8 20                	test   al,0x20
c000cc97:	74 fb                	je     c000cc94 <Dbg::logc(char)+0x12>
c000cc99:	ba f8 03 00 00       	mov    edx,0x3f8
c000cc9e:	88 c8                	mov    al,cl
c000cca0:	ee                   	out    dx,al
c000cca1:	c3                   	ret    

c000cca2 <Dbg::logs(char*)>:
c000cca2:	53                   	push   ebx
c000cca3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000cca7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccaa:	84 c0                	test   al,al
c000ccac:	74 0f                	je     c000ccbd <Dbg::logs(char*)+0x1b>
c000ccae:	50                   	push   eax
c000ccaf:	43                   	inc    ebx
c000ccb0:	e8 cd ff ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ccb5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ccb8:	5a                   	pop    edx
c000ccb9:	84 c0                	test   al,al
c000ccbb:	75 f1                	jne    c000ccae <Dbg::logs(char*)+0xc>
c000ccbd:	5b                   	pop    ebx
c000ccbe:	c3                   	ret    

c000ccbf <Dbg::logWriteInt(unsigned int)>:
c000ccbf:	83 ec 10             	sub    esp,0x10
c000ccc2:	6a 0a                	push   0xa
c000ccc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ccc8:	50                   	push   eax
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 57 ff ff ff       	call   c000cc29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccd2:	50                   	push   eax
c000ccd3:	e8 ca ff ff ff       	call   c000cca2 <Dbg::logs(char*)>
c000ccd8:	83 c4 20             	add    esp,0x20
c000ccdb:	c3                   	ret    

c000ccdc <Dbg::logWriteIntBase(unsigned int, int)>:
c000ccdc:	83 ec 10             	sub    esp,0x10
c000ccdf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cce3:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cce7:	50                   	push   eax
c000cce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccec:	e8 38 ff ff ff       	call   c000cc29 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ccf1:	50                   	push   eax
c000ccf2:	e8 ab ff ff ff       	call   c000cca2 <Dbg::logs(char*)>
c000ccf7:	83 c4 20             	add    esp,0x20
c000ccfa:	c3                   	ret    

c000ccfb <Dbg::kprintf(char const*, ...)>:
c000ccfb:	55                   	push   ebp
c000ccfc:	57                   	push   edi
c000ccfd:	56                   	push   esi
c000ccfe:	53                   	push   ebx
c000ccff:	83 ec 0c             	sub    esp,0xc
c000cd02:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cd06:	f6 05 20 7f 02 c0 10 	test   BYTE PTR ds:0xc0027f20,0x10
c000cd0d:	74 08                	je     c000cd17 <Dbg::kprintf(char const*, ...)+0x1c>
c000cd0f:	83 c4 0c             	add    esp,0xc
c000cd12:	5b                   	pop    ebx
c000cd13:	5e                   	pop    esi
c000cd14:	5f                   	pop    edi
c000cd15:	5d                   	pop    ebp
c000cd16:	c3                   	ret    
c000cd17:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cd1b:	31 db                	xor    ebx,ebx
c000cd1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cd21:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cd24:	84 c0                	test   al,al
c000cd26:	74 e7                	je     c000cd0f <Dbg::kprintf(char const*, ...)+0x14>
c000cd28:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd2b:	3c 25                	cmp    al,0x25
c000cd2d:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd30:	75 44                	jne    c000cd76 <Dbg::kprintf(char const*, ...)+0x7b>
c000cd32:	83 c3 02             	add    ebx,0x2
c000cd35:	8a 07                	mov    al,BYTE PTR [edi]
c000cd37:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cd3a:	83 e8 25             	sub    eax,0x25
c000cd3d:	3c 53                	cmp    al,0x53
c000cd3f:	0f 87 c9 00 00 00    	ja     c000ce0e <Dbg::kprintf(char const*, ...)+0x113>
c000cd45:	0f b6 c0             	movzx  eax,al
c000cd48:	ff 24 85 78 47 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb888]
c000cd4f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd53:	89 c8                	mov    eax,ecx
c000cd55:	83 c1 04             	add    ecx,0x4
c000cd58:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd5c:	ff 30                	push   DWORD PTR [eax]
c000cd5e:	e8 5c ff ff ff       	call   c000ccbf <Dbg::logWriteInt(unsigned int)>
c000cd63:	5f                   	pop    edi
c000cd64:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cd68:	84 c0                	test   al,al
c000cd6a:	74 a3                	je     c000cd0f <Dbg::kprintf(char const*, ...)+0x14>
c000cd6c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cd6f:	3c 25                	cmp    al,0x25
c000cd71:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cd74:	74 bc                	je     c000cd32 <Dbg::kprintf(char const*, ...)+0x37>
c000cd76:	50                   	push   eax
c000cd77:	89 eb                	mov    ebx,ebp
c000cd79:	e8 04 ff ff ff       	call   c000cc82 <Dbg::logc(char)>
c000cd7e:	89 fd                	mov    ebp,edi
c000cd80:	58                   	pop    eax
c000cd81:	eb e1                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cd83:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cd87:	89 c8                	mov    eax,ecx
c000cd89:	83 c1 04             	add    ecx,0x4
c000cd8c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cd90:	ff 30                	push   DWORD PTR [eax]
c000cd92:	e8 0b ff ff ff       	call   c000cca2 <Dbg::logs(char*)>
c000cd97:	58                   	pop    eax
c000cd98:	eb ca                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cd9a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cd9e:	89 d0                	mov    eax,edx
c000cda0:	83 c2 04             	add    edx,0x4
c000cda3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cda7:	ff 30                	push   DWORD PTR [eax]
c000cda9:	e8 11 ff ff ff       	call   c000ccbf <Dbg::logWriteInt(unsigned int)>
c000cdae:	58                   	pop    eax
c000cdaf:	eb b3                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cdb1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cdb5:	89 d0                	mov    eax,edx
c000cdb7:	83 c2 04             	add    edx,0x4
c000cdba:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cdbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdc1:	50                   	push   eax
c000cdc2:	e8 bb fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000cdc7:	58                   	pop    eax
c000cdc8:	eb 9a                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cdca:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cdce:	89 c8                	mov    eax,ecx
c000cdd0:	83 c1 04             	add    ecx,0x4
c000cdd3:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cdd7:	6a 10                	push   0x10
c000cdd9:	ff 30                	push   DWORD PTR [eax]
c000cddb:	e8 fc fe ff ff       	call   c000ccdc <Dbg::logWriteIntBase(unsigned int, int)>
c000cde0:	59                   	pop    ecx
c000cde1:	5f                   	pop    edi
c000cde2:	eb 80                	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000cde4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cde8:	89 d0                	mov    eax,edx
c000cdea:	83 c2 08             	add    edx,0x8
c000cded:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cdf1:	6a 10                	push   0x10
c000cdf3:	ff 30                	push   DWORD PTR [eax]
c000cdf5:	e8 e2 fe ff ff       	call   c000ccdc <Dbg::logWriteIntBase(unsigned int, int)>
c000cdfa:	58                   	pop    eax
c000cdfb:	5a                   	pop    edx
c000cdfc:	e9 63 ff ff ff       	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000ce01:	6a 25                	push   0x25
c000ce03:	e8 7a fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ce08:	58                   	pop    eax
c000ce09:	e9 56 ff ff ff       	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000ce0e:	6a 25                	push   0x25
c000ce10:	e8 6d fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ce15:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000ce18:	50                   	push   eax
c000ce19:	e8 64 fe ff ff       	call   c000cc82 <Dbg::logc(char)>
c000ce1e:	5a                   	pop    edx
c000ce1f:	59                   	pop    ecx
c000ce20:	e9 3f ff ff ff       	jmp    c000cd64 <Dbg::kprintf(char const*, ...)+0x69>
c000ce25:	90                   	nop

c000ce26 <File::read(unsigned long long, void*, int*)>:
c000ce26:	53                   	push   ebx
c000ce27:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce2f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce36:	3c 19                	cmp    al,0x19
c000ce38:	77 35                	ja     c000ce6f <File::read(unsigned long long, void*, int*)+0x49>
c000ce3a:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000ce41:	85 c0                	test   eax,eax
c000ce43:	74 2a                	je     c000ce6f <File::read(unsigned long long, void*, int*)+0x49>
c000ce45:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ce4b:	85 c0                	test   eax,eax
c000ce4d:	74 20                	je     c000ce6f <File::read(unsigned long long, void*, int*)+0x49>
c000ce4f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ce53:	74 21                	je     c000ce76 <File::read(unsigned long long, void*, int*)+0x50>
c000ce55:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ce57:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce5b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ce61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce65:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce69:	5b                   	pop    ebx
c000ce6a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000ce6d:	ff e0                	jmp    eax
c000ce6f:	b8 0b 00 00 00       	mov    eax,0xb
c000ce74:	eb 05                	jmp    c000ce7b <File::read(unsigned long long, void*, int*)+0x55>
c000ce76:	b8 05 00 00 00       	mov    eax,0x5
c000ce7b:	5b                   	pop    ebx
c000ce7c:	c3                   	ret    
c000ce7d:	90                   	nop

c000ce7e <File::write(unsigned long long, void*, int*)>:
c000ce7e:	53                   	push   ebx
c000ce7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce83:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce87:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ce8e:	3c 19                	cmp    al,0x19
c000ce90:	77 35                	ja     c000cec7 <File::write(unsigned long long, void*, int*)+0x49>
c000ce92:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000ce99:	85 c0                	test   eax,eax
c000ce9b:	74 2a                	je     c000cec7 <File::write(unsigned long long, void*, int*)+0x49>
c000ce9d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cea3:	85 c0                	test   eax,eax
c000cea5:	74 20                	je     c000cec7 <File::write(unsigned long long, void*, int*)+0x49>
c000cea7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ceab:	74 21                	je     c000cece <File::write(unsigned long long, void*, int*)+0x50>
c000cead:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ceaf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ceb3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ceb9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cebd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cec1:	5b                   	pop    ebx
c000cec2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cec5:	ff e0                	jmp    eax
c000cec7:	b8 0b 00 00 00       	mov    eax,0xb
c000cecc:	eb 05                	jmp    c000ced3 <File::write(unsigned long long, void*, int*)+0x55>
c000cece:	b8 05 00 00 00       	mov    eax,0x5
c000ced3:	5b                   	pop    ebx
c000ced4:	c3                   	ret    
c000ced5:	90                   	nop

c000ced6 <Directory::read(unsigned long long, void*, int*)>:
c000ced6:	53                   	push   ebx
c000ced7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cedb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cedf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cee6:	3c 19                	cmp    al,0x19
c000cee8:	77 35                	ja     c000cf1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceea:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000cef1:	85 c0                	test   eax,eax
c000cef3:	74 2a                	je     c000cf1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000cef5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cefb:	85 c0                	test   eax,eax
c000cefd:	74 20                	je     c000cf1f <Directory::read(unsigned long long, void*, int*)+0x49>
c000ceff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cf03:	74 21                	je     c000cf26 <Directory::read(unsigned long long, void*, int*)+0x50>
c000cf05:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cf07:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf0b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cf11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf15:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf19:	5b                   	pop    ebx
c000cf1a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cf1d:	ff e0                	jmp    eax
c000cf1f:	b8 0b 00 00 00       	mov    eax,0xb
c000cf24:	eb 05                	jmp    c000cf2b <Directory::read(unsigned long long, void*, int*)+0x55>
c000cf26:	b8 05 00 00 00       	mov    eax,0x5
c000cf2b:	5b                   	pop    ebx
c000cf2c:	c3                   	ret    
c000cf2d:	90                   	nop

c000cf2e <Directory::write(unsigned long long, void*, int*)>:
c000cf2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf32:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000cf39:	b8 0b 00 00 00       	mov    eax,0xb
c000cf3e:	80 fa 19             	cmp    dl,0x19
c000cf41:	77 18                	ja     c000cf5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf43:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000cf4a:	85 d2                	test   edx,edx
c000cf4c:	74 0d                	je     c000cf5b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cf4e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cf55:	19 c0                	sbb    eax,eax
c000cf57:	83 e0 0a             	and    eax,0xa
c000cf5a:	40                   	inc    eax
c000cf5b:	c3                   	ret    

c000cf5c <File::isAtty()>:
c000cf5c:	31 c0                	xor    eax,eax
c000cf5e:	c3                   	ret    
c000cf5f:	90                   	nop

c000cf60 <Directory::isAtty()>:
c000cf60:	31 c0                	xor    eax,eax
c000cf62:	c3                   	ret    
c000cf63:	90                   	nop

c000cf64 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cf64:	b8 0a 00 00 00       	mov    eax,0xa
c000cf69:	c3                   	ret    

c000cf6a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cf6a:	b8 0a 00 00 00       	mov    eax,0xa
c000cf6f:	c3                   	ret    

c000cf70 <Filesystem::allocateSwapfile(char const*, int)>:
c000cf70:	31 c0                	xor    eax,eax
c000cf72:	31 d2                	xor    edx,edx
c000cf74:	c3                   	ret    
c000cf75:	90                   	nop

c000cf76 <File::~File()>:
c000cf76:	83 ec 0c             	sub    esp,0xc
c000cf79:	ba b4 49 02 c0       	mov    edx,0xc00249b4
c000cf7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf82:	89 10                	mov    DWORD PTR [eax],edx
c000cf84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf88:	83 ec 0c             	sub    esp,0xc
c000cf8b:	50                   	push   eax
c000cf8c:	e8 e3 e7 ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	90                   	nop
c000cf95:	83 c4 0c             	add    esp,0xc
c000cf98:	c3                   	ret    
c000cf99:	90                   	nop

c000cf9a <File::~File()>:
c000cf9a:	83 ec 0c             	sub    esp,0xc
c000cf9d:	83 ec 0c             	sub    esp,0xc
c000cfa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfa4:	e8 cd ff ff ff       	call   c000cf76 <File::~File()>
c000cfa9:	83 c4 10             	add    esp,0x10
c000cfac:	83 ec 08             	sub    esp,0x8
c000cfaf:	68 14 01 00 00       	push   0x114
c000cfb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfb8:	e8 5d fc ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000cfbd:	83 c4 10             	add    esp,0x10
c000cfc0:	83 c4 0c             	add    esp,0xc
c000cfc3:	c3                   	ret    

c000cfc4 <Directory::~Directory()>:
c000cfc4:	83 ec 0c             	sub    esp,0xc
c000cfc7:	ba d0 49 02 c0       	mov    edx,0xc00249d0
c000cfcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd0:	89 10                	mov    DWORD PTR [eax],edx
c000cfd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfd6:	83 ec 0c             	sub    esp,0xc
c000cfd9:	50                   	push   eax
c000cfda:	e8 95 e7 ff ff       	call   c000b774 <UnixFile::~UnixFile()>
c000cfdf:	83 c4 10             	add    esp,0x10
c000cfe2:	90                   	nop
c000cfe3:	83 c4 0c             	add    esp,0xc
c000cfe6:	c3                   	ret    
c000cfe7:	90                   	nop

c000cfe8 <Directory::~Directory()>:
c000cfe8:	83 ec 0c             	sub    esp,0xc
c000cfeb:	83 ec 0c             	sub    esp,0xc
c000cfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cff2:	e8 cd ff ff ff       	call   c000cfc4 <Directory::~Directory()>
c000cff7:	83 c4 10             	add    esp,0x10
c000cffa:	83 ec 08             	sub    esp,0x8
c000cffd:	68 14 01 00 00       	push   0x114
c000d002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d006:	e8 0f fc ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000d00b:	83 c4 10             	add    esp,0x10
c000d00e:	83 c4 0c             	add    esp,0xc
c000d011:	c3                   	ret    

c000d012 <Filesystem::Filesystem()>:
c000d012:	ba 4c 49 02 c0       	mov    edx,0xc002494c
c000d017:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d01b:	89 10                	mov    DWORD PTR [eax],edx
c000d01d:	8b 15 34 80 02 c0    	mov    edx,DWORD PTR ds:0xc0028034
c000d023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d027:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000d02a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d02e:	a3 34 80 02 c0       	mov    ds:0xc0028034,eax
c000d033:	90                   	nop
c000d034:	c3                   	ret    
c000d035:	90                   	nop

c000d036 <Filesystem::~Filesystem()>:
c000d036:	ba 4c 49 02 c0       	mov    edx,0xc002494c
c000d03b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d03f:	89 10                	mov    DWORD PTR [eax],edx
c000d041:	90                   	nop
c000d042:	c3                   	ret    
c000d043:	90                   	nop

c000d044 <Filesystem::~Filesystem()>:
c000d044:	83 ec 0c             	sub    esp,0xc
c000d047:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d04b:	e8 e6 ff ff ff       	call   c000d036 <Filesystem::~Filesystem()>
c000d050:	83 c4 04             	add    esp,0x4
c000d053:	83 ec 08             	sub    esp,0x8
c000d056:	6a 08                	push   0x8
c000d058:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d05c:	e8 b9 fb ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000d061:	83 c4 10             	add    esp,0x10
c000d064:	83 c4 0c             	add    esp,0xc
c000d067:	c3                   	ret    

c000d068 <Fs::getcwd(Process*, char*, int)>:
c000d068:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d06c:	31 c0                	xor    eax,eax
c000d06e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000d071:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d075:	7d 15                	jge    c000d08c <Fs::getcwd(Process*, char*, int)+0x24>
c000d077:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000d07b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000d082:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000d085:	84 c9                	test   cl,cl
c000d087:	74 06                	je     c000d08f <Fs::getcwd(Process*, char*, int)+0x27>
c000d089:	40                   	inc    eax
c000d08a:	eb e2                	jmp    c000d06e <Fs::getcwd(Process*, char*, int)+0x6>
c000d08c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000d08f:	31 c0                	xor    eax,eax
c000d091:	c3                   	ret    

c000d092 <Fs::initVFS()>:
c000d092:	83 ec 18             	sub    esp,0x18
c000d095:	6a 08                	push   0x8
c000d097:	e8 73 c9 ff ff       	call   c0009a0f <malloc>
c000d09c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d09f:	e8 48 e8 00 00       	call   c001b8ec <FAT::FAT()>
c000d0a4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000d0ab:	e8 5f c9 ff ff       	call   c0009a0f <malloc>
c000d0b0:	89 04 24             	mov    DWORD PTR [esp],eax
c000d0b3:	e8 c4 fa 00 00       	call   c001cb7c <ISO9660::ISO9660()>
c000d0b8:	83 c4 1c             	add    esp,0x1c
c000d0bb:	c3                   	ret    

c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>:
c000d0bc:	55                   	push   ebp
c000d0bd:	57                   	push   edi
c000d0be:	56                   	push   esi
c000d0bf:	53                   	push   ebx
c000d0c0:	81 ec 10 04 00 00    	sub    esp,0x410
c000d0c6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000d0cd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000d0d4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000d0db:	68 00 04 00 00       	push   0x400
c000d0e0:	6a 00                	push   0x0
c000d0e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000d0e6:	56                   	push   esi
c000d0e7:	e8 98 35 ff ff       	call   c0000684 <memset>
c000d0ec:	83 c4 10             	add    esp,0x10
c000d0ef:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000d0f3:	75 0b                	jne    c000d100 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000d0f5:	50                   	push   eax
c000d0f6:	50                   	push   eax
c000d0f7:	57                   	push   edi
c000d0f8:	56                   	push   esi
c000d0f9:	e8 42 36 ff ff       	call   c0000740 <strcpy>
c000d0fe:	eb 41                	jmp    c000d141 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000d100:	8a 07                	mov    al,BYTE PTR [edi]
c000d102:	3c 5c                	cmp    al,0x5c
c000d104:	74 04                	je     c000d10a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000d106:	3c 2f                	cmp    al,0x2f
c000d108:	75 18                	jne    c000d122 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000d10a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000d10d:	3c 60                	cmp    al,0x60
c000d10f:	7e 03                	jle    c000d114 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000d111:	83 e8 20             	sub    eax,0x20
c000d114:	88 04 24             	mov    BYTE PTR [esp],al
c000d117:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d11e:	50                   	push   eax
c000d11f:	50                   	push   eax
c000d120:	eb 18                	jmp    c000d13a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000d122:	50                   	push   eax
c000d123:	50                   	push   eax
c000d124:	55                   	push   ebp
c000d125:	56                   	push   esi
c000d126:	e8 15 36 ff ff       	call   c0000740 <strcpy>
c000d12b:	5a                   	pop    edx
c000d12c:	59                   	pop    ecx
c000d12d:	68 ea 5f 02 c0       	push   0xc0025fea
c000d132:	56                   	push   esi
c000d133:	e8 48 37 ff ff       	call   c0000880 <strcat>
c000d138:	5d                   	pop    ebp
c000d139:	58                   	pop    eax
c000d13a:	57                   	push   edi
c000d13b:	56                   	push   esi
c000d13c:	e8 3f 37 ff ff       	call   c0000880 <strcat>
c000d141:	83 c4 10             	add    esp,0x10
c000d144:	8a 04 24             	mov    al,BYTE PTR [esp]
c000d147:	3c 60                	cmp    al,0x60
c000d149:	7e 03                	jle    c000d14e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000d14b:	83 e8 20             	sub    eax,0x20
c000d14e:	88 04 24             	mov    BYTE PTR [esp],al
c000d151:	88 03                	mov    BYTE PTR [ebx],al
c000d153:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000d15a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000d160:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000d164:	bf 03 00 00 00       	mov    edi,0x3
c000d169:	b8 03 00 00 00       	mov    eax,0x3
c000d16e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000d171:	84 d2                	test   dl,dl
c000d173:	0f 84 91 00 00 00    	je     c000d20a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000d179:	8d 4f 01             	lea    ecx,[edi+0x1]
c000d17c:	80 fa 5c             	cmp    dl,0x5c
c000d17f:	74 05                	je     c000d186 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000d181:	80 fa 2f             	cmp    dl,0x2f
c000d184:	75 12                	jne    c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d186:	89 c5                	mov    ebp,eax
c000d188:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d18d:	74 09                	je     c000d198 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000d18f:	40                   	inc    eax
c000d190:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000d194:	89 cf                	mov    edi,ecx
c000d196:	eb d6                	jmp    c000d16e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000d198:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000d19d:	75 5b                	jne    c000d1fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d19f:	80 fa 2e             	cmp    dl,0x2e
c000d1a2:	75 56                	jne    c000d1fa <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000d1a4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000d1a8:	74 19                	je     c000d1c3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000d1aa:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1af:	74 53                	je     c000d204 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1b1:	89 f9                	mov    ecx,edi
c000d1b3:	41                   	inc    ecx
c000d1b4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1b7:	80 fa 2f             	cmp    dl,0x2f
c000d1ba:	74 f7                	je     c000d1b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1bc:	80 fa 5c             	cmp    dl,0x5c
c000d1bf:	74 f2                	je     c000d1b3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000d1c1:	eb d1                	jmp    c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1c3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000d1c8:	74 3a                	je     c000d204 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000d1ca:	83 f8 03             	cmp    eax,0x3
c000d1cd:	74 c5                	je     c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1cf:	41                   	inc    ecx
c000d1d0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000d1d3:	80 fa 2f             	cmp    dl,0x2f
c000d1d6:	74 f7                	je     c000d1cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1d8:	80 fa 5c             	cmp    dl,0x5c
c000d1db:	74 f2                	je     c000d1cf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000d1dd:	48                   	dec    eax
c000d1de:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1e2:	75 06                	jne    c000d1ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1e4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1e8:	eb f3                	jmp    c000d1dd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000d1ea:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d1ee:	74 07                	je     c000d1f7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000d1f0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d1f4:	48                   	dec    eax
c000d1f5:	eb f3                	jmp    c000d1ea <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000d1f7:	40                   	inc    eax
c000d1f8:	eb 9a                	jmp    c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1fa:	80 fa 2f             	cmp    dl,0x2f
c000d1fd:	74 95                	je     c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d1ff:	80 fa 5c             	cmp    dl,0x5c
c000d202:	74 90                	je     c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d204:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000d207:	40                   	inc    eax
c000d208:	eb 8a                	jmp    c000d194 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000d20a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000d20e:	83 ec 0c             	sub    esp,0xc
c000d211:	53                   	push   ebx
c000d212:	e8 89 34 ff ff       	call   c00006a0 <strlen>
c000d217:	83 c4 10             	add    esp,0x10
c000d21a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000d21f:	75 26                	jne    c000d247 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000d221:	83 ec 0c             	sub    esp,0xc
c000d224:	53                   	push   ebx
c000d225:	e8 76 34 ff ff       	call   c00006a0 <strlen>
c000d22a:	83 c4 10             	add    esp,0x10
c000d22d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000d232:	74 26                	je     c000d25a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000d234:	83 ec 0c             	sub    esp,0xc
c000d237:	53                   	push   ebx
c000d238:	e8 63 34 ff ff       	call   c00006a0 <strlen>
c000d23d:	83 c4 10             	add    esp,0x10
c000d240:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d245:	eb c7                	jmp    c000d20e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d247:	83 ec 0c             	sub    esp,0xc
c000d24a:	53                   	push   ebx
c000d24b:	e8 50 34 ff ff       	call   c00006a0 <strlen>
c000d250:	83 c4 10             	add    esp,0x10
c000d253:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d258:	74 c7                	je     c000d221 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d25a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d260:	5b                   	pop    ebx
c000d261:	5e                   	pop    esi
c000d262:	5f                   	pop    edi
c000d263:	5d                   	pop    ebp
c000d264:	c3                   	ret    
c000d265:	90                   	nop

c000d266 <File::File(char const*, Process*)>:
c000d266:	83 ec 0c             	sub    esp,0xc
c000d269:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d26d:	83 ec 08             	sub    esp,0x8
c000d270:	6a 00                	push   0x0
c000d272:	50                   	push   eax
c000d273:	e8 1a e3 ff ff       	call   c000b592 <UnixFile::UnixFile(int)>
c000d278:	83 c4 10             	add    esp,0x10
c000d27b:	ba b4 49 02 c0       	mov    edx,0xc00249b4
c000d280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d284:	89 10                	mov    DWORD PTR [eax],edx
c000d286:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d28a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d294:	83 c0 0d             	add    eax,0xd
c000d297:	83 ec 04             	sub    esp,0x4
c000d29a:	52                   	push   edx
c000d29b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d29f:	50                   	push   eax
c000d2a0:	e8 17 fe ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d2a5:	83 c4 10             	add    esp,0x10
c000d2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ac:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d2af:	8d 50 bf             	lea    edx,[eax-0x41]
c000d2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2b6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2ce:	0f b6 c0             	movzx  eax,al
c000d2d1:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d2d8:	85 c0                	test   eax,eax
c000d2da:	74 5e                	je     c000d33a <File::File(char const*, Process*)+0xd4>
c000d2dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2e0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d2e6:	0f b6 c0             	movzx  eax,al
c000d2e9:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d2f0:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d2f6:	85 c0                	test   eax,eax
c000d2f8:	75 40                	jne    c000d33a <File::File(char const*, Process*)+0xd4>
c000d2fa:	83 ec 0c             	sub    esp,0xc
c000d2fd:	68 f0 48 02 c0       	push   0xc00248f0
c000d302:	e8 f4 f9 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d307:	83 c4 10             	add    esp,0x10
c000d30a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d30e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d314:	0f b6 c0             	movzx  eax,al
c000d317:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d31e:	83 ec 0c             	sub    esp,0xc
c000d321:	50                   	push   eax
c000d322:	e8 fb 30 00 00       	call   c0010422 <LogicalDisk::mount()>
c000d327:	83 c4 10             	add    esp,0x10
c000d32a:	83 ec 0c             	sub    esp,0xc
c000d32d:	68 d9 69 02 c0       	push   0xc00269d9
c000d332:	e8 c4 f9 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d337:	83 c4 10             	add    esp,0x10
c000d33a:	90                   	nop
c000d33b:	83 c4 0c             	add    esp,0xc
c000d33e:	c3                   	ret    
c000d33f:	90                   	nop

c000d340 <File::open(FileOpenMode)>:
c000d340:	53                   	push   ebx
c000d341:	b8 0b 00 00 00       	mov    eax,0xb
c000d346:	83 ec 08             	sub    esp,0x8
c000d349:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d34d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d354:	80 fa 19             	cmp    dl,0x19
c000d357:	77 40                	ja     c000d399 <File::open(FileOpenMode)+0x59>
c000d359:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000d360:	85 d2                	test   edx,edx
c000d362:	74 35                	je     c000d399 <File::open(FileOpenMode)+0x59>
c000d364:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d36a:	85 d2                	test   edx,edx
c000d36c:	74 2b                	je     c000d399 <File::open(FileOpenMode)+0x59>
c000d36e:	b8 06 00 00 00       	mov    eax,0x6
c000d373:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d377:	75 20                	jne    c000d399 <File::open(FileOpenMode)+0x59>
c000d379:	8b 02                	mov    eax,DWORD PTR [edx]
c000d37b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d381:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d385:	51                   	push   ecx
c000d386:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d389:	51                   	push   ecx
c000d38a:	52                   	push   edx
c000d38b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d38e:	83 c4 10             	add    esp,0x10
c000d391:	85 c0                	test   eax,eax
c000d393:	75 04                	jne    c000d399 <File::open(FileOpenMode)+0x59>
c000d395:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d399:	83 c4 08             	add    esp,0x8
c000d39c:	5b                   	pop    ebx
c000d39d:	c3                   	ret    

c000d39e <File::close()>:
c000d39e:	53                   	push   ebx
c000d39f:	b8 0b 00 00 00       	mov    eax,0xb
c000d3a4:	83 ec 08             	sub    esp,0x8
c000d3a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d3ab:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d3b2:	80 fa 19             	cmp    dl,0x19
c000d3b5:	77 41                	ja     c000d3f8 <File::close()+0x5a>
c000d3b7:	8b 1c 95 c0 84 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7b40]
c000d3be:	85 db                	test   ebx,ebx
c000d3c0:	74 36                	je     c000d3f8 <File::close()+0x5a>
c000d3c2:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d3c9:	74 2d                	je     c000d3f8 <File::close()+0x5a>
c000d3cb:	b8 05 00 00 00       	mov    eax,0x5
c000d3d0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d3d4:	74 22                	je     c000d3f8 <File::close()+0x5a>
c000d3d6:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d3da:	8b 04 95 c0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b40]
c000d3e1:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d3e7:	53                   	push   ebx
c000d3e8:	53                   	push   ebx
c000d3e9:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3eb:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d3f1:	50                   	push   eax
c000d3f2:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d3f5:	83 c4 10             	add    esp,0x10
c000d3f8:	83 c4 08             	add    esp,0x8
c000d3fb:	5b                   	pop    ebx
c000d3fc:	c3                   	ret    
c000d3fd:	90                   	nop

c000d3fe <File::seek(unsigned long long)>:
c000d3fe:	56                   	push   esi
c000d3ff:	53                   	push   ebx
c000d400:	b8 0b 00 00 00       	mov    eax,0xb
c000d405:	51                   	push   ecx
c000d406:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d40a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d40e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d415:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d419:	80 fa 19             	cmp    dl,0x19
c000d41c:	77 31                	ja     c000d44f <File::seek(unsigned long long)+0x51>
c000d41e:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000d425:	85 d2                	test   edx,edx
c000d427:	74 26                	je     c000d44f <File::seek(unsigned long long)+0x51>
c000d429:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d42f:	85 d2                	test   edx,edx
c000d431:	74 1c                	je     c000d44f <File::seek(unsigned long long)+0x51>
c000d433:	b8 05 00 00 00       	mov    eax,0x5
c000d438:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d43c:	74 11                	je     c000d44f <File::seek(unsigned long long)+0x51>
c000d43e:	8b 02                	mov    eax,DWORD PTR [edx]
c000d440:	53                   	push   ebx
c000d441:	51                   	push   ecx
c000d442:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d448:	52                   	push   edx
c000d449:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d44c:	83 c4 10             	add    esp,0x10
c000d44f:	5a                   	pop    edx
c000d450:	5b                   	pop    ebx
c000d451:	5e                   	pop    esi
c000d452:	c3                   	ret    
c000d453:	90                   	nop

c000d454 <File::tell(unsigned long long*)>:
c000d454:	83 ec 0c             	sub    esp,0xc
c000d457:	b8 0b 00 00 00       	mov    eax,0xb
c000d45c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d460:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d467:	80 fa 19             	cmp    dl,0x19
c000d46a:	77 34                	ja     c000d4a0 <File::tell(unsigned long long*)+0x4c>
c000d46c:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000d473:	85 d2                	test   edx,edx
c000d475:	74 29                	je     c000d4a0 <File::tell(unsigned long long*)+0x4c>
c000d477:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d47d:	85 d2                	test   edx,edx
c000d47f:	74 1f                	je     c000d4a0 <File::tell(unsigned long long*)+0x4c>
c000d481:	b8 05 00 00 00       	mov    eax,0x5
c000d486:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d48a:	74 14                	je     c000d4a0 <File::tell(unsigned long long*)+0x4c>
c000d48c:	50                   	push   eax
c000d48d:	8b 02                	mov    eax,DWORD PTR [edx]
c000d48f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d493:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d499:	52                   	push   edx
c000d49a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d49d:	83 c4 10             	add    esp,0x10
c000d4a0:	83 c4 0c             	add    esp,0xc
c000d4a3:	c3                   	ret    

c000d4a4 <File::rewind()>:
c000d4a4:	83 ec 10             	sub    esp,0x10
c000d4a7:	6a 00                	push   0x0
c000d4a9:	6a 00                	push   0x0
c000d4ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4af:	e8 4a ff ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c000d4b4:	83 c4 1c             	add    esp,0x1c
c000d4b7:	c3                   	ret    

c000d4b8 <File::unlink()>:
c000d4b8:	83 ec 0c             	sub    esp,0xc
c000d4bb:	b8 0b 00 00 00       	mov    eax,0xb
c000d4c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d4c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d4cb:	80 f9 19             	cmp    cl,0x19
c000d4ce:	77 2f                	ja     c000d4ff <File::unlink()+0x47>
c000d4d0:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d4d7:	85 c9                	test   ecx,ecx
c000d4d9:	74 24                	je     c000d4ff <File::unlink()+0x47>
c000d4db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d4e1:	85 c9                	test   ecx,ecx
c000d4e3:	74 1a                	je     c000d4ff <File::unlink()+0x47>
c000d4e5:	b8 06 00 00 00       	mov    eax,0x6
c000d4ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d4ee:	75 0f                	jne    c000d4ff <File::unlink()+0x47>
c000d4f0:	83 c2 0d             	add    edx,0xd
c000d4f3:	50                   	push   eax
c000d4f4:	50                   	push   eax
c000d4f5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d4f7:	52                   	push   edx
c000d4f8:	51                   	push   ecx
c000d4f9:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d4fc:	83 c4 10             	add    esp,0x10
c000d4ff:	83 c4 0c             	add    esp,0xc
c000d502:	c3                   	ret    
c000d503:	90                   	nop

c000d504 <File::rename(char const*)>:
c000d504:	83 ec 0c             	sub    esp,0xc
c000d507:	b8 0b 00 00 00       	mov    eax,0xb
c000d50c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d510:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d517:	80 f9 19             	cmp    cl,0x19
c000d51a:	77 32                	ja     c000d54e <File::rename(char const*)+0x4a>
c000d51c:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d523:	85 c9                	test   ecx,ecx
c000d525:	74 27                	je     c000d54e <File::rename(char const*)+0x4a>
c000d527:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d52d:	85 c9                	test   ecx,ecx
c000d52f:	74 1d                	je     c000d54e <File::rename(char const*)+0x4a>
c000d531:	b8 06 00 00 00       	mov    eax,0x6
c000d536:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d53a:	75 12                	jne    c000d54e <File::rename(char const*)+0x4a>
c000d53c:	83 c2 0d             	add    edx,0xd
c000d53f:	50                   	push   eax
c000d540:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d546:	52                   	push   edx
c000d547:	51                   	push   ecx
c000d548:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d54b:	83 c4 10             	add    esp,0x10
c000d54e:	83 c4 0c             	add    esp,0xc
c000d551:	c3                   	ret    

c000d552 <File::chfatattr(unsigned char, unsigned char)>:
c000d552:	57                   	push   edi
c000d553:	b8 0b 00 00 00       	mov    eax,0xb
c000d558:	56                   	push   esi
c000d559:	53                   	push   ebx
c000d55a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d55e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d562:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d569:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d56d:	80 f9 19             	cmp    cl,0x19
c000d570:	77 37                	ja     c000d5a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d572:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d579:	85 c9                	test   ecx,ecx
c000d57b:	74 2c                	je     c000d5a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d57d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d583:	85 c9                	test   ecx,ecx
c000d585:	74 22                	je     c000d5a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d587:	b8 06 00 00 00       	mov    eax,0x6
c000d58c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d590:	75 17                	jne    c000d5a9 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d592:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d594:	89 f0                	mov    eax,esi
c000d596:	83 c2 0d             	add    edx,0xd
c000d599:	0f b6 f0             	movzx  esi,al
c000d59c:	0f b6 db             	movzx  ebx,bl
c000d59f:	56                   	push   esi
c000d5a0:	53                   	push   ebx
c000d5a1:	52                   	push   edx
c000d5a2:	51                   	push   ecx
c000d5a3:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d5a6:	83 c4 10             	add    esp,0x10
c000d5a9:	5b                   	pop    ebx
c000d5aa:	5e                   	pop    esi
c000d5ab:	5f                   	pop    edi
c000d5ac:	c3                   	ret    
c000d5ad:	90                   	nop

c000d5ae <File::exists()>:
c000d5ae:	83 ec 0c             	sub    esp,0xc
c000d5b1:	31 c0                	xor    eax,eax
c000d5b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5b7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d5be:	80 f9 19             	cmp    cl,0x19
c000d5c1:	77 24                	ja     c000d5e7 <File::exists()+0x39>
c000d5c3:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d5ca:	85 c9                	test   ecx,ecx
c000d5cc:	74 19                	je     c000d5e7 <File::exists()+0x39>
c000d5ce:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d5d4:	85 c9                	test   ecx,ecx
c000d5d6:	74 0f                	je     c000d5e7 <File::exists()+0x39>
c000d5d8:	83 c2 0d             	add    edx,0xd
c000d5db:	50                   	push   eax
c000d5dc:	50                   	push   eax
c000d5dd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d5df:	52                   	push   edx
c000d5e0:	51                   	push   ecx
c000d5e1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d5e4:	83 c4 10             	add    esp,0x10
c000d5e7:	83 c4 0c             	add    esp,0xc
c000d5ea:	c3                   	ret    
c000d5eb:	90                   	nop

c000d5ec <File::stat(unsigned long long*, bool*)>:
c000d5ec:	56                   	push   esi
c000d5ed:	53                   	push   ebx
c000d5ee:	50                   	push   eax
c000d5ef:	b8 0b 00 00 00       	mov    eax,0xb
c000d5f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d5f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d5fc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d603:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d607:	80 f9 19             	cmp    cl,0x19
c000d60a:	77 3d                	ja     c000d649 <File::stat(unsigned long long*, bool*)+0x5d>
c000d60c:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d613:	85 c9                	test   ecx,ecx
c000d615:	74 32                	je     c000d649 <File::stat(unsigned long long*, bool*)+0x5d>
c000d617:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d61d:	85 c9                	test   ecx,ecx
c000d61f:	74 28                	je     c000d649 <File::stat(unsigned long long*, bool*)+0x5d>
c000d621:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d623:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d627:	74 13                	je     c000d63c <File::stat(unsigned long long*, bool*)+0x50>
c000d629:	83 ec 04             	sub    esp,0x4
c000d62c:	56                   	push   esi
c000d62d:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d633:	51                   	push   ecx
c000d634:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d637:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d63a:	eb 0a                	jmp    c000d646 <File::stat(unsigned long long*, bool*)+0x5a>
c000d63c:	53                   	push   ebx
c000d63d:	83 c2 0d             	add    edx,0xd
c000d640:	56                   	push   esi
c000d641:	52                   	push   edx
c000d642:	51                   	push   ecx
c000d643:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d646:	83 c4 10             	add    esp,0x10
c000d649:	5a                   	pop    edx
c000d64a:	5b                   	pop    ebx
c000d64b:	5e                   	pop    esi
c000d64c:	c3                   	ret    

c000d64d <Fs::setcwd(Process*, char*)>:
c000d64d:	55                   	push   ebp
c000d64e:	57                   	push   edi
c000d64f:	56                   	push   esi
c000d650:	53                   	push   ebx
c000d651:	81 ec 20 02 00 00    	sub    esp,0x220
c000d657:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d65e:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d664:	57                   	push   edi
c000d665:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d66c:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d670:	56                   	push   esi
c000d671:	e8 46 fa ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d676:	89 34 24             	mov    DWORD PTR [esp],esi
c000d679:	e8 22 30 ff ff       	call   c00006a0 <strlen>
c000d67e:	83 c4 10             	add    esp,0x10
c000d681:	83 f8 02             	cmp    eax,0x2
c000d684:	77 15                	ja     c000d69b <Fs::setcwd(Process*, char*)+0x4e>
c000d686:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000d68b:	83 eb 41             	sub    ebx,0x41
c000d68e:	8b 04 9d c0 84 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7b40]
c000d695:	85 c0                	test   eax,eax
c000d697:	75 1c                	jne    c000d6b5 <Fs::setcwd(Process*, char*)+0x68>
c000d699:	eb 4c                	jmp    c000d6e7 <Fs::setcwd(Process*, char*)+0x9a>
c000d69b:	83 ec 0c             	sub    esp,0xc
c000d69e:	56                   	push   esi
c000d69f:	e8 fc 2f ff ff       	call   c00006a0 <strlen>
c000d6a4:	83 c4 10             	add    esp,0x10
c000d6a7:	83 f8 03             	cmp    eax,0x3
c000d6aa:	75 74                	jne    c000d720 <Fs::setcwd(Process*, char*)+0xd3>
c000d6ac:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d6b1:	75 6d                	jne    c000d720 <Fs::setcwd(Process*, char*)+0xd3>
c000d6b3:	eb d1                	jmp    c000d686 <Fs::setcwd(Process*, char*)+0x39>
c000d6b5:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000d6bc:	75 29                	jne    c000d6e7 <Fs::setcwd(Process*, char*)+0x9a>
c000d6be:	83 ec 0c             	sub    esp,0xc
c000d6c1:	68 c8 48 02 c0       	push   0xc00248c8
c000d6c6:	e8 30 f6 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d6cb:	5a                   	pop    edx
c000d6cc:	ff 34 9d c0 84 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7b40]
c000d6d3:	e8 4a 2d 00 00       	call   c0010422 <LogicalDisk::mount()>
c000d6d8:	c7 04 24 d9 69 02 c0 	mov    DWORD PTR [esp],0xc00269d9
c000d6df:	e8 17 f6 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d6e4:	83 c4 10             	add    esp,0x10
c000d6e7:	b8 03 00 00 00       	mov    eax,0x3
c000d6ec:	83 fb 19             	cmp    ebx,0x19
c000d6ef:	0f 87 c6 00 00 00    	ja     c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d6f5:	8b 14 9d c0 84 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7b40]
c000d6fc:	b8 05 00 00 00       	mov    eax,0x5
c000d701:	85 d2                	test   edx,edx
c000d703:	0f 84 b2 00 00 00    	je     c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d709:	b8 06 00 00 00       	mov    eax,0x6
c000d70e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d715:	0f 85 92 00 00 00    	jne    c000d7ad <Fs::setcwd(Process*, char*)+0x160>
c000d71b:	e9 9b 00 00 00       	jmp    c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d720:	83 ec 0c             	sub    esp,0xc
c000d723:	68 14 01 00 00       	push   0x114
c000d728:	e8 e2 c2 ff ff       	call   c0009a0f <malloc>
c000d72d:	83 c4 0c             	add    esp,0xc
c000d730:	89 c3                	mov    ebx,eax
c000d732:	55                   	push   ebp
c000d733:	56                   	push   esi
c000d734:	50                   	push   eax
c000d735:	e8 2c fb ff ff       	call   c000d266 <File::File(char const*, Process*)>
c000d73a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d73f:	83 c4 0c             	add    esp,0xc
c000d742:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d746:	50                   	push   eax
c000d747:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d74b:	50                   	push   eax
c000d74c:	53                   	push   ebx
c000d74d:	e8 9a fe ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c000d752:	83 c4 10             	add    esp,0x10
c000d755:	83 f8 02             	cmp    eax,0x2
c000d758:	74 04                	je     c000d75e <Fs::setcwd(Process*, char*)+0x111>
c000d75a:	85 c0                	test   eax,eax
c000d75c:	74 1c                	je     c000d77a <Fs::setcwd(Process*, char*)+0x12d>
c000d75e:	b8 01 00 00 00       	mov    eax,0x1
c000d763:	85 db                	test   ebx,ebx
c000d765:	74 54                	je     c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d767:	83 ec 0c             	sub    esp,0xc
c000d76a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d76c:	53                   	push   ebx
c000d76d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d770:	83 c4 10             	add    esp,0x10
c000d773:	b8 01 00 00 00       	mov    eax,0x1
c000d778:	eb 41                	jmp    c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d77a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d77f:	75 1c                	jne    c000d79d <Fs::setcwd(Process*, char*)+0x150>
c000d781:	b8 02 00 00 00       	mov    eax,0x2
c000d786:	85 db                	test   ebx,ebx
c000d788:	74 31                	je     c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d78a:	83 ec 0c             	sub    esp,0xc
c000d78d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d78f:	53                   	push   ebx
c000d790:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d793:	83 c4 10             	add    esp,0x10
c000d796:	b8 02 00 00 00       	mov    eax,0x2
c000d79b:	eb 1e                	jmp    c000d7bb <Fs::setcwd(Process*, char*)+0x16e>
c000d79d:	85 db                	test   ebx,ebx
c000d79f:	74 0c                	je     c000d7ad <Fs::setcwd(Process*, char*)+0x160>
c000d7a1:	83 ec 0c             	sub    esp,0xc
c000d7a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d7a6:	53                   	push   ebx
c000d7a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d7aa:	83 c4 10             	add    esp,0x10
c000d7ad:	50                   	push   eax
c000d7ae:	50                   	push   eax
c000d7af:	56                   	push   esi
c000d7b0:	57                   	push   edi
c000d7b1:	e8 8a 2f ff ff       	call   c0000740 <strcpy>
c000d7b6:	83 c4 10             	add    esp,0x10
c000d7b9:	31 c0                	xor    eax,eax
c000d7bb:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d7c1:	5b                   	pop    ebx
c000d7c2:	5e                   	pop    esi
c000d7c3:	5f                   	pop    edi
c000d7c4:	5d                   	pop    ebp
c000d7c5:	c3                   	ret    

c000d7c6 <Directory::Directory(char const*, Process*)>:
c000d7c6:	83 ec 0c             	sub    esp,0xc
c000d7c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7cd:	83 ec 08             	sub    esp,0x8
c000d7d0:	6a 00                	push   0x0
c000d7d2:	50                   	push   eax
c000d7d3:	e8 ba dd ff ff       	call   c000b592 <UnixFile::UnixFile(int)>
c000d7d8:	83 c4 10             	add    esp,0x10
c000d7db:	ba d0 49 02 c0       	mov    edx,0xc00249d0
c000d7e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e4:	89 10                	mov    DWORD PTR [eax],edx
c000d7e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d7ea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f4:	83 c0 0d             	add    eax,0xd
c000d7f7:	83 ec 04             	sub    esp,0x4
c000d7fa:	52                   	push   edx
c000d7fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ff:	50                   	push   eax
c000d800:	e8 b7 f8 ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d80f:	8d 50 bf             	lea    edx,[eax-0x41]
c000d812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d816:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d81c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d820:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d828:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d82e:	0f b6 c0             	movzx  eax,al
c000d831:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d838:	85 c0                	test   eax,eax
c000d83a:	74 5e                	je     c000d89a <Directory::Directory(char const*, Process*)+0xd4>
c000d83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d840:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d846:	0f b6 c0             	movzx  eax,al
c000d849:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d850:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d856:	85 c0                	test   eax,eax
c000d858:	75 40                	jne    c000d89a <Directory::Directory(char const*, Process*)+0xd4>
c000d85a:	83 ec 0c             	sub    esp,0xc
c000d85d:	68 18 49 02 c0       	push   0xc0024918
c000d862:	e8 94 f4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d867:	83 c4 10             	add    esp,0x10
c000d86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86e:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000d874:	0f b6 c0             	movzx  eax,al
c000d877:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c000d87e:	83 ec 0c             	sub    esp,0xc
c000d881:	50                   	push   eax
c000d882:	e8 9b 2b 00 00       	call   c0010422 <LogicalDisk::mount()>
c000d887:	83 c4 10             	add    esp,0x10
c000d88a:	83 ec 0c             	sub    esp,0xc
c000d88d:	68 d9 69 02 c0       	push   0xc00269d9
c000d892:	e8 64 f4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000d897:	83 c4 10             	add    esp,0x10
c000d89a:	90                   	nop
c000d89b:	83 c4 0c             	add    esp,0xc
c000d89e:	c3                   	ret    
c000d89f:	90                   	nop

c000d8a0 <Directory::open()>:
c000d8a0:	53                   	push   ebx
c000d8a1:	b8 0b 00 00 00       	mov    eax,0xb
c000d8a6:	83 ec 08             	sub    esp,0x8
c000d8a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8ad:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d8b4:	80 fa 19             	cmp    dl,0x19
c000d8b7:	77 3d                	ja     c000d8f6 <Directory::open()+0x56>
c000d8b9:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000d8c0:	85 d2                	test   edx,edx
c000d8c2:	74 32                	je     c000d8f6 <Directory::open()+0x56>
c000d8c4:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d8ca:	85 d2                	test   edx,edx
c000d8cc:	74 28                	je     c000d8f6 <Directory::open()+0x56>
c000d8ce:	b8 06 00 00 00       	mov    eax,0x6
c000d8d3:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d8d7:	75 1d                	jne    c000d8f6 <Directory::open()+0x56>
c000d8d9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d8df:	50                   	push   eax
c000d8e0:	8b 02                	mov    eax,DWORD PTR [edx]
c000d8e2:	51                   	push   ecx
c000d8e3:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d8e6:	51                   	push   ecx
c000d8e7:	52                   	push   edx
c000d8e8:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d8eb:	83 c4 10             	add    esp,0x10
c000d8ee:	85 c0                	test   eax,eax
c000d8f0:	75 04                	jne    c000d8f6 <Directory::open()+0x56>
c000d8f2:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d8f6:	83 c4 08             	add    esp,0x8
c000d8f9:	5b                   	pop    ebx
c000d8fa:	c3                   	ret    
c000d8fb:	90                   	nop

c000d8fc <Directory::close()>:
c000d8fc:	53                   	push   ebx
c000d8fd:	b8 0b 00 00 00       	mov    eax,0xb
c000d902:	83 ec 08             	sub    esp,0x8
c000d905:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d909:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d910:	80 fa 19             	cmp    dl,0x19
c000d913:	77 41                	ja     c000d956 <Directory::close()+0x5a>
c000d915:	8b 1c 95 c0 84 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd7b40]
c000d91c:	85 db                	test   ebx,ebx
c000d91e:	74 36                	je     c000d956 <Directory::close()+0x5a>
c000d920:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d927:	74 2d                	je     c000d956 <Directory::close()+0x5a>
c000d929:	b8 05 00 00 00       	mov    eax,0x5
c000d92e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d932:	74 22                	je     c000d956 <Directory::close()+0x5a>
c000d934:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d938:	8b 04 95 c0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b40]
c000d93f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d945:	53                   	push   ebx
c000d946:	53                   	push   ebx
c000d947:	8b 10                	mov    edx,DWORD PTR [eax]
c000d949:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d94f:	50                   	push   eax
c000d950:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d953:	83 c4 10             	add    esp,0x10
c000d956:	83 c4 08             	add    esp,0x8
c000d959:	5b                   	pop    ebx
c000d95a:	c3                   	ret    
c000d95b:	90                   	nop

c000d95c <Directory::unlink()>:
c000d95c:	83 ec 0c             	sub    esp,0xc
c000d95f:	b8 0b 00 00 00       	mov    eax,0xb
c000d964:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d968:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d96f:	80 f9 19             	cmp    cl,0x19
c000d972:	77 2f                	ja     c000d9a3 <Directory::unlink()+0x47>
c000d974:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d97b:	85 c9                	test   ecx,ecx
c000d97d:	74 24                	je     c000d9a3 <Directory::unlink()+0x47>
c000d97f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d985:	85 c9                	test   ecx,ecx
c000d987:	74 1a                	je     c000d9a3 <Directory::unlink()+0x47>
c000d989:	b8 06 00 00 00       	mov    eax,0x6
c000d98e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d992:	75 0f                	jne    c000d9a3 <Directory::unlink()+0x47>
c000d994:	83 c2 0d             	add    edx,0xd
c000d997:	50                   	push   eax
c000d998:	50                   	push   eax
c000d999:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d99b:	52                   	push   edx
c000d99c:	51                   	push   ecx
c000d99d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	83 c4 0c             	add    esp,0xc
c000d9a6:	c3                   	ret    
c000d9a7:	90                   	nop

c000d9a8 <Directory::rename(char const*)>:
c000d9a8:	83 ec 0c             	sub    esp,0xc
c000d9ab:	b8 0b 00 00 00       	mov    eax,0xb
c000d9b0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d9bb:	80 f9 19             	cmp    cl,0x19
c000d9be:	77 32                	ja     c000d9f2 <Directory::rename(char const*)+0x4a>
c000d9c0:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000d9c7:	85 c9                	test   ecx,ecx
c000d9c9:	74 27                	je     c000d9f2 <Directory::rename(char const*)+0x4a>
c000d9cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d9d1:	85 c9                	test   ecx,ecx
c000d9d3:	74 1d                	je     c000d9f2 <Directory::rename(char const*)+0x4a>
c000d9d5:	b8 06 00 00 00       	mov    eax,0x6
c000d9da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d9de:	75 12                	jne    c000d9f2 <Directory::rename(char const*)+0x4a>
c000d9e0:	83 c2 0d             	add    edx,0xd
c000d9e3:	50                   	push   eax
c000d9e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d9e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9ea:	52                   	push   edx
c000d9eb:	51                   	push   ecx
c000d9ec:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d9ef:	83 c4 10             	add    esp,0x10
c000d9f2:	83 c4 0c             	add    esp,0xc
c000d9f5:	c3                   	ret    

c000d9f6 <Directory::exists()>:
c000d9f6:	83 ec 0c             	sub    esp,0xc
c000d9f9:	31 c0                	xor    eax,eax
c000d9fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d9ff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da06:	80 f9 19             	cmp    cl,0x19
c000da09:	77 24                	ja     c000da2f <Directory::exists()+0x39>
c000da0b:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000da12:	85 c9                	test   ecx,ecx
c000da14:	74 19                	je     c000da2f <Directory::exists()+0x39>
c000da16:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000da1c:	85 c9                	test   ecx,ecx
c000da1e:	74 0f                	je     c000da2f <Directory::exists()+0x39>
c000da20:	83 c2 0d             	add    edx,0xd
c000da23:	50                   	push   eax
c000da24:	50                   	push   eax
c000da25:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da27:	52                   	push   edx
c000da28:	51                   	push   ecx
c000da29:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000da2c:	83 c4 10             	add    esp,0x10
c000da2f:	83 c4 0c             	add    esp,0xc
c000da32:	c3                   	ret    
c000da33:	90                   	nop

c000da34 <Directory::read(dirent*)>:
c000da34:	83 ec 1c             	sub    esp,0x1c
c000da37:	b8 0b 00 00 00       	mov    eax,0xb
c000da3c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000da40:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000da47:	80 fa 19             	cmp    dl,0x19
c000da4a:	77 30                	ja     c000da7c <Directory::read(dirent*)+0x48>
c000da4c:	8b 14 95 c0 84 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7b40]
c000da53:	85 d2                	test   edx,edx
c000da55:	74 25                	je     c000da7c <Directory::read(dirent*)+0x48>
c000da57:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000da5e:	74 1c                	je     c000da7c <Directory::read(dirent*)+0x48>
c000da60:	83 ec 0c             	sub    esp,0xc
c000da63:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da65:	8d 54 24 18          	lea    edx,[esp+0x18]
c000da69:	52                   	push   edx
c000da6a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da6e:	6a 00                	push   0x0
c000da70:	68 10 01 00 00       	push   0x110
c000da75:	51                   	push   ecx
c000da76:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000da79:	83 c4 20             	add    esp,0x20
c000da7c:	83 c4 1c             	add    esp,0x1c
c000da7f:	c3                   	ret    

c000da80 <Directory::create()>:
c000da80:	83 ec 0c             	sub    esp,0xc
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da8c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000da93:	80 f9 19             	cmp    cl,0x19
c000da96:	77 2f                	ja     c000dac7 <Directory::create()+0x47>
c000da98:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c000da9f:	85 c9                	test   ecx,ecx
c000daa1:	74 24                	je     c000dac7 <Directory::create()+0x47>
c000daa3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000daa9:	85 c9                	test   ecx,ecx
c000daab:	74 1a                	je     c000dac7 <Directory::create()+0x47>
c000daad:	b8 06 00 00 00       	mov    eax,0x6
c000dab2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000dab6:	75 0f                	jne    c000dac7 <Directory::create()+0x47>
c000dab8:	83 c2 0d             	add    edx,0xd
c000dabb:	50                   	push   eax
c000dabc:	50                   	push   eax
c000dabd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dabf:	52                   	push   edx
c000dac0:	51                   	push   ecx
c000dac1:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000dac4:	83 c4 10             	add    esp,0x10
c000dac7:	83 c4 0c             	add    esp,0xc
c000daca:	c3                   	ret    
c000dacb:	90                   	nop

c000dacc <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000dacc:	b8 0a 00 00 00       	mov    eax,0xa
c000dad1:	c3                   	ret    
c000dad2:	66 90                	xchg   ax,ax

c000dad4 <Bus::Bus(char const*)>:
c000dad4:	83 ec 0c             	sub    esp,0xc
c000dad7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dadb:	83 ec 08             	sub    esp,0x8
c000dade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dae2:	50                   	push   eax
c000dae3:	e8 8a 09 00 00       	call   c000e472 <Device::Device(char const*)>
c000dae8:	83 c4 10             	add    esp,0x10
c000daeb:	ba ec 49 02 c0       	mov    edx,0xc00249ec
c000daf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daf4:	89 10                	mov    DWORD PTR [eax],edx
c000daf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dafa:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000db04:	90                   	nop
c000db05:	83 c4 0c             	add    esp,0xc
c000db08:	c3                   	ret    
c000db09:	90                   	nop
c000db0a:	66 90                	xchg   ax,ax

c000db0c <Bus::~Bus()>:
c000db0c:	83 ec 0c             	sub    esp,0xc
c000db0f:	ba ec 49 02 c0       	mov    edx,0xc00249ec
c000db14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db18:	89 10                	mov    DWORD PTR [eax],edx
c000db1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db1e:	83 ec 0c             	sub    esp,0xc
c000db21:	50                   	push   eax
c000db22:	e8 15 06 00 00       	call   c000e13c <Device::~Device()>
c000db27:	83 c4 10             	add    esp,0x10
c000db2a:	90                   	nop
c000db2b:	83 c4 0c             	add    esp,0xc
c000db2e:	c3                   	ret    
c000db2f:	90                   	nop

c000db30 <Bus::~Bus()>:
c000db30:	83 ec 0c             	sub    esp,0xc
c000db33:	83 ec 0c             	sub    esp,0xc
c000db36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3a:	e8 cd ff ff ff       	call   c000db0c <Bus::~Bus()>
c000db3f:	83 c4 10             	add    esp,0x10
c000db42:	83 ec 08             	sub    esp,0x8
c000db45:	68 58 01 00 00       	push   0x158
c000db4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db4e:	e8 c7 f0 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000db53:	83 c4 10             	add    esp,0x10
c000db56:	83 c4 0c             	add    esp,0xc
c000db59:	c3                   	ret    
c000db5a:	66 90                	xchg   ax,ax

c000db5c <Buzzer::Buzzer(char const*)>:
c000db5c:	83 ec 0c             	sub    esp,0xc
c000db5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db63:	83 ec 08             	sub    esp,0x8
c000db66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6a:	50                   	push   eax
c000db6b:	e8 02 09 00 00       	call   c000e472 <Device::Device(char const*)>
c000db70:	83 c4 10             	add    esp,0x10
c000db73:	ba 18 4a 02 c0       	mov    edx,0xc0024a18
c000db78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db7c:	89 10                	mov    DWORD PTR [eax],edx
c000db7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db82:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000db8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db90:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000db9a:	90                   	nop
c000db9b:	83 c4 0c             	add    esp,0xc
c000db9e:	c3                   	ret    
c000db9f:	90                   	nop

c000dba0 <Buzzer::~Buzzer()>:
c000dba0:	83 ec 0c             	sub    esp,0xc
c000dba3:	ba 18 4a 02 c0       	mov    edx,0xc0024a18
c000dba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbac:	89 10                	mov    DWORD PTR [eax],edx
c000dbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb2:	83 ec 0c             	sub    esp,0xc
c000dbb5:	50                   	push   eax
c000dbb6:	e8 81 05 00 00       	call   c000e13c <Device::~Device()>
c000dbbb:	83 c4 10             	add    esp,0x10
c000dbbe:	90                   	nop
c000dbbf:	83 c4 0c             	add    esp,0xc
c000dbc2:	c3                   	ret    
c000dbc3:	90                   	nop

c000dbc4 <Buzzer::~Buzzer()>:
c000dbc4:	83 ec 0c             	sub    esp,0xc
c000dbc7:	83 ec 0c             	sub    esp,0xc
c000dbca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbce:	e8 cd ff ff ff       	call   c000dba0 <Buzzer::~Buzzer()>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	83 ec 08             	sub    esp,0x8
c000dbd9:	68 5c 01 00 00       	push   0x15c
c000dbde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe2:	e8 33 f0 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000dbe7:	83 c4 10             	add    esp,0x10
c000dbea:	83 c4 0c             	add    esp,0xc
c000dbed:	c3                   	ret    

c000dbee <Buzzer::stop()>:
c000dbee:	83 ec 14             	sub    esp,0x14
c000dbf1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dbf5:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbf7:	6a 00                	push   0x0
c000dbf9:	50                   	push   eax
c000dbfa:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dbfd:	83 c4 1c             	add    esp,0x1c
c000dc00:	c3                   	ret    

c000dc01 <beepThread(void*)>:
c000dc01:	53                   	push   ebx
c000dc02:	83 ec 08             	sub    esp,0x8
c000dc05:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000dc0a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc0e:	48                   	dec    eax
c000dc0f:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000dc14:	75 02                	jne    c000dc18 <beepThread(void*)+0x17>
c000dc16:	fb                   	sti    
c000dc17:	90                   	nop
c000dc18:	83 ec 0c             	sub    esp,0xc
c000dc1b:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000dc22:	50                   	push   eax
c000dc23:	e8 80 ac 00 00       	call   c00188a8 <milliTenthSleep(unsigned int)>
c000dc28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc2b:	e8 be ff ff ff       	call   c000dbee <Buzzer::stop()>
c000dc30:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000dc38:	83 c4 18             	add    esp,0x18
c000dc3b:	5b                   	pop    ebx
c000dc3c:	e9 67 ab 00 00       	jmp    c00187a8 <blockTask(TaskState)>
c000dc41:	90                   	nop

c000dc42 <Buzzer::beep(int, int, bool)>:
c000dc42:	57                   	push   edi
c000dc43:	56                   	push   esi
c000dc44:	53                   	push   ebx
c000dc45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dc49:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000dc4d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000dc51:	50                   	push   eax
c000dc52:	50                   	push   eax
c000dc53:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dc55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc59:	53                   	push   ebx
c000dc5a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc5d:	83 c4 10             	add    esp,0x10
c000dc60:	89 f8                	mov    eax,edi
c000dc62:	84 c0                	test   al,al
c000dc64:	74 1e                	je     c000dc84 <Buzzer::beep(int, int, bool)+0x42>
c000dc66:	83 ec 0c             	sub    esp,0xc
c000dc69:	6b f6 0a             	imul   esi,esi,0xa
c000dc6c:	56                   	push   esi
c000dc6d:	e8 36 ac 00 00       	call   c00188a8 <milliTenthSleep(unsigned int)>
c000dc72:	83 c4 10             	add    esp,0x10
c000dc75:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dc79:	5b                   	pop    ebx
c000dc7a:	5e                   	pop    esi
c000dc7b:	5f                   	pop    edi
c000dc7c:	e9 6d ff ff ff       	jmp    c000dbee <Buzzer::stop()>
c000dc81:	8d 76 00             	lea    esi,[esi+0x0]
c000dc84:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000dc8a:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000dc8f:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000dc97:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc9b:	c7 44 24 14 01 dc 00 c0 	mov    DWORD PTR [esp+0x14],0xc000dc01
c000dca3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dca7:	5b                   	pop    ebx
c000dca8:	5e                   	pop    esi
c000dca9:	5f                   	pop    edi
c000dcaa:	e9 e5 a6 00 00       	jmp    c0018394 <Process::createThread(void (*)(void*), void*, int)>
c000dcaf:	90                   	nop

c000dcb0 <User::loadClockSettings(int)>:
c000dcb0:	53                   	push   ebx
c000dcb1:	83 ec 14             	sub    esp,0x14
c000dcb4:	68 14 01 00 00       	push   0x114
c000dcb9:	e8 51 bd ff ff       	call   c0009a0f <malloc>
c000dcbe:	83 c4 0c             	add    esp,0xc
c000dcc1:	89 c3                	mov    ebx,eax
c000dcc3:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c000dcc9:	68 40 4a 02 c0       	push   0xc0024a40
c000dcce:	50                   	push   eax
c000dccf:	e8 92 f5 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c000dcd4:	58                   	pop    eax
c000dcd5:	5a                   	pop    edx
c000dcd6:	6a 01                	push   0x1
c000dcd8:	53                   	push   ebx
c000dcd9:	e8 62 f6 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c000dcde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dce1:	e8 b8 f6 ff ff       	call   c000d39e <File::close()>
c000dce6:	83 c4 10             	add    esp,0x10
c000dce9:	85 db                	test   ebx,ebx
c000dceb:	74 0f                	je     c000dcfc <User::loadClockSettings(int)+0x4c>
c000dced:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dcef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000dcf3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000dcf6:	83 c4 08             	add    esp,0x8
c000dcf9:	5b                   	pop    ebx
c000dcfa:	ff e0                	jmp    eax
c000dcfc:	83 c4 08             	add    esp,0x8
c000dcff:	5b                   	pop    ebx
c000dd00:	c3                   	ret    
c000dd01:	90                   	nop

c000dd02 <Clock::Clock(char const*)>:
c000dd02:	83 ec 0c             	sub    esp,0xc
c000dd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd09:	83 ec 08             	sub    esp,0x8
c000dd0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd10:	50                   	push   eax
c000dd11:	e8 5c 07 00 00       	call   c000e472 <Device::Device(char const*)>
c000dd16:	83 c4 10             	add    esp,0x10
c000dd19:	ba 68 4a 02 c0       	mov    edx,0xc0024a68
c000dd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd22:	89 10                	mov    DWORD PTR [eax],edx
c000dd24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd28:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000dd32:	90                   	nop
c000dd33:	83 c4 0c             	add    esp,0xc
c000dd36:	c3                   	ret    
c000dd37:	90                   	nop

c000dd38 <Clock::~Clock()>:
c000dd38:	83 ec 0c             	sub    esp,0xc
c000dd3b:	ba 68 4a 02 c0       	mov    edx,0xc0024a68
c000dd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd44:	89 10                	mov    DWORD PTR [eax],edx
c000dd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd4a:	83 ec 0c             	sub    esp,0xc
c000dd4d:	50                   	push   eax
c000dd4e:	e8 e9 03 00 00       	call   c000e13c <Device::~Device()>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	90                   	nop
c000dd57:	83 c4 0c             	add    esp,0xc
c000dd5a:	c3                   	ret    
c000dd5b:	90                   	nop

c000dd5c <Clock::~Clock()>:
c000dd5c:	83 ec 0c             	sub    esp,0xc
c000dd5f:	83 ec 0c             	sub    esp,0xc
c000dd62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd66:	e8 cd ff ff ff       	call   c000dd38 <Clock::~Clock()>
c000dd6b:	83 c4 10             	add    esp,0x10
c000dd6e:	83 ec 08             	sub    esp,0x8
c000dd71:	68 58 01 00 00       	push   0x158
c000dd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd7a:	e8 9b ee ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000dd7f:	83 c4 10             	add    esp,0x10
c000dd82:	83 c4 0c             	add    esp,0xc
c000dd85:	c3                   	ret    

c000dd86 <Clock::timeInSecondsLocal()>:
c000dd86:	53                   	push   ebx
c000dd87:	83 ec 14             	sub    esp,0x14
c000dd8a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dd8e:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd90:	50                   	push   eax
c000dd91:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000dd94:	0f b6 0d 3c 80 02 c0 	movzx  ecx,BYTE PTR ds:0xc002803c
c000dd9b:	03 0d 40 80 02 c0    	add    ecx,DWORD PTR ds:0xc0028040
c000dda1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dda7:	89 cb                	mov    ebx,ecx
c000dda9:	c1 fb 1f             	sar    ebx,0x1f
c000ddac:	01 c8                	add    eax,ecx
c000ddae:	11 da                	adc    edx,ebx
c000ddb0:	83 c4 10             	add    esp,0x10
c000ddb3:	31 c9                	xor    ecx,ecx
c000ddb5:	80 3d 3d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002803d,0x0
c000ddbc:	74 05                	je     c000ddc3 <Clock::timeInSecondsLocal()+0x3d>
c000ddbe:	b9 08 07 00 00       	mov    ecx,0x708
c000ddc3:	31 db                	xor    ebx,ebx
c000ddc5:	01 c8                	add    eax,ecx
c000ddc7:	11 da                	adc    edx,ebx
c000ddc9:	83 c4 08             	add    esp,0x8
c000ddcc:	5b                   	pop    ebx
c000ddcd:	c3                   	ret    

c000ddce <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000ddce:	57                   	push   edi
c000ddcf:	56                   	push   esi
c000ddd0:	53                   	push   ebx
c000ddd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ddd5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ddd9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dddb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dddf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000dde2:	0f b6 05 3c 80 02 c0 	movzx  eax,BYTE PTR ds:0xc002803c
c000dde9:	03 05 40 80 02 c0    	add    eax,DWORD PTR ds:0xc0028040
c000ddef:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000ddf5:	99                   	cdq    
c000ddf6:	29 c6                	sub    esi,eax
c000ddf8:	19 d7                	sbb    edi,edx
c000ddfa:	89 f0                	mov    eax,esi
c000ddfc:	89 fa                	mov    edx,edi
c000ddfe:	31 f6                	xor    esi,esi
c000de00:	80 3d 3d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002803d,0x0
c000de07:	74 05                	je     c000de0e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000de09:	be 08 07 00 00       	mov    esi,0x708
c000de0e:	31 ff                	xor    edi,edi
c000de10:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000de14:	29 f0                	sub    eax,esi
c000de16:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de1a:	19 fa                	sbb    edx,edi
c000de1c:	89 d8                	mov    eax,ebx
c000de1e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000de22:	5b                   	pop    ebx
c000de23:	5e                   	pop    esi
c000de24:	5f                   	pop    edi
c000de25:	ff e0                	jmp    eax

c000de27 <datetimeToSeconds(datetime_t)>:
c000de27:	55                   	push   ebp
c000de28:	57                   	push   edi
c000de29:	56                   	push   esi
c000de2a:	53                   	push   ebx
c000de2b:	83 ec 14             	sub    esp,0x14
c000de2e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000de32:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000de36:	89 d3                	mov    ebx,edx
c000de38:	0f b6 c6             	movzx  eax,dh
c000de3b:	c1 eb 10             	shr    ebx,0x10
c000de3e:	48                   	dec    eax
c000de3f:	66 81 eb 6c 07       	sub    bx,0x76c
c000de44:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000de48:	0f b6 f5             	movzx  esi,ch
c000de4b:	89 cf                	mov    edi,ecx
c000de4d:	6b f6 3c             	imul   esi,esi,0x3c
c000de50:	c1 ef 10             	shr    edi,0x10
c000de53:	0f b6 c9             	movzx  ecx,cl
c000de56:	89 f8                	mov    eax,edi
c000de58:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000de5e:	0f b6 f8             	movzx  edi,al
c000de61:	0f b6 d2             	movzx  edx,dl
c000de64:	01 fe                	add    esi,edi
c000de66:	01 f1                	add    ecx,esi
c000de68:	0f b7 f3             	movzx  esi,bx
c000de6b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000de6f:	c1 f9 1f             	sar    ecx,0x1f
c000de72:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000de77:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000de7b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000de80:	8b 0c 8d a0 4a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb560]
c000de87:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000de8b:	76 29                	jbe    c000deb6 <datetimeToSeconds(datetime_t)+0x8f>
c000de8d:	f6 c3 03             	test   bl,0x3
c000de90:	75 24                	jne    c000deb6 <datetimeToSeconds(datetime_t)+0x8f>
c000de92:	31 d2                	xor    edx,edx
c000de94:	bf 64 00 00 00       	mov    edi,0x64
c000de99:	89 d8                	mov    eax,ebx
c000de9b:	66 f7 f7             	div    di
c000de9e:	66 85 d2             	test   dx,dx
c000dea1:	75 12                	jne    c000deb5 <datetimeToSeconds(datetime_t)+0x8e>
c000dea3:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000dea9:	bf 90 01 00 00       	mov    edi,0x190
c000deae:	99                   	cdq    
c000deaf:	f7 ff                	idiv   edi
c000deb1:	85 d2                	test   edx,edx
c000deb3:	75 01                	jne    c000deb6 <datetimeToSeconds(datetime_t)+0x8f>
c000deb5:	41                   	inc    ecx
c000deb6:	66 83 fb 46          	cmp    bx,0x46
c000deba:	76 45                	jbe    c000df01 <datetimeToSeconds(datetime_t)+0xda>
c000debc:	bb 46 00 00 00       	mov    ebx,0x46
c000dec1:	bf 64 00 00 00       	mov    edi,0x64
c000dec6:	bd 90 01 00 00       	mov    ebp,0x190
c000decb:	b8 6d 01 00 00       	mov    eax,0x16d
c000ded0:	f6 c3 03             	test   bl,0x3
c000ded3:	75 23                	jne    c000def8 <datetimeToSeconds(datetime_t)+0xd1>
c000ded5:	89 d8                	mov    eax,ebx
c000ded7:	99                   	cdq    
c000ded8:	f7 ff                	idiv   edi
c000deda:	b8 6e 01 00 00       	mov    eax,0x16e
c000dedf:	85 d2                	test   edx,edx
c000dee1:	75 15                	jne    c000def8 <datetimeToSeconds(datetime_t)+0xd1>
c000dee3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000dee9:	99                   	cdq    
c000deea:	f7 fd                	idiv   ebp
c000deec:	83 fa 01             	cmp    edx,0x1
c000deef:	19 c0                	sbb    eax,eax
c000def1:	f7 d0                	not    eax
c000def3:	05 6e 01 00 00       	add    eax,0x16e
c000def8:	01 c1                	add    ecx,eax
c000defa:	43                   	inc    ebx
c000defb:	39 f3                	cmp    ebx,esi
c000defd:	7c cc                	jl     c000decb <datetimeToSeconds(datetime_t)+0xa4>
c000deff:	eb 35                	jmp    c000df36 <datetimeToSeconds(datetime_t)+0x10f>
c000df01:	74 33                	je     c000df36 <datetimeToSeconds(datetime_t)+0x10f>
c000df03:	b8 45 00 00 00       	mov    eax,0x45
c000df08:	89 c2                	mov    edx,eax
c000df0a:	83 e2 03             	and    edx,0x3
c000df0d:	39 f0                	cmp    eax,esi
c000df0f:	7e 0f                	jle    c000df20 <datetimeToSeconds(datetime_t)+0xf9>
c000df11:	83 fa 01             	cmp    edx,0x1
c000df14:	19 d2                	sbb    edx,edx
c000df16:	48                   	dec    eax
c000df17:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000df1e:	eb e8                	jmp    c000df08 <datetimeToSeconds(datetime_t)+0xe1>
c000df20:	b8 6d 01 00 00       	mov    eax,0x16d
c000df25:	85 d2                	test   edx,edx
c000df27:	75 0b                	jne    c000df34 <datetimeToSeconds(datetime_t)+0x10d>
c000df29:	66 83 fb 01          	cmp    bx,0x1
c000df2d:	19 c0                	sbb    eax,eax
c000df2f:	05 6e 01 00 00       	add    eax,0x16e
c000df34:	29 c1                	sub    ecx,eax
c000df36:	b8 80 51 01 00       	mov    eax,0x15180
c000df3b:	f7 e9                	imul   ecx
c000df3d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000df41:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000df45:	83 c4 14             	add    esp,0x14
c000df48:	5b                   	pop    ebx
c000df49:	5e                   	pop    esi
c000df4a:	5f                   	pop    edi
c000df4b:	5d                   	pop    ebp
c000df4c:	c3                   	ret    
c000df4d:	90                   	nop

c000df4e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000df4e:	57                   	push   edi
c000df4f:	56                   	push   esi
c000df50:	53                   	push   ebx
c000df51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df55:	8b 06                	mov    eax,DWORD PTR [esi]
c000df57:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000df5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df62:	e8 c0 fe ff ff       	call   c000de27 <datetimeToSeconds(datetime_t)>
c000df67:	59                   	pop    ecx
c000df68:	0f b6 0d 3c 80 02 c0 	movzx  ecx,BYTE PTR ds:0xc002803c
c000df6f:	5b                   	pop    ebx
c000df70:	03 0d 40 80 02 c0    	add    ecx,DWORD PTR ds:0xc0028040
c000df76:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000df7c:	89 cb                	mov    ebx,ecx
c000df7e:	c1 fb 1f             	sar    ebx,0x1f
c000df81:	29 c8                	sub    eax,ecx
c000df83:	19 da                	sbb    edx,ebx
c000df85:	31 c9                	xor    ecx,ecx
c000df87:	80 3d 3d 80 02 c0 00 	cmp    BYTE PTR ds:0xc002803d,0x0
c000df8e:	74 05                	je     c000df95 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000df90:	b9 08 07 00 00       	mov    ecx,0x708
c000df95:	31 db                	xor    ebx,ebx
c000df97:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000df9b:	29 c8                	sub    eax,ecx
c000df9d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfa1:	19 da                	sbb    edx,ebx
c000dfa3:	89 f8                	mov    eax,edi
c000dfa5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfa9:	5b                   	pop    ebx
c000dfaa:	5e                   	pop    esi
c000dfab:	5f                   	pop    edi
c000dfac:	ff e0                	jmp    eax

c000dfae <secondsToDatetime(unsigned long long)>:
c000dfae:	55                   	push   ebp
c000dfaf:	57                   	push   edi
c000dfb0:	56                   	push   esi
c000dfb1:	53                   	push   ebx
c000dfb2:	83 ec 1c             	sub    esp,0x1c
c000dfb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dfb9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dfbd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dfc1:	6a 00                	push   0x0
c000dfc3:	68 80 51 01 00       	push   0x15180
c000dfc8:	55                   	push   ebp
c000dfc9:	57                   	push   edi
c000dfca:	e8 c5 46 01 00       	call   c0022694 <__udivdi3>
c000dfcf:	83 c4 10             	add    esp,0x10
c000dfd2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dfd8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfdc:	6a 00                	push   0x0
c000dfde:	68 80 51 01 00       	push   0x15180
c000dfe3:	55                   	push   ebp
c000dfe4:	57                   	push   edi
c000dfe5:	bf 10 0e 00 00       	mov    edi,0xe10
c000dfea:	e8 a5 47 01 00       	call   c0022794 <__umoddi3>
c000dfef:	83 c4 10             	add    esp,0x10
c000dff2:	99                   	cdq    
c000dff3:	f7 ff                	idiv   edi
c000dff5:	bf 3c 00 00 00       	mov    edi,0x3c
c000dffa:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dffd:	89 d0                	mov    eax,edx
c000dfff:	99                   	cdq    
c000e000:	f7 ff                	idiv   edi
c000e002:	85 db                	test   ebx,ebx
c000e004:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000e007:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000e00a:	79 11                	jns    c000e01d <secondsToDatetime(unsigned long long)+0x6f>
c000e00c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e010:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000e016:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e01b:	eb 07                	jmp    c000e024 <secondsToDatetime(unsigned long long)+0x76>
c000e01d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000e022:	89 d8                	mov    eax,ebx
c000e024:	bf b4 05 00 00       	mov    edi,0x5b4
c000e029:	99                   	cdq    
c000e02a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000e02f:	f7 f9                	idiv   ecx
c000e031:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000e036:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e03a:	31 d2                	xor    edx,edx
c000e03c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000e044:	01 c3                	add    ebx,eax
c000e046:	89 d8                	mov    eax,ebx
c000e048:	f7 f1                	div    ecx
c000e04a:	31 d2                	xor    edx,edx
c000e04c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000e04f:	89 d8                	mov    eax,ebx
c000e051:	f7 f7                	div    edi
c000e053:	31 d2                	xor    edx,edx
c000e055:	29 c1                	sub    ecx,eax
c000e057:	89 d8                	mov    eax,ebx
c000e059:	f7 f5                	div    ebp
c000e05b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000e060:	29 c1                	sub    ecx,eax
c000e062:	31 d2                	xor    edx,edx
c000e064:	89 c8                	mov    eax,ecx
c000e066:	f7 f5                	div    ebp
c000e068:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000e06d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e071:	31 d2                	xor    edx,edx
c000e073:	89 c8                	mov    eax,ecx
c000e075:	f7 f5                	div    ebp
c000e077:	31 d2                	xor    edx,edx
c000e079:	01 c3                	add    ebx,eax
c000e07b:	89 c8                	mov    eax,ecx
c000e07d:	f7 f7                	div    edi
c000e07f:	bf 99 00 00 00       	mov    edi,0x99
c000e084:	29 c3                	sub    ebx,eax
c000e086:	31 d2                	xor    edx,edx
c000e088:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000e090:	29 c3                	sub    ebx,eax
c000e092:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000e095:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000e098:	bb 05 00 00 00       	mov    ebx,0x5
c000e09d:	83 c1 02             	add    ecx,0x2
c000e0a0:	89 c8                	mov    eax,ecx
c000e0a2:	f7 f7                	div    edi
c000e0a4:	31 d2                	xor    edx,edx
c000e0a6:	89 c7                	mov    edi,eax
c000e0a8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000e0ae:	83 c0 02             	add    eax,0x2
c000e0b1:	f7 f3                	div    ebx
c000e0b3:	89 eb                	mov    ebx,ebp
c000e0b5:	29 c3                	sub    ebx,eax
c000e0b7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000e0bd:	88 1e                	mov    BYTE PTR [esi],bl
c000e0bf:	19 c0                	sbb    eax,eax
c000e0c1:	31 d2                	xor    edx,edx
c000e0c3:	83 e0 0c             	and    eax,0xc
c000e0c6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000e0ca:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000e0d2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000e0d6:	83 f9 01             	cmp    ecx,0x1
c000e0d9:	0f 96 c2             	setbe  dl
c000e0dc:	41                   	inc    ecx
c000e0dd:	01 d0                	add    eax,edx
c000e0df:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000e0e2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000e0e6:	83 c4 1c             	add    esp,0x1c
c000e0e9:	89 f0                	mov    eax,esi
c000e0eb:	5b                   	pop    ebx
c000e0ec:	5e                   	pop    esi
c000e0ed:	5f                   	pop    edi
c000e0ee:	5d                   	pop    ebp
c000e0ef:	c2 04 00             	ret    0x4

c000e0f2 <Clock::timeInDatetimeLocal()>:
c000e0f2:	53                   	push   ebx
c000e0f3:	83 ec 14             	sub    esp,0x14
c000e0f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e0fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e0fe:	e8 83 fc ff ff       	call   c000dd86 <Clock::timeInSecondsLocal()>
c000e103:	83 c4 0c             	add    esp,0xc
c000e106:	52                   	push   edx
c000e107:	50                   	push   eax
c000e108:	53                   	push   ebx
c000e109:	e8 a0 fe ff ff       	call   c000dfae <secondsToDatetime(unsigned long long)>
c000e10e:	89 d8                	mov    eax,ebx
c000e110:	83 c4 14             	add    esp,0x14
c000e113:	5b                   	pop    ebx
c000e114:	c2 04 00             	ret    0x4
c000e117:	90                   	nop

c000e118 <Device::hibernate()>:
c000e118:	c3                   	ret    
c000e119:	90                   	nop

c000e11a <Device::wake()>:
c000e11a:	c3                   	ret    
c000e11b:	90                   	nop

c000e11c <Device::detect()>:
c000e11c:	c3                   	ret    
c000e11d:	90                   	nop

c000e11e <Device::disableLegacy()>:
c000e11e:	c3                   	ret    
c000e11f:	90                   	nop

c000e120 <Device::powerSaving(PowerSavingLevel)>:
c000e120:	c3                   	ret    
c000e121:	90                   	nop

c000e122 <DriverlessDevice::close(int, int, void*)>:
c000e122:	31 c0                	xor    eax,eax
c000e124:	c3                   	ret    
c000e125:	90                   	nop

c000e126 <DriverlessDevice::detect()>:
c000e126:	c3                   	ret    
c000e127:	90                   	nop

c000e128 <DriverlessDevice::open(int, int, void*)>:
c000e128:	83 ec 18             	sub    esp,0x18
c000e12b:	68 d0 4a 02 c0       	push   0xc0024ad0
c000e130:	e8 6e 68 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000e135:	83 c8 ff             	or     eax,0xffffffff
c000e138:	83 c4 1c             	add    esp,0x1c
c000e13b:	c3                   	ret    

c000e13c <Device::~Device()>:
c000e13c:	ba 30 4b 02 c0       	mov    edx,0xc0024b30
c000e141:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e145:	89 10                	mov    DWORD PTR [eax],edx
c000e147:	90                   	nop
c000e148:	c3                   	ret    
c000e149:	90                   	nop

c000e14a <Device::~Device()>:
c000e14a:	83 ec 0c             	sub    esp,0xc
c000e14d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e151:	e8 e6 ff ff ff       	call   c000e13c <Device::~Device()>
c000e156:	83 c4 04             	add    esp,0x4
c000e159:	83 ec 08             	sub    esp,0x8
c000e15c:	68 58 01 00 00       	push   0x158
c000e161:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e165:	e8 b0 ea ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e16a:	83 c4 10             	add    esp,0x10
c000e16d:	83 c4 0c             	add    esp,0xc
c000e170:	c3                   	ret    
c000e171:	90                   	nop

c000e172 <Device::findAndLoadDriver()>:
c000e172:	c7 44 24 04 ee 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024aee
c000e17a:	e9 7c eb ff ff       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>
c000e17f:	90                   	nop

c000e180 <Device::preOpenPCI(PCIDeviceInfo)>:
c000e180:	57                   	push   edi
c000e181:	b9 09 00 00 00       	mov    ecx,0x9
c000e186:	56                   	push   esi
c000e187:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000e18b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000e18f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000e199:	81 c7 18 01 00 00    	add    edi,0x118
c000e19f:	fc                   	cld    
c000e1a0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000e1a2:	5e                   	pop    esi
c000e1a3:	5f                   	pop    edi
c000e1a4:	c3                   	ret    
c000e1a5:	90                   	nop

c000e1a6 <Device::preOpenACPI(void*, char*, char*)>:
c000e1a6:	57                   	push   edi
c000e1a7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000e1ac:	56                   	push   esi
c000e1ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e1b1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000e1bf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000e1c5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000e1cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e1cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1d1:	b9 0e 00 00 00       	mov    ecx,0xe
c000e1d6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000e1dc:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e1e0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e1e2:	5e                   	pop    esi
c000e1e3:	5f                   	pop    edi
c000e1e4:	c3                   	ret    
c000e1e5:	90                   	nop

c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e1e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1ea:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e1ef:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e1f6:	75 0b                	jne    c000e203 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000e1f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e1fe:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e201:	eb 1e                	jmp    c000e221 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000e203:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000e208:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e20e:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e214:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e216:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e21a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e21e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000e221:	ff e0                	jmp    eax
c000e223:	90                   	nop

c000e224 <Device::getParent()>:
c000e224:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e228:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000e22e:	c3                   	ret    
c000e22f:	90                   	nop

c000e230 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e230:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e234:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000e239:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000e240:	75 0b                	jne    c000e24d <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000e242:	8b 00                	mov    eax,DWORD PTR [eax]
c000e244:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e248:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e24b:	eb 1e                	jmp    c000e26b <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000e24d:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000e252:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e258:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000e25e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e260:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000e264:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e268:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000e26b:	ff e0                	jmp    eax
c000e26d:	90                   	nop

c000e26e <Device::addChild(Device*)>:
c000e26e:	53                   	push   ebx
c000e26f:	83 ec 08             	sub    esp,0x8
c000e272:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e276:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e27a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000e280:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000e286:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e288:	85 d2                	test   edx,edx
c000e28a:	74 04                	je     c000e290 <Device::addChild(Device*)+0x22>
c000e28c:	89 d3                	mov    ebx,edx
c000e28e:	eb f6                	jmp    c000e286 <Device::addChild(Device*)+0x18>
c000e290:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e293:	83 ec 0c             	sub    esp,0xc
c000e296:	6a 08                	push   0x8
c000e298:	e8 72 b7 ff ff       	call   c0009a0f <malloc>
c000e29d:	89 03                	mov    DWORD PTR [ebx],eax
c000e29f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e2a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e2ac:	83 c4 18             	add    esp,0x18
c000e2af:	5b                   	pop    ebx
c000e2b0:	c3                   	ret    
c000e2b1:	90                   	nop

c000e2b2 <Device::removeAllChildren()>:
c000e2b2:	56                   	push   esi
c000e2b3:	53                   	push   ebx
c000e2b4:	52                   	push   edx
c000e2b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e2b9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000e2bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e2c2:	74 17                	je     c000e2db <Device::removeAllChildren()+0x29>
c000e2c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e2c7:	85 c0                	test   eax,eax
c000e2c9:	74 0c                	je     c000e2d7 <Device::removeAllChildren()+0x25>
c000e2cb:	83 ec 0c             	sub    esp,0xc
c000e2ce:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2d0:	50                   	push   eax
c000e2d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000e2d4:	83 c4 10             	add    esp,0x10
c000e2d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e2d9:	eb e4                	jmp    c000e2bf <Device::removeAllChildren()+0xd>
c000e2db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e2e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e2e7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000e2ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e2f4:	58                   	pop    eax
c000e2f5:	5b                   	pop    ebx
c000e2f6:	5e                   	pop    esi
c000e2f7:	c3                   	ret    

c000e2f8 <Device::hibernateAll()>:
c000e2f8:	53                   	push   ebx
c000e2f9:	83 ec 14             	sub    esp,0x14
c000e2fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e300:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e302:	53                   	push   ebx
c000e303:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e306:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e30c:	83 c4 10             	add    esp,0x10
c000e30f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e312:	74 0f                	je     c000e323 <Device::hibernateAll()+0x2b>
c000e314:	83 ec 0c             	sub    esp,0xc
c000e317:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e31a:	e8 d9 ff ff ff       	call   c000e2f8 <Device::hibernateAll()>
c000e31f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e321:	eb e9                	jmp    c000e30c <Device::hibernateAll()+0x14>
c000e323:	83 c4 08             	add    esp,0x8
c000e326:	5b                   	pop    ebx
c000e327:	c3                   	ret    

c000e328 <Device::wakeAll()>:
c000e328:	53                   	push   ebx
c000e329:	83 ec 14             	sub    esp,0x14
c000e32c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e330:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e332:	53                   	push   ebx
c000e333:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000e336:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e33c:	83 c4 10             	add    esp,0x10
c000e33f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e342:	74 0f                	je     c000e353 <Device::wakeAll()+0x2b>
c000e344:	83 ec 0c             	sub    esp,0xc
c000e347:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e34a:	e8 d9 ff ff ff       	call   c000e328 <Device::wakeAll()>
c000e34f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e351:	eb e9                	jmp    c000e33c <Device::wakeAll()+0x14>
c000e353:	83 c4 08             	add    esp,0x8
c000e356:	5b                   	pop    ebx
c000e357:	c3                   	ret    

c000e358 <Device::detectAll()>:
c000e358:	53                   	push   ebx
c000e359:	83 ec 14             	sub    esp,0x14
c000e35c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e360:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e362:	53                   	push   ebx
c000e363:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000e366:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e36c:	83 c4 10             	add    esp,0x10
c000e36f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e372:	74 0f                	je     c000e383 <Device::detectAll()+0x2b>
c000e374:	83 ec 0c             	sub    esp,0xc
c000e377:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e37a:	e8 d9 ff ff ff       	call   c000e358 <Device::detectAll()>
c000e37f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e381:	eb e9                	jmp    c000e36c <Device::detectAll()+0x14>
c000e383:	83 c4 08             	add    esp,0x8
c000e386:	5b                   	pop    ebx
c000e387:	c3                   	ret    

c000e388 <Device::disableLegacyAll()>:
c000e388:	53                   	push   ebx
c000e389:	83 ec 14             	sub    esp,0x14
c000e38c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e390:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e392:	53                   	push   ebx
c000e393:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e396:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e39c:	83 c4 10             	add    esp,0x10
c000e39f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3a2:	74 0f                	je     c000e3b3 <Device::disableLegacyAll()+0x2b>
c000e3a4:	83 ec 0c             	sub    esp,0xc
c000e3a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3aa:	e8 d9 ff ff ff       	call   c000e388 <Device::disableLegacyAll()>
c000e3af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e3b1:	eb e9                	jmp    c000e39c <Device::disableLegacyAll()+0x14>
c000e3b3:	83 c4 08             	add    esp,0x8
c000e3b6:	5b                   	pop    ebx
c000e3b7:	c3                   	ret    

c000e3b8 <Device::loadDriversForAll()>:
c000e3b8:	53                   	push   ebx
c000e3b9:	83 ec 08             	sub    esp,0x8
c000e3bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3c0:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e3c7:	75 0c                	jne    c000e3d5 <Device::loadDriversForAll()+0x1d>
c000e3c9:	83 ec 0c             	sub    esp,0xc
c000e3cc:	53                   	push   ebx
c000e3cd:	e8 a0 fd ff ff       	call   c000e172 <Device::findAndLoadDriver()>
c000e3d2:	83 c4 10             	add    esp,0x10
c000e3d5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e3db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e3de:	74 12                	je     c000e3f2 <Device::loadDriversForAll()+0x3a>
c000e3e0:	83 ec 0c             	sub    esp,0xc
c000e3e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e3e6:	e8 cd ff ff ff       	call   c000e3b8 <Device::loadDriversForAll()>
c000e3eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e3ed:	83 c4 10             	add    esp,0x10
c000e3f0:	eb e9                	jmp    c000e3db <Device::loadDriversForAll()+0x23>
c000e3f2:	83 c4 08             	add    esp,0x8
c000e3f5:	5b                   	pop    ebx
c000e3f6:	c3                   	ret    
c000e3f7:	90                   	nop

c000e3f8 <Device::closeAll()>:
c000e3f8:	53                   	push   ebx
c000e3f9:	83 ec 08             	sub    esp,0x8
c000e3fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e400:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e402:	6a 00                	push   0x0
c000e404:	6a 00                	push   0x0
c000e406:	6a 00                	push   0x0
c000e408:	53                   	push   ebx
c000e409:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e40c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e412:	83 c4 10             	add    esp,0x10
c000e415:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e418:	74 0f                	je     c000e429 <Device::closeAll()+0x31>
c000e41a:	83 ec 0c             	sub    esp,0xc
c000e41d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e420:	e8 d3 ff ff ff       	call   c000e3f8 <Device::closeAll()>
c000e425:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e427:	eb e9                	jmp    c000e412 <Device::closeAll()+0x1a>
c000e429:	83 c4 08             	add    esp,0x8
c000e42c:	5b                   	pop    ebx
c000e42d:	c3                   	ret    

c000e42e <Device::powerSavingAll(PowerSavingLevel)>:
c000e42e:	56                   	push   esi
c000e42f:	53                   	push   ebx
c000e430:	83 ec 0c             	sub    esp,0xc
c000e433:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e437:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e43b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e43d:	56                   	push   esi
c000e43e:	53                   	push   ebx
c000e43f:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e442:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e448:	83 c4 10             	add    esp,0x10
c000e44b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e44e:	74 0f                	je     c000e45f <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e450:	52                   	push   edx
c000e451:	52                   	push   edx
c000e452:	56                   	push   esi
c000e453:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e456:	e8 d3 ff ff ff       	call   c000e42e <Device::powerSavingAll(PowerSavingLevel)>
c000e45b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e45d:	eb e9                	jmp    c000e448 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e45f:	58                   	pop    eax
c000e460:	5b                   	pop    ebx
c000e461:	5e                   	pop    esi
c000e462:	c3                   	ret    
c000e463:	90                   	nop

c000e464 <Device::setName(char const*)>:
c000e464:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e46c:	e9 cf 22 ff ff       	jmp    c0000740 <strcpy>
c000e471:	90                   	nop

c000e472 <Device::Device(char const*)>:
c000e472:	83 ec 1c             	sub    esp,0x1c
c000e475:	ba 30 4b 02 c0       	mov    edx,0xc0024b30
c000e47a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e47e:	89 10                	mov    DWORD PTR [eax],edx
c000e480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e484:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e48e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e492:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e49c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4a0:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e4aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4ae:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e4b8:	83 ec 08             	sub    esp,0x8
c000e4bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e4c3:	e8 9c ff ff ff       	call   c000e464 <Device::setName(char const*)>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e4d3:	83 ec 0c             	sub    esp,0xc
c000e4d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4da:	e8 30 b5 ff ff       	call   c0009a0f <malloc>
c000e4df:	83 c4 10             	add    esp,0x10
c000e4e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e4e8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4ef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e4f3:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e4f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e4fd:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e503:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e509:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e50d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e513:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e51a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e51e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e525:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e529:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e534:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e53e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e542:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e54c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e550:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e55a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e55e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e568:	90                   	nop
c000e569:	83 c4 1c             	add    esp,0x1c
c000e56c:	c3                   	ret    
c000e56d:	90                   	nop

c000e56e <Device::getName()>:
c000e56e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e572:	05 d0 00 00 00       	add    eax,0xd0
c000e577:	c3                   	ret    

c000e578 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e578:	83 ec 0c             	sub    esp,0xc
c000e57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e57f:	83 ec 08             	sub    esp,0x8
c000e582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e586:	50                   	push   eax
c000e587:	e8 e6 fe ff ff       	call   c000e472 <Device::Device(char const*)>
c000e58c:	83 c4 10             	add    esp,0x10
c000e58f:	ba 5c 4b 02 c0       	mov    edx,0xc0024b5c
c000e594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e598:	89 10                	mov    DWORD PTR [eax],edx
c000e59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e59e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e5a8:	90                   	nop
c000e5a9:	83 c4 0c             	add    esp,0xc
c000e5ac:	c3                   	ret    
c000e5ad:	90                   	nop

c000e5ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e5ae:	57                   	push   edi
c000e5af:	56                   	push   esi
c000e5b0:	53                   	push   ebx
c000e5b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e5b5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e5b9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e5bd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e5c3:	75 0c                	jne    c000e5d1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e5c5:	52                   	push   edx
c000e5c6:	52                   	push   edx
c000e5c7:	53                   	push   ebx
c000e5c8:	56                   	push   esi
c000e5c9:	e8 78 45 01 00       	call   c0022b46 <LinkedList<Device>::addElement(Device*)>
c000e5ce:	83 c4 10             	add    esp,0x10
c000e5d1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e5d7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e5da:	74 12                	je     c000e5ee <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e5dc:	50                   	push   eax
c000e5dd:	57                   	push   edi
c000e5de:	56                   	push   esi
c000e5df:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e5e2:	e8 c7 ff ff ff       	call   c000e5ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e5e7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e5e9:	83 c4 10             	add    esp,0x10
c000e5ec:	eb e9                	jmp    c000e5d7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e5ee:	5b                   	pop    ebx
c000e5ef:	5e                   	pop    esi
c000e5f0:	5f                   	pop    edi
c000e5f1:	c3                   	ret    

c000e5f2 <getDevicesOfType(DeviceType)>:
c000e5f2:	53                   	push   ebx
c000e5f3:	83 ec 14             	sub    esp,0x14
c000e5f6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e5fa:	53                   	push   ebx
c000e5fb:	e8 22 46 01 00       	call   c0022c22 <LinkedList<Device>::LinkedList()>
c000e600:	83 c4 0c             	add    esp,0xc
c000e603:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e607:	53                   	push   ebx
c000e608:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c000e60e:	e8 9b ff ff ff       	call   c000e5ae <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e613:	89 d8                	mov    eax,ebx
c000e615:	83 c4 18             	add    esp,0x18
c000e618:	5b                   	pop    ebx
c000e619:	c2 04 00             	ret    0x4

c000e61c <HardDiskController::HardDiskController(char const*)>:
c000e61c:	83 ec 0c             	sub    esp,0xc
c000e61f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e623:	83 ec 08             	sub    esp,0x8
c000e626:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e62a:	50                   	push   eax
c000e62b:	e8 42 fe ff ff       	call   c000e472 <Device::Device(char const*)>
c000e630:	83 c4 10             	add    esp,0x10
c000e633:	ba 88 4b 02 c0       	mov    edx,0xc0024b88
c000e638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e63c:	89 10                	mov    DWORD PTR [eax],edx
c000e63e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e642:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e64c:	90                   	nop
c000e64d:	83 c4 0c             	add    esp,0xc
c000e650:	c3                   	ret    
c000e651:	90                   	nop
c000e652:	66 90                	xchg   ax,ax

c000e654 <HardDiskController::~HardDiskController()>:
c000e654:	83 ec 0c             	sub    esp,0xc
c000e657:	ba 88 4b 02 c0       	mov    edx,0xc0024b88
c000e65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e660:	89 10                	mov    DWORD PTR [eax],edx
c000e662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e666:	83 ec 0c             	sub    esp,0xc
c000e669:	50                   	push   eax
c000e66a:	e8 cd fa ff ff       	call   c000e13c <Device::~Device()>
c000e66f:	83 c4 10             	add    esp,0x10
c000e672:	90                   	nop
c000e673:	83 c4 0c             	add    esp,0xc
c000e676:	c3                   	ret    
c000e677:	90                   	nop

c000e678 <HardDiskController::~HardDiskController()>:
c000e678:	83 ec 0c             	sub    esp,0xc
c000e67b:	83 ec 0c             	sub    esp,0xc
c000e67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e682:	e8 cd ff ff ff       	call   c000e654 <HardDiskController::~HardDiskController()>
c000e687:	83 c4 10             	add    esp,0x10
c000e68a:	83 ec 08             	sub    esp,0x8
c000e68d:	68 58 01 00 00       	push   0x158
c000e692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e696:	e8 7f e5 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e69b:	83 c4 10             	add    esp,0x10
c000e69e:	83 c4 0c             	add    esp,0xc
c000e6a1:	c3                   	ret    

c000e6a2 <PhysicalDisk::eject()>:
c000e6a2:	83 c8 ff             	or     eax,0xffffffff
c000e6a5:	c3                   	ret    

c000e6a6 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e6a6:	83 ec 0c             	sub    esp,0xc
c000e6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6ad:	83 ec 08             	sub    esp,0x8
c000e6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6b4:	50                   	push   eax
c000e6b5:	e8 b8 fd ff ff       	call   c000e472 <Device::Device(char const*)>
c000e6ba:	83 c4 10             	add    esp,0x10
c000e6bd:	ba b4 4b 02 c0       	mov    edx,0xc0024bb4
c000e6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6c6:	89 10                	mov    DWORD PTR [eax],edx
c000e6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6cc:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e6d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6d7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6e2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e6ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6f0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e6fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e6fe:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e708:	90                   	nop
c000e709:	83 c4 0c             	add    esp,0xc
c000e70c:	c3                   	ret    
c000e70d:	90                   	nop

c000e70e <PhysicalDisk::startCache()>:
c000e70e:	56                   	push   esi
c000e70f:	53                   	push   ebx
c000e710:	83 ec 10             	sub    esp,0x10
c000e713:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e717:	6a 44                	push   0x44
c000e719:	e8 f1 b2 ff ff       	call   c0009a0f <malloc>
c000e71e:	89 c6                	mov    esi,eax
c000e720:	58                   	pop    eax
c000e721:	5a                   	pop    edx
c000e722:	53                   	push   ebx
c000e723:	56                   	push   esi
c000e724:	e8 0f 26 00 00       	call   c0010d38 <VCache::VCache(PhysicalDisk*)>
c000e729:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e72f:	83 c4 14             	add    esp,0x14
c000e732:	5b                   	pop    ebx
c000e733:	5e                   	pop    esi
c000e734:	c3                   	ret    
c000e735:	90                   	nop

c000e736 <PhysicalDisk::~PhysicalDisk()>:
c000e736:	83 ec 0c             	sub    esp,0xc
c000e739:	ba b4 4b 02 c0       	mov    edx,0xc0024bb4
c000e73e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e742:	89 10                	mov    DWORD PTR [eax],edx
c000e744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e748:	83 ec 0c             	sub    esp,0xc
c000e74b:	50                   	push   eax
c000e74c:	e8 eb f9 ff ff       	call   c000e13c <Device::~Device()>
c000e751:	83 c4 10             	add    esp,0x10
c000e754:	90                   	nop
c000e755:	83 c4 0c             	add    esp,0xc
c000e758:	c3                   	ret    
c000e759:	90                   	nop

c000e75a <PhysicalDisk::~PhysicalDisk()>:
c000e75a:	83 ec 0c             	sub    esp,0xc
c000e75d:	83 ec 0c             	sub    esp,0xc
c000e760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e764:	e8 cd ff ff ff       	call   c000e736 <PhysicalDisk::~PhysicalDisk()>
c000e769:	83 c4 10             	add    esp,0x10
c000e76c:	83 ec 08             	sub    esp,0x8
c000e76f:	68 6c 01 00 00       	push   0x16c
c000e774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e778:	e8 9d e4 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e77d:	83 c4 10             	add    esp,0x10
c000e780:	83 c4 0c             	add    esp,0xc
c000e783:	c3                   	ret    

c000e784 <FPU::FPU(char const*)>:
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e78b:	83 ec 08             	sub    esp,0x8
c000e78e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e792:	50                   	push   eax
c000e793:	e8 da fc ff ff       	call   c000e472 <Device::Device(char const*)>
c000e798:	83 c4 10             	add    esp,0x10
c000e79b:	ba f8 4b 02 c0       	mov    edx,0xc0024bf8
c000e7a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a4:	89 10                	mov    DWORD PTR [eax],edx
c000e7a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7aa:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e7b4:	90                   	nop
c000e7b5:	83 c4 0c             	add    esp,0xc
c000e7b8:	c3                   	ret    
c000e7b9:	90                   	nop
c000e7ba:	66 90                	xchg   ax,ax

c000e7bc <FPU::~FPU()>:
c000e7bc:	83 ec 0c             	sub    esp,0xc
c000e7bf:	ba f8 4b 02 c0       	mov    edx,0xc0024bf8
c000e7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c8:	89 10                	mov    DWORD PTR [eax],edx
c000e7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ce:	83 ec 0c             	sub    esp,0xc
c000e7d1:	50                   	push   eax
c000e7d2:	e8 65 f9 ff ff       	call   c000e13c <Device::~Device()>
c000e7d7:	83 c4 10             	add    esp,0x10
c000e7da:	90                   	nop
c000e7db:	83 c4 0c             	add    esp,0xc
c000e7de:	c3                   	ret    
c000e7df:	90                   	nop

c000e7e0 <FPU::~FPU()>:
c000e7e0:	83 ec 0c             	sub    esp,0xc
c000e7e3:	83 ec 0c             	sub    esp,0xc
c000e7e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ea:	e8 cd ff ff ff       	call   c000e7bc <FPU::~FPU()>
c000e7ef:	83 c4 10             	add    esp,0x10
c000e7f2:	83 ec 08             	sub    esp,0x8
c000e7f5:	68 58 01 00 00       	push   0x158
c000e7fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7fe:	e8 17 e4 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000e803:	83 c4 10             	add    esp,0x10
c000e806:	83 c4 0c             	add    esp,0xc
c000e809:	c3                   	ret    

c000e80a <setupFPU()>:
c000e80a:	83 ec 1c             	sub    esp,0x1c
c000e80d:	8b 15 08 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f08
c000e813:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e819:	a8 10                	test   al,0x10
c000e81b:	74 23                	je     c000e840 <setupFPU()+0x36>
c000e81d:	83 ec 0c             	sub    esp,0xc
c000e820:	68 58 01 00 00       	push   0x158
c000e825:	e8 e5 b1 ff ff       	call   c0009a0f <malloc>
c000e82a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e82d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e831:	e8 ae 2b 01 00       	call   c00213e4 <x87::x87()>
c000e836:	83 c4 10             	add    esp,0x10
c000e839:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e83d:	eb 25                	jmp    c000e864 <setupFPU()+0x5a>
c000e83f:	90                   	nop
c000e840:	83 e0 ef             	and    eax,0xffffffef
c000e843:	83 ec 0c             	sub    esp,0xc
c000e846:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e84c:	68 e4 4b 02 c0       	push   0xc0024be4
c000e851:	e8 a5 e4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000e856:	0f 20 c0             	mov    eax,cr0
c000e859:	83 c8 04             	or     eax,0x4
c000e85c:	0f 22 c0             	mov    cr0,eax
c000e85f:	31 c0                	xor    eax,eax
c000e861:	83 c4 10             	add    esp,0x10
c000e864:	83 c4 1c             	add    esp,0x1c
c000e867:	c3                   	ret    

c000e868 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e86c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e870:	c1 e0 04             	shl    eax,0x4
c000e873:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e877:	8d 50 10             	lea    edx,[eax+0x10]
c000e87a:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e880:	74 08                	je     c000e88a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e882:	83 c0 04             	add    eax,0x4
c000e885:	39 d0                	cmp    eax,edx
c000e887:	75 f1                	jne    c000e87a <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e889:	c3                   	ret    
c000e88a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e894:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e89e:	eb e2                	jmp    c000e882 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e8a0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e8a0:	57                   	push   edi
c000e8a1:	31 c0                	xor    eax,eax
c000e8a3:	56                   	push   esi
c000e8a4:	53                   	push   ebx
c000e8a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e8ad:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e8b1:	89 da                	mov    edx,ebx
c000e8b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e8b7:	c1 e2 04             	shl    edx,0x4
c000e8ba:	01 ca                	add    edx,ecx
c000e8bc:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e8c4:	74 16                	je     c000e8dc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e8c6:	40                   	inc    eax
c000e8c7:	83 f8 04             	cmp    eax,0x4
c000e8ca:	75 f0                	jne    c000e8bc <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e8cc:	c7 44 24 10 28 4c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024c28
c000e8d4:	5b                   	pop    ebx
c000e8d5:	5e                   	pop    esi
c000e8d6:	5f                   	pop    edi
c000e8d7:	e9 c7 60 00 00       	jmp    c00149a3 <Krnl::panic(char const*)>
c000e8dc:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e8df:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e8e2:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e8e8:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e8ee:	5b                   	pop    ebx
c000e8ef:	5e                   	pop    esi
c000e8f0:	5f                   	pop    edi
c000e8f1:	c3                   	ret    

c000e8f2 <doubleFault(regs*, void*)>:
c000e8f2:	55                   	push   ebp
c000e8f3:	89 e5                	mov    ebp,esp
c000e8f5:	83 ec 08             	sub    esp,0x8
c000e8f8:	83 ec 0c             	sub    esp,0xc
c000e8fb:	68 35 4c 02 c0       	push   0xc0024c35
c000e900:	e8 9e 60 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000e905:	83 c4 10             	add    esp,0x10
c000e908:	90                   	nop
c000e909:	c9                   	leave  
c000e90a:	c3                   	ret    
c000e90b:	90                   	nop

c000e90c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e90c:	56                   	push   esi
c000e90d:	53                   	push   ebx
c000e90e:	50                   	push   eax
c000e90f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e913:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e917:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e91c:	75 35                	jne    c000e953 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e91e:	8d 43 20             	lea    eax,[ebx+0x20]
c000e921:	31 d2                	xor    edx,edx
c000e923:	89 c1                	mov    ecx,eax
c000e925:	c1 e1 04             	shl    ecx,0x4
c000e928:	01 f1                	add    ecx,esi
c000e92a:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e932:	74 3e                	je     c000e972 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e934:	42                   	inc    edx
c000e935:	83 fa 04             	cmp    edx,0x4
c000e938:	75 f0                	jne    c000e92a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e93a:	83 ec 0c             	sub    esp,0xc
c000e93d:	68 4f 4c 02 c0       	push   0xc0024c4f
c000e942:	e8 5c 60 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000e947:	83 c4 10             	add    esp,0x10
c000e94a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e94f:	5a                   	pop    edx
c000e950:	5b                   	pop    ebx
c000e951:	5e                   	pop    esi
c000e952:	c3                   	ret    
c000e953:	83 ec 0c             	sub    esp,0xc
c000e956:	56                   	push   esi
c000e957:	e8 12 fc ff ff       	call   c000e56e <Device::getName()>
c000e95c:	83 c4 10             	add    esp,0x10
c000e95f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e962:	75 ba                	jne    c000e91e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e964:	83 fb 0f             	cmp    ebx,0xf
c000e967:	7f 29                	jg     c000e992 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e969:	0f b6 9b 00 76 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd8a00]
c000e970:	eb ac                	jmp    c000e91e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e972:	8d 04 82             	lea    eax,[edx+eax*4]
c000e975:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e979:	8d 04 86             	lea    eax,[esi+eax*4]
c000e97c:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e982:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e986:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e98c:	89 d8                	mov    eax,ebx
c000e98e:	5a                   	pop    edx
c000e98f:	5b                   	pop    ebx
c000e990:	5e                   	pop    esi
c000e991:	c3                   	ret    
c000e992:	83 ec 0c             	sub    esp,0xc
c000e995:	68 42 4c 02 c0       	push   0xc0024c42
c000e99a:	e8 04 60 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000e99f:	83 c4 10             	add    esp,0x10
c000e9a2:	e9 77 ff ff ff       	jmp    c000e91e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e9a7:	90                   	nop

c000e9a8 <InterruptController::clearAllHandlers(int, bool)>:
c000e9a8:	56                   	push   esi
c000e9a9:	53                   	push   ebx
c000e9aa:	52                   	push   edx
c000e9ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e9af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e9b3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e9b8:	75 61                	jne    c000ea1b <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e9ba:	8d 46 20             	lea    eax,[esi+0x20]
c000e9bd:	c1 e6 04             	shl    esi,0x4
c000e9c0:	c1 e0 04             	shl    eax,0x4
c000e9c3:	01 de                	add    esi,ebx
c000e9c5:	01 d8                	add    eax,ebx
c000e9c7:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e9d1:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e9db:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e9e5:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e9ef:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e9f9:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000ea03:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000ea0d:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000ea17:	58                   	pop    eax
c000ea18:	5b                   	pop    ebx
c000ea19:	5e                   	pop    esi
c000ea1a:	c3                   	ret    
c000ea1b:	83 ec 0c             	sub    esp,0xc
c000ea1e:	53                   	push   ebx
c000ea1f:	e8 4a fb ff ff       	call   c000e56e <Device::getName()>
c000ea24:	83 c4 10             	add    esp,0x10
c000ea27:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000ea2a:	75 8e                	jne    c000e9ba <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea2c:	83 fe 0f             	cmp    esi,0xf
c000ea2f:	7f 09                	jg     c000ea3a <InterruptController::clearAllHandlers(int, bool)+0x92>
c000ea31:	0f b6 b6 00 76 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd8a00]
c000ea38:	eb 80                	jmp    c000e9ba <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea3a:	83 ec 0c             	sub    esp,0xc
c000ea3d:	68 5c 4c 02 c0       	push   0xc0024c5c
c000ea42:	e8 5c 5f 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000ea47:	83 c4 10             	add    esp,0x10
c000ea4a:	e9 6b ff ff ff       	jmp    c000e9ba <InterruptController::clearAllHandlers(int, bool)+0x12>
c000ea4f:	90                   	nop

c000ea50 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ea50:	56                   	push   esi
c000ea51:	53                   	push   ebx
c000ea52:	52                   	push   edx
c000ea53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ea5b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000ea60:	75 3a                	jne    c000ea9c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000ea62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea66:	8d 50 20             	lea    edx,[eax+0x20]
c000ea69:	c1 e2 04             	shl    edx,0x4
c000ea6c:	8d 04 16             	lea    eax,[esi+edx*1]
c000ea6f:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000ea73:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000ea79:	74 0b                	je     c000ea86 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000ea7b:	83 c0 04             	add    eax,0x4
c000ea7e:	39 d0                	cmp    eax,edx
c000ea80:	75 f1                	jne    c000ea73 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000ea82:	58                   	pop    eax
c000ea83:	5b                   	pop    ebx
c000ea84:	5e                   	pop    esi
c000ea85:	c3                   	ret    
c000ea86:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ea90:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000ea9a:	eb df                	jmp    c000ea7b <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000ea9c:	83 ec 0c             	sub    esp,0xc
c000ea9f:	56                   	push   esi
c000eaa0:	e8 c9 fa ff ff       	call   c000e56e <Device::getName()>
c000eaa5:	83 c4 10             	add    esp,0x10
c000eaa8:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000eaab:	75 b5                	jne    c000ea62 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eaad:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000eab2:	7f 11                	jg     c000eac5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000eab4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eab8:	0f b6 80 00 76 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd8a00]
c000eabf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000eac3:	eb 9d                	jmp    c000ea62 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000eac5:	83 ec 0c             	sub    esp,0xc
c000eac8:	68 69 4c 02 c0       	push   0xc0024c69
c000eacd:	e8 d1 5e 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000ead2:	83 c4 10             	add    esp,0x10
c000ead5:	eb 8b                	jmp    c000ea62 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000ead7 <nmiHandler(regs*, void*)>:
c000ead7:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000eadc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000eae0:	e9 f3 a6 ff ff       	jmp    c00091d8 <Computer::handleNMI()>

c000eae5 <int_handler>:
c000eae5:	55                   	push   ebp
c000eae6:	57                   	push   edi
c000eae7:	56                   	push   esi
c000eae8:	53                   	push   ebx
c000eae9:	83 ec 0c             	sub    esp,0xc
c000eaec:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000eaf0:	80 3d e4 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289e4,0x0
c000eaf7:	74 0b                	je     c000eb04 <int_handler+0x1f>
c000eaf9:	fa                   	cli    
c000eafa:	f4                   	hlt    
c000eafb:	80 3d e4 89 02 c0 00 	cmp    BYTE PTR ds:0xc00289e4,0x0
c000eb02:	75 f5                	jne    c000eaf9 <int_handler+0x14>
c000eb04:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000eb09:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000eb0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000eb12:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000eb18:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eb1b:	83 f8 17             	cmp    eax,0x17
c000eb1e:	77 13                	ja     c000eb33 <int_handler+0x4e>
c000eb20:	83 ec 08             	sub    esp,0x8
c000eb23:	8b 17                	mov    edx,DWORD PTR [edi]
c000eb25:	8d 43 e0             	lea    eax,[ebx-0x20]
c000eb28:	0f b6 c0             	movzx  eax,al
c000eb2b:	50                   	push   eax
c000eb2c:	57                   	push   edi
c000eb2d:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000eb30:	83 c4 10             	add    esp,0x10
c000eb33:	83 c3 15             	add    ebx,0x15
c000eb36:	c1 e3 04             	shl    ebx,0x4
c000eb39:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000eb3d:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000eb44:	31 db                	xor    ebx,ebx
c000eb46:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000eb4a:	85 c0                	test   eax,eax
c000eb4c:	74 13                	je     c000eb61 <int_handler+0x7c>
c000eb4e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000eb51:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000eb55:	74 1c                	je     c000eb73 <int_handler+0x8e>
c000eb57:	83 ec 08             	sub    esp,0x8
c000eb5a:	52                   	push   edx
c000eb5b:	56                   	push   esi
c000eb5c:	ff d0                	call   eax
c000eb5e:	83 c4 10             	add    esp,0x10
c000eb61:	43                   	inc    ebx
c000eb62:	83 fb 04             	cmp    ebx,0x4
c000eb65:	75 df                	jne    c000eb46 <int_handler+0x61>
c000eb67:	83 c4 0c             	add    esp,0xc
c000eb6a:	31 c0                	xor    eax,eax
c000eb6c:	5b                   	pop    ebx
c000eb6d:	31 d2                	xor    edx,edx
c000eb6f:	5e                   	pop    esi
c000eb70:	5f                   	pop    edi
c000eb71:	5d                   	pop    ebp
c000eb72:	c3                   	ret    
c000eb73:	83 ec 08             	sub    esp,0x8
c000eb76:	52                   	push   edx
c000eb77:	56                   	push   esi
c000eb78:	ff d0                	call   eax
c000eb7a:	83 c4 10             	add    esp,0x10
c000eb7d:	83 c4 0c             	add    esp,0xc
c000eb80:	5b                   	pop    ebx
c000eb81:	5e                   	pop    esi
c000eb82:	5f                   	pop    edi
c000eb83:	5d                   	pop    ebp
c000eb84:	c3                   	ret    
c000eb85:	90                   	nop

c000eb86 <InterruptController::InterruptController(char const*)>:
c000eb86:	83 ec 1c             	sub    esp,0x1c
c000eb89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eb8d:	83 ec 08             	sub    esp,0x8
c000eb90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eb94:	50                   	push   eax
c000eb95:	e8 d8 f8 ff ff       	call   c000e472 <Device::Device(char const*)>
c000eb9a:	83 c4 10             	add    esp,0x10
c000eb9d:	ba 20 4f 02 c0       	mov    edx,0xc0024f20
c000eba2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eba6:	89 10                	mov    DWORD PTR [eax],edx
c000eba8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebac:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000ebb6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ebbe:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000ebc6:	7f 5e                	jg     c000ec26 <InterruptController::InterruptController(char const*)+0xa0>
c000ebc8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ebd0:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000ebd5:	7f 49                	jg     c000ec20 <InterruptController::InterruptController(char const*)+0x9a>
c000ebd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebdb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ebdf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ebe6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebea:	01 ca                	add    edx,ecx
c000ebec:	83 c2 54             	add    edx,0x54
c000ebef:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ebf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ebfb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ebff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ec06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec0a:	01 ca                	add    edx,ecx
c000ec0c:	81 c2 54 04 00 00    	add    edx,0x454
c000ec12:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000ec1a:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000ec1e:	eb b0                	jmp    c000ebd0 <InterruptController::InterruptController(char const*)+0x4a>
c000ec20:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ec24:	eb 98                	jmp    c000ebbe <InterruptController::InterruptController(char const*)+0x38>
c000ec26:	90                   	nop
c000ec27:	83 c4 1c             	add    esp,0x1c
c000ec2a:	c3                   	ret    
c000ec2b:	90                   	nop

c000ec2c <InterruptController::~InterruptController()>:
c000ec2c:	83 ec 0c             	sub    esp,0xc
c000ec2f:	ba 20 4f 02 c0       	mov    edx,0xc0024f20
c000ec34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec38:	89 10                	mov    DWORD PTR [eax],edx
c000ec3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec3e:	83 ec 0c             	sub    esp,0xc
c000ec41:	50                   	push   eax
c000ec42:	e8 f5 f4 ff ff       	call   c000e13c <Device::~Device()>
c000ec47:	83 c4 10             	add    esp,0x10
c000ec4a:	90                   	nop
c000ec4b:	83 c4 0c             	add    esp,0xc
c000ec4e:	c3                   	ret    
c000ec4f:	90                   	nop

c000ec50 <InterruptController::~InterruptController()>:
c000ec50:	83 ec 0c             	sub    esp,0xc
c000ec53:	83 ec 0c             	sub    esp,0xc
c000ec56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec5a:	e8 cd ff ff ff       	call   c000ec2c <InterruptController::~InterruptController()>
c000ec5f:	83 c4 10             	add    esp,0x10
c000ec62:	83 ec 08             	sub    esp,0x8
c000ec65:	68 58 21 00 00       	push   0x2158
c000ec6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec6e:	e8 a7 df ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c000ec73:	83 c4 10             	add    esp,0x10
c000ec76:	83 c4 0c             	add    esp,0xc
c000ec79:	c3                   	ret    

c000ec7a <displayDebugInfo(regs*)>:
c000ec7a:	55                   	push   ebp
c000ec7b:	57                   	push   edi
c000ec7c:	56                   	push   esi
c000ec7d:	53                   	push   ebx
c000ec7e:	83 ec 24             	sub    esp,0x24
c000ec81:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ec85:	0f 20 c2             	mov    edx,cr0
c000ec88:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ec8c:	0f 20 d7             	mov    edi,cr2
c000ec8f:	0f 20 de             	mov    esi,cr3
c000ec92:	0f 20 e5             	mov    ebp,cr4
c000ec95:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000ec98:	68 76 4c 02 c0       	push   0xc0024c76
c000ec9d:	e8 59 e0 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000eca2:	59                   	pop    ecx
c000eca3:	58                   	pop    eax
c000eca4:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000eca7:	68 81 4c 02 c0       	push   0xc0024c81
c000ecac:	e8 4a e0 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ecb1:	58                   	pop    eax
c000ecb2:	5a                   	pop    edx
c000ecb3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000ecb6:	68 8c 4c 02 c0       	push   0xc0024c8c
c000ecbb:	e8 3b e0 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ecc0:	59                   	pop    ecx
c000ecc1:	58                   	pop    eax
c000ecc2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000ecc5:	68 97 4c 02 c0       	push   0xc0024c97
c000ecca:	e8 2c e0 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000eccf:	58                   	pop    eax
c000ecd0:	5a                   	pop    edx
c000ecd1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ecd4:	68 a2 4c 02 c0       	push   0xc0024ca2
c000ecd9:	e8 1d e0 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ecde:	59                   	pop    ecx
c000ecdf:	58                   	pop    eax
c000ece0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ece3:	68 ad 4c 02 c0       	push   0xc0024cad
c000ece8:	e8 0e e0 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000eced:	58                   	pop    eax
c000ecee:	5a                   	pop    edx
c000ecef:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ecf2:	68 b8 4c 02 c0       	push   0xc0024cb8
c000ecf7:	e8 ff df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ecfc:	59                   	pop    ecx
c000ecfd:	58                   	pop    eax
c000ecfe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ed01:	68 c3 4c 02 c0       	push   0xc0024cc3
c000ed06:	e8 f0 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed0b:	58                   	pop    eax
c000ed0c:	5a                   	pop    edx
c000ed0d:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ed10:	68 ce 4c 02 c0       	push   0xc0024cce
c000ed15:	e8 e1 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed1a:	59                   	pop    ecx
c000ed1b:	58                   	pop    eax
c000ed1c:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed1f:	68 dd 4c 02 c0       	push   0xc0024cdd
c000ed24:	e8 d2 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed29:	58                   	pop    eax
c000ed2a:	5a                   	pop    edx
c000ed2b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ed2e:	68 e8 4c 02 c0       	push   0xc0024ce8
c000ed33:	e8 c3 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed38:	59                   	pop    ecx
c000ed39:	58                   	pop    eax
c000ed3a:	57                   	push   edi
c000ed3b:	68 f3 4c 02 c0       	push   0xc0024cf3
c000ed40:	e8 b6 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed45:	58                   	pop    eax
c000ed46:	5a                   	pop    edx
c000ed47:	56                   	push   esi
c000ed48:	68 fe 4c 02 c0       	push   0xc0024cfe
c000ed4d:	e8 a9 df ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000ed52:	59                   	pop    ecx
c000ed53:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ed58:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed5e:	e8 a6 bd ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c000ed63:	58                   	pop    eax
c000ed64:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ed67:	5a                   	pop    edx
c000ed68:	c1 e0 05             	shl    eax,0x5
c000ed6b:	05 60 73 02 c0       	add    eax,0xc0027360
c000ed70:	50                   	push   eax
c000ed71:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ed76:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed7c:	e8 95 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed81:	59                   	pop    ecx
c000ed82:	58                   	pop    eax
c000ed83:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ed88:	68 09 4d 02 c0       	push   0xc0024d09
c000ed8d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed93:	e8 7e c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ed98:	58                   	pop    eax
c000ed99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ed9e:	5a                   	pop    edx
c000ed9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eda2:	83 c0 0c             	add    eax,0xc
c000eda5:	50                   	push   eax
c000eda6:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000edab:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edb1:	e8 60 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edb6:	59                   	pop    ecx
c000edb7:	58                   	pop    eax
c000edb8:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000edbd:	68 12 4d 02 c0       	push   0xc0024d12
c000edc2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edc8:	e8 49 c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edcd:	58                   	pop    eax
c000edce:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000edd3:	5a                   	pop    edx
c000edd4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000edd7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eddd:	e8 ee c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ede2:	59                   	pop    ecx
c000ede3:	58                   	pop    eax
c000ede4:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ede9:	68 1a 4d 02 c0       	push   0xc0024d1a
c000edee:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edf4:	e8 1d c2 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000edf9:	58                   	pop    eax
c000edfa:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000edff:	5a                   	pop    edx
c000ee00:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ee03:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee09:	e8 c2 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee0e:	59                   	pop    ecx
c000ee0f:	58                   	pop    eax
c000ee10:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ee15:	68 22 4d 02 c0       	push   0xc0024d22
c000ee1a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee20:	e8 f1 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee25:	58                   	pop    eax
c000ee26:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ee2b:	5a                   	pop    edx
c000ee2c:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ee2f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee35:	e8 96 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee3a:	59                   	pop    ecx
c000ee3b:	58                   	pop    eax
c000ee3c:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ee41:	68 2a 4d 02 c0       	push   0xc0024d2a
c000ee46:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee4c:	e8 c5 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee51:	58                   	pop    eax
c000ee52:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ee57:	5a                   	pop    edx
c000ee58:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000ee5b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee61:	e8 6a c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee66:	59                   	pop    ecx
c000ee67:	58                   	pop    eax
c000ee68:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ee6d:	68 32 4d 02 c0       	push   0xc0024d32
c000ee72:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee78:	e8 99 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ee7d:	58                   	pop    eax
c000ee7e:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ee83:	5a                   	pop    edx
c000ee84:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ee87:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ee8d:	e8 3e c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ee92:	59                   	pop    ecx
c000ee93:	58                   	pop    eax
c000ee94:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ee99:	68 3a 4d 02 c0       	push   0xc0024d3a
c000ee9e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eea4:	e8 6d c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eea9:	58                   	pop    eax
c000eeaa:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000eeaf:	5a                   	pop    edx
c000eeb0:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000eeb3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eeb9:	e8 12 c1 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eebe:	59                   	pop    ecx
c000eebf:	58                   	pop    eax
c000eec0:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000eec5:	68 42 4d 02 c0       	push   0xc0024d42
c000eeca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eed0:	e8 41 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000eed5:	58                   	pop    eax
c000eed6:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000eedb:	5a                   	pop    edx
c000eedc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000eee0:	52                   	push   edx
c000eee1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eee7:	e8 e4 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eeec:	59                   	pop    ecx
c000eeed:	58                   	pop    eax
c000eeee:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000eef3:	68 4b 4d 02 c0       	push   0xc0024d4b
c000eef8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eefe:	e8 13 c1 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef03:	58                   	pop    eax
c000ef04:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ef09:	5a                   	pop    edx
c000ef0a:	57                   	push   edi
c000ef0b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef11:	e8 ba c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef16:	59                   	pop    ecx
c000ef17:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ef1c:	5f                   	pop    edi
c000ef1d:	68 53 4d 02 c0       	push   0xc0024d53
c000ef22:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef28:	e8 e9 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef2d:	58                   	pop    eax
c000ef2e:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ef33:	5a                   	pop    edx
c000ef34:	56                   	push   esi
c000ef35:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef3b:	e8 90 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef40:	59                   	pop    ecx
c000ef41:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ef46:	5e                   	pop    esi
c000ef47:	68 5b 4d 02 c0       	push   0xc0024d5b
c000ef4c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef52:	e8 bf c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef57:	5f                   	pop    edi
c000ef58:	58                   	pop    eax
c000ef59:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ef5e:	55                   	push   ebp
c000ef5f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef65:	e8 66 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef6a:	58                   	pop    eax
c000ef6b:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ef70:	5a                   	pop    edx
c000ef71:	68 63 4d 02 c0       	push   0xc0024d63
c000ef76:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef7c:	e8 95 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000ef81:	0f 21 c0             	mov    eax,db0
c000ef84:	59                   	pop    ecx
c000ef85:	5e                   	pop    esi
c000ef86:	50                   	push   eax
c000ef87:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ef8c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ef92:	e8 39 c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000ef97:	5f                   	pop    edi
c000ef98:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000ef9d:	5d                   	pop    ebp
c000ef9e:	68 6c 4d 02 c0       	push   0xc0024d6c
c000efa3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efa9:	e8 68 c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efae:	0f 21 c8             	mov    eax,db1
c000efb1:	5a                   	pop    edx
c000efb2:	59                   	pop    ecx
c000efb3:	50                   	push   eax
c000efb4:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000efb9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efbf:	e8 0c c0 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000efc4:	5e                   	pop    esi
c000efc5:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000efca:	5f                   	pop    edi
c000efcb:	68 74 4d 02 c0       	push   0xc0024d74
c000efd0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efd6:	e8 3b c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000efdb:	0f 21 d0             	mov    eax,db2
c000efde:	5d                   	pop    ebp
c000efdf:	5a                   	pop    edx
c000efe0:	50                   	push   eax
c000efe1:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000efe6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000efec:	e8 df bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000eff1:	59                   	pop    ecx
c000eff2:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000eff7:	5e                   	pop    esi
c000eff8:	68 7c 4d 02 c0       	push   0xc0024d7c
c000effd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f003:	e8 0e c0 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f008:	0f 21 d8             	mov    eax,db3
c000f00b:	5f                   	pop    edi
c000f00c:	5d                   	pop    ebp
c000f00d:	50                   	push   eax
c000f00e:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f013:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f019:	e8 b2 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f01e:	58                   	pop    eax
c000f01f:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f024:	5a                   	pop    edx
c000f025:	68 84 4d 02 c0       	push   0xc0024d84
c000f02a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f030:	e8 e1 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f035:	0f 21 f0             	mov    eax,db6
c000f038:	59                   	pop    ecx
c000f039:	5e                   	pop    esi
c000f03a:	50                   	push   eax
c000f03b:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f040:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f046:	e8 85 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f04b:	5f                   	pop    edi
c000f04c:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f051:	5d                   	pop    ebp
c000f052:	68 8c 4d 02 c0       	push   0xc0024d8c
c000f057:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f05d:	e8 b4 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f062:	0f 21 f8             	mov    eax,db7
c000f065:	5a                   	pop    edx
c000f066:	59                   	pop    ecx
c000f067:	50                   	push   eax
c000f068:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f06d:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f073:	e8 58 bf ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f078:	5e                   	pop    esi
c000f079:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f07c:	e8 f8 8a 00 00       	call   c0017b79 <Thr::getDriverNameFromAddress(unsigned long)>
c000f081:	83 c4 10             	add    esp,0x10
c000f084:	85 c0                	test   eax,eax
c000f086:	74 7d                	je     c000f105 <displayDebugInfo(regs*)+0x48b>
c000f088:	89 c6                	mov    esi,eax
c000f08a:	50                   	push   eax
c000f08b:	50                   	push   eax
c000f08c:	56                   	push   esi
c000f08d:	68 94 4d 02 c0       	push   0xc0024d94
c000f092:	e8 64 dc ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f097:	5a                   	pop    edx
c000f098:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f09d:	59                   	pop    ecx
c000f09e:	68 a2 4d 02 c0       	push   0xc0024da2
c000f0a3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0a9:	e8 68 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f0ae:	5f                   	pop    edi
c000f0af:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f0b4:	5d                   	pop    ebp
c000f0b5:	56                   	push   esi
c000f0b6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0bc:	e8 55 bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f0c1:	58                   	pop    eax
c000f0c2:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f0c7:	5a                   	pop    edx
c000f0c8:	68 ae 4d 02 c0       	push   0xc0024dae
c000f0cd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000f0d3:	e8 3e bf ff ff       	call   c000b016 <VgaText::puts(char const*)>
c000f0d8:	59                   	pop    ecx
c000f0d9:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000f0de:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000f0e4:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f0e7:	e8 c4 8a 00 00       	call   c0017bb0 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000f0ec:	5b                   	pop    ebx
c000f0ed:	5d                   	pop    ebp
c000f0ee:	50                   	push   eax
c000f0ef:	57                   	push   edi
c000f0f0:	e8 db be ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c000f0f5:	58                   	pop    eax
c000f0f6:	5a                   	pop    edx
c000f0f7:	56                   	push   esi
c000f0f8:	68 ba 4d 02 c0       	push   0xc0024dba
c000f0fd:	e8 f9 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f102:	83 c4 10             	add    esp,0x10
c000f105:	fa                   	cli    
c000f106:	f4                   	hlt    
c000f107:	eb fe                	jmp    c000f107 <displayDebugInfo(regs*)+0x48d>

c000f109 <x87EmulHandler(regs*, void*)>:
c000f109:	83 ec 0c             	sub    esp,0xc
c000f10c:	0f 20 c2             	mov    edx,cr0
c000f10f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f114:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000f118:	75 4b                	jne    c000f165 <x87EmulHandler(regs*, void*)+0x5c>
c000f11a:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000f11f:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000f125:	85 c0                	test   eax,eax
c000f127:	74 05                	je     c000f12e <x87EmulHandler(regs*, void*)+0x25>
c000f129:	83 e2 08             	and    edx,0x8
c000f12c:	75 17                	jne    c000f145 <x87EmulHandler(regs*, void*)+0x3c>
c000f12e:	83 ec 0c             	sub    esp,0xc
c000f131:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f135:	e8 a4 af 00 00       	call   c001a0de <Vm::x87Handler(regs*)>
c000f13a:	83 c4 10             	add    esp,0x10
c000f13d:	84 c0                	test   al,al
c000f13f:	74 24                	je     c000f165 <x87EmulHandler(regs*, void*)+0x5c>
c000f141:	83 c4 0c             	add    esp,0xc
c000f144:	c3                   	ret    
c000f145:	83 ec 0c             	sub    esp,0xc
c000f148:	68 e0 4d 02 c0       	push   0xc0024de0
c000f14d:	e8 a9 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f152:	0f 06                	clts   
c000f154:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f159:	83 c4 10             	add    esp,0x10
c000f15c:	a3 48 80 02 c0       	mov    ds:0xc0028048,eax
c000f161:	83 c4 0c             	add    esp,0xc
c000f164:	c3                   	ret    
c000f165:	83 ec 0c             	sub    esp,0xc
c000f168:	68 ca 4d 02 c0       	push   0xc0024dca
c000f16d:	e8 89 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f172:	5a                   	pop    edx
c000f173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f177:	e8 fe fa ff ff       	call   c000ec7a <displayDebugInfo(regs*)>

c000f17c <gpFault(regs*, void*)>:
c000f17c:	53                   	push   ebx
c000f17d:	83 ec 14             	sub    esp,0x14
c000f180:	c7 05 44 80 02 c0 9b 95 01 c0 	mov    DWORD PTR ds:0xc0028044,0xc001959b
c000f18a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000f18e:	53                   	push   ebx
c000f18f:	e8 07 a4 00 00       	call   c001959b <Vm::faultHandler(regs*)>
c000f194:	83 c4 10             	add    esp,0x10
c000f197:	84 c0                	test   al,al
c000f199:	74 05                	je     c000f1a0 <gpFault(regs*, void*)+0x24>
c000f19b:	83 c4 08             	add    esp,0x8
c000f19e:	5b                   	pop    ebx
c000f19f:	c3                   	ret    
c000f1a0:	83 ec 0c             	sub    esp,0xc
c000f1a3:	68 ed 4d 02 c0       	push   0xc0024ded
c000f1a8:	e8 4e db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f1ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f1b0:	e8 c5 fa ff ff       	call   c000ec7a <displayDebugInfo(regs*)>

c000f1b5 <pgFault(regs*, void*)>:
c000f1b5:	53                   	push   ebx
c000f1b6:	83 ec 10             	sub    esp,0x10
c000f1b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f1bd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000f1c0:	68 08 4e 02 c0       	push   0xc0024e08
c000f1c5:	e8 31 db ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f1ca:	0f 20 d0             	mov    eax,cr2
c000f1cd:	5a                   	pop    edx
c000f1ce:	59                   	pop    ecx
c000f1cf:	50                   	push   eax
c000f1d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f1d5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f1d8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000f1de:	e8 93 d6 ff ff       	call   c000c876 <VAS::tryLoadBackOffDisk(unsigned long)>
c000f1e3:	83 c4 10             	add    esp,0x10
c000f1e6:	84 c0                	test   al,al
c000f1e8:	74 05                	je     c000f1ef <pgFault(regs*, void*)+0x3a>
c000f1ea:	83 c4 08             	add    esp,0x8
c000f1ed:	5b                   	pop    ebx
c000f1ee:	c3                   	ret    
c000f1ef:	83 ec 0c             	sub    esp,0xc
c000f1f2:	68 1d 4e 02 c0       	push   0xc0024e1d
c000f1f7:	e8 ff da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f1fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f1ff:	e8 76 fa ff ff       	call   c000ec7a <displayDebugInfo(regs*)>

c000f204 <otherISRHandler(regs*, void*)>:
c000f204:	53                   	push   ebx
c000f205:	83 ec 0c             	sub    esp,0xc
c000f208:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f20c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000f20f:	50                   	push   eax
c000f210:	50                   	push   eax
c000f211:	68 2a 4e 02 c0       	push   0xc0024e2a
c000f216:	e8 e0 da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f21b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f21e:	e8 57 fa ff ff       	call   c000ec7a <displayDebugInfo(regs*)>

c000f223 <opcodeFault(regs*, void*)>:
c000f223:	55                   	push   ebp
c000f224:	89 e5                	mov    ebp,esp
c000f226:	56                   	push   esi
c000f227:	53                   	push   ebx
c000f228:	83 ec 30             	sub    esp,0x30
c000f22b:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000f230:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f236:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000f23c:	84 c0                	test   al,al
c000f23e:	74 24                	je     c000f264 <opcodeFault(regs*, void*)+0x41>
c000f240:	83 ec 0c             	sub    esp,0xc
c000f243:	68 48 4e 02 c0       	push   0xc0024e48
c000f248:	e8 ae da ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f24d:	83 c4 10             	add    esp,0x10
c000f250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f253:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f256:	8d 50 19             	lea    edx,[eax+0x19]
c000f259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f25c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f25f:	e9 7b 03 00 00       	jmp    c000f5df <opcodeFault(regs*, void*)+0x3bc>
c000f264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f267:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f26a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f26d:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000f271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f274:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f277:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000f27a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f27d:	8a 00                	mov    al,BYTE PTR [eax]
c000f27f:	3c f0                	cmp    al,0xf0
c000f281:	75 17                	jne    c000f29a <opcodeFault(regs*, void*)+0x77>
c000f283:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f286:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f289:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f28c:	8d 50 01             	lea    edx,[eax+0x1]
c000f28f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f292:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f295:	e9 d6 00 00 00       	jmp    c000f370 <opcodeFault(regs*, void*)+0x14d>
c000f29a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f29d:	8a 00                	mov    al,BYTE PTR [eax]
c000f29f:	3c f2                	cmp    al,0xf2
c000f2a1:	74 09                	je     c000f2ac <opcodeFault(regs*, void*)+0x89>
c000f2a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2a6:	8a 00                	mov    al,BYTE PTR [eax]
c000f2a8:	3c f3                	cmp    al,0xf3
c000f2aa:	75 1b                	jne    c000f2c7 <opcodeFault(regs*, void*)+0xa4>
c000f2ac:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f2b0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2b6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2b9:	8d 50 01             	lea    edx,[eax+0x1]
c000f2bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2bf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2c2:	e9 a9 00 00 00       	jmp    c000f370 <opcodeFault(regs*, void*)+0x14d>
c000f2c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2ca:	8a 00                	mov    al,BYTE PTR [eax]
c000f2cc:	3c 66                	cmp    al,0x66
c000f2ce:	75 1b                	jne    c000f2eb <opcodeFault(regs*, void*)+0xc8>
c000f2d0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f2d4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2da:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2dd:	8d 50 01             	lea    edx,[eax+0x1]
c000f2e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2e3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f2e6:	e9 85 00 00 00       	jmp    c000f370 <opcodeFault(regs*, void*)+0x14d>
c000f2eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f2ee:	8a 00                	mov    al,BYTE PTR [eax]
c000f2f0:	3c 67                	cmp    al,0x67
c000f2f2:	75 18                	jne    c000f30c <opcodeFault(regs*, void*)+0xe9>
c000f2f4:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f2f8:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f2fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2fe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f301:	8d 50 01             	lea    edx,[eax+0x1]
c000f304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f307:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f30a:	eb 64                	jmp    c000f370 <opcodeFault(regs*, void*)+0x14d>
c000f30c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f30f:	8a 00                	mov    al,BYTE PTR [eax]
c000f311:	3c 2e                	cmp    al,0x2e
c000f313:	74 09                	je     c000f31e <opcodeFault(regs*, void*)+0xfb>
c000f315:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f318:	8a 00                	mov    al,BYTE PTR [eax]
c000f31a:	3c 3e                	cmp    al,0x3e
c000f31c:	75 18                	jne    c000f336 <opcodeFault(regs*, void*)+0x113>
c000f31e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f322:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f328:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f32b:	8d 50 01             	lea    edx,[eax+0x1]
c000f32e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f331:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f334:	eb 3a                	jmp    c000f370 <opcodeFault(regs*, void*)+0x14d>
c000f336:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f339:	8a 00                	mov    al,BYTE PTR [eax]
c000f33b:	3c 36                	cmp    al,0x36
c000f33d:	74 1b                	je     c000f35a <opcodeFault(regs*, void*)+0x137>
c000f33f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f342:	8a 00                	mov    al,BYTE PTR [eax]
c000f344:	3c 26                	cmp    al,0x26
c000f346:	74 12                	je     c000f35a <opcodeFault(regs*, void*)+0x137>
c000f348:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f34b:	8a 00                	mov    al,BYTE PTR [eax]
c000f34d:	3c 64                	cmp    al,0x64
c000f34f:	74 09                	je     c000f35a <opcodeFault(regs*, void*)+0x137>
c000f351:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f354:	8a 00                	mov    al,BYTE PTR [eax]
c000f356:	3c 65                	cmp    al,0x65
c000f358:	75 16                	jne    c000f370 <opcodeFault(regs*, void*)+0x14d>
c000f35a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f35e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f364:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f367:	8d 50 01             	lea    edx,[eax+0x1]
c000f36a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f36d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f370:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f373:	8a 00                	mov    al,BYTE PTR [eax]
c000f375:	3c 0f                	cmp    al,0xf
c000f377:	0f 85 8d 01 00 00    	jne    c000f50a <opcodeFault(regs*, void*)+0x2e7>
c000f37d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f380:	40                   	inc    eax
c000f381:	8a 00                	mov    al,BYTE PTR [eax]
c000f383:	3c c7                	cmp    al,0xc7
c000f385:	0f 85 7f 01 00 00    	jne    c000f50a <opcodeFault(regs*, void*)+0x2e7>
c000f38b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f38e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f391:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f394:	8d 50 01             	lea    edx,[eax+0x1]
c000f397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f39a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f39d:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f3a0:	50                   	push   eax
c000f3a1:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f3a4:	50                   	push   eax
c000f3a5:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f3a8:	50                   	push   eax
c000f3a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f3ac:	e8 0b 4d 00 00       	call   c00140bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f3b1:	83 c4 10             	add    esp,0x10
c000f3b4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f3b7:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f3ba:	83 f0 01             	xor    eax,0x1
c000f3bd:	84 c0                	test   al,al
c000f3bf:	0f 84 45 01 00 00    	je     c000f50a <opcodeFault(regs*, void*)+0x2e7>
c000f3c5:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f3c8:	3c 01                	cmp    al,0x1
c000f3ca:	0f 85 3a 01 00 00    	jne    c000f50a <opcodeFault(regs*, void*)+0x2e7>
c000f3d0:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f3d3:	83 f0 01             	xor    eax,0x1
c000f3d6:	84 c0                	test   al,al
c000f3d8:	0f 84 2c 01 00 00    	je     c000f50a <opcodeFault(regs*, void*)+0x2e7>
c000f3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f3e1:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f3e4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f3e7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f3ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f3f1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f3f4:	89 c2                	mov    edx,eax
c000f3f6:	b8 00 00 00 00       	mov    eax,0x0
c000f3fb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f3fe:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f404:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f407:	ba 00 00 00 00       	mov    edx,0x0
c000f40c:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f40f:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f415:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f418:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f41b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f422:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f425:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f428:	89 c2                	mov    edx,eax
c000f42a:	b8 00 00 00 00       	mov    eax,0x0
c000f42f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f432:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f438:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f43b:	ba 00 00 00 00       	mov    edx,0x0
c000f440:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f443:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f446:	fa                   	cli    
c000f447:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000f44c:	40                   	inc    eax
c000f44d:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000f452:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f455:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f458:	8b 00                	mov    eax,DWORD PTR [eax]
c000f45a:	89 c1                	mov    ecx,eax
c000f45c:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f45f:	89 cb                	mov    ebx,ecx
c000f461:	89 d0                	mov    eax,edx
c000f463:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f466:	89 c6                	mov    esi,eax
c000f468:	89 f0                	mov    eax,esi
c000f46a:	09 d8                	or     eax,ebx
c000f46c:	85 c0                	test   eax,eax
c000f46e:	75 21                	jne    c000f491 <opcodeFault(regs*, void*)+0x26e>
c000f470:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f473:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f476:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f479:	89 01                	mov    DWORD PTR [ecx],eax
c000f47b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f47e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f481:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f484:	83 c8 40             	or     eax,0x40
c000f487:	89 c2                	mov    edx,eax
c000f489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f48c:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f48f:	eb 3e                	jmp    c000f4cf <opcodeFault(regs*, void*)+0x2ac>
c000f491:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f494:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f497:	8b 00                	mov    eax,DWORD PTR [eax]
c000f499:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f49c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f49f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f4a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4a5:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f4a8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f4ab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f4ae:	89 d0                	mov    eax,edx
c000f4b0:	31 d2                	xor    edx,edx
c000f4b2:	89 c3                	mov    ebx,eax
c000f4b4:	89 d6                	mov    esi,edx
c000f4b6:	89 da                	mov    edx,ebx
c000f4b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4bb:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f4be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4c1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f4c4:	83 e0 bf             	and    eax,0xffffffbf
c000f4c7:	89 c2                	mov    edx,eax
c000f4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4cc:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f4cf:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000f4d4:	48                   	dec    eax
c000f4d5:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000f4da:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000f4df:	85 c0                	test   eax,eax
c000f4e1:	75 01                	jne    c000f4e4 <opcodeFault(regs*, void*)+0x2c1>
c000f4e3:	fb                   	sti    
c000f4e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4e7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f4ea:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f4ed:	01 c2                	add    edx,eax
c000f4ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f4f2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f4f5:	83 ec 0c             	sub    esp,0xc
c000f4f8:	68 6b 4e 02 c0       	push   0xc0024e6b
c000f4fd:	e8 f9 d7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f502:	83 c4 10             	add    esp,0x10
c000f505:	e9 d5 00 00 00       	jmp    c000f5df <opcodeFault(regs*, void*)+0x3bc>
c000f50a:	83 ec 0c             	sub    esp,0xc
c000f50d:	68 7e 4e 02 c0       	push   0xc0024e7e
c000f512:	e8 e4 d7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f517:	83 c4 10             	add    esp,0x10
c000f51a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f51d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f523:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f526:	c1 e0 04             	shl    eax,0x4
c000f529:	01 d0                	add    eax,edx
c000f52b:	83 c0 03             	add    eax,0x3
c000f52e:	8a 00                	mov    al,BYTE PTR [eax]
c000f530:	0f b6 d8             	movzx  ebx,al
c000f533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f536:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f53c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f53f:	c1 e0 04             	shl    eax,0x4
c000f542:	01 d0                	add    eax,edx
c000f544:	83 c0 02             	add    eax,0x2
c000f547:	8a 00                	mov    al,BYTE PTR [eax]
c000f549:	0f b6 c8             	movzx  ecx,al
c000f54c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f54f:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f552:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f555:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f558:	c1 e0 04             	shl    eax,0x4
c000f55b:	01 d0                	add    eax,edx
c000f55d:	40                   	inc    eax
c000f55e:	8a 00                	mov    al,BYTE PTR [eax]
c000f560:	0f b6 d0             	movzx  edx,al
c000f563:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f566:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f56c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f56f:	c1 e0 04             	shl    eax,0x4
c000f572:	01 f0                	add    eax,esi
c000f574:	8a 00                	mov    al,BYTE PTR [eax]
c000f576:	0f b6 c0             	movzx  eax,al
c000f579:	83 ec 0c             	sub    esp,0xc
c000f57c:	53                   	push   ebx
c000f57d:	51                   	push   ecx
c000f57e:	52                   	push   edx
c000f57f:	50                   	push   eax
c000f580:	68 90 4e 02 c0       	push   0xc0024e90
c000f585:	e8 71 d7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f58a:	83 c4 20             	add    esp,0x20
c000f58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f590:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f593:	83 c0 03             	add    eax,0x3
c000f596:	8a 00                	mov    al,BYTE PTR [eax]
c000f598:	0f b6 d8             	movzx  ebx,al
c000f59b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f59e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5a1:	83 c0 02             	add    eax,0x2
c000f5a4:	8a 00                	mov    al,BYTE PTR [eax]
c000f5a6:	0f b6 c8             	movzx  ecx,al
c000f5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5af:	40                   	inc    eax
c000f5b0:	8a 00                	mov    al,BYTE PTR [eax]
c000f5b2:	0f b6 d0             	movzx  edx,al
c000f5b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f5b8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f5bb:	8a 00                	mov    al,BYTE PTR [eax]
c000f5bd:	0f b6 c0             	movzx  eax,al
c000f5c0:	83 ec 0c             	sub    esp,0xc
c000f5c3:	53                   	push   ebx
c000f5c4:	51                   	push   ecx
c000f5c5:	52                   	push   edx
c000f5c6:	50                   	push   eax
c000f5c7:	68 b8 4e 02 c0       	push   0xc0024eb8
c000f5cc:	e8 2a d7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c000f5d1:	83 c4 20             	add    esp,0x20
c000f5d4:	83 ec 0c             	sub    esp,0xc
c000f5d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f5da:	e8 9b f6 ff ff       	call   c000ec7a <displayDebugInfo(regs*)>
c000f5df:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f5e2:	5b                   	pop    ebx
c000f5e3:	5e                   	pop    esi
c000f5e4:	5d                   	pop    ebp
c000f5e5:	c3                   	ret    

c000f5e6 <displayProgramFault(char const*)>:
c000f5e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f5eb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f5ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f5f4:	85 c0                	test   eax,eax
c000f5f6:	74 15                	je     c000f60d <displayProgramFault(char const*)+0x27>
c000f5f8:	83 ec 0c             	sub    esp,0xc
c000f5fb:	6a 04                	push   0x4
c000f5fd:	6a 0f                	push   0xf
c000f5ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f603:	50                   	push   eax
c000f604:	e8 09 b7 ff ff       	call   c000ad12 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f609:	83 c4 1c             	add    esp,0x1c
c000f60c:	c3                   	ret    
c000f60d:	c3                   	ret    

c000f60e <setupInterruptController()>:
c000f60e:	55                   	push   ebp
c000f60f:	89 e5                	mov    ebp,esp
c000f611:	53                   	push   ebx
c000f612:	83 ec 24             	sub    esp,0x24
c000f615:	b8 00 00 00 00       	mov    eax,0x0
c000f61a:	85 c0                	test   eax,eax
c000f61c:	0f 95 c0             	setne  al
c000f61f:	84 c0                	test   al,al
c000f621:	74 5b                	je     c000f67e <setupInterruptController()+0x70>
c000f623:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f62a:	83 ec 0c             	sub    esp,0xc
c000f62d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f630:	e8 da a3 ff ff       	call   c0009a0f <malloc>
c000f635:	83 c4 10             	add    esp,0x10
c000f638:	89 c3                	mov    ebx,eax
c000f63a:	83 ec 0c             	sub    esp,0xc
c000f63d:	53                   	push   ebx
c000f63e:	e8 df 1f 01 00       	call   c0021622 <APIC::APIC()>
c000f643:	83 c4 10             	add    esp,0x10
c000f646:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f649:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f64c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f64f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f651:	83 c0 08             	add    eax,0x8
c000f654:	8b 00                	mov    eax,DWORD PTR [eax]
c000f656:	6a 00                	push   0x0
c000f658:	6a 00                	push   0x0
c000f65a:	6a 00                	push   0x0
c000f65c:	52                   	push   edx
c000f65d:	ff d0                	call   eax
c000f65f:	83 c4 10             	add    esp,0x10
c000f662:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000f667:	83 ec 08             	sub    esp,0x8
c000f66a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f66d:	50                   	push   eax
c000f66e:	e8 fb eb ff ff       	call   c000e26e <Device::addChild(Device*)>
c000f673:	83 c4 10             	add    esp,0x10
c000f676:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f679:	e9 79 03 00 00       	jmp    c000f9f7 <setupInterruptController()+0x3e9>
c000f67e:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c000f683:	84 c0                	test   al,al
c000f685:	75 14                	jne    c000f69b <setupInterruptController()+0x8d>
c000f687:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000f68c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f692:	83 e2 fe             	and    edx,0xfffffffe
c000f695:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f69b:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000f6a0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f6a6:	83 e0 01             	and    eax,0x1
c000f6a9:	84 c0                	test   al,al
c000f6ab:	0f 95 c0             	setne  al
c000f6ae:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f6b1:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f6b8:	83 ec 0c             	sub    esp,0xc
c000f6bb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f6be:	e8 4c a3 ff ff       	call   c0009a0f <malloc>
c000f6c3:	83 c4 10             	add    esp,0x10
c000f6c6:	89 c3                	mov    ebx,eax
c000f6c8:	83 ec 0c             	sub    esp,0xc
c000f6cb:	53                   	push   ebx
c000f6cc:	e8 a9 24 01 00       	call   c0021b7a <PIC::PIC()>
c000f6d1:	83 c4 10             	add    esp,0x10
c000f6d4:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f6d7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f6da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6df:	83 c0 08             	add    eax,0x8
c000f6e2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6e4:	6a 00                	push   0x0
c000f6e6:	6a 00                	push   0x0
c000f6e8:	6a 00                	push   0x0
c000f6ea:	52                   	push   edx
c000f6eb:	ff d0                	call   eax
c000f6ed:	83 c4 10             	add    esp,0x10
c000f6f0:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f6f4:	74 73                	je     c000f769 <setupInterruptController()+0x15b>
c000f6f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f6f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6fe:	83 c0 0c             	add    eax,0xc
c000f701:	8b 00                	mov    eax,DWORD PTR [eax]
c000f703:	6a 00                	push   0x0
c000f705:	6a 00                	push   0x0
c000f707:	6a 00                	push   0x0
c000f709:	52                   	push   edx
c000f70a:	ff d0                	call   eax
c000f70c:	83 c4 10             	add    esp,0x10
c000f70f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f713:	74 15                	je     c000f72a <setupInterruptController()+0x11c>
c000f715:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f718:	8b 00                	mov    eax,DWORD PTR [eax]
c000f71a:	83 c0 04             	add    eax,0x4
c000f71d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f71f:	83 ec 0c             	sub    esp,0xc
c000f722:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f725:	ff d0                	call   eax
c000f727:	83 c4 10             	add    esp,0x10
c000f72a:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f731:	83 ec 0c             	sub    esp,0xc
c000f734:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f737:	e8 d3 a2 ff ff       	call   c0009a0f <malloc>
c000f73c:	83 c4 10             	add    esp,0x10
c000f73f:	89 c3                	mov    ebx,eax
c000f741:	83 ec 0c             	sub    esp,0xc
c000f744:	53                   	push   ebx
c000f745:	e8 d8 1e 01 00       	call   c0021622 <APIC::APIC()>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f750:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f753:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f756:	8b 00                	mov    eax,DWORD PTR [eax]
c000f758:	83 c0 08             	add    eax,0x8
c000f75b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f75d:	6a 00                	push   0x0
c000f75f:	6a 00                	push   0x0
c000f761:	6a 00                	push   0x0
c000f763:	52                   	push   edx
c000f764:	ff d0                	call   eax
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c000f76e:	83 ec 08             	sub    esp,0x8
c000f771:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f774:	50                   	push   eax
c000f775:	e8 f4 ea ff ff       	call   c000e26e <Device::addChild(Device*)>
c000f77a:	83 c4 10             	add    esp,0x10
c000f77d:	c7 05 48 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028048,0x0
c000f787:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f78a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f78c:	83 c0 24             	add    eax,0x24
c000f78f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f791:	6a 00                	push   0x0
c000f793:	68 04 f2 00 c0       	push   0xc000f204
c000f798:	6a 00                	push   0x0
c000f79a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f79d:	ff d0                	call   eax
c000f79f:	83 c4 10             	add    esp,0x10
c000f7a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7a5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7a7:	83 c0 24             	add    eax,0x24
c000f7aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7ac:	6a 00                	push   0x0
c000f7ae:	68 04 f2 00 c0       	push   0xc000f204
c000f7b3:	6a 01                	push   0x1
c000f7b5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7b8:	ff d0                	call   eax
c000f7ba:	83 c4 10             	add    esp,0x10
c000f7bd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7c0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c2:	83 c0 24             	add    eax,0x24
c000f7c5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7c7:	6a 00                	push   0x0
c000f7c9:	68 d7 ea 00 c0       	push   0xc000ead7
c000f7ce:	6a 02                	push   0x2
c000f7d0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7d3:	ff d0                	call   eax
c000f7d5:	83 c4 10             	add    esp,0x10
c000f7d8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7db:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7dd:	83 c0 24             	add    eax,0x24
c000f7e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7e2:	6a 00                	push   0x0
c000f7e4:	68 04 f2 00 c0       	push   0xc000f204
c000f7e9:	6a 03                	push   0x3
c000f7eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f7ee:	ff d0                	call   eax
c000f7f0:	83 c4 10             	add    esp,0x10
c000f7f3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f7f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7f8:	83 c0 24             	add    eax,0x24
c000f7fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000f7fd:	6a 00                	push   0x0
c000f7ff:	68 04 f2 00 c0       	push   0xc000f204
c000f804:	6a 04                	push   0x4
c000f806:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f809:	ff d0                	call   eax
c000f80b:	83 c4 10             	add    esp,0x10
c000f80e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f811:	8b 00                	mov    eax,DWORD PTR [eax]
c000f813:	83 c0 24             	add    eax,0x24
c000f816:	8b 00                	mov    eax,DWORD PTR [eax]
c000f818:	6a 00                	push   0x0
c000f81a:	68 04 f2 00 c0       	push   0xc000f204
c000f81f:	6a 05                	push   0x5
c000f821:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f824:	ff d0                	call   eax
c000f826:	83 c4 10             	add    esp,0x10
c000f829:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f82c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f82e:	83 c0 24             	add    eax,0x24
c000f831:	8b 00                	mov    eax,DWORD PTR [eax]
c000f833:	6a 00                	push   0x0
c000f835:	68 23 f2 00 c0       	push   0xc000f223
c000f83a:	6a 06                	push   0x6
c000f83c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f83f:	ff d0                	call   eax
c000f841:	83 c4 10             	add    esp,0x10
c000f844:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f847:	8b 00                	mov    eax,DWORD PTR [eax]
c000f849:	83 c0 24             	add    eax,0x24
c000f84c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f84e:	6a 00                	push   0x0
c000f850:	68 09 f1 00 c0       	push   0xc000f109
c000f855:	6a 07                	push   0x7
c000f857:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f85a:	ff d0                	call   eax
c000f85c:	83 c4 10             	add    esp,0x10
c000f85f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f862:	8b 00                	mov    eax,DWORD PTR [eax]
c000f864:	83 c0 24             	add    eax,0x24
c000f867:	8b 00                	mov    eax,DWORD PTR [eax]
c000f869:	6a 00                	push   0x0
c000f86b:	68 f2 e8 00 c0       	push   0xc000e8f2
c000f870:	6a 08                	push   0x8
c000f872:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f875:	ff d0                	call   eax
c000f877:	83 c4 10             	add    esp,0x10
c000f87a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f87d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f87f:	83 c0 24             	add    eax,0x24
c000f882:	8b 00                	mov    eax,DWORD PTR [eax]
c000f884:	6a 00                	push   0x0
c000f886:	68 04 f2 00 c0       	push   0xc000f204
c000f88b:	6a 09                	push   0x9
c000f88d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f890:	ff d0                	call   eax
c000f892:	83 c4 10             	add    esp,0x10
c000f895:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f898:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89a:	83 c0 24             	add    eax,0x24
c000f89d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f89f:	6a 00                	push   0x0
c000f8a1:	68 04 f2 00 c0       	push   0xc000f204
c000f8a6:	6a 0a                	push   0xa
c000f8a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8ab:	ff d0                	call   eax
c000f8ad:	83 c4 10             	add    esp,0x10
c000f8b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8b5:	83 c0 24             	add    eax,0x24
c000f8b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8ba:	6a 00                	push   0x0
c000f8bc:	68 04 f2 00 c0       	push   0xc000f204
c000f8c1:	6a 0b                	push   0xb
c000f8c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8c6:	ff d0                	call   eax
c000f8c8:	83 c4 10             	add    esp,0x10
c000f8cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8ce:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d0:	83 c0 24             	add    eax,0x24
c000f8d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8d5:	6a 00                	push   0x0
c000f8d7:	68 04 f2 00 c0       	push   0xc000f204
c000f8dc:	6a 0c                	push   0xc
c000f8de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8e1:	ff d0                	call   eax
c000f8e3:	83 c4 10             	add    esp,0x10
c000f8e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f8e9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8eb:	83 c0 24             	add    eax,0x24
c000f8ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8f0:	6a 00                	push   0x0
c000f8f2:	68 7c f1 00 c0       	push   0xc000f17c
c000f8f7:	6a 0d                	push   0xd
c000f8f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f8fc:	ff d0                	call   eax
c000f8fe:	83 c4 10             	add    esp,0x10
c000f901:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f904:	8b 00                	mov    eax,DWORD PTR [eax]
c000f906:	83 c0 24             	add    eax,0x24
c000f909:	8b 00                	mov    eax,DWORD PTR [eax]
c000f90b:	6a 00                	push   0x0
c000f90d:	68 b5 f1 00 c0       	push   0xc000f1b5
c000f912:	6a 0e                	push   0xe
c000f914:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f917:	ff d0                	call   eax
c000f919:	83 c4 10             	add    esp,0x10
c000f91c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f91f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f921:	83 c0 24             	add    eax,0x24
c000f924:	8b 00                	mov    eax,DWORD PTR [eax]
c000f926:	6a 00                	push   0x0
c000f928:	68 04 f2 00 c0       	push   0xc000f204
c000f92d:	6a 0f                	push   0xf
c000f92f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f932:	ff d0                	call   eax
c000f934:	83 c4 10             	add    esp,0x10
c000f937:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f93a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f93c:	83 c0 24             	add    eax,0x24
c000f93f:	8b 00                	mov    eax,DWORD PTR [eax]
c000f941:	6a 00                	push   0x0
c000f943:	68 04 f2 00 c0       	push   0xc000f204
c000f948:	6a 10                	push   0x10
c000f94a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f94d:	ff d0                	call   eax
c000f94f:	83 c4 10             	add    esp,0x10
c000f952:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f955:	8b 00                	mov    eax,DWORD PTR [eax]
c000f957:	83 c0 24             	add    eax,0x24
c000f95a:	8b 00                	mov    eax,DWORD PTR [eax]
c000f95c:	6a 00                	push   0x0
c000f95e:	68 04 f2 00 c0       	push   0xc000f204
c000f963:	6a 11                	push   0x11
c000f965:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f968:	ff d0                	call   eax
c000f96a:	83 c4 10             	add    esp,0x10
c000f96d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f970:	8b 00                	mov    eax,DWORD PTR [eax]
c000f972:	83 c0 24             	add    eax,0x24
c000f975:	8b 00                	mov    eax,DWORD PTR [eax]
c000f977:	6a 00                	push   0x0
c000f979:	68 04 f2 00 c0       	push   0xc000f204
c000f97e:	6a 12                	push   0x12
c000f980:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f983:	ff d0                	call   eax
c000f985:	83 c4 10             	add    esp,0x10
c000f988:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f98b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f98d:	83 c0 24             	add    eax,0x24
c000f990:	8b 00                	mov    eax,DWORD PTR [eax]
c000f992:	6a 00                	push   0x0
c000f994:	68 04 f2 00 c0       	push   0xc000f204
c000f999:	6a 13                	push   0x13
c000f99b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f99e:	ff d0                	call   eax
c000f9a0:	83 c4 10             	add    esp,0x10
c000f9a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9a8:	83 c0 24             	add    eax,0x24
c000f9ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9ad:	6a 00                	push   0x0
c000f9af:	68 04 f2 00 c0       	push   0xc000f204
c000f9b4:	6a 14                	push   0x14
c000f9b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9b9:	ff d0                	call   eax
c000f9bb:	83 c4 10             	add    esp,0x10
c000f9be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c3:	83 c0 24             	add    eax,0x24
c000f9c6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9c8:	6a 00                	push   0x0
c000f9ca:	68 04 f2 00 c0       	push   0xc000f204
c000f9cf:	6a 1e                	push   0x1e
c000f9d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9d4:	ff d0                	call   eax
c000f9d6:	83 c4 10             	add    esp,0x10
c000f9d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9de:	83 c0 24             	add    eax,0x24
c000f9e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f9e3:	6a 00                	push   0x0
c000f9e5:	68 ef 6b 01 c0       	push   0xc0016bef
c000f9ea:	6a 60                	push   0x60
c000f9ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f9ef:	ff d0                	call   eax
c000f9f1:	83 c4 10             	add    esp,0x10
c000f9f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f9f7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f9fa:	c9                   	leave  
c000f9fb:	c3                   	ret    

c000f9fc <InterruptController::convertLegacyIRQNumber(int)>:
c000f9fc:	55                   	push   ebp
c000f9fd:	89 e5                	mov    ebp,esp
c000f9ff:	83 ec 08             	sub    esp,0x8
c000fa02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa05:	83 ec 0c             	sub    esp,0xc
c000fa08:	50                   	push   eax
c000fa09:	e8 60 eb ff ff       	call   c000e56e <Device::getName()>
c000fa0e:	83 c4 10             	add    esp,0x10
c000fa11:	8a 00                	mov    al,BYTE PTR [eax]
c000fa13:	3c 41                	cmp    al,0x41
c000fa15:	0f 94 c0             	sete   al
c000fa18:	84 c0                	test   al,al
c000fa1a:	74 28                	je     c000fa44 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fa1c:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000fa20:	7f 12                	jg     c000fa34 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000fa22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fa25:	05 00 76 02 c0       	add    eax,0xc0027600
c000fa2a:	8a 00                	mov    al,BYTE PTR [eax]
c000fa2c:	0f b6 c0             	movzx  eax,al
c000fa2f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000fa32:	eb 10                	jmp    c000fa44 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000fa34:	83 ec 0c             	sub    esp,0xc
c000fa37:	68 e0 4e 02 c0       	push   0xc0024ee0
c000fa3c:	e8 62 4f 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c000fa41:	83 c4 10             	add    esp,0x10
c000fa44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fa47:	c9                   	leave  
c000fa48:	c3                   	ret    
c000fa49:	90                   	nop

c000fa4a <startGUI(void*)>:
c000fa4a:	55                   	push   ebp
c000fa4b:	89 e5                	mov    ebp,esp
c000fa4d:	53                   	push   ebx
c000fa4e:	83 ec 04             	sub    esp,0x4
c000fa51:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000fa56:	48                   	dec    eax
c000fa57:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000fa5c:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000fa61:	85 c0                	test   eax,eax
c000fa63:	75 01                	jne    c000fa66 <startGUI(void*)+0x1c>
c000fa65:	fb                   	sti    
c000fa66:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c000fa6c:	83 ec 08             	sub    esp,0x8
c000fa6f:	6a 01                	push   0x1
c000fa71:	68 60 4f 02 c0       	push   0xc0024f60
c000fa76:	e8 4f 81 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c000fa7b:	83 c4 10             	add    esp,0x10
c000fa7e:	83 ec 08             	sub    esp,0x8
c000fa81:	53                   	push   ebx
c000fa82:	50                   	push   eax
c000fa83:	e8 73 83 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c000fa88:	83 c4 10             	add    esp,0x10
c000fa8b:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c000fa91:	83 ec 08             	sub    esp,0x8
c000fa94:	6a 01                	push   0x1
c000fa96:	68 7a 4f 02 c0       	push   0xc0024f7a
c000fa9b:	e8 2a 81 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c000faa0:	83 c4 10             	add    esp,0x10
c000faa3:	83 ec 08             	sub    esp,0x8
c000faa6:	53                   	push   ebx
c000faa7:	50                   	push   eax
c000faa8:	e8 4e 83 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c000faad:	83 c4 10             	add    esp,0x10
c000fab0:	90                   	nop
c000fab1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fab4:	c9                   	leave  
c000fab5:	c3                   	ret    

c000fab6 <startGUIVESA(void*)>:
c000fab6:	55                   	push   ebp
c000fab7:	89 e5                	mov    ebp,esp
c000fab9:	53                   	push   ebx
c000faba:	83 ec 04             	sub    esp,0x4
c000fabd:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000fac2:	48                   	dec    eax
c000fac3:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000fac8:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000facd:	85 c0                	test   eax,eax
c000facf:	75 01                	jne    c000fad2 <startGUIVESA(void*)+0x1c>
c000fad1:	fb                   	sti    
c000fad2:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c000fad8:	83 ec 08             	sub    esp,0x8
c000fadb:	6a 01                	push   0x1
c000fadd:	68 98 4f 02 c0       	push   0xc0024f98
c000fae2:	e8 e3 80 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c000fae7:	83 c4 10             	add    esp,0x10
c000faea:	83 ec 08             	sub    esp,0x8
c000faed:	53                   	push   ebx
c000faee:	50                   	push   eax
c000faef:	e8 07 83 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c000faf4:	83 c4 10             	add    esp,0x10
c000faf7:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c000fafd:	83 ec 08             	sub    esp,0x8
c000fb00:	6a 01                	push   0x1
c000fb02:	68 7a 4f 02 c0       	push   0xc0024f7a
c000fb07:	e8 be 80 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c000fb0c:	83 c4 10             	add    esp,0x10
c000fb0f:	83 ec 08             	sub    esp,0x8
c000fb12:	53                   	push   ebx
c000fb13:	50                   	push   eax
c000fb14:	e8 e2 82 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c000fb19:	83 c4 10             	add    esp,0x10
c000fb1c:	90                   	nop
c000fb1d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000fb20:	c9                   	leave  
c000fb21:	c3                   	ret    

c000fb22 <sendKeyToTerminal(unsigned char)>:
c000fb22:	55                   	push   ebp
c000fb23:	89 e5                	mov    ebp,esp
c000fb25:	83 ec 28             	sub    esp,0x28
c000fb28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb2b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000fb2e:	a1 84 7f 02 c0       	mov    eax,ds:0xc0027f84
c000fb33:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000fb37:	83 ec 08             	sub    esp,0x8
c000fb3a:	52                   	push   edx
c000fb3b:	50                   	push   eax
c000fb3c:	e8 77 b6 ff ff       	call   c000b1b8 <VgaText::receiveKey(unsigned char)>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000fb48:	0f 85 8f 00 00 00    	jne    c000fbdd <sendKeyToTerminal(unsigned char)+0xbb>
c000fb4e:	fa                   	cli    
c000fb4f:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000fb54:	40                   	inc    eax
c000fb55:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000fb5a:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c000fb5f:	40                   	inc    eax
c000fb60:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c000fb65:	a1 60 80 02 c0       	mov    eax,ds:0xc0028060
c000fb6a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fb6d:	c7 05 60 80 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028060,0x0
c000fb77:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000fb7b:	74 1f                	je     c000fb9c <sendKeyToTerminal(unsigned char)+0x7a>
c000fb7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fb80:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000fb83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fb86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000fb89:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000fb8c:	83 ec 0c             	sub    esp,0xc
c000fb8f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000fb92:	e8 d5 8e 00 00       	call   c0018a6c <unblockTask(ThreadControlBlock*)>
c000fb97:	83 c4 10             	add    esp,0x10
c000fb9a:	eb db                	jmp    c000fb77 <sendKeyToTerminal(unsigned char)+0x55>
c000fb9c:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c000fba1:	48                   	dec    eax
c000fba2:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c000fba7:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c000fbac:	85 c0                	test   eax,eax
c000fbae:	75 18                	jne    c000fbc8 <sendKeyToTerminal(unsigned char)+0xa6>
c000fbb0:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c000fbb5:	85 c0                	test   eax,eax
c000fbb7:	74 0f                	je     c000fbc8 <sendKeyToTerminal(unsigned char)+0xa6>
c000fbb9:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c000fbc3:	e8 e8 89 00 00       	call   c00185b0 <schedule()>
c000fbc8:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000fbcd:	48                   	dec    eax
c000fbce:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c000fbd3:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c000fbd8:	85 c0                	test   eax,eax
c000fbda:	75 01                	jne    c000fbdd <sendKeyToTerminal(unsigned char)+0xbb>
c000fbdc:	fb                   	sti    
c000fbdd:	90                   	nop
c000fbde:	c9                   	leave  
c000fbdf:	c3                   	ret    

c000fbe0 <sendKeyboardToken(KeyboardToken)>:
c000fbe0:	55                   	push   ebp
c000fbe1:	89 e5                	mov    ebp,esp
c000fbe3:	83 ec 18             	sub    esp,0x18
c000fbe6:	e8 91 50 00 00       	call   c0014c7c <Krnl::userIOReceived()>
c000fbeb:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000fbee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbf1:	0f b7 c0             	movzx  eax,ax
c000fbf4:	83 f2 01             	xor    edx,0x1
c000fbf7:	88 90 80 80 02 c0    	mov    BYTE PTR [eax-0x3ffd7f80],dl
c000fbfd:	a1 68 80 02 c0       	mov    eax,ds:0xc0028068
c000fc02:	85 c0                	test   eax,eax
c000fc04:	74 24                	je     c000fc2a <sendKeyboardToken(KeyboardToken)+0x4a>
c000fc06:	8b 0d 68 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028068
c000fc0c:	83 ec 04             	sub    esp,0x4
c000fc0f:	68 80 80 02 c0       	push   0xc0028080
c000fc14:	83 ec 08             	sub    esp,0x8
c000fc17:	89 e2                	mov    edx,esp
c000fc19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1c:	89 02                	mov    DWORD PTR [edx],eax
c000fc1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fc21:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fc25:	ff d1                	call   ecx
c000fc27:	83 c4 10             	add    esp,0x10
c000fc2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc2d:	66 3d 03 02          	cmp    ax,0x203
c000fc31:	75 07                	jne    c000fc3a <sendKeyboardToken(KeyboardToken)+0x5a>
c000fc33:	a0 80 81 02 c0       	mov    al,ds:0xc0028180
c000fc38:	84 c0                	test   al,al
c000fc3a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000fc3e:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000fc41:	a0 88 84 02 c0       	mov    al,ds:0xc0028488
c000fc46:	38 c2                	cmp    dl,al
c000fc48:	74 1c                	je     c000fc66 <sendKeyboardToken(KeyboardToken)+0x86>
c000fc4a:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000fc4d:	a2 88 84 02 c0       	mov    ds:0xc0028488,al
c000fc52:	a0 88 84 02 c0       	mov    al,ds:0xc0028488
c000fc57:	0f b6 c0             	movzx  eax,al
c000fc5a:	83 ec 0c             	sub    esp,0xc
c000fc5d:	50                   	push   eax
c000fc5e:	e8 97 ab ff ff       	call   c000a7fa <setTerminalScrollLock(bool)>
c000fc63:	83 c4 10             	add    esp,0x10
c000fc66:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000fc69:	84 c0                	test   al,al
c000fc6b:	0f 84 ae 00 00 00    	je     c000fd1f <sendKeyboardToken(KeyboardToken)+0x13f>
c000fc71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc74:	66 3d 10 03          	cmp    ax,0x310
c000fc78:	75 06                	jne    c000fc80 <sendKeyboardToken(KeyboardToken)+0xa0>
c000fc7a:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000fc80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc83:	66 3d 11 03          	cmp    ax,0x311
c000fc87:	75 06                	jne    c000fc8f <sendKeyboardToken(KeyboardToken)+0xaf>
c000fc89:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000fc8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc92:	66 3d 12 03          	cmp    ax,0x312
c000fc96:	75 06                	jne    c000fc9e <sendKeyboardToken(KeyboardToken)+0xbe>
c000fc98:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000fc9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fca1:	66 3d 13 03          	cmp    ax,0x313
c000fca5:	75 06                	jne    c000fcad <sendKeyboardToken(KeyboardToken)+0xcd>
c000fca7:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000fcad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcb0:	66 3d 14 03          	cmp    ax,0x314
c000fcb4:	75 06                	jne    c000fcbc <sendKeyboardToken(KeyboardToken)+0xdc>
c000fcb6:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000fcbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcbf:	66 3d 15 03          	cmp    ax,0x315
c000fcc3:	75 06                	jne    c000fccb <sendKeyboardToken(KeyboardToken)+0xeb>
c000fcc5:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcce:	66 3d 16 03          	cmp    ax,0x316
c000fcd2:	75 06                	jne    c000fcda <sendKeyboardToken(KeyboardToken)+0xfa>
c000fcd4:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000fcda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcdd:	66 3d 17 03          	cmp    ax,0x317
c000fce1:	75 06                	jne    c000fce9 <sendKeyboardToken(KeyboardToken)+0x109>
c000fce3:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000fce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcec:	66 3d 18 03          	cmp    ax,0x318
c000fcf0:	75 06                	jne    c000fcf8 <sendKeyboardToken(KeyboardToken)+0x118>
c000fcf2:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000fcf8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcfb:	66 3d 19 03          	cmp    ax,0x319
c000fcff:	75 06                	jne    c000fd07 <sendKeyboardToken(KeyboardToken)+0x127>
c000fd01:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000fd07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd0a:	66 3d 1a 03          	cmp    ax,0x31a
c000fd0e:	0f 85 c9 00 00 00    	jne    c000fddd <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd14:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fd1a:	e9 be 00 00 00       	jmp    c000fddd <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fd1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd22:	66 3d 10 03          	cmp    ax,0x310
c000fd26:	75 0a                	jne    c000fd32 <sendKeyboardToken(KeyboardToken)+0x152>
c000fd28:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fd2e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd35:	66 3d 11 03          	cmp    ax,0x311
c000fd39:	75 0a                	jne    c000fd45 <sendKeyboardToken(KeyboardToken)+0x165>
c000fd3b:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fd41:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd48:	66 3d 12 03          	cmp    ax,0x312
c000fd4c:	75 0a                	jne    c000fd58 <sendKeyboardToken(KeyboardToken)+0x178>
c000fd4e:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fd54:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd5b:	66 3d 13 03          	cmp    ax,0x313
c000fd5f:	75 0a                	jne    c000fd6b <sendKeyboardToken(KeyboardToken)+0x18b>
c000fd61:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fd67:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd6e:	66 3d 14 03          	cmp    ax,0x314
c000fd72:	75 0a                	jne    c000fd7e <sendKeyboardToken(KeyboardToken)+0x19e>
c000fd74:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fd7a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd81:	66 3d 15 03          	cmp    ax,0x315
c000fd85:	75 0a                	jne    c000fd91 <sendKeyboardToken(KeyboardToken)+0x1b1>
c000fd87:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fd8d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fd91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd94:	66 3d 16 03          	cmp    ax,0x316
c000fd98:	75 0a                	jne    c000fda4 <sendKeyboardToken(KeyboardToken)+0x1c4>
c000fd9a:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fda0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fda4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fda7:	66 3d 17 03          	cmp    ax,0x317
c000fdab:	75 0a                	jne    c000fdb7 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000fdad:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000fdb3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdba:	66 3d 18 03          	cmp    ax,0x318
c000fdbe:	75 0a                	jne    c000fdca <sendKeyboardToken(KeyboardToken)+0x1ea>
c000fdc0:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fdc6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fdca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdcd:	66 3d 19 03          	cmp    ax,0x319
c000fdd1:	75 0a                	jne    c000fddd <sendKeyboardToken(KeyboardToken)+0x1fd>
c000fdd3:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fdd9:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fde0:	66 3d 00 02          	cmp    ax,0x200
c000fde4:	75 2c                	jne    c000fe12 <sendKeyboardToken(KeyboardToken)+0x232>
c000fde6:	a0 80 84 02 c0       	mov    al,ds:0xc0028480
c000fdeb:	83 f0 01             	xor    eax,0x1
c000fdee:	84 c0                	test   al,al
c000fdf0:	74 20                	je     c000fe12 <sendKeyboardToken(KeyboardToken)+0x232>
c000fdf2:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000fdf7:	6a 01                	push   0x1
c000fdf9:	6a 00                	push   0x0
c000fdfb:	68 4a fa 00 c0       	push   0xc000fa4a
c000fe00:	50                   	push   eax
c000fe01:	e8 8e 85 00 00       	call   c0018394 <Process::createThread(void (*)(void*), void*, int)>
c000fe06:	83 c4 10             	add    esp,0x10
c000fe09:	c6 05 80 84 02 c0 01 	mov    BYTE PTR ds:0xc0028480,0x1
c000fe10:	eb 33                	jmp    c000fe45 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe15:	66 3d 01 02          	cmp    ax,0x201
c000fe19:	75 2a                	jne    c000fe45 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe1b:	a0 80 84 02 c0       	mov    al,ds:0xc0028480
c000fe20:	83 f0 01             	xor    eax,0x1
c000fe23:	84 c0                	test   al,al
c000fe25:	74 1e                	je     c000fe45 <sendKeyboardToken(KeyboardToken)+0x265>
c000fe27:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c000fe2c:	6a 01                	push   0x1
c000fe2e:	6a 00                	push   0x0
c000fe30:	68 b6 fa 00 c0       	push   0xc000fab6
c000fe35:	50                   	push   eax
c000fe36:	e8 59 85 00 00       	call   c0018394 <Process::createThread(void (*)(void*), void*, int)>
c000fe3b:	83 c4 10             	add    esp,0x10
c000fe3e:	c6 05 80 84 02 c0 01 	mov    BYTE PTR ds:0xc0028480,0x1
c000fe45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe48:	66 3d 1d 03          	cmp    ax,0x31d
c000fe4c:	75 06                	jne    c000fe54 <sendKeyboardToken(KeyboardToken)+0x274>
c000fe4e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fe54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe57:	66 3d 1c 03          	cmp    ax,0x31c
c000fe5b:	75 06                	jne    c000fe63 <sendKeyboardToken(KeyboardToken)+0x283>
c000fe5d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fe63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe66:	66 3d 1b 03          	cmp    ax,0x31b
c000fe6a:	75 06                	jne    c000fe72 <sendKeyboardToken(KeyboardToken)+0x292>
c000fe6c:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fe72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe75:	66 3d 1e 03          	cmp    ax,0x31e
c000fe79:	75 06                	jne    c000fe81 <sendKeyboardToken(KeyboardToken)+0x2a1>
c000fe7b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fe81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe84:	66 3d 1f 03          	cmp    ax,0x31f
c000fe88:	75 06                	jne    c000fe90 <sendKeyboardToken(KeyboardToken)+0x2b0>
c000fe8a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fe90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fe93:	66 3d 1a 03          	cmp    ax,0x31a
c000fe97:	75 06                	jne    c000fe9f <sendKeyboardToken(KeyboardToken)+0x2bf>
c000fe99:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fe9f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fea3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fea6:	83 f0 01             	xor    eax,0x1
c000fea9:	84 c0                	test   al,al
c000feab:	74 77                	je     c000ff24 <sendKeyboardToken(KeyboardToken)+0x344>
c000fead:	a0 81 81 02 c0       	mov    al,ds:0xc0028181
c000feb2:	84 c0                	test   al,al
c000feb4:	74 41                	je     c000fef7 <sendKeyboardToken(KeyboardToken)+0x317>
c000feb6:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000feba:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000febe:	74 2b                	je     c000feeb <sendKeyboardToken(KeyboardToken)+0x30b>
c000fec0:	8b 15 84 84 02 c0    	mov    edx,DWORD PTR ds:0xc0028484
c000fec6:	89 d0                	mov    eax,edx
c000fec8:	c1 e0 02             	shl    eax,0x2
c000fecb:	01 d0                	add    eax,edx
c000fecd:	01 c0                	add    eax,eax
c000fecf:	a3 84 84 02 c0       	mov    ds:0xc0028484,eax
c000fed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fed7:	0f b7 c0             	movzx  eax,ax
c000feda:	8d 50 d0             	lea    edx,[eax-0x30]
c000fedd:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c000fee2:	01 d0                	add    eax,edx
c000fee4:	a3 84 84 02 c0       	mov    ds:0xc0028484,eax
c000fee9:	eb 6d                	jmp    c000ff58 <sendKeyboardToken(KeyboardToken)+0x378>
c000feeb:	c7 05 84 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028484,0x0
c000fef5:	eb 61                	jmp    c000ff58 <sendKeyboardToken(KeyboardToken)+0x378>
c000fef7:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c000fefc:	85 c0                	test   eax,eax
c000fefe:	74 18                	je     c000ff18 <sendKeyboardToken(KeyboardToken)+0x338>
c000ff00:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c000ff05:	0f b6 c0             	movzx  eax,al
c000ff08:	83 ec 0c             	sub    esp,0xc
c000ff0b:	50                   	push   eax
c000ff0c:	e8 11 fc ff ff       	call   c000fb22 <sendKeyToTerminal(unsigned char)>
c000ff11:	83 c4 10             	add    esp,0x10
c000ff14:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff18:	c7 05 84 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028484,0x0
c000ff22:	eb 34                	jmp    c000ff58 <sendKeyboardToken(KeyboardToken)+0x378>
c000ff24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff27:	66 3d 01 01          	cmp    ax,0x101
c000ff2b:	75 2b                	jne    c000ff58 <sendKeyboardToken(KeyboardToken)+0x378>
c000ff2d:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c000ff32:	85 c0                	test   eax,eax
c000ff34:	74 18                	je     c000ff4e <sendKeyboardToken(KeyboardToken)+0x36e>
c000ff36:	a1 84 84 02 c0       	mov    eax,ds:0xc0028484
c000ff3b:	0f b6 c0             	movzx  eax,al
c000ff3e:	83 ec 0c             	sub    esp,0xc
c000ff41:	50                   	push   eax
c000ff42:	e8 db fb ff ff       	call   c000fb22 <sendKeyToTerminal(unsigned char)>
c000ff47:	83 c4 10             	add    esp,0x10
c000ff4a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000ff4e:	c7 05 84 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028484,0x0
c000ff58:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ff5b:	83 f0 01             	xor    eax,0x1
c000ff5e:	84 c0                	test   al,al
c000ff60:	74 4c                	je     c000ffae <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff62:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ff65:	83 f0 01             	xor    eax,0x1
c000ff68:	84 c0                	test   al,al
c000ff6a:	74 42                	je     c000ffae <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff6c:	a0 80 81 02 c0       	mov    al,ds:0xc0028180
c000ff71:	83 f0 01             	xor    eax,0x1
c000ff74:	84 c0                	test   al,al
c000ff76:	74 36                	je     c000ffae <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff7b:	66 83 f8 1f          	cmp    ax,0x1f
c000ff7f:	76 09                	jbe    c000ff8a <sendKeyboardToken(KeyboardToken)+0x3aa>
c000ff81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff84:	66 83 f8 7e          	cmp    ax,0x7e
c000ff88:	76 12                	jbe    c000ff9c <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ff8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff8d:	66 83 f8 0a          	cmp    ax,0xa
c000ff91:	74 09                	je     c000ff9c <sendKeyboardToken(KeyboardToken)+0x3bc>
c000ff93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff96:	66 83 f8 08          	cmp    ax,0x8
c000ff9a:	75 12                	jne    c000ffae <sendKeyboardToken(KeyboardToken)+0x3ce>
c000ff9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ff9f:	0f b6 c0             	movzx  eax,al
c000ffa2:	83 ec 0c             	sub    esp,0xc
c000ffa5:	50                   	push   eax
c000ffa6:	e8 77 fb ff ff       	call   c000fb22 <sendKeyToTerminal(unsigned char)>
c000ffab:	83 c4 10             	add    esp,0x10
c000ffae:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000ffb1:	83 f0 01             	xor    eax,0x1
c000ffb4:	84 c0                	test   al,al
c000ffb6:	74 4f                	je     c0010007 <sendKeyboardToken(KeyboardToken)+0x427>
c000ffb8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000ffbb:	83 f0 01             	xor    eax,0x1
c000ffbe:	84 c0                	test   al,al
c000ffc0:	74 45                	je     c0010007 <sendKeyboardToken(KeyboardToken)+0x427>
c000ffc2:	a0 80 81 02 c0       	mov    al,ds:0xc0028180
c000ffc7:	84 c0                	test   al,al
c000ffc9:	74 3c                	je     c0010007 <sendKeyboardToken(KeyboardToken)+0x427>
c000ffcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffce:	66 83 f8 3f          	cmp    ax,0x3f
c000ffd2:	76 33                	jbe    c0010007 <sendKeyboardToken(KeyboardToken)+0x427>
c000ffd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffd7:	66 83 f8 7f          	cmp    ax,0x7f
c000ffdb:	77 2a                	ja     c0010007 <sendKeyboardToken(KeyboardToken)+0x427>
c000ffdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffe0:	88 c2                	mov    dl,al
c000ffe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ffe5:	66 83 f8 5f          	cmp    ax,0x5f
c000ffe9:	76 04                	jbe    c000ffef <sendKeyboardToken(KeyboardToken)+0x40f>
c000ffeb:	b0 20                	mov    al,0x20
c000ffed:	eb 02                	jmp    c000fff1 <sendKeyboardToken(KeyboardToken)+0x411>
c000ffef:	b0 00                	mov    al,0x0
c000fff1:	29 c2                	sub    edx,eax
c000fff3:	88 d0                	mov    al,dl
c000fff5:	83 e8 40             	sub    eax,0x40
c000fff8:	0f b6 c0             	movzx  eax,al
c000fffb:	83 ec 0c             	sub    esp,0xc
c000fffe:	50                   	push   eax
c000ffff:	e8 1e fb ff ff       	call   c000fb22 <sendKeyToTerminal(unsigned char)>
c0010004:	83 c4 10             	add    esp,0x10
c0010007:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001000a:	66 3d 00 03          	cmp    ax,0x300
c001000e:	75 0f                	jne    c001001f <sendKeyboardToken(KeyboardToken)+0x43f>
c0010010:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0010013:	83 f0 01             	xor    eax,0x1
c0010016:	84 c0                	test   al,al
c0010018:	74 05                	je     c001001f <sendKeyboardToken(KeyboardToken)+0x43f>
c001001a:	e8 4c ab ff ff       	call   c000ab6b <doTerminalCycle()>
c001001f:	90                   	nop
c0010020:	c9                   	leave  
c0010021:	c3                   	ret    

c0010022 <clearInternalKeybuffer(VgaText*)>:
c0010022:	55                   	push   ebp
c0010023:	89 e5                	mov    ebp,esp
c0010025:	83 ec 08             	sub    esp,0x8
c0010028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001002b:	05 32 01 00 00       	add    eax,0x132
c0010030:	83 ec 0c             	sub    esp,0xc
c0010033:	50                   	push   eax
c0010034:	e8 67 06 ff ff       	call   c00006a0 <strlen>
c0010039:	83 c4 10             	add    esp,0x10
c001003c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001003f:	81 c2 32 01 00 00    	add    edx,0x132
c0010045:	83 ec 04             	sub    esp,0x4
c0010048:	50                   	push   eax
c0010049:	6a 00                	push   0x0
c001004b:	52                   	push   edx
c001004c:	e8 33 06 ff ff       	call   c0000684 <memset>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	90                   	nop
c0010055:	c9                   	leave  
c0010056:	c3                   	ret    

c0010057 <readKeyboard(VgaText*, char*, unsigned long)>:
c0010057:	55                   	push   ebp
c0010058:	89 e5                	mov    ebp,esp
c001005a:	83 ec 18             	sub    esp,0x18
c001005d:	a1 68 80 02 c0       	mov    eax,ds:0xc0028068
c0010062:	85 c0                	test   eax,eax
c0010064:	74 2a                	je     c0010090 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0010066:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001006c:	8b 0d 68 80 02 c0    	mov    ecx,DWORD PTR ds:0xc0028068
c0010072:	83 ec 04             	sub    esp,0x4
c0010075:	68 80 80 02 c0       	push   0xc0028080
c001007a:	83 ec 08             	sub    esp,0x8
c001007d:	89 e2                	mov    edx,esp
c001007f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0010082:	89 02                	mov    DWORD PTR [edx],eax
c0010084:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0010087:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001008b:	ff d1                	call   ecx
c001008d:	83 c4 10             	add    esp,0x10
c0010090:	fb                   	sti    
c0010091:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0010098:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001009c:	0f 84 a1 00 00 00    	je     c0010143 <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c00100a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100a5:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c00100ab:	84 c0                	test   al,al
c00100ad:	75 28                	jne    c00100d7 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c00100af:	fa                   	cli    
c00100b0:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00100b5:	40                   	inc    eax
c00100b6:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00100bb:	e8 f0 84 00 00       	call   c00185b0 <schedule()>
c00100c0:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00100c5:	48                   	dec    eax
c00100c6:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00100cb:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00100d0:	85 c0                	test   eax,eax
c00100d2:	75 ce                	jne    c00100a2 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c00100d4:	fb                   	sti    
c00100d5:	eb cb                	jmp    c00100a2 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c00100d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00100da:	8d 50 01             	lea    edx,[eax+0x1]
c00100dd:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00100e0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00100e3:	8a 92 32 01 00 00    	mov    dl,BYTE PTR [edx+0x132]
c00100e9:	88 10                	mov    BYTE PTR [eax],dl
c00100eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100ee:	8a 80 32 01 00 00    	mov    al,BYTE PTR [eax+0x132]
c00100f4:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00100f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00100fa:	05 32 01 00 00       	add    eax,0x132
c00100ff:	83 ec 0c             	sub    esp,0xc
c0010102:	50                   	push   eax
c0010103:	e8 98 05 ff ff       	call   c00006a0 <strlen>
c0010108:	83 c4 10             	add    esp,0x10
c001010b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001010e:	81 c2 32 01 00 00    	add    edx,0x132
c0010114:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010117:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001011a:	81 c2 32 01 00 00    	add    edx,0x132
c0010120:	83 ec 04             	sub    esp,0x4
c0010123:	50                   	push   eax
c0010124:	51                   	push   ecx
c0010125:	52                   	push   edx
c0010126:	e8 91 04 ff ff       	call   c00005bc <memmove>
c001012b:	83 c4 10             	add    esp,0x10
c001012e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0010131:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0010134:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0010138:	0f 85 5a ff ff ff    	jne    c0010098 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c001013e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010141:	eb 03                	jmp    c0010146 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c0010143:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0010146:	c9                   	leave  
c0010147:	c3                   	ret    

c0010148 <Keyboard::Keyboard(char const*)>:
c0010148:	83 ec 0c             	sub    esp,0xc
c001014b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001014f:	83 ec 08             	sub    esp,0x8
c0010152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010156:	50                   	push   eax
c0010157:	e8 16 e3 ff ff       	call   c000e472 <Device::Device(char const*)>
c001015c:	83 c4 10             	add    esp,0x10
c001015f:	ba bc 4f 02 c0       	mov    edx,0xc0024fbc
c0010164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010168:	89 10                	mov    DWORD PTR [eax],edx
c001016a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001016e:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0010178:	c6 05 64 80 02 c0 01 	mov    BYTE PTR ds:0xc0028064,0x1
c001017f:	90                   	nop
c0010180:	83 c4 0c             	add    esp,0xc
c0010183:	c3                   	ret    

c0010184 <Keyboard::~Keyboard()>:
c0010184:	83 ec 0c             	sub    esp,0xc
c0010187:	ba bc 4f 02 c0       	mov    edx,0xc0024fbc
c001018c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010190:	89 10                	mov    DWORD PTR [eax],edx
c0010192:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010196:	83 ec 0c             	sub    esp,0xc
c0010199:	50                   	push   eax
c001019a:	e8 9d df ff ff       	call   c000e13c <Device::~Device()>
c001019f:	83 c4 10             	add    esp,0x10
c00101a2:	90                   	nop
c00101a3:	83 c4 0c             	add    esp,0xc
c00101a6:	c3                   	ret    
c00101a7:	90                   	nop

c00101a8 <Keyboard::~Keyboard()>:
c00101a8:	83 ec 0c             	sub    esp,0xc
c00101ab:	83 ec 0c             	sub    esp,0xc
c00101ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101b2:	e8 cd ff ff ff       	call   c0010184 <Keyboard::~Keyboard()>
c00101b7:	83 c4 10             	add    esp,0x10
c00101ba:	83 ec 08             	sub    esp,0x8
c00101bd:	68 5c 01 00 00       	push   0x15c
c00101c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101c6:	e8 4f ca ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00101cb:	83 c4 10             	add    esp,0x10
c00101ce:	83 c4 0c             	add    esp,0xc
c00101d1:	c3                   	ret    

c00101d2 <LogicalDisk::close(int, int, void*)>:
c00101d2:	83 c8 ff             	or     eax,0xffffffff
c00101d5:	c3                   	ret    

c00101d6 <LogicalDisk::~LogicalDisk()>:
c00101d6:	83 ec 0c             	sub    esp,0xc
c00101d9:	ba 8c 50 02 c0       	mov    edx,0xc002508c
c00101de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e2:	89 10                	mov    DWORD PTR [eax],edx
c00101e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e8:	83 ec 0c             	sub    esp,0xc
c00101eb:	50                   	push   eax
c00101ec:	e8 4b df ff ff       	call   c000e13c <Device::~Device()>
c00101f1:	83 c4 10             	add    esp,0x10
c00101f4:	90                   	nop
c00101f5:	83 c4 0c             	add    esp,0xc
c00101f8:	c3                   	ret    
c00101f9:	90                   	nop

c00101fa <LogicalDisk::~LogicalDisk()>:
c00101fa:	83 ec 0c             	sub    esp,0xc
c00101fd:	83 ec 0c             	sub    esp,0xc
c0010200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010204:	e8 cd ff ff ff       	call   c00101d6 <LogicalDisk::~LogicalDisk()>
c0010209:	83 c4 10             	add    esp,0x10
c001020c:	83 ec 08             	sub    esp,0x8
c001020f:	68 74 01 00 00       	push   0x174
c0010214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010218:	e8 fd c9 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001021d:	83 c4 10             	add    esp,0x10
c0010220:	83 c4 0c             	add    esp,0xc
c0010223:	c3                   	ret    

c0010224 <LogicalDisk::open(int, int, void*)>:
c0010224:	83 ec 18             	sub    esp,0x18
c0010227:	68 e8 4f 02 c0       	push   0xc0024fe8
c001022c:	e8 72 47 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0010231:	83 c8 ff             	or     eax,0xffffffff
c0010234:	83 c4 1c             	add    esp,0x1c
c0010237:	c3                   	ret    

c0010238 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0010238:	53                   	push   ebx
c0010239:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001023d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010241:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010245:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c001024b:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0010251:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0010257:	77 10                	ja     c0010269 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0010259:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001025f:	89 d3                	mov    ebx,edx
c0010261:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0010267:	72 05                	jb     c001026e <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0010269:	83 c8 ff             	or     eax,0xffffffff
c001026c:	89 c2                	mov    edx,eax
c001026e:	5b                   	pop    ebx
c001026f:	c3                   	ret    

c0010270 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0010270:	56                   	push   esi
c0010271:	83 c8 ff             	or     eax,0xffffffff
c0010274:	53                   	push   ebx
c0010275:	89 c2                	mov    edx,eax
c0010277:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001027b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001027f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010283:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010289:	77 27                	ja     c00102b2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001028b:	89 d8                	mov    eax,ebx
c001028d:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0010293:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0010299:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001029e:	89 c2                	mov    edx,eax
c00102a0:	73 10                	jae    c00102b2 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00102a2:	89 c8                	mov    eax,ecx
c00102a4:	89 da                	mov    edx,ebx
c00102a6:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00102ac:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00102b2:	5b                   	pop    ebx
c00102b3:	5e                   	pop    esi
c00102b4:	c3                   	ret    
c00102b5:	90                   	nop

c00102b6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00102b6:	83 ec 1c             	sub    esp,0x1c
c00102b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00102bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00102c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00102cd:	89 04 24             	mov    DWORD PTR [esp],eax
c00102d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00102d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00102d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102dc:	83 ec 08             	sub    esp,0x8
c00102df:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00102e3:	50                   	push   eax
c00102e4:	e8 89 e1 ff ff       	call   c000e472 <Device::Device(char const*)>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	ba 8c 50 02 c0       	mov    edx,0xc002508c
c00102f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102f5:	89 10                	mov    DWORD PTR [eax],edx
c00102f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00102fb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010302:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010306:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001030d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010311:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001031b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001031f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010323:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010327:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001032d:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0010333:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001033a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001033e:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0010344:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c001034a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001034e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010352:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010358:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001035c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010366:	90                   	nop
c0010367:	83 c4 1c             	add    esp,0x1c
c001036a:	c3                   	ret    
c001036b:	90                   	nop

c001036c <LogicalDisk::assignDriveLetter()>:
c001036c:	55                   	push   ebp
c001036d:	57                   	push   edi
c001036e:	56                   	push   esi
c001036f:	53                   	push   ebx
c0010370:	83 ec 14             	sub    esp,0x14
c0010373:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010377:	8b 3d a0 84 02 c0    	mov    edi,DWORD PTR ds:0xc00284a0
c001037d:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0010383:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010387:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001038d:	8b 3d a4 84 02 c0    	mov    edi,DWORD PTR ds:0xc00284a4
c0010393:	3c 01                	cmp    al,0x1
c0010395:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010399:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001039d:	19 c0                	sbb    eax,eax
c001039f:	83 e0 02             	and    eax,0x2
c00103a2:	83 c0 41             	add    eax,0x41
c00103a5:	0f be e8             	movsx  ebp,al
c00103a8:	3c 43                	cmp    al,0x43
c00103aa:	75 10                	jne    c00103bc <LogicalDisk::assignDriveLetter()+0x50>
c00103ac:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00103b3:	75 5d                	jne    c0010412 <LogicalDisk::assignDriveLetter()+0xa6>
c00103b5:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00103ba:	75 56                	jne    c0010412 <LogicalDisk::assignDriveLetter()+0xa6>
c00103bc:	8d 75 bf             	lea    esi,[ebp-0x41]
c00103bf:	ba 01 00 00 00       	mov    edx,0x1
c00103c4:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00103c8:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00103cc:	d3 e2                	shl    edx,cl
c00103ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103d2:	89 d7                	mov    edi,edx
c00103d4:	89 d6                	mov    esi,edx
c00103d6:	c1 ff 1f             	sar    edi,0x1f
c00103d9:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00103dd:	21 f9                	and    ecx,edi
c00103df:	09 d1                	or     ecx,edx
c00103e1:	75 2f                	jne    c0010412 <LogicalDisk::assignDriveLetter()+0xa6>
c00103e3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00103e7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103eb:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00103f1:	09 f2                	or     edx,esi
c00103f3:	89 15 a0 84 02 c0    	mov    DWORD PTR ds:0xc00284a0,edx
c00103f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00103fd:	09 fa                	or     edx,edi
c00103ff:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0010403:	89 15 a4 84 02 c0    	mov    DWORD PTR ds:0xc00284a4,edx
c0010409:	89 1c bd c0 84 02 c0 	mov    DWORD PTR [edi*4-0x3ffd7b40],ebx
c0010410:	eb 08                	jmp    c001041a <LogicalDisk::assignDriveLetter()+0xae>
c0010412:	45                   	inc    ebp
c0010413:	40                   	inc    eax
c0010414:	3c 5b                	cmp    al,0x5b
c0010416:	75 90                	jne    c00103a8 <LogicalDisk::assignDriveLetter()+0x3c>
c0010418:	31 c0                	xor    eax,eax
c001041a:	83 c4 14             	add    esp,0x14
c001041d:	5b                   	pop    ebx
c001041e:	5e                   	pop    esi
c001041f:	5f                   	pop    edi
c0010420:	5d                   	pop    ebp
c0010421:	c3                   	ret    

c0010422 <LogicalDisk::mount()>:
c0010422:	56                   	push   esi
c0010423:	53                   	push   ebx
c0010424:	83 ec 1c             	sub    esp,0x1c
c0010427:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001042b:	8b 1d 34 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028034
c0010431:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0010438:	50                   	push   eax
c0010439:	68 0c 50 02 c0       	push   0xc002500c
c001043e:	e8 b8 c8 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0010443:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c001044d:	83 c4 10             	add    esp,0x10
c0010450:	85 db                	test   ebx,ebx
c0010452:	74 4e                	je     c00104a2 <LogicalDisk::mount()+0x80>
c0010454:	83 ec 0c             	sub    esp,0xc
c0010457:	68 2d 50 02 c0       	push   0xc002502d
c001045c:	e8 9a c8 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0010461:	83 c4 0c             	add    esp,0xc
c0010464:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001046b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001046d:	83 e8 41             	sub    eax,0x41
c0010470:	50                   	push   eax
c0010471:	56                   	push   esi
c0010472:	53                   	push   ebx
c0010473:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010476:	83 c4 10             	add    esp,0x10
c0010479:	84 c0                	test   al,al
c001047b:	74 20                	je     c001049d <LogicalDisk::mount()+0x7b>
c001047d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0010481:	83 ec 0c             	sub    esp,0xc
c0010484:	68 49 50 02 c0       	push   0xc0025049
c0010489:	e8 6d c8 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001048e:	83 c4 10             	add    esp,0x10
c0010491:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010497:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001049b:	eb 07                	jmp    c00104a4 <LogicalDisk::mount()+0x82>
c001049d:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00104a0:	eb ae                	jmp    c0010450 <LogicalDisk::mount()+0x2e>
c00104a2:	31 c0                	xor    eax,eax
c00104a4:	83 c4 14             	add    esp,0x14
c00104a7:	5b                   	pop    ebx
c00104a8:	5e                   	pop    esi
c00104a9:	c3                   	ret    

c00104aa <LogicalDisk::unmount()>:
c00104aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104ae:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00104b8:	c3                   	ret    
c00104b9:	90                   	nop

c00104ba <LogicalDisk::eject()>:
c00104ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104be:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00104c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00104c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00104ca:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00104cd:	90                   	nop

c00104ce <LogicalDisk::unassignDriveLetter()>:
c00104ce:	57                   	push   edi
c00104cf:	56                   	push   esi
c00104d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00104d4:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00104db:	84 c9                	test   cl,cl
c00104dd:	75 0f                	jne    c00104ee <LogicalDisk::unassignDriveLetter()+0x20>
c00104df:	c7 44 24 0c 62 50 02 c0 	mov    DWORD PTR [esp+0xc],0xc0025062
c00104e7:	5e                   	pop    esi
c00104e8:	5f                   	pop    edi
c00104e9:	e9 b5 44 00 00       	jmp    c00149a3 <Krnl::panic(char const*)>
c00104ee:	83 e9 41             	sub    ecx,0x41
c00104f1:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00104f8:	b8 01 00 00 00       	mov    eax,0x1
c00104fd:	c7 04 8d c0 84 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7b40],0x0
c0010508:	d3 e0                	shl    eax,cl
c001050a:	89 c7                	mov    edi,eax
c001050c:	f7 d0                	not    eax
c001050e:	c1 ff 1f             	sar    edi,0x1f
c0010511:	21 05 a0 84 02 c0    	and    DWORD PTR ds:0xc00284a0,eax
c0010517:	89 fe                	mov    esi,edi
c0010519:	f7 d6                	not    esi
c001051b:	21 35 a4 84 02 c0    	and    DWORD PTR ds:0xc00284a4,esi
c0010521:	5e                   	pop    esi
c0010522:	5f                   	pop    edi
c0010523:	c3                   	ret    

c0010524 <LogicalDisk::read(unsigned long long, int, void*)>:
c0010524:	57                   	push   edi
c0010525:	56                   	push   esi
c0010526:	53                   	push   ebx
c0010527:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001052b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001052f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010533:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010537:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001053d:	77 41                	ja     c0010580 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c001053f:	99                   	cdq    
c0010540:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0010546:	01 c8                	add    eax,ecx
c0010548:	11 da                	adc    edx,ebx
c001054a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010550:	19 d7                	sbb    edi,edx
c0010552:	72 33                	jb     c0010587 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0010554:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001055a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010560:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010564:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010568:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001056e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010574:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010578:	5b                   	pop    ebx
c0010579:	5e                   	pop    esi
c001057a:	5f                   	pop    edi
c001057b:	e9 f2 0a 00 00       	jmp    c0011072 <VCache::read(unsigned long long, int, void*)>
c0010580:	b8 05 00 00 00       	mov    eax,0x5
c0010585:	eb 05                	jmp    c001058c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0010587:	b8 07 00 00 00       	mov    eax,0x7
c001058c:	5b                   	pop    ebx
c001058d:	5e                   	pop    esi
c001058e:	5f                   	pop    edi
c001058f:	c3                   	ret    

c0010590 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010590:	57                   	push   edi
c0010591:	56                   	push   esi
c0010592:	53                   	push   ebx
c0010593:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010597:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001059b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001059f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00105a3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00105a9:	77 41                	ja     c00105ec <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00105ab:	99                   	cdq    
c00105ac:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00105b2:	01 c8                	add    eax,ecx
c00105b4:	11 da                	adc    edx,ebx
c00105b6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00105bc:	19 d7                	sbb    edi,edx
c00105be:	72 33                	jb     c00105f3 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00105c0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00105c6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00105cc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00105d0:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00105d4:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00105da:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00105e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00105e4:	5b                   	pop    ebx
c00105e5:	5e                   	pop    esi
c00105e6:	5f                   	pop    edi
c00105e7:	e9 8c 09 00 00       	jmp    c0010f78 <VCache::write(unsigned long long, int, void*)>
c00105ec:	b8 05 00 00 00       	mov    eax,0x5
c00105f1:	eb 05                	jmp    c00105f8 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00105f3:	b8 07 00 00 00       	mov    eax,0x7
c00105f8:	5b                   	pop    ebx
c00105f9:	5e                   	pop    esi
c00105fa:	5f                   	pop    edi
c00105fb:	c3                   	ret    

c00105fc <Mouse::Mouse(char const*)>:
c00105fc:	83 ec 0c             	sub    esp,0xc
c00105ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010603:	83 ec 08             	sub    esp,0x8
c0010606:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001060a:	50                   	push   eax
c001060b:	e8 62 de ff ff       	call   c000e472 <Device::Device(char const*)>
c0010610:	83 c4 10             	add    esp,0x10
c0010613:	ba b8 50 02 c0       	mov    edx,0xc00250b8
c0010618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001061c:	89 10                	mov    DWORD PTR [eax],edx
c001061e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010622:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c001062c:	90                   	nop
c001062d:	83 c4 0c             	add    esp,0xc
c0010630:	c3                   	ret    
c0010631:	90                   	nop
c0010632:	66 90                	xchg   ax,ax

c0010634 <Mouse::~Mouse()>:
c0010634:	83 ec 0c             	sub    esp,0xc
c0010637:	ba b8 50 02 c0       	mov    edx,0xc00250b8
c001063c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010640:	89 10                	mov    DWORD PTR [eax],edx
c0010642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010646:	83 ec 0c             	sub    esp,0xc
c0010649:	50                   	push   eax
c001064a:	e8 ed da ff ff       	call   c000e13c <Device::~Device()>
c001064f:	83 c4 10             	add    esp,0x10
c0010652:	90                   	nop
c0010653:	83 c4 0c             	add    esp,0xc
c0010656:	c3                   	ret    
c0010657:	90                   	nop

c0010658 <Mouse::~Mouse()>:
c0010658:	83 ec 0c             	sub    esp,0xc
c001065b:	83 ec 0c             	sub    esp,0xc
c001065e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010662:	e8 cd ff ff ff       	call   c0010634 <Mouse::~Mouse()>
c0010667:	83 c4 10             	add    esp,0x10
c001066a:	83 ec 08             	sub    esp,0x8
c001066d:	68 58 01 00 00       	push   0x158
c0010672:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010676:	e8 9f c5 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001067b:	83 c4 10             	add    esp,0x10
c001067e:	83 c4 0c             	add    esp,0xc
c0010681:	c3                   	ret    

c0010682 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0010682:	55                   	push   ebp
c0010683:	57                   	push   edi
c0010684:	56                   	push   esi
c0010685:	53                   	push   ebx
c0010686:	81 ec 28 01 00 00    	sub    esp,0x128
c001068c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0010693:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001069a:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00106a1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00106a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00106ac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00106b0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00106b7:	e8 b2 de ff ff       	call   c000e56e <Device::getName()>
c00106bc:	5a                   	pop    edx
c00106bd:	59                   	pop    ecx
c00106be:	50                   	push   eax
c00106bf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00106c3:	55                   	push   ebp
c00106c4:	e8 77 00 ff ff       	call   c0000740 <strcpy>
c00106c9:	5b                   	pop    ebx
c00106ca:	58                   	pop    eax
c00106cb:	68 dc 50 02 c0       	push   0xc00250dc
c00106d0:	55                   	push   ebp
c00106d1:	e8 aa 01 ff ff       	call   c0000880 <strcat>
c00106d6:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00106dd:	e8 2d 93 ff ff       	call   c0009a0f <malloc>
c00106e2:	83 c4 0c             	add    esp,0xc
c00106e5:	89 c3                	mov    ebx,eax
c00106e7:	57                   	push   edi
c00106e8:	56                   	push   esi
c00106e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00106f1:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00106f8:	55                   	push   ebp
c00106f9:	50                   	push   eax
c00106fa:	e8 b7 fb ff ff       	call   c00102b6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00106ff:	83 c4 14             	add    esp,0x14
c0010702:	53                   	push   ebx
c0010703:	e8 64 fc ff ff       	call   c001036c <LogicalDisk::assignDriveLetter()>
c0010708:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001070b:	e8 12 fd ff ff       	call   c0010422 <LogicalDisk::mount()>
c0010710:	58                   	pop    eax
c0010711:	5a                   	pop    edx
c0010712:	53                   	push   ebx
c0010713:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001071a:	e8 4f db ff ff       	call   c000e26e <Device::addChild(Device*)>
c001071f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010725:	5b                   	pop    ebx
c0010726:	5e                   	pop    esi
c0010727:	5f                   	pop    edi
c0010728:	5d                   	pop    ebp
c0010729:	c3                   	ret    

c001072a <createPartitionsForDisk(PhysicalDisk*)>:
c001072a:	55                   	push   ebp
c001072b:	57                   	push   edi
c001072c:	56                   	push   esi
c001072d:	53                   	push   ebx
c001072e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010734:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001073b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0010741:	3d 00 02 00 00       	cmp    eax,0x200
c0010746:	74 27                	je     c001076f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010748:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c001074e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0010754:	83 ec 10             	sub    esp,0x10
c0010757:	0f a4 f7 0a          	shld   edi,esi,0xa
c001075b:	99                   	cdq    
c001075c:	c1 e6 0a             	shl    esi,0xa
c001075f:	52                   	push   edx
c0010760:	89 fd                	mov    ebp,edi
c0010762:	50                   	push   eax
c0010763:	55                   	push   ebp
c0010764:	56                   	push   esi
c0010765:	e8 2a 1f 01 00       	call   c0022694 <__udivdi3>
c001076a:	e9 b1 00 00 00       	jmp    c0010820 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001076f:	83 ec 0c             	sub    esp,0xc
c0010772:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010774:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010778:	56                   	push   esi
c0010779:	6a 01                	push   0x1
c001077b:	6a 00                	push   0x0
c001077d:	6a 00                	push   0x0
c001077f:	53                   	push   ebx
c0010780:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0010783:	83 c4 20             	add    esp,0x20
c0010786:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c001078e:	75 0a                	jne    c001079a <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010790:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010798:	74 2c                	je     c00107c6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001079a:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00107a0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00107a6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00107ac:	83 ec 10             	sub    esp,0x10
c00107af:	0f a4 c2 0a          	shld   edx,eax,0xa
c00107b3:	89 f7                	mov    edi,esi
c00107b5:	c1 e0 0a             	shl    eax,0xa
c00107b8:	c1 ff 1f             	sar    edi,0x1f
c00107bb:	57                   	push   edi
c00107bc:	56                   	push   esi
c00107bd:	52                   	push   edx
c00107be:	50                   	push   eax
c00107bf:	e8 d0 1e 01 00       	call   c0022694 <__udivdi3>
c00107c4:	eb 5a                	jmp    c0010820 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00107c6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00107cd:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00107d4:	83 e1 7f             	and    ecx,0x7f
c00107d7:	83 e0 7f             	and    eax,0x7f
c00107da:	01 c1                	add    ecx,eax
c00107dc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00107e3:	83 e0 7f             	and    eax,0x7f
c00107e6:	01 c1                	add    ecx,eax
c00107e8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00107ef:	83 e0 7f             	and    eax,0x7f
c00107f2:	00 c1                	add    cl,al
c00107f4:	74 41                	je     c0010837 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00107f6:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00107fc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0010802:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010808:	83 ec 10             	sub    esp,0x10
c001080b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001080f:	89 f7                	mov    edi,esi
c0010811:	c1 e0 0a             	shl    eax,0xa
c0010814:	c1 ff 1f             	sar    edi,0x1f
c0010817:	57                   	push   edi
c0010818:	56                   	push   esi
c0010819:	52                   	push   edx
c001081a:	50                   	push   eax
c001081b:	e8 74 1e 01 00       	call   c0022694 <__udivdi3>
c0010820:	83 c4 14             	add    esp,0x14
c0010823:	52                   	push   edx
c0010824:	50                   	push   eax
c0010825:	6a 00                	push   0x0
c0010827:	6a 00                	push   0x0
c0010829:	53                   	push   ebx
c001082a:	e8 53 fe ff ff       	call   c0010682 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001082f:	83 c4 20             	add    esp,0x20
c0010832:	e9 79 01 00 00       	jmp    c00109b0 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0010837:	89 f0                	mov    eax,esi
c0010839:	31 f6                	xor    esi,esi
c001083b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0010842:	75 02                	jne    c0010846 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0010844:	89 f1                	mov    ecx,esi
c0010846:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001084d:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0010854:	c1 e2 08             	shl    edx,0x8
c0010857:	c1 e7 10             	shl    edi,0x10
c001085a:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0010862:	09 fa                	or     edx,edi
c0010864:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001086c:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0010873:	83 c0 10             	add    eax,0x10
c0010876:	09 fa                	or     edx,edi
c0010878:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c001087f:	c1 e7 18             	shl    edi,0x18
c0010882:	09 fa                	or     edx,edi
c0010884:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001088b:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001088f:	c1 e7 10             	shl    edi,0x10
c0010892:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010899:	c1 e2 08             	shl    edx,0x8
c001089c:	09 fa                	or     edx,edi
c001089e:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00108a5:	09 fa                	or     edx,edi
c00108a7:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00108ae:	c1 e7 18             	shl    edi,0x18
c00108b1:	09 fa                	or     edx,edi
c00108b3:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00108b7:	46                   	inc    esi
c00108b8:	83 fe 04             	cmp    esi,0x4
c00108bb:	0f 85 7a ff ff ff    	jne    c001083b <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00108c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c5:	83 f0 01             	xor    eax,0x1
c00108c8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00108cc:	75 57                	jne    c0010925 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00108ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00108d2:	83 f0 01             	xor    eax,0x1
c00108d5:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00108d9:	75 4a                	jne    c0010925 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00108db:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00108df:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00108e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00108ef:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00108f5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00108fb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010901:	0f a4 c2 0a          	shld   edx,eax,0xa
c0010905:	89 f7                	mov    edi,esi
c0010907:	c1 e0 0a             	shl    eax,0xa
c001090a:	c1 ff 1f             	sar    edi,0x1f
c001090d:	57                   	push   edi
c001090e:	56                   	push   esi
c001090f:	52                   	push   edx
c0010910:	50                   	push   eax
c0010911:	e8 7e 1d 01 00       	call   c0022694 <__udivdi3>
c0010916:	83 c4 10             	add    esp,0x10
c0010919:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001091d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010921:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010925:	84 c9                	test   cl,cl
c0010927:	74 53                	je     c001097c <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0010929:	0f b6 c9             	movzx  ecx,cl
c001092c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010930:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0010934:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010938:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001093c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010940:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010944:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010948:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c001094c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010950:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010954:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010958:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001095c:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010960:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0010964:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010968:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001096c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010970:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0010974:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010978:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001097c:	31 ed                	xor    ebp,ebp
c001097e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0010982:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0010986:	89 f8                	mov    eax,edi
c0010988:	09 f0                	or     eax,esi
c001098a:	74 1e                	je     c00109aa <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001098c:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010990:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0010994:	89 d1                	mov    ecx,edx
c0010996:	09 c1                	or     ecx,eax
c0010998:	74 10                	je     c00109aa <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001099a:	83 ec 0c             	sub    esp,0xc
c001099d:	57                   	push   edi
c001099e:	56                   	push   esi
c001099f:	52                   	push   edx
c00109a0:	50                   	push   eax
c00109a1:	53                   	push   ebx
c00109a2:	e8 db fc ff ff       	call   c0010682 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00109a7:	83 c4 20             	add    esp,0x20
c00109aa:	45                   	inc    ebp
c00109ab:	83 fd 04             	cmp    ebp,0x4
c00109ae:	75 ce                	jne    c001097e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00109b0:	81 c4 5c 02 00 00    	add    esp,0x25c
c00109b6:	5b                   	pop    ebx
c00109b7:	5e                   	pop    esi
c00109b8:	5f                   	pop    edi
c00109b9:	5d                   	pop    ebp
c00109ba:	c3                   	ret    
c00109bb:	90                   	nop

c00109bc <Serial::Serial(char const*)>:
c00109bc:	83 ec 0c             	sub    esp,0xc
c00109bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c3:	83 ec 08             	sub    esp,0x8
c00109c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ca:	50                   	push   eax
c00109cb:	e8 a2 da ff ff       	call   c000e472 <Device::Device(char const*)>
c00109d0:	83 c4 10             	add    esp,0x10
c00109d3:	ba f0 50 02 c0       	mov    edx,0xc00250f0
c00109d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109dc:	89 10                	mov    DWORD PTR [eax],edx
c00109de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109e2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00109ec:	90                   	nop
c00109ed:	83 c4 0c             	add    esp,0xc
c00109f0:	c3                   	ret    
c00109f1:	90                   	nop
c00109f2:	66 90                	xchg   ax,ax

c00109f4 <Serial::~Serial()>:
c00109f4:	83 ec 0c             	sub    esp,0xc
c00109f7:	ba f0 50 02 c0       	mov    edx,0xc00250f0
c00109fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a00:	89 10                	mov    DWORD PTR [eax],edx
c0010a02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a06:	83 ec 0c             	sub    esp,0xc
c0010a09:	50                   	push   eax
c0010a0a:	e8 2d d7 ff ff       	call   c000e13c <Device::~Device()>
c0010a0f:	83 c4 10             	add    esp,0x10
c0010a12:	90                   	nop
c0010a13:	83 c4 0c             	add    esp,0xc
c0010a16:	c3                   	ret    
c0010a17:	90                   	nop

c0010a18 <Serial::~Serial()>:
c0010a18:	83 ec 0c             	sub    esp,0xc
c0010a1b:	83 ec 0c             	sub    esp,0xc
c0010a1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a22:	e8 cd ff ff ff       	call   c00109f4 <Serial::~Serial()>
c0010a27:	83 c4 10             	add    esp,0x10
c0010a2a:	83 ec 08             	sub    esp,0x8
c0010a2d:	68 58 01 00 00       	push   0x158
c0010a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a36:	e8 df c1 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0010a3b:	83 c4 10             	add    esp,0x10
c0010a3e:	83 c4 0c             	add    esp,0xc
c0010a41:	c3                   	ret    
c0010a42:	66 90                	xchg   ax,ax

c0010a44 <Timer::Timer(char const*)>:
c0010a44:	83 ec 0c             	sub    esp,0xc
c0010a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4b:	83 ec 08             	sub    esp,0x8
c0010a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a52:	50                   	push   eax
c0010a53:	e8 1a da ff ff       	call   c000e472 <Device::Device(char const*)>
c0010a58:	83 c4 10             	add    esp,0x10
c0010a5b:	ba 34 51 02 c0       	mov    edx,0xc0025134
c0010a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a64:	89 10                	mov    DWORD PTR [eax],edx
c0010a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a6a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0010a74:	90                   	nop
c0010a75:	83 c4 0c             	add    esp,0xc
c0010a78:	c3                   	ret    
c0010a79:	90                   	nop
c0010a7a:	66 90                	xchg   ax,ax

c0010a7c <Timer::~Timer()>:
c0010a7c:	83 ec 0c             	sub    esp,0xc
c0010a7f:	ba 34 51 02 c0       	mov    edx,0xc0025134
c0010a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a88:	89 10                	mov    DWORD PTR [eax],edx
c0010a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a8e:	83 ec 0c             	sub    esp,0xc
c0010a91:	50                   	push   eax
c0010a92:	e8 a5 d6 ff ff       	call   c000e13c <Device::~Device()>
c0010a97:	83 c4 10             	add    esp,0x10
c0010a9a:	90                   	nop
c0010a9b:	83 c4 0c             	add    esp,0xc
c0010a9e:	c3                   	ret    
c0010a9f:	90                   	nop

c0010aa0 <Timer::~Timer()>:
c0010aa0:	83 ec 0c             	sub    esp,0xc
c0010aa3:	83 ec 0c             	sub    esp,0xc
c0010aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aaa:	e8 cd ff ff ff       	call   c0010a7c <Timer::~Timer()>
c0010aaf:	83 c4 10             	add    esp,0x10
c0010ab2:	83 ec 08             	sub    esp,0x8
c0010ab5:	68 5c 01 00 00       	push   0x15c
c0010aba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010abe:	e8 57 c1 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0010ac3:	83 c4 10             	add    esp,0x10
c0010ac6:	83 c4 0c             	add    esp,0xc
c0010ac9:	c3                   	ret    

c0010aca <Timer::read()>:
c0010aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ace:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010ad4:	c3                   	ret    

c0010ad5 <timerHandler(unsigned int)>:
c0010ad5:	56                   	push   esi
c0010ad6:	53                   	push   ebx
c0010ad7:	51                   	push   ecx
c0010ad8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010adc:	01 05 2c 85 02 c0    	add    DWORD PTR ds:0xc002852c,eax
c0010ae2:	80 3d 0d 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f0d,0x0
c0010ae9:	0f 84 49 01 00 00    	je     c0010c38 <timerHandler(unsigned int)+0x163>
c0010aef:	fa                   	cli    
c0010af0:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0010af6:	83 ec 0c             	sub    esp,0xc
c0010af9:	ff 05 24 94 02 c0    	inc    DWORD PTR ds:0xc0029424
c0010aff:	68 38 94 02 c0       	push   0xc0029438
c0010b04:	e8 5b 21 01 00       	call   c0022c64 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010b09:	83 c4 10             	add    esp,0x10
c0010b0c:	84 c0                	test   al,al
c0010b0e:	0f 85 a0 00 00 00    	jne    c0010bb4 <timerHandler(unsigned int)+0xdf>
c0010b14:	83 ec 0c             	sub    esp,0xc
c0010b17:	68 38 94 02 c0       	push   0xc0029438
c0010b1c:	e8 5f 21 01 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b21:	83 c4 10             	add    esp,0x10
c0010b24:	89 c6                	mov    esi,eax
c0010b26:	66 90                	xchg   ax,ax
c0010b28:	83 ec 0c             	sub    esp,0xc
c0010b2b:	68 38 94 02 c0       	push   0xc0029438
c0010b30:	e8 4b 21 01 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b35:	c7 04 24 38 94 02 c0 	mov    DWORD PTR [esp],0xc0029438
c0010b3c:	89 c3                	mov    ebx,eax
c0010b3e:	e8 45 21 01 00       	call   c0022c88 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0010b43:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	3b 05 2c 85 02 c0    	cmp    eax,DWORD PTR ds:0xc002852c
c0010b4f:	77 23                	ja     c0010b74 <timerHandler(unsigned int)+0x9f>
c0010b51:	83 ec 0c             	sub    esp,0xc
c0010b54:	53                   	push   ebx
c0010b55:	e8 12 7f 00 00       	call   c0018a6c <unblockTask(ThreadControlBlock*)>
c0010b5a:	83 c4 10             	add    esp,0x10
c0010b5d:	39 de                	cmp    esi,ebx
c0010b5f:	75 27                	jne    c0010b88 <timerHandler(unsigned int)+0xb3>
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	68 38 94 02 c0       	push   0xc0029438
c0010b69:	e8 12 21 01 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010b6e:	89 c6                	mov    esi,eax
c0010b70:	eb 12                	jmp    c0010b84 <timerHandler(unsigned int)+0xaf>
c0010b72:	66 90                	xchg   ax,ax
c0010b74:	52                   	push   edx
c0010b75:	52                   	push   edx
c0010b76:	53                   	push   ebx
c0010b77:	68 38 94 02 c0       	push   0xc0029438
c0010b7c:	e8 bf 21 01 00       	call   c0022d40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010b81:	8d 76 00             	lea    esi,[esi+0x0]
c0010b84:	83 c4 10             	add    esp,0x10
c0010b87:	90                   	nop
c0010b88:	83 ec 0c             	sub    esp,0xc
c0010b8b:	68 38 94 02 c0       	push   0xc0029438
c0010b90:	e8 cf 20 01 00       	call   c0022c64 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0010b95:	83 c4 10             	add    esp,0x10
c0010b98:	84 c0                	test   al,al
c0010b9a:	75 18                	jne    c0010bb4 <timerHandler(unsigned int)+0xdf>
c0010b9c:	83 ec 0c             	sub    esp,0xc
c0010b9f:	68 38 94 02 c0       	push   0xc0029438
c0010ba4:	e8 d7 20 01 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010ba9:	83 c4 10             	add    esp,0x10
c0010bac:	39 f0                	cmp    eax,esi
c0010bae:	0f 85 74 ff ff ff    	jne    c0010b28 <timerHandler(unsigned int)+0x53>
c0010bb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bb9:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010bbd:	74 41                	je     c0010c00 <timerHandler(unsigned int)+0x12b>
c0010bbf:	80 3d 0c 7f 02 c0 00 	cmp    BYTE PTR ds:0xc0027f0c,0x0
c0010bc6:	74 38                	je     c0010c00 <timerHandler(unsigned int)+0x12b>
c0010bc8:	fa                   	cli    
c0010bc9:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0010bcf:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c0010bd4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010bda:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010bdd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010be3:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c0010be6:	72 08                	jb     c0010bf0 <timerHandler(unsigned int)+0x11b>
c0010be8:	e8 c3 79 00 00       	call   c00185b0 <schedule()>
c0010bed:	8d 76 00             	lea    esi,[esi+0x0]
c0010bf0:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0010bf5:	48                   	dec    eax
c0010bf6:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0010bfb:	75 03                	jne    c0010c00 <timerHandler(unsigned int)+0x12b>
c0010bfd:	fb                   	sti    
c0010bfe:	66 90                	xchg   ax,ax
c0010c00:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0010c05:	48                   	dec    eax
c0010c06:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0010c0b:	75 1b                	jne    c0010c28 <timerHandler(unsigned int)+0x153>
c0010c0d:	83 3d 20 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029420,0x0
c0010c14:	74 12                	je     c0010c28 <timerHandler(unsigned int)+0x153>
c0010c16:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c0010c20:	e8 8b 79 00 00       	call   c00185b0 <schedule()>
c0010c25:	8d 76 00             	lea    esi,[esi+0x0]
c0010c28:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0010c2d:	48                   	dec    eax
c0010c2e:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0010c33:	75 03                	jne    c0010c38 <timerHandler(unsigned int)+0x163>
c0010c35:	fb                   	sti    
c0010c36:	66 90                	xchg   ax,ax
c0010c38:	58                   	pop    eax
c0010c39:	5b                   	pop    ebx
c0010c3a:	5e                   	pop    esi
c0010c3b:	c3                   	ret    

c0010c3c <setupTimer(int)>:
c0010c3c:	57                   	push   edi
c0010c3d:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010c42:	56                   	push   esi
c0010c43:	53                   	push   ebx
c0010c44:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c48:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010c4e:	83 ec 0c             	sub    esp,0xc
c0010c51:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010c57:	e8 12 d9 ff ff       	call   c000e56e <Device::getName()>
c0010c5c:	83 c4 10             	add    esp,0x10
c0010c5f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c62:	0f 85 94 00 00 00    	jne    c0010cfc <setupTimer(int)+0xc0>
c0010c68:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010c6d:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0010c74:	0f 84 82 00 00 00    	je     c0010cfc <setupTimer(int)+0xc0>
c0010c7a:	83 ec 0c             	sub    esp,0xc
c0010c7d:	68 5c 01 00 00       	push   0x15c
c0010c82:	e8 88 8d ff ff       	call   c0009a0f <malloc>
c0010c87:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c8a:	89 c3                	mov    ebx,eax
c0010c8c:	e8 d3 15 01 00       	call   c0022264 <PIT::PIT()>
c0010c91:	59                   	pop    ecx
c0010c92:	5f                   	pop    edi
c0010c93:	53                   	push   ebx
c0010c94:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0010c9a:	e8 cf d5 ff ff       	call   c000e26e <Device::addChild(Device*)>
c0010c9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010ca1:	6a 00                	push   0x0
c0010ca3:	6a 00                	push   0x0
c0010ca5:	56                   	push   esi
c0010ca6:	53                   	push   ebx
c0010ca7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010caa:	83 c4 14             	add    esp,0x14
c0010cad:	68 60 01 00 00       	push   0x160
c0010cb2:	e8 58 8d ff ff       	call   c0009a0f <malloc>
c0010cb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010cba:	89 c7                	mov    edi,eax
c0010cbc:	e8 57 14 01 00       	call   c0022118 <APICTimer::APICTimer()>
c0010cc1:	6a 00                	push   0x0
c0010cc3:	6a 00                	push   0x0
c0010cc5:	56                   	push   esi
c0010cc6:	57                   	push   edi
c0010cc7:	e8 4c 13 01 00       	call   c0022018 <APICTimer::open(int, int, void*)>
c0010ccc:	83 c4 20             	add    esp,0x20
c0010ccf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cd1:	6a 00                	push   0x0
c0010cd3:	6a 00                	push   0x0
c0010cd5:	6a 00                	push   0x0
c0010cd7:	53                   	push   ebx
c0010cd8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010cdb:	58                   	pop    eax
c0010cdc:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0010ce1:	5a                   	pop    edx
c0010ce2:	57                   	push   edi
c0010ce3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ce9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0010cef:	e8 7a d5 ff ff       	call   c000e26e <Device::addChild(Device*)>
c0010cf4:	83 c4 10             	add    esp,0x10
c0010cf7:	eb 37                	jmp    c0010d30 <setupTimer(int)+0xf4>
c0010cf9:	8d 76 00             	lea    esi,[esi+0x0]
c0010cfc:	83 ec 0c             	sub    esp,0xc
c0010cff:	68 5c 01 00 00       	push   0x15c
c0010d04:	e8 06 8d ff ff       	call   c0009a0f <malloc>
c0010d09:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d0c:	89 c3                	mov    ebx,eax
c0010d0e:	e8 51 15 01 00       	call   c0022264 <PIT::PIT()>
c0010d13:	58                   	pop    eax
c0010d14:	5a                   	pop    edx
c0010d15:	53                   	push   ebx
c0010d16:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0010d1c:	e8 4d d5 ff ff       	call   c000e26e <Device::addChild(Device*)>
c0010d21:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d23:	6a 00                	push   0x0
c0010d25:	6a 00                	push   0x0
c0010d27:	56                   	push   esi
c0010d28:	53                   	push   ebx
c0010d29:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010d2c:	83 c4 20             	add    esp,0x20
c0010d2f:	90                   	nop
c0010d30:	89 d8                	mov    eax,ebx
c0010d32:	5b                   	pop    ebx
c0010d33:	5e                   	pop    esi
c0010d34:	5f                   	pop    edi
c0010d35:	c3                   	ret    
c0010d36:	66 90                	xchg   ax,ax

c0010d38 <VCache::VCache(PhysicalDisk*)>:
c0010d38:	53                   	push   ebx
c0010d39:	83 ec 18             	sub    esp,0x18
c0010d3c:	ba 64 51 02 c0       	mov    edx,0xc0025164
c0010d41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d45:	89 10                	mov    DWORD PTR [eax],edx
c0010d47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d4b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010d52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d56:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010d5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d61:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010d68:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010d6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d73:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010d7a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010d81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d85:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010d8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d90:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010d94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010d98:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010d9f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010da6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010daa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010dae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010db2:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dba:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010dbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010dc2:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010dc9:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010dd1:	83 ec 0c             	sub    esp,0xc
c0010dd4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010dd8:	e8 32 8c ff ff       	call   c0009a0f <malloc>
c0010ddd:	83 c4 10             	add    esp,0x10
c0010de0:	89 c3                	mov    ebx,eax
c0010de2:	83 ec 0c             	sub    esp,0xc
c0010de5:	53                   	push   ebx
c0010de6:	e8 95 75 00 00       	call   c0018380 <Mutex::Mutex()>
c0010deb:	83 c4 10             	add    esp,0x10
c0010dee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010df2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010df5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010df9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010dfd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010e00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e04:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010e0b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e0f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010e15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e19:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e20:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010e26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010e2c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010e30:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010e33:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e3a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010e3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e42:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010e48:	05 00 01 00 00       	add    eax,0x100
c0010e4d:	c1 e0 04             	shl    eax,0x4
c0010e50:	83 ec 0c             	sub    esp,0xc
c0010e53:	50                   	push   eax
c0010e54:	e8 b6 8b ff ff       	call   c0009a0f <malloc>
c0010e59:	83 c4 10             	add    esp,0x10
c0010e5c:	89 c2                	mov    edx,eax
c0010e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e62:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010e65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e69:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010e70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e74:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010e78:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010e7c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010e82:	c1 e0 06             	shl    eax,0x6
c0010e85:	83 ec 0c             	sub    esp,0xc
c0010e88:	50                   	push   eax
c0010e89:	e8 81 8b ff ff       	call   c0009a0f <malloc>
c0010e8e:	83 c4 10             	add    esp,0x10
c0010e91:	89 c2                	mov    edx,eax
c0010e93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e97:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010e9a:	90                   	nop
c0010e9b:	83 c4 18             	add    esp,0x18
c0010e9e:	5b                   	pop    ebx
c0010e9f:	c3                   	ret    

c0010ea0 <VCache::invalidateReadBuffer()>:
c0010ea0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ea4:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010eaa:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010eae:	c3                   	ret    
c0010eaf:	90                   	nop

c0010eb0 <VCache::writeWriteBuffer()>:
c0010eb0:	53                   	push   ebx
c0010eb1:	83 ec 08             	sub    esp,0x8
c0010eb4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010eb8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010ebc:	74 1e                	je     c0010edc <VCache::writeWriteBuffer()+0x2c>
c0010ebe:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010ec1:	83 ec 0c             	sub    esp,0xc
c0010ec4:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ec6:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010ec9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010ecc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010ecf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010ed2:	50                   	push   eax
c0010ed3:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010ed6:	83 c4 20             	add    esp,0x20
c0010ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0010edc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010ee3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010eea:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010eee:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010ef5:	83 c4 08             	add    esp,0x8
c0010ef8:	5b                   	pop    ebx
c0010ef9:	c3                   	ret    
c0010efa:	66 90                	xchg   ax,ax

c0010efc <VCache::~VCache()>:
c0010efc:	83 ec 0c             	sub    esp,0xc
c0010eff:	ba 64 51 02 c0       	mov    edx,0xc0025164
c0010f04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f08:	89 10                	mov    DWORD PTR [eax],edx
c0010f0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f0e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010f11:	84 c0                	test   al,al
c0010f13:	74 0f                	je     c0010f24 <VCache::~VCache()+0x28>
c0010f15:	83 ec 0c             	sub    esp,0xc
c0010f18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f1c:	e8 8f ff ff ff       	call   c0010eb0 <VCache::writeWriteBuffer()>
c0010f21:	83 c4 10             	add    esp,0x10
c0010f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f28:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010f2b:	83 ec 0c             	sub    esp,0xc
c0010f2e:	50                   	push   eax
c0010f2f:	e8 eb 8a ff ff       	call   c0009a1f <free>
c0010f34:	83 c4 10             	add    esp,0x10
c0010f37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f3b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010f3e:	83 ec 0c             	sub    esp,0xc
c0010f41:	50                   	push   eax
c0010f42:	e8 d8 8a ff ff       	call   c0009a1f <free>
c0010f47:	83 c4 10             	add    esp,0x10
c0010f4a:	90                   	nop
c0010f4b:	83 c4 0c             	add    esp,0xc
c0010f4e:	c3                   	ret    
c0010f4f:	90                   	nop

c0010f50 <VCache::~VCache()>:
c0010f50:	83 ec 0c             	sub    esp,0xc
c0010f53:	83 ec 0c             	sub    esp,0xc
c0010f56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f5a:	e8 9d ff ff ff       	call   c0010efc <VCache::~VCache()>
c0010f5f:	83 c4 10             	add    esp,0x10
c0010f62:	83 ec 08             	sub    esp,0x8
c0010f65:	6a 44                	push   0x44
c0010f67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f6b:	e8 aa bc ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0010f70:	83 c4 10             	add    esp,0x10
c0010f73:	83 c4 0c             	add    esp,0xc
c0010f76:	c3                   	ret    
c0010f77:	90                   	nop

c0010f78 <VCache::write(unsigned long long, int, void*)>:
c0010f78:	55                   	push   ebp
c0010f79:	31 c0                	xor    eax,eax
c0010f7b:	57                   	push   edi
c0010f7c:	56                   	push   esi
c0010f7d:	53                   	push   ebx
c0010f7e:	83 ec 0c             	sub    esp,0xc
c0010f81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010f89:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010f8d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f90:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010f94:	7d 1a                	jge    c0010fb0 <VCache::write(unsigned long long, int, void*)+0x38>
c0010f96:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010f99:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010f9f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010fa3:	0f af c8             	imul   ecx,eax
c0010fa6:	01 ca                	add    edx,ecx
c0010fa8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010faa:	40                   	inc    eax
c0010fab:	eb e3                	jmp    c0010f90 <VCache::write(unsigned long long, int, void*)+0x18>
c0010fad:	8d 76 00             	lea    esi,[esi+0x0]
c0010fb0:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010fb4:	74 0a                	je     c0010fc0 <VCache::write(unsigned long long, int, void*)+0x48>
c0010fb6:	53                   	push   ebx
c0010fb7:	e8 e4 fe ff ff       	call   c0010ea0 <VCache::invalidateReadBuffer()>
c0010fbc:	58                   	pop    eax
c0010fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0010fc0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010fc4:	74 5e                	je     c0011024 <VCache::write(unsigned long long, int, void*)+0xac>
c0010fc6:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0010fc9:	89 e8                	mov    eax,ebp
c0010fcb:	99                   	cdq    
c0010fcc:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010fcf:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010fd2:	89 c1                	mov    ecx,eax
c0010fd4:	89 d0                	mov    eax,edx
c0010fd6:	31 f1                	xor    ecx,esi
c0010fd8:	31 f8                	xor    eax,edi
c0010fda:	09 c1                	or     ecx,eax
c0010fdc:	75 3a                	jne    c0011018 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010fde:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010fe3:	75 33                	jne    c0011018 <VCache::write(unsigned long long, int, void*)+0xa0>
c0010fe5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010fe8:	89 ef                	mov    edi,ebp
c0010fea:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010ff0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ff4:	0f af f9             	imul   edi,ecx
c0010ff7:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010ffa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ffc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010fff:	40                   	inc    eax
c0011000:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0011003:	83 f8 40             	cmp    eax,0x40
c0011006:	75 60                	jne    c0011068 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011008:	83 ec 0c             	sub    esp,0xc
c001100b:	53                   	push   ebx
c001100c:	e8 9f fe ff ff       	call   c0010eb0 <VCache::writeWriteBuffer()>
c0011011:	83 c4 10             	add    esp,0x10
c0011014:	eb 52                	jmp    c0011068 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011016:	66 90                	xchg   ax,ax
c0011018:	83 ec 0c             	sub    esp,0xc
c001101b:	53                   	push   ebx
c001101c:	e8 8f fe ff ff       	call   c0010eb0 <VCache::writeWriteBuffer()>
c0011021:	83 c4 10             	add    esp,0x10
c0011024:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011027:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c001102c:	7f 22                	jg     c0011050 <VCache::write(unsigned long long, int, void*)+0xd8>
c001102e:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0011031:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0011034:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011038:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001103c:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001103f:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0011042:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011048:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001104c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001104e:	eb 18                	jmp    c0011068 <VCache::write(unsigned long long, int, void*)+0xf0>
c0011050:	83 ec 0c             	sub    esp,0xc
c0011053:	8b 10                	mov    edx,DWORD PTR [eax]
c0011055:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011059:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001105d:	57                   	push   edi
c001105e:	56                   	push   esi
c001105f:	50                   	push   eax
c0011060:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0011063:	83 c4 20             	add    esp,0x20
c0011066:	66 90                	xchg   ax,ax
c0011068:	83 c4 0c             	add    esp,0xc
c001106b:	31 c0                	xor    eax,eax
c001106d:	5b                   	pop    ebx
c001106e:	5e                   	pop    esi
c001106f:	5f                   	pop    edi
c0011070:	5d                   	pop    ebp
c0011071:	c3                   	ret    

c0011072 <VCache::read(unsigned long long, int, void*)>:
c0011072:	55                   	push   ebp
c0011073:	31 c0                	xor    eax,eax
c0011075:	57                   	push   edi
c0011076:	56                   	push   esi
c0011077:	53                   	push   ebx
c0011078:	83 ec 1c             	sub    esp,0x1c
c001107b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001107f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011083:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0011087:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001108b:	90                   	nop
c001108c:	39 e8                	cmp    eax,ebp
c001108e:	7d 18                	jge    c00110a8 <VCache::read(unsigned long long, int, void*)+0x36>
c0011090:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0011093:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0011099:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001109d:	0f af c8             	imul   ecx,eax
c00110a0:	01 ca                	add    edx,ecx
c00110a2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00110a4:	40                   	inc    eax
c00110a5:	eb e5                	jmp    c001108c <VCache::read(unsigned long long, int, void*)+0x1a>
c00110a7:	90                   	nop
c00110a8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00110ac:	74 0e                	je     c00110bc <VCache::read(unsigned long long, int, void*)+0x4a>
c00110ae:	83 ec 0c             	sub    esp,0xc
c00110b1:	53                   	push   ebx
c00110b2:	e8 f9 fd ff ff       	call   c0010eb0 <VCache::writeWriteBuffer()>
c00110b7:	83 c4 10             	add    esp,0x10
c00110ba:	66 90                	xchg   ax,ax
c00110bc:	83 fd 01             	cmp    ebp,0x1
c00110bf:	0f 85 87 00 00 00    	jne    c001114c <VCache::read(unsigned long long, int, void*)+0xda>
c00110c5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00110c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00110cc:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c00110d3:	75 77                	jne    c001114c <VCache::read(unsigned long long, int, void*)+0xda>
c00110d5:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c00110d8:	89 e9                	mov    ecx,ebp
c00110da:	f7 d9                	neg    ecx
c00110dc:	89 c8                	mov    eax,ecx
c00110de:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00110e2:	c1 f8 1f             	sar    eax,0x1f
c00110e5:	21 f1                	and    ecx,esi
c00110e7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110eb:	89 c8                	mov    eax,ecx
c00110ed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00110f1:	21 f9                	and    ecx,edi
c00110f3:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c00110f7:	89 ca                	mov    edx,ecx
c00110f9:	74 0d                	je     c0011108 <VCache::read(unsigned long long, int, void*)+0x96>
c00110fb:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c00110fe:	75 08                	jne    c0011108 <VCache::read(unsigned long long, int, void*)+0x96>
c0011100:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0011103:	74 27                	je     c001112c <VCache::read(unsigned long long, int, void*)+0xba>
c0011105:	8d 76 00             	lea    esi,[esi+0x0]
c0011108:	83 ec 0c             	sub    esp,0xc
c001110b:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001110f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011113:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0011116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0011119:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001111b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001111e:	55                   	push   ebp
c001111f:	52                   	push   edx
c0011120:	50                   	push   eax
c0011121:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011125:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0011128:	83 c4 20             	add    esp,0x20
c001112b:	90                   	nop
c001112c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001112f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011133:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0011139:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001113c:	48                   	dec    eax
c001113d:	21 c6                	and    esi,eax
c001113f:	0f af f1             	imul   esi,ecx
c0011142:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0011145:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011147:	eb 23                	jmp    c001116c <VCache::read(unsigned long long, int, void*)+0xfa>
c0011149:	8d 76 00             	lea    esi,[esi+0x0]
c001114c:	83 ec 0c             	sub    esp,0xc
c001114f:	53                   	push   ebx
c0011150:	e8 4b fd ff ff       	call   c0010ea0 <VCache::invalidateReadBuffer()>
c0011155:	5a                   	pop    edx
c0011156:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0011159:	8b 10                	mov    edx,DWORD PTR [eax]
c001115b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001115f:	55                   	push   ebp
c0011160:	57                   	push   edi
c0011161:	56                   	push   esi
c0011162:	50                   	push   eax
c0011163:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0011166:	83 c4 20             	add    esp,0x20
c0011169:	8d 76 00             	lea    esi,[esi+0x0]
c001116c:	83 c4 1c             	add    esp,0x1c
c001116f:	31 c0                	xor    eax,eax
c0011171:	5b                   	pop    ebx
c0011172:	5e                   	pop    esi
c0011173:	5f                   	pop    edi
c0011174:	5d                   	pop    ebp
c0011175:	c3                   	ret    

c0011176 <Video::putrect(int, int, int, int, unsigned int)>:
c0011176:	55                   	push   ebp
c0011177:	57                   	push   edi
c0011178:	56                   	push   esi
c0011179:	53                   	push   ebx
c001117a:	83 ec 1c             	sub    esp,0x1c
c001117d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011181:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011185:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0011189:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001118d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011191:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011195:	01 df                	add    edi,ebx
c0011197:	39 fb                	cmp    ebx,edi
c0011199:	7d 1f                	jge    c00111ba <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001119b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001119f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00111a3:	7d 12                	jge    c00111b7 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c00111a5:	8b 16                	mov    edx,DWORD PTR [esi]
c00111a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00111ab:	53                   	push   ebx
c00111ac:	55                   	push   ebp
c00111ad:	45                   	inc    ebp
c00111ae:	56                   	push   esi
c00111af:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00111b2:	83 c4 10             	add    esp,0x10
c00111b5:	eb e8                	jmp    c001119f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c00111b7:	43                   	inc    ebx
c00111b8:	eb dd                	jmp    c0011197 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c00111ba:	83 c4 1c             	add    esp,0x1c
c00111bd:	5b                   	pop    ebx
c00111be:	5e                   	pop    esi
c00111bf:	5f                   	pop    edi
c00111c0:	5d                   	pop    ebp
c00111c1:	c3                   	ret    

c00111c2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c00111c2:	55                   	push   ebp
c00111c3:	57                   	push   edi
c00111c4:	31 ff                	xor    edi,edi
c00111c6:	56                   	push   esi
c00111c7:	53                   	push   ebx
c00111c8:	83 ec 1c             	sub    esp,0x1c
c00111cb:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c00111cf:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00111d3:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c00111da:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c00111df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00111e3:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00111e7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00111eb:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c00111ee:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00111f2:	01 f9                	add    ecx,edi
c00111f4:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c00111f8:	7d 2f                	jge    c0011229 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c00111fa:	31 f6                	xor    esi,esi
c00111fc:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011200:	01 f2                	add    edx,esi
c0011202:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0011206:	7d 1a                	jge    c0011222 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0011208:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001120b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c001120e:	46                   	inc    esi
c001120f:	51                   	push   ecx
c0011210:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0011214:	52                   	push   edx
c0011215:	55                   	push   ebp
c0011216:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011219:	83 c4 10             	add    esp,0x10
c001121c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011220:	eb da                	jmp    c00111fc <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0011222:	47                   	inc    edi
c0011223:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0011227:	eb c5                	jmp    c00111ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0011229:	83 c4 1c             	add    esp,0x1c
c001122c:	5b                   	pop    ebx
c001122d:	5e                   	pop    esi
c001122e:	5f                   	pop    edi
c001122f:	5d                   	pop    ebp
c0011230:	c3                   	ret    
c0011231:	90                   	nop

c0011232 <Video::blit(unsigned int*, int, int, int, int)>:
c0011232:	55                   	push   ebp
c0011233:	57                   	push   edi
c0011234:	56                   	push   esi
c0011235:	53                   	push   ebx
c0011236:	83 ec 1c             	sub    esp,0x1c
c0011239:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001123d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011241:	85 c0                	test   eax,eax
c0011243:	79 02                	jns    c0011247 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0011245:	31 c0                	xor    eax,eax
c0011247:	c1 e0 02             	shl    eax,0x2
c001124a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001124e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011256:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001125a:	39 d8                	cmp    eax,ebx
c001125c:	7e 49                	jle    c00112a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001125e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0011264:	7c 41                	jl     c00112a7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0011266:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001126a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001126e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011272:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0011276:	39 f9                	cmp    ecx,edi
c0011278:	7e 22                	jle    c001129c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001127a:	83 c5 04             	add    ebp,0x4
c001127d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0011283:	7c 14                	jl     c0011299 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0011285:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011287:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001128a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001128e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011292:	56                   	push   esi
c0011293:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0011296:	83 c4 10             	add    esp,0x10
c0011299:	47                   	inc    edi
c001129a:	eb d2                	jmp    c001126e <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001129c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112a0:	43                   	inc    ebx
c00112a1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00112a5:	eb ab                	jmp    c0011252 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c00112a7:	83 c4 1c             	add    esp,0x1c
c00112aa:	5b                   	pop    ebx
c00112ab:	5e                   	pop    esi
c00112ac:	5f                   	pop    edi
c00112ad:	5d                   	pop    ebp
c00112ae:	c3                   	ret    
c00112af:	90                   	nop

c00112b0 <Video::clearScreen(unsigned int)>:
c00112b0:	57                   	push   edi
c00112b1:	56                   	push   esi
c00112b2:	53                   	push   ebx
c00112b3:	31 db                	xor    ebx,ebx
c00112b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112b9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00112bf:	7e 1f                	jle    c00112e0 <Video::clearScreen(unsigned int)+0x30>
c00112c1:	31 ff                	xor    edi,edi
c00112c3:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00112c9:	7e 12                	jle    c00112dd <Video::clearScreen(unsigned int)+0x2d>
c00112cb:	8b 06                	mov    eax,DWORD PTR [esi]
c00112cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00112d1:	53                   	push   ebx
c00112d2:	57                   	push   edi
c00112d3:	47                   	inc    edi
c00112d4:	56                   	push   esi
c00112d5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00112d8:	83 c4 10             	add    esp,0x10
c00112db:	eb e6                	jmp    c00112c3 <Video::clearScreen(unsigned int)+0x13>
c00112dd:	43                   	inc    ebx
c00112de:	eb d9                	jmp    c00112b9 <Video::clearScreen(unsigned int)+0x9>
c00112e0:	5b                   	pop    ebx
c00112e1:	5e                   	pop    esi
c00112e2:	5f                   	pop    edi
c00112e3:	c3                   	ret    

c00112e4 <Video::putpixel(int, int, unsigned int)>:
c00112e4:	c7 44 24 04 6c 51 02 c0 	mov    DWORD PTR [esp+0x4],0xc002516c
c00112ec:	e9 b2 36 00 00       	jmp    c00149a3 <Krnl::panic(char const*)>
c00112f1:	90                   	nop

c00112f2 <Video::Video(char const*)>:
c00112f2:	83 ec 0c             	sub    esp,0xc
c00112f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112f9:	83 ec 08             	sub    esp,0x8
c00112fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011300:	50                   	push   eax
c0011301:	e8 6c d1 ff ff       	call   c000e472 <Device::Device(char const*)>
c0011306:	83 c4 10             	add    esp,0x10
c0011309:	ba dc 51 02 c0       	mov    edx,0xc00251dc
c001130e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011312:	89 10                	mov    DWORD PTR [eax],edx
c0011314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011318:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0011322:	90                   	nop
c0011323:	83 c4 0c             	add    esp,0xc
c0011326:	c3                   	ret    
c0011327:	90                   	nop

c0011328 <Video::~Video()>:
c0011328:	83 ec 0c             	sub    esp,0xc
c001132b:	ba dc 51 02 c0       	mov    edx,0xc00251dc
c0011330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011334:	89 10                	mov    DWORD PTR [eax],edx
c0011336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001133a:	83 ec 0c             	sub    esp,0xc
c001133d:	50                   	push   eax
c001133e:	e8 f9 cd ff ff       	call   c000e13c <Device::~Device()>
c0011343:	83 c4 10             	add    esp,0x10
c0011346:	90                   	nop
c0011347:	83 c4 0c             	add    esp,0xc
c001134a:	c3                   	ret    
c001134b:	90                   	nop

c001134c <Video::~Video()>:
c001134c:	83 ec 0c             	sub    esp,0xc
c001134f:	83 ec 0c             	sub    esp,0xc
c0011352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011356:	e8 cd ff ff ff       	call   c0011328 <Video::~Video()>
c001135b:	83 c4 10             	add    esp,0x10
c001135e:	83 ec 08             	sub    esp,0x8
c0011361:	68 64 01 00 00       	push   0x164
c0011366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001136a:	e8 ab b8 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001136f:	83 c4 10             	add    esp,0x10
c0011372:	83 c4 0c             	add    esp,0xc
c0011375:	c3                   	ret    

c0011376 <Video::isMonochrome()>:
c0011376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001137a:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0011380:	c3                   	ret    
c0011381:	90                   	nop

c0011382 <Video::getWidth()>:
c0011382:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011386:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001138c:	c3                   	ret    
c001138d:	90                   	nop

c001138e <Video::getHeight()>:
c001138e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011392:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011398:	c3                   	ret    
c0011399:	90                   	nop

c001139a <Video::drawCursor(int, int, unsigned char*, int)>:
c001139a:	55                   	push   ebp
c001139b:	57                   	push   edi
c001139c:	56                   	push   esi
c001139d:	53                   	push   ebx
c001139e:	83 ec 2c             	sub    esp,0x2c
c00113a1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00113a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00113a9:	83 f8 01             	cmp    eax,0x1
c00113ac:	19 c9                	sbb    ecx,ecx
c00113ae:	31 db                	xor    ebx,ebx
c00113b0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00113b4:	89 cd                	mov    ebp,ecx
c00113b6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00113be:	f7 d5                	not    ebp
c00113c0:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00113c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00113ca:	01 d8                	add    eax,ebx
c00113cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00113d0:	56                   	push   esi
c00113d1:	e8 b8 ff ff ff       	call   c001138e <Video::getHeight()>
c00113d6:	59                   	pop    ecx
c00113d7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00113db:	7e 70                	jle    c001144d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00113dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00113e1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00113e5:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00113e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00113ec:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00113f0:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00113f7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113fb:	89 f8                	mov    eax,edi
c00113fd:	83 c0 20             	add    eax,0x20
c0011400:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011404:	56                   	push   esi
c0011405:	e8 78 ff ff ff       	call   c0011382 <Video::getWidth()>
c001140a:	5a                   	pop    edx
c001140b:	39 c7                	cmp    edi,eax
c001140d:	7d 34                	jge    c0011443 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c001140f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0011414:	74 05                	je     c001141b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011416:	8b 06                	mov    eax,DWORD PTR [esi]
c0011418:	55                   	push   ebp
c0011419:	eb 0d                	jmp    c0011428 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001141b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0011420:	74 12                	je     c0011434 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0011422:	8b 06                	mov    eax,DWORD PTR [esi]
c0011424:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011428:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001142c:	57                   	push   edi
c001142d:	56                   	push   esi
c001142e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011431:	83 c4 10             	add    esp,0x10
c0011434:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011438:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001143c:	47                   	inc    edi
c001143d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011441:	75 c1                	jne    c0011404 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0011443:	43                   	inc    ebx
c0011444:	83 fb 20             	cmp    ebx,0x20
c0011447:	0f 85 79 ff ff ff    	jne    c00113c6 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001144d:	83 c4 2c             	add    esp,0x2c
c0011450:	5b                   	pop    ebx
c0011451:	5e                   	pop    esi
c0011452:	5f                   	pop    edi
c0011453:	5d                   	pop    ebp
c0011454:	c3                   	ret    
c0011455:	90                   	nop

c0011456 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011456:	55                   	push   ebp
c0011457:	57                   	push   edi
c0011458:	56                   	push   esi
c0011459:	53                   	push   ebx
c001145a:	83 ec 28             	sub    esp,0x28
c001145d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011461:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0011465:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011469:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001146d:	c1 e6 08             	shl    esi,0x8
c0011470:	01 c6                	add    esi,eax
c0011472:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0011476:	c1 e0 08             	shl    eax,0x8
c0011479:	01 d0                	add    eax,edx
c001147b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001147f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011483:	0f af c6             	imul   eax,esi
c0011486:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001148d:	50                   	push   eax
c001148e:	e8 7c 85 ff ff       	call   c0009a0f <malloc>
c0011493:	83 c4 10             	add    esp,0x10
c0011496:	89 c7                	mov    edi,eax
c0011498:	85 c0                	test   eax,eax
c001149a:	75 10                	jne    c00114ac <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c001149c:	83 ec 0c             	sub    esp,0xc
c001149f:	68 8d 51 02 c0       	push   0xc002518d
c00114a4:	e8 fa 34 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c00114a9:	83 c4 10             	add    esp,0x10
c00114ac:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00114af:	ba 12 00 00 00       	mov    edx,0x12
c00114b4:	84 c0                	test   al,al
c00114b6:	74 11                	je     c00114c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00114b8:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00114bc:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00114c0:	c1 fa 03             	sar    edx,0x3
c00114c3:	0f af d1             	imul   edx,ecx
c00114c6:	83 c2 12             	add    edx,0x12
c00114c9:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00114cd:	74 04                	je     c00114d3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00114cf:	85 f6                	test   esi,esi
c00114d1:	75 12                	jne    c00114e5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00114d3:	83 ec 0c             	sub    esp,0xc
c00114d6:	68 9d 51 02 c0       	push   0xc002519d
c00114db:	e8 1b b8 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00114e0:	e9 b8 00 00 00       	jmp    c001159d <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c00114e5:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c00114e9:	80 f9 02             	cmp    cl,0x2
c00114ec:	0f 85 96 00 00 00    	jne    c0011588 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c00114f2:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00114f7:	75 0e                	jne    c0011507 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00114f9:	84 c0                	test   al,al
c00114fb:	75 0a                	jne    c0011507 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c00114fd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0011500:	83 e8 18             	sub    eax,0x18
c0011503:	a8 f7                	test   al,0xf7
c0011505:	74 0a                	je     c0011511 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011507:	83 ec 0c             	sub    esp,0xc
c001150a:	68 b2 51 02 c0       	push   0xc00251b2
c001150f:	eb 7f                	jmp    c0011590 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c0011511:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011519:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011521:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0011525:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001152d:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0011531:	75 0c                	jne    c001153f <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0011533:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011538:	c1 e0 18             	shl    eax,0x18
c001153b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001153f:	45                   	inc    ebp
c0011540:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c0011545:	c1 e1 10             	shl    ecx,0x10
c0011548:	89 c8                	mov    eax,ecx
c001154a:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c001154f:	c1 e1 08             	shl    ecx,0x8
c0011552:	09 c1                	or     ecx,eax
c0011554:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011558:	09 c1                	or     ecx,eax
c001155a:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c001155e:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c0011562:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011566:	c1 f8 03             	sar    eax,0x3
c0011569:	01 c2                	add    edx,eax
c001156b:	89 e8                	mov    eax,ebp
c001156d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0011571:	39 c6                	cmp    esi,eax
c0011573:	7f b0                	jg     c0011525 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c0011575:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011579:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001157d:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0011580:	7e 22                	jle    c00115a4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c0011582:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c0011586:	eb 99                	jmp    c0011521 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0011588:	50                   	push   eax
c0011589:	50                   	push   eax
c001158a:	51                   	push   ecx
c001158b:	68 c0 51 02 c0       	push   0xc00251c0
c0011590:	e8 66 b7 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0011595:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011598:	e8 82 84 ff ff       	call   c0009a1f <free>
c001159d:	83 c4 10             	add    esp,0x10
c00115a0:	31 ff                	xor    edi,edi
c00115a2:	eb 0f                	jmp    c00115b3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00115a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00115a8:	89 30                	mov    DWORD PTR [eax],esi
c00115aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00115ae:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00115b1:	89 30                	mov    DWORD PTR [eax],esi
c00115b3:	83 c4 1c             	add    esp,0x1c
c00115b6:	89 f8                	mov    eax,edi
c00115b8:	5b                   	pop    ebx
c00115b9:	5e                   	pop    esi
c00115ba:	5f                   	pop    edi
c00115bb:	5d                   	pop    ebp
c00115bc:	c3                   	ret    
c00115bd:	90                   	nop

c00115be <Video::putTGA(int, int, unsigned char*, int)>:
c00115be:	55                   	push   ebp
c00115bf:	57                   	push   edi
c00115c0:	56                   	push   esi
c00115c1:	53                   	push   ebx
c00115c2:	83 ec 28             	sub    esp,0x28
c00115c5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00115c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115cd:	50                   	push   eax
c00115ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00115d2:	50                   	push   eax
c00115d3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00115d7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00115db:	56                   	push   esi
c00115dc:	e8 75 fe ff ff       	call   c0011456 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00115e1:	83 c4 20             	add    esp,0x20
c00115e4:	85 c0                	test   eax,eax
c00115e6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00115ea:	74 35                	je     c0011621 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00115ec:	89 c7                	mov    edi,eax
c00115ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00115f2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00115f6:	39 d8                	cmp    eax,ebx
c00115f8:	7e 27                	jle    c0011621 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00115fa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00115fe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011602:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011606:	39 e8                	cmp    eax,ebp
c0011608:	7e 14                	jle    c001161e <Video::putTGA(int, int, unsigned char*, int)+0x60>
c001160a:	8b 06                	mov    eax,DWORD PTR [esi]
c001160c:	83 c7 04             	add    edi,0x4
c001160f:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0011612:	53                   	push   ebx
c0011613:	55                   	push   ebp
c0011614:	45                   	inc    ebp
c0011615:	56                   	push   esi
c0011616:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011619:	83 c4 10             	add    esp,0x10
c001161c:	eb e0                	jmp    c00115fe <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001161e:	43                   	inc    ebx
c001161f:	eb cd                	jmp    c00115ee <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0011621:	83 c4 1c             	add    esp,0x1c
c0011624:	5b                   	pop    ebx
c0011625:	5e                   	pop    esi
c0011626:	5f                   	pop    edi
c0011627:	5d                   	pop    ebp
c0011628:	c3                   	ret    
c0011629:	66 90                	xchg   ax,ax
c001162b:	90                   	nop

c001162c <ACPI::close(int, int, void*)>:
c001162c:	83 ec 1c             	sub    esp,0x1c
c001162f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0011637:	74 0b                	je     c0011644 <ACPI::close(int, int, void*)+0x18>
c0011639:	b8 00 00 00 00       	mov    eax,0x0
c001163e:	e9 99 00 00 00       	jmp    c00116dc <ACPI::close(int, int, void*)+0xb0>
c0011643:	90                   	nop
c0011644:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011649:	75 29                	jne    c0011674 <ACPI::close(int, int, void*)+0x48>
c001164b:	a1 48 85 02 c0       	mov    eax,ds:0xc0028548
c0011650:	85 c0                	test   eax,eax
c0011652:	74 08                	je     c001165c <ACPI::close(int, int, void*)+0x30>
c0011654:	a1 48 85 02 c0       	mov    eax,ds:0xc0028548
c0011659:	ff d0                	call   eax
c001165b:	90                   	nop
c001165c:	83 ec 0c             	sub    esp,0xc
c001165f:	68 1c 52 02 c0       	push   0xc002521c
c0011664:	e8 3a 33 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011671:	eb 69                	jmp    c00116dc <ACPI::close(int, int, void*)+0xb0>
c0011673:	90                   	nop
c0011674:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0011679:	75 59                	jne    c00116d4 <ACPI::close(int, int, void*)+0xa8>
c001167b:	a1 44 85 02 c0       	mov    eax,ds:0xc0028544
c0011680:	85 c0                	test   eax,eax
c0011682:	74 08                	je     c001168c <ACPI::close(int, int, void*)+0x60>
c0011684:	a1 44 85 02 c0       	mov    eax,ds:0xc0028544
c0011689:	ff d0                	call   eax
c001168b:	90                   	nop
c001168c:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0011691:	8d 76 00             	lea    esi,[esi+0x0]
c0011694:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0011699:	83 e0 02             	and    eax,0x2
c001169c:	74 1e                	je     c00116bc <ACPI::close(int, int, void*)+0x90>
c001169e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00116a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00116a9:	89 c2                	mov    edx,eax
c00116ab:	ec                   	in     al,dx
c00116ac:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00116b0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00116b4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116b8:	eb da                	jmp    c0011694 <ACPI::close(int, int, void*)+0x68>
c00116ba:	66 90                	xchg   ax,ax
c00116bc:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00116c3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00116c8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00116cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116d0:	ee                   	out    dx,al
c00116d1:	8d 76 00             	lea    esi,[esi+0x0]
c00116d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116d9:	8d 76 00             	lea    esi,[esi+0x0]
c00116dc:	83 c4 1c             	add    esp,0x1c
c00116df:	c3                   	ret    

c00116e0 <findRSDP()>:
c00116e0:	83 ec 1c             	sub    esp,0x1c
c00116e3:	83 ec 0c             	sub    esp,0xc
c00116e6:	68 3f 53 02 c0       	push   0xc002533f
c00116eb:	e8 79 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00116f0:	83 c4 10             	add    esp,0x10
c00116f3:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c00116f8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00116fe:	83 e0 04             	and    eax,0x4
c0011701:	84 c0                	test   al,al
c0011703:	75 0b                	jne    c0011710 <findRSDP()+0x30>
c0011705:	b8 00 00 00 00       	mov    eax,0x0
c001170a:	e9 a1 00 00 00       	jmp    c00117b0 <findRSDP()+0xd0>
c001170f:	90                   	nop
c0011710:	a1 38 7f 02 c0       	mov    eax,ds:0xc0027f38
c0011715:	3d ff 07 00 00       	cmp    eax,0x7ff
c001171a:	7f 1c                	jg     c0011738 <findRSDP()+0x58>
c001171c:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011721:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011727:	83 e2 fb             	and    edx,0xfffffffb
c001172a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011730:	b8 00 00 00 00       	mov    eax,0x0
c0011735:	eb 79                	jmp    c00117b0 <findRSDP()+0xd0>
c0011737:	90                   	nop
c0011738:	83 ec 0c             	sub    esp,0xc
c001173b:	68 4f 53 02 c0       	push   0xc002534f
c0011740:	e8 24 83 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011745:	83 c4 10             	add    esp,0x10
c0011748:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011750:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011758:	77 3e                	ja     c0011798 <findRSDP()+0xb8>
c001175a:	83 ec 04             	sub    esp,0x4
c001175d:	6a 08                	push   0x8
c001175f:	68 68 53 02 c0       	push   0xc0025368
c0011764:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011768:	e8 13 ee fe ff       	call   c0000580 <memcmp>
c001176d:	83 c4 10             	add    esp,0x10
c0011770:	85 c0                	test   eax,eax
c0011772:	0f 94 c0             	sete   al
c0011775:	84 c0                	test   al,al
c0011777:	74 17                	je     c0011790 <findRSDP()+0xb0>
c0011779:	83 ec 0c             	sub    esp,0xc
c001177c:	68 71 53 02 c0       	push   0xc0025371
c0011781:	e8 e3 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011786:	83 c4 10             	add    esp,0x10
c0011789:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001178d:	eb 21                	jmp    c00117b0 <findRSDP()+0xd0>
c001178f:	90                   	nop
c0011790:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0011795:	eb b9                	jmp    c0011750 <findRSDP()+0x70>
c0011797:	90                   	nop
c0011798:	83 ec 0c             	sub    esp,0xc
c001179b:	68 7f 53 02 c0       	push   0xc002537f
c00117a0:	e8 c4 82 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00117a5:	83 c4 10             	add    esp,0x10
c00117a8:	b8 00 00 00 00       	mov    eax,0x0
c00117ad:	8d 76 00             	lea    esi,[esi+0x0]
c00117b0:	83 c4 1c             	add    esp,0x1c
c00117b3:	c3                   	ret    

c00117b4 <loadACPITables(unsigned char*)>:
c00117b4:	57                   	push   edi
c00117b5:	56                   	push   esi
c00117b6:	53                   	push   ebx
c00117b7:	83 ec 60             	sub    esp,0x60
c00117ba:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c00117bf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00117c5:	83 e0 04             	and    eax,0x4
c00117c8:	84 c0                	test   al,al
c00117ca:	0f 84 3c 02 00 00    	je     c0011a0c <loadACPITables(unsigned char*)+0x258>
c00117d0:	a0 60 87 02 c0       	mov    al,ds:0xc0028760
c00117d5:	84 c0                	test   al,al
c00117d7:	74 77                	je     c0011850 <loadACPITables(unsigned char*)+0x9c>
c00117d9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00117dd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00117e1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00117e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117e8:	83 e8 24             	sub    eax,0x24
c00117eb:	c1 e8 03             	shr    eax,0x3
c00117ee:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00117f2:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c00117fa:	66 90                	xchg   ax,ax
c00117fc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011800:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c0011804:	0f 8d b6 00 00 00    	jge    c00118c0 <loadACPITables(unsigned char*)+0x10c>
c001180a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001180e:	83 c0 24             	add    eax,0x24
c0011811:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0011815:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011819:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001181d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011821:	c1 e0 03             	shl    eax,0x3
c0011824:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011828:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001182c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001182f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011831:	89 c1                	mov    ecx,eax
c0011833:	a1 4c 85 02 c0       	mov    eax,ds:0xc002854c
c0011838:	8d 50 01             	lea    edx,[eax+0x1]
c001183b:	89 15 4c 85 02 c0    	mov    DWORD PTR ds:0xc002854c,edx
c0011841:	89 ca                	mov    edx,ecx
c0011843:	89 14 c5 64 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7a9c],edx
c001184a:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c001184e:	eb ac                	jmp    c00117fc <loadACPITables(unsigned char*)+0x48>
c0011850:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011854:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011858:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001185c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001185f:	83 e8 24             	sub    eax,0x24
c0011862:	c1 e8 02             	shr    eax,0x2
c0011865:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011869:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011871:	8d 76 00             	lea    esi,[esi+0x0]
c0011874:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011878:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c001187c:	7d 42                	jge    c00118c0 <loadACPITables(unsigned char*)+0x10c>
c001187e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011882:	83 c0 24             	add    eax,0x24
c0011885:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011889:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001188d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011891:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0011895:	c1 e0 02             	shl    eax,0x2
c0011898:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001189c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00118a0:	8b 08                	mov    ecx,DWORD PTR [eax]
c00118a2:	a1 4c 85 02 c0       	mov    eax,ds:0xc002854c
c00118a7:	8d 50 01             	lea    edx,[eax+0x1]
c00118aa:	89 15 4c 85 02 c0    	mov    DWORD PTR ds:0xc002854c,edx
c00118b0:	89 ca                	mov    edx,ecx
c00118b2:	89 14 c5 64 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7a9c],edx
c00118b9:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00118bd:	eb b5                	jmp    c0011874 <loadACPITables(unsigned char*)+0xc0>
c00118bf:	90                   	nop
c00118c0:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00118c8:	a1 4c 85 02 c0       	mov    eax,ds:0xc002854c
c00118cd:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00118d1:	0f 8d 39 01 00 00    	jge    c0011a10 <loadACPITables(unsigned char*)+0x25c>
c00118d7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00118db:	8b 04 c5 64 85 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7a9c]
c00118e2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00118e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00118ee:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00118f2:	25 ff 0f 00 00       	and    eax,0xfff
c00118f7:	89 c6                	mov    esi,eax
c00118f9:	8b 1d 30 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028030
c00118ff:	83 ec 0c             	sub    esp,0xc
c0011902:	6a 01                	push   0x1
c0011904:	e8 cc a0 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0011909:	83 c4 10             	add    esp,0x10
c001190c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011910:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011916:	83 ec 0c             	sub    esp,0xc
c0011919:	6a 01                	push   0x1
c001191b:	6a 01                	push   0x1
c001191d:	50                   	push   eax
c001191e:	52                   	push   edx
c001191f:	53                   	push   ebx
c0011920:	e8 4d aa ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011925:	83 c4 20             	add    esp,0x20
c0011928:	09 f0                	or     eax,esi
c001192a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001192e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011932:	c1 e0 03             	shl    eax,0x3
c0011935:	05 60 85 02 c0       	add    eax,0xc0028560
c001193a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001193e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011942:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011946:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c001194e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011952:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011956:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001195a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001195e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011962:	89 c6                	mov    esi,eax
c0011964:	89 d7                	mov    edi,edx
c0011966:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011968:	89 c8                	mov    eax,ecx
c001196a:	89 fa                	mov    edx,edi
c001196c:	89 f3                	mov    ebx,esi
c001196e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0011972:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0011976:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001197a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001197e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011981:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011985:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011989:	05 00 10 00 00       	add    eax,0x1000
c001198e:	c1 e8 0c             	shr    eax,0xc
c0011991:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011995:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011999:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001199d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00119a1:	25 ff 0f 00 00       	and    eax,0xfff
c00119a6:	89 c6                	mov    esi,eax
c00119a8:	8b 1d 30 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028030
c00119ae:	83 ec 0c             	sub    esp,0xc
c00119b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00119b5:	e8 1b a0 ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c00119ba:	83 c4 10             	add    esp,0x10
c00119bd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00119c1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00119c7:	83 ec 0c             	sub    esp,0xc
c00119ca:	6a 01                	push   0x1
c00119cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00119d0:	50                   	push   eax
c00119d1:	52                   	push   edx
c00119d2:	53                   	push   ebx
c00119d3:	e8 9a a9 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00119d8:	83 c4 20             	add    esp,0x20
c00119db:	09 f0                	or     eax,esi
c00119dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00119e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00119e5:	83 ec 0c             	sub    esp,0xc
c00119e8:	50                   	push   eax
c00119e9:	e8 17 a3 ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00119f5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00119f9:	89 14 c5 64 85 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7a9c],edx
c0011a00:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c0011a04:	e9 bf fe ff ff       	jmp    c00118c8 <loadACPITables(unsigned char*)+0x114>
c0011a09:	8d 76 00             	lea    esi,[esi+0x0]
c0011a0c:	90                   	nop
c0011a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0011a10:	83 c4 60             	add    esp,0x60
c0011a13:	5b                   	pop    ebx
c0011a14:	5e                   	pop    esi
c0011a15:	5f                   	pop    edi
c0011a16:	c3                   	ret    
c0011a17:	90                   	nop

c0011a18 <findRSDT(unsigned char*)>:
c0011a18:	57                   	push   edi
c0011a19:	56                   	push   esi
c0011a1a:	53                   	push   ebx
c0011a1b:	83 ec 50             	sub    esp,0x50
c0011a1e:	83 ec 0c             	sub    esp,0xc
c0011a21:	68 93 53 02 c0       	push   0xc0025393
c0011a26:	e8 3e 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011a2b:	83 c4 10             	add    esp,0x10
c0011a2e:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011a33:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011a39:	83 e0 04             	and    eax,0x4
c0011a3c:	84 c0                	test   al,al
c0011a3e:	75 0c                	jne    c0011a4c <findRSDT(unsigned char*)+0x34>
c0011a40:	b8 00 00 00 00       	mov    eax,0x0
c0011a45:	e9 86 01 00 00       	jmp    c0011bd0 <findRSDT(unsigned char*)+0x1b8>
c0011a4a:	66 90                	xchg   ax,ax
c0011a4c:	83 ec 0c             	sub    esp,0xc
c0011a4f:	68 a5 53 02 c0       	push   0xc00253a5
c0011a54:	e8 10 80 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011a59:	83 c4 10             	add    esp,0x10
c0011a5c:	89 e0                	mov    eax,esp
c0011a5e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011a62:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0011a66:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011a6a:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0011a72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011a7a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011a7e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0011a82:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011a86:	89 c6                	mov    esi,eax
c0011a88:	89 d7                	mov    edi,edx
c0011a8a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a8c:	89 c8                	mov    eax,ecx
c0011a8e:	89 fa                	mov    edx,edi
c0011a90:	89 f3                	mov    ebx,esi
c0011a92:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0011a96:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0011a9a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011a9e:	83 ec 0c             	sub    esp,0xc
c0011aa1:	68 b7 53 02 c0       	push   0xc00253b7
c0011aa6:	e8 be 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011aab:	83 c4 10             	add    esp,0x10
c0011aae:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011ab2:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0011ab6:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0011abe:	83 ec 0c             	sub    esp,0xc
c0011ac1:	68 c9 53 02 c0       	push   0xc00253c9
c0011ac6:	e8 9e 7f ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011acb:	83 c4 10             	add    esp,0x10
c0011ace:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ad2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011ad6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011ada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ade:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011ae2:	83 ec 04             	sub    esp,0x4
c0011ae5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011ae9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011aed:	68 40 52 02 c0       	push   0xc0025240
c0011af2:	e8 04 b2 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0011af7:	83 c4 10             	add    esp,0x10
c0011afa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011afe:	25 ff 0f 00 00       	and    eax,0xfff
c0011b03:	89 c6                	mov    esi,eax
c0011b05:	8b 1d 30 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028030
c0011b0b:	83 ec 0c             	sub    esp,0xc
c0011b0e:	6a 02                	push   0x2
c0011b10:	e8 c0 9e ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0011b15:	83 c4 10             	add    esp,0x10
c0011b18:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011b1c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011b22:	83 ec 0c             	sub    esp,0xc
c0011b25:	6a 01                	push   0x1
c0011b27:	6a 02                	push   0x2
c0011b29:	50                   	push   eax
c0011b2a:	52                   	push   edx
c0011b2b:	53                   	push   ebx
c0011b2c:	e8 41 a8 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b31:	83 c4 20             	add    esp,0x20
c0011b34:	09 f0                	or     eax,esi
c0011b36:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011b3a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011b3e:	25 ff 0f 00 00       	and    eax,0xfff
c0011b43:	89 c6                	mov    esi,eax
c0011b45:	8b 1d 30 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028030
c0011b4b:	83 ec 0c             	sub    esp,0xc
c0011b4e:	6a 02                	push   0x2
c0011b50:	e8 80 9e ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0011b55:	83 c4 10             	add    esp,0x10
c0011b58:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011b5c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011b62:	83 ec 0c             	sub    esp,0xc
c0011b65:	6a 01                	push   0x1
c0011b67:	6a 02                	push   0x2
c0011b69:	50                   	push   eax
c0011b6a:	52                   	push   edx
c0011b6b:	53                   	push   ebx
c0011b6c:	e8 01 a8 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011b71:	83 c4 20             	add    esp,0x20
c0011b74:	09 f0                	or     eax,esi
c0011b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011b7a:	83 ec 04             	sub    esp,0x4
c0011b7d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b81:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011b85:	68 60 52 02 c0       	push   0xc0025260
c0011b8a:	e8 6c b1 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0011b8f:	83 c4 10             	add    esp,0x10
c0011b92:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0011b97:	75 13                	jne    c0011bac <findRSDT(unsigned char*)+0x194>
c0011b99:	c6 05 60 87 02 c0 00 	mov    BYTE PTR ds:0xc0028760,0x0
c0011ba0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011ba4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011ba8:	eb 22                	jmp    c0011bcc <findRSDT(unsigned char*)+0x1b4>
c0011baa:	66 90                	xchg   ax,ax
c0011bac:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0011bb1:	75 11                	jne    c0011bc4 <findRSDT(unsigned char*)+0x1ac>
c0011bb3:	c6 05 60 87 02 c0 01 	mov    BYTE PTR ds:0xc0028760,0x1
c0011bba:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011bbe:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0011bc2:	eb 08                	jmp    c0011bcc <findRSDT(unsigned char*)+0x1b4>
c0011bc4:	b8 00 00 00 00       	mov    eax,0x0
c0011bc9:	eb 05                	jmp    c0011bd0 <findRSDT(unsigned char*)+0x1b8>
c0011bcb:	90                   	nop
c0011bcc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0011bd0:	83 c4 50             	add    esp,0x50
c0011bd3:	5b                   	pop    ebx
c0011bd4:	5e                   	pop    esi
c0011bd5:	5f                   	pop    edi
c0011bd6:	c3                   	ret    
c0011bd7:	90                   	nop

c0011bd8 <findDataTable(unsigned char*, char*)>:
c0011bd8:	83 ec 1c             	sub    esp,0x1c
c0011bdb:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011be0:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011be6:	83 e0 04             	and    eax,0x4
c0011be9:	84 c0                	test   al,al
c0011beb:	75 07                	jne    c0011bf4 <findDataTable(unsigned char*, char*)+0x1c>
c0011bed:	b8 00 00 00 00       	mov    eax,0x0
c0011bf2:	eb 58                	jmp    c0011c4c <findDataTable(unsigned char*, char*)+0x74>
c0011bf4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011bfc:	a1 4c 85 02 c0       	mov    eax,ds:0xc002854c
c0011c01:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0011c05:	7d 3d                	jge    c0011c44 <findDataTable(unsigned char*, char*)+0x6c>
c0011c07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c0b:	c1 e0 03             	shl    eax,0x3
c0011c0e:	05 60 85 02 c0       	add    eax,0xc0028560
c0011c13:	83 ec 04             	sub    esp,0x4
c0011c16:	6a 04                	push   0x4
c0011c18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011c1c:	50                   	push   eax
c0011c1d:	e8 5e e9 fe ff       	call   c0000580 <memcmp>
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	85 c0                	test   eax,eax
c0011c27:	0f 94 c0             	sete   al
c0011c2a:	84 c0                	test   al,al
c0011c2c:	74 0e                	je     c0011c3c <findDataTable(unsigned char*, char*)+0x64>
c0011c2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c32:	8b 04 c5 64 85 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd7a9c]
c0011c39:	eb 11                	jmp    c0011c4c <findDataTable(unsigned char*, char*)+0x74>
c0011c3b:	90                   	nop
c0011c3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011c40:	eb ba                	jmp    c0011bfc <findDataTable(unsigned char*, char*)+0x24>
c0011c42:	66 90                	xchg   ax,ax
c0011c44:	b8 00 00 00 00       	mov    eax,0x0
c0011c49:	8d 76 00             	lea    esi,[esi+0x0]
c0011c4c:	83 c4 1c             	add    esp,0x1c
c0011c4f:	c3                   	ret    

c0011c50 <scanMADT()>:
c0011c50:	53                   	push   ebx
c0011c51:	83 ec 38             	sub    esp,0x38
c0011c54:	83 ec 0c             	sub    esp,0xc
c0011c57:	68 db 53 02 c0       	push   0xc00253db
c0011c5c:	e8 08 7e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011c61:	83 c4 10             	add    esp,0x10
c0011c64:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0011c69:	25 00 04 00 00       	and    eax,0x400
c0011c6e:	74 14                	je     c0011c84 <scanMADT()+0x34>
c0011c70:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011c75:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011c7b:	83 e2 fb             	and    edx,0xfffffffb
c0011c7e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011c84:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011c89:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011c8f:	83 e0 04             	and    eax,0x4
c0011c92:	84 c0                	test   al,al
c0011c94:	0f 84 82 04 00 00    	je     c001211c <scanMADT()+0x4cc>
c0011c9a:	83 ec 0c             	sub    esp,0xc
c0011c9d:	68 e8 53 02 c0       	push   0xc00253e8
c0011ca2:	e8 c2 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011ca7:	83 c4 10             	add    esp,0x10
c0011caa:	e8 31 fa ff ff       	call   c00116e0 <findRSDP()>
c0011caf:	a3 6c 87 02 c0       	mov    ds:0xc002876c,eax
c0011cb4:	a1 6c 87 02 c0       	mov    eax,ds:0xc002876c
c0011cb9:	85 c0                	test   eax,eax
c0011cbb:	75 1b                	jne    c0011cd8 <scanMADT()+0x88>
c0011cbd:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011cc2:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011cc8:	83 e2 fb             	and    edx,0xfffffffb
c0011ccb:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011cd1:	e9 4e 04 00 00       	jmp    c0012124 <scanMADT()+0x4d4>
c0011cd6:	66 90                	xchg   ax,ax
c0011cd8:	83 ec 0c             	sub    esp,0xc
c0011cdb:	68 fa 53 02 c0       	push   0xc00253fa
c0011ce0:	e8 84 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011ce5:	83 c4 10             	add    esp,0x10
c0011ce8:	a1 6c 87 02 c0       	mov    eax,ds:0xc002876c
c0011ced:	83 ec 0c             	sub    esp,0xc
c0011cf0:	50                   	push   eax
c0011cf1:	e8 22 fd ff ff       	call   c0011a18 <findRSDT(unsigned char*)>
c0011cf6:	83 c4 10             	add    esp,0x10
c0011cf9:	a3 68 87 02 c0       	mov    ds:0xc0028768,eax
c0011cfe:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c0011d03:	85 c0                	test   eax,eax
c0011d05:	75 19                	jne    c0011d20 <scanMADT()+0xd0>
c0011d07:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011d0c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d12:	83 e2 fb             	and    edx,0xfffffffb
c0011d15:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d1b:	e9 04 04 00 00       	jmp    c0012124 <scanMADT()+0x4d4>
c0011d20:	83 ec 0c             	sub    esp,0xc
c0011d23:	68 0a 54 02 c0       	push   0xc002540a
c0011d28:	e8 3c 7d ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0011d2d:	83 c4 10             	add    esp,0x10
c0011d30:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c0011d35:	83 ec 0c             	sub    esp,0xc
c0011d38:	50                   	push   eax
c0011d39:	e8 76 fa ff ff       	call   c00117b4 <loadACPITables(unsigned char*)>
c0011d3e:	83 c4 10             	add    esp,0x10
c0011d41:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c0011d46:	83 ec 08             	sub    esp,0x8
c0011d49:	68 22 54 02 c0       	push   0xc0025422
c0011d4e:	50                   	push   eax
c0011d4f:	e8 84 fe ff ff       	call   c0011bd8 <findDataTable(unsigned char*, char*)>
c0011d54:	83 c4 10             	add    esp,0x10
c0011d57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d5b:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011d60:	75 1a                	jne    c0011d7c <scanMADT()+0x12c>
c0011d62:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0011d67:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011d6d:	83 e2 fe             	and    edx,0xfffffffe
c0011d70:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011d76:	e9 a9 03 00 00       	jmp    c0012124 <scanMADT()+0x4d4>
c0011d7b:	90                   	nop
c0011d7c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011d84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011d8b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011d8f:	0f 87 8f 03 00 00    	ja     c0012124 <scanMADT()+0x4d4>
c0011d95:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011d9d:	0f 87 81 03 00 00    	ja     c0012124 <scanMADT()+0x4d4>
c0011da3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011da7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011dab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011daf:	8d 50 01             	lea    edx,[eax+0x1]
c0011db2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011db6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dba:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011dbe:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011dc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dc6:	8d 50 01             	lea    edx,[eax+0x1]
c0011dc9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011dcd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011dd1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011dd5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011dd9:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011dde:	0f 86 3c 03 00 00    	jbe    c0012120 <scanMADT()+0x4d0>
c0011de4:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011de9:	75 59                	jne    c0011e44 <scanMADT()+0x1f4>
c0011deb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011def:	8d 50 01             	lea    edx,[eax+0x1]
c0011df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011df6:	8a 15 60 89 02 c0    	mov    dl,BYTE PTR ds:0xc0028960
c0011dfc:	0f b6 d2             	movzx  edx,dl
c0011dff:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e03:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e07:	88 82 a0 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7660],al
c0011e0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e11:	8d 50 01             	lea    edx,[eax+0x1]
c0011e14:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e18:	8a 15 60 89 02 c0    	mov    dl,BYTE PTR ds:0xc0028960
c0011e1e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011e21:	88 0d 60 89 02 c0    	mov    BYTE PTR ds:0xc0028960,cl
c0011e27:	0f b6 d2             	movzx  edx,dl
c0011e2a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e2e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e32:	88 82 80 89 02 c0    	mov    BYTE PTR [edx-0x3ffd7680],al
c0011e38:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011e3d:	e9 c6 02 00 00       	jmp    c0012108 <scanMADT()+0x4b8>
c0011e42:	66 90                	xchg   ax,ax
c0011e44:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011e49:	0f 85 15 01 00 00    	jne    c0011f64 <scanMADT()+0x314>
c0011e4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e53:	8d 50 01             	lea    edx,[eax+0x1]
c0011e56:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011e5a:	8a 15 20 88 02 c0    	mov    dl,BYTE PTR ds:0xc0028820
c0011e60:	0f b6 d2             	movzx  edx,dl
c0011e63:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011e67:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011e6b:	88 82 40 88 02 c0    	mov    BYTE PTR [edx-0x3ffd77c0],al
c0011e71:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011e75:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e79:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e7d:	01 d0                	add    eax,edx
c0011e7f:	83 c0 2c             	add    eax,0x2c
c0011e82:	8a 00                	mov    al,BYTE PTR [eax]
c0011e84:	0f b6 d0             	movzx  edx,al
c0011e87:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e8b:	8d 48 01             	lea    ecx,[eax+0x1]
c0011e8e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e92:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011e96:	0f b6 c0             	movzx  eax,al
c0011e99:	c1 e0 08             	shl    eax,0x8
c0011e9c:	89 d1                	mov    ecx,edx
c0011e9e:	09 c1                	or     ecx,eax
c0011ea0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ea4:	8d 50 02             	lea    edx,[eax+0x2]
c0011ea7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011eab:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011eaf:	0f b6 c0             	movzx  eax,al
c0011eb2:	c1 e0 10             	shl    eax,0x10
c0011eb5:	09 c1                	or     ecx,eax
c0011eb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ebb:	8d 50 03             	lea    edx,[eax+0x3]
c0011ebe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ec2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011ec6:	0f b6 c0             	movzx  eax,al
c0011ec9:	c1 e0 18             	shl    eax,0x18
c0011ecc:	09 c1                	or     ecx,eax
c0011ece:	89 ca                	mov    edx,ecx
c0011ed0:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c0011ed5:	0f b6 c0             	movzx  eax,al
c0011ed8:	89 14 85 60 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd77a0],edx
c0011edf:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011ee4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ee8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011eec:	01 d0                	add    eax,edx
c0011eee:	83 c0 2c             	add    eax,0x2c
c0011ef1:	8a 00                	mov    al,BYTE PTR [eax]
c0011ef3:	0f b6 d0             	movzx  edx,al
c0011ef6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011efa:	8d 48 01             	lea    ecx,[eax+0x1]
c0011efd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f01:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011f05:	0f b6 c0             	movzx  eax,al
c0011f08:	c1 e0 08             	shl    eax,0x8
c0011f0b:	89 d1                	mov    ecx,edx
c0011f0d:	09 c1                	or     ecx,eax
c0011f0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f13:	8d 50 02             	lea    edx,[eax+0x2]
c0011f16:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f1a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f1e:	0f b6 c0             	movzx  eax,al
c0011f21:	c1 e0 10             	shl    eax,0x10
c0011f24:	09 c1                	or     ecx,eax
c0011f26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f2a:	8d 50 03             	lea    edx,[eax+0x3]
c0011f2d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011f31:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011f35:	0f b6 c0             	movzx  eax,al
c0011f38:	c1 e0 18             	shl    eax,0x18
c0011f3b:	09 c1                	or     ecx,eax
c0011f3d:	89 ca                	mov    edx,ecx
c0011f3f:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c0011f44:	0f b6 c0             	movzx  eax,al
c0011f47:	89 14 85 e0 88 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7720],edx
c0011f4e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011f53:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c0011f58:	40                   	inc    eax
c0011f59:	a2 20 88 02 c0       	mov    ds:0xc0028820,al
c0011f5e:	e9 a5 01 00 00       	jmp    c0012108 <scanMADT()+0x4b8>
c0011f63:	90                   	nop
c0011f64:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011f69:	0f 85 e9 00 00 00    	jne    c0012058 <scanMADT()+0x408>
c0011f6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f73:	8d 50 01             	lea    edx,[eax+0x1]
c0011f76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f7e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011f82:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011f86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f8a:	8d 50 01             	lea    edx,[eax+0x1]
c0011f8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011f91:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011f95:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011f99:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011f9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011fa1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fa5:	01 d0                	add    eax,edx
c0011fa7:	83 c0 2c             	add    eax,0x2c
c0011faa:	8a 00                	mov    al,BYTE PTR [eax]
c0011fac:	0f b6 d0             	movzx  edx,al
c0011faf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fb3:	8d 48 01             	lea    ecx,[eax+0x1]
c0011fb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fba:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011fbe:	0f b6 c0             	movzx  eax,al
c0011fc1:	c1 e0 08             	shl    eax,0x8
c0011fc4:	89 d1                	mov    ecx,edx
c0011fc6:	09 c1                	or     ecx,eax
c0011fc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fcc:	8d 50 02             	lea    edx,[eax+0x2]
c0011fcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fd3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011fd7:	0f b6 c0             	movzx  eax,al
c0011fda:	c1 e0 10             	shl    eax,0x10
c0011fdd:	09 c1                	or     ecx,eax
c0011fdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fe3:	8d 50 03             	lea    edx,[eax+0x3]
c0011fe6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011fee:	0f b6 c0             	movzx  eax,al
c0011ff1:	c1 e0 18             	shl    eax,0x18
c0011ff4:	09 c8                	or     eax,ecx
c0011ff6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ffa:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011fff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012003:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012007:	01 d0                	add    eax,edx
c0012009:	83 c0 2c             	add    eax,0x2c
c001200c:	8a 00                	mov    al,BYTE PTR [eax]
c001200e:	0f b6 c0             	movzx  eax,al
c0012011:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012015:	8d 4a 01             	lea    ecx,[edx+0x1]
c0012018:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001201c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0012020:	0f b6 d2             	movzx  edx,dl
c0012023:	c1 e2 08             	shl    edx,0x8
c0012026:	09 d0                	or     eax,edx
c0012028:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001202d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0012032:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0012037:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001203b:	88 90 00 76 02 c0    	mov    BYTE PTR [eax-0x3ffd8a00],dl
c0012041:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0012046:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001204b:	66 89 84 12 00 88 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7800],ax
c0012053:	e9 b0 00 00 00       	jmp    c0012108 <scanMADT()+0x4b8>
c0012058:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c001205d:	0f 85 99 00 00 00    	jne    c00120fc <scanMADT()+0x4ac>
c0012063:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012067:	8d 50 01             	lea    edx,[eax+0x1]
c001206a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001206e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012072:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0012076:	0f b6 c0             	movzx  eax,al
c0012079:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001207d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012081:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012085:	01 d0                	add    eax,edx
c0012087:	83 c0 2c             	add    eax,0x2c
c001208a:	8a 00                	mov    al,BYTE PTR [eax]
c001208c:	0f b6 d0             	movzx  edx,al
c001208f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012093:	8d 48 01             	lea    ecx,[eax+0x1]
c0012096:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001209a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001209e:	0f b6 c0             	movzx  eax,al
c00120a1:	c1 e0 08             	shl    eax,0x8
c00120a4:	09 d0                	or     eax,edx
c00120a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120aa:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00120af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00120b3:	8d 50 01             	lea    edx,[eax+0x1]
c00120b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00120ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00120be:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00120c2:	0f b6 c0             	movzx  eax,al
c00120c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00120c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120cd:	c1 e0 08             	shl    eax,0x8
c00120d0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00120d4:	89 c1                	mov    ecx,eax
c00120d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120da:	c1 e0 18             	shl    eax,0x18
c00120dd:	89 c3                	mov    ebx,eax
c00120df:	a1 70 87 02 c0       	mov    eax,ds:0xc0028770
c00120e4:	8d 50 01             	lea    edx,[eax+0x1]
c00120e7:	89 15 70 87 02 c0    	mov    DWORD PTR ds:0xc0028770,edx
c00120ed:	09 d9                	or     ecx,ebx
c00120ef:	89 ca                	mov    edx,ecx
c00120f1:	89 14 85 80 87 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7880],edx
c00120f8:	eb 0e                	jmp    c0012108 <scanMADT()+0x4b8>
c00120fa:	66 90                	xchg   ax,ax
c00120fc:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0012101:	75 05                	jne    c0012108 <scanMADT()+0x4b8>
c0012103:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0012108:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c001210d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012111:	01 d0                	add    eax,edx
c0012113:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012117:	e9 68 fc ff ff       	jmp    c0011d84 <scanMADT()+0x134>
c001211c:	90                   	nop
c001211d:	eb 05                	jmp    c0012124 <scanMADT()+0x4d4>
c001211f:	90                   	nop
c0012120:	90                   	nop
c0012121:	8d 76 00             	lea    esi,[esi+0x0]
c0012124:	83 c4 38             	add    esp,0x38
c0012127:	5b                   	pop    ebx
c0012128:	c3                   	ret    
c0012129:	90                   	nop
c001212a:	66 90                	xchg   ax,ax

c001212c <ACPI::ACPI()>:
c001212c:	83 ec 0c             	sub    esp,0xc
c001212f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012133:	83 ec 08             	sub    esp,0x8
c0012136:	68 27 54 02 c0       	push   0xc0025427
c001213b:	50                   	push   eax
c001213c:	e8 31 c3 ff ff       	call   c000e472 <Device::Device(char const*)>
c0012141:	83 c4 10             	add    esp,0x10
c0012144:	ba e8 55 02 c0       	mov    edx,0xc00255e8
c0012149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001214d:	89 10                	mov    DWORD PTR [eax],edx
c001214f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012153:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001215a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001215e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0012168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001216c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0012176:	83 ec 0c             	sub    esp,0xc
c0012179:	68 2c 54 02 c0       	push   0xc002542c
c001217e:	e8 e6 78 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012183:	83 c4 10             	add    esp,0x10
c0012186:	e8 c5 fa ff ff       	call   c0011c50 <scanMADT()>
c001218b:	90                   	nop
c001218c:	83 c4 0c             	add    esp,0xc
c001218f:	c3                   	ret    

c0012190 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0012190:	83 ec 2c             	sub    esp,0x2c
c0012193:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012197:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001219b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001219f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00121a3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00121a8:	88 d0                	mov    al,dl
c00121aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00121ae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00121b3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00121bb:	90                   	nop
c00121bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121c0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00121c6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00121ca:	0f 8d 9c 00 00 00    	jge    c001226c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c00121d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121d8:	83 c2 2a             	add    edx,0x2a
c00121db:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00121df:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00121e4:	75 7a                	jne    c0012260 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00121e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00121ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00121ee:	83 c2 2a             	add    edx,0x2a
c00121f1:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00121f5:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00121f9:	75 65                	jne    c0012260 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c00121fb:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012200:	74 3a                	je     c001223c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0012202:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012206:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001220a:	83 c2 2a             	add    edx,0x2a
c001220d:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0012211:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012215:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012218:	39 c2                	cmp    edx,eax
c001221a:	74 10                	je     c001222c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c001221c:	83 ec 0c             	sub    esp,0xc
c001221f:	68 80 52 02 c0       	push   0xc0025280
c0012224:	e8 7a 27 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0012229:	83 c4 10             	add    esp,0x10
c001222c:	83 ec 0c             	sub    esp,0xc
c001222f:	68 3a 54 02 c0       	push   0xc002543a
c0012234:	e8 6a 27 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012240:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012244:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012248:	83 c2 2a             	add    edx,0x2a
c001224b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001224f:	8b 02                	mov    eax,DWORD PTR [edx]
c0012251:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0012254:	89 01                	mov    DWORD PTR [ecx],eax
c0012256:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0012259:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001225e:	66 90                	xchg   ax,ax
c0012260:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012264:	e9 53 ff ff ff       	jmp    c00121bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0012269:	8d 76 00             	lea    esi,[esi+0x0]
c001226c:	90                   	nop
c001226d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012271:	83 c4 2c             	add    esp,0x2c
c0012274:	c2 04 00             	ret    0x4
c0012277:	90                   	nop

c0012278 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0012278:	83 ec 1c             	sub    esp,0x1c
c001227b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001227f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0012283:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012287:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001228c:	88 c8                	mov    al,cl
c001228e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0012292:	88 d0                	mov    al,dl
c0012294:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0012298:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001229c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00122a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122a6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00122a9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00122ad:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c00122b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122b5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00122bb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00122bf:	8d 48 2a             	lea    ecx,[eax+0x2a]
c00122c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122c6:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c00122cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122cf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00122d5:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00122d9:	8d 48 01             	lea    ecx,[eax+0x1]
c00122dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122e0:	83 c2 2a             	add    edx,0x2a
c00122e3:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00122e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122eb:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c00122f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00122f5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00122f8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00122fc:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012300:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012304:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001230a:	8d 50 01             	lea    edx,[eax+0x1]
c001230d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012311:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0012317:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001231b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012321:	3d 00 02 00 00       	cmp    eax,0x200
c0012326:	75 10                	jne    c0012338 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012328:	83 ec 0c             	sub    esp,0xc
c001232b:	68 49 54 02 c0       	push   0xc0025449
c0012330:	e8 6e 26 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0012335:	83 c4 10             	add    esp,0x10
c0012338:	90                   	nop
c0012339:	83 c4 1c             	add    esp,0x1c
c001233c:	c3                   	ret    
c001233d:	90                   	nop
c001233e:	66 90                	xchg   ax,ax

c0012340 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012340:	b8 00 00 00 00       	mov    eax,0x0
c0012345:	c3                   	ret    
c0012346:	66 90                	xchg   ax,ax

c0012348 <ACPI::detectPCI()>:
c0012348:	53                   	push   ebx
c0012349:	83 ec 68             	sub    esp,0x68
c001234c:	c6 44 24 5f 00       	mov    BYTE PTR [esp+0x5f],0x0
c0012351:	c6 44 24 5e 00       	mov    BYTE PTR [esp+0x5e],0x0
c0012356:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001235b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012361:	83 e0 04             	and    eax,0x4
c0012364:	84 c0                	test   al,al
c0012366:	74 2c                	je     c0012394 <ACPI::detectPCI()+0x4c>
c0012368:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c001236d:	83 ec 08             	sub    esp,0x8
c0012370:	68 66 54 02 c0       	push   0xc0025466
c0012375:	50                   	push   eax
c0012376:	e8 5d f8 ff ff       	call   c0011bd8 <findDataTable(unsigned char*, char*)>
c001237b:	83 c4 10             	add    esp,0x10
c001237e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0012382:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
c0012387:	74 0b                	je     c0012394 <ACPI::detectPCI()+0x4c>
c0012389:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c001238e:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012393:	90                   	nop
c0012394:	c7 44 24 54 5f 0c 00 00 	mov    DWORD PTR [esp+0x54],0xc5f
c001239c:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123a0:	8a 00                	mov    al,BYTE PTR [eax]
c00123a2:	3c 01                	cmp    al,0x1
c00123a4:	75 0e                	jne    c00123b4 <ACPI::detectPCI()+0x6c>
c00123a6:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123ab:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c00123b0:	eb 2a                	jmp    c00123dc <ACPI::detectPCI()+0x94>
c00123b2:	66 90                	xchg   ax,ax
c00123b4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00123b8:	8a 00                	mov    al,BYTE PTR [eax]
c00123ba:	3c 02                	cmp    al,0x2
c00123bc:	75 1e                	jne    c00123dc <ACPI::detectPCI()+0x94>
c00123be:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123c3:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00123c8:	74 12                	je     c00123dc <ACPI::detectPCI()+0x94>
c00123ca:	83 ec 0c             	sub    esp,0xc
c00123cd:	68 b0 52 02 c0       	push   0xc00252b0
c00123d2:	e8 cc 25 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c00123d7:	83 c4 10             	add    esp,0x10
c00123da:	66 90                	xchg   ax,ax
c00123dc:	8a 44 24 5f          	mov    al,BYTE PTR [esp+0x5f]
c00123e0:	83 f0 01             	xor    eax,0x1
c00123e3:	84 c0                	test   al,al
c00123e5:	74 41                	je     c0012428 <ACPI::detectPCI()+0xe0>
c00123e7:	e8 64 dd fe ff       	call   c0000150 <manualPCIProbe>
c00123ec:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00123f0:	83 7c 24 50 01       	cmp    DWORD PTR [esp+0x50],0x1
c00123f5:	75 0d                	jne    c0012404 <ACPI::detectPCI()+0xbc>
c00123f7:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c00123fc:	c6 44 24 5e 01       	mov    BYTE PTR [esp+0x5e],0x1
c0012401:	eb 25                	jmp    c0012428 <ACPI::detectPCI()+0xe0>
c0012403:	90                   	nop
c0012404:	83 7c 24 50 02       	cmp    DWORD PTR [esp+0x50],0x2
c0012409:	75 1d                	jne    c0012428 <ACPI::detectPCI()+0xe0>
c001240b:	c6 44 24 5f 01       	mov    BYTE PTR [esp+0x5f],0x1
c0012410:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012415:	74 11                	je     c0012428 <ACPI::detectPCI()+0xe0>
c0012417:	83 ec 0c             	sub    esp,0xc
c001241a:	68 b0 52 02 c0       	push   0xc00252b0
c001241f:	e8 7f 25 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c0012424:	83 c4 10             	add    esp,0x10
c0012427:	90                   	nop
c0012428:	80 7c 24 5f 00       	cmp    BYTE PTR [esp+0x5f],0x0
c001242d:	0f 84 49 03 00 00    	je     c001277c <ACPI::detectPCI()+0x434>
c0012433:	83 ec 0c             	sub    esp,0xc
c0012436:	68 6b 54 02 c0       	push   0xc002546b
c001243b:	e8 29 76 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012440:	83 c4 10             	add    esp,0x10
c0012443:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c0012448:	0f 84 8e 00 00 00    	je     c00124dc <ACPI::detectPCI()+0x194>
c001244e:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0012453:	25 00 08 00 00       	and    eax,0x800
c0012458:	0f 84 16 01 00 00    	je     c0012574 <ACPI::detectPCI()+0x22c>
c001245e:	83 ec 0c             	sub    esp,0xc
c0012461:	68 d8 52 02 c0       	push   0xc00252d8
c0012466:	e8 fe 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0012473:	25 80 00 00 00       	and    eax,0x80
c0012478:	0f 85 f6 00 00 00    	jne    c0012574 <ACPI::detectPCI()+0x22c>
c001247e:	66 90                	xchg   ax,ax
c0012480:	66 c7 44 24 3a 60 00 	mov    WORD PTR [esp+0x3a],0x60
c0012487:	66 8b 44 24 3a       	mov    ax,WORD PTR [esp+0x3a]
c001248c:	89 c2                	mov    edx,eax
c001248e:	ec                   	in     al,dx
c001248f:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c0012493:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c0012497:	88 44 24 4f          	mov    BYTE PTR [esp+0x4f],al
c001249b:	80 7c 24 4f 5a       	cmp    BYTE PTR [esp+0x4f],0x5a
c00124a0:	74 0a                	je     c00124ac <ACPI::detectPCI()+0x164>
c00124a2:	80 7c 24 4f 1c       	cmp    BYTE PTR [esp+0x4f],0x1c
c00124a7:	74 03                	je     c00124ac <ACPI::detectPCI()+0x164>
c00124a9:	eb d5                	jmp    c0012480 <ACPI::detectPCI()+0x138>
c00124ab:	90                   	nop
c00124ac:	66 c7 44 24 36 60 00 	mov    WORD PTR [esp+0x36],0x60
c00124b3:	66 8b 44 24 36       	mov    ax,WORD PTR [esp+0x36]
c00124b8:	89 c2                	mov    edx,eax
c00124ba:	ec                   	in     al,dx
c00124bb:	88 44 24 35          	mov    BYTE PTR [esp+0x35],al
c00124bf:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c00124c3:	88 44 24 4e          	mov    BYTE PTR [esp+0x4e],al
c00124c7:	80 7c 24 4e 5a       	cmp    BYTE PTR [esp+0x4e],0x5a
c00124cc:	74 de                	je     c00124ac <ACPI::detectPCI()+0x164>
c00124ce:	80 7c 24 4e 1c       	cmp    BYTE PTR [esp+0x4e],0x1c
c00124d3:	0f 85 93 00 00 00    	jne    c001256c <ACPI::detectPCI()+0x224>
c00124d9:	eb d1                	jmp    c00124ac <ACPI::detectPCI()+0x164>
c00124db:	90                   	nop
c00124dc:	8a 44 24 5e          	mov    al,BYTE PTR [esp+0x5e]
c00124e0:	83 f0 01             	xor    eax,0x1
c00124e3:	84 c0                	test   al,al
c00124e5:	0f 84 89 00 00 00    	je     c0012574 <ACPI::detectPCI()+0x22c>
c00124eb:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c00124f0:	25 00 08 00 00       	and    eax,0x800
c00124f5:	74 7d                	je     c0012574 <ACPI::detectPCI()+0x22c>
c00124f7:	83 ec 0c             	sub    esp,0xc
c00124fa:	68 fc 52 02 c0       	push   0xc00252fc
c00124ff:	e8 65 75 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012504:	83 c4 10             	add    esp,0x10
c0012507:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c001250c:	25 80 00 00 00       	and    eax,0x80
c0012511:	75 61                	jne    c0012574 <ACPI::detectPCI()+0x22c>
c0012513:	90                   	nop
c0012514:	66 c7 44 24 32 60 00 	mov    WORD PTR [esp+0x32],0x60
c001251b:	66 8b 44 24 32       	mov    ax,WORD PTR [esp+0x32]
c0012520:	89 c2                	mov    edx,eax
c0012522:	ec                   	in     al,dx
c0012523:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0012527:	8a 44 24 31          	mov    al,BYTE PTR [esp+0x31]
c001252b:	88 44 24 4d          	mov    BYTE PTR [esp+0x4d],al
c001252f:	80 7c 24 4d 5a       	cmp    BYTE PTR [esp+0x4d],0x5a
c0012534:	74 0a                	je     c0012540 <ACPI::detectPCI()+0x1f8>
c0012536:	80 7c 24 4d 1c       	cmp    BYTE PTR [esp+0x4d],0x1c
c001253b:	74 03                	je     c0012540 <ACPI::detectPCI()+0x1f8>
c001253d:	eb d5                	jmp    c0012514 <ACPI::detectPCI()+0x1cc>
c001253f:	90                   	nop
c0012540:	66 c7 44 24 2e 60 00 	mov    WORD PTR [esp+0x2e],0x60
c0012547:	66 8b 44 24 2e       	mov    ax,WORD PTR [esp+0x2e]
c001254c:	89 c2                	mov    edx,eax
c001254e:	ec                   	in     al,dx
c001254f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0012553:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c0012557:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001255b:	80 7c 24 4c 5a       	cmp    BYTE PTR [esp+0x4c],0x5a
c0012560:	74 de                	je     c0012540 <ACPI::detectPCI()+0x1f8>
c0012562:	80 7c 24 4c 1c       	cmp    BYTE PTR [esp+0x4c],0x1c
c0012567:	75 07                	jne    c0012570 <ACPI::detectPCI()+0x228>
c0012569:	eb d5                	jmp    c0012540 <ACPI::detectPCI()+0x1f8>
c001256b:	90                   	nop
c001256c:	90                   	nop
c001256d:	eb 05                	jmp    c0012574 <ACPI::detectPCI()+0x22c>
c001256f:	90                   	nop
c0012570:	90                   	nop
c0012571:	8d 76 00             	lea    esi,[esi+0x0]
c0012574:	c7 44 24 28 5c 01 00 00 	mov    DWORD PTR [esp+0x28],0x15c
c001257c:	83 ec 0c             	sub    esp,0xc
c001257f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012583:	e8 87 74 ff ff       	call   c0009a0f <malloc>
c0012588:	83 c4 10             	add    esp,0x10
c001258b:	89 c3                	mov    ebx,eax
c001258d:	83 ec 0c             	sub    esp,0xc
c0012590:	53                   	push   ebx
c0012591:	e8 c0 ac 00 00       	call   c001d256 <PCI::PCI()>
c0012596:	83 c4 10             	add    esp,0x10
c0012599:	89 5c 24 48          	mov    DWORD PTR [esp+0x48],ebx
c001259d:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c00125a2:	25 00 08 00 00       	and    eax,0x800
c00125a7:	74 7b                	je     c0012624 <ACPI::detectPCI()+0x2dc>
c00125a9:	83 ec 0c             	sub    esp,0xc
c00125ac:	68 83 54 02 c0       	push   0xc0025483
c00125b1:	e8 b3 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00125b6:	83 c4 10             	add    esp,0x10
c00125b9:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c00125be:	25 80 00 00 00       	and    eax,0x80
c00125c3:	75 5f                	jne    c0012624 <ACPI::detectPCI()+0x2dc>
c00125c5:	8d 76 00             	lea    esi,[esi+0x0]
c00125c8:	66 c7 44 24 26 60 00 	mov    WORD PTR [esp+0x26],0x60
c00125cf:	66 8b 44 24 26       	mov    ax,WORD PTR [esp+0x26]
c00125d4:	89 c2                	mov    edx,eax
c00125d6:	ec                   	in     al,dx
c00125d7:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c00125db:	8a 44 24 25          	mov    al,BYTE PTR [esp+0x25]
c00125df:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00125e3:	80 7c 24 47 5a       	cmp    BYTE PTR [esp+0x47],0x5a
c00125e8:	74 0a                	je     c00125f4 <ACPI::detectPCI()+0x2ac>
c00125ea:	80 7c 24 47 1c       	cmp    BYTE PTR [esp+0x47],0x1c
c00125ef:	74 03                	je     c00125f4 <ACPI::detectPCI()+0x2ac>
c00125f1:	eb d5                	jmp    c00125c8 <ACPI::detectPCI()+0x280>
c00125f3:	90                   	nop
c00125f4:	66 c7 44 24 22 60 00 	mov    WORD PTR [esp+0x22],0x60
c00125fb:	66 8b 44 24 22       	mov    ax,WORD PTR [esp+0x22]
c0012600:	89 c2                	mov    edx,eax
c0012602:	ec                   	in     al,dx
c0012603:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0012607:	8a 44 24 21          	mov    al,BYTE PTR [esp+0x21]
c001260b:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001260f:	80 7c 24 46 5a       	cmp    BYTE PTR [esp+0x46],0x5a
c0012614:	74 de                	je     c00125f4 <ACPI::detectPCI()+0x2ac>
c0012616:	80 7c 24 46 1c       	cmp    BYTE PTR [esp+0x46],0x1c
c001261b:	75 03                	jne    c0012620 <ACPI::detectPCI()+0x2d8>
c001261d:	eb d5                	jmp    c00125f4 <ACPI::detectPCI()+0x2ac>
c001261f:	90                   	nop
c0012620:	90                   	nop
c0012621:	8d 76 00             	lea    esi,[esi+0x0]
c0012624:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0012628:	83 ec 08             	sub    esp,0x8
c001262b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001262f:	50                   	push   eax
c0012630:	e8 39 bc ff ff       	call   c000e26e <Device::addChild(Device*)>
c0012635:	83 c4 10             	add    esp,0x10
c0012638:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c001263d:	25 00 08 00 00       	and    eax,0x800
c0012642:	74 78                	je     c00126bc <ACPI::detectPCI()+0x374>
c0012644:	83 ec 0c             	sub    esp,0xc
c0012647:	68 89 54 02 c0       	push   0xc0025489
c001264c:	e8 18 74 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012651:	83 c4 10             	add    esp,0x10
c0012654:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0012659:	25 80 00 00 00       	and    eax,0x80
c001265e:	75 5c                	jne    c00126bc <ACPI::detectPCI()+0x374>
c0012660:	66 c7 44 24 1e 60 00 	mov    WORD PTR [esp+0x1e],0x60
c0012667:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001266c:	89 c2                	mov    edx,eax
c001266e:	ec                   	in     al,dx
c001266f:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c0012673:	8a 44 24 1d          	mov    al,BYTE PTR [esp+0x1d]
c0012677:	88 44 24 45          	mov    BYTE PTR [esp+0x45],al
c001267b:	80 7c 24 45 5a       	cmp    BYTE PTR [esp+0x45],0x5a
c0012680:	74 0a                	je     c001268c <ACPI::detectPCI()+0x344>
c0012682:	80 7c 24 45 1c       	cmp    BYTE PTR [esp+0x45],0x1c
c0012687:	74 03                	je     c001268c <ACPI::detectPCI()+0x344>
c0012689:	eb d5                	jmp    c0012660 <ACPI::detectPCI()+0x318>
c001268b:	90                   	nop
c001268c:	66 c7 44 24 1a 60 00 	mov    WORD PTR [esp+0x1a],0x60
c0012693:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0012698:	89 c2                	mov    edx,eax
c001269a:	ec                   	in     al,dx
c001269b:	88 44 24 19          	mov    BYTE PTR [esp+0x19],al
c001269f:	8a 44 24 19          	mov    al,BYTE PTR [esp+0x19]
c00126a3:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c00126a7:	80 7c 24 44 5a       	cmp    BYTE PTR [esp+0x44],0x5a
c00126ac:	74 de                	je     c001268c <ACPI::detectPCI()+0x344>
c00126ae:	80 7c 24 44 1c       	cmp    BYTE PTR [esp+0x44],0x1c
c00126b3:	75 03                	jne    c00126b8 <ACPI::detectPCI()+0x370>
c00126b5:	eb d5                	jmp    c001268c <ACPI::detectPCI()+0x344>
c00126b7:	90                   	nop
c00126b8:	90                   	nop
c00126b9:	8d 76 00             	lea    esi,[esi+0x0]
c00126bc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00126c0:	8b 00                	mov    eax,DWORD PTR [eax]
c00126c2:	83 c0 08             	add    eax,0x8
c00126c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00126c7:	80 7c 24 5e 00       	cmp    BYTE PTR [esp+0x5e],0x0
c00126cc:	74 0a                	je     c00126d8 <ACPI::detectPCI()+0x390>
c00126ce:	ba 01 00 00 00       	mov    edx,0x1
c00126d3:	eb 0b                	jmp    c00126e0 <ACPI::detectPCI()+0x398>
c00126d5:	8d 76 00             	lea    esi,[esi+0x0]
c00126d8:	ba 02 00 00 00       	mov    edx,0x2
c00126dd:	8d 76 00             	lea    esi,[esi+0x0]
c00126e0:	6a 00                	push   0x0
c00126e2:	6a 00                	push   0x0
c00126e4:	52                   	push   edx
c00126e5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00126e9:	ff d0                	call   eax
c00126eb:	83 c4 10             	add    esp,0x10
c00126ee:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c00126f3:	25 00 08 00 00       	and    eax,0x800
c00126f8:	0f 84 26 01 00 00    	je     c0012824 <ACPI::detectPCI()+0x4dc>
c00126fe:	83 ec 0c             	sub    esp,0xc
c0012701:	68 8f 54 02 c0       	push   0xc002548f
c0012706:	e8 5e 73 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001270b:	83 c4 10             	add    esp,0x10
c001270e:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0012713:	25 80 00 00 00       	and    eax,0x80
c0012718:	0f 85 06 01 00 00    	jne    c0012824 <ACPI::detectPCI()+0x4dc>
c001271e:	66 90                	xchg   ax,ax
c0012720:	66 c7 44 24 16 60 00 	mov    WORD PTR [esp+0x16],0x60
c0012727:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c001272c:	89 c2                	mov    edx,eax
c001272e:	ec                   	in     al,dx
c001272f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0012733:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0012737:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001273b:	80 7c 24 43 5a       	cmp    BYTE PTR [esp+0x43],0x5a
c0012740:	74 0a                	je     c001274c <ACPI::detectPCI()+0x404>
c0012742:	80 7c 24 43 1c       	cmp    BYTE PTR [esp+0x43],0x1c
c0012747:	74 03                	je     c001274c <ACPI::detectPCI()+0x404>
c0012749:	eb d5                	jmp    c0012720 <ACPI::detectPCI()+0x3d8>
c001274b:	90                   	nop
c001274c:	66 c7 44 24 12 60 00 	mov    WORD PTR [esp+0x12],0x60
c0012753:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0012758:	89 c2                	mov    edx,eax
c001275a:	ec                   	in     al,dx
c001275b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001275f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0012763:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c0012767:	80 7c 24 42 5a       	cmp    BYTE PTR [esp+0x42],0x5a
c001276c:	74 de                	je     c001274c <ACPI::detectPCI()+0x404>
c001276e:	80 7c 24 42 1c       	cmp    BYTE PTR [esp+0x42],0x1c
c0012773:	0f 85 a7 00 00 00    	jne    c0012820 <ACPI::detectPCI()+0x4d8>
c0012779:	eb d1                	jmp    c001274c <ACPI::detectPCI()+0x404>
c001277b:	90                   	nop
c001277c:	83 ec 0c             	sub    esp,0xc
c001277f:	68 95 54 02 c0       	push   0xc0025495
c0012784:	e8 72 a5 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0012789:	83 c4 10             	add    esp,0x10
c001278c:	83 ec 0c             	sub    esp,0xc
c001278f:	68 a0 54 02 c0       	push   0xc00254a0
c0012794:	e8 d0 72 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012799:	83 c4 10             	add    esp,0x10
c001279c:	c7 44 24 0c 70 02 00 00 	mov    DWORD PTR [esp+0xc],0x270
c00127a4:	83 ec 0c             	sub    esp,0xc
c00127a7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00127ab:	e8 5f 72 ff ff       	call   c0009a0f <malloc>
c00127b0:	83 c4 10             	add    esp,0x10
c00127b3:	89 c3                	mov    ebx,eax
c00127b5:	83 ec 0c             	sub    esp,0xc
c00127b8:	53                   	push   ebx
c00127b9:	e8 02 bc 00 00       	call   c001e3c0 <IDE::IDE()>
c00127be:	83 c4 10             	add    esp,0x10
c00127c1:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00127c5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00127c9:	83 ec 08             	sub    esp,0x8
c00127cc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00127d0:	50                   	push   eax
c00127d1:	e8 98 ba ff ff       	call   c000e26e <Device::addChild(Device*)>
c00127d6:	83 c4 10             	add    esp,0x10
c00127d9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127dd:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c00127e7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127eb:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c00127f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127f8:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012801:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012805:	8b 00                	mov    eax,DWORD PTR [eax]
c0012807:	83 c0 08             	add    eax,0x8
c001280a:	8b 00                	mov    eax,DWORD PTR [eax]
c001280c:	6a 00                	push   0x0
c001280e:	6a 00                	push   0x0
c0012810:	6a 00                	push   0x0
c0012812:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012816:	ff d0                	call   eax
c0012818:	83 c4 10             	add    esp,0x10
c001281b:	eb 07                	jmp    c0012824 <ACPI::detectPCI()+0x4dc>
c001281d:	8d 76 00             	lea    esi,[esi+0x0]
c0012820:	90                   	nop
c0012821:	8d 76 00             	lea    esi,[esi+0x0]
c0012824:	90                   	nop
c0012825:	83 c4 68             	add    esp,0x68
c0012828:	5b                   	pop    ebx
c0012829:	c3                   	ret    
c001282a:	66 90                	xchg   ax,ax

c001282c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c001282c:	83 ec 1c             	sub    esp,0x1c
c001282f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012833:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012836:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001283a:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001283f:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0012844:	83 ec 08             	sub    esp,0x8
c0012847:	52                   	push   edx
c0012848:	50                   	push   eax
c0012849:	e8 90 67 ff ff       	call   c0008fde <Computer::readCMOS(unsigned char)>
c001284e:	83 c4 10             	add    esp,0x10
c0012851:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0012855:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001285a:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001285f:	83 ec 04             	sub    esp,0x4
c0012862:	6a 01                	push   0x1
c0012864:	52                   	push   edx
c0012865:	50                   	push   eax
c0012866:	e8 4f 69 ff ff       	call   c00091ba <Computer::writeCMOS(unsigned char, unsigned char)>
c001286b:	83 c4 10             	add    esp,0x10
c001286e:	90                   	nop
c001286f:	83 c4 1c             	add    esp,0x1c
c0012872:	c3                   	ret    
c0012873:	90                   	nop

c0012874 <ACPI::sleep()>:
c0012874:	83 ec 0c             	sub    esp,0xc
c0012877:	83 ec 0c             	sub    esp,0xc
c001287a:	68 b5 54 02 c0       	push   0xc00254b5
c001287f:	e8 77 a4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0012884:	83 c4 10             	add    esp,0x10
c0012887:	a1 40 85 02 c0       	mov    eax,ds:0xc0028540
c001288c:	85 c0                	test   eax,eax
c001288e:	74 18                	je     c00128a8 <ACPI::sleep()+0x34>
c0012890:	83 ec 0c             	sub    esp,0xc
c0012893:	68 c2 54 02 c0       	push   0xc00254c2
c0012898:	e8 5e a4 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001289d:	83 c4 10             	add    esp,0x10
c00128a0:	a1 40 85 02 c0       	mov    eax,ds:0xc0028540
c00128a5:	ff d0                	call   eax
c00128a7:	90                   	nop
c00128a8:	90                   	nop
c00128a9:	83 c4 0c             	add    esp,0xc
c00128ac:	c3                   	ret    
c00128ad:	90                   	nop
c00128ae:	66 90                	xchg   ax,ax

c00128b0 <ACPI::open(int, int, void*)>:
c00128b0:	57                   	push   edi
c00128b1:	56                   	push   esi
c00128b2:	53                   	push   ebx
c00128b3:	81 ec 70 01 00 00    	sub    esp,0x170
c00128b9:	83 ec 0c             	sub    esp,0xc
c00128bc:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00128c3:	e8 80 fa ff ff       	call   c0012348 <ACPI::detectPCI()>
c00128c8:	83 c4 10             	add    esp,0x10
c00128cb:	83 ec 0c             	sub    esp,0xc
c00128ce:	68 20 53 02 c0       	push   0xc0025320
c00128d3:	e8 91 71 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00128d8:	83 c4 10             	add    esp,0x10
c00128db:	83 ec 0c             	sub    esp,0xc
c00128de:	68 dc 54 02 c0       	push   0xc00254dc
c00128e3:	e8 6b 48 00 00       	call   c0017153 <Thr::loadKernelSymbolTable(char const*)>
c00128e8:	83 c4 10             	add    esp,0x10
c00128eb:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c00128f3:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c00128fe:	83 ec 0c             	sub    esp,0xc
c0012901:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012908:	e8 02 71 ff ff       	call   c0009a0f <malloc>
c001290d:	83 c4 10             	add    esp,0x10
c0012910:	89 c3                	mov    ebx,eax
c0012912:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0012917:	83 ec 04             	sub    esp,0x4
c001291a:	50                   	push   eax
c001291b:	68 fa 54 02 c0       	push   0xc00254fa
c0012920:	53                   	push   ebx
c0012921:	e8 40 a9 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0012926:	83 c4 10             	add    esp,0x10
c0012929:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c0012930:	83 ec 08             	sub    esp,0x8
c0012933:	6a 01                	push   0x1
c0012935:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001293c:	e8 ff a9 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c001294b:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c0012953:	75 17                	jne    c001296c <ACPI::open(int, int, void*)+0xbc>
c0012955:	83 ec 0c             	sub    esp,0xc
c0012958:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001295f:	e8 3a aa ff ff       	call   c000d39e <File::close()>
c0012964:	83 c4 10             	add    esp,0x10
c0012967:	eb 0b                	jmp    c0012974 <ACPI::open(int, int, void*)+0xc4>
c0012969:	8d 76 00             	lea    esi,[esi+0x0]
c001296c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c0012974:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c001297c:	74 1e                	je     c001299c <ACPI::open(int, int, void*)+0xec>
c001297e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c0012985:	8b 00                	mov    eax,DWORD PTR [eax]
c0012987:	83 c0 08             	add    eax,0x8
c001298a:	8b 00                	mov    eax,DWORD PTR [eax]
c001298c:	83 ec 0c             	sub    esp,0xc
c001298f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012996:	ff d0                	call   eax
c0012998:	83 c4 10             	add    esp,0x10
c001299b:	90                   	nop
c001299c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00129a3:	83 f0 01             	xor    eax,0x1
c00129a6:	84 c0                	test   al,al
c00129a8:	74 42                	je     c00129ec <ACPI::open(int, int, void*)+0x13c>
c00129aa:	83 ec 0c             	sub    esp,0xc
c00129ad:	68 18 55 02 c0       	push   0xc0025518
c00129b2:	e8 b2 70 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00129b7:	83 c4 10             	add    esp,0x10
c00129ba:	83 ec 04             	sub    esp,0x4
c00129bd:	6a 0c                	push   0xc
c00129bf:	68 33 55 02 c0       	push   0xc0025533
c00129c4:	68 44 55 02 c0       	push   0xc0025544
c00129c9:	e8 ef 2d 00 00       	call   c00157bd <Reg::readIntWithDefault(char*, char*, int)>
c00129ce:	83 c4 10             	add    esp,0x10
c00129d1:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c00129d8:	83 ec 0c             	sub    esp,0xc
c00129db:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c00129e2:	e8 f8 91 ff ff       	call   c000bbdf <Virt::setupPageSwapping(int)>
c00129e7:	83 c4 10             	add    esp,0x10
c00129ea:	66 90                	xchg   ax,ax
c00129ec:	83 ec 0c             	sub    esp,0xc
c00129ef:	68 86 3c 02 c0       	push   0xc0023c86
c00129f4:	e8 70 70 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c0012a02:	83 ec 08             	sub    esp,0x8
c0012a05:	6a 01                	push   0x1
c0012a07:	68 4b 55 02 c0       	push   0xc002554b
c0012a0c:	e8 b9 51 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c0012a11:	83 c4 10             	add    esp,0x10
c0012a14:	83 ec 08             	sub    esp,0x8
c0012a17:	53                   	push   ebx
c0012a18:	50                   	push   eax
c0012a19:	e8 dd 53 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c0012a1e:	83 c4 10             	add    esp,0x10
c0012a21:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012a28:	83 ec 08             	sub    esp,0x8
c0012a2b:	6a 12                	push   0x12
c0012a2d:	50                   	push   eax
c0012a2e:	e8 bf bb ff ff       	call   c000e5f2 <getDevicesOfType(DeviceType)>
c0012a33:	83 c4 0c             	add    esp,0xc
c0012a36:	66 90                	xchg   ax,ax
c0012a38:	83 ec 0c             	sub    esp,0xc
c0012a3b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a42:	50                   	push   eax
c0012a43:	e8 28 04 01 00       	call   c0022e70 <LinkedList<Device>::isEmpty()>
c0012a48:	83 c4 10             	add    esp,0x10
c0012a4b:	83 f0 01             	xor    eax,0x1
c0012a4e:	84 c0                	test   al,al
c0012a50:	0f 84 46 01 00 00    	je     c0012b9c <ACPI::open(int, int, void*)+0x2ec>
c0012a56:	83 ec 0c             	sub    esp,0xc
c0012a59:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a60:	50                   	push   eax
c0012a61:	e8 26 04 01 00       	call   c0022e8c <LinkedList<Device>::getFirstElement()>
c0012a66:	83 c4 10             	add    esp,0x10
c0012a69:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c0012a70:	83 ec 0c             	sub    esp,0xc
c0012a73:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012a7a:	50                   	push   eax
c0012a7b:	e8 14 04 01 00       	call   c0022e94 <LinkedList<Device>::removeFirst()>
c0012a80:	83 c4 10             	add    esp,0x10
c0012a83:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c0012a8a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c0012a91:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c0012a98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012a9c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c0012aa2:	ba 09 00 00 00       	mov    edx,0x9
c0012aa7:	fc                   	cld    
c0012aa8:	89 c7                	mov    edi,eax
c0012aaa:	89 de                	mov    esi,ebx
c0012aac:	89 d1                	mov    ecx,edx
c0012aae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012ab0:	83 ec 08             	sub    esp,0x8
c0012ab3:	8d 44 24 38          	lea    eax,[esp+0x38]
c0012ab7:	50                   	push   eax
c0012ab8:	83 ec 24             	sub    esp,0x24
c0012abb:	89 e0                	mov    eax,esp
c0012abd:	89 c3                	mov    ebx,eax
c0012abf:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012ac3:	ba 09 00 00 00       	mov    edx,0x9
c0012ac8:	89 df                	mov    edi,ebx
c0012aca:	89 c6                	mov    esi,eax
c0012acc:	89 d1                	mov    ecx,edx
c0012ace:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0012ad0:	e8 5f ac 00 00       	call   c001d734 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012ad5:	83 c4 30             	add    esp,0x30
c0012ad8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c0012adf:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012ae7:	0f 84 4b ff ff ff    	je     c0012a38 <ACPI::open(int, int, void*)+0x188>
c0012aed:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012af8:	83 ec 0c             	sub    esp,0xc
c0012afb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0012b02:	e8 08 6f ff ff       	call   c0009a0f <malloc>
c0012b07:	83 c4 10             	add    esp,0x10
c0012b0a:	89 c3                	mov    ebx,eax
c0012b0c:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0012b11:	83 ec 04             	sub    esp,0x4
c0012b14:	50                   	push   eax
c0012b15:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b1c:	53                   	push   ebx
c0012b1d:	e8 44 a7 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0012b22:	83 c4 10             	add    esp,0x10
c0012b25:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012b2c:	83 ec 0c             	sub    esp,0xc
c0012b2f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b36:	e8 73 aa ff ff       	call   c000d5ae <File::exists()>
c0012b3b:	83 c4 10             	add    esp,0x10
c0012b3e:	84 c0                	test   al,al
c0012b40:	74 2a                	je     c0012b6c <ACPI::open(int, int, void*)+0x2bc>
c0012b42:	83 ec 08             	sub    esp,0x8
c0012b45:	6a 01                	push   0x1
c0012b47:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012b4e:	e8 77 50 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c0012b53:	83 c4 10             	add    esp,0x10
c0012b56:	83 ec 08             	sub    esp,0x8
c0012b59:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c0012b60:	50                   	push   eax
c0012b61:	e8 95 52 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c0012b66:	83 c4 10             	add    esp,0x10
c0012b69:	8d 76 00             	lea    esi,[esi+0x0]
c0012b6c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0012b74:	0f 84 be fe ff ff    	je     c0012a38 <ACPI::open(int, int, void*)+0x188>
c0012b7a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c0012b81:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b83:	83 c0 08             	add    eax,0x8
c0012b86:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b88:	83 ec 0c             	sub    esp,0xc
c0012b8b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012b92:	ff d0                	call   eax
c0012b94:	83 c4 10             	add    esp,0x10
c0012b97:	e9 9c fe ff ff       	jmp    c0012a38 <ACPI::open(int, int, void*)+0x188>
c0012b9c:	83 ec 0c             	sub    esp,0xc
c0012b9f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c0012ba6:	50                   	push   eax
c0012ba7:	e8 c0 02 01 00       	call   c0022e6c <LinkedList<Device>::~LinkedList()>
c0012bac:	83 c4 10             	add    esp,0x10
c0012baf:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c0012bb5:	83 ec 08             	sub    esp,0x8
c0012bb8:	6a 01                	push   0x1
c0012bba:	68 66 55 02 c0       	push   0xc0025566
c0012bbf:	e8 06 50 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c0012bc4:	83 c4 10             	add    esp,0x10
c0012bc7:	83 ec 08             	sub    esp,0x8
c0012bca:	53                   	push   ebx
c0012bcb:	50                   	push   eax
c0012bcc:	e8 2a 52 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c0012bd1:	83 c4 10             	add    esp,0x10
c0012bd4:	8b 1d 08 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f08
c0012bda:	83 ec 08             	sub    esp,0x8
c0012bdd:	6a 01                	push   0x1
c0012bdf:	68 83 55 02 c0       	push   0xc0025583
c0012be4:	e8 e1 4f 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c0012be9:	83 c4 10             	add    esp,0x10
c0012bec:	83 ec 08             	sub    esp,0x8
c0012bef:	53                   	push   ebx
c0012bf0:	50                   	push   eax
c0012bf1:	e8 05 52 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c0012bf6:	83 c4 10             	add    esp,0x10
c0012bf9:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0012bfe:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012c04:	83 e0 04             	and    eax,0x4
c0012c07:	84 c0                	test   al,al
c0012c09:	0f 84 15 01 00 00    	je     c0012d24 <ACPI::open(int, int, void*)+0x474>
c0012c0f:	83 ec 0c             	sub    esp,0xc
c0012c12:	68 a0 55 02 c0       	push   0xc00255a0
c0012c17:	e8 4d 6e ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0012c1c:	83 c4 10             	add    esp,0x10
c0012c1f:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012c2a:	83 ec 0c             	sub    esp,0xc
c0012c2d:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012c34:	e8 d6 6d ff ff       	call   c0009a0f <malloc>
c0012c39:	83 c4 10             	add    esp,0x10
c0012c3c:	89 c3                	mov    ebx,eax
c0012c3e:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c0012c43:	83 ec 04             	sub    esp,0x4
c0012c46:	50                   	push   eax
c0012c47:	68 bd 55 02 c0       	push   0xc00255bd
c0012c4c:	53                   	push   ebx
c0012c4d:	e8 14 a6 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0012c52:	83 c4 10             	add    esp,0x10
c0012c55:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012c5c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012c64:	74 1a                	je     c0012c80 <ACPI::open(int, int, void*)+0x3d0>
c0012c66:	83 ec 0c             	sub    esp,0xc
c0012c69:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012c70:	e8 39 a9 ff ff       	call   c000d5ae <File::exists()>
c0012c75:	83 c4 10             	add    esp,0x10
c0012c78:	84 c0                	test   al,al
c0012c7a:	74 04                	je     c0012c80 <ACPI::open(int, int, void*)+0x3d0>
c0012c7c:	b0 01                	mov    al,0x1
c0012c7e:	eb 04                	jmp    c0012c84 <ACPI::open(int, int, void*)+0x3d4>
c0012c80:	b0 00                	mov    al,0x0
c0012c82:	66 90                	xchg   ax,ax
c0012c84:	84 c0                	test   al,al
c0012c86:	74 28                	je     c0012cb0 <ACPI::open(int, int, void*)+0x400>
c0012c88:	83 ec 08             	sub    esp,0x8
c0012c8b:	6a 01                	push   0x1
c0012c8d:	68 bd 55 02 c0       	push   0xc00255bd
c0012c92:	e8 33 4f 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c0012c97:	83 c4 10             	add    esp,0x10
c0012c9a:	83 ec 08             	sub    esp,0x8
c0012c9d:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c0012ca4:	50                   	push   eax
c0012ca5:	e8 51 51 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c0012caa:	83 c4 10             	add    esp,0x10
c0012cad:	8d 76 00             	lea    esi,[esi+0x0]
c0012cb0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012cb8:	74 2a                	je     c0012ce4 <ACPI::open(int, int, void*)+0x434>
c0012cba:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c0012cc2:	74 20                	je     c0012ce4 <ACPI::open(int, int, void*)+0x434>
c0012cc4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012ccb:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ccd:	83 c0 08             	add    eax,0x8
c0012cd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cd2:	83 ec 0c             	sub    esp,0xc
c0012cd5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012cdc:	ff d0                	call   eax
c0012cde:	83 c4 10             	add    esp,0x10
c0012ce1:	8d 76 00             	lea    esi,[esi+0x0]
c0012ce4:	a1 68 87 02 c0       	mov    eax,ds:0xc0028768
c0012ce9:	83 ec 08             	sub    esp,0x8
c0012cec:	68 da 55 02 c0       	push   0xc00255da
c0012cf1:	50                   	push   eax
c0012cf2:	e8 e1 ee ff ff       	call   c0011bd8 <findDataTable(unsigned char*, char*)>
c0012cf7:	83 c4 10             	add    esp,0x10
c0012cfa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0012d01:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012d09:	74 19                	je     c0012d24 <ACPI::open(int, int, void*)+0x474>
c0012d0b:	83 ec 08             	sub    esp,0x8
c0012d0e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012d15:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012d1c:	e8 0b fb ff ff       	call   c001282c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0012d21:	83 c4 10             	add    esp,0x10
c0012d24:	b8 00 00 00 00       	mov    eax,0x0
c0012d29:	81 c4 70 01 00 00    	add    esp,0x170
c0012d2f:	5b                   	pop    ebx
c0012d30:	5e                   	pop    esi
c0012d31:	5f                   	pop    edi
c0012d32:	c3                   	ret    
c0012d33:	90                   	nop

c0012d34 <CPU::close(int, int, void*)>:
c0012d34:	31 c0                	xor    eax,eax
c0012d36:	c3                   	ret    
c0012d37:	90                   	nop

c0012d38 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012d38:	55                   	push   ebp
c0012d39:	57                   	push   edi
c0012d3a:	56                   	push   esi
c0012d3b:	53                   	push   ebx
c0012d3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012d40:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012d44:	89 ce                	mov    esi,ecx
c0012d46:	89 d5                	mov    ebp,edx
c0012d48:	80 f9 04             	cmp    cl,0x4
c0012d4b:	75 28                	jne    c0012d75 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012d4d:	8d 42 f9             	lea    eax,[edx-0x7]
c0012d50:	3c 03                	cmp    al,0x3
c0012d52:	0f 86 63 01 00 00    	jbe    c0012ebb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012d58:	80 fa 03             	cmp    dl,0x3
c0012d5b:	0f 84 5a 01 00 00    	je     c0012ebb <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012d61:	8d 7a f2             	lea    edi,[edx-0xe]
c0012d64:	b8 d0 77 02 c0       	mov    eax,0xc00277d0
c0012d69:	89 fb                	mov    ebx,edi
c0012d6b:	80 fb 01             	cmp    bl,0x1
c0012d6e:	77 4e                	ja     c0012dbe <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0012d70:	e9 52 01 00 00       	jmp    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d75:	80 f9 05             	cmp    cl,0x5
c0012d78:	75 4d                	jne    c0012dc7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0012d7a:	b8 e0 77 02 c0       	mov    eax,0xc00277e0
c0012d7f:	80 fa 03             	cmp    dl,0x3
c0012d82:	0f 86 3f 01 00 00    	jbe    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d88:	8d 7a fa             	lea    edi,[edx-0x6]
c0012d8b:	b8 f0 77 02 c0       	mov    eax,0xc00277f0
c0012d90:	89 fb                	mov    ebx,edi
c0012d92:	80 fb 01             	cmp    bl,0x1
c0012d95:	0f 86 2c 01 00 00    	jbe    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012d9b:	b8 00 78 02 c0       	mov    eax,0xc0027800
c0012da0:	80 fa 08             	cmp    dl,0x8
c0012da3:	0f 84 1e 01 00 00    	je     c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012da9:	89 d7                	mov    edi,edx
c0012dab:	b8 10 78 02 c0       	mov    eax,0xc0027810
c0012db0:	83 e7 fb             	and    edi,0xfffffffb
c0012db3:	89 fb                	mov    ebx,edi
c0012db5:	80 fb 09             	cmp    bl,0x9
c0012db8:	0f 84 09 01 00 00    	je     c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012dbe:	31 c0                	xor    eax,eax
c0012dc0:	89 eb                	mov    ebx,ebp
c0012dc2:	0f b6 fb             	movzx  edi,bl
c0012dc5:	eb 30                	jmp    c0012df7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012dc7:	31 c0                	xor    eax,eax
c0012dc9:	80 f9 06             	cmp    cl,0x6
c0012dcc:	75 f2                	jne    c0012dc0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012dce:	80 fa 0a             	cmp    dl,0xa
c0012dd1:	77 ed                	ja     c0012dc0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012dd3:	bf de 05 00 00       	mov    edi,0x5de
c0012dd8:	0f a3 d7             	bt     edi,edx
c0012ddb:	73 e3                	jae    c0012dc0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012ddd:	b8 20 78 02 c0       	mov    eax,0xc0027820
c0012de2:	e9 e0 00 00 00       	jmp    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012de7:	39 c7                	cmp    edi,eax
c0012de9:	0f 84 d3 00 00 00    	je     c0012ec2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012def:	40                   	inc    eax
c0012df0:	3d d0 00 00 00       	cmp    eax,0xd0
c0012df5:	74 09                	je     c0012e00 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012df7:	89 f3                	mov    ebx,esi
c0012df9:	80 fb 0f             	cmp    bl,0xf
c0012dfc:	75 f1                	jne    c0012def <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0012dfe:	eb e7                	jmp    c0012de7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0012e00:	80 f9 10             	cmp    cl,0x10
c0012e03:	75 14                	jne    c0012e19 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012e05:	8d 42 fc             	lea    eax,[edx-0x4]
c0012e08:	83 e0 fb             	and    eax,0xfffffffb
c0012e0b:	3c 02                	cmp    al,0x2
c0012e0d:	76 34                	jbe    c0012e43 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0012e0f:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0012e14:	80 fa 02             	cmp    dl,0x2
c0012e17:	eb 24                	jmp    c0012e3d <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012e19:	80 f9 11             	cmp    cl,0x11
c0012e1c:	75 13                	jne    c0012e31 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0012e1e:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0012e23:	80 fa 03             	cmp    dl,0x3
c0012e26:	0f 85 9b 00 00 00    	jne    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e2c:	e9 91 00 00 00       	jmp    c0012ec2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0012e31:	80 f9 12             	cmp    cl,0x12
c0012e34:	75 14                	jne    c0012e4a <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012e36:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0012e3b:	fe ca                	dec    dl
c0012e3d:	0f 85 84 00 00 00    	jne    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e43:	b8 40 78 02 c0       	mov    eax,0xc0027840
c0012e48:	eb 7d                	jmp    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e4a:	80 f9 14             	cmp    cl,0x14
c0012e4d:	75 12                	jne    c0012e61 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0012e4f:	4a                   	dec    edx
c0012e50:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0012e55:	80 fa 01             	cmp    dl,0x1
c0012e58:	77 6d                	ja     c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e5a:	b8 50 78 02 c0       	mov    eax,0xc0027850
c0012e5f:	eb 66                	jmp    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e61:	80 f9 15             	cmp    cl,0x15
c0012e64:	75 31                	jne    c0012e97 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0012e66:	b8 60 78 02 c0       	mov    eax,0xc0027860
c0012e6b:	80 fa 01             	cmp    dl,0x1
c0012e6e:	74 57                	je     c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e70:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0012e75:	80 fa 13             	cmp    dl,0x13
c0012e78:	76 0c                	jbe    c0012e86 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0012e7a:	80 fa 30             	cmp    dl,0x30
c0012e7d:	75 48                	jne    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e7f:	b8 80 78 02 c0       	mov    eax,0xc0027880
c0012e84:	eb 41                	jmp    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e86:	b9 04 00 09 00       	mov    ecx,0x90004
c0012e8b:	0f a3 d1             	bt     ecx,edx
c0012e8e:	73 37                	jae    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e90:	b8 70 78 02 c0       	mov    eax,0xc0027870
c0012e95:	eb 30                	jmp    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012e97:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0012e9c:	80 f9 16             	cmp    cl,0x16
c0012e9f:	75 26                	jne    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ea1:	b8 90 78 02 c0       	mov    eax,0xc0027890
c0012ea6:	84 d2                	test   dl,dl
c0012ea8:	74 1d                	je     c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eaa:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0012eaf:	80 fa 30             	cmp    dl,0x30
c0012eb2:	75 13                	jne    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012eb4:	b8 a0 78 02 c0       	mov    eax,0xc00278a0
c0012eb9:	eb 0c                	jmp    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ebb:	b8 c0 77 02 c0       	mov    eax,0xc00277c0
c0012ec0:	eb 05                	jmp    c0012ec7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012ec2:	b8 30 78 02 c0       	mov    eax,0xc0027830
c0012ec7:	5b                   	pop    ebx
c0012ec8:	5e                   	pop    esi
c0012ec9:	5f                   	pop    edi
c0012eca:	5d                   	pop    ebp
c0012ecb:	c3                   	ret    

c0012ecc <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012ecc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ed0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ed4:	80 f9 04             	cmp    cl,0x4
c0012ed7:	75 6b                	jne    c0012f44 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012ed9:	b8 20 76 02 c0       	mov    eax,0xc0027620
c0012ede:	80 fa 01             	cmp    dl,0x1
c0012ee1:	0f 86 92 02 00 00    	jbe    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ee7:	b8 30 76 02 c0       	mov    eax,0xc0027630
c0012eec:	80 fa 02             	cmp    dl,0x2
c0012eef:	0f 84 84 02 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ef5:	b8 40 76 02 c0       	mov    eax,0xc0027640
c0012efa:	80 fa 03             	cmp    dl,0x3
c0012efd:	0f 84 76 02 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f03:	b8 50 76 02 c0       	mov    eax,0xc0027650
c0012f08:	80 fa 04             	cmp    dl,0x4
c0012f0b:	0f 84 68 02 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f11:	b8 60 76 02 c0       	mov    eax,0xc0027660
c0012f16:	80 fa 05             	cmp    dl,0x5
c0012f19:	0f 84 5a 02 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f1f:	b8 40 76 02 c0       	mov    eax,0xc0027640
c0012f24:	80 fa 07             	cmp    dl,0x7
c0012f27:	0f 84 4c 02 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f2d:	83 ea 08             	sub    edx,0x8
c0012f30:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0012f35:	80 fa 01             	cmp    dl,0x1
c0012f38:	0f 87 3b 02 00 00    	ja     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f3e:	b8 70 76 02 c0       	mov    eax,0xc0027670
c0012f43:	c3                   	ret    
c0012f44:	80 f9 05             	cmp    cl,0x5
c0012f47:	75 45                	jne    c0012f8e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012f49:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012f4c:	b8 80 76 02 c0       	mov    eax,0xc0027680
c0012f51:	80 f9 02             	cmp    cl,0x2
c0012f54:	0f 86 1f 02 00 00    	jbe    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f5a:	80 fa 04             	cmp    dl,0x4
c0012f5d:	0f 84 f3 01 00 00    	je     c0013156 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0012f63:	80 fa 07             	cmp    dl,0x7
c0012f66:	0f 84 0d 02 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f6c:	b8 90 76 02 c0       	mov    eax,0xc0027690
c0012f71:	80 fa 08             	cmp    dl,0x8
c0012f74:	0f 84 ff 01 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f7a:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0012f7f:	80 fa 09             	cmp    dl,0x9
c0012f82:	0f 85 f1 01 00 00    	jne    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012f88:	b8 a0 76 02 c0       	mov    eax,0xc00276a0
c0012f8d:	c3                   	ret    
c0012f8e:	80 f9 06             	cmp    cl,0x6
c0012f91:	0f 85 85 01 00 00    	jne    c001311c <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0012f97:	b8 b0 76 02 c0       	mov    eax,0xc00276b0
c0012f9c:	80 fa 01             	cmp    dl,0x1
c0012f9f:	0f 84 d4 01 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fa5:	8d 42 fb             	lea    eax,[edx-0x5]
c0012fa8:	3c 01                	cmp    al,0x1
c0012faa:	0f 86 ac 01 00 00    	jbe    c001315c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012fb0:	80 fa 03             	cmp    dl,0x3
c0012fb3:	0f 84 a3 01 00 00    	je     c001315c <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0012fb9:	8d 4a f9             	lea    ecx,[edx-0x7]
c0012fbc:	b8 d0 76 02 c0       	mov    eax,0xc00276d0
c0012fc1:	80 f9 01             	cmp    cl,0x1
c0012fc4:	0f 86 af 01 00 00    	jbe    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fca:	80 fa 09             	cmp    dl,0x9
c0012fcd:	0f 84 8f 01 00 00    	je     c0013162 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012fd3:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012fd6:	80 f9 01             	cmp    cl,0x1
c0012fd9:	0f 86 9a 01 00 00    	jbe    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fdf:	b8 e0 76 02 c0       	mov    eax,0xc00276e0
c0012fe4:	80 fa 0d             	cmp    dl,0xd
c0012fe7:	0f 84 8c 01 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012fed:	b8 f0 76 02 c0       	mov    eax,0xc00276f0
c0012ff2:	80 fa 0e             	cmp    dl,0xe
c0012ff5:	0f 84 7e 01 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ffb:	b8 00 77 02 c0       	mov    eax,0xc0027700
c0013000:	80 fa 0f             	cmp    dl,0xf
c0013003:	0f 84 70 01 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013009:	b8 e0 76 02 c0       	mov    eax,0xc00276e0
c001300e:	80 fa 15             	cmp    dl,0x15
c0013011:	0f 84 62 01 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013017:	8d 4a ea             	lea    ecx,[edx-0x16]
c001301a:	b8 00 77 02 c0       	mov    eax,0xc0027700
c001301f:	80 f9 01             	cmp    cl,0x1
c0013022:	0f 86 51 01 00 00    	jbe    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013028:	80 fa 1a             	cmp    dl,0x1a
c001302b:	0f 84 37 01 00 00    	je     c0013168 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0013031:	80 fa 1c             	cmp    dl,0x1c
c0013034:	0f 84 34 01 00 00    	je     c001316e <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c001303a:	80 fa 1d             	cmp    dl,0x1d
c001303d:	0f 84 36 01 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013043:	b8 30 77 02 c0       	mov    eax,0xc0027730
c0013048:	80 fa 25             	cmp    dl,0x25
c001304b:	0f 84 28 01 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013051:	8d 4a da             	lea    ecx,[edx-0x26]
c0013054:	b8 20 77 02 c0       	mov    eax,0xc0027720
c0013059:	80 f9 01             	cmp    cl,0x1
c001305c:	0f 86 17 01 00 00    	jbe    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013062:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0013067:	80 fa 2a             	cmp    dl,0x2a
c001306a:	0f 84 09 01 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013070:	b8 30 77 02 c0       	mov    eax,0xc0027730
c0013075:	80 fa 2c             	cmp    dl,0x2c
c0013078:	0f 84 fb 00 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001307e:	b8 40 77 02 c0       	mov    eax,0xc0027740
c0013083:	80 fa 2d             	cmp    dl,0x2d
c0013086:	0f 84 ed 00 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001308c:	b8 10 77 02 c0       	mov    eax,0xc0027710
c0013091:	80 fa 2e             	cmp    dl,0x2e
c0013094:	0f 84 df 00 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001309a:	b8 30 77 02 c0       	mov    eax,0xc0027730
c001309f:	80 fa 2f             	cmp    dl,0x2f
c00130a2:	0f 84 d1 00 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130a8:	8d 4a cb             	lea    ecx,[edx-0x35]
c00130ab:	b8 20 77 02 c0       	mov    eax,0xc0027720
c00130b0:	80 f9 01             	cmp    cl,0x1
c00130b3:	0f 86 c0 00 00 00    	jbe    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130b9:	b8 50 77 02 c0       	mov    eax,0xc0027750
c00130be:	80 fa 37             	cmp    dl,0x37
c00130c1:	0f 84 b2 00 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130c7:	b8 60 77 02 c0       	mov    eax,0xc0027760
c00130cc:	80 fa 3a             	cmp    dl,0x3a
c00130cf:	0f 84 a4 00 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130d5:	b8 70 77 02 c0       	mov    eax,0xc0027770
c00130da:	80 fa 3c             	cmp    dl,0x3c
c00130dd:	0f 84 96 00 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130e3:	b8 80 77 02 c0       	mov    eax,0xc0027780
c00130e8:	80 fa 3d             	cmp    dl,0x3d
c00130eb:	0f 84 88 00 00 00    	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130f1:	b8 60 77 02 c0       	mov    eax,0xc0027760
c00130f6:	80 fa 3e             	cmp    dl,0x3e
c00130f9:	74 7e                	je     c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00130fb:	8d 42 bb             	lea    eax,[edx-0x45]
c00130fe:	3c 01                	cmp    al,0x1
c0013100:	76 72                	jbe    c0013174 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013102:	80 fa 3f             	cmp    dl,0x3f
c0013105:	74 6d                	je     c0013174 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0013107:	80 fa 4a             	cmp    dl,0x4a
c001310a:	74 0a                	je     c0013116 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c001310c:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0013111:	80 fa 4d             	cmp    dl,0x4d
c0013114:	75 63                	jne    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013116:	b8 50 77 02 c0       	mov    eax,0xc0027750
c001311b:	c3                   	ret    
c001311c:	b8 61 57 02 c0       	mov    eax,0xc0025761
c0013121:	80 f9 0b             	cmp    cl,0xb
c0013124:	75 0a                	jne    c0013130 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0013126:	fe ca                	dec    dl
c0013128:	75 4f                	jne    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001312a:	b8 90 77 02 c0       	mov    eax,0xc0027790
c001312f:	c3                   	ret    
c0013130:	80 f9 0f             	cmp    cl,0xf
c0013133:	75 44                	jne    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013135:	b8 a0 77 02 c0       	mov    eax,0xc00277a0
c001313a:	80 fa 02             	cmp    dl,0x2
c001313d:	76 3a                	jbe    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001313f:	8d 42 fd             	lea    eax,[edx-0x3]
c0013142:	3c 01                	cmp    al,0x1
c0013144:	76 0a                	jbe    c0013150 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0013146:	b8 61 57 02 c0       	mov    eax,0xc0025761
c001314b:	80 fa 06             	cmp    dl,0x6
c001314e:	75 29                	jne    c0013179 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0013150:	b8 b0 77 02 c0       	mov    eax,0xc00277b0
c0013155:	c3                   	ret    
c0013156:	b8 90 76 02 c0       	mov    eax,0xc0027690
c001315b:	c3                   	ret    
c001315c:	b8 c0 76 02 c0       	mov    eax,0xc00276c0
c0013161:	c3                   	ret    
c0013162:	b8 e0 76 02 c0       	mov    eax,0xc00276e0
c0013167:	c3                   	ret    
c0013168:	b8 10 77 02 c0       	mov    eax,0xc0027710
c001316d:	c3                   	ret    
c001316e:	b8 20 77 02 c0       	mov    eax,0xc0027720
c0013173:	c3                   	ret    
c0013174:	b8 70 77 02 c0       	mov    eax,0xc0027770
c0013179:	c3                   	ret    

c001317a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c001317a:	60                   	pusha  
c001317b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001317f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013183:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013187:	9c                   	pushf  
c0013188:	fa                   	cli    
c0013189:	0f 09                	wbinvd 
c001318b:	0f 30                	wrmsr  
c001318d:	9d                   	popf   
c001318e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013192:	89 02                	mov    DWORD PTR [edx],eax
c0013194:	61                   	popa   
c0013195:	c3                   	ret    

c0013196 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0013196:	60                   	pusha  
c0013197:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001319b:	9c                   	pushf  
c001319c:	fa                   	cli    
c001319d:	0f 09                	wbinvd 
c001319f:	31 c0                	xor    eax,eax
c00131a1:	31 d2                	xor    edx,edx
c00131a3:	0f 32                	rdmsr  
c00131a5:	9d                   	popf   
c00131a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131aa:	89 02                	mov    DWORD PTR [edx],eax
c00131ac:	61                   	popa   
c00131ad:	c3                   	ret    

c00131ae <CPU::AMD_K6_writeback(int, int, int)>:
c00131ae:	56                   	push   esi
c00131af:	53                   	push   ebx
c00131b0:	83 ec 10             	sub    esp,0x10
c00131b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00131b7:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00131bc:	75 5d                	jne    c001321b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131be:	83 f8 08             	cmp    eax,0x8
c00131c1:	75 09                	jne    c00131cc <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c00131c3:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00131c8:	7e 13                	jle    c00131dd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00131ca:	eb 30                	jmp    c00131fc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00131cc:	83 f8 06             	cmp    eax,0x6
c00131cf:	7c 4a                	jl     c001321b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131d1:	83 f8 07             	cmp    eax,0x7
c00131d4:	7e 07                	jle    c00131dd <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c00131d6:	83 f8 09             	cmp    eax,0x9
c00131d9:	74 21                	je     c00131fc <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c00131db:	eb 3e                	jmp    c001321b <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c00131dd:	89 e6                	mov    esi,esp
c00131df:	8b 1d 2c 7f 02 c0    	mov    ebx,DWORD PTR ds:0xc0027f2c
c00131e5:	56                   	push   esi
c00131e6:	c1 eb 15             	shr    ebx,0x15
c00131e9:	68 82 00 00 c0       	push   0xc0000082
c00131ee:	83 e3 7e             	and    ebx,0x7e
c00131f1:	e8 a0 ff ff ff       	call   c0013196 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00131f6:	56                   	push   esi
c00131f7:	6a 00                	push   0x0
c00131f9:	53                   	push   ebx
c00131fa:	eb 12                	jmp    c001320e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00131fc:	89 e3                	mov    ebx,esp
c00131fe:	53                   	push   ebx
c00131ff:	68 82 00 00 c0       	push   0xc0000082
c0013204:	e8 8d ff ff ff       	call   c0013196 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0013209:	53                   	push   ebx
c001320a:	6a 00                	push   0x0
c001320c:	6a 00                	push   0x0
c001320e:	68 82 00 00 c0       	push   0xc0000082
c0013213:	e8 62 ff ff ff       	call   c001317a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0013218:	83 c4 18             	add    esp,0x18
c001321b:	83 c4 10             	add    esp,0x10
c001321e:	5b                   	pop    ebx
c001321f:	5e                   	pop    esi
c0013220:	c3                   	ret    
c0013221:	90                   	nop

c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013222:	55                   	push   ebp
c0013223:	57                   	push   edi
c0013224:	56                   	push   esi
c0013225:	53                   	push   ebx
c0013226:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001322a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001322e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013232:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013236:	39 05 c0 78 02 c0    	cmp    DWORD PTR ds:0xc00278c0,eax
c001323c:	75 23                	jne    c0013261 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001323e:	a1 cc 89 02 c0       	mov    eax,ds:0xc00289cc
c0013243:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013247:	89 06                	mov    DWORD PTR [esi],eax
c0013249:	a1 c8 89 02 c0       	mov    eax,ds:0xc00289c8
c001324e:	89 07                	mov    DWORD PTR [edi],eax
c0013250:	a1 c4 89 02 c0       	mov    eax,ds:0xc00289c4
c0013255:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013258:	a1 c0 89 02 c0       	mov    eax,ds:0xc00289c0
c001325d:	89 02                	mov    DWORD PTR [edx],eax
c001325f:	eb 3f                	jmp    c00132a0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013261:	31 c9                	xor    ecx,ecx
c0013263:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013267:	0f a2                	cpuid  
c0013269:	89 06                	mov    DWORD PTR [esi],eax
c001326b:	89 1f                	mov    DWORD PTR [edi],ebx
c001326d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013271:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013274:	89 10                	mov    DWORD PTR [eax],edx
c0013276:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001327a:	a3 c0 78 02 c0       	mov    ds:0xc00278c0,eax
c001327f:	8b 06                	mov    eax,DWORD PTR [esi]
c0013281:	a3 cc 89 02 c0       	mov    ds:0xc00289cc,eax
c0013286:	8b 07                	mov    eax,DWORD PTR [edi]
c0013288:	a3 c8 89 02 c0       	mov    ds:0xc00289c8,eax
c001328d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013290:	a3 c4 89 02 c0       	mov    ds:0xc00289c4,eax
c0013295:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013299:	8b 00                	mov    eax,DWORD PTR [eax]
c001329b:	a3 c0 89 02 c0       	mov    ds:0xc00289c0,eax
c00132a0:	5b                   	pop    ebx
c00132a1:	5e                   	pop    esi
c00132a2:	5f                   	pop    edi
c00132a3:	5d                   	pop    ebp
c00132a4:	c3                   	ret    
c00132a5:	90                   	nop

c00132a6 <CPU::cpuidCheckEDX(unsigned int)>:
c00132a6:	83 ec 10             	sub    esp,0x10
c00132a9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132ad:	50                   	push   eax
c00132ae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132b2:	50                   	push   eax
c00132b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132b7:	50                   	push   eax
c00132b8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132bc:	50                   	push   eax
c00132bd:	6a 01                	push   0x1
c00132bf:	e8 5e ff ff ff       	call   c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00132c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00132c8:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00132cc:	0f 95 c0             	setne  al
c00132cf:	83 c4 24             	add    esp,0x24
c00132d2:	c3                   	ret    
c00132d3:	90                   	nop

c00132d4 <CPU::cpuidCheckECX(unsigned int)>:
c00132d4:	83 ec 10             	sub    esp,0x10
c00132d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132db:	50                   	push   eax
c00132dc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132e0:	50                   	push   eax
c00132e1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132e5:	50                   	push   eax
c00132e6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00132ea:	50                   	push   eax
c00132eb:	6a 01                	push   0x1
c00132ed:	e8 30 ff ff ff       	call   c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00132f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00132f6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00132fa:	0f 95 c0             	setne  al
c00132fd:	83 c4 24             	add    esp,0x24
c0013300:	c3                   	ret    
c0013301:	90                   	nop

c0013302 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0013302:	83 ec 10             	sub    esp,0x10
c0013305:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013309:	50                   	push   eax
c001330a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001330e:	50                   	push   eax
c001330f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013313:	50                   	push   eax
c0013314:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013318:	50                   	push   eax
c0013319:	6a 07                	push   0x7
c001331b:	e8 02 ff ff ff       	call   c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013320:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013324:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013328:	0f 95 c0             	setne  al
c001332b:	83 c4 24             	add    esp,0x24
c001332e:	c3                   	ret    
c001332f:	90                   	nop

c0013330 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0013330:	83 ec 10             	sub    esp,0x10
c0013333:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013337:	50                   	push   eax
c0013338:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001333c:	50                   	push   eax
c001333d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013341:	50                   	push   eax
c0013342:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013346:	50                   	push   eax
c0013347:	6a 07                	push   0x7
c0013349:	e8 d4 fe ff ff       	call   c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001334e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013352:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013356:	0f 95 c0             	setne  al
c0013359:	83 c4 24             	add    esp,0x24
c001335c:	c3                   	ret    
c001335d:	90                   	nop

c001335e <CPU::CPU()>:
c001335e:	83 ec 0c             	sub    esp,0xc
c0013361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013365:	83 ec 08             	sub    esp,0x8
c0013368:	68 61 57 02 c0       	push   0xc0025761
c001336d:	50                   	push   eax
c001336e:	e8 ff b0 ff ff       	call   c000e472 <Device::Device(char const*)>
c0013373:	83 c4 10             	add    esp,0x10
c0013376:	ba c4 59 02 c0       	mov    edx,0xc00259c4
c001337b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001337f:	89 10                	mov    DWORD PTR [eax],edx
c0013381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013385:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001338f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013393:	05 78 01 00 00       	add    eax,0x178
c0013398:	83 ec 0c             	sub    esp,0xc
c001339b:	50                   	push   eax
c001339c:	e8 03 5f ff ff       	call   c00092a4 <GDT::GDT()>
c00133a1:	83 c4 10             	add    esp,0x10
c00133a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133a8:	05 7c 09 00 00       	add    eax,0x97c
c00133ad:	83 ec 0c             	sub    esp,0xc
c00133b0:	50                   	push   eax
c00133b1:	e8 46 61 ff ff       	call   c00094fc <IDT::IDT()>
c00133b6:	83 c4 10             	add    esp,0x10
c00133b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133bd:	05 7c 11 00 00       	add    eax,0x117c
c00133c2:	83 ec 0c             	sub    esp,0xc
c00133c5:	50                   	push   eax
c00133c6:	e8 4d 7f ff ff       	call   c000b318 <TSS::TSS()>
c00133cb:	83 c4 10             	add    esp,0x10
c00133ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c00133d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133dd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00133e7:	90                   	nop
c00133e8:	83 c4 0c             	add    esp,0xc
c00133eb:	c3                   	ret    

c00133ec <CPU::displayFeatures()>:
c00133ec:	c3                   	ret    
c00133ed:	90                   	nop

c00133ee <CPU::detectFeatures()>:
c00133ee:	55                   	push   ebp
c00133ef:	57                   	push   edi
c00133f0:	56                   	push   esi
c00133f1:	53                   	push   ebx
c00133f2:	83 ec 50             	sub    esp,0x50
c00133f5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00133f9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0013403:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001340a:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0013410:	6a 0d                	push   0xd
c0013412:	6a 00                	push   0x0
c0013414:	55                   	push   ebp
c0013415:	e8 6a d2 fe ff       	call   c0000684 <memset>
c001341a:	83 c4 10             	add    esp,0x10
c001341d:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0013422:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0013429:	0f 84 22 09 00 00    	je     c0013d51 <CPU::detectFeatures()+0x963>
c001342f:	83 ec 0c             	sub    esp,0xc
c0013432:	89 ef                	mov    edi,ebp
c0013434:	6a 10                	push   0x10
c0013436:	e8 6b fe ff ff       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c001343b:	83 e0 01             	and    eax,0x1
c001343e:	8d 14 00             	lea    edx,[eax+eax*1]
c0013441:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013447:	83 e0 fd             	and    eax,0xfffffffd
c001344a:	09 d0                	or     eax,edx
c001344c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013452:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0013459:	e8 48 fe ff ff       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c001345e:	83 e0 01             	and    eax,0x1
c0013461:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013468:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001346e:	83 e0 fb             	and    eax,0xfffffffb
c0013471:	09 d0                	or     eax,edx
c0013473:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013479:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0013480:	e8 21 fe ff ff       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c0013485:	83 e0 01             	and    eax,0x1
c0013488:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001348f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013495:	83 e0 f7             	and    eax,0xfffffff7
c0013498:	09 d0                	or     eax,edx
c001349a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134a0:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00134a7:	e8 fa fd ff ff       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c00134ac:	83 e0 01             	and    eax,0x1
c00134af:	c1 e0 04             	shl    eax,0x4
c00134b2:	88 c2                	mov    dl,al
c00134b4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134ba:	83 e0 ef             	and    eax,0xffffffef
c00134bd:	09 d0                	or     eax,edx
c00134bf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134c5:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00134cc:	e8 d5 fd ff ff       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c00134d1:	83 e0 01             	and    eax,0x1
c00134d4:	c1 e0 05             	shl    eax,0x5
c00134d7:	88 c2                	mov    dl,al
c00134d9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00134df:	83 e0 df             	and    eax,0xffffffdf
c00134e2:	09 d0                	or     eax,edx
c00134e4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00134ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00134f1:	e8 b0 fd ff ff       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c00134f6:	83 e0 01             	and    eax,0x1
c00134f9:	8d 14 00             	lea    edx,[eax+eax*1]
c00134fc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013502:	83 e0 fd             	and    eax,0xfffffffd
c0013505:	09 d0                	or     eax,edx
c0013507:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001350d:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0013514:	e8 8d fd ff ff       	call   c00132a6 <CPU::cpuidCheckEDX(unsigned int)>
c0013519:	83 e0 01             	and    eax,0x1
c001351c:	c1 e0 06             	shl    eax,0x6
c001351f:	88 c2                	mov    dl,al
c0013521:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013527:	83 e0 bf             	and    eax,0xffffffbf
c001352a:	09 d0                	or     eax,edx
c001352c:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013532:	58                   	pop    eax
c0013533:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013537:	50                   	push   eax
c0013538:	8d 44 24 28          	lea    eax,[esp+0x28]
c001353c:	50                   	push   eax
c001353d:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013541:	56                   	push   esi
c0013542:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013546:	50                   	push   eax
c0013547:	6a 00                	push   0x0
c0013549:	e8 d4 fc ff ff       	call   c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001354e:	b8 04 00 00 00       	mov    eax,0x4
c0013553:	89 c1                	mov    ecx,eax
c0013555:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013557:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001355d:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0013561:	89 c1                	mov    ecx,eax
c0013563:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013565:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c001356b:	8d 74 24 38          	lea    esi,[esp+0x38]
c001356f:	89 c1                	mov    ecx,eax
c0013571:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013573:	83 c4 18             	add    esp,0x18
c0013576:	68 0c 56 02 c0       	push   0xc002560c
c001357b:	55                   	push   ebp
c001357c:	e8 4b d2 fe ff       	call   c00007cc <strcmp>
c0013581:	83 c4 10             	add    esp,0x10
c0013584:	85 c0                	test   eax,eax
c0013586:	75 0f                	jne    c0013597 <CPU::detectFeatures()+0x1a9>
c0013588:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0013592:	e9 22 02 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c0013597:	50                   	push   eax
c0013598:	50                   	push   eax
c0013599:	68 19 56 02 c0       	push   0xc0025619
c001359e:	55                   	push   ebp
c001359f:	e8 28 d2 fe ff       	call   c00007cc <strcmp>
c00135a4:	83 c4 10             	add    esp,0x10
c00135a7:	85 c0                	test   eax,eax
c00135a9:	74 dd                	je     c0013588 <CPU::detectFeatures()+0x19a>
c00135ab:	50                   	push   eax
c00135ac:	50                   	push   eax
c00135ad:	68 26 56 02 c0       	push   0xc0025626
c00135b2:	55                   	push   ebp
c00135b3:	e8 14 d2 fe ff       	call   c00007cc <strcmp>
c00135b8:	83 c4 10             	add    esp,0x10
c00135bb:	85 c0                	test   eax,eax
c00135bd:	74 2a                	je     c00135e9 <CPU::detectFeatures()+0x1fb>
c00135bf:	50                   	push   eax
c00135c0:	50                   	push   eax
c00135c1:	68 33 56 02 c0       	push   0xc0025633
c00135c6:	55                   	push   ebp
c00135c7:	e8 00 d2 fe ff       	call   c00007cc <strcmp>
c00135cc:	83 c4 10             	add    esp,0x10
c00135cf:	85 c0                	test   eax,eax
c00135d1:	74 16                	je     c00135e9 <CPU::detectFeatures()+0x1fb>
c00135d3:	50                   	push   eax
c00135d4:	50                   	push   eax
c00135d5:	68 40 56 02 c0       	push   0xc0025640
c00135da:	55                   	push   ebp
c00135db:	e8 ec d1 fe ff       	call   c00007cc <strcmp>
c00135e0:	83 c4 10             	add    esp,0x10
c00135e3:	85 c0                	test   eax,eax
c00135e5:	74 48                	je     c001362f <CPU::detectFeatures()+0x241>
c00135e7:	eb 0f                	jmp    c00135f8 <CPU::detectFeatures()+0x20a>
c00135e9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00135f3:	e9 c1 01 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c00135f8:	50                   	push   eax
c00135f9:	50                   	push   eax
c00135fa:	68 4d 56 02 c0       	push   0xc002564d
c00135ff:	55                   	push   ebp
c0013600:	e8 c7 d1 fe ff       	call   c00007cc <strcmp>
c0013605:	83 c4 10             	add    esp,0x10
c0013608:	85 c0                	test   eax,eax
c001360a:	74 23                	je     c001362f <CPU::detectFeatures()+0x241>
c001360c:	57                   	push   edi
c001360d:	57                   	push   edi
c001360e:	68 5a 56 02 c0       	push   0xc002565a
c0013613:	55                   	push   ebp
c0013614:	e8 b3 d1 fe ff       	call   c00007cc <strcmp>
c0013619:	83 c4 10             	add    esp,0x10
c001361c:	85 c0                	test   eax,eax
c001361e:	75 1e                	jne    c001363e <CPU::detectFeatures()+0x250>
c0013620:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001362a:	e9 8a 01 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c001362f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013639:	e9 7b 01 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c001363e:	56                   	push   esi
c001363f:	56                   	push   esi
c0013640:	68 67 56 02 c0       	push   0xc0025667
c0013645:	55                   	push   ebp
c0013646:	e8 81 d1 fe ff       	call   c00007cc <strcmp>
c001364b:	83 c4 10             	add    esp,0x10
c001364e:	85 c0                	test   eax,eax
c0013650:	75 0f                	jne    c0013661 <CPU::detectFeatures()+0x273>
c0013652:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001365c:	e9 58 01 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c0013661:	51                   	push   ecx
c0013662:	51                   	push   ecx
c0013663:	68 26 56 02 c0       	push   0xc0025626
c0013668:	55                   	push   ebp
c0013669:	e8 5e d1 fe ff       	call   c00007cc <strcmp>
c001366e:	83 c4 10             	add    esp,0x10
c0013671:	85 c0                	test   eax,eax
c0013673:	75 0f                	jne    c0013684 <CPU::detectFeatures()+0x296>
c0013675:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001367f:	e9 35 01 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c0013684:	52                   	push   edx
c0013685:	52                   	push   edx
c0013686:	68 74 56 02 c0       	push   0xc0025674
c001368b:	55                   	push   ebp
c001368c:	e8 3b d1 fe ff       	call   c00007cc <strcmp>
c0013691:	83 c4 10             	add    esp,0x10
c0013694:	85 c0                	test   eax,eax
c0013696:	75 0f                	jne    c00136a7 <CPU::detectFeatures()+0x2b9>
c0013698:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00136a2:	e9 12 01 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c00136a7:	50                   	push   eax
c00136a8:	50                   	push   eax
c00136a9:	68 81 56 02 c0       	push   0xc0025681
c00136ae:	55                   	push   ebp
c00136af:	e8 18 d1 fe ff       	call   c00007cc <strcmp>
c00136b4:	83 c4 10             	add    esp,0x10
c00136b7:	85 c0                	test   eax,eax
c00136b9:	75 0f                	jne    c00136ca <CPU::detectFeatures()+0x2dc>
c00136bb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00136c5:	e9 ef 00 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c00136ca:	50                   	push   eax
c00136cb:	50                   	push   eax
c00136cc:	68 8e 56 02 c0       	push   0xc002568e
c00136d1:	55                   	push   ebp
c00136d2:	e8 f5 d0 fe ff       	call   c00007cc <strcmp>
c00136d7:	83 c4 10             	add    esp,0x10
c00136da:	85 c0                	test   eax,eax
c00136dc:	75 0f                	jne    c00136ed <CPU::detectFeatures()+0x2ff>
c00136de:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00136e8:	e9 cc 00 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c00136ed:	50                   	push   eax
c00136ee:	50                   	push   eax
c00136ef:	68 9b 56 02 c0       	push   0xc002569b
c00136f4:	55                   	push   ebp
c00136f5:	e8 d2 d0 fe ff       	call   c00007cc <strcmp>
c00136fa:	83 c4 10             	add    esp,0x10
c00136fd:	85 c0                	test   eax,eax
c00136ff:	75 0f                	jne    c0013710 <CPU::detectFeatures()+0x322>
c0013701:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001370b:	e9 a9 00 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c0013710:	50                   	push   eax
c0013711:	50                   	push   eax
c0013712:	68 a8 56 02 c0       	push   0xc00256a8
c0013717:	55                   	push   ebp
c0013718:	e8 af d0 fe ff       	call   c00007cc <strcmp>
c001371d:	83 c4 10             	add    esp,0x10
c0013720:	85 c0                	test   eax,eax
c0013722:	75 0f                	jne    c0013733 <CPU::detectFeatures()+0x345>
c0013724:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001372e:	e9 86 00 00 00       	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c0013733:	50                   	push   eax
c0013734:	50                   	push   eax
c0013735:	68 b5 56 02 c0       	push   0xc00256b5
c001373a:	55                   	push   ebp
c001373b:	e8 8c d0 fe ff       	call   c00007cc <strcmp>
c0013740:	83 c4 10             	add    esp,0x10
c0013743:	85 c0                	test   eax,eax
c0013745:	75 0c                	jne    c0013753 <CPU::detectFeatures()+0x365>
c0013747:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0013751:	eb 66                	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c0013753:	50                   	push   eax
c0013754:	50                   	push   eax
c0013755:	68 c2 56 02 c0       	push   0xc00256c2
c001375a:	55                   	push   ebp
c001375b:	e8 6c d0 fe ff       	call   c00007cc <strcmp>
c0013760:	83 c4 10             	add    esp,0x10
c0013763:	85 c0                	test   eax,eax
c0013765:	75 0c                	jne    c0013773 <CPU::detectFeatures()+0x385>
c0013767:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0013771:	eb 46                	jmp    c00137b9 <CPU::detectFeatures()+0x3cb>
c0013773:	57                   	push   edi
c0013774:	57                   	push   edi
c0013775:	68 cf 56 02 c0       	push   0xc00256cf
c001377a:	55                   	push   ebp
c001377b:	e8 4c d0 fe ff       	call   c00007cc <strcmp>
c0013780:	83 c4 10             	add    esp,0x10
c0013783:	85 c0                	test   eax,eax
c0013785:	74 e0                	je     c0013767 <CPU::detectFeatures()+0x379>
c0013787:	56                   	push   esi
c0013788:	56                   	push   esi
c0013789:	68 dc 56 02 c0       	push   0xc00256dc
c001378e:	55                   	push   ebp
c001378f:	e8 38 d0 fe ff       	call   c00007cc <strcmp>
c0013794:	83 c4 10             	add    esp,0x10
c0013797:	85 c0                	test   eax,eax
c0013799:	74 cc                	je     c0013767 <CPU::detectFeatures()+0x379>
c001379b:	51                   	push   ecx
c001379c:	51                   	push   ecx
c001379d:	68 e9 56 02 c0       	push   0xc00256e9
c00137a2:	55                   	push   ebp
c00137a3:	e8 24 d0 fe ff       	call   c00007cc <strcmp>
c00137a8:	83 c4 10             	add    esp,0x10
c00137ab:	85 c0                	test   eax,eax
c00137ad:	74 b8                	je     c0013767 <CPU::detectFeatures()+0x379>
c00137af:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00137b9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00137be:	0f 86 be 00 00 00    	jbe    c0013882 <CPU::detectFeatures()+0x494>
c00137c4:	83 ec 0c             	sub    esp,0xc
c00137c7:	68 80 00 00 00       	push   0x80
c00137cc:	e8 31 fb ff ff       	call   c0013302 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00137d1:	83 e0 01             	and    eax,0x1
c00137d4:	c1 e0 06             	shl    eax,0x6
c00137d7:	88 c2                	mov    dl,al
c00137d9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00137df:	83 e0 bf             	and    eax,0xffffffbf
c00137e2:	09 d0                	or     eax,edx
c00137e4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00137ea:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00137f1:	e8 0c fb ff ff       	call   c0013302 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00137f6:	83 e0 01             	and    eax,0x1
c00137f9:	c1 e0 04             	shl    eax,0x4
c00137fc:	88 c2                	mov    dl,al
c00137fe:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013804:	83 e0 ef             	and    eax,0xffffffef
c0013807:	09 d0                	or     eax,edx
c0013809:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001380f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013816:	e8 e7 fa ff ff       	call   c0013302 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001381b:	c1 e0 07             	shl    eax,0x7
c001381e:	88 c2                	mov    dl,al
c0013820:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013826:	83 e0 7f             	and    eax,0x7f
c0013829:	09 d0                	or     eax,edx
c001382b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013831:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013838:	e8 f3 fa ff ff       	call   c0013330 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001383d:	83 e0 01             	and    eax,0x1
c0013840:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013847:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001384d:	83 e0 f7             	and    eax,0xfffffff7
c0013850:	09 d0                	or     eax,edx
c0013852:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013858:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001385f:	e8 cc fa ff ff       	call   c0013330 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013864:	83 c4 10             	add    esp,0x10
c0013867:	83 e0 01             	and    eax,0x1
c001386a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0013871:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013877:	83 e0 fb             	and    eax,0xfffffffb
c001387a:	09 d0                	or     eax,edx
c001387c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013882:	83 ec 0c             	sub    esp,0xc
c0013885:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013889:	50                   	push   eax
c001388a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001388e:	50                   	push   eax
c001388f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0013893:	56                   	push   esi
c0013894:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013898:	50                   	push   eax
c0013899:	6a 01                	push   0x1
c001389b:	e8 82 f9 ff ff       	call   c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00138a0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00138a4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00138aa:	88 ca                	mov    dl,cl
c00138ac:	83 e0 f0             	and    eax,0xfffffff0
c00138af:	83 e2 0f             	and    edx,0xf
c00138b2:	09 d0                	or     eax,edx
c00138b4:	88 ca                	mov    dl,cl
c00138b6:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00138bc:	c0 ea 04             	shr    dl,0x4
c00138bf:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00138c3:	0f b6 c2             	movzx  eax,dl
c00138c6:	83 c4 20             	add    esp,0x20
c00138c9:	c1 e0 06             	shl    eax,0x6
c00138cc:	89 c7                	mov    edi,eax
c00138ce:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00138d4:	66 25 3f c0          	and    ax,0xc03f
c00138d8:	09 f8                	or     eax,edi
c00138da:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00138e1:	89 c8                	mov    eax,ecx
c00138e3:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c00138ea:	c1 e8 08             	shr    eax,0x8
c00138ed:	83 e5 3f             	and    ebp,0x3f
c00138f0:	83 e0 0f             	and    eax,0xf
c00138f3:	89 c7                	mov    edi,eax
c00138f5:	c1 e7 06             	shl    edi,0x6
c00138f8:	09 ef                	or     edi,ebp
c00138fa:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c0013901:	89 fa                	mov    edx,edi
c0013903:	83 e5 c0             	and    ebp,0xffffffc0
c0013906:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001390c:	88 c2                	mov    dl,al
c001390e:	c0 ea 02             	shr    dl,0x2
c0013911:	89 d7                	mov    edi,edx
c0013913:	09 ef                	or     edi,ebp
c0013915:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c001391b:	89 fa                	mov    edx,edi
c001391d:	83 e5 cf             	and    ebp,0xffffffcf
c0013920:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013926:	89 cf                	mov    edi,ecx
c0013928:	c1 ef 0c             	shr    edi,0xc
c001392b:	83 e7 03             	and    edi,0x3
c001392e:	c1 e7 04             	shl    edi,0x4
c0013931:	09 ef                	or     edi,ebp
c0013933:	3c 06                	cmp    al,0x6
c0013935:	89 fa                	mov    edx,edi
c0013937:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001393d:	74 04                	je     c0013943 <CPU::detectFeatures()+0x555>
c001393f:	3c 0f                	cmp    al,0xf
c0013941:	75 5c                	jne    c001399f <CPU::detectFeatures()+0x5b1>
c0013943:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013947:	89 cf                	mov    edi,ecx
c0013949:	c1 ef 10             	shr    edi,0x10
c001394c:	c1 e7 04             	shl    edi,0x4
c001394f:	09 fa                	or     edx,edi
c0013951:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013957:	0f b6 d2             	movzx  edx,dl
c001395a:	66 81 e7 3f c0       	and    di,0xc03f
c001395f:	c1 e2 06             	shl    edx,0x6
c0013962:	09 fa                	or     edx,edi
c0013964:	3c 0f                	cmp    al,0xf
c0013966:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001396d:	75 30                	jne    c001399f <CPU::detectFeatures()+0x5b1>
c001396f:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0013975:	c1 e9 14             	shr    ecx,0x14
c0013978:	83 e0 3f             	and    eax,0x3f
c001397b:	83 c1 0f             	add    ecx,0xf
c001397e:	88 ca                	mov    dl,cl
c0013980:	c0 e9 02             	shr    cl,0x2
c0013983:	c1 e2 06             	shl    edx,0x6
c0013986:	09 d0                	or     eax,edx
c0013988:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c001398e:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0013994:	83 e0 c0             	and    eax,0xffffffc0
c0013997:	09 c1                	or     ecx,eax
c0013999:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001399f:	83 ec 0c             	sub    esp,0xc
c00139a2:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00139a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00139ad:	50                   	push   eax
c00139ae:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00139b2:	55                   	push   ebp
c00139b3:	56                   	push   esi
c00139b4:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00139b8:	57                   	push   edi
c00139b9:	68 00 00 00 80       	push   0x80000000
c00139be:	e8 5f f8 ff ff       	call   c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00139c3:	83 c4 20             	add    esp,0x20
c00139c6:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00139ce:	76 22                	jbe    c00139f2 <CPU::detectFeatures()+0x604>
c00139d0:	83 ec 0c             	sub    esp,0xc
c00139d3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00139d7:	50                   	push   eax
c00139d8:	55                   	push   ebp
c00139d9:	56                   	push   esi
c00139da:	57                   	push   edi
c00139db:	68 01 00 00 80       	push   0x80000001
c00139e0:	e8 3d f8 ff ff       	call   c0013222 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00139e5:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00139ef:	83 c4 20             	add    esp,0x20
c00139f2:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00139f8:	83 f8 01             	cmp    eax,0x1
c00139fb:	75 6f                	jne    c0013a6c <CPU::detectFeatures()+0x67e>
c00139fd:	51                   	push   ecx
c00139fe:	51                   	push   ecx
c00139ff:	68 f5 56 02 c0       	push   0xc00256f5
c0013a04:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013a08:	56                   	push   esi
c0013a09:	e8 32 cd fe ff       	call   c0000740 <strcpy>
c0013a0e:	5f                   	pop    edi
c0013a0f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a15:	5d                   	pop    ebp
c0013a16:	66 c1 e8 06          	shr    ax,0x6
c0013a1a:	0f b6 c0             	movzx  eax,al
c0013a1d:	50                   	push   eax
c0013a1e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a24:	c1 e8 0e             	shr    eax,0xe
c0013a27:	0f b6 c0             	movzx  eax,al
c0013a2a:	50                   	push   eax
c0013a2b:	e8 9c f4 ff ff       	call   c0012ecc <CPU::lookupIntelName(unsigned char, unsigned char)>
c0013a30:	5a                   	pop    edx
c0013a31:	59                   	pop    ecx
c0013a32:	50                   	push   eax
c0013a33:	56                   	push   esi
c0013a34:	e8 47 ce fe ff       	call   c0000880 <strcat>
c0013a39:	5f                   	pop    edi
c0013a3a:	5d                   	pop    ebp
c0013a3b:	56                   	push   esi
c0013a3c:	53                   	push   ebx
c0013a3d:	e8 22 aa ff ff       	call   c000e464 <Device::setName(char const*)>
c0013a42:	58                   	pop    eax
c0013a43:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013a49:	5a                   	pop    edx
c0013a4a:	68 fc 56 02 c0       	push   0xc00256fc
c0013a4f:	50                   	push   eax
c0013a50:	e8 77 cd fe ff       	call   c00007cc <strcmp>
c0013a55:	83 c4 10             	add    esp,0x10
c0013a58:	85 c0                	test   eax,eax
c0013a5a:	0f 85 71 03 00 00    	jne    c0013dd1 <CPU::detectFeatures()+0x9e3>
c0013a60:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0013a67:	e9 65 03 00 00       	jmp    c0013dd1 <CPU::detectFeatures()+0x9e3>
c0013a6c:	83 f8 02             	cmp    eax,0x2
c0013a6f:	0f 85 b5 00 00 00    	jne    c0013b2a <CPU::detectFeatures()+0x73c>
c0013a75:	57                   	push   edi
c0013a76:	57                   	push   edi
c0013a77:	68 0e 57 02 c0       	push   0xc002570e
c0013a7c:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013a80:	56                   	push   esi
c0013a81:	e8 ba cc fe ff       	call   c0000740 <strcpy>
c0013a86:	5d                   	pop    ebp
c0013a87:	58                   	pop    eax
c0013a88:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a8e:	66 c1 e8 06          	shr    ax,0x6
c0013a92:	0f b6 c0             	movzx  eax,al
c0013a95:	50                   	push   eax
c0013a96:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013a9c:	c1 e8 0e             	shr    eax,0xe
c0013a9f:	0f b6 c0             	movzx  eax,al
c0013aa2:	50                   	push   eax
c0013aa3:	e8 90 f2 ff ff       	call   c0012d38 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0013aa8:	5a                   	pop    edx
c0013aa9:	59                   	pop    ecx
c0013aaa:	50                   	push   eax
c0013aab:	56                   	push   esi
c0013aac:	e8 cf cd fe ff       	call   c0000880 <strcat>
c0013ab1:	5f                   	pop    edi
c0013ab2:	5d                   	pop    ebp
c0013ab3:	56                   	push   esi
c0013ab4:	53                   	push   ebx
c0013ab5:	e8 aa a9 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013aba:	58                   	pop    eax
c0013abb:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013ac1:	5a                   	pop    edx
c0013ac2:	68 13 57 02 c0       	push   0xc0025713
c0013ac7:	50                   	push   eax
c0013ac8:	e8 ff cc fe ff       	call   c00007cc <strcmp>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	85 c0                	test   eax,eax
c0013ad2:	75 20                	jne    c0013af4 <CPU::detectFeatures()+0x706>
c0013ad4:	8b 15 08 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f08
c0013ada:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0013ae0:	a8 01                	test   al,0x1
c0013ae2:	74 10                	je     c0013af4 <CPU::detectFeatures()+0x706>
c0013ae4:	83 e0 fe             	and    eax,0xfffffffe
c0013ae7:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013aed:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013af4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013afa:	c1 e8 0e             	shr    eax,0xe
c0013afd:	3c 05                	cmp    al,0x5
c0013aff:	0f 85 cc 02 00 00    	jne    c0013dd1 <CPU::detectFeatures()+0x9e3>
c0013b05:	56                   	push   esi
c0013b06:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013b0c:	83 e0 0f             	and    eax,0xf
c0013b0f:	50                   	push   eax
c0013b10:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013b16:	66 c1 e8 06          	shr    ax,0x6
c0013b1a:	0f b6 c0             	movzx  eax,al
c0013b1d:	50                   	push   eax
c0013b1e:	6a 05                	push   0x5
c0013b20:	e8 89 f6 ff ff       	call   c00131ae <CPU::AMD_K6_writeback(int, int, int)>
c0013b25:	e9 1f 02 00 00       	jmp    c0013d49 <CPU::detectFeatures()+0x95b>
c0013b2a:	8d 50 fd             	lea    edx,[eax-0x3]
c0013b2d:	83 fa 01             	cmp    edx,0x1
c0013b30:	76 09                	jbe    c0013b3b <CPU::detectFeatures()+0x74d>
c0013b32:	83 f8 06             	cmp    eax,0x6
c0013b35:	0f 85 91 01 00 00    	jne    c0013ccc <CPU::detectFeatures()+0x8de>
c0013b3b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013b41:	c1 ea 0e             	shr    edx,0xe
c0013b44:	80 fa 05             	cmp    dl,0x5
c0013b47:	75 7b                	jne    c0013bc4 <CPU::detectFeatures()+0x7d6>
c0013b49:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013b4f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013b54:	66 81 fa 00 01       	cmp    dx,0x100
c0013b59:	75 0c                	jne    c0013b67 <CPU::detectFeatures()+0x779>
c0013b5b:	51                   	push   ecx
c0013b5c:	51                   	push   ecx
c0013b5d:	68 1a 57 02 c0       	push   0xc002571a
c0013b62:	e9 dc 01 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013b67:	66 81 fa 00 02       	cmp    dx,0x200
c0013b6c:	75 0c                	jne    c0013b7a <CPU::detectFeatures()+0x78c>
c0013b6e:	52                   	push   edx
c0013b6f:	52                   	push   edx
c0013b70:	68 2d 57 02 c0       	push   0xc002572d
c0013b75:	e9 c9 01 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013b7a:	66 81 fa 40 02       	cmp    dx,0x240
c0013b7f:	75 0c                	jne    c0013b8d <CPU::detectFeatures()+0x79f>
c0013b81:	50                   	push   eax
c0013b82:	50                   	push   eax
c0013b83:	68 3f 57 02 c0       	push   0xc002573f
c0013b88:	e9 b6 01 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013b8d:	83 f8 06             	cmp    eax,0x6
c0013b90:	75 0c                	jne    c0013b9e <CPU::detectFeatures()+0x7b0>
c0013b92:	50                   	push   eax
c0013b93:	50                   	push   eax
c0013b94:	68 51 57 02 c0       	push   0xc0025751
c0013b99:	e9 a5 01 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013b9e:	83 f8 04             	cmp    eax,0x4
c0013ba1:	75 0c                	jne    c0013baf <CPU::detectFeatures()+0x7c1>
c0013ba3:	50                   	push   eax
c0013ba4:	50                   	push   eax
c0013ba5:	68 5d 57 02 c0       	push   0xc002575d
c0013baa:	e9 94 01 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013baf:	83 f8 03             	cmp    eax,0x3
c0013bb2:	0f 85 19 02 00 00    	jne    c0013dd1 <CPU::detectFeatures()+0x9e3>
c0013bb8:	50                   	push   eax
c0013bb9:	50                   	push   eax
c0013bba:	68 65 57 02 c0       	push   0xc0025765
c0013bbf:	e9 7f 01 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013bc4:	80 fa 06             	cmp    dl,0x6
c0013bc7:	0f 85 db 00 00 00    	jne    c0013ca8 <CPU::detectFeatures()+0x8ba>
c0013bcd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0013bd3:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013bd8:	66 81 fa 80 01       	cmp    dx,0x180
c0013bdd:	75 0c                	jne    c0013beb <CPU::detectFeatures()+0x7fd>
c0013bdf:	50                   	push   eax
c0013be0:	50                   	push   eax
c0013be1:	68 70 57 02 c0       	push   0xc0025770
c0013be6:	e9 58 01 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013beb:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0013bf1:	66 f7 c1 80 ff       	test   cx,0xff80
c0013bf6:	75 0c                	jne    c0013c04 <CPU::detectFeatures()+0x816>
c0013bf8:	50                   	push   eax
c0013bf9:	50                   	push   eax
c0013bfa:	68 80 57 02 c0       	push   0xc0025780
c0013bff:	e9 3f 01 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013c04:	66 81 fa 40 02       	cmp    dx,0x240
c0013c09:	75 0c                	jne    c0013c17 <CPU::detectFeatures()+0x829>
c0013c0b:	55                   	push   ebp
c0013c0c:	55                   	push   ebp
c0013c0d:	68 87 57 02 c0       	push   0xc0025787
c0013c12:	e9 2c 01 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013c17:	66 81 fa 80 02       	cmp    dx,0x280
c0013c1c:	75 0c                	jne    c0013c2a <CPU::detectFeatures()+0x83c>
c0013c1e:	57                   	push   edi
c0013c1f:	57                   	push   edi
c0013c20:	68 90 57 02 c0       	push   0xc0025790
c0013c25:	e9 19 01 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013c2a:	66 81 fa 40 03       	cmp    dx,0x340
c0013c2f:	74 ed                	je     c0013c1e <CPU::detectFeatures()+0x830>
c0013c31:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013c36:	75 0c                	jne    c0013c44 <CPU::detectFeatures()+0x856>
c0013c38:	56                   	push   esi
c0013c39:	56                   	push   esi
c0013c3a:	68 97 57 02 c0       	push   0xc0025797
c0013c3f:	e9 ff 00 00 00       	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013c44:	83 f8 06             	cmp    eax,0x6
c0013c47:	0f 84 45 ff ff ff    	je     c0013b92 <CPU::detectFeatures()+0x7a4>
c0013c4d:	83 f8 04             	cmp    eax,0x4
c0013c50:	0f 84 4d ff ff ff    	je     c0013ba3 <CPU::detectFeatures()+0x7b5>
c0013c56:	83 f8 03             	cmp    eax,0x3
c0013c59:	0f 85 72 01 00 00    	jne    c0013dd1 <CPU::detectFeatures()+0x9e3>
c0013c5f:	51                   	push   ecx
c0013c60:	51                   	push   ecx
c0013c61:	68 a0 57 02 c0       	push   0xc00257a0
c0013c66:	53                   	push   ebx
c0013c67:	e8 f8 a7 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013c6c:	b1 c1                	mov    cl,0xc1
c0013c6e:	88 c8                	mov    al,cl
c0013c70:	e6 22                	out    0x22,al
c0013c72:	e4 23                	in     al,0x23
c0013c74:	88 c2                	mov    dl,al
c0013c76:	88 c8                	mov    al,cl
c0013c78:	e6 22                	out    0x22,al
c0013c7a:	88 d0                	mov    al,dl
c0013c7c:	83 c8 10             	or     eax,0x10
c0013c7f:	e6 23                	out    0x23,al
c0013c81:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0013c88:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0013c8b:	89 d0                	mov    eax,edx
c0013c8d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0013c93:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0013c97:	40                   	inc    eax
c0013c98:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0013c9e:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0013ca3:	e9 a1 00 00 00       	jmp    c0013d49 <CPU::detectFeatures()+0x95b>
c0013ca8:	83 f8 06             	cmp    eax,0x6
c0013cab:	0f 84 e1 fe ff ff    	je     c0013b92 <CPU::detectFeatures()+0x7a4>
c0013cb1:	83 f8 04             	cmp    eax,0x4
c0013cb4:	0f 84 e9 fe ff ff    	je     c0013ba3 <CPU::detectFeatures()+0x7b5>
c0013cba:	83 f8 03             	cmp    eax,0x3
c0013cbd:	0f 85 0e 01 00 00    	jne    c0013dd1 <CPU::detectFeatures()+0x9e3>
c0013cc3:	52                   	push   edx
c0013cc4:	52                   	push   edx
c0013cc5:	68 ab 57 02 c0       	push   0xc00257ab
c0013cca:	eb 77                	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013ccc:	83 f8 07             	cmp    eax,0x7
c0013ccf:	75 09                	jne    c0013cda <CPU::detectFeatures()+0x8ec>
c0013cd1:	50                   	push   eax
c0013cd2:	50                   	push   eax
c0013cd3:	68 b5 57 02 c0       	push   0xc00257b5
c0013cd8:	eb 69                	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013cda:	83 f8 0a             	cmp    eax,0xa
c0013cdd:	75 09                	jne    c0013ce8 <CPU::detectFeatures()+0x8fa>
c0013cdf:	50                   	push   eax
c0013ce0:	50                   	push   eax
c0013ce1:	68 c0 57 02 c0       	push   0xc00257c0
c0013ce6:	eb 5b                	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013ce8:	83 f8 0b             	cmp    eax,0xb
c0013ceb:	75 09                	jne    c0013cf6 <CPU::detectFeatures()+0x908>
c0013ced:	50                   	push   eax
c0013cee:	50                   	push   eax
c0013cef:	68 c8 57 02 c0       	push   0xc00257c8
c0013cf4:	eb 4d                	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013cf6:	83 f8 08             	cmp    eax,0x8
c0013cf9:	75 09                	jne    c0013d04 <CPU::detectFeatures()+0x916>
c0013cfb:	50                   	push   eax
c0013cfc:	50                   	push   eax
c0013cfd:	68 d1 57 02 c0       	push   0xc00257d1
c0013d02:	eb 3f                	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013d04:	83 f8 09             	cmp    eax,0x9
c0013d07:	75 09                	jne    c0013d12 <CPU::detectFeatures()+0x924>
c0013d09:	50                   	push   eax
c0013d0a:	50                   	push   eax
c0013d0b:	68 d9 57 02 c0       	push   0xc00257d9
c0013d10:	eb 31                	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013d12:	83 f8 05             	cmp    eax,0x5
c0013d15:	75 09                	jne    c0013d20 <CPU::detectFeatures()+0x932>
c0013d17:	50                   	push   eax
c0013d18:	50                   	push   eax
c0013d19:	68 e1 57 02 c0       	push   0xc00257e1
c0013d1e:	eb 23                	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013d20:	83 f8 0c             	cmp    eax,0xc
c0013d23:	75 09                	jne    c0013d2e <CPU::detectFeatures()+0x940>
c0013d25:	55                   	push   ebp
c0013d26:	55                   	push   ebp
c0013d27:	68 ef 57 02 c0       	push   0xc00257ef
c0013d2c:	eb 15                	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013d2e:	83 f8 0d             	cmp    eax,0xd
c0013d31:	75 09                	jne    c0013d3c <CPU::detectFeatures()+0x94e>
c0013d33:	57                   	push   edi
c0013d34:	57                   	push   edi
c0013d35:	68 fa 57 02 c0       	push   0xc00257fa
c0013d3a:	eb 07                	jmp    c0013d43 <CPU::detectFeatures()+0x955>
c0013d3c:	56                   	push   esi
c0013d3d:	56                   	push   esi
c0013d3e:	68 0e 58 02 c0       	push   0xc002580e
c0013d43:	53                   	push   ebx
c0013d44:	e8 1b a7 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013d49:	83 c4 10             	add    esp,0x10
c0013d4c:	e9 80 00 00 00       	jmp    c0013dd1 <CPU::detectFeatures()+0x9e3>
c0013d51:	51                   	push   ecx
c0013d52:	51                   	push   ecx
c0013d53:	68 5a 56 02 c0       	push   0xc002565a
c0013d58:	55                   	push   ebp
c0013d59:	e8 e2 c9 fe ff       	call   c0000740 <strcpy>
c0013d5e:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013d68:	e8 76 c4 fe ff       	call   c00001e3 <is486>
c0013d6d:	83 c4 10             	add    esp,0x10
c0013d70:	85 c0                	test   eax,eax
c0013d72:	74 2b                	je     c0013d9f <CPU::detectFeatures()+0x9b1>
c0013d74:	52                   	push   edx
c0013d75:	52                   	push   edx
c0013d76:	68 1a 58 02 c0       	push   0xc002581a
c0013d7b:	53                   	push   ebx
c0013d7c:	e8 e3 a6 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013d81:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0013d88:	0f 20 c0             	mov    eax,cr0
c0013d8b:	83 e0 14             	and    eax,0x14
c0013d8e:	83 c4 10             	add    esp,0x10
c0013d91:	83 f8 04             	cmp    eax,0x4
c0013d94:	75 1f                	jne    c0013db5 <CPU::detectFeatures()+0x9c7>
c0013d96:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0013d9d:	eb 32                	jmp    c0013dd1 <CPU::detectFeatures()+0x9e3>
c0013d9f:	50                   	push   eax
c0013da0:	50                   	push   eax
c0013da1:	68 25 58 02 c0       	push   0xc0025825
c0013da6:	53                   	push   ebx
c0013da7:	e8 b8 a6 ff ff       	call   c000e464 <Device::setName(char const*)>
c0013dac:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0013db3:	eb d3                	jmp    c0013d88 <CPU::detectFeatures()+0x99a>
c0013db5:	e8 04 c4 fe ff       	call   c00001be <hasLegacyFPU>
c0013dba:	83 e0 01             	and    eax,0x1
c0013dbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0013dc0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013dc6:	83 e0 fd             	and    eax,0xfffffffd
c0013dc9:	09 d0                	or     eax,edx
c0013dcb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0013dd1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013dd8:	83 c4 4c             	add    esp,0x4c
c0013ddb:	5b                   	pop    ebx
c0013ddc:	5e                   	pop    esi
c0013ddd:	5f                   	pop    edi
c0013dde:	5d                   	pop    ebp
c0013ddf:	c3                   	ret    

c0013de0 <CPU::setupSMEP()>:
c0013de0:	0f 20 e0             	mov    eax,cr4
c0013de3:	0d 00 00 10 00       	or     eax,0x100000
c0013de8:	0f 22 e0             	mov    cr4,eax
c0013deb:	c3                   	ret    

c0013dec <CPU::setupUMIP()>:
c0013dec:	0f 20 e0             	mov    eax,cr4
c0013def:	80 cc 08             	or     ah,0x8
c0013df2:	0f 22 e0             	mov    cr4,eax
c0013df5:	c3                   	ret    

c0013df6 <CPU::setupTSC()>:
c0013df6:	0f 20 e0             	mov    eax,cr4
c0013df9:	83 c8 04             	or     eax,0x4
c0013dfc:	0f 22 e0             	mov    cr4,eax
c0013dff:	c3                   	ret    

c0013e00 <CPU::setupLargePages()>:
c0013e00:	0f 20 e0             	mov    eax,cr4
c0013e03:	83 c8 10             	or     eax,0x10
c0013e06:	0f 22 e0             	mov    cr4,eax
c0013e09:	c3                   	ret    

c0013e0a <CPU::setupPAT()>:
c0013e0a:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0013e0f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013e16:	74 2c                	je     c0013e44 <CPU::setupPAT()+0x3a>
c0013e18:	53                   	push   ebx
c0013e19:	83 ec 10             	sub    esp,0x10
c0013e1c:	68 77 02 00 00       	push   0x277
c0013e21:	50                   	push   eax
c0013e22:	e8 03 51 ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c0013e27:	83 e2 f8             	and    edx,0xfffffff8
c0013e2a:	83 ca 01             	or     edx,0x1
c0013e2d:	52                   	push   edx
c0013e2e:	50                   	push   eax
c0013e2f:	68 77 02 00 00       	push   0x277
c0013e34:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0013e3a:	e8 17 51 ff ff       	call   c0008f56 <Computer::wrmsr(unsigned int, unsigned long long)>
c0013e3f:	83 c4 28             	add    esp,0x28
c0013e42:	5b                   	pop    ebx
c0013e43:	c3                   	ret    
c0013e44:	c3                   	ret    
c0013e45:	90                   	nop

c0013e46 <CPU::setupMTRR()>:
c0013e46:	c3                   	ret    
c0013e47:	90                   	nop

c0013e48 <CPU::setupGlobalPages()>:
c0013e48:	0f 20 e0             	mov    eax,cr4
c0013e4b:	0c 80                	or     al,0x80
c0013e4d:	0f 22 e0             	mov    cr4,eax
c0013e50:	c3                   	ret    
c0013e51:	90                   	nop

c0013e52 <CPU::allowUsermodeDataAccess()>:
c0013e52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e56:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013e5d:	74 03                	je     c0013e62 <CPU::allowUsermodeDataAccess()+0x10>
c0013e5f:	0f 01 cb             	stac   
c0013e62:	c3                   	ret    
c0013e63:	90                   	nop

c0013e64 <CPU::prohibitUsermodeDataAccess()>:
c0013e64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e68:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013e6f:	74 03                	je     c0013e74 <CPU::prohibitUsermodeDataAccess()+0x10>
c0013e71:	0f 01 ca             	clac   
c0013e74:	c3                   	ret    
c0013e75:	90                   	nop

c0013e76 <CPU::setupSMAP()>:
c0013e76:	0f 20 e0             	mov    eax,cr4
c0013e79:	0d 00 00 20 00       	or     eax,0x200000
c0013e7e:	0f 22 e0             	mov    cr4,eax
c0013e81:	eb e1                	jmp    c0013e64 <CPU::prohibitUsermodeDataAccess()>
c0013e83:	90                   	nop

c0013e84 <CPU::setupFeatures()>:
c0013e84:	53                   	push   ebx
c0013e85:	83 ec 08             	sub    esp,0x8
c0013e88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013e8c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0013e93:	74 18                	je     c0013ead <CPU::setupFeatures()+0x29>
c0013e95:	83 ec 0c             	sub    esp,0xc
c0013e98:	68 30 58 02 c0       	push   0xc0025830
c0013e9d:	e8 59 8e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013ea2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ea5:	e8 42 ff ff ff       	call   c0013dec <CPU::setupUMIP()>
c0013eaa:	83 c4 10             	add    esp,0x10
c0013ead:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0013eb4:	74 18                	je     c0013ece <CPU::setupFeatures()+0x4a>
c0013eb6:	83 ec 0c             	sub    esp,0xc
c0013eb9:	68 3a 58 02 c0       	push   0xc002583a
c0013ebe:	e8 38 8e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013ec3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ec6:	e8 2b ff ff ff       	call   c0013df6 <CPU::setupTSC()>
c0013ecb:	83 c4 10             	add    esp,0x10
c0013ece:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0013ed5:	74 18                	je     c0013eef <CPU::setupFeatures()+0x6b>
c0013ed7:	83 ec 0c             	sub    esp,0xc
c0013eda:	68 43 58 02 c0       	push   0xc0025843
c0013edf:	e8 17 8e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013ee4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ee7:	e8 14 ff ff ff       	call   c0013e00 <CPU::setupLargePages()>
c0013eec:	83 c4 10             	add    esp,0x10
c0013eef:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0013ef6:	74 18                	je     c0013f10 <CPU::setupFeatures()+0x8c>
c0013ef8:	83 ec 0c             	sub    esp,0xc
c0013efb:	68 4c 58 02 c0       	push   0xc002584c
c0013f00:	e8 f6 8d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f05:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f08:	e8 3b ff ff ff       	call   c0013e48 <CPU::setupGlobalPages()>
c0013f0d:	83 c4 10             	add    esp,0x10
c0013f10:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0013f17:	74 18                	je     c0013f31 <CPU::setupFeatures()+0xad>
c0013f19:	83 ec 0c             	sub    esp,0xc
c0013f1c:	68 5e 58 02 c0       	push   0xc002585e
c0013f21:	e8 d5 8d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f26:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f29:	e8 dc fe ff ff       	call   c0013e0a <CPU::setupPAT()>
c0013f2e:	83 c4 10             	add    esp,0x10
c0013f31:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0013f38:	74 11                	je     c0013f4b <CPU::setupFeatures()+0xc7>
c0013f3a:	c7 44 24 10 67 58 02 c0 	mov    DWORD PTR [esp+0x10],0xc0025867
c0013f42:	83 c4 08             	add    esp,0x8
c0013f45:	5b                   	pop    ebx
c0013f46:	e9 b0 8d ff ff       	jmp    c000ccfb <Dbg::kprintf(char const*, ...)>
c0013f4b:	83 c4 08             	add    esp,0x8
c0013f4e:	5b                   	pop    ebx
c0013f4f:	c3                   	ret    

c0013f50 <CPU::open(int, int, void*)>:
c0013f50:	57                   	push   edi
c0013f51:	56                   	push   esi
c0013f52:	53                   	push   ebx
c0013f53:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f57:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f5b:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013f61:	83 ec 0c             	sub    esp,0xc
c0013f64:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0013f6a:	68 71 58 02 c0       	push   0xc0025871
c0013f6f:	e8 f5 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f74:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0013f7a:	89 04 24             	mov    DWORD PTR [esp],eax
c0013f7d:	e8 84 53 ff ff       	call   c0009306 <GDT::setup()>
c0013f82:	c7 04 24 83 58 02 c0 	mov    DWORD PTR [esp],0xc0025883
c0013f89:	e8 db 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013f8e:	83 c4 0c             	add    esp,0xc
c0013f91:	6a 00                	push   0x0
c0013f93:	68 ef be ad de       	push   0xdeadbeef
c0013f98:	57                   	push   edi
c0013f99:	e8 be 73 ff ff       	call   c000b35c <TSS::setup(unsigned long, unsigned long)>
c0013f9e:	c7 04 24 95 58 02 c0 	mov    DWORD PTR [esp],0xc0025895
c0013fa5:	e8 bf 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013faa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013fad:	e8 8a 73 ff ff       	call   c000b33c <TSS::flush()>
c0013fb2:	c7 04 24 a9 58 02 c0 	mov    DWORD PTR [esp],0xc00258a9
c0013fb9:	e8 ab 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fbe:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0013fc4:	89 04 24             	mov    DWORD PTR [esp],eax
c0013fc7:	e8 a6 55 ff ff       	call   c0009572 <IDT::setup()>
c0013fcc:	c7 04 24 bb 58 02 c0 	mov    DWORD PTR [esp],0xc00258bb
c0013fd3:	e8 91 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fd8:	b8 00 04 00 00       	mov    eax,0x400
c0013fdd:	0f 23 f8             	mov    db7,eax
c0013fe0:	c7 04 24 d9 58 02 c0 	mov    DWORD PTR [esp],0xc00258d9
c0013fe7:	e8 7d 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0013fec:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0013ff6:	e8 cb 60 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0013ffb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014001:	89 30                	mov    DWORD PTR [eax],esi
c0014003:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014009:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001400c:	c7 04 24 fb 58 02 c0 	mov    DWORD PTR [esp],0xc00258fb
c0014013:	e8 51 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014018:	58                   	pop    eax
c0014019:	5a                   	pop    edx
c001401a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014020:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014024:	e8 2d 83 ff ff       	call   c000c356 <VAS::setCPUSpecific(unsigned long)>
c0014029:	c7 04 24 23 59 02 c0 	mov    DWORD PTR [esp],0xc0025923
c0014030:	e8 34 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014035:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014038:	e8 b1 f3 ff ff       	call   c00133ee <CPU::detectFeatures()>
c001403d:	c7 04 24 46 59 02 c0 	mov    DWORD PTR [esp],0xc0025946
c0014044:	e8 20 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014049:	e8 c0 b5 ff ff       	call   c000f60e <setupInterruptController()>
c001404e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014054:	c7 04 24 6a 59 02 c0 	mov    DWORD PTR [esp],0xc002596a
c001405b:	e8 09 5a ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0014060:	a1 20 7f 02 c0       	mov    eax,ds:0xc0027f20
c0014065:	83 e0 10             	and    eax,0x10
c0014068:	83 f8 01             	cmp    eax,0x1
c001406b:	19 c0                	sbb    eax,eax
c001406d:	83 e0 46             	and    eax,0x46
c0014070:	83 c0 1e             	add    eax,0x1e
c0014073:	89 04 24             	mov    DWORD PTR [esp],eax
c0014076:	e8 c1 cb ff ff       	call   c0010c3c <setupTimer(int)>
c001407b:	83 c4 10             	add    esp,0x10
c001407e:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014084:	f6 05 20 7f 02 c0 20 	test   BYTE PTR ds:0xc0027f20,0x20
c001408b:	74 18                	je     c00140a5 <CPU::open(int, int, void*)+0x155>
c001408d:	83 ec 0c             	sub    esp,0xc
c0014090:	68 85 59 02 c0       	push   0xc0025985
c0014095:	e8 cf 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001409a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001409d:	e8 e2 fd ff ff       	call   c0013e84 <CPU::setupFeatures()>
c00140a2:	83 c4 10             	add    esp,0x10
c00140a5:	83 ec 0c             	sub    esp,0xc
c00140a8:	68 a0 59 02 c0       	push   0xc00259a0
c00140ad:	e8 b7 59 ff ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00140b2:	83 c4 10             	add    esp,0x10
c00140b5:	31 c0                	xor    eax,eax
c00140b7:	5b                   	pop    ebx
c00140b8:	5e                   	pop    esi
c00140b9:	5f                   	pop    edi
c00140ba:	c3                   	ret    
c00140bb:	90                   	nop

c00140bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00140bc:	57                   	push   edi
c00140bd:	56                   	push   esi
c00140be:	53                   	push   ebx
c00140bf:	51                   	push   ecx
c00140c0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00140c4:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00140c7:	0f 02 c0             	lar    eax,ax
c00140ca:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00140cd:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00140d1:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00140d4:	88 ca                	mov    dl,cl
c00140d6:	c0 ea 06             	shr    dl,0x6
c00140d9:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00140dd:	89 ca                	mov    edx,ecx
c00140df:	66 c1 ea 03          	shr    dx,0x3
c00140e3:	83 e2 07             	and    edx,0x7
c00140e6:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00140eb:	88 17                	mov    BYTE PTR [edi],dl
c00140ed:	0f 84 a6 01 00 00    	je     c0014299 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00140f3:	83 e1 07             	and    ecx,0x7
c00140f6:	80 f9 04             	cmp    cl,0x4
c00140f9:	0f 84 98 00 00 00    	je     c0014197 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00140ff:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014104:	0f 95 c0             	setne  al
c0014107:	80 f9 05             	cmp    cl,0x5
c001410a:	0f 95 c2             	setne  dl
c001410d:	08 c2                	or     dl,al
c001410f:	74 79                	je     c001418a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0014111:	84 c9                	test   cl,cl
c0014113:	75 05                	jne    c001411a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0014115:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014118:	eb 3c                	jmp    c0014156 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001411a:	80 f9 01             	cmp    cl,0x1
c001411d:	75 05                	jne    c0014124 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001411f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014122:	eb 32                	jmp    c0014156 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014124:	80 f9 02             	cmp    cl,0x2
c0014127:	75 05                	jne    c001412e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0014129:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001412c:	eb 28                	jmp    c0014156 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001412e:	31 c0                	xor    eax,eax
c0014130:	80 f9 03             	cmp    cl,0x3
c0014133:	75 05                	jne    c001413a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0014135:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014138:	eb 1c                	jmp    c0014156 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001413a:	80 f9 05             	cmp    cl,0x5
c001413d:	75 05                	jne    c0014144 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001413f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014142:	eb 12                	jmp    c0014156 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014144:	80 f9 06             	cmp    cl,0x6
c0014147:	75 05                	jne    c001414e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0014149:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001414c:	eb 08                	jmp    c0014156 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001414e:	80 f9 07             	cmp    cl,0x7
c0014151:	75 03                	jne    c0014156 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0014153:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014156:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001415b:	75 10                	jne    c001416d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c001415d:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0014161:	b9 03 00 00 00       	mov    ecx,0x3
c0014166:	01 d0                	add    eax,edx
c0014168:	e9 37 01 00 00       	jmp    c00142a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001416d:	b9 02 00 00 00       	mov    ecx,0x2
c0014172:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0014177:	0f 85 27 01 00 00    	jne    c00142a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001417d:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0014180:	b9 06 00 00 00       	mov    ecx,0x6
c0014185:	e9 1a 01 00 00       	jmp    c00142a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001418a:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c001418d:	b9 06 00 00 00       	mov    ecx,0x6
c0014192:	e9 0f 01 00 00       	jmp    c00142a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014197:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c001419a:	88 ca                	mov    dl,cl
c001419c:	c0 ea 06             	shr    dl,0x6
c001419f:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00141a3:	89 ca                	mov    edx,ecx
c00141a5:	66 c1 ea 03          	shr    dx,0x3
c00141a9:	83 e2 07             	and    edx,0x7
c00141ac:	80 e1 07             	and    cl,0x7
c00141af:	75 05                	jne    c00141b6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00141b1:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00141b4:	eb 4c                	jmp    c0014202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141b6:	80 f9 01             	cmp    cl,0x1
c00141b9:	75 05                	jne    c00141c0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00141bb:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00141be:	eb 42                	jmp    c0014202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141c0:	80 f9 02             	cmp    cl,0x2
c00141c3:	75 05                	jne    c00141ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00141c5:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00141c8:	eb 38                	jmp    c0014202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141ca:	80 f9 03             	cmp    cl,0x3
c00141cd:	75 05                	jne    c00141d4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00141cf:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00141d2:	eb 2e                	jmp    c0014202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141d4:	80 f9 04             	cmp    cl,0x4
c00141d7:	75 12                	jne    c00141eb <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00141d9:	f6 c4 60             	test   ah,0x60
c00141dc:	75 08                	jne    c00141e6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00141de:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00141e1:	8d 78 14             	lea    edi,[eax+0x14]
c00141e4:	eb 1c                	jmp    c0014202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141e6:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00141e9:	eb 17                	jmp    c0014202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141eb:	80 f9 05             	cmp    cl,0x5
c00141ee:	75 05                	jne    c00141f5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00141f0:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00141f3:	eb 0d                	jmp    c0014202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141f5:	80 f9 06             	cmp    cl,0x6
c00141f8:	75 05                	jne    c00141ff <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00141fa:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00141fd:	eb 03                	jmp    c0014202 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00141ff:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0014202:	84 d2                	test   dl,dl
c0014204:	75 05                	jne    c001420b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0014206:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0014209:	eb 3c                	jmp    c0014247 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001420b:	80 fa 01             	cmp    dl,0x1
c001420e:	75 05                	jne    c0014215 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0014210:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0014213:	eb 32                	jmp    c0014247 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014215:	80 fa 02             	cmp    dl,0x2
c0014218:	75 05                	jne    c001421f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001421a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001421d:	eb 28                	jmp    c0014247 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001421f:	80 fa 03             	cmp    dl,0x3
c0014222:	75 05                	jne    c0014229 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0014224:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0014227:	eb 1e                	jmp    c0014247 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014229:	31 c0                	xor    eax,eax
c001422b:	80 fa 04             	cmp    dl,0x4
c001422e:	74 17                	je     c0014247 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014230:	80 fa 05             	cmp    dl,0x5
c0014233:	75 05                	jne    c001423a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0014235:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0014238:	eb 0d                	jmp    c0014247 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001423a:	80 fa 06             	cmp    dl,0x6
c001423d:	75 05                	jne    c0014244 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001423f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014242:	eb 03                	jmp    c0014247 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0014244:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014247:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001424c:	0f 94 c2             	sete   dl
c001424f:	80 f9 05             	cmp    cl,0x5
c0014252:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0014256:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001425b:	d3 e0                	shl    eax,cl
c001425d:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0014261:	74 0a                	je     c001426d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0014263:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014266:	b9 07 00 00 00       	mov    ecx,0x7
c001426b:	eb 37                	jmp    c00142a4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001426d:	01 f8                	add    eax,edi
c001426f:	b9 03 00 00 00       	mov    ecx,0x3
c0014274:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0014279:	74 2b                	je     c00142a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001427b:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0014280:	75 0d                	jne    c001428f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0014282:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0014286:	01 c8                	add    eax,ecx
c0014288:	b9 04 00 00 00       	mov    ecx,0x4
c001428d:	eb 17                	jmp    c00142a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001428f:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0014292:	b9 07 00 00 00       	mov    ecx,0x7
c0014297:	eb 0d                	jmp    c00142a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0014299:	b9 02 00 00 00       	mov    ecx,0x2
c001429e:	b2 01                	mov    dl,0x1
c00142a0:	31 c0                	xor    eax,eax
c00142a2:	eb 02                	jmp    c00142a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00142a4:	31 d2                	xor    edx,edx
c00142a6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142aa:	89 0b                	mov    DWORD PTR [ebx],ecx
c00142ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00142b0:	88 11                	mov    BYTE PTR [ecx],dl
c00142b2:	5a                   	pop    edx
c00142b3:	5b                   	pop    ebx
c00142b4:	5e                   	pop    esi
c00142b5:	5f                   	pop    edi
c00142b6:	c3                   	ret    

c00142b7 <Krnl::smpEntry()>:
c00142b7:	eb fe                	jmp    c00142b7 <Krnl::smpEntry()>

c00142b9 <Krnl::startCPU(int)>:
c00142b9:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c00142be:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00142c5:	0f 84 36 01 00 00    	je     c0014401 <Krnl::startCPU(int)+0x148>
c00142cb:	53                   	push   ebx
c00142cc:	83 ec 10             	sub    esp,0x10
c00142cf:	fa                   	cli    
c00142d0:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00142d6:	6a 1b                	push   0x1b
c00142d8:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c00142de:	e8 47 4c ff ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c00142e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00142e8:	89 c3                	mov    ebx,eax
c00142ea:	58                   	pop    eax
c00142eb:	5a                   	pop    edx
c00142ec:	53                   	push   ebx
c00142ed:	68 e8 59 02 c0       	push   0xc00259e8
c00142f2:	e8 04 8a ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00142f7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0014301:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014305:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001430f:	c1 e0 18             	shl    eax,0x18
c0014312:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0014318:	83 c4 10             	add    esp,0x10
c001431b:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0014321:	09 c2                	or     edx,eax
c0014323:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0014329:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001432f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014335:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001433b:	80 cd c5             	or     ch,0xc5
c001433e:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014344:	f3 90                	pause  
c0014346:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0014348:	0f ba e1 0c          	bt     ecx,0xc
c001434c:	72 f6                	jb     c0014344 <Krnl::startCPU(int)+0x8b>
c001434e:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014354:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001435a:	09 c1                	or     ecx,eax
c001435c:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0014362:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0014368:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001436e:	80 cd 85             	or     ch,0x85
c0014371:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0014377:	f3 90                	pause  
c0014379:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001437b:	0f ba e1 0c          	bt     ecx,0xc
c001437f:	72 f6                	jb     c0014377 <Krnl::startCPU(int)+0xbe>
c0014381:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001438b:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0014391:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0014397:	09 c1                	or     ecx,eax
c0014399:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001439f:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c00143a5:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c00143ab:	81 c9 02 06 00 00    	or     ecx,0x602
c00143b1:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c00143b7:	f3 90                	pause  
c00143b9:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00143bb:	0f ba e1 0c          	bt     ecx,0xc
c00143bf:	72 f6                	jb     c00143b7 <Krnl::startCPU(int)+0xfe>
c00143c1:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c00143cb:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c00143d1:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c00143d7:	09 c8                	or     eax,ecx
c00143d9:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c00143df:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c00143e5:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c00143ea:	0d 02 06 00 00       	or     eax,0x602
c00143ef:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c00143f5:	f3 90                	pause  
c00143f7:	8b 02                	mov    eax,DWORD PTR [edx]
c00143f9:	0f ba e0 0c          	bt     eax,0xc
c00143fd:	72 f6                	jb     c00143f5 <Krnl::startCPU(int)+0x13c>
c00143ff:	eb fe                	jmp    c00143ff <Krnl::startCPU(int)+0x146>
c0014401:	c3                   	ret    

c0014402 <Krnl::startCPUs()>:
c0014402:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0014407:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001440d:	88 c2                	mov    dl,al
c001440f:	83 e2 0a             	and    edx,0xa
c0014412:	80 fa 0a             	cmp    dl,0xa
c0014415:	75 09                	jne    c0014420 <Krnl::startCPUs()+0x1e>
c0014417:	a8 01                	test   al,0x1
c0014419:	74 05                	je     c0014420 <Krnl::startCPUs()+0x1e>
c001441b:	e9 7b bd fe ff       	jmp    c000019b <prepareTramp>
c0014420:	c3                   	ret    
c0014421:	90                   	nop

c0014422 <EnvVarContainer::getEnv(char const*)>:
c0014422:	57                   	push   edi
c0014423:	56                   	push   esi
c0014424:	53                   	push   ebx
c0014425:	31 db                	xor    ebx,ebx
c0014427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001442b:	39 1e                	cmp    DWORD PTR [esi],ebx
c001442d:	7e 2b                	jle    c001445a <EnvVarContainer::getEnv(char const*)+0x38>
c001442f:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0014436:	50                   	push   eax
c0014437:	50                   	push   eax
c0014438:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001443b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001443e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014442:	e8 85 c3 fe ff       	call   c00007cc <strcmp>
c0014447:	83 c4 10             	add    esp,0x10
c001444a:	85 c0                	test   eax,eax
c001444c:	75 09                	jne    c0014457 <EnvVarContainer::getEnv(char const*)+0x35>
c001444e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014451:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0014455:	eb 05                	jmp    c001445c <EnvVarContainer::getEnv(char const*)+0x3a>
c0014457:	43                   	inc    ebx
c0014458:	eb d1                	jmp    c001442b <EnvVarContainer::getEnv(char const*)+0x9>
c001445a:	31 c0                	xor    eax,eax
c001445c:	5b                   	pop    ebx
c001445d:	5e                   	pop    esi
c001445e:	5f                   	pop    edi
c001445f:	c3                   	ret    

c0014460 <EnvVarContainer::setEnv(char const*, char const*)>:
c0014460:	55                   	push   ebp
c0014461:	57                   	push   edi
c0014462:	56                   	push   esi
c0014463:	53                   	push   ebx
c0014464:	83 ec 28             	sub    esp,0x28
c0014467:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001446b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001446f:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0014473:	56                   	push   esi
c0014474:	e8 27 c2 fe ff       	call   c00006a0 <strlen>
c0014479:	40                   	inc    eax
c001447a:	89 04 24             	mov    DWORD PTR [esp],eax
c001447d:	e8 8d 55 ff ff       	call   c0009a0f <malloc>
c0014482:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014485:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014489:	e8 12 c2 fe ff       	call   c00006a0 <strlen>
c001448e:	40                   	inc    eax
c001448f:	89 04 24             	mov    DWORD PTR [esp],eax
c0014492:	e8 78 55 ff ff       	call   c0009a0f <malloc>
c0014497:	89 34 24             	mov    DWORD PTR [esp],esi
c001449a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001449e:	e8 fd c1 fe ff       	call   c00006a0 <strlen>
c00144a3:	83 c4 0c             	add    esp,0xc
c00144a6:	40                   	inc    eax
c00144a7:	50                   	push   eax
c00144a8:	6a 00                	push   0x0
c00144aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00144ae:	e8 d1 c1 fe ff       	call   c0000684 <memset>
c00144b3:	89 34 24             	mov    DWORD PTR [esp],esi
c00144b6:	e8 e5 c1 fe ff       	call   c00006a0 <strlen>
c00144bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00144bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00144c2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144c7:	89 de                	mov    esi,ebx
c00144c9:	e8 d2 c1 fe ff       	call   c00006a0 <strlen>
c00144ce:	83 c4 0c             	add    esp,0xc
c00144d1:	40                   	inc    eax
c00144d2:	50                   	push   eax
c00144d3:	6a 00                	push   0x0
c00144d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144d9:	e8 a6 c1 fe ff       	call   c0000684 <memset>
c00144de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00144e1:	e8 ba c1 fe ff       	call   c00006a0 <strlen>
c00144e6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00144ea:	8d 48 01             	lea    ecx,[eax+0x1]
c00144ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00144ef:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00144f2:	40                   	inc    eax
c00144f3:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00144f6:	c1 e0 03             	shl    eax,0x3
c00144f9:	5a                   	pop    edx
c00144fa:	59                   	pop    ecx
c00144fb:	50                   	push   eax
c00144fc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00144ff:	e8 f7 54 ff ff       	call   c00099fb <realloc>
c0014504:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014508:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001450b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001450e:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0014512:	b9 08 00 00 00       	mov    ecx,0x8
c0014517:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014519:	83 c4 2c             	add    esp,0x2c
c001451c:	5b                   	pop    ebx
c001451d:	5e                   	pop    esi
c001451e:	5f                   	pop    edi
c001451f:	5d                   	pop    ebp
c0014520:	c3                   	ret    
c0014521:	90                   	nop

c0014522 <EnvVarContainer::deleteEnv(char const*)>:
c0014522:	c3                   	ret    
c0014523:	90                   	nop

c0014524 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0014524:	55                   	push   ebp
c0014525:	57                   	push   edi
c0014526:	56                   	push   esi
c0014527:	53                   	push   ebx
c0014528:	81 ec 38 01 00 00    	sub    esp,0x138
c001452e:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0014535:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001453c:	68 14 01 00 00       	push   0x114
c0014541:	e8 c9 54 ff ff       	call   c0009a0f <malloc>
c0014546:	83 c4 0c             	add    esp,0xc
c0014549:	89 c3                	mov    ebx,eax
c001454b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001454e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0014555:	50                   	push   eax
c0014556:	e8 0b 8d ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001455b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001455e:	e8 4b 90 ff ff       	call   c000d5ae <File::exists()>
c0014563:	83 c4 10             	add    esp,0x10
c0014566:	84 c0                	test   al,al
c0014568:	75 31                	jne    c001459b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001456a:	50                   	push   eax
c001456b:	50                   	push   eax
c001456c:	6a 12                	push   0x12
c001456e:	53                   	push   ebx
c001456f:	e8 cc 8d ff ff       	call   c000d340 <File::open(FileOpenMode)>
c0014574:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014576:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0014579:	89 34 24             	mov    DWORD PTR [esp],esi
c001457c:	e8 1f c1 fe ff       	call   c00006a0 <strlen>
c0014581:	5a                   	pop    edx
c0014582:	31 d2                	xor    edx,edx
c0014584:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014588:	51                   	push   ecx
c0014589:	56                   	push   esi
c001458a:	52                   	push   edx
c001458b:	50                   	push   eax
c001458c:	53                   	push   ebx
c001458d:	ff d7                	call   edi
c001458f:	83 c4 14             	add    esp,0x14
c0014592:	53                   	push   ebx
c0014593:	e8 06 8e ff ff       	call   c000d39e <File::close()>
c0014598:	83 c4 10             	add    esp,0x10
c001459b:	56                   	push   esi
c001459c:	31 f6                	xor    esi,esi
c001459e:	68 00 01 00 00       	push   0x100
c00145a3:	6a 00                	push   0x0
c00145a5:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00145a9:	50                   	push   eax
c00145aa:	e8 d5 c0 fe ff       	call   c0000684 <memset>
c00145af:	5f                   	pop    edi
c00145b0:	58                   	pop    eax
c00145b1:	6a 01                	push   0x1
c00145b3:	53                   	push   ebx
c00145b4:	e8 87 8d ff ff       	call   c000d340 <File::open(FileOpenMode)>
c00145b9:	83 c4 10             	add    esp,0x10
c00145bc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00145c4:	83 ec 0c             	sub    esp,0xc
c00145c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145c9:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00145cd:	51                   	push   ecx
c00145ce:	8d 54 24 23          	lea    edx,[esp+0x23]
c00145d2:	52                   	push   edx
c00145d3:	6a 00                	push   0x0
c00145d5:	6a 01                	push   0x1
c00145d7:	53                   	push   ebx
c00145d8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145db:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00145df:	83 c4 20             	add    esp,0x20
c00145e2:	3c 0d                	cmp    al,0xd
c00145e4:	0f 84 09 01 00 00    	je     c00146f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00145ea:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00145ef:	0f 84 ef 00 00 00    	je     c00146e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c00145f5:	3c 0a                	cmp    al,0xa
c00145f7:	74 13                	je     c001460c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c00145f9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00145fe:	74 0c                	je     c001460c <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0014600:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0014606:	0f 8e d8 00 00 00    	jle    c00146e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c001460c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014610:	83 ec 0c             	sub    esp,0xc
c0014613:	8d 78 01             	lea    edi,[eax+0x1]
c0014616:	57                   	push   edi
c0014617:	e8 f3 53 ff ff       	call   c0009a0f <malloc>
c001461c:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0014620:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014624:	8d 56 04             	lea    edx,[esi+0x4]
c0014627:	89 14 24             	mov    DWORD PTR [esp],edx
c001462a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001462e:	e8 dc 53 ff ff       	call   c0009a0f <malloc>
c0014633:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014637:	83 c4 0c             	add    esp,0xc
c001463a:	57                   	push   edi
c001463b:	6a 00                	push   0x0
c001463d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014641:	e8 3e c0 fe ff       	call   c0000684 <memset>
c0014646:	8d 74 24 30          	lea    esi,[esp+0x30]
c001464a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001464e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014652:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014654:	83 c4 0c             	add    esp,0xc
c0014657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001465b:	52                   	push   edx
c001465c:	6a 00                	push   0x0
c001465e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014662:	e8 1d c0 fe ff       	call   c0000684 <memset>
c0014667:	8d 74 24 30          	lea    esi,[esp+0x30]
c001466b:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001466f:	89 34 24             	mov    DWORD PTR [esp],esi
c0014672:	e8 29 c0 fe ff       	call   c00006a0 <strlen>
c0014677:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001467b:	89 c1                	mov    ecx,eax
c001467d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001467f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014682:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014685:	40                   	inc    eax
c0014686:	83 c4 10             	add    esp,0x10
c0014689:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001468c:	85 d2                	test   edx,edx
c001468e:	75 0c                	jne    c001469c <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c0014690:	83 ec 0c             	sub    esp,0xc
c0014693:	6a 08                	push   0x8
c0014695:	e8 75 53 ff ff       	call   c0009a0f <malloc>
c001469a:	eb 0c                	jmp    c00146a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001469c:	c1 e0 03             	shl    eax,0x3
c001469f:	51                   	push   ecx
c00146a0:	51                   	push   ecx
c00146a1:	50                   	push   eax
c00146a2:	52                   	push   edx
c00146a3:	e8 53 53 ff ff       	call   c00099fb <realloc>
c00146a8:	83 c4 10             	add    esp,0x10
c00146ab:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00146ae:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00146b1:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c00146b4:	8d 74 24 18          	lea    esi,[esp+0x18]
c00146b8:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00146bc:	b9 08 00 00 00       	mov    ecx,0x8
c00146c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00146c3:	31 f6                	xor    esi,esi
c00146c5:	50                   	push   eax
c00146c6:	68 00 01 00 00       	push   0x100
c00146cb:	6a 00                	push   0x0
c00146cd:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00146d1:	50                   	push   eax
c00146d2:	e8 ad bf fe ff       	call   c0000684 <memset>
c00146d7:	83 c4 10             	add    esp,0x10
c00146da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00146e2:	eb 0f                	jmp    c00146f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00146e4:	3c 3d                	cmp    al,0x3d
c00146e6:	74 07                	je     c00146ef <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00146e8:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00146ec:	46                   	inc    esi
c00146ed:	eb 04                	jmp    c00146f3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00146ef:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00146f3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00146f8:	0f 85 c6 fe ff ff    	jne    c00145c4 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00146fe:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014704:	5b                   	pop    ebx
c0014705:	5e                   	pop    esi
c0014706:	5f                   	pop    edi
c0014707:	5d                   	pop    ebp
c0014708:	c3                   	ret    
c0014709:	90                   	nop

c001470a <EnvVarContainer::__loadSystem()>:
c001470a:	83 ec 10             	sub    esp,0x10
c001470d:	68 e0 78 02 c0       	push   0xc00278e0
c0014712:	68 f9 59 02 c0       	push   0xc00259f9
c0014717:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471b:	e8 04 fe ff ff       	call   c0014524 <EnvVarContainer::loadFrom(char const*, char const*)>
c0014720:	83 c4 1c             	add    esp,0x1c
c0014723:	c3                   	ret    

c0014724 <EnvVarContainer::__loadUser()>:
c0014724:	c3                   	ret    
c0014725:	90                   	nop

c0014726 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001472a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014734:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014738:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001473b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001473f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014746:	90                   	nop
c0014747:	c3                   	ret    

c0014748 <EnvVarContainer::~EnvVarContainer()>:
c0014748:	83 ec 0c             	sub    esp,0xc
c001474b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001474f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014752:	85 c0                	test   eax,eax
c0014754:	74 1d                	je     c0014773 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001475a:	8b 00                	mov    eax,DWORD PTR [eax]
c001475c:	85 c0                	test   eax,eax
c001475e:	74 13                	je     c0014773 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014764:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014767:	83 ec 0c             	sub    esp,0xc
c001476a:	50                   	push   eax
c001476b:	e8 af 52 ff ff       	call   c0009a1f <free>
c0014770:	83 c4 10             	add    esp,0x10
c0014773:	90                   	nop
c0014774:	83 c4 0c             	add    esp,0xc
c0014777:	c3                   	ret    

c0014778 <Krnl::getEnv(Process*, char const*)>:
c0014778:	53                   	push   ebx
c0014779:	83 ec 08             	sub    esp,0x8
c001477c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014780:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014784:	39 05 50 94 02 c0    	cmp    DWORD PTR ds:0xc0029450,eax
c001478a:	74 04                	je     c0014790 <Krnl::getEnv(Process*, char const*)+0x18>
c001478c:	85 c0                	test   eax,eax
c001478e:	75 0b                	jne    c001479b <Krnl::getEnv(Process*, char const*)+0x23>
c0014790:	a1 d4 89 02 c0       	mov    eax,ds:0xc00289d4
c0014795:	85 c0                	test   eax,eax
c0014797:	75 19                	jne    c00147b2 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014799:	eb 27                	jmp    c00147c2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001479b:	52                   	push   edx
c001479c:	52                   	push   edx
c001479d:	53                   	push   ebx
c001479e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c00147a4:	e8 79 fc ff ff       	call   c0014422 <EnvVarContainer::getEnv(char const*)>
c00147a9:	83 c4 10             	add    esp,0x10
c00147ac:	85 c0                	test   eax,eax
c00147ae:	75 28                	jne    c00147d8 <Krnl::getEnv(Process*, char const*)+0x60>
c00147b0:	eb de                	jmp    c0014790 <Krnl::getEnv(Process*, char const*)+0x18>
c00147b2:	52                   	push   edx
c00147b3:	52                   	push   edx
c00147b4:	53                   	push   ebx
c00147b5:	50                   	push   eax
c00147b6:	e8 67 fc ff ff       	call   c0014422 <EnvVarContainer::getEnv(char const*)>
c00147bb:	83 c4 10             	add    esp,0x10
c00147be:	85 c0                	test   eax,eax
c00147c0:	75 16                	jne    c00147d8 <Krnl::getEnv(Process*, char const*)+0x60>
c00147c2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00147c6:	a1 d8 89 02 c0       	mov    eax,ds:0xc00289d8
c00147cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00147cf:	83 c4 08             	add    esp,0x8
c00147d2:	5b                   	pop    ebx
c00147d3:	e9 4a fc ff ff       	jmp    c0014422 <EnvVarContainer::getEnv(char const*)>
c00147d8:	83 c4 08             	add    esp,0x8
c00147db:	5b                   	pop    ebx
c00147dc:	c3                   	ret    

c00147dd <Krnl::setEnvSystem(char const*, char const*)>:
c00147dd:	83 ec 10             	sub    esp,0x10
c00147e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00147e8:	ff 35 d8 89 02 c0    	push   DWORD PTR ds:0xc00289d8
c00147ee:	e8 6d fc ff ff       	call   c0014460 <EnvVarContainer::setEnv(char const*, char const*)>
c00147f3:	83 c4 1c             	add    esp,0x1c
c00147f6:	c3                   	ret    

c00147f7 <Krnl::setEnvUser(char const*, char const*)>:
c00147f7:	a1 d4 89 02 c0       	mov    eax,ds:0xc00289d4
c00147fc:	85 c0                	test   eax,eax
c00147fe:	74 15                	je     c0014815 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0014800:	83 ec 10             	sub    esp,0x10
c0014803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014807:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001480b:	50                   	push   eax
c001480c:	e8 4f fc ff ff       	call   c0014460 <EnvVarContainer::setEnv(char const*, char const*)>
c0014811:	83 c4 1c             	add    esp,0x1c
c0014814:	c3                   	ret    
c0014815:	c3                   	ret    

c0014816 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0014816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001481a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0014820:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014824:	e9 37 fc ff ff       	jmp    c0014460 <EnvVarContainer::setEnv(char const*, char const*)>

c0014829 <Krnl::deleteEnvSystem(char const*)>:
c0014829:	c3                   	ret    

c001482a <Krnl::deleteEnvUser(char const*)>:
c001482a:	c3                   	ret    

c001482b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001482b:	c3                   	ret    

c001482c <Krnl::newProcessEnv(Process*)>:
c001482c:	83 ec 28             	sub    esp,0x28
c001482f:	6a 0c                	push   0xc
c0014831:	e8 d9 51 ff ff       	call   c0009a0f <malloc>
c0014836:	5a                   	pop    edx
c0014837:	59                   	pop    ecx
c0014838:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001483c:	50                   	push   eax
c001483d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014841:	e8 e0 fe ff ff       	call   c0014726 <EnvVarContainer::EnvVarContainer(Process*)>
c0014846:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001484a:	83 c4 2c             	add    esp,0x2c
c001484d:	c3                   	ret    

c001484e <Krnl::copyProcessEnv(Process*, Process*)>:
c001484e:	57                   	push   edi
c001484f:	56                   	push   esi
c0014850:	53                   	push   ebx
c0014851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014855:	83 ec 0c             	sub    esp,0xc
c0014858:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001485e:	6a 0c                	push   0xc
c0014860:	e8 aa 51 ff ff       	call   c0009a0f <malloc>
c0014865:	89 c3                	mov    ebx,eax
c0014867:	58                   	pop    eax
c0014868:	5a                   	pop    edx
c0014869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001486d:	53                   	push   ebx
c001486e:	e8 b3 fe ff ff       	call   c0014726 <EnvVarContainer::EnvVarContainer(Process*)>
c0014873:	8b 07                	mov    eax,DWORD PTR [edi]
c0014875:	89 03                	mov    DWORD PTR [ebx],eax
c0014877:	c1 e0 03             	shl    eax,0x3
c001487a:	89 04 24             	mov    DWORD PTR [esp],eax
c001487d:	e8 8d 51 ff ff       	call   c0009a0f <malloc>
c0014882:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014885:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014887:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001488a:	c1 e1 03             	shl    ecx,0x3
c001488d:	89 c7                	mov    edi,eax
c001488f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014891:	83 c4 10             	add    esp,0x10
c0014894:	89 d8                	mov    eax,ebx
c0014896:	5b                   	pop    ebx
c0014897:	5e                   	pop    esi
c0014898:	5f                   	pop    edi
c0014899:	c3                   	ret    

c001489a <Krnl::loadSystemEnv()>:
c001489a:	53                   	push   ebx
c001489b:	83 ec 14             	sub    esp,0x14
c001489e:	6a 0c                	push   0xc
c00148a0:	e8 6a 51 ff ff       	call   c0009a0f <malloc>
c00148a5:	89 c3                	mov    ebx,eax
c00148a7:	58                   	pop    eax
c00148a8:	5a                   	pop    edx
c00148a9:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c00148af:	53                   	push   ebx
c00148b0:	e8 71 fe ff ff       	call   c0014726 <EnvVarContainer::EnvVarContainer(Process*)>
c00148b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148b8:	89 1d d8 89 02 c0    	mov    DWORD PTR ds:0xc00289d8,ebx
c00148be:	e8 47 fe ff ff       	call   c001470a <EnvVarContainer::__loadSystem()>
c00148c3:	83 c4 18             	add    esp,0x18
c00148c6:	5b                   	pop    ebx
c00148c7:	c3                   	ret    

c00148c8 <Krnl::loadUserEnv()>:
c00148c8:	53                   	push   ebx
c00148c9:	83 ec 14             	sub    esp,0x14
c00148cc:	6a 0c                	push   0xc
c00148ce:	e8 3c 51 ff ff       	call   c0009a0f <malloc>
c00148d3:	89 c3                	mov    ebx,eax
c00148d5:	58                   	pop    eax
c00148d6:	5a                   	pop    edx
c00148d7:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c00148dd:	53                   	push   ebx
c00148de:	e8 43 fe ff ff       	call   c0014726 <EnvVarContainer::EnvVarContainer(Process*)>
c00148e3:	89 1d d4 89 02 c0    	mov    DWORD PTR ds:0xc00289d4,ebx
c00148e9:	83 c4 18             	add    esp,0x18
c00148ec:	5b                   	pop    ebx
c00148ed:	c3                   	ret    

c00148ee <Krnl::flushEnv()>:
c00148ee:	c3                   	ret    

c00148ef <Krnl::getProcessTotalEnvCount(Process*)>:
c00148ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00148f3:	8b 15 d4 89 02 c0    	mov    edx,DWORD PTR ds:0xc00289d4
c00148f9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00148ff:	a1 d8 89 02 c0       	mov    eax,ds:0xc00289d8
c0014904:	8b 00                	mov    eax,DWORD PTR [eax]
c0014906:	03 01                	add    eax,DWORD PTR [ecx]
c0014908:	85 d2                	test   edx,edx
c001490a:	74 02                	je     c001490e <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001490c:	03 02                	add    eax,DWORD PTR [edx]
c001490e:	c3                   	ret    

c001490f <Krnl::getProcessEnvPair(Process*, int)>:
c001490f:	57                   	push   edi
c0014910:	56                   	push   esi
c0014911:	8b 35 d4 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289d4
c0014917:	53                   	push   ebx
c0014918:	85 f6                	test   esi,esi
c001491a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001491e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014922:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014928:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001492c:	8b 01                	mov    eax,DWORD PTR [ecx]
c001492e:	75 16                	jne    c0014946 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0014930:	39 c2                	cmp    edx,eax
c0014932:	7c 16                	jl     c001494a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014934:	8b 0d d8 89 02 c0    	mov    ecx,DWORD PTR ds:0xc00289d8
c001493a:	8b 31                	mov    esi,DWORD PTR [ecx]
c001493c:	01 c6                	add    esi,eax
c001493e:	39 d6                	cmp    esi,edx
c0014940:	7e 3c                	jle    c001497e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014942:	29 c2                	sub    edx,eax
c0014944:	eb 04                	jmp    c001494a <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014946:	39 c2                	cmp    edx,eax
c0014948:	7d 05                	jge    c001494f <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001494a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001494d:	eb 20                	jmp    c001496f <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001494f:	8b 3e                	mov    edi,DWORD PTR [esi]
c0014951:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014954:	39 d1                	cmp    ecx,edx
c0014956:	7e 04                	jle    c001495c <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014958:	29 c2                	sub    edx,eax
c001495a:	eb 10                	jmp    c001496c <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001495c:	8b 35 d8 89 02 c0    	mov    esi,DWORD PTR ds:0xc00289d8
c0014962:	03 0e                	add    ecx,DWORD PTR [esi]
c0014964:	39 d1                	cmp    ecx,edx
c0014966:	7e 16                	jle    c001497e <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014968:	29 c2                	sub    edx,eax
c001496a:	29 fa                	sub    edx,edi
c001496c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001496f:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014972:	8b 02                	mov    eax,DWORD PTR [edx]
c0014974:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014977:	89 03                	mov    DWORD PTR [ebx],eax
c0014979:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001497c:	eb 1d                	jmp    c001499b <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001497e:	83 ec 0c             	sub    esp,0xc
c0014981:	68 1b 5a 02 c0       	push   0xc0025a1b
c0014986:	e8 18 00 00 00       	call   c00149a3 <Krnl::panic(char const*)>
c001498b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0014991:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014998:	83 c4 10             	add    esp,0x10
c001499b:	89 d8                	mov    eax,ebx
c001499d:	5b                   	pop    ebx
c001499e:	5e                   	pop    esi
c001499f:	5f                   	pop    edi
c00149a0:	c2 04 00             	ret    0x4

c00149a3 <Krnl::panic(char const*)>:
c00149a3:	53                   	push   ebx
c00149a4:	83 ec 10             	sub    esp,0x10
c00149a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00149ab:	fa                   	cli    
c00149ac:	c6 05 e4 89 02 c0 01 	mov    BYTE PTR ds:0xc00289e4,0x1
c00149b3:	53                   	push   ebx
c00149b4:	68 35 5a 02 c0       	push   0xc0025a35
c00149b9:	e8 3d 83 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00149be:	83 c4 0c             	add    esp,0xc
c00149c1:	6a 01                	push   0x1
c00149c3:	6a 0f                	push   0xf
c00149c5:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00149cb:	e8 98 5f ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00149d0:	59                   	pop    ecx
c00149d1:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00149d7:	e8 ae 64 ff ff       	call   c000ae8a <VgaText::clearScreen()>
c00149dc:	58                   	pop    eax
c00149dd:	5a                   	pop    edx
c00149de:	68 8c 5a 02 c0       	push   0xc0025a8c
c00149e3:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00149e9:	e8 ba 5f ff ff       	call   c000a9a8 <VgaText::setTitle(char*)>
c00149ee:	83 c4 0c             	add    esp,0xc
c00149f1:	6a 01                	push   0x1
c00149f3:	6a 0f                	push   0xf
c00149f5:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c00149fb:	e8 68 5f ff ff       	call   c000a968 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0014a00:	59                   	pop    ecx
c0014a01:	58                   	pop    eax
c0014a02:	68 4e 5a 02 c0       	push   0xc0025a4e
c0014a07:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014a0d:	e8 04 66 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a12:	58                   	pop    eax
c0014a13:	5a                   	pop    edx
c0014a14:	68 d8 5a 02 c0       	push   0xc0025ad8
c0014a19:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014a1f:	e8 f2 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a24:	59                   	pop    ecx
c0014a25:	58                   	pop    eax
c0014a26:	68 6a 5a 02 c0       	push   0xc0025a6a
c0014a2b:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014a31:	e8 e0 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a36:	58                   	pop    eax
c0014a37:	5a                   	pop    edx
c0014a38:	53                   	push   ebx
c0014a39:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014a3f:	e8 d2 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a44:	59                   	pop    ecx
c0014a45:	5b                   	pop    ebx
c0014a46:	68 8a 5a 02 c0       	push   0xc0025a8a
c0014a4b:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014a51:	e8 c0 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a56:	58                   	pop    eax
c0014a57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014a5b:	e8 19 31 00 00       	call   c0017b79 <Thr::getDriverNameFromAddress(unsigned long)>
c0014a60:	83 c4 10             	add    esp,0x10
c0014a63:	85 c0                	test   eax,eax
c0014a65:	0f 84 36 01 00 00    	je     c0014ba1 <Krnl::panic(char const*)+0x1fe>
c0014a6b:	83 ec 08             	sub    esp,0x8
c0014a6e:	89 c3                	mov    ebx,eax
c0014a70:	68 14 5b 02 c0       	push   0xc0025b14
c0014a75:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014a7b:	e8 96 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a80:	59                   	pop    ecx
c0014a81:	58                   	pop    eax
c0014a82:	68 6a 5a 02 c0       	push   0xc0025a6a
c0014a87:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014a8d:	e8 84 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014a92:	58                   	pop    eax
c0014a93:	5a                   	pop    edx
c0014a94:	53                   	push   ebx
c0014a95:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014a9b:	e8 76 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014aa0:	83 c4 10             	add    esp,0x10
c0014aa3:	83 ec 08             	sub    esp,0x8
c0014aa6:	68 89 5a 02 c0       	push   0xc0025a89
c0014aab:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014ab1:	e8 60 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ab6:	58                   	pop    eax
c0014ab7:	5a                   	pop    edx
c0014ab8:	68 6c 5b 02 c0       	push   0xc0025b6c
c0014abd:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014ac3:	e8 4e 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ac8:	59                   	pop    ecx
c0014ac9:	5b                   	pop    ebx
c0014aca:	68 ac 5b 02 c0       	push   0xc0025bac
c0014acf:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014ad5:	e8 3c 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014ada:	58                   	pop    eax
c0014adb:	5a                   	pop    edx
c0014adc:	68 75 5a 02 c0       	push   0xc0025a75
c0014ae1:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014ae7:	e8 2a 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014aec:	59                   	pop    ecx
c0014aed:	5b                   	pop    ebx
c0014aee:	68 f0 5b 02 c0       	push   0xc0025bf0
c0014af3:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014af9:	e8 18 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014afe:	58                   	pop    eax
c0014aff:	5a                   	pop    edx
c0014b00:	68 8d 5a 02 c0       	push   0xc0025a8d
c0014b05:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014b0b:	e8 06 65 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b10:	0f 20 c0             	mov    eax,cr0
c0014b13:	59                   	pop    ecx
c0014b14:	5b                   	pop    ebx
c0014b15:	50                   	push   eax
c0014b16:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014b1c:	e8 af 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b21:	58                   	pop    eax
c0014b22:	5a                   	pop    edx
c0014b23:	68 97 5a 02 c0       	push   0xc0025a97
c0014b28:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014b2e:	e8 e3 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b33:	0f 20 d0             	mov    eax,cr2
c0014b36:	59                   	pop    ecx
c0014b37:	5b                   	pop    ebx
c0014b38:	50                   	push   eax
c0014b39:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014b3f:	e8 8c 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b44:	58                   	pop    eax
c0014b45:	5a                   	pop    edx
c0014b46:	68 a1 5a 02 c0       	push   0xc0025aa1
c0014b4b:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014b51:	e8 c0 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b56:	0f 20 d8             	mov    eax,cr3
c0014b59:	59                   	pop    ecx
c0014b5a:	5b                   	pop    ebx
c0014b5b:	50                   	push   eax
c0014b5c:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014b62:	e8 69 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b67:	58                   	pop    eax
c0014b68:	5a                   	pop    edx
c0014b69:	68 b4 5a 02 c0       	push   0xc0025ab4
c0014b6e:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014b74:	e8 9d 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b79:	0f 20 e0             	mov    eax,cr4
c0014b7c:	59                   	pop    ecx
c0014b7d:	5b                   	pop    ebx
c0014b7e:	50                   	push   eax
c0014b7f:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014b85:	e8 46 64 ff ff       	call   c000afd0 <VgaText::putx(unsigned int)>
c0014b8a:	58                   	pop    eax
c0014b8b:	5a                   	pop    edx
c0014b8c:	68 be 5a 02 c0       	push   0xc0025abe
c0014b91:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014b97:	e8 7a 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014b9c:	83 c4 10             	add    esp,0x10
c0014b9f:	eb fe                	jmp    c0014b9f <Krnl::panic(char const*)+0x1fc>
c0014ba1:	51                   	push   ecx
c0014ba2:	51                   	push   ecx
c0014ba3:	68 40 5b 02 c0       	push   0xc0025b40
c0014ba8:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014bae:	e8 63 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bb3:	5b                   	pop    ebx
c0014bb4:	58                   	pop    eax
c0014bb5:	68 6a 5a 02 c0       	push   0xc0025a6a
c0014bba:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014bc0:	e8 51 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bc5:	58                   	pop    eax
c0014bc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014bcb:	5a                   	pop    edx
c0014bcc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014bcf:	83 c0 0c             	add    eax,0xc
c0014bd2:	50                   	push   eax
c0014bd3:	ff 35 84 7f 02 c0    	push   DWORD PTR ds:0xc0027f84
c0014bd9:	e8 38 64 ff ff       	call   c000b016 <VgaText::puts(char const*)>
c0014bde:	83 c4 10             	add    esp,0x10
c0014be1:	e9 bd fe ff ff       	jmp    c0014aa3 <Krnl::panic(char const*)+0x100>

c0014be6 <Krnl::powerThread(void*)>:
c0014be6:	53                   	push   ebx
c0014be7:	83 ec 08             	sub    esp,0x8
c0014bea:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0014bef:	48                   	dec    eax
c0014bf0:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0014bf5:	75 01                	jne    c0014bf8 <Krnl::powerThread(void*)+0x12>
c0014bf7:	fb                   	sti    
c0014bf8:	52                   	push   edx
c0014bf9:	52                   	push   edx
c0014bfa:	ff 35 44 8a 02 c0    	push   DWORD PTR ds:0xc0028a44
c0014c00:	68 16 5c 02 c0       	push   0xc0025c16
c0014c05:	e8 f1 80 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014c0a:	59                   	pop    ecx
c0014c0b:	8b 1d 34 8a 02 c0    	mov    ebx,DWORD PTR ds:0xc0028a34
c0014c11:	58                   	pop    eax
c0014c12:	c6 05 00 8a 02 c0 00 	mov    BYTE PTR ds:0xc0028a00,0x0
c0014c19:	53                   	push   ebx
c0014c1a:	68 20 5c 02 c0       	push   0xc0025c20
c0014c1f:	e8 d7 80 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014c24:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0014c2b:	e8 88 3c 00 00       	call   c00188b8 <sleep(unsigned int)>
c0014c30:	a1 44 8a 02 c0       	mov    eax,ds:0xc0028a44
c0014c35:	83 c4 10             	add    esp,0x10
c0014c38:	83 c0 0a             	add    eax,0xa
c0014c3b:	85 db                	test   ebx,ebx
c0014c3d:	a3 44 8a 02 c0       	mov    ds:0xc0028a44,eax
c0014c42:	74 b4                	je     c0014bf8 <Krnl::powerThread(void*)+0x12>
c0014c44:	39 d8                	cmp    eax,ebx
c0014c46:	7e b0                	jle    c0014bf8 <Krnl::powerThread(void*)+0x12>
c0014c48:	83 ec 0c             	sub    esp,0xc
c0014c4b:	68 38 5c 02 c0       	push   0xc0025c38
c0014c50:	e8 a6 80 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0014c55:	58                   	pop    eax
c0014c56:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0014c5c:	e8 5d 43 ff ff       	call   c0008fbe <Computer::sleep()>
c0014c61:	83 c4 10             	add    esp,0x10
c0014c64:	eb 92                	jmp    c0014bf8 <Krnl::powerThread(void*)+0x12>

c0014c66 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0014c66:	57                   	push   edi
c0014c67:	b9 09 00 00 00       	mov    ecx,0x9
c0014c6c:	56                   	push   esi
c0014c6d:	bf 20 8a 02 c0       	mov    edi,0xc0028a20
c0014c72:	fc                   	cld    
c0014c73:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014c77:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014c79:	5e                   	pop    esi
c0014c7a:	5f                   	pop    edi
c0014c7b:	c3                   	ret    

c0014c7c <Krnl::userIOReceived()>:
c0014c7c:	c7 05 44 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a44,0x0
c0014c86:	c3                   	ret    

c0014c87 <Krnl::handlePowerButton()>:
c0014c87:	83 ec 0c             	sub    esp,0xc
c0014c8a:	a1 20 8a 02 c0       	mov    eax,ds:0xc0028a20
c0014c8f:	83 f8 02             	cmp    eax,0x2
c0014c92:	75 10                	jne    c0014ca4 <Krnl::handlePowerButton()+0x1d>
c0014c94:	83 ec 0c             	sub    esp,0xc
c0014c97:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0014c9d:	e8 ec 42 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014ca2:	eb 11                	jmp    c0014cb5 <Krnl::handlePowerButton()+0x2e>
c0014ca4:	48                   	dec    eax
c0014ca5:	75 11                	jne    c0014cb8 <Krnl::handlePowerButton()+0x31>
c0014ca7:	83 ec 0c             	sub    esp,0xc
c0014caa:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0014cb0:	e8 09 43 ff ff       	call   c0008fbe <Computer::sleep()>
c0014cb5:	83 c4 10             	add    esp,0x10
c0014cb8:	83 c4 0c             	add    esp,0xc
c0014cbb:	c3                   	ret    

c0014cbc <Krnl::handleSleepButton()>:
c0014cbc:	83 ec 0c             	sub    esp,0xc
c0014cbf:	a1 24 8a 02 c0       	mov    eax,ds:0xc0028a24
c0014cc4:	83 f8 02             	cmp    eax,0x2
c0014cc7:	75 10                	jne    c0014cd9 <Krnl::handleSleepButton()+0x1d>
c0014cc9:	83 ec 0c             	sub    esp,0xc
c0014ccc:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0014cd2:	e8 b7 42 ff ff       	call   c0008f8e <Computer::shutdown()>
c0014cd7:	eb 11                	jmp    c0014cea <Krnl::handleSleepButton()+0x2e>
c0014cd9:	48                   	dec    eax
c0014cda:	75 11                	jne    c0014ced <Krnl::handleSleepButton()+0x31>
c0014cdc:	83 ec 0c             	sub    esp,0xc
c0014cdf:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c0014ce5:	e8 d4 42 ff ff       	call   c0008fbe <Computer::sleep()>
c0014cea:	83 c4 10             	add    esp,0x10
c0014ced:	83 c4 0c             	add    esp,0xc
c0014cf0:	c3                   	ret    

c0014cf1 <Krnl::setupPowerManager()>:
c0014cf1:	83 ec 0c             	sub    esp,0xc
c0014cf4:	c7 05 44 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a44,0x0
c0014cfe:	68 f0 00 00 00       	push   0xf0
c0014d03:	c6 05 00 8a 02 c0 00 	mov    BYTE PTR ds:0xc0028a00,0x0
c0014d0a:	6a 00                	push   0x0
c0014d0c:	68 e6 4b 01 c0       	push   0xc0014be6
c0014d11:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0014d17:	e8 78 36 00 00       	call   c0018394 <Process::createThread(void (*)(void*), void*, int)>
c0014d1c:	c7 05 20 8a 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028a20,0x2
c0014d26:	c7 05 24 8a 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028a24,0x1
c0014d30:	c7 05 28 8a 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028a28,0x3
c0014d3a:	c7 05 2c 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a2c,0x0
c0014d44:	c7 05 38 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a38,0x0
c0014d4e:	c7 05 30 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a30,0x0
c0014d58:	c7 05 3c 8a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028a3c,0x0
c0014d62:	c7 05 34 8a 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028a34,0x3c
c0014d6c:	c7 05 40 8a 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028a40,0x3c
c0014d76:	83 c4 1c             	add    esp,0x1c
c0014d79:	c3                   	ret    
c0014d7a:	66 90                	xchg   ax,ax

c0014d7c <Net::switchEndian16(unsigned short)>:
c0014d7c:	83 ec 04             	sub    esp,0x4
c0014d7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014d83:	66 89 04 24          	mov    WORD PTR [esp],ax
c0014d87:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014d8b:	c1 f8 08             	sar    eax,0x8
c0014d8e:	89 c2                	mov    edx,eax
c0014d90:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014d94:	c1 e0 08             	shl    eax,0x8
c0014d97:	09 d0                	or     eax,edx
c0014d99:	83 c4 04             	add    esp,0x4
c0014d9c:	c3                   	ret    
c0014d9d:	8d 76 00             	lea    esi,[esi+0x0]

c0014da0 <Net::switchEndian32(unsigned int)>:
c0014da0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014da4:	c1 e8 18             	shr    eax,0x18
c0014da7:	89 c2                	mov    edx,eax
c0014da9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dad:	c1 e0 08             	shl    eax,0x8
c0014db0:	25 00 00 ff 00       	and    eax,0xff0000
c0014db5:	09 c2                	or     edx,eax
c0014db7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dbb:	c1 e8 08             	shr    eax,0x8
c0014dbe:	25 00 ff 00 00       	and    eax,0xff00
c0014dc3:	09 c2                	or     edx,eax
c0014dc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014dc9:	c1 e0 18             	shl    eax,0x18
c0014dcc:	09 d0                	or     eax,edx
c0014dce:	c3                   	ret    
c0014dcf:	90                   	nop

c0014dd0 <Net::crc32Calc(unsigned char*, int)>:
c0014dd0:	83 ec 10             	sub    esp,0x10
c0014dd3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0014dd8:	75 0a                	jne    c0014de4 <Net::crc32Calc(unsigned char*, int)+0x14>
c0014dda:	b8 00 00 00 00       	mov    eax,0x0
c0014ddf:	e9 8c 00 00 00       	jmp    c0014e70 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014de4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0014de9:	7f 09                	jg     c0014df4 <Net::crc32Calc(unsigned char*, int)+0x24>
c0014deb:	b8 00 00 00 00       	mov    eax,0x0
c0014df0:	eb 7e                	jmp    c0014e70 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014df2:	66 90                	xchg   ax,ax
c0014df4:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0014dfc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014e08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0014e0c:	7d 5a                	jge    c0014e68 <Net::crc32Calc(unsigned char*, int)+0x98>
c0014e0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014e12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e16:	01 d0                	add    eax,edx
c0014e18:	8a 00                	mov    al,BYTE PTR [eax]
c0014e1a:	0f b6 c0             	movzx  eax,al
c0014e1d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0014e21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014e29:	8d 76 00             	lea    esi,[esi+0x0]
c0014e2c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0014e31:	7f 2d                	jg     c0014e60 <Net::crc32Calc(unsigned char*, int)+0x90>
c0014e33:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e37:	83 e0 01             	and    eax,0x1
c0014e3a:	74 10                	je     c0014e4c <Net::crc32Calc(unsigned char*, int)+0x7c>
c0014e3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e40:	d1 e8                	shr    eax,1
c0014e42:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0014e47:	eb 0b                	jmp    c0014e54 <Net::crc32Calc(unsigned char*, int)+0x84>
c0014e49:	8d 76 00             	lea    esi,[esi+0x0]
c0014e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e50:	d1 e8                	shr    eax,1
c0014e52:	66 90                	xchg   ax,ax
c0014e54:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e58:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014e5c:	eb ce                	jmp    c0014e2c <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014e5e:	66 90                	xchg   ax,ax
c0014e60:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014e64:	eb 9e                	jmp    c0014e04 <Net::crc32Calc(unsigned char*, int)+0x34>
c0014e66:	66 90                	xchg   ax,ax
c0014e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014e6c:	f7 d0                	not    eax
c0014e6e:	66 90                	xchg   ax,ax
c0014e70:	83 c4 10             	add    esp,0x10
c0014e73:	c3                   	ret    

c0014e74 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014e74:	57                   	push   edi
c0014e75:	56                   	push   esi
c0014e76:	53                   	push   ebx
c0014e77:	83 ec 60             	sub    esp,0x60
c0014e7a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014e81:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014e85:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014e8d:	8d 76 00             	lea    esi,[esi+0x0]
c0014e90:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014e95:	7f 1d                	jg     c0014eb4 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c0014e97:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014e9e:	8d 50 01             	lea    edx,[eax+0x1]
c0014ea1:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014ea8:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0014eab:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014eaf:	eb df                	jmp    c0014e90 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0014eb4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ebb:	8d 50 01             	lea    edx,[eax+0x1]
c0014ebe:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014ec5:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0014ec8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ecf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014ed3:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c0014ed7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014edb:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014ee3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ee7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014eeb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014eef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014ef3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014ef7:	89 c6                	mov    esi,eax
c0014ef9:	89 d7                	mov    edi,edx
c0014efb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014efd:	89 c8                	mov    eax,ecx
c0014eff:	89 fa                	mov    edx,edi
c0014f01:	89 f3                	mov    ebx,esi
c0014f03:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014f07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014f0b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014f0e:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014f16:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f1d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014f21:	8d 44 24 78          	lea    eax,[esp+0x78]
c0014f25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f29:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014f31:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014f35:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014f39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014f3d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014f41:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014f45:	89 c6                	mov    esi,eax
c0014f47:	89 d7                	mov    edi,edx
c0014f49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014f4b:	89 c8                	mov    eax,ecx
c0014f4d:	89 fa                	mov    edx,edi
c0014f4f:	89 f3                	mov    ebx,esi
c0014f51:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014f55:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014f59:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014f5d:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014f65:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014f6c:	0f b7 c0             	movzx  eax,ax
c0014f6f:	c1 f8 08             	sar    eax,0x8
c0014f72:	89 c1                	mov    ecx,eax
c0014f74:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f7b:	8d 50 01             	lea    edx,[eax+0x1]
c0014f7e:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014f85:	88 ca                	mov    dl,cl
c0014f87:	88 10                	mov    BYTE PTR [eax],dl
c0014f89:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014f90:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014f97:	8d 48 01             	lea    ecx,[eax+0x1]
c0014f9a:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014fa1:	88 10                	mov    BYTE PTR [eax],dl
c0014fa3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014fa7:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0014fab:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014fb2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c0014fb6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0014fba:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014fbe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014fc2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014fc6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014fca:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014fce:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014fd2:	89 c6                	mov    esi,eax
c0014fd4:	89 d7                	mov    edi,edx
c0014fd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014fd8:	89 c8                	mov    eax,ecx
c0014fda:	89 fa                	mov    edx,edi
c0014fdc:	89 f3                	mov    ebx,esi
c0014fde:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014fe2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014fe6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014fea:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014fee:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014ff5:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014ffc:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c0015000:	50                   	push   eax
c0015001:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0015005:	e8 c6 fd ff ff       	call   c0014dd0 <Net::crc32Calc(unsigned char*, int)>
c001500a:	83 c4 08             	add    esp,0x8
c001500d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0015011:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015015:	c1 e8 18             	shr    eax,0x18
c0015018:	89 c1                	mov    ecx,eax
c001501a:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015021:	8d 50 01             	lea    edx,[eax+0x1]
c0015024:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001502b:	88 ca                	mov    dl,cl
c001502d:	88 10                	mov    BYTE PTR [eax],dl
c001502f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015033:	c1 e8 10             	shr    eax,0x10
c0015036:	89 c1                	mov    ecx,eax
c0015038:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001503f:	8d 50 01             	lea    edx,[eax+0x1]
c0015042:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015049:	88 ca                	mov    dl,cl
c001504b:	88 10                	mov    BYTE PTR [eax],dl
c001504d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015051:	c1 e8 08             	shr    eax,0x8
c0015054:	89 c1                	mov    ecx,eax
c0015056:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001505d:	8d 50 01             	lea    edx,[eax+0x1]
c0015060:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0015067:	88 ca                	mov    dl,cl
c0015069:	88 10                	mov    BYTE PTR [eax],dl
c001506b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015072:	8d 50 01             	lea    edx,[eax+0x1]
c0015075:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001507c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0015080:	88 10                	mov    BYTE PTR [eax],dl
c0015082:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0015086:	83 c4 60             	add    esp,0x60
c0015089:	5b                   	pop    ebx
c001508a:	5e                   	pop    esi
c001508b:	5f                   	pop    edi
c001508c:	c3                   	ret    
c001508d:	8d 76 00             	lea    esi,[esi+0x0]

c0015090 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0015090:	57                   	push   edi
c0015091:	56                   	push   esi
c0015092:	53                   	push   ebx
c0015093:	83 ec 70             	sub    esp,0x70
c0015096:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001509d:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00150a1:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c00150a9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00150b0:	83 c0 0e             	add    eax,0xe
c00150b3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00150b7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00150be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00150c2:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00150ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00150ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00150d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00150da:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00150de:	89 c6                	mov    esi,eax
c00150e0:	89 d7                	mov    edi,edx
c00150e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00150e4:	89 c8                	mov    eax,ecx
c00150e6:	89 fa                	mov    edx,edi
c00150e8:	89 f3                	mov    ebx,esi
c00150ea:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00150ee:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00150f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00150f6:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c00150fe:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015105:	83 c0 08             	add    eax,0x8
c0015108:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c001510c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015113:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0015117:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c001511f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015123:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015127:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001512b:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001512f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0015133:	89 c6                	mov    esi,eax
c0015135:	89 d7                	mov    edi,edx
c0015137:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015139:	89 c8                	mov    eax,ecx
c001513b:	89 fa                	mov    edx,edi
c001513d:	89 f3                	mov    ebx,esi
c001513f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0015143:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0015147:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001514b:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0015153:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001515a:	8d 50 01             	lea    edx,[eax+0x1]
c001515d:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015164:	8a 00                	mov    al,BYTE PTR [eax]
c0015166:	0f b6 c0             	movzx  eax,al
c0015169:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c001516e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015175:	8d 50 01             	lea    edx,[eax+0x1]
c0015178:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001517f:	8a 00                	mov    al,BYTE PTR [eax]
c0015181:	0f b6 c0             	movzx  eax,al
c0015184:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0015189:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c001518e:	c1 e0 08             	shl    eax,0x8
c0015191:	89 c2                	mov    edx,eax
c0015193:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0015197:	09 d0                	or     eax,edx
c0015199:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00151a0:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c00151a4:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c00151ac:	75 46                	jne    c00151f4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c00151ae:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00151b5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00151b8:	66 3d dc 05          	cmp    ax,0x5dc
c00151bc:	77 16                	ja     c00151d4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c00151be:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00151c5:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00151c8:	0f b7 c0             	movzx  eax,ax
c00151cb:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00151d2:	eb 20                	jmp    c00151f4 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c00151d4:	83 ec 0c             	sub    esp,0xc
c00151d7:	68 48 5c 02 c0       	push   0xc0025c48
c00151dc:	e8 1a 7b ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00151e1:	83 c4 10             	add    esp,0x10
c00151e4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00151eb:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c00151ef:	e9 18 01 00 00       	jmp    c001530c <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c00151f4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00151fb:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0015202:	8b 12                	mov    edx,DWORD PTR [edx]
c0015204:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015208:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c001520f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0015213:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015217:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001521b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001521f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015223:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015227:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001522b:	89 c6                	mov    esi,eax
c001522d:	89 d7                	mov    edi,edx
c001522f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015231:	89 c8                	mov    eax,ecx
c0015233:	89 fa                	mov    edx,edi
c0015235:	89 f3                	mov    ebx,esi
c0015237:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001523b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001523f:	89 04 24             	mov    DWORD PTR [esp],eax
c0015242:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0015249:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0015250:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015257:	8d 50 01             	lea    edx,[eax+0x1]
c001525a:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015261:	8a 00                	mov    al,BYTE PTR [eax]
c0015263:	0f b6 c0             	movzx  eax,al
c0015266:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c001526a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0015271:	8d 50 01             	lea    edx,[eax+0x1]
c0015274:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c001527b:	8a 00                	mov    al,BYTE PTR [eax]
c001527d:	0f b6 c0             	movzx  eax,al
c0015280:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0015284:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001528b:	8d 50 01             	lea    edx,[eax+0x1]
c001528e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0015295:	8a 00                	mov    al,BYTE PTR [eax]
c0015297:	0f b6 c0             	movzx  eax,al
c001529a:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001529e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152a5:	8d 50 01             	lea    edx,[eax+0x1]
c00152a8:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00152af:	8a 00                	mov    al,BYTE PTR [eax]
c00152b1:	0f b6 c0             	movzx  eax,al
c00152b4:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00152b8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00152bc:	c1 e0 18             	shl    eax,0x18
c00152bf:	89 c2                	mov    edx,eax
c00152c1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00152c5:	c1 e0 10             	shl    eax,0x10
c00152c8:	09 c2                	or     edx,eax
c00152ca:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00152ce:	c1 e0 08             	shl    eax,0x8
c00152d1:	09 d0                	or     eax,edx
c00152d3:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c00152d7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00152db:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00152e2:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00152e6:	83 e8 04             	sub    eax,0x4
c00152e9:	83 ec 08             	sub    esp,0x8
c00152ec:	50                   	push   eax
c00152ed:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00152f1:	e8 da fa ff ff       	call   c0014dd0 <Net::crc32Calc(unsigned char*, int)>
c00152f6:	83 c4 10             	add    esp,0x10
c00152f9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00152fd:	0f 94 c2             	sete   dl
c0015300:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015307:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001530a:	90                   	nop
c001530b:	90                   	nop
c001530c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0015313:	83 c4 70             	add    esp,0x70
c0015316:	5b                   	pop    ebx
c0015317:	5e                   	pop    esi
c0015318:	5f                   	pop    edi
c0015319:	c2 04 00             	ret    0x4

c001531c <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001531c:	55                   	push   ebp
c001531d:	57                   	push   edi
c001531e:	56                   	push   esi
c001531f:	53                   	push   ebx
c0015320:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015326:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001532d:	8a 1e                	mov    bl,BYTE PTR [esi]
c001532f:	8d 6e 01             	lea    ebp,[esi+0x1]
c0015332:	80 fb 40             	cmp    bl,0x40
c0015335:	75 1b                	jne    c0015352 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0015337:	8a 16                	mov    dl,BYTE PTR [esi]
c0015339:	84 d2                	test   dl,dl
c001533b:	0f 84 f1 00 00 00    	je     c0015432 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015341:	8d 46 01             	lea    eax,[esi+0x1]
c0015344:	80 fa 3a             	cmp    dl,0x3a
c0015347:	74 04                	je     c001534d <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0015349:	89 c6                	mov    esi,eax
c001534b:	eb ea                	jmp    c0015337 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001534d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015350:	89 c6                	mov    esi,eax
c0015352:	50                   	push   eax
c0015353:	6a 40                	push   0x40
c0015355:	6a 00                	push   0x0
c0015357:	8d 44 24 24          	lea    eax,[esp+0x24]
c001535b:	50                   	push   eax
c001535c:	e8 23 b3 fe ff       	call   c0000684 <memset>
c0015361:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015368:	31 c0                	xor    eax,eax
c001536a:	83 c4 10             	add    esp,0x10
c001536d:	8a 0f                	mov    cl,BYTE PTR [edi]
c001536f:	84 c9                	test   cl,cl
c0015371:	0f 84 bb 00 00 00    	je     c0015432 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015377:	3d c7 00 00 00       	cmp    eax,0xc7
c001537c:	0f 8f b0 00 00 00    	jg     c0015432 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015382:	80 f9 0a             	cmp    cl,0xa
c0015385:	0f 85 98 00 00 00    	jne    c0015423 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001538b:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0015390:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0015394:	a8 df                	test   al,0xdf
c0015396:	0f 94 c1             	sete   cl
c0015399:	3c 23                	cmp    al,0x23
c001539b:	0f 94 c2             	sete   dl
c001539e:	08 d1                	or     cl,dl
c00153a0:	75 4a                	jne    c00153ec <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00153a2:	8d 50 f7             	lea    edx,[eax-0x9]
c00153a5:	80 fa 01             	cmp    dl,0x1
c00153a8:	76 42                	jbe    c00153ec <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00153aa:	3c 5b                	cmp    al,0x5b
c00153ac:	75 42                	jne    c00153f0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c00153ae:	80 fb 40             	cmp    bl,0x40
c00153b1:	75 39                	jne    c00153ec <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00153b3:	83 ec 0c             	sub    esp,0xc
c00153b6:	8d 54 24 65          	lea    edx,[esp+0x65]
c00153ba:	52                   	push   edx
c00153bb:	e8 e0 b2 fe ff       	call   c00006a0 <strlen>
c00153c0:	83 c4 10             	add    esp,0x10
c00153c3:	83 f8 3f             	cmp    eax,0x3f
c00153c6:	77 6a                	ja     c0015432 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00153c8:	50                   	push   eax
c00153c9:	50                   	push   eax
c00153ca:	8d 54 24 61          	lea    edx,[esp+0x61]
c00153ce:	52                   	push   edx
c00153cf:	8d 54 24 24          	lea    edx,[esp+0x24]
c00153d3:	52                   	push   edx
c00153d4:	e8 67 b3 fe ff       	call   c0000740 <strcpy>
c00153d9:	58                   	pop    eax
c00153da:	8d 54 24 24          	lea    edx,[esp+0x24]
c00153de:	52                   	push   edx
c00153df:	e8 bc b2 fe ff       	call   c00006a0 <strlen>
c00153e4:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00153e9:	83 c4 10             	add    esp,0x10
c00153ec:	31 d2                	xor    edx,edx
c00153ee:	eb 3a                	jmp    c001542a <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c00153f0:	80 fb 40             	cmp    bl,0x40
c00153f3:	74 06                	je     c00153fb <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c00153f5:	8d 44 24 58          	lea    eax,[esp+0x58]
c00153f9:	eb 20                	jmp    c001541b <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00153fb:	50                   	push   eax
c00153fc:	50                   	push   eax
c00153fd:	55                   	push   ebp
c00153fe:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015402:	50                   	push   eax
c0015403:	e8 c4 b3 fe ff       	call   c00007cc <strcmp>
c0015408:	83 c4 10             	add    esp,0x10
c001540b:	85 c0                	test   eax,eax
c001540d:	75 dd                	jne    c00153ec <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001540f:	eb e4                	jmp    c00153f5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0015411:	8d 50 01             	lea    edx,[eax+0x1]
c0015414:	80 f9 3d             	cmp    cl,0x3d
c0015417:	74 1d                	je     c0015436 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0015419:	89 d0                	mov    eax,edx
c001541b:	8a 08                	mov    cl,BYTE PTR [eax]
c001541d:	84 c9                	test   cl,cl
c001541f:	75 f0                	jne    c0015411 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0015421:	eb 0f                	jmp    c0015432 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0015423:	8d 50 01             	lea    edx,[eax+0x1]
c0015426:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001542a:	47                   	inc    edi
c001542b:	89 d0                	mov    eax,edx
c001542d:	e9 3b ff ff ff       	jmp    c001536d <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0015432:	31 c0                	xor    eax,eax
c0015434:	eb 33                	jmp    c0015469 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0015436:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001543a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001543d:	50                   	push   eax
c001543e:	50                   	push   eax
c001543f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015443:	50                   	push   eax
c0015444:	56                   	push   esi
c0015445:	e8 82 b3 fe ff       	call   c00007cc <strcmp>
c001544a:	83 c4 10             	add    esp,0x10
c001544d:	85 c0                	test   eax,eax
c001544f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015453:	75 97                	jne    c00153ec <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0015455:	51                   	push   ecx
c0015456:	51                   	push   ecx
c0015457:	52                   	push   edx
c0015458:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001545f:	e8 dc b2 fe ff       	call   c0000740 <strcpy>
c0015464:	83 c4 10             	add    esp,0x10
c0015467:	b0 01                	mov    al,0x1
c0015469:	81 c4 2c 01 00 00    	add    esp,0x12c
c001546f:	5b                   	pop    ebx
c0015470:	5e                   	pop    esi
c0015471:	5f                   	pop    edi
c0015472:	5d                   	pop    ebp
c0015473:	c3                   	ret    

c0015474 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015474:	57                   	push   edi
c0015475:	56                   	push   esi
c0015476:	53                   	push   ebx
c0015477:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001547d:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0015484:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001548b:	53                   	push   ebx
c001548c:	e8 0f b2 fe ff       	call   c00006a0 <strlen>
c0015491:	89 34 24             	mov    DWORD PTR [esp],esi
c0015494:	89 c7                	mov    edi,eax
c0015496:	e8 05 b2 fe ff       	call   c00006a0 <strlen>
c001549b:	83 c4 10             	add    esp,0x10
c001549e:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00154a2:	3d ff 00 00 00       	cmp    eax,0xff
c00154a7:	0f 87 d3 00 00 00    	ja     c0015580 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00154ad:	57                   	push   edi
c00154ae:	57                   	push   edi
c00154af:	56                   	push   esi
c00154b0:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00154b4:	56                   	push   esi
c00154b5:	e8 86 b2 fe ff       	call   c0000740 <strcpy>
c00154ba:	58                   	pop    eax
c00154bb:	5a                   	pop    edx
c00154bc:	68 ea 5f 02 c0       	push   0xc0025fea
c00154c1:	56                   	push   esi
c00154c2:	e8 b9 b3 fe ff       	call   c0000880 <strcat>
c00154c7:	59                   	pop    ecx
c00154c8:	5f                   	pop    edi
c00154c9:	53                   	push   ebx
c00154ca:	56                   	push   esi
c00154cb:	e8 b0 b3 fe ff       	call   c0000880 <strcat>
c00154d0:	58                   	pop    eax
c00154d1:	5a                   	pop    edx
c00154d2:	68 94 5c 02 c0       	push   0xc0025c94
c00154d7:	56                   	push   esi
c00154d8:	e8 a3 b3 fe ff       	call   c0000880 <strcat>
c00154dd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00154e4:	e8 26 45 ff ff       	call   c0009a0f <malloc>
c00154e9:	83 c4 0c             	add    esp,0xc
c00154ec:	89 c3                	mov    ebx,eax
c00154ee:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c00154f4:	56                   	push   esi
c00154f5:	50                   	push   eax
c00154f6:	e8 6b 7d ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00154fb:	83 c4 10             	add    esp,0x10
c00154fe:	85 db                	test   ebx,ebx
c0015500:	74 7e                	je     c0015580 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0015502:	51                   	push   ecx
c0015503:	51                   	push   ecx
c0015504:	6a 01                	push   0x1
c0015506:	53                   	push   ebx
c0015507:	e8 34 7e ff ff       	call   c000d340 <File::open(FileOpenMode)>
c001550c:	83 c4 10             	add    esp,0x10
c001550f:	85 c0                	test   eax,eax
c0015511:	74 08                	je     c001551b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0015513:	83 ec 0c             	sub    esp,0xc
c0015516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015518:	53                   	push   ebx
c0015519:	eb 5f                	jmp    c001557a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001551b:	52                   	push   edx
c001551c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015520:	50                   	push   eax
c0015521:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015525:	50                   	push   eax
c0015526:	53                   	push   ebx
c0015527:	e8 c0 80 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c001552c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015530:	83 c4 10             	add    esp,0x10
c0015533:	89 c1                	mov    ecx,eax
c0015535:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0015539:	74 31                	je     c001556c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001553b:	83 ec 0c             	sub    esp,0xc
c001553e:	50                   	push   eax
c001553f:	e8 cb 44 ff ff       	call   c0009a0f <malloc>
c0015544:	89 c6                	mov    esi,eax
c0015546:	58                   	pop    eax
c0015547:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015549:	8d 54 24 20          	lea    edx,[esp+0x20]
c001554d:	52                   	push   edx
c001554e:	56                   	push   esi
c001554f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015553:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0015557:	53                   	push   ebx
c0015558:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001555b:	83 c4 20             	add    esp,0x20
c001555e:	85 c0                	test   eax,eax
c0015560:	75 0a                	jne    c001556c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0015562:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015566:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001556a:	74 18                	je     c0015584 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001556c:	83 ec 0c             	sub    esp,0xc
c001556f:	53                   	push   ebx
c0015570:	e8 29 7e ff ff       	call   c000d39e <File::close()>
c0015575:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015577:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001557a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001557d:	83 c4 10             	add    esp,0x10
c0015580:	31 c0                	xor    eax,eax
c0015582:	eb 3b                	jmp    c00155bf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0015584:	83 ec 0c             	sub    esp,0xc
c0015587:	53                   	push   ebx
c0015588:	e8 11 7e ff ff       	call   c000d39e <File::close()>
c001558d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001558f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015592:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015595:	83 c4 0c             	add    esp,0xc
c0015598:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001559f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00155a6:	56                   	push   esi
c00155a7:	e8 70 fd ff ff       	call   c001531c <Reg::findLineFromLoadedData(char*, char*, char*)>
c00155ac:	89 34 24             	mov    DWORD PTR [esp],esi
c00155af:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00155b3:	e8 67 44 ff ff       	call   c0009a1f <free>
c00155b8:	83 c4 10             	add    esp,0x10
c00155bb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00155bf:	81 c4 20 01 00 00    	add    esp,0x120
c00155c5:	5b                   	pop    ebx
c00155c6:	5e                   	pop    esi
c00155c7:	5f                   	pop    edi
c00155c8:	c3                   	ret    

c00155c9 <Reg::getLine(char*, char*, char*)>:
c00155c9:	57                   	push   edi
c00155ca:	56                   	push   esi
c00155cb:	53                   	push   ebx
c00155cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00155d0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00155d4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00155d8:	57                   	push   edi
c00155d9:	56                   	push   esi
c00155da:	53                   	push   ebx
c00155db:	68 99 5c 02 c0       	push   0xc0025c99
c00155e0:	e8 8f fe ff ff       	call   c0015474 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00155e5:	83 c4 10             	add    esp,0x10
c00155e8:	84 c0                	test   al,al
c00155ea:	75 10                	jne    c00155fc <Reg::getLine(char*, char*, char*)+0x33>
c00155ec:	57                   	push   edi
c00155ed:	56                   	push   esi
c00155ee:	53                   	push   ebx
c00155ef:	68 be 5c 02 c0       	push   0xc0025cbe
c00155f4:	e8 7b fe ff ff       	call   c0015474 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00155f9:	83 c4 10             	add    esp,0x10
c00155fc:	5b                   	pop    ebx
c00155fd:	5e                   	pop    esi
c00155fe:	5f                   	pop    edi
c00155ff:	c3                   	ret    

c0015600 <Reg::readInt(char*, char*, int*)>:
c0015600:	55                   	push   ebp
c0015601:	57                   	push   edi
c0015602:	56                   	push   esi
c0015603:	53                   	push   ebx
c0015604:	81 ec f0 00 00 00    	sub    esp,0xf0
c001560a:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001560e:	57                   	push   edi
c001560f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015616:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001561d:	e8 a7 ff ff ff       	call   c00155c9 <Reg::getLine(char*, char*, char*)>
c0015622:	83 c4 10             	add    esp,0x10
c0015625:	84 c0                	test   al,al
c0015627:	0f 84 b3 00 00 00    	je     c00156e0 <Reg::readInt(char*, char*, int*)+0xe0>
c001562d:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015631:	80 fa 2b             	cmp    dl,0x2b
c0015634:	74 0c                	je     c0015642 <Reg::readInt(char*, char*, int*)+0x42>
c0015636:	80 fa 2d             	cmp    dl,0x2d
c0015639:	75 0e                	jne    c0015649 <Reg::readInt(char*, char*, int*)+0x49>
c001563b:	ba 01 00 00 00       	mov    edx,0x1
c0015640:	eb 0b                	jmp    c001564d <Reg::readInt(char*, char*, int*)+0x4d>
c0015642:	ba 01 00 00 00       	mov    edx,0x1
c0015647:	eb 02                	jmp    c001564b <Reg::readInt(char*, char*, int*)+0x4b>
c0015649:	31 d2                	xor    edx,edx
c001564b:	31 c0                	xor    eax,eax
c001564d:	be 0a 00 00 00       	mov    esi,0xa
c0015652:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015657:	75 20                	jne    c0015679 <Reg::readInt(char*, char*, int*)+0x79>
c0015659:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001565d:	80 f9 78             	cmp    cl,0x78
c0015660:	75 0a                	jne    c001566c <Reg::readInt(char*, char*, int*)+0x6c>
c0015662:	83 c2 02             	add    edx,0x2
c0015665:	be 10 00 00 00       	mov    esi,0x10
c001566a:	eb 0d                	jmp    c0015679 <Reg::readInt(char*, char*, int*)+0x79>
c001566c:	80 f9 62             	cmp    cl,0x62
c001566f:	75 08                	jne    c0015679 <Reg::readInt(char*, char*, int*)+0x79>
c0015671:	83 c2 02             	add    edx,0x2
c0015674:	be 02 00 00 00       	mov    esi,0x2
c0015679:	01 d7                	add    edi,edx
c001567b:	31 d2                	xor    edx,edx
c001567d:	8a 1f                	mov    bl,BYTE PTR [edi]
c001567f:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015683:	80 fb 0d             	cmp    bl,0xd
c0015686:	0f 94 c3             	sete   bl
c0015689:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001568e:	0f 94 c1             	sete   cl
c0015691:	08 cb                	or     bl,cl
c0015693:	75 3a                	jne    c00156cf <Reg::readInt(char*, char*, int*)+0xcf>
c0015695:	0f af d6             	imul   edx,esi
c0015698:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001569d:	83 fe 10             	cmp    esi,0x10
c00156a0:	75 26                	jne    c00156c8 <Reg::readInt(char*, char*, int*)+0xc8>
c00156a2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00156a6:	8d 69 bf             	lea    ebp,[ecx-0x41]
c00156a9:	89 e9                	mov    ecx,ebp
c00156ab:	80 f9 05             	cmp    cl,0x5
c00156ae:	77 06                	ja     c00156b6 <Reg::readInt(char*, char*, int*)+0xb6>
c00156b0:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c00156b4:	eb 16                	jmp    c00156cc <Reg::readInt(char*, char*, int*)+0xcc>
c00156b6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00156ba:	83 e9 61             	sub    ecx,0x61
c00156bd:	80 f9 05             	cmp    cl,0x5
c00156c0:	77 06                	ja     c00156c8 <Reg::readInt(char*, char*, int*)+0xc8>
c00156c2:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c00156c6:	eb 04                	jmp    c00156cc <Reg::readInt(char*, char*, int*)+0xcc>
c00156c8:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c00156cc:	47                   	inc    edi
c00156cd:	eb ae                	jmp    c001567d <Reg::readInt(char*, char*, int*)+0x7d>
c00156cf:	84 c0                	test   al,al
c00156d1:	74 02                	je     c00156d5 <Reg::readInt(char*, char*, int*)+0xd5>
c00156d3:	f7 da                	neg    edx
c00156d5:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00156dc:	89 10                	mov    DWORD PTR [eax],edx
c00156de:	88 d8                	mov    al,bl
c00156e0:	81 c4 ec 00 00 00    	add    esp,0xec
c00156e6:	5b                   	pop    ebx
c00156e7:	5e                   	pop    esi
c00156e8:	5f                   	pop    edi
c00156e9:	5d                   	pop    ebp
c00156ea:	c3                   	ret    

c00156eb <Reg::readString(char*, char*, char*, int)>:
c00156eb:	57                   	push   edi
c00156ec:	56                   	push   esi
c00156ed:	53                   	push   ebx
c00156ee:	81 ec d4 00 00 00    	sub    esp,0xd4
c00156f4:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00156fb:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00156ff:	57                   	push   edi
c0015700:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015707:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001570e:	e8 b6 fe ff ff       	call   c00155c9 <Reg::getLine(char*, char*, char*)>
c0015713:	83 c4 10             	add    esp,0x10
c0015716:	89 c6                	mov    esi,eax
c0015718:	84 c0                	test   al,al
c001571a:	74 44                	je     c0015760 <Reg::readString(char*, char*, char*, int)+0x75>
c001571c:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015723:	31 c0                	xor    eax,eax
c0015725:	4a                   	dec    edx
c0015726:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015729:	84 c9                	test   cl,cl
c001572b:	74 0f                	je     c001573c <Reg::readString(char*, char*, char*, int)+0x51>
c001572d:	39 c2                	cmp    edx,eax
c001572f:	7e 0b                	jle    c001573c <Reg::readString(char*, char*, char*, int)+0x51>
c0015731:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015734:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015739:	40                   	inc    eax
c001573a:	eb ea                	jmp    c0015726 <Reg::readString(char*, char*, char*, int)+0x3b>
c001573c:	83 ec 0c             	sub    esp,0xc
c001573f:	53                   	push   ebx
c0015740:	e8 5b af fe ff       	call   c00006a0 <strlen>
c0015745:	83 c4 10             	add    esp,0x10
c0015748:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001574d:	75 11                	jne    c0015760 <Reg::readString(char*, char*, char*, int)+0x75>
c001574f:	83 ec 0c             	sub    esp,0xc
c0015752:	53                   	push   ebx
c0015753:	e8 48 af fe ff       	call   c00006a0 <strlen>
c0015758:	83 c4 10             	add    esp,0x10
c001575b:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015760:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015766:	89 f0                	mov    eax,esi
c0015768:	5b                   	pop    ebx
c0015769:	5e                   	pop    esi
c001576a:	5f                   	pop    edi
c001576b:	c3                   	ret    

c001576c <Reg::readBool(char*, char*, bool*)>:
c001576c:	83 ec 20             	sub    esp,0x20
c001576f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015773:	50                   	push   eax
c0015774:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015778:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001577c:	e8 7f fe ff ff       	call   c0015600 <Reg::readInt(char*, char*, int*)>
c0015781:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015786:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001578a:	0f 95 02             	setne  BYTE PTR [edx]
c001578d:	83 c4 2c             	add    esp,0x2c
c0015790:	c3                   	ret    

c0015791 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015791:	53                   	push   ebx
c0015792:	83 ec 1c             	sub    esp,0x1c
c0015795:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015799:	8d 44 24 13          	lea    eax,[esp+0x13]
c001579d:	50                   	push   eax
c001579e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157a6:	e8 c1 ff ff ff       	call   c001576c <Reg::readBool(char*, char*, bool*)>
c00157ab:	83 c4 10             	add    esp,0x10
c00157ae:	84 c0                	test   al,al
c00157b0:	74 04                	je     c00157b6 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c00157b2:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c00157b6:	88 d8                	mov    al,bl
c00157b8:	83 c4 18             	add    esp,0x18
c00157bb:	5b                   	pop    ebx
c00157bc:	c3                   	ret    

c00157bd <Reg::readIntWithDefault(char*, char*, int)>:
c00157bd:	53                   	push   ebx
c00157be:	83 ec 1c             	sub    esp,0x1c
c00157c1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00157c5:	8d 44 24 10          	lea    eax,[esp+0x10]
c00157c9:	50                   	push   eax
c00157ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157d2:	e8 29 fe ff ff       	call   c0015600 <Reg::readInt(char*, char*, int*)>
c00157d7:	83 c4 10             	add    esp,0x10
c00157da:	84 c0                	test   al,al
c00157dc:	74 04                	je     c00157e2 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00157de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00157e2:	89 d8                	mov    eax,ebx
c00157e4:	83 c4 18             	add    esp,0x18
c00157e7:	5b                   	pop    ebx
c00157e8:	c3                   	ret    

c00157e9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00157e9:	57                   	push   edi
c00157ea:	56                   	push   esi
c00157eb:	56                   	push   esi
c00157ec:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00157f0:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00157f4:	56                   	push   esi
c00157f5:	57                   	push   edi
c00157f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00157fe:	e8 e8 fe ff ff       	call   c00156eb <Reg::readString(char*, char*, char*, int)>
c0015803:	83 c4 10             	add    esp,0x10
c0015806:	84 c0                	test   al,al
c0015808:	75 1a                	jne    c0015824 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001580a:	51                   	push   ecx
c001580b:	56                   	push   esi
c001580c:	6a 00                	push   0x0
c001580e:	57                   	push   edi
c001580f:	e8 70 ae fe ff       	call   c0000684 <memset>
c0015814:	8d 4e ff             	lea    ecx,[esi-0x1]
c0015817:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001581b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001581d:	83 c4 10             	add    esp,0x10
c0015820:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0015824:	89 f8                	mov    eax,edi
c0015826:	5a                   	pop    edx
c0015827:	5e                   	pop    esi
c0015828:	5f                   	pop    edi
c0015829:	c3                   	ret    

c001582a <Sys::eject(regs*)>:
c001582a:	83 ec 0c             	sub    esp,0xc
c001582d:	83 ca ff             	or     edx,0xffffffff
c0015830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015834:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0015837:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001583c:	83 e9 41             	sub    ecx,0x41
c001583f:	83 f9 19             	cmp    ecx,0x19
c0015842:	77 18                	ja     c001585c <Sys::eject(regs*)+0x32>
c0015844:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c001584b:	85 c9                	test   ecx,ecx
c001584d:	74 0d                	je     c001585c <Sys::eject(regs*)+0x32>
c001584f:	83 ec 0c             	sub    esp,0xc
c0015852:	51                   	push   ecx
c0015853:	e8 62 ac ff ff       	call   c00104ba <LogicalDisk::eject()>
c0015858:	83 c4 10             	add    esp,0x10
c001585b:	99                   	cdq    
c001585c:	83 c4 0c             	add    esp,0xc
c001585f:	c3                   	ret    

c0015860 <Sys::exit(regs*)>:
c0015860:	83 ec 18             	sub    esp,0x18
c0015863:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015867:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001586a:	e8 59 36 00 00       	call   c0018ec8 <terminateTask(int)>
c001586f:	83 c8 ff             	or     eax,0xffffffff
c0015872:	83 c4 1c             	add    esp,0x1c
c0015875:	89 c2                	mov    edx,eax
c0015877:	c3                   	ret    

c0015878 <Sys::getCwd(regs*)>:
c0015878:	83 ec 10             	sub    esp,0x10
c001587b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001587f:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015882:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015885:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001588a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001588d:	e8 d6 77 ff ff       	call   c000d068 <Fs::getcwd(Process*, char*, int)>
c0015892:	83 c4 1c             	add    esp,0x1c
c0015895:	99                   	cdq    
c0015896:	c3                   	ret    

c0015897 <Sys::getPID(regs*)>:
c0015897:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001589c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001589f:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a1:	99                   	cdq    
c00158a2:	c3                   	ret    

c00158a3 <Sys::getRAMData(regs*)>:
c00158a3:	8b 0d 38 7f 02 c0    	mov    ecx,DWORD PTR ds:0xc0027f38
c00158a9:	69 05 34 7f 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0027f34,0xc8
c00158b3:	99                   	cdq    
c00158b4:	f7 f9                	idiv   ecx
c00158b6:	c1 e0 18             	shl    eax,0x18
c00158b9:	09 c8                	or     eax,ecx
c00158bb:	99                   	cdq    
c00158bc:	c3                   	ret    

c00158bd <Sys::getVGAPtr(regs*)>:
c00158bd:	55                   	push   ebp
c00158be:	57                   	push   edi
c00158bf:	56                   	push   esi
c00158c0:	53                   	push   ebx
c00158c1:	83 ec 18             	sub    esp,0x18
c00158c4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00158c8:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00158cb:	e8 fc 30 00 00       	call   c00189cc <Thr::processFromPID(int)>
c00158d0:	83 c4 10             	add    esp,0x10
c00158d3:	89 c1                	mov    ecx,eax
c00158d5:	b8 01 00 00 00       	mov    eax,0x1
c00158da:	85 c9                	test   ecx,ecx
c00158dc:	74 59                	je     c0015937 <Sys::getVGAPtr(regs*)+0x7a>
c00158de:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c00158e4:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00158e8:	74 0c                	je     c00158f6 <Sys::getVGAPtr(regs*)+0x39>
c00158ea:	83 ec 0c             	sub    esp,0xc
c00158ed:	53                   	push   ebx
c00158ee:	e8 16 52 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c00158f3:	83 c4 10             	add    esp,0x10
c00158f6:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00158f9:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00158fc:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0015901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015903:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0015906:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015909:	81 c3 82 00 00 00    	add    ebx,0x82
c001590f:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0015915:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015918:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001591b:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0015921:	50                   	push   eax
c0015922:	50                   	push   eax
c0015923:	53                   	push   ebx
c0015924:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0015927:	05 a8 0f 00 00       	add    eax,0xfa8
c001592c:	50                   	push   eax
c001592d:	e8 0e ae fe ff       	call   c0000740 <strcpy>
c0015932:	83 c4 10             	add    esp,0x10
c0015935:	31 c0                	xor    eax,eax
c0015937:	83 c4 0c             	add    esp,0xc
c001593a:	31 d2                	xor    edx,edx
c001593c:	5b                   	pop    ebx
c001593d:	5e                   	pop    esi
c001593e:	5f                   	pop    edi
c001593f:	5d                   	pop    ebp
c0015940:	c3                   	ret    

c0015941 <Sys::loadDLL(regs*)>:
c0015941:	56                   	push   esi
c0015942:	53                   	push   ebx
c0015943:	31 d2                	xor    edx,edx
c0015945:	51                   	push   ecx
c0015946:	b8 01 00 00 00       	mov    eax,0x1
c001594b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001594f:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015953:	0f 84 8c 00 00 00    	je     c00159e5 <Sys::loadDLL(regs*)+0xa4>
c0015959:	83 ec 0c             	sub    esp,0xc
c001595c:	68 14 01 00 00       	push   0x114
c0015961:	e8 a9 40 ff ff       	call   c0009a0f <malloc>
c0015966:	83 c4 0c             	add    esp,0xc
c0015969:	89 c3                	mov    ebx,eax
c001596b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015970:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015973:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015976:	53                   	push   ebx
c0015977:	e8 ea 78 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001597c:	83 c4 10             	add    esp,0x10
c001597f:	31 d2                	xor    edx,edx
c0015981:	b8 02 00 00 00       	mov    eax,0x2
c0015986:	85 db                	test   ebx,ebx
c0015988:	74 5b                	je     c00159e5 <Sys::loadDLL(regs*)+0xa4>
c001598a:	83 ec 0c             	sub    esp,0xc
c001598d:	53                   	push   ebx
c001598e:	e8 1b 7c ff ff       	call   c000d5ae <File::exists()>
c0015993:	83 c4 10             	add    esp,0x10
c0015996:	84 c0                	test   al,al
c0015998:	8b 03                	mov    eax,DWORD PTR [ebx]
c001599a:	75 11                	jne    c00159ad <Sys::loadDLL(regs*)+0x6c>
c001599c:	83 ec 0c             	sub    esp,0xc
c001599f:	53                   	push   ebx
c00159a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159a3:	83 c4 10             	add    esp,0x10
c00159a6:	b8 03 00 00 00       	mov    eax,0x3
c00159ab:	eb 36                	jmp    c00159e3 <Sys::loadDLL(regs*)+0xa2>
c00159ad:	83 ec 0c             	sub    esp,0xc
c00159b0:	53                   	push   ebx
c00159b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159b4:	58                   	pop    eax
c00159b5:	5a                   	pop    edx
c00159b6:	6a 00                	push   0x0
c00159b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00159bb:	e8 0a 22 00 00       	call   c0017bca <Thr::loadDLL(char const*, bool)>
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	89 c1                	mov    ecx,eax
c00159c5:	31 d2                	xor    edx,edx
c00159c7:	b8 04 00 00 00       	mov    eax,0x4
c00159cc:	85 c9                	test   ecx,ecx
c00159ce:	74 15                	je     c00159e5 <Sys::loadDLL(regs*)+0xa4>
c00159d0:	53                   	push   ebx
c00159d1:	53                   	push   ebx
c00159d2:	ff 35 08 7f 02 c0    	push   DWORD PTR ds:0xc0027f08
c00159d8:	51                   	push   ecx
c00159d9:	e8 1d 24 00 00       	call   c0017dfb <Thr::executeDLL(unsigned long, void*)>
c00159de:	83 c4 10             	add    esp,0x10
c00159e1:	31 c0                	xor    eax,eax
c00159e3:	31 d2                	xor    edx,edx
c00159e5:	59                   	pop    ecx
c00159e6:	5b                   	pop    ebx
c00159e7:	5e                   	pop    esi
c00159e8:	c3                   	ret    

c00159e9 <Sys::read(regs*)>:
c00159e9:	57                   	push   edi
c00159ea:	56                   	push   esi
c00159eb:	53                   	push   ebx
c00159ec:	83 ec 10             	sub    esp,0x10
c00159ef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00159f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159f6:	83 f8 02             	cmp    eax,0x2
c00159f9:	77 10                	ja     c0015a0b <Sys::read(regs*)+0x22>
c00159fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a03:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015a09:	eb 0e                	jmp    c0015a19 <Sys::read(regs*)+0x30>
c0015a0b:	83 ec 0c             	sub    esp,0xc
c0015a0e:	50                   	push   eax
c0015a0f:	e8 6b 5e ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015a14:	83 c4 10             	add    esp,0x10
c0015a17:	89 c1                	mov    ecx,eax
c0015a19:	83 c8 ff             	or     eax,0xffffffff
c0015a1c:	85 c9                	test   ecx,ecx
c0015a1e:	89 c2                	mov    edx,eax
c0015a20:	74 28                	je     c0015a4a <Sys::read(regs*)+0x61>
c0015a22:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015a2a:	31 ff                	xor    edi,edi
c0015a2c:	83 ec 0c             	sub    esp,0xc
c0015a2f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015a31:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015a35:	52                   	push   edx
c0015a36:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a39:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015a3c:	57                   	push   edi
c0015a3d:	56                   	push   esi
c0015a3e:	51                   	push   ecx
c0015a3f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015a42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015a46:	83 c4 20             	add    esp,0x20
c0015a49:	99                   	cdq    
c0015a4a:	83 c4 10             	add    esp,0x10
c0015a4d:	5b                   	pop    ebx
c0015a4e:	5e                   	pop    esi
c0015a4f:	5f                   	pop    edi
c0015a50:	c3                   	ret    

c0015a51 <Sys::sbrk(regs*)>:
c0015a51:	56                   	push   esi
c0015a52:	53                   	push   ebx
c0015a53:	50                   	push   eax
c0015a54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015a5d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a60:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015a63:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0015a69:	85 db                	test   ebx,ebx
c0015a6b:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015a6e:	74 02                	je     c0015a72 <Sys::sbrk(regs*)+0x21>
c0015a70:	79 06                	jns    c0015a78 <Sys::sbrk(regs*)+0x27>
c0015a72:	89 f0                	mov    eax,esi
c0015a74:	31 d2                	xor    edx,edx
c0015a76:	eb 2a                	jmp    c0015aa2 <Sys::sbrk(regs*)+0x51>
c0015a78:	83 c8 ff             	or     eax,0xffffffff
c0015a7b:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015a81:	89 c2                	mov    edx,eax
c0015a83:	77 1d                	ja     c0015aa2 <Sys::sbrk(regs*)+0x51>
c0015a85:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015a8b:	50                   	push   eax
c0015a8c:	c1 ea 0c             	shr    edx,0xc
c0015a8f:	68 07 0c 00 00       	push   0xc07
c0015a94:	52                   	push   edx
c0015a95:	51                   	push   ecx
c0015a96:	e8 e3 66 ff ff       	call   c000c17e <VAS::allocatePages(int, int)>
c0015a9b:	89 f0                	mov    eax,esi
c0015a9d:	31 d2                	xor    edx,edx
c0015a9f:	83 c4 10             	add    esp,0x10
c0015aa2:	59                   	pop    ecx
c0015aa3:	5b                   	pop    ebx
c0015aa4:	5e                   	pop    esi
c0015aa5:	c3                   	ret    

c0015aa6 <Sys::setCwd(regs*)>:
c0015aa6:	83 ec 14             	sub    esp,0x14
c0015aa9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015aad:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015ab0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ab5:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015ab8:	e8 90 7b ff ff       	call   c000d64d <Fs::setcwd(Process*, char*)>
c0015abd:	83 c4 1c             	add    esp,0x1c
c0015ac0:	99                   	cdq    
c0015ac1:	c3                   	ret    

c0015ac2 <Sys::setTime(regs*)>:
c0015ac2:	55                   	push   ebp
c0015ac3:	31 c9                	xor    ecx,ecx
c0015ac5:	57                   	push   edi
c0015ac6:	bd 0c 00 00 00       	mov    ebp,0xc
c0015acb:	56                   	push   esi
c0015acc:	53                   	push   ebx
c0015acd:	31 db                	xor    ebx,ebx
c0015acf:	83 ec 10             	sub    esp,0x10
c0015ad2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ad6:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015ad9:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015adc:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015adf:	89 c2                	mov    edx,eax
c0015ae1:	66 81 ef 6c 07       	sub    di,0x76c
c0015ae6:	83 e2 1f             	and    edx,0x1f
c0015ae9:	c1 e7 10             	shl    edi,0x10
c0015aec:	42                   	inc    edx
c0015aed:	c1 e8 05             	shr    eax,0x5
c0015af0:	88 d1                	mov    cl,dl
c0015af2:	31 d2                	xor    edx,edx
c0015af4:	f7 f5                	div    ebp
c0015af6:	89 dd                	mov    ebp,ebx
c0015af8:	88 d5                	mov    ch,dl
c0015afa:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0015b00:	0f b7 c1             	movzx  eax,cx
c0015b03:	31 d2                	xor    edx,edx
c0015b05:	09 f8                	or     eax,edi
c0015b07:	bf 3c 00 00 00       	mov    edi,0x3c
c0015b0c:	89 c1                	mov    ecx,eax
c0015b0e:	89 f0                	mov    eax,esi
c0015b10:	f7 f7                	div    edi
c0015b12:	c1 e2 10             	shl    edx,0x10
c0015b15:	09 d5                	or     ebp,edx
c0015b17:	31 d2                	xor    edx,edx
c0015b19:	89 eb                	mov    ebx,ebp
c0015b1b:	f7 f7                	div    edi
c0015b1d:	bf 10 0e 00 00       	mov    edi,0xe10
c0015b22:	88 d7                	mov    bh,dl
c0015b24:	89 f0                	mov    eax,esi
c0015b26:	31 d2                	xor    edx,edx
c0015b28:	f7 f7                	div    edi
c0015b2a:	bf 18 00 00 00       	mov    edi,0x18
c0015b2f:	31 d2                	xor    edx,edx
c0015b31:	f7 f7                	div    edi
c0015b33:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0015b38:	88 d3                	mov    bl,dl
c0015b3a:	53                   	push   ebx
c0015b3b:	51                   	push   ecx
c0015b3c:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015b42:	e8 07 84 ff ff       	call   c000df4e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0015b47:	83 c4 1c             	add    esp,0x1c
c0015b4a:	83 f0 01             	xor    eax,0x1
c0015b4d:	5b                   	pop    ebx
c0015b4e:	0f b6 c0             	movzx  eax,al
c0015b51:	5e                   	pop    esi
c0015b52:	31 d2                	xor    edx,edx
c0015b54:	5f                   	pop    edi
c0015b55:	5d                   	pop    ebp
c0015b56:	c3                   	ret    

c0015b57 <Sys::timezone(regs*)>:
c0015b57:	53                   	push   ebx
c0015b58:	83 ec 08             	sub    esp,0x8
c0015b5b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b5f:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015b63:	75 17                	jne    c0015b7c <Sys::timezone(regs*)+0x25>
c0015b65:	83 ec 0c             	sub    esp,0xc
c0015b68:	68 d9 5c 02 c0       	push   0xc0025cd9
c0015b6d:	e8 89 71 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0015b72:	83 c8 ff             	or     eax,0xffffffff
c0015b75:	83 c4 10             	add    esp,0x10
c0015b78:	89 c2                	mov    edx,eax
c0015b7a:	eb 20                	jmp    c0015b9c <Sys::timezone(regs*)+0x45>
c0015b7c:	83 ec 0c             	sub    esp,0xc
c0015b7f:	68 ee 5c 02 c0       	push   0xc0025cee
c0015b84:	e8 72 71 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0015b89:	58                   	pop    eax
c0015b8a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015b8d:	e8 1e 81 ff ff       	call   c000dcb0 <User::loadClockSettings(int)>
c0015b92:	83 c4 10             	add    esp,0x10
c0015b95:	b8 01 00 00 00       	mov    eax,0x1
c0015b9a:	31 d2                	xor    edx,edx
c0015b9c:	83 c4 08             	add    esp,0x8
c0015b9f:	5b                   	pop    ebx
c0015ba0:	c3                   	ret    

c0015ba1 <Sys::write(regs*)>:
c0015ba1:	57                   	push   edi
c0015ba2:	56                   	push   esi
c0015ba3:	53                   	push   ebx
c0015ba4:	83 ec 10             	sub    esp,0x10
c0015ba7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015bab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015bae:	83 f8 02             	cmp    eax,0x2
c0015bb1:	77 10                	ja     c0015bc3 <Sys::write(regs*)+0x22>
c0015bb3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bb8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015bbb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015bc1:	eb 0e                	jmp    c0015bd1 <Sys::write(regs*)+0x30>
c0015bc3:	83 ec 0c             	sub    esp,0xc
c0015bc6:	50                   	push   eax
c0015bc7:	e8 b3 5c ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015bcc:	83 c4 10             	add    esp,0x10
c0015bcf:	89 c1                	mov    ecx,eax
c0015bd1:	83 c8 ff             	or     eax,0xffffffff
c0015bd4:	85 c9                	test   ecx,ecx
c0015bd6:	89 c2                	mov    edx,eax
c0015bd8:	74 28                	je     c0015c02 <Sys::write(regs*)+0x61>
c0015bda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015be2:	31 ff                	xor    edi,edi
c0015be4:	83 ec 0c             	sub    esp,0xc
c0015be7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015be9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015bed:	52                   	push   edx
c0015bee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015bf1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015bf4:	57                   	push   edi
c0015bf5:	56                   	push   esi
c0015bf6:	51                   	push   ecx
c0015bf7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015bfa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015bfe:	83 c4 20             	add    esp,0x20
c0015c01:	99                   	cdq    
c0015c02:	83 c4 10             	add    esp,0x10
c0015c05:	5b                   	pop    ebx
c0015c06:	5e                   	pop    esi
c0015c07:	5f                   	pop    edi
c0015c08:	c3                   	ret    

c0015c09 <Sys::wsbe(regs*)>:
c0015c09:	57                   	push   edi
c0015c0a:	b9 0b 00 00 00       	mov    ecx,0xb
c0015c0f:	56                   	push   esi
c0015c10:	be 2d 5d 02 c0       	mov    esi,0xc0025d2d
c0015c15:	53                   	push   ebx
c0015c16:	83 ec 30             	sub    esp,0x30
c0015c19:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0015c1d:	fc                   	cld    
c0015c1e:	83 ec 0c             	sub    esp,0xc
c0015c21:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0015c23:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0015c27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c2c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015c2f:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0015c35:	8b 06                	mov    eax,DWORD PTR [esi]
c0015c37:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0015c3a:	57                   	push   edi
c0015c3b:	e8 60 aa fe ff       	call   c00006a0 <strlen>
c0015c40:	5a                   	pop    edx
c0015c41:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0015c45:	52                   	push   edx
c0015c46:	31 d2                	xor    edx,edx
c0015c48:	57                   	push   edi
c0015c49:	52                   	push   edx
c0015c4a:	50                   	push   eax
c0015c4b:	56                   	push   esi
c0015c4c:	ff d3                	call   ebx
c0015c4e:	83 c4 14             	add    esp,0x14
c0015c51:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015c55:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c58:	e8 6b 32 00 00       	call   c0018ec8 <terminateTask(int)>
c0015c5d:	83 c4 40             	add    esp,0x40
c0015c60:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015c65:	5b                   	pop    ebx
c0015c66:	31 d2                	xor    edx,edx
c0015c68:	5e                   	pop    esi
c0015c69:	5f                   	pop    edi
c0015c6a:	c3                   	ret    

c0015c6b <Sys::yield(regs*)>:
c0015c6b:	83 ec 0c             	sub    esp,0xc
c0015c6e:	fa                   	cli    
c0015c6f:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0015c75:	e8 36 29 00 00       	call   c00185b0 <schedule()>
c0015c7a:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0015c7f:	48                   	dec    eax
c0015c80:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0015c85:	75 01                	jne    c0015c88 <Sys::yield(regs*)+0x1d>
c0015c87:	fb                   	sti    
c0015c88:	8b 15 2c 85 02 c0    	mov    edx,DWORD PTR ds:0xc002852c
c0015c8e:	83 c4 0c             	add    esp,0xc
c0015c91:	89 d0                	mov    eax,edx
c0015c93:	c1 ea 11             	shr    edx,0x11
c0015c96:	c1 e0 07             	shl    eax,0x7
c0015c99:	25 80 30 0f 00       	and    eax,0xf3080
c0015c9e:	31 d0                	xor    eax,edx
c0015ca0:	31 d2                	xor    edx,edx
c0015ca2:	c3                   	ret    

c0015ca3 <sysCallSeekDir(regs*)>:
c0015ca3:	31 c0                	xor    eax,eax
c0015ca5:	31 d2                	xor    edx,edx
c0015ca7:	c3                   	ret    

c0015ca8 <sysCallTellDir(regs*)>:
c0015ca8:	31 c0                	xor    eax,eax
c0015caa:	31 d2                	xor    edx,edx
c0015cac:	c3                   	ret    

c0015cad <sysCallVerify(regs*)>:
c0015cad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015cb1:	31 d2                	xor    edx,edx
c0015cb3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015cb6:	c3                   	ret    

c0015cb7 <sysCallGetArgc(regs*)>:
c0015cb7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cbc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015cbf:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015cc5:	99                   	cdq    
c0015cc6:	c3                   	ret    

c0015cc7 <sysFormatDisk(regs*)>:
c0015cc7:	56                   	push   esi
c0015cc8:	53                   	push   ebx
c0015cc9:	53                   	push   ebx
c0015cca:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015cce:	8b 1d 34 80 02 c0    	mov    ebx,DWORD PTR ds:0xc0028034
c0015cd4:	eb 25                	jmp    c0015cfb <sysFormatDisk(regs*)+0x34>
c0015cd6:	83 ec 0c             	sub    esp,0xc
c0015cd9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015cdc:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015cde:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015ce1:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015ce4:	50                   	push   eax
c0015ce5:	ff 34 85 c0 84 02 c0 	push   DWORD PTR [eax*4-0x3ffd7b40]
c0015cec:	53                   	push   ebx
c0015ced:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015cf0:	83 c4 20             	add    esp,0x20
c0015cf3:	83 f8 08             	cmp    eax,0x8
c0015cf6:	75 12                	jne    c0015d0a <sysFormatDisk(regs*)+0x43>
c0015cf8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015cfb:	85 db                	test   ebx,ebx
c0015cfd:	75 d7                	jne    c0015cd6 <sysFormatDisk(regs*)+0xf>
c0015cff:	59                   	pop    ecx
c0015d00:	b8 03 00 00 00       	mov    eax,0x3
c0015d05:	31 d2                	xor    edx,edx
c0015d07:	5b                   	pop    ebx
c0015d08:	5e                   	pop    esi
c0015d09:	c3                   	ret    
c0015d0a:	85 c0                	test   eax,eax
c0015d0c:	74 1b                	je     c0015d29 <sysFormatDisk(regs*)+0x62>
c0015d0e:	83 f8 09             	cmp    eax,0x9
c0015d11:	74 0b                	je     c0015d1e <sysFormatDisk(regs*)+0x57>
c0015d13:	59                   	pop    ecx
c0015d14:	b8 02 00 00 00       	mov    eax,0x2
c0015d19:	31 d2                	xor    edx,edx
c0015d1b:	5b                   	pop    ebx
c0015d1c:	5e                   	pop    esi
c0015d1d:	c3                   	ret    
c0015d1e:	59                   	pop    ecx
c0015d1f:	b8 01 00 00 00       	mov    eax,0x1
c0015d24:	31 d2                	xor    edx,edx
c0015d26:	5b                   	pop    ebx
c0015d27:	5e                   	pop    esi
c0015d28:	c3                   	ret    
c0015d29:	59                   	pop    ecx
c0015d2a:	31 c0                	xor    eax,eax
c0015d2c:	31 d2                	xor    edx,edx
c0015d2e:	5b                   	pop    ebx
c0015d2f:	5e                   	pop    esi
c0015d30:	c3                   	ret    

c0015d31 <sysSetDiskVolumeLabel(regs*)>:
c0015d31:	56                   	push   esi
c0015d32:	53                   	push   ebx
c0015d33:	53                   	push   ebx
c0015d34:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d38:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d3b:	83 f8 19             	cmp    eax,0x19
c0015d3e:	77 2d                	ja     c0015d6d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015d40:	8b 0c 85 c0 84 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7b40]
c0015d47:	85 c9                	test   ecx,ecx
c0015d49:	74 22                	je     c0015d6d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015d4b:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0015d4e:	85 db                	test   ebx,ebx
c0015d50:	74 1b                	je     c0015d6d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015d52:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0015d58:	85 d2                	test   edx,edx
c0015d5a:	74 11                	je     c0015d6d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015d5c:	8b 32                	mov    esi,DWORD PTR [edx]
c0015d5e:	53                   	push   ebx
c0015d5f:	50                   	push   eax
c0015d60:	51                   	push   ecx
c0015d61:	52                   	push   edx
c0015d62:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015d65:	83 c4 10             	add    esp,0x10
c0015d68:	99                   	cdq    
c0015d69:	59                   	pop    ecx
c0015d6a:	5b                   	pop    ebx
c0015d6b:	5e                   	pop    esi
c0015d6c:	c3                   	ret    
c0015d6d:	59                   	pop    ecx
c0015d6e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015d73:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015d78:	5b                   	pop    ebx
c0015d79:	5e                   	pop    esi
c0015d7a:	c3                   	ret    

c0015d7b <sysGetDiskVolumeLabel(regs*)>:
c0015d7b:	57                   	push   edi
c0015d7c:	56                   	push   esi
c0015d7d:	53                   	push   ebx
c0015d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d82:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015d85:	83 fa 19             	cmp    edx,0x19
c0015d88:	77 38                	ja     c0015dc2 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015d8a:	8b 0c 95 c0 84 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7b40]
c0015d91:	85 c9                	test   ecx,ecx
c0015d93:	74 2d                	je     c0015dc2 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015d95:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015d98:	85 db                	test   ebx,ebx
c0015d9a:	74 26                	je     c0015dc2 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015d9c:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015d9f:	85 f6                	test   esi,esi
c0015da1:	74 1f                	je     c0015dc2 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015da3:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0015da9:	85 c0                	test   eax,eax
c0015dab:	74 15                	je     c0015dc2 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015dad:	83 ec 0c             	sub    esp,0xc
c0015db0:	8b 38                	mov    edi,DWORD PTR [eax]
c0015db2:	56                   	push   esi
c0015db3:	53                   	push   ebx
c0015db4:	52                   	push   edx
c0015db5:	51                   	push   ecx
c0015db6:	50                   	push   eax
c0015db7:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015dba:	83 c4 20             	add    esp,0x20
c0015dbd:	99                   	cdq    
c0015dbe:	5b                   	pop    ebx
c0015dbf:	5e                   	pop    esi
c0015dc0:	5f                   	pop    edi
c0015dc1:	c3                   	ret    
c0015dc2:	5b                   	pop    ebx
c0015dc3:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015dc8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015dcd:	5e                   	pop    esi
c0015dce:	5f                   	pop    edi
c0015dcf:	c3                   	ret    

c0015dd0 <sysShutdown(regs*)>:
c0015dd0:	83 ec 0c             	sub    esp,0xc
c0015dd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dd7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015dda:	85 c0                	test   eax,eax
c0015ddc:	74 18                	je     c0015df6 <sysShutdown(regs*)+0x26>
c0015dde:	83 f8 01             	cmp    eax,0x1
c0015de1:	74 38                	je     c0015e1b <sysShutdown(regs*)+0x4b>
c0015de3:	83 f8 02             	cmp    eax,0x2
c0015de6:	74 24                	je     c0015e0c <sysShutdown(regs*)+0x3c>
c0015de8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ded:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015df2:	83 c4 0c             	add    esp,0xc
c0015df5:	c3                   	ret    
c0015df6:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0015dfb:	8b 10                	mov    edx,DWORD PTR [eax]
c0015dfd:	6a 00                	push   0x0
c0015dff:	6a 00                	push   0x0
c0015e01:	6a 00                	push   0x0
c0015e03:	50                   	push   eax
c0015e04:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015e07:	83 c4 10             	add    esp,0x10
c0015e0a:	eb dc                	jmp    c0015de8 <sysShutdown(regs*)+0x18>
c0015e0c:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0015e11:	8b 10                	mov    edx,DWORD PTR [eax]
c0015e13:	6a 00                	push   0x0
c0015e15:	6a 00                	push   0x0
c0015e17:	6a 01                	push   0x1
c0015e19:	eb e8                	jmp    c0015e03 <sysShutdown(regs*)+0x33>
c0015e1b:	a1 40 85 02 c0       	mov    eax,ds:0xc0028540
c0015e20:	85 c0                	test   eax,eax
c0015e22:	74 02                	je     c0015e26 <sysShutdown(regs*)+0x56>
c0015e24:	ff d0                	call   eax
c0015e26:	31 c0                	xor    eax,eax
c0015e28:	31 d2                	xor    edx,edx
c0015e2a:	83 c4 0c             	add    esp,0xc
c0015e2d:	c3                   	ret    

c0015e2e <sysCallRealpath(regs*)>:
c0015e2e:	83 ec 0c             	sub    esp,0xc
c0015e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e35:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0015e38:	85 d2                	test   edx,edx
c0015e3a:	74 07                	je     c0015e43 <sysCallRealpath(regs*)+0x15>
c0015e3c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015e3f:	85 c0                	test   eax,eax
c0015e41:	75 0b                	jne    c0015e4e <sysCallRealpath(regs*)+0x20>
c0015e43:	b8 01 00 00 00       	mov    eax,0x1
c0015e48:	31 d2                	xor    edx,edx
c0015e4a:	83 c4 0c             	add    esp,0xc
c0015e4d:	c3                   	ret    
c0015e4e:	51                   	push   ecx
c0015e4f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e55:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015e58:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015e5e:	51                   	push   ecx
c0015e5f:	52                   	push   edx
c0015e60:	50                   	push   eax
c0015e61:	e8 56 72 ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c0015e66:	83 c4 10             	add    esp,0x10
c0015e69:	31 c0                	xor    eax,eax
c0015e6b:	31 d2                	xor    edx,edx
c0015e6d:	83 c4 0c             	add    esp,0xc
c0015e70:	c3                   	ret    

c0015e71 <sysCallReadDir(regs*)>:
c0015e71:	53                   	push   ebx
c0015e72:	83 ec 18             	sub    esp,0x18
c0015e75:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015e79:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015e7c:	83 f8 02             	cmp    eax,0x2
c0015e7f:	76 60                	jbe    c0015ee1 <sysCallReadDir(regs*)+0x70>
c0015e81:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0015e88:	77 48                	ja     c0015ed2 <sysCallReadDir(regs*)+0x61>
c0015e8a:	83 ec 0c             	sub    esp,0xc
c0015e8d:	50                   	push   eax
c0015e8e:	e8 ec 59 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015e93:	83 c4 10             	add    esp,0x10
c0015e96:	85 c0                	test   eax,eax
c0015e98:	74 38                	je     c0015ed2 <sysCallReadDir(regs*)+0x61>
c0015e9a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015ea2:	83 ec 0c             	sub    esp,0xc
c0015ea5:	8b 10                	mov    edx,DWORD PTR [eax]
c0015ea7:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015eab:	51                   	push   ecx
c0015eac:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015eaf:	6a 00                	push   0x0
c0015eb1:	68 10 01 00 00       	push   0x110
c0015eb6:	50                   	push   eax
c0015eb7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015eba:	83 c4 20             	add    esp,0x20
c0015ebd:	85 c0                	test   eax,eax
c0015ebf:	74 29                	je     c0015eea <sysCallReadDir(regs*)+0x79>
c0015ec1:	83 f8 07             	cmp    eax,0x7
c0015ec4:	74 1b                	je     c0015ee1 <sysCallReadDir(regs*)+0x70>
c0015ec6:	b8 02 00 00 00       	mov    eax,0x2
c0015ecb:	31 d2                	xor    edx,edx
c0015ecd:	83 c4 18             	add    esp,0x18
c0015ed0:	5b                   	pop    ebx
c0015ed1:	c3                   	ret    
c0015ed2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ed7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015edc:	83 c4 18             	add    esp,0x18
c0015edf:	5b                   	pop    ebx
c0015ee0:	c3                   	ret    
c0015ee1:	b8 01 00 00 00       	mov    eax,0x1
c0015ee6:	31 d2                	xor    edx,edx
c0015ee8:	eb e3                	jmp    c0015ecd <sysCallReadDir(regs*)+0x5c>
c0015eea:	31 c0                	xor    eax,eax
c0015eec:	31 d2                	xor    edx,edx
c0015eee:	eb dd                	jmp    c0015ecd <sysCallReadDir(regs*)+0x5c>

c0015ef0 <sysCallIsATTY(regs*)>:
c0015ef0:	83 ec 0c             	sub    esp,0xc
c0015ef3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ef7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015efa:	83 f8 02             	cmp    eax,0x2
c0015efd:	76 07                	jbe    c0015f06 <sysCallIsATTY(regs*)+0x16>
c0015eff:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015f04:	75 26                	jne    c0015f2c <sysCallIsATTY(regs*)+0x3c>
c0015f06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f0b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015f0e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f14:	85 c0                	test   eax,eax
c0015f16:	74 24                	je     c0015f3c <sysCallIsATTY(regs*)+0x4c>
c0015f18:	83 ec 0c             	sub    esp,0xc
c0015f1b:	8b 10                	mov    edx,DWORD PTR [eax]
c0015f1d:	50                   	push   eax
c0015f1e:	ff 12                	call   DWORD PTR [edx]
c0015f20:	31 d2                	xor    edx,edx
c0015f22:	0f b6 c0             	movzx  eax,al
c0015f25:	83 c4 10             	add    esp,0x10
c0015f28:	83 c4 0c             	add    esp,0xc
c0015f2b:	c3                   	ret    
c0015f2c:	83 ec 0c             	sub    esp,0xc
c0015f2f:	50                   	push   eax
c0015f30:	e8 4a 59 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015f35:	83 c4 10             	add    esp,0x10
c0015f38:	85 c0                	test   eax,eax
c0015f3a:	75 dc                	jne    c0015f18 <sysCallIsATTY(regs*)+0x28>
c0015f3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f46:	83 c4 0c             	add    esp,0xc
c0015f49:	c3                   	ret    

c0015f4a <sysCallSeek(regs*)>:
c0015f4a:	53                   	push   ebx
c0015f4b:	83 ec 08             	sub    esp,0x8
c0015f4e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015f52:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015f55:	8d 50 fd             	lea    edx,[eax-0x3]
c0015f58:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015f5e:	77 32                	ja     c0015f92 <sysCallSeek(regs*)+0x48>
c0015f60:	83 ec 0c             	sub    esp,0xc
c0015f63:	50                   	push   eax
c0015f64:	e8 16 59 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015f69:	83 c4 0c             	add    esp,0xc
c0015f6c:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015f6f:	31 db                	xor    ebx,ebx
c0015f71:	53                   	push   ebx
c0015f72:	51                   	push   ecx
c0015f73:	50                   	push   eax
c0015f74:	e8 85 74 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0015f79:	83 c4 10             	add    esp,0x10
c0015f7c:	85 c0                	test   eax,eax
c0015f7e:	0f 95 c0             	setne  al
c0015f81:	31 d2                	xor    edx,edx
c0015f83:	0f b6 c0             	movzx  eax,al
c0015f86:	f7 d8                	neg    eax
c0015f88:	83 d2 00             	adc    edx,0x0
c0015f8b:	83 c4 08             	add    esp,0x8
c0015f8e:	f7 da                	neg    edx
c0015f90:	5b                   	pop    ebx
c0015f91:	c3                   	ret    
c0015f92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015f9c:	83 c4 08             	add    esp,0x8
c0015f9f:	5b                   	pop    ebx
c0015fa0:	c3                   	ret    

c0015fa1 <sysCallTell(regs*)>:
c0015fa1:	53                   	push   ebx
c0015fa2:	83 ec 08             	sub    esp,0x8
c0015fa5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fa9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015fac:	83 f8 02             	cmp    eax,0x2
c0015faf:	76 4d                	jbe    c0015ffe <sysCallTell(regs*)+0x5d>
c0015fb1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015fb6:	76 19                	jbe    c0015fd1 <sysCallTell(regs*)+0x30>
c0015fb8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015fbb:	31 d2                	xor    edx,edx
c0015fbd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015fc3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015fca:	31 c0                	xor    eax,eax
c0015fcc:	83 c4 08             	add    esp,0x8
c0015fcf:	5b                   	pop    ebx
c0015fd0:	c3                   	ret    
c0015fd1:	83 ec 0c             	sub    esp,0xc
c0015fd4:	50                   	push   eax
c0015fd5:	e8 a5 58 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0015fda:	5a                   	pop    edx
c0015fdb:	59                   	pop    ecx
c0015fdc:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015fdf:	50                   	push   eax
c0015fe0:	e8 6f 74 ff ff       	call   c000d454 <File::tell(unsigned long long*)>
c0015fe5:	83 c4 10             	add    esp,0x10
c0015fe8:	85 c0                	test   eax,eax
c0015fea:	0f 95 c0             	setne  al
c0015fed:	31 d2                	xor    edx,edx
c0015fef:	0f b6 c0             	movzx  eax,al
c0015ff2:	f7 d8                	neg    eax
c0015ff4:	83 d2 00             	adc    edx,0x0
c0015ff7:	83 c4 08             	add    esp,0x8
c0015ffa:	f7 da                	neg    edx
c0015ffc:	5b                   	pop    ebx
c0015ffd:	c3                   	ret    
c0015ffe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016003:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016008:	83 c4 08             	add    esp,0x8
c001600b:	5b                   	pop    ebx
c001600c:	c3                   	ret    

c001600d <sysCallSize(regs*)>:
c001600d:	53                   	push   ebx
c001600e:	83 ec 18             	sub    esp,0x18
c0016011:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016015:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016018:	83 f8 02             	cmp    eax,0x2
c001601b:	76 53                	jbe    c0016070 <sysCallSize(regs*)+0x63>
c001601d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016022:	76 19                	jbe    c001603d <sysCallSize(regs*)+0x30>
c0016024:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016027:	31 d2                	xor    edx,edx
c0016029:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001602f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016036:	31 c0                	xor    eax,eax
c0016038:	83 c4 18             	add    esp,0x18
c001603b:	5b                   	pop    ebx
c001603c:	c3                   	ret    
c001603d:	83 ec 0c             	sub    esp,0xc
c0016040:	50                   	push   eax
c0016041:	e8 39 58 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0016046:	83 c4 0c             	add    esp,0xc
c0016049:	8d 54 24 13          	lea    edx,[esp+0x13]
c001604d:	52                   	push   edx
c001604e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016051:	50                   	push   eax
c0016052:	e8 95 75 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c0016057:	83 c4 10             	add    esp,0x10
c001605a:	85 c0                	test   eax,eax
c001605c:	0f 95 c0             	setne  al
c001605f:	31 d2                	xor    edx,edx
c0016061:	0f b6 c0             	movzx  eax,al
c0016064:	f7 d8                	neg    eax
c0016066:	83 d2 00             	adc    edx,0x0
c0016069:	83 c4 18             	add    esp,0x18
c001606c:	f7 da                	neg    edx
c001606e:	5b                   	pop    ebx
c001606f:	c3                   	ret    
c0016070:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016075:	ba ff ff ff ff       	mov    edx,0xffffffff
c001607a:	83 c4 18             	add    esp,0x18
c001607d:	5b                   	pop    ebx
c001607e:	c3                   	ret    

c001607f <sysCallSizeFromFilename(regs*)>:
c001607f:	57                   	push   edi
c0016080:	56                   	push   esi
c0016081:	53                   	push   ebx
c0016082:	83 ec 20             	sub    esp,0x20
c0016085:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016089:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001608c:	83 fb 02             	cmp    ebx,0x2
c001608f:	0f 86 88 00 00 00    	jbe    c001611d <sysCallSizeFromFilename(regs*)+0x9e>
c0016095:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001609b:	76 1b                	jbe    c00160b8 <sysCallSizeFromFilename(regs*)+0x39>
c001609d:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00160a0:	31 d2                	xor    edx,edx
c00160a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00160a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00160af:	83 c4 20             	add    esp,0x20
c00160b2:	31 c0                	xor    eax,eax
c00160b4:	5b                   	pop    ebx
c00160b5:	5e                   	pop    esi
c00160b6:	5f                   	pop    edi
c00160b7:	c3                   	ret    
c00160b8:	83 ec 0c             	sub    esp,0xc
c00160bb:	68 14 01 00 00       	push   0x114
c00160c0:	e8 4a 39 ff ff       	call   c0009a0f <malloc>
c00160c5:	83 c4 0c             	add    esp,0xc
c00160c8:	89 c7                	mov    edi,eax
c00160ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160cf:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00160d2:	53                   	push   ebx
c00160d3:	57                   	push   edi
c00160d4:	e8 8d 71 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00160d9:	83 c4 0c             	add    esp,0xc
c00160dc:	8d 44 24 23          	lea    eax,[esp+0x23]
c00160e0:	50                   	push   eax
c00160e1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00160e4:	57                   	push   edi
c00160e5:	e8 02 75 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c00160ea:	83 c4 10             	add    esp,0x10
c00160ed:	85 ff                	test   edi,edi
c00160ef:	74 14                	je     c0016105 <sysCallSizeFromFilename(regs*)+0x86>
c00160f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160f5:	8b 17                	mov    edx,DWORD PTR [edi]
c00160f7:	83 ec 0c             	sub    esp,0xc
c00160fa:	57                   	push   edi
c00160fb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00160fe:	83 c4 10             	add    esp,0x10
c0016101:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016105:	85 c0                	test   eax,eax
c0016107:	0f 95 c0             	setne  al
c001610a:	31 d2                	xor    edx,edx
c001610c:	0f b6 c0             	movzx  eax,al
c001610f:	f7 d8                	neg    eax
c0016111:	83 d2 00             	adc    edx,0x0
c0016114:	83 c4 20             	add    esp,0x20
c0016117:	f7 da                	neg    edx
c0016119:	5b                   	pop    ebx
c001611a:	5e                   	pop    esi
c001611b:	5f                   	pop    edi
c001611c:	c3                   	ret    
c001611d:	83 c4 20             	add    esp,0x20
c0016120:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016125:	5b                   	pop    ebx
c0016126:	ba ff ff ff ff       	mov    edx,0xffffffff
c001612b:	5e                   	pop    esi
c001612c:	5f                   	pop    edi
c001612d:	c3                   	ret    

c001612e <sysCallClose(regs*)>:
c001612e:	53                   	push   ebx
c001612f:	83 ec 08             	sub    esp,0x8
c0016132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016136:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016139:	83 f8 02             	cmp    eax,0x2
c001613c:	76 41                	jbe    c001617f <sysCallClose(regs*)+0x51>
c001613e:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0016144:	83 fa 01             	cmp    edx,0x1
c0016147:	76 2d                	jbe    c0016176 <sysCallClose(regs*)+0x48>
c0016149:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001614e:	77 2f                	ja     c001617f <sysCallClose(regs*)+0x51>
c0016150:	83 ec 0c             	sub    esp,0xc
c0016153:	50                   	push   eax
c0016154:	e8 26 57 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0016159:	89 c3                	mov    ebx,eax
c001615b:	89 04 24             	mov    DWORD PTR [esp],eax
c001615e:	e8 3b 72 ff ff       	call   c000d39e <File::close()>
c0016163:	83 c4 10             	add    esp,0x10
c0016166:	85 db                	test   ebx,ebx
c0016168:	74 0c                	je     c0016176 <sysCallClose(regs*)+0x48>
c001616a:	83 ec 0c             	sub    esp,0xc
c001616d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001616f:	53                   	push   ebx
c0016170:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016173:	83 c4 10             	add    esp,0x10
c0016176:	31 c0                	xor    eax,eax
c0016178:	31 d2                	xor    edx,edx
c001617a:	83 c4 08             	add    esp,0x8
c001617d:	5b                   	pop    ebx
c001617e:	c3                   	ret    
c001617f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016184:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016189:	83 c4 08             	add    esp,0x8
c001618c:	5b                   	pop    ebx
c001618d:	c3                   	ret    

c001618e <sysCallOpenDir(regs*)>:
c001618e:	56                   	push   esi
c001618f:	53                   	push   ebx
c0016190:	53                   	push   ebx
c0016191:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016195:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0016198:	85 f6                	test   esi,esi
c001619a:	74 59                	je     c00161f5 <sysCallOpenDir(regs*)+0x67>
c001619c:	83 ec 0c             	sub    esp,0xc
c001619f:	68 14 01 00 00       	push   0x114
c00161a4:	e8 66 38 ff ff       	call   c0009a0f <malloc>
c00161a9:	83 c4 0c             	add    esp,0xc
c00161ac:	89 c6                	mov    esi,eax
c00161ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00161b3:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00161b6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00161b9:	56                   	push   esi
c00161ba:	e8 07 76 ff ff       	call   c000d7c6 <Directory::Directory(char const*, Process*)>
c00161bf:	83 c4 10             	add    esp,0x10
c00161c2:	85 f6                	test   esi,esi
c00161c4:	74 2f                	je     c00161f5 <sysCallOpenDir(regs*)+0x67>
c00161c6:	83 ec 0c             	sub    esp,0xc
c00161c9:	56                   	push   esi
c00161ca:	e8 d1 76 ff ff       	call   c000d8a0 <Directory::open()>
c00161cf:	83 c4 10             	add    esp,0x10
c00161d2:	85 c0                	test   eax,eax
c00161d4:	75 1f                	jne    c00161f5 <sysCallOpenDir(regs*)+0x67>
c00161d6:	83 ec 0c             	sub    esp,0xc
c00161d9:	56                   	push   esi
c00161da:	e8 ab 53 ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c00161df:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	89 02                	mov    DWORD PTR [edx],eax
c00161e7:	c1 f8 1f             	sar    eax,0x1f
c00161ea:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00161ed:	31 c0                	xor    eax,eax
c00161ef:	59                   	pop    ecx
c00161f0:	31 d2                	xor    edx,edx
c00161f2:	5b                   	pop    ebx
c00161f3:	5e                   	pop    esi
c00161f4:	c3                   	ret    
c00161f5:	59                   	pop    ecx
c00161f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00161fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016200:	5b                   	pop    ebx
c0016201:	5e                   	pop    esi
c0016202:	c3                   	ret    

c0016203 <sysCallCloseDir(regs*)>:
c0016203:	53                   	push   ebx
c0016204:	83 ec 08             	sub    esp,0x8
c0016207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001620b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001620e:	8d 50 fd             	lea    edx,[eax-0x3]
c0016211:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0016217:	77 2f                	ja     c0016248 <sysCallCloseDir(regs*)+0x45>
c0016219:	83 ec 0c             	sub    esp,0xc
c001621c:	50                   	push   eax
c001621d:	e8 5d 56 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c0016222:	89 c3                	mov    ebx,eax
c0016224:	89 04 24             	mov    DWORD PTR [esp],eax
c0016227:	e8 d0 76 ff ff       	call   c000d8fc <Directory::close()>
c001622c:	83 c4 10             	add    esp,0x10
c001622f:	85 db                	test   ebx,ebx
c0016231:	74 0c                	je     c001623f <sysCallCloseDir(regs*)+0x3c>
c0016233:	83 ec 0c             	sub    esp,0xc
c0016236:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016238:	53                   	push   ebx
c0016239:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001623c:	83 c4 10             	add    esp,0x10
c001623f:	31 c0                	xor    eax,eax
c0016241:	31 d2                	xor    edx,edx
c0016243:	83 c4 08             	add    esp,0x8
c0016246:	5b                   	pop    ebx
c0016247:	c3                   	ret    
c0016248:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001624d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0016252:	83 c4 08             	add    esp,0x8
c0016255:	5b                   	pop    ebx
c0016256:	c3                   	ret    

c0016257 <sysCallMakeDir(regs*)>:
c0016257:	56                   	push   esi
c0016258:	53                   	push   ebx
c0016259:	83 ec 10             	sub    esp,0x10
c001625c:	68 14 01 00 00       	push   0x114
c0016261:	e8 a9 37 ff ff       	call   c0009a0f <malloc>
c0016266:	83 c4 0c             	add    esp,0xc
c0016269:	89 c3                	mov    ebx,eax
c001626b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016270:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016273:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016277:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001627a:	53                   	push   ebx
c001627b:	e8 46 75 ff ff       	call   c000d7c6 <Directory::Directory(char const*, Process*)>
c0016280:	83 c4 10             	add    esp,0x10
c0016283:	85 db                	test   ebx,ebx
c0016285:	74 32                	je     c00162b9 <sysCallMakeDir(regs*)+0x62>
c0016287:	83 ec 0c             	sub    esp,0xc
c001628a:	53                   	push   ebx
c001628b:	e8 f0 77 ff ff       	call   c000da80 <Directory::create()>
c0016290:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016293:	89 c6                	mov    esi,eax
c0016295:	e8 62 76 ff ff       	call   c000d8fc <Directory::close()>
c001629a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001629c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001629f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162a2:	83 c4 10             	add    esp,0x10
c00162a5:	31 c0                	xor    eax,eax
c00162a7:	59                   	pop    ecx
c00162a8:	85 f6                	test   esi,esi
c00162aa:	5b                   	pop    ebx
c00162ab:	0f 95 c0             	setne  al
c00162ae:	5e                   	pop    esi
c00162af:	31 d2                	xor    edx,edx
c00162b1:	f7 d8                	neg    eax
c00162b3:	83 d2 00             	adc    edx,0x0
c00162b6:	f7 da                	neg    edx
c00162b8:	c3                   	ret    
c00162b9:	59                   	pop    ecx
c00162ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162c4:	5b                   	pop    ebx
c00162c5:	5e                   	pop    esi
c00162c6:	c3                   	ret    

c00162c7 <sysCallWait(regs*)>:
c00162c7:	83 ec 10             	sub    esp,0x10
c00162ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00162ce:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00162d1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00162d4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00162d7:	e8 fc 24 00 00       	call   c00187d8 <waitTask(int, int*, int)>
c00162dc:	83 c4 1c             	add    esp,0x1c
c00162df:	99                   	cdq    
c00162e0:	c3                   	ret    

c00162e1 <sysCallNotImpl(regs*)>:
c00162e1:	83 ec 18             	sub    esp,0x18
c00162e4:	68 59 5d 02 c0       	push   0xc0025d59
c00162e9:	e8 b5 e6 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c00162ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00162f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00162f8:	83 c4 1c             	add    esp,0x1c
c00162fb:	c3                   	ret    

c00162fc <sysPanic(regs*)>:
c00162fc:	83 ec 18             	sub    esp,0x18
c00162ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016303:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0016306:	e8 98 e6 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001630b:	b8 01 00 00 00       	mov    eax,0x1
c0016310:	31 d2                	xor    edx,edx
c0016312:	83 c4 1c             	add    esp,0x1c
c0016315:	c3                   	ret    

c0016316 <sysCallRmdir(regs*)>:
c0016316:	56                   	push   esi
c0016317:	53                   	push   ebx
c0016318:	83 ec 20             	sub    esp,0x20
c001631b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001631f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016322:	68 14 01 00 00       	push   0x114
c0016327:	e8 e3 36 ff ff       	call   c0009a0f <malloc>
c001632c:	83 c4 0c             	add    esp,0xc
c001632f:	89 c3                	mov    ebx,eax
c0016331:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016336:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016339:	56                   	push   esi
c001633a:	53                   	push   ebx
c001633b:	e8 26 6f ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0016340:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016343:	e8 70 71 ff ff       	call   c000d4b8 <File::unlink()>
c0016348:	83 c4 10             	add    esp,0x10
c001634b:	85 db                	test   ebx,ebx
c001634d:	74 14                	je     c0016363 <sysCallRmdir(regs*)+0x4d>
c001634f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016353:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016355:	83 ec 0c             	sub    esp,0xc
c0016358:	53                   	push   ebx
c0016359:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001635c:	83 c4 10             	add    esp,0x10
c001635f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016363:	85 c0                	test   eax,eax
c0016365:	0f 95 c0             	setne  al
c0016368:	31 d2                	xor    edx,edx
c001636a:	0f b6 c0             	movzx  eax,al
c001636d:	f7 d8                	neg    eax
c001636f:	83 d2 00             	adc    edx,0x0
c0016372:	83 c4 14             	add    esp,0x14
c0016375:	f7 da                	neg    edx
c0016377:	5b                   	pop    ebx
c0016378:	5e                   	pop    esi
c0016379:	c3                   	ret    

c001637a <sysCallUnlink(regs*)>:
c001637a:	56                   	push   esi
c001637b:	53                   	push   ebx
c001637c:	83 ec 20             	sub    esp,0x20
c001637f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016383:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016386:	68 14 01 00 00       	push   0x114
c001638b:	e8 7f 36 ff ff       	call   c0009a0f <malloc>
c0016390:	83 c4 0c             	add    esp,0xc
c0016393:	89 c3                	mov    ebx,eax
c0016395:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001639a:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001639d:	56                   	push   esi
c001639e:	53                   	push   ebx
c001639f:	e8 c2 6e ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00163a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163a7:	e8 0c 71 ff ff       	call   c000d4b8 <File::unlink()>
c00163ac:	83 c4 10             	add    esp,0x10
c00163af:	85 db                	test   ebx,ebx
c00163b1:	74 14                	je     c00163c7 <sysCallUnlink(regs*)+0x4d>
c00163b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00163b7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00163b9:	83 ec 0c             	sub    esp,0xc
c00163bc:	53                   	push   ebx
c00163bd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00163c0:	83 c4 10             	add    esp,0x10
c00163c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163c7:	85 c0                	test   eax,eax
c00163c9:	0f 95 c0             	setne  al
c00163cc:	31 d2                	xor    edx,edx
c00163ce:	0f b6 c0             	movzx  eax,al
c00163d1:	f7 d8                	neg    eax
c00163d3:	83 d2 00             	adc    edx,0x0
c00163d6:	83 c4 14             	add    esp,0x14
c00163d9:	f7 da                	neg    edx
c00163db:	5b                   	pop    ebx
c00163dc:	5e                   	pop    esi
c00163dd:	c3                   	ret    

c00163de <sysCallGetArgv(regs*)>:
c00163de:	83 ec 0c             	sub    esp,0xc
c00163e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163e5:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00163e8:	85 c0                	test   eax,eax
c00163ea:	78 2b                	js     c0016417 <sysCallGetArgv(regs*)+0x39>
c00163ec:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00163f2:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00163f5:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00163fb:	7d 1a                	jge    c0016417 <sysCallGetArgv(regs*)+0x39>
c00163fd:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0016404:	85 c0                	test   eax,eax
c0016406:	74 17                	je     c001641f <sysCallGetArgv(regs*)+0x41>
c0016408:	83 ec 08             	sub    esp,0x8
c001640b:	50                   	push   eax
c001640c:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001640f:	e8 2c a3 fe ff       	call   c0000740 <strcpy>
c0016414:	83 c4 10             	add    esp,0x10
c0016417:	31 c0                	xor    eax,eax
c0016419:	31 d2                	xor    edx,edx
c001641b:	83 c4 0c             	add    esp,0xc
c001641e:	c3                   	ret    
c001641f:	b8 01 00 00 00       	mov    eax,0x1
c0016424:	31 d2                	xor    edx,edx
c0016426:	83 c4 0c             	add    esp,0xc
c0016429:	c3                   	ret    

c001642a <sysCallTTYName(regs*)>:
c001642a:	56                   	push   esi
c001642b:	53                   	push   ebx
c001642c:	53                   	push   ebx
c001642d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016431:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016434:	85 c0                	test   eax,eax
c0016436:	74 5f                	je     c0016497 <sysCallTTYName(regs*)+0x6d>
c0016438:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001643b:	83 f8 02             	cmp    eax,0x2
c001643e:	77 3e                	ja     c001647e <sysCallTTYName(regs*)+0x54>
c0016440:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016445:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016448:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c001644e:	85 db                	test   ebx,ebx
c0016450:	74 45                	je     c0016497 <sysCallTTYName(regs*)+0x6d>
c0016452:	83 ec 0c             	sub    esp,0xc
c0016455:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016457:	53                   	push   ebx
c0016458:	ff 10                	call   DWORD PTR [eax]
c001645a:	83 c4 10             	add    esp,0x10
c001645d:	84 c0                	test   al,al
c001645f:	74 41                	je     c00164a2 <sysCallTTYName(regs*)+0x78>
c0016461:	83 ec 08             	sub    esp,0x8
c0016464:	81 c3 82 00 00 00    	add    ebx,0x82
c001646a:	53                   	push   ebx
c001646b:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001646e:	e8 cd a2 fe ff       	call   c0000740 <strcpy>
c0016473:	83 c4 10             	add    esp,0x10
c0016476:	31 c0                	xor    eax,eax
c0016478:	59                   	pop    ecx
c0016479:	31 d2                	xor    edx,edx
c001647b:	5b                   	pop    ebx
c001647c:	5e                   	pop    esi
c001647d:	c3                   	ret    
c001647e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016483:	74 bb                	je     c0016440 <sysCallTTYName(regs*)+0x16>
c0016485:	83 ec 0c             	sub    esp,0xc
c0016488:	50                   	push   eax
c0016489:	e8 f1 53 ff ff       	call   c000b87f <getFromFileDescriptor(int)>
c001648e:	83 c4 10             	add    esp,0x10
c0016491:	89 c3                	mov    ebx,eax
c0016493:	85 db                	test   ebx,ebx
c0016495:	75 bb                	jne    c0016452 <sysCallTTYName(regs*)+0x28>
c0016497:	59                   	pop    ecx
c0016498:	b8 01 00 00 00       	mov    eax,0x1
c001649d:	31 d2                	xor    edx,edx
c001649f:	5b                   	pop    ebx
c00164a0:	5e                   	pop    esi
c00164a1:	c3                   	ret    
c00164a2:	59                   	pop    ecx
c00164a3:	b8 02 00 00 00       	mov    eax,0x2
c00164a8:	31 d2                	xor    edx,edx
c00164aa:	5b                   	pop    ebx
c00164ab:	5e                   	pop    esi
c00164ac:	c3                   	ret    

c00164ad <sysCallUSleep(regs*)>:
c00164ad:	83 ec 1c             	sub    esp,0x1c
c00164b0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00164b4:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00164b7:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00164ba:	6a 00                	push   0x0
c00164bc:	6a 64                	push   0x64
c00164be:	52                   	push   edx
c00164bf:	50                   	push   eax
c00164c0:	e8 cf c1 00 00       	call   c0022694 <__udivdi3>
c00164c5:	83 c4 14             	add    esp,0x14
c00164c8:	50                   	push   eax
c00164c9:	e8 da 23 00 00       	call   c00188a8 <milliTenthSleep(unsigned int)>
c00164ce:	31 c0                	xor    eax,eax
c00164d0:	31 d2                	xor    edx,edx
c00164d2:	83 c4 1c             	add    esp,0x1c
c00164d5:	c3                   	ret    

c00164d6 <sysCallSpawn(regs*)>:
c00164d6:	56                   	push   esi
c00164d7:	53                   	push   ebx
c00164d8:	50                   	push   eax
c00164d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00164dd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00164e0:	85 c0                	test   eax,eax
c00164e2:	75 08                	jne    c00164ec <sysCallSpawn(regs*)+0x16>
c00164e4:	59                   	pop    ecx
c00164e5:	31 c0                	xor    eax,eax
c00164e7:	31 d2                	xor    edx,edx
c00164e9:	5b                   	pop    ebx
c00164ea:	5e                   	pop    esi
c00164eb:	c3                   	ret    
c00164ec:	83 ec 0c             	sub    esp,0xc
c00164ef:	68 1f 07 00 00       	push   0x71f
c00164f4:	e8 16 35 ff ff       	call   c0009a0f <malloc>
c00164f9:	83 c4 10             	add    esp,0x10
c00164fc:	89 c6                	mov    esi,eax
c00164fe:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016501:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016504:	85 c0                	test   eax,eax
c0016506:	75 32                	jne    c001653a <sysCallSpawn(regs*)+0x64>
c0016508:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001650d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016510:	52                   	push   edx
c0016511:	50                   	push   eax
c0016512:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016515:	56                   	push   esi
c0016516:	e8 85 1a 00 00       	call   c0017fa0 <Process::Process(char const*, Process*, char**)>
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0016525:	75 bd                	jne    c00164e4 <sysCallSpawn(regs*)+0xe>
c0016527:	83 ec 0c             	sub    esp,0xc
c001652a:	56                   	push   esi
c001652b:	e8 5c 1f 00 00       	call   c001848c <Process::createUserThread()>
c0016530:	8b 06                	mov    eax,DWORD PTR [esi]
c0016532:	83 c4 10             	add    esp,0x10
c0016535:	99                   	cdq    
c0016536:	59                   	pop    ecx
c0016537:	5b                   	pop    ebx
c0016538:	5e                   	pop    esi
c0016539:	c3                   	ret    
c001653a:	31 c0                	xor    eax,eax
c001653c:	eb d2                	jmp    c0016510 <sysCallSpawn(regs*)+0x3a>

c001653e <sysCallGetEnv(regs*)>:
c001653e:	57                   	push   edi
c001653f:	56                   	push   esi
c0016540:	53                   	push   ebx
c0016541:	83 ec 1c             	sub    esp,0x1c
c0016544:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016548:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001654d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0016550:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0016553:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016556:	e8 94 e3 ff ff       	call   c00148ef <Krnl::getProcessTotalEnvCount(Process*)>
c001655b:	83 c4 10             	add    esp,0x10
c001655e:	39 c7                	cmp    edi,eax
c0016560:	7c 14                	jl     c0016576 <sysCallGetEnv(regs*)+0x38>
c0016562:	85 f6                	test   esi,esi
c0016564:	75 0b                	jne    c0016571 <sysCallGetEnv(regs*)+0x33>
c0016566:	83 c4 10             	add    esp,0x10
c0016569:	31 c0                	xor    eax,eax
c001656b:	5b                   	pop    ebx
c001656c:	31 d2                	xor    edx,edx
c001656e:	5e                   	pop    esi
c001656f:	5f                   	pop    edi
c0016570:	c3                   	ret    
c0016571:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0016574:	eb f0                	jmp    c0016566 <sysCallGetEnv(regs*)+0x28>
c0016576:	8d 44 24 08          	lea    eax,[esp+0x8]
c001657a:	52                   	push   edx
c001657b:	57                   	push   edi
c001657c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016582:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0016585:	50                   	push   eax
c0016586:	e8 84 e3 ff ff       	call   c001490f <Krnl::getProcessEnvPair(Process*, int)>
c001658b:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001658e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016592:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016596:	83 c4 0c             	add    esp,0xc
c0016599:	85 c9                	test   ecx,ecx
c001659b:	75 23                	jne    c00165c0 <sysCallGetEnv(regs*)+0x82>
c001659d:	83 ec 0c             	sub    esp,0xc
c00165a0:	50                   	push   eax
c00165a1:	e8 fa a0 fe ff       	call   c00006a0 <strlen>
c00165a6:	89 3c 24             	mov    DWORD PTR [esp],edi
c00165a9:	89 c3                	mov    ebx,eax
c00165ab:	e8 f0 a0 fe ff       	call   c00006a0 <strlen>
c00165b0:	83 c4 10             	add    esp,0x10
c00165b3:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00165b7:	83 c4 10             	add    esp,0x10
c00165ba:	31 d2                	xor    edx,edx
c00165bc:	5b                   	pop    ebx
c00165bd:	5e                   	pop    esi
c00165be:	5f                   	pop    edi
c00165bf:	c3                   	ret    
c00165c0:	83 ec 08             	sub    esp,0x8
c00165c3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00165c6:	50                   	push   eax
c00165c7:	56                   	push   esi
c00165c8:	e8 73 a1 fe ff       	call   c0000740 <strcpy>
c00165cd:	58                   	pop    eax
c00165ce:	5a                   	pop    edx
c00165cf:	68 73 5d 02 c0       	push   0xc0025d73
c00165d4:	56                   	push   esi
c00165d5:	e8 a6 a2 fe ff       	call   c0000880 <strcat>
c00165da:	59                   	pop    ecx
c00165db:	5b                   	pop    ebx
c00165dc:	57                   	push   edi
c00165dd:	56                   	push   esi
c00165de:	e8 9d a2 fe ff       	call   c0000880 <strcat>
c00165e3:	83 c4 10             	add    esp,0x10
c00165e6:	e9 7b ff ff ff       	jmp    c0016566 <sysCallGetEnv(regs*)+0x28>

c00165eb <sysAppSettings(regs*)>:
c00165eb:	57                   	push   edi
c00165ec:	56                   	push   esi
c00165ed:	56                   	push   esi
c00165ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00165f5:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c00165fb:	25 e0 1f 00 00       	and    eax,0x1fe0
c0016600:	66 3d c0 09          	cmp    ax,0x9c0
c0016604:	75 2e                	jne    c0016634 <sysAppSettings(regs*)+0x49>
c0016606:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001660c:	83 e0 1f             	and    eax,0x1f
c001660f:	3c 01                	cmp    al,0x1
c0016611:	74 2c                	je     c001663f <sysAppSettings(regs*)+0x54>
c0016613:	3c 07                	cmp    al,0x7
c0016615:	0f 84 b3 00 00 00    	je     c00166ce <sysAppSettings(regs*)+0xe3>
c001661b:	84 c0                	test   al,al
c001661d:	0f 84 d2 00 00 00    	je     c00166f5 <sysAppSettings(regs*)+0x10a>
c0016623:	3c 08                	cmp    al,0x8
c0016625:	74 63                	je     c001668a <sysAppSettings(regs*)+0x9f>
c0016627:	59                   	pop    ecx
c0016628:	0f b6 c0             	movzx  eax,al
c001662b:	5e                   	pop    esi
c001662c:	05 e8 03 00 00       	add    eax,0x3e8
c0016631:	5f                   	pop    edi
c0016632:	99                   	cdq    
c0016633:	c3                   	ret    
c0016634:	b8 01 00 00 00       	mov    eax,0x1
c0016639:	59                   	pop    ecx
c001663a:	31 d2                	xor    edx,edx
c001663c:	5e                   	pop    esi
c001663d:	5f                   	pop    edi
c001663e:	c3                   	ret    
c001663f:	50                   	push   eax
c0016640:	68 00 01 00 00       	push   0x100
c0016645:	6a 00                	push   0x0
c0016647:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001664c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001664f:	83 c0 0c             	add    eax,0xc
c0016652:	50                   	push   eax
c0016653:	e8 2c a0 fe ff       	call   c0000684 <memset>
c0016658:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001665d:	b9 ff 00 00 00       	mov    ecx,0xff
c0016662:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016665:	83 c7 0c             	add    edi,0xc
c0016668:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001666a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001666f:	5a                   	pop    edx
c0016670:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016673:	59                   	pop    ecx
c0016674:	8d 50 0c             	lea    edx,[eax+0xc]
c0016677:	52                   	push   edx
c0016678:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001667e:	e8 25 43 ff ff       	call   c000a9a8 <VgaText::setTitle(char*)>
c0016683:	83 c4 10             	add    esp,0x10
c0016686:	31 c0                	xor    eax,eax
c0016688:	eb af                	jmp    c0016639 <sysAppSettings(regs*)+0x4e>
c001668a:	83 ec 08             	sub    esp,0x8
c001668d:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016693:	83 e0 0f             	and    eax,0xf
c0016696:	50                   	push   eax
c0016697:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001669c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001669f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00166a5:	e8 ee 42 ff ff       	call   c000a998 <VgaText::setTitleColour(VgaColour)>
c00166aa:	5f                   	pop    edi
c00166ab:	58                   	pop    eax
c00166ac:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c00166b2:	c1 e8 04             	shr    eax,0x4
c00166b5:	83 e0 0f             	and    eax,0xf
c00166b8:	50                   	push   eax
c00166b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166be:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166c1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00166c7:	e8 bc 42 ff ff       	call   c000a988 <VgaText::setTitleTextColour(VgaColour)>
c00166cc:	eb b5                	jmp    c0016683 <sysAppSettings(regs*)+0x98>
c00166ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166d3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00166d6:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00166dc:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c00166e2:	c0 e8 06             	shr    al,0x6
c00166e5:	83 e0 01             	and    eax,0x1
c00166e8:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c00166ee:	31 c0                	xor    eax,eax
c00166f0:	e9 44 ff ff ff       	jmp    c0016639 <sysAppSettings(regs*)+0x4e>
c00166f5:	b8 02 00 00 00       	mov    eax,0x2
c00166fa:	e9 3a ff ff ff       	jmp    c0016639 <sysAppSettings(regs*)+0x4e>

c00166ff <sysSetFatAttrib(regs*)>:
c00166ff:	57                   	push   edi
c0016700:	56                   	push   esi
c0016701:	53                   	push   ebx
c0016702:	83 ec 1c             	sub    esp,0x1c
c0016705:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016709:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001670c:	68 14 01 00 00       	push   0x114
c0016711:	e8 f9 32 ff ff       	call   c0009a0f <malloc>
c0016716:	83 c4 0c             	add    esp,0xc
c0016719:	89 c3                	mov    ebx,eax
c001671b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016720:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016723:	57                   	push   edi
c0016724:	53                   	push   ebx
c0016725:	e8 3c 6b ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001672a:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001672d:	83 c4 0c             	add    esp,0xc
c0016730:	0f b6 d4             	movzx  edx,ah
c0016733:	0f b6 c0             	movzx  eax,al
c0016736:	52                   	push   edx
c0016737:	50                   	push   eax
c0016738:	53                   	push   ebx
c0016739:	e8 14 6e ff ff       	call   c000d552 <File::chfatattr(unsigned char, unsigned char)>
c001673e:	83 c4 10             	add    esp,0x10
c0016741:	85 db                	test   ebx,ebx
c0016743:	74 14                	je     c0016759 <sysSetFatAttrib(regs*)+0x5a>
c0016745:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016749:	8b 13                	mov    edx,DWORD PTR [ebx]
c001674b:	83 ec 0c             	sub    esp,0xc
c001674e:	53                   	push   ebx
c001674f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0016752:	83 c4 10             	add    esp,0x10
c0016755:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016759:	85 c0                	test   eax,eax
c001675b:	0f 95 c0             	setne  al
c001675e:	31 d2                	xor    edx,edx
c0016760:	0f b6 c0             	movzx  eax,al
c0016763:	f7 d8                	neg    eax
c0016765:	83 d2 00             	adc    edx,0x0
c0016768:	83 c4 10             	add    esp,0x10
c001676b:	f7 da                	neg    edx
c001676d:	5b                   	pop    ebx
c001676e:	5e                   	pop    esi
c001676f:	5f                   	pop    edi
c0016770:	c3                   	ret    

c0016771 <sysPipe(regs*)>:
c0016771:	57                   	push   edi
c0016772:	56                   	push   esi
c0016773:	53                   	push   ebx
c0016774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016778:	83 ec 0c             	sub    esp,0xc
c001677b:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001677e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016781:	6a 20                	push   0x20
c0016783:	e8 87 32 ff ff       	call   c0009a0f <malloc>
c0016788:	89 c3                	mov    ebx,eax
c001678a:	58                   	pop    eax
c001678b:	5a                   	pop    edx
c001678c:	68 00 50 00 00       	push   0x5000
c0016791:	53                   	push   ebx
c0016792:	e8 89 3f ff ff       	call   c000a720 <Pipe::Pipe(int)>
c0016797:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001679a:	e8 eb 4d ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c001679f:	89 07                	mov    DWORD PTR [edi],eax
c00167a1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00167a4:	e8 e1 4d ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c00167a9:	83 c4 10             	add    esp,0x10
c00167ac:	89 06                	mov    DWORD PTR [esi],eax
c00167ae:	31 d2                	xor    edx,edx
c00167b0:	5b                   	pop    ebx
c00167b1:	31 c0                	xor    eax,eax
c00167b3:	5e                   	pop    esi
c00167b4:	5f                   	pop    edi
c00167b5:	c3                   	ret    

c00167b6 <sysGetUnixTime(regs*)>:
c00167b6:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c00167bb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00167c1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167c5:	e9 bc 75 ff ff       	jmp    c000dd86 <Clock::timeInSecondsLocal()>

c00167ca <string_ends_with(char const*, char const*)>:
c00167ca:	57                   	push   edi
c00167cb:	56                   	push   esi
c00167cc:	53                   	push   ebx
c00167cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167d1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00167d5:	83 ec 0c             	sub    esp,0xc
c00167d8:	53                   	push   ebx
c00167d9:	e8 c2 9e fe ff       	call   c00006a0 <strlen>
c00167de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00167e1:	89 c6                	mov    esi,eax
c00167e3:	e8 b8 9e fe ff       	call   c00006a0 <strlen>
c00167e8:	83 c4 10             	add    esp,0x10
c00167eb:	39 c6                	cmp    esi,eax
c00167ed:	7d 06                	jge    c00167f5 <string_ends_with(char const*, char const*)+0x2b>
c00167ef:	5b                   	pop    ebx
c00167f0:	31 c0                	xor    eax,eax
c00167f2:	5e                   	pop    esi
c00167f3:	5f                   	pop    edi
c00167f4:	c3                   	ret    
c00167f5:	83 ec 08             	sub    esp,0x8
c00167f8:	29 c6                	sub    esi,eax
c00167fa:	57                   	push   edi
c00167fb:	01 f3                	add    ebx,esi
c00167fd:	53                   	push   ebx
c00167fe:	e8 c9 9f fe ff       	call   c00007cc <strcmp>
c0016803:	83 c4 10             	add    esp,0x10
c0016806:	85 c0                	test   eax,eax
c0016808:	5b                   	pop    ebx
c0016809:	0f 94 c0             	sete   al
c001680c:	5e                   	pop    esi
c001680d:	0f b6 c0             	movzx  eax,al
c0016810:	5f                   	pop    edi
c0016811:	c3                   	ret    

c0016812 <sysCallOpen(regs*)>:
c0016812:	56                   	push   esi
c0016813:	53                   	push   ebx
c0016814:	81 ec 04 01 00 00    	sub    esp,0x104
c001681a:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016821:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016824:	85 c9                	test   ecx,ecx
c0016826:	0f 84 ad 01 00 00    	je     c00169d9 <sysCallOpen(regs*)+0x1c7>
c001682c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001682f:	85 c0                	test   eax,eax
c0016831:	0f 84 a2 01 00 00    	je     c00169d9 <sysCallOpen(regs*)+0x1c7>
c0016837:	52                   	push   edx
c0016838:	68 75 5d 02 c0       	push   0xc0025d75
c001683d:	50                   	push   eax
c001683e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016842:	56                   	push   esi
c0016843:	e8 74 68 ff ff       	call   c000d0bc <Fs::standardiseFiles(char*, char const*, char const*)>
c0016848:	89 34 24             	mov    DWORD PTR [esp],esi
c001684b:	e8 50 9e fe ff       	call   c00006a0 <strlen>
c0016850:	83 c4 10             	add    esp,0x10
c0016853:	48                   	dec    eax
c0016854:	74 1d                	je     c0016873 <sysCallOpen(regs*)+0x61>
c0016856:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016859:	eb 0f                	jmp    c001686a <sysCallOpen(regs*)+0x58>
c001685b:	80 fa 3a             	cmp    dl,0x3a
c001685e:	74 0f                	je     c001686f <sysCallOpen(regs*)+0x5d>
c0016860:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016864:	48                   	dec    eax
c0016865:	74 0c                	je     c0016873 <sysCallOpen(regs*)+0x61>
c0016867:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001686a:	80 fa 2e             	cmp    dl,0x2e
c001686d:	75 ec                	jne    c001685b <sysCallOpen(regs*)+0x49>
c001686f:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016873:	83 ec 08             	sub    esp,0x8
c0016876:	68 79 5d 02 c0       	push   0xc0025d79
c001687b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001687e:	e8 47 ff ff ff       	call   c00167ca <string_ends_with(char const*, char const*)>
c0016883:	83 c4 10             	add    esp,0x10
c0016886:	85 c0                	test   eax,eax
c0016888:	74 1d                	je     c00168a7 <sysCallOpen(regs*)+0x95>
c001688a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001688d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016893:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001689a:	81 c4 04 01 00 00    	add    esp,0x104
c00168a0:	31 c0                	xor    eax,eax
c00168a2:	31 d2                	xor    edx,edx
c00168a4:	5b                   	pop    ebx
c00168a5:	5e                   	pop    esi
c00168a6:	c3                   	ret    
c00168a7:	83 ec 08             	sub    esp,0x8
c00168aa:	68 7e 5d 02 c0       	push   0xc0025d7e
c00168af:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168b2:	e8 13 ff ff ff       	call   c00167ca <string_ends_with(char const*, char const*)>
c00168b7:	83 c4 10             	add    esp,0x10
c00168ba:	85 c0                	test   eax,eax
c00168bc:	75 cc                	jne    c001688a <sysCallOpen(regs*)+0x78>
c00168be:	83 ec 08             	sub    esp,0x8
c00168c1:	68 7a 5d 02 c0       	push   0xc0025d7a
c00168c6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168c9:	e8 fe 9e fe ff       	call   c00007cc <strcmp>
c00168ce:	83 c4 10             	add    esp,0x10
c00168d1:	85 c0                	test   eax,eax
c00168d3:	74 b5                	je     c001688a <sysCallOpen(regs*)+0x78>
c00168d5:	83 ec 08             	sub    esp,0x8
c00168d8:	68 79 5d 02 c0       	push   0xc0025d79
c00168dd:	56                   	push   esi
c00168de:	e8 e7 fe ff ff       	call   c00167ca <string_ends_with(char const*, char const*)>
c00168e3:	83 c4 10             	add    esp,0x10
c00168e6:	85 c0                	test   eax,eax
c00168e8:	75 a0                	jne    c001688a <sysCallOpen(regs*)+0x78>
c00168ea:	83 ec 08             	sub    esp,0x8
c00168ed:	68 83 5d 02 c0       	push   0xc0025d83
c00168f2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00168f5:	e8 d0 fe ff ff       	call   c00167ca <string_ends_with(char const*, char const*)>
c00168fa:	83 c4 10             	add    esp,0x10
c00168fd:	85 c0                	test   eax,eax
c00168ff:	0f 85 e7 00 00 00    	jne    c00169ec <sysCallOpen(regs*)+0x1da>
c0016905:	83 ec 08             	sub    esp,0x8
c0016908:	68 88 5d 02 c0       	push   0xc0025d88
c001690d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016910:	e8 b5 fe ff ff       	call   c00167ca <string_ends_with(char const*, char const*)>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	85 c0                	test   eax,eax
c001691a:	0f 85 cc 00 00 00    	jne    c00169ec <sysCallOpen(regs*)+0x1da>
c0016920:	83 ec 08             	sub    esp,0x8
c0016923:	68 84 5d 02 c0       	push   0xc0025d84
c0016928:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001692b:	e8 9c 9e fe ff       	call   c00007cc <strcmp>
c0016930:	83 c4 10             	add    esp,0x10
c0016933:	85 c0                	test   eax,eax
c0016935:	0f 84 b1 00 00 00    	je     c00169ec <sysCallOpen(regs*)+0x1da>
c001693b:	83 ec 08             	sub    esp,0x8
c001693e:	68 83 5d 02 c0       	push   0xc0025d83
c0016943:	56                   	push   esi
c0016944:	e8 81 fe ff ff       	call   c00167ca <string_ends_with(char const*, char const*)>
c0016949:	83 c4 10             	add    esp,0x10
c001694c:	85 c0                	test   eax,eax
c001694e:	0f 85 98 00 00 00    	jne    c00169ec <sysCallOpen(regs*)+0x1da>
c0016954:	83 ec 0c             	sub    esp,0xc
c0016957:	68 14 01 00 00       	push   0x114
c001695c:	e8 ae 30 ff ff       	call   c0009a0f <malloc>
c0016961:	83 c4 0c             	add    esp,0xc
c0016964:	89 c6                	mov    esi,eax
c0016966:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001696b:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001696e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016971:	56                   	push   esi
c0016972:	e8 ef 68 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0016977:	83 c4 10             	add    esp,0x10
c001697a:	85 f6                	test   esi,esi
c001697c:	74 5b                	je     c00169d9 <sysCallOpen(regs*)+0x1c7>
c001697e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016981:	0f b6 c2             	movzx  eax,dl
c0016984:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016987:	89 d0                	mov    eax,edx
c0016989:	83 e0 01             	and    eax,0x1
c001698c:	f6 c2 02             	test   dl,0x2
c001698f:	74 03                	je     c0016994 <sysCallOpen(regs*)+0x182>
c0016991:	83 c8 02             	or     eax,0x2
c0016994:	f6 c2 04             	test   dl,0x4
c0016997:	74 03                	je     c001699c <sysCallOpen(regs*)+0x18a>
c0016999:	83 c8 04             	or     eax,0x4
c001699c:	f6 c2 08             	test   dl,0x8
c001699f:	74 03                	je     c00169a4 <sysCallOpen(regs*)+0x192>
c00169a1:	83 c8 0a             	or     eax,0xa
c00169a4:	83 e2 10             	and    edx,0x10
c00169a7:	74 03                	je     c00169ac <sysCallOpen(regs*)+0x19a>
c00169a9:	83 c8 12             	or     eax,0x12
c00169ac:	83 ec 08             	sub    esp,0x8
c00169af:	50                   	push   eax
c00169b0:	56                   	push   esi
c00169b1:	e8 8a 69 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c00169b6:	83 c4 10             	add    esp,0x10
c00169b9:	85 c0                	test   eax,eax
c00169bb:	75 1c                	jne    c00169d9 <sysCallOpen(regs*)+0x1c7>
c00169bd:	83 ec 0c             	sub    esp,0xc
c00169c0:	56                   	push   esi
c00169c1:	e8 c4 4b ff ff       	call   c000b58a <UnixFile::getFileDescriptor()>
c00169c6:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00169c9:	83 c4 10             	add    esp,0x10
c00169cc:	89 02                	mov    DWORD PTR [edx],eax
c00169ce:	c1 f8 1f             	sar    eax,0x1f
c00169d1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00169d4:	e9 c1 fe ff ff       	jmp    c001689a <sysCallOpen(regs*)+0x88>
c00169d9:	81 c4 04 01 00 00    	add    esp,0x104
c00169df:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00169e4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00169e9:	5b                   	pop    ebx
c00169ea:	5e                   	pop    esi
c00169eb:	c3                   	ret    
c00169ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00169ef:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00169f5:	e9 99 fe ff ff       	jmp    c0016893 <sysCallOpen(regs*)+0x81>

c00169fa <Sys::loadSyscalls()>:
c00169fa:	c7 05 60 8a 02 c0 6b 5c 01 c0 	mov    DWORD PTR ds:0xc0028a60,0xc0015c6b
c0016a04:	c7 05 64 8a 02 c0 60 58 01 c0 	mov    DWORD PTR ds:0xc0028a64,0xc0015860
c0016a0e:	c7 05 68 8a 02 c0 51 5a 01 c0 	mov    DWORD PTR ds:0xc0028a68,0xc0015a51
c0016a18:	c7 05 6c 8a 02 c0 a1 5b 01 c0 	mov    DWORD PTR ds:0xc0028a6c,0xc0015ba1
c0016a22:	c7 05 70 8a 02 c0 e9 59 01 c0 	mov    DWORD PTR ds:0xc0028a70,0xc00159e9
c0016a2c:	c7 05 74 8a 02 c0 97 58 01 c0 	mov    DWORD PTR ds:0xc0028a74,0xc0015897
c0016a36:	c7 05 78 8a 02 c0 78 58 01 c0 	mov    DWORD PTR ds:0xc0028a78,0xc0015878
c0016a40:	c7 05 7c 8a 02 c0 a6 5a 01 c0 	mov    DWORD PTR ds:0xc0028a7c,0xc0015aa6
c0016a4a:	c7 05 84 8a 02 c0 2e 61 01 c0 	mov    DWORD PTR ds:0xc0028a84,0xc001612e
c0016a54:	c7 05 80 8a 02 c0 12 68 01 c0 	mov    DWORD PTR ds:0xc0028a80,0xc0016812
c0016a5e:	c7 05 88 8a 02 c0 8e 61 01 c0 	mov    DWORD PTR ds:0xc0028a88,0xc001618e
c0016a68:	c7 05 8c 8a 02 c0 71 5e 01 c0 	mov    DWORD PTR ds:0xc0028a8c,0xc0015e71
c0016a72:	c7 05 90 8a 02 c0 a3 5c 01 c0 	mov    DWORD PTR ds:0xc0028a90,0xc0015ca3
c0016a7c:	c7 05 94 8a 02 c0 a8 5c 01 c0 	mov    DWORD PTR ds:0xc0028a94,0xc0015ca8
c0016a86:	c7 05 98 8a 02 c0 57 62 01 c0 	mov    DWORD PTR ds:0xc0028a98,0xc0016257
c0016a90:	c7 05 9c 8a 02 c0 03 62 01 c0 	mov    DWORD PTR ds:0xc0028a9c,0xc0016203
c0016a9a:	c7 05 a0 8a 02 c0 4a 5f 01 c0 	mov    DWORD PTR ds:0xc0028aa0,0xc0015f4a
c0016aa4:	c7 05 a4 8a 02 c0 a1 5f 01 c0 	mov    DWORD PTR ds:0xc0028aa4,0xc0015fa1
c0016aae:	c7 05 a8 8a 02 c0 0d 60 01 c0 	mov    DWORD PTR ds:0xc0028aa8,0xc001600d
c0016ab8:	c7 05 ac 8a 02 c0 ad 5c 01 c0 	mov    DWORD PTR ds:0xc0028aac,0xc0015cad
c0016ac2:	c7 05 b0 8a 02 c0 c7 62 01 c0 	mov    DWORD PTR ds:0xc0028ab0,0xc00162c7
c0016acc:	c7 05 b4 8a 02 c0 e1 62 01 c0 	mov    DWORD PTR ds:0xc0028ab4,0xc00162e1
c0016ad6:	c7 05 b8 8a 02 c0 e1 62 01 c0 	mov    DWORD PTR ds:0xc0028ab8,0xc00162e1
c0016ae0:	c7 05 bc 8a 02 c0 16 63 01 c0 	mov    DWORD PTR ds:0xc0028abc,0xc0016316
c0016aea:	c7 05 c0 8a 02 c0 7a 63 01 c0 	mov    DWORD PTR ds:0xc0028ac0,0xc001637a
c0016af4:	c7 05 c4 8a 02 c0 b7 5c 01 c0 	mov    DWORD PTR ds:0xc0028ac4,0xc0015cb7
c0016afe:	c7 05 c8 8a 02 c0 de 63 01 c0 	mov    DWORD PTR ds:0xc0028ac8,0xc00163de
c0016b08:	c7 05 cc 8a 02 c0 2e 5e 01 c0 	mov    DWORD PTR ds:0xc0028acc,0xc0015e2e
c0016b12:	c7 05 d0 8a 02 c0 2a 64 01 c0 	mov    DWORD PTR ds:0xc0028ad0,0xc001642a
c0016b1c:	c7 05 d4 8a 02 c0 f0 5e 01 c0 	mov    DWORD PTR ds:0xc0028ad4,0xc0015ef0
c0016b26:	c7 05 d8 8a 02 c0 ad 64 01 c0 	mov    DWORD PTR ds:0xc0028ad8,0xc00164ad
c0016b30:	c7 05 dc 8a 02 c0 7f 60 01 c0 	mov    DWORD PTR ds:0xc0028adc,0xc001607f
c0016b3a:	c7 05 e0 8a 02 c0 d6 64 01 c0 	mov    DWORD PTR ds:0xc0028ae0,0xc00164d6
c0016b44:	c7 05 e4 8a 02 c0 3e 65 01 c0 	mov    DWORD PTR ds:0xc0028ae4,0xc001653e
c0016b4e:	c7 05 e8 8a 02 c0 eb 65 01 c0 	mov    DWORD PTR ds:0xc0028ae8,0xc00165eb
c0016b58:	c7 05 ec 8a 02 c0 c7 5c 01 c0 	mov    DWORD PTR ds:0xc0028aec,0xc0015cc7
c0016b62:	c7 05 f0 8a 02 c0 31 5d 01 c0 	mov    DWORD PTR ds:0xc0028af0,0xc0015d31
c0016b6c:	c7 05 f4 8a 02 c0 7b 5d 01 c0 	mov    DWORD PTR ds:0xc0028af4,0xc0015d7b
c0016b76:	c7 05 f8 8a 02 c0 ff 66 01 c0 	mov    DWORD PTR ds:0xc0028af8,0xc00166ff
c0016b80:	c7 05 fc 8a 02 c0 fc 62 01 c0 	mov    DWORD PTR ds:0xc0028afc,0xc00162fc
c0016b8a:	c7 05 00 8b 02 c0 d0 5d 01 c0 	mov    DWORD PTR ds:0xc0028b00,0xc0015dd0
c0016b94:	c7 05 04 8b 02 c0 71 67 01 c0 	mov    DWORD PTR ds:0xc0028b04,0xc0016771
c0016b9e:	c7 05 08 8b 02 c0 b6 67 01 c0 	mov    DWORD PTR ds:0xc0028b08,0xc00167b6
c0016ba8:	c7 05 0c 8b 02 c0 41 59 01 c0 	mov    DWORD PTR ds:0xc0028b0c,0xc0015941
c0016bb2:	c7 05 10 8b 02 c0 c2 5a 01 c0 	mov    DWORD PTR ds:0xc0028b10,0xc0015ac2
c0016bbc:	c7 05 14 8b 02 c0 57 5b 01 c0 	mov    DWORD PTR ds:0xc0028b14,0xc0015b57
c0016bc6:	c7 05 18 8b 02 c0 2a 58 01 c0 	mov    DWORD PTR ds:0xc0028b18,0xc001582a
c0016bd0:	c7 05 1c 8b 02 c0 09 5c 01 c0 	mov    DWORD PTR ds:0xc0028b1c,0xc0015c09
c0016bda:	c7 05 20 8b 02 c0 a3 58 01 c0 	mov    DWORD PTR ds:0xc0028b20,0xc00158a3
c0016be4:	c7 05 24 8b 02 c0 bd 58 01 c0 	mov    DWORD PTR ds:0xc0028b24,0xc00158bd
c0016bee:	c3                   	ret    

c0016bef <Sys::systemCall(regs*, void*)>:
c0016bef:	53                   	push   ebx
c0016bf0:	83 ec 08             	sub    esp,0x8
c0016bf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016bf7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016bfa:	83 f8 7f             	cmp    eax,0x7f
c0016bfd:	77 16                	ja     c0016c15 <Sys::systemCall(regs*, void*)+0x26>
c0016bff:	8b 14 85 60 8a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd75a0]
c0016c06:	85 d2                	test   edx,edx
c0016c08:	74 0b                	je     c0016c15 <Sys::systemCall(regs*, void*)+0x26>
c0016c0a:	83 ec 0c             	sub    esp,0xc
c0016c0d:	53                   	push   ebx
c0016c0e:	ff d2                	call   edx
c0016c10:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016c13:	eb 0d                	jmp    c0016c22 <Sys::systemCall(regs*, void*)+0x33>
c0016c15:	52                   	push   edx
c0016c16:	52                   	push   edx
c0016c17:	50                   	push   eax
c0016c18:	68 8d 5d 02 c0       	push   0xc0025d8d
c0016c1d:	e8 d9 60 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016c22:	83 c4 10             	add    esp,0x10
c0016c25:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016c2a:	31 d2                	xor    edx,edx
c0016c2c:	83 c4 08             	add    esp,0x8
c0016c2f:	5b                   	pop    ebx
c0016c30:	c3                   	ret    

c0016c31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016c31:	55                   	push   ebp
c0016c32:	57                   	push   edi
c0016c33:	56                   	push   esi
c0016c34:	53                   	push   ebx
c0016c35:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016c3b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016c42:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c0016c49:	85 c0                	test   eax,eax
c0016c4b:	0f 95 c1             	setne  cl
c0016c4e:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0016c56:	0f 94 c2             	sete   dl
c0016c59:	84 d1                	test   cl,dl
c0016c5b:	74 23                	je     c0016c80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016c5d:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016c63:	74 1b                	je     c0016c80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016c65:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016c6b:	89 da                	mov    edx,ebx
c0016c6d:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016c73:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c0016c79:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016c80:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c0016c87:	05 ff 0f 00 00       	add    eax,0xfff
c0016c8c:	83 ec 0c             	sub    esp,0xc
c0016c8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c93:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c0016c99:	c1 e8 0c             	shr    eax,0xc
c0016c9c:	89 fe                	mov    esi,edi
c0016c9e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ca2:	c1 ee 0c             	shr    esi,0xc
c0016ca5:	6a 01                	push   0x1
c0016ca7:	e8 29 4d ff ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0016cac:	89 c5                	mov    ebp,eax
c0016cae:	58                   	pop    eax
c0016caf:	5a                   	pop    edx
c0016cb0:	56                   	push   esi
c0016cb1:	68 a1 5d 02 c0       	push   0xc0025da1
c0016cb6:	e8 40 60 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016cbb:	59                   	pop    ecx
c0016cbc:	58                   	pop    eax
c0016cbd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016cc1:	68 b3 5d 02 c0       	push   0xc0025db3
c0016cc6:	e8 30 60 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016ccb:	83 c4 10             	add    esp,0x10
c0016cce:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016cd4:	0f 86 31 01 00 00    	jbe    c0016e0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c0016cda:	c1 e6 0c             	shl    esi,0xc
c0016cdd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016ce0:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016ce3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ce7:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016cee:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016cf1:	01 df                	add    edi,ebx
c0016cf3:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c0016cf6:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016cfa:	0f 84 08 01 00 00    	je     c0016e08 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c0016d00:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0016d06:	76 05                	jbe    c0016d0d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c0016d08:	bf 00 10 00 00       	mov    edi,0x1000
c0016d0d:	83 ec 0c             	sub    esp,0xc
c0016d10:	31 d2                	xor    edx,edx
c0016d12:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0016d19:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016d1b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0016d1f:	50                   	push   eax
c0016d20:	8d 74 24 30          	lea    esi,[esp+0x30]
c0016d24:	56                   	push   esi
c0016d25:	52                   	push   edx
c0016d26:	57                   	push   edi
c0016d27:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0016d2e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d31:	83 c4 20             	add    esp,0x20
c0016d34:	85 c0                	test   eax,eax
c0016d36:	74 0a                	je     c0016d42 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c0016d38:	53                   	push   ebx
c0016d39:	53                   	push   ebx
c0016d3a:	50                   	push   eax
c0016d3b:	68 c5 5d 02 c0       	push   0xc0025dc5
c0016d40:	eb 0f                	jmp    c0016d51 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c0016d42:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016d46:	74 20                	je     c0016d68 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c0016d48:	51                   	push   ecx
c0016d49:	51                   	push   ecx
c0016d4a:	6a 00                	push   0x0
c0016d4c:	68 f0 5d 02 c0       	push   0xc0025df0
c0016d51:	e8 a5 5f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0016d56:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d59:	e8 a7 4f ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c0016d5e:	83 c4 10             	add    esp,0x10
c0016d61:	31 c0                	xor    eax,eax
c0016d63:	e9 68 01 00 00       	jmp    c0016ed0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c0016d68:	fa                   	cli    
c0016d69:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0016d6f:	e8 52 33 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016d74:	6a 07                	push   0x7
c0016d76:	89 c7                	mov    edi,eax
c0016d78:	55                   	push   ebp
c0016d79:	50                   	push   eax
c0016d7a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016d7f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016d82:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d88:	e8 ef 52 ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016d8d:	83 c4 0c             	add    esp,0xc
c0016d90:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016d97:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d9d:	6a 00                	push   0x0
c0016d9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016da4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016da7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016dad:	e8 24 51 ff ff       	call   c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>
c0016db2:	58                   	pop    eax
c0016db3:	5a                   	pop    edx
c0016db4:	68 07 0c 00 00       	push   0xc07
c0016db9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016dbd:	57                   	push   edi
c0016dbe:	89 ef                	mov    edi,ebp
c0016dc0:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016dc7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016dcd:	6a 00                	push   0x0
c0016dcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016dd4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016dd7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016ddd:	e8 56 56 ff ff       	call   c000c438 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016de2:	b9 00 10 00 00       	mov    ecx,0x1000
c0016de7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016de9:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0016dee:	83 c4 20             	add    esp,0x20
c0016df1:	48                   	dec    eax
c0016df2:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0016df7:	85 c0                	test   eax,eax
c0016df9:	75 01                	jne    c0016dfc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c0016dfb:	fb                   	sti    
c0016dfc:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c0016e03:	e9 df fe ff ff       	jmp    c0016ce7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c0016e08:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0016e0b:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c0016e13:	0f 86 a9 00 00 00    	jbe    c0016ec2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016e19:	fa                   	cli    
c0016e1a:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0016e20:	51                   	push   ecx
c0016e21:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0016e28:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e2e:	6a 00                	push   0x0
c0016e30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e35:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e38:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e3e:	e8 93 50 ff ff       	call   c000bed6 <VAS::mapOtherVASIn(bool, VAS*)>
c0016e43:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016e47:	c1 e6 0c             	shl    esi,0xc
c0016e4a:	01 de                	add    esi,ebx
c0016e4c:	83 c4 10             	add    esp,0x10
c0016e4f:	39 de                	cmp    esi,ebx
c0016e51:	74 61                	je     c0016eb4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0016e53:	e8 6e 32 ff ff       	call   c000a0c6 <Phys::allocatePage()>
c0016e58:	6a 07                	push   0x7
c0016e5a:	89 c7                	mov    edi,eax
c0016e5c:	55                   	push   ebp
c0016e5d:	50                   	push   eax
c0016e5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e63:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e66:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e6c:	e8 0b 52 ff ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0016e71:	58                   	pop    eax
c0016e72:	5a                   	pop    edx
c0016e73:	68 07 0c 00 00       	push   0xc07
c0016e78:	53                   	push   ebx
c0016e79:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016e7f:	57                   	push   edi
c0016e80:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0016e87:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e8d:	6a 00                	push   0x0
c0016e8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e94:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016e97:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016e9d:	e8 96 55 ff ff       	call   c000c438 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016ea2:	83 c4 1c             	add    esp,0x1c
c0016ea5:	68 00 10 00 00       	push   0x1000
c0016eaa:	6a 00                	push   0x0
c0016eac:	55                   	push   ebp
c0016ead:	e8 d2 97 fe ff       	call   c0000684 <memset>
c0016eb2:	eb 98                	jmp    c0016e4c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016eb4:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0016eb9:	48                   	dec    eax
c0016eba:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0016ebf:	75 01                	jne    c0016ec2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016ec1:	fb                   	sti    
c0016ec2:	83 ec 0c             	sub    esp,0xc
c0016ec5:	55                   	push   ebp
c0016ec6:	e8 3a 4e ff ff       	call   c000bd05 <Virt::freeKernelVirtualPages(unsigned long)>
c0016ecb:	83 c4 10             	add    esp,0x10
c0016ece:	b0 01                	mov    al,0x1
c0016ed0:	81 c4 2c 10 00 00    	add    esp,0x102c
c0016ed6:	5b                   	pop    ebx
c0016ed7:	5e                   	pop    esi
c0016ed8:	5f                   	pop    edi
c0016ed9:	5d                   	pop    ebp
c0016eda:	c3                   	ret    

c0016edb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016edb:	55                   	push   ebp
c0016edc:	57                   	push   edi
c0016edd:	56                   	push   esi
c0016ede:	53                   	push   ebx
c0016edf:	83 ec 48             	sub    esp,0x48
c0016ee2:	68 14 01 00 00       	push   0x114
c0016ee7:	e8 23 2b ff ff       	call   c0009a0f <malloc>
c0016eec:	83 c4 0c             	add    esp,0xc
c0016eef:	89 c6                	mov    esi,eax
c0016ef1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016ef5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0016ef9:	50                   	push   eax
c0016efa:	e8 67 63 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0016eff:	58                   	pop    eax
c0016f00:	5a                   	pop    edx
c0016f01:	6a 01                	push   0x1
c0016f03:	56                   	push   esi
c0016f04:	e8 37 64 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c0016f09:	83 c4 10             	add    esp,0x10
c0016f0c:	85 c0                	test   eax,eax
c0016f0e:	0f 85 47 01 00 00    	jne    c001705b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f14:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0016f1c:	83 ec 0c             	sub    esp,0xc
c0016f1f:	6a 34                	push   0x34
c0016f21:	e8 e9 2a ff ff       	call   c0009a0f <malloc>
c0016f26:	89 c3                	mov    ebx,eax
c0016f28:	58                   	pop    eax
c0016f29:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f2b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0016f2f:	57                   	push   edi
c0016f30:	53                   	push   ebx
c0016f31:	6a 00                	push   0x0
c0016f33:	6a 34                	push   0x34
c0016f35:	56                   	push   esi
c0016f36:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f39:	83 c4 20             	add    esp,0x20
c0016f3c:	85 c0                	test   eax,eax
c0016f3e:	0f 85 17 01 00 00    	jne    c001705b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f44:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0016f4a:	0f 85 0b 01 00 00    	jne    c001705b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f50:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016f53:	85 c0                	test   eax,eax
c0016f55:	0f 84 00 01 00 00    	je     c001705b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f5b:	31 d2                	xor    edx,edx
c0016f5d:	55                   	push   ebp
c0016f5e:	52                   	push   edx
c0016f5f:	50                   	push   eax
c0016f60:	56                   	push   esi
c0016f61:	e8 98 64 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0016f66:	83 c4 10             	add    esp,0x10
c0016f69:	85 c0                	test   eax,eax
c0016f6b:	0f 85 ea 00 00 00    	jne    c001705b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016f71:	83 ec 0c             	sub    esp,0xc
c0016f74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016f77:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016f7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016f7f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016f83:	0f af c2             	imul   eax,edx
c0016f86:	50                   	push   eax
c0016f87:	e8 83 2a ff ff       	call   c0009a0f <malloc>
c0016f8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016f8e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016f92:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016f95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016f99:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016f9d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016fa1:	0f af c2             	imul   eax,edx
c0016fa4:	99                   	cdq    
c0016fa5:	52                   	push   edx
c0016fa6:	50                   	push   eax
c0016fa7:	56                   	push   esi
c0016fa8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016fab:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016fae:	83 c4 20             	add    esp,0x20
c0016fb1:	85 c0                	test   eax,eax
c0016fb3:	0f 84 a2 00 00 00    	je     c001705b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016fb9:	31 d2                	xor    edx,edx
c0016fbb:	51                   	push   ecx
c0016fbc:	52                   	push   edx
c0016fbd:	50                   	push   eax
c0016fbe:	56                   	push   esi
c0016fbf:	e8 3a 64 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0016fc4:	83 c4 10             	add    esp,0x10
c0016fc7:	85 c0                	test   eax,eax
c0016fc9:	0f 85 8c 00 00 00    	jne    c001705b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016fcf:	83 ec 0c             	sub    esp,0xc
c0016fd2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016fd6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016fda:	31 ed                	xor    ebp,ebp
c0016fdc:	0f af c2             	imul   eax,edx
c0016fdf:	50                   	push   eax
c0016fe0:	e8 2a 2a ff ff       	call   c0009a0f <malloc>
c0016fe5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016fe7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016feb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016fee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016ff2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0016ff6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0016ffa:	0f af c2             	imul   eax,edx
c0016ffd:	99                   	cdq    
c0016ffe:	52                   	push   edx
c0016fff:	50                   	push   eax
c0017000:	56                   	push   esi
c0017001:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017004:	83 c4 20             	add    esp,0x20
c0017007:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001700f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017013:	0f 86 80 00 00 00    	jbe    c0017099 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017019:	0f b7 fd             	movzx  edi,bp
c001701c:	c1 e7 05             	shl    edi,0x5
c001701f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017023:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017026:	75 6b                	jne    c0017093 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017028:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001702b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001702f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017032:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017036:	52                   	push   edx
c0017037:	31 d2                	xor    edx,edx
c0017039:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001703c:	52                   	push   edx
c001703d:	50                   	push   eax
c001703e:	56                   	push   esi
c001703f:	e8 ba 63 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017044:	83 c4 10             	add    esp,0x10
c0017047:	85 c0                	test   eax,eax
c0017049:	74 17                	je     c0017062 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001704b:	83 ec 0c             	sub    esp,0xc
c001704e:	68 1c 5e 02 c0       	push   0xc0025e1c
c0017053:	e8 a3 5c ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017058:	83 c4 10             	add    esp,0x10
c001705b:	31 c0                	xor    eax,eax
c001705d:	e9 87 00 00 00       	jmp    c00170e9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017062:	83 ec 0c             	sub    esp,0xc
c0017065:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017068:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001706b:	50                   	push   eax
c001706c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017070:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017074:	56                   	push   esi
c0017075:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017079:	e8 b3 fb ff ff       	call   c0016c31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001707e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017082:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0017086:	83 c4 20             	add    esp,0x20
c0017089:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001708d:	73 04                	jae    c0017093 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001708f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017093:	45                   	inc    ebp
c0017094:	e9 76 ff ff ff       	jmp    c001700f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017099:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001709d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00170a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170a5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00170ab:	83 ec 0c             	sub    esp,0xc
c00170ae:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00170b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00170b9:	05 00 10 00 00       	add    eax,0x1000
c00170be:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00170c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170c5:	e8 55 29 ff ff       	call   c0009a1f <free>
c00170ca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00170cd:	e8 4d 29 ff ff       	call   c0009a1f <free>
c00170d2:	58                   	pop    eax
c00170d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00170d7:	e8 43 29 ff ff       	call   c0009a1f <free>
c00170dc:	89 34 24             	mov    DWORD PTR [esp],esi
c00170df:	e8 ba 62 ff ff       	call   c000d39e <File::close()>
c00170e4:	83 c4 10             	add    esp,0x10
c00170e7:	b0 01                	mov    al,0x1
c00170e9:	83 c4 3c             	add    esp,0x3c
c00170ec:	5b                   	pop    ebx
c00170ed:	5e                   	pop    esi
c00170ee:	5f                   	pop    edi
c00170ef:	5d                   	pop    ebp
c00170f0:	c3                   	ret    

c00170f1 <Thr::runtimeReferenceHelper()>:
c00170f1:	83 ec 18             	sub    esp,0x18
c00170f4:	68 24 5e 02 c0       	push   0xc0025e24
c00170f9:	e8 fd 5b ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00170fe:	fa                   	cli    
c00170ff:	83 c4 10             	add    esp,0x10
c0017102:	eb fe                	jmp    c0017102 <Thr::runtimeReferenceHelper()+0x11>

c0017104 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017104:	57                   	push   edi
c0017105:	56                   	push   esi
c0017106:	53                   	push   ebx
c0017107:	31 db                	xor    ebx,ebx
c0017109:	39 1d 00 94 02 c0    	cmp    DWORD PTR ds:0xc0029400,ebx
c001710f:	7e 3c                	jle    c001714d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0017111:	8b 34 9d 80 93 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd6c80]
c0017118:	31 ff                	xor    edi,edi
c001711a:	39 3c 9d 80 92 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6d80],edi
c0017121:	7e 27                	jle    c001714a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017123:	50                   	push   eax
c0017124:	50                   	push   eax
c0017125:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017129:	8b 06                	mov    eax,DWORD PTR [esi]
c001712b:	03 04 9d 00 93 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6d00]
c0017132:	50                   	push   eax
c0017133:	e8 94 96 fe ff       	call   c00007cc <strcmp>
c0017138:	83 c4 10             	add    esp,0x10
c001713b:	85 c0                	test   eax,eax
c001713d:	75 05                	jne    c0017144 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001713f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017142:	eb 0b                	jmp    c001714f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017144:	83 c6 10             	add    esi,0x10
c0017147:	47                   	inc    edi
c0017148:	eb d0                	jmp    c001711a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001714a:	43                   	inc    ebx
c001714b:	eb bc                	jmp    c0017109 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001714d:	31 c0                	xor    eax,eax
c001714f:	5b                   	pop    ebx
c0017150:	5e                   	pop    esi
c0017151:	5f                   	pop    edi
c0017152:	c3                   	ret    

c0017153 <Thr::loadKernelSymbolTable(char const*)>:
c0017153:	55                   	push   ebp
c0017154:	57                   	push   edi
c0017155:	56                   	push   esi
c0017156:	53                   	push   ebx
c0017157:	83 ec 68             	sub    esp,0x68
c001715a:	8b 35 50 94 02 c0    	mov    esi,DWORD PTR ds:0xc0029450
c0017160:	68 14 01 00 00       	push   0x114
c0017165:	e8 a5 28 ff ff       	call   c0009a0f <malloc>
c001716a:	83 c4 0c             	add    esp,0xc
c001716d:	89 c3                	mov    ebx,eax
c001716f:	56                   	push   esi
c0017170:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0017174:	50                   	push   eax
c0017175:	e8 ec 60 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001717a:	5e                   	pop    esi
c001717b:	5f                   	pop    edi
c001717c:	6a 01                	push   0x1
c001717e:	53                   	push   ebx
c001717f:	e8 bc 61 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c0017184:	83 c4 10             	add    esp,0x10
c0017187:	85 c0                	test   eax,eax
c0017189:	74 0a                	je     c0017195 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001718b:	83 ec 0c             	sub    esp,0xc
c001718e:	68 46 5e 02 c0       	push   0xc0025e46
c0017193:	eb 34                	jmp    c00171c9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0017195:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001719d:	83 ec 0c             	sub    esp,0xc
c00171a0:	6a 34                	push   0x34
c00171a2:	e8 68 28 ff ff       	call   c0009a0f <malloc>
c00171a7:	59                   	pop    ecx
c00171a8:	89 c7                	mov    edi,eax
c00171aa:	8d 74 24 34          	lea    esi,[esp+0x34]
c00171ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00171b0:	56                   	push   esi
c00171b1:	57                   	push   edi
c00171b2:	6a 00                	push   0x0
c00171b4:	6a 34                	push   0x34
c00171b6:	53                   	push   ebx
c00171b7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00171ba:	83 c4 20             	add    esp,0x20
c00171bd:	85 c0                	test   eax,eax
c00171bf:	74 17                	je     c00171d8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00171c1:	83 ec 0c             	sub    esp,0xc
c00171c4:	68 5d 5e 02 c0       	push   0xc0025e5d
c00171c9:	e8 d5 d7 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c00171ce:	83 c4 10             	add    esp,0x10
c00171d1:	31 c0                	xor    eax,eax
c00171d3:	e9 31 02 00 00       	jmp    c0017409 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00171d8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00171de:	75 e1                	jne    c00171c1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00171e0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00171e3:	85 c0                	test   eax,eax
c00171e5:	74 da                	je     c00171c1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00171e7:	52                   	push   edx
c00171e8:	31 d2                	xor    edx,edx
c00171ea:	52                   	push   edx
c00171eb:	50                   	push   eax
c00171ec:	53                   	push   ebx
c00171ed:	e8 0c 62 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c00171f2:	83 c4 10             	add    esp,0x10
c00171f5:	85 c0                	test   eax,eax
c00171f7:	75 c8                	jne    c00171c1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00171f9:	83 ec 0c             	sub    esp,0xc
c00171fc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017200:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017204:	31 ed                	xor    ebp,ebp
c0017206:	0f af c2             	imul   eax,edx
c0017209:	50                   	push   eax
c001720a:	e8 00 28 ff ff       	call   c0009a0f <malloc>
c001720f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017211:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017215:	89 34 24             	mov    DWORD PTR [esp],esi
c0017218:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001721c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017220:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017224:	0f af c2             	imul   eax,edx
c0017227:	99                   	cdq    
c0017228:	52                   	push   edx
c0017229:	50                   	push   eax
c001722a:	53                   	push   ebx
c001722b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001722e:	83 c4 20             	add    esp,0x20
c0017231:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017239:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017241:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017249:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017251:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017255:	0f 86 aa 00 00 00    	jbe    c0017305 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001725b:	0f b7 f5             	movzx  esi,bp
c001725e:	6b f6 28             	imul   esi,esi,0x28
c0017261:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017265:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017268:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001726c:	50                   	push   eax
c001726d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017271:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017275:	8b 16                	mov    edx,DWORD PTR [esi]
c0017277:	6b c0 28             	imul   eax,eax,0x28
c001727a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001727e:	89 d0                	mov    eax,edx
c0017280:	31 d2                	xor    edx,edx
c0017282:	52                   	push   edx
c0017283:	50                   	push   eax
c0017284:	53                   	push   ebx
c0017285:	e8 74 61 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c001728a:	83 c4 0c             	add    esp,0xc
c001728d:	6a 20                	push   0x20
c001728f:	6a 00                	push   0x0
c0017291:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017295:	52                   	push   edx
c0017296:	e8 e9 93 fe ff       	call   c0000684 <memset>
c001729b:	58                   	pop    eax
c001729c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001729e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00172a2:	51                   	push   ecx
c00172a3:	8d 54 24 40          	lea    edx,[esp+0x40]
c00172a7:	52                   	push   edx
c00172a8:	6a 00                	push   0x0
c00172aa:	6a 1f                	push   0x1f
c00172ac:	53                   	push   ebx
c00172ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00172b0:	83 c4 18             	add    esp,0x18
c00172b3:	68 74 5e 02 c0       	push   0xc0025e74
c00172b8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00172bc:	52                   	push   edx
c00172bd:	e8 0a 95 fe ff       	call   c00007cc <strcmp>
c00172c2:	83 c4 10             	add    esp,0x10
c00172c5:	85 c0                	test   eax,eax
c00172c7:	75 0f                	jne    c00172d8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00172c9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00172cc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00172d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172d8:	50                   	push   eax
c00172d9:	50                   	push   eax
c00172da:	68 7c 5e 02 c0       	push   0xc0025e7c
c00172df:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00172e3:	50                   	push   eax
c00172e4:	e8 e3 94 fe ff       	call   c00007cc <strcmp>
c00172e9:	83 c4 10             	add    esp,0x10
c00172ec:	85 c0                	test   eax,eax
c00172ee:	75 0f                	jne    c00172ff <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00172f0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00172f3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00172f7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00172fb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00172ff:	45                   	inc    ebp
c0017300:	e9 4c ff ff ff       	jmp    c0017251 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0017305:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001730a:	75 10                	jne    c001731c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001730c:	83 ec 0c             	sub    esp,0xc
c001730f:	68 84 5e 02 c0       	push   0xc0025e84
c0017314:	e8 8a d6 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0017319:	83 c4 10             	add    esp,0x10
c001731c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0017321:	75 10                	jne    c0017333 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0017323:	83 ec 0c             	sub    esp,0xc
c0017326:	68 84 5e 02 c0       	push   0xc0025e84
c001732b:	e8 73 d6 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0017330:	83 c4 10             	add    esp,0x10
c0017333:	31 d2                	xor    edx,edx
c0017335:	50                   	push   eax
c0017336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001733a:	52                   	push   edx
c001733b:	50                   	push   eax
c001733c:	53                   	push   ebx
c001733d:	e8 bc 60 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017342:	5a                   	pop    edx
c0017343:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017347:	e8 c3 26 ff ff       	call   c0009a0f <malloc>
c001734c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017350:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017354:	31 c9                	xor    ecx,ecx
c0017356:	5e                   	pop    esi
c0017357:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017359:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001735d:	55                   	push   ebp
c001735e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017362:	51                   	push   ecx
c0017363:	52                   	push   edx
c0017364:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0017368:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001736c:	53                   	push   ebx
c001736d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017370:	83 c4 14             	add    esp,0x14
c0017373:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017377:	e8 93 26 ff ff       	call   c0009a0f <malloc>
c001737c:	89 c6                	mov    esi,eax
c001737e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017380:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017383:	56                   	push   esi
c0017384:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017388:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001738c:	51                   	push   ecx
c001738d:	52                   	push   edx
c001738e:	53                   	push   ebx
c001738f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017392:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017396:	8b 15 00 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029400
c001739c:	83 c4 1c             	add    esp,0x1c
c001739f:	c1 e8 04             	shr    eax,0x4
c00173a2:	89 04 95 80 92 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6d80],eax
c00173a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00173ad:	31 d2                	xor    edx,edx
c00173af:	52                   	push   edx
c00173b0:	50                   	push   eax
c00173b1:	53                   	push   ebx
c00173b2:	e8 47 60 ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c00173b7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00173b9:	31 d2                	xor    edx,edx
c00173bb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173be:	56                   	push   esi
c00173bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173c3:	52                   	push   edx
c00173c4:	50                   	push   eax
c00173c5:	53                   	push   ebx
c00173c6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00173c9:	83 c4 14             	add    esp,0x14
c00173cc:	53                   	push   ebx
c00173cd:	e8 cc 5f ff ff       	call   c000d39e <File::close()>
c00173d2:	5d                   	pop    ebp
c00173d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00173d7:	e8 43 26 ff ff       	call   c0009a1f <free>
c00173dc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00173df:	e8 3b 26 ff ff       	call   c0009a1f <free>
c00173e4:	a1 00 94 02 c0       	mov    eax,ds:0xc0029400
c00173e9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00173ed:	8d 50 01             	lea    edx,[eax+0x1]
c00173f0:	89 0c 85 80 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6c80],ecx
c00173f7:	89 34 85 00 93 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6d00],esi
c00173fe:	89 15 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,edx
c0017404:	83 c4 10             	add    esp,0x10
c0017407:	b0 01                	mov    al,0x1
c0017409:	83 c4 5c             	add    esp,0x5c
c001740c:	5b                   	pop    ebx
c001740d:	5e                   	pop    esi
c001740e:	5f                   	pop    edi
c001740f:	5d                   	pop    ebp
c0017410:	c3                   	ret    

c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017411:	55                   	push   ebp
c0017412:	57                   	push   edi
c0017413:	56                   	push   esi
c0017414:	53                   	push   ebx
c0017415:	81 ec 68 03 00 00    	sub    esp,0x368
c001741b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017422:	8b 1d 50 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029450
c0017428:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001742c:	68 14 01 00 00       	push   0x114
c0017431:	e8 d9 25 ff ff       	call   c0009a0f <malloc>
c0017436:	83 c4 0c             	add    esp,0xc
c0017439:	89 c5                	mov    ebp,eax
c001743b:	53                   	push   ebx
c001743c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017443:	50                   	push   eax
c0017444:	e8 1d 5e ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0017449:	5e                   	pop    esi
c001744a:	5f                   	pop    edi
c001744b:	6a 01                	push   0x1
c001744d:	55                   	push   ebp
c001744e:	e8 ed 5e ff ff       	call   c000d340 <File::open(FileOpenMode)>
c0017453:	83 c4 10             	add    esp,0x10
c0017456:	85 c0                	test   eax,eax
c0017458:	0f 85 a7 06 00 00    	jne    c0017b05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001745e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017466:	83 ec 0c             	sub    esp,0xc
c0017469:	6a 34                	push   0x34
c001746b:	e8 9f 25 ff ff       	call   c0009a0f <malloc>
c0017470:	5b                   	pop    ebx
c0017471:	89 c7                	mov    edi,eax
c0017473:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017477:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001747a:	53                   	push   ebx
c001747b:	57                   	push   edi
c001747c:	6a 00                	push   0x0
c001747e:	6a 34                	push   0x34
c0017480:	55                   	push   ebp
c0017481:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017484:	83 c4 20             	add    esp,0x20
c0017487:	85 c0                	test   eax,eax
c0017489:	0f 85 76 06 00 00    	jne    c0017b05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001748f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017495:	0f 85 6a 06 00 00    	jne    c0017b05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001749b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001749e:	85 c0                	test   eax,eax
c00174a0:	0f 84 5f 06 00 00    	je     c0017b05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00174a6:	31 d2                	xor    edx,edx
c00174a8:	51                   	push   ecx
c00174a9:	52                   	push   edx
c00174aa:	50                   	push   eax
c00174ab:	55                   	push   ebp
c00174ac:	e8 4d 5f ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c00174b1:	83 c4 10             	add    esp,0x10
c00174b4:	85 c0                	test   eax,eax
c00174b6:	0f 85 49 06 00 00    	jne    c0017b05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00174bc:	83 ec 0c             	sub    esp,0xc
c00174bf:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00174c2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00174c6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00174ca:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00174ce:	0f af c2             	imul   eax,edx
c00174d1:	50                   	push   eax
c00174d2:	e8 38 25 ff ff       	call   c0009a0f <malloc>
c00174d7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00174da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00174de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00174e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00174e5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00174e9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00174ed:	0f af c2             	imul   eax,edx
c00174f0:	99                   	cdq    
c00174f1:	52                   	push   edx
c00174f2:	50                   	push   eax
c00174f3:	55                   	push   ebp
c00174f4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00174f7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00174fa:	83 c4 20             	add    esp,0x20
c00174fd:	85 c0                	test   eax,eax
c00174ff:	0f 84 00 06 00 00    	je     c0017b05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017505:	52                   	push   edx
c0017506:	31 d2                	xor    edx,edx
c0017508:	52                   	push   edx
c0017509:	50                   	push   eax
c001750a:	55                   	push   ebp
c001750b:	e8 ee 5e ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017510:	83 c4 10             	add    esp,0x10
c0017513:	85 c0                	test   eax,eax
c0017515:	0f 85 ea 05 00 00    	jne    c0017b05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001751b:	83 ec 0c             	sub    esp,0xc
c001751e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017522:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017526:	31 f6                	xor    esi,esi
c0017528:	0f af c2             	imul   eax,edx
c001752b:	50                   	push   eax
c001752c:	e8 de 24 ff ff       	call   c0009a0f <malloc>
c0017531:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017534:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017538:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001753b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001753f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0017543:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0017547:	0f af c2             	imul   eax,edx
c001754a:	99                   	cdq    
c001754b:	52                   	push   edx
c001754c:	50                   	push   eax
c001754d:	55                   	push   ebp
c001754e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017551:	83 c4 20             	add    esp,0x20
c0017554:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0017558:	0f 86 8a 00 00 00    	jbe    c00175e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001755e:	0f b7 de             	movzx  ebx,si
c0017561:	c1 e3 05             	shl    ebx,0x5
c0017564:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0017568:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001756b:	75 75                	jne    c00175e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001756d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017570:	31 d2                	xor    edx,edx
c0017572:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017576:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017579:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001757d:	50                   	push   eax
c001757e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017581:	52                   	push   edx
c0017582:	50                   	push   eax
c0017583:	55                   	push   ebp
c0017584:	e8 75 5e ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017589:	83 c4 10             	add    esp,0x10
c001758c:	85 c0                	test   eax,eax
c001758e:	0f 85 71 05 00 00    	jne    c0017b05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017594:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001759b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001759e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00175a2:	31 d2                	xor    edx,edx
c00175a4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00175a8:	83 ec 0c             	sub    esp,0xc
c00175ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00175af:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00175b6:	50                   	push   eax
c00175b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175bf:	52                   	push   edx
c00175c0:	50                   	push   eax
c00175c1:	55                   	push   ebp
c00175c2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00175c5:	83 c4 1c             	add    esp,0x1c
c00175c8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00175cb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00175ce:	50                   	push   eax
c00175cf:	6a 00                	push   0x0
c00175d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00175d9:	50                   	push   eax
c00175da:	e8 a5 90 fe ff       	call   c0000684 <memset>
c00175df:	83 c4 10             	add    esp,0x10
c00175e2:	46                   	inc    esi
c00175e3:	e9 6c ff ff ff       	jmp    c0017554 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00175e8:	53                   	push   ebx
c00175e9:	31 db                	xor    ebx,ebx
c00175eb:	68 00 01 00 00       	push   0x100
c00175f0:	6a 00                	push   0x0
c00175f2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00175f6:	50                   	push   eax
c00175f7:	e8 88 90 fe ff       	call   c0000684 <memset>
c00175fc:	83 c4 0c             	add    esp,0xc
c00175ff:	68 00 01 00 00       	push   0x100
c0017604:	6a 00                	push   0x0
c0017606:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001760d:	50                   	push   eax
c001760e:	e8 71 90 fe ff       	call   c0000684 <memset>
c0017613:	83 c4 10             	add    esp,0x10
c0017616:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001761e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017626:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001762e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017636:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001763e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0017642:	0f 86 30 01 00 00    	jbe    c0017778 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0017648:	0f b7 f3             	movzx  esi,bx
c001764b:	6b f6 28             	imul   esi,esi,0x28
c001764e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0017652:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017655:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017659:	52                   	push   edx
c001765a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001765e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017662:	8b 06                	mov    eax,DWORD PTR [esi]
c0017664:	6b d2 28             	imul   edx,edx,0x28
c0017667:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001766b:	31 d2                	xor    edx,edx
c001766d:	52                   	push   edx
c001766e:	50                   	push   eax
c001766f:	55                   	push   ebp
c0017670:	e8 89 5d ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017675:	83 c4 0c             	add    esp,0xc
c0017678:	6a 20                	push   0x20
c001767a:	6a 00                	push   0x0
c001767c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017683:	51                   	push   ecx
c0017684:	e8 fb 8f fe ff       	call   c0000684 <memset>
c0017689:	59                   	pop    ecx
c001768a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001768d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017691:	52                   	push   edx
c0017692:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017699:	51                   	push   ecx
c001769a:	6a 00                	push   0x0
c001769c:	6a 1f                	push   0x1f
c001769e:	55                   	push   ebp
c001769f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00176a2:	83 c4 1c             	add    esp,0x1c
c00176a5:	6a 09                	push   0x9
c00176a7:	68 9e 5e 02 c0       	push   0xc0025e9e
c00176ac:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00176b3:	51                   	push   ecx
c00176b4:	e8 c7 8e fe ff       	call   c0000580 <memcmp>
c00176b9:	83 c4 10             	add    esp,0x10
c00176bc:	85 c0                	test   eax,eax
c00176be:	75 21                	jne    c00176e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00176c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176c8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00176cc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00176d0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00176d3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00176da:	89 d0                	mov    eax,edx
c00176dc:	40                   	inc    eax
c00176dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00176e1:	50                   	push   eax
c00176e2:	6a 09                	push   0x9
c00176e4:	68 a8 5e 02 c0       	push   0xc0025ea8
c00176e9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00176f0:	50                   	push   eax
c00176f1:	e8 8a 8e fe ff       	call   c0000580 <memcmp>
c00176f6:	83 c4 10             	add    esp,0x10
c00176f9:	85 c0                	test   eax,eax
c00176fb:	75 21                	jne    c001771e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00176fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017701:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017705:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017709:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001770d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017710:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0017717:	89 d0                	mov    eax,edx
c0017719:	40                   	inc    eax
c001771a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001771e:	50                   	push   eax
c001771f:	50                   	push   eax
c0017720:	68 74 5e 02 c0       	push   0xc0025e74
c0017725:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001772c:	50                   	push   eax
c001772d:	e8 9a 90 fe ff       	call   c00007cc <strcmp>
c0017732:	83 c4 10             	add    esp,0x10
c0017735:	85 c0                	test   eax,eax
c0017737:	75 0f                	jne    c0017748 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0017739:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001773c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017740:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017744:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017748:	50                   	push   eax
c0017749:	50                   	push   eax
c001774a:	68 7c 5e 02 c0       	push   0xc0025e7c
c001774f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017756:	50                   	push   eax
c0017757:	e8 70 90 fe ff       	call   c00007cc <strcmp>
c001775c:	83 c4 10             	add    esp,0x10
c001775f:	85 c0                	test   eax,eax
c0017761:	75 0f                	jne    c0017772 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017763:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017766:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001776a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001776e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017772:	43                   	inc    ebx
c0017773:	e9 c6 fe ff ff       	jmp    c001763e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0017778:	31 d2                	xor    edx,edx
c001777a:	50                   	push   eax
c001777b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001777f:	52                   	push   edx
c0017780:	50                   	push   eax
c0017781:	55                   	push   ebp
c0017782:	e8 77 5c ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017787:	58                   	pop    eax
c0017788:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001778c:	e8 7e 22 ff ff       	call   c0009a0f <malloc>
c0017791:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017794:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017798:	31 d2                	xor    edx,edx
c001779a:	58                   	pop    eax
c001779b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001779f:	53                   	push   ebx
c00177a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00177a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177a8:	52                   	push   edx
c00177a9:	50                   	push   eax
c00177aa:	55                   	push   ebp
c00177ab:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177ae:	83 c4 14             	add    esp,0x14
c00177b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177b5:	e8 55 22 ff ff       	call   c0009a0f <malloc>
c00177ba:	31 d2                	xor    edx,edx
c00177bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177c0:	83 c4 0c             	add    esp,0xc
c00177c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00177c7:	52                   	push   edx
c00177c8:	50                   	push   eax
c00177c9:	55                   	push   ebp
c00177ca:	e8 2f 5c ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c00177cf:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00177d2:	31 d2                	xor    edx,edx
c00177d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00177d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00177db:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177df:	52                   	push   edx
c00177e0:	50                   	push   eax
c00177e1:	55                   	push   ebp
c00177e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177e5:	83 c4 20             	add    esp,0x20
c00177e8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00177f0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00177f4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00177f8:	0f 84 0b 03 00 00    	je     c0017b09 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00177fe:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0017805:	31 d2                	xor    edx,edx
c0017807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001780b:	c1 e8 03             	shr    eax,0x3
c001780e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017812:	51                   	push   ecx
c0017813:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017817:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001781b:	52                   	push   edx
c001781c:	50                   	push   eax
c001781d:	55                   	push   ebp
c001781e:	e8 db 5b ff ff       	call   c000d3fe <File::seek(unsigned long long)>
c0017823:	5b                   	pop    ebx
c0017824:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017828:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001782f:	e8 db 21 ff ff       	call   c0009a0f <malloc>
c0017834:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017837:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001783b:	31 d2                	xor    edx,edx
c001783d:	5e                   	pop    esi
c001783e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017842:	50                   	push   eax
c0017843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017847:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001784b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017852:	52                   	push   edx
c0017853:	50                   	push   eax
c0017854:	55                   	push   ebp
c0017855:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017858:	83 c4 20             	add    esp,0x20
c001785b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017863:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0017867:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001786b:	0f 8d 7c 02 00 00    	jge    c0017aed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017871:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017875:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017879:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001787e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017881:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017889:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001788d:	89 d8                	mov    eax,ebx
c001788f:	c1 e8 08             	shr    eax,0x8
c0017892:	89 c6                	mov    esi,eax
c0017894:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017898:	c1 e6 04             	shl    esi,0x4
c001789b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001789f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00178a2:	85 d2                	test   edx,edx
c00178a4:	0f 85 bf 00 00 00    	jne    c0017969 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00178aa:	83 ec 0c             	sub    esp,0xc
c00178ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178b1:	03 06                	add    eax,DWORD PTR [esi]
c00178b3:	50                   	push   eax
c00178b4:	e8 4b f8 ff ff       	call   c0017104 <Thr::getAddressOfKernelSymbol(char const*)>
c00178b9:	83 c4 10             	add    esp,0x10
c00178bc:	89 c2                	mov    edx,eax
c00178be:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00178c3:	85 c0                	test   eax,eax
c00178c5:	0f 85 9e 00 00 00    	jne    c0017969 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00178cb:	83 ec 0c             	sub    esp,0xc
c00178ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00178d2:	03 06                	add    eax,DWORD PTR [esi]
c00178d4:	50                   	push   eax
c00178d5:	e8 36 10 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c00178da:	83 c4 10             	add    esp,0x10
c00178dd:	89 c2                	mov    edx,eax
c00178df:	85 c0                	test   eax,eax
c00178e1:	0f 85 82 00 00 00    	jne    c0017969 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00178e7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178eb:	50                   	push   eax
c00178ec:	50                   	push   eax
c00178ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f1:	03 06                	add    eax,DWORD PTR [esi]
c00178f3:	50                   	push   eax
c00178f4:	68 b2 5e 02 c0       	push   0xc0025eb2
c00178f9:	e8 fd 53 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00178fe:	58                   	pop    eax
c00178ff:	5a                   	pop    edx
c0017900:	68 cc 5e 02 c0       	push   0xc0025ecc
c0017905:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001790c:	50                   	push   eax
c001790d:	e8 2e 8e fe ff       	call   c0000740 <strcpy>
c0017912:	59                   	pop    ecx
c0017913:	58                   	pop    eax
c0017914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017918:	03 06                	add    eax,DWORD PTR [esi]
c001791a:	50                   	push   eax
c001791b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017922:	50                   	push   eax
c0017923:	e8 58 8f fe ff       	call   c0000880 <strcat>
c0017928:	58                   	pop    eax
c0017929:	5a                   	pop    edx
c001792a:	68 62 5f 02 c0       	push   0xc0025f62
c001792f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017936:	50                   	push   eax
c0017937:	e8 44 8f fe ff       	call   c0000880 <strcat>
c001793c:	83 c4 10             	add    esp,0x10
c001793f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017944:	0f 84 5d 01 00 00    	je     c0017aa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001794a:	83 ec 0c             	sub    esp,0xc
c001794d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017954:	50                   	push   eax
c0017955:	e8 49 d0 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001795a:	83 c4 10             	add    esp,0x10
c001795d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017961:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017965:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0017969:	80 fb 01             	cmp    bl,0x1
c001796c:	0f 85 88 00 00 00    	jne    c00179fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017972:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017979:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001797d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017981:	01 ce                	add    esi,ecx
c0017983:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017989:	0f 94 c0             	sete   al
c001798c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017992:	0f 94 c3             	sete   bl
c0017995:	09 c3                	or     ebx,eax
c0017997:	8b 06                	mov    eax,DWORD PTR [esi]
c0017999:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001799e:	74 41                	je     c00179e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00179a0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00179a3:	84 db                	test   bl,bl
c00179a5:	75 15                	jne    c00179bc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00179a7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00179ab:	66 83 f8 0c          	cmp    ax,0xc
c00179af:	76 05                	jbe    c00179b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00179b1:	b8 0c 00 00 00       	mov    eax,0xc
c00179b6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00179ba:	76 37                	jbe    c00179f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00179bc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00179c0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00179c5:	0f 84 dc 00 00 00    	je     c0017aa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00179cb:	83 ec 0c             	sub    esp,0xc
c00179ce:	68 e3 5e 02 c0       	push   0xc0025ee3
c00179d3:	e8 cb cf ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c00179d8:	83 c4 10             	add    esp,0x10
c00179db:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00179df:	eb 12                	jmp    c00179f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00179e1:	01 c1                	add    ecx,eax
c00179e3:	84 db                	test   bl,bl
c00179e5:	75 0c                	jne    c00179f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00179e7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00179eb:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00179ef:	77 02                	ja     c00179f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00179f1:	01 d1                	add    ecx,edx
c00179f3:	89 0e                	mov    DWORD PTR [esi],ecx
c00179f5:	e9 ea 00 00 00       	jmp    c0017ae4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00179fa:	80 fb 02             	cmp    bl,0x2
c00179fd:	75 7c                	jne    c0017a7b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00179ff:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017a06:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0017a0a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0017a0e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0017a14:	74 20                	je     c0017a36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017a16:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017a1c:	74 18                	je     c0017a36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0017a1e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a22:	b9 0a 00 00 00       	mov    ecx,0xa
c0017a27:	66 83 f8 0e          	cmp    ax,0xe
c0017a2b:	77 03                	ja     c0017a30 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0017a2d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0017a30:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0017a34:	76 1f                	jbe    c0017a55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0017a36:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0017a3a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a3f:	74 66                	je     c0017aa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017a41:	83 ec 0c             	sub    esp,0xc
c0017a44:	68 ff 5e 02 c0       	push   0xc0025eff
c0017a49:	e8 55 cf ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0017a4e:	83 c4 10             	add    esp,0x10
c0017a51:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017a55:	8b 06                	mov    eax,DWORD PTR [esi]
c0017a57:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017a5c:	74 13                	je     c0017a71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017a5e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017a62:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0017a69:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017a6d:	01 c8                	add    eax,ecx
c0017a6f:	eb 04                	jmp    c0017a75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017a71:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017a75:	01 c2                	add    edx,eax
c0017a77:	89 16                	mov    DWORD PTR [esi],edx
c0017a79:	eb 69                	jmp    c0017ae4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017a7b:	0f b6 db             	movzx  ebx,bl
c0017a7e:	50                   	push   eax
c0017a7f:	50                   	push   eax
c0017a80:	53                   	push   ebx
c0017a81:	68 1b 5f 02 c0       	push   0xc0025f1b
c0017a86:	e8 70 52 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017a8b:	83 c4 10             	add    esp,0x10
c0017a8e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017a93:	74 12                	je     c0017aa7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017a95:	83 ec 0c             	sub    esp,0xc
c0017a98:	68 26 5f 02 c0       	push   0xc0025f26
c0017a9d:	e8 01 cf ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0017aa2:	83 c4 10             	add    esp,0x10
c0017aa5:	eb 3d                	jmp    c0017ae4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0017aa7:	83 ec 0c             	sub    esp,0xc
c0017aaa:	55                   	push   ebp
c0017aab:	e8 ee 58 ff ff       	call   c000d39e <File::close()>
c0017ab0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017ab3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017ab6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017ab9:	59                   	pop    ecx
c0017aba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017abe:	e8 5c 1f ff ff       	call   c0009a1f <free>
c0017ac3:	5b                   	pop    ebx
c0017ac4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017ac8:	e8 52 1f ff ff       	call   c0009a1f <free>
c0017acd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017ad0:	e8 4a 1f ff ff       	call   c0009a1f <free>
c0017ad5:	5e                   	pop    esi
c0017ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017ada:	e8 40 1f ff ff       	call   c0009a1f <free>
c0017adf:	83 c4 10             	add    esp,0x10
c0017ae2:	eb 21                	jmp    c0017b05 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017ae4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0017ae8:	e9 76 fd ff ff       	jmp    c0017863 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017aed:	83 ec 0c             	sub    esp,0xc
c0017af0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017af4:	e8 26 1f ff ff       	call   c0009a1f <free>
c0017af9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0017afd:	83 c4 10             	add    esp,0x10
c0017b00:	e9 eb fc ff ff       	jmp    c00177f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0017b05:	31 c0                	xor    eax,eax
c0017b07:	eb 33                	jmp    c0017b3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0017b09:	83 ec 0c             	sub    esp,0xc
c0017b0c:	55                   	push   ebp
c0017b0d:	e8 8c 58 ff ff       	call   c000d39e <File::close()>
c0017b12:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017b15:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017b18:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017b1b:	58                   	pop    eax
c0017b1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017b20:	e8 fa 1e ff ff       	call   c0009a1f <free>
c0017b25:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017b28:	e8 f2 1e ff ff       	call   c0009a1f <free>
c0017b2d:	5a                   	pop    edx
c0017b2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b32:	e8 e8 1e ff ff       	call   c0009a1f <free>
c0017b37:	83 c4 10             	add    esp,0x10
c0017b3a:	b0 01                	mov    al,0x1
c0017b3c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017b42:	5b                   	pop    ebx
c0017b43:	5e                   	pop    esi
c0017b44:	5f                   	pop    edi
c0017b45:	5d                   	pop    ebp
c0017b46:	c3                   	ret    

c0017b47 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017b47:	56                   	push   esi
c0017b48:	31 d2                	xor    edx,edx
c0017b4a:	53                   	push   ebx
c0017b4b:	8b 1d 60 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c60
c0017b51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017b55:	39 d3                	cmp    ebx,edx
c0017b57:	7e 1b                	jle    c0017b74 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017b59:	8b 04 95 80 8e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7180]
c0017b60:	39 c8                	cmp    eax,ecx
c0017b62:	77 0d                	ja     c0017b71 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017b64:	8b 34 95 80 8c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd7380]
c0017b6b:	01 c6                	add    esi,eax
c0017b6d:	39 ce                	cmp    esi,ecx
c0017b6f:	77 05                	ja     c0017b76 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017b71:	42                   	inc    edx
c0017b72:	eb e1                	jmp    c0017b55 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017b74:	31 c0                	xor    eax,eax
c0017b76:	5b                   	pop    ebx
c0017b77:	5e                   	pop    esi
c0017b78:	c3                   	ret    

c0017b79 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017b79:	53                   	push   ebx
c0017b7a:	31 c0                	xor    eax,eax
c0017b7c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017b80:	8b 1d 60 8c 02 c0    	mov    ebx,DWORD PTR ds:0xc0028c60
c0017b86:	39 c3                	cmp    ebx,eax
c0017b88:	7e 22                	jle    c0017bac <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017b8a:	8b 14 85 80 8e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7180]
c0017b91:	39 ca                	cmp    edx,ecx
c0017b93:	77 14                	ja     c0017ba9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017b95:	03 14 85 80 8c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd7380]
c0017b9c:	39 ca                	cmp    edx,ecx
c0017b9e:	76 09                	jbe    c0017ba9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017ba0:	8b 04 85 80 90 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f80]
c0017ba7:	eb 05                	jmp    c0017bae <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017ba9:	40                   	inc    eax
c0017baa:	eb da                	jmp    c0017b86 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017bac:	31 c0                	xor    eax,eax
c0017bae:	5b                   	pop    ebx
c0017baf:	c3                   	ret    

c0017bb0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017bb0:	53                   	push   ebx
c0017bb1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017bb5:	53                   	push   ebx
c0017bb6:	e8 8c ff ff ff       	call   c0017b47 <Thr::getDriverBaseFromAddress(unsigned long)>
c0017bbb:	5a                   	pop    edx
c0017bbc:	31 d2                	xor    edx,edx
c0017bbe:	85 c0                	test   eax,eax
c0017bc0:	74 04                	je     c0017bc6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017bc2:	89 da                	mov    edx,ebx
c0017bc4:	29 c2                	sub    edx,eax
c0017bc6:	89 d0                	mov    eax,edx
c0017bc8:	5b                   	pop    ebx
c0017bc9:	c3                   	ret    

c0017bca <Thr::loadDLL(char const*, bool)>:
c0017bca:	55                   	push   ebp
c0017bcb:	57                   	push   edi
c0017bcc:	56                   	push   esi
c0017bcd:	53                   	push   ebx
c0017bce:	81 ec 34 01 00 00    	sub    esp,0x134
c0017bd4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017bdb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017be2:	56                   	push   esi
c0017be3:	68 3e 5f 02 c0       	push   0xc0025f3e
c0017be8:	e8 0e 51 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017bed:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017bf4:	e8 16 1e ff ff       	call   c0009a0f <malloc>
c0017bf9:	83 c4 0c             	add    esp,0xc
c0017bfc:	89 c3                	mov    ebx,eax
c0017bfe:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c0017c04:	56                   	push   esi
c0017c05:	50                   	push   eax
c0017c06:	e8 5b 56 ff ff       	call   c000d266 <File::File(char const*, Process*)>
c0017c0b:	83 c4 10             	add    esp,0x10
c0017c0e:	85 db                	test   ebx,ebx
c0017c10:	75 3c                	jne    c0017c4e <Thr::loadDLL(char const*, bool)+0x84>
c0017c12:	89 f8                	mov    eax,edi
c0017c14:	84 c0                	test   al,al
c0017c16:	0f 84 d2 01 00 00    	je     c0017dee <Thr::loadDLL(char const*, bool)+0x224>
c0017c1c:	55                   	push   ebp
c0017c1d:	55                   	push   ebp
c0017c1e:	68 4f 5f 02 c0       	push   0xc0025f4f
c0017c23:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0017c27:	55                   	push   ebp
c0017c28:	e8 13 8b fe ff       	call   c0000740 <strcpy>
c0017c2d:	58                   	pop    eax
c0017c2e:	5a                   	pop    edx
c0017c2f:	56                   	push   esi
c0017c30:	55                   	push   ebp
c0017c31:	e8 4a 8c fe ff       	call   c0000880 <strcat>
c0017c36:	59                   	pop    ecx
c0017c37:	58                   	pop    eax
c0017c38:	68 62 5f 02 c0       	push   0xc0025f62
c0017c3d:	55                   	push   ebp
c0017c3e:	e8 3d 8c fe ff       	call   c0000880 <strcat>
c0017c43:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017c46:	e8 58 cd ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0017c4b:	83 c4 10             	add    esp,0x10
c0017c4e:	51                   	push   ecx
c0017c4f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017c53:	50                   	push   eax
c0017c54:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017c58:	50                   	push   eax
c0017c59:	53                   	push   ebx
c0017c5a:	e8 8d 59 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c0017c5f:	83 c4 10             	add    esp,0x10
c0017c62:	85 db                	test   ebx,ebx
c0017c64:	74 0c                	je     c0017c72 <Thr::loadDLL(char const*, bool)+0xa8>
c0017c66:	83 ec 0c             	sub    esp,0xc
c0017c69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c6b:	53                   	push   ebx
c0017c6c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017c6f:	83 c4 10             	add    esp,0x10
c0017c72:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017c77:	75 0a                	jne    c0017c83 <Thr::loadDLL(char const*, bool)+0xb9>
c0017c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017c7d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017c81:	75 3c                	jne    c0017cbf <Thr::loadDLL(char const*, bool)+0xf5>
c0017c83:	89 f8                	mov    eax,edi
c0017c85:	84 c0                	test   al,al
c0017c87:	0f 84 49 01 00 00    	je     c0017dd6 <Thr::loadDLL(char const*, bool)+0x20c>
c0017c8d:	51                   	push   ecx
c0017c8e:	51                   	push   ecx
c0017c8f:	68 4f 5f 02 c0       	push   0xc0025f4f
c0017c94:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017c98:	53                   	push   ebx
c0017c99:	e8 a2 8a fe ff       	call   c0000740 <strcpy>
c0017c9e:	5d                   	pop    ebp
c0017c9f:	58                   	pop    eax
c0017ca0:	56                   	push   esi
c0017ca1:	53                   	push   ebx
c0017ca2:	e8 d9 8b fe ff       	call   c0000880 <strcat>
c0017ca7:	58                   	pop    eax
c0017ca8:	5a                   	pop    edx
c0017ca9:	68 62 5f 02 c0       	push   0xc0025f62
c0017cae:	53                   	push   ebx
c0017caf:	e8 cc 8b fe ff       	call   c0000880 <strcat>
c0017cb4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017cb7:	e8 e7 cc ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0017cbc:	83 c4 10             	add    esp,0x10
c0017cbf:	52                   	push   edx
c0017cc0:	6a 03                	push   0x3
c0017cc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017cc6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017cca:	05 ff 0f 00 00       	add    eax,0xfff
c0017ccf:	83 d2 00             	adc    edx,0x0
c0017cd2:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017cd6:	50                   	push   eax
c0017cd7:	ff 35 30 80 02 c0    	push   DWORD PTR ds:0xc0028030
c0017cdd:	e8 9c 44 ff ff       	call   c000c17e <VAS::allocatePages(int, int)>
c0017ce2:	59                   	pop    ecx
c0017ce3:	89 c3                	mov    ebx,eax
c0017ce5:	5d                   	pop    ebp
c0017ce6:	50                   	push   eax
c0017ce7:	68 e2 40 02 c0       	push   0xc00240e2
c0017cec:	e8 0a 50 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017cf1:	89 34 24             	mov    DWORD PTR [esp],esi
c0017cf4:	e8 a7 89 fe ff       	call   c00006a0 <strlen>
c0017cf9:	8b 2d 60 8c 02 c0    	mov    ebp,DWORD PTR ds:0xc0028c60
c0017cff:	40                   	inc    eax
c0017d00:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d03:	e8 07 1d ff ff       	call   c0009a0f <malloc>
c0017d08:	89 04 ad 80 90 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6f80],eax
c0017d0f:	58                   	pop    eax
c0017d10:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0017d15:	5a                   	pop    edx
c0017d16:	56                   	push   esi
c0017d17:	ff 34 85 80 90 02 c0 	push   DWORD PTR [eax*4-0x3ffd6f80]
c0017d1e:	e8 1d 8a fe ff       	call   c0000740 <strcpy>
c0017d23:	a1 60 8c 02 c0       	mov    eax,ds:0xc0028c60
c0017d28:	8d 50 01             	lea    edx,[eax+0x1]
c0017d2b:	89 1c 85 80 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7180],ebx
c0017d32:	89 15 60 8c 02 c0    	mov    DWORD PTR ds:0xc0028c60,edx
c0017d38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d3c:	83 c4 0c             	add    esp,0xc
c0017d3f:	89 14 85 80 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7380],edx
c0017d46:	6a 01                	push   0x1
c0017d48:	53                   	push   ebx
c0017d49:	56                   	push   esi
c0017d4a:	e8 c2 f6 ff ff       	call   c0017411 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017d4f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0017d53:	83 c4 10             	add    esp,0x10
c0017d56:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017d5b:	0f 85 89 00 00 00    	jne    c0017dea <Thr::loadDLL(char const*, bool)+0x220>
c0017d61:	89 f8                	mov    eax,edi
c0017d63:	84 c0                	test   al,al
c0017d65:	74 73                	je     c0017dda <Thr::loadDLL(char const*, bool)+0x210>
c0017d67:	83 ec 0c             	sub    esp,0xc
c0017d6a:	68 64 5f 02 c0       	push   0xc0025f64
c0017d6f:	e8 2f cc ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0017d74:	83 c4 10             	add    esp,0x10
c0017d77:	eb 61                	jmp    c0017dda <Thr::loadDLL(char const*, bool)+0x210>
c0017d79:	50                   	push   eax
c0017d7a:	50                   	push   eax
c0017d7b:	89 e8                	mov    eax,ebp
c0017d7d:	c1 e0 0c             	shl    eax,0xc
c0017d80:	01 d8                	add    eax,ebx
c0017d82:	50                   	push   eax
c0017d83:	ff 35 30 80 02 c0    	push   DWORD PTR ds:0xc0028030
c0017d89:	e8 58 3f ff ff       	call   c000bce6 <VAS::getPageTableEntry(unsigned long)>
c0017d8e:	83 c4 10             	add    esp,0x10
c0017d91:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d93:	a8 60                	test   al,0x60
c0017d95:	75 11                	jne    c0017da8 <Thr::loadDLL(char const*, bool)+0x1de>
c0017d97:	83 ec 0c             	sub    esp,0xc
c0017d9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017d9f:	50                   	push   eax
c0017da0:	e8 9e 22 ff ff       	call   c000a043 <Phys::freePage(unsigned long)>
c0017da5:	83 c4 10             	add    esp,0x10
c0017da8:	45                   	inc    ebp
c0017da9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017dad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017db1:	05 ff 0f 00 00       	add    eax,0xfff
c0017db6:	bf 00 00 00 00       	mov    edi,0x0
c0017dbb:	83 d2 00             	adc    edx,0x0
c0017dbe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017dc2:	c1 ea 0c             	shr    edx,0xc
c0017dc5:	39 c5                	cmp    ebp,eax
c0017dc7:	89 d1                	mov    ecx,edx
c0017dc9:	89 f8                	mov    eax,edi
c0017dcb:	19 c8                	sbb    eax,ecx
c0017dcd:	72 aa                	jb     c0017d79 <Thr::loadDLL(char const*, bool)+0x1af>
c0017dcf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017dd4:	75 18                	jne    c0017dee <Thr::loadDLL(char const*, bool)+0x224>
c0017dd6:	31 db                	xor    ebx,ebx
c0017dd8:	eb 14                	jmp    c0017dee <Thr::loadDLL(char const*, bool)+0x224>
c0017dda:	83 ec 0c             	sub    esp,0xc
c0017ddd:	68 83 5f 02 c0       	push   0xc0025f83
c0017de2:	e8 bc cb ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0017de7:	83 c4 10             	add    esp,0x10
c0017dea:	31 ed                	xor    ebp,ebp
c0017dec:	eb bb                	jmp    c0017da9 <Thr::loadDLL(char const*, bool)+0x1df>
c0017dee:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017df4:	89 d8                	mov    eax,ebx
c0017df6:	5b                   	pop    ebx
c0017df7:	5e                   	pop    esi
c0017df8:	5f                   	pop    edi
c0017df9:	5d                   	pop    ebp
c0017dfa:	c3                   	ret    

c0017dfb <Thr::executeDLL(unsigned long, void*)>:
c0017dfb:	56                   	push   esi
c0017dfc:	53                   	push   ebx
c0017dfd:	52                   	push   edx
c0017dfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017e06:	85 db                	test   ebx,ebx
c0017e08:	75 10                	jne    c0017e1a <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017e0a:	83 ec 0c             	sub    esp,0xc
c0017e0d:	68 9f 5f 02 c0       	push   0xc0025f9f
c0017e12:	e8 8c cb ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0017e17:	83 c4 10             	add    esp,0x10
c0017e1a:	50                   	push   eax
c0017e1b:	50                   	push   eax
c0017e1c:	53                   	push   ebx
c0017e1d:	68 c9 5f 02 c0       	push   0xc0025fc9
c0017e22:	e8 d4 4e ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0017e27:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017e2b:	89 d8                	mov    eax,ebx
c0017e2d:	83 c4 14             	add    esp,0x14
c0017e30:	5b                   	pop    ebx
c0017e31:	5e                   	pop    esi
c0017e32:	ff e0                	jmp    eax

c0017e34 <userModeEntryPoint(void*)>:
c0017e34:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0017e39:	48                   	dec    eax
c0017e3a:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0017e3f:	75 03                	jne    c0017e44 <userModeEntryPoint(void*)+0x10>
c0017e41:	fb                   	sti    
c0017e42:	66 90                	xchg   ax,ax
c0017e44:	fb                   	sti    
c0017e45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e4a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017e4d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0017e53:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017e57:	e9 03 84 fe ff       	jmp    c000025f <goToUsermode>

c0017e5c <changeTSS>:
c0017e5c:	83 ec 14             	sub    esp,0x14
c0017e5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017e64:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017e67:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017e6c:	c1 e2 15             	shl    edx,0x15
c0017e6f:	29 d0                	sub    eax,edx
c0017e71:	50                   	push   eax
c0017e72:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0017e77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017e7d:	05 7c 11 00 00       	add    eax,0x117c
c0017e82:	50                   	push   eax
c0017e83:	e8 a0 34 ff ff       	call   c000b328 <TSS::setESP(unsigned long)>
c0017e88:	83 c4 1c             	add    esp,0x1c
c0017e8b:	c3                   	ret    

c0017e8c <switchToThread(ThreadControlBlock*)>:
c0017e8c:	57                   	push   edi
c0017e8d:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0017e92:	56                   	push   esi
c0017e93:	85 c0                	test   eax,eax
c0017e95:	53                   	push   ebx
c0017e96:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017e9a:	0f 85 90 00 00 00    	jne    c0017f30 <switchToThread(ThreadControlBlock*)+0xa4>
c0017ea0:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017ea3:	3c ff                	cmp    al,0xff
c0017ea5:	0f 84 81 00 00 00    	je     c0017f2c <switchToThread(ThreadControlBlock*)+0xa0>
c0017eab:	0f b6 d0             	movzx  edx,al
c0017eae:	b8 00 04 00 00       	mov    eax,0x400
c0017eb3:	29 d0                	sub    eax,edx
c0017eb5:	d1 f8                	sar    eax,1
c0017eb7:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c0017eba:	66 90                	xchg   ax,ax
c0017ebc:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017ebf:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0017ec4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017eca:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017ed1:	74 4d                	je     c0017f20 <switchToThread(ThreadControlBlock*)+0x94>
c0017ed3:	0f 31                	rdtsc  
c0017ed5:	a3 68 94 02 c0       	mov    ds:0xc0029468,eax
c0017eda:	89 c6                	mov    esi,eax
c0017edc:	89 d7                	mov    edi,edx
c0017ede:	2b 35 58 94 02 c0    	sub    esi,DWORD PTR ds:0xc0029458
c0017ee4:	89 15 6c 94 02 c0    	mov    DWORD PTR ds:0xc002946c,edx
c0017eea:	1b 3d 5c 94 02 c0    	sbb    edi,DWORD PTR ds:0xc002945c
c0017ef0:	89 35 60 94 02 c0    	mov    DWORD PTR ds:0xc0029460,esi
c0017ef6:	a3 58 94 02 c0       	mov    ds:0xc0029458,eax
c0017efb:	89 3d 64 94 02 c0    	mov    DWORD PTR ds:0xc0029464,edi
c0017f01:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f07:	89 15 5c 94 02 c0    	mov    DWORD PTR ds:0xc002945c,edx
c0017f0d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0017f13:	01 c6                	add    esi,eax
c0017f15:	11 d7                	adc    edi,edx
c0017f17:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0017f1a:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0017f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0017f20:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0017f24:	5b                   	pop    ebx
c0017f25:	5e                   	pop    esi
c0017f26:	5f                   	pop    edi
c0017f27:	e9 6b 83 fe ff       	jmp    c0000297 <switchToThreadASM>
c0017f2c:	31 c0                	xor    eax,eax
c0017f2e:	eb 8c                	jmp    c0017ebc <switchToThread(ThreadControlBlock*)+0x30>
c0017f30:	5b                   	pop    ebx
c0017f31:	c7 05 20 94 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x1
c0017f3b:	5e                   	pop    esi
c0017f3c:	5f                   	pop    edi
c0017f3d:	c3                   	ret    
c0017f3e:	66 90                	xchg   ax,ax

c0017f40 <Process::addArgs(char**)>:
c0017f40:	57                   	push   edi
c0017f41:	56                   	push   esi
c0017f42:	53                   	push   ebx
c0017f43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017f47:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017f4b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0017f55:	85 ff                	test   edi,edi
c0017f57:	74 43                	je     c0017f9c <Process::addArgs(char**)+0x5c>
c0017f59:	8b 07                	mov    eax,DWORD PTR [edi]
c0017f5b:	85 c0                	test   eax,eax
c0017f5d:	74 3d                	je     c0017f9c <Process::addArgs(char**)+0x5c>
c0017f5f:	31 db                	xor    ebx,ebx
c0017f61:	8d 76 00             	lea    esi,[esi+0x0]
c0017f64:	83 ec 0c             	sub    esp,0xc
c0017f67:	50                   	push   eax
c0017f68:	e8 33 87 fe ff       	call   c00006a0 <strlen>
c0017f6d:	40                   	inc    eax
c0017f6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0017f71:	e8 99 1a ff ff       	call   c0009a0f <malloc>
c0017f76:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017f7d:	5a                   	pop    edx
c0017f7e:	59                   	pop    ecx
c0017f7f:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017f82:	43                   	inc    ebx
c0017f83:	50                   	push   eax
c0017f84:	e8 b7 87 fe ff       	call   c0000740 <strcpy>
c0017f89:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017f8f:	83 c4 10             	add    esp,0x10
c0017f92:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017f95:	85 c0                	test   eax,eax
c0017f97:	75 cb                	jne    c0017f64 <Process::addArgs(char**)+0x24>
c0017f99:	8d 76 00             	lea    esi,[esi+0x0]
c0017f9c:	5b                   	pop    ebx
c0017f9d:	5e                   	pop    esi
c0017f9e:	5f                   	pop    edi
c0017f9f:	c3                   	ret    

c0017fa0 <Process::Process(char const*, Process*, char**)>:
c0017fa0:	56                   	push   esi
c0017fa1:	53                   	push   ebx
c0017fa2:	83 ec 14             	sub    esp,0x14
c0017fa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa9:	05 0c 02 00 00       	add    eax,0x20c
c0017fae:	bb 07 00 00 00       	mov    ebx,0x7
c0017fb3:	89 c6                	mov    esi,eax
c0017fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fb8:	85 db                	test   ebx,ebx
c0017fba:	78 14                	js     c0017fd0 <Process::Process(char const*, Process*, char**)+0x30>
c0017fbc:	83 ec 0c             	sub    esp,0xc
c0017fbf:	56                   	push   esi
c0017fc0:	e8 db af 00 00       	call   c0022fa0 <ThreadControlBlock::ThreadControlBlock()>
c0017fc5:	83 c4 10             	add    esp,0x10
c0017fc8:	83 c6 5f             	add    esi,0x5f
c0017fcb:	4b                   	dec    ebx
c0017fcc:	eb ea                	jmp    c0017fb8 <Process::Process(char const*, Process*, char**)+0x18>
c0017fce:	66 90                	xchg   ax,ax
c0017fd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fd4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017fdb:	83 ec 0c             	sub    esp,0xc
c0017fde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017fe2:	e8 45 c8 ff ff       	call   c001482c <Krnl::newProcessEnv(Process*)>
c0017fe7:	83 c4 10             	add    esp,0x10
c0017fea:	89 c2                	mov    edx,eax
c0017fec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ff0:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ffa:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0018003:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c0018008:	8d 50 01             	lea    edx,[eax+0x1]
c001800b:	89 15 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,edx
c0018011:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018015:	89 02                	mov    DWORD PTR [edx],eax
c0018017:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001801f:	83 ec 0c             	sub    esp,0xc
c0018022:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018026:	e8 e4 19 ff ff       	call   c0009a0f <malloc>
c001802b:	83 c4 10             	add    esp,0x10
c001802e:	89 c3                	mov    ebx,eax
c0018030:	83 ec 08             	sub    esp,0x8
c0018033:	6a 00                	push   0x0
c0018035:	53                   	push   ebx
c0018036:	e8 eb 44 ff ff       	call   c000c526 <VAS::VAS(bool)>
c001803b:	83 c4 10             	add    esp,0x10
c001803e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018042:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018048:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001804c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001805a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001805e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0018064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018068:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001806e:	85 c0                	test   eax,eax
c0018070:	74 42                	je     c00180b4 <Process::Process(char const*, Process*, char**)+0x114>
c0018072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018076:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001807c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018086:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001808c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018090:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018096:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001809c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180a0:	05 0c 01 00 00       	add    eax,0x10c
c00180a5:	83 ec 08             	sub    esp,0x8
c00180a8:	52                   	push   edx
c00180a9:	50                   	push   eax
c00180aa:	e8 91 86 fe ff       	call   c0000740 <strcpy>
c00180af:	83 c4 10             	add    esp,0x10
c00180b2:	eb 64                	jmp    c0018118 <Process::Process(char const*, Process*, char**)+0x178>
c00180b4:	c7 44 24 04 b4 01 00 00 	mov    DWORD PTR [esp+0x4],0x1b4
c00180bc:	83 ec 0c             	sub    esp,0xc
c00180bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00180c3:	e8 47 19 ff ff       	call   c0009a0f <malloc>
c00180c8:	83 c4 10             	add    esp,0x10
c00180cb:	89 c3                	mov    ebx,eax
c00180cd:	83 ec 08             	sub    esp,0x8
c00180d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180d4:	53                   	push   ebx
c00180d5:	e8 62 2f ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c00180da:	83 c4 10             	add    esp,0x10
c00180dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180e1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00180e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180eb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180f1:	83 ec 0c             	sub    esp,0xc
c00180f4:	50                   	push   eax
c00180f5:	e8 01 27 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c00180fa:	83 c4 10             	add    esp,0x10
c00180fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018101:	05 0c 01 00 00       	add    eax,0x10c
c0018106:	83 ec 08             	sub    esp,0x8
c0018109:	68 e8 5f 02 c0       	push   0xc0025fe8
c001810e:	50                   	push   eax
c001810f:	e8 2c 86 fe ff       	call   c0000740 <strcpy>
c0018114:	83 c4 10             	add    esp,0x10
c0018117:	90                   	nop
c0018118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001811c:	83 c0 0c             	add    eax,0xc
c001811f:	83 ec 08             	sub    esp,0x8
c0018122:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018126:	50                   	push   eax
c0018127:	e8 14 86 fe ff       	call   c0000740 <strcpy>
c001812c:	83 c4 10             	add    esp,0x10
c001812f:	83 ec 08             	sub    esp,0x8
c0018132:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018136:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001813a:	e8 01 fe ff ff       	call   c0017f40 <Process::addArgs(char**)>
c001813f:	83 c4 10             	add    esp,0x10
c0018142:	83 ec 08             	sub    esp,0x8
c0018145:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018149:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001814d:	e8 89 ed ff ff       	call   c0016edb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018152:	83 c4 10             	add    esp,0x10
c0018155:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018159:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001815d:	83 f0 01             	xor    eax,0x1
c0018160:	88 c2                	mov    dl,al
c0018162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018166:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001816c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018171:	83 ec 08             	sub    esp,0x8
c0018174:	50                   	push   eax
c0018175:	68 40 60 02 c0       	push   0xc0026040
c001817a:	e8 7c 4b ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001817f:	83 c4 10             	add    esp,0x10
c0018182:	90                   	nop
c0018183:	83 c4 14             	add    esp,0x14
c0018186:	5b                   	pop    ebx
c0018187:	5e                   	pop    esi
c0018188:	c3                   	ret    
c0018189:	90                   	nop
c001818a:	66 90                	xchg   ax,ax

c001818c <Process::Process(bool, char const*, Process*, char**)>:
c001818c:	56                   	push   esi
c001818d:	53                   	push   ebx
c001818e:	83 ec 24             	sub    esp,0x24
c0018191:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018195:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018199:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001819d:	05 0c 02 00 00       	add    eax,0x20c
c00181a2:	bb 07 00 00 00       	mov    ebx,0x7
c00181a7:	89 c6                	mov    esi,eax
c00181a9:	8d 76 00             	lea    esi,[esi+0x0]
c00181ac:	85 db                	test   ebx,ebx
c00181ae:	78 14                	js     c00181c4 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00181b0:	83 ec 0c             	sub    esp,0xc
c00181b3:	56                   	push   esi
c00181b4:	e8 e7 ad 00 00       	call   c0022fa0 <ThreadControlBlock::ThreadControlBlock()>
c00181b9:	83 c4 10             	add    esp,0x10
c00181bc:	83 c6 5f             	add    esi,0x5f
c00181bf:	4b                   	dec    ebx
c00181c0:	eb ea                	jmp    c00181ac <Process::Process(bool, char const*, Process*, char**)+0x20>
c00181c2:	66 90                	xchg   ax,ax
c00181c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181c8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00181cf:	83 ec 0c             	sub    esp,0xc
c00181d2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00181d6:	e8 51 c6 ff ff       	call   c001482c <Krnl::newProcessEnv(Process*)>
c00181db:	83 c4 10             	add    esp,0x10
c00181de:	89 c2                	mov    edx,eax
c00181e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181e4:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00181ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181ee:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00181f7:	a1 30 79 02 c0       	mov    eax,ds:0xc0027930
c00181fc:	8d 50 01             	lea    edx,[eax+0x1]
c00181ff:	89 15 30 79 02 c0    	mov    DWORD PTR ds:0xc0027930,edx
c0018205:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018209:	89 02                	mov    DWORD PTR [edx],eax
c001820b:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0018213:	83 ec 0c             	sub    esp,0xc
c0018216:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001821a:	e8 f0 17 ff ff       	call   c0009a0f <malloc>
c001821f:	83 c4 10             	add    esp,0x10
c0018222:	89 c3                	mov    ebx,eax
c0018224:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018229:	83 ec 08             	sub    esp,0x8
c001822c:	50                   	push   eax
c001822d:	53                   	push   ebx
c001822e:	e8 f3 42 ff ff       	call   c000c526 <VAS::VAS(bool)>
c0018233:	83 c4 10             	add    esp,0x10
c0018236:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001823a:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0018240:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018244:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001824e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018252:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018256:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001825c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018260:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018266:	85 c0                	test   eax,eax
c0018268:	74 42                	je     c00182ac <Process::Process(bool, char const*, Process*, char**)+0x120>
c001826a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001826e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018274:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001827a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001827e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0018284:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018288:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001828e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018294:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018298:	05 0c 01 00 00       	add    eax,0x10c
c001829d:	83 ec 08             	sub    esp,0x8
c00182a0:	52                   	push   edx
c00182a1:	50                   	push   eax
c00182a2:	e8 99 84 fe ff       	call   c0000740 <strcpy>
c00182a7:	83 c4 10             	add    esp,0x10
c00182aa:	eb 64                	jmp    c0018310 <Process::Process(bool, char const*, Process*, char**)+0x184>
c00182ac:	c7 44 24 18 b4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1b4
c00182b4:	83 ec 0c             	sub    esp,0xc
c00182b7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00182bb:	e8 4f 17 ff ff       	call   c0009a0f <malloc>
c00182c0:	83 c4 10             	add    esp,0x10
c00182c3:	89 c3                	mov    ebx,eax
c00182c5:	83 ec 08             	sub    esp,0x8
c00182c8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00182cc:	53                   	push   ebx
c00182cd:	e8 6a 2d ff ff       	call   c000b03c <VgaText::VgaText(char const*)>
c00182d2:	83 c4 10             	add    esp,0x10
c00182d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182d9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00182df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182e3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00182e9:	83 ec 0c             	sub    esp,0xc
c00182ec:	50                   	push   eax
c00182ed:	e8 09 25 ff ff       	call   c000a7fb <addToTerminalCycle(VgaText*)>
c00182f2:	83 c4 10             	add    esp,0x10
c00182f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00182f9:	05 0c 01 00 00       	add    eax,0x10c
c00182fe:	83 ec 08             	sub    esp,0x8
c0018301:	68 e8 5f 02 c0       	push   0xc0025fe8
c0018306:	50                   	push   eax
c0018307:	e8 34 84 fe ff       	call   c0000740 <strcpy>
c001830c:	83 c4 10             	add    esp,0x10
c001830f:	90                   	nop
c0018310:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018314:	83 c0 0c             	add    eax,0xc
c0018317:	83 ec 08             	sub    esp,0x8
c001831a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001831e:	50                   	push   eax
c001831f:	e8 1c 84 fe ff       	call   c0000740 <strcpy>
c0018324:	83 c4 10             	add    esp,0x10
c0018327:	83 ec 08             	sub    esp,0x8
c001832a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001832e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018332:	e8 09 fc ff ff       	call   c0017f40 <Process::addArgs(char**)>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	90                   	nop
c001833b:	83 c4 24             	add    esp,0x24
c001833e:	5b                   	pop    ebx
c001833f:	5e                   	pop    esi
c0018340:	c3                   	ret    
c0018341:	8d 76 00             	lea    esi,[esi+0x0]

c0018344 <taskStartupFunction>:
c0018344:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018349:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001834c:	c3                   	ret    
c001834d:	90                   	nop
c001834e:	66 90                	xchg   ax,ax

c0018350 <Semaphore::Semaphore(int)>:
c0018350:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018354:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018358:	89 10                	mov    DWORD PTR [eax],edx
c001835a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001835e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018365:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018369:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018370:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018374:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001837b:	90                   	nop
c001837c:	c3                   	ret    
c001837d:	90                   	nop
c001837e:	66 90                	xchg   ax,ax

c0018380 <Mutex::Mutex()>:
c0018380:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018384:	6a 01                	push   0x1
c0018386:	50                   	push   eax
c0018387:	e8 c4 ff ff ff       	call   c0018350 <Semaphore::Semaphore(int)>
c001838c:	83 c4 08             	add    esp,0x8
c001838f:	90                   	nop
c0018390:	c3                   	ret    
c0018391:	90                   	nop
c0018392:	66 90                	xchg   ax,ax

c0018394 <Process::createThread(void (*)(void*), void*, int)>:
c0018394:	57                   	push   edi
c0018395:	31 c9                	xor    ecx,ecx
c0018397:	56                   	push   esi
c0018398:	53                   	push   ebx
c0018399:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001839d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00183a4:	89 f2                	mov    edx,esi
c00183a6:	66 90                	xchg   ax,ax
c00183a8:	0f b7 c2             	movzx  eax,dx
c00183ab:	83 e2 01             	and    edx,0x1
c00183ae:	74 14                	je     c00183c4 <Process::createThread(void (*)(void*), void*, int)+0x30>
c00183b0:	d1 f8                	sar    eax,1
c00183b2:	41                   	inc    ecx
c00183b3:	89 c2                	mov    edx,eax
c00183b5:	83 f9 10             	cmp    ecx,0x10
c00183b8:	75 ee                	jne    c00183a8 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00183ba:	31 db                	xor    ebx,ebx
c00183bc:	89 d8                	mov    eax,ebx
c00183be:	5b                   	pop    ebx
c00183bf:	5e                   	pop    esi
c00183c0:	5f                   	pop    edi
c00183c1:	c3                   	ret    
c00183c2:	66 90                	xchg   ax,ax
c00183c4:	b8 01 00 00 00       	mov    eax,0x1
c00183c9:	d3 e0                	shl    eax,cl
c00183cb:	09 c6                	or     esi,eax
c00183cd:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00183d0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00183d7:	01 c0                	add    eax,eax
c00183d9:	01 c8                	add    eax,ecx
c00183db:	8d 04 80             	lea    eax,[eax+eax*4]
c00183de:	01 d8                	add    eax,ebx
c00183e0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00183e7:	75 0b                	jne    c00183f4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00183e9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00183f3:	90                   	nop
c00183f4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00183fa:	83 ec 08             	sub    esp,0x8
c00183fd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018400:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0018403:	01 c0                	add    eax,eax
c0018405:	01 c8                	add    eax,ecx
c0018407:	8d 3c 80             	lea    edi,[eax+eax*4]
c001840a:	8d 04 3b             	lea    eax,[ebx+edi*1]
c001840d:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018413:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0018419:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001841d:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0018423:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0018429:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0018430:	89 ca                	mov    edx,ecx
c0018432:	f7 da                	neg    edx
c0018434:	c1 e2 15             	shl    edx,0x15
c0018437:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001843d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018443:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018447:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018451:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0018457:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001845b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018461:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001846b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018475:	53                   	push   ebx
c0018476:	68 44 94 02 c0       	push   0xc0029444
c001847b:	e8 c0 a8 00 00       	call   c0022d40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018480:	83 c4 10             	add    esp,0x10
c0018483:	89 d8                	mov    eax,ebx
c0018485:	5b                   	pop    ebx
c0018486:	5e                   	pop    esi
c0018487:	5f                   	pop    edi
c0018488:	c3                   	ret    
c0018489:	90                   	nop
c001848a:	66 90                	xchg   ax,ax

c001848c <Process::createUserThread()>:
c001848c:	83 ec 0c             	sub    esp,0xc
c001848f:	68 80 00 00 00       	push   0x80
c0018494:	6a 00                	push   0x0
c0018496:	68 34 7e 01 c0       	push   0xc0017e34
c001849b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001849f:	e8 f0 fe ff ff       	call   c0018394 <Process::createThread(void (*)(void*), void*, int)>
c00184a4:	83 c4 1c             	add    esp,0x1c
c00184a7:	c3                   	ret    

c00184a8 <setupMultitasking(void (*)())>:
c00184a8:	56                   	push   esi
c00184a9:	53                   	push   ebx
c00184aa:	51                   	push   ecx
c00184ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00184af:	eb 13                	jmp    c00184c4 <setupMultitasking(void (*)())+0x1c>
c00184b1:	8d 76 00             	lea    esi,[esi+0x0]
c00184b4:	83 ec 0c             	sub    esp,0xc
c00184b7:	68 44 94 02 c0       	push   0xc0029444
c00184bc:	e8 c7 a7 00 00       	call   c0022c88 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00184c1:	83 c4 10             	add    esp,0x10
c00184c4:	83 ec 0c             	sub    esp,0xc
c00184c7:	68 44 94 02 c0       	push   0xc0029444
c00184cc:	e8 93 a7 00 00       	call   c0022c64 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00184d1:	83 c4 10             	add    esp,0x10
c00184d4:	84 c0                	test   al,al
c00184d6:	74 dc                	je     c00184b4 <setupMultitasking(void (*)())+0xc>
c00184d8:	83 ec 0c             	sub    esp,0xc
c00184db:	68 1f 07 00 00       	push   0x71f
c00184e0:	e8 2a 15 ff ff       	call   c0009a0f <malloc>
c00184e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00184ec:	89 c3                	mov    ebx,eax
c00184ee:	6a 00                	push   0x0
c00184f0:	68 ec 5f 02 c0       	push   0xc0025fec
c00184f5:	6a 01                	push   0x1
c00184f7:	50                   	push   eax
c00184f8:	e8 8f fc ff ff       	call   c001818c <Process::Process(bool, char const*, Process*, char**)>
c00184fd:	83 c4 14             	add    esp,0x14
c0018500:	89 1d 50 94 02 c0    	mov    DWORD PTR ds:0xc0029450,ebx
c0018506:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c001850c:	e8 f8 25 ff ff       	call   c000ab09 <setActiveTerminal(VgaText*)>
c0018511:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0018519:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0018523:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0018529:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001852c:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0018536:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001853c:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0018542:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001854c:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0018556:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018560:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018566:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018570:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018576:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018580:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018586:	58                   	pop    eax
c0018587:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001858d:	5a                   	pop    edx
c001858e:	68 e8 5f 02 c0       	push   0xc0025fe8
c0018593:	50                   	push   eax
c0018594:	e8 a7 81 fe ff       	call   c0000740 <strcpy>
c0018599:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00185a0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00185a4:	83 c4 14             	add    esp,0x14
c00185a7:	5b                   	pop    ebx
c00185a8:	5e                   	pop    esi
c00185a9:	e9 db 7c fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00185ae:	66 90                	xchg   ax,ax

c00185b0 <schedule()>:
c00185b0:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c00185b5:	85 c0                	test   eax,eax
c00185b7:	74 0b                	je     c00185c4 <schedule()+0x14>
c00185b9:	c7 05 20 94 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x1
c00185c3:	c3                   	ret    
c00185c4:	53                   	push   ebx
c00185c5:	83 ec 14             	sub    esp,0x14
c00185c8:	68 44 94 02 c0       	push   0xc0029444
c00185cd:	e8 92 a6 00 00       	call   c0022c64 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00185d2:	83 c4 10             	add    esp,0x10
c00185d5:	84 c0                	test   al,al
c00185d7:	75 3b                	jne    c0018614 <schedule()+0x64>
c00185d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00185de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00185e1:	4a                   	dec    edx
c00185e2:	74 38                	je     c001861c <schedule()+0x6c>
c00185e4:	83 ec 0c             	sub    esp,0xc
c00185e7:	68 44 94 02 c0       	push   0xc0029444
c00185ec:	e8 8f a6 00 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00185f1:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c00185f8:	89 c3                	mov    ebx,eax
c00185fa:	e8 89 a6 00 00       	call   c0022c88 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00185ff:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018606:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018609:	e8 7e f8 ff ff       	call   c0017e8c <switchToThread(ThreadControlBlock*)>
c001860e:	83 c4 10             	add    esp,0x10
c0018611:	8d 76 00             	lea    esi,[esi+0x0]
c0018614:	83 c4 08             	add    esp,0x8
c0018617:	5b                   	pop    ebx
c0018618:	c3                   	ret    
c0018619:	8d 76 00             	lea    esi,[esi+0x0]
c001861c:	83 ec 08             	sub    esp,0x8
c001861f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018626:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001862c:	68 44 94 02 c0       	push   0xc0029444
c0018631:	e8 0a a7 00 00       	call   c0022d40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018636:	83 c4 10             	add    esp,0x10
c0018639:	eb a9                	jmp    c00185e4 <schedule()+0x34>
c001863b:	90                   	nop

c001863c <Semaphore::tryAcquire()>:
c001863c:	53                   	push   ebx
c001863d:	83 ec 08             	sub    esp,0x8
c0018640:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018644:	fa                   	cli    
c0018645:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001864a:	8d 50 01             	lea    edx,[eax+0x1]
c001864d:	89 15 28 94 02 c0    	mov    DWORD PTR ds:0xc0029428,edx
c0018653:	8b 15 24 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029424
c0018659:	8d 5a 01             	lea    ebx,[edx+0x1]
c001865c:	89 1d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ebx
c0018662:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018665:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0018667:	7c 33                	jl     c001869c <Semaphore::tryAcquire()+0x60>
c0018669:	89 15 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edx
c001866f:	85 d2                	test   edx,edx
c0018671:	75 0d                	jne    c0018680 <Semaphore::tryAcquire()+0x44>
c0018673:	8b 15 20 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029420
c0018679:	85 d2                	test   edx,edx
c001867b:	75 6b                	jne    c00186e8 <Semaphore::tryAcquire()+0xac>
c001867d:	8d 76 00             	lea    esi,[esi+0x0]
c0018680:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018685:	85 c0                	test   eax,eax
c0018687:	74 0b                	je     c0018694 <Semaphore::tryAcquire()+0x58>
c0018689:	8d 76 00             	lea    esi,[esi+0x0]
c001868c:	31 c0                	xor    eax,eax
c001868e:	83 c4 08             	add    esp,0x8
c0018691:	5b                   	pop    ebx
c0018692:	c3                   	ret    
c0018693:	90                   	nop
c0018694:	fb                   	sti    
c0018695:	83 c4 08             	add    esp,0x8
c0018698:	5b                   	pop    ebx
c0018699:	c3                   	ret    
c001869a:	66 90                	xchg   ax,ax
c001869c:	43                   	inc    ebx
c001869d:	89 15 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,edx
c00186a3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00186a6:	85 d2                	test   edx,edx
c00186a8:	75 22                	jne    c00186cc <Semaphore::tryAcquire()+0x90>
c00186aa:	8b 0d 20 94 02 c0    	mov    ecx,DWORD PTR ds:0xc0029420
c00186b0:	85 c9                	test   ecx,ecx
c00186b2:	74 18                	je     c00186cc <Semaphore::tryAcquire()+0x90>
c00186b4:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c00186be:	e8 ed fe ff ff       	call   c00185b0 <schedule()>
c00186c3:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00186c8:	48                   	dec    eax
c00186c9:	8d 76 00             	lea    esi,[esi+0x0]
c00186cc:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00186d1:	85 c0                	test   eax,eax
c00186d3:	75 0b                	jne    c00186e0 <Semaphore::tryAcquire()+0xa4>
c00186d5:	fb                   	sti    
c00186d6:	b0 01                	mov    al,0x1
c00186d8:	83 c4 08             	add    esp,0x8
c00186db:	5b                   	pop    ebx
c00186dc:	c3                   	ret    
c00186dd:	8d 76 00             	lea    esi,[esi+0x0]
c00186e0:	b0 01                	mov    al,0x1
c00186e2:	83 c4 08             	add    esp,0x8
c00186e5:	5b                   	pop    ebx
c00186e6:	c3                   	ret    
c00186e7:	90                   	nop
c00186e8:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c00186f2:	e8 b9 fe ff ff       	call   c00185b0 <schedule()>
c00186f7:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00186fc:	48                   	dec    eax
c00186fd:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018702:	85 c0                	test   eax,eax
c0018704:	75 86                	jne    c001868c <Semaphore::tryAcquire()+0x50>
c0018706:	eb 8c                	jmp    c0018694 <Semaphore::tryAcquire()+0x58>

c0018708 <Semaphore::assertLocked(char const*)>:
c0018708:	83 ec 0c             	sub    esp,0xc
c001870b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001870f:	fa                   	cli    
c0018710:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018716:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c001871b:	8d 48 01             	lea    ecx,[eax+0x1]
c001871e:	89 0d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ecx
c0018724:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0018726:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0018729:	7c 29                	jl     c0018754 <Semaphore::assertLocked(char const*)+0x4c>
c001872b:	90                   	nop
c001872c:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0018731:	85 c0                	test   eax,eax
c0018733:	75 0b                	jne    c0018740 <Semaphore::assertLocked(char const*)+0x38>
c0018735:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001873a:	85 c0                	test   eax,eax
c001873c:	75 2e                	jne    c001876c <Semaphore::assertLocked(char const*)+0x64>
c001873e:	66 90                	xchg   ax,ax
c0018740:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018745:	48                   	dec    eax
c0018746:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001874b:	75 03                	jne    c0018750 <Semaphore::assertLocked(char const*)+0x48>
c001874d:	fb                   	sti    
c001874e:	66 90                	xchg   ax,ax
c0018750:	83 c4 0c             	add    esp,0xc
c0018753:	c3                   	ret    
c0018754:	83 ec 0c             	sub    esp,0xc
c0018757:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001875b:	e8 43 c2 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0018760:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0018765:	83 c4 10             	add    esp,0x10
c0018768:	48                   	dec    eax
c0018769:	eb c1                	jmp    c001872c <Semaphore::assertLocked(char const*)+0x24>
c001876b:	90                   	nop
c001876c:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c0018776:	e8 35 fe ff ff       	call   c00185b0 <schedule()>
c001877b:	eb c3                	jmp    c0018740 <Semaphore::assertLocked(char const*)+0x38>
c001877d:	8d 76 00             	lea    esi,[esi+0x0]

c0018780 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018780:	83 ec 0c             	sub    esp,0xc
c0018783:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018788:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001878c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001878f:	e8 1c fe ff ff       	call   c00185b0 <schedule()>
c0018794:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018799:	48                   	dec    eax
c001879a:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001879f:	75 03                	jne    c00187a4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00187a1:	fb                   	sti    
c00187a2:	66 90                	xchg   ax,ax
c00187a4:	83 c4 0c             	add    esp,0xc
c00187a7:	c3                   	ret    

c00187a8 <blockTask(TaskState)>:
c00187a8:	83 ec 0c             	sub    esp,0xc
c00187ab:	fa                   	cli    
c00187ac:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00187b2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00187b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187bb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00187be:	e8 ed fd ff ff       	call   c00185b0 <schedule()>
c00187c3:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00187c8:	48                   	dec    eax
c00187c9:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00187ce:	75 04                	jne    c00187d4 <blockTask(TaskState)+0x2c>
c00187d0:	fb                   	sti    
c00187d1:	8d 76 00             	lea    esi,[esi+0x0]
c00187d4:	83 c4 0c             	add    esp,0xc
c00187d7:	c3                   	ret    

c00187d8 <waitTask(int, int*, int)>:
c00187d8:	83 ec 18             	sub    esp,0x18
c00187db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187e0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00187e4:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00187e7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00187eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187f0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00187f3:	6a 07                	push   0x7
c00187f5:	e8 ae ff ff ff       	call   c00187a8 <blockTask(TaskState)>
c00187fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00187ff:	83 c4 10             	add    esp,0x10
c0018802:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0018805:	85 d2                	test   edx,edx
c0018807:	74 0b                	je     c0018814 <waitTask(int, int*, int)+0x3c>
c0018809:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001880c:	89 02                	mov    DWORD PTR [edx],eax
c001880e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018813:	90                   	nop
c0018814:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018817:	83 c4 0c             	add    esp,0xc
c001881a:	c3                   	ret    
c001881b:	90                   	nop

c001881c <milliTenthSleepUntil(unsigned int)>:
c001881c:	83 ec 0c             	sub    esp,0xc
c001881f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018823:	39 05 2c 85 02 c0    	cmp    DWORD PTR ds:0xc002852c,eax
c0018829:	76 05                	jbe    c0018830 <milliTenthSleepUntil(unsigned int)+0x14>
c001882b:	90                   	nop
c001882c:	83 c4 0c             	add    esp,0xc
c001882f:	c3                   	ret    
c0018830:	fa                   	cli    
c0018831:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018837:	83 ec 08             	sub    esp,0x8
c001883a:	ff 05 24 94 02 c0    	inc    DWORD PTR ds:0xc0029424
c0018840:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018846:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0018849:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001884f:	68 38 94 02 c0       	push   0xc0029438
c0018854:	e8 e7 a4 00 00       	call   c0022d40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018859:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018860:	e8 43 ff ff ff       	call   c00187a8 <blockTask(TaskState)>
c0018865:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c001886a:	83 c4 10             	add    esp,0x10
c001886d:	48                   	dec    eax
c001886e:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0018873:	85 c0                	test   eax,eax
c0018875:	75 09                	jne    c0018880 <milliTenthSleepUntil(unsigned int)+0x64>
c0018877:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001887c:	85 c0                	test   eax,eax
c001887e:	75 14                	jne    c0018894 <milliTenthSleepUntil(unsigned int)+0x78>
c0018880:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018885:	48                   	dec    eax
c0018886:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001888b:	75 9f                	jne    c001882c <milliTenthSleepUntil(unsigned int)+0x10>
c001888d:	fb                   	sti    
c001888e:	83 c4 0c             	add    esp,0xc
c0018891:	c3                   	ret    
c0018892:	66 90                	xchg   ax,ax
c0018894:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c001889e:	e8 0d fd ff ff       	call   c00185b0 <schedule()>
c00188a3:	eb db                	jmp    c0018880 <milliTenthSleepUntil(unsigned int)+0x64>
c00188a5:	8d 76 00             	lea    esi,[esi+0x0]

c00188a8 <milliTenthSleep(unsigned int)>:
c00188a8:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c00188ad:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00188b1:	e9 66 ff ff ff       	jmp    c001881c <milliTenthSleepUntil(unsigned int)>
c00188b6:	66 90                	xchg   ax,ax

c00188b8 <sleep(unsigned int)>:
c00188b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00188bc:	8d 04 80             	lea    eax,[eax+eax*4]
c00188bf:	8d 04 80             	lea    eax,[eax+eax*4]
c00188c2:	8d 04 80             	lea    eax,[eax+eax*4]
c00188c5:	8d 04 80             	lea    eax,[eax+eax*4]
c00188c8:	c1 e0 04             	shl    eax,0x4
c00188cb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00188cf:	eb d7                	jmp    c00188a8 <milliTenthSleep(unsigned int)>
c00188d1:	90                   	nop
c00188d2:	66 90                	xchg   ax,ax

c00188d4 <Semaphore::acquire()>:
c00188d4:	83 ec 0c             	sub    esp,0xc
c00188d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00188db:	fa                   	cli    
c00188dc:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c00188e1:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00188e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00188ea:	89 0d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ecx
c00188f0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00188f3:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00188f5:	7d 2d                	jge    c0018924 <Semaphore::acquire()+0x50>
c00188f7:	41                   	inc    ecx
c00188f8:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00188fb:	90                   	nop
c00188fc:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0018901:	85 c0                	test   eax,eax
c0018903:	75 0b                	jne    c0018910 <Semaphore::acquire()+0x3c>
c0018905:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c001890a:	85 c0                	test   eax,eax
c001890c:	75 62                	jne    c0018970 <Semaphore::acquire()+0x9c>
c001890e:	66 90                	xchg   ax,ax
c0018910:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018915:	48                   	dec    eax
c0018916:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001891b:	75 03                	jne    c0018920 <Semaphore::acquire()+0x4c>
c001891d:	fb                   	sti    
c001891e:	66 90                	xchg   ax,ax
c0018920:	83 c4 0c             	add    esp,0xc
c0018923:	c3                   	ret    
c0018924:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018929:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0018930:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018933:	85 c9                	test   ecx,ecx
c0018935:	74 4d                	je     c0018984 <Semaphore::acquire()+0xb0>
c0018937:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001893a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018940:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0018943:	90                   	nop
c0018944:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018949:	83 ec 0c             	sub    esp,0xc
c001894c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001894f:	68 68 60 02 c0       	push   0xc0026068
c0018954:	e8 a2 43 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018959:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018960:	e8 43 fe ff ff       	call   c00187a8 <blockTask(TaskState)>
c0018965:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c001896a:	83 c4 10             	add    esp,0x10
c001896d:	48                   	dec    eax
c001896e:	eb 8c                	jmp    c00188fc <Semaphore::acquire()+0x28>
c0018970:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c001897a:	e8 31 fc ff ff       	call   c00185b0 <schedule()>
c001897f:	eb 8f                	jmp    c0018910 <Semaphore::acquire()+0x3c>
c0018981:	8d 76 00             	lea    esi,[esi+0x0]
c0018984:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018989:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001898c:	eb b6                	jmp    c0018944 <Semaphore::acquire()+0x70>
c001898e:	66 90                	xchg   ax,ax

c0018990 <taskReturned>:
c0018990:	83 ec 18             	sub    esp,0x18
c0018993:	68 88 60 02 c0       	push   0xc0026088
c0018998:	e8 06 c0 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001899d:	83 c4 10             	add    esp,0x10
c00189a0:	83 ec 0c             	sub    esp,0xc
c00189a3:	6a 02                	push   0x2
c00189a5:	e8 fe fd ff ff       	call   c00187a8 <blockTask(TaskState)>
c00189aa:	fa                   	cli    
c00189ab:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00189b1:	e8 fa fb ff ff       	call   c00185b0 <schedule()>
c00189b6:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00189bb:	83 c4 10             	add    esp,0x10
c00189be:	48                   	dec    eax
c00189bf:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00189c4:	85 c0                	test   eax,eax
c00189c6:	75 d8                	jne    c00189a0 <taskReturned+0x10>
c00189c8:	fb                   	sti    
c00189c9:	eb d5                	jmp    c00189a0 <taskReturned+0x10>
c00189cb:	90                   	nop

c00189cc <Thr::processFromPID(int)>:
c00189cc:	57                   	push   edi
c00189cd:	56                   	push   esi
c00189ce:	53                   	push   ebx
c00189cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00189d3:	fa                   	cli    
c00189d4:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c00189da:	83 ec 0c             	sub    esp,0xc
c00189dd:	68 44 94 02 c0       	push   0xc0029444
c00189e2:	e8 99 a2 00 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00189e7:	83 c4 10             	add    esp,0x10
c00189ea:	89 c7                	mov    edi,eax
c00189ec:	eb 16                	jmp    c0018a04 <Thr::processFromPID(int)+0x38>
c00189ee:	66 90                	xchg   ax,ax
c00189f0:	83 ec 0c             	sub    esp,0xc
c00189f3:	68 44 94 02 c0       	push   0xc0029444
c00189f8:	e8 83 a2 00 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00189fd:	83 c4 10             	add    esp,0x10
c0018a00:	39 f8                	cmp    eax,edi
c0018a02:	74 4c                	je     c0018a50 <Thr::processFromPID(int)+0x84>
c0018a04:	83 ec 0c             	sub    esp,0xc
c0018a07:	68 44 94 02 c0       	push   0xc0029444
c0018a0c:	e8 6f a2 00 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a11:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c0018a18:	89 c3                	mov    ebx,eax
c0018a1a:	e8 69 a2 00 00       	call   c0022c88 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018a1f:	58                   	pop    eax
c0018a20:	5a                   	pop    edx
c0018a21:	53                   	push   ebx
c0018a22:	68 44 94 02 c0       	push   0xc0029444
c0018a27:	e8 14 a3 00 00       	call   c0022d40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018a2c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a2f:	83 c4 10             	add    esp,0x10
c0018a32:	39 30                	cmp    DWORD PTR [eax],esi
c0018a34:	75 ba                	jne    c00189f0 <Thr::processFromPID(int)+0x24>
c0018a36:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018a3b:	48                   	dec    eax
c0018a3c:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018a41:	74 09                	je     c0018a4c <Thr::processFromPID(int)+0x80>
c0018a43:	90                   	nop
c0018a44:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018a47:	5b                   	pop    ebx
c0018a48:	5e                   	pop    esi
c0018a49:	5f                   	pop    edi
c0018a4a:	c3                   	ret    
c0018a4b:	90                   	nop
c0018a4c:	fb                   	sti    
c0018a4d:	eb f5                	jmp    c0018a44 <Thr::processFromPID(int)+0x78>
c0018a4f:	90                   	nop
c0018a50:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018a55:	48                   	dec    eax
c0018a56:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018a5b:	75 07                	jne    c0018a64 <Thr::processFromPID(int)+0x98>
c0018a5d:	fb                   	sti    
c0018a5e:	5b                   	pop    ebx
c0018a5f:	5e                   	pop    esi
c0018a60:	5f                   	pop    edi
c0018a61:	c3                   	ret    
c0018a62:	66 90                	xchg   ax,ax
c0018a64:	5b                   	pop    ebx
c0018a65:	31 c0                	xor    eax,eax
c0018a67:	5e                   	pop    esi
c0018a68:	5f                   	pop    edi
c0018a69:	c3                   	ret    
c0018a6a:	66 90                	xchg   ax,ax

c0018a6c <unblockTask(ThreadControlBlock*)>:
c0018a6c:	53                   	push   ebx
c0018a6d:	83 ec 08             	sub    esp,0x8
c0018a70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018a74:	fa                   	cli    
c0018a75:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018a7b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018a7e:	85 c0                	test   eax,eax
c0018a80:	74 66                	je     c0018ae8 <unblockTask(ThreadControlBlock*)+0x7c>
c0018a82:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018a85:	48                   	dec    eax
c0018a86:	74 38                	je     c0018ac0 <unblockTask(ThreadControlBlock*)+0x54>
c0018a88:	83 ec 0c             	sub    esp,0xc
c0018a8b:	68 44 94 02 c0       	push   0xc0029444
c0018a90:	e8 eb a1 00 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a95:	83 c4 10             	add    esp,0x10
c0018a98:	85 c0                	test   eax,eax
c0018a9a:	75 1c                	jne    c0018ab8 <unblockTask(ThreadControlBlock*)+0x4c>
c0018a9c:	eb 5e                	jmp    c0018afc <unblockTask(ThreadControlBlock*)+0x90>
c0018a9e:	66 90                	xchg   ax,ax
c0018aa0:	83 ec 08             	sub    esp,0x8
c0018aa3:	50                   	push   eax
c0018aa4:	68 44 94 02 c0       	push   0xc0029444
c0018aa9:	e8 82 a5 00 00       	call   c0023030 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018aae:	83 c4 10             	add    esp,0x10
c0018ab1:	85 c0                	test   eax,eax
c0018ab3:	74 47                	je     c0018afc <unblockTask(ThreadControlBlock*)+0x90>
c0018ab5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ab8:	39 c3                	cmp    ebx,eax
c0018aba:	75 e4                	jne    c0018aa0 <unblockTask(ThreadControlBlock*)+0x34>
c0018abc:	eb 12                	jmp    c0018ad0 <unblockTask(ThreadControlBlock*)+0x64>
c0018abe:	66 90                	xchg   ax,ax
c0018ac0:	83 ec 0c             	sub    esp,0xc
c0018ac3:	68 0a 60 02 c0       	push   0xc002600a
c0018ac8:	e8 2e 42 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018acd:	83 c4 10             	add    esp,0x10
c0018ad0:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018ad5:	48                   	dec    eax
c0018ad6:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018adb:	75 03                	jne    c0018ae0 <unblockTask(ThreadControlBlock*)+0x74>
c0018add:	fb                   	sti    
c0018ade:	66 90                	xchg   ax,ax
c0018ae0:	83 c4 08             	add    esp,0x8
c0018ae3:	5b                   	pop    ebx
c0018ae4:	c3                   	ret    
c0018ae5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ae8:	83 ec 0c             	sub    esp,0xc
c0018aeb:	68 f3 5f 02 c0       	push   0xc0025ff3
c0018af0:	e8 06 42 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018af5:	83 c4 10             	add    esp,0x10
c0018af8:	eb d6                	jmp    c0018ad0 <unblockTask(ThreadControlBlock*)+0x64>
c0018afa:	66 90                	xchg   ax,ax
c0018afc:	83 ec 08             	sub    esp,0x8
c0018aff:	53                   	push   ebx
c0018b00:	68 44 94 02 c0       	push   0xc0029444
c0018b05:	e8 36 a2 00 00       	call   c0022d40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018b0a:	83 c4 10             	add    esp,0x10
c0018b0d:	eb c1                	jmp    c0018ad0 <unblockTask(ThreadControlBlock*)+0x64>
c0018b0f:	90                   	nop

c0018b10 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018b10:	55                   	push   ebp
c0018b11:	57                   	push   edi
c0018b12:	56                   	push   esi
c0018b13:	53                   	push   ebx
c0018b14:	83 ec 1c             	sub    esp,0x1c
c0018b17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b1b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b1e:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c0018b24:	85 ff                	test   edi,edi
c0018b26:	7e 24                	jle    c0018b4c <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0018b28:	31 f6                	xor    esi,esi
c0018b2a:	66 90                	xchg   ax,ax
c0018b2c:	83 ec 0c             	sub    esp,0xc
c0018b2f:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c0018b36:	46                   	inc    esi
c0018b37:	e8 e3 0e ff ff       	call   c0009a1f <free>
c0018b3c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018b3f:	83 c4 10             	add    esp,0x10
c0018b42:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0018b48:	7f e2                	jg     c0018b2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0018b4a:	66 90                	xchg   ax,ax
c0018b4c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0018b56:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018b5b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018b5e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018b61:	d3 c0                	rol    eax,cl
c0018b63:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0018b6a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018b6d:	89 f7                	mov    edi,esi
c0018b6f:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0018b77:	0f 85 73 01 00 00    	jne    c0018cf0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018b7d:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018b83:	85 ed                	test   ebp,ebp
c0018b85:	74 1d                	je     c0018ba4 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0018b87:	83 ec 0c             	sub    esp,0xc
c0018b8a:	55                   	push   ebp
c0018b8b:	e8 b8 bb ff ff       	call   c0014748 <EnvVarContainer::~EnvVarContainer()>
c0018b90:	59                   	pop    ecx
c0018b91:	5e                   	pop    esi
c0018b92:	6a 0c                	push   0xc
c0018b94:	55                   	push   ebp
c0018b95:	e8 80 40 ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0018b9a:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018b9d:	83 c4 10             	add    esp,0x10
c0018ba0:	89 f7                	mov    edi,esi
c0018ba2:	66 90                	xchg   ax,ax
c0018ba4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018baa:	85 c0                	test   eax,eax
c0018bac:	0f 84 b2 00 00 00    	je     c0018c64 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018bb2:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018bb5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018bb9:	31 c9                	xor    ecx,ecx
c0018bbb:	eb 17                	jmp    c0018bd4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018bbd:	8d 76 00             	lea    esi,[esi+0x0]
c0018bc0:	41                   	inc    ecx
c0018bc1:	83 f9 10             	cmp    ecx,0x10
c0018bc4:	0f 84 9a 00 00 00    	je     c0018c64 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018bca:	66 90                	xchg   ax,ax
c0018bcc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018bd2:	66 90                	xchg   ax,ax
c0018bd4:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0018bdb:	d3 fa                	sar    edx,cl
c0018bdd:	83 e2 01             	and    edx,0x1
c0018be0:	74 de                	je     c0018bc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018be2:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018be5:	01 d2                	add    edx,edx
c0018be7:	01 ca                	add    edx,ecx
c0018be9:	8d 14 92             	lea    edx,[edx+edx*4]
c0018bec:	01 d0                	add    eax,edx
c0018bee:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018bf4:	83 fd 07             	cmp    ebp,0x7
c0018bf7:	75 c7                	jne    c0018bc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018bf9:	05 40 02 00 00       	add    eax,0x240
c0018bfe:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0018c01:	83 fd ff             	cmp    ebp,0xffffffff
c0018c04:	0f 8c ee 00 00 00    	jl     c0018cf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c0018c0a:	0f 84 ac 01 00 00    	je     c0018dbc <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c0018c10:	85 ed                	test   ebp,ebp
c0018c12:	0f 84 90 01 00 00    	je     c0018da8 <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c0018c18:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018c1a:	75 a4                	jne    c0018bc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018c1c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018c22:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018c26:	01 d0                	add    eax,edx
c0018c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018c2c:	83 ec 0c             	sub    esp,0xc
c0018c2f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0018c35:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018c38:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0018c3e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018c45:	50                   	push   eax
c0018c46:	e8 21 fe ff ff       	call   c0018a6c <unblockTask(ThreadControlBlock*)>
c0018c4b:	83 c4 10             	add    esp,0x10
c0018c4e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018c51:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c55:	89 f7                	mov    edi,esi
c0018c57:	41                   	inc    ecx
c0018c58:	83 f9 10             	cmp    ecx,0x10
c0018c5b:	0f 85 6b ff ff ff    	jne    c0018bcc <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018c61:	8d 76 00             	lea    esi,[esi+0x0]
c0018c64:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0018c6a:	85 c0                	test   eax,eax
c0018c6c:	74 62                	je     c0018cd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018c6e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018c74:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0018c7a:	74 54                	je     c0018cd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018c7c:	83 ec 0c             	sub    esp,0xc
c0018c7f:	68 44 94 02 c0       	push   0xc0029444
c0018c84:	e8 f7 9f 00 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c89:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c0018c90:	89 c7                	mov    edi,eax
c0018c92:	e8 cd 9f 00 00       	call   c0022c64 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c97:	83 c4 10             	add    esp,0x10
c0018c9a:	84 c0                	test   al,al
c0018c9c:	0f 84 ce 00 00 00    	je     c0018d70 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018ca2:	66 90                	xchg   ax,ax
c0018ca4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018ca7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018cad:	85 d2                	test   edx,edx
c0018caf:	74 0f                	je     c0018cc0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018cb1:	83 ec 0c             	sub    esp,0xc
c0018cb4:	8b 02                	mov    eax,DWORD PTR [edx]
c0018cb6:	52                   	push   edx
c0018cb7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018cba:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018cbd:	83 c4 10             	add    esp,0x10
c0018cc0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0018cca:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0018cd0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0018cd6:	85 db                	test   ebx,ebx
c0018cd8:	74 16                	je     c0018cf0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018cda:	83 ec 0c             	sub    esp,0xc
c0018cdd:	53                   	push   ebx
c0018cde:	e8 1d 32 ff ff       	call   c000bf00 <VAS::~VAS()>
c0018ce3:	58                   	pop    eax
c0018ce4:	5a                   	pop    edx
c0018ce5:	6a 14                	push   0x14
c0018ce7:	53                   	push   ebx
c0018ce8:	e8 2d 3f ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0018ced:	83 c4 10             	add    esp,0x10
c0018cf0:	83 c4 1c             	add    esp,0x1c
c0018cf3:	5b                   	pop    ebx
c0018cf4:	5e                   	pop    esi
c0018cf5:	5f                   	pop    edi
c0018cf6:	5d                   	pop    ebp
c0018cf7:	c3                   	ret    
c0018cf8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018cfc:	83 ec 0c             	sub    esp,0xc
c0018cff:	68 bc 60 02 c0       	push   0xc00260bc
c0018d04:	e8 9a bc ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0018d09:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018d0c:	83 c4 10             	add    esp,0x10
c0018d0f:	89 f7                	mov    edi,esi
c0018d11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018d15:	e9 a6 fe ff ff       	jmp    c0018bc0 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018d1a:	66 90                	xchg   ax,ax
c0018d1c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d22:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0018d28:	75 1e                	jne    c0018d48 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018d2a:	83 ec 0c             	sub    esp,0xc
c0018d2d:	68 24 61 02 c0       	push   0xc0026124
c0018d32:	e8 c4 3f ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018d37:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018d3e:	e8 65 fa ff ff       	call   c00187a8 <blockTask(TaskState)>
c0018d43:	83 c4 10             	add    esp,0x10
c0018d46:	66 90                	xchg   ax,ax
c0018d48:	83 ec 08             	sub    esp,0x8
c0018d4b:	56                   	push   esi
c0018d4c:	68 44 94 02 c0       	push   0xc0029444
c0018d51:	e8 ea 9f 00 00       	call   c0022d40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018d56:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c0018d5d:	e8 1e 9f 00 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d62:	83 c4 10             	add    esp,0x10
c0018d65:	39 f8                	cmp    eax,edi
c0018d67:	0f 84 37 ff ff ff    	je     c0018ca4 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d70:	83 ec 0c             	sub    esp,0xc
c0018d73:	68 44 94 02 c0       	push   0xc0029444
c0018d78:	e8 03 9f 00 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d7d:	c7 04 24 44 94 02 c0 	mov    DWORD PTR [esp],0xc0029444
c0018d84:	89 c6                	mov    esi,eax
c0018d86:	e8 fd 9e 00 00       	call   c0022c88 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018d8b:	83 c4 10             	add    esp,0x10
c0018d8e:	39 f3                	cmp    ebx,esi
c0018d90:	74 b6                	je     c0018d48 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018d92:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018d95:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018d98:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018d9e:	75 a8                	jne    c0018d48 <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018da0:	e9 77 ff ff ff       	jmp    c0018d1c <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018da5:	8d 76 00             	lea    esi,[esi+0x0]
c0018da8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018dac:	83 ec 0c             	sub    esp,0xc
c0018daf:	68 f0 60 02 c0       	push   0xc00260f0
c0018db4:	e9 4b ff ff ff       	jmp    c0018d04 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0018db9:	8d 76 00             	lea    esi,[esi+0x0]
c0018dbc:	8b 36                	mov    esi,DWORD PTR [esi]
c0018dbe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018dc2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018dc5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018dc8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018dce:	01 d7                	add    edi,edx
c0018dd0:	89 f8                	mov    eax,edi
c0018dd2:	e9 51 fe ff ff       	jmp    c0018c28 <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c0018dd7:	90                   	nop

c0018dd8 <cleanerTaskFunction(void*)>:
c0018dd8:	53                   	push   ebx
c0018dd9:	83 ec 08             	sub    esp,0x8
c0018ddc:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018de1:	48                   	dec    eax
c0018de2:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018de7:	75 03                	jne    c0018dec <cleanerTaskFunction(void*)+0x14>
c0018de9:	fb                   	sti    
c0018dea:	66 90                	xchg   ax,ax
c0018dec:	fa                   	cli    
c0018ded:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018df2:	80 3d 0c 94 02 c0 00 	cmp    BYTE PTR ds:0xc002940c,0x0
c0018df9:	8d 50 01             	lea    edx,[eax+0x1]
c0018dfc:	89 15 28 94 02 c0    	mov    DWORD PTR ds:0xc0029428,edx
c0018e02:	0f 84 ac 00 00 00    	je     c0018eb4 <cleanerTaskFunction(void*)+0xdc>
c0018e08:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018e0d:	85 c0                	test   eax,eax
c0018e0f:	75 03                	jne    c0018e14 <cleanerTaskFunction(void*)+0x3c>
c0018e11:	fb                   	sti    
c0018e12:	66 90                	xchg   ax,ax
c0018e14:	c6 05 0c 94 02 c0 00 	mov    BYTE PTR ds:0xc002940c,0x0
c0018e1b:	fa                   	cli    
c0018e1c:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018e22:	ff 05 24 94 02 c0    	inc    DWORD PTR ds:0xc0029424
c0018e28:	fa                   	cli    
c0018e29:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018e2f:	eb 2b                	jmp    c0018e5c <cleanerTaskFunction(void*)+0x84>
c0018e31:	8d 76 00             	lea    esi,[esi+0x0]
c0018e34:	83 ec 0c             	sub    esp,0xc
c0018e37:	68 2c 94 02 c0       	push   0xc002942c
c0018e3c:	e8 3f 9e 00 00       	call   c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018e41:	c7 04 24 2c 94 02 c0 	mov    DWORD PTR [esp],0xc002942c
c0018e48:	89 c3                	mov    ebx,eax
c0018e4a:	e8 39 9e 00 00       	call   c0022c88 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018e4f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018e52:	e8 b9 fc ff ff       	call   c0018b10 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018e57:	83 c4 10             	add    esp,0x10
c0018e5a:	66 90                	xchg   ax,ax
c0018e5c:	83 ec 0c             	sub    esp,0xc
c0018e5f:	68 2c 94 02 c0       	push   0xc002942c
c0018e64:	e8 fb 9d 00 00       	call   c0022c64 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018e69:	83 c4 10             	add    esp,0x10
c0018e6c:	84 c0                	test   al,al
c0018e6e:	74 c4                	je     c0018e34 <cleanerTaskFunction(void*)+0x5c>
c0018e70:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018e75:	48                   	dec    eax
c0018e76:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018e7b:	75 03                	jne    c0018e80 <cleanerTaskFunction(void*)+0xa8>
c0018e7d:	fb                   	sti    
c0018e7e:	66 90                	xchg   ax,ax
c0018e80:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0018e85:	48                   	dec    eax
c0018e86:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0018e8b:	0f 85 4b ff ff ff    	jne    c0018ddc <cleanerTaskFunction(void*)+0x4>
c0018e91:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c0018e96:	85 c0                	test   eax,eax
c0018e98:	0f 84 3e ff ff ff    	je     c0018ddc <cleanerTaskFunction(void*)+0x4>
c0018e9e:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c0018ea8:	e8 03 f7 ff ff       	call   c00185b0 <schedule()>
c0018ead:	e9 2a ff ff ff       	jmp    c0018ddc <cleanerTaskFunction(void*)+0x4>
c0018eb2:	66 90                	xchg   ax,ax
c0018eb4:	83 ec 0c             	sub    esp,0xc
c0018eb7:	6a 02                	push   0x2
c0018eb9:	e8 c2 f8 ff ff       	call   c0018780 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018ebe:	83 c4 10             	add    esp,0x10
c0018ec1:	e9 4e ff ff ff       	jmp    c0018e14 <cleanerTaskFunction(void*)+0x3c>
c0018ec6:	66 90                	xchg   ax,ax

c0018ec8 <terminateTask(int)>:
c0018ec8:	83 ec 14             	sub    esp,0x14
c0018ecb:	fa                   	cli    
c0018ecc:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018ed2:	ff 05 24 94 02 c0    	inc    DWORD PTR ds:0xc0029424
c0018ed8:	fa                   	cli    
c0018ed9:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018edf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ee3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ee8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0018eeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ef0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018ef3:	50                   	push   eax
c0018ef4:	68 2c 94 02 c0       	push   0xc002942c
c0018ef9:	e8 42 9e 00 00       	call   c0022d40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018efe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f03:	83 c4 10             	add    esp,0x10
c0018f06:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018f0d:	a1 08 94 02 c0       	mov    eax,ds:0xc0029408
c0018f12:	85 c0                	test   eax,eax
c0018f14:	74 5e                	je     c0018f74 <terminateTask(int)+0xac>
c0018f16:	83 ec 0c             	sub    esp,0xc
c0018f19:	c6 05 0c 94 02 c0 01 	mov    BYTE PTR ds:0xc002940c,0x1
c0018f20:	50                   	push   eax
c0018f21:	e8 46 fb ff ff       	call   c0018a6c <unblockTask(ThreadControlBlock*)>
c0018f26:	83 c4 10             	add    esp,0x10
c0018f29:	8d 76 00             	lea    esi,[esi+0x0]
c0018f2c:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018f31:	48                   	dec    eax
c0018f32:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018f37:	75 03                	jne    c0018f3c <terminateTask(int)+0x74>
c0018f39:	fb                   	sti    
c0018f3a:	66 90                	xchg   ax,ax
c0018f3c:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0018f41:	48                   	dec    eax
c0018f42:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0018f47:	75 0b                	jne    c0018f54 <terminateTask(int)+0x8c>
c0018f49:	83 3d 20 94 02 c0 00 	cmp    DWORD PTR ds:0xc0029420,0x0
c0018f50:	75 36                	jne    c0018f88 <terminateTask(int)+0xc0>
c0018f52:	66 90                	xchg   ax,ax
c0018f54:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018f59:	48                   	dec    eax
c0018f5a:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018f5f:	75 03                	jne    c0018f64 <terminateTask(int)+0x9c>
c0018f61:	fb                   	sti    
c0018f62:	66 90                	xchg   ax,ax
c0018f64:	fa                   	cli    
c0018f65:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018f6b:	90                   	nop
c0018f6c:	e8 3f f6 ff ff       	call   c00185b0 <schedule()>
c0018f71:	eb e1                	jmp    c0018f54 <terminateTask(int)+0x8c>
c0018f73:	90                   	nop
c0018f74:	83 ec 0c             	sub    esp,0xc
c0018f77:	68 21 60 02 c0       	push   0xc0026021
c0018f7c:	e8 7a 3d ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	eb a6                	jmp    c0018f2c <terminateTask(int)+0x64>
c0018f86:	66 90                	xchg   ax,ax
c0018f88:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c0018f92:	eb d8                	jmp    c0018f6c <terminateTask(int)+0xa4>

c0018f94 <Thr::terminateFromIRQ(int)>:
c0018f94:	83 ec 18             	sub    esp,0x18
c0018f97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f9b:	e8 28 ff ff ff       	call   c0018ec8 <terminateTask(int)>

c0018fa0 <Semaphore::release()>:
c0018fa0:	83 ec 0c             	sub    esp,0xc
c0018fa3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fa7:	fa                   	cli    
c0018fa8:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0018fad:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0018fb3:	8d 48 01             	lea    ecx,[eax+0x1]
c0018fb6:	89 0d 24 94 02 c0    	mov    DWORD PTR ds:0xc0029424,ecx
c0018fbc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018fbf:	85 c9                	test   ecx,ecx
c0018fc1:	74 41                	je     c0019004 <Semaphore::release()+0x64>
c0018fc3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0018fc6:	83 ec 0c             	sub    esp,0xc
c0018fc9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018fcc:	51                   	push   ecx
c0018fcd:	e8 9a fa ff ff       	call   c0018a6c <unblockTask(ThreadControlBlock*)>
c0018fd2:	a1 24 94 02 c0       	mov    eax,ds:0xc0029424
c0018fd7:	83 c4 10             	add    esp,0x10
c0018fda:	48                   	dec    eax
c0018fdb:	90                   	nop
c0018fdc:	a3 24 94 02 c0       	mov    ds:0xc0029424,eax
c0018fe1:	85 c0                	test   eax,eax
c0018fe3:	75 0b                	jne    c0018ff0 <Semaphore::release()+0x50>
c0018fe5:	a1 20 94 02 c0       	mov    eax,ds:0xc0029420
c0018fea:	85 c0                	test   eax,eax
c0018fec:	75 1e                	jne    c001900c <Semaphore::release()+0x6c>
c0018fee:	66 90                	xchg   ax,ax
c0018ff0:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0018ff5:	48                   	dec    eax
c0018ff6:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0018ffb:	75 03                	jne    c0019000 <Semaphore::release()+0x60>
c0018ffd:	fb                   	sti    
c0018ffe:	66 90                	xchg   ax,ax
c0019000:	83 c4 0c             	add    esp,0xc
c0019003:	c3                   	ret    
c0019004:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0019007:	eb d3                	jmp    c0018fdc <Semaphore::release()+0x3c>
c0019009:	8d 76 00             	lea    esi,[esi+0x0]
c001900c:	c7 05 20 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029420,0x0
c0019016:	e8 95 f5 ff ff       	call   c00185b0 <schedule()>
c001901b:	eb d3                	jmp    c0018ff0 <Semaphore::release()+0x50>
c001901d:	8d 76 00             	lea    esi,[esi+0x0]

c0019020 <__static_initialization_and_destruction_0(int, int)>:
c0019020:	83 ec 0c             	sub    esp,0xc
c0019023:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0019028:	0f 85 8e 00 00 00    	jne    c00190bc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001902e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0019036:	0f 85 80 00 00 00    	jne    c00190bc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001903c:	83 ec 0c             	sub    esp,0xc
c001903f:	68 44 94 02 c0       	push   0xc0029444
c0019044:	e8 a3 9f 00 00       	call   c0022fec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019049:	83 c4 10             	add    esp,0x10
c001904c:	83 ec 04             	sub    esp,0x4
c001904f:	68 6c 71 02 c0       	push   0xc002716c
c0019054:	68 44 94 02 c0       	push   0xc0029444
c0019059:	68 9c 2f 02 c0       	push   0xc0022f9c
c001905e:	e8 31 3b ff ff       	call   c000cb94 <__cxa_atexit>
c0019063:	83 c4 10             	add    esp,0x10
c0019066:	83 ec 0c             	sub    esp,0xc
c0019069:	68 38 94 02 c0       	push   0xc0029438
c001906e:	e8 79 9f 00 00       	call   c0022fec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0019073:	83 c4 10             	add    esp,0x10
c0019076:	83 ec 04             	sub    esp,0x4
c0019079:	68 6c 71 02 c0       	push   0xc002716c
c001907e:	68 38 94 02 c0       	push   0xc0029438
c0019083:	68 9c 2f 02 c0       	push   0xc0022f9c
c0019088:	e8 07 3b ff ff       	call   c000cb94 <__cxa_atexit>
c001908d:	83 c4 10             	add    esp,0x10
c0019090:	83 ec 0c             	sub    esp,0xc
c0019093:	68 2c 94 02 c0       	push   0xc002942c
c0019098:	e8 4f 9f 00 00       	call   c0022fec <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001909d:	83 c4 10             	add    esp,0x10
c00190a0:	83 ec 04             	sub    esp,0x4
c00190a3:	68 6c 71 02 c0       	push   0xc002716c
c00190a8:	68 2c 94 02 c0       	push   0xc002942c
c00190ad:	68 9c 2f 02 c0       	push   0xc0022f9c
c00190b2:	e8 dd 3a ff ff       	call   c000cb94 <__cxa_atexit>
c00190b7:	83 c4 10             	add    esp,0x10
c00190ba:	66 90                	xchg   ax,ax
c00190bc:	90                   	nop
c00190bd:	83 c4 0c             	add    esp,0xc
c00190c0:	c3                   	ret    
c00190c1:	8d 76 00             	lea    esi,[esi+0x0]

c00190c4 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00190c4:	83 ec 0c             	sub    esp,0xc
c00190c7:	83 ec 08             	sub    esp,0x8
c00190ca:	68 ff ff 00 00       	push   0xffff
c00190cf:	6a 01                	push   0x1
c00190d1:	e8 4a ff ff ff       	call   c0019020 <__static_initialization_and_destruction_0(int, int)>
c00190d6:	83 c4 10             	add    esp,0x10
c00190d9:	83 c4 0c             	add    esp,0xc
c00190dc:	c3                   	ret    

c00190dd <Vm::inbv(unsigned short)>:
c00190dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190e1:	66 81 fa fe fe       	cmp    dx,0xfefe
c00190e6:	75 06                	jne    c00190ee <Vm::inbv(unsigned short)+0x11>
c00190e8:	a0 8c 94 02 c0       	mov    al,ds:0xc002948c
c00190ed:	c3                   	ret    
c00190ee:	ec                   	in     al,dx
c00190ef:	c3                   	ret    

c00190f0 <Vm::outbv(unsigned short, unsigned char)>:
c00190f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00190f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00190f8:	66 81 fa fe fe       	cmp    dx,0xfefe
c00190fd:	75 25                	jne    c0019124 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00190ff:	8b 0d 8c 94 02 c0    	mov    ecx,DWORD PTR ds:0xc002948c
c0019105:	8d 51 01             	lea    edx,[ecx+0x1]
c0019108:	88 81 a0 94 02 c0    	mov    BYTE PTR [ecx-0x3ffd6b60],al
c001910e:	89 15 8c 94 02 c0    	mov    DWORD PTR ds:0xc002948c,edx
c0019114:	83 fa 20             	cmp    edx,0x20
c0019117:	75 0c                	jne    c0019125 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0019119:	c7 05 8c 94 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002948c,0x1f
c0019123:	c3                   	ret    
c0019124:	ee                   	out    dx,al
c0019125:	c3                   	ret    

c0019126 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019126:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001912b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019130:	c1 e0 04             	shl    eax,0x4
c0019133:	01 d0                	add    eax,edx
c0019135:	c3                   	ret    

c0019136 <Vm::getSegment(unsigned int)>:
c0019136:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001913a:	c1 e8 10             	shr    eax,0x10
c001913d:	c3                   	ret    

c001913e <Vm::getOffset(unsigned int)>:
c001913e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019142:	c3                   	ret    

c0019143 <Vm::mainloop2()>:
c0019143:	83 ec 18             	sub    esp,0x18
c0019146:	fa                   	cli    
c0019147:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c001914d:	6a 02                	push   0x2
c001914f:	c6 05 85 94 02 c0 01 	mov    BYTE PTR ds:0xc0029485,0x1
c0019156:	e8 25 f6 ff ff       	call   c0018780 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001915b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019160:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019164:	52                   	push   edx
c0019165:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0019169:	52                   	push   edx
c001916a:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001916e:	52                   	push   edx
c001916f:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0019173:	50                   	push   eax
c0019174:	e8 b6 70 fe ff       	call   c000022f <goToVM86>
c0019179:	83 c4 2c             	add    esp,0x2c
c001917c:	c3                   	ret    

c001917d <Vm::mainVm8086Loop(void*)>:
c001917d:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0019182:	48                   	dec    eax
c0019183:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0019188:	75 01                	jne    c001918b <Vm::mainVm8086Loop(void*)+0xe>
c001918a:	fb                   	sti    
c001918b:	eb b6                	jmp    c0019143 <Vm::mainloop2()>

c001918d <Vm::mainloop3(unsigned long)>:
c001918d:	83 ec 18             	sub    esp,0x18
c0019190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019194:	fa                   	cli    
c0019195:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c001919b:	6a 02                	push   0x2
c001919d:	c6 05 84 94 02 c0 01 	mov    BYTE PTR ds:0xc0029484,0x1
c00191a4:	a3 80 94 02 c0       	mov    ds:0xc0029480,eax
c00191a9:	e8 d2 f5 ff ff       	call   c0018780 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00191ae:	83 c4 1c             	add    esp,0x1c
c00191b1:	eb 90                	jmp    c0019143 <Vm::mainloop2()>

c00191b3 <Vm::initialise8086()>:
c00191b3:	83 ec 0c             	sub    esp,0xc
c00191b6:	68 80 00 00 00       	push   0x80
c00191bb:	6a 00                	push   0x0
c00191bd:	68 7d 91 01 c0       	push   0xc001917d
c00191c2:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c00191c8:	e8 c7 f1 ff ff       	call   c0018394 <Process::createThread(void (*)(void*), void*, int)>
c00191cd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c00191d4:	a3 88 94 02 c0       	mov    ds:0xc0029488,eax
c00191d9:	68 00 01 00 00       	push   0x100
c00191de:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c00191e3:	6a 00                	push   0x0
c00191e5:	6a 00                	push   0x0
c00191e7:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00191ed:	e8 80 31 ff ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00191f2:	83 c4 2c             	add    esp,0x2c
c00191f5:	c3                   	ret    

c00191f6 <Vm::finish8086()>:
c00191f6:	53                   	push   ebx
c00191f7:	83 ec 08             	sub    esp,0x8
c00191fa:	fa                   	cli    
c00191fb:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0019201:	80 3d 84 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029484,0x0
c0019208:	75 15                	jne    c001921f <Vm::finish8086()+0x29>
c001920a:	e8 a1 f3 ff ff       	call   c00185b0 <schedule()>
c001920f:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0019214:	48                   	dec    eax
c0019215:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001921a:	75 de                	jne    c00191fa <Vm::finish8086()+0x4>
c001921c:	fb                   	sti    
c001921d:	eb db                	jmp    c00191fa <Vm::finish8086()+0x4>
c001921f:	83 ec 0c             	sub    esp,0xc
c0019222:	8b 1d 80 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029480
c0019228:	ff 35 88 94 02 c0    	push   DWORD PTR ds:0xc0029488
c001922e:	c6 05 84 94 02 c0 00 	mov    BYTE PTR ds:0xc0029484,0x0
c0019235:	e8 32 f8 ff ff       	call   c0018a6c <unblockTask(ThreadControlBlock*)>
c001923a:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001923f:	83 c4 10             	add    esp,0x10
c0019242:	8d 50 ff             	lea    edx,[eax-0x1]
c0019245:	89 15 28 94 02 c0    	mov    DWORD PTR ds:0xc0029428,edx
c001924b:	85 d2                	test   edx,edx
c001924d:	75 01                	jne    c0019250 <Vm::finish8086()+0x5a>
c001924f:	fb                   	sti    
c0019250:	89 d8                	mov    eax,ebx
c0019252:	83 c4 08             	add    esp,0x8
c0019255:	5b                   	pop    ebx
c0019256:	c3                   	ret    

c0019257 <Vm::getOutput8086(unsigned char*)>:
c0019257:	57                   	push   edi
c0019258:	8b 0d 8c 94 02 c0    	mov    ecx,DWORD PTR ds:0xc002948c
c001925e:	56                   	push   esi
c001925f:	be a0 94 02 c0       	mov    esi,0xc00294a0
c0019264:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0019268:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001926a:	a1 8c 94 02 c0       	mov    eax,ds:0xc002948c
c001926f:	5e                   	pop    esi
c0019270:	c7 05 8c 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002948c,0x0
c001927a:	5f                   	pop    edi
c001927b:	c3                   	ret    

c001927c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001927c:	55                   	push   ebp
c001927d:	57                   	push   edi
c001927e:	56                   	push   esi
c001927f:	53                   	push   ebx
c0019280:	83 ec 0c             	sub    esp,0xc
c0019283:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0019287:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001928b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001928f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019293:	fa                   	cli    
c0019294:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c001929a:	80 3d 85 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029485,0x0
c00192a1:	75 15                	jne    c00192b8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00192a3:	e8 08 f3 ff ff       	call   c00185b0 <schedule()>
c00192a8:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c00192ad:	48                   	dec    eax
c00192ae:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c00192b3:	75 de                	jne    c0019293 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00192b5:	fb                   	sti    
c00192b6:	eb db                	jmp    c0019293 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00192b8:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c00192bd:	c7 05 8c 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002948c,0x0
c00192c7:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00192cb:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00192cf:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00192d3:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00192d7:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00192db:	0f b7 ff             	movzx  edi,di
c00192de:	0f b7 f6             	movzx  esi,si
c00192e1:	50                   	push   eax
c00192e2:	6a 20                	push   0x20
c00192e4:	6a 00                	push   0x0
c00192e6:	68 a0 94 02 c0       	push   0xc00294a0
c00192eb:	e8 94 73 fe ff       	call   c0000684 <memset>
c00192f0:	5a                   	pop    edx
c00192f1:	59                   	pop    ecx
c00192f2:	57                   	push   edi
c00192f3:	56                   	push   esi
c00192f4:	e8 2d fe ff ff       	call   c0019126 <Vm::realToLinear(unsigned short, unsigned short)>
c00192f9:	83 c4 10             	add    esp,0x10
c00192fc:	89 c7                	mov    edi,eax
c00192fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019302:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019306:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019308:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001930d:	c6 05 85 94 02 c0 00 	mov    BYTE PTR ds:0xc0029485,0x0
c0019314:	48                   	dec    eax
c0019315:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001931a:	75 01                	jne    c001931d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001931c:	fb                   	sti    
c001931d:	83 ec 0c             	sub    esp,0xc
c0019320:	ff 35 88 94 02 c0    	push   DWORD PTR ds:0xc0029488
c0019326:	e8 41 f7 ff ff       	call   c0018a6c <unblockTask(ThreadControlBlock*)>
c001932b:	83 c4 1c             	add    esp,0x1c
c001932e:	b0 01                	mov    al,0x1
c0019330:	5b                   	pop    ebx
c0019331:	5e                   	pop    esi
c0019332:	5f                   	pop    edi
c0019333:	5d                   	pop    ebp
c0019334:	c3                   	ret    

c0019335 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0019335:	55                   	push   ebp
c0019336:	57                   	push   edi
c0019337:	56                   	push   esi
c0019338:	53                   	push   ebx
c0019339:	83 ec 2c             	sub    esp,0x2c
c001933c:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019340:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019344:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0019348:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001934c:	fa                   	cli    
c001934d:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0019353:	0f b6 35 85 94 02 c0 	movzx  esi,BYTE PTR ds:0xc0029485
c001935a:	89 f0                	mov    eax,esi
c001935c:	84 c0                	test   al,al
c001935e:	75 1d                	jne    c001937d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0019360:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019364:	e8 47 f2 ff ff       	call   c00185b0 <schedule()>
c0019369:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001936e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019372:	48                   	dec    eax
c0019373:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0019378:	75 d2                	jne    c001934c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001937a:	fb                   	sti    
c001937b:	eb cf                	jmp    c001934c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001937d:	a1 88 94 02 c0       	mov    eax,ds:0xc0029488
c0019382:	c7 05 8c 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002948c,0x0
c001938c:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0019390:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0019394:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0019398:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c001939c:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00193a0:	50                   	push   eax
c00193a1:	6a 20                	push   0x20
c00193a3:	6a 00                	push   0x0
c00193a5:	68 a0 94 02 c0       	push   0xc00294a0
c00193aa:	e8 d5 72 fe ff       	call   c0000684 <memset>
c00193af:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00193b6:	e8 54 06 ff ff       	call   c0009a0f <malloc>
c00193bb:	83 c4 0c             	add    esp,0xc
c00193be:	89 c3                	mov    ebx,eax
c00193c0:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c00193c6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00193ca:	50                   	push   eax
c00193cb:	e8 96 3e ff ff       	call   c000d266 <File::File(char const*, Process*)>
c00193d0:	83 c4 10             	add    esp,0x10
c00193d3:	85 db                	test   ebx,ebx
c00193d5:	75 0a                	jne    c00193e1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00193d7:	83 ec 0c             	sub    esp,0xc
c00193da:	68 4c 61 02 c0       	push   0xc002614c
c00193df:	eb 3e                	jmp    c001941f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00193e1:	50                   	push   eax
c00193e2:	8d 44 24 17          	lea    eax,[esp+0x17]
c00193e6:	50                   	push   eax
c00193e7:	8d 44 24 20          	lea    eax,[esp+0x20]
c00193eb:	50                   	push   eax
c00193ec:	53                   	push   ebx
c00193ed:	e8 fa 41 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c00193f2:	83 c4 10             	add    esp,0x10
c00193f5:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00193fa:	74 0a                	je     c0019406 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00193fc:	83 ec 0c             	sub    esp,0xc
c00193ff:	68 60 61 02 c0       	push   0xc0026160
c0019404:	eb 19                	jmp    c001941f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0019406:	51                   	push   ecx
c0019407:	51                   	push   ecx
c0019408:	6a 01                	push   0x1
c001940a:	53                   	push   ebx
c001940b:	e8 30 3f ff ff       	call   c000d340 <File::open(FileOpenMode)>
c0019410:	83 c4 10             	add    esp,0x10
c0019413:	85 c0                	test   eax,eax
c0019415:	74 24                	je     c001943b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0019417:	83 ec 0c             	sub    esp,0xc
c001941a:	68 79 61 02 c0       	push   0xc0026179
c001941f:	e8 7f b5 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0019424:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c0019429:	83 c4 10             	add    esp,0x10
c001942c:	48                   	dec    eax
c001942d:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0019432:	85 c0                	test   eax,eax
c0019434:	75 01                	jne    c0019437 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0019436:	fb                   	sti    
c0019437:	31 f6                	xor    esi,esi
c0019439:	eb 58                	jmp    c0019493 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001943b:	0f b7 ed             	movzx  ebp,bp
c001943e:	50                   	push   eax
c001943f:	0f b7 ff             	movzx  edi,di
c0019442:	50                   	push   eax
c0019443:	55                   	push   ebp
c0019444:	57                   	push   edi
c0019445:	e8 dc fc ff ff       	call   c0019126 <Vm::realToLinear(unsigned short, unsigned short)>
c001944a:	5a                   	pop    edx
c001944b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001944d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019451:	51                   	push   ecx
c0019452:	50                   	push   eax
c0019453:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019457:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001945b:	53                   	push   ebx
c001945c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001945f:	83 c4 14             	add    esp,0x14
c0019462:	53                   	push   ebx
c0019463:	e8 36 3f ff ff       	call   c000d39e <File::close()>
c0019468:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c001946d:	83 c4 10             	add    esp,0x10
c0019470:	48                   	dec    eax
c0019471:	c6 05 85 94 02 c0 00 	mov    BYTE PTR ds:0xc0029485,0x0
c0019478:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c001947d:	85 c0                	test   eax,eax
c001947f:	75 01                	jne    c0019482 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0019481:	fb                   	sti    
c0019482:	83 ec 0c             	sub    esp,0xc
c0019485:	ff 35 88 94 02 c0    	push   DWORD PTR ds:0xc0029488
c001948b:	e8 dc f5 ff ff       	call   c0018a6c <unblockTask(ThreadControlBlock*)>
c0019490:	83 c4 10             	add    esp,0x10
c0019493:	83 c4 2c             	add    esp,0x2c
c0019496:	89 f0                	mov    eax,esi
c0019498:	5b                   	pop    ebx
c0019499:	5e                   	pop    esi
c001949a:	5f                   	pop    edi
c001949b:	5d                   	pop    ebp
c001949c:	c3                   	ret    

c001949d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001949d:	57                   	push   edi
c001949e:	56                   	push   esi
c001949f:	53                   	push   ebx
c00194a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00194a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194a8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00194ac:	83 e8 06             	sub    eax,0x6
c00194af:	0f b7 c0             	movzx  eax,ax
c00194b2:	50                   	push   eax
c00194b3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00194b8:	50                   	push   eax
c00194b9:	e8 68 fc ff ff       	call   c0019126 <Vm::realToLinear(unsigned short, unsigned short)>
c00194be:	5a                   	pop    edx
c00194bf:	5e                   	pop    esi
c00194c0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00194c3:	8d 56 fa             	lea    edx,[esi-0x6]
c00194c6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00194cc:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00194cf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00194d2:	83 c2 02             	add    edx,0x2
c00194d5:	66 89 10             	mov    WORD PTR [eax],dx
c00194d8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00194db:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00194df:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00194e2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00194e6:	89 d6                	mov    esi,edx
c00194e8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00194ee:	66 81 e6 ff fd       	and    si,0xfdff
c00194f3:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00194f7:	74 07                	je     c0019500 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00194f9:	89 d6                	mov    esi,edx
c00194fb:	66 81 ce 00 02       	or     si,0x200
c0019500:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019504:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019509:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001950d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019515:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019518:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019520:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019523:	5b                   	pop    ebx
c0019524:	5e                   	pop    esi
c0019525:	5f                   	pop    edi
c0019526:	c3                   	ret    

c0019527 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019527:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001952c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019531:	c1 e0 04             	shl    eax,0x4
c0019534:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019537:	c3                   	ret    

c0019538 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019538:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001953d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019542:	c1 e0 04             	shl    eax,0x4
c0019545:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019549:	c3                   	ret    

c001954a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001954a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001954f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019554:	c1 e0 04             	shl    eax,0x4
c0019557:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001955a:	c3                   	ret    

c001955b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001955b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019560:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019565:	c1 e0 04             	shl    eax,0x4
c0019568:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001956c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001956f:	c3                   	ret    

c0019570 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0019570:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019575:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001957a:	c1 e0 04             	shl    eax,0x4
c001957d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019581:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019585:	c3                   	ret    

c0019586 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019586:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001958b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019590:	c1 e0 04             	shl    eax,0x4
c0019593:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019597:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001959a:	c3                   	ret    

c001959b <Vm::faultHandler(regs*)>:
c001959b:	55                   	push   ebp
c001959c:	57                   	push   edi
c001959d:	56                   	push   esi
c001959e:	53                   	push   ebx
c001959f:	83 ec 1c             	sub    esp,0x1c
c00195a2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00195a6:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00195a9:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00195ad:	0f b7 f8             	movzx  edi,ax
c00195b0:	52                   	push   edx
c00195b1:	0f b7 c0             	movzx  eax,ax
c00195b4:	50                   	push   eax
c00195b5:	e8 6c fb ff ff       	call   c0019126 <Vm::realToLinear(unsigned short, unsigned short)>
c00195ba:	5a                   	pop    edx
c00195bb:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00195be:	59                   	pop    ecx
c00195bf:	89 c1                	mov    ecx,eax
c00195c1:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00195c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00195c8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00195cd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00195d1:	0f b7 c5             	movzx  eax,bp
c00195d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195d8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00195dc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00195e0:	e8 41 fb ff ff       	call   c0019126 <Vm::realToLinear(unsigned short, unsigned short)>
c00195e5:	5e                   	pop    esi
c00195e6:	be 06 00 00 00       	mov    esi,0x6
c00195eb:	5a                   	pop    edx
c00195ec:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00195f1:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00195f6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00195f9:	80 fa 9d             	cmp    dl,0x9d
c00195fc:	0f 84 2c 02 00 00    	je     c001982e <Vm::faultHandler(regs*)+0x293>
c0019602:	0f 87 91 00 00 00    	ja     c0019699 <Vm::faultHandler(regs*)+0xfe>
c0019608:	80 fa 66             	cmp    dl,0x66
c001960b:	0f 84 98 01 00 00    	je     c00197a9 <Vm::faultHandler(regs*)+0x20e>
c0019611:	77 47                	ja     c001965a <Vm::faultHandler(regs*)+0xbf>
c0019613:	80 fa 36             	cmp    dl,0x36
c0019616:	0f 84 80 01 00 00    	je     c001979c <Vm::faultHandler(regs*)+0x201>
c001961c:	77 1a                	ja     c0019638 <Vm::faultHandler(regs*)+0x9d>
c001961e:	80 fa 26             	cmp    dl,0x26
c0019621:	0f 84 4e 01 00 00    	je     c0019775 <Vm::faultHandler(regs*)+0x1da>
c0019627:	80 fa 2e             	cmp    dl,0x2e
c001962a:	0f 85 e2 05 00 00    	jne    c0019c12 <Vm::faultHandler(regs*)+0x677>
c0019630:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019633:	31 f6                	xor    esi,esi
c0019635:	41                   	inc    ecx
c0019636:	eb be                	jmp    c00195f6 <Vm::faultHandler(regs*)+0x5b>
c0019638:	80 fa 64             	cmp    dl,0x64
c001963b:	0f 84 41 01 00 00    	je     c0019782 <Vm::faultHandler(regs*)+0x1e7>
c0019641:	0f 87 48 01 00 00    	ja     c001978f <Vm::faultHandler(regs*)+0x1f4>
c0019647:	80 fa 3e             	cmp    dl,0x3e
c001964a:	0f 85 c2 05 00 00    	jne    c0019c12 <Vm::faultHandler(regs*)+0x677>
c0019650:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019653:	be 01 00 00 00       	mov    esi,0x1
c0019658:	eb db                	jmp    c0019635 <Vm::faultHandler(regs*)+0x9a>
c001965a:	80 fa 6d             	cmp    dl,0x6d
c001965d:	0f 84 ec 02 00 00    	je     c001994f <Vm::faultHandler(regs*)+0x3b4>
c0019663:	77 17                	ja     c001967c <Vm::faultHandler(regs*)+0xe1>
c0019665:	80 fa 67             	cmp    dl,0x67
c0019668:	0f 84 48 01 00 00    	je     c00197b6 <Vm::faultHandler(regs*)+0x21b>
c001966e:	80 fa 6c             	cmp    dl,0x6c
c0019671:	0f 84 69 02 00 00    	je     c00198e0 <Vm::faultHandler(regs*)+0x345>
c0019677:	e9 96 05 00 00       	jmp    c0019c12 <Vm::faultHandler(regs*)+0x677>
c001967c:	80 fa 6f             	cmp    dl,0x6f
c001967f:	0f 84 f4 03 00 00    	je     c0019a79 <Vm::faultHandler(regs*)+0x4de>
c0019685:	0f 82 59 03 00 00    	jb     c00199e4 <Vm::faultHandler(regs*)+0x449>
c001968b:	80 fa 9c             	cmp    dl,0x9c
c001968e:	0f 84 2f 01 00 00    	je     c00197c3 <Vm::faultHandler(regs*)+0x228>
c0019694:	e9 79 05 00 00       	jmp    c0019c12 <Vm::faultHandler(regs*)+0x677>
c0019699:	80 fa ec             	cmp    dl,0xec
c001969c:	0f 84 14 05 00 00    	je     c0019bb6 <Vm::faultHandler(regs*)+0x61b>
c00196a2:	77 7b                	ja     c001971f <Vm::faultHandler(regs*)+0x184>
c00196a4:	80 fa e4             	cmp    dl,0xe4
c00196a7:	0f 84 93 04 00 00    	je     c0019b40 <Vm::faultHandler(regs*)+0x5a5>
c00196ad:	77 53                	ja     c0019702 <Vm::faultHandler(regs*)+0x167>
c00196af:	80 fa cd             	cmp    dl,0xcd
c00196b2:	0f 84 d9 01 00 00    	je     c0019891 <Vm::faultHandler(regs*)+0x2f6>
c00196b8:	80 fa cf             	cmp    dl,0xcf
c00196bb:	0f 85 51 05 00 00    	jne    c0019c12 <Vm::faultHandler(regs*)+0x677>
c00196c1:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00196c4:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00196c7:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00196cb:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00196ce:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00196d2:	81 ca 00 02 02 00    	or     edx,0x20200
c00196d8:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00196db:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00196df:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00196e5:	66 c1 e8 09          	shr    ax,0x9
c00196e9:	83 e0 01             	and    eax,0x1
c00196ec:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00196ef:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00196f2:	83 c0 06             	add    eax,0x6
c00196f5:	25 ff ff 00 00       	and    eax,0xffff
c00196fa:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00196fd:	e9 0c 05 00 00       	jmp    c0019c0e <Vm::faultHandler(regs*)+0x673>
c0019702:	80 fa e6             	cmp    dl,0xe6
c0019705:	0f 84 7f 04 00 00    	je     c0019b8a <Vm::faultHandler(regs*)+0x5ef>
c001970b:	0f 82 4b 04 00 00    	jb     c0019b5c <Vm::faultHandler(regs*)+0x5c1>
c0019711:	80 fa e7             	cmp    dl,0xe7
c0019714:	0f 84 87 04 00 00    	je     c0019ba1 <Vm::faultHandler(regs*)+0x606>
c001971a:	e9 f3 04 00 00       	jmp    c0019c12 <Vm::faultHandler(regs*)+0x677>
c001971f:	80 fa ef             	cmp    dl,0xef
c0019722:	0f 84 d1 04 00 00    	je     c0019bf9 <Vm::faultHandler(regs*)+0x65e>
c0019728:	77 28                	ja     c0019752 <Vm::faultHandler(regs*)+0x1b7>
c001972a:	80 fa ed             	cmp    dl,0xed
c001972d:	0f 84 9f 04 00 00    	je     c0019bd2 <Vm::faultHandler(regs*)+0x637>
c0019733:	80 fa ee             	cmp    dl,0xee
c0019736:	0f 85 d6 04 00 00    	jne    c0019c12 <Vm::faultHandler(regs*)+0x677>
c001973c:	50                   	push   eax
c001973d:	50                   	push   eax
c001973e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019742:	50                   	push   eax
c0019743:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019747:	50                   	push   eax
c0019748:	e8 a3 f9 ff ff       	call   c00190f0 <Vm::outbv(unsigned short, unsigned char)>
c001974d:	e9 9f 04 00 00       	jmp    c0019bf1 <Vm::faultHandler(regs*)+0x656>
c0019752:	80 fa fa             	cmp    dl,0xfa
c0019755:	0f 84 69 01 00 00    	je     c00198c4 <Vm::faultHandler(regs*)+0x329>
c001975b:	80 fa fb             	cmp    dl,0xfb
c001975e:	0f 84 6e 01 00 00    	je     c00198d2 <Vm::faultHandler(regs*)+0x337>
c0019764:	80 fa f3             	cmp    dl,0xf3
c0019767:	0f 85 a5 04 00 00    	jne    c0019c12 <Vm::faultHandler(regs*)+0x677>
c001976d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019770:	e9 c0 fe ff ff       	jmp    c0019635 <Vm::faultHandler(regs*)+0x9a>
c0019775:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019778:	be 02 00 00 00       	mov    esi,0x2
c001977d:	e9 b3 fe ff ff       	jmp    c0019635 <Vm::faultHandler(regs*)+0x9a>
c0019782:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019785:	be 03 00 00 00       	mov    esi,0x3
c001978a:	e9 a6 fe ff ff       	jmp    c0019635 <Vm::faultHandler(regs*)+0x9a>
c001978f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019792:	be 04 00 00 00       	mov    esi,0x4
c0019797:	e9 99 fe ff ff       	jmp    c0019635 <Vm::faultHandler(regs*)+0x9a>
c001979c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001979f:	be 05 00 00 00       	mov    esi,0x5
c00197a4:	e9 8c fe ff ff       	jmp    c0019635 <Vm::faultHandler(regs*)+0x9a>
c00197a9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00197ac:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00197b1:	e9 7f fe ff ff       	jmp    c0019635 <Vm::faultHandler(regs*)+0x9a>
c00197b6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00197b9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00197be:	e9 72 fe ff ff       	jmp    c0019635 <Vm::faultHandler(regs*)+0x9a>
c00197c3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00197c6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00197ca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00197cf:	74 30                	je     c0019801 <Vm::faultHandler(regs*)+0x266>
c00197d1:	83 e9 04             	sub    ecx,0x4
c00197d4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00197da:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00197e0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00197e3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00197e6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00197ec:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00197f0:	0f 84 15 04 00 00    	je     c0019c0b <Vm::faultHandler(regs*)+0x670>
c00197f6:	80 ce 02             	or     dh,0x2
c00197f9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00197fc:	e9 0a 04 00 00       	jmp    c0019c0b <Vm::faultHandler(regs*)+0x670>
c0019801:	83 e9 02             	sub    ecx,0x2
c0019804:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001980a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001980d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019811:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019817:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001981b:	74 05                	je     c0019822 <Vm::faultHandler(regs*)+0x287>
c001981d:	80 ce 02             	or     dh,0x2
c0019820:	eb 03                	jmp    c0019825 <Vm::faultHandler(regs*)+0x28a>
c0019822:	80 e6 fd             	and    dh,0xfd
c0019825:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019829:	e9 dd 03 00 00       	jmp    c0019c0b <Vm::faultHandler(regs*)+0x670>
c001982e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019833:	74 2a                	je     c001985f <Vm::faultHandler(regs*)+0x2c4>
c0019835:	8b 10                	mov    edx,DWORD PTR [eax]
c0019837:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001983d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019843:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019846:	8b 00                	mov    eax,DWORD PTR [eax]
c0019848:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001984e:	c1 e8 09             	shr    eax,0x9
c0019851:	83 e0 01             	and    eax,0x1
c0019854:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019857:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001985a:	83 c0 04             	add    eax,0x4
c001985d:	eb 25                	jmp    c0019884 <Vm::faultHandler(regs*)+0x2e9>
c001985f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019862:	81 ca 00 02 02 00    	or     edx,0x20200
c0019868:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001986b:	66 8b 00             	mov    ax,WORD PTR [eax]
c001986e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019874:	66 c1 e8 09          	shr    ax,0x9
c0019878:	83 e0 01             	and    eax,0x1
c001987b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001987e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019881:	83 c0 02             	add    eax,0x2
c0019884:	25 ff ff 00 00       	and    eax,0xffff
c0019889:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001988c:	e9 7a 03 00 00       	jmp    c0019c0b <Vm::faultHandler(regs*)+0x670>
c0019891:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019895:	3c ee                	cmp    al,0xee
c0019897:	75 10                	jne    c00198a9 <Vm::faultHandler(regs*)+0x30e>
c0019899:	83 ec 0c             	sub    esp,0xc
c001989c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001989f:	e8 e9 f8 ff ff       	call   c001918d <Vm::mainloop3(unsigned long)>
c00198a4:	e9 4b 03 00 00       	jmp    c0019bf4 <Vm::faultHandler(regs*)+0x659>
c00198a9:	83 ec 0c             	sub    esp,0xc
c00198ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00198b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198b4:	51                   	push   ecx
c00198b5:	50                   	push   eax
c00198b6:	53                   	push   ebx
c00198b7:	e8 e1 fb ff ff       	call   c001949d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00198bc:	83 c4 20             	add    esp,0x20
c00198bf:	e9 4a 03 00 00       	jmp    c0019c0e <Vm::faultHandler(regs*)+0x673>
c00198c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198c9:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00198cd:	e9 39 03 00 00       	jmp    c0019c0b <Vm::faultHandler(regs*)+0x670>
c00198d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00198d7:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00198db:	e9 2b 03 00 00       	jmp    c0019c0b <Vm::faultHandler(regs*)+0x670>
c00198e0:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00198e3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00198e8:	74 2b                	je     c0019915 <Vm::faultHandler(regs*)+0x37a>
c00198ea:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00198f1:	76 22                	jbe    c0019915 <Vm::faultHandler(regs*)+0x37a>
c00198f3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00198f7:	50                   	push   eax
c00198f8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00198fc:	50                   	push   eax
c00198fd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019901:	50                   	push   eax
c0019902:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019906:	50                   	push   eax
c0019907:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001990b:	50                   	push   eax
c001990c:	6a 6c                	push   0x6c
c001990e:	6a 6c                	push   0x6c
c0019910:	e9 b9 01 00 00       	jmp    c0019ace <Vm::faultHandler(regs*)+0x533>
c0019915:	83 ec 0c             	sub    esp,0xc
c0019918:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001991c:	0f b7 f6             	movzx  esi,si
c001991f:	50                   	push   eax
c0019920:	e8 b8 f7 ff ff       	call   c00190dd <Vm::inbv(unsigned short)>
c0019925:	83 c4 0c             	add    esp,0xc
c0019928:	0f b6 c0             	movzx  eax,al
c001992b:	50                   	push   eax
c001992c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019930:	50                   	push   eax
c0019931:	56                   	push   esi
c0019932:	e8 24 fc ff ff       	call   c001955b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019937:	83 c4 10             	add    esp,0x10
c001993a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001993d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019941:	74 03                	je     c0019946 <Vm::faultHandler(regs*)+0x3ab>
c0019943:	48                   	dec    eax
c0019944:	eb 01                	jmp    c0019947 <Vm::faultHandler(regs*)+0x3ac>
c0019946:	40                   	inc    eax
c0019947:	0f b7 c0             	movzx  eax,ax
c001994a:	e9 8d 00 00 00       	jmp    c00199dc <Vm::faultHandler(regs*)+0x441>
c001994f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019952:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019955:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001995a:	74 29                	je     c0019985 <Vm::faultHandler(regs*)+0x3ea>
c001995c:	3d ff ff 00 00       	cmp    eax,0xffff
c0019961:	76 22                	jbe    c0019985 <Vm::faultHandler(regs*)+0x3ea>
c0019963:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019967:	50                   	push   eax
c0019968:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001996c:	50                   	push   eax
c001996d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019971:	50                   	push   eax
c0019972:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019976:	50                   	push   eax
c0019977:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001997b:	50                   	push   eax
c001997c:	6a 6d                	push   0x6d
c001997e:	6a 6d                	push   0x6d
c0019980:	e9 49 01 00 00       	jmp    c0019ace <Vm::faultHandler(regs*)+0x533>
c0019985:	0f b7 c8             	movzx  ecx,ax
c0019988:	0f b7 f6             	movzx  esi,si
c001998b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001998e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019993:	74 20                	je     c00199b5 <Vm::faultHandler(regs*)+0x41a>
c0019995:	ed                   	in     eax,dx
c0019996:	55                   	push   ebp
c0019997:	50                   	push   eax
c0019998:	51                   	push   ecx
c0019999:	56                   	push   esi
c001999a:	e8 e7 fb ff ff       	call   c0019586 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001999f:	83 c4 10             	add    esp,0x10
c00199a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00199a5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00199a9:	74 05                	je     c00199b0 <Vm::faultHandler(regs*)+0x415>
c00199ab:	83 e8 04             	sub    eax,0x4
c00199ae:	eb 27                	jmp    c00199d7 <Vm::faultHandler(regs*)+0x43c>
c00199b0:	83 c0 04             	add    eax,0x4
c00199b3:	eb 22                	jmp    c00199d7 <Vm::faultHandler(regs*)+0x43c>
c00199b5:	66 ed                	in     ax,dx
c00199b7:	0f b7 c0             	movzx  eax,ax
c00199ba:	57                   	push   edi
c00199bb:	50                   	push   eax
c00199bc:	51                   	push   ecx
c00199bd:	56                   	push   esi
c00199be:	e8 ad fb ff ff       	call   c0019570 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00199c3:	83 c4 10             	add    esp,0x10
c00199c6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00199c9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00199cd:	74 05                	je     c00199d4 <Vm::faultHandler(regs*)+0x439>
c00199cf:	83 e8 02             	sub    eax,0x2
c00199d2:	eb 03                	jmp    c00199d7 <Vm::faultHandler(regs*)+0x43c>
c00199d4:	83 c0 02             	add    eax,0x2
c00199d7:	25 ff ff 00 00       	and    eax,0xffff
c00199dc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00199df:	e9 27 02 00 00       	jmp    c0019c0b <Vm::faultHandler(regs*)+0x670>
c00199e4:	8d 46 ff             	lea    eax,[esi-0x1]
c00199e7:	3c 05                	cmp    al,0x5
c00199e9:	77 24                	ja     c0019a0f <Vm::faultHandler(regs*)+0x474>
c00199eb:	0f b6 c0             	movzx  eax,al
c00199ee:	ff 24 85 ec 61 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9e14]
c00199f5:	0f b7 fd             	movzx  edi,bp
c00199f8:	eb 15                	jmp    c0019a0f <Vm::faultHandler(regs*)+0x474>
c00199fa:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00199fe:	eb 0f                	jmp    c0019a0f <Vm::faultHandler(regs*)+0x474>
c0019a00:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0019a04:	eb 09                	jmp    c0019a0f <Vm::faultHandler(regs*)+0x474>
c0019a06:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0019a0a:	eb 03                	jmp    c0019a0f <Vm::faultHandler(regs*)+0x474>
c0019a0c:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0019a0f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019a12:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019a17:	74 29                	je     c0019a42 <Vm::faultHandler(regs*)+0x4a7>
c0019a19:	3d ff ff 00 00       	cmp    eax,0xffff
c0019a1e:	76 22                	jbe    c0019a42 <Vm::faultHandler(regs*)+0x4a7>
c0019a20:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019a24:	50                   	push   eax
c0019a25:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019a29:	50                   	push   eax
c0019a2a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019a2e:	50                   	push   eax
c0019a2f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019a33:	50                   	push   eax
c0019a34:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019a38:	50                   	push   eax
c0019a39:	6a 6e                	push   0x6e
c0019a3b:	6a 6e                	push   0x6e
c0019a3d:	e9 8c 00 00 00       	jmp    c0019ace <Vm::faultHandler(regs*)+0x533>
c0019a42:	0f b7 c0             	movzx  eax,ax
c0019a45:	52                   	push   edx
c0019a46:	52                   	push   edx
c0019a47:	50                   	push   eax
c0019a48:	57                   	push   edi
c0019a49:	e8 d9 fa ff ff       	call   c0019527 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019a4e:	59                   	pop    ecx
c0019a4f:	0f b6 c0             	movzx  eax,al
c0019a52:	5e                   	pop    esi
c0019a53:	50                   	push   eax
c0019a54:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a58:	50                   	push   eax
c0019a59:	e8 92 f6 ff ff       	call   c00190f0 <Vm::outbv(unsigned short, unsigned char)>
c0019a5e:	83 c4 10             	add    esp,0x10
c0019a61:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019a64:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019a68:	74 03                	je     c0019a6d <Vm::faultHandler(regs*)+0x4d2>
c0019a6a:	48                   	dec    eax
c0019a6b:	eb 01                	jmp    c0019a6e <Vm::faultHandler(regs*)+0x4d3>
c0019a6d:	40                   	inc    eax
c0019a6e:	0f b7 c0             	movzx  eax,ax
c0019a71:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019a74:	e9 92 01 00 00       	jmp    c0019c0b <Vm::faultHandler(regs*)+0x670>
c0019a79:	8d 46 ff             	lea    eax,[esi-0x1]
c0019a7c:	3c 05                	cmp    al,0x5
c0019a7e:	77 1f                	ja     c0019a9f <Vm::faultHandler(regs*)+0x504>
c0019a80:	0f b6 c0             	movzx  eax,al
c0019a83:	ff 24 85 04 62 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd9dfc]
c0019a8a:	89 ef                	mov    edi,ebp
c0019a8c:	eb 11                	jmp    c0019a9f <Vm::faultHandler(regs*)+0x504>
c0019a8e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0019a91:	eb 0c                	jmp    c0019a9f <Vm::faultHandler(regs*)+0x504>
c0019a93:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019a96:	eb 07                	jmp    c0019a9f <Vm::faultHandler(regs*)+0x504>
c0019a98:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019a9b:	eb 02                	jmp    c0019a9f <Vm::faultHandler(regs*)+0x504>
c0019a9d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0019a9f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0019aa2:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019aa7:	74 37                	je     c0019ae0 <Vm::faultHandler(regs*)+0x545>
c0019aa9:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0019aaf:	76 2f                	jbe    c0019ae0 <Vm::faultHandler(regs*)+0x545>
c0019ab1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019ab5:	50                   	push   eax
c0019ab6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019aba:	50                   	push   eax
c0019abb:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019abf:	50                   	push   eax
c0019ac0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019ac4:	50                   	push   eax
c0019ac5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019ac9:	50                   	push   eax
c0019aca:	6a 6f                	push   0x6f
c0019acc:	6a 6f                	push   0x6f
c0019ace:	68 92 61 02 c0       	push   0xc0026192
c0019ad3:	e8 23 32 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0019ad8:	83 c4 20             	add    esp,0x20
c0019adb:	e9 86 01 00 00       	jmp    c0019c66 <Vm::faultHandler(regs*)+0x6cb>
c0019ae0:	0f b7 d7             	movzx  edx,di
c0019ae3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0019ae6:	0f b7 c6             	movzx  eax,si
c0019ae9:	81 e1 00 04 00 00    	and    ecx,0x400
c0019aef:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0019af2:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019af7:	74 1d                	je     c0019b16 <Vm::faultHandler(regs*)+0x57b>
c0019af9:	55                   	push   ebp
c0019afa:	55                   	push   ebp
c0019afb:	50                   	push   eax
c0019afc:	52                   	push   edx
c0019afd:	e8 48 fa ff ff       	call   c001954a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019b02:	83 c4 10             	add    esp,0x10
c0019b05:	89 fa                	mov    edx,edi
c0019b07:	ef                   	out    dx,eax
c0019b08:	85 c9                	test   ecx,ecx
c0019b0a:	74 05                	je     c0019b11 <Vm::faultHandler(regs*)+0x576>
c0019b0c:	83 ee 04             	sub    esi,0x4
c0019b0f:	eb 21                	jmp    c0019b32 <Vm::faultHandler(regs*)+0x597>
c0019b11:	83 c6 04             	add    esi,0x4
c0019b14:	eb 1c                	jmp    c0019b32 <Vm::faultHandler(regs*)+0x597>
c0019b16:	55                   	push   ebp
c0019b17:	55                   	push   ebp
c0019b18:	50                   	push   eax
c0019b19:	52                   	push   edx
c0019b1a:	e8 19 fa ff ff       	call   c0019538 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019b1f:	83 c4 10             	add    esp,0x10
c0019b22:	89 fa                	mov    edx,edi
c0019b24:	66 ef                	out    dx,ax
c0019b26:	85 c9                	test   ecx,ecx
c0019b28:	74 05                	je     c0019b2f <Vm::faultHandler(regs*)+0x594>
c0019b2a:	83 ee 02             	sub    esi,0x2
c0019b2d:	eb 03                	jmp    c0019b32 <Vm::faultHandler(regs*)+0x597>
c0019b2f:	83 c6 02             	add    esi,0x2
c0019b32:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019b38:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019b3b:	e9 cb 00 00 00       	jmp    c0019c0b <Vm::faultHandler(regs*)+0x670>
c0019b40:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019b47:	83 ec 0c             	sub    esp,0xc
c0019b4a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019b4e:	50                   	push   eax
c0019b4f:	e8 89 f5 ff ff       	call   c00190dd <Vm::inbv(unsigned short)>
c0019b54:	0f b6 c0             	movzx  eax,al
c0019b57:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019b5a:	eb 3f                	jmp    c0019b9b <Vm::faultHandler(regs*)+0x600>
c0019b5c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b61:	74 07                	je     c0019b6a <Vm::faultHandler(regs*)+0x5cf>
c0019b63:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019b67:	ed                   	in     eax,dx
c0019b68:	eb 14                	jmp    c0019b7e <Vm::faultHandler(regs*)+0x5e3>
c0019b6a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019b6d:	66 31 f6             	xor    si,si
c0019b70:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0019b73:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019b77:	66 ed                	in     ax,dx
c0019b79:	0f b7 c0             	movzx  eax,ax
c0019b7c:	09 f0                	or     eax,esi
c0019b7e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019b81:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019b85:	e9 84 00 00 00       	jmp    c0019c0e <Vm::faultHandler(regs*)+0x673>
c0019b8a:	52                   	push   edx
c0019b8b:	52                   	push   edx
c0019b8c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019b90:	50                   	push   eax
c0019b91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019b95:	50                   	push   eax
c0019b96:	e8 55 f5 ff ff       	call   c00190f0 <Vm::outbv(unsigned short, unsigned char)>
c0019b9b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019b9f:	eb 53                	jmp    c0019bf4 <Vm::faultHandler(regs*)+0x659>
c0019ba1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019ba4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019ba8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019bad:	74 03                	je     c0019bb2 <Vm::faultHandler(regs*)+0x617>
c0019baf:	ef                   	out    dx,eax
c0019bb0:	eb cf                	jmp    c0019b81 <Vm::faultHandler(regs*)+0x5e6>
c0019bb2:	66 ef                	out    dx,ax
c0019bb4:	eb cb                	jmp    c0019b81 <Vm::faultHandler(regs*)+0x5e6>
c0019bb6:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019bbd:	83 ec 0c             	sub    esp,0xc
c0019bc0:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019bc4:	50                   	push   eax
c0019bc5:	e8 13 f5 ff ff       	call   c00190dd <Vm::inbv(unsigned short)>
c0019bca:	0f b6 c0             	movzx  eax,al
c0019bcd:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019bd0:	eb 1f                	jmp    c0019bf1 <Vm::faultHandler(regs*)+0x656>
c0019bd2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019bd5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019bda:	74 03                	je     c0019bdf <Vm::faultHandler(regs*)+0x644>
c0019bdc:	ed                   	in     eax,dx
c0019bdd:	eb 0d                	jmp    c0019bec <Vm::faultHandler(regs*)+0x651>
c0019bdf:	66 ed                	in     ax,dx
c0019be1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019be4:	0f b7 c0             	movzx  eax,ax
c0019be7:	66 31 d2             	xor    dx,dx
c0019bea:	09 d0                	or     eax,edx
c0019bec:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019bef:	eb 1a                	jmp    c0019c0b <Vm::faultHandler(regs*)+0x670>
c0019bf1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019bf4:	83 c4 10             	add    esp,0x10
c0019bf7:	eb 15                	jmp    c0019c0e <Vm::faultHandler(regs*)+0x673>
c0019bf9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019bfc:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019bff:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c04:	74 03                	je     c0019c09 <Vm::faultHandler(regs*)+0x66e>
c0019c06:	ef                   	out    dx,eax
c0019c07:	eb 02                	jmp    c0019c0b <Vm::faultHandler(regs*)+0x670>
c0019c09:	66 ef                	out    dx,ax
c0019c0b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019c0e:	b0 01                	mov    al,0x1
c0019c10:	eb 56                	jmp    c0019c68 <Vm::faultHandler(regs*)+0x6cd>
c0019c12:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019c16:	50                   	push   eax
c0019c17:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019c1b:	50                   	push   eax
c0019c1c:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019c20:	50                   	push   eax
c0019c21:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019c25:	50                   	push   eax
c0019c26:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019c2a:	50                   	push   eax
c0019c2b:	52                   	push   edx
c0019c2c:	52                   	push   edx
c0019c2d:	68 bf 61 02 c0       	push   0xc00261bf
c0019c32:	e8 c4 30 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0019c37:	83 c4 20             	add    esp,0x20
c0019c3a:	83 ec 0c             	sub    esp,0xc
c0019c3d:	6a 60                	push   0x60
c0019c3f:	e8 99 f4 ff ff       	call   c00190dd <Vm::inbv(unsigned short)>
c0019c44:	83 c4 10             	add    esp,0x10
c0019c47:	3c 1c                	cmp    al,0x1c
c0019c49:	74 04                	je     c0019c4f <Vm::faultHandler(regs*)+0x6b4>
c0019c4b:	3c 5a                	cmp    al,0x5a
c0019c4d:	75 eb                	jne    c0019c3a <Vm::faultHandler(regs*)+0x69f>
c0019c4f:	3c 5a                	cmp    al,0x5a
c0019c51:	74 04                	je     c0019c57 <Vm::faultHandler(regs*)+0x6bc>
c0019c53:	3c 1c                	cmp    al,0x1c
c0019c55:	75 0f                	jne    c0019c66 <Vm::faultHandler(regs*)+0x6cb>
c0019c57:	83 ec 0c             	sub    esp,0xc
c0019c5a:	6a 60                	push   0x60
c0019c5c:	e8 7c f4 ff ff       	call   c00190dd <Vm::inbv(unsigned short)>
c0019c61:	83 c4 10             	add    esp,0x10
c0019c64:	eb e9                	jmp    c0019c4f <Vm::faultHandler(regs*)+0x6b4>
c0019c66:	31 c0                	xor    eax,eax
c0019c68:	83 c4 1c             	add    esp,0x1c
c0019c6b:	5b                   	pop    ebx
c0019c6c:	5e                   	pop    esi
c0019c6d:	5f                   	pop    edi
c0019c6e:	5d                   	pop    ebp
c0019c6f:	c3                   	ret    

c0019c70 <Vm::fpuInternalTo32(unsigned long long)>:
c0019c70:	57                   	push   edi
c0019c71:	56                   	push   esi
c0019c72:	53                   	push   ebx
c0019c73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019c7b:	89 d6                	mov    esi,edx
c0019c7d:	89 d7                	mov    edi,edx
c0019c7f:	89 c1                	mov    ecx,eax
c0019c81:	c1 ef 14             	shr    edi,0x14
c0019c84:	89 d3                	mov    ebx,edx
c0019c86:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019c8c:	31 d2                	xor    edx,edx
c0019c8e:	89 f8                	mov    eax,edi
c0019c90:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019c96:	bf ff 00 00 00       	mov    edi,0xff
c0019c9b:	05 80 fc ff ff       	add    eax,0xfffffc80
c0019ca0:	83 d2 ff             	adc    edx,0xffffffff
c0019ca3:	39 c7                	cmp    edi,eax
c0019ca5:	bf 00 00 00 00       	mov    edi,0x0
c0019caa:	19 d7                	sbb    edi,edx
c0019cac:	72 16                	jb     c0019cc4 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c0019cae:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c0019cb2:	c1 e0 17             	shl    eax,0x17
c0019cb5:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c0019cbb:	09 f1                	or     ecx,esi
c0019cbd:	09 c1                	or     ecx,eax
c0019cbf:	89 cf                	mov    edi,ecx
c0019cc1:	eb 05                	jmp    c0019cc8 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c0019cc3:	90                   	nop
c0019cc4:	31 ff                	xor    edi,edi
c0019cc6:	66 90                	xchg   ax,ax
c0019cc8:	89 f8                	mov    eax,edi
c0019cca:	5b                   	pop    ebx
c0019ccb:	5e                   	pop    esi
c0019ccc:	5f                   	pop    edi
c0019ccd:	c3                   	ret    

c0019cce <Vm::fpuInternalTo64(unsigned long long)>:
c0019cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019cd6:	c3                   	ret    

c0019cd7 <Vm::fpu32ToInternal(unsigned int)>:
c0019cd7:	57                   	push   edi
c0019cd8:	31 ff                	xor    edi,edi
c0019cda:	56                   	push   esi
c0019cdb:	53                   	push   ebx
c0019cdc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ce0:	89 cb                	mov    ebx,ecx
c0019ce2:	89 ce                	mov    esi,ecx
c0019ce4:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0019cea:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c0019cf0:	c1 e9 17             	shr    ecx,0x17
c0019cf3:	89 f0                	mov    eax,esi
c0019cf5:	0f b6 d1             	movzx  edx,cl
c0019cf8:	81 c2 80 03 00 00    	add    edx,0x380
c0019cfe:	89 d1                	mov    ecx,edx
c0019d00:	89 fa                	mov    edx,edi
c0019d02:	c1 e1 14             	shl    ecx,0x14
c0019d05:	0f a4 c2 1d          	shld   edx,eax,0x1d
c0019d09:	c1 e0 1d             	shl    eax,0x1d
c0019d0c:	89 d7                	mov    edi,edx
c0019d0e:	89 c6                	mov    esi,eax
c0019d10:	89 ca                	mov    edx,ecx
c0019d12:	89 f0                	mov    eax,esi
c0019d14:	09 fa                	or     edx,edi
c0019d16:	09 da                	or     edx,ebx
c0019d18:	5b                   	pop    ebx
c0019d19:	5e                   	pop    esi
c0019d1a:	5f                   	pop    edi
c0019d1b:	c3                   	ret    

c0019d1c <Vm::fpu64ToInternal(unsigned long long)>:
c0019d1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d24:	c3                   	ret    

c0019d25 <Vm::fpuFloatToLong(unsigned long long)>:
c0019d25:	57                   	push   edi
c0019d26:	31 c0                	xor    eax,eax
c0019d28:	56                   	push   esi
c0019d29:	31 d2                	xor    edx,edx
c0019d2b:	53                   	push   ebx
c0019d2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019d30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d34:	89 d9                	mov    ecx,ebx
c0019d36:	c1 e9 14             	shr    ecx,0x14
c0019d39:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0019d3f:	89 cf                	mov    edi,ecx
c0019d41:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019d47:	78 37                	js     c0019d80 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019d49:	89 d9                	mov    ecx,ebx
c0019d4b:	89 f0                	mov    eax,esi
c0019d4d:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019d53:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019d59:	89 ca                	mov    edx,ecx
c0019d5b:	b9 34 00 00 00       	mov    ecx,0x34
c0019d60:	29 f9                	sub    ecx,edi
c0019d62:	0f ad d0             	shrd   eax,edx,cl
c0019d65:	d3 fa                	sar    edx,cl
c0019d67:	f6 c1 20             	test   cl,0x20
c0019d6a:	74 08                	je     c0019d74 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019d6c:	89 d0                	mov    eax,edx
c0019d6e:	c1 fa 1f             	sar    edx,0x1f
c0019d71:	8d 76 00             	lea    esi,[esi+0x0]
c0019d74:	85 db                	test   ebx,ebx
c0019d76:	79 08                	jns    c0019d80 <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019d78:	f7 d8                	neg    eax
c0019d7a:	83 d2 00             	adc    edx,0x0
c0019d7d:	f7 da                	neg    edx
c0019d7f:	90                   	nop
c0019d80:	5b                   	pop    ebx
c0019d81:	5e                   	pop    esi
c0019d82:	5f                   	pop    edi
c0019d83:	c3                   	ret    

c0019d84 <Vm::fpuULongToFloat(unsigned long long)>:
c0019d84:	57                   	push   edi
c0019d85:	31 c9                	xor    ecx,ecx
c0019d87:	56                   	push   esi
c0019d88:	53                   	push   ebx
c0019d89:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019d8d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019d91:	8d 76 00             	lea    esi,[esi+0x0]
c0019d94:	0f ba e7 14          	bt     edi,0x14
c0019d98:	72 0a                	jb     c0019da4 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019d9a:	01 f6                	add    esi,esi
c0019d9c:	11 ff                	adc    edi,edi
c0019d9e:	41                   	inc    ecx
c0019d9f:	eb f3                	jmp    c0019d94 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c0019da1:	8d 76 00             	lea    esi,[esi+0x0]
c0019da4:	89 fa                	mov    edx,edi
c0019da6:	89 f0                	mov    eax,esi
c0019da8:	bb 33 04 00 00       	mov    ebx,0x433
c0019dad:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c0019db3:	29 cb                	sub    ebx,ecx
c0019db5:	89 d9                	mov    ecx,ebx
c0019db7:	5b                   	pop    ebx
c0019db8:	c1 e1 14             	shl    ecx,0x14
c0019dbb:	5e                   	pop    esi
c0019dbc:	09 ca                	or     edx,ecx
c0019dbe:	5f                   	pop    edi
c0019dbf:	c3                   	ret    

c0019dc0 <Vm::fpuLongToFloat(long long)>:
c0019dc0:	56                   	push   esi
c0019dc1:	31 c0                	xor    eax,eax
c0019dc3:	53                   	push   ebx
c0019dc4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019dc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019dcc:	39 c8                	cmp    eax,ecx
c0019dce:	19 d8                	sbb    eax,ebx
c0019dd0:	7d 06                	jge    c0019dd8 <Vm::fpuLongToFloat(long long)+0x18>
c0019dd2:	31 f6                	xor    esi,esi
c0019dd4:	eb 0e                	jmp    c0019de4 <Vm::fpuLongToFloat(long long)+0x24>
c0019dd6:	66 90                	xchg   ax,ax
c0019dd8:	f7 d9                	neg    ecx
c0019dda:	be 01 00 00 00       	mov    esi,0x1
c0019ddf:	83 d3 00             	adc    ebx,0x0
c0019de2:	f7 db                	neg    ebx
c0019de4:	31 c0                	xor    eax,eax
c0019de6:	66 90                	xchg   ax,ax
c0019de8:	0f ba e3 14          	bt     ebx,0x14
c0019dec:	72 0a                	jb     c0019df8 <Vm::fpuLongToFloat(long long)+0x38>
c0019dee:	01 c9                	add    ecx,ecx
c0019df0:	11 db                	adc    ebx,ebx
c0019df2:	40                   	inc    eax
c0019df3:	eb f3                	jmp    c0019de8 <Vm::fpuLongToFloat(long long)+0x28>
c0019df5:	8d 76 00             	lea    esi,[esi+0x0]
c0019df8:	ba 33 04 00 00       	mov    edx,0x433
c0019dfd:	29 c2                	sub    edx,eax
c0019dff:	89 c8                	mov    eax,ecx
c0019e01:	c1 e2 14             	shl    edx,0x14
c0019e04:	89 d9                	mov    ecx,ebx
c0019e06:	89 f3                	mov    ebx,esi
c0019e08:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c0019e0e:	09 ca                	or     edx,ecx
c0019e10:	84 db                	test   bl,bl
c0019e12:	74 08                	je     c0019e1c <Vm::fpuLongToFloat(long long)+0x5c>
c0019e14:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019e1a:	66 90                	xchg   ax,ax
c0019e1c:	5b                   	pop    ebx
c0019e1d:	5e                   	pop    esi
c0019e1e:	c3                   	ret    

c0019e1f <Vm::fpuGet0()>:
c0019e1f:	31 c0                	xor    eax,eax
c0019e21:	31 d2                	xor    edx,edx
c0019e23:	c3                   	ret    

c0019e24 <Vm::fpuGet1()>:
c0019e24:	b8 01 00 00 00       	mov    eax,0x1
c0019e29:	31 d2                	xor    edx,edx
c0019e2b:	c3                   	ret    

c0019e2c <Vm::fpuGetPi()>:
c0019e2c:	b8 03 00 00 00       	mov    eax,0x3
c0019e31:	31 d2                	xor    edx,edx
c0019e33:	c3                   	ret    

c0019e34 <Vm::fpuGetLog2E()>:
c0019e34:	83 ec 18             	sub    esp,0x18
c0019e37:	68 1c 62 02 c0       	push   0xc002621c
c0019e3c:	e8 62 ab ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0019e41:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019e46:	31 d2                	xor    edx,edx
c0019e48:	83 c4 1c             	add    esp,0x1c
c0019e4b:	c3                   	ret    

c0019e4c <Vm::fpuGetLogE2()>:
c0019e4c:	83 ec 18             	sub    esp,0x18
c0019e4f:	68 28 62 02 c0       	push   0xc0026228
c0019e54:	e8 4a ab ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0019e59:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019e5e:	31 d2                	xor    edx,edx
c0019e60:	83 c4 1c             	add    esp,0x1c
c0019e63:	c3                   	ret    

c0019e64 <Vm::fpuGetLog210()>:
c0019e64:	83 ec 18             	sub    esp,0x18
c0019e67:	68 34 62 02 c0       	push   0xc0026234
c0019e6c:	e8 32 ab ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0019e71:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019e76:	31 d2                	xor    edx,edx
c0019e78:	83 c4 1c             	add    esp,0x1c
c0019e7b:	c3                   	ret    

c0019e7c <Vm::fpuGetLog102()>:
c0019e7c:	83 ec 18             	sub    esp,0x18
c0019e7f:	68 41 62 02 c0       	push   0xc0026241
c0019e84:	e8 1a ab ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0019e89:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019e8e:	31 d2                	xor    edx,edx
c0019e90:	83 c4 1c             	add    esp,0x1c
c0019e93:	c3                   	ret    

c0019e94 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e98:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019ea0:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019ea4:	0f 92 c0             	setb   al
c0019ea7:	c3                   	ret    

c0019ea8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019ea8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019eac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eb0:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c0019eb4:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c0019eb8:	09 c2                	or     edx,eax
c0019eba:	0f 94 c0             	sete   al
c0019ebd:	c3                   	ret    

c0019ebe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c0019ebe:	57                   	push   edi
c0019ebf:	56                   	push   esi
c0019ec0:	53                   	push   ebx
c0019ec1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019ec5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ec9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ecd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019ed1:	57                   	push   edi
c0019ed2:	56                   	push   esi
c0019ed3:	53                   	push   ebx
c0019ed4:	51                   	push   ecx
c0019ed5:	e8 ce ff ff ff       	call   c0019ea8 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c0019eda:	83 c4 10             	add    esp,0x10
c0019edd:	88 c2                	mov    dl,al
c0019edf:	31 c0                	xor    eax,eax
c0019ee1:	84 d2                	test   dl,dl
c0019ee3:	75 0f                	jne    c0019ef4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c0019ee5:	57                   	push   edi
c0019ee6:	56                   	push   esi
c0019ee7:	53                   	push   ebx
c0019ee8:	51                   	push   ecx
c0019ee9:	e8 a6 ff ff ff       	call   c0019e94 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c0019eee:	83 c4 10             	add    esp,0x10
c0019ef1:	8d 76 00             	lea    esi,[esi+0x0]
c0019ef4:	83 e0 01             	and    eax,0x1
c0019ef7:	5b                   	pop    ebx
c0019ef8:	88 c1                	mov    cl,al
c0019efa:	83 e2 01             	and    edx,0x1
c0019efd:	a0 c1 94 02 c0       	mov    al,ds:0xc00294c1
c0019f02:	c1 e2 06             	shl    edx,0x6
c0019f05:	83 e0 ba             	and    eax,0xffffffba
c0019f08:	5e                   	pop    esi
c0019f09:	09 c8                	or     eax,ecx
c0019f0b:	5f                   	pop    edi
c0019f0c:	09 d0                	or     eax,edx
c0019f0e:	a2 c1 94 02 c0       	mov    ds:0xc00294c1,al
c0019f13:	c3                   	ret    

c0019f14 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f18:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f1c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0019f20:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019f24:	c3                   	ret    

c0019f25 <Vm::fpuAbs(unsigned long long)>:
c0019f25:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f2d:	c3                   	ret    

c0019f2e <Vm::fpuChs(unsigned long long)>:
c0019f2e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f32:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f36:	f7 d8                	neg    eax
c0019f38:	83 d2 00             	adc    edx,0x0
c0019f3b:	f7 da                	neg    edx
c0019f3d:	c3                   	ret    

c0019f3e <Vm::fpuSub(unsigned long long, unsigned long long)>:
c0019f3e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c0019f42:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019f47:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019f4b:	eb c7                	jmp    c0019f14 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019f4d <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019f4d:	53                   	push   ebx
c0019f4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f52:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019f56:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f5a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f5e:	0f af ca             	imul   ecx,edx
c0019f61:	0f af d8             	imul   ebx,eax
c0019f64:	f7 e2                	mul    edx
c0019f66:	01 d9                	add    ecx,ebx
c0019f68:	5b                   	pop    ebx
c0019f69:	01 ca                	add    edx,ecx
c0019f6b:	c3                   	ret    

c0019f6c <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019f6c:	83 ec 0c             	sub    esp,0xc
c0019f6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f7f:	e8 10 87 00 00       	call   c0022694 <__udivdi3>
c0019f84:	83 c4 1c             	add    esp,0x1c
c0019f87:	c3                   	ret    

c0019f88 <Vm::fpuSquare(unsigned long long)>:
c0019f88:	50                   	push   eax
c0019f89:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f91:	52                   	push   edx
c0019f92:	50                   	push   eax
c0019f93:	52                   	push   edx
c0019f94:	50                   	push   eax
c0019f95:	e8 b3 ff ff ff       	call   c0019f4d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f9a:	83 c4 14             	add    esp,0x14
c0019f9d:	c3                   	ret    

c0019f9e <Vm::fpuGetReg(int)>:
c0019f9e:	83 ec 0c             	sub    esp,0xc
c0019fa1:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019fa6:	76 10                	jbe    c0019fb8 <Vm::fpuGetReg(int)+0x1a>
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	68 4e 62 02 c0       	push   0xc002624e
c0019fb0:	e8 ee a9 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0019fb5:	83 c4 10             	add    esp,0x10
c0019fb8:	a0 c1 94 02 c0       	mov    al,ds:0xc00294c1
c0019fbd:	b9 08 00 00 00       	mov    ecx,0x8
c0019fc2:	c0 e8 03             	shr    al,0x3
c0019fc5:	83 e0 07             	and    eax,0x7
c0019fc8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019fcc:	99                   	cdq    
c0019fcd:	f7 f9                	idiv   ecx
c0019fcf:	8b 04 d5 c4 94 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd6b3c]
c0019fd6:	8b 14 d5 c8 94 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd6b38]
c0019fdd:	83 c4 0c             	add    esp,0xc
c0019fe0:	c3                   	ret    

c0019fe1 <Vm::fpuSetReg(int, unsigned long long)>:
c0019fe1:	57                   	push   edi
c0019fe2:	56                   	push   esi
c0019fe3:	52                   	push   edx
c0019fe4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019fe8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0019fec:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019ff1:	76 11                	jbe    c001a004 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c0019ff3:	83 ec 0c             	sub    esp,0xc
c0019ff6:	68 61 62 02 c0       	push   0xc0026261
c0019ffb:	e8 a3 a9 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001a000:	83 c4 10             	add    esp,0x10
c001a003:	90                   	nop
c001a004:	a0 c1 94 02 c0       	mov    al,ds:0xc00294c1
c001a009:	b9 08 00 00 00       	mov    ecx,0x8
c001a00e:	c0 e8 03             	shr    al,0x3
c001a011:	83 e0 07             	and    eax,0x7
c001a014:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a018:	99                   	cdq    
c001a019:	f7 f9                	idiv   ecx
c001a01b:	89 34 d5 c4 94 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6b3c],esi
c001a022:	89 3c d5 c8 94 02 c0 	mov    DWORD PTR [edx*8-0x3ffd6b38],edi
c001a029:	58                   	pop    eax
c001a02a:	5e                   	pop    esi
c001a02b:	5f                   	pop    edi
c001a02c:	c3                   	ret    

c001a02d <Vm::fpuPush(unsigned long long)>:
c001a02d:	a0 c1 94 02 c0       	mov    al,ds:0xc00294c1
c001a032:	c0 e8 03             	shr    al,0x3
c001a035:	83 e0 07             	and    eax,0x7
c001a038:	83 c0 07             	add    eax,0x7
c001a03b:	88 c2                	mov    dl,al
c001a03d:	83 e0 07             	and    eax,0x7
c001a040:	83 e2 07             	and    edx,0x7
c001a043:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001a04a:	8a 15 c1 94 02 c0    	mov    dl,BYTE PTR ds:0xc00294c1
c001a050:	83 e2 c7             	and    edx,0xffffffc7
c001a053:	09 ca                	or     edx,ecx
c001a055:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a059:	88 15 c1 94 02 c0    	mov    BYTE PTR ds:0xc00294c1,dl
c001a05f:	89 0c c5 c8 94 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6b38],ecx
c001a066:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a06a:	89 14 c5 c4 94 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6b3c],edx
c001a071:	a1 04 95 02 c0       	mov    eax,ds:0xc0029504
c001a076:	83 f8 08             	cmp    eax,0x8
c001a079:	75 09                	jne    c001a084 <Vm::fpuPush(unsigned long long)+0x57>
c001a07b:	80 0d c0 94 02 c0 40 	or     BYTE PTR ds:0xc00294c0,0x40
c001a082:	c3                   	ret    
c001a083:	90                   	nop
c001a084:	40                   	inc    eax
c001a085:	a3 04 95 02 c0       	mov    ds:0xc0029504,eax
c001a08a:	c3                   	ret    

c001a08b <Vm::fpuPop()>:
c001a08b:	8a 0d c1 94 02 c0    	mov    cl,BYTE PTR ds:0xc00294c1
c001a091:	53                   	push   ebx
c001a092:	c0 e9 03             	shr    cl,0x3
c001a095:	8a 1d c1 94 02 c0    	mov    bl,BYTE PTR ds:0xc00294c1
c001a09b:	83 e1 07             	and    ecx,0x7
c001a09e:	83 e3 c7             	and    ebx,0xffffffc7
c001a0a1:	8b 04 cd c4 94 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd6b3c]
c001a0a8:	8b 14 cd c8 94 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd6b38]
c001a0af:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001a0b6:	83 e1 38             	and    ecx,0x38
c001a0b9:	09 d9                	or     ecx,ebx
c001a0bb:	88 0d c1 94 02 c0    	mov    BYTE PTR ds:0xc00294c1,cl
c001a0c1:	8b 0d 04 95 02 c0    	mov    ecx,DWORD PTR ds:0xc0029504
c001a0c7:	85 c9                	test   ecx,ecx
c001a0c9:	74 09                	je     c001a0d4 <Vm::fpuPop()+0x49>
c001a0cb:	49                   	dec    ecx
c001a0cc:	89 0d 04 95 02 c0    	mov    DWORD PTR ds:0xc0029504,ecx
c001a0d2:	eb 08                	jmp    c001a0dc <Vm::fpuPop()+0x51>
c001a0d4:	80 0d c0 94 02 c0 40 	or     BYTE PTR ds:0xc00294c0,0x40
c001a0db:	90                   	nop
c001a0dc:	5b                   	pop    ebx
c001a0dd:	c3                   	ret    

c001a0de <Vm::x87Handler(regs*)>:
c001a0de:	55                   	push   ebp
c001a0df:	57                   	push   edi
c001a0e0:	56                   	push   esi
c001a0e1:	53                   	push   ebx
c001a0e2:	83 ec 1c             	sub    esp,0x1c
c001a0e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a0e9:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001a0ee:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001a0f1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001a0f9:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001a0fd:	50                   	push   eax
c001a0fe:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001a102:	50                   	push   eax
c001a103:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a107:	50                   	push   eax
c001a108:	53                   	push   ebx
c001a109:	e8 ae 9f ff ff       	call   c00140bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001a10e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001a111:	83 c4 10             	add    esp,0x10
c001a114:	89 c6                	mov    esi,eax
c001a116:	80 fa d9             	cmp    dl,0xd9
c001a119:	0f 85 79 01 00 00    	jne    c001a298 <Vm::x87Handler(regs*)+0x1ba>
c001a11f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a123:	8d 50 20             	lea    edx,[eax+0x20]
c001a126:	80 fa 0e             	cmp    dl,0xe
c001a129:	0f 87 a5 00 00 00    	ja     c001a1d4 <Vm::x87Handler(regs*)+0xf6>
c001a12f:	0f b6 d2             	movzx  edx,dl
c001a132:	ff 24 95 74 62 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd9d8c]
c001a139:	8d 76 00             	lea    esi,[esi+0x0]
c001a13c:	e8 de fc ff ff       	call   c0019e1f <Vm::fpuGet0()>
c001a141:	eb 09                	jmp    c001a14c <Vm::x87Handler(regs*)+0x6e>
c001a143:	90                   	nop
c001a144:	e8 db fc ff ff       	call   c0019e24 <Vm::fpuGet1()>
c001a149:	8d 76 00             	lea    esi,[esi+0x0]
c001a14c:	57                   	push   edi
c001a14d:	57                   	push   edi
c001a14e:	66 90                	xchg   ax,ax
c001a150:	52                   	push   edx
c001a151:	50                   	push   eax
c001a152:	e8 d6 fe ff ff       	call   c001a02d <Vm::fpuPush(unsigned long long)>
c001a157:	90                   	nop
c001a158:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a15c:	83 c4 10             	add    esp,0x10
c001a15f:	90                   	nop
c001a160:	b0 01                	mov    al,0x1
c001a162:	e9 89 0a 00 00       	jmp    c001abf0 <Vm::x87Handler(regs*)+0xb12>
c001a167:	90                   	nop
c001a168:	83 ec 0c             	sub    esp,0xc
c001a16b:	6a 00                	push   0x0
c001a16d:	e8 2c fe ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a172:	59                   	pop    ecx
c001a173:	5e                   	pop    esi
c001a174:	52                   	push   edx
c001a175:	50                   	push   eax
c001a176:	e8 b3 fd ff ff       	call   c0019f2e <Vm::fpuChs(unsigned long long)>
c001a17b:	eb 17                	jmp    c001a194 <Vm::x87Handler(regs*)+0xb6>
c001a17d:	8d 76 00             	lea    esi,[esi+0x0]
c001a180:	83 ec 0c             	sub    esp,0xc
c001a183:	6a 00                	push   0x0
c001a185:	e8 14 fe ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a18a:	5f                   	pop    edi
c001a18b:	5d                   	pop    ebp
c001a18c:	52                   	push   edx
c001a18d:	50                   	push   eax
c001a18e:	e8 92 fd ff ff       	call   c0019f25 <Vm::fpuAbs(unsigned long long)>
c001a193:	90                   	nop
c001a194:	83 c4 0c             	add    esp,0xc
c001a197:	90                   	nop
c001a198:	52                   	push   edx
c001a199:	50                   	push   eax
c001a19a:	66 90                	xchg   ax,ax
c001a19c:	6a 00                	push   0x0
c001a19e:	66 90                	xchg   ax,ax
c001a1a0:	e8 3c fe ff ff       	call   c0019fe1 <Vm::fpuSetReg(int, unsigned long long)>
c001a1a5:	eb b1                	jmp    c001a158 <Vm::x87Handler(regs*)+0x7a>
c001a1a7:	90                   	nop
c001a1a8:	e8 b7 fc ff ff       	call   c0019e64 <Vm::fpuGetLog210()>
c001a1ad:	eb 9d                	jmp    c001a14c <Vm::x87Handler(regs*)+0x6e>
c001a1af:	90                   	nop
c001a1b0:	e8 7f fc ff ff       	call   c0019e34 <Vm::fpuGetLog2E()>
c001a1b5:	eb 95                	jmp    c001a14c <Vm::x87Handler(regs*)+0x6e>
c001a1b7:	90                   	nop
c001a1b8:	e8 6f fc ff ff       	call   c0019e2c <Vm::fpuGetPi()>
c001a1bd:	eb 8d                	jmp    c001a14c <Vm::x87Handler(regs*)+0x6e>
c001a1bf:	90                   	nop
c001a1c0:	e8 b7 fc ff ff       	call   c0019e7c <Vm::fpuGetLog102()>
c001a1c5:	eb 85                	jmp    c001a14c <Vm::x87Handler(regs*)+0x6e>
c001a1c7:	90                   	nop
c001a1c8:	e8 7f fc ff ff       	call   c0019e4c <Vm::fpuGetLogE2()>
c001a1cd:	e9 7a ff ff ff       	jmp    c001a14c <Vm::x87Handler(regs*)+0x6e>
c001a1d2:	66 90                	xchg   ax,ax
c001a1d4:	8d 50 40             	lea    edx,[eax+0x40]
c001a1d7:	80 fa 07             	cmp    dl,0x7
c001a1da:	77 18                	ja     c001a1f4 <Vm::x87Handler(regs*)+0x116>
c001a1dc:	83 ec 0c             	sub    esp,0xc
c001a1df:	2d c0 00 00 00       	sub    eax,0xc0
c001a1e4:	50                   	push   eax
c001a1e5:	e8 b4 fd ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a1ea:	59                   	pop    ecx
c001a1eb:	5e                   	pop    esi
c001a1ec:	e9 5f ff ff ff       	jmp    c001a150 <Vm::x87Handler(regs*)+0x72>
c001a1f1:	8d 76 00             	lea    esi,[esi+0x0]
c001a1f4:	8d 50 38             	lea    edx,[eax+0x38]
c001a1f7:	80 fa 07             	cmp    dl,0x7
c001a1fa:	77 3c                	ja     c001a238 <Vm::x87Handler(regs*)+0x15a>
c001a1fc:	83 ec 0c             	sub    esp,0xc
c001a1ff:	2d c8 00 00 00       	sub    eax,0xc8
c001a204:	50                   	push   eax
c001a205:	e8 94 fd ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a20a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a211:	89 c6                	mov    esi,eax
c001a213:	89 d7                	mov    edi,edx
c001a215:	e8 84 fd ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a21a:	83 c4 0c             	add    esp,0xc
c001a21d:	52                   	push   edx
c001a21e:	50                   	push   eax
c001a21f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a223:	2d c8 00 00 00       	sub    eax,0xc8
c001a228:	50                   	push   eax
c001a229:	e8 b3 fd ff ff       	call   c0019fe1 <Vm::fpuSetReg(int, unsigned long long)>
c001a22e:	83 c4 0c             	add    esp,0xc
c001a231:	57                   	push   edi
c001a232:	56                   	push   esi
c001a233:	e9 64 ff ff ff       	jmp    c001a19c <Vm::x87Handler(regs*)+0xbe>
c001a238:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a23c:	84 d2                	test   dl,dl
c001a23e:	75 10                	jne    c001a250 <Vm::x87Handler(regs*)+0x172>
c001a240:	83 ec 0c             	sub    esp,0xc
c001a243:	ff 36                	push   DWORD PTR [esi]
c001a245:	e8 8d fa ff ff       	call   c0019cd7 <Vm::fpu32ToInternal(unsigned int)>
c001a24a:	e9 c9 00 00 00       	jmp    c001a318 <Vm::x87Handler(regs*)+0x23a>
c001a24f:	90                   	nop
c001a250:	80 fa 03             	cmp    dl,0x3
c001a253:	75 13                	jne    c001a268 <Vm::x87Handler(regs*)+0x18a>
c001a255:	e8 31 fe ff ff       	call   c001a08b <Vm::fpuPop()>
c001a25a:	55                   	push   ebp
c001a25b:	55                   	push   ebp
c001a25c:	52                   	push   edx
c001a25d:	50                   	push   eax
c001a25e:	e8 0d fa ff ff       	call   c0019c70 <Vm::fpuInternalTo32(unsigned long long)>
c001a263:	e9 90 00 00 00       	jmp    c001a2f8 <Vm::x87Handler(regs*)+0x21a>
c001a268:	80 fa 05             	cmp    dl,0x5
c001a26b:	75 0f                	jne    c001a27c <Vm::x87Handler(regs*)+0x19e>
c001a26d:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a270:	66 a3 c2 94 02 c0    	mov    ds:0xc00294c2,ax
c001a276:	e9 ed 00 00 00       	jmp    c001a368 <Vm::x87Handler(regs*)+0x28a>
c001a27b:	90                   	nop
c001a27c:	31 c0                	xor    eax,eax
c001a27e:	80 fa 07             	cmp    dl,0x7
c001a281:	0f 85 69 09 00 00    	jne    c001abf0 <Vm::x87Handler(regs*)+0xb12>
c001a287:	66 a1 c2 94 02 c0    	mov    ax,ds:0xc00294c2
c001a28d:	66 89 06             	mov    WORD PTR [esi],ax
c001a290:	e9 d3 00 00 00       	jmp    c001a368 <Vm::x87Handler(regs*)+0x28a>
c001a295:	8d 76 00             	lea    esi,[esi+0x0]
c001a298:	80 fa d8             	cmp    dl,0xd8
c001a29b:	0f 84 d3 00 00 00    	je     c001a374 <Vm::x87Handler(regs*)+0x296>
c001a2a1:	80 fa dc             	cmp    dl,0xdc
c001a2a4:	0f 84 2a 02 00 00    	je     c001a4d4 <Vm::x87Handler(regs*)+0x3f6>
c001a2aa:	80 fa de             	cmp    dl,0xde
c001a2ad:	0f 84 f1 02 00 00    	je     c001a5a4 <Vm::x87Handler(regs*)+0x4c6>
c001a2b3:	80 fa dd             	cmp    dl,0xdd
c001a2b6:	0f 84 94 04 00 00    	je     c001a750 <Vm::x87Handler(regs*)+0x672>
c001a2bc:	80 fa da             	cmp    dl,0xda
c001a2bf:	0f 84 5f 05 00 00    	je     c001a824 <Vm::x87Handler(regs*)+0x746>
c001a2c5:	80 fa df             	cmp    dl,0xdf
c001a2c8:	0f 84 aa 05 00 00    	je     c001a878 <Vm::x87Handler(regs*)+0x79a>
c001a2ce:	31 c0                	xor    eax,eax
c001a2d0:	80 fa db             	cmp    dl,0xdb
c001a2d3:	0f 85 17 09 00 00    	jne    c001abf0 <Vm::x87Handler(regs*)+0xb12>
c001a2d9:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a2dd:	80 fa 03             	cmp    dl,0x3
c001a2e0:	0f 85 c2 06 00 00    	jne    c001a9a8 <Vm::x87Handler(regs*)+0x8ca>
c001a2e6:	e8 a0 fd ff ff       	call   c001a08b <Vm::fpuPop()>
c001a2eb:	55                   	push   ebp
c001a2ec:	55                   	push   ebp
c001a2ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a2f0:	52                   	push   edx
c001a2f1:	50                   	push   eax
c001a2f2:	e8 2e fa ff ff       	call   c0019d25 <Vm::fpuFloatToLong(unsigned long long)>
c001a2f7:	90                   	nop
c001a2f8:	83 c4 10             	add    esp,0x10
c001a2fb:	89 06                	mov    DWORD PTR [esi],eax
c001a2fd:	eb 69                	jmp    c001a368 <Vm::x87Handler(regs*)+0x28a>
c001a2ff:	90                   	nop
c001a300:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a304:	84 d2                	test   dl,dl
c001a306:	0f 85 2c 06 00 00    	jne    c001a938 <Vm::x87Handler(regs*)+0x85a>
c001a30c:	57                   	push   edi
c001a30d:	57                   	push   edi
c001a30e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a311:	ff 36                	push   DWORD PTR [esi]
c001a313:	e8 04 fa ff ff       	call   c0019d1c <Vm::fpu64ToInternal(unsigned long long)>
c001a318:	5e                   	pop    esi
c001a319:	5f                   	pop    edi
c001a31a:	52                   	push   edx
c001a31b:	50                   	push   eax
c001a31c:	e8 0c fd ff ff       	call   c001a02d <Vm::fpuPush(unsigned long long)>
c001a321:	8d 76 00             	lea    esi,[esi+0x0]
c001a324:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a328:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a32b:	e9 2c fe ff ff       	jmp    c001a15c <Vm::x87Handler(regs*)+0x7e>
c001a330:	80 fa 03             	cmp    dl,0x3
c001a333:	0f 85 2b 07 00 00    	jne    c001aa64 <Vm::x87Handler(regs*)+0x986>
c001a339:	57                   	push   edi
c001a33a:	57                   	push   edi
c001a33b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a33e:	ff 36                	push   DWORD PTR [esi]
c001a340:	e8 d7 f9 ff ff       	call   c0019d1c <Vm::fpu64ToInternal(unsigned long long)>
c001a345:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a34c:	89 c6                	mov    esi,eax
c001a34e:	89 d7                	mov    edi,edx
c001a350:	e8 49 fc ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a355:	57                   	push   edi
c001a356:	56                   	push   esi
c001a357:	52                   	push   edx
c001a358:	50                   	push   eax
c001a359:	e8 60 fb ff ff       	call   c0019ebe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a35e:	83 c4 20             	add    esp,0x20
c001a361:	e8 25 fd ff ff       	call   c001a08b <Vm::fpuPop()>
c001a366:	66 90                	xchg   ax,ax
c001a368:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a36c:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a36f:	e9 ec fd ff ff       	jmp    c001a160 <Vm::x87Handler(regs*)+0x82>
c001a374:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a378:	8d 50 40             	lea    edx,[eax+0x40]
c001a37b:	80 fa 07             	cmp    dl,0x7
c001a37e:	77 2c                	ja     c001a3ac <Vm::x87Handler(regs*)+0x2ce>
c001a380:	83 ec 0c             	sub    esp,0xc
c001a383:	2d c0 00 00 00       	sub    eax,0xc0
c001a388:	50                   	push   eax
c001a389:	e8 10 fc ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a38e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a395:	89 c6                	mov    esi,eax
c001a397:	89 d7                	mov    edi,edx
c001a399:	e8 00 fc ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a39e:	57                   	push   edi
c001a39f:	56                   	push   esi
c001a3a0:	52                   	push   edx
c001a3a1:	50                   	push   eax
c001a3a2:	e8 6d fb ff ff       	call   c0019f14 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a3a7:	eb 33                	jmp    c001a3dc <Vm::x87Handler(regs*)+0x2fe>
c001a3a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3ac:	8d 50 38             	lea    edx,[eax+0x38]
c001a3af:	80 fa 07             	cmp    dl,0x7
c001a3b2:	77 30                	ja     c001a3e4 <Vm::x87Handler(regs*)+0x306>
c001a3b4:	83 ec 0c             	sub    esp,0xc
c001a3b7:	2d c8 00 00 00       	sub    eax,0xc8
c001a3bc:	50                   	push   eax
c001a3bd:	e8 dc fb ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a3c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3c9:	89 c6                	mov    esi,eax
c001a3cb:	89 d7                	mov    edi,edx
c001a3cd:	e8 cc fb ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a3d2:	57                   	push   edi
c001a3d3:	56                   	push   esi
c001a3d4:	52                   	push   edx
c001a3d5:	50                   	push   eax
c001a3d6:	e8 72 fb ff ff       	call   c0019f4d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a3db:	90                   	nop
c001a3dc:	83 c4 1c             	add    esp,0x1c
c001a3df:	e9 b4 fd ff ff       	jmp    c001a198 <Vm::x87Handler(regs*)+0xba>
c001a3e4:	8d 50 30             	lea    edx,[eax+0x30]
c001a3e7:	80 fa 07             	cmp    dl,0x7
c001a3ea:	77 10                	ja     c001a3fc <Vm::x87Handler(regs*)+0x31e>
c001a3ec:	83 ec 0c             	sub    esp,0xc
c001a3ef:	2d d0 00 00 00       	sub    eax,0xd0
c001a3f4:	e9 c3 03 00 00       	jmp    c001a7bc <Vm::x87Handler(regs*)+0x6de>
c001a3f9:	8d 76 00             	lea    esi,[esi+0x0]
c001a3fc:	8d 50 28             	lea    edx,[eax+0x28]
c001a3ff:	80 fa 07             	cmp    dl,0x7
c001a402:	77 10                	ja     c001a414 <Vm::x87Handler(regs*)+0x336>
c001a404:	83 ec 0c             	sub    esp,0xc
c001a407:	2d d8 00 00 00       	sub    eax,0xd8
c001a40c:	e9 e7 03 00 00       	jmp    c001a7f8 <Vm::x87Handler(regs*)+0x71a>
c001a411:	8d 76 00             	lea    esi,[esi+0x0]
c001a414:	8d 50 20             	lea    edx,[eax+0x20]
c001a417:	80 fa 07             	cmp    dl,0x7
c001a41a:	77 1c                	ja     c001a438 <Vm::x87Handler(regs*)+0x35a>
c001a41c:	83 ec 0c             	sub    esp,0xc
c001a41f:	2d e0 00 00 00       	sub    eax,0xe0
c001a424:	50                   	push   eax
c001a425:	e8 74 fb ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a42a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a431:	89 c6                	mov    esi,eax
c001a433:	89 d7                	mov    edi,edx
c001a435:	eb 25                	jmp    c001a45c <Vm::x87Handler(regs*)+0x37e>
c001a437:	90                   	nop
c001a438:	8d 50 18             	lea    edx,[eax+0x18]
c001a43b:	80 fa 07             	cmp    dl,0x7
c001a43e:	77 30                	ja     c001a470 <Vm::x87Handler(regs*)+0x392>
c001a440:	83 ec 0c             	sub    esp,0xc
c001a443:	6a 00                	push   0x0
c001a445:	e8 54 fb ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a44a:	89 c6                	mov    esi,eax
c001a44c:	89 d7                	mov    edi,edx
c001a44e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a452:	2d e8 00 00 00       	sub    eax,0xe8
c001a457:	89 04 24             	mov    DWORD PTR [esp],eax
c001a45a:	66 90                	xchg   ax,ax
c001a45c:	e8 3d fb ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a461:	57                   	push   edi
c001a462:	56                   	push   esi
c001a463:	52                   	push   edx
c001a464:	50                   	push   eax
c001a465:	e8 d4 fa ff ff       	call   c0019f3e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a46a:	e9 6d ff ff ff       	jmp    c001a3dc <Vm::x87Handler(regs*)+0x2fe>
c001a46f:	90                   	nop
c001a470:	8d 50 10             	lea    edx,[eax+0x10]
c001a473:	80 fa 07             	cmp    dl,0x7
c001a476:	77 1c                	ja     c001a494 <Vm::x87Handler(regs*)+0x3b6>
c001a478:	83 ec 0c             	sub    esp,0xc
c001a47b:	2d f0 00 00 00       	sub    eax,0xf0
c001a480:	50                   	push   eax
c001a481:	e8 18 fb ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a486:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a48d:	89 c6                	mov    esi,eax
c001a48f:	89 d7                	mov    edi,edx
c001a491:	eb 25                	jmp    c001a4b8 <Vm::x87Handler(regs*)+0x3da>
c001a493:	90                   	nop
c001a494:	3c f7                	cmp    al,0xf7
c001a496:	0f 86 00 04 00 00    	jbe    c001a89c <Vm::x87Handler(regs*)+0x7be>
c001a49c:	83 ec 0c             	sub    esp,0xc
c001a49f:	6a 00                	push   0x0
c001a4a1:	e8 f8 fa ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a4a6:	89 c6                	mov    esi,eax
c001a4a8:	89 d7                	mov    edi,edx
c001a4aa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4ae:	2d f8 00 00 00       	sub    eax,0xf8
c001a4b3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a4b6:	66 90                	xchg   ax,ax
c001a4b8:	e8 e1 fa ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a4bd:	57                   	push   edi
c001a4be:	56                   	push   esi
c001a4bf:	52                   	push   edx
c001a4c0:	50                   	push   eax
c001a4c1:	e8 a6 fa ff ff       	call   c0019f6c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a4c6:	83 c4 1c             	add    esp,0x1c
c001a4c9:	52                   	push   edx
c001a4ca:	50                   	push   eax
c001a4cb:	6a 00                	push   0x0
c001a4cd:	e9 6a 02 00 00       	jmp    c001a73c <Vm::x87Handler(regs*)+0x65e>
c001a4d2:	66 90                	xchg   ax,ax
c001a4d4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a4d8:	8d 50 40             	lea    edx,[eax+0x40]
c001a4db:	80 fa 07             	cmp    dl,0x7
c001a4de:	77 38                	ja     c001a518 <Vm::x87Handler(regs*)+0x43a>
c001a4e0:	83 ec 0c             	sub    esp,0xc
c001a4e3:	2d c0 00 00 00       	sub    eax,0xc0
c001a4e8:	50                   	push   eax
c001a4e9:	e8 b0 fa ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a4ee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a4f5:	89 c6                	mov    esi,eax
c001a4f7:	89 d7                	mov    edi,edx
c001a4f9:	e8 a0 fa ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a4fe:	57                   	push   edi
c001a4ff:	56                   	push   esi
c001a500:	52                   	push   edx
c001a501:	50                   	push   eax
c001a502:	e8 0d fa ff ff       	call   c0019f14 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a507:	83 c4 1c             	add    esp,0x1c
c001a50a:	52                   	push   edx
c001a50b:	50                   	push   eax
c001a50c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a510:	2d c0 00 00 00       	sub    eax,0xc0
c001a515:	eb 41                	jmp    c001a558 <Vm::x87Handler(regs*)+0x47a>
c001a517:	90                   	nop
c001a518:	8d 50 38             	lea    edx,[eax+0x38]
c001a51b:	80 fa 07             	cmp    dl,0x7
c001a51e:	77 40                	ja     c001a560 <Vm::x87Handler(regs*)+0x482>
c001a520:	83 ec 0c             	sub    esp,0xc
c001a523:	2d c8 00 00 00       	sub    eax,0xc8
c001a528:	50                   	push   eax
c001a529:	e8 70 fa ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a52e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a535:	89 c6                	mov    esi,eax
c001a537:	89 d7                	mov    edi,edx
c001a539:	e8 60 fa ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a53e:	57                   	push   edi
c001a53f:	56                   	push   esi
c001a540:	52                   	push   edx
c001a541:	50                   	push   eax
c001a542:	e8 06 fa ff ff       	call   c0019f4d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a547:	83 c4 1c             	add    esp,0x1c
c001a54a:	52                   	push   edx
c001a54b:	50                   	push   eax
c001a54c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a550:	2d c8 00 00 00       	sub    eax,0xc8
c001a555:	8d 76 00             	lea    esi,[esi+0x0]
c001a558:	50                   	push   eax
c001a559:	e9 42 fc ff ff       	jmp    c001a1a0 <Vm::x87Handler(regs*)+0xc2>
c001a55e:	66 90                	xchg   ax,ax
c001a560:	83 c0 18             	add    eax,0x18
c001a563:	3c 07                	cmp    al,0x7
c001a565:	0f 87 6d 04 00 00    	ja     c001a9d8 <Vm::x87Handler(regs*)+0x8fa>
c001a56b:	83 ec 0c             	sub    esp,0xc
c001a56e:	6a 00                	push   0x0
c001a570:	e8 29 fa ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a575:	89 c6                	mov    esi,eax
c001a577:	89 d7                	mov    edi,edx
c001a579:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a57d:	2d e8 00 00 00       	sub    eax,0xe8
c001a582:	89 04 24             	mov    DWORD PTR [esp],eax
c001a585:	e8 14 fa ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a58a:	57                   	push   edi
c001a58b:	56                   	push   esi
c001a58c:	52                   	push   edx
c001a58d:	50                   	push   eax
c001a58e:	e8 ab f9 ff ff       	call   c0019f3e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a593:	83 c4 1c             	add    esp,0x1c
c001a596:	52                   	push   edx
c001a597:	50                   	push   eax
c001a598:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a59c:	2d e8 00 00 00       	sub    eax,0xe8
c001a5a1:	eb b5                	jmp    c001a558 <Vm::x87Handler(regs*)+0x47a>
c001a5a3:	90                   	nop
c001a5a4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5a8:	8d 50 40             	lea    edx,[eax+0x40]
c001a5ab:	80 fa 07             	cmp    dl,0x7
c001a5ae:	77 3c                	ja     c001a5ec <Vm::x87Handler(regs*)+0x50e>
c001a5b0:	83 ec 0c             	sub    esp,0xc
c001a5b3:	2d c0 00 00 00       	sub    eax,0xc0
c001a5b8:	50                   	push   eax
c001a5b9:	e8 e0 f9 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a5be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a5c5:	89 c6                	mov    esi,eax
c001a5c7:	89 d7                	mov    edi,edx
c001a5c9:	e8 d0 f9 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a5ce:	57                   	push   edi
c001a5cf:	56                   	push   esi
c001a5d0:	52                   	push   edx
c001a5d1:	50                   	push   eax
c001a5d2:	e8 3d f9 ff ff       	call   c0019f14 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a5d7:	83 c4 1c             	add    esp,0x1c
c001a5da:	52                   	push   edx
c001a5db:	50                   	push   eax
c001a5dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a5e0:	2d c0 00 00 00       	sub    eax,0xc0
c001a5e5:	e9 b2 01 00 00       	jmp    c001a79c <Vm::x87Handler(regs*)+0x6be>
c001a5ea:	66 90                	xchg   ax,ax
c001a5ec:	8d 50 20             	lea    edx,[eax+0x20]
c001a5ef:	80 fa 07             	cmp    dl,0x7
c001a5f2:	77 3c                	ja     c001a630 <Vm::x87Handler(regs*)+0x552>
c001a5f4:	83 ec 0c             	sub    esp,0xc
c001a5f7:	2d e0 00 00 00       	sub    eax,0xe0
c001a5fc:	50                   	push   eax
c001a5fd:	e8 9c f9 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a602:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a609:	89 c6                	mov    esi,eax
c001a60b:	89 d7                	mov    edi,edx
c001a60d:	e8 8c f9 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a612:	57                   	push   edi
c001a613:	56                   	push   esi
c001a614:	52                   	push   edx
c001a615:	50                   	push   eax
c001a616:	e8 23 f9 ff ff       	call   c0019f3e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a61b:	83 c4 1c             	add    esp,0x1c
c001a61e:	52                   	push   edx
c001a61f:	50                   	push   eax
c001a620:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a624:	2d e0 00 00 00       	sub    eax,0xe0
c001a629:	e9 6e 01 00 00       	jmp    c001a79c <Vm::x87Handler(regs*)+0x6be>
c001a62e:	66 90                	xchg   ax,ax
c001a630:	8d 50 18             	lea    edx,[eax+0x18]
c001a633:	80 fa 07             	cmp    dl,0x7
c001a636:	77 3c                	ja     c001a674 <Vm::x87Handler(regs*)+0x596>
c001a638:	83 ec 0c             	sub    esp,0xc
c001a63b:	6a 00                	push   0x0
c001a63d:	e8 5c f9 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a642:	89 c6                	mov    esi,eax
c001a644:	89 d7                	mov    edi,edx
c001a646:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a64a:	2d e8 00 00 00       	sub    eax,0xe8
c001a64f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a652:	e8 47 f9 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a657:	57                   	push   edi
c001a658:	56                   	push   esi
c001a659:	52                   	push   edx
c001a65a:	50                   	push   eax
c001a65b:	e8 de f8 ff ff       	call   c0019f3e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a660:	83 c4 1c             	add    esp,0x1c
c001a663:	52                   	push   edx
c001a664:	50                   	push   eax
c001a665:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a669:	2d e8 00 00 00       	sub    eax,0xe8
c001a66e:	e9 29 01 00 00       	jmp    c001a79c <Vm::x87Handler(regs*)+0x6be>
c001a673:	90                   	nop
c001a674:	8d 50 38             	lea    edx,[eax+0x38]
c001a677:	80 fa 07             	cmp    dl,0x7
c001a67a:	77 3c                	ja     c001a6b8 <Vm::x87Handler(regs*)+0x5da>
c001a67c:	83 ec 0c             	sub    esp,0xc
c001a67f:	2d c8 00 00 00       	sub    eax,0xc8
c001a684:	50                   	push   eax
c001a685:	e8 14 f9 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a68a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a691:	89 c6                	mov    esi,eax
c001a693:	89 d7                	mov    edi,edx
c001a695:	e8 04 f9 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a69a:	57                   	push   edi
c001a69b:	56                   	push   esi
c001a69c:	52                   	push   edx
c001a69d:	50                   	push   eax
c001a69e:	e8 aa f8 ff ff       	call   c0019f4d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a6a3:	83 c4 1c             	add    esp,0x1c
c001a6a6:	52                   	push   edx
c001a6a7:	50                   	push   eax
c001a6a8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6ac:	2d c8 00 00 00       	sub    eax,0xc8
c001a6b1:	e9 82 00 00 00       	jmp    c001a738 <Vm::x87Handler(regs*)+0x65a>
c001a6b6:	66 90                	xchg   ax,ax
c001a6b8:	3c f7                	cmp    al,0xf7
c001a6ba:	76 38                	jbe    c001a6f4 <Vm::x87Handler(regs*)+0x616>
c001a6bc:	83 ec 0c             	sub    esp,0xc
c001a6bf:	6a 00                	push   0x0
c001a6c1:	e8 d8 f8 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a6c6:	89 c6                	mov    esi,eax
c001a6c8:	89 d7                	mov    edi,edx
c001a6ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6ce:	2d f8 00 00 00       	sub    eax,0xf8
c001a6d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6d6:	e8 c3 f8 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a6db:	57                   	push   edi
c001a6dc:	56                   	push   esi
c001a6dd:	52                   	push   edx
c001a6de:	50                   	push   eax
c001a6df:	e8 88 f8 ff ff       	call   c0019f6c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a6e4:	83 c4 1c             	add    esp,0x1c
c001a6e7:	52                   	push   edx
c001a6e8:	50                   	push   eax
c001a6e9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a6ed:	2d f8 00 00 00       	sub    eax,0xf8
c001a6f2:	eb 44                	jmp    c001a738 <Vm::x87Handler(regs*)+0x65a>
c001a6f4:	8d 50 10             	lea    edx,[eax+0x10]
c001a6f7:	80 fa 07             	cmp    dl,0x7
c001a6fa:	0f 87 6c 01 00 00    	ja     c001a86c <Vm::x87Handler(regs*)+0x78e>
c001a700:	83 ec 0c             	sub    esp,0xc
c001a703:	2d f0 00 00 00       	sub    eax,0xf0
c001a708:	50                   	push   eax
c001a709:	e8 90 f8 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a70e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a715:	89 c6                	mov    esi,eax
c001a717:	89 d7                	mov    edi,edx
c001a719:	e8 80 f8 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a71e:	57                   	push   edi
c001a71f:	56                   	push   esi
c001a720:	52                   	push   edx
c001a721:	50                   	push   eax
c001a722:	e8 45 f8 ff ff       	call   c0019f6c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a727:	83 c4 1c             	add    esp,0x1c
c001a72a:	52                   	push   edx
c001a72b:	50                   	push   eax
c001a72c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a730:	2d f0 00 00 00       	sub    eax,0xf0
c001a735:	8d 76 00             	lea    esi,[esi+0x0]
c001a738:	50                   	push   eax
c001a739:	8d 76 00             	lea    esi,[esi+0x0]
c001a73c:	e8 a0 f8 ff ff       	call   c0019fe1 <Vm::fpuSetReg(int, unsigned long long)>
c001a741:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a745:	e8 41 f9 ff ff       	call   c001a08b <Vm::fpuPop()>
c001a74a:	e9 0d fa ff ff       	jmp    c001a15c <Vm::x87Handler(regs*)+0x7e>
c001a74f:	90                   	nop
c001a750:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a754:	8d 50 30             	lea    edx,[eax+0x30]
c001a757:	80 fa 07             	cmp    dl,0x7
c001a75a:	77 20                	ja     c001a77c <Vm::x87Handler(regs*)+0x69e>
c001a75c:	83 ec 0c             	sub    esp,0xc
c001a75f:	6a 00                	push   0x0
c001a761:	e8 38 f8 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a766:	83 c4 0c             	add    esp,0xc
c001a769:	52                   	push   edx
c001a76a:	50                   	push   eax
c001a76b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a76f:	2d d0 00 00 00       	sub    eax,0xd0
c001a774:	e9 df fd ff ff       	jmp    c001a558 <Vm::x87Handler(regs*)+0x47a>
c001a779:	8d 76 00             	lea    esi,[esi+0x0]
c001a77c:	8d 50 28             	lea    edx,[eax+0x28]
c001a77f:	80 fa 07             	cmp    dl,0x7
c001a782:	77 28                	ja     c001a7ac <Vm::x87Handler(regs*)+0x6ce>
c001a784:	83 ec 0c             	sub    esp,0xc
c001a787:	6a 00                	push   0x0
c001a789:	e8 10 f8 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a78e:	83 c4 0c             	add    esp,0xc
c001a791:	52                   	push   edx
c001a792:	50                   	push   eax
c001a793:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a797:	2d d8 00 00 00       	sub    eax,0xd8
c001a79c:	50                   	push   eax
c001a79d:	e8 3f f8 ff ff       	call   c0019fe1 <Vm::fpuSetReg(int, unsigned long long)>
c001a7a2:	e8 e4 f8 ff ff       	call   c001a08b <Vm::fpuPop()>
c001a7a7:	e9 ac f9 ff ff       	jmp    c001a158 <Vm::x87Handler(regs*)+0x7a>
c001a7ac:	8d 50 20             	lea    edx,[eax+0x20]
c001a7af:	80 fa 07             	cmp    dl,0x7
c001a7b2:	77 30                	ja     c001a7e4 <Vm::x87Handler(regs*)+0x706>
c001a7b4:	83 ec 0c             	sub    esp,0xc
c001a7b7:	2d e0 00 00 00       	sub    eax,0xe0
c001a7bc:	50                   	push   eax
c001a7bd:	e8 dc f7 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a7c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a7c9:	89 c6                	mov    esi,eax
c001a7cb:	89 d7                	mov    edi,edx
c001a7cd:	e8 cc f7 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a7d2:	57                   	push   edi
c001a7d3:	56                   	push   esi
c001a7d4:	52                   	push   edx
c001a7d5:	50                   	push   eax
c001a7d6:	e8 e3 f6 ff ff       	call   c0019ebe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a7db:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a7df:	e9 78 02 00 00       	jmp    c001aa5c <Vm::x87Handler(regs*)+0x97e>
c001a7e4:	8d 50 18             	lea    edx,[eax+0x18]
c001a7e7:	80 fa 07             	cmp    dl,0x7
c001a7ea:	0f 87 10 fb ff ff    	ja     c001a300 <Vm::x87Handler(regs*)+0x222>
c001a7f0:	83 ec 0c             	sub    esp,0xc
c001a7f3:	2d e8 00 00 00       	sub    eax,0xe8
c001a7f8:	50                   	push   eax
c001a7f9:	e8 a0 f7 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a7fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a805:	89 c6                	mov    esi,eax
c001a807:	89 d7                	mov    edi,edx
c001a809:	e8 90 f7 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a80e:	57                   	push   edi
c001a80f:	56                   	push   esi
c001a810:	52                   	push   edx
c001a811:	50                   	push   eax
c001a812:	e8 a7 f6 ff ff       	call   c0019ebe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a817:	83 c4 20             	add    esp,0x20
c001a81a:	e8 6c f8 ff ff       	call   c001a08b <Vm::fpuPop()>
c001a81f:	eb 6f                	jmp    c001a890 <Vm::x87Handler(regs*)+0x7b2>
c001a821:	8d 76 00             	lea    esi,[esi+0x0]
c001a824:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a828:	0f 85 22 01 00 00    	jne    c001a950 <Vm::x87Handler(regs*)+0x872>
c001a82e:	66 90                	xchg   ax,ax
c001a830:	83 ec 0c             	sub    esp,0xc
c001a833:	6a 01                	push   0x1
c001a835:	e8 64 f7 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a83a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a841:	89 c6                	mov    esi,eax
c001a843:	89 d7                	mov    edi,edx
c001a845:	e8 54 f7 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a84a:	57                   	push   edi
c001a84b:	56                   	push   esi
c001a84c:	52                   	push   edx
c001a84d:	50                   	push   eax
c001a84e:	e8 6b f6 ff ff       	call   c0019ebe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a853:	83 c4 20             	add    esp,0x20
c001a856:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a85a:	e8 2c f8 ff ff       	call   c001a08b <Vm::fpuPop()>
c001a85f:	e8 27 f8 ff ff       	call   c001a08b <Vm::fpuPop()>
c001a864:	e9 f7 f8 ff ff       	jmp    c001a160 <Vm::x87Handler(regs*)+0x82>
c001a869:	8d 76 00             	lea    esi,[esi+0x0]
c001a86c:	3c d9                	cmp    al,0xd9
c001a86e:	0f 85 e8 02 00 00    	jne    c001ab5c <Vm::x87Handler(regs*)+0xa7e>
c001a874:	eb ba                	jmp    c001a830 <Vm::x87Handler(regs*)+0x752>
c001a876:	66 90                	xchg   ax,ax
c001a878:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a87c:	0f 85 2a 03 00 00    	jne    c001abac <Vm::x87Handler(regs*)+0xace>
c001a882:	0f b7 05 c0 94 02 c0 	movzx  eax,WORD PTR ds:0xc00294c0
c001a889:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a88d:	8d 76 00             	lea    esi,[esi+0x0]
c001a890:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a894:	e9 c7 f8 ff ff       	jmp    c001a160 <Vm::x87Handler(regs*)+0x82>
c001a899:	8d 76 00             	lea    esi,[esi+0x0]
c001a89c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a8a0:	84 d2                	test   dl,dl
c001a8a2:	75 10                	jne    c001a8b4 <Vm::x87Handler(regs*)+0x7d6>
c001a8a4:	83 ec 0c             	sub    esp,0xc
c001a8a7:	ff 36                	push   DWORD PTR [esi]
c001a8a9:	e8 29 f4 ff ff       	call   c0019cd7 <Vm::fpu32ToInternal(unsigned int)>
c001a8ae:	e9 39 01 00 00       	jmp    c001a9ec <Vm::x87Handler(regs*)+0x90e>
c001a8b3:	90                   	nop
c001a8b4:	80 fa 01             	cmp    dl,0x1
c001a8b7:	75 0f                	jne    c001a8c8 <Vm::x87Handler(regs*)+0x7ea>
c001a8b9:	83 ec 0c             	sub    esp,0xc
c001a8bc:	ff 36                	push   DWORD PTR [esi]
c001a8be:	e8 14 f4 ff ff       	call   c0019cd7 <Vm::fpu32ToInternal(unsigned int)>
c001a8c3:	e9 b4 02 00 00       	jmp    c001ab7c <Vm::x87Handler(regs*)+0xa9e>
c001a8c8:	80 fa 04             	cmp    dl,0x4
c001a8cb:	75 0f                	jne    c001a8dc <Vm::x87Handler(regs*)+0x7fe>
c001a8cd:	83 ec 0c             	sub    esp,0xc
c001a8d0:	ff 36                	push   DWORD PTR [esi]
c001a8d2:	e8 00 f4 ff ff       	call   c0019cd7 <Vm::fpu32ToInternal(unsigned int)>
c001a8d7:	e9 9c 01 00 00       	jmp    c001aa78 <Vm::x87Handler(regs*)+0x99a>
c001a8dc:	80 fa 05             	cmp    dl,0x5
c001a8df:	75 1b                	jne    c001a8fc <Vm::x87Handler(regs*)+0x81e>
c001a8e1:	83 ec 0c             	sub    esp,0xc
c001a8e4:	6a 00                	push   0x0
c001a8e6:	e8 b3 f6 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a8eb:	89 c7                	mov    edi,eax
c001a8ed:	89 d5                	mov    ebp,edx
c001a8ef:	58                   	pop    eax
c001a8f0:	ff 36                	push   DWORD PTR [esi]
c001a8f2:	e8 e0 f3 ff ff       	call   c0019cd7 <Vm::fpu32ToInternal(unsigned int)>
c001a8f7:	e9 bc 01 00 00       	jmp    c001aab8 <Vm::x87Handler(regs*)+0x9da>
c001a8fc:	80 fa 06             	cmp    dl,0x6
c001a8ff:	75 0f                	jne    c001a910 <Vm::x87Handler(regs*)+0x832>
c001a901:	83 ec 0c             	sub    esp,0xc
c001a904:	ff 36                	push   DWORD PTR [esi]
c001a906:	e8 cc f3 ff ff       	call   c0019cd7 <Vm::fpu32ToInternal(unsigned int)>
c001a90b:	e9 cc 01 00 00       	jmp    c001aadc <Vm::x87Handler(regs*)+0x9fe>
c001a910:	31 c0                	xor    eax,eax
c001a912:	80 fa 07             	cmp    dl,0x7
c001a915:	0f 85 d5 02 00 00    	jne    c001abf0 <Vm::x87Handler(regs*)+0xb12>
c001a91b:	83 ec 0c             	sub    esp,0xc
c001a91e:	6a 00                	push   0x0
c001a920:	e8 79 f6 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a925:	89 c7                	mov    edi,eax
c001a927:	89 d5                	mov    ebp,edx
c001a929:	58                   	pop    eax
c001a92a:	ff 36                	push   DWORD PTR [esi]
c001a92c:	e8 a6 f3 ff ff       	call   c0019cd7 <Vm::fpu32ToInternal(unsigned int)>
c001a931:	e9 ee 01 00 00       	jmp    c001ab24 <Vm::x87Handler(regs*)+0xa46>
c001a936:	66 90                	xchg   ax,ax
c001a938:	80 fa 03             	cmp    dl,0x3
c001a93b:	0f 85 f7 01 00 00    	jne    c001ab38 <Vm::x87Handler(regs*)+0xa5a>
c001a941:	e8 45 f7 ff ff       	call   c001a08b <Vm::fpuPop()>
c001a946:	51                   	push   ecx
c001a947:	51                   	push   ecx
c001a948:	e9 03 02 00 00       	jmp    c001ab50 <Vm::x87Handler(regs*)+0xa72>
c001a94d:	8d 76 00             	lea    esi,[esi+0x0]
c001a950:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a954:	80 fa 01             	cmp    dl,0x1
c001a957:	75 0b                	jne    c001a964 <Vm::x87Handler(regs*)+0x886>
c001a959:	57                   	push   edi
c001a95a:	57                   	push   edi
c001a95b:	8b 06                	mov    eax,DWORD PTR [esi]
c001a95d:	e9 0e 02 00 00       	jmp    c001ab70 <Vm::x87Handler(regs*)+0xa92>
c001a962:	66 90                	xchg   ax,ax
c001a964:	80 fa 04             	cmp    dl,0x4
c001a967:	75 13                	jne    c001a97c <Vm::x87Handler(regs*)+0x89e>
c001a969:	31 d2                	xor    edx,edx
c001a96b:	51                   	push   ecx
c001a96c:	51                   	push   ecx
c001a96d:	8b 06                	mov    eax,DWORD PTR [esi]
c001a96f:	52                   	push   edx
c001a970:	50                   	push   eax
c001a971:	e8 4a f4 ff ff       	call   c0019dc0 <Vm::fpuLongToFloat(long long)>
c001a976:	e9 fd 00 00 00       	jmp    c001aa78 <Vm::x87Handler(regs*)+0x99a>
c001a97b:	90                   	nop
c001a97c:	31 c0                	xor    eax,eax
c001a97e:	80 fa 07             	cmp    dl,0x7
c001a981:	0f 85 69 02 00 00    	jne    c001abf0 <Vm::x87Handler(regs*)+0xb12>
c001a987:	83 ec 0c             	sub    esp,0xc
c001a98a:	6a 00                	push   0x0
c001a98c:	e8 0d f6 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a991:	89 c7                	mov    edi,eax
c001a993:	89 d5                	mov    ebp,edx
c001a995:	58                   	pop    eax
c001a996:	8b 06                	mov    eax,DWORD PTR [esi]
c001a998:	5a                   	pop    edx
c001a999:	31 d2                	xor    edx,edx
c001a99b:	52                   	push   edx
c001a99c:	50                   	push   eax
c001a99d:	e8 1e f4 ff ff       	call   c0019dc0 <Vm::fpuLongToFloat(long long)>
c001a9a2:	e9 7d 01 00 00       	jmp    c001ab24 <Vm::x87Handler(regs*)+0xa46>
c001a9a7:	90                   	nop
c001a9a8:	84 d2                	test   dl,dl
c001a9aa:	75 10                	jne    c001a9bc <Vm::x87Handler(regs*)+0x8de>
c001a9ac:	31 d2                	xor    edx,edx
c001a9ae:	55                   	push   ebp
c001a9af:	55                   	push   ebp
c001a9b0:	8b 06                	mov    eax,DWORD PTR [esi]
c001a9b2:	52                   	push   edx
c001a9b3:	50                   	push   eax
c001a9b4:	e9 03 02 00 00       	jmp    c001abbc <Vm::x87Handler(regs*)+0xade>
c001a9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a9bc:	31 c0                	xor    eax,eax
c001a9be:	80 fa 02             	cmp    dl,0x2
c001a9c1:	0f 85 29 02 00 00    	jne    c001abf0 <Vm::x87Handler(regs*)+0xb12>
c001a9c7:	83 ec 0c             	sub    esp,0xc
c001a9ca:	6a 00                	push   0x0
c001a9cc:	e8 cd f5 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a9d1:	59                   	pop    ecx
c001a9d2:	5f                   	pop    edi
c001a9d3:	e9 18 f9 ff ff       	jmp    c001a2f0 <Vm::x87Handler(regs*)+0x212>
c001a9d8:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a9dc:	84 d2                	test   dl,dl
c001a9de:	75 2c                	jne    c001aa0c <Vm::x87Handler(regs*)+0x92e>
c001a9e0:	50                   	push   eax
c001a9e1:	50                   	push   eax
c001a9e2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a9e5:	ff 36                	push   DWORD PTR [esi]
c001a9e7:	e8 30 f3 ff ff       	call   c0019d1c <Vm::fpu64ToInternal(unsigned long long)>
c001a9ec:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a9f3:	89 c6                	mov    esi,eax
c001a9f5:	89 d7                	mov    edi,edx
c001a9f7:	e8 a2 f5 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001a9fc:	57                   	push   edi
c001a9fd:	56                   	push   esi
c001a9fe:	52                   	push   edx
c001a9ff:	50                   	push   eax
c001aa00:	e8 0f f5 ff ff       	call   c0019f14 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001aa05:	e9 8e 01 00 00       	jmp    c001ab98 <Vm::x87Handler(regs*)+0xaba>
c001aa0a:	66 90                	xchg   ax,ax
c001aa0c:	80 fa 01             	cmp    dl,0x1
c001aa0f:	75 13                	jne    c001aa24 <Vm::x87Handler(regs*)+0x946>
c001aa11:	50                   	push   eax
c001aa12:	50                   	push   eax
c001aa13:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa16:	ff 36                	push   DWORD PTR [esi]
c001aa18:	e8 ff f2 ff ff       	call   c0019d1c <Vm::fpu64ToInternal(unsigned long long)>
c001aa1d:	e9 5a 01 00 00       	jmp    c001ab7c <Vm::x87Handler(regs*)+0xa9e>
c001aa22:	66 90                	xchg   ax,ax
c001aa24:	80 fa 02             	cmp    dl,0x2
c001aa27:	0f 85 03 f9 ff ff    	jne    c001a330 <Vm::x87Handler(regs*)+0x252>
c001aa2d:	55                   	push   ebp
c001aa2e:	55                   	push   ebp
c001aa2f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa32:	ff 36                	push   DWORD PTR [esi]
c001aa34:	e8 e3 f2 ff ff       	call   c0019d1c <Vm::fpu64ToInternal(unsigned long long)>
c001aa39:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aa40:	89 c6                	mov    esi,eax
c001aa42:	89 d7                	mov    edi,edx
c001aa44:	e8 55 f5 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001aa49:	57                   	push   edi
c001aa4a:	56                   	push   esi
c001aa4b:	52                   	push   edx
c001aa4c:	50                   	push   eax
c001aa4d:	e8 6c f4 ff ff       	call   c0019ebe <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001aa52:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aa56:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001aa59:	8d 76 00             	lea    esi,[esi+0x0]
c001aa5c:	83 c4 20             	add    esp,0x20
c001aa5f:	e9 fc f6 ff ff       	jmp    c001a160 <Vm::x87Handler(regs*)+0x82>
c001aa64:	80 fa 04             	cmp    dl,0x4
c001aa67:	75 2f                	jne    c001aa98 <Vm::x87Handler(regs*)+0x9ba>
c001aa69:	51                   	push   ecx
c001aa6a:	51                   	push   ecx
c001aa6b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aa6e:	ff 36                	push   DWORD PTR [esi]
c001aa70:	e8 a7 f2 ff ff       	call   c0019d1c <Vm::fpu64ToInternal(unsigned long long)>
c001aa75:	8d 76 00             	lea    esi,[esi+0x0]
c001aa78:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aa7f:	89 c6                	mov    esi,eax
c001aa81:	89 d7                	mov    edi,edx
c001aa83:	e8 16 f5 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001aa88:	57                   	push   edi
c001aa89:	56                   	push   esi
c001aa8a:	52                   	push   edx
c001aa8b:	50                   	push   eax
c001aa8c:	e8 ad f4 ff ff       	call   c0019f3e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001aa91:	e9 02 01 00 00       	jmp    c001ab98 <Vm::x87Handler(regs*)+0xaba>
c001aa96:	66 90                	xchg   ax,ax
c001aa98:	80 fa 05             	cmp    dl,0x5
c001aa9b:	75 2b                	jne    c001aac8 <Vm::x87Handler(regs*)+0x9ea>
c001aa9d:	83 ec 0c             	sub    esp,0xc
c001aaa0:	6a 00                	push   0x0
c001aaa2:	e8 f7 f4 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001aaa7:	89 c7                	mov    edi,eax
c001aaa9:	89 d5                	mov    ebp,edx
c001aaab:	58                   	pop    eax
c001aaac:	5a                   	pop    edx
c001aaad:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aab0:	ff 36                	push   DWORD PTR [esi]
c001aab2:	e8 65 f2 ff ff       	call   c0019d1c <Vm::fpu64ToInternal(unsigned long long)>
c001aab7:	90                   	nop
c001aab8:	83 c4 10             	add    esp,0x10
c001aabb:	55                   	push   ebp
c001aabc:	57                   	push   edi
c001aabd:	52                   	push   edx
c001aabe:	50                   	push   eax
c001aabf:	e8 7a f4 ff ff       	call   c0019f3e <Vm::fpuSub(unsigned long long, unsigned long long)>
c001aac4:	eb 6a                	jmp    c001ab30 <Vm::x87Handler(regs*)+0xa52>
c001aac6:	66 90                	xchg   ax,ax
c001aac8:	80 fa 06             	cmp    dl,0x6
c001aacb:	75 2f                	jne    c001aafc <Vm::x87Handler(regs*)+0xa1e>
c001aacd:	51                   	push   ecx
c001aace:	51                   	push   ecx
c001aacf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001aad2:	ff 36                	push   DWORD PTR [esi]
c001aad4:	e8 43 f2 ff ff       	call   c0019d1c <Vm::fpu64ToInternal(unsigned long long)>
c001aad9:	8d 76 00             	lea    esi,[esi+0x0]
c001aadc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001aae3:	89 c6                	mov    esi,eax
c001aae5:	89 d7                	mov    edi,edx
c001aae7:	e8 b2 f4 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001aaec:	57                   	push   edi
c001aaed:	56                   	push   esi
c001aaee:	52                   	push   edx
c001aaef:	50                   	push   eax
c001aaf0:	e8 77 f4 ff ff       	call   c0019f6c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001aaf5:	e9 9e 00 00 00       	jmp    c001ab98 <Vm::x87Handler(regs*)+0xaba>
c001aafa:	66 90                	xchg   ax,ax
c001aafc:	31 c0                	xor    eax,eax
c001aafe:	80 fa 07             	cmp    dl,0x7
c001ab01:	0f 85 e9 00 00 00    	jne    c001abf0 <Vm::x87Handler(regs*)+0xb12>
c001ab07:	83 ec 0c             	sub    esp,0xc
c001ab0a:	6a 00                	push   0x0
c001ab0c:	e8 8d f4 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001ab11:	89 c7                	mov    edi,eax
c001ab13:	89 d5                	mov    ebp,edx
c001ab15:	58                   	pop    eax
c001ab16:	5a                   	pop    edx
c001ab17:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ab1a:	ff 36                	push   DWORD PTR [esi]
c001ab1c:	e8 fb f1 ff ff       	call   c0019d1c <Vm::fpu64ToInternal(unsigned long long)>
c001ab21:	8d 76 00             	lea    esi,[esi+0x0]
c001ab24:	83 c4 10             	add    esp,0x10
c001ab27:	55                   	push   ebp
c001ab28:	57                   	push   edi
c001ab29:	52                   	push   edx
c001ab2a:	50                   	push   eax
c001ab2b:	e8 3c f4 ff ff       	call   c0019f6c <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001ab30:	83 c4 0c             	add    esp,0xc
c001ab33:	eb 67                	jmp    c001ab9c <Vm::x87Handler(regs*)+0xabe>
c001ab35:	8d 76 00             	lea    esi,[esi+0x0]
c001ab38:	31 c0                	xor    eax,eax
c001ab3a:	80 fa 02             	cmp    dl,0x2
c001ab3d:	0f 85 ad 00 00 00    	jne    c001abf0 <Vm::x87Handler(regs*)+0xb12>
c001ab43:	83 ec 0c             	sub    esp,0xc
c001ab46:	6a 00                	push   0x0
c001ab48:	e8 51 f4 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001ab4d:	59                   	pop    ecx
c001ab4e:	5f                   	pop    edi
c001ab4f:	90                   	nop
c001ab50:	52                   	push   edx
c001ab51:	50                   	push   eax
c001ab52:	e8 77 f1 ff ff       	call   c0019cce <Vm::fpuInternalTo64(unsigned long long)>
c001ab57:	e9 84 00 00 00       	jmp    c001abe0 <Vm::x87Handler(regs*)+0xb02>
c001ab5c:	31 c0                	xor    eax,eax
c001ab5e:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001ab63:	0f 85 87 00 00 00    	jne    c001abf0 <Vm::x87Handler(regs*)+0xb12>
c001ab69:	50                   	push   eax
c001ab6a:	50                   	push   eax
c001ab6b:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001ab6e:	66 90                	xchg   ax,ax
c001ab70:	31 d2                	xor    edx,edx
c001ab72:	52                   	push   edx
c001ab73:	50                   	push   eax
c001ab74:	e8 47 f2 ff ff       	call   c0019dc0 <Vm::fpuLongToFloat(long long)>
c001ab79:	8d 76 00             	lea    esi,[esi+0x0]
c001ab7c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ab83:	89 c6                	mov    esi,eax
c001ab85:	89 d7                	mov    edi,edx
c001ab87:	e8 12 f4 ff ff       	call   c0019f9e <Vm::fpuGetReg(int)>
c001ab8c:	57                   	push   edi
c001ab8d:	56                   	push   esi
c001ab8e:	52                   	push   edx
c001ab8f:	50                   	push   eax
c001ab90:	e8 b8 f3 ff ff       	call   c0019f4d <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ab95:	8d 76 00             	lea    esi,[esi+0x0]
c001ab98:	83 c4 1c             	add    esp,0x1c
c001ab9b:	90                   	nop
c001ab9c:	52                   	push   edx
c001ab9d:	50                   	push   eax
c001ab9e:	6a 00                	push   0x0
c001aba0:	e8 3c f4 ff ff       	call   c0019fe1 <Vm::fpuSetReg(int, unsigned long long)>
c001aba5:	e9 7a f7 ff ff       	jmp    c001a324 <Vm::x87Handler(regs*)+0x246>
c001abaa:	66 90                	xchg   ax,ax
c001abac:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001abb0:	80 fa 05             	cmp    dl,0x5
c001abb3:	75 13                	jne    c001abc8 <Vm::x87Handler(regs*)+0xaea>
c001abb5:	55                   	push   ebp
c001abb6:	55                   	push   ebp
c001abb7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001abba:	ff 36                	push   DWORD PTR [esi]
c001abbc:	e8 c3 f1 ff ff       	call   c0019d84 <Vm::fpuULongToFloat(unsigned long long)>
c001abc1:	e9 52 f7 ff ff       	jmp    c001a318 <Vm::x87Handler(regs*)+0x23a>
c001abc6:	66 90                	xchg   ax,ax
c001abc8:	31 c0                	xor    eax,eax
c001abca:	80 fa 07             	cmp    dl,0x7
c001abcd:	75 21                	jne    c001abf0 <Vm::x87Handler(regs*)+0xb12>
c001abcf:	e8 b7 f4 ff ff       	call   c001a08b <Vm::fpuPop()>
c001abd4:	51                   	push   ecx
c001abd5:	51                   	push   ecx
c001abd6:	52                   	push   edx
c001abd7:	50                   	push   eax
c001abd8:	e8 48 f1 ff ff       	call   c0019d25 <Vm::fpuFloatToLong(unsigned long long)>
c001abdd:	8d 76 00             	lea    esi,[esi+0x0]
c001abe0:	83 c4 10             	add    esp,0x10
c001abe3:	89 06                	mov    DWORD PTR [esi],eax
c001abe5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001abe8:	e9 7b f7 ff ff       	jmp    c001a368 <Vm::x87Handler(regs*)+0x28a>
c001abed:	8d 76 00             	lea    esi,[esi+0x0]
c001abf0:	83 c4 1c             	add    esp,0x1c
c001abf3:	5b                   	pop    ebx
c001abf4:	5e                   	pop    esi
c001abf5:	5f                   	pop    edi
c001abf6:	5d                   	pop    ebp
c001abf7:	c3                   	ret    

c001abf8 <__static_initialization_and_destruction_0(int, int)>:
c001abf8:	83 ec 0c             	sub    esp,0xc
c001abfb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ac00:	75 1a                	jne    c001ac1c <__static_initialization_and_destruction_0(int, int)+0x24>
c001ac02:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ac0a:	75 10                	jne    c001ac1c <__static_initialization_and_destruction_0(int, int)+0x24>
c001ac0c:	83 ec 0c             	sub    esp,0xc
c001ac0f:	68 c0 94 02 c0       	push   0xc00294c0
c001ac14:	e8 1f 84 00 00       	call   c0023038 <Vm::_FPUState::_FPUState()>
c001ac19:	83 c4 10             	add    esp,0x10
c001ac1c:	90                   	nop
c001ac1d:	83 c4 0c             	add    esp,0xc
c001ac20:	c3                   	ret    
c001ac21:	8d 76 00             	lea    esi,[esi+0x0]

c001ac24 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001ac24:	83 ec 0c             	sub    esp,0xc
c001ac27:	83 ec 08             	sub    esp,0x8
c001ac2a:	68 ff ff 00 00       	push   0xffff
c001ac2f:	6a 01                	push   0x1
c001ac31:	e8 c2 ff ff ff       	call   c001abf8 <__static_initialization_and_destruction_0(int, int)>
c001ac36:	83 c4 10             	add    esp,0x10
c001ac39:	83 c4 0c             	add    esp,0xc
c001ac3c:	c3                   	ret    
c001ac3d:	66 90                	xchg   ax,ax
c001ac3f:	90                   	nop

c001ac40 <FAT::getName()>:
c001ac40:	b8 b0 62 02 c0       	mov    eax,0xc00262b0
c001ac45:	c3                   	ret    
c001ac46:	66 90                	xchg   ax,ax

c001ac48 <FAT::tell(void*, unsigned long long*)>:
c001ac48:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ac4d:	75 09                	jne    c001ac58 <FAT::tell(void*, unsigned long long*)+0x10>
c001ac4f:	b8 04 00 00 00       	mov    eax,0x4
c001ac54:	c3                   	ret    
c001ac55:	8d 76 00             	lea    esi,[esi+0x0]
c001ac58:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ac5d:	75 09                	jne    c001ac68 <FAT::tell(void*, unsigned long long*)+0x20>
c001ac5f:	b8 04 00 00 00       	mov    eax,0x4
c001ac64:	c3                   	ret    
c001ac65:	8d 76 00             	lea    esi,[esi+0x0]
c001ac68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac6c:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001ac6f:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001ac72:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ac76:	89 01                	mov    DWORD PTR [ecx],eax
c001ac78:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ac7b:	b8 00 00 00 00       	mov    eax,0x0
c001ac80:	c3                   	ret    
c001ac81:	90                   	nop
c001ac82:	66 90                	xchg   ax,ax

c001ac84 <FAT::stat(void*, unsigned long long*)>:
c001ac84:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ac89:	75 09                	jne    c001ac94 <FAT::stat(void*, unsigned long long*)+0x10>
c001ac8b:	b8 04 00 00 00       	mov    eax,0x4
c001ac90:	c3                   	ret    
c001ac91:	8d 76 00             	lea    esi,[esi+0x0]
c001ac94:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ac99:	75 09                	jne    c001aca4 <FAT::stat(void*, unsigned long long*)+0x20>
c001ac9b:	b8 04 00 00 00       	mov    eax,0x4
c001aca0:	c3                   	ret    
c001aca1:	8d 76 00             	lea    esi,[esi+0x0]
c001aca4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aca8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001acab:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001acae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001acb2:	89 01                	mov    DWORD PTR [ecx],eax
c001acb4:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001acb7:	b8 00 00 00 00       	mov    eax,0x0
c001acbc:	c3                   	ret    
c001acbd:	90                   	nop
c001acbe:	66 90                	xchg   ax,ax

c001acc0 <FAT::~FAT()>:
c001acc0:	83 ec 0c             	sub    esp,0xc
c001acc3:	ba fc 62 02 c0       	mov    edx,0xc00262fc
c001acc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001accc:	89 10                	mov    DWORD PTR [eax],edx
c001acce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd2:	83 ec 0c             	sub    esp,0xc
c001acd5:	50                   	push   eax
c001acd6:	e8 5b 23 ff ff       	call   c000d036 <Filesystem::~Filesystem()>
c001acdb:	83 c4 10             	add    esp,0x10
c001acde:	90                   	nop
c001acdf:	83 c4 0c             	add    esp,0xc
c001ace2:	c3                   	ret    
c001ace3:	90                   	nop

c001ace4 <FAT::~FAT()>:
c001ace4:	83 ec 0c             	sub    esp,0xc
c001ace7:	83 ec 0c             	sub    esp,0xc
c001acea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acee:	e8 cd ff ff ff       	call   c001acc0 <FAT::~FAT()>
c001acf3:	83 c4 10             	add    esp,0x10
c001acf6:	83 ec 08             	sub    esp,0x8
c001acf9:	6a 08                	push   0x8
c001acfb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001acff:	e8 16 1f ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001ad04:	83 c4 10             	add    esp,0x10
c001ad07:	83 c4 0c             	add    esp,0xc
c001ad0a:	c3                   	ret    
c001ad0b:	90                   	nop

c001ad0c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001ad0c:	83 ec 1c             	sub    esp,0x1c
c001ad0f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001ad16:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001ad1b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad1f:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001ad26:	83 f8 ff             	cmp    eax,0xffffffff
c001ad29:	75 35                	jne    c001ad60 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001ad2b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad2f:	88 c2                	mov    dl,al
c001ad31:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001ad36:	01 d0                	add    eax,edx
c001ad38:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ad3c:	8b 15 20 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029520
c001ad42:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad46:	89 14 85 40 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ac0],edx
c001ad4d:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001ad52:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ad56:	89 14 85 c0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a40],edx
c001ad5d:	eb 19                	jmp    c001ad78 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001ad5f:	90                   	nop
c001ad60:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001ad64:	88 c2                	mov    dl,al
c001ad66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ad6a:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001ad71:	01 d0                	add    eax,edx
c001ad73:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001ad77:	90                   	nop
c001ad78:	83 ec 04             	sub    esp,0x4
c001ad7b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ad7f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ad83:	8d 44 24 15          	lea    eax,[esp+0x15]
c001ad87:	50                   	push   eax
c001ad88:	e8 a5 be fe ff       	call   c0006c32 <f_getlabel>
c001ad8d:	83 c4 10             	add    esp,0x10
c001ad90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad94:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ad99:	75 09                	jne    c001ada4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001ad9b:	b8 00 00 00 00       	mov    eax,0x0
c001ada0:	eb 0a                	jmp    c001adac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001ada2:	66 90                	xchg   ax,ax
c001ada4:	b8 01 00 00 00       	mov    eax,0x1
c001ada9:	8d 76 00             	lea    esi,[esi+0x0]
c001adac:	83 c4 1c             	add    esp,0x1c
c001adaf:	c3                   	ret    

c001adb0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001adb0:	57                   	push   edi
c001adb1:	83 ec 58             	sub    esp,0x58
c001adb4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001adbc:	8d 54 24 10          	lea    edx,[esp+0x10]
c001adc0:	b9 0f 00 00 00       	mov    ecx,0xf
c001adc5:	b8 00 00 00 00       	mov    eax,0x0
c001adca:	fc                   	cld    
c001adcb:	89 d7                	mov    edi,edx
c001adcd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001adcf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001add3:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001adda:	83 f8 ff             	cmp    eax,0xffffffff
c001addd:	75 35                	jne    c001ae14 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001addf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ade3:	88 c2                	mov    dl,al
c001ade5:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001adea:	01 d0                	add    eax,edx
c001adec:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001adf0:	8b 15 20 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029520
c001adf6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001adfa:	89 14 85 40 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ac0],edx
c001ae01:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001ae06:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001ae0a:	89 14 85 c0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a40],edx
c001ae11:	eb 19                	jmp    c001ae2c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001ae13:	90                   	nop
c001ae14:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae18:	88 c2                	mov    dl,al
c001ae1a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001ae1e:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001ae25:	01 d0                	add    eax,edx
c001ae27:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ae2b:	90                   	nop
c001ae2c:	83 ec 08             	sub    esp,0x8
c001ae2f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001ae33:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae37:	50                   	push   eax
c001ae38:	e8 43 5a fe ff       	call   c0000880 <strcat>
c001ae3d:	83 c4 10             	add    esp,0x10
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ae47:	50                   	push   eax
c001ae48:	e8 d3 bf fe ff       	call   c0006e20 <f_setlabel>
c001ae4d:	83 c4 10             	add    esp,0x10
c001ae50:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ae54:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001ae59:	75 09                	jne    c001ae64 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001ae5b:	b8 00 00 00 00       	mov    eax,0x0
c001ae60:	eb 0a                	jmp    c001ae6c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001ae62:	66 90                	xchg   ax,ax
c001ae64:	b8 01 00 00 00       	mov    eax,0x1
c001ae69:	8d 76 00             	lea    esi,[esi+0x0]
c001ae6c:	83 c4 58             	add    esp,0x58
c001ae6f:	5f                   	pop    edi
c001ae70:	c3                   	ret    
c001ae71:	90                   	nop
c001ae72:	66 90                	xchg   ax,ax

c001ae74 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001ae74:	83 ec 2c             	sub    esp,0x2c
c001ae77:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001ae7f:	83 ec 08             	sub    esp,0x8
c001ae82:	68 d4 62 02 c0       	push   0xc00262d4
c001ae87:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ae8b:	e8 3c 59 fe ff       	call   c00007cc <strcmp>
c001ae90:	83 c4 10             	add    esp,0x10
c001ae93:	85 c0                	test   eax,eax
c001ae95:	0f 94 c0             	sete   al
c001ae98:	84 c0                	test   al,al
c001ae9a:	74 10                	je     c001aeac <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001ae9c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001aea4:	e9 b3 00 00 00       	jmp    c001af5c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aea9:	8d 76 00             	lea    esi,[esi+0x0]
c001aeac:	83 ec 08             	sub    esp,0x8
c001aeaf:	68 c6 62 02 c0       	push   0xc00262c6
c001aeb4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aeb8:	e8 0f 59 fe ff       	call   c00007cc <strcmp>
c001aebd:	83 c4 10             	add    esp,0x10
c001aec0:	85 c0                	test   eax,eax
c001aec2:	0f 94 c0             	sete   al
c001aec5:	84 c0                	test   al,al
c001aec7:	74 0f                	je     c001aed8 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001aec9:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001aed1:	e9 86 00 00 00       	jmp    c001af5c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aed6:	66 90                	xchg   ax,ax
c001aed8:	83 ec 08             	sub    esp,0x8
c001aedb:	68 cc 62 02 c0       	push   0xc00262cc
c001aee0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001aee4:	e8 e3 58 fe ff       	call   c00007cc <strcmp>
c001aee9:	83 c4 10             	add    esp,0x10
c001aeec:	85 c0                	test   eax,eax
c001aeee:	0f 94 c0             	sete   al
c001aef1:	84 c0                	test   al,al
c001aef3:	74 0b                	je     c001af00 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001aef5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001aefd:	eb 5d                	jmp    c001af5c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001aeff:	90                   	nop
c001af00:	83 ec 08             	sub    esp,0x8
c001af03:	68 ac 37 02 c0       	push   0xc00237ac
c001af08:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af0c:	e8 bb 58 fe ff       	call   c00007cc <strcmp>
c001af11:	83 c4 10             	add    esp,0x10
c001af14:	85 c0                	test   eax,eax
c001af16:	0f 94 c0             	sete   al
c001af19:	84 c0                	test   al,al
c001af1b:	74 0b                	je     c001af28 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001af1d:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001af25:	eb 35                	jmp    c001af5c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af27:	90                   	nop
c001af28:	83 ec 08             	sub    esp,0x8
c001af2b:	68 d2 62 02 c0       	push   0xc00262d2
c001af30:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001af34:	e8 93 58 fe ff       	call   c00007cc <strcmp>
c001af39:	83 c4 10             	add    esp,0x10
c001af3c:	85 c0                	test   eax,eax
c001af3e:	0f 94 c0             	sete   al
c001af41:	84 c0                	test   al,al
c001af43:	74 0b                	je     c001af50 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001af45:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001af4d:	eb 0d                	jmp    c001af5c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001af4f:	90                   	nop
c001af50:	b8 08 00 00 00       	mov    eax,0x8
c001af55:	e9 ea 00 00 00       	jmp    c001b044 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001af5a:	66 90                	xchg   ax,ax
c001af5c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001af63:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001af68:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af6c:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001af73:	83 f8 ff             	cmp    eax,0xffffffff
c001af76:	75 34                	jne    c001afac <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001af78:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001af7c:	88 c2                	mov    dl,al
c001af7e:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001af83:	01 d0                	add    eax,edx
c001af85:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001af89:	8b 15 20 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029520
c001af8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001af93:	89 14 85 40 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ac0],edx
c001af9a:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001af9f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001afa3:	89 14 85 c0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a40],edx
c001afaa:	eb 18                	jmp    c001afc4 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001afac:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001afb0:	88 c2                	mov    dl,al
c001afb2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afb6:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001afbd:	01 d0                	add    eax,edx
c001afbf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001afc3:	90                   	nop
c001afc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afc8:	88 04 24             	mov    BYTE PTR [esp],al
c001afcb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001afcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afd3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001afdb:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001afe0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001afe8:	83 ec 0c             	sub    esp,0xc
c001afeb:	68 00 20 00 00       	push   0x2000
c001aff0:	e8 1a ea fe ff       	call   c0009a0f <malloc>
c001aff5:	83 c4 10             	add    esp,0x10
c001aff8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001affc:	68 00 20 00 00       	push   0x2000
c001b001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b005:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b009:	50                   	push   eax
c001b00a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b00e:	50                   	push   eax
c001b00f:	e8 8d c4 fe ff       	call   c00074a1 <f_mkfs>
c001b014:	83 c4 10             	add    esp,0x10
c001b017:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b01b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b020:	75 0a                	jne    c001b02c <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001b022:	b8 00 00 00 00       	mov    eax,0x0
c001b027:	eb 1b                	jmp    c001b044 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b029:	8d 76 00             	lea    esi,[esi+0x0]
c001b02c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b031:	75 09                	jne    c001b03c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b033:	b8 09 00 00 00       	mov    eax,0x9
c001b038:	eb 0a                	jmp    c001b044 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001b03a:	66 90                	xchg   ax,ax
c001b03c:	b8 01 00 00 00       	mov    eax,0x1
c001b041:	8d 76 00             	lea    esi,[esi+0x0]
c001b044:	83 c4 2c             	add    esp,0x2c
c001b047:	c3                   	ret    

c001b048 <FAT::tryMount(LogicalDisk*, int)>:
c001b048:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001b04e:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b053:	83 f8 14             	cmp    eax,0x14
c001b056:	75 18                	jne    c001b070 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b058:	83 ec 0c             	sub    esp,0xc
c001b05b:	68 d8 62 02 c0       	push   0xc00262d8
c001b060:	e8 3e 99 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001b065:	83 c4 10             	add    esp,0x10
c001b068:	b0 00                	mov    al,0x0
c001b06a:	e9 e9 01 00 00       	jmp    c001b258 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b06f:	90                   	nop
c001b070:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001b077:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b07d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b083:	3d 00 02 00 00       	cmp    eax,0x200
c001b088:	74 0a                	je     c001b094 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b08a:	b0 00                	mov    al,0x0
c001b08c:	e9 c7 01 00 00       	jmp    c001b258 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b091:	8d 76 00             	lea    esi,[esi+0x0]
c001b094:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001b09c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b0a3:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001b0aa:	83 f8 ff             	cmp    eax,0xffffffff
c001b0ad:	74 09                	je     c001b0b8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b0af:	b0 01                	mov    al,0x1
c001b0b1:	e9 a2 01 00 00       	jmp    c001b258 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b0b6:	66 90                	xchg   ax,ax
c001b0b8:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001b0c2:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001b0ca:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001b0d1:	88 c2                	mov    dl,al
c001b0d3:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b0d8:	01 d0                	add    eax,edx
c001b0da:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001b0e1:	8b 15 20 95 02 c0    	mov    edx,DWORD PTR ds:0xc0029520
c001b0e7:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001b0ee:	89 14 85 40 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ac0],edx
c001b0f5:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b0fa:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001b101:	89 14 85 c0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a40],edx
c001b108:	83 ec 0c             	sub    esp,0xc
c001b10b:	68 54 02 00 00       	push   0x254
c001b110:	e8 fa e8 fe ff       	call   c0009a0f <malloc>
c001b115:	83 c4 10             	add    esp,0x10
c001b118:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001b11f:	83 ec 04             	sub    esp,0x4
c001b122:	6a 00                	push   0x0
c001b124:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b12b:	50                   	push   eax
c001b12c:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b133:	e8 f1 9c fe ff       	call   c0004e29 <f_mount>
c001b138:	83 c4 10             	add    esp,0x10
c001b13b:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b142:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001b14a:	74 1c                	je     c001b168 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b14c:	83 ec 0c             	sub    esp,0xc
c001b14f:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b156:	e8 d4 e8 fe ff       	call   c0009a2f <rfree>
c001b15b:	83 c4 10             	add    esp,0x10
c001b15e:	b0 00                	mov    al,0x0
c001b160:	e9 f3 00 00 00       	jmp    c001b258 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b165:	8d 76 00             	lea    esi,[esi+0x0]
c001b168:	83 ec 04             	sub    esp,0x4
c001b16b:	68 00 01 00 00       	push   0x100
c001b170:	6a 00                	push   0x0
c001b172:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b179:	50                   	push   eax
c001b17a:	e8 05 55 fe ff       	call   c0000684 <memset>
c001b17f:	83 c4 10             	add    esp,0x10
c001b182:	83 ec 08             	sub    esp,0x8
c001b185:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b18c:	50                   	push   eax
c001b18d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b194:	50                   	push   eax
c001b195:	e8 e6 56 fe ff       	call   c0000880 <strcat>
c001b19a:	83 c4 10             	add    esp,0x10
c001b19d:	83 ec 08             	sub    esp,0x8
c001b1a0:	68 e6 62 02 c0       	push   0xc00262e6
c001b1a5:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001b1ac:	50                   	push   eax
c001b1ad:	e8 ce 56 fe ff       	call   c0000880 <strcat>
c001b1b2:	83 c4 10             	add    esp,0x10
c001b1b5:	83 ec 04             	sub    esp,0x4
c001b1b8:	6a 01                	push   0x1
c001b1ba:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001b1c1:	50                   	push   eax
c001b1c2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b1c6:	50                   	push   eax
c001b1c7:	e8 bf 9c fe ff       	call   c0004e8b <f_open>
c001b1cc:	83 c4 10             	add    esp,0x10
c001b1cf:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001b1d6:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b1dd:	85 c0                	test   eax,eax
c001b1df:	74 0b                	je     c001b1ec <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b1e1:	78 31                	js     c001b214 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b1e3:	83 e8 04             	sub    eax,0x4
c001b1e6:	83 f8 01             	cmp    eax,0x1
c001b1e9:	77 29                	ja     c001b214 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b1eb:	90                   	nop
c001b1ec:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001b1f4:	83 ec 0c             	sub    esp,0xc
c001b1f7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b1fb:	50                   	push   eax
c001b1fc:	e8 dc a7 fe ff       	call   c00059dd <f_close>
c001b201:	83 c4 10             	add    esp,0x10
c001b204:	90                   	nop
c001b205:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001b20d:	74 41                	je     c001b250 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001b20f:	eb 33                	jmp    c001b244 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b211:	8d 76 00             	lea    esi,[esi+0x0]
c001b214:	83 ec 0c             	sub    esp,0xc
c001b217:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001b21e:	e8 0c e8 fe ff       	call   c0009a2f <rfree>
c001b223:	83 c4 10             	add    esp,0x10
c001b226:	83 ec 04             	sub    esp,0x4
c001b229:	6a 00                	push   0x0
c001b22b:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001b232:	50                   	push   eax
c001b233:	6a 00                	push   0x0
c001b235:	e8 ef 9b fe ff       	call   c0004e29 <f_mount>
c001b23a:	83 c4 10             	add    esp,0x10
c001b23d:	b0 00                	mov    al,0x0
c001b23f:	eb 17                	jmp    c001b258 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001b241:	8d 76 00             	lea    esi,[esi+0x0]
c001b244:	a1 20 95 02 c0       	mov    eax,ds:0xc0029520
c001b249:	40                   	inc    eax
c001b24a:	a3 20 95 02 c0       	mov    ds:0xc0029520,eax
c001b24f:	90                   	nop
c001b250:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001b257:	90                   	nop
c001b258:	81 c4 6c 03 00 00    	add    esp,0x36c
c001b25e:	c3                   	ret    
c001b25f:	90                   	nop

c001b260 <FAT::allocateSwapfile(char const*, int)>:
c001b260:	55                   	push   ebp
c001b261:	57                   	push   edi
c001b262:	56                   	push   esi
c001b263:	53                   	push   ebx
c001b264:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b26a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b275:	83 ec 0c             	sub    esp,0xc
c001b278:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b27f:	e8 8b e7 fe ff       	call   c0009a0f <malloc>
c001b284:	83 c4 10             	add    esp,0x10
c001b287:	89 c7                	mov    edi,eax
c001b289:	a1 50 94 02 c0       	mov    eax,ds:0xc0029450
c001b28e:	83 ec 04             	sub    esp,0x4
c001b291:	50                   	push   eax
c001b292:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b299:	57                   	push   edi
c001b29a:	e8 c7 1f ff ff       	call   c000d266 <File::File(char const*, Process*)>
c001b29f:	83 c4 10             	add    esp,0x10
c001b2a2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b2a9:	83 ec 04             	sub    esp,0x4
c001b2ac:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b2b0:	50                   	push   eax
c001b2b1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b2b5:	50                   	push   eax
c001b2b6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b2bd:	e8 2a 23 ff ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c001b2c2:	83 c4 10             	add    esp,0x10
c001b2c5:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b2cc:	c1 e0 14             	shl    eax,0x14
c001b2cf:	89 c7                	mov    edi,eax
c001b2d1:	89 c5                	mov    ebp,eax
c001b2d3:	c1 fd 1f             	sar    ebp,0x1f
c001b2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b2de:	89 f9                	mov    ecx,edi
c001b2e0:	31 c1                	xor    ecx,eax
c001b2e2:	89 cb                	mov    ebx,ecx
c001b2e4:	89 e9                	mov    ecx,ebp
c001b2e6:	31 d1                	xor    ecx,edx
c001b2e8:	89 ce                	mov    esi,ecx
c001b2ea:	89 f0                	mov    eax,esi
c001b2ec:	09 d8                	or     eax,ebx
c001b2ee:	0f 84 98 00 00 00    	je     c001b38c <FAT::allocateSwapfile(char const*, int)+0x12c>
c001b2f4:	83 ec 0c             	sub    esp,0xc
c001b2f7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b2fe:	e8 b5 21 ff ff       	call   c000d4b8 <File::unlink()>
c001b303:	83 c4 10             	add    esp,0x10
c001b306:	83 ec 08             	sub    esp,0x8
c001b309:	6a 12                	push   0x12
c001b30b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b312:	e8 29 20 ff ff       	call   c000d340 <File::open(FileOpenMode)>
c001b317:	83 c4 10             	add    esp,0x10
c001b31a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b321:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b327:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b32e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b335:	c1 e0 14             	shl    eax,0x14
c001b338:	99                   	cdq    
c001b339:	6a 01                	push   0x1
c001b33b:	52                   	push   edx
c001b33c:	50                   	push   eax
c001b33d:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b344:	e8 44 bd fe ff       	call   c000708d <f_expand>
c001b349:	83 c4 10             	add    esp,0x10
c001b34c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b353:	8b 00                	mov    eax,DWORD PTR [eax]
c001b355:	83 c0 10             	add    eax,0x10
c001b358:	8b 00                	mov    eax,DWORD PTR [eax]
c001b35a:	83 ec 0c             	sub    esp,0xc
c001b35d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b361:	52                   	push   edx
c001b362:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b366:	52                   	push   edx
c001b367:	6a 00                	push   0x0
c001b369:	68 00 04 00 00       	push   0x400
c001b36e:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b375:	ff d0                	call   eax
c001b377:	83 c4 20             	add    esp,0x20
c001b37a:	83 ec 0c             	sub    esp,0xc
c001b37d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b384:	e8 15 20 ff ff       	call   c000d39e <File::close()>
c001b389:	83 c4 10             	add    esp,0x10
c001b38c:	83 ec 08             	sub    esp,0x8
c001b38f:	6a 01                	push   0x1
c001b391:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b398:	e8 a3 1f ff ff       	call   c000d340 <File::open(FileOpenMode)>
c001b39d:	83 c4 10             	add    esp,0x10
c001b3a0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b3a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3a9:	83 c0 0c             	add    eax,0xc
c001b3ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001b3ae:	83 ec 0c             	sub    esp,0xc
c001b3b1:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b3b5:	52                   	push   edx
c001b3b6:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b3ba:	52                   	push   edx
c001b3bb:	6a 00                	push   0x0
c001b3bd:	6a 04                	push   0x4
c001b3bf:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b3c6:	ff d0                	call   eax
c001b3c8:	83 c4 20             	add    esp,0x20
c001b3cb:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b3d2:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b3d8:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b3df:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b3e6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001b3e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001b3ec:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b3f3:	83 ec 0c             	sub    esp,0xc
c001b3f6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b3fd:	e8 9c 1f ff ff       	call   c000d39e <File::close()>
c001b402:	83 c4 10             	add    esp,0x10
c001b405:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b40c:	ba 00 00 00 00       	mov    edx,0x0
c001b411:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b417:	5b                   	pop    ebx
c001b418:	5e                   	pop    esi
c001b419:	5f                   	pop    edi
c001b41a:	5d                   	pop    ebp
c001b41b:	c3                   	ret    

c001b41c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b41c:	57                   	push   edi
c001b41d:	56                   	push   esi
c001b41e:	53                   	push   ebx
c001b41f:	81 ec 50 02 00 00    	sub    esp,0x250
c001b425:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b42d:	74 0d                	je     c001b43c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b42f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b437:	75 0f                	jne    c001b448 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b439:	8d 76 00             	lea    esi,[esi+0x0]
c001b43c:	b8 04 00 00 00       	mov    eax,0x4
c001b441:	e9 36 01 00 00       	jmp    c001b57c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b446:	66 90                	xchg   ax,ax
c001b448:	83 ec 08             	sub    esp,0x8
c001b44b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b452:	50                   	push   eax
c001b453:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b45a:	e8 88 ab fe ff       	call   c0005fe7 <f_readdir>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b469:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001b470:	83 ec 0c             	sub    esp,0xc
c001b473:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b47a:	83 c0 1a             	add    eax,0x1a
c001b47d:	50                   	push   eax
c001b47e:	e8 1d 52 fe ff       	call   c00006a0 <strlen>
c001b483:	83 c4 10             	add    esp,0x10
c001b486:	ba 00 00 00 00       	mov    edx,0x0
c001b48b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b48f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b493:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b49a:	0f b6 c0             	movzx  eax,al
c001b49d:	83 e0 10             	and    eax,0x10
c001b4a0:	74 0a                	je     c001b4ac <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b4a2:	b8 02 00 00 00       	mov    eax,0x2
c001b4a7:	eb 0b                	jmp    c001b4b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b4a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b4ac:	b8 01 00 00 00       	mov    eax,0x1
c001b4b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b4b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b4b8:	83 ec 08             	sub    esp,0x8
c001b4bb:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001b4c2:	83 c0 1a             	add    eax,0x1a
c001b4c5:	50                   	push   eax
c001b4c6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b4ca:	83 c0 10             	add    eax,0x10
c001b4cd:	50                   	push   eax
c001b4ce:	e8 6d 52 fe ff       	call   c0000740 <strcpy>
c001b4d3:	83 c4 10             	add    esp,0x10
c001b4d6:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b4dd:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b4e4:	8d 44 24 04          	lea    eax,[esp+0x4]
c001b4e8:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b4ef:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b4f6:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b4fd:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b504:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b50b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b512:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b519:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b520:	89 c6                	mov    esi,eax
c001b522:	89 d7                	mov    edi,edx
c001b524:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b526:	89 c8                	mov    eax,ecx
c001b528:	89 fa                	mov    edx,edi
c001b52a:	89 f3                	mov    ebx,esi
c001b52c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b533:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b53a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b541:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b548:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b54e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b555:	84 c0                	test   al,al
c001b557:	75 07                	jne    c001b560 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001b559:	b8 07 00 00 00       	mov    eax,0x7
c001b55e:	eb 1c                	jmp    c001b57c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b560:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b567:	85 c0                	test   eax,eax
c001b569:	75 09                	jne    c001b574 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001b56b:	b8 00 00 00 00       	mov    eax,0x0
c001b570:	eb 0a                	jmp    c001b57c <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001b572:	66 90                	xchg   ax,ax
c001b574:	b8 01 00 00 00       	mov    eax,0x1
c001b579:	8d 76 00             	lea    esi,[esi+0x0]
c001b57c:	81 c4 50 02 00 00    	add    esp,0x250
c001b582:	5b                   	pop    ebx
c001b583:	5e                   	pop    esi
c001b584:	5f                   	pop    edi
c001b585:	c3                   	ret    
c001b586:	66 90                	xchg   ax,ax

c001b588 <FAT::read(void*, unsigned long, void*, int*)>:
c001b588:	83 ec 1c             	sub    esp,0x1c
c001b58b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b590:	74 0a                	je     c001b59c <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b592:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b597:	75 0b                	jne    c001b5a4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b599:	8d 76 00             	lea    esi,[esi+0x0]
c001b59c:	b8 04 00 00 00       	mov    eax,0x4
c001b5a1:	eb 41                	jmp    c001b5e4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b5a3:	90                   	nop
c001b5a4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b5a8:	50                   	push   eax
c001b5a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b5ad:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b5b1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b5b5:	e8 0d 9d fe ff       	call   c00052c7 <f_read>
c001b5ba:	83 c4 10             	add    esp,0x10
c001b5bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b5c5:	89 c2                	mov    edx,eax
c001b5c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b5cb:	89 10                	mov    DWORD PTR [eax],edx
c001b5cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5d1:	85 c0                	test   eax,eax
c001b5d3:	75 07                	jne    c001b5dc <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b5d5:	b8 00 00 00 00       	mov    eax,0x0
c001b5da:	eb 08                	jmp    c001b5e4 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b5dc:	b8 01 00 00 00       	mov    eax,0x1
c001b5e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5e4:	83 c4 1c             	add    esp,0x1c
c001b5e7:	c3                   	ret    

c001b5e8 <FAT::write(void*, unsigned long, void*, int*)>:
c001b5e8:	83 ec 1c             	sub    esp,0x1c
c001b5eb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b5f0:	74 0a                	je     c001b5fc <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b5f2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b5f7:	75 0b                	jne    c001b604 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b5f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b5fc:	b8 04 00 00 00       	mov    eax,0x4
c001b601:	eb 41                	jmp    c001b644 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b603:	90                   	nop
c001b604:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b608:	50                   	push   eax
c001b609:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b60d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b611:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b615:	e8 2d 9f fe ff       	call   c0005547 <f_write>
c001b61a:	83 c4 10             	add    esp,0x10
c001b61d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b625:	89 c2                	mov    edx,eax
c001b627:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b62b:	89 10                	mov    DWORD PTR [eax],edx
c001b62d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b631:	85 c0                	test   eax,eax
c001b633:	75 07                	jne    c001b63c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b635:	b8 00 00 00 00       	mov    eax,0x0
c001b63a:	eb 08                	jmp    c001b644 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b63c:	b8 01 00 00 00       	mov    eax,0x1
c001b641:	8d 76 00             	lea    esi,[esi+0x0]
c001b644:	83 c4 1c             	add    esp,0x1c
c001b647:	c3                   	ret    

c001b648 <FAT::close(void*)>:
c001b648:	83 ec 1c             	sub    esp,0x1c
c001b64b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b650:	75 0a                	jne    c001b65c <FAT::close(void*)+0x14>
c001b652:	b8 04 00 00 00       	mov    eax,0x4
c001b657:	eb 3f                	jmp    c001b698 <FAT::close(void*)+0x50>
c001b659:	8d 76 00             	lea    esi,[esi+0x0]
c001b65c:	83 ec 0c             	sub    esp,0xc
c001b65f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b663:	e8 75 a3 fe ff       	call   c00059dd <f_close>
c001b668:	83 c4 10             	add    esp,0x10
c001b66b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b66f:	83 ec 0c             	sub    esp,0xc
c001b672:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b676:	e8 a4 e3 fe ff       	call   c0009a1f <free>
c001b67b:	83 c4 10             	add    esp,0x10
c001b67e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b682:	85 c0                	test   eax,eax
c001b684:	75 0a                	jne    c001b690 <FAT::close(void*)+0x48>
c001b686:	b8 00 00 00 00       	mov    eax,0x0
c001b68b:	eb 0b                	jmp    c001b698 <FAT::close(void*)+0x50>
c001b68d:	8d 76 00             	lea    esi,[esi+0x0]
c001b690:	b8 01 00 00 00       	mov    eax,0x1
c001b695:	8d 76 00             	lea    esi,[esi+0x0]
c001b698:	83 c4 1c             	add    esp,0x1c
c001b69b:	c3                   	ret    

c001b69c <FAT::closeDir(void*)>:
c001b69c:	83 ec 1c             	sub    esp,0x1c
c001b69f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b6a4:	75 0a                	jne    c001b6b0 <FAT::closeDir(void*)+0x14>
c001b6a6:	b8 04 00 00 00       	mov    eax,0x4
c001b6ab:	eb 3f                	jmp    c001b6ec <FAT::closeDir(void*)+0x50>
c001b6ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b6b0:	83 ec 0c             	sub    esp,0xc
c001b6b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6b7:	e8 09 a9 fe ff       	call   c0005fc5 <f_closedir>
c001b6bc:	83 c4 10             	add    esp,0x10
c001b6bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6c3:	83 ec 0c             	sub    esp,0xc
c001b6c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b6ca:	e8 50 e3 fe ff       	call   c0009a1f <free>
c001b6cf:	83 c4 10             	add    esp,0x10
c001b6d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b6d6:	85 c0                	test   eax,eax
c001b6d8:	75 0a                	jne    c001b6e4 <FAT::closeDir(void*)+0x48>
c001b6da:	b8 00 00 00 00       	mov    eax,0x0
c001b6df:	eb 0b                	jmp    c001b6ec <FAT::closeDir(void*)+0x50>
c001b6e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6e4:	b8 01 00 00 00       	mov    eax,0x1
c001b6e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6ec:	83 c4 1c             	add    esp,0x1c
c001b6ef:	c3                   	ret    

c001b6f0 <FAT::seek(void*, unsigned long long)>:
c001b6f0:	83 ec 2c             	sub    esp,0x2c
c001b6f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b6f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b6fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b6ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b703:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b708:	75 0a                	jne    c001b714 <FAT::seek(void*, unsigned long long)+0x24>
c001b70a:	b8 04 00 00 00       	mov    eax,0x4
c001b70f:	eb 37                	jmp    c001b748 <FAT::seek(void*, unsigned long long)+0x58>
c001b711:	8d 76 00             	lea    esi,[esi+0x0]
c001b714:	83 ec 04             	sub    esp,0x4
c001b717:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b71b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b71f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b723:	e8 e4 a2 fe ff       	call   c0005a0c <f_lseek>
c001b728:	83 c4 10             	add    esp,0x10
c001b72b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b72f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b733:	85 c0                	test   eax,eax
c001b735:	75 09                	jne    c001b740 <FAT::seek(void*, unsigned long long)+0x50>
c001b737:	b8 00 00 00 00       	mov    eax,0x0
c001b73c:	eb 0a                	jmp    c001b748 <FAT::seek(void*, unsigned long long)+0x58>
c001b73e:	66 90                	xchg   ax,ax
c001b740:	b8 01 00 00 00       	mov    eax,0x1
c001b745:	8d 76 00             	lea    esi,[esi+0x0]
c001b748:	83 c4 2c             	add    esp,0x2c
c001b74b:	c3                   	ret    

c001b74c <fatWrapperReadDisk>:
c001b74c:	83 ec 1c             	sub    esp,0x1c
c001b74f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b753:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b757:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b75b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b75e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b762:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b766:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b76b:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c001b772:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b776:	83 ec 0c             	sub    esp,0xc
c001b779:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b77d:	52                   	push   edx
c001b77e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b782:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b786:	50                   	push   eax
c001b787:	e8 98 4d ff ff       	call   c0010524 <LogicalDisk::read(unsigned long long, int, void*)>
c001b78c:	83 c4 20             	add    esp,0x20
c001b78f:	83 c4 1c             	add    esp,0x1c
c001b792:	c3                   	ret    
c001b793:	90                   	nop

c001b794 <fatWrapperWriteDisk>:
c001b794:	83 ec 1c             	sub    esp,0x1c
c001b797:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b79b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b79f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b7a3:	89 04 24             	mov    DWORD PTR [esp],eax
c001b7a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b7aa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b7b3:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c001b7ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b7be:	83 ec 0c             	sub    esp,0xc
c001b7c1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b7c5:	52                   	push   edx
c001b7c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7ce:	50                   	push   eax
c001b7cf:	e8 bc 4d ff ff       	call   c0010590 <LogicalDisk::write(unsigned long long, int, void*)>
c001b7d4:	83 c4 20             	add    esp,0x20
c001b7d7:	83 c4 1c             	add    esp,0x1c
c001b7da:	c3                   	ret    
c001b7db:	90                   	nop

c001b7dc <fatWrapperIoctl>:
c001b7dc:	53                   	push   ebx
c001b7dd:	83 ec 28             	sub    esp,0x28
c001b7e0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b7e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b7e8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b7ec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b7f0:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b7f5:	75 31                	jne    c001b828 <fatWrapperIoctl+0x4c>
c001b7f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b7fb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b7ff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b804:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c001b80b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b811:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b817:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b81b:	66 89 02             	mov    WORD PTR [edx],ax
c001b81e:	b8 00 00 00 00       	mov    eax,0x0
c001b823:	e9 bc 00 00 00       	jmp    c001b8e4 <fatWrapperIoctl+0x108>
c001b828:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b82d:	75 6d                	jne    c001b89c <fatWrapperIoctl+0xc0>
c001b82f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b833:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b837:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b83c:	8b 04 85 c0 84 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7b40]
c001b843:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b849:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b84f:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b855:	89 c8                	mov    eax,ecx
c001b857:	89 da                	mov    edx,ebx
c001b859:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b85d:	c1 e0 0a             	shl    eax,0xa
c001b860:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b865:	8b 0c 8d c0 84 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7b40]
c001b86c:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b872:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b878:	89 cb                	mov    ebx,ecx
c001b87a:	c1 fb 1f             	sar    ebx,0x1f
c001b87d:	53                   	push   ebx
c001b87e:	51                   	push   ecx
c001b87f:	52                   	push   edx
c001b880:	50                   	push   eax
c001b881:	e8 0e 6e 00 00       	call   c0022694 <__udivdi3>
c001b886:	83 c4 10             	add    esp,0x10
c001b889:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b88d:	89 01                	mov    DWORD PTR [ecx],eax
c001b88f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b892:	b8 00 00 00 00       	mov    eax,0x0
c001b897:	eb 4b                	jmp    c001b8e4 <fatWrapperIoctl+0x108>
c001b899:	8d 76 00             	lea    esi,[esi+0x0]
c001b89c:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b8a1:	75 09                	jne    c001b8ac <fatWrapperIoctl+0xd0>
c001b8a3:	b8 00 00 00 00       	mov    eax,0x0
c001b8a8:	eb 3a                	jmp    c001b8e4 <fatWrapperIoctl+0x108>
c001b8aa:	66 90                	xchg   ax,ax
c001b8ac:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b8b1:	75 19                	jne    c001b8cc <fatWrapperIoctl+0xf0>
c001b8b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b8bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b8bf:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b8c5:	b8 00 00 00 00       	mov    eax,0x0
c001b8ca:	eb 18                	jmp    c001b8e4 <fatWrapperIoctl+0x108>
c001b8cc:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b8d1:	75 09                	jne    c001b8dc <fatWrapperIoctl+0x100>
c001b8d3:	b8 00 00 00 00       	mov    eax,0x0
c001b8d8:	eb 0a                	jmp    c001b8e4 <fatWrapperIoctl+0x108>
c001b8da:	66 90                	xchg   ax,ax
c001b8dc:	b8 04 00 00 00       	mov    eax,0x4
c001b8e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b8e4:	83 c4 28             	add    esp,0x28
c001b8e7:	5b                   	pop    ebx
c001b8e8:	c3                   	ret    
c001b8e9:	90                   	nop
c001b8ea:	66 90                	xchg   ax,ax

c001b8ec <FAT::FAT()>:
c001b8ec:	83 ec 1c             	sub    esp,0x1c
c001b8ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8f3:	83 ec 0c             	sub    esp,0xc
c001b8f6:	50                   	push   eax
c001b8f7:	e8 16 17 ff ff       	call   c000d012 <Filesystem::Filesystem()>
c001b8fc:	83 c4 10             	add    esp,0x10
c001b8ff:	ba fc 62 02 c0       	mov    edx,0xc00262fc
c001b904:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b908:	89 10                	mov    DWORD PTR [eax],edx
c001b90a:	c7 05 20 95 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029520,0x0
c001b914:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b91c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b921:	7f 15                	jg     c001b938 <FAT::FAT()+0x4c>
c001b923:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b927:	c7 04 85 40 95 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6ac0],0xffffffff
c001b932:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b936:	eb e4                	jmp    c001b91c <FAT::FAT()+0x30>
c001b938:	90                   	nop
c001b939:	83 c4 1c             	add    esp,0x1c
c001b93c:	c3                   	ret    
c001b93d:	90                   	nop
c001b93e:	66 90                	xchg   ax,ax

c001b940 <FAT::fixFilepath(char*)>:
c001b940:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b944:	8a 00                	mov    al,BYTE PTR [eax]
c001b946:	3c 40                	cmp    al,0x40
c001b948:	7e 2e                	jle    c001b978 <FAT::fixFilepath(char*)+0x38>
c001b94a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b94e:	8a 00                	mov    al,BYTE PTR [eax]
c001b950:	83 e8 41             	sub    eax,0x41
c001b953:	88 c2                	mov    dl,al
c001b955:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b959:	88 10                	mov    BYTE PTR [eax],dl
c001b95b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b95f:	8a 00                	mov    al,BYTE PTR [eax]
c001b961:	0f be c0             	movsx  eax,al
c001b964:	8b 04 85 40 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ac0]
c001b96b:	83 c0 30             	add    eax,0x30
c001b96e:	88 c2                	mov    dl,al
c001b970:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b974:	88 10                	mov    BYTE PTR [eax],dl
c001b976:	66 90                	xchg   ax,ax
c001b978:	90                   	nop
c001b979:	c3                   	ret    
c001b97a:	66 90                	xchg   ax,ax

c001b97c <FAT::open(char const*, void**, FileOpenMode)>:
c001b97c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b982:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b98a:	74 0c                	je     c001b998 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b98c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b994:	75 0e                	jne    c001b9a4 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b996:	66 90                	xchg   ax,ax
c001b998:	b8 04 00 00 00       	mov    eax,0x4
c001b99d:	e9 06 01 00 00       	jmp    c001baa8 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b9a2:	66 90                	xchg   ax,ax
c001b9a4:	83 ec 08             	sub    esp,0x8
c001b9a7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b9ae:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9b2:	50                   	push   eax
c001b9b3:	e8 88 4d fe ff       	call   c0000740 <strcpy>
c001b9b8:	83 c4 10             	add    esp,0x10
c001b9bb:	83 ec 08             	sub    esp,0x8
c001b9be:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b9c2:	50                   	push   eax
c001b9c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b9ca:	e8 71 ff ff ff       	call   c001b940 <FAT::fixFilepath(char*)>
c001b9cf:	83 c4 10             	add    esp,0x10
c001b9d2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b9da:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b9e1:	83 e0 01             	and    eax,0x1
c001b9e4:	74 0a                	je     c001b9f0 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b9e6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b9ee:	66 90                	xchg   ax,ax
c001b9f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b9f7:	83 e0 04             	and    eax,0x4
c001b9fa:	74 10                	je     c001ba0c <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b9fc:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001ba04:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ba0c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ba13:	83 e0 02             	and    eax,0x2
c001ba16:	74 08                	je     c001ba20 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001ba18:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001ba20:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ba27:	83 e0 08             	and    eax,0x8
c001ba2a:	74 08                	je     c001ba34 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001ba2c:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001ba34:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ba3b:	83 e0 10             	and    eax,0x10
c001ba3e:	74 08                	je     c001ba48 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001ba40:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001ba48:	83 ec 0c             	sub    esp,0xc
c001ba4b:	68 50 02 00 00       	push   0x250
c001ba50:	e8 ba df fe ff       	call   c0009a0f <malloc>
c001ba55:	83 c4 10             	add    esp,0x10
c001ba58:	89 c2                	mov    edx,eax
c001ba5a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ba61:	89 10                	mov    DWORD PTR [eax],edx
c001ba63:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001ba6b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ba72:	8b 00                	mov    eax,DWORD PTR [eax]
c001ba74:	83 ec 04             	sub    esp,0x4
c001ba77:	52                   	push   edx
c001ba78:	8d 54 24 10          	lea    edx,[esp+0x10]
c001ba7c:	52                   	push   edx
c001ba7d:	50                   	push   eax
c001ba7e:	e8 08 94 fe ff       	call   c0004e8b <f_open>
c001ba83:	83 c4 10             	add    esp,0x10
c001ba86:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001ba8d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ba95:	74 09                	je     c001baa0 <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001ba97:	b8 01 00 00 00       	mov    eax,0x1
c001ba9c:	eb 0a                	jmp    c001baa8 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001ba9e:	66 90                	xchg   ax,ax
c001baa0:	b8 00 00 00 00       	mov    eax,0x0
c001baa5:	8d 76 00             	lea    esi,[esi+0x0]
c001baa8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001baae:	c3                   	ret    
c001baaf:	90                   	nop

c001bab0 <FAT::openDir(char const*, void**)>:
c001bab0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bab6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001babe:	74 0c                	je     c001bacc <FAT::openDir(char const*, void**)+0x1c>
c001bac0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bac8:	75 0e                	jne    c001bad8 <FAT::openDir(char const*, void**)+0x28>
c001baca:	66 90                	xchg   ax,ax
c001bacc:	b8 04 00 00 00       	mov    eax,0x4
c001bad1:	e9 82 00 00 00       	jmp    c001bb58 <FAT::openDir(char const*, void**)+0xa8>
c001bad6:	66 90                	xchg   ax,ax
c001bad8:	83 ec 08             	sub    esp,0x8
c001badb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bae2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bae6:	50                   	push   eax
c001bae7:	e8 54 4c fe ff       	call   c0000740 <strcpy>
c001baec:	83 c4 10             	add    esp,0x10
c001baef:	83 ec 08             	sub    esp,0x8
c001baf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001baf6:	50                   	push   eax
c001baf7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bafe:	e8 3d fe ff ff       	call   c001b940 <FAT::fixFilepath(char*)>
c001bb03:	83 c4 10             	add    esp,0x10
c001bb06:	83 ec 0c             	sub    esp,0xc
c001bb09:	6a 4c                	push   0x4c
c001bb0b:	e8 ff de fe ff       	call   c0009a0f <malloc>
c001bb10:	83 c4 10             	add    esp,0x10
c001bb13:	89 c2                	mov    edx,eax
c001bb15:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb1c:	89 10                	mov    DWORD PTR [eax],edx
c001bb1e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bb25:	8b 00                	mov    eax,DWORD PTR [eax]
c001bb27:	83 ec 08             	sub    esp,0x8
c001bb2a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001bb2e:	52                   	push   edx
c001bb2f:	50                   	push   eax
c001bb30:	e8 8e a3 fe ff       	call   c0005ec3 <f_opendir>
c001bb35:	83 c4 10             	add    esp,0x10
c001bb38:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bb3f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001bb47:	74 07                	je     c001bb50 <FAT::openDir(char const*, void**)+0xa0>
c001bb49:	b8 01 00 00 00       	mov    eax,0x1
c001bb4e:	eb 08                	jmp    c001bb58 <FAT::openDir(char const*, void**)+0xa8>
c001bb50:	b8 00 00 00 00       	mov    eax,0x0
c001bb55:	8d 76 00             	lea    esi,[esi+0x0]
c001bb58:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bb5e:	c3                   	ret    
c001bb5f:	90                   	nop

c001bb60 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001bb60:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bb66:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001bb6e:	75 0c                	jne    c001bb7c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001bb70:	b8 04 00 00 00       	mov    eax,0x4
c001bb75:	e9 d2 00 00 00       	jmp    c001bc4c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bb7a:	66 90                	xchg   ax,ax
c001bb7c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001bb84:	75 0a                	jne    c001bb90 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001bb86:	b8 04 00 00 00       	mov    eax,0x4
c001bb8b:	e9 bc 00 00 00       	jmp    c001bc4c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bb90:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001bb98:	75 0a                	jne    c001bba4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001bb9a:	b8 04 00 00 00       	mov    eax,0x4
c001bb9f:	e9 a8 00 00 00       	jmp    c001bc4c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bba4:	83 ec 08             	sub    esp,0x8
c001bba7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bbae:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bbb5:	50                   	push   eax
c001bbb6:	e8 85 4b fe ff       	call   c0000740 <strcpy>
c001bbbb:	83 c4 10             	add    esp,0x10
c001bbbe:	83 ec 08             	sub    esp,0x8
c001bbc1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bbc8:	50                   	push   eax
c001bbc9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bbd0:	e8 6b fd ff ff       	call   c001b940 <FAT::fixFilepath(char*)>
c001bbd5:	83 c4 10             	add    esp,0x10
c001bbd8:	83 ec 08             	sub    esp,0x8
c001bbdb:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bbdf:	50                   	push   eax
c001bbe0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bbe7:	50                   	push   eax
c001bbe8:	e8 95 a4 fe ff       	call   c0006082 <f_stat>
c001bbed:	83 c4 10             	add    esp,0x10
c001bbf0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bbf7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bbfe:	85 c0                	test   eax,eax
c001bc00:	74 0a                	je     c001bc0c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bc02:	83 f8 04             	cmp    eax,0x4
c001bc05:	74 35                	je     c001bc3c <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001bc07:	eb 3b                	jmp    c001bc44 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001bc09:	8d 76 00             	lea    esi,[esi+0x0]
c001bc0c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bc10:	0f b6 c0             	movzx  eax,al
c001bc13:	83 e0 10             	and    eax,0x10
c001bc16:	0f 95 c2             	setne  dl
c001bc19:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bc20:	88 10                	mov    BYTE PTR [eax],dl
c001bc22:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bc25:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc29:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bc30:	89 01                	mov    DWORD PTR [ecx],eax
c001bc32:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bc35:	b8 00 00 00 00       	mov    eax,0x0
c001bc3a:	eb 10                	jmp    c001bc4c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc3c:	b8 02 00 00 00       	mov    eax,0x2
c001bc41:	eb 09                	jmp    c001bc4c <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001bc43:	90                   	nop
c001bc44:	b8 01 00 00 00       	mov    eax,0x1
c001bc49:	8d 76 00             	lea    esi,[esi+0x0]
c001bc4c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bc52:	c3                   	ret    
c001bc53:	90                   	nop

c001bc54 <FAT::unlink(char const*)>:
c001bc54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bc5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bc62:	75 08                	jne    c001bc6c <FAT::unlink(char const*)+0x18>
c001bc64:	b8 04 00 00 00       	mov    eax,0x4
c001bc69:	eb 61                	jmp    c001bccc <FAT::unlink(char const*)+0x78>
c001bc6b:	90                   	nop
c001bc6c:	83 ec 08             	sub    esp,0x8
c001bc6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc76:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bc7a:	50                   	push   eax
c001bc7b:	e8 c0 4a fe ff       	call   c0000740 <strcpy>
c001bc80:	83 c4 10             	add    esp,0x10
c001bc83:	83 ec 08             	sub    esp,0x8
c001bc86:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc8a:	50                   	push   eax
c001bc8b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc92:	e8 a9 fc ff ff       	call   c001b940 <FAT::fixFilepath(char*)>
c001bc97:	83 c4 10             	add    esp,0x10
c001bc9a:	83 ec 0c             	sub    esp,0xc
c001bc9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bca1:	50                   	push   eax
c001bca2:	e8 2d a7 fe ff       	call   c00063d4 <f_unlink>
c001bca7:	83 c4 10             	add    esp,0x10
c001bcaa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bcb1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bcb8:	85 c0                	test   eax,eax
c001bcba:	75 08                	jne    c001bcc4 <FAT::unlink(char const*)+0x70>
c001bcbc:	b8 00 00 00 00       	mov    eax,0x0
c001bcc1:	eb 09                	jmp    c001bccc <FAT::unlink(char const*)+0x78>
c001bcc3:	90                   	nop
c001bcc4:	b8 01 00 00 00       	mov    eax,0x1
c001bcc9:	8d 76 00             	lea    esi,[esi+0x0]
c001bccc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bcd2:	c3                   	ret    
c001bcd3:	90                   	nop

c001bcd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bcd4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bcda:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bce1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bce8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bcec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bcf0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bcf8:	75 0a                	jne    c001bd04 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bcfa:	b8 04 00 00 00       	mov    eax,0x4
c001bcff:	e9 30 01 00 00       	jmp    c001be34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001bd04:	83 ec 08             	sub    esp,0x8
c001bd07:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bd0e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001bd12:	50                   	push   eax
c001bd13:	e8 28 4a fe ff       	call   c0000740 <strcpy>
c001bd18:	83 c4 10             	add    esp,0x10
c001bd1b:	83 ec 08             	sub    esp,0x8
c001bd1e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001bd22:	50                   	push   eax
c001bd23:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001bd2a:	e8 11 fc ff ff       	call   c001b940 <FAT::fixFilepath(char*)>
c001bd2f:	83 c4 10             	add    esp,0x10
c001bd32:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001bd3a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001bd42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd47:	83 e0 01             	and    eax,0x1
c001bd4a:	74 08                	je     c001bd54 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001bd4c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001bd54:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd59:	83 e0 02             	and    eax,0x2
c001bd5c:	74 0a                	je     c001bd68 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001bd5e:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001bd66:	66 90                	xchg   ax,ax
c001bd68:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd6d:	83 e0 04             	and    eax,0x4
c001bd70:	74 0a                	je     c001bd7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001bd72:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001bd7a:	66 90                	xchg   ax,ax
c001bd7c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd81:	83 e0 08             	and    eax,0x8
c001bd84:	74 0a                	je     c001bd90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001bd86:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001bd8e:	66 90                	xchg   ax,ax
c001bd90:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bd95:	83 e0 01             	and    eax,0x1
c001bd98:	74 0a                	je     c001bda4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001bd9a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001bda2:	66 90                	xchg   ax,ax
c001bda4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bda9:	83 e0 02             	and    eax,0x2
c001bdac:	74 0a                	je     c001bdb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001bdae:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001bdb6:	66 90                	xchg   ax,ax
c001bdb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bdbd:	83 e0 04             	and    eax,0x4
c001bdc0:	74 0a                	je     c001bdcc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001bdc2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001bdca:	66 90                	xchg   ax,ax
c001bdcc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bdd1:	83 e0 08             	and    eax,0x8
c001bdd4:	74 0a                	je     c001bde0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001bdd6:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001bdde:	66 90                	xchg   ax,ax
c001bde0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001bde7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001bdee:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001bdf6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001bdfe:	83 ec 04             	sub    esp,0x4
c001be01:	52                   	push   edx
c001be02:	50                   	push   eax
c001be03:	8d 44 24 24          	lea    eax,[esp+0x24]
c001be07:	50                   	push   eax
c001be08:	e8 69 ac fe ff       	call   c0006a76 <f_chmod>
c001be0d:	83 c4 10             	add    esp,0x10
c001be10:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001be17:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001be1e:	85 c0                	test   eax,eax
c001be20:	75 0a                	jne    c001be2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001be22:	b8 00 00 00 00       	mov    eax,0x0
c001be27:	eb 0b                	jmp    c001be34 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001be29:	8d 76 00             	lea    esi,[esi+0x0]
c001be2c:	b8 01 00 00 00       	mov    eax,0x1
c001be31:	8d 76 00             	lea    esi,[esi+0x0]
c001be34:	81 c4 2c 01 00 00    	add    esp,0x12c
c001be3a:	c3                   	ret    
c001be3b:	90                   	nop

c001be3c <FAT::rename(char const*, char const*)>:
c001be3c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001be42:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001be4a:	74 0c                	je     c001be58 <FAT::rename(char const*, char const*)+0x1c>
c001be4c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001be54:	75 0e                	jne    c001be64 <FAT::rename(char const*, char const*)+0x28>
c001be56:	66 90                	xchg   ax,ax
c001be58:	b8 04 00 00 00       	mov    eax,0x4
c001be5d:	e9 9e 00 00 00       	jmp    c001bf00 <FAT::rename(char const*, char const*)+0xc4>
c001be62:	66 90                	xchg   ax,ax
c001be64:	83 ec 08             	sub    esp,0x8
c001be67:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001be6e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001be75:	50                   	push   eax
c001be76:	e8 c5 48 fe ff       	call   c0000740 <strcpy>
c001be7b:	83 c4 10             	add    esp,0x10
c001be7e:	83 ec 08             	sub    esp,0x8
c001be81:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001be88:	50                   	push   eax
c001be89:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001be90:	e8 ab fa ff ff       	call   c001b940 <FAT::fixFilepath(char*)>
c001be95:	83 c4 10             	add    esp,0x10
c001be98:	83 ec 08             	sub    esp,0x8
c001be9b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001bea2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bea6:	50                   	push   eax
c001bea7:	e8 94 48 fe ff       	call   c0000740 <strcpy>
c001beac:	83 c4 10             	add    esp,0x10
c001beaf:	83 ec 08             	sub    esp,0x8
c001beb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001beb6:	50                   	push   eax
c001beb7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001bebe:	e8 7d fa ff ff       	call   c001b940 <FAT::fixFilepath(char*)>
c001bec3:	83 c4 10             	add    esp,0x10
c001bec6:	83 ec 08             	sub    esp,0x8
c001bec9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001becd:	50                   	push   eax
c001bece:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001bed5:	50                   	push   eax
c001bed6:	e8 a8 a8 fe ff       	call   c0006783 <f_rename>
c001bedb:	83 c4 10             	add    esp,0x10
c001bede:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001bee5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001beec:	85 c0                	test   eax,eax
c001beee:	75 08                	jne    c001bef8 <FAT::rename(char const*, char const*)+0xbc>
c001bef0:	b8 00 00 00 00       	mov    eax,0x0
c001bef5:	eb 09                	jmp    c001bf00 <FAT::rename(char const*, char const*)+0xc4>
c001bef7:	90                   	nop
c001bef8:	b8 01 00 00 00       	mov    eax,0x1
c001befd:	8d 76 00             	lea    esi,[esi+0x0]
c001bf00:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bf06:	c3                   	ret    
c001bf07:	90                   	nop

c001bf08 <FAT::mkdir(char const*)>:
c001bf08:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf0e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bf16:	75 08                	jne    c001bf20 <FAT::mkdir(char const*)+0x18>
c001bf18:	b8 04 00 00 00       	mov    eax,0x4
c001bf1d:	eb 61                	jmp    c001bf80 <FAT::mkdir(char const*)+0x78>
c001bf1f:	90                   	nop
c001bf20:	83 ec 08             	sub    esp,0x8
c001bf23:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bf2a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf2e:	50                   	push   eax
c001bf2f:	e8 0c 48 fe ff       	call   c0000740 <strcpy>
c001bf34:	83 c4 10             	add    esp,0x10
c001bf37:	83 ec 08             	sub    esp,0x8
c001bf3a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf3e:	50                   	push   eax
c001bf3f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bf46:	e8 f5 f9 ff ff       	call   c001b940 <FAT::fixFilepath(char*)>
c001bf4b:	83 c4 10             	add    esp,0x10
c001bf4e:	83 ec 0c             	sub    esp,0xc
c001bf51:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf55:	50                   	push   eax
c001bf56:	e8 fc a5 fe ff       	call   c0006557 <f_mkdir>
c001bf5b:	83 c4 10             	add    esp,0x10
c001bf5e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bf65:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bf6c:	85 c0                	test   eax,eax
c001bf6e:	75 08                	jne    c001bf78 <FAT::mkdir(char const*)+0x70>
c001bf70:	b8 00 00 00 00       	mov    eax,0x0
c001bf75:	eb 09                	jmp    c001bf80 <FAT::mkdir(char const*)+0x78>
c001bf77:	90                   	nop
c001bf78:	b8 01 00 00 00       	mov    eax,0x1
c001bf7d:	8d 76 00             	lea    esi,[esi+0x0]
c001bf80:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bf86:	c3                   	ret    
c001bf87:	90                   	nop

c001bf88 <FAT::exists(char const*)>:
c001bf88:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001bf8e:	83 ec 08             	sub    esp,0x8
c001bf91:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bf98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bf9c:	50                   	push   eax
c001bf9d:	e8 9e 47 fe ff       	call   c0000740 <strcpy>
c001bfa2:	83 c4 10             	add    esp,0x10
c001bfa5:	83 ec 08             	sub    esp,0x8
c001bfa8:	8d 44 24 08          	lea    eax,[esp+0x8]
c001bfac:	50                   	push   eax
c001bfad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bfb4:	e8 87 f9 ff ff       	call   c001b940 <FAT::fixFilepath(char*)>
c001bfb9:	83 c4 10             	add    esp,0x10
c001bfbc:	83 ec 08             	sub    esp,0x8
c001bfbf:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001bfc6:	50                   	push   eax
c001bfc7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bfcb:	50                   	push   eax
c001bfcc:	e8 b1 a0 fe ff       	call   c0006082 <f_stat>
c001bfd1:	83 c4 10             	add    esp,0x10
c001bfd4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001bfdb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bfe2:	85 c0                	test   eax,eax
c001bfe4:	75 06                	jne    c001bfec <FAT::exists(char const*)+0x64>
c001bfe6:	b0 01                	mov    al,0x1
c001bfe8:	eb 06                	jmp    c001bff0 <FAT::exists(char const*)+0x68>
c001bfea:	66 90                	xchg   ax,ax
c001bfec:	b0 00                	mov    al,0x0
c001bfee:	66 90                	xchg   ax,ax
c001bff0:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bff6:	c3                   	ret    
c001bff7:	90                   	nop

c001bff8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001bff8:	b8 08 00 00 00       	mov    eax,0x8
c001bffd:	c3                   	ret    

c001bffe <ISO9660::seek(void*, unsigned long long)>:
c001bffe:	53                   	push   ebx
c001bfff:	b8 04 00 00 00       	mov    eax,0x4
c001c004:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c008:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c00c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c010:	85 d2                	test   edx,edx
c001c012:	74 17                	je     c001c02b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c014:	89 c8                	mov    eax,ecx
c001c016:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001c019:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001c01c:	b8 01 00 00 00       	mov    eax,0x1
c001c021:	73 08                	jae    c001c02b <ISO9660::seek(void*, unsigned long long)+0x2d>
c001c023:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001c026:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c029:	31 c0                	xor    eax,eax
c001c02b:	5b                   	pop    ebx
c001c02c:	c3                   	ret    
c001c02d:	90                   	nop

c001c02e <ISO9660::tell(void*, unsigned long long*)>:
c001c02e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c036:	85 d2                	test   edx,edx
c001c038:	74 12                	je     c001c04c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c03a:	85 c0                	test   eax,eax
c001c03c:	74 0e                	je     c001c04c <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001c03e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c041:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001c044:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c047:	89 10                	mov    DWORD PTR [eax],edx
c001c049:	31 c0                	xor    eax,eax
c001c04b:	c3                   	ret    
c001c04c:	b8 04 00 00 00       	mov    eax,0x4
c001c051:	c3                   	ret    

c001c052 <ISO9660::getName()>:
c001c052:	b8 5c 63 02 c0       	mov    eax,0xc002635c
c001c057:	c3                   	ret    

c001c058 <ISO9660::stat(void*, unsigned long long*)>:
c001c058:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c05c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c060:	85 d2                	test   edx,edx
c001c062:	74 12                	je     c001c076 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c064:	85 c0                	test   eax,eax
c001c066:	74 0e                	je     c001c076 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001c068:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001c06b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001c06e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001c071:	89 10                	mov    DWORD PTR [eax],edx
c001c073:	31 c0                	xor    eax,eax
c001c075:	c3                   	ret    
c001c076:	b8 04 00 00 00       	mov    eax,0x4
c001c07b:	c3                   	ret    

c001c07c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c07c:	b8 01 00 00 00       	mov    eax,0x1
c001c081:	c3                   	ret    

c001c082 <ISO9660::unlink(char const*)>:
c001c082:	b8 01 00 00 00       	mov    eax,0x1
c001c087:	c3                   	ret    

c001c088 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c088:	b8 01 00 00 00       	mov    eax,0x1
c001c08d:	c3                   	ret    

c001c08e <ISO9660::rename(char const*, char const*)>:
c001c08e:	b8 01 00 00 00       	mov    eax,0x1
c001c093:	c3                   	ret    

c001c094 <ISO9660::mkdir(char const*)>:
c001c094:	b8 01 00 00 00       	mov    eax,0x1
c001c099:	c3                   	ret    

c001c09a <ISO9660::close(void*)>:
c001c09a:	83 ec 0c             	sub    esp,0xc
c001c09d:	b8 04 00 00 00       	mov    eax,0x4
c001c0a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0a6:	85 d2                	test   edx,edx
c001c0a8:	74 0e                	je     c001c0b8 <ISO9660::close(void*)+0x1e>
c001c0aa:	83 ec 0c             	sub    esp,0xc
c001c0ad:	52                   	push   edx
c001c0ae:	e8 6c d9 fe ff       	call   c0009a1f <free>
c001c0b3:	83 c4 10             	add    esp,0x10
c001c0b6:	31 c0                	xor    eax,eax
c001c0b8:	83 c4 0c             	add    esp,0xc
c001c0bb:	c3                   	ret    

c001c0bc <ISO9660::closeDir(void*)>:
c001c0bc:	83 ec 0c             	sub    esp,0xc
c001c0bf:	b8 04 00 00 00       	mov    eax,0x4
c001c0c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0c8:	85 d2                	test   edx,edx
c001c0ca:	74 0e                	je     c001c0da <ISO9660::closeDir(void*)+0x1e>
c001c0cc:	83 ec 0c             	sub    esp,0xc
c001c0cf:	52                   	push   edx
c001c0d0:	e8 4a d9 fe ff       	call   c0009a1f <free>
c001c0d5:	83 c4 10             	add    esp,0x10
c001c0d8:	31 c0                	xor    eax,eax
c001c0da:	83 c4 0c             	add    esp,0xc
c001c0dd:	c3                   	ret    

c001c0de <ISO9660::~ISO9660()>:
c001c0de:	83 ec 0c             	sub    esp,0xc
c001c0e1:	ba 80 63 02 c0       	mov    edx,0xc0026380
c001c0e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ea:	89 10                	mov    DWORD PTR [eax],edx
c001c0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0f0:	83 ec 0c             	sub    esp,0xc
c001c0f3:	50                   	push   eax
c001c0f4:	e8 3d 0f ff ff       	call   c000d036 <Filesystem::~Filesystem()>
c001c0f9:	83 c4 10             	add    esp,0x10
c001c0fc:	90                   	nop
c001c0fd:	83 c4 0c             	add    esp,0xc
c001c100:	c3                   	ret    
c001c101:	90                   	nop

c001c102 <ISO9660::~ISO9660()>:
c001c102:	83 ec 0c             	sub    esp,0xc
c001c105:	83 ec 0c             	sub    esp,0xc
c001c108:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c10c:	e8 cd ff ff ff       	call   c001c0de <ISO9660::~ISO9660()>
c001c111:	83 c4 10             	add    esp,0x10
c001c114:	83 ec 08             	sub    esp,0x8
c001c117:	6a 08                	push   0x8
c001c119:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c11d:	e8 f8 0a ff ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001c122:	83 c4 10             	add    esp,0x10
c001c125:	83 c4 0c             	add    esp,0xc
c001c128:	c3                   	ret    

c001c129 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001c129:	55                   	push   ebp
c001c12a:	31 c9                	xor    ecx,ecx
c001c12c:	57                   	push   edi
c001c12d:	56                   	push   esi
c001c12e:	53                   	push   ebx
c001c12f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c133:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c137:	89 eb                	mov    ebx,ebp
c001c139:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001c13d:	39 ce                	cmp    esi,ecx
c001c13f:	7e 17                	jle    c001c158 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001c141:	31 d2                	xor    edx,edx
c001c143:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001c147:	7d 13                	jge    c001c15c <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001c149:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c14d:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c150:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001c153:	75 0d                	jne    c001c162 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001c155:	42                   	inc    edx
c001c156:	eb eb                	jmp    c001c143 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001c158:	31 c0                	xor    eax,eax
c001c15a:	eb 0a                	jmp    c001c166 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c15c:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001c160:	eb 04                	jmp    c001c166 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001c162:	41                   	inc    ecx
c001c163:	43                   	inc    ebx
c001c164:	eb d7                	jmp    c001c13d <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001c166:	5b                   	pop    ebx
c001c167:	5e                   	pop    esi
c001c168:	5f                   	pop    edi
c001c169:	5d                   	pop    ebp
c001c16a:	c3                   	ret    

c001c16b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c16b:	57                   	push   edi
c001c16c:	56                   	push   esi
c001c16d:	53                   	push   ebx
c001c16e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c172:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c176:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c17a:	39 35 20 96 02 c0    	cmp    DWORD PTR ds:0xc0029620,esi
c001c180:	75 08                	jne    c001c18a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001c182:	38 1d 34 79 02 c0    	cmp    BYTE PTR ds:0xc0027934,bl
c001c188:	74 4a                	je     c001c1d4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c18a:	83 ec 0c             	sub    esp,0xc
c001c18d:	31 d2                	xor    edx,edx
c001c18f:	68 40 96 02 c0       	push   0xc0029640
c001c194:	0f be c3             	movsx  eax,bl
c001c197:	6a 01                	push   0x1
c001c199:	52                   	push   edx
c001c19a:	56                   	push   esi
c001c19b:	ff 34 85 bc 83 02 c0 	push   DWORD PTR [eax*4-0x3ffd7c44]
c001c1a2:	e8 7d 43 ff ff       	call   c0010524 <LogicalDisk::read(unsigned long long, int, void*)>
c001c1a7:	83 c4 20             	add    esp,0x20
c001c1aa:	85 c0                	test   eax,eax
c001c1ac:	75 0e                	jne    c001c1bc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c001c1ae:	89 35 20 96 02 c0    	mov    DWORD PTR ds:0xc0029620,esi
c001c1b4:	88 1d 34 79 02 c0    	mov    BYTE PTR ds:0xc0027934,bl
c001c1ba:	eb 18                	jmp    c001c1d4 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001c1bc:	50                   	push   eax
c001c1bd:	68 00 08 00 00       	push   0x800
c001c1c2:	6a 00                	push   0x0
c001c1c4:	57                   	push   edi
c001c1c5:	e8 ba 44 fe ff       	call   c0000684 <memset>
c001c1ca:	83 c4 10             	add    esp,0x10
c001c1cd:	b8 01 00 00 00       	mov    eax,0x1
c001c1d2:	eb 0e                	jmp    c001c1e2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c001c1d4:	be 40 96 02 c0       	mov    esi,0xc0029640
c001c1d9:	b9 00 08 00 00       	mov    ecx,0x800
c001c1de:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c1e0:	31 c0                	xor    eax,eax
c001c1e2:	5b                   	pop    ebx
c001c1e3:	5e                   	pop    esi
c001c1e4:	5f                   	pop    edi
c001c1e5:	c3                   	ret    

c001c1e6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c1e6:	81 ec 10 08 00 00    	sub    esp,0x810
c001c1ec:	c7 05 20 96 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029620,0xdeadbeef
c001c1f6:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001c1fd:	83 c0 41             	add    eax,0x41
c001c200:	0f be c0             	movsx  eax,al
c001c203:	50                   	push   eax
c001c204:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c208:	50                   	push   eax
c001c209:	6a 10                	push   0x10
c001c20b:	e8 5b ff ff ff       	call   c001c16b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c210:	83 c4 10             	add    esp,0x10
c001c213:	31 d2                	xor    edx,edx
c001c215:	85 c0                	test   eax,eax
c001c217:	75 24                	jne    c001c23d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c219:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c21e:	75 1d                	jne    c001c23d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c220:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c225:	75 16                	jne    c001c23d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c227:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c22c:	75 0f                	jne    c001c23d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c22e:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c233:	75 08                	jne    c001c23d <ISO9660::tryMount(LogicalDisk*, int)+0x57>
c001c235:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c23a:	0f 94 c2             	sete   dl
c001c23d:	88 d0                	mov    al,dl
c001c23f:	81 c4 0c 08 00 00    	add    esp,0x80c
c001c245:	c3                   	ret    

c001c246 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c246:	55                   	push   ebp
c001c247:	57                   	push   edi
c001c248:	56                   	push   esi
c001c249:	53                   	push   ebx
c001c24a:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001c250:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001c257:	85 ed                	test   ebp,ebp
c001c259:	0f 84 da 01 00 00    	je     c001c439 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c25f:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001c267:	0f 84 cc 01 00 00    	je     c001c439 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001c26d:	b8 01 00 00 00       	mov    eax,0x1
c001c272:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001c276:	0f 85 c2 01 00 00    	jne    c001c43e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c27c:	31 d2                	xor    edx,edx
c001c27e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001c285:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c288:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001c28b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001c28e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c291:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c295:	01 c8                	add    eax,ecx
c001c297:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c29a:	11 da                	adc    edx,ebx
c001c29c:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001c2a0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001c2a4:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c2a8:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c2ac:	19 d7                	sbb    edi,edx
c001c2ae:	72 11                	jb     c001c2c1 <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001c2b0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001c2b3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001c2b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c2bf:	eb 0c                	jmp    c001c2cd <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001c2c1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001c2c5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c2c9:	29 ce                	sub    esi,ecx
c001c2cb:	19 df                	sbb    edi,ebx
c001c2cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c2d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001c2d3:	0f a4 c2 0b          	shld   edx,eax,0xb
c001c2d7:	c1 e0 0b             	shl    eax,0xb
c001c2da:	01 c8                	add    eax,ecx
c001c2dc:	11 da                	adc    edx,ebx
c001c2de:	89 04 24             	mov    DWORD PTR [esp],eax
c001c2e1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c2e5:	51                   	push   ecx
c001c2e6:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c2ea:	50                   	push   eax
c001c2eb:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001c2ef:	53                   	push   ebx
c001c2f0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c2f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2f8:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c2fc:	50                   	push   eax
c001c2fd:	e8 69 fe ff ff       	call   c001c16b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c302:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001c305:	b8 00 08 00 00       	mov    eax,0x800
c001c30a:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001c310:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001c314:	29 d0                	sub    eax,edx
c001c316:	83 c4 10             	add    esp,0x10
c001c319:	89 f9                	mov    ecx,edi
c001c31b:	39 c6                	cmp    esi,eax
c001c31d:	83 d9 00             	sbb    ecx,0x0
c001c320:	7d 1b                	jge    c001c33d <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001c322:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c327:	75 12                	jne    c001c33b <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001c329:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c330:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c336:	e9 fa 00 00 00       	jmp    c001c435 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001c33b:	89 f0                	mov    eax,esi
c001c33d:	01 d3                	add    ebx,edx
c001c33f:	31 d2                	xor    edx,edx
c001c341:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001c345:	39 c2                	cmp    edx,eax
c001c347:	7d 14                	jge    c001c35d <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001c349:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001c350:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c354:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001c357:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001c35a:	42                   	inc    edx
c001c35b:	eb e8                	jmp    c001c345 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001c35d:	89 c2                	mov    edx,eax
c001c35f:	85 c0                	test   eax,eax
c001c361:	79 02                	jns    c001c365 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001c363:	31 d2                	xor    edx,edx
c001c365:	01 c2                	add    edx,eax
c001c367:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001c36a:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001c371:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001c375:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c379:	99                   	cdq    
c001c37a:	01 c1                	add    ecx,eax
c001c37c:	11 d3                	adc    ebx,edx
c001c37e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001c382:	29 c6                	sub    esi,eax
c001c384:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001c388:	19 d7                	sbb    edi,edx
c001c38a:	89 34 24             	mov    DWORD PTR [esp],esi
c001c38d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001c391:	b8 ff 07 00 00       	mov    eax,0x7ff
c001c396:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001c399:	b8 00 00 00 00       	mov    eax,0x0
c001c39e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001c3a2:	7d 43                	jge    c001c3e7 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001c3a4:	52                   	push   edx
c001c3a5:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c3a9:	50                   	push   eax
c001c3aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c3ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3b2:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c3b6:	0f ac d0 0b          	shrd   eax,edx,0xb
c001c3ba:	50                   	push   eax
c001c3bb:	e8 ab fd ff ff       	call   c001c16b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c3c0:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001c3c8:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001c3cd:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001c3d5:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001c3dd:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	eb aa                	jmp    c001c391 <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001c3e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3eb:	0b 04 24             	or     eax,DWORD PTR [esp]
c001c3ee:	74 2a                	je     c001c41a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001c3f0:	50                   	push   eax
c001c3f1:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c3f5:	50                   	push   eax
c001c3f6:	8d 74 24 28          	lea    esi,[esp+0x28]
c001c3fa:	56                   	push   esi
c001c3fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c3ff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c403:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001c407:	51                   	push   ecx
c001c408:	e8 5e fd ff ff       	call   c001c16b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c40d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c411:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c415:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c417:	83 c4 10             	add    esp,0x10
c001c41a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c421:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001c425:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c429:	89 18                	mov    DWORD PTR [eax],ebx
c001c42b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c42f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c432:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c435:	31 c0                	xor    eax,eax
c001c437:	eb 05                	jmp    c001c43e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001c439:	b8 04 00 00 00       	mov    eax,0x4
c001c43e:	81 c4 2c 08 00 00    	add    esp,0x82c
c001c444:	5b                   	pop    ebx
c001c445:	5e                   	pop    esi
c001c446:	5f                   	pop    edi
c001c447:	5d                   	pop    ebp
c001c448:	c3                   	ret    
c001c449:	90                   	nop

c001c44a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c44a:	55                   	push   ebp
c001c44b:	57                   	push   edi
c001c44c:	56                   	push   esi
c001c44d:	53                   	push   ebx
c001c44e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001c454:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001c45b:	85 ed                	test   ebp,ebp
c001c45d:	0f 84 51 02 00 00    	je     c001c6b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c463:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001c46b:	0f 84 43 02 00 00    	je     c001c6b4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001c471:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001c474:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001c477:	75 0a                	jne    c001c483 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001c479:	b8 07 00 00 00       	mov    eax,0x7
c001c47e:	e9 36 02 00 00       	jmp    c001c6b9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c483:	50                   	push   eax
c001c484:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c488:	50                   	push   eax
c001c489:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c490:	53                   	push   ebx
c001c491:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c494:	c1 e0 0b             	shl    eax,0xb
c001c497:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001c49a:	c1 e8 0b             	shr    eax,0xb
c001c49d:	50                   	push   eax
c001c49e:	e8 c8 fc ff ff       	call   c001c16b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c4a3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c4a6:	83 c4 10             	add    esp,0x10
c001c4a9:	89 c1                	mov    ecx,eax
c001c4ab:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001c4ae:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001c4b4:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001c4b7:	84 db                	test   bl,bl
c001c4b9:	0f 85 8b 00 00 00    	jne    c001c54a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001c4bf:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001c4c5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001c4c8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001c4ce:	29 c6                	sub    esi,eax
c001c4d0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c4d4:	89 f3                	mov    ebx,esi
c001c4d6:	89 f1                	mov    ecx,esi
c001c4d8:	c1 fb 1f             	sar    ebx,0x1f
c001c4db:	01 f0                	add    eax,esi
c001c4dd:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001c4e0:	11 da                	adc    edx,ebx
c001c4e2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001c4e9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001c4ec:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001c4ef:	89 d8                	mov    eax,ebx
c001c4f1:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001c4f5:	ba 00 00 00 00       	mov    edx,0x0
c001c4fa:	19 f8                	sbb    eax,edi
c001c4fc:	b8 00 00 00 00       	mov    eax,0x0
c001c501:	73 08                	jae    c001c50b <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001c503:	89 f0                	mov    eax,esi
c001c505:	89 fa                	mov    edx,edi
c001c507:	29 c8                	sub    eax,ecx
c001c509:	19 da                	sbb    edx,ebx
c001c50b:	89 d7                	mov    edi,edx
c001c50d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c510:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c513:	09 c7                	or     edi,eax
c001c515:	0f 84 5e ff ff ff    	je     c001c479 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001c51b:	57                   	push   edi
c001c51c:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001c520:	50                   	push   eax
c001c521:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001c528:	53                   	push   ebx
c001c529:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c52c:	c1 e0 0b             	shl    eax,0xb
c001c52f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001c533:	c1 e8 0b             	shr    eax,0xb
c001c536:	50                   	push   eax
c001c537:	e8 2f fc ff ff       	call   c001c16b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c53c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c53f:	83 c4 10             	add    esp,0x10
c001c542:	25 ff 07 00 00       	and    eax,0x7ff
c001c547:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001c54a:	31 ff                	xor    edi,edi
c001c54c:	56                   	push   esi
c001c54d:	6a 28                	push   0x28
c001c54f:	6a 00                	push   0x0
c001c551:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c555:	50                   	push   eax
c001c556:	e8 29 41 fe ff       	call   c0000684 <memset>
c001c55b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c55e:	25 ff 07 00 00       	and    eax,0x7ff
c001c563:	89 c6                	mov    esi,eax
c001c565:	83 c6 21             	add    esi,0x21
c001c568:	83 d7 00             	adc    edi,0x0
c001c56b:	83 c4 10             	add    esp,0x10
c001c56e:	31 c9                	xor    ecx,ecx
c001c570:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001c577:	83 f9 28             	cmp    ecx,0x28
c001c57a:	88 04 24             	mov    BYTE PTR [esp],al
c001c57d:	0f 94 c2             	sete   dl
c001c580:	88 d0                	mov    al,dl
c001c582:	ba ff 07 00 00       	mov    edx,0x7ff
c001c587:	39 f2                	cmp    edx,esi
c001c589:	ba 00 00 00 00       	mov    edx,0x0
c001c58e:	19 fa                	sbb    edx,edi
c001c590:	0f 92 c2             	setb   dl
c001c593:	09 c2                	or     edx,eax
c001c595:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001c599:	0f 94 c0             	sete   al
c001c59c:	08 d0                	or     al,dl
c001c59e:	75 16                	jne    c001c5b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c5a0:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001c5a4:	74 10                	je     c001c5b6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001c5a6:	8a 04 24             	mov    al,BYTE PTR [esp]
c001c5a9:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001c5ad:	41                   	inc    ecx
c001c5ae:	83 c6 01             	add    esi,0x1
c001c5b1:	83 d7 00             	adc    edi,0x0
c001c5b4:	eb ba                	jmp    c001c570 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001c5b6:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001c5bd:	83 ec 0c             	sub    esp,0xc
c001c5c0:	8d 74 24 24          	lea    esi,[esp+0x24]
c001c5c4:	56                   	push   esi
c001c5c5:	e8 d6 40 fe ff       	call   c00006a0 <strlen>
c001c5ca:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001c5d1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c5d5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001c5dd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001c5e0:	5a                   	pop    edx
c001c5e1:	25 ff 07 00 00       	and    eax,0x7ff
c001c5e6:	59                   	pop    ecx
c001c5e7:	01 f8                	add    eax,edi
c001c5e9:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001c5ef:	83 e0 02             	and    eax,0x2
c001c5f2:	3c 01                	cmp    al,0x1
c001c5f4:	19 c0                	sbb    eax,eax
c001c5f6:	83 c0 02             	add    eax,0x2
c001c5f9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001c5fd:	56                   	push   esi
c001c5fe:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c602:	50                   	push   eax
c001c603:	e8 38 41 fe ff       	call   c0000740 <strcpy>
c001c608:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001c60c:	83 c4 10             	add    esp,0x10
c001c60f:	84 c0                	test   al,al
c001c611:	75 21                	jne    c001c634 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001c613:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001c61b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c623:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c62b:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001c632:	eb 28                	jmp    c001c65c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c634:	fe c8                	dec    al
c001c636:	75 24                	jne    c001c65c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001c638:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001c640:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001c648:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001c650:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001c657:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001c65c:	8d 74 24 40          	lea    esi,[esp+0x40]
c001c660:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001c667:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001c66e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c670:	0f b6 f3             	movzx  esi,bl
c001c673:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001c67a:	31 db                	xor    ebx,ebx
c001c67c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001c682:	89 df                	mov    edi,ebx
c001c684:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001c687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001c68a:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001c68d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001c690:	39 c6                	cmp    esi,eax
c001c692:	19 d7                	sbb    edi,edx
c001c694:	72 10                	jb     c001c6a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001c696:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001c69d:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001c6a4:	eb 0a                	jmp    c001c6b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001c6a6:	29 f0                	sub    eax,esi
c001c6a8:	19 da                	sbb    edx,ebx
c001c6aa:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001c6ad:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001c6b0:	31 c0                	xor    eax,eax
c001c6b2:	eb 05                	jmp    c001c6b9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001c6b4:	b8 04 00 00 00       	mov    eax,0x4
c001c6b9:	81 c4 5c 09 00 00    	add    esp,0x95c
c001c6bf:	5b                   	pop    ebx
c001c6c0:	5e                   	pop    esi
c001c6c1:	5f                   	pop    edi
c001c6c2:	5d                   	pop    ebp
c001c6c3:	c3                   	ret    

c001c6c4 <readRoot(unsigned int*, unsigned int*, char)>:
c001c6c4:	57                   	push   edi
c001c6c5:	56                   	push   esi
c001c6c6:	81 ec 38 08 00 00    	sub    esp,0x838
c001c6cc:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001c6d4:	50                   	push   eax
c001c6d5:	8d 44 24 38          	lea    eax,[esp+0x38]
c001c6d9:	50                   	push   eax
c001c6da:	6a 10                	push   0x10
c001c6dc:	e8 8a fa ff ff       	call   c001c16b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c6e1:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001c6e8:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001c6ec:	b9 22 00 00 00       	mov    ecx,0x22
c001c6f1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c6f3:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001c6fa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c6fe:	89 10                	mov    DWORD PTR [eax],edx
c001c700:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001c707:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c70b:	89 10                	mov    DWORD PTR [eax],edx
c001c70d:	81 c4 44 08 00 00    	add    esp,0x844
c001c713:	b0 01                	mov    al,0x1
c001c715:	5e                   	pop    esi
c001c716:	5f                   	pop    edi
c001c717:	c3                   	ret    

c001c718 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001c718:	55                   	push   ebp
c001c719:	57                   	push   edi
c001c71a:	56                   	push   esi
c001c71b:	53                   	push   ebx
c001c71c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c722:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c729:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001c730:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c734:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001c738:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c73c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c740:	75 03                	jne    c001c745 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c742:	83 c3 02             	add    ebx,0x2
c001c745:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c748:	75 03                	jne    c001c74d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c74a:	43                   	inc    ebx
c001c74b:	eb f8                	jmp    c001c745 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c74d:	52                   	push   edx
c001c74e:	68 00 01 00 00       	push   0x100
c001c753:	6a 00                	push   0x0
c001c755:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c759:	50                   	push   eax
c001c75a:	e8 25 3f fe ff       	call   c0000684 <memset>
c001c75f:	83 c4 10             	add    esp,0x10
c001c762:	31 d2                	xor    edx,edx
c001c764:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c767:	84 c0                	test   al,al
c001c769:	74 21                	je     c001c78c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c76b:	3c 2f                	cmp    al,0x2f
c001c76d:	75 0b                	jne    c001c77a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c76f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c773:	bd 01 00 00 00       	mov    ebp,0x1
c001c778:	eb 14                	jmp    c001c78e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c77a:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c77d:	80 f9 19             	cmp    cl,0x19
c001c780:	77 03                	ja     c001c785 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c782:	83 e8 20             	sub    eax,0x20
c001c785:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c789:	42                   	inc    edx
c001c78a:	eb d8                	jmp    c001c764 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c78c:	31 ed                	xor    ebp,ebp
c001c78e:	83 ec 0c             	sub    esp,0xc
c001c791:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c798:	e8 72 d2 fe ff       	call   c0009a0f <malloc>
c001c79d:	89 c6                	mov    esi,eax
c001c79f:	89 c2                	mov    edx,eax
c001c7a1:	8b 84 24 48 01 00 00 	mov    eax,DWORD PTR [esp+0x148]
c001c7a8:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001c7ae:	c1 ef 0b             	shr    edi,0xb
c001c7b1:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c7b8:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c7bc:	83 c4 10             	add    esp,0x10
c001c7bf:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c7c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c7c8:	3b 84 24 34 01 00 00 	cmp    eax,DWORD PTR [esp+0x134]
c001c7cf:	74 29                	je     c001c7fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xe2>
c001c7d1:	50                   	push   eax
c001c7d2:	57                   	push   edi
c001c7d3:	52                   	push   edx
c001c7d4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001c7d8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c7df:	e8 87 f9 ff ff       	call   c001c16b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c7e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c7e8:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c7ef:	81 c2 00 08 00 00    	add    edx,0x800
c001c7f5:	83 c4 10             	add    esp,0x10
c001c7f8:	eb ca                	jmp    c001c7c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xac>
c001c7fa:	83 ec 0c             	sub    esp,0xc
c001c7fd:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c801:	57                   	push   edi
c001c802:	e8 99 3e fe ff       	call   c00006a0 <strlen>
c001c807:	50                   	push   eax
c001c808:	57                   	push   edi
c001c809:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c810:	56                   	push   esi
c001c811:	e8 13 f9 ff ff       	call   c001c129 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c816:	83 c4 20             	add    esp,0x20
c001c819:	85 c0                	test   eax,eax
c001c81b:	75 13                	jne    c001c830 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x118>
c001c81d:	83 ec 0c             	sub    esp,0xc
c001c820:	56                   	push   esi
c001c821:	e8 f9 d1 fe ff       	call   c0009a1f <free>
c001c826:	83 c4 10             	add    esp,0x10
c001c829:	31 c0                	xor    eax,eax
c001c82b:	e9 b3 00 00 00       	jmp    c001c8e3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c830:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c834:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c838:	c1 e7 08             	shl    edi,0x8
c001c83b:	c1 e2 10             	shl    edx,0x10
c001c83e:	09 d7                	or     edi,edx
c001c840:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c844:	09 d7                	or     edi,edx
c001c846:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c84a:	c1 e2 18             	shl    edx,0x18
c001c84d:	09 d7                	or     edi,edx
c001c84f:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c853:	89 d1                	mov    ecx,edx
c001c855:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c859:	c1 e1 08             	shl    ecx,0x8
c001c85c:	c1 e2 10             	shl    edx,0x10
c001c85f:	09 ca                	or     edx,ecx
c001c861:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c865:	09 ca                	or     edx,ecx
c001c867:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c86b:	c1 e1 18             	shl    ecx,0x18
c001c86e:	09 ca                	or     edx,ecx
c001c870:	89 e9                	mov    ecx,ebp
c001c872:	84 c9                	test   cl,cl
c001c874:	74 3c                	je     c001c8b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x19a>
c001c876:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c87a:	83 ec 0c             	sub    esp,0xc
c001c87d:	56                   	push   esi
c001c87e:	e8 9c d1 fe ff       	call   c0009a1f <free>
c001c883:	83 c4 0c             	add    esp,0xc
c001c886:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c88d:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c892:	50                   	push   eax
c001c893:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c89a:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c8a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c8a5:	52                   	push   edx
c001c8a6:	57                   	push   edi
c001c8a7:	53                   	push   ebx
c001c8a8:	e8 6b fe ff ff       	call   c001c718 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c8ad:	83 c4 20             	add    esp,0x20
c001c8b0:	eb 31                	jmp    c001c8e3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1cb>
c001c8b2:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c8b5:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c8bc:	d0 e8                	shr    al,1
c001c8be:	89 3b                	mov    DWORD PTR [ebx],edi
c001c8c0:	83 e0 01             	and    eax,0x1
c001c8c3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c8ca:	83 ec 0c             	sub    esp,0xc
c001c8cd:	89 13                	mov    DWORD PTR [ebx],edx
c001c8cf:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c8d6:	89 03                	mov    DWORD PTR [ebx],eax
c001c8d8:	56                   	push   esi
c001c8d9:	e8 41 d1 fe ff       	call   c0009a1f <free>
c001c8de:	83 c4 10             	add    esp,0x10
c001c8e1:	b0 01                	mov    al,0x1
c001c8e3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c8e9:	5b                   	pop    ebx
c001c8ea:	5e                   	pop    esi
c001c8eb:	5f                   	pop    edi
c001c8ec:	5d                   	pop    ebp
c001c8ed:	c3                   	ret    

c001c8ee <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c8ee:	55                   	push   ebp
c001c8ef:	57                   	push   edi
c001c8f0:	56                   	push   esi
c001c8f1:	53                   	push   ebx
c001c8f2:	83 ec 20             	sub    esp,0x20
c001c8f5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8f9:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c8fd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c901:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c909:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c911:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c916:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c91c:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c922:	57                   	push   edi
c001c923:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c927:	50                   	push   eax
c001c928:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c92c:	50                   	push   eax
c001c92d:	e8 92 fd ff ff       	call   c001c6c4 <readRoot(unsigned int*, unsigned int*, char)>
c001c932:	5a                   	pop    edx
c001c933:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c937:	e8 64 3d fe ff       	call   c00006a0 <strlen>
c001c93c:	83 c4 10             	add    esp,0x10
c001c93f:	83 f8 03             	cmp    eax,0x3
c001c942:	77 17                	ja     c001c95b <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c944:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c948:	89 03                	mov    DWORD PTR [ebx],eax
c001c94a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c94e:	89 06                	mov    DWORD PTR [esi],eax
c001c950:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c957:	b0 01                	mov    al,0x1
c001c959:	eb 19                	jmp    c001c974 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c95b:	50                   	push   eax
c001c95c:	55                   	push   ebp
c001c95d:	57                   	push   edi
c001c95e:	56                   	push   esi
c001c95f:	53                   	push   ebx
c001c960:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c964:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c968:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c96c:	e8 a7 fd ff ff       	call   c001c718 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c971:	83 c4 20             	add    esp,0x20
c001c974:	83 c4 1c             	add    esp,0x1c
c001c977:	5b                   	pop    ebx
c001c978:	5e                   	pop    esi
c001c979:	5f                   	pop    edi
c001c97a:	5d                   	pop    ebp
c001c97b:	c3                   	ret    

c001c97c <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c97c:	57                   	push   edi
c001c97d:	56                   	push   esi
c001c97e:	53                   	push   ebx
c001c97f:	83 ec 10             	sub    esp,0x10
c001c982:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c986:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c98a:	85 ff                	test   edi,edi
c001c98c:	0f 84 8b 00 00 00    	je     c001ca1d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c992:	85 f6                	test   esi,esi
c001c994:	0f 84 83 00 00 00    	je     c001ca1d <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c99a:	b8 03 00 00 00       	mov    eax,0x3
c001c99f:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c9a4:	75 7c                	jne    c001ca22 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c9a6:	83 ec 0c             	sub    esp,0xc
c001c9a9:	6a 1c                	push   0x1c
c001c9ab:	e8 5f d0 fe ff       	call   c0009a0f <malloc>
c001c9b0:	89 07                	mov    DWORD PTR [edi],eax
c001c9b2:	89 c3                	mov    ebx,eax
c001c9b4:	58                   	pop    eax
c001c9b5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c9b9:	50                   	push   eax
c001c9ba:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c9bd:	50                   	push   eax
c001c9be:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c9c2:	50                   	push   eax
c001c9c3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c9c7:	50                   	push   eax
c001c9c8:	56                   	push   esi
c001c9c9:	e8 20 ff ff ff       	call   c001c8ee <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c9ce:	83 c4 20             	add    esp,0x20
c001c9d1:	84 c0                	test   al,al
c001c9d3:	74 07                	je     c001c9dc <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c9d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c9da:	74 0b                	je     c001c9e7 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c9dc:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c9e0:	b8 01 00 00 00       	mov    eax,0x1
c001c9e5:	eb 3b                	jmp    c001ca22 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c9e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9eb:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c9ef:	89 03                	mov    DWORD PTR [ebx],eax
c001c9f1:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c9f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9fc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ca03:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca0a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca0d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca14:	8a 06                	mov    al,BYTE PTR [esi]
c001ca16:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ca19:	31 c0                	xor    eax,eax
c001ca1b:	eb 05                	jmp    c001ca22 <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001ca1d:	b8 04 00 00 00       	mov    eax,0x4
c001ca22:	83 c4 10             	add    esp,0x10
c001ca25:	5b                   	pop    ebx
c001ca26:	5e                   	pop    esi
c001ca27:	5f                   	pop    edi
c001ca28:	c3                   	ret    
c001ca29:	90                   	nop

c001ca2a <ISO9660::exists(char const*)>:
c001ca2a:	83 ec 28             	sub    esp,0x28
c001ca2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ca31:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ca35:	52                   	push   edx
c001ca36:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001ca39:	52                   	push   edx
c001ca3a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ca3e:	52                   	push   edx
c001ca3f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001ca43:	52                   	push   edx
c001ca44:	50                   	push   eax
c001ca45:	e8 a4 fe ff ff       	call   c001c8ee <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ca4a:	83 c4 3c             	add    esp,0x3c
c001ca4d:	c3                   	ret    

c001ca4e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ca4e:	56                   	push   esi
c001ca4f:	53                   	push   ebx
c001ca50:	83 ec 14             	sub    esp,0x14
c001ca53:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ca57:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ca5b:	85 db                	test   ebx,ebx
c001ca5d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ca61:	0f 94 c2             	sete   dl
c001ca64:	85 f6                	test   esi,esi
c001ca66:	0f 94 c0             	sete   al
c001ca69:	08 c2                	or     dl,al
c001ca6b:	75 68                	jne    c001cad5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ca6d:	85 c9                	test   ecx,ecx
c001ca6f:	74 64                	je     c001cad5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001ca71:	83 ec 0c             	sub    esp,0xc
c001ca74:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ca77:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ca7b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001ca81:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca88:	50                   	push   eax
c001ca89:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001ca8c:	50                   	push   eax
c001ca8d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca91:	50                   	push   eax
c001ca92:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ca96:	50                   	push   eax
c001ca97:	51                   	push   ecx
c001ca98:	e8 51 fe ff ff       	call   c001c8ee <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ca9d:	83 c4 20             	add    esp,0x20
c001caa0:	ba 01 00 00 00       	mov    edx,0x1
c001caa5:	84 c0                	test   al,al
c001caa7:	74 31                	je     c001cada <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001caa9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001caad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cab4:	89 03                	mov    DWORD PTR [ebx],eax
c001cab6:	ba 00 00 00 00       	mov    edx,0x0
c001cabb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cabf:	85 c0                	test   eax,eax
c001cac1:	0f 95 06             	setne  BYTE PTR [esi]
c001cac4:	74 14                	je     c001cada <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cac6:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001cacc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cad3:	eb 05                	jmp    c001cada <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001cad5:	ba 04 00 00 00       	mov    edx,0x4
c001cada:	83 c4 14             	add    esp,0x14
c001cadd:	89 d0                	mov    eax,edx
c001cadf:	5b                   	pop    ebx
c001cae0:	5e                   	pop    esi
c001cae1:	c3                   	ret    

c001cae2 <ISO9660::openDir(char const*, void**)>:
c001cae2:	57                   	push   edi
c001cae3:	56                   	push   esi
c001cae4:	53                   	push   ebx
c001cae5:	83 ec 10             	sub    esp,0x10
c001cae8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001caec:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001caf0:	85 ff                	test   edi,edi
c001caf2:	74 7b                	je     c001cb6f <ISO9660::openDir(char const*, void**)+0x8d>
c001caf4:	85 f6                	test   esi,esi
c001caf6:	74 77                	je     c001cb6f <ISO9660::openDir(char const*, void**)+0x8d>
c001caf8:	83 ec 0c             	sub    esp,0xc
c001cafb:	6a 1c                	push   0x1c
c001cafd:	e8 0d cf fe ff       	call   c0009a0f <malloc>
c001cb02:	89 07                	mov    DWORD PTR [edi],eax
c001cb04:	89 c3                	mov    ebx,eax
c001cb06:	58                   	pop    eax
c001cb07:	8d 44 24 18          	lea    eax,[esp+0x18]
c001cb0b:	50                   	push   eax
c001cb0c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001cb0f:	50                   	push   eax
c001cb10:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb14:	50                   	push   eax
c001cb15:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb19:	50                   	push   eax
c001cb1a:	56                   	push   esi
c001cb1b:	e8 ce fd ff ff       	call   c001c8ee <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001cb20:	83 c4 20             	add    esp,0x20
c001cb23:	84 c0                	test   al,al
c001cb25:	74 07                	je     c001cb2e <ISO9660::openDir(char const*, void**)+0x4c>
c001cb27:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cb2c:	75 0b                	jne    c001cb39 <ISO9660::openDir(char const*, void**)+0x57>
c001cb2e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001cb32:	b8 01 00 00 00       	mov    eax,0x1
c001cb37:	eb 3b                	jmp    c001cb74 <ISO9660::openDir(char const*, void**)+0x92>
c001cb39:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb3d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001cb41:	89 03                	mov    DWORD PTR [ebx],eax
c001cb43:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001cb4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cb4e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001cb55:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001cb5c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001cb5f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001cb66:	8a 06                	mov    al,BYTE PTR [esi]
c001cb68:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001cb6b:	31 c0                	xor    eax,eax
c001cb6d:	eb 05                	jmp    c001cb74 <ISO9660::openDir(char const*, void**)+0x92>
c001cb6f:	b8 04 00 00 00       	mov    eax,0x4
c001cb74:	83 c4 10             	add    esp,0x10
c001cb77:	5b                   	pop    ebx
c001cb78:	5e                   	pop    esi
c001cb79:	5f                   	pop    edi
c001cb7a:	c3                   	ret    
c001cb7b:	90                   	nop

c001cb7c <ISO9660::ISO9660()>:
c001cb7c:	83 ec 0c             	sub    esp,0xc
c001cb7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb83:	83 ec 0c             	sub    esp,0xc
c001cb86:	50                   	push   eax
c001cb87:	e8 86 04 ff ff       	call   c000d012 <Filesystem::Filesystem()>
c001cb8c:	83 c4 10             	add    esp,0x10
c001cb8f:	ba 80 63 02 c0       	mov    edx,0xc0026380
c001cb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb98:	89 10                	mov    DWORD PTR [eax],edx
c001cb9a:	90                   	nop
c001cb9b:	83 c4 0c             	add    esp,0xc
c001cb9e:	c3                   	ret    
c001cb9f:	90                   	nop

c001cba0 <SoundCard::beginPlayback()>:
c001cba0:	c7 44 24 04 e0 63 02 c0 	mov    DWORD PTR [esp+0x4],0xc00263e0
c001cba8:	e9 f6 7d ff ff       	jmp    c00149a3 <Krnl::panic(char const*)>
c001cbad:	90                   	nop

c001cbae <SoundCard::stopPlayback()>:
c001cbae:	c7 44 24 04 14 64 02 c0 	mov    DWORD PTR [esp+0x4],0xc0026414
c001cbb6:	e9 e8 7d ff ff       	jmp    c00149a3 <Krnl::panic(char const*)>
c001cbbb:	90                   	nop

c001cbbc <SoundCard::SoundCard(char const*)>:
c001cbbc:	83 ec 1c             	sub    esp,0x1c
c001cbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbc3:	83 ec 08             	sub    esp,0x8
c001cbc6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbca:	50                   	push   eax
c001cbcb:	e8 a2 18 ff ff       	call   c000e472 <Device::Device(char const*)>
c001cbd0:	83 c4 10             	add    esp,0x10
c001cbd3:	ba ac 64 02 c0       	mov    edx,0xc00264ac
c001cbd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbdc:	89 10                	mov    DWORD PTR [eax],edx
c001cbde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbe2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cbe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbed:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cbf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cbfb:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cc05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc09:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cc13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc17:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cc21:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cc29:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cc2e:	7f 19                	jg     c001cc49 <SoundCard::SoundCard(char const*)+0x8d>
c001cc30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cc38:	83 c2 54             	add    edx,0x54
c001cc3b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cc43:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001cc47:	eb e0                	jmp    c001cc29 <SoundCard::SoundCard(char const*)+0x6d>
c001cc49:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc4d:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cc54:	90                   	nop
c001cc55:	83 c4 1c             	add    esp,0x1c
c001cc58:	c3                   	ret    
c001cc59:	90                   	nop

c001cc5a <SoundCard::~SoundCard()>:
c001cc5a:	83 ec 0c             	sub    esp,0xc
c001cc5d:	ba ac 64 02 c0       	mov    edx,0xc00264ac
c001cc62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc66:	89 10                	mov    DWORD PTR [eax],edx
c001cc68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc6c:	83 ec 0c             	sub    esp,0xc
c001cc6f:	50                   	push   eax
c001cc70:	e8 c7 14 ff ff       	call   c000e13c <Device::~Device()>
c001cc75:	83 c4 10             	add    esp,0x10
c001cc78:	90                   	nop
c001cc79:	83 c4 0c             	add    esp,0xc
c001cc7c:	c3                   	ret    
c001cc7d:	90                   	nop

c001cc7e <SoundCard::~SoundCard()>:
c001cc7e:	83 ec 0c             	sub    esp,0xc
c001cc81:	83 ec 0c             	sub    esp,0xc
c001cc84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc88:	e8 cd ff ff ff       	call   c001cc5a <SoundCard::~SoundCard()>
c001cc8d:	83 c4 10             	add    esp,0x10
c001cc90:	83 ec 08             	sub    esp,0x8
c001cc93:	68 e8 01 00 00       	push   0x1e8
c001cc98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc9c:	e8 79 ff fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c001cca1:	83 c4 10             	add    esp,0x10
c001cca4:	83 c4 0c             	add    esp,0xc
c001cca7:	c3                   	ret    

c001cca8 <SoundCard::configureRates(int, int, int)>:
c001cca8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccac:	31 c0                	xor    eax,eax
c001ccae:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ccb5:	75 20                	jne    c001ccd7 <SoundCard::configureRates(int, int, int)+0x2f>
c001ccb7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ccbb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ccc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccc5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cccf:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ccd5:	b0 01                	mov    al,0x1
c001ccd7:	c3                   	ret    

c001ccd8 <SoundCard::getSamples16(int, short*)>:
c001ccd8:	55                   	push   ebp
c001ccd9:	57                   	push   edi
c001ccda:	31 ff                	xor    edi,edi
c001ccdc:	56                   	push   esi
c001ccdd:	53                   	push   ebx
c001ccde:	31 db                	xor    ebx,ebx
c001cce0:	83 ec 18             	sub    esp,0x18
c001cce3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cce7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cceb:	68 47 64 02 c0       	push   0xc0026447
c001ccf0:	e8 06 00 ff ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ccf5:	83 c4 0c             	add    esp,0xc
c001ccf8:	8d 04 36             	lea    eax,[esi+esi*1]
c001ccfb:	50                   	push   eax
c001ccfc:	6a 00                	push   0x0
c001ccfe:	55                   	push   ebp
c001ccff:	e8 80 39 fe ff       	call   c0000684 <memset>
c001cd04:	83 c4 10             	add    esp,0x10
c001cd07:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd0b:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cd12:	85 c0                	test   eax,eax
c001cd14:	74 1b                	je     c001cd31 <SoundCard::getSamples16(int, short*)+0x59>
c001cd16:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cd1a:	75 15                	jne    c001cd31 <SoundCard::getSamples16(int, short*)+0x59>
c001cd1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cd20:	55                   	push   ebp
c001cd21:	56                   	push   esi
c001cd22:	50                   	push   eax
c001cd23:	e8 58 03 00 00       	call   c001d080 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cd28:	83 c4 10             	add    esp,0x10
c001cd2b:	39 c7                	cmp    edi,eax
c001cd2d:	7d 02                	jge    c001cd31 <SoundCard::getSamples16(int, short*)+0x59>
c001cd2f:	89 c7                	mov    edi,eax
c001cd31:	43                   	inc    ebx
c001cd32:	83 fb 20             	cmp    ebx,0x20
c001cd35:	75 d0                	jne    c001cd07 <SoundCard::getSamples16(int, short*)+0x2f>
c001cd37:	83 c4 0c             	add    esp,0xc
c001cd3a:	89 f8                	mov    eax,edi
c001cd3c:	5b                   	pop    ebx
c001cd3d:	5e                   	pop    esi
c001cd3e:	5f                   	pop    edi
c001cd3f:	5d                   	pop    ebp
c001cd40:	c3                   	ret    
c001cd41:	90                   	nop

c001cd42 <SoundCard::getSamples32(int, int*)>:
c001cd42:	55                   	push   ebp
c001cd43:	57                   	push   edi
c001cd44:	31 ff                	xor    edi,edi
c001cd46:	56                   	push   esi
c001cd47:	31 f6                	xor    esi,esi
c001cd49:	53                   	push   ebx
c001cd4a:	83 ec 10             	sub    esp,0x10
c001cd4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cd51:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cd55:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cd59:	c1 e0 02             	shl    eax,0x2
c001cd5c:	50                   	push   eax
c001cd5d:	6a 00                	push   0x0
c001cd5f:	55                   	push   ebp
c001cd60:	e8 1f 39 fe ff       	call   c0000684 <memset>
c001cd65:	83 c4 10             	add    esp,0x10
c001cd68:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001cd6f:	85 c0                	test   eax,eax
c001cd71:	74 1b                	je     c001cd8e <SoundCard::getSamples32(int, int*)+0x4c>
c001cd73:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cd77:	75 15                	jne    c001cd8e <SoundCard::getSamples32(int, int*)+0x4c>
c001cd79:	53                   	push   ebx
c001cd7a:	55                   	push   ebp
c001cd7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cd7f:	50                   	push   eax
c001cd80:	e8 f7 03 00 00       	call   c001d17c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001cd85:	83 c4 10             	add    esp,0x10
c001cd88:	39 c6                	cmp    esi,eax
c001cd8a:	7d 02                	jge    c001cd8e <SoundCard::getSamples32(int, int*)+0x4c>
c001cd8c:	89 c6                	mov    esi,eax
c001cd8e:	47                   	inc    edi
c001cd8f:	83 ff 20             	cmp    edi,0x20
c001cd92:	75 d4                	jne    c001cd68 <SoundCard::getSamples32(int, int*)+0x26>
c001cd94:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001cd9a:	85 f6                	test   esi,esi
c001cd9c:	75 0f                	jne    c001cdad <SoundCard::getSamples32(int, int*)+0x6b>
c001cd9e:	84 c0                	test   al,al
c001cda0:	74 1b                	je     c001cdbd <SoundCard::getSamples32(int, int*)+0x7b>
c001cda2:	83 ec 0c             	sub    esp,0xc
c001cda5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cda7:	53                   	push   ebx
c001cda8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001cdab:	eb 0d                	jmp    c001cdba <SoundCard::getSamples32(int, int*)+0x78>
c001cdad:	84 c0                	test   al,al
c001cdaf:	75 0c                	jne    c001cdbd <SoundCard::getSamples32(int, int*)+0x7b>
c001cdb1:	83 ec 0c             	sub    esp,0xc
c001cdb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdb6:	53                   	push   ebx
c001cdb7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001cdba:	83 c4 10             	add    esp,0x10
c001cdbd:	83 c4 0c             	add    esp,0xc
c001cdc0:	89 f0                	mov    eax,esi
c001cdc2:	5b                   	pop    ebx
c001cdc3:	5e                   	pop    esi
c001cdc4:	5f                   	pop    edi
c001cdc5:	5d                   	pop    ebp
c001cdc6:	c3                   	ret    
c001cdc7:	90                   	nop

c001cdc8 <SoundCard::addChannel(SoundPort*)>:
c001cdc8:	56                   	push   esi
c001cdc9:	53                   	push   ebx
c001cdca:	53                   	push   ebx
c001cdcb:	31 db                	xor    ebx,ebx
c001cdcd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cdd1:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001cdd9:	74 27                	je     c001ce02 <SoundCard::addChannel(SoundPort*)+0x3a>
c001cddb:	43                   	inc    ebx
c001cddc:	83 fb 20             	cmp    ebx,0x20
c001cddf:	75 f0                	jne    c001cdd1 <SoundCard::addChannel(SoundPort*)+0x9>
c001cde1:	83 ec 0c             	sub    esp,0xc
c001cde4:	83 cb ff             	or     ebx,0xffffffff
c001cde7:	68 6d 64 02 c0       	push   0xc002646d
c001cdec:	e8 0a ff fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001cdf1:	c7 04 24 66 64 02 c0 	mov    DWORD PTR [esp],0xc0026466
c001cdf8:	e8 a6 7b ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001cdfd:	83 c4 10             	add    esp,0x10
c001ce00:	eb 1b                	jmp    c001ce1d <SoundCard::addChannel(SoundPort*)+0x55>
c001ce02:	51                   	push   ecx
c001ce03:	51                   	push   ecx
c001ce04:	53                   	push   ebx
c001ce05:	68 85 64 02 c0       	push   0xc0026485
c001ce0a:	e8 ec fe fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ce0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ce13:	83 c4 10             	add    esp,0x10
c001ce16:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001ce1d:	89 d8                	mov    eax,ebx
c001ce1f:	5a                   	pop    edx
c001ce20:	5b                   	pop    ebx
c001ce21:	5e                   	pop    esi
c001ce22:	c3                   	ret    
c001ce23:	90                   	nop

c001ce24 <SoundCard::removeChannel(int)>:
c001ce24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce2c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001ce37:	c3                   	ret    

c001ce38 <SoundPort::SoundPort(int, int, int, int)>:
c001ce38:	83 ec 0c             	sub    esp,0xc
c001ce3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce3f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ce46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce4a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ce4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce52:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce56:	89 10                	mov    DWORD PTR [eax],edx
c001ce58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce5c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ce60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ce63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce67:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ce6b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ce6e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001ce73:	75 13                	jne    c001ce88 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001ce75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce79:	8b 00                	mov    eax,DWORD PTR [eax]
c001ce7b:	05 a0 0f 00 00       	add    eax,0xfa0
c001ce80:	01 c0                	add    eax,eax
c001ce82:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce86:	66 90                	xchg   ax,ax
c001ce88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ce90:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ce93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce97:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ce9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cea2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cea5:	c1 e0 02             	shl    eax,0x2
c001cea8:	83 ec 0c             	sub    esp,0xc
c001ceab:	50                   	push   eax
c001ceac:	e8 5e cb fe ff       	call   c0009a0f <malloc>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	89 c2                	mov    edx,eax
c001ceb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ceba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cebd:	90                   	nop
c001cebe:	83 c4 0c             	add    esp,0xc
c001cec1:	c3                   	ret    
c001cec2:	66 90                	xchg   ax,ax

c001cec4 <SoundPort::~SoundPort()>:
c001cec4:	83 ec 0c             	sub    esp,0xc
c001cec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cecb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cece:	85 c0                	test   eax,eax
c001ced0:	74 1e                	je     c001cef0 <SoundPort::~SoundPort()+0x2c>
c001ced2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ced6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ced9:	83 ec 0c             	sub    esp,0xc
c001cedc:	50                   	push   eax
c001cedd:	e8 3d cb fe ff       	call   c0009a1f <free>
c001cee2:	83 c4 10             	add    esp,0x10
c001cee5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee9:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cef0:	90                   	nop
c001cef1:	83 c4 0c             	add    esp,0xc
c001cef4:	c3                   	ret    
c001cef5:	90                   	nop
c001cef6:	66 90                	xchg   ax,ax

c001cef8 <SoundPort::unpause()>:
c001cef8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cefc:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001cf00:	c3                   	ret    
c001cf01:	90                   	nop
c001cf02:	66 90                	xchg   ax,ax

c001cf04 <SoundPort::pause()>:
c001cf04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf08:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cf0c:	c3                   	ret    
c001cf0d:	90                   	nop
c001cf0e:	66 90                	xchg   ax,ax

c001cf10 <SoundPort::getBufferUsed()>:
c001cf10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf14:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001cf17:	c3                   	ret    

c001cf18 <SoundPort::getBufferSize()>:
c001cf18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cf1c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cf1f:	c3                   	ret    

c001cf20 <SoundPort::buffer16(short*, int)>:
c001cf20:	55                   	push   ebp
c001cf21:	57                   	push   edi
c001cf22:	56                   	push   esi
c001cf23:	53                   	push   ebx
c001cf24:	83 ec 1c             	sub    esp,0x1c
c001cf27:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cf2b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001cf2f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cf32:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cf35:	0f 84 85 00 00 00    	je     c001cfc0 <SoundPort::buffer16(short*, int)+0xa0>
c001cf3b:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001cf3f:	85 c9                	test   ecx,ecx
c001cf41:	7e 7d                	jle    c001cfc0 <SoundPort::buffer16(short*, int)+0xa0>
c001cf43:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001cf47:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cf4a:	c1 e1 0f             	shl    ecx,0xf
c001cf4d:	8d 70 01             	lea    esi,[eax+0x1]
c001cf50:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cf53:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001cf56:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf59:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf5c:	74 6e                	je     c001cfcc <SoundPort::buffer16(short*, int)+0xac>
c001cf5e:	31 f6                	xor    esi,esi
c001cf60:	eb 22                	jmp    c001cf84 <SoundPort::buffer16(short*, int)+0x64>
c001cf62:	66 90                	xchg   ax,ax
c001cf64:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001cf69:	8d 79 01             	lea    edi,[ecx+0x1]
c001cf6c:	c1 e3 0f             	shl    ebx,0xf
c001cf6f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001cf72:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001cf75:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001cf78:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf7b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf7e:	74 1c                	je     c001cf9c <SoundPort::buffer16(short*, int)+0x7c>
c001cf80:	89 c6                	mov    esi,eax
c001cf82:	66 90                	xchg   ax,ax
c001cf84:	8d 46 01             	lea    eax,[esi+0x1]
c001cf87:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001cf8b:	75 d7                	jne    c001cf64 <SoundPort::buffer16(short*, int)+0x44>
c001cf8d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf91:	83 c4 1c             	add    esp,0x1c
c001cf94:	5b                   	pop    ebx
c001cf95:	5e                   	pop    esi
c001cf96:	5f                   	pop    edi
c001cf97:	5d                   	pop    ebp
c001cf98:	c3                   	ret    
c001cf99:	8d 76 00             	lea    esi,[esi+0x0]
c001cf9c:	8d 46 02             	lea    eax,[esi+0x2]
c001cf9f:	90                   	nop
c001cfa0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfa4:	83 ec 0c             	sub    esp,0xc
c001cfa7:	68 d8 64 02 c0       	push   0xc00264d8
c001cfac:	e8 4a fd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001cfb1:	83 c4 10             	add    esp,0x10
c001cfb4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cfb8:	83 c4 1c             	add    esp,0x1c
c001cfbb:	5b                   	pop    ebx
c001cfbc:	5e                   	pop    esi
c001cfbd:	5f                   	pop    edi
c001cfbe:	5d                   	pop    ebp
c001cfbf:	c3                   	ret    
c001cfc0:	83 c4 1c             	add    esp,0x1c
c001cfc3:	31 c0                	xor    eax,eax
c001cfc5:	5b                   	pop    ebx
c001cfc6:	5e                   	pop    esi
c001cfc7:	5f                   	pop    edi
c001cfc8:	5d                   	pop    ebp
c001cfc9:	c3                   	ret    
c001cfca:	66 90                	xchg   ax,ax
c001cfcc:	b8 01 00 00 00       	mov    eax,0x1
c001cfd1:	eb cd                	jmp    c001cfa0 <SoundPort::buffer16(short*, int)+0x80>
c001cfd3:	90                   	nop

c001cfd4 <SoundPort::buffer32(int*, int)>:
c001cfd4:	55                   	push   ebp
c001cfd5:	57                   	push   edi
c001cfd6:	56                   	push   esi
c001cfd7:	53                   	push   ebx
c001cfd8:	83 ec 1c             	sub    esp,0x1c
c001cfdb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cfdf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cfe3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cfe6:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cfea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfee:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cff1:	74 79                	je     c001d06c <SoundPort::buffer32(int*, int)+0x98>
c001cff3:	85 c0                	test   eax,eax
c001cff5:	7e 75                	jle    c001d06c <SoundPort::buffer32(int*, int)+0x98>
c001cff7:	8d 71 01             	lea    esi,[ecx+0x1]
c001cffa:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cffd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001d000:	8b 37                	mov    esi,DWORD PTR [edi]
c001d002:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001d005:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d008:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d00b:	74 6b                	je     c001d078 <SoundPort::buffer32(int*, int)+0xa4>
c001d00d:	31 f6                	xor    esi,esi
c001d00f:	eb 1f                	jmp    c001d030 <SoundPort::buffer32(int*, int)+0x5c>
c001d011:	8d 76 00             	lea    esi,[esi+0x0]
c001d014:	8d 69 01             	lea    ebp,[ecx+0x1]
c001d017:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001d01a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001d01d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d020:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001d024:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001d027:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001d02a:	74 1c                	je     c001d048 <SoundPort::buffer32(int*, int)+0x74>
c001d02c:	89 de                	mov    esi,ebx
c001d02e:	66 90                	xchg   ax,ax
c001d030:	8d 5e 01             	lea    ebx,[esi+0x1]
c001d033:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001d037:	75 db                	jne    c001d014 <SoundPort::buffer32(int*, int)+0x40>
c001d039:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d03d:	83 c4 1c             	add    esp,0x1c
c001d040:	5b                   	pop    ebx
c001d041:	5e                   	pop    esi
c001d042:	5f                   	pop    edi
c001d043:	5d                   	pop    ebp
c001d044:	c3                   	ret    
c001d045:	8d 76 00             	lea    esi,[esi+0x0]
c001d048:	8d 46 02             	lea    eax,[esi+0x2]
c001d04b:	90                   	nop
c001d04c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d050:	83 ec 0c             	sub    esp,0xc
c001d053:	68 f3 64 02 c0       	push   0xc00264f3
c001d058:	e8 9e fc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d05d:	83 c4 10             	add    esp,0x10
c001d060:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d064:	83 c4 1c             	add    esp,0x1c
c001d067:	5b                   	pop    ebx
c001d068:	5e                   	pop    esi
c001d069:	5f                   	pop    edi
c001d06a:	5d                   	pop    ebp
c001d06b:	c3                   	ret    
c001d06c:	83 c4 1c             	add    esp,0x1c
c001d06f:	31 c0                	xor    eax,eax
c001d071:	5b                   	pop    ebx
c001d072:	5e                   	pop    esi
c001d073:	5f                   	pop    edi
c001d074:	5d                   	pop    ebp
c001d075:	c3                   	ret    
c001d076:	66 90                	xchg   ax,ax
c001d078:	b8 01 00 00 00       	mov    eax,0x1
c001d07d:	eb cd                	jmp    c001d04c <SoundPort::buffer32(int*, int)+0x78>
c001d07f:	90                   	nop

c001d080 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001d080:	57                   	push   edi
c001d081:	56                   	push   esi
c001d082:	53                   	push   ebx
c001d083:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d087:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001d08b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d091:	39 03                	cmp    DWORD PTR [ebx],eax
c001d093:	74 13                	je     c001d0a8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d095:	83 ec 0c             	sub    esp,0xc
c001d098:	68 48 65 02 c0       	push   0xc0026548
c001d09d:	e8 01 79 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001d0a2:	83 c4 10             	add    esp,0x10
c001d0a5:	8d 76 00             	lea    esi,[esi+0x0]
c001d0a8:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d0ae:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d0b1:	74 11                	je     c001d0c4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d0b3:	83 ec 0c             	sub    esp,0xc
c001d0b6:	68 0e 65 02 c0       	push   0xc002650e
c001d0bb:	e8 e3 78 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001d0c0:	83 c4 10             	add    esp,0x10
c001d0c3:	90                   	nop
c001d0c4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d0ca:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d0cd:	74 11                	je     c001d0e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d0cf:	83 ec 0c             	sub    esp,0xc
c001d0d2:	68 0e 65 02 c0       	push   0xc002650e
c001d0d7:	e8 c7 78 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001d0dc:	83 c4 10             	add    esp,0x10
c001d0df:	90                   	nop
c001d0e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0e3:	89 c6                	mov    esi,eax
c001d0e5:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001d0e9:	7e 05                	jle    c001d0f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d0eb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d0ef:	90                   	nop
c001d0f0:	85 f6                	test   esi,esi
c001d0f2:	7e 30                	jle    c001d124 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001d0f4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d0f8:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d0fb:	31 c9                	xor    ecx,ecx
c001d0fd:	01 d7                	add    edi,edx
c001d0ff:	90                   	nop
c001d100:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d103:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d106:	85 c0                	test   eax,eax
c001d108:	79 06                	jns    c001d110 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d10a:	05 ff 7f 00 00       	add    eax,0x7fff
c001d10f:	90                   	nop
c001d110:	c1 f8 0f             	sar    eax,0xf
c001d113:	83 c1 04             	add    ecx,0x4
c001d116:	66 01 02             	add    WORD PTR [edx],ax
c001d119:	83 c2 02             	add    edx,0x2
c001d11c:	39 d7                	cmp    edi,edx
c001d11e:	75 e0                	jne    c001d100 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d120:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d123:	90                   	nop
c001d124:	56                   	push   esi
c001d125:	89 c2                	mov    edx,eax
c001d127:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001d12e:	29 f2                	sub    edx,esi
c001d130:	52                   	push   edx
c001d131:	50                   	push   eax
c001d132:	68 68 65 02 c0       	push   0xc0026568
c001d137:	e8 bf fb fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d13c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d13f:	50                   	push   eax
c001d140:	01 f8                	add    eax,edi
c001d142:	50                   	push   eax
c001d143:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d146:	29 f0                	sub    eax,esi
c001d148:	c1 e0 02             	shl    eax,0x2
c001d14b:	50                   	push   eax
c001d14c:	68 98 65 02 c0       	push   0xc0026598
c001d151:	e8 a5 fb fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001d156:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d159:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d15c:	83 c4 1c             	add    esp,0x1c
c001d15f:	01 d7                	add    edi,edx
c001d161:	29 f0                	sub    eax,esi
c001d163:	c1 e0 02             	shl    eax,0x2
c001d166:	50                   	push   eax
c001d167:	57                   	push   edi
c001d168:	52                   	push   edx
c001d169:	e8 4e 34 fe ff       	call   c00005bc <memmove>
c001d16e:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001d171:	83 c4 10             	add    esp,0x10
c001d174:	89 f0                	mov    eax,esi
c001d176:	5b                   	pop    ebx
c001d177:	5e                   	pop    esi
c001d178:	5f                   	pop    edi
c001d179:	c3                   	ret    
c001d17a:	66 90                	xchg   ax,ax

c001d17c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d17c:	57                   	push   edi
c001d17d:	56                   	push   esi
c001d17e:	53                   	push   ebx
c001d17f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d183:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d187:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d18b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d191:	39 06                	cmp    DWORD PTR [esi],eax
c001d193:	74 13                	je     c001d1a8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d195:	83 ec 0c             	sub    esp,0xc
c001d198:	68 bc 65 02 c0       	push   0xc00265bc
c001d19d:	e8 01 78 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001d1a2:	83 c4 10             	add    esp,0x10
c001d1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001d1a8:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d1ae:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d1b1:	74 11                	je     c001d1c4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d1b3:	83 ec 0c             	sub    esp,0xc
c001d1b6:	68 2a 65 02 c0       	push   0xc002652a
c001d1bb:	e8 e3 77 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001d1c0:	83 c4 10             	add    esp,0x10
c001d1c3:	90                   	nop
c001d1c4:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d1ca:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d1cd:	74 11                	je     c001d1e0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d1cf:	83 ec 0c             	sub    esp,0xc
c001d1d2:	68 2a 65 02 c0       	push   0xc002652a
c001d1d7:	e8 c7 77 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001d1dc:	83 c4 10             	add    esp,0x10
c001d1df:	90                   	nop
c001d1e0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d1e3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d1e7:	7e 07                	jle    c001d1f0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d1e9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d1ed:	8d 76 00             	lea    esi,[esi+0x0]
c001d1f0:	85 ff                	test   edi,edi
c001d1f2:	7e 1c                	jle    c001d210 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d1f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d1fb:	31 c0                	xor    eax,eax
c001d1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001d200:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d203:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d206:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d209:	83 c0 04             	add    eax,0x4
c001d20c:	39 c1                	cmp    ecx,eax
c001d20e:	75 f0                	jne    c001d200 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d210:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d213:	50                   	push   eax
c001d214:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d217:	29 f8                	sub    eax,edi
c001d219:	c1 e0 02             	shl    eax,0x2
c001d21c:	50                   	push   eax
c001d21d:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d220:	50                   	push   eax
c001d221:	52                   	push   edx
c001d222:	e8 95 33 fe ff       	call   c00005bc <memmove>
c001d227:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001d22a:	83 c4 10             	add    esp,0x10
c001d22d:	89 f8                	mov    eax,edi
c001d22f:	5b                   	pop    ebx
c001d230:	5e                   	pop    esi
c001d231:	5f                   	pop    edi
c001d232:	c3                   	ret    
c001d233:	90                   	nop

c001d234 <PCI::open(int, int, void*)>:
c001d234:	83 ec 18             	sub    esp,0x18
c001d237:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d23b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d23f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d245:	8b 10                	mov    edx,DWORD PTR [eax]
c001d247:	50                   	push   eax
c001d248:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d24b:	31 c0                	xor    eax,eax
c001d24d:	83 c4 1c             	add    esp,0x1c
c001d250:	c3                   	ret    
c001d251:	90                   	nop

c001d252 <PCI::close(int, int, void*)>:
c001d252:	31 c0                	xor    eax,eax
c001d254:	c3                   	ret    
c001d255:	90                   	nop

c001d256 <PCI::PCI()>:
c001d256:	83 ec 0c             	sub    esp,0xc
c001d259:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d25d:	83 ec 08             	sub    esp,0x8
c001d260:	68 db 65 02 c0       	push   0xc00265db
c001d265:	50                   	push   eax
c001d266:	e8 69 08 ff ff       	call   c000dad4 <Bus::Bus(char const*)>
c001d26b:	83 c4 10             	add    esp,0x10
c001d26e:	ba b0 67 02 c0       	mov    edx,0xc00267b0
c001d273:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d277:	89 10                	mov    DWORD PTR [eax],edx
c001d279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d27d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d28b:	a3 40 9e 02 c0       	mov    ds:0xc0029e40,eax
c001d290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d294:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d29a:	0f b6 d0             	movzx  edx,al
c001d29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2a1:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2ac:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d2b2:	0f b6 d0             	movzx  edx,al
c001d2b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2b9:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d2be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2c2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d2c8:	8d 50 01             	lea    edx,[eax+0x1]
c001d2cb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2cf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d2d5:	0f b6 d0             	movzx  edx,al
c001d2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2dc:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d2e0:	83 c9 c0             	or     ecx,0xffffffc0
c001d2e3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d2e7:	90                   	nop
c001d2e8:	83 c4 0c             	add    esp,0xc
c001d2eb:	c3                   	ret    

c001d2ec <PCI::readBAR8(unsigned int, int)>:
c001d2ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d2f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2f4:	f6 c2 01             	test   dl,0x1
c001d2f7:	74 07                	je     c001d300 <PCI::readBAR8(unsigned int, int)+0x14>
c001d2f9:	83 e2 fc             	and    edx,0xfffffffc
c001d2fc:	01 c2                	add    edx,eax
c001d2fe:	ec                   	in     al,dx
c001d2ff:	c3                   	ret    
c001d300:	83 e2 f0             	and    edx,0xfffffff0
c001d303:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d306:	c3                   	ret    
c001d307:	90                   	nop

c001d308 <PCI::readBAR16(unsigned int, int)>:
c001d308:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d30c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d310:	f6 c2 01             	test   dl,0x1
c001d313:	74 08                	je     c001d31d <PCI::readBAR16(unsigned int, int)+0x15>
c001d315:	83 e2 fc             	and    edx,0xfffffffc
c001d318:	01 c2                	add    edx,eax
c001d31a:	66 ed                	in     ax,dx
c001d31c:	c3                   	ret    
c001d31d:	83 e2 f0             	and    edx,0xfffffff0
c001d320:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d324:	c3                   	ret    
c001d325:	90                   	nop

c001d326 <PCI::readBAR32(unsigned int, int)>:
c001d326:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d32a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d32e:	f6 c2 01             	test   dl,0x1
c001d331:	74 07                	je     c001d33a <PCI::readBAR32(unsigned int, int)+0x14>
c001d333:	83 e2 fc             	and    edx,0xfffffffc
c001d336:	01 c2                	add    edx,eax
c001d338:	ed                   	in     eax,dx
c001d339:	c3                   	ret    
c001d33a:	83 e2 f0             	and    edx,0xfffffff0
c001d33d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d340:	c3                   	ret    
c001d341:	90                   	nop

c001d342 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d342:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d346:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d34a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d34e:	f6 c2 01             	test   dl,0x1
c001d351:	74 07                	je     c001d35a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d353:	83 e2 fc             	and    edx,0xfffffffc
c001d356:	01 ca                	add    edx,ecx
c001d358:	ee                   	out    dx,al
c001d359:	c3                   	ret    
c001d35a:	83 e2 f0             	and    edx,0xfffffff0
c001d35d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d360:	c3                   	ret    
c001d361:	90                   	nop

c001d362 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d362:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d366:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d36a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d36e:	f6 c2 01             	test   dl,0x1
c001d371:	74 08                	je     c001d37b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d373:	83 e2 fc             	and    edx,0xfffffffc
c001d376:	01 ca                	add    edx,ecx
c001d378:	66 ef                	out    dx,ax
c001d37a:	c3                   	ret    
c001d37b:	83 e2 f0             	and    edx,0xfffffff0
c001d37e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d382:	c3                   	ret    
c001d383:	90                   	nop

c001d384 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d384:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d38c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d390:	f6 c2 01             	test   dl,0x1
c001d393:	74 07                	je     c001d39c <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d395:	83 e2 fc             	and    edx,0xfffffffc
c001d398:	01 ca                	add    edx,ecx
c001d39a:	ef                   	out    dx,eax
c001d39b:	c3                   	ret    
c001d39c:	83 e2 f0             	and    edx,0xfffffff0
c001d39f:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d3a2:	c3                   	ret    
c001d3a3:	90                   	nop

c001d3a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d3a4:	55                   	push   ebp
c001d3a5:	57                   	push   edi
c001d3a6:	56                   	push   esi
c001d3a7:	53                   	push   ebx
c001d3a8:	83 ec 0c             	sub    esp,0xc
c001d3ab:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d3af:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d3b3:	89 f0                	mov    eax,esi
c001d3b5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d3b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d3bd:	3c 07                	cmp    al,0x7
c001d3bf:	76 10                	jbe    c001d3d1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d3c1:	83 ec 0c             	sub    esp,0xc
c001d3c4:	68 e3 65 02 c0       	push   0xc00265e3
c001d3c9:	e8 d5 75 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001d3ce:	83 c4 10             	add    esp,0x10
c001d3d1:	80 fb 0f             	cmp    bl,0xf
c001d3d4:	76 10                	jbe    c001d3e6 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001d3d6:	83 ec 0c             	sub    esp,0xc
c001d3d9:	68 13 66 02 c0       	push   0xc0026613
c001d3de:	e8 c0 75 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001d3e3:	83 c4 10             	add    esp,0x10
c001d3e6:	8d 04 36             	lea    eax,[esi+esi*1]
c001d3e9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d3ee:	83 c8 f0             	or     eax,0xfffffff0
c001d3f1:	ee                   	out    dx,al
c001d3f2:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d3f7:	89 e8                	mov    eax,ebp
c001d3f9:	ee                   	out    dx,al
c001d3fa:	83 c4 0c             	add    esp,0xc
c001d3fd:	89 d8                	mov    eax,ebx
c001d3ff:	66 81 e7 fc 00       	and    di,0xfc
c001d404:	5b                   	pop    ebx
c001d405:	c1 e0 08             	shl    eax,0x8
c001d408:	5e                   	pop    esi
c001d409:	09 f8                	or     eax,edi
c001d40b:	5f                   	pop    edi
c001d40c:	66 0d 00 c0          	or     ax,0xc000
c001d410:	5d                   	pop    ebp
c001d411:	c3                   	ret    

c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d412:	57                   	push   edi
c001d413:	56                   	push   esi
c001d414:	53                   	push   ebx
c001d415:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d419:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d41d:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d423:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d427:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d42b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d42f:	83 ff 01             	cmp    edi,0x1
c001d432:	75 3e                	jne    c001d472 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001d434:	89 de                	mov    esi,ebx
c001d436:	0f b6 c0             	movzx  eax,al
c001d439:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d43f:	c1 e0 10             	shl    eax,0x10
c001d442:	0f b6 c9             	movzx  ecx,cl
c001d445:	09 f0                	or     eax,esi
c001d447:	c1 e1 08             	shl    ecx,0x8
c001d44a:	0f b6 d2             	movzx  edx,dl
c001d44d:	09 c8                	or     eax,ecx
c001d44f:	c1 e2 0b             	shl    edx,0xb
c001d452:	09 d0                	or     eax,edx
c001d454:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d459:	0d 00 00 00 80       	or     eax,0x80000000
c001d45e:	ef                   	out    dx,eax
c001d45f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d464:	ed                   	in     eax,dx
c001d465:	83 e3 02             	and    ebx,0x2
c001d468:	0f b6 cb             	movzx  ecx,bl
c001d46b:	c1 e1 03             	shl    ecx,0x3
c001d46e:	d3 e8                	shr    eax,cl
c001d470:	eb 43                	jmp    c001d4b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d472:	83 ff 02             	cmp    edi,0x2
c001d475:	75 2c                	jne    c001d4a3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001d477:	83 ec 0c             	sub    esp,0xc
c001d47a:	0f b6 c9             	movzx  ecx,cl
c001d47d:	0f b6 d2             	movzx  edx,dl
c001d480:	0f b6 fb             	movzx  edi,bl
c001d483:	0f b6 c0             	movzx  eax,al
c001d486:	57                   	push   edi
c001d487:	51                   	push   ecx
c001d488:	52                   	push   edx
c001d489:	50                   	push   eax
c001d48a:	56                   	push   esi
c001d48b:	e8 14 ff ff ff       	call   c001d3a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d490:	89 c2                	mov    edx,eax
c001d492:	ed                   	in     eax,dx
c001d493:	83 e3 02             	and    ebx,0x2
c001d496:	83 c4 20             	add    esp,0x20
c001d499:	0f b6 cb             	movzx  ecx,bl
c001d49c:	c1 e1 03             	shl    ecx,0x3
c001d49f:	d3 e8                	shr    eax,cl
c001d4a1:	eb 12                	jmp    c001d4b5 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001d4a3:	83 ec 0c             	sub    esp,0xc
c001d4a6:	68 43 66 02 c0       	push   0xc0026643
c001d4ab:	e8 f3 74 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001d4b0:	83 c4 10             	add    esp,0x10
c001d4b3:	31 c0                	xor    eax,eax
c001d4b5:	5b                   	pop    ebx
c001d4b6:	5e                   	pop    esi
c001d4b7:	5f                   	pop    edi
c001d4b8:	c3                   	ret    
c001d4b9:	90                   	nop

c001d4ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d4ba:	83 ec 18             	sub    esp,0x18
c001d4bd:	6a 00                	push   0x0
c001d4bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4c4:	50                   	push   eax
c001d4c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4ca:	50                   	push   eax
c001d4cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4d0:	50                   	push   eax
c001d4d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4d5:	e8 38 ff ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4da:	83 c4 2c             	add    esp,0x2c
c001d4dd:	c3                   	ret    

c001d4de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d4de:	83 ec 18             	sub    esp,0x18
c001d4e1:	6a 0e                	push   0xe
c001d4e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4e8:	50                   	push   eax
c001d4e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4ee:	50                   	push   eax
c001d4ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4f4:	50                   	push   eax
c001d4f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4f9:	e8 14 ff ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4fe:	83 c4 2c             	add    esp,0x2c
c001d501:	0f b6 c0             	movzx  eax,al
c001d504:	c3                   	ret    
c001d505:	90                   	nop

c001d506 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d506:	55                   	push   ebp
c001d507:	57                   	push   edi
c001d508:	56                   	push   esi
c001d509:	53                   	push   ebx
c001d50a:	83 ec 18             	sub    esp,0x18
c001d50d:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d512:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d517:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d51c:	6a 0a                	push   0xa
c001d51e:	56                   	push   esi
c001d51f:	55                   	push   ebp
c001d520:	57                   	push   edi
c001d521:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d525:	e8 e8 fe ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d52a:	83 c4 14             	add    esp,0x14
c001d52d:	89 c3                	mov    ebx,eax
c001d52f:	6a 0a                	push   0xa
c001d531:	0f b6 db             	movzx  ebx,bl
c001d534:	56                   	push   esi
c001d535:	55                   	push   ebp
c001d536:	57                   	push   edi
c001d537:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d53b:	e8 d2 fe ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d540:	83 c4 2c             	add    esp,0x2c
c001d543:	25 00 ff 00 00       	and    eax,0xff00
c001d548:	09 d8                	or     eax,ebx
c001d54a:	5b                   	pop    ebx
c001d54b:	5e                   	pop    esi
c001d54c:	5f                   	pop    edi
c001d54d:	5d                   	pop    ebp
c001d54e:	c3                   	ret    
c001d54f:	90                   	nop

c001d550 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d550:	83 ec 18             	sub    esp,0x18
c001d553:	6a 08                	push   0x8
c001d555:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d55a:	50                   	push   eax
c001d55b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d560:	50                   	push   eax
c001d561:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d566:	50                   	push   eax
c001d567:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d56b:	e8 a2 fe ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d570:	83 c4 2c             	add    esp,0x2c
c001d573:	0f b6 c4             	movzx  eax,ah
c001d576:	c3                   	ret    
c001d577:	90                   	nop

c001d578 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d578:	83 ec 18             	sub    esp,0x18
c001d57b:	6a 08                	push   0x8
c001d57d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d582:	50                   	push   eax
c001d583:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d588:	50                   	push   eax
c001d589:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d58e:	50                   	push   eax
c001d58f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d593:	e8 7a fe ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d598:	83 c4 2c             	add    esp,0x2c
c001d59b:	c3                   	ret    

c001d59c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d59c:	83 ec 18             	sub    esp,0x18
c001d59f:	6a 3c                	push   0x3c
c001d5a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5a6:	50                   	push   eax
c001d5a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5ac:	50                   	push   eax
c001d5ad:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5b2:	50                   	push   eax
c001d5b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5b7:	e8 56 fe ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5bc:	83 c4 2c             	add    esp,0x2c
c001d5bf:	c3                   	ret    

c001d5c0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d5c0:	83 ec 18             	sub    esp,0x18
c001d5c3:	6a 18                	push   0x18
c001d5c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5ca:	50                   	push   eax
c001d5cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5d0:	50                   	push   eax
c001d5d1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d5d6:	50                   	push   eax
c001d5d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d5db:	e8 32 fe ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5e0:	83 c4 2c             	add    esp,0x2c
c001d5e3:	0f b6 c4             	movzx  eax,ah
c001d5e6:	c3                   	ret    
c001d5e7:	90                   	nop

c001d5e8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d5e8:	55                   	push   ebp
c001d5e9:	57                   	push   edi
c001d5ea:	56                   	push   esi
c001d5eb:	53                   	push   ebx
c001d5ec:	83 ec 28             	sub    esp,0x28
c001d5ef:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d5f3:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d5f8:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d5fd:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d602:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d609:	8d 43 12             	lea    eax,[ebx+0x12]
c001d60c:	83 c3 10             	add    ebx,0x10
c001d60f:	0f b6 c0             	movzx  eax,al
c001d612:	0f b6 db             	movzx  ebx,bl
c001d615:	50                   	push   eax
c001d616:	51                   	push   ecx
c001d617:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d61b:	57                   	push   edi
c001d61c:	55                   	push   ebp
c001d61d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d621:	e8 ec fd ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d626:	83 c4 14             	add    esp,0x14
c001d629:	89 c6                	mov    esi,eax
c001d62b:	53                   	push   ebx
c001d62c:	c1 e6 10             	shl    esi,0x10
c001d62f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d633:	51                   	push   ecx
c001d634:	57                   	push   edi
c001d635:	55                   	push   ebp
c001d636:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d63a:	e8 d3 fd ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d63f:	83 c4 3c             	add    esp,0x3c
c001d642:	0f b7 c0             	movzx  eax,ax
c001d645:	5b                   	pop    ebx
c001d646:	09 f0                	or     eax,esi
c001d648:	5e                   	pop    esi
c001d649:	5f                   	pop    edi
c001d64a:	5d                   	pop    ebp
c001d64b:	c3                   	ret    

c001d64c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d64c:	55                   	push   ebp
c001d64d:	57                   	push   edi
c001d64e:	56                   	push   esi
c001d64f:	53                   	push   ebx
c001d650:	83 ec 0c             	sub    esp,0xc
c001d653:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d657:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d65b:	89 f5                	mov    ebp,esi
c001d65d:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d667:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d66b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d66f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d673:	83 f9 01             	cmp    ecx,0x1
c001d676:	75 5d                	jne    c001d6d5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d678:	0f b6 c8             	movzx  ecx,al
c001d67b:	0f b6 d2             	movzx  edx,dl
c001d67e:	c1 e1 10             	shl    ecx,0x10
c001d681:	c1 e2 0b             	shl    edx,0xb
c001d684:	89 f0                	mov    eax,esi
c001d686:	25 fc 00 00 00       	and    eax,0xfc
c001d68b:	09 c1                	or     ecx,eax
c001d68d:	89 e8                	mov    eax,ebp
c001d68f:	0f b6 c0             	movzx  eax,al
c001d692:	c1 e0 08             	shl    eax,0x8
c001d695:	09 c1                	or     ecx,eax
c001d697:	09 d1                	or     ecx,edx
c001d699:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d69e:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d6a4:	89 c8                	mov    eax,ecx
c001d6a6:	ef                   	out    dx,eax
c001d6a7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d6ac:	ed                   	in     eax,dx
c001d6ad:	0f b7 db             	movzx  ebx,bx
c001d6b0:	83 e6 02             	and    esi,0x2
c001d6b3:	74 0a                	je     c001d6bf <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d6b5:	0f b7 d0             	movzx  edx,ax
c001d6b8:	c1 e3 10             	shl    ebx,0x10
c001d6bb:	09 d3                	or     ebx,edx
c001d6bd:	eb 05                	jmp    c001d6c4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d6bf:	66 31 c0             	xor    ax,ax
c001d6c2:	09 c3                	or     ebx,eax
c001d6c4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d6c9:	89 c8                	mov    eax,ecx
c001d6cb:	ef                   	out    dx,eax
c001d6cc:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d6d1:	89 d8                	mov    eax,ebx
c001d6d3:	eb 41                	jmp    c001d716 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d6d5:	83 f9 02             	cmp    ecx,0x2
c001d6d8:	75 45                	jne    c001d71f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d6da:	83 ec 0c             	sub    esp,0xc
c001d6dd:	0f b6 d2             	movzx  edx,dl
c001d6e0:	89 f1                	mov    ecx,esi
c001d6e2:	0f b6 c0             	movzx  eax,al
c001d6e5:	0f b6 f1             	movzx  esi,cl
c001d6e8:	89 e9                	mov    ecx,ebp
c001d6ea:	56                   	push   esi
c001d6eb:	0f b6 c9             	movzx  ecx,cl
c001d6ee:	51                   	push   ecx
c001d6ef:	52                   	push   edx
c001d6f0:	50                   	push   eax
c001d6f1:	57                   	push   edi
c001d6f2:	e8 ad fc ff ff       	call   c001d3a4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d6f7:	89 c2                	mov    edx,eax
c001d6f9:	ed                   	in     eax,dx
c001d6fa:	83 c4 20             	add    esp,0x20
c001d6fd:	0f b7 db             	movzx  ebx,bx
c001d700:	f6 c2 02             	test   dl,0x2
c001d703:	74 0c                	je     c001d711 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d705:	0f b7 c8             	movzx  ecx,ax
c001d708:	89 d8                	mov    eax,ebx
c001d70a:	c1 e0 10             	shl    eax,0x10
c001d70d:	09 c8                	or     eax,ecx
c001d70f:	eb 05                	jmp    c001d716 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d711:	66 31 c0             	xor    ax,ax
c001d714:	09 d8                	or     eax,ebx
c001d716:	ef                   	out    dx,eax
c001d717:	83 c4 0c             	add    esp,0xc
c001d71a:	5b                   	pop    ebx
c001d71b:	5e                   	pop    esi
c001d71c:	5f                   	pop    edi
c001d71d:	5d                   	pop    ebp
c001d71e:	c3                   	ret    
c001d71f:	c7 44 24 20 43 66 02 c0 	mov    DWORD PTR [esp+0x20],0xc0026643
c001d727:	83 c4 0c             	add    esp,0xc
c001d72a:	5b                   	pop    ebx
c001d72b:	5e                   	pop    esi
c001d72c:	5f                   	pop    edi
c001d72d:	5d                   	pop    ebp
c001d72e:	e9 70 72 ff ff       	jmp    c00149a3 <Krnl::panic(char const*)>
c001d733:	90                   	nop

c001d734 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d734:	55                   	push   ebp
c001d735:	57                   	push   edi
c001d736:	56                   	push   esi
c001d737:	53                   	push   ebx
c001d738:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d73e:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001d745:	75 0f                	jne    c001d756 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x22>
c001d747:	80 3d 4c 9e 02 c0 00 	cmp    BYTE PTR ds:0xc0029e4c,0x0
c001d74e:	0f 85 fa 00 00 00    	jne    c001d84e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d754:	eb 2f                	jmp    c001d785 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x51>
c001d756:	83 ec 0c             	sub    esp,0xc
c001d759:	68 49 66 02 c0       	push   0xc0026649
c001d75e:	e8 06 c3 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d763:	83 c4 10             	add    esp,0x10
c001d766:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001d76d:	75 d8                	jne    c001d747 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d76f:	e4 60                	in     al,0x60
c001d771:	3c 1c                	cmp    al,0x1c
c001d773:	74 04                	je     c001d779 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d775:	3c 5a                	cmp    al,0x5a
c001d777:	75 f6                	jne    c001d76f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3b>
c001d779:	e4 60                	in     al,0x60
c001d77b:	3c 5a                	cmp    al,0x5a
c001d77d:	74 fa                	je     c001d779 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d77f:	3c 1c                	cmp    al,0x1c
c001d781:	74 f6                	je     c001d779 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x45>
c001d783:	eb c2                	jmp    c001d747 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x13>
c001d785:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001d78c:	0f 85 86 00 00 00    	jne    c001d818 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xe4>
c001d792:	83 ec 0c             	sub    esp,0xc
c001d795:	68 14 01 00 00       	push   0x114
c001d79a:	e8 70 c2 fe ff       	call   c0009a0f <malloc>
c001d79f:	83 c4 0c             	add    esp,0xc
c001d7a2:	89 c3                	mov    ebx,eax
c001d7a4:	ff 35 50 94 02 c0    	push   DWORD PTR ds:0xc0029450
c001d7aa:	68 63 66 02 c0       	push   0xc0026663
c001d7af:	50                   	push   eax
c001d7b0:	e8 b1 fa fe ff       	call   c000d266 <File::File(char const*, Process*)>
c001d7b5:	5a                   	pop    edx
c001d7b6:	59                   	pop    ecx
c001d7b7:	6a 01                	push   0x1
c001d7b9:	53                   	push   ebx
c001d7ba:	e8 81 fb fe ff       	call   c000d340 <File::open(FileOpenMode)>
c001d7bf:	83 c4 0c             	add    esp,0xc
c001d7c2:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d7c6:	50                   	push   eax
c001d7c7:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d7cb:	50                   	push   eax
c001d7cc:	53                   	push   ebx
c001d7cd:	e8 1a fe fe ff       	call   c000d5ec <File::stat(unsigned long long*, bool*)>
c001d7d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d7d6:	40                   	inc    eax
c001d7d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d7da:	e8 30 c2 fe ff       	call   c0009a0f <malloc>
c001d7df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d7e3:	a3 48 9e 02 c0       	mov    ds:0xc0029e48,eax
c001d7e8:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d7ec:	5e                   	pop    esi
c001d7ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d7ef:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d7f3:	51                   	push   ecx
c001d7f4:	50                   	push   eax
c001d7f5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d7f9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d7fd:	53                   	push   ebx
c001d7fe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d801:	83 c4 14             	add    esp,0x14
c001d804:	53                   	push   ebx
c001d805:	e8 94 fb fe ff       	call   c000d39e <File::close()>
c001d80a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d80e:	83 c4 10             	add    esp,0x10
c001d811:	a3 44 9e 02 c0       	mov    ds:0xc0029e44,eax
c001d816:	eb 36                	jmp    c001d84e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x11a>
c001d818:	83 ec 0c             	sub    esp,0xc
c001d81b:	68 7c 66 02 c0       	push   0xc002667c
c001d820:	e8 44 c2 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d825:	83 c4 10             	add    esp,0x10
c001d828:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001d82f:	0f 85 5d ff ff ff    	jne    c001d792 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d835:	e4 60                	in     al,0x60
c001d837:	3c 1c                	cmp    al,0x1c
c001d839:	74 04                	je     c001d83f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d83b:	3c 5a                	cmp    al,0x5a
c001d83d:	75 f6                	jne    c001d835 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x101>
c001d83f:	e4 60                	in     al,0x60
c001d841:	3c 5a                	cmp    al,0x5a
c001d843:	74 fa                	je     c001d83f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d845:	3c 1c                	cmp    al,0x1c
c001d847:	74 f6                	je     c001d83f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x10b>
c001d849:	e9 44 ff ff ff       	jmp    c001d792 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x5e>
c001d84e:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001d855:	75 0b                	jne    c001d862 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x12e>
c001d857:	31 f6                	xor    esi,esi
c001d859:	31 db                	xor    ebx,ebx
c001d85b:	31 ed                	xor    ebp,ebp
c001d85d:	e9 a3 01 00 00       	jmp    c001da05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001d862:	83 ec 0c             	sub    esp,0xc
c001d865:	68 8e 66 02 c0       	push   0xc002668e
c001d86a:	e8 fa c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d86f:	8b 15 20 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f20
c001d875:	83 c4 10             	add    esp,0x10
c001d878:	f6 c2 80             	test   dl,0x80
c001d87b:	74 0c                	je     c001d889 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x155>
c001d87d:	0f ba e2 0b          	bt     edx,0xb
c001d881:	72 1a                	jb     c001d89d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x169>
c001d883:	eb d2                	jmp    c001d857 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d885:	3c 5a                	cmp    al,0x5a
c001d887:	74 0c                	je     c001d895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d889:	e4 60                	in     al,0x60
c001d88b:	3c 1c                	cmp    al,0x1c
c001d88d:	75 f6                	jne    c001d885 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x151>
c001d88f:	eb 04                	jmp    c001d895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d891:	3c 1c                	cmp    al,0x1c
c001d893:	75 e8                	jne    c001d87d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x149>
c001d895:	e4 60                	in     al,0x60
c001d897:	3c 5a                	cmp    al,0x5a
c001d899:	74 fa                	je     c001d895 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x161>
c001d89b:	eb f4                	jmp    c001d891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x15d>
c001d89d:	83 ec 0c             	sub    esp,0xc
c001d8a0:	68 93 66 02 c0       	push   0xc0026693
c001d8a5:	e8 bf c1 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001d8aa:	83 c4 10             	add    esp,0x10
c001d8ad:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001d8b4:	75 a1                	jne    c001d857 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d8b6:	e4 60                	in     al,0x60
c001d8b8:	3c 5a                	cmp    al,0x5a
c001d8ba:	74 04                	je     c001d8c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d8bc:	3c 1c                	cmp    al,0x1c
c001d8be:	75 f6                	jne    c001d8b6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x182>
c001d8c0:	e4 60                	in     al,0x60
c001d8c2:	3c 5a                	cmp    al,0x5a
c001d8c4:	74 fa                	je     c001d8c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d8c6:	3c 1c                	cmp    al,0x1c
c001d8c8:	74 f6                	je     c001d8c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x18c>
c001d8ca:	eb 8b                	jmp    c001d857 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x123>
c001d8cc:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001d8d3:	0f 85 3d 01 00 00    	jne    c001da16 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2e2>
c001d8d9:	a1 48 9e 02 c0       	mov    eax,ds:0xc0029e48
c001d8de:	8d 7e 01             	lea    edi,[esi+0x1]
c001d8e1:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
c001d8e4:	d4 40                	aam    0x40
c001d8e6:	d5 39                	aad    0x39
c001d8e8:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001d8ef:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d8f3:	0f 85 53 01 00 00    	jne    c001da4c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x318>
c001d8f9:	8b 15 48 9e 02 c0    	mov    edx,DWORD PTR ds:0xc0029e48
c001d8ff:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d902:	d4 40                	aam    0x40
c001d904:	d5 39                	aad    0x39
c001d906:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d90a:	8a 44 32 03          	mov    al,BYTE PTR [edx+esi*1+0x3]
c001d90e:	d4 40                	aam    0x40
c001d910:	d5 39                	aad    0x39
c001d912:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d916:	8a 44 32 04          	mov    al,BYTE PTR [edx+esi*1+0x4]
c001d91a:	d4 40                	aam    0x40
c001d91c:	d5 39                	aad    0x39
c001d91e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d922:	8a 44 32 06          	mov    al,BYTE PTR [edx+esi*1+0x6]
c001d926:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001d92a:	3c 56                	cmp    al,0x56
c001d92c:	74 49                	je     c001d977 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x243>
c001d92e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001d932:	d4 40                	aam    0x40
c001d934:	d5 39                	aad    0x39
c001d936:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d939:	8a 44 32 07          	mov    al,BYTE PTR [edx+esi*1+0x7]
c001d93d:	0f b6 c9             	movzx  ecx,cl
c001d940:	c1 e1 04             	shl    ecx,0x4
c001d943:	d4 40                	aam    0x40
c001d945:	d5 39                	aad    0x39
c001d947:	83 e8 30             	sub    eax,0x30
c001d94a:	0f b6 c0             	movzx  eax,al
c001d94d:	09 c1                	or     ecx,eax
c001d94f:	8a 44 32 08          	mov    al,BYTE PTR [edx+esi*1+0x8]
c001d953:	c1 e1 04             	shl    ecx,0x4
c001d956:	d4 40                	aam    0x40
c001d958:	d5 39                	aad    0x39
c001d95a:	83 e8 30             	sub    eax,0x30
c001d95d:	0f b6 c0             	movzx  eax,al
c001d960:	09 c1                	or     ecx,eax
c001d962:	8a 44 32 09          	mov    al,BYTE PTR [edx+esi*1+0x9]
c001d966:	c1 e1 04             	shl    ecx,0x4
c001d969:	d4 40                	aam    0x40
c001d96b:	d5 39                	aad    0x39
c001d96d:	83 e8 30             	sub    eax,0x30
c001d970:	0f b6 c0             	movzx  eax,al
c001d973:	09 c8                	or     eax,ecx
c001d975:	89 c5                	mov    ebp,eax
c001d977:	8a 4c 32 0b          	mov    cl,BYTE PTR [edx+esi*1+0xb]
c001d97b:	80 f9 44             	cmp    cl,0x44
c001d97e:	74 47                	je     c001d9c7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x293>
c001d980:	88 c8                	mov    al,cl
c001d982:	d4 40                	aam    0x40
c001d984:	d5 39                	aad    0x39
c001d986:	83 e8 30             	sub    eax,0x30
c001d989:	0f b6 f8             	movzx  edi,al
c001d98c:	8a 44 32 0c          	mov    al,BYTE PTR [edx+esi*1+0xc]
c001d990:	c1 e7 04             	shl    edi,0x4
c001d993:	d4 40                	aam    0x40
c001d995:	d5 39                	aad    0x39
c001d997:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d99a:	8a 44 32 0d          	mov    al,BYTE PTR [edx+esi*1+0xd]
c001d99e:	0f b6 db             	movzx  ebx,bl
c001d9a1:	09 fb                	or     ebx,edi
c001d9a3:	c1 e3 04             	shl    ebx,0x4
c001d9a6:	d4 40                	aam    0x40
c001d9a8:	d5 39                	aad    0x39
c001d9aa:	83 e8 30             	sub    eax,0x30
c001d9ad:	0f b6 f8             	movzx  edi,al
c001d9b0:	8a 44 32 0e          	mov    al,BYTE PTR [edx+esi*1+0xe]
c001d9b4:	09 fb                	or     ebx,edi
c001d9b6:	89 df                	mov    edi,ebx
c001d9b8:	c1 e7 04             	shl    edi,0x4
c001d9bb:	d4 40                	aam    0x40
c001d9bd:	d5 39                	aad    0x39
c001d9bf:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d9c2:	0f b6 db             	movzx  ebx,bl
c001d9c5:	09 fb                	or     ebx,edi
c001d9c7:	a1 44 9e 02 c0       	mov    eax,ds:0xc0029e44
c001d9cc:	83 c6 10             	add    esi,0x10
c001d9cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9d3:	8d 7c 24 20          	lea    edi,[esp+0x20]
c001d9d7:	8a 04 32             	mov    al,BYTE PTR [edx+esi*1]
c001d9da:	3c 0a                	cmp    al,0xa
c001d9dc:	0f 85 a0 00 00 00    	jne    c001da82 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x34e>
c001d9e2:	3c 0a                	cmp    al,0xa
c001d9e4:	0f 94 c0             	sete   al
c001d9e7:	0f b6 c0             	movzx  eax,al
c001d9ea:	01 c6                	add    esi,eax
c001d9ec:	80 7c 24 07 56       	cmp    BYTE PTR [esp+0x7],0x56
c001d9f1:	0f 84 a2 00 00 00    	je     c001da99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001d9f7:	66 39 ac 24 42 01 00 00 	cmp    WORD PTR [esp+0x142],bp
c001d9ff:	0f 84 94 00 00 00    	je     c001da99 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x365>
c001da05:	39 35 44 9e 02 c0    	cmp    DWORD PTR ds:0xc0029e44,esi
c001da0b:	0f 8f bb fe ff ff    	jg     c001d8cc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x198>
c001da11:	e9 e8 00 00 00       	jmp    c001dafe <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3ca>
c001da16:	83 ec 0c             	sub    esp,0xc
c001da19:	68 9a 66 02 c0       	push   0xc002669a
c001da1e:	e8 46 c0 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001da23:	83 c4 10             	add    esp,0x10
c001da26:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001da2d:	0f 85 a6 fe ff ff    	jne    c001d8d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001da33:	e4 60                	in     al,0x60
c001da35:	3c 5a                	cmp    al,0x5a
c001da37:	74 04                	je     c001da3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001da39:	3c 1c                	cmp    al,0x1c
c001da3b:	75 f6                	jne    c001da33 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ff>
c001da3d:	e4 60                	in     al,0x60
c001da3f:	3c 5a                	cmp    al,0x5a
c001da41:	74 fa                	je     c001da3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001da43:	3c 1c                	cmp    al,0x1c
c001da45:	74 f6                	je     c001da3d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x309>
c001da47:	e9 8d fe ff ff       	jmp    c001d8d9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1a5>
c001da4c:	83 ec 0c             	sub    esp,0xc
c001da4f:	68 a2 66 02 c0       	push   0xc00266a2
c001da54:	e8 10 c0 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001da59:	83 c4 10             	add    esp,0x10
c001da5c:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001da63:	0f 85 90 fe ff ff    	jne    c001d8f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001da69:	e4 60                	in     al,0x60
c001da6b:	3c 5a                	cmp    al,0x5a
c001da6d:	74 04                	je     c001da73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001da6f:	3c 1c                	cmp    al,0x1c
c001da71:	75 f6                	jne    c001da69 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x335>
c001da73:	e4 60                	in     al,0x60
c001da75:	3c 5a                	cmp    al,0x5a
c001da77:	74 fa                	je     c001da73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001da79:	3c 1c                	cmp    al,0x1c
c001da7b:	74 f6                	je     c001da73 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x33f>
c001da7d:	e9 77 fe ff ff       	jmp    c001d8f9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1c5>
c001da82:	47                   	inc    edi
c001da83:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001da87:	0f 84 55 ff ff ff    	je     c001d9e2 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2ae>
c001da8d:	46                   	inc    esi
c001da8e:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
c001da91:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001da94:	e9 3e ff ff ff       	jmp    c001d9d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2a3>
c001da99:	80 f9 44             	cmp    cl,0x44
c001da9c:	74 0e                	je     c001daac <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x378>
c001da9e:	66 39 9c 24 62 01 00 00 	cmp    WORD PTR [esp+0x162],bx
c001daa6:	0f 85 59 ff ff ff    	jne    c001da05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001daac:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001dab0:	8a 54 24 0d          	mov    dl,BYTE PTR [esp+0xd]
c001dab4:	c1 e0 04             	shl    eax,0x4
c001dab7:	83 ea 30             	sub    edx,0x30
c001daba:	09 d0                	or     eax,edx
c001dabc:	38 84 24 40 01 00 00 	cmp    BYTE PTR [esp+0x140],al
c001dac3:	0f 85 3c ff ff ff    	jne    c001da05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dac9:	8a 54 24 0e          	mov    dl,BYTE PTR [esp+0xe]
c001dacd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dad1:	c1 e2 04             	shl    edx,0x4
c001dad4:	83 e8 30             	sub    eax,0x30
c001dad7:	09 d0                	or     eax,edx
c001dad9:	38 84 24 41 01 00 00 	cmp    BYTE PTR [esp+0x141],al
c001dae0:	0f 85 1f ff ff ff    	jne    c001da05 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2d1>
c001dae6:	50                   	push   eax
c001dae7:	50                   	push   eax
c001dae8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001daec:	50                   	push   eax
c001daed:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001daf4:	e8 47 2c fe ff       	call   c0000740 <strcpy>
c001daf9:	83 c4 10             	add    esp,0x10
c001dafc:	eb 15                	jmp    c001db13 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x3df>
c001dafe:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001db05:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001db10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001db13:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001db1a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001db20:	5b                   	pop    ebx
c001db21:	5e                   	pop    esi
c001db22:	5f                   	pop    edi
c001db23:	5d                   	pop    ebp
c001db24:	c3                   	ret    
c001db25:	90                   	nop

c001db26 <PCI::checkBus(unsigned char)>:
c001db26:	56                   	push   esi
c001db27:	53                   	push   ebx
c001db28:	31 db                	xor    ebx,ebx
c001db2a:	51                   	push   ecx
c001db2b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001db30:	52                   	push   edx
c001db31:	53                   	push   ebx
c001db32:	43                   	inc    ebx
c001db33:	56                   	push   esi
c001db34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db38:	e8 bf 07 00 00       	call   c001e2fc <PCI::checkDevice(unsigned char, unsigned char)>
c001db3d:	83 c4 10             	add    esp,0x10
c001db40:	83 fb 20             	cmp    ebx,0x20
c001db43:	75 eb                	jne    c001db30 <PCI::checkBus(unsigned char)+0xa>
c001db45:	58                   	pop    eax
c001db46:	5b                   	pop    ebx
c001db47:	5e                   	pop    esi
c001db48:	c3                   	ret    
c001db49:	90                   	nop

c001db4a <PCI::foundDevice(PCIDeviceInfo)>:
c001db4a:	55                   	push   ebp
c001db4b:	57                   	push   edi
c001db4c:	56                   	push   esi
c001db4d:	53                   	push   ebx
c001db4e:	83 ec 1c             	sub    esp,0x1c
c001db51:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db55:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001db5b:	0f 84 20 04 00 00    	je     c001df81 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001db61:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001db68:	75 37                	jne    c001dba1 <PCI::foundDevice(PCIDeviceInfo)+0x57>
c001db6a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001db6e:	66 81 f9 06 04       	cmp    cx,0x406
c001db73:	75 5b                	jne    c001dbd0 <PCI::foundDevice(PCIDeviceInfo)+0x86>
c001db75:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001db7a:	50                   	push   eax
c001db7b:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001db80:	50                   	push   eax
c001db81:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001db86:	50                   	push   eax
c001db87:	53                   	push   ebx
c001db88:	e8 33 fa ff ff       	call   c001d5c0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001db8d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001db91:	0f b6 c0             	movzx  eax,al
c001db94:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001db98:	83 c4 2c             	add    esp,0x2c
c001db9b:	5b                   	pop    ebx
c001db9c:	5e                   	pop    esi
c001db9d:	5f                   	pop    edi
c001db9e:	5d                   	pop    ebp
c001db9f:	eb 85                	jmp    c001db26 <PCI::checkBus(unsigned char)>
c001dba1:	83 ec 0c             	sub    esp,0xc
c001dba4:	68 ab 66 02 c0       	push   0xc00266ab
c001dba9:	e8 bb be fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dbae:	83 c4 10             	add    esp,0x10
c001dbb1:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001dbb8:	75 b0                	jne    c001db6a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dbba:	e4 60                	in     al,0x60
c001dbbc:	3c 5a                	cmp    al,0x5a
c001dbbe:	74 04                	je     c001dbc4 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dbc0:	3c 1c                	cmp    al,0x1c
c001dbc2:	75 f6                	jne    c001dbba <PCI::foundDevice(PCIDeviceInfo)+0x70>
c001dbc4:	e4 60                	in     al,0x60
c001dbc6:	3c 5a                	cmp    al,0x5a
c001dbc8:	74 fa                	je     c001dbc4 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dbca:	3c 1c                	cmp    al,0x1c
c001dbcc:	74 f6                	je     c001dbc4 <PCI::foundDevice(PCIDeviceInfo)+0x7a>
c001dbce:	eb 9a                	jmp    c001db6a <PCI::foundDevice(PCIDeviceInfo)+0x20>
c001dbd0:	8b 83 cc 00 00 00    	mov    eax,DWORD PTR [ebx+0xcc]
c001dbd6:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001dbda:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dbde:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001dbe2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001dbe6:	88 d0                	mov    al,dl
c001dbe8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001dbed:	74 3b                	je     c001dc2a <PCI::foundDevice(PCIDeviceInfo)+0xe0>
c001dbef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dbf3:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001dbf6:	85 d2                	test   edx,edx
c001dbf8:	74 24                	je     c001dc1e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dbfa:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001dc00:	31 ef                	xor    edi,ebp
c001dc02:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001dc08:	75 14                	jne    c001dc1e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dc0a:	39 b2 20 01 00 00    	cmp    DWORD PTR [edx+0x120],esi
c001dc10:	75 0c                	jne    c001dc1e <PCI::foundDevice(PCIDeviceInfo)+0xd4>
c001dc12:	38 82 38 01 00 00    	cmp    BYTE PTR [edx+0x138],al
c001dc18:	0f 84 63 03 00 00    	je     c001df81 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dc1e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dc22:	8b 12                	mov    edx,DWORD PTR [edx]
c001dc24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dc28:	eb be                	jmp    c001dbe8 <PCI::foundDevice(PCIDeviceInfo)+0x9e>
c001dc2a:	66 81 f9 01 06       	cmp    cx,0x601
c001dc2f:	0f 85 81 01 00 00    	jne    c001ddb6 <PCI::foundDevice(PCIDeviceInfo)+0x26c>
c001dc35:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001dc3c:	75 25                	jne    c001dc63 <PCI::foundDevice(PCIDeviceInfo)+0x119>
c001dc3e:	83 ec 0c             	sub    esp,0xc
c001dc41:	68 64 01 00 00       	push   0x164
c001dc46:	e8 c4 bd fe ff       	call   c0009a0f <malloc>
c001dc4b:	89 04 24             	mov    DWORD PTR [esp],eax
c001dc4e:	89 c5                	mov    ebp,eax
c001dc50:	e8 b7 12 00 00       	call   c001ef0c <SATABus::SATABus()>
c001dc55:	83 c4 10             	add    esp,0x10
c001dc58:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001dc5f:	74 4a                	je     c001dcab <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dc61:	eb 2f                	jmp    c001dc92 <PCI::foundDevice(PCIDeviceInfo)+0x148>
c001dc63:	83 ec 0c             	sub    esp,0xc
c001dc66:	68 bb 66 02 c0       	push   0xc00266bb
c001dc6b:	e8 f9 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dc70:	83 c4 10             	add    esp,0x10
c001dc73:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001dc7a:	75 c2                	jne    c001dc3e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dc7c:	e4 60                	in     al,0x60
c001dc7e:	3c 1c                	cmp    al,0x1c
c001dc80:	74 04                	je     c001dc86 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dc82:	3c 5a                	cmp    al,0x5a
c001dc84:	75 f6                	jne    c001dc7c <PCI::foundDevice(PCIDeviceInfo)+0x132>
c001dc86:	e4 60                	in     al,0x60
c001dc88:	3c 5a                	cmp    al,0x5a
c001dc8a:	74 fa                	je     c001dc86 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dc8c:	3c 1c                	cmp    al,0x1c
c001dc8e:	74 f6                	je     c001dc86 <PCI::foundDevice(PCIDeviceInfo)+0x13c>
c001dc90:	eb ac                	jmp    c001dc3e <PCI::foundDevice(PCIDeviceInfo)+0xf4>
c001dc92:	83 ec 0c             	sub    esp,0xc
c001dc95:	68 c1 66 02 c0       	push   0xc00266c1
c001dc9a:	e8 ca bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dc9f:	83 c4 10             	add    esp,0x10
c001dca2:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001dca9:	74 1b                	je     c001dcc6 <PCI::foundDevice(PCIDeviceInfo)+0x17c>
c001dcab:	50                   	push   eax
c001dcac:	50                   	push   eax
c001dcad:	55                   	push   ebp
c001dcae:	53                   	push   ebx
c001dcaf:	e8 ba 05 ff ff       	call   c000e26e <Device::addChild(Device*)>
c001dcb4:	83 c4 10             	add    esp,0x10
c001dcb7:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001dcbe:	74 33                	je     c001dcf3 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dcc0:	eb 18                	jmp    c001dcda <PCI::foundDevice(PCIDeviceInfo)+0x190>
c001dcc2:	3c 1c                	cmp    al,0x1c
c001dcc4:	74 0c                	je     c001dcd2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dcc6:	e4 60                	in     al,0x60
c001dcc8:	3c 5a                	cmp    al,0x5a
c001dcca:	75 f6                	jne    c001dcc2 <PCI::foundDevice(PCIDeviceInfo)+0x178>
c001dccc:	eb 04                	jmp    c001dcd2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dcce:	3c 1c                	cmp    al,0x1c
c001dcd0:	75 d9                	jne    c001dcab <PCI::foundDevice(PCIDeviceInfo)+0x161>
c001dcd2:	e4 60                	in     al,0x60
c001dcd4:	3c 5a                	cmp    al,0x5a
c001dcd6:	74 fa                	je     c001dcd2 <PCI::foundDevice(PCIDeviceInfo)+0x188>
c001dcd8:	eb f4                	jmp    c001dcce <PCI::foundDevice(PCIDeviceInfo)+0x184>
c001dcda:	83 ec 0c             	sub    esp,0xc
c001dcdd:	68 c9 66 02 c0       	push   0xc00266c9
c001dce2:	e8 82 bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dce7:	83 c4 10             	add    esp,0x10
c001dcea:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001dcf1:	74 29                	je     c001dd1c <PCI::foundDevice(PCIDeviceInfo)+0x1d2>
c001dcf3:	83 ec 2c             	sub    esp,0x2c
c001dcf6:	b9 09 00 00 00       	mov    ecx,0x9
c001dcfb:	8d 74 24 60          	lea    esi,[esp+0x60]
c001dcff:	fc                   	cld    
c001dd00:	89 e7                	mov    edi,esp
c001dd02:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dd04:	55                   	push   ebp
c001dd05:	e8 76 04 ff ff       	call   c000e180 <Device::preOpenPCI(PCIDeviceInfo)>
c001dd0a:	83 c4 30             	add    esp,0x30
c001dd0d:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001dd14:	74 33                	je     c001dd49 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001dd16:	eb 18                	jmp    c001dd30 <PCI::foundDevice(PCIDeviceInfo)+0x1e6>
c001dd18:	3c 1c                	cmp    al,0x1c
c001dd1a:	74 0c                	je     c001dd28 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dd1c:	e4 60                	in     al,0x60
c001dd1e:	3c 5a                	cmp    al,0x5a
c001dd20:	75 f6                	jne    c001dd18 <PCI::foundDevice(PCIDeviceInfo)+0x1ce>
c001dd22:	eb 04                	jmp    c001dd28 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dd24:	3c 1c                	cmp    al,0x1c
c001dd26:	75 cb                	jne    c001dcf3 <PCI::foundDevice(PCIDeviceInfo)+0x1a9>
c001dd28:	e4 60                	in     al,0x60
c001dd2a:	3c 5a                	cmp    al,0x5a
c001dd2c:	74 fa                	je     c001dd28 <PCI::foundDevice(PCIDeviceInfo)+0x1de>
c001dd2e:	eb f4                	jmp    c001dd24 <PCI::foundDevice(PCIDeviceInfo)+0x1da>
c001dd30:	83 ec 0c             	sub    esp,0xc
c001dd33:	68 d1 66 02 c0       	push   0xc00266d1
c001dd38:	e8 2c bd fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd3d:	83 c4 10             	add    esp,0x10
c001dd40:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001dd47:	74 23                	je     c001dd6c <PCI::foundDevice(PCIDeviceInfo)+0x222>
c001dd49:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001dd4c:	6a 00                	push   0x0
c001dd4e:	6a 00                	push   0x0
c001dd50:	6a 00                	push   0x0
c001dd52:	55                   	push   ebp
c001dd53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dd56:	83 c4 10             	add    esp,0x10
c001dd59:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001dd60:	0f 84 1b 02 00 00    	je     c001df81 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dd66:	eb 18                	jmp    c001dd80 <PCI::foundDevice(PCIDeviceInfo)+0x236>
c001dd68:	3c 1c                	cmp    al,0x1c
c001dd6a:	74 0c                	je     c001dd78 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001dd6c:	e4 60                	in     al,0x60
c001dd6e:	3c 5a                	cmp    al,0x5a
c001dd70:	75 f6                	jne    c001dd68 <PCI::foundDevice(PCIDeviceInfo)+0x21e>
c001dd72:	eb 04                	jmp    c001dd78 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001dd74:	3c 1c                	cmp    al,0x1c
c001dd76:	75 d1                	jne    c001dd49 <PCI::foundDevice(PCIDeviceInfo)+0x1ff>
c001dd78:	e4 60                	in     al,0x60
c001dd7a:	3c 5a                	cmp    al,0x5a
c001dd7c:	74 fa                	je     c001dd78 <PCI::foundDevice(PCIDeviceInfo)+0x22e>
c001dd7e:	eb f4                	jmp    c001dd74 <PCI::foundDevice(PCIDeviceInfo)+0x22a>
c001dd80:	83 ec 0c             	sub    esp,0xc
c001dd83:	68 d9 66 02 c0       	push   0xc00266d9
c001dd88:	e8 dc bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dd8d:	83 c4 10             	add    esp,0x10
c001dd90:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001dd97:	0f 85 e4 01 00 00    	jne    c001df81 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001dd9d:	e4 60                	in     al,0x60
c001dd9f:	3c 5a                	cmp    al,0x5a
c001dda1:	74 04                	je     c001dda7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001dda3:	3c 1c                	cmp    al,0x1c
c001dda5:	75 f6                	jne    c001dd9d <PCI::foundDevice(PCIDeviceInfo)+0x253>
c001dda7:	e4 60                	in     al,0x60
c001dda9:	3c 5a                	cmp    al,0x5a
c001ddab:	74 fa                	je     c001dda7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001ddad:	3c 1c                	cmp    al,0x1c
c001ddaf:	74 f6                	je     c001dda7 <PCI::foundDevice(PCIDeviceInfo)+0x25d>
c001ddb1:	e9 cb 01 00 00       	jmp    c001df81 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001ddb6:	66 81 f9 01 01       	cmp    cx,0x101
c001ddbb:	0f 85 7a 01 00 00    	jne    c001df3b <PCI::foundDevice(PCIDeviceInfo)+0x3f1>
c001ddc1:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001ddc8:	75 25                	jne    c001ddef <PCI::foundDevice(PCIDeviceInfo)+0x2a5>
c001ddca:	83 ec 0c             	sub    esp,0xc
c001ddcd:	68 70 02 00 00       	push   0x270
c001ddd2:	e8 38 bc fe ff       	call   c0009a0f <malloc>
c001ddd7:	89 04 24             	mov    DWORD PTR [esp],eax
c001ddda:	89 c5                	mov    ebp,eax
c001dddc:	e8 df 05 00 00       	call   c001e3c0 <IDE::IDE()>
c001dde1:	83 c4 10             	add    esp,0x10
c001dde4:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001ddeb:	74 4a                	je     c001de37 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001dded:	eb 2f                	jmp    c001de1e <PCI::foundDevice(PCIDeviceInfo)+0x2d4>
c001ddef:	83 ec 0c             	sub    esp,0xc
c001ddf2:	68 e1 66 02 c0       	push   0xc00266e1
c001ddf7:	e8 6d bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001ddfc:	83 c4 10             	add    esp,0x10
c001ddff:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001de06:	75 c2                	jne    c001ddca <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001de08:	e4 60                	in     al,0x60
c001de0a:	3c 5a                	cmp    al,0x5a
c001de0c:	74 04                	je     c001de12 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001de0e:	3c 1c                	cmp    al,0x1c
c001de10:	75 f6                	jne    c001de08 <PCI::foundDevice(PCIDeviceInfo)+0x2be>
c001de12:	e4 60                	in     al,0x60
c001de14:	3c 5a                	cmp    al,0x5a
c001de16:	74 fa                	je     c001de12 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001de18:	3c 1c                	cmp    al,0x1c
c001de1a:	74 f6                	je     c001de12 <PCI::foundDevice(PCIDeviceInfo)+0x2c8>
c001de1c:	eb ac                	jmp    c001ddca <PCI::foundDevice(PCIDeviceInfo)+0x280>
c001de1e:	83 ec 0c             	sub    esp,0xc
c001de21:	68 e8 66 02 c0       	push   0xc00266e8
c001de26:	e8 3e bc fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de2b:	83 c4 10             	add    esp,0x10
c001de2e:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001de35:	74 1b                	je     c001de52 <PCI::foundDevice(PCIDeviceInfo)+0x308>
c001de37:	57                   	push   edi
c001de38:	57                   	push   edi
c001de39:	55                   	push   ebp
c001de3a:	53                   	push   ebx
c001de3b:	e8 2e 04 ff ff       	call   c000e26e <Device::addChild(Device*)>
c001de40:	83 c4 10             	add    esp,0x10
c001de43:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001de4a:	74 33                	je     c001de7f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001de4c:	eb 18                	jmp    c001de66 <PCI::foundDevice(PCIDeviceInfo)+0x31c>
c001de4e:	3c 1c                	cmp    al,0x1c
c001de50:	74 0c                	je     c001de5e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001de52:	e4 60                	in     al,0x60
c001de54:	3c 5a                	cmp    al,0x5a
c001de56:	75 f6                	jne    c001de4e <PCI::foundDevice(PCIDeviceInfo)+0x304>
c001de58:	eb 04                	jmp    c001de5e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001de5a:	3c 1c                	cmp    al,0x1c
c001de5c:	75 d9                	jne    c001de37 <PCI::foundDevice(PCIDeviceInfo)+0x2ed>
c001de5e:	e4 60                	in     al,0x60
c001de60:	3c 5a                	cmp    al,0x5a
c001de62:	74 fa                	je     c001de5e <PCI::foundDevice(PCIDeviceInfo)+0x314>
c001de64:	eb f4                	jmp    c001de5a <PCI::foundDevice(PCIDeviceInfo)+0x310>
c001de66:	83 ec 0c             	sub    esp,0xc
c001de69:	68 ef 66 02 c0       	push   0xc00266ef
c001de6e:	e8 f6 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001de73:	83 c4 10             	add    esp,0x10
c001de76:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001de7d:	74 29                	je     c001dea8 <PCI::foundDevice(PCIDeviceInfo)+0x35e>
c001de7f:	83 ec 2c             	sub    esp,0x2c
c001de82:	b9 09 00 00 00       	mov    ecx,0x9
c001de87:	8d 74 24 60          	lea    esi,[esp+0x60]
c001de8b:	fc                   	cld    
c001de8c:	89 e7                	mov    edi,esp
c001de8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001de90:	55                   	push   ebp
c001de91:	e8 ea 02 ff ff       	call   c000e180 <Device::preOpenPCI(PCIDeviceInfo)>
c001de96:	83 c4 30             	add    esp,0x30
c001de99:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001dea0:	74 33                	je     c001ded5 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001dea2:	eb 18                	jmp    c001debc <PCI::foundDevice(PCIDeviceInfo)+0x372>
c001dea4:	3c 1c                	cmp    al,0x1c
c001dea6:	74 0c                	je     c001deb4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001dea8:	e4 60                	in     al,0x60
c001deaa:	3c 5a                	cmp    al,0x5a
c001deac:	75 f6                	jne    c001dea4 <PCI::foundDevice(PCIDeviceInfo)+0x35a>
c001deae:	eb 04                	jmp    c001deb4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001deb0:	3c 1c                	cmp    al,0x1c
c001deb2:	75 cb                	jne    c001de7f <PCI::foundDevice(PCIDeviceInfo)+0x335>
c001deb4:	e4 60                	in     al,0x60
c001deb6:	3c 5a                	cmp    al,0x5a
c001deb8:	74 fa                	je     c001deb4 <PCI::foundDevice(PCIDeviceInfo)+0x36a>
c001deba:	eb f4                	jmp    c001deb0 <PCI::foundDevice(PCIDeviceInfo)+0x366>
c001debc:	83 ec 0c             	sub    esp,0xc
c001debf:	68 f6 66 02 c0       	push   0xc00266f6
c001dec4:	e8 a0 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001dec9:	83 c4 10             	add    esp,0x10
c001decc:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001ded3:	74 23                	je     c001def8 <PCI::foundDevice(PCIDeviceInfo)+0x3ae>
c001ded5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ded8:	6a 00                	push   0x0
c001deda:	6a 00                	push   0x0
c001dedc:	6a 00                	push   0x0
c001dede:	55                   	push   ebp
c001dedf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001dee2:	83 c4 10             	add    esp,0x10
c001dee5:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001deec:	0f 84 8f 00 00 00    	je     c001df81 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001def2:	eb 18                	jmp    c001df0c <PCI::foundDevice(PCIDeviceInfo)+0x3c2>
c001def4:	3c 1c                	cmp    al,0x1c
c001def6:	74 0c                	je     c001df04 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001def8:	e4 60                	in     al,0x60
c001defa:	3c 5a                	cmp    al,0x5a
c001defc:	75 f6                	jne    c001def4 <PCI::foundDevice(PCIDeviceInfo)+0x3aa>
c001defe:	eb 04                	jmp    c001df04 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001df00:	3c 1c                	cmp    al,0x1c
c001df02:	75 d1                	jne    c001ded5 <PCI::foundDevice(PCIDeviceInfo)+0x38b>
c001df04:	e4 60                	in     al,0x60
c001df06:	3c 5a                	cmp    al,0x5a
c001df08:	74 fa                	je     c001df04 <PCI::foundDevice(PCIDeviceInfo)+0x3ba>
c001df0a:	eb f4                	jmp    c001df00 <PCI::foundDevice(PCIDeviceInfo)+0x3b6>
c001df0c:	83 ec 0c             	sub    esp,0xc
c001df0f:	68 fd 66 02 c0       	push   0xc00266fd
c001df14:	e8 50 bb fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001df19:	83 c4 10             	add    esp,0x10
c001df1c:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001df23:	75 5c                	jne    c001df81 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df25:	e4 60                	in     al,0x60
c001df27:	3c 5a                	cmp    al,0x5a
c001df29:	74 04                	je     c001df2f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001df2b:	3c 1c                	cmp    al,0x1c
c001df2d:	75 f6                	jne    c001df25 <PCI::foundDevice(PCIDeviceInfo)+0x3db>
c001df2f:	e4 60                	in     al,0x60
c001df31:	3c 5a                	cmp    al,0x5a
c001df33:	74 fa                	je     c001df2f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001df35:	3c 1c                	cmp    al,0x1c
c001df37:	74 f6                	je     c001df2f <PCI::foundDevice(PCIDeviceInfo)+0x3e5>
c001df39:	eb 46                	jmp    c001df81 <PCI::foundDevice(PCIDeviceInfo)+0x437>
c001df3b:	83 ec 0c             	sub    esp,0xc
c001df3e:	68 58 01 00 00       	push   0x158
c001df43:	e8 c7 ba fe ff       	call   c0009a0f <malloc>
c001df48:	89 c5                	mov    ebp,eax
c001df4a:	58                   	pop    eax
c001df4b:	5a                   	pop    edx
c001df4c:	68 04 67 02 c0       	push   0xc0026704
c001df51:	55                   	push   ebp
c001df52:	e8 21 06 ff ff       	call   c000e578 <DriverlessDevice::DriverlessDevice(char const*)>
c001df57:	59                   	pop    ecx
c001df58:	5e                   	pop    esi
c001df59:	55                   	push   ebp
c001df5a:	53                   	push   ebx
c001df5b:	e8 0e 03 ff ff       	call   c000e26e <Device::addChild(Device*)>
c001df60:	83 c4 10             	add    esp,0x10
c001df63:	b9 09 00 00 00       	mov    ecx,0x9
c001df68:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001df6c:	fc                   	cld    
c001df6d:	89 fe                	mov    esi,edi
c001df6f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001df71:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001df75:	83 c4 1c             	add    esp,0x1c
c001df78:	5b                   	pop    ebx
c001df79:	5e                   	pop    esi
c001df7a:	5f                   	pop    edi
c001df7b:	5d                   	pop    ebp
c001df7c:	e9 ff 01 ff ff       	jmp    c000e180 <Device::preOpenPCI(PCIDeviceInfo)>
c001df81:	83 c4 1c             	add    esp,0x1c
c001df84:	5b                   	pop    ebx
c001df85:	5e                   	pop    esi
c001df86:	5f                   	pop    edi
c001df87:	5d                   	pop    ebp
c001df88:	c3                   	ret    
c001df89:	90                   	nop

c001df8a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001df8a:	55                   	push   ebp
c001df8b:	57                   	push   edi
c001df8c:	56                   	push   esi
c001df8d:	53                   	push   ebx
c001df8e:	81 ec b4 00 00 00    	sub    esp,0xb4
c001df94:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
c001df9b:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c001dfa2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dfa6:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c001dfad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dfb1:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
c001dfb8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dfbc:	68 1e 67 02 c0       	push   0xc002671e
c001dfc1:	8d 5c 24 48          	lea    ebx,[esp+0x48]
c001dfc5:	53                   	push   ebx
c001dfc6:	e8 75 27 fe ff       	call   c0000740 <strcpy>
c001dfcb:	0f b6 4c 24 24       	movzx  ecx,BYTE PTR [esp+0x24]
c001dfd0:	b2 64                	mov    dl,0x64
c001dfd2:	89 c8                	mov    eax,ecx
c001dfd4:	f6 f2                	div    dl
c001dfd6:	b2 0a                	mov    dl,0xa
c001dfd8:	83 c0 30             	add    eax,0x30
c001dfdb:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001dfdf:	88 44 24 4c          	mov    BYTE PTR [esp+0x4c],al
c001dfe3:	83 c4 10             	add    esp,0x10
c001dfe6:	89 c8                	mov    eax,ecx
c001dfe8:	f6 f2                	div    dl
c001dfea:	89 c1                	mov    ecx,eax
c001dfec:	0f b6 c0             	movzx  eax,al
c001dfef:	88 e9                	mov    cl,ch
c001dff1:	f6 f2                	div    dl
c001dff3:	88 e0                	mov    al,ah
c001dff5:	83 c0 30             	add    eax,0x30
c001dff8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001dffc:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001e000:	8d 41 30             	lea    eax,[ecx+0x30]
c001e003:	88 44 24 25          	mov    BYTE PTR [esp+0x25],al
c001e007:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c001e00b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001e010:	f6 f2                	div    dl
c001e012:	89 c1                	mov    ecx,eax
c001e014:	0f b6 c0             	movzx  eax,al
c001e017:	88 e9                	mov    cl,ch
c001e019:	f6 f2                	div    dl
c001e01b:	88 e0                	mov    al,ah
c001e01d:	83 c0 30             	add    eax,0x30
c001e020:	88 44 24 26          	mov    BYTE PTR [esp+0x26],al
c001e024:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c001e028:	8d 41 30             	lea    eax,[ecx+0x30]
c001e02b:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001e02f:	88 44 24 41          	mov    BYTE PTR [esp+0x41],al
c001e033:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001e038:	f6 f2                	div    dl
c001e03a:	89 c1                	mov    ecx,eax
c001e03c:	0f b6 c0             	movzx  eax,al
c001e03f:	88 e9                	mov    cl,ch
c001e041:	f6 f2                	div    dl
c001e043:	88 e0                	mov    al,ah
c001e045:	83 c0 30             	add    eax,0x30
c001e048:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e04f:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001e053:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001e057:	8d 41 30             	lea    eax,[ecx+0x30]
c001e05a:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c001e05e:	88 44 24 44          	mov    BYTE PTR [esp+0x44],al
c001e062:	74 29                	je     c001e08d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e064:	83 ec 0c             	sub    esp,0xc
c001e067:	53                   	push   ebx
c001e068:	e8 fc b9 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e06d:	83 c4 10             	add    esp,0x10
c001e070:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e077:	75 14                	jne    c001e08d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x103>
c001e079:	e4 60                	in     al,0x60
c001e07b:	3c 1c                	cmp    al,0x1c
c001e07d:	74 04                	je     c001e083 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e07f:	3c 5a                	cmp    al,0x5a
c001e081:	75 f6                	jne    c001e079 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xef>
c001e083:	e4 60                	in     al,0x60
c001e085:	3c 5a                	cmp    al,0x5a
c001e087:	74 fa                	je     c001e083 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e089:	3c 1c                	cmp    al,0x1c
c001e08b:	74 f6                	je     c001e083 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xf9>
c001e08d:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001e092:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001e097:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e09c:	83 ec 0c             	sub    esp,0xc
c001e09f:	6a 0c                	push   0xc
c001e0a1:	56                   	push   esi
c001e0a2:	53                   	push   ebx
c001e0a3:	57                   	push   edi
c001e0a4:	55                   	push   ebp
c001e0a5:	e8 68 f3 ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0aa:	83 c4 20             	add    esp,0x20
c001e0ad:	56                   	push   esi
c001e0ae:	53                   	push   ebx
c001e0af:	57                   	push   edi
c001e0b0:	55                   	push   ebp
c001e0b1:	e8 50 f4 ff ff       	call   c001d506 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001e0b6:	66 89 44 24 3a       	mov    WORD PTR [esp+0x3a],ax
c001e0bb:	56                   	push   esi
c001e0bc:	53                   	push   ebx
c001e0bd:	57                   	push   edi
c001e0be:	55                   	push   ebp
c001e0bf:	e8 d8 f4 ff ff       	call   c001d59c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001e0c4:	88 44 24 42          	mov    BYTE PTR [esp+0x42],al
c001e0c8:	83 c4 14             	add    esp,0x14
c001e0cb:	6a 3c                	push   0x3c
c001e0cd:	56                   	push   esi
c001e0ce:	53                   	push   ebx
c001e0cf:	57                   	push   edi
c001e0d0:	55                   	push   ebp
c001e0d1:	e8 3c f3 ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e0d6:	0f b6 c4             	movzx  eax,ah
c001e0d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001e0dd:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001e0e1:	88 84 24 bd 00 00 00 	mov    BYTE PTR [esp+0xbd],al
c001e0e8:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001e0ed:	83 c4 20             	add    esp,0x20
c001e0f0:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e0f6:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001e0fd:	0f 84 38 01 00 00    	je     c001e23b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e103:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001e10b:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001e110:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e114:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e11a:	39 88 5c 11 00 00    	cmp    DWORD PTR [eax+0x115c],ecx
c001e120:	0f 8e 15 01 00 00    	jle    c001e23b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b1>
c001e126:	50                   	push   eax
c001e127:	50                   	push   eax
c001e128:	68 39 67 02 c0       	push   0xc0026739
c001e12d:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e131:	50                   	push   eax
c001e132:	e8 09 26 fe ff       	call   c0000740 <strcpy>
c001e137:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001e13b:	b9 0a 00 00 00       	mov    ecx,0xa
c001e140:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001e144:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e148:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001e14c:	8a 44 24 35          	mov    al,BYTE PTR [esp+0x35]
c001e150:	88 44 24 6e          	mov    BYTE PTR [esp+0x6e],al
c001e154:	8a 44 24 36          	mov    al,BYTE PTR [esp+0x36]
c001e158:	88 44 24 70          	mov    BYTE PTR [esp+0x70],al
c001e15c:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001e160:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c001e164:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e168:	88 44 24 73          	mov    BYTE PTR [esp+0x73],al
c001e16c:	8a 44 24 39          	mov    al,BYTE PTR [esp+0x39]
c001e170:	88 44 24 74          	mov    BYTE PTR [esp+0x74],al
c001e174:	83 c4 10             	add    esp,0x10
c001e177:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e17b:	99                   	cdq    
c001e17c:	f7 f9                	idiv   ecx
c001e17e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e182:	99                   	cdq    
c001e183:	f7 f9                	idiv   ecx
c001e185:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001e189:	83 c2 30             	add    edx,0x30
c001e18c:	83 c0 30             	add    eax,0x30
c001e18f:	88 54 24 66          	mov    BYTE PTR [esp+0x66],dl
c001e193:	88 44 24 67          	mov    BYTE PTR [esp+0x67],al
c001e197:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001e19e:	74 2d                	je     c001e1cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e1a0:	83 ec 0c             	sub    esp,0xc
c001e1a3:	8d 44 24 68          	lea    eax,[esp+0x68]
c001e1a7:	50                   	push   eax
c001e1a8:	e8 bc b8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001e1ad:	83 c4 10             	add    esp,0x10
c001e1b0:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001e1b7:	75 14                	jne    c001e1cd <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x243>
c001e1b9:	e4 60                	in     al,0x60
c001e1bb:	3c 5a                	cmp    al,0x5a
c001e1bd:	74 04                	je     c001e1c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e1bf:	3c 1c                	cmp    al,0x1c
c001e1c1:	75 f6                	jne    c001e1b9 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x22f>
c001e1c3:	e4 60                	in     al,0x60
c001e1c5:	3c 5a                	cmp    al,0x5a
c001e1c7:	74 fa                	je     c001e1c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e1c9:	3c 1c                	cmp    al,0x1c
c001e1cb:	74 f6                	je     c001e1c3 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x239>
c001e1cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e1d1:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001e1d6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e1dc:	8d 04 d0             	lea    eax,[eax+edx*8]
c001e1df:	0f b7 90 5c 01 00 00 	movzx  edx,WORD PTR [eax+0x15c]
c001e1e6:	39 d3                	cmp    ebx,edx
c001e1e8:	75 48                	jne    c001e232 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e1ea:	0f b6 80 5e 01 00 00 	movzx  eax,BYTE PTR [eax+0x15e]
c001e1f1:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c001e1f5:	75 3b                	jne    c001e232 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2a8>
c001e1f7:	83 ec 0c             	sub    esp,0xc
c001e1fa:	68 68 67 02 c0       	push   0xc0026768
c001e1ff:	e8 f7 ea fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001e204:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e208:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c001e20d:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e213:	0f b6 84 d0 5f 01 00 00 	movzx  eax,BYTE PTR [eax+edx*8+0x15f]
c001e21b:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001e21f:	50                   	push   eax
c001e220:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e224:	53                   	push   ebx
c001e225:	68 8d 67 02 c0       	push   0xc002678d
c001e22a:	e8 cc ea fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001e22f:	83 c4 20             	add    esp,0x20
c001e232:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001e236:	e9 d0 fe ff ff       	jmp    c001e10b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x181>
c001e23b:	31 d2                	xor    edx,edx
c001e23d:	83 ec 0c             	sub    esp,0xc
c001e240:	56                   	push   esi
c001e241:	53                   	push   ebx
c001e242:	57                   	push   edi
c001e243:	52                   	push   edx
c001e244:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001e248:	55                   	push   ebp
c001e249:	e8 9a f3 ff ff       	call   c001d5e8 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e24e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e252:	89 84 94 a4 00 00 00 	mov    DWORD PTR [esp+edx*4+0xa4],eax
c001e259:	42                   	inc    edx
c001e25a:	83 c4 20             	add    esp,0x20
c001e25d:	83 fa 06             	cmp    edx,0x6
c001e260:	75 db                	jne    c001e23d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x2b3>
c001e262:	66 8b 44 24 2a       	mov    ax,WORD PTR [esp+0x2a]
c001e267:	83 ec 0c             	sub    esp,0xc
c001e26a:	86 e0                	xchg   al,ah
c001e26c:	66 89 84 24 88 00 00 00 	mov    WORD PTR [esp+0x88],ax
c001e274:	6a 02                	push   0x2
c001e276:	56                   	push   esi
c001e277:	53                   	push   ebx
c001e278:	57                   	push   edi
c001e279:	55                   	push   ebp
c001e27a:	e8 93 f1 ff ff       	call   c001d412 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e27f:	66 89 84 24 be 00 00 00 	mov    WORD PTR [esp+0xbe],ax
c001e287:	83 c4 20             	add    esp,0x20
c001e28a:	56                   	push   esi
c001e28b:	53                   	push   ebx
c001e28c:	57                   	push   edi
c001e28d:	55                   	push   ebp
c001e28e:	e8 bd f2 ff ff       	call   c001d550 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001e293:	88 84 24 93 00 00 00 	mov    BYTE PTR [esp+0x93],al
c001e29a:	56                   	push   esi
c001e29b:	53                   	push   ebx
c001e29c:	57                   	push   edi
c001e29d:	55                   	push   ebp
c001e29e:	e8 17 f2 ff ff       	call   c001d4ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e2a3:	b9 09 00 00 00       	mov    ecx,0x9
c001e2a8:	66 89 84 24 9e 00 00 00 	mov    WORD PTR [esp+0x9e],ax
c001e2b0:	8a 44 24 42          	mov    al,BYTE PTR [esp+0x42]
c001e2b4:	88 84 24 bc 00 00 00 	mov    BYTE PTR [esp+0xbc],al
c001e2bb:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001e2bf:	88 84 24 a0 00 00 00 	mov    BYTE PTR [esp+0xa0],al
c001e2c6:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001e2ca:	88 84 24 a1 00 00 00 	mov    BYTE PTR [esp+0xa1],al
c001e2d1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001e2d5:	88 84 24 a2 00 00 00 	mov    BYTE PTR [esp+0xa2],al
c001e2dc:	83 ec 0c             	sub    esp,0xc
c001e2df:	fc                   	cld    
c001e2e0:	89 e7                	mov    edi,esp
c001e2e2:	8d b4 24 a8 00 00 00 	lea    esi,[esp+0xa8]
c001e2e9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001e2eb:	55                   	push   ebp
c001e2ec:	e8 59 f8 ff ff       	call   c001db4a <PCI::foundDevice(PCIDeviceInfo)>
c001e2f1:	81 c4 dc 00 00 00    	add    esp,0xdc
c001e2f7:	5b                   	pop    ebx
c001e2f8:	5e                   	pop    esi
c001e2f9:	5f                   	pop    edi
c001e2fa:	5d                   	pop    ebp
c001e2fb:	c3                   	ret    

c001e2fc <PCI::checkDevice(unsigned char, unsigned char)>:
c001e2fc:	55                   	push   ebp
c001e2fd:	57                   	push   edi
c001e2fe:	56                   	push   esi
c001e2ff:	53                   	push   ebx
c001e300:	83 ec 0c             	sub    esp,0xc
c001e303:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001e307:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001e30c:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001e311:	6a 00                	push   0x0
c001e313:	56                   	push   esi
c001e314:	57                   	push   edi
c001e315:	55                   	push   ebp
c001e316:	e8 9f f1 ff ff       	call   c001d4ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e31b:	6a 00                	push   0x0
c001e31d:	56                   	push   esi
c001e31e:	57                   	push   edi
c001e31f:	55                   	push   ebp
c001e320:	e8 65 fc ff ff       	call   c001df8a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e325:	83 c4 20             	add    esp,0x20
c001e328:	6a 00                	push   0x0
c001e32a:	56                   	push   esi
c001e32b:	57                   	push   edi
c001e32c:	55                   	push   ebp
c001e32d:	e8 ac f1 ff ff       	call   c001d4de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e332:	83 c4 10             	add    esp,0x10
c001e335:	84 c0                	test   al,al
c001e337:	79 27                	jns    c001e360 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001e339:	bb 01 00 00 00       	mov    ebx,0x1
c001e33e:	53                   	push   ebx
c001e33f:	56                   	push   esi
c001e340:	57                   	push   edi
c001e341:	55                   	push   ebp
c001e342:	e8 73 f1 ff ff       	call   c001d4ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e347:	83 c4 10             	add    esp,0x10
c001e34a:	66 40                	inc    ax
c001e34c:	74 0c                	je     c001e35a <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001e34e:	53                   	push   ebx
c001e34f:	56                   	push   esi
c001e350:	57                   	push   edi
c001e351:	55                   	push   ebp
c001e352:	e8 33 fc ff ff       	call   c001df8a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001e357:	83 c4 10             	add    esp,0x10
c001e35a:	43                   	inc    ebx
c001e35b:	83 fb 08             	cmp    ebx,0x8
c001e35e:	75 de                	jne    c001e33e <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001e360:	83 c4 0c             	add    esp,0xc
c001e363:	5b                   	pop    ebx
c001e364:	5e                   	pop    esi
c001e365:	5f                   	pop    edi
c001e366:	5d                   	pop    ebp
c001e367:	c3                   	ret    

c001e368 <PCI::detect()>:
c001e368:	56                   	push   esi
c001e369:	53                   	push   ebx
c001e36a:	53                   	push   ebx
c001e36b:	31 db                	xor    ebx,ebx
c001e36d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e371:	6a 00                	push   0x0
c001e373:	6a 00                	push   0x0
c001e375:	6a 00                	push   0x0
c001e377:	56                   	push   esi
c001e378:	e8 61 f1 ff ff       	call   c001d4de <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001e37d:	83 c4 10             	add    esp,0x10
c001e380:	a8 80                	test   al,0x80
c001e382:	75 21                	jne    c001e3a5 <PCI::detect()+0x3d>
c001e384:	51                   	push   ecx
c001e385:	51                   	push   ecx
c001e386:	6a 00                	push   0x0
c001e388:	56                   	push   esi
c001e389:	e8 98 f7 ff ff       	call   c001db26 <PCI::checkBus(unsigned char)>
c001e38e:	83 c4 10             	add    esp,0x10
c001e391:	eb 24                	jmp    c001e3b7 <PCI::detect()+0x4f>
c001e393:	52                   	push   edx
c001e394:	52                   	push   edx
c001e395:	53                   	push   ebx
c001e396:	43                   	inc    ebx
c001e397:	56                   	push   esi
c001e398:	e8 89 f7 ff ff       	call   c001db26 <PCI::checkBus(unsigned char)>
c001e39d:	83 c4 10             	add    esp,0x10
c001e3a0:	83 fb 08             	cmp    ebx,0x8
c001e3a3:	74 12                	je     c001e3b7 <PCI::detect()+0x4f>
c001e3a5:	53                   	push   ebx
c001e3a6:	6a 00                	push   0x0
c001e3a8:	6a 00                	push   0x0
c001e3aa:	56                   	push   esi
c001e3ab:	e8 0a f1 ff ff       	call   c001d4ba <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001e3b0:	83 c4 10             	add    esp,0x10
c001e3b3:	66 40                	inc    ax
c001e3b5:	74 dc                	je     c001e393 <PCI::detect()+0x2b>
c001e3b7:	58                   	pop    eax
c001e3b8:	5b                   	pop    ebx
c001e3b9:	5e                   	pop    esi
c001e3ba:	c3                   	ret    
c001e3bb:	90                   	nop

c001e3bc <IDE::close(int, int, void*)>:
c001e3bc:	83 c8 ff             	or     eax,0xffffffff
c001e3bf:	c3                   	ret    

c001e3c0 <IDE::IDE()>:
c001e3c0:	83 ec 0c             	sub    esp,0xc
c001e3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3c7:	83 ec 08             	sub    esp,0x8
c001e3ca:	68 d4 67 02 c0       	push   0xc00267d4
c001e3cf:	50                   	push   eax
c001e3d0:	e8 47 02 ff ff       	call   c000e61c <HardDiskController::HardDiskController(char const*)>
c001e3d5:	83 c4 10             	add    esp,0x10
c001e3d8:	ba 64 68 02 c0       	mov    edx,0xc0026864
c001e3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e1:	89 10                	mov    DWORD PTR [eax],edx
c001e3e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001e3ee:	90                   	nop
c001e3ef:	83 c4 0c             	add    esp,0xc
c001e3f2:	c3                   	ret    
c001e3f3:	90                   	nop

c001e3f4 <IDE::prepareInterrupt(unsigned char)>:
c001e3f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001e3f9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e3fd:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001e405:	c3                   	ret    

c001e406 <selectDrive(unsigned char, unsigned char)>:
c001e406:	c3                   	ret    
c001e407:	90                   	nop

c001e408 <IDE::getBase(unsigned char)>:
c001e408:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001e40d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e411:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001e419:	c3                   	ret    

c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001e41a:	55                   	push   ebp
c001e41b:	57                   	push   edi
c001e41c:	56                   	push   esi
c001e41d:	53                   	push   ebx
c001e41e:	83 ec 1c             	sub    esp,0x1c
c001e421:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e425:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e429:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001e42c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e430:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e434:	80 f9 03             	cmp    cl,0x3
c001e437:	77 51                	ja     c001e48a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001e439:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e43d:	0f b6 f2             	movzx  esi,dl
c001e440:	0f b6 db             	movzx  ebx,bl
c001e443:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e446:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001e44a:	83 ca 80             	or     edx,0xffffff80
c001e44d:	0f b6 d2             	movzx  edx,dl
c001e450:	52                   	push   edx
c001e451:	6a 0c                	push   0xc
c001e453:	56                   	push   esi
c001e454:	57                   	push   edi
c001e455:	e8 c0 ff ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e45a:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001e45f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e463:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001e467:	ee                   	out    dx,al
c001e468:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001e46d:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001e471:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001e475:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e479:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e481:	83 c4 2c             	add    esp,0x2c
c001e484:	5b                   	pop    ebx
c001e485:	5e                   	pop    esi
c001e486:	5f                   	pop    edi
c001e487:	5d                   	pop    ebp
c001e488:	eb 90                	jmp    c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e48a:	80 fb 07             	cmp    bl,0x7
c001e48d:	77 12                	ja     c001e4a1 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001e48f:	0f b6 d2             	movzx  edx,dl
c001e492:	0f b6 db             	movzx  ebx,bl
c001e495:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001e49d:	89 da                	mov    edx,ebx
c001e49f:	eb 2f                	jmp    c001e4d0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e4a1:	80 fb 0d             	cmp    bl,0xd
c001e4a4:	77 13                	ja     c001e4b9 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001e4a6:	0f b6 d2             	movzx  edx,dl
c001e4a9:	0f b6 db             	movzx  ebx,bl
c001e4ac:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001e4b3:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001e4b7:	eb 17                	jmp    c001e4d0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001e4b9:	80 fb 15             	cmp    bl,0x15
c001e4bc:	77 13                	ja     c001e4d1 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001e4be:	0f b6 d2             	movzx  edx,dl
c001e4c1:	0f b6 db             	movzx  ebx,bl
c001e4c4:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001e4cc:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001e4d0:	ee                   	out    dx,al
c001e4d1:	83 c4 1c             	add    esp,0x1c
c001e4d4:	5b                   	pop    ebx
c001e4d5:	5e                   	pop    esi
c001e4d6:	5f                   	pop    edi
c001e4d7:	5d                   	pop    ebp
c001e4d8:	c3                   	ret    
c001e4d9:	90                   	nop

c001e4da <IDE::read(unsigned char, unsigned char)>:
c001e4da:	55                   	push   ebp
c001e4db:	57                   	push   edi
c001e4dc:	56                   	push   esi
c001e4dd:	53                   	push   ebx
c001e4de:	83 ec 1c             	sub    esp,0x1c
c001e4e1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e4e5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e4e9:	8d 43 f8             	lea    eax,[ebx-0x8]
c001e4ec:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e4f0:	3c 03                	cmp    al,0x3
c001e4f2:	77 43                	ja     c001e537 <IDE::read(unsigned char, unsigned char)+0x5d>
c001e4f4:	0f b6 f2             	movzx  esi,dl
c001e4f7:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001e4fa:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001e4fe:	83 c8 80             	or     eax,0xffffff80
c001e501:	0f b6 c0             	movzx  eax,al
c001e504:	50                   	push   eax
c001e505:	6a 0c                	push   0xc
c001e507:	56                   	push   esi
c001e508:	57                   	push   edi
c001e509:	e8 0c ff ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e50e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001e513:	0f b6 c3             	movzx  eax,bl
c001e516:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001e51a:	ec                   	in     al,dx
c001e51b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e51f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001e524:	52                   	push   edx
c001e525:	6a 0c                	push   0xc
c001e527:	56                   	push   esi
c001e528:	57                   	push   edi
c001e529:	e8 ec fe ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e52e:	83 c4 20             	add    esp,0x20
c001e531:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e535:	eb 49                	jmp    c001e580 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e537:	80 fb 07             	cmp    bl,0x7
c001e53a:	77 12                	ja     c001e54e <IDE::read(unsigned char, unsigned char)+0x74>
c001e53c:	0f b6 d2             	movzx  edx,dl
c001e53f:	0f b6 c3             	movzx  eax,bl
c001e542:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001e54a:	89 c2                	mov    edx,eax
c001e54c:	eb 31                	jmp    c001e57f <IDE::read(unsigned char, unsigned char)+0xa5>
c001e54e:	80 fb 0d             	cmp    bl,0xd
c001e551:	77 13                	ja     c001e566 <IDE::read(unsigned char, unsigned char)+0x8c>
c001e553:	0f b6 d2             	movzx  edx,dl
c001e556:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001e55d:	0f b6 d3             	movzx  edx,bl
c001e560:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e564:	eb 19                	jmp    c001e57f <IDE::read(unsigned char, unsigned char)+0xa5>
c001e566:	31 c0                	xor    eax,eax
c001e568:	80 fb 15             	cmp    bl,0x15
c001e56b:	77 13                	ja     c001e580 <IDE::read(unsigned char, unsigned char)+0xa6>
c001e56d:	0f b6 d2             	movzx  edx,dl
c001e570:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001e578:	0f b6 d3             	movzx  edx,bl
c001e57b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e57f:	ec                   	in     al,dx
c001e580:	83 c4 1c             	add    esp,0x1c
c001e583:	5b                   	pop    ebx
c001e584:	5e                   	pop    esi
c001e585:	5f                   	pop    edi
c001e586:	5d                   	pop    ebp
c001e587:	c3                   	ret    

c001e588 <IDE::waitInterrupt(unsigned char)>:
c001e588:	55                   	push   ebp
c001e589:	57                   	push   edi
c001e58a:	56                   	push   esi
c001e58b:	53                   	push   ebx
c001e58c:	31 db                	xor    ebx,ebx
c001e58e:	83 ec 0c             	sub    esp,0xc
c001e591:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001e595:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001e59a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001e5a2:	89 e8                	mov    eax,ebp
c001e5a4:	84 c0                	test   al,al
c001e5a6:	75 30                	jne    c001e5d8 <IDE::waitInterrupt(unsigned char)+0x50>
c001e5a8:	50                   	push   eax
c001e5a9:	6a 0c                	push   0xc
c001e5ab:	56                   	push   esi
c001e5ac:	57                   	push   edi
c001e5ad:	e8 28 ff ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001e5b2:	83 c4 10             	add    esp,0x10
c001e5b5:	a8 01                	test   al,0x1
c001e5b7:	75 27                	jne    c001e5e0 <IDE::waitInterrupt(unsigned char)+0x58>
c001e5b9:	f6 c3 04             	test   bl,0x4
c001e5bc:	75 12                	jne    c001e5d0 <IDE::waitInterrupt(unsigned char)+0x48>
c001e5be:	83 fb 32             	cmp    ebx,0x32
c001e5c1:	7e 0d                	jle    c001e5d0 <IDE::waitInterrupt(unsigned char)+0x48>
c001e5c3:	83 ec 0c             	sub    esp,0xc
c001e5c6:	6a 64                	push   0x64
c001e5c8:	e8 db a2 ff ff       	call   c00188a8 <milliTenthSleep(unsigned int)>
c001e5cd:	83 c4 10             	add    esp,0x10
c001e5d0:	83 fb 3c             	cmp    ebx,0x3c
c001e5d3:	74 0b                	je     c001e5e0 <IDE::waitInterrupt(unsigned char)+0x58>
c001e5d5:	43                   	inc    ebx
c001e5d6:	eb c2                	jmp    c001e59a <IDE::waitInterrupt(unsigned char)+0x12>
c001e5d8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001e5e0:	83 c4 0c             	add    esp,0xc
c001e5e3:	89 e8                	mov    eax,ebp
c001e5e5:	5b                   	pop    ebx
c001e5e6:	5e                   	pop    esi
c001e5e7:	5f                   	pop    edi
c001e5e8:	5d                   	pop    ebp
c001e5e9:	c3                   	ret    

c001e5ea <ideChannel0IRQHandler(regs*, void*)>:
c001e5ea:	83 ec 10             	sub    esp,0x10
c001e5ed:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e5f1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001e5f8:	6a 07                	push   0x7
c001e5fa:	6a 00                	push   0x0
c001e5fc:	50                   	push   eax
c001e5fd:	e8 d8 fe ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001e602:	83 c4 1c             	add    esp,0x1c
c001e605:	c3                   	ret    

c001e606 <ideChannel1IRQHandler(regs*, void*)>:
c001e606:	83 ec 10             	sub    esp,0x10
c001e609:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e60d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001e614:	6a 07                	push   0x7
c001e616:	6a 01                	push   0x1
c001e618:	50                   	push   eax
c001e619:	e8 bc fe ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001e61e:	83 c4 1c             	add    esp,0x1c
c001e621:	c3                   	ret    

c001e622 <IDE::enableIRQs(unsigned char, bool)>:
c001e622:	57                   	push   edi
c001e623:	56                   	push   esi
c001e624:	be 04 00 00 00       	mov    esi,0x4
c001e629:	53                   	push   ebx
c001e62a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e62f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e633:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001e638:	0f 94 c0             	sete   al
c001e63b:	d1 e0                	shl    eax,1
c001e63d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001e644:	0f b6 c0             	movzx  eax,al
c001e647:	50                   	push   eax
c001e648:	6a 0c                	push   0xc
c001e64a:	57                   	push   edi
c001e64b:	53                   	push   ebx
c001e64c:	e8 c9 fd ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e651:	83 c4 10             	add    esp,0x10
c001e654:	50                   	push   eax
c001e655:	6a 0c                	push   0xc
c001e657:	57                   	push   edi
c001e658:	53                   	push   ebx
c001e659:	e8 7c fe ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001e65e:	83 c4 10             	add    esp,0x10
c001e661:	4e                   	dec    esi
c001e662:	75 f0                	jne    c001e654 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001e664:	5b                   	pop    ebx
c001e665:	5e                   	pop    esi
c001e666:	5f                   	pop    edi
c001e667:	c3                   	ret    

c001e668 <IDE::open(int, int, void*)>:
c001e668:	55                   	push   ebp
c001e669:	57                   	push   edi
c001e66a:	56                   	push   esi
c001e66b:	53                   	push   ebx
c001e66c:	83 ec 1c             	sub    esp,0x1c
c001e66f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e673:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e67c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e685:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e68c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e693:	0f 85 b0 02 00 00    	jne    c001e949 <IDE::open(int, int, void*)+0x2e1>
c001e699:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e69f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001e6a3:	83 e0 7f             	and    eax,0x7f
c001e6a6:	3c 05                	cmp    al,0x5
c001e6a8:	74 04                	je     c001e6ae <IDE::open(int, int, void*)+0x46>
c001e6aa:	3c 0f                	cmp    al,0xf
c001e6ac:	75 32                	jne    c001e6e0 <IDE::open(int, int, void*)+0x78>
c001e6ae:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e6b4:	83 e0 fc             	and    eax,0xfffffffc
c001e6b7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e6be:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e6c4:	83 e0 fc             	and    eax,0xfffffffc
c001e6c7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e6ce:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e6d4:	83 e0 fc             	and    eax,0xfffffffc
c001e6d7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e6de:	eb 14                	jmp    c001e6f4 <IDE::open(int, int, void*)+0x8c>
c001e6e0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e6ea:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e6f4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e6fb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001e702:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e706:	89 c6                	mov    esi,eax
c001e708:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e70d:	c1 e6 10             	shl    esi,0x10
c001e710:	89 e8                	mov    eax,ebp
c001e712:	89 fa                	mov    edx,edi
c001e714:	c1 e0 0b             	shl    eax,0xb
c001e717:	09 f0                	or     eax,esi
c001e719:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001e720:	c1 e6 08             	shl    esi,0x8
c001e723:	09 c6                	or     esi,eax
c001e725:	89 f0                	mov    eax,esi
c001e727:	0d 08 00 00 80       	or     eax,0x80000008
c001e72c:	ef                   	out    dx,eax
c001e72d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001e732:	89 ca                	mov    edx,ecx
c001e734:	ed                   	in     eax,dx
c001e735:	c1 e8 10             	shr    eax,0x10
c001e738:	3d ff ff 00 00       	cmp    eax,0xffff
c001e73d:	0f 84 f5 00 00 00    	je     c001e838 <IDE::open(int, int, void*)+0x1d0>
c001e743:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001e749:	89 fa                	mov    edx,edi
c001e74b:	89 f0                	mov    eax,esi
c001e74d:	ef                   	out    dx,eax
c001e74e:	b0 fe                	mov    al,0xfe
c001e750:	89 ca                	mov    edx,ecx
c001e752:	ee                   	out    dx,al
c001e753:	89 f0                	mov    eax,esi
c001e755:	89 fa                	mov    edx,edi
c001e757:	ef                   	out    dx,eax
c001e758:	89 ca                	mov    edx,ecx
c001e75a:	ed                   	in     eax,dx
c001e75b:	3c fe                	cmp    al,0xfe
c001e75d:	0f 85 a9 00 00 00    	jne    c001e80c <IDE::open(int, int, void*)+0x1a4>
c001e763:	8b 15 08 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f08
c001e769:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001e770:	74 33                	je     c001e7a5 <IDE::open(int, int, void*)+0x13d>
c001e772:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001e778:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001e77c:	40                   	inc    eax
c001e77d:	83 ec 0c             	sub    esp,0xc
c001e780:	0f b6 c0             	movzx  eax,al
c001e783:	50                   	push   eax
c001e784:	55                   	push   ebp
c001e785:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e789:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001e78f:	51                   	push   ecx
c001e790:	e8 fb 39 ff ff       	call   c0012190 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001e795:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001e79a:	83 c4 1c             	add    esp,0x1c
c001e79d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e7a3:	eb 0a                	jmp    c001e7af <IDE::open(int, int, void*)+0x147>
c001e7a5:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e7af:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e7b6:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e7bd:	c1 e1 10             	shl    ecx,0x10
c001e7c0:	c1 e0 08             	shl    eax,0x8
c001e7c3:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e7c8:	09 c1                	or     ecx,eax
c001e7ca:	89 fa                	mov    edx,edi
c001e7cc:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e7d3:	c1 e0 0b             	shl    eax,0xb
c001e7d6:	09 c1                	or     ecx,eax
c001e7d8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e7de:	89 c8                	mov    eax,ecx
c001e7e0:	ef                   	out    dx,eax
c001e7e1:	be fc 0c 00 00       	mov    esi,0xcfc
c001e7e6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e7ec:	89 f2                	mov    edx,esi
c001e7ee:	ee                   	out    dx,al
c001e7ef:	89 c8                	mov    eax,ecx
c001e7f1:	89 fa                	mov    edx,edi
c001e7f3:	ef                   	out    dx,eax
c001e7f4:	89 f2                	mov    edx,esi
c001e7f6:	ed                   	in     eax,dx
c001e7f7:	0f b6 c0             	movzx  eax,al
c001e7fa:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e800:	74 46                	je     c001e848 <IDE::open(int, int, void*)+0x1e0>
c001e802:	83 ec 0c             	sub    esp,0xc
c001e805:	68 ec 67 02 c0       	push   0xc00267ec
c001e80a:	eb 34                	jmp    c001e840 <IDE::open(int, int, void*)+0x1d8>
c001e80c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e815:	75 17                	jne    c001e82e <IDE::open(int, int, void*)+0x1c6>
c001e817:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001e81c:	74 07                	je     c001e825 <IDE::open(int, int, void*)+0x1bd>
c001e81e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001e823:	75 09                	jne    c001e82e <IDE::open(int, int, void*)+0x1c6>
c001e825:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e82c:	eb 1a                	jmp    c001e848 <IDE::open(int, int, void*)+0x1e0>
c001e82e:	83 ec 0c             	sub    esp,0xc
c001e831:	68 f4 67 02 c0       	push   0xc00267f4
c001e836:	eb 08                	jmp    c001e840 <IDE::open(int, int, void*)+0x1d8>
c001e838:	83 ec 0c             	sub    esp,0xc
c001e83b:	68 25 68 02 c0       	push   0xc0026825
c001e840:	e8 5e 61 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c001e845:	83 c4 10             	add    esp,0x10
c001e848:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001e84f:	79 1a                	jns    c001e86b <IDE::open(int, int, void*)+0x203>
c001e851:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e857:	83 e0 fc             	and    eax,0xfffffffc
c001e85a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e861:	83 c0 08             	add    eax,0x8
c001e864:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e86b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e871:	89 c2                	mov    edx,eax
c001e873:	83 e2 0f             	and    edx,0xf
c001e876:	66 83 fa 08          	cmp    dx,0x8
c001e87a:	75 0a                	jne    c001e886 <IDE::open(int, int, void*)+0x21e>
c001e87c:	83 e8 02             	sub    eax,0x2
c001e87f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e886:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e88c:	89 c2                	mov    edx,eax
c001e88e:	83 e2 0f             	and    edx,0xf
c001e891:	66 83 fa 08          	cmp    dx,0x8
c001e895:	75 0a                	jne    c001e8a1 <IDE::open(int, int, void*)+0x239>
c001e897:	83 e8 02             	sub    eax,0x2
c001e89a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e8a1:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e8a8:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e8af:	89 d0                	mov    eax,edx
c001e8b1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e8b4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e8b8:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e8bc:	8d 4a 01             	lea    ecx,[edx+0x1]
c001e8bf:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e8c4:	0f b6 c9             	movzx  ecx,cl
c001e8c7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e8ce:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e8d1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e8d5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e8d9:	8d 50 02             	lea    edx,[eax+0x2]
c001e8dc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e8e1:	0f b6 d2             	movzx  edx,dl
c001e8e4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e8ea:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e8ed:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e8f1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e8f5:	8d 48 03             	lea    ecx,[eax+0x3]
c001e8f8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e8fd:	0f b6 c9             	movzx  ecx,cl
c001e900:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e906:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e909:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e90d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e911:	8d 50 04             	lea    edx,[eax+0x4]
c001e914:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e91a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001e91f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e926:	66 85 f6             	test   si,si
c001e929:	74 5b                	je     c001e986 <IDE::open(int, int, void*)+0x31e>
c001e92b:	0f b6 d2             	movzx  edx,dl
c001e92e:	83 c0 05             	add    eax,0x5
c001e931:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e934:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e938:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e93c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e942:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001e947:	eb 3d                	jmp    c001e986 <IDE::open(int, int, void*)+0x31e>
c001e949:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e94f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e956:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e95d:	66 05 06 02          	add    ax,0x206
c001e961:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e968:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e96f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e976:	66 05 06 02          	add    ax,0x206
c001e97a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e981:	e9 e5 fe ff ff       	jmp    c001e86b <IDE::open(int, int, void*)+0x203>
c001e986:	50                   	push   eax
c001e987:	50                   	push   eax
c001e988:	6a 00                	push   0x0
c001e98a:	53                   	push   ebx
c001e98b:	e8 64 fa ff ff       	call   c001e3f4 <IDE::prepareInterrupt(unsigned char)>
c001e990:	5a                   	pop    edx
c001e991:	59                   	pop    ecx
c001e992:	6a 01                	push   0x1
c001e994:	53                   	push   ebx
c001e995:	e8 5a fa ff ff       	call   c001e3f4 <IDE::prepareInterrupt(unsigned char)>
c001e99a:	83 c4 0c             	add    esp,0xc
c001e99d:	6a 00                	push   0x0
c001e99f:	6a 00                	push   0x0
c001e9a1:	53                   	push   ebx
c001e9a2:	e8 7b fc ff ff       	call   c001e622 <IDE::enableIRQs(unsigned char, bool)>
c001e9a7:	83 c4 0c             	add    esp,0xc
c001e9aa:	6a 00                	push   0x0
c001e9ac:	6a 01                	push   0x1
c001e9ae:	53                   	push   ebx
c001e9af:	e8 6e fc ff ff       	call   c001e622 <IDE::enableIRQs(unsigned char, bool)>
c001e9b4:	83 c4 10             	add    esp,0x10
c001e9b7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e9be:	74 34                	je     c001e9f4 <IDE::open(int, int, void*)+0x38c>
c001e9c0:	83 ec 0c             	sub    esp,0xc
c001e9c3:	53                   	push   ebx
c001e9c4:	6a 01                	push   0x1
c001e9c6:	68 ea e5 01 c0       	push   0xc001e5ea
c001e9cb:	6a 0e                	push   0xe
c001e9cd:	53                   	push   ebx
c001e9ce:	e8 13 f8 fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9d3:	83 c4 14             	add    esp,0x14
c001e9d6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e9dc:	53                   	push   ebx
c001e9dd:	6a 01                	push   0x1
c001e9df:	68 06 e6 01 c0       	push   0xc001e606
c001e9e4:	6a 0f                	push   0xf
c001e9e6:	53                   	push   ebx
c001e9e7:	e8 fa f7 fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9ec:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e9f2:	eb 38                	jmp    c001ea2c <IDE::open(int, int, void*)+0x3c4>
c001e9f4:	83 ec 0c             	sub    esp,0xc
c001e9f7:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001ea01:	53                   	push   ebx
c001ea02:	6a 00                	push   0x0
c001ea04:	68 ea e5 01 c0       	push   0xc001e5ea
c001ea09:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ea0f:	53                   	push   ebx
c001ea10:	e8 d1 f7 fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea15:	83 c4 14             	add    esp,0x14
c001ea18:	53                   	push   ebx
c001ea19:	6a 00                	push   0x0
c001ea1b:	68 06 e6 01 c0       	push   0xc001e606
c001ea20:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001ea26:	53                   	push   ebx
c001ea27:	e8 ba f7 fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ea2e:	83 c4 20             	add    esp,0x20
c001ea31:	83 ec 0c             	sub    esp,0xc
c001ea34:	53                   	push   ebx
c001ea35:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ea38:	83 c4 0c             	add    esp,0xc
c001ea3b:	6a 07                	push   0x7
c001ea3d:	6a 00                	push   0x0
c001ea3f:	53                   	push   ebx
c001ea40:	e8 95 fa ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ea45:	83 c4 0c             	add    esp,0xc
c001ea48:	6a 07                	push   0x7
c001ea4a:	6a 01                	push   0x1
c001ea4c:	53                   	push   ebx
c001ea4d:	e8 88 fa ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ea52:	83 c4 0c             	add    esp,0xc
c001ea55:	6a 01                	push   0x1
c001ea57:	6a 00                	push   0x0
c001ea59:	53                   	push   ebx
c001ea5a:	e8 c3 fb ff ff       	call   c001e622 <IDE::enableIRQs(unsigned char, bool)>
c001ea5f:	83 c4 0c             	add    esp,0xc
c001ea62:	6a 01                	push   0x1
c001ea64:	6a 01                	push   0x1
c001ea66:	53                   	push   ebx
c001ea67:	e8 b6 fb ff ff       	call   c001e622 <IDE::enableIRQs(unsigned char, bool)>
c001ea6c:	83 c4 2c             	add    esp,0x2c
c001ea6f:	31 c0                	xor    eax,eax
c001ea71:	5b                   	pop    ebx
c001ea72:	5e                   	pop    esi
c001ea73:	5f                   	pop    edi
c001ea74:	5d                   	pop    ebp
c001ea75:	c3                   	ret    

c001ea76 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ea76:	55                   	push   ebp
c001ea77:	57                   	push   edi
c001ea78:	56                   	push   esi
c001ea79:	53                   	push   ebx
c001ea7a:	83 ec 1c             	sub    esp,0x1c
c001ea7d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ea81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ea85:	8d 50 f8             	lea    edx,[eax-0x8]
c001ea88:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ea8c:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ea90:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ea94:	80 fa 03             	cmp    dl,0x3
c001ea97:	77 5d                	ja     c001eaf6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ea99:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ea9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001eaa1:	0f b6 db             	movzx  ebx,bl
c001eaa4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001eaa7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001eaab:	83 ca 80             	or     edx,0xffffff80
c001eaae:	0f b6 d2             	movzx  edx,dl
c001eab1:	52                   	push   edx
c001eab2:	6a 0c                	push   0xc
c001eab4:	53                   	push   ebx
c001eab5:	56                   	push   esi
c001eab6:	e8 5f f9 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eabb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001eac0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eac4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001eac8:	0f b6 c0             	movzx  eax,al
c001eacb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001eacf:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001ead1:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ead6:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001eada:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001eade:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001eae2:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001eaea:	83 c4 2c             	add    esp,0x2c
c001eaed:	5b                   	pop    ebx
c001eaee:	5e                   	pop    esi
c001eaef:	5f                   	pop    edi
c001eaf0:	5d                   	pop    ebp
c001eaf1:	e9 24 f9 ff ff       	jmp    c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eaf6:	3c 07                	cmp    al,0x7
c001eaf8:	77 10                	ja     c001eb0a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001eafa:	0f b6 db             	movzx  ebx,bl
c001eafd:	0f b6 d0             	movzx  edx,al
c001eb00:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001eb08:	eb 2d                	jmp    c001eb37 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001eb0a:	3c 0d                	cmp    al,0xd
c001eb0c:	77 13                	ja     c001eb21 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001eb0e:	0f b6 db             	movzx  ebx,bl
c001eb11:	0f b6 c0             	movzx  eax,al
c001eb14:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001eb1b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001eb1f:	eb 16                	jmp    c001eb37 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001eb21:	3c 15                	cmp    al,0x15
c001eb23:	77 14                	ja     c001eb39 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001eb25:	0f b6 db             	movzx  ebx,bl
c001eb28:	0f b6 c0             	movzx  eax,al
c001eb2b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001eb33:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001eb37:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001eb39:	83 c4 1c             	add    esp,0x1c
c001eb3c:	5b                   	pop    ebx
c001eb3d:	5e                   	pop    esi
c001eb3e:	5f                   	pop    edi
c001eb3f:	5d                   	pop    ebp
c001eb40:	c3                   	ret    
c001eb41:	90                   	nop

c001eb42 <IDE::detect()>:
c001eb42:	55                   	push   ebp
c001eb43:	57                   	push   edi
c001eb44:	56                   	push   esi
c001eb45:	53                   	push   ebx
c001eb46:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001eb4c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001eb53:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001eb5a:	0f 85 97 02 00 00    	jne    c001edf7 <IDE::detect()+0x2b5>
c001eb60:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001eb67:	31 f6                	xor    esi,esi
c001eb69:	31 ed                	xor    ebp,ebp
c001eb6b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001eb73:	89 e8                	mov    eax,ebp
c001eb75:	c1 e0 06             	shl    eax,0x6
c001eb78:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001eb80:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001eb84:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001eb88:	c1 e0 04             	shl    eax,0x4
c001eb8b:	83 c8 a0             	or     eax,0xffffffa0
c001eb8e:	0f b6 c0             	movzx  eax,al
c001eb91:	50                   	push   eax
c001eb92:	6a 06                	push   0x6
c001eb94:	56                   	push   esi
c001eb95:	53                   	push   ebx
c001eb96:	e8 7f f8 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eb9b:	83 c4 0c             	add    esp,0xc
c001eb9e:	6a 0c                	push   0xc
c001eba0:	56                   	push   esi
c001eba1:	53                   	push   ebx
c001eba2:	e8 33 f9 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001eba7:	83 c4 0c             	add    esp,0xc
c001ebaa:	6a 0c                	push   0xc
c001ebac:	56                   	push   esi
c001ebad:	53                   	push   ebx
c001ebae:	e8 27 f9 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ebb3:	83 c4 0c             	add    esp,0xc
c001ebb6:	6a 0c                	push   0xc
c001ebb8:	56                   	push   esi
c001ebb9:	53                   	push   ebx
c001ebba:	e8 1b f9 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ebbf:	83 c4 0c             	add    esp,0xc
c001ebc2:	6a 0c                	push   0xc
c001ebc4:	56                   	push   esi
c001ebc5:	53                   	push   ebx
c001ebc6:	e8 0f f9 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ebcb:	68 ec 00 00 00       	push   0xec
c001ebd0:	6a 07                	push   0x7
c001ebd2:	56                   	push   esi
c001ebd3:	53                   	push   ebx
c001ebd4:	e8 41 f8 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebd9:	83 c4 1c             	add    esp,0x1c
c001ebdc:	6a 0c                	push   0xc
c001ebde:	56                   	push   esi
c001ebdf:	53                   	push   ebx
c001ebe0:	e8 f5 f8 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ebe5:	83 c4 0c             	add    esp,0xc
c001ebe8:	6a 0c                	push   0xc
c001ebea:	56                   	push   esi
c001ebeb:	53                   	push   ebx
c001ebec:	e8 e9 f8 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ebf1:	83 c4 0c             	add    esp,0xc
c001ebf4:	6a 0c                	push   0xc
c001ebf6:	56                   	push   esi
c001ebf7:	53                   	push   ebx
c001ebf8:	e8 dd f8 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ebfd:	83 c4 0c             	add    esp,0xc
c001ec00:	6a 0c                	push   0xc
c001ec02:	56                   	push   esi
c001ec03:	53                   	push   ebx
c001ec04:	e8 d1 f8 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ec09:	83 c4 0c             	add    esp,0xc
c001ec0c:	6a 0c                	push   0xc
c001ec0e:	56                   	push   esi
c001ec0f:	53                   	push   ebx
c001ec10:	e8 c5 f8 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ec15:	83 c4 10             	add    esp,0x10
c001ec18:	84 c0                	test   al,al
c001ec1a:	0f 84 5f 01 00 00    	je     c001ed7f <IDE::detect()+0x23d>
c001ec20:	31 ff                	xor    edi,edi
c001ec22:	50                   	push   eax
c001ec23:	6a 0c                	push   0xc
c001ec25:	56                   	push   esi
c001ec26:	53                   	push   ebx
c001ec27:	e8 ae f8 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ec2c:	83 c4 10             	add    esp,0x10
c001ec2f:	a8 01                	test   al,0x1
c001ec31:	0f 85 69 01 00 00    	jne    c001eda0 <IDE::detect()+0x25e>
c001ec37:	84 c0                	test   al,al
c001ec39:	78 04                	js     c001ec3f <IDE::detect()+0xfd>
c001ec3b:	a8 08                	test   al,0x8
c001ec3d:	75 23                	jne    c001ec62 <IDE::detect()+0x120>
c001ec3f:	47                   	inc    edi
c001ec40:	81 ff 17 01 00 00    	cmp    edi,0x117
c001ec46:	7e da                	jle    c001ec22 <IDE::detect()+0xe0>
c001ec48:	83 ec 0c             	sub    esp,0xc
c001ec4b:	6a 32                	push   0x32
c001ec4d:	e8 56 9c ff ff       	call   c00188a8 <milliTenthSleep(unsigned int)>
c001ec52:	83 c4 10             	add    esp,0x10
c001ec55:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001ec5b:	75 c5                	jne    c001ec22 <IDE::detect()+0xe0>
c001ec5d:	e9 3e 01 00 00       	jmp    c001eda0 <IDE::detect()+0x25e>
c001ec62:	31 c9                	xor    ecx,ecx
c001ec64:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001ec68:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001ec6c:	83 ec 0c             	sub    esp,0xc
c001ec6f:	68 80 00 00 00       	push   0x80
c001ec74:	57                   	push   edi
c001ec75:	6a 00                	push   0x0
c001ec77:	56                   	push   esi
c001ec78:	53                   	push   ebx
c001ec79:	e8 f8 fd ff ff       	call   c001ea76 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001ec7e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001ec83:	89 e8                	mov    eax,ebp
c001ec85:	89 d1                	mov    ecx,edx
c001ec87:	c1 e0 06             	shl    eax,0x6
c001ec8a:	01 d8                	add    eax,ebx
c001ec8c:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001ec93:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001ec9a:	89 f2                	mov    edx,esi
c001ec9c:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001eca2:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001eca6:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001ecac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ecb0:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001ecb7:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001ecbf:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001ecc6:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001ecce:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001ecd4:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001ecdb:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001ece1:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ece5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001ece9:	83 c4 20             	add    esp,0x20
c001ecec:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001ecef:	83 c0 02             	add    eax,0x2
c001ecf2:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001ecf8:	83 c7 02             	add    edi,0x2
c001ecfb:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001ecfe:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001ed04:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001ed08:	75 e2                	jne    c001ecec <IDE::detect()+0x1aa>
c001ed0a:	89 e8                	mov    eax,ebp
c001ed0c:	c1 e0 06             	shl    eax,0x6
c001ed0f:	01 d8                	add    eax,ebx
c001ed11:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001ed17:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001ed1e:	66 c1 ea 09          	shr    dx,0x9
c001ed22:	83 e2 01             	and    edx,0x1
c001ed25:	84 c9                	test   cl,cl
c001ed27:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001ed2d:	75 22                	jne    c001ed51 <IDE::detect()+0x20f>
c001ed2f:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001ed36:	74 46                	je     c001ed7e <IDE::detect()+0x23c>
c001ed38:	83 ec 0c             	sub    esp,0xc
c001ed3b:	68 7c 01 00 00       	push   0x17c
c001ed40:	e8 ca ac fe ff       	call   c0009a0f <malloc>
c001ed45:	89 c7                	mov    edi,eax
c001ed47:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed4a:	e8 35 06 00 00       	call   c001f384 <ATA::ATA()>
c001ed4f:	eb 17                	jmp    c001ed68 <IDE::detect()+0x226>
c001ed51:	83 ec 0c             	sub    esp,0xc
c001ed54:	68 84 01 00 00       	push   0x184
c001ed59:	e8 b1 ac fe ff       	call   c0009a0f <malloc>
c001ed5e:	89 c7                	mov    edi,eax
c001ed60:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed63:	e8 a4 0c 00 00       	call   c001fa0c <ATAPI::ATAPI()>
c001ed68:	5a                   	pop    edx
c001ed69:	59                   	pop    ecx
c001ed6a:	57                   	push   edi
c001ed6b:	53                   	push   ebx
c001ed6c:	e8 fd f4 fe ff       	call   c000e26e <Device::addChild(Device*)>
c001ed71:	8b 07                	mov    eax,DWORD PTR [edi]
c001ed73:	53                   	push   ebx
c001ed74:	55                   	push   ebp
c001ed75:	6a 00                	push   0x0
c001ed77:	57                   	push   edi
c001ed78:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ed7b:	83 c4 20             	add    esp,0x20
c001ed7e:	45                   	inc    ebp
c001ed7f:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001ed84:	74 0d                	je     c001ed93 <IDE::detect()+0x251>
c001ed86:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001ed8e:	e9 e0 fd ff ff       	jmp    c001eb73 <IDE::detect()+0x31>
c001ed93:	4e                   	dec    esi
c001ed94:	74 61                	je     c001edf7 <IDE::detect()+0x2b5>
c001ed96:	be 01 00 00 00       	mov    esi,0x1
c001ed9b:	e9 cb fd ff ff       	jmp    c001eb6b <IDE::detect()+0x29>
c001eda0:	50                   	push   eax
c001eda1:	6a 04                	push   0x4
c001eda3:	56                   	push   esi
c001eda4:	53                   	push   ebx
c001eda5:	e8 30 f7 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001edaa:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001edae:	83 c4 0c             	add    esp,0xc
c001edb1:	6a 05                	push   0x5
c001edb3:	56                   	push   esi
c001edb4:	53                   	push   ebx
c001edb5:	e8 20 f7 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001edba:	83 c4 10             	add    esp,0x10
c001edbd:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001edc1:	80 fa 14             	cmp    dl,0x14
c001edc4:	75 04                	jne    c001edca <IDE::detect()+0x288>
c001edc6:	3c eb                	cmp    al,0xeb
c001edc8:	eb 07                	jmp    c001edd1 <IDE::detect()+0x28f>
c001edca:	3c 96                	cmp    al,0x96
c001edcc:	75 b1                	jne    c001ed7f <IDE::detect()+0x23d>
c001edce:	80 fa 69             	cmp    dl,0x69
c001edd1:	75 ac                	jne    c001ed7f <IDE::detect()+0x23d>
c001edd3:	68 a1 00 00 00       	push   0xa1
c001edd8:	6a 07                	push   0x7
c001edda:	56                   	push   esi
c001eddb:	53                   	push   ebx
c001eddc:	e8 39 f6 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ede1:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001ede8:	e8 bb 9a ff ff       	call   c00188a8 <milliTenthSleep(unsigned int)>
c001eded:	83 c4 10             	add    esp,0x10
c001edf0:	b1 01                	mov    cl,0x1
c001edf2:	e9 6d fe ff ff       	jmp    c001ec64 <IDE::detect()+0x122>
c001edf7:	81 c4 1c 02 00 00    	add    esp,0x21c
c001edfd:	5b                   	pop    ebx
c001edfe:	5e                   	pop    esi
c001edff:	5f                   	pop    edi
c001ee00:	5d                   	pop    ebp
c001ee01:	c3                   	ret    

c001ee02 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001ee02:	55                   	push   ebp
c001ee03:	57                   	push   edi
c001ee04:	56                   	push   esi
c001ee05:	53                   	push   ebx
c001ee06:	83 ec 1c             	sub    esp,0x1c
c001ee09:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ee0d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ee11:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ee15:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001ee19:	88 c3                	mov    bl,al
c001ee1b:	84 c0                	test   al,al
c001ee1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee21:	0f 84 81 00 00 00    	je     c001eea8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ee27:	83 ec 0c             	sub    esp,0xc
c001ee2a:	68 4f 68 02 c0       	push   0xc002684f
c001ee2f:	e8 c7 de fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ee34:	83 c4 10             	add    esp,0x10
c001ee37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee3b:	3c 01                	cmp    al,0x1
c001ee3d:	74 63                	je     c001eea2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001ee3f:	3c 02                	cmp    al,0x2
c001ee41:	75 53                	jne    c001ee96 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001ee43:	d1 e6                	shl    esi,1
c001ee45:	09 ee                	or     esi,ebp
c001ee47:	50                   	push   eax
c001ee48:	89 f0                	mov    eax,esi
c001ee4a:	6a 01                	push   0x1
c001ee4c:	0f b6 f0             	movzx  esi,al
c001ee4f:	c1 e6 06             	shl    esi,0x6
c001ee52:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001ee5a:	50                   	push   eax
c001ee5b:	57                   	push   edi
c001ee5c:	e8 79 f6 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001ee61:	83 c4 10             	add    esp,0x10
c001ee64:	a8 01                	test   al,0x1
c001ee66:	74 02                	je     c001ee6a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001ee68:	b3 07                	mov    bl,0x7
c001ee6a:	a8 02                	test   al,0x2
c001ee6c:	74 02                	je     c001ee70 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001ee6e:	b3 03                	mov    bl,0x3
c001ee70:	a8 04                	test   al,0x4
c001ee72:	74 02                	je     c001ee76 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001ee74:	b3 14                	mov    bl,0x14
c001ee76:	a8 08                	test   al,0x8
c001ee78:	74 02                	je     c001ee7c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001ee7a:	b3 03                	mov    bl,0x3
c001ee7c:	a8 10                	test   al,0x10
c001ee7e:	74 02                	je     c001ee82 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001ee80:	b3 15                	mov    bl,0x15
c001ee82:	a8 20                	test   al,0x20
c001ee84:	74 02                	je     c001ee88 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001ee86:	b3 03                	mov    bl,0x3
c001ee88:	a8 40                	test   al,0x40
c001ee8a:	74 02                	je     c001ee8e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001ee8c:	b3 16                	mov    bl,0x16
c001ee8e:	84 c0                	test   al,al
c001ee90:	79 16                	jns    c001eea8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ee92:	b3 0d                	mov    bl,0xd
c001ee94:	eb 12                	jmp    c001eea8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ee96:	3c 03                	cmp    al,0x3
c001ee98:	74 0c                	je     c001eea6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001ee9a:	3c 04                	cmp    al,0x4
c001ee9c:	75 0a                	jne    c001eea8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001ee9e:	b3 08                	mov    bl,0x8
c001eea0:	eb 06                	jmp    c001eea8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001eea2:	b3 13                	mov    bl,0x13
c001eea4:	eb 02                	jmp    c001eea8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001eea6:	b3 17                	mov    bl,0x17
c001eea8:	83 c4 1c             	add    esp,0x1c
c001eeab:	88 d8                	mov    al,bl
c001eead:	5b                   	pop    ebx
c001eeae:	5e                   	pop    esi
c001eeaf:	5f                   	pop    edi
c001eeb0:	5d                   	pop    ebp
c001eeb1:	c3                   	ret    

c001eeb2 <IDE::polling(unsigned char, unsigned int)>:
c001eeb2:	57                   	push   edi
c001eeb3:	56                   	push   esi
c001eeb4:	53                   	push   ebx
c001eeb5:	bb 04 00 00 00       	mov    ebx,0x4
c001eeba:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001eebe:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001eec3:	52                   	push   edx
c001eec4:	6a 0c                	push   0xc
c001eec6:	56                   	push   esi
c001eec7:	57                   	push   edi
c001eec8:	e8 0d f6 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001eecd:	83 c4 10             	add    esp,0x10
c001eed0:	4b                   	dec    ebx
c001eed1:	75 f0                	jne    c001eec3 <IDE::polling(unsigned char, unsigned int)+0x11>
c001eed3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001eed8:	50                   	push   eax
c001eed9:	6a 0c                	push   0xc
c001eedb:	56                   	push   esi
c001eedc:	57                   	push   edi
c001eedd:	e8 f8 f5 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001eee2:	83 c4 10             	add    esp,0x10
c001eee5:	a8 01                	test   al,0x1
c001eee7:	75 17                	jne    c001ef00 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001eee9:	a8 20                	test   al,0x20
c001eeeb:	75 0f                	jne    c001eefc <IDE::polling(unsigned char, unsigned int)+0x4a>
c001eeed:	4b                   	dec    ebx
c001eeee:	74 10                	je     c001ef00 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001eef0:	84 c0                	test   al,al
c001eef2:	78 e4                	js     c001eed8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001eef4:	a8 08                	test   al,0x8
c001eef6:	74 e0                	je     c001eed8 <IDE::polling(unsigned char, unsigned int)+0x26>
c001eef8:	31 c0                	xor    eax,eax
c001eefa:	eb 06                	jmp    c001ef02 <IDE::polling(unsigned char, unsigned int)+0x50>
c001eefc:	b0 01                	mov    al,0x1
c001eefe:	eb 02                	jmp    c001ef02 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ef00:	b0 02                	mov    al,0x2
c001ef02:	5b                   	pop    ebx
c001ef03:	5e                   	pop    esi
c001ef04:	5f                   	pop    edi
c001ef05:	c3                   	ret    

c001ef06 <SATABus::close(int, int, void*)>:
c001ef06:	31 c0                	xor    eax,eax
c001ef08:	c3                   	ret    
c001ef09:	90                   	nop

c001ef0a <SATABus::detect()>:
c001ef0a:	c3                   	ret    
c001ef0b:	90                   	nop

c001ef0c <SATABus::SATABus()>:
c001ef0c:	83 ec 0c             	sub    esp,0xc
c001ef0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef13:	83 ec 08             	sub    esp,0x8
c001ef16:	68 88 68 02 c0       	push   0xc0026888
c001ef1b:	50                   	push   eax
c001ef1c:	e8 fb f6 fe ff       	call   c000e61c <HardDiskController::HardDiskController(char const*)>
c001ef21:	83 c4 10             	add    esp,0x10
c001ef24:	ba 20 69 02 c0       	mov    edx,0xc0026920
c001ef29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2d:	89 10                	mov    DWORD PTR [eax],edx
c001ef2f:	83 ec 0c             	sub    esp,0xc
c001ef32:	6a 50                	push   0x50
c001ef34:	e8 78 b2 fe ff       	call   c000a1b1 <Phys::allocateContiguousPages(int)>
c001ef39:	83 c4 10             	add    esp,0x10
c001ef3c:	89 c2                	mov    edx,eax
c001ef3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef42:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef48:	83 ec 0c             	sub    esp,0xc
c001ef4b:	6a 50                	push   0x50
c001ef4d:	e8 83 ca fe ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c001ef52:	83 c4 10             	add    esp,0x10
c001ef55:	89 c2                	mov    edx,eax
c001ef57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ef61:	a1 30 80 02 c0       	mov    eax,ds:0xc0028030
c001ef66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef6a:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ef70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef74:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef7a:	83 ec 0c             	sub    esp,0xc
c001ef7d:	6a 03                	push   0x3
c001ef7f:	6a 50                	push   0x50
c001ef81:	51                   	push   ecx
c001ef82:	52                   	push   edx
c001ef83:	50                   	push   eax
c001ef84:	e8 e9 d3 fe ff       	call   c000c372 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ef89:	83 c4 20             	add    esp,0x20
c001ef8c:	90                   	nop
c001ef8d:	83 c4 0c             	add    esp,0xc
c001ef90:	c3                   	ret    
c001ef91:	90                   	nop

c001ef92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ef92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ef96:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ef99:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ef9c:	09 c2                	or     edx,eax
c001ef9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001efa2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001efa8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001efaa:	31 c0                	xor    eax,eax
c001efac:	c1 e9 08             	shr    ecx,0x8
c001efaf:	83 e1 0f             	and    ecx,0xf
c001efb2:	39 c8                	cmp    eax,ecx
c001efb4:	74 0a                	je     c001efc0 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001efb6:	f6 c2 01             	test   dl,0x1
c001efb9:	74 08                	je     c001efc3 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001efbb:	d1 ea                	shr    edx,1
c001efbd:	40                   	inc    eax
c001efbe:	eb f2                	jmp    c001efb2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001efc0:	83 c8 ff             	or     eax,0xffffffff
c001efc3:	c3                   	ret    

c001efc4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001efc4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001efc8:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001efcb:	89 c2                	mov    edx,eax
c001efcd:	c1 ea 08             	shr    edx,0x8
c001efd0:	83 e2 0f             	and    edx,0xf
c001efd3:	fe ca                	dec    dl
c001efd5:	75 31                	jne    c001f008 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001efd7:	83 e0 0f             	and    eax,0xf
c001efda:	3c 03                	cmp    al,0x3
c001efdc:	75 2a                	jne    c001f008 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001efde:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001efe1:	b8 02 00 00 00       	mov    eax,0x2
c001efe6:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001efec:	74 1c                	je     c001f00a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001efee:	b8 04 00 00 00       	mov    eax,0x4
c001eff3:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001eff9:	74 0f                	je     c001f00a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001effb:	31 c0                	xor    eax,eax
c001effd:	83 fa 03             	cmp    edx,0x3
c001f000:	0f 94 c0             	sete   al
c001f003:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001f007:	c3                   	ret    
c001f008:	31 c0                	xor    eax,eax
c001f00a:	c3                   	ret    
c001f00b:	90                   	nop

c001f00c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001f00c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f010:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f013:	0f ba e2 0f          	bt     edx,0xf
c001f017:	72 f7                	jb     c001f010 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001f019:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f01c:	83 ca 10             	or     edx,0x10
c001f01f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f022:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f025:	83 ca 01             	or     edx,0x1
c001f028:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f02b:	c3                   	ret    

c001f02c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001f02c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f030:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f033:	83 e2 fe             	and    edx,0xfffffffe
c001f036:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f039:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f03c:	83 e2 ef             	and    edx,0xffffffef
c001f03f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f042:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f045:	0f ba e2 0e          	bt     edx,0xe
c001f049:	72 f7                	jb     c001f042 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f04b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f04e:	0f ba e2 0f          	bt     edx,0xf
c001f052:	72 ee                	jb     c001f042 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001f054:	c3                   	ret    
c001f055:	90                   	nop

c001f056 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001f056:	55                   	push   ebp
c001f057:	57                   	push   edi
c001f058:	56                   	push   esi
c001f059:	53                   	push   ebx
c001f05a:	83 ec 1c             	sub    esp,0x1c
c001f05d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f061:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f065:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f069:	53                   	push   ebx
c001f06a:	89 fd                	mov    ebp,edi
c001f06c:	56                   	push   esi
c001f06d:	c1 e5 0a             	shl    ebp,0xa
c001f070:	e8 b7 ff ff ff       	call   c001f02c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001f075:	83 ec 0c             	sub    esp,0xc
c001f078:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001f07e:	01 e8                	add    eax,ebp
c001f080:	89 03                	mov    DWORD PTR [ebx],eax
c001f082:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f084:	68 00 04 00 00       	push   0x400
c001f089:	6a 00                	push   0x0
c001f08b:	50                   	push   eax
c001f08c:	e8 f3 15 fe ff       	call   c0000684 <memset>
c001f091:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001f097:	89 fa                	mov    edx,edi
c001f099:	01 e8                	add    eax,ebp
c001f09b:	c1 e7 0d             	shl    edi,0xd
c001f09e:	89 03                	mov    DWORD PTR [ebx],eax
c001f0a0:	c1 e2 08             	shl    edx,0x8
c001f0a3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001f0aa:	81 c2 00 80 00 00    	add    edx,0x8000
c001f0b0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001f0b4:	89 d0                	mov    eax,edx
c001f0b6:	83 c4 1c             	add    esp,0x1c
c001f0b9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f0bf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001f0c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001f0c5:	68 00 01 00 00       	push   0x100
c001f0ca:	6a 00                	push   0x0
c001f0cc:	50                   	push   eax
c001f0cd:	e8 b2 15 fe ff       	call   c0000684 <memset>
c001f0d2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f0d6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001f0dc:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001f0e2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f0e6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001f0e9:	83 c4 10             	add    esp,0x10
c001f0ec:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001f0f3:	31 ff                	xor    edi,edi
c001f0f5:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001f0fb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001f101:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f105:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001f10b:	83 c5 20             	add    ebp,0x20
c001f10e:	01 f8                	add    eax,edi
c001f110:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f113:	52                   	push   edx
c001f114:	68 00 01 00 00       	push   0x100
c001f119:	6a 00                	push   0x0
c001f11b:	50                   	push   eax
c001f11c:	e8 63 15 fe ff       	call   c0000684 <memset>
c001f121:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f125:	83 c4 10             	add    esp,0x10
c001f128:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001f12e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001f135:	01 f8                	add    eax,edi
c001f137:	81 c7 00 01 00 00    	add    edi,0x100
c001f13d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f140:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001f146:	75 b3                	jne    c001f0fb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001f148:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001f14c:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001f150:	83 c4 1c             	add    esp,0x1c
c001f153:	5b                   	pop    ebx
c001f154:	5e                   	pop    esi
c001f155:	5f                   	pop    edi
c001f156:	5d                   	pop    ebp
c001f157:	e9 b0 fe ff ff       	jmp    c001f00c <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001f15c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001f15c:	55                   	push   ebp
c001f15d:	57                   	push   edi
c001f15e:	56                   	push   esi
c001f15f:	53                   	push   ebx
c001f160:	83 ec 0c             	sub    esp,0xc
c001f163:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f167:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001f16e:	74 2d                	je     c001f19d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f170:	83 ec 0c             	sub    esp,0xc
c001f173:	68 ac 68 02 c0       	push   0xc00268ac
c001f178:	e8 ec a8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f17d:	83 c4 10             	add    esp,0x10
c001f180:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001f187:	75 14                	jne    c001f19d <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x41>
c001f189:	e4 60                	in     al,0x60
c001f18b:	3c 1c                	cmp    al,0x1c
c001f18d:	74 04                	je     c001f193 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f18f:	3c 5a                	cmp    al,0x5a
c001f191:	75 f6                	jne    c001f189 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x2d>
c001f193:	e4 60                	in     al,0x60
c001f195:	3c 5a                	cmp    al,0x5a
c001f197:	74 fa                	je     c001f193 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f199:	3c 1c                	cmp    al,0x1c
c001f19b:	74 f6                	je     c001f193 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x37>
c001f19d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f1a1:	31 db                	xor    ebx,ebx
c001f1a3:	8b 68 0c             	mov    ebp,DWORD PTR [eax+0xc]
c001f1a6:	f7 c5 01 00 00 00    	test   ebp,0x1
c001f1ac:	0f 84 78 01 00 00    	je     c001f32a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f1b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f1b6:	89 d8                	mov    eax,ebx
c001f1b8:	c1 e0 07             	shl    eax,0x7
c001f1bb:	8d bc 02 00 01 00 00 	lea    edi,[edx+eax*1+0x100]
c001f1c2:	50                   	push   eax
c001f1c3:	50                   	push   eax
c001f1c4:	57                   	push   edi
c001f1c5:	56                   	push   esi
c001f1c6:	e8 f9 fd ff ff       	call   c001efc4 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001f1cb:	83 c4 10             	add    esp,0x10
c001f1ce:	83 f8 01             	cmp    eax,0x1
c001f1d1:	0f 85 19 01 00 00    	jne    c001f2f0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x194>
c001f1d7:	50                   	push   eax
c001f1d8:	53                   	push   ebx
c001f1d9:	57                   	push   edi
c001f1da:	56                   	push   esi
c001f1db:	e8 76 fe ff ff       	call   c001f056 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f1e0:	83 c4 10             	add    esp,0x10
c001f1e3:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001f1ea:	74 2d                	je     c001f219 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f1ec:	83 ec 0c             	sub    esp,0xc
c001f1ef:	68 c1 68 02 c0       	push   0xc00268c1
c001f1f4:	e8 70 a8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f1f9:	83 c4 10             	add    esp,0x10
c001f1fc:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001f203:	75 14                	jne    c001f219 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xbd>
c001f205:	e4 60                	in     al,0x60
c001f207:	3c 1c                	cmp    al,0x1c
c001f209:	74 04                	je     c001f20f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f20b:	3c 5a                	cmp    al,0x5a
c001f20d:	75 f6                	jne    c001f205 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa9>
c001f20f:	e4 60                	in     al,0x60
c001f211:	3c 5a                	cmp    al,0x5a
c001f213:	74 fa                	je     c001f20f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f215:	3c 1c                	cmp    al,0x1c
c001f217:	74 f6                	je     c001f20f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb3>
c001f219:	83 ec 0c             	sub    esp,0xc
c001f21c:	68 7c 01 00 00       	push   0x17c
c001f221:	e8 e9 a7 fe ff       	call   c0009a0f <malloc>
c001f226:	89 04 24             	mov    DWORD PTR [esp],eax
c001f229:	89 c7                	mov    edi,eax
c001f22b:	e8 14 10 00 00       	call   c0020244 <SATA::SATA()>
c001f230:	83 c4 10             	add    esp,0x10
c001f233:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001f23a:	74 2d                	je     c001f269 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f23c:	83 ec 0c             	sub    esp,0xc
c001f23f:	68 d6 68 02 c0       	push   0xc00268d6
c001f244:	e8 20 a8 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f249:	83 c4 10             	add    esp,0x10
c001f24c:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001f253:	75 14                	jne    c001f269 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x10d>
c001f255:	e4 60                	in     al,0x60
c001f257:	3c 5a                	cmp    al,0x5a
c001f259:	74 04                	je     c001f25f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f25b:	3c 1c                	cmp    al,0x1c
c001f25d:	75 f6                	jne    c001f255 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xf9>
c001f25f:	e4 60                	in     al,0x60
c001f261:	3c 5a                	cmp    al,0x5a
c001f263:	74 fa                	je     c001f25f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f265:	3c 1c                	cmp    al,0x1c
c001f267:	74 f6                	je     c001f25f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x103>
c001f269:	50                   	push   eax
c001f26a:	50                   	push   eax
c001f26b:	57                   	push   edi
c001f26c:	56                   	push   esi
c001f26d:	e8 fc ef fe ff       	call   c000e26e <Device::addChild(Device*)>
c001f272:	83 c4 10             	add    esp,0x10
c001f275:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001f27c:	74 2d                	je     c001f2ab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f27e:	83 ec 0c             	sub    esp,0xc
c001f281:	68 eb 68 02 c0       	push   0xc00268eb
c001f286:	e8 de a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f28b:	83 c4 10             	add    esp,0x10
c001f28e:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001f295:	75 14                	jne    c001f2ab <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14f>
c001f297:	e4 60                	in     al,0x60
c001f299:	3c 1c                	cmp    al,0x1c
c001f29b:	74 04                	je     c001f2a1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f29d:	3c 5a                	cmp    al,0x5a
c001f29f:	75 f6                	jne    c001f297 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x13b>
c001f2a1:	e4 60                	in     al,0x60
c001f2a3:	3c 5a                	cmp    al,0x5a
c001f2a5:	74 fa                	je     c001f2a1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f2a7:	3c 1c                	cmp    al,0x1c
c001f2a9:	74 f6                	je     c001f2a1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x145>
c001f2ab:	8b 07                	mov    eax,DWORD PTR [edi]
c001f2ad:	56                   	push   esi
c001f2ae:	6a 00                	push   0x0
c001f2b0:	53                   	push   ebx
c001f2b1:	57                   	push   edi
c001f2b2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f2b5:	83 c4 10             	add    esp,0x10
c001f2b8:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c001f2bf:	74 69                	je     c001f32a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f2c1:	83 ec 0c             	sub    esp,0xc
c001f2c4:	68 00 69 02 c0       	push   0xc0026900
c001f2c9:	e8 9b a7 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c001f2ce:	83 c4 10             	add    esp,0x10
c001f2d1:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c001f2d8:	75 50                	jne    c001f32a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f2da:	e4 60                	in     al,0x60
c001f2dc:	3c 1c                	cmp    al,0x1c
c001f2de:	74 04                	je     c001f2e4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f2e0:	3c 5a                	cmp    al,0x5a
c001f2e2:	75 f6                	jne    c001f2da <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x17e>
c001f2e4:	e4 60                	in     al,0x60
c001f2e6:	3c 5a                	cmp    al,0x5a
c001f2e8:	74 fa                	je     c001f2e4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f2ea:	3c 1c                	cmp    al,0x1c
c001f2ec:	74 f6                	je     c001f2e4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x188>
c001f2ee:	eb 3a                	jmp    c001f32a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f2f0:	83 f8 04             	cmp    eax,0x4
c001f2f3:	75 35                	jne    c001f32a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x1ce>
c001f2f5:	50                   	push   eax
c001f2f6:	53                   	push   ebx
c001f2f7:	57                   	push   edi
c001f2f8:	56                   	push   esi
c001f2f9:	e8 58 fd ff ff       	call   c001f056 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001f2fe:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001f305:	e8 05 a7 fe ff       	call   c0009a0f <malloc>
c001f30a:	89 04 24             	mov    DWORD PTR [esp],eax
c001f30d:	89 c7                	mov    edi,eax
c001f30f:	e8 a6 17 00 00       	call   c0020aba <SATAPI::SATAPI()>
c001f314:	5a                   	pop    edx
c001f315:	59                   	pop    ecx
c001f316:	57                   	push   edi
c001f317:	56                   	push   esi
c001f318:	e8 51 ef fe ff       	call   c000e26e <Device::addChild(Device*)>
c001f31d:	8b 07                	mov    eax,DWORD PTR [edi]
c001f31f:	56                   	push   esi
c001f320:	6a 00                	push   0x0
c001f322:	53                   	push   ebx
c001f323:	57                   	push   edi
c001f324:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001f327:	83 c4 20             	add    esp,0x20
c001f32a:	d1 ed                	shr    ebp,1
c001f32c:	43                   	inc    ebx
c001f32d:	83 fb 20             	cmp    ebx,0x20
c001f330:	0f 85 70 fe ff ff    	jne    c001f1a6 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x4a>
c001f336:	83 c4 0c             	add    esp,0xc
c001f339:	5b                   	pop    ebx
c001f33a:	5e                   	pop    esi
c001f33b:	5f                   	pop    edi
c001f33c:	5d                   	pop    ebp
c001f33d:	c3                   	ret    

c001f33e <SATABus::open(int, int, void*)>:
c001f33e:	83 ec 14             	sub    esp,0x14
c001f341:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f345:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001f34b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001f351:	52                   	push   edx
c001f352:	50                   	push   eax
c001f353:	e8 04 fe ff ff       	call   c001f15c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001f358:	31 c0                	xor    eax,eax
c001f35a:	83 c4 1c             	add    esp,0x1c
c001f35d:	c3                   	ret    

c001f35e <ATA::close(int, int, void*)>:
c001f35e:	83 ec 0c             	sub    esp,0xc
c001f361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f365:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f36b:	85 c0                	test   eax,eax
c001f36d:	74 0c                	je     c001f37b <ATA::close(int, int, void*)+0x1d>
c001f36f:	83 ec 0c             	sub    esp,0xc
c001f372:	8b 10                	mov    edx,DWORD PTR [eax]
c001f374:	50                   	push   eax
c001f375:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f378:	83 c4 10             	add    esp,0x10
c001f37b:	31 c0                	xor    eax,eax
c001f37d:	83 c4 0c             	add    esp,0xc
c001f380:	c3                   	ret    
c001f381:	90                   	nop

c001f382 <ATA::powerSaving(PowerSavingLevel)>:
c001f382:	c3                   	ret    
c001f383:	90                   	nop

c001f384 <ATA::ATA()>:
c001f384:	83 ec 0c             	sub    esp,0xc
c001f387:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f38b:	83 ec 04             	sub    esp,0x4
c001f38e:	68 00 02 00 00       	push   0x200
c001f393:	68 8f 6a 02 c0       	push   0xc0026a8f
c001f398:	50                   	push   eax
c001f399:	e8 08 f3 fe ff       	call   c000e6a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f39e:	83 c4 10             	add    esp,0x10
c001f3a1:	ba 98 69 02 c0       	mov    edx,0xc0026998
c001f3a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3aa:	89 10                	mov    DWORD PTR [eax],edx
c001f3ac:	90                   	nop
c001f3ad:	83 c4 0c             	add    esp,0xc
c001f3b0:	c3                   	ret    
c001f3b1:	90                   	nop

c001f3b2 <ATA::flush(bool)>:
c001f3b2:	53                   	push   ebx
c001f3b3:	83 ec 08             	sub    esp,0x8
c001f3b6:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001f3bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f3bf:	19 c0                	sbb    eax,eax
c001f3c1:	83 e0 fd             	and    eax,0xfffffffd
c001f3c4:	05 ea 00 00 00       	add    eax,0xea
c001f3c9:	50                   	push   eax
c001f3ca:	6a 07                	push   0x7
c001f3cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3d3:	50                   	push   eax
c001f3d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3da:	e8 3b f0 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f3df:	83 c4 0c             	add    esp,0xc
c001f3e2:	6a 00                	push   0x0
c001f3e4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3eb:	50                   	push   eax
c001f3ec:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3f2:	e8 bb fa ff ff       	call   c001eeb2 <IDE::polling(unsigned char, unsigned int)>
c001f3f7:	83 c4 18             	add    esp,0x18
c001f3fa:	5b                   	pop    ebx
c001f3fb:	c3                   	ret    

c001f3fc <ATA::readyForCommand()>:
c001f3fc:	56                   	push   esi
c001f3fd:	53                   	push   ebx
c001f3fe:	53                   	push   ebx
c001f3ff:	31 db                	xor    ebx,ebx
c001f401:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f405:	51                   	push   ecx
c001f406:	6a 0c                	push   0xc
c001f408:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f40f:	50                   	push   eax
c001f410:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f416:	e8 bf f0 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001f41b:	83 c4 10             	add    esp,0x10
c001f41e:	a8 88                	test   al,0x88
c001f420:	74 1f                	je     c001f441 <ATA::readyForCommand()+0x45>
c001f422:	43                   	inc    ebx
c001f423:	83 fb 63             	cmp    ebx,0x63
c001f426:	7e dd                	jle    c001f405 <ATA::readyForCommand()+0x9>
c001f428:	83 ec 0c             	sub    esp,0xc
c001f42b:	6a 0a                	push   0xa
c001f42d:	e8 76 94 ff ff       	call   c00188a8 <milliTenthSleep(unsigned int)>
c001f432:	83 c4 10             	add    esp,0x10
c001f435:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f43b:	75 c8                	jne    c001f405 <ATA::readyForCommand()+0x9>
c001f43d:	31 c0                	xor    eax,eax
c001f43f:	eb 02                	jmp    c001f443 <ATA::readyForCommand()+0x47>
c001f441:	b0 01                	mov    al,0x1
c001f443:	5a                   	pop    edx
c001f444:	5b                   	pop    ebx
c001f445:	5e                   	pop    esi
c001f446:	c3                   	ret    
c001f447:	90                   	nop

c001f448 <ATA::access(unsigned long long, int, void*, bool)>:
c001f448:	55                   	push   ebp
c001f449:	57                   	push   edi
c001f44a:	56                   	push   esi
c001f44b:	53                   	push   ebx
c001f44c:	83 ec 38             	sub    esp,0x38
c001f44f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001f453:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001f457:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f45b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f45f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f463:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f467:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001f46b:	68 44 69 02 c0       	push   0xc0026944
c001f470:	e8 86 d8 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f475:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f47b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f47f:	83 c4 10             	add    esp,0x10
c001f482:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f488:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f48c:	c1 e0 06             	shl    eax,0x6
c001f48f:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f497:	74 5d                	je     c001f4f6 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001f499:	89 fa                	mov    edx,edi
c001f49b:	89 f0                	mov    eax,esi
c001f49d:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f4a1:	c1 ea 1c             	shr    edx,0x1c
c001f4a4:	89 d1                	mov    ecx,edx
c001f4a6:	09 c1                	or     ecx,eax
c001f4a8:	74 25                	je     c001f4cf <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001f4aa:	31 ed                	xor    ebp,ebp
c001f4ac:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f4b3:	89 fa                	mov    edx,edi
c001f4b5:	89 f0                	mov    eax,esi
c001f4b7:	0f ad d0             	shrd   eax,edx,cl
c001f4ba:	d3 ea                	shr    edx,cl
c001f4bc:	f6 c1 20             	test   cl,0x20
c001f4bf:	74 02                	je     c001f4c3 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001f4c1:	89 d0                	mov    eax,edx
c001f4c3:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f4c7:	45                   	inc    ebp
c001f4c8:	83 fd 06             	cmp    ebp,0x6
c001f4cb:	75 df                	jne    c001f4ac <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001f4cd:	eb 76                	jmp    c001f545 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001f4cf:	89 f0                	mov    eax,esi
c001f4d1:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f4d6:	89 fa                	mov    edx,edi
c001f4d8:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f4df:	0f ac d0 10          	shrd   eax,edx,0x10
c001f4e3:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f4e8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f4ec:	c1 ee 18             	shr    esi,0x18
c001f4ef:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f4f4:	eb 56                	jmp    c001f54c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f4f6:	6a 00                	push   0x0
c001f4f8:	6a 3f                	push   0x3f
c001f4fa:	57                   	push   edi
c001f4fb:	56                   	push   esi
c001f4fc:	e8 93 32 00 00       	call   c0022794 <__umoddi3>
c001f501:	83 c4 10             	add    esp,0x10
c001f504:	40                   	inc    eax
c001f505:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f509:	6a 00                	push   0x0
c001f50b:	68 f0 03 00 00       	push   0x3f0
c001f510:	57                   	push   edi
c001f511:	56                   	push   esi
c001f512:	e8 7d 31 00 00       	call   c0022694 <__udivdi3>
c001f517:	83 c4 10             	add    esp,0x10
c001f51a:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f51f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f526:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f52b:	6a 00                	push   0x0
c001f52d:	6a 3f                	push   0x3f
c001f52f:	57                   	push   edi
c001f530:	56                   	push   esi
c001f531:	e8 5e 31 00 00       	call   c0022694 <__udivdi3>
c001f536:	83 c4 10             	add    esp,0x10
c001f539:	89 c6                	mov    esi,eax
c001f53b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f540:	83 e6 0f             	and    esi,0xf
c001f543:	eb 07                	jmp    c001f54c <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001f545:	31 f6                	xor    esi,esi
c001f547:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f54c:	bf 01 00 00 00       	mov    edi,0x1
c001f551:	50                   	push   eax
c001f552:	6a 00                	push   0x0
c001f554:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f55b:	50                   	push   eax
c001f55c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f560:	e8 bd f0 ff ff       	call   c001e622 <IDE::enableIRQs(unsigned char, bool)>
c001f565:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f568:	e8 8f fe ff ff       	call   c001f3fc <ATA::readyForCommand()>
c001f56d:	83 c4 10             	add    esp,0x10
c001f570:	84 c0                	test   al,al
c001f572:	0f 84 bc 02 00 00    	je     c001f834 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f578:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f57e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f584:	c1 e0 04             	shl    eax,0x4
c001f587:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001f58e:	09 c6                	or     esi,eax
c001f590:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f595:	75 05                	jne    c001f59c <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001f597:	83 ce a0             	or     esi,0xffffffa0
c001f59a:	eb 03                	jmp    c001f59f <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001f59c:	83 ce e0             	or     esi,0xffffffe0
c001f59f:	89 f0                	mov    eax,esi
c001f5a1:	0f b6 f0             	movzx  esi,al
c001f5a4:	56                   	push   esi
c001f5a5:	6a 06                	push   0x6
c001f5a7:	51                   	push   ecx
c001f5a8:	52                   	push   edx
c001f5a9:	e8 6c ee ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5ae:	83 c4 10             	add    esp,0x10
c001f5b1:	6a 00                	push   0x0
c001f5b3:	6a 01                	push   0x1
c001f5b5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5bc:	50                   	push   eax
c001f5bd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5c3:	e8 52 ee ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5c8:	83 c4 10             	add    esp,0x10
c001f5cb:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f5d0:	75 6e                	jne    c001f640 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001f5d2:	6a 00                	push   0x0
c001f5d4:	6a 08                	push   0x8
c001f5d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5dd:	50                   	push   eax
c001f5de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5e4:	e8 31 ee ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f5e9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f5ee:	50                   	push   eax
c001f5ef:	6a 09                	push   0x9
c001f5f1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f5f8:	50                   	push   eax
c001f5f9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f5ff:	e8 16 ee ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f604:	83 c4 20             	add    esp,0x20
c001f607:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f60c:	50                   	push   eax
c001f60d:	6a 0a                	push   0xa
c001f60f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f616:	50                   	push   eax
c001f617:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f61d:	e8 f8 ed ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f622:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f627:	50                   	push   eax
c001f628:	6a 0b                	push   0xb
c001f62a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f631:	50                   	push   eax
c001f632:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f638:	e8 dd ed ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f63d:	83 c4 20             	add    esp,0x20
c001f640:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f645:	50                   	push   eax
c001f646:	6a 02                	push   0x2
c001f648:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f64f:	50                   	push   eax
c001f650:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f656:	e8 bf ed ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f65b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f660:	50                   	push   eax
c001f661:	6a 03                	push   0x3
c001f663:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f66a:	50                   	push   eax
c001f66b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f671:	e8 a4 ed ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f676:	83 c4 20             	add    esp,0x20
c001f679:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f67e:	50                   	push   eax
c001f67f:	6a 04                	push   0x4
c001f681:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f688:	50                   	push   eax
c001f689:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f68f:	e8 86 ed ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f694:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f699:	50                   	push   eax
c001f69a:	6a 05                	push   0x5
c001f69c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6a3:	50                   	push   eax
c001f6a4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6aa:	e8 6b ed ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6af:	83 c4 20             	add    esp,0x20
c001f6b2:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001f6b7:	0f 94 c0             	sete   al
c001f6ba:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f6bf:	74 09                	je     c001f6ca <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001f6c1:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001f6c8:	eb 07                	jmp    c001f6d1 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001f6ca:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001f6d1:	0f b6 c0             	movzx  eax,al
c001f6d4:	50                   	push   eax
c001f6d5:	6a 07                	push   0x7
c001f6d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f6de:	50                   	push   eax
c001f6df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6e5:	e8 30 ed ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6ea:	c7 04 24 51 69 02 c0 	mov    DWORD PTR [esp],0xc0026951
c001f6f1:	e8 05 d6 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f6f6:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001f6fa:	83 c4 10             	add    esp,0x10
c001f6fd:	85 f6                	test   esi,esi
c001f6ff:	0f 84 f7 00 00 00    	je     c001f7fc <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001f705:	83 ec 0c             	sub    esp,0xc
c001f708:	68 54 69 02 c0       	push   0xc0026954
c001f70d:	e8 e9 d5 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f712:	83 c4 0c             	add    esp,0xc
c001f715:	6a 01                	push   0x1
c001f717:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f71e:	50                   	push   eax
c001f71f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f725:	e8 88 f7 ff ff       	call   c001eeb2 <IDE::polling(unsigned char, unsigned int)>
c001f72a:	c7 04 24 57 69 02 c0 	mov    DWORD PTR [esp],0xc0026957
c001f731:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001f735:	e8 c1 d5 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f73a:	83 c4 10             	add    esp,0x10
c001f73d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001f741:	84 c0                	test   al,al
c001f743:	74 2b                	je     c001f770 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001f745:	0f b6 f8             	movzx  edi,al
c001f748:	57                   	push   edi
c001f749:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f750:	50                   	push   eax
c001f751:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f758:	50                   	push   eax
c001f759:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f75f:	e8 9e f6 ff ff       	call   c001ee02 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f764:	c7 04 24 5a 69 02 c0 	mov    DWORD PTR [esp],0xc002695a
c001f76b:	e9 bc 00 00 00       	jmp    c001f82c <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001f770:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f775:	74 50                	je     c001f7c7 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001f777:	83 ec 0c             	sub    esp,0xc
c001f77a:	31 ed                	xor    ebp,ebp
c001f77c:	68 65 69 02 c0       	push   0xc0026965
c001f781:	e8 75 d5 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f786:	83 c4 10             	add    esp,0x10
c001f789:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f78d:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001f791:	50                   	push   eax
c001f792:	50                   	push   eax
c001f793:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f79a:	50                   	push   eax
c001f79b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7a1:	e8 62 ec ff ff       	call   c001e408 <IDE::getBase(unsigned char)>
c001f7a6:	89 c2                	mov    edx,eax
c001f7a8:	89 f8                	mov    eax,edi
c001f7aa:	66 ef                	out    dx,ax
c001f7ac:	45                   	inc    ebp
c001f7ad:	83 c4 10             	add    esp,0x10
c001f7b0:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001f7b6:	75 d1                	jne    c001f789 <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001f7b8:	83 ec 0c             	sub    esp,0xc
c001f7bb:	68 68 69 02 c0       	push   0xc0026968
c001f7c0:	e8 36 d5 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f7c5:	eb 24                	jmp    c001f7eb <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001f7c7:	51                   	push   ecx
c001f7c8:	51                   	push   ecx
c001f7c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f7d0:	50                   	push   eax
c001f7d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f7d7:	e8 2c ec ff ff       	call   c001e408 <IDE::getBase(unsigned char)>
c001f7dc:	b9 00 01 00 00       	mov    ecx,0x100
c001f7e1:	89 c2                	mov    edx,eax
c001f7e3:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f7e7:	fc                   	cld    
c001f7e8:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f7eb:	83 c4 10             	add    esp,0x10
c001f7ee:	4e                   	dec    esi
c001f7ef:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f7f7:	e9 01 ff ff ff       	jmp    c001f6fd <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001f7fc:	31 ff                	xor    edi,edi
c001f7fe:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f803:	74 2f                	je     c001f834 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001f805:	83 ec 0c             	sub    esp,0xc
c001f808:	68 6b 69 02 c0       	push   0xc002696b
c001f80d:	e8 e9 d4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f812:	58                   	pop    eax
c001f813:	31 c0                	xor    eax,eax
c001f815:	5a                   	pop    edx
c001f816:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001f81b:	0f 94 c0             	sete   al
c001f81e:	50                   	push   eax
c001f81f:	53                   	push   ebx
c001f820:	e8 8d fb ff ff       	call   c001f3b2 <ATA::flush(bool)>
c001f825:	c7 04 24 6e 69 02 c0 	mov    DWORD PTR [esp],0xc002696e
c001f82c:	e8 ca d4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f831:	83 c4 10             	add    esp,0x10
c001f834:	83 c4 2c             	add    esp,0x2c
c001f837:	89 f8                	mov    eax,edi
c001f839:	5b                   	pop    ebx
c001f83a:	5e                   	pop    esi
c001f83b:	5f                   	pop    edi
c001f83c:	5d                   	pop    ebp
c001f83d:	c3                   	ret    

c001f83e <ATA::read(unsigned long long, int, void*)>:
c001f83e:	57                   	push   edi
c001f83f:	b8 04 00 00 00       	mov    eax,0x4
c001f844:	56                   	push   esi
c001f845:	53                   	push   ebx
c001f846:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f84a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f84e:	8d 7a ff             	lea    edi,[edx-0x1]
c001f851:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f855:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f859:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f85f:	77 25                	ja     c001f886 <ATA::read(unsigned long long, int, void*)+0x48>
c001f861:	b8 06 00 00 00       	mov    eax,0x6
c001f866:	85 f6                	test   esi,esi
c001f868:	74 1c                	je     c001f886 <ATA::read(unsigned long long, int, void*)+0x48>
c001f86a:	50                   	push   eax
c001f86b:	50                   	push   eax
c001f86c:	6a 00                	push   0x0
c001f86e:	56                   	push   esi
c001f86f:	52                   	push   edx
c001f870:	53                   	push   ebx
c001f871:	51                   	push   ecx
c001f872:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f876:	e8 cd fb ff ff       	call   c001f448 <ATA::access(unsigned long long, int, void*, bool)>
c001f87b:	83 c4 20             	add    esp,0x20
c001f87e:	85 c0                	test   eax,eax
c001f880:	0f 95 c0             	setne  al
c001f883:	0f b6 c0             	movzx  eax,al
c001f886:	5b                   	pop    ebx
c001f887:	5e                   	pop    esi
c001f888:	5f                   	pop    edi
c001f889:	c3                   	ret    

c001f88a <ATA::write(unsigned long long, int, void*)>:
c001f88a:	55                   	push   ebp
c001f88b:	57                   	push   edi
c001f88c:	56                   	push   esi
c001f88d:	53                   	push   ebx
c001f88e:	83 ec 18             	sub    esp,0x18
c001f891:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001f895:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f899:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001f89d:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001f8a1:	68 71 69 02 c0       	push   0xc0026971
c001f8a6:	e8 50 d4 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001f8ab:	8d 53 ff             	lea    edx,[ebx-0x1]
c001f8ae:	83 c4 10             	add    esp,0x10
c001f8b1:	b8 04 00 00 00       	mov    eax,0x4
c001f8b6:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001f8bc:	77 25                	ja     c001f8e3 <ATA::write(unsigned long long, int, void*)+0x59>
c001f8be:	b8 06 00 00 00       	mov    eax,0x6
c001f8c3:	85 f6                	test   esi,esi
c001f8c5:	74 1c                	je     c001f8e3 <ATA::write(unsigned long long, int, void*)+0x59>
c001f8c7:	50                   	push   eax
c001f8c8:	50                   	push   eax
c001f8c9:	6a 01                	push   0x1
c001f8cb:	56                   	push   esi
c001f8cc:	53                   	push   ebx
c001f8cd:	55                   	push   ebp
c001f8ce:	57                   	push   edi
c001f8cf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f8d3:	e8 70 fb ff ff       	call   c001f448 <ATA::access(unsigned long long, int, void*, bool)>
c001f8d8:	83 c4 20             	add    esp,0x20
c001f8db:	85 c0                	test   eax,eax
c001f8dd:	0f 95 c0             	setne  al
c001f8e0:	0f b6 c0             	movzx  eax,al
c001f8e3:	83 c4 0c             	add    esp,0xc
c001f8e6:	5b                   	pop    ebx
c001f8e7:	5e                   	pop    esi
c001f8e8:	5f                   	pop    edi
c001f8e9:	5d                   	pop    ebp
c001f8ea:	c3                   	ret    
c001f8eb:	90                   	nop

c001f8ec <ATA::detectCHS()>:
c001f8ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8f0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f8f6:	c1 e0 06             	shl    eax,0x6
c001f8f9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f8ff:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f909:	c7 44 24 04 7d 69 02 c0 	mov    DWORD PTR [esp+0x4],0xc002697d
c001f911:	e9 8d 50 ff ff       	jmp    c00149a3 <Krnl::panic(char const*)>

c001f916 <ATA::open(int, int, void*)>:
c001f916:	53                   	push   ebx
c001f917:	83 ec 08             	sub    esp,0x8
c001f91a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f91e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f922:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f926:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f92c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f932:	c1 e0 06             	shl    eax,0x6
c001f935:	01 d0                	add    eax,edx
c001f937:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f93e:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f944:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f94b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f955:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f95b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f962:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f969:	75 0c                	jne    c001f977 <ATA::open(int, int, void*)+0x61>
c001f96b:	83 ec 0c             	sub    esp,0xc
c001f96e:	53                   	push   ebx
c001f96f:	e8 78 ff ff ff       	call   c001f8ec <ATA::detectCHS()>
c001f974:	83 c4 10             	add    esp,0x10
c001f977:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f97d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f983:	c1 e0 06             	shl    eax,0x6
c001f986:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f98d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f997:	d1 e8                	shr    eax,1
c001f999:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f99f:	6a 04                	push   0x4
c001f9a1:	6a 0c                	push   0xc
c001f9a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9aa:	50                   	push   eax
c001f9ab:	52                   	push   edx
c001f9ac:	e8 69 ea ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9b1:	90                   	nop
c001f9b2:	90                   	nop
c001f9b3:	6a 00                	push   0x0
c001f9b5:	6a 0c                	push   0xc
c001f9b7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f9be:	50                   	push   eax
c001f9bf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f9c5:	e8 50 ea ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f9ca:	83 c4 14             	add    esp,0x14
c001f9cd:	53                   	push   ebx
c001f9ce:	e8 3b ed fe ff       	call   c000e70e <PhysicalDisk::startCache()>
c001f9d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f9d6:	e8 4f 0d ff ff       	call   c001072a <createPartitionsForDisk(PhysicalDisk*)>
c001f9db:	31 c0                	xor    eax,eax
c001f9dd:	83 c4 18             	add    esp,0x18
c001f9e0:	5b                   	pop    ebx
c001f9e1:	c3                   	ret    

c001f9e2 <ATAPI::write(unsigned long long, int, void*)>:
c001f9e2:	b8 03 00 00 00       	mov    eax,0x3
c001f9e7:	c3                   	ret    

c001f9e8 <ATAPI::close(int, int, void*)>:
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ef:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f9f5:	85 c0                	test   eax,eax
c001f9f7:	74 0c                	je     c001fa05 <ATAPI::close(int, int, void*)+0x1d>
c001f9f9:	83 ec 0c             	sub    esp,0xc
c001f9fc:	8b 10                	mov    edx,DWORD PTR [eax]
c001f9fe:	50                   	push   eax
c001f9ff:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fa02:	83 c4 10             	add    esp,0x10
c001fa05:	31 c0                	xor    eax,eax
c001fa07:	83 c4 0c             	add    esp,0xc
c001fa0a:	c3                   	ret    
c001fa0b:	90                   	nop

c001fa0c <ATAPI::ATAPI()>:
c001fa0c:	83 ec 0c             	sub    esp,0xc
c001fa0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa13:	83 ec 04             	sub    esp,0x4
c001fa16:	68 00 08 00 00       	push   0x800
c001fa1b:	68 69 6c 02 c0       	push   0xc0026c69
c001fa20:	50                   	push   eax
c001fa21:	e8 80 ec fe ff       	call   c000e6a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fa26:	83 c4 10             	add    esp,0x10
c001fa29:	ba fc 69 02 c0       	mov    edx,0xc00269fc
c001fa2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa32:	89 10                	mov    DWORD PTR [eax],edx
c001fa34:	90                   	nop
c001fa35:	83 c4 0c             	add    esp,0xc
c001fa38:	c3                   	ret    
c001fa39:	90                   	nop

c001fa3a <ATAPI::readyForCommand()>:
c001fa3a:	56                   	push   esi
c001fa3b:	53                   	push   ebx
c001fa3c:	53                   	push   ebx
c001fa3d:	31 db                	xor    ebx,ebx
c001fa3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fa43:	51                   	push   ecx
c001fa44:	6a 0c                	push   0xc
c001fa46:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001fa4d:	50                   	push   eax
c001fa4e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001fa54:	e8 81 ea ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001fa59:	83 c4 10             	add    esp,0x10
c001fa5c:	a8 88                	test   al,0x88
c001fa5e:	74 25                	je     c001fa85 <ATAPI::readyForCommand()+0x4b>
c001fa60:	43                   	inc    ebx
c001fa61:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001fa67:	7e da                	jle    c001fa43 <ATAPI::readyForCommand()+0x9>
c001fa69:	83 ec 0c             	sub    esp,0xc
c001fa6c:	68 5e 01 00 00       	push   0x15e
c001fa71:	e8 32 8e ff ff       	call   c00188a8 <milliTenthSleep(unsigned int)>
c001fa76:	83 c4 10             	add    esp,0x10
c001fa79:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001fa7f:	75 c2                	jne    c001fa43 <ATAPI::readyForCommand()+0x9>
c001fa81:	31 c0                	xor    eax,eax
c001fa83:	eb 02                	jmp    c001fa87 <ATAPI::readyForCommand()+0x4d>
c001fa85:	b0 01                	mov    al,0x1
c001fa87:	5a                   	pop    edx
c001fa88:	5b                   	pop    ebx
c001fa89:	5e                   	pop    esi
c001fa8a:	c3                   	ret    
c001fa8b:	90                   	nop

c001fa8c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001fa8c:	55                   	push   ebp
c001fa8d:	57                   	push   edi
c001fa8e:	56                   	push   esi
c001fa8f:	53                   	push   ebx
c001fa90:	83 ec 20             	sub    esp,0x20
c001fa93:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001fa97:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001fa9b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001fa9f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001faa3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001faa7:	6a 01                	push   0x1
c001faa9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fab0:	50                   	push   eax
c001fab1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fab7:	e8 66 eb ff ff       	call   c001e622 <IDE::enableIRQs(unsigned char, bool)>
c001fabc:	5e                   	pop    esi
c001fabd:	58                   	pop    eax
c001fabe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fac5:	50                   	push   eax
c001fac6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001facc:	e8 23 e9 ff ff       	call   c001e3f4 <IDE::prepareInterrupt(unsigned char)>
c001fad1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001fad4:	e8 61 ff ff ff       	call   c001fa3a <ATAPI::readyForCommand()>
c001fad9:	83 c4 10             	add    esp,0x10
c001fadc:	84 c0                	test   al,al
c001fade:	75 0a                	jne    c001faea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001fae0:	bb 01 00 00 00       	mov    ebx,0x1
c001fae5:	e9 57 02 00 00       	jmp    c001fd41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001faea:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001faf0:	c1 e0 04             	shl    eax,0x4
c001faf3:	0f b6 c0             	movzx  eax,al
c001faf6:	50                   	push   eax
c001faf7:	6a 06                	push   0x6
c001faf9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb00:	50                   	push   eax
c001fb01:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb07:	e8 0e e9 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb0c:	6a 00                	push   0x0
c001fb0e:	6a 01                	push   0x1
c001fb10:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb17:	50                   	push   eax
c001fb18:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb1e:	e8 f7 e8 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb23:	83 c4 20             	add    esp,0x20
c001fb26:	0f b6 c3             	movzx  eax,bl
c001fb29:	0f b6 df             	movzx  ebx,bh
c001fb2c:	50                   	push   eax
c001fb2d:	6a 04                	push   0x4
c001fb2f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb36:	50                   	push   eax
c001fb37:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb3d:	e8 d8 e8 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb42:	53                   	push   ebx
c001fb43:	6a 05                	push   0x5
c001fb45:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb4c:	50                   	push   eax
c001fb4d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb53:	e8 c2 e8 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb58:	83 c4 20             	add    esp,0x20
c001fb5b:	68 a0 00 00 00       	push   0xa0
c001fb60:	6a 07                	push   0x7
c001fb62:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb69:	50                   	push   eax
c001fb6a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb70:	e8 a5 e8 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fb75:	83 c4 0c             	add    esp,0xc
c001fb78:	6a 01                	push   0x1
c001fb7a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fb81:	50                   	push   eax
c001fb82:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fb88:	e8 25 f3 ff ff       	call   c001eeb2 <IDE::polling(unsigned char, unsigned int)>
c001fb8d:	83 c4 10             	add    esp,0x10
c001fb90:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001fb96:	84 c0                	test   al,al
c001fb98:	74 23                	je     c001fbbd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001fb9a:	0f b6 d8             	movzx  ebx,al
c001fb9d:	0f b6 d2             	movzx  edx,dl
c001fba0:	53                   	push   ebx
c001fba1:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001fba8:	50                   	push   eax
c001fba9:	52                   	push   edx
c001fbaa:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbb0:	e8 4d f2 ff ff       	call   c001ee02 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001fbb5:	83 c4 10             	add    esp,0x10
c001fbb8:	e9 84 01 00 00       	jmp    c001fd41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fbbd:	0f b6 d2             	movzx  edx,dl
c001fbc0:	53                   	push   ebx
c001fbc1:	53                   	push   ebx
c001fbc2:	52                   	push   edx
c001fbc3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fbc9:	e8 3a e8 ff ff       	call   c001e408 <IDE::getBase(unsigned char)>
c001fbce:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001fbd2:	b9 06 00 00 00       	mov    ecx,0x6
c001fbd7:	89 c2                	mov    edx,eax
c001fbd9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001fbdc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001fbe0:	83 c4 10             	add    esp,0x10
c001fbe3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fbe9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fbf0:	85 db                	test   ebx,ebx
c001fbf2:	0f 84 ec 00 00 00    	je     c001fce4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001fbf8:	51                   	push   ecx
c001fbf9:	51                   	push   ecx
c001fbfa:	52                   	push   edx
c001fbfb:	50                   	push   eax
c001fbfc:	e8 87 e9 ff ff       	call   c001e588 <IDE::waitInterrupt(unsigned char)>
c001fc01:	83 c4 10             	add    esp,0x10
c001fc04:	84 c0                	test   al,al
c001fc06:	0f 84 d4 fe ff ff    	je     c001fae0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fc0c:	56                   	push   esi
c001fc0d:	56                   	push   esi
c001fc0e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc15:	50                   	push   eax
c001fc16:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc1c:	e8 d3 e7 ff ff       	call   c001e3f4 <IDE::prepareInterrupt(unsigned char)>
c001fc21:	83 c4 0c             	add    esp,0xc
c001fc24:	6a 04                	push   0x4
c001fc26:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc2d:	50                   	push   eax
c001fc2e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc34:	e8 a1 e8 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001fc39:	83 c4 0c             	add    esp,0xc
c001fc3c:	89 c6                	mov    esi,eax
c001fc3e:	6a 05                	push   0x5
c001fc40:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fc47:	50                   	push   eax
c001fc48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fc4e:	e8 87 e8 ff ff       	call   c001e4da <IDE::read(unsigned char, unsigned char)>
c001fc53:	89 f1                	mov    ecx,esi
c001fc55:	0f b6 c0             	movzx  eax,al
c001fc58:	0f b6 f1             	movzx  esi,cl
c001fc5b:	c1 e0 08             	shl    eax,0x8
c001fc5e:	09 c6                	or     esi,eax
c001fc60:	d1 fe                	sar    esi,1
c001fc62:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001fc66:	83 c4 10             	add    esp,0x10
c001fc69:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001fc6e:	74 41                	je     c001fcb1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001fc70:	31 c9                	xor    ecx,ecx
c001fc72:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fc78:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fc7f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001fc83:	75 0a                	jne    c001fc8f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001fc85:	01 c9                	add    ecx,ecx
c001fc87:	01 cd                	add    ebp,ecx
c001fc89:	4b                   	dec    ebx
c001fc8a:	e9 54 ff ff ff       	jmp    c001fbe3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001fc8f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001fc94:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001fc98:	51                   	push   ecx
c001fc99:	51                   	push   ecx
c001fc9a:	52                   	push   edx
c001fc9b:	50                   	push   eax
c001fc9c:	e8 67 e7 ff ff       	call   c001e408 <IDE::getBase(unsigned char)>
c001fca1:	89 c2                	mov    edx,eax
c001fca3:	89 f0                	mov    eax,esi
c001fca5:	66 ef                	out    dx,ax
c001fca7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001fcab:	83 c4 10             	add    esp,0x10
c001fcae:	41                   	inc    ecx
c001fcaf:	eb c1                	jmp    c001fc72 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001fcb1:	31 f6                	xor    esi,esi
c001fcb3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001fcb9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001fcc0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001fcc4:	75 06                	jne    c001fccc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001fcc6:	01 f6                	add    esi,esi
c001fcc8:	01 f5                	add    ebp,esi
c001fcca:	eb bd                	jmp    c001fc89 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001fccc:	51                   	push   ecx
c001fccd:	51                   	push   ecx
c001fcce:	52                   	push   edx
c001fccf:	50                   	push   eax
c001fcd0:	e8 33 e7 ff ff       	call   c001e408 <IDE::getBase(unsigned char)>
c001fcd5:	89 c2                	mov    edx,eax
c001fcd7:	66 ed                	in     ax,dx
c001fcd9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001fcde:	83 c4 10             	add    esp,0x10
c001fce1:	46                   	inc    esi
c001fce2:	eb cf                	jmp    c001fcb3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001fce4:	51                   	push   ecx
c001fce5:	51                   	push   ecx
c001fce6:	52                   	push   edx
c001fce7:	50                   	push   eax
c001fce8:	e8 9b e8 ff ff       	call   c001e588 <IDE::waitInterrupt(unsigned char)>
c001fced:	83 c4 10             	add    esp,0x10
c001fcf0:	84 c0                	test   al,al
c001fcf2:	0f 84 e8 fd ff ff    	je     c001fae0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001fcf8:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fcfd:	52                   	push   edx
c001fcfe:	52                   	push   edx
c001fcff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd06:	50                   	push   eax
c001fd07:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd0d:	e8 e2 e6 ff ff       	call   c001e3f4 <IDE::prepareInterrupt(unsigned char)>
c001fd12:	83 c4 10             	add    esp,0x10
c001fd15:	50                   	push   eax
c001fd16:	50                   	push   eax
c001fd17:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fd1e:	50                   	push   eax
c001fd1f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fd25:	e8 de e6 ff ff       	call   c001e408 <IDE::getBase(unsigned char)>
c001fd2a:	8d 50 07             	lea    edx,[eax+0x7]
c001fd2d:	ec                   	in     al,dx
c001fd2e:	83 c4 10             	add    esp,0x10
c001fd31:	a8 88                	test   al,0x88
c001fd33:	74 0a                	je     c001fd3f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001fd35:	4b                   	dec    ebx
c001fd36:	75 dd                	jne    c001fd15 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001fd38:	bb 02 00 00 00       	mov    ebx,0x2
c001fd3d:	eb 02                	jmp    c001fd41 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001fd3f:	31 db                	xor    ebx,ebx
c001fd41:	83 c4 1c             	add    esp,0x1c
c001fd44:	89 d8                	mov    eax,ebx
c001fd46:	5b                   	pop    ebx
c001fd47:	5e                   	pop    esi
c001fd48:	5f                   	pop    edi
c001fd49:	5d                   	pop    ebp
c001fd4a:	c3                   	ret    
c001fd4b:	90                   	nop

c001fd4c <ATAPI::diskRemoved()>:
c001fd4c:	53                   	push   ebx
c001fd4d:	83 ec 14             	sub    esp,0x14
c001fd50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fd54:	68 75 6c 02 c0       	push   0xc0026c75
c001fd59:	e8 9d cf fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001fd5e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fd65:	c7 04 24 c8 69 02 c0 	mov    DWORD PTR [esp],0xc00269c8
c001fd6c:	e8 8a cf fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001fd71:	58                   	pop    eax
c001fd72:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001fd78:	e8 2d 07 ff ff       	call   c00104aa <LogicalDisk::unmount()>
c001fd7d:	c7 04 24 d7 69 02 c0 	mov    DWORD PTR [esp],0xc00269d7
c001fd84:	e8 72 cf fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001fd89:	5a                   	pop    edx
c001fd8a:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fd90:	e8 1b 11 ff ff       	call   c0010eb0 <VCache::writeWriteBuffer()>
c001fd95:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001fd9b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fd9f:	83 c4 18             	add    esp,0x18
c001fda2:	5b                   	pop    ebx
c001fda3:	e9 f8 10 ff ff       	jmp    c0010ea0 <VCache::invalidateReadBuffer()>

c001fda8 <ATAPI::eject()>:
c001fda8:	57                   	push   edi
c001fda9:	b9 03 00 00 00       	mov    ecx,0x3
c001fdae:	53                   	push   ebx
c001fdaf:	83 ec 14             	sub    esp,0x14
c001fdb2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fdb6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fdba:	fc                   	cld    
c001fdbb:	31 c0                	xor    eax,eax
c001fdbd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fdbf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fdc4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fdc9:	50                   	push   eax
c001fdca:	50                   	push   eax
c001fdcb:	6a 00                	push   0x0
c001fdcd:	6a 00                	push   0x0
c001fdcf:	6a 00                	push   0x0
c001fdd1:	6a 02                	push   0x2
c001fdd3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fdd7:	50                   	push   eax
c001fdd8:	53                   	push   ebx
c001fdd9:	e8 ae fc ff ff       	call   c001fa8c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fdde:	83 c4 14             	add    esp,0x14
c001fde1:	53                   	push   ebx
c001fde2:	e8 65 ff ff ff       	call   c001fd4c <ATAPI::diskRemoved()>
c001fde7:	83 c4 24             	add    esp,0x24
c001fdea:	31 c0                	xor    eax,eax
c001fdec:	5b                   	pop    ebx
c001fded:	5f                   	pop    edi
c001fdee:	c3                   	ret    
c001fdef:	90                   	nop

c001fdf0 <ATAPI::diskInserted()>:
c001fdf0:	83 ec 18             	sub    esp,0x18
c001fdf3:	68 8c 6c 02 c0       	push   0xc0026c8c
c001fdf8:	e8 fe ce fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001fdfd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fe01:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001fe08:	83 c4 1c             	add    esp,0x1c
c001fe0b:	c3                   	ret    

c001fe0c <ATAPI::detectMedia()>:
c001fe0c:	56                   	push   esi
c001fe0d:	53                   	push   ebx
c001fe0e:	83 ec 28             	sub    esp,0x28
c001fe11:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fe15:	6a 0c                	push   0xc
c001fe17:	6a 00                	push   0x0
c001fe19:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001fe1d:	56                   	push   esi
c001fe1e:	e8 61 08 fe ff       	call   c0000684 <memset>
c001fe23:	58                   	pop    eax
c001fe24:	5a                   	pop    edx
c001fe25:	6a 00                	push   0x0
c001fe27:	6a 00                	push   0x0
c001fe29:	6a 00                	push   0x0
c001fe2b:	6a 00                	push   0x0
c001fe2d:	56                   	push   esi
c001fe2e:	53                   	push   ebx
c001fe2f:	e8 58 fc ff ff       	call   c001fa8c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fe34:	83 c4 1c             	add    esp,0x1c
c001fe37:	6a 0c                	push   0xc
c001fe39:	6a 00                	push   0x0
c001fe3b:	56                   	push   esi
c001fe3c:	e8 43 08 fe ff       	call   c0000684 <memset>
c001fe41:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001fe46:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001fe4b:	59                   	pop    ecx
c001fe4c:	58                   	pop    eax
c001fe4d:	6a 01                	push   0x1
c001fe4f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fe53:	50                   	push   eax
c001fe54:	6a 00                	push   0x0
c001fe56:	6a 12                	push   0x12
c001fe58:	56                   	push   esi
c001fe59:	53                   	push   ebx
c001fe5a:	e8 2d fc ff ff       	call   c001fa8c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fe5f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001fe63:	83 c4 20             	add    esp,0x20
c001fe66:	83 e0 7f             	and    eax,0x7f
c001fe69:	3c 70                	cmp    al,0x70
c001fe6b:	74 15                	je     c001fe82 <ATAPI::detectMedia()+0x76>
c001fe6d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fe74:	75 0c                	jne    c001fe82 <ATAPI::detectMedia()+0x76>
c001fe76:	83 ec 0c             	sub    esp,0xc
c001fe79:	53                   	push   ebx
c001fe7a:	e8 71 ff ff ff       	call   c001fdf0 <ATAPI::diskInserted()>
c001fe7f:	83 c4 10             	add    esp,0x10
c001fe82:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fe86:	83 e0 0f             	and    eax,0xf
c001fe89:	3c 02                	cmp    al,0x2
c001fe8b:	75 1b                	jne    c001fea8 <ATAPI::detectMedia()+0x9c>
c001fe8d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001fe92:	75 2d                	jne    c001fec1 <ATAPI::detectMedia()+0xb5>
c001fe94:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fe9b:	74 24                	je     c001fec1 <ATAPI::detectMedia()+0xb5>
c001fe9d:	83 ec 0c             	sub    esp,0xc
c001fea0:	53                   	push   ebx
c001fea1:	e8 a6 fe ff ff       	call   c001fd4c <ATAPI::diskRemoved()>
c001fea6:	eb 16                	jmp    c001febe <ATAPI::detectMedia()+0xb2>
c001fea8:	84 c0                	test   al,al
c001feaa:	75 15                	jne    c001fec1 <ATAPI::detectMedia()+0xb5>
c001feac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001feb3:	75 0c                	jne    c001fec1 <ATAPI::detectMedia()+0xb5>
c001feb5:	83 ec 0c             	sub    esp,0xc
c001feb8:	53                   	push   ebx
c001feb9:	e8 32 ff ff ff       	call   c001fdf0 <ATAPI::diskInserted()>
c001febe:	83 c4 10             	add    esp,0x10
c001fec1:	83 c4 24             	add    esp,0x24
c001fec4:	5b                   	pop    ebx
c001fec5:	5e                   	pop    esi
c001fec6:	c3                   	ret    
c001fec7:	90                   	nop

c001fec8 <ATAPI::open(int, int, void*)>:
c001fec8:	56                   	push   esi
c001fec9:	53                   	push   ebx
c001feca:	50                   	push   eax
c001fecb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fecf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fed3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fed7:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fedd:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fee3:	c1 e0 06             	shl    eax,0x6
c001fee6:	01 d0                	add    eax,edx
c001fee8:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001feef:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001fef5:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001fefc:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001ff06:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001ff0c:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001ff13:	6a 04                	push   0x4
c001ff15:	6a 0c                	push   0xc
c001ff17:	51                   	push   ecx
c001ff18:	52                   	push   edx
c001ff19:	e8 fc e4 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff1e:	90                   	nop
c001ff1f:	90                   	nop
c001ff20:	6a 00                	push   0x0
c001ff22:	6a 0c                	push   0xc
c001ff24:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ff2b:	50                   	push   eax
c001ff2c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ff32:	e8 e3 e4 ff ff       	call   c001e41a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ff37:	83 c4 14             	add    esp,0x14
c001ff3a:	68 74 01 00 00       	push   0x174
c001ff3f:	e8 cb 9a fe ff       	call   c0009a0f <malloc>
c001ff44:	83 c4 0c             	add    esp,0xc
c001ff47:	89 c6                	mov    esi,eax
c001ff49:	6a 00                	push   0x0
c001ff4b:	68 ff ff ff 7f       	push   0x7fffffff
c001ff50:	6a 00                	push   0x0
c001ff52:	6a 00                	push   0x0
c001ff54:	53                   	push   ebx
c001ff55:	68 54 6d 02 c0       	push   0xc0026d54
c001ff5a:	50                   	push   eax
c001ff5b:	e8 56 03 ff ff       	call   c00102b6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ff60:	83 c4 14             	add    esp,0x14
c001ff63:	56                   	push   esi
c001ff64:	e8 03 04 ff ff       	call   c001036c <LogicalDisk::assignDriveLetter()>
c001ff69:	5a                   	pop    edx
c001ff6a:	0f be c0             	movsx  eax,al
c001ff6d:	59                   	pop    ecx
c001ff6e:	50                   	push   eax
c001ff6f:	68 e5 69 02 c0       	push   0xc00269e5
c001ff74:	e8 82 cd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c001ff79:	58                   	pop    eax
c001ff7a:	5a                   	pop    edx
c001ff7b:	56                   	push   esi
c001ff7c:	53                   	push   ebx
c001ff7d:	e8 ec e2 fe ff       	call   c000e26e <Device::addChild(Device*)>
c001ff82:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001ff88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff8b:	e8 7e e7 fe ff       	call   c000e70e <PhysicalDisk::startCache()>
c001ff90:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001ff97:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ff9a:	e8 6d fe ff ff       	call   c001fe0c <ATAPI::detectMedia()>
c001ff9f:	83 c4 14             	add    esp,0x14
c001ffa2:	31 c0                	xor    eax,eax
c001ffa4:	5b                   	pop    ebx
c001ffa5:	5e                   	pop    esi
c001ffa6:	c3                   	ret    
c001ffa7:	90                   	nop

c001ffa8 <ATAPI::read(unsigned long long, int, void*)>:
c001ffa8:	55                   	push   ebp
c001ffa9:	57                   	push   edi
c001ffaa:	56                   	push   esi
c001ffab:	53                   	push   ebx
c001ffac:	83 ec 1c             	sub    esp,0x1c
c001ffaf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ffb3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ffb7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ffbb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ffc2:	74 41                	je     c0020005 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ffc4:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ffc8:	b9 03 00 00 00       	mov    ecx,0x3
c001ffcd:	fc                   	cld    
c001ffce:	31 c0                	xor    eax,eax
c001ffd0:	86 fb                	xchg   bl,bh
c001ffd2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ffd4:	c1 c3 10             	rol    ebx,0x10
c001ffd7:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ffdc:	89 e8                	mov    eax,ebp
c001ffde:	86 fb                	xchg   bl,bh
c001ffe0:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ffe4:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001ffe8:	50                   	push   eax
c001ffe9:	50                   	push   eax
c001ffea:	55                   	push   ebp
c001ffeb:	c1 e5 0b             	shl    ebp,0xb
c001ffee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001fff2:	6a 00                	push   0x0
c001fff4:	55                   	push   ebp
c001fff5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fff9:	50                   	push   eax
c001fffa:	56                   	push   esi
c001fffb:	e8 8c fa ff ff       	call   c001fa8c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0020000:	83 c4 20             	add    esp,0x20
c0020003:	eb 1a                	jmp    c002001f <ATAPI::read(unsigned long long, int, void*)+0x77>
c0020005:	83 ec 0c             	sub    esp,0xc
c0020008:	56                   	push   esi
c0020009:	e8 fe fd ff ff       	call   c001fe0c <ATAPI::detectMedia()>
c002000e:	83 c4 10             	add    esp,0x10
c0020011:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0020018:	75 aa                	jne    c001ffc4 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c002001a:	b8 02 00 00 00       	mov    eax,0x2
c002001f:	83 c4 1c             	add    esp,0x1c
c0020022:	5b                   	pop    ebx
c0020023:	5e                   	pop    esi
c0020024:	5f                   	pop    edi
c0020025:	5d                   	pop    ebp
c0020026:	c3                   	ret    
c0020027:	90                   	nop

c0020028 <SATA::close(int, int, void*)>:
c0020028:	83 ec 0c             	sub    esp,0xc
c002002b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002002f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020035:	85 c0                	test   eax,eax
c0020037:	74 0c                	je     c0020045 <SATA::close(int, int, void*)+0x1d>
c0020039:	83 ec 0c             	sub    esp,0xc
c002003c:	8b 10                	mov    edx,DWORD PTR [eax]
c002003e:	50                   	push   eax
c002003f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020042:	83 c4 10             	add    esp,0x10
c0020045:	31 c0                	xor    eax,eax
c0020047:	83 c4 0c             	add    esp,0xc
c002004a:	c3                   	ret    
c002004b:	90                   	nop

c002004c <SATA::powerSaving(PowerSavingLevel)>:
c002004c:	c3                   	ret    
c002004d:	90                   	nop

c002004e <SATA::open(int, int, void*)>:
c002004e:	56                   	push   esi
c002004f:	53                   	push   ebx
c0020050:	51                   	push   ecx
c0020051:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020055:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002005c:	74 2d                	je     c002008b <SATA::open(int, int, void*)+0x3d>
c002005e:	83 ec 0c             	sub    esp,0xc
c0020061:	68 2c 6a 02 c0       	push   0xc0026a2c
c0020066:	e8 fe 99 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002006b:	83 c4 10             	add    esp,0x10
c002006e:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020075:	75 14                	jne    c002008b <SATA::open(int, int, void*)+0x3d>
c0020077:	e4 60                	in     al,0x60
c0020079:	3c 5a                	cmp    al,0x5a
c002007b:	74 04                	je     c0020081 <SATA::open(int, int, void*)+0x33>
c002007d:	3c 1c                	cmp    al,0x1c
c002007f:	75 f6                	jne    c0020077 <SATA::open(int, int, void*)+0x29>
c0020081:	e4 60                	in     al,0x60
c0020083:	3c 5a                	cmp    al,0x5a
c0020085:	74 fa                	je     c0020081 <SATA::open(int, int, void*)+0x33>
c0020087:	3c 1c                	cmp    al,0x1c
c0020089:	74 f6                	je     c0020081 <SATA::open(int, int, void*)+0x33>
c002008b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002008f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0020099:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002009f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00200a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00200ad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00200b7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00200bd:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00200c4:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00200cb:	74 2d                	je     c00200fa <SATA::open(int, int, void*)+0xac>
c00200cd:	83 ec 0c             	sub    esp,0xc
c00200d0:	68 39 6a 02 c0       	push   0xc0026a39
c00200d5:	e8 8f 99 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00200da:	83 c4 10             	add    esp,0x10
c00200dd:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00200e4:	75 14                	jne    c00200fa <SATA::open(int, int, void*)+0xac>
c00200e6:	e4 60                	in     al,0x60
c00200e8:	3c 1c                	cmp    al,0x1c
c00200ea:	74 04                	je     c00200f0 <SATA::open(int, int, void*)+0xa2>
c00200ec:	3c 5a                	cmp    al,0x5a
c00200ee:	75 f6                	jne    c00200e6 <SATA::open(int, int, void*)+0x98>
c00200f0:	e4 60                	in     al,0x60
c00200f2:	3c 5a                	cmp    al,0x5a
c00200f4:	74 fa                	je     c00200f0 <SATA::open(int, int, void*)+0xa2>
c00200f6:	3c 1c                	cmp    al,0x1c
c00200f8:	74 f6                	je     c00200f0 <SATA::open(int, int, void*)+0xa2>
c00200fa:	e8 c7 9f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c00200ff:	89 c6                	mov    esi,eax
c0020101:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0020107:	81 c6 00 10 00 00    	add    esi,0x1000
c002010d:	e8 b4 9f fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0020112:	39 c6                	cmp    esi,eax
c0020114:	74 10                	je     c0020126 <SATA::open(int, int, void*)+0xd8>
c0020116:	83 ec 0c             	sub    esp,0xc
c0020119:	68 46 6a 02 c0       	push   0xc0026a46
c002011e:	e8 80 48 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0020123:	83 c4 10             	add    esp,0x10
c0020126:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002012d:	74 2d                	je     c002015c <SATA::open(int, int, void*)+0x10e>
c002012f:	83 ec 0c             	sub    esp,0xc
c0020132:	68 5a 6a 02 c0       	push   0xc0026a5a
c0020137:	e8 2d 99 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002013c:	83 c4 10             	add    esp,0x10
c002013f:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020146:	75 14                	jne    c002015c <SATA::open(int, int, void*)+0x10e>
c0020148:	e4 60                	in     al,0x60
c002014a:	3c 1c                	cmp    al,0x1c
c002014c:	74 04                	je     c0020152 <SATA::open(int, int, void*)+0x104>
c002014e:	3c 5a                	cmp    al,0x5a
c0020150:	75 f6                	jne    c0020148 <SATA::open(int, int, void*)+0xfa>
c0020152:	e4 60                	in     al,0x60
c0020154:	3c 5a                	cmp    al,0x5a
c0020156:	74 fa                	je     c0020152 <SATA::open(int, int, void*)+0x104>
c0020158:	3c 1c                	cmp    al,0x1c
c002015a:	74 f6                	je     c0020152 <SATA::open(int, int, void*)+0x104>
c002015c:	83 ec 0c             	sub    esp,0xc
c002015f:	6a 02                	push   0x2
c0020161:	e8 6f b8 fe ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0020166:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002016c:	6a 03                	push   0x3
c002016e:	50                   	push   eax
c002016f:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0020175:	ff 35 30 80 02 c0    	push   DWORD PTR ds:0xc0028030
c002017b:	e8 fc be fe ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c0020180:	83 c4 20             	add    esp,0x20
c0020183:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002018a:	74 2d                	je     c00201b9 <SATA::open(int, int, void*)+0x16b>
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	68 67 6a 02 c0       	push   0xc0026a67
c0020194:	e8 d0 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020199:	83 c4 10             	add    esp,0x10
c002019c:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00201a3:	75 14                	jne    c00201b9 <SATA::open(int, int, void*)+0x16b>
c00201a5:	e4 60                	in     al,0x60
c00201a7:	3c 1c                	cmp    al,0x1c
c00201a9:	74 04                	je     c00201af <SATA::open(int, int, void*)+0x161>
c00201ab:	3c 5a                	cmp    al,0x5a
c00201ad:	75 f6                	jne    c00201a5 <SATA::open(int, int, void*)+0x157>
c00201af:	e4 60                	in     al,0x60
c00201b1:	3c 5a                	cmp    al,0x5a
c00201b3:	74 fa                	je     c00201af <SATA::open(int, int, void*)+0x161>
c00201b5:	3c 1c                	cmp    al,0x1c
c00201b7:	74 f6                	je     c00201af <SATA::open(int, int, void*)+0x161>
c00201b9:	83 ec 0c             	sub    esp,0xc
c00201bc:	53                   	push   ebx
c00201bd:	e8 4c e5 fe ff       	call   c000e70e <PhysicalDisk::startCache()>
c00201c2:	83 c4 10             	add    esp,0x10
c00201c5:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00201cc:	74 2d                	je     c00201fb <SATA::open(int, int, void*)+0x1ad>
c00201ce:	83 ec 0c             	sub    esp,0xc
c00201d1:	68 74 6a 02 c0       	push   0xc0026a74
c00201d6:	e8 8e 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00201e5:	75 14                	jne    c00201fb <SATA::open(int, int, void*)+0x1ad>
c00201e7:	e4 60                	in     al,0x60
c00201e9:	3c 1c                	cmp    al,0x1c
c00201eb:	74 04                	je     c00201f1 <SATA::open(int, int, void*)+0x1a3>
c00201ed:	3c 5a                	cmp    al,0x5a
c00201ef:	75 f6                	jne    c00201e7 <SATA::open(int, int, void*)+0x199>
c00201f1:	e4 60                	in     al,0x60
c00201f3:	3c 5a                	cmp    al,0x5a
c00201f5:	74 fa                	je     c00201f1 <SATA::open(int, int, void*)+0x1a3>
c00201f7:	3c 1c                	cmp    al,0x1c
c00201f9:	74 f6                	je     c00201f1 <SATA::open(int, int, void*)+0x1a3>
c00201fb:	83 ec 0c             	sub    esp,0xc
c00201fe:	53                   	push   ebx
c00201ff:	e8 26 05 ff ff       	call   c001072a <createPartitionsForDisk(PhysicalDisk*)>
c0020204:	83 c4 10             	add    esp,0x10
c0020207:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002020e:	74 2d                	je     c002023d <SATA::open(int, int, void*)+0x1ef>
c0020210:	83 ec 0c             	sub    esp,0xc
c0020213:	68 81 6a 02 c0       	push   0xc0026a81
c0020218:	e8 4c 98 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002021d:	83 c4 10             	add    esp,0x10
c0020220:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020227:	75 14                	jne    c002023d <SATA::open(int, int, void*)+0x1ef>
c0020229:	e4 60                	in     al,0x60
c002022b:	3c 1c                	cmp    al,0x1c
c002022d:	74 04                	je     c0020233 <SATA::open(int, int, void*)+0x1e5>
c002022f:	3c 5a                	cmp    al,0x5a
c0020231:	75 f6                	jne    c0020229 <SATA::open(int, int, void*)+0x1db>
c0020233:	e4 60                	in     al,0x60
c0020235:	3c 5a                	cmp    al,0x5a
c0020237:	74 fa                	je     c0020233 <SATA::open(int, int, void*)+0x1e5>
c0020239:	3c 1c                	cmp    al,0x1c
c002023b:	74 f6                	je     c0020233 <SATA::open(int, int, void*)+0x1e5>
c002023d:	5a                   	pop    edx
c002023e:	31 c0                	xor    eax,eax
c0020240:	5b                   	pop    ebx
c0020241:	5e                   	pop    esi
c0020242:	c3                   	ret    
c0020243:	90                   	nop

c0020244 <SATA::SATA()>:
c0020244:	83 ec 0c             	sub    esp,0xc
c0020247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002024b:	83 ec 04             	sub    esp,0x4
c002024e:	68 00 02 00 00       	push   0x200
c0020253:	68 8e 6a 02 c0       	push   0xc0026a8e
c0020258:	50                   	push   eax
c0020259:	e8 48 e4 fe ff       	call   c000e6a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c002025e:	83 c4 10             	add    esp,0x10
c0020261:	ba 38 6c 02 c0       	mov    edx,0xc0026c38
c0020266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026a:	89 10                	mov    DWORD PTR [eax],edx
c002026c:	90                   	nop
c002026d:	83 c4 0c             	add    esp,0xc
c0020270:	c3                   	ret    
c0020271:	90                   	nop

c0020272 <SATA::access(unsigned long long, int, void*, bool)>:
c0020272:	55                   	push   ebp
c0020273:	57                   	push   edi
c0020274:	56                   	push   esi
c0020275:	53                   	push   ebx
c0020276:	83 ec 2c             	sub    esp,0x2c
c0020279:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c002027d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020281:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020285:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002028c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020290:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020294:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0020298:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002029c:	75 19                	jne    c00202b7 <SATA::access(unsigned long long, int, void*, bool)+0x45>
c002029e:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00202a3:	7e 41                	jle    c00202e6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00202a5:	83 ec 0c             	sub    esp,0xc
c00202a8:	68 ad 6a 02 c0       	push   0xc0026aad
c00202ad:	e8 f1 46 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c00202b2:	83 c4 10             	add    esp,0x10
c00202b5:	eb 2f                	jmp    c00202e6 <SATA::access(unsigned long long, int, void*, bool)+0x74>
c00202b7:	83 ec 0c             	sub    esp,0xc
c00202ba:	68 9e 6a 02 c0       	push   0xc0026a9e
c00202bf:	e8 a5 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00202c4:	83 c4 10             	add    esp,0x10
c00202c7:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00202ce:	75 ce                	jne    c002029e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00202d0:	e4 60                	in     al,0x60
c00202d2:	3c 1c                	cmp    al,0x1c
c00202d4:	74 04                	je     c00202da <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00202d6:	3c 5a                	cmp    al,0x5a
c00202d8:	75 f6                	jne    c00202d0 <SATA::access(unsigned long long, int, void*, bool)+0x5e>
c00202da:	e4 60                	in     al,0x60
c00202dc:	3c 5a                	cmp    al,0x5a
c00202de:	74 fa                	je     c00202da <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00202e0:	3c 1c                	cmp    al,0x1c
c00202e2:	74 f6                	je     c00202da <SATA::access(unsigned long long, int, void*, bool)+0x68>
c00202e4:	eb b8                	jmp    c002029e <SATA::access(unsigned long long, int, void*, bool)+0x2c>
c00202e6:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00202ed:	75 29                	jne    c0020318 <SATA::access(unsigned long long, int, void*, bool)+0xa6>
c00202ef:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00202f5:	8b ab 6c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x16c]
c00202fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020301:	8d 75 02             	lea    esi,[ebp+0x2]
c0020304:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020308:	c1 e6 07             	shl    esi,0x7
c002030b:	01 c6                	add    esi,eax
c002030d:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020314:	74 4a                	je     c0020360 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c0020316:	eb 2f                	jmp    c0020347 <SATA::access(unsigned long long, int, void*, bool)+0xd5>
c0020318:	83 ec 0c             	sub    esp,0xc
c002031b:	68 e6 6a 02 c0       	push   0xc0026ae6
c0020320:	e8 44 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020325:	83 c4 10             	add    esp,0x10
c0020328:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c002032f:	75 be                	jne    c00202ef <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020331:	e4 60                	in     al,0x60
c0020333:	3c 1c                	cmp    al,0x1c
c0020335:	74 04                	je     c002033b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020337:	3c 5a                	cmp    al,0x5a
c0020339:	75 f6                	jne    c0020331 <SATA::access(unsigned long long, int, void*, bool)+0xbf>
c002033b:	e4 60                	in     al,0x60
c002033d:	3c 5a                	cmp    al,0x5a
c002033f:	74 fa                	je     c002033b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020341:	3c 1c                	cmp    al,0x1c
c0020343:	74 f6                	je     c002033b <SATA::access(unsigned long long, int, void*, bool)+0xc9>
c0020345:	eb a8                	jmp    c00202ef <SATA::access(unsigned long long, int, void*, bool)+0x7d>
c0020347:	83 ec 0c             	sub    esp,0xc
c002034a:	68 f5 6a 02 c0       	push   0xc0026af5
c002034f:	e8 15 97 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020354:	83 c4 10             	add    esp,0x10
c0020357:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c002035e:	74 3d                	je     c002039d <SATA::access(unsigned long long, int, void*, bool)+0x12b>
c0020360:	89 e8                	mov    eax,ebp
c0020362:	c1 e0 07             	shl    eax,0x7
c0020365:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020369:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020373:	52                   	push   edx
c0020374:	52                   	push   edx
c0020375:	56                   	push   esi
c0020376:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c002037c:	e8 11 ec ff ff       	call   c001ef92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020381:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020385:	83 c4 10             	add    esp,0x10
c0020388:	b8 01 00 00 00       	mov    eax,0x1
c002038d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020392:	75 1d                	jne    c00203b1 <SATA::access(unsigned long long, int, void*, bool)+0x13f>
c0020394:	e9 c8 04 00 00       	jmp    c0020861 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020399:	3c 5a                	cmp    al,0x5a
c002039b:	74 0c                	je     c00203a9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c002039d:	e4 60                	in     al,0x60
c002039f:	3c 1c                	cmp    al,0x1c
c00203a1:	75 f6                	jne    c0020399 <SATA::access(unsigned long long, int, void*, bool)+0x127>
c00203a3:	eb 04                	jmp    c00203a9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00203a5:	3c 1c                	cmp    al,0x1c
c00203a7:	75 b7                	jne    c0020360 <SATA::access(unsigned long long, int, void*, bool)+0xee>
c00203a9:	e4 60                	in     al,0x60
c00203ab:	3c 5a                	cmp    al,0x5a
c00203ad:	74 fa                	je     c00203a9 <SATA::access(unsigned long long, int, void*, bool)+0x137>
c00203af:	eb f4                	jmp    c00203a5 <SATA::access(unsigned long long, int, void*, bool)+0x133>
c00203b1:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00203b8:	74 3a                	je     c00203f4 <SATA::access(unsigned long long, int, void*, bool)+0x182>
c00203ba:	83 ec 0c             	sub    esp,0xc
c00203bd:	68 04 6b 02 c0       	push   0xc0026b04
c00203c2:	e8 a2 96 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00203c7:	83 c4 10             	add    esp,0x10
c00203ca:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00203d1:	74 0d                	je     c00203e0 <SATA::access(unsigned long long, int, void*, bool)+0x16e>
c00203d3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00203d8:	74 34                	je     c002040e <SATA::access(unsigned long long, int, void*, bool)+0x19c>
c00203da:	eb 1f                	jmp    c00203fb <SATA::access(unsigned long long, int, void*, bool)+0x189>
c00203dc:	3c 1c                	cmp    al,0x1c
c00203de:	74 0c                	je     c00203ec <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00203e0:	e4 60                	in     al,0x60
c00203e2:	3c 5a                	cmp    al,0x5a
c00203e4:	75 f6                	jne    c00203dc <SATA::access(unsigned long long, int, void*, bool)+0x16a>
c00203e6:	eb 04                	jmp    c00203ec <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00203e8:	3c 1c                	cmp    al,0x1c
c00203ea:	75 e7                	jne    c00203d3 <SATA::access(unsigned long long, int, void*, bool)+0x161>
c00203ec:	e4 60                	in     al,0x60
c00203ee:	3c 5a                	cmp    al,0x5a
c00203f0:	74 fa                	je     c00203ec <SATA::access(unsigned long long, int, void*, bool)+0x17a>
c00203f2:	eb f4                	jmp    c00203e8 <SATA::access(unsigned long long, int, void*, bool)+0x176>
c00203f4:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00203f9:	74 1c                	je     c0020417 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c00203fb:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00203ff:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0020405:	c1 e1 09             	shl    ecx,0x9
c0020408:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002040c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002040e:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020415:	75 55                	jne    c002046c <SATA::access(unsigned long long, int, void*, bool)+0x1fa>
c0020417:	8d 45 02             	lea    eax,[ebp+0x2]
c002041a:	c1 e0 07             	shl    eax,0x7
c002041d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020421:	8b 38                	mov    edi,DWORD PTR [eax]
c0020423:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0020429:	2b b8 5c 01 00 00    	sub    edi,DWORD PTR [eax+0x15c]
c002042f:	03 b8 58 01 00 00    	add    edi,DWORD PTR [eax+0x158]
c0020435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020439:	c1 e0 05             	shl    eax,0x5
c002043c:	01 c7                	add    edi,eax
c002043e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020442:	83 e0 01             	and    eax,0x1
c0020445:	c1 e0 06             	shl    eax,0x6
c0020448:	88 c2                	mov    dl,al
c002044a:	8a 07                	mov    al,BYTE PTR [edi]
c002044c:	83 e0 bf             	and    eax,0xffffffbf
c002044f:	09 d0                	or     eax,edx
c0020451:	88 07                	mov    BYTE PTR [edi],al
c0020453:	8b 07                	mov    eax,DWORD PTR [edi]
c0020455:	25 e0 ff 00 00       	and    eax,0xffe0
c002045a:	0d 05 00 01 00       	or     eax,0x10005
c002045f:	89 07                	mov    DWORD PTR [edi],eax
c0020461:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020468:	74 4d                	je     c00204b7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c002046a:	eb 32                	jmp    c002049e <SATA::access(unsigned long long, int, void*, bool)+0x22c>
c002046c:	83 ec 0c             	sub    esp,0xc
c002046f:	68 13 6b 02 c0       	push   0xc0026b13
c0020474:	e8 f0 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020479:	83 c4 10             	add    esp,0x10
c002047c:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020483:	75 92                	jne    c0020417 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c0020485:	e4 60                	in     al,0x60
c0020487:	3c 1c                	cmp    al,0x1c
c0020489:	74 04                	je     c002048f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c002048b:	3c 5a                	cmp    al,0x5a
c002048d:	75 f6                	jne    c0020485 <SATA::access(unsigned long long, int, void*, bool)+0x213>
c002048f:	e4 60                	in     al,0x60
c0020491:	3c 5a                	cmp    al,0x5a
c0020493:	74 fa                	je     c002048f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020495:	3c 1c                	cmp    al,0x1c
c0020497:	74 f6                	je     c002048f <SATA::access(unsigned long long, int, void*, bool)+0x21d>
c0020499:	e9 79 ff ff ff       	jmp    c0020417 <SATA::access(unsigned long long, int, void*, bool)+0x1a5>
c002049e:	83 ec 0c             	sub    esp,0xc
c00204a1:	68 22 6b 02 c0       	push   0xc0026b22
c00204a6:	e8 be 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00204ab:	83 c4 10             	add    esp,0x10
c00204ae:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00204b5:	74 3b                	je     c00204f2 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c00204b7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00204bd:	8b b0 58 01 00 00    	mov    esi,DWORD PTR [eax+0x158]
c00204c3:	2b b0 5c 01 00 00    	sub    esi,DWORD PTR [eax+0x15c]
c00204c9:	03 77 08             	add    esi,DWORD PTR [edi+0x8]
c00204cc:	50                   	push   eax
c00204cd:	0f b7 47 02          	movzx  eax,WORD PTR [edi+0x2]
c00204d1:	83 c0 08             	add    eax,0x8
c00204d4:	c1 e0 04             	shl    eax,0x4
c00204d7:	50                   	push   eax
c00204d8:	6a 00                	push   0x0
c00204da:	56                   	push   esi
c00204db:	e8 a4 01 fe ff       	call   c0000684 <memset>
c00204e0:	83 c4 10             	add    esp,0x10
c00204e3:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00204ea:	74 33                	je     c002051f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c00204ec:	eb 18                	jmp    c0020506 <SATA::access(unsigned long long, int, void*, bool)+0x294>
c00204ee:	3c 1c                	cmp    al,0x1c
c00204f0:	74 0c                	je     c00204fe <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00204f2:	e4 60                	in     al,0x60
c00204f4:	3c 5a                	cmp    al,0x5a
c00204f6:	75 f6                	jne    c00204ee <SATA::access(unsigned long long, int, void*, bool)+0x27c>
c00204f8:	eb 04                	jmp    c00204fe <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c00204fa:	3c 1c                	cmp    al,0x1c
c00204fc:	75 b9                	jne    c00204b7 <SATA::access(unsigned long long, int, void*, bool)+0x245>
c00204fe:	e4 60                	in     al,0x60
c0020500:	3c 5a                	cmp    al,0x5a
c0020502:	74 fa                	je     c00204fe <SATA::access(unsigned long long, int, void*, bool)+0x28c>
c0020504:	eb f4                	jmp    c00204fa <SATA::access(unsigned long long, int, void*, bool)+0x288>
c0020506:	83 ec 0c             	sub    esp,0xc
c0020509:	68 31 6b 02 c0       	push   0xc0026b31
c002050e:	e8 56 95 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020513:	83 c4 10             	add    esp,0x10
c0020516:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c002051d:	74 48                	je     c0020567 <SATA::access(unsigned long long, int, void*, bool)+0x2f5>
c002051f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0020525:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c002052b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002052f:	c1 e0 09             	shl    eax,0x9
c0020532:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020536:	48                   	dec    eax
c0020537:	25 ff ff 3f 00       	and    eax,0x3fffff
c002053c:	89 c2                	mov    edx,eax
c002053e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c0020544:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020549:	09 d0                	or     eax,edx
c002054b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c0020551:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c0020558:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002055f:	74 33                	je     c0020594 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020561:	eb 18                	jmp    c002057b <SATA::access(unsigned long long, int, void*, bool)+0x309>
c0020563:	3c 1c                	cmp    al,0x1c
c0020565:	74 0c                	je     c0020573 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020567:	e4 60                	in     al,0x60
c0020569:	3c 5a                	cmp    al,0x5a
c002056b:	75 f6                	jne    c0020563 <SATA::access(unsigned long long, int, void*, bool)+0x2f1>
c002056d:	eb 04                	jmp    c0020573 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c002056f:	3c 1c                	cmp    al,0x1c
c0020571:	75 ac                	jne    c002051f <SATA::access(unsigned long long, int, void*, bool)+0x2ad>
c0020573:	e4 60                	in     al,0x60
c0020575:	3c 5a                	cmp    al,0x5a
c0020577:	74 fa                	je     c0020573 <SATA::access(unsigned long long, int, void*, bool)+0x301>
c0020579:	eb f4                	jmp    c002056f <SATA::access(unsigned long long, int, void*, bool)+0x2fd>
c002057b:	83 ec 0c             	sub    esp,0xc
c002057e:	68 40 6b 02 c0       	push   0xc0026b40
c0020583:	e8 e1 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020588:	83 c4 10             	add    esp,0x10
c002058b:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020592:	74 63                	je     c00205f7 <SATA::access(unsigned long long, int, void*, bool)+0x385>
c0020594:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020597:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c002059b:	66 25 00 7f          	and    ax,0x7f00
c002059f:	66 0d 27 80          	or     ax,0x8027
c00205a3:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c00205a8:	66 89 06             	mov    WORD PTR [esi],ax
c00205ab:	19 c0                	sbb    eax,eax
c00205ad:	83 e0 f0             	and    eax,0xfffffff0
c00205b0:	83 c0 35             	add    eax,0x35
c00205b3:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00205b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205ba:	66 89 46 04          	mov    WORD PTR [esi+0x4],ax
c00205be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205c2:	c1 e8 10             	shr    eax,0x10
c00205c5:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c00205c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00205cc:	c1 e8 18             	shr    eax,0x18
c00205cf:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00205d6:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c00205d9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00205dd:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c00205e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00205e4:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c00205e7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00205eb:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c00205ef:	74 33                	je     c0020624 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c00205f1:	eb 18                	jmp    c002060b <SATA::access(unsigned long long, int, void*, bool)+0x399>
c00205f3:	3c 1c                	cmp    al,0x1c
c00205f5:	74 0c                	je     c0020603 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00205f7:	e4 60                	in     al,0x60
c00205f9:	3c 5a                	cmp    al,0x5a
c00205fb:	75 f6                	jne    c00205f3 <SATA::access(unsigned long long, int, void*, bool)+0x381>
c00205fd:	eb 04                	jmp    c0020603 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c00205ff:	3c 1c                	cmp    al,0x1c
c0020601:	75 91                	jne    c0020594 <SATA::access(unsigned long long, int, void*, bool)+0x322>
c0020603:	e4 60                	in     al,0x60
c0020605:	3c 5a                	cmp    al,0x5a
c0020607:	74 fa                	je     c0020603 <SATA::access(unsigned long long, int, void*, bool)+0x391>
c0020609:	eb f4                	jmp    c00205ff <SATA::access(unsigned long long, int, void*, bool)+0x38d>
c002060b:	83 ec 0c             	sub    esp,0xc
c002060e:	68 4f 6b 02 c0       	push   0xc0026b4f
c0020613:	e8 51 94 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020618:	83 c4 10             	add    esp,0x10
c002061b:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020622:	74 11                	je     c0020635 <SATA::access(unsigned long long, int, void*, bool)+0x3c3>
c0020624:	89 e8                	mov    eax,ebp
c0020626:	31 f6                	xor    esi,esi
c0020628:	c1 e0 07             	shl    eax,0x7
c002062b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002062f:	eb 21                	jmp    c0020652 <SATA::access(unsigned long long, int, void*, bool)+0x3e0>
c0020631:	3c 1c                	cmp    al,0x1c
c0020633:	74 0c                	je     c0020641 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020635:	e4 60                	in     al,0x60
c0020637:	3c 5a                	cmp    al,0x5a
c0020639:	75 f6                	jne    c0020631 <SATA::access(unsigned long long, int, void*, bool)+0x3bf>
c002063b:	eb 04                	jmp    c0020641 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c002063d:	3c 1c                	cmp    al,0x1c
c002063f:	75 e3                	jne    c0020624 <SATA::access(unsigned long long, int, void*, bool)+0x3b2>
c0020641:	e4 60                	in     al,0x60
c0020643:	3c 5a                	cmp    al,0x5a
c0020645:	74 fa                	je     c0020641 <SATA::access(unsigned long long, int, void*, bool)+0x3cf>
c0020647:	eb f4                	jmp    c002063d <SATA::access(unsigned long long, int, void*, bool)+0x3cb>
c0020649:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c002064f:	74 0c                	je     c002065d <SATA::access(unsigned long long, int, void*, bool)+0x3eb>
c0020651:	46                   	inc    esi
c0020652:	8b 90 20 01 00 00    	mov    edx,DWORD PTR [eax+0x120]
c0020658:	80 e2 88             	and    dl,0x88
c002065b:	75 ec                	jne    c0020649 <SATA::access(unsigned long long, int, void*, bool)+0x3d7>
c002065d:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020664:	74 3d                	je     c00206a3 <SATA::access(unsigned long long, int, void*, bool)+0x431>
c0020666:	83 ec 0c             	sub    esp,0xc
c0020669:	68 5e 6b 02 c0       	push   0xc0026b5e
c002066e:	e8 f6 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020673:	8b 15 20 7f 02 c0    	mov    edx,DWORD PTR ds:0xc0027f20
c0020679:	83 c4 10             	add    esp,0x10
c002067c:	f6 c2 80             	test   dl,0x80
c002067f:	74 0e                	je     c002068f <SATA::access(unsigned long long, int, void*, bool)+0x41d>
c0020681:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c0020687:	75 2f                	jne    c00206b8 <SATA::access(unsigned long long, int, void*, bool)+0x446>
c0020689:	eb 20                	jmp    c00206ab <SATA::access(unsigned long long, int, void*, bool)+0x439>
c002068b:	3c 1c                	cmp    al,0x1c
c002068d:	74 0c                	je     c002069b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c002068f:	e4 60                	in     al,0x60
c0020691:	3c 5a                	cmp    al,0x5a
c0020693:	75 f6                	jne    c002068b <SATA::access(unsigned long long, int, void*, bool)+0x419>
c0020695:	eb 04                	jmp    c002069b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c0020697:	3c 1c                	cmp    al,0x1c
c0020699:	75 e6                	jne    c0020681 <SATA::access(unsigned long long, int, void*, bool)+0x40f>
c002069b:	e4 60                	in     al,0x60
c002069d:	3c 5a                	cmp    al,0x5a
c002069f:	74 fa                	je     c002069b <SATA::access(unsigned long long, int, void*, bool)+0x429>
c00206a1:	eb f4                	jmp    c0020697 <SATA::access(unsigned long long, int, void*, bool)+0x425>
c00206a3:	81 fe 40 42 0f 00    	cmp    esi,0xf4240
c00206a9:	75 13                	jne    c00206be <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00206ab:	83 ec 0c             	sub    esp,0xc
c00206ae:	68 6e 6b 02 c0       	push   0xc0026b6e
c00206b3:	e9 d2 00 00 00       	jmp    c002078a <SATA::access(unsigned long long, int, void*, bool)+0x518>
c00206b8:	0f ba e2 0b          	bt     edx,0xb
c00206bc:	72 25                	jb     c00206e3 <SATA::access(unsigned long long, int, void*, bool)+0x471>
c00206be:	be 01 00 00 00       	mov    esi,0x1
c00206c3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00206c7:	89 e8                	mov    eax,ebp
c00206c9:	d3 e6                	shl    esi,cl
c00206cb:	c1 e0 07             	shl    eax,0x7
c00206ce:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00206d2:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00206d9:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c00206df:	74 4a                	je     c002072b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c00206e1:	eb 2f                	jmp    c0020712 <SATA::access(unsigned long long, int, void*, bool)+0x4a0>
c00206e3:	83 ec 0c             	sub    esp,0xc
c00206e6:	68 7c 6b 02 c0       	push   0xc0026b7c
c00206eb:	e8 79 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00206f0:	83 c4 10             	add    esp,0x10
c00206f3:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00206fa:	75 c2                	jne    c00206be <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c00206fc:	e4 60                	in     al,0x60
c00206fe:	3c 5a                	cmp    al,0x5a
c0020700:	74 04                	je     c0020706 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020702:	3c 1c                	cmp    al,0x1c
c0020704:	75 f6                	jne    c00206fc <SATA::access(unsigned long long, int, void*, bool)+0x48a>
c0020706:	e4 60                	in     al,0x60
c0020708:	3c 5a                	cmp    al,0x5a
c002070a:	74 fa                	je     c0020706 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c002070c:	3c 1c                	cmp    al,0x1c
c002070e:	74 f6                	je     c0020706 <SATA::access(unsigned long long, int, void*, bool)+0x494>
c0020710:	eb ac                	jmp    c00206be <SATA::access(unsigned long long, int, void*, bool)+0x44c>
c0020712:	83 ec 0c             	sub    esp,0xc
c0020715:	68 8c 6b 02 c0       	push   0xc0026b8c
c002071a:	e8 4a 93 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002071f:	83 c4 10             	add    esp,0x10
c0020722:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020729:	74 0f                	je     c002073a <SATA::access(unsigned long long, int, void*, bool)+0x4c8>
c002072b:	89 e8                	mov    eax,ebp
c002072d:	c1 e0 07             	shl    eax,0x7
c0020730:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020734:	eb 24                	jmp    c002075a <SATA::access(unsigned long long, int, void*, bool)+0x4e8>
c0020736:	3c 1c                	cmp    al,0x1c
c0020738:	74 0c                	je     c0020746 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002073a:	e4 60                	in     al,0x60
c002073c:	3c 5a                	cmp    al,0x5a
c002073e:	75 f6                	jne    c0020736 <SATA::access(unsigned long long, int, void*, bool)+0x4c4>
c0020740:	eb 04                	jmp    c0020746 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c0020742:	3c 1c                	cmp    al,0x1c
c0020744:	75 e5                	jne    c002072b <SATA::access(unsigned long long, int, void*, bool)+0x4b9>
c0020746:	e4 60                	in     al,0x60
c0020748:	3c 5a                	cmp    al,0x5a
c002074a:	74 fa                	je     c0020746 <SATA::access(unsigned long long, int, void*, bool)+0x4d4>
c002074c:	eb f4                	jmp    c0020742 <SATA::access(unsigned long long, int, void*, bool)+0x4d0>
c002074e:	8b 90 10 01 00 00    	mov    edx,DWORD PTR [eax+0x110]
c0020754:	0f ba e2 1e          	bt     edx,0x1e
c0020758:	72 28                	jb     c0020782 <SATA::access(unsigned long long, int, void*, bool)+0x510>
c002075a:	8b 90 38 01 00 00    	mov    edx,DWORD PTR [eax+0x138]
c0020760:	85 d6                	test   esi,edx
c0020762:	75 ea                	jne    c002074e <SATA::access(unsigned long long, int, void*, bool)+0x4dc>
c0020764:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002076b:	75 2f                	jne    c002079c <SATA::access(unsigned long long, int, void*, bool)+0x52a>
c002076d:	89 e8                	mov    eax,ebp
c002076f:	c1 e0 07             	shl    eax,0x7
c0020772:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0020776:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c002077c:	0f ba e0 1e          	bt     eax,0x1e
c0020780:	73 49                	jae    c00207cb <SATA::access(unsigned long long, int, void*, bool)+0x559>
c0020782:	83 ec 0c             	sub    esp,0xc
c0020785:	68 9c 6b 02 c0       	push   0xc0026b9c
c002078a:	e8 14 42 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c002078f:	83 c4 10             	add    esp,0x10
c0020792:	b8 01 00 00 00       	mov    eax,0x1
c0020797:	e9 c5 00 00 00       	jmp    c0020861 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c002079c:	83 ec 0c             	sub    esp,0xc
c002079f:	68 ad 6b 02 c0       	push   0xc0026bad
c00207a4:	e8 c0 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00207a9:	83 c4 10             	add    esp,0x10
c00207ac:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00207b3:	75 b8                	jne    c002076d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00207b5:	e4 60                	in     al,0x60
c00207b7:	3c 5a                	cmp    al,0x5a
c00207b9:	74 04                	je     c00207bf <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00207bb:	3c 1c                	cmp    al,0x1c
c00207bd:	75 f6                	jne    c00207b5 <SATA::access(unsigned long long, int, void*, bool)+0x543>
c00207bf:	e4 60                	in     al,0x60
c00207c1:	3c 5a                	cmp    al,0x5a
c00207c3:	74 fa                	je     c00207bf <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00207c5:	3c 1c                	cmp    al,0x1c
c00207c7:	74 f6                	je     c00207bf <SATA::access(unsigned long long, int, void*, bool)+0x54d>
c00207c9:	eb a2                	jmp    c002076d <SATA::access(unsigned long long, int, void*, bool)+0x4fb>
c00207cb:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00207d2:	74 3a                	je     c002080e <SATA::access(unsigned long long, int, void*, bool)+0x59c>
c00207d4:	83 ec 0c             	sub    esp,0xc
c00207d7:	68 bd 6b 02 c0       	push   0xc0026bbd
c00207dc:	e8 88 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00207e1:	83 c4 10             	add    esp,0x10
c00207e4:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00207eb:	74 0d                	je     c00207fa <SATA::access(unsigned long long, int, void*, bool)+0x588>
c00207ed:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00207f2:	75 31                	jne    c0020825 <SATA::access(unsigned long long, int, void*, bool)+0x5b3>
c00207f4:	eb 1f                	jmp    c0020815 <SATA::access(unsigned long long, int, void*, bool)+0x5a3>
c00207f6:	3c 1c                	cmp    al,0x1c
c00207f8:	74 0c                	je     c0020806 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c00207fa:	e4 60                	in     al,0x60
c00207fc:	3c 5a                	cmp    al,0x5a
c00207fe:	75 f6                	jne    c00207f6 <SATA::access(unsigned long long, int, void*, bool)+0x584>
c0020800:	eb 04                	jmp    c0020806 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c0020802:	3c 1c                	cmp    al,0x1c
c0020804:	75 e7                	jne    c00207ed <SATA::access(unsigned long long, int, void*, bool)+0x57b>
c0020806:	e4 60                	in     al,0x60
c0020808:	3c 5a                	cmp    al,0x5a
c002080a:	74 fa                	je     c0020806 <SATA::access(unsigned long long, int, void*, bool)+0x594>
c002080c:	eb f4                	jmp    c0020802 <SATA::access(unsigned long long, int, void*, bool)+0x590>
c002080e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0020813:	75 19                	jne    c002082e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020815:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c002081b:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c002081f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020823:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020825:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002082c:	75 04                	jne    c0020832 <SATA::access(unsigned long long, int, void*, bool)+0x5c0>
c002082e:	31 c0                	xor    eax,eax
c0020830:	eb 2f                	jmp    c0020861 <SATA::access(unsigned long long, int, void*, bool)+0x5ef>
c0020832:	83 ec 0c             	sub    esp,0xc
c0020835:	68 cd 6b 02 c0       	push   0xc0026bcd
c002083a:	e8 2a 92 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002083f:	83 c4 10             	add    esp,0x10
c0020842:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020849:	75 e3                	jne    c002082e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c002084b:	e4 60                	in     al,0x60
c002084d:	3c 1c                	cmp    al,0x1c
c002084f:	74 04                	je     c0020855 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c0020851:	3c 5a                	cmp    al,0x5a
c0020853:	75 f6                	jne    c002084b <SATA::access(unsigned long long, int, void*, bool)+0x5d9>
c0020855:	e4 60                	in     al,0x60
c0020857:	3c 5a                	cmp    al,0x5a
c0020859:	74 fa                	je     c0020855 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002085b:	3c 1c                	cmp    al,0x1c
c002085d:	74 f6                	je     c0020855 <SATA::access(unsigned long long, int, void*, bool)+0x5e3>
c002085f:	eb cd                	jmp    c002082e <SATA::access(unsigned long long, int, void*, bool)+0x5bc>
c0020861:	83 c4 2c             	add    esp,0x2c
c0020864:	5b                   	pop    ebx
c0020865:	5e                   	pop    esi
c0020866:	5f                   	pop    edi
c0020867:	5d                   	pop    ebp
c0020868:	c3                   	ret    
c0020869:	90                   	nop

c002086a <SATA::read(unsigned long long, int, void*)>:
c002086a:	55                   	push   ebp
c002086b:	57                   	push   edi
c002086c:	56                   	push   esi
c002086d:	53                   	push   ebx
c002086e:	83 ec 0c             	sub    esp,0xc
c0020871:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020875:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020879:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002087d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020881:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020888:	74 2d                	je     c00208b7 <SATA::read(unsigned long long, int, void*)+0x4d>
c002088a:	83 ec 0c             	sub    esp,0xc
c002088d:	68 dd 6b 02 c0       	push   0xc0026bdd
c0020892:	e8 d2 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020897:	83 c4 10             	add    esp,0x10
c002089a:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00208a1:	75 14                	jne    c00208b7 <SATA::read(unsigned long long, int, void*)+0x4d>
c00208a3:	e4 60                	in     al,0x60
c00208a5:	3c 1c                	cmp    al,0x1c
c00208a7:	74 04                	je     c00208ad <SATA::read(unsigned long long, int, void*)+0x43>
c00208a9:	3c 5a                	cmp    al,0x5a
c00208ab:	75 f6                	jne    c00208a3 <SATA::read(unsigned long long, int, void*)+0x39>
c00208ad:	e4 60                	in     al,0x60
c00208af:	3c 5a                	cmp    al,0x5a
c00208b1:	74 fa                	je     c00208ad <SATA::read(unsigned long long, int, void*)+0x43>
c00208b3:	3c 1c                	cmp    al,0x1c
c00208b5:	74 f6                	je     c00208ad <SATA::read(unsigned long long, int, void*)+0x43>
c00208b7:	8d 53 ff             	lea    edx,[ebx-0x1]
c00208ba:	b8 04 00 00 00       	mov    eax,0x4
c00208bf:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00208c5:	0f 87 96 00 00 00    	ja     c0020961 <SATA::read(unsigned long long, int, void*)+0xf7>
c00208cb:	b8 06 00 00 00       	mov    eax,0x6
c00208d0:	85 ed                	test   ebp,ebp
c00208d2:	0f 84 89 00 00 00    	je     c0020961 <SATA::read(unsigned long long, int, void*)+0xf7>
c00208d8:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00208df:	74 2d                	je     c002090e <SATA::read(unsigned long long, int, void*)+0xa4>
c00208e1:	83 ec 0c             	sub    esp,0xc
c00208e4:	68 ea 6b 02 c0       	push   0xc0026bea
c00208e9:	e8 7b 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00208ee:	83 c4 10             	add    esp,0x10
c00208f1:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00208f8:	75 14                	jne    c002090e <SATA::read(unsigned long long, int, void*)+0xa4>
c00208fa:	e4 60                	in     al,0x60
c00208fc:	3c 5a                	cmp    al,0x5a
c00208fe:	74 04                	je     c0020904 <SATA::read(unsigned long long, int, void*)+0x9a>
c0020900:	3c 1c                	cmp    al,0x1c
c0020902:	75 f6                	jne    c00208fa <SATA::read(unsigned long long, int, void*)+0x90>
c0020904:	e4 60                	in     al,0x60
c0020906:	3c 5a                	cmp    al,0x5a
c0020908:	74 fa                	je     c0020904 <SATA::read(unsigned long long, int, void*)+0x9a>
c002090a:	3c 1c                	cmp    al,0x1c
c002090c:	74 f6                	je     c0020904 <SATA::read(unsigned long long, int, void*)+0x9a>
c002090e:	50                   	push   eax
c002090f:	50                   	push   eax
c0020910:	6a 00                	push   0x0
c0020912:	55                   	push   ebp
c0020913:	53                   	push   ebx
c0020914:	57                   	push   edi
c0020915:	56                   	push   esi
c0020916:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002091a:	e8 53 f9 ff ff       	call   c0020272 <SATA::access(unsigned long long, int, void*, bool)>
c002091f:	83 c4 20             	add    esp,0x20
c0020922:	89 c3                	mov    ebx,eax
c0020924:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c002092b:	74 2d                	je     c002095a <SATA::read(unsigned long long, int, void*)+0xf0>
c002092d:	83 ec 0c             	sub    esp,0xc
c0020930:	68 f7 6b 02 c0       	push   0xc0026bf7
c0020935:	e8 2f 91 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c002093a:	83 c4 10             	add    esp,0x10
c002093d:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020944:	75 14                	jne    c002095a <SATA::read(unsigned long long, int, void*)+0xf0>
c0020946:	e4 60                	in     al,0x60
c0020948:	3c 5a                	cmp    al,0x5a
c002094a:	74 04                	je     c0020950 <SATA::read(unsigned long long, int, void*)+0xe6>
c002094c:	3c 1c                	cmp    al,0x1c
c002094e:	75 f6                	jne    c0020946 <SATA::read(unsigned long long, int, void*)+0xdc>
c0020950:	e4 60                	in     al,0x60
c0020952:	3c 5a                	cmp    al,0x5a
c0020954:	74 fa                	je     c0020950 <SATA::read(unsigned long long, int, void*)+0xe6>
c0020956:	3c 1c                	cmp    al,0x1c
c0020958:	74 f6                	je     c0020950 <SATA::read(unsigned long long, int, void*)+0xe6>
c002095a:	31 c0                	xor    eax,eax
c002095c:	85 db                	test   ebx,ebx
c002095e:	0f 95 c0             	setne  al
c0020961:	83 c4 0c             	add    esp,0xc
c0020964:	5b                   	pop    ebx
c0020965:	5e                   	pop    esi
c0020966:	5f                   	pop    edi
c0020967:	5d                   	pop    ebp
c0020968:	c3                   	ret    
c0020969:	90                   	nop

c002096a <SATA::write(unsigned long long, int, void*)>:
c002096a:	55                   	push   ebp
c002096b:	57                   	push   edi
c002096c:	56                   	push   esi
c002096d:	53                   	push   ebx
c002096e:	83 ec 1c             	sub    esp,0x1c
c0020971:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020975:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020979:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002097d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020981:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020988:	74 2d                	je     c00209b7 <SATA::write(unsigned long long, int, void*)+0x4d>
c002098a:	83 ec 0c             	sub    esp,0xc
c002098d:	68 04 6c 02 c0       	push   0xc0026c04
c0020992:	e8 d2 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020997:	83 c4 10             	add    esp,0x10
c002099a:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00209a1:	75 14                	jne    c00209b7 <SATA::write(unsigned long long, int, void*)+0x4d>
c00209a3:	e4 60                	in     al,0x60
c00209a5:	3c 1c                	cmp    al,0x1c
c00209a7:	74 04                	je     c00209ad <SATA::write(unsigned long long, int, void*)+0x43>
c00209a9:	3c 5a                	cmp    al,0x5a
c00209ab:	75 f6                	jne    c00209a3 <SATA::write(unsigned long long, int, void*)+0x39>
c00209ad:	e4 60                	in     al,0x60
c00209af:	3c 5a                	cmp    al,0x5a
c00209b1:	74 fa                	je     c00209ad <SATA::write(unsigned long long, int, void*)+0x43>
c00209b3:	3c 1c                	cmp    al,0x1c
c00209b5:	74 f6                	je     c00209ad <SATA::write(unsigned long long, int, void*)+0x43>
c00209b7:	8d 55 ff             	lea    edx,[ebp-0x1]
c00209ba:	b8 04 00 00 00       	mov    eax,0x4
c00209bf:	81 fa fe 00 00 00    	cmp    edx,0xfe
c00209c5:	0f 87 bd 00 00 00    	ja     c0020a88 <SATA::write(unsigned long long, int, void*)+0x11e>
c00209cb:	b8 06 00 00 00       	mov    eax,0x6
c00209d0:	85 db                	test   ebx,ebx
c00209d2:	0f 84 b0 00 00 00    	je     c0020a88 <SATA::write(unsigned long long, int, void*)+0x11e>
c00209d8:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c00209df:	74 2d                	je     c0020a0e <SATA::write(unsigned long long, int, void*)+0xa4>
c00209e1:	83 ec 0c             	sub    esp,0xc
c00209e4:	68 12 6c 02 c0       	push   0xc0026c12
c00209e9:	e8 7b 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c00209ee:	83 c4 10             	add    esp,0x10
c00209f1:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c00209f8:	75 14                	jne    c0020a0e <SATA::write(unsigned long long, int, void*)+0xa4>
c00209fa:	e4 60                	in     al,0x60
c00209fc:	3c 1c                	cmp    al,0x1c
c00209fe:	74 04                	je     c0020a04 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020a00:	3c 5a                	cmp    al,0x5a
c0020a02:	75 f6                	jne    c00209fa <SATA::write(unsigned long long, int, void*)+0x90>
c0020a04:	e4 60                	in     al,0x60
c0020a06:	3c 5a                	cmp    al,0x5a
c0020a08:	74 fa                	je     c0020a04 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020a0a:	3c 1c                	cmp    al,0x1c
c0020a0c:	74 f6                	je     c0020a04 <SATA::write(unsigned long long, int, void*)+0x9a>
c0020a0e:	c1 e5 09             	shl    ebp,0x9
c0020a11:	01 dd                	add    ebp,ebx
c0020a13:	89 f0                	mov    eax,esi
c0020a15:	89 fa                	mov    edx,edi
c0020a17:	83 c0 01             	add    eax,0x1
c0020a1a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a1e:	83 d2 00             	adc    edx,0x0
c0020a21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a25:	50                   	push   eax
c0020a26:	50                   	push   eax
c0020a27:	6a 01                	push   0x1
c0020a29:	53                   	push   ebx
c0020a2a:	81 c3 00 02 00 00    	add    ebx,0x200
c0020a30:	6a 01                	push   0x1
c0020a32:	57                   	push   edi
c0020a33:	56                   	push   esi
c0020a34:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020a38:	e8 35 f8 ff ff       	call   c0020272 <SATA::access(unsigned long long, int, void*, bool)>
c0020a3d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0020a41:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0020a45:	83 c4 20             	add    esp,0x20
c0020a48:	39 dd                	cmp    ebp,ebx
c0020a4a:	75 c7                	jne    c0020a13 <SATA::write(unsigned long long, int, void*)+0xa9>
c0020a4c:	f6 05 21 7f 02 c0 08 	test   BYTE PTR ds:0xc0027f21,0x8
c0020a53:	75 04                	jne    c0020a59 <SATA::write(unsigned long long, int, void*)+0xef>
c0020a55:	31 c0                	xor    eax,eax
c0020a57:	eb 2f                	jmp    c0020a88 <SATA::write(unsigned long long, int, void*)+0x11e>
c0020a59:	83 ec 0c             	sub    esp,0xc
c0020a5c:	68 20 6c 02 c0       	push   0xc0026c20
c0020a61:	e8 03 90 fe ff       	call   c0009a69 <Krnl::setBootMessage(char const*)>
c0020a66:	83 c4 10             	add    esp,0x10
c0020a69:	f6 05 20 7f 02 c0 80 	test   BYTE PTR ds:0xc0027f20,0x80
c0020a70:	75 e3                	jne    c0020a55 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020a72:	e4 60                	in     al,0x60
c0020a74:	3c 5a                	cmp    al,0x5a
c0020a76:	74 04                	je     c0020a7c <SATA::write(unsigned long long, int, void*)+0x112>
c0020a78:	3c 1c                	cmp    al,0x1c
c0020a7a:	75 f6                	jne    c0020a72 <SATA::write(unsigned long long, int, void*)+0x108>
c0020a7c:	e4 60                	in     al,0x60
c0020a7e:	3c 5a                	cmp    al,0x5a
c0020a80:	74 fa                	je     c0020a7c <SATA::write(unsigned long long, int, void*)+0x112>
c0020a82:	3c 1c                	cmp    al,0x1c
c0020a84:	74 f6                	je     c0020a7c <SATA::write(unsigned long long, int, void*)+0x112>
c0020a86:	eb cd                	jmp    c0020a55 <SATA::write(unsigned long long, int, void*)+0xeb>
c0020a88:	83 c4 1c             	add    esp,0x1c
c0020a8b:	5b                   	pop    ebx
c0020a8c:	5e                   	pop    esi
c0020a8d:	5f                   	pop    edi
c0020a8e:	5d                   	pop    ebp
c0020a8f:	c3                   	ret    

c0020a90 <SATAPI::write(unsigned long long, int, void*)>:
c0020a90:	b8 03 00 00 00       	mov    eax,0x3
c0020a95:	c3                   	ret    

c0020a96 <SATAPI::close(int, int, void*)>:
c0020a96:	83 ec 0c             	sub    esp,0xc
c0020a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a9d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020aa3:	85 c0                	test   eax,eax
c0020aa5:	74 0c                	je     c0020ab3 <SATAPI::close(int, int, void*)+0x1d>
c0020aa7:	83 ec 0c             	sub    esp,0xc
c0020aaa:	8b 10                	mov    edx,DWORD PTR [eax]
c0020aac:	50                   	push   eax
c0020aad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020ab0:	83 c4 10             	add    esp,0x10
c0020ab3:	31 c0                	xor    eax,eax
c0020ab5:	83 c4 0c             	add    esp,0xc
c0020ab8:	c3                   	ret    
c0020ab9:	90                   	nop

c0020aba <SATAPI::SATAPI()>:
c0020aba:	83 ec 0c             	sub    esp,0xc
c0020abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ac1:	83 ec 04             	sub    esp,0x4
c0020ac4:	68 00 08 00 00       	push   0x800
c0020ac9:	68 68 6c 02 c0       	push   0xc0026c68
c0020ace:	50                   	push   eax
c0020acf:	e8 d2 db fe ff       	call   c000e6a6 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020ad4:	83 c4 10             	add    esp,0x10
c0020ad7:	ba a4 6d 02 c0       	mov    edx,0xc0026da4
c0020adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ae0:	89 10                	mov    DWORD PTR [eax],edx
c0020ae2:	90                   	nop
c0020ae3:	83 c4 0c             	add    esp,0xc
c0020ae6:	c3                   	ret    
c0020ae7:	90                   	nop

c0020ae8 <SATAPI::diskRemoved()>:
c0020ae8:	53                   	push   ebx
c0020ae9:	83 ec 14             	sub    esp,0x14
c0020aec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0020af0:	68 74 6c 02 c0       	push   0xc0026c74
c0020af5:	e8 01 c2 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020afa:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0020b01:	c7 04 24 c8 69 02 c0 	mov    DWORD PTR [esp],0xc00269c8
c0020b08:	e8 ee c1 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020b0d:	58                   	pop    eax
c0020b0e:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0020b14:	e8 91 f9 fe ff       	call   c00104aa <LogicalDisk::unmount()>
c0020b19:	c7 04 24 d7 69 02 c0 	mov    DWORD PTR [esp],0xc00269d7
c0020b20:	e8 d6 c1 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020b25:	5a                   	pop    edx
c0020b26:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c0020b2c:	e8 7f 03 ff ff       	call   c0010eb0 <VCache::writeWriteBuffer()>
c0020b31:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0020b37:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020b3b:	83 c4 18             	add    esp,0x18
c0020b3e:	5b                   	pop    ebx
c0020b3f:	e9 5c 03 ff ff       	jmp    c0010ea0 <VCache::invalidateReadBuffer()>

c0020b44 <SATAPI::diskInserted()>:
c0020b44:	83 ec 18             	sub    esp,0x18
c0020b47:	68 8b 6c 02 c0       	push   0xc0026c8b
c0020b4c:	e8 aa c1 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b55:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c0020b5c:	83 c4 1c             	add    esp,0x1c
c0020b5f:	c3                   	ret    

c0020b60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0020b60:	55                   	push   ebp
c0020b61:	57                   	push   edi
c0020b62:	56                   	push   esi
c0020b63:	53                   	push   ebx
c0020b64:	83 ec 38             	sub    esp,0x38
c0020b67:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0020b6b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0020b6f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0020b73:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020b77:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0020b7b:	68 a3 6c 02 c0       	push   0xc0026ca3
c0020b80:	e8 76 c1 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020b85:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0020b8b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020b91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020b95:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c0020b9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020b9f:	c1 e0 07             	shl    eax,0x7
c0020ba2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0020ba6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0020baa:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020bb4:	5a                   	pop    edx
c0020bb5:	59                   	pop    ecx
c0020bb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020bba:	8d 58 02             	lea    ebx,[eax+0x2]
c0020bbd:	c1 e3 07             	shl    ebx,0x7
c0020bc0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0020bc4:	53                   	push   ebx
c0020bc5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020bcb:	e8 c2 e3 ff ff       	call   c001ef92 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020bd0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020bd4:	83 c4 10             	add    esp,0x10
c0020bd7:	b8 01 00 00 00       	mov    eax,0x1
c0020bdc:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020be1:	0f 84 04 02 00 00    	je     c0020deb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020be7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020bed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020bef:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0020bf5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020bfb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bff:	c1 e1 05             	shl    ecx,0x5
c0020c02:	01 c8                	add    eax,ecx
c0020c04:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020c06:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020c0c:	81 c9 25 00 01 00    	or     ecx,0x10025
c0020c12:	89 08                	mov    DWORD PTR [eax],ecx
c0020c14:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020c1a:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020c20:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0020c26:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020c29:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020c2c:	50                   	push   eax
c0020c2d:	68 90 00 00 00       	push   0x90
c0020c32:	6a 00                	push   0x0
c0020c34:	53                   	push   ebx
c0020c35:	e8 4a fa fd ff       	call   c0000684 <memset>
c0020c3a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0020c3e:	b9 0c 00 00 00       	mov    ecx,0xc
c0020c43:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020c45:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c0020c4b:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0020c4f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0020c55:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0020c59:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0020c5d:	48                   	dec    eax
c0020c5e:	25 ff ff 3f 00       	and    eax,0x3fffff
c0020c63:	89 c1                	mov    ecx,eax
c0020c65:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0020c6b:	25 00 00 c0 ff       	and    eax,0xffc00000
c0020c70:	09 c8                	or     eax,ecx
c0020c72:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0020c78:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0020c7b:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0020c82:	66 25 00 7f          	and    ax,0x7f00
c0020c86:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0020c8a:	66 0d 27 80          	or     ax,0x8027
c0020c8e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c0020c92:	66 89 03             	mov    WORD PTR [ebx],ax
c0020c95:	89 d0                	mov    eax,edx
c0020c97:	c1 ea 18             	shr    edx,0x18
c0020c9a:	c1 e8 10             	shr    eax,0x10
c0020c9d:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020ca0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020ca3:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0020ca7:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0020caa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020cae:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020cb1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020cb5:	83 c4 10             	add    esp,0x10
c0020cb8:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0020cbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020cc0:	31 c0                	xor    eax,eax
c0020cc2:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0020cc8:	80 e1 88             	and    cl,0x88
c0020ccb:	74 0a                	je     c0020cd7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c0020ccd:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020cd2:	74 0a                	je     c0020cde <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c0020cd4:	40                   	inc    eax
c0020cd5:	eb eb                	jmp    c0020cc2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c0020cd7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020cdc:	75 0f                	jne    c0020ced <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x18d>
c0020cde:	83 ec 0c             	sub    esp,0xc
c0020ce1:	68 6e 6b 02 c0       	push   0xc0026b6e
c0020ce6:	e8 b8 3c ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0020ceb:	eb 48                	jmp    c0020d35 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d5>
c0020ced:	be 01 00 00 00       	mov    esi,0x1
c0020cf2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0020cf6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020cfa:	d3 e6                	shl    esi,cl
c0020cfc:	c1 e7 07             	shl    edi,0x7
c0020cff:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c0020d05:	bb 18 fc ff ff       	mov    ebx,0xfffffc18
c0020d0a:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c0020d0e:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c0020d14:	85 c6                	test   esi,eax
c0020d16:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0020d1c:	0f 84 96 00 00 00    	je     c0020db8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x258>
c0020d22:	0f ba e0 1e          	bt     eax,0x1e
c0020d26:	73 1a                	jae    c0020d42 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e2>
c0020d28:	83 ec 0c             	sub    esp,0xc
c0020d2b:	68 bd 6c 02 c0       	push   0xc0026cbd
c0020d30:	e8 c6 bf fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020d35:	83 c4 10             	add    esp,0x10
c0020d38:	b8 01 00 00 00       	mov    eax,0x1
c0020d3d:	e9 a9 00 00 00       	jmp    c0020deb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28b>
c0020d42:	83 fb 0d             	cmp    ebx,0xd
c0020d45:	77 12                	ja     c0020d59 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0020d47:	83 ec 0c             	sub    esp,0xc
c0020d4a:	68 c8 00 00 00       	push   0xc8
c0020d4f:	e8 54 7b ff ff       	call   c00188a8 <milliTenthSleep(unsigned int)>
c0020d54:	83 c4 10             	add    esp,0x10
c0020d57:	eb 2a                	jmp    c0020d83 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020d59:	8d 83 18 fc ff ff    	lea    eax,[ebx-0x3e8]
c0020d5f:	83 f8 0d             	cmp    eax,0xd
c0020d62:	77 0a                	ja     c0020d6e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20e>
c0020d64:	83 ec 0c             	sub    esp,0xc
c0020d67:	68 58 02 00 00       	push   0x258
c0020d6c:	eb 28                	jmp    c0020d96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020d6e:	8d 83 30 f8 ff ff    	lea    eax,[ebx-0x7d0]
c0020d74:	83 f8 0d             	cmp    eax,0xd
c0020d77:	77 0a                	ja     c0020d83 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x223>
c0020d79:	83 ec 0c             	sub    esp,0xc
c0020d7c:	68 dc 05 00 00       	push   0x5dc
c0020d81:	eb 13                	jmp    c0020d96 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c0020d83:	8d 83 90 e8 ff ff    	lea    eax,[ebx-0x1770]
c0020d89:	83 f8 0d             	cmp    eax,0xd
c0020d8c:	77 10                	ja     c0020d9e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x23e>
c0020d8e:	83 ec 0c             	sub    esp,0xc
c0020d91:	68 c4 09 00 00       	push   0x9c4
c0020d96:	e8 0d 7b ff ff       	call   c00188a8 <milliTenthSleep(unsigned int)>
c0020d9b:	83 c4 10             	add    esp,0x10
c0020d9e:	43                   	inc    ebx
c0020d9f:	81 fb 29 23 00 00    	cmp    ebx,0x2329
c0020da5:	0f 85 63 ff ff ff    	jne    c0020d0e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ae>
c0020dab:	83 ec 0c             	sub    esp,0xc
c0020dae:	68 d0 6c 02 c0       	push   0xc0026cd0
c0020db3:	e9 78 ff ff ff       	jmp    c0020d30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020db8:	0f ba e0 1e          	bt     eax,0x1e
c0020dbc:	73 0d                	jae    c0020dcb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x26b>
c0020dbe:	83 ec 0c             	sub    esp,0xc
c0020dc1:	68 e4 6c 02 c0       	push   0xc0026ce4
c0020dc6:	e9 65 ff ff ff       	jmp    c0020d30 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d0>
c0020dcb:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020dd0:	74 17                	je     c0020de9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020dd2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0020dd7:	74 10                	je     c0020de9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x289>
c0020dd9:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020ddf:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020de3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0020de7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0020de9:	31 c0                	xor    eax,eax
c0020deb:	83 c4 2c             	add    esp,0x2c
c0020dee:	5b                   	pop    ebx
c0020def:	5e                   	pop    esi
c0020df0:	5f                   	pop    edi
c0020df1:	5d                   	pop    ebp
c0020df2:	c3                   	ret    
c0020df3:	90                   	nop

c0020df4 <SATAPI::eject()>:
c0020df4:	57                   	push   edi
c0020df5:	b9 03 00 00 00       	mov    ecx,0x3
c0020dfa:	53                   	push   ebx
c0020dfb:	83 ec 14             	sub    esp,0x14
c0020dfe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0020e02:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0020e06:	fc                   	cld    
c0020e07:	31 c0                	xor    eax,eax
c0020e09:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020e0b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0020e10:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0020e15:	50                   	push   eax
c0020e16:	6a 00                	push   0x0
c0020e18:	6a 00                	push   0x0
c0020e1a:	6a 00                	push   0x0
c0020e1c:	6a 00                	push   0x0
c0020e1e:	6a 02                	push   0x2
c0020e20:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020e24:	50                   	push   eax
c0020e25:	53                   	push   ebx
c0020e26:	e8 35 fd ff ff       	call   c0020b60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020e2b:	83 c4 20             	add    esp,0x20
c0020e2e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020e35:	74 0c                	je     c0020e43 <SATAPI::eject()+0x4f>
c0020e37:	83 ec 0c             	sub    esp,0xc
c0020e3a:	53                   	push   ebx
c0020e3b:	e8 a8 fc ff ff       	call   c0020ae8 <SATAPI::diskRemoved()>
c0020e40:	83 c4 10             	add    esp,0x10
c0020e43:	83 c4 14             	add    esp,0x14
c0020e46:	31 c0                	xor    eax,eax
c0020e48:	5b                   	pop    ebx
c0020e49:	5f                   	pop    edi
c0020e4a:	c3                   	ret    
c0020e4b:	90                   	nop

c0020e4c <SATAPI::detectMedia()>:
c0020e4c:	56                   	push   esi
c0020e4d:	53                   	push   ebx
c0020e4e:	83 ec 30             	sub    esp,0x30
c0020e51:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0020e55:	68 f9 6c 02 c0       	push   0xc0026cf9
c0020e5a:	e8 9c be fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020e5f:	83 c4 0c             	add    esp,0xc
c0020e62:	6a 0c                	push   0xc
c0020e64:	6a 00                	push   0x0
c0020e66:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0020e6a:	56                   	push   esi
c0020e6b:	e8 14 f8 fd ff       	call   c0000684 <memset>
c0020e70:	83 c4 0c             	add    esp,0xc
c0020e73:	6a 00                	push   0x0
c0020e75:	6a 00                	push   0x0
c0020e77:	6a 00                	push   0x0
c0020e79:	6a 00                	push   0x0
c0020e7b:	6a 00                	push   0x0
c0020e7d:	56                   	push   esi
c0020e7e:	53                   	push   ebx
c0020e7f:	e8 dc fc ff ff       	call   c0020b60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020e84:	83 c4 20             	add    esp,0x20
c0020e87:	48                   	dec    eax
c0020e88:	75 27                	jne    c0020eb1 <SATAPI::detectMedia()+0x65>
c0020e8a:	83 ec 0c             	sub    esp,0xc
c0020e8d:	68 0d 6d 02 c0       	push   0xc0026d0d
c0020e92:	e8 64 be fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020e97:	83 c4 10             	add    esp,0x10
c0020e9a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020ea1:	74 0e                	je     c0020eb1 <SATAPI::detectMedia()+0x65>
c0020ea3:	83 ec 0c             	sub    esp,0xc
c0020ea6:	53                   	push   ebx
c0020ea7:	e8 3c fc ff ff       	call   c0020ae8 <SATAPI::diskRemoved()>
c0020eac:	e9 d1 00 00 00       	jmp    c0020f82 <SATAPI::detectMedia()+0x136>
c0020eb1:	50                   	push   eax
c0020eb2:	6a 0c                	push   0xc
c0020eb4:	6a 00                	push   0x0
c0020eb6:	56                   	push   esi
c0020eb7:	e8 c8 f7 fd ff       	call   c0000684 <memset>
c0020ebc:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0020ec1:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0020ec6:	83 c4 0c             	add    esp,0xc
c0020ec9:	6a 01                	push   0x1
c0020ecb:	8d 44 24 16          	lea    eax,[esp+0x16]
c0020ecf:	50                   	push   eax
c0020ed0:	6a 00                	push   0x0
c0020ed2:	6a 00                	push   0x0
c0020ed4:	6a 12                	push   0x12
c0020ed6:	56                   	push   esi
c0020ed7:	53                   	push   ebx
c0020ed8:	e8 83 fc ff ff       	call   c0020b60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0020edd:	83 c4 20             	add    esp,0x20
c0020ee0:	48                   	dec    eax
c0020ee1:	75 19                	jne    c0020efc <SATAPI::detectMedia()+0xb0>
c0020ee3:	83 ec 0c             	sub    esp,0xc
c0020ee6:	68 17 6d 02 c0       	push   0xc0026d17
c0020eeb:	e8 0b be fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020ef0:	83 c4 10             	add    esp,0x10
c0020ef3:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020efa:	75 a7                	jne    c0020ea3 <SATAPI::detectMedia()+0x57>
c0020efc:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0020f00:	83 e0 7f             	and    eax,0x7f
c0020f03:	3c 70                	cmp    al,0x70
c0020f05:	74 25                	je     c0020f2c <SATAPI::detectMedia()+0xe0>
c0020f07:	83 ec 0c             	sub    esp,0xc
c0020f0a:	68 21 6d 02 c0       	push   0xc0026d21
c0020f0f:	e8 e7 bd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020f14:	83 c4 10             	add    esp,0x10
c0020f17:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f1e:	75 0c                	jne    c0020f2c <SATAPI::detectMedia()+0xe0>
c0020f20:	83 ec 0c             	sub    esp,0xc
c0020f23:	53                   	push   ebx
c0020f24:	e8 1b fc ff ff       	call   c0020b44 <SATAPI::diskInserted()>
c0020f29:	83 c4 10             	add    esp,0x10
c0020f2c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0020f30:	83 e0 0f             	and    eax,0xf
c0020f33:	3c 02                	cmp    al,0x2
c0020f35:	75 25                	jne    c0020f5c <SATAPI::detectMedia()+0x110>
c0020f37:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0020f3c:	75 47                	jne    c0020f85 <SATAPI::detectMedia()+0x139>
c0020f3e:	83 ec 0c             	sub    esp,0xc
c0020f41:	68 2a 6d 02 c0       	push   0xc0026d2a
c0020f46:	e8 b0 bd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020f4b:	83 c4 10             	add    esp,0x10
c0020f4e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f55:	74 2e                	je     c0020f85 <SATAPI::detectMedia()+0x139>
c0020f57:	e9 47 ff ff ff       	jmp    c0020ea3 <SATAPI::detectMedia()+0x57>
c0020f5c:	84 c0                	test   al,al
c0020f5e:	75 25                	jne    c0020f85 <SATAPI::detectMedia()+0x139>
c0020f60:	83 ec 0c             	sub    esp,0xc
c0020f63:	68 33 6d 02 c0       	push   0xc0026d33
c0020f68:	e8 8e bd fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0020f6d:	83 c4 10             	add    esp,0x10
c0020f70:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0020f77:	75 0c                	jne    c0020f85 <SATAPI::detectMedia()+0x139>
c0020f79:	83 ec 0c             	sub    esp,0xc
c0020f7c:	53                   	push   ebx
c0020f7d:	e8 c2 fb ff ff       	call   c0020b44 <SATAPI::diskInserted()>
c0020f82:	83 c4 10             	add    esp,0x10
c0020f85:	83 c4 24             	add    esp,0x24
c0020f88:	5b                   	pop    ebx
c0020f89:	5e                   	pop    esi
c0020f8a:	c3                   	ret    
c0020f8b:	90                   	nop

c0020f8c <SATAPI::open(int, int, void*)>:
c0020f8c:	56                   	push   esi
c0020f8d:	53                   	push   ebx
c0020f8e:	51                   	push   ecx
c0020f8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020f93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020f97:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0020fa1:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020fa7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0020fb1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fb5:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0020fbf:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020fc5:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0020fcc:	e8 f5 90 fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0020fd1:	89 c6                	mov    esi,eax
c0020fd3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020fd9:	81 c6 00 10 00 00    	add    esi,0x1000
c0020fdf:	e8 e2 90 fe ff       	call   c000a0c6 <Phys::allocatePage()>
c0020fe4:	39 c6                	cmp    esi,eax
c0020fe6:	74 10                	je     c0020ff8 <SATAPI::open(int, int, void*)+0x6c>
c0020fe8:	83 ec 0c             	sub    esp,0xc
c0020feb:	68 3d 6d 02 c0       	push   0xc0026d3d
c0020ff0:	e8 ae 39 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0020ff5:	83 c4 10             	add    esp,0x10
c0020ff8:	83 ec 0c             	sub    esp,0xc
c0020ffb:	6a 02                	push   0x2
c0020ffd:	e8 d3 a9 fe ff       	call   c000b9d5 <Virt::allocateKernelVirtualPages(int)>
c0021002:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c0021008:	6a 03                	push   0x3
c002100a:	50                   	push   eax
c002100b:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c0021011:	ff 35 30 80 02 c0    	push   DWORD PTR ds:0xc0028030
c0021017:	e8 60 b0 fe ff       	call   c000c07c <VAS::mapPage(unsigned long, unsigned long, int)>
c002101c:	83 c4 14             	add    esp,0x14
c002101f:	68 74 01 00 00       	push   0x174
c0021024:	e8 e6 89 fe ff       	call   c0009a0f <malloc>
c0021029:	83 c4 0c             	add    esp,0xc
c002102c:	89 c6                	mov    esi,eax
c002102e:	6a 00                	push   0x0
c0021030:	68 ff ff ff 7f       	push   0x7fffffff
c0021035:	6a 00                	push   0x0
c0021037:	6a 00                	push   0x0
c0021039:	53                   	push   ebx
c002103a:	68 53 6d 02 c0       	push   0xc0026d53
c002103f:	50                   	push   eax
c0021040:	e8 71 f2 fe ff       	call   c00102b6 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0021045:	83 c4 14             	add    esp,0x14
c0021048:	56                   	push   esi
c0021049:	e8 1e f3 fe ff       	call   c001036c <LogicalDisk::assignDriveLetter()>
c002104e:	5a                   	pop    edx
c002104f:	0f be c0             	movsx  eax,al
c0021052:	59                   	pop    ecx
c0021053:	50                   	push   eax
c0021054:	68 e5 69 02 c0       	push   0xc00269e5
c0021059:	e8 9d bc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c002105e:	58                   	pop    eax
c002105f:	5a                   	pop    edx
c0021060:	56                   	push   esi
c0021061:	53                   	push   ebx
c0021062:	e8 07 d2 fe ff       	call   c000e26e <Device::addChild(Device*)>
c0021067:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002106d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0021070:	e8 99 d6 fe ff       	call   c000e70e <PhysicalDisk::startCache()>
c0021075:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002107c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002107f:	e8 c8 fd ff ff       	call   c0020e4c <SATAPI::detectMedia()>
c0021084:	83 c4 14             	add    esp,0x14
c0021087:	31 c0                	xor    eax,eax
c0021089:	5b                   	pop    ebx
c002108a:	5e                   	pop    esi
c002108b:	c3                   	ret    

c002108c <SATAPI::read(unsigned long long, int, void*)>:
c002108c:	55                   	push   ebp
c002108d:	57                   	push   edi
c002108e:	56                   	push   esi
c002108f:	53                   	push   ebx
c0021090:	83 ec 48             	sub    esp,0x48
c0021093:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0021097:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c002109b:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c002109f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00210a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00210a7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00210ab:	68 61 6d 02 c0       	push   0xc0026d61
c00210b0:	e8 46 bc fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00210b5:	83 c4 10             	add    esp,0x10
c00210b8:	83 fb 04             	cmp    ebx,0x4
c00210bb:	7e 10                	jle    c00210cd <SATAPI::read(unsigned long long, int, void*)+0x41>
c00210bd:	83 ec 0c             	sub    esp,0xc
c00210c0:	68 72 6d 02 c0       	push   0xc0026d72
c00210c5:	e8 d9 38 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c00210ca:	83 c4 10             	add    esp,0x10
c00210cd:	8d 7c 24 18          	lea    edi,[esp+0x18]
c00210d1:	31 ed                	xor    ebp,ebp
c00210d3:	b9 03 00 00 00       	mov    ecx,0x3
c00210d8:	fc                   	cld    
c00210d9:	89 e8                	mov    eax,ebp
c00210db:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00210dd:	c6 44 24 18 1b       	mov    BYTE PTR [esp+0x18],0x1b
c00210e2:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c00210e7:	50                   	push   eax
c00210e8:	6a 00                	push   0x0
c00210ea:	6a 00                	push   0x0
c00210ec:	6a 00                	push   0x0
c00210ee:	6a 00                	push   0x0
c00210f0:	6a 02                	push   0x2
c00210f2:	8d 44 24 30          	lea    eax,[esp+0x30]
c00210f6:	50                   	push   eax
c00210f7:	56                   	push   esi
c00210f8:	e8 63 fa ff ff       	call   c0020b60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00210fd:	8d 7c 24 44          	lea    edi,[esp+0x44]
c0021101:	89 e8                	mov    eax,ebp
c0021103:	b9 03 00 00 00       	mov    ecx,0x3
c0021108:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002110a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002110e:	88 5c 24 4d          	mov    BYTE PTR [esp+0x4d],bl
c0021112:	c6 44 24 44 a8       	mov    BYTE PTR [esp+0x44],0xa8
c0021117:	86 e0                	xchg   al,ah
c0021119:	c1 c0 10             	rol    eax,0x10
c002111c:	86 e0                	xchg   al,ah
c002111e:	89 44 24 46          	mov    DWORD PTR [esp+0x46],eax
c0021122:	83 c4 1c             	add    esp,0x1c
c0021125:	53                   	push   ebx
c0021126:	c1 e3 0b             	shl    ebx,0xb
c0021129:	ff 74 24 68          	push   DWORD PTR [esp+0x68]
c002112d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021131:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021135:	53                   	push   ebx
c0021136:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c002113a:	50                   	push   eax
c002113b:	56                   	push   esi
c002113c:	e8 1f fa ff ff       	call   c0020b60 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0021141:	83 c4 20             	add    esp,0x20
c0021144:	85 c0                	test   eax,eax
c0021146:	74 14                	je     c002115c <SATAPI::read(unsigned long long, int, void*)+0xd0>
c0021148:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002114c:	83 ec 0c             	sub    esp,0xc
c002114f:	56                   	push   esi
c0021150:	e8 f7 fc ff ff       	call   c0020e4c <SATAPI::detectMedia()>
c0021155:	83 c4 10             	add    esp,0x10
c0021158:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002115c:	83 c4 3c             	add    esp,0x3c
c002115f:	5b                   	pop    ebx
c0021160:	5e                   	pop    esi
c0021161:	5f                   	pop    edi
c0021162:	5d                   	pop    ebp
c0021163:	c3                   	ret    

c0021164 <AVX::open(int, int, void*)>:
c0021164:	83 ec 0c             	sub    esp,0xc
c0021167:	e8 8c 11 00 00       	call   c00222f8 <avxInit>
c002116c:	b8 00 00 00 00       	mov    eax,0x0
c0021171:	83 c4 0c             	add    esp,0xc
c0021174:	c3                   	ret    
c0021175:	90                   	nop
c0021176:	66 90                	xchg   ax,ax

c0021178 <AVX::close(int, int, void*)>:
c0021178:	83 ec 0c             	sub    esp,0xc
c002117b:	e8 79 11 00 00       	call   c00222f9 <avxClose>
c0021180:	b8 00 00 00 00       	mov    eax,0x0
c0021185:	83 c4 0c             	add    esp,0xc
c0021188:	c3                   	ret    
c0021189:	90                   	nop
c002118a:	66 90                	xchg   ax,ax

c002118c <AVX::available()>:
c002118c:	83 ec 0c             	sub    esp,0xc
c002118f:	e8 5c 11 00 00       	call   c00222f0 <avxDetect>
c0021194:	85 c0                	test   eax,eax
c0021196:	0f 95 c0             	setne  al
c0021199:	83 c4 0c             	add    esp,0xc
c002119c:	c3                   	ret    
c002119d:	90                   	nop
c002119e:	66 90                	xchg   ax,ax

c00211a0 <AVX::save(void*)>:
c00211a0:	83 ec 0c             	sub    esp,0xc
c00211a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211a7:	83 ec 0c             	sub    esp,0xc
c00211aa:	50                   	push   eax
c00211ab:	e8 46 11 00 00       	call   c00222f6 <avxSave>
c00211b0:	83 c4 10             	add    esp,0x10
c00211b3:	90                   	nop
c00211b4:	83 c4 0c             	add    esp,0xc
c00211b7:	c3                   	ret    

c00211b8 <AVX::load(void*)>:
c00211b8:	83 ec 0c             	sub    esp,0xc
c00211bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00211bf:	83 ec 0c             	sub    esp,0xc
c00211c2:	50                   	push   eax
c00211c3:	e8 2f 11 00 00       	call   c00222f7 <avxLoad>
c00211c8:	83 c4 10             	add    esp,0x10
c00211cb:	90                   	nop
c00211cc:	83 c4 0c             	add    esp,0xc
c00211cf:	c3                   	ret    

c00211d0 <AVX::AVX()>:
c00211d0:	83 ec 0c             	sub    esp,0xc
c00211d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211d7:	83 ec 08             	sub    esp,0x8
c00211da:	68 d4 6d 02 c0       	push   0xc0026dd4
c00211df:	50                   	push   eax
c00211e0:	e8 9f d5 fe ff       	call   c000e784 <FPU::FPU(char const*)>
c00211e5:	83 c4 10             	add    esp,0x10
c00211e8:	ba e4 6d 02 c0       	mov    edx,0xc0026de4
c00211ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211f1:	89 10                	mov    DWORD PTR [eax],edx
c00211f3:	90                   	nop
c00211f4:	83 c4 0c             	add    esp,0xc
c00211f7:	c3                   	ret    

c00211f8 <MMX::available()>:
c00211f8:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c00211fd:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0021203:	83 e0 20             	and    eax,0x20
c0021206:	84 c0                	test   al,al
c0021208:	0f 95 c0             	setne  al
c002120b:	c3                   	ret    

c002120c <MMX::open(int, int, void*)>:
c002120c:	83 ec 0c             	sub    esp,0xc
c002120f:	e8 6e 11 00 00       	call   c0022382 <x87Init>
c0021214:	b8 00 00 00 00       	mov    eax,0x0
c0021219:	83 c4 0c             	add    esp,0xc
c002121c:	c3                   	ret    
c002121d:	90                   	nop
c002121e:	66 90                	xchg   ax,ax

c0021220 <MMX::close(int, int, void*)>:
c0021220:	83 ec 0c             	sub    esp,0xc
c0021223:	e8 74 11 00 00       	call   c002239c <x87Close>
c0021228:	b8 00 00 00 00       	mov    eax,0x0
c002122d:	83 c4 0c             	add    esp,0xc
c0021230:	c3                   	ret    
c0021231:	90                   	nop
c0021232:	66 90                	xchg   ax,ax

c0021234 <MMX::save(void*)>:
c0021234:	83 ec 0c             	sub    esp,0xc
c0021237:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002123b:	83 ec 0c             	sub    esp,0xc
c002123e:	50                   	push   eax
c002123f:	e8 2d 11 00 00       	call   c0022371 <x87Save>
c0021244:	83 c4 10             	add    esp,0x10
c0021247:	90                   	nop
c0021248:	83 c4 0c             	add    esp,0xc
c002124b:	c3                   	ret    

c002124c <MMX::load(void*)>:
c002124c:	83 ec 0c             	sub    esp,0xc
c002124f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021253:	83 ec 0c             	sub    esp,0xc
c0021256:	50                   	push   eax
c0021257:	e8 1e 11 00 00       	call   c002237a <x87Load>
c002125c:	83 c4 10             	add    esp,0x10
c002125f:	90                   	nop
c0021260:	83 c4 0c             	add    esp,0xc
c0021263:	c3                   	ret    

c0021264 <MMX::MMX()>:
c0021264:	83 ec 0c             	sub    esp,0xc
c0021267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002126b:	83 ec 08             	sub    esp,0x8
c002126e:	68 14 6e 02 c0       	push   0xc0026e14
c0021273:	50                   	push   eax
c0021274:	e8 0b d5 fe ff       	call   c000e784 <FPU::FPU(char const*)>
c0021279:	83 c4 10             	add    esp,0x10
c002127c:	ba 24 6e 02 c0       	mov    edx,0xc0026e24
c0021281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021285:	89 10                	mov    DWORD PTR [eax],edx
c0021287:	90                   	nop
c0021288:	83 c4 0c             	add    esp,0xc
c002128b:	c3                   	ret    

c002128c <SSE::open(int, int, void*)>:
c002128c:	83 ec 0c             	sub    esp,0xc
c002128f:	e8 a0 10 00 00       	call   c0022334 <sseInit>
c0021294:	b8 00 00 00 00       	mov    eax,0x0
c0021299:	83 c4 0c             	add    esp,0xc
c002129c:	c3                   	ret    
c002129d:	90                   	nop
c002129e:	66 90                	xchg   ax,ax

c00212a0 <SSE::close(int, int, void*)>:
c00212a0:	83 ec 0c             	sub    esp,0xc
c00212a3:	e8 9c 10 00 00       	call   c0022344 <sseClose>
c00212a8:	b8 00 00 00 00       	mov    eax,0x0
c00212ad:	83 c4 0c             	add    esp,0xc
c00212b0:	c3                   	ret    
c00212b1:	90                   	nop
c00212b2:	66 90                	xchg   ax,ax

c00212b4 <SSE::available()>:
c00212b4:	83 ec 1c             	sub    esp,0x1c
c00212b7:	e8 54 10 00 00       	call   c0022310 <absolutelyNoChanceInHell>
c00212bc:	85 c0                	test   eax,eax
c00212be:	0f 95 c0             	setne  al
c00212c1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00212c5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00212c9:	83 c4 1c             	add    esp,0x1c
c00212cc:	c3                   	ret    
c00212cd:	90                   	nop
c00212ce:	66 90                	xchg   ax,ax

c00212d0 <SSE::save(void*)>:
c00212d0:	83 ec 0c             	sub    esp,0xc
c00212d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212d7:	83 ec 0c             	sub    esp,0xc
c00212da:	50                   	push   eax
c00212db:	e8 48 10 00 00       	call   c0022328 <sseSave>
c00212e0:	83 c4 10             	add    esp,0x10
c00212e3:	90                   	nop
c00212e4:	83 c4 0c             	add    esp,0xc
c00212e7:	c3                   	ret    

c00212e8 <SSE::load(void*)>:
c00212e8:	83 ec 0c             	sub    esp,0xc
c00212eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00212ef:	83 ec 0c             	sub    esp,0xc
c00212f2:	50                   	push   eax
c00212f3:	e8 36 10 00 00       	call   c002232e <sseLoad>
c00212f8:	83 c4 10             	add    esp,0x10
c00212fb:	90                   	nop
c00212fc:	83 c4 0c             	add    esp,0xc
c00212ff:	c3                   	ret    

c0021300 <SSE::SSE()>:
c0021300:	83 ec 0c             	sub    esp,0xc
c0021303:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021307:	83 ec 08             	sub    esp,0x8
c002130a:	68 54 6e 02 c0       	push   0xc0026e54
c002130f:	50                   	push   eax
c0021310:	e8 6f d4 fe ff       	call   c000e784 <FPU::FPU(char const*)>
c0021315:	83 c4 10             	add    esp,0x10
c0021318:	ba 64 6e 02 c0       	mov    edx,0xc0026e64
c002131d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021321:	89 10                	mov    DWORD PTR [eax],edx
c0021323:	90                   	nop
c0021324:	83 c4 0c             	add    esp,0xc
c0021327:	c3                   	ret    

c0021328 <x87::open(int, int, void*)>:
c0021328:	83 ec 0c             	sub    esp,0xc
c002132b:	83 ec 0c             	sub    esp,0xc
c002132e:	68 94 6e 02 c0       	push   0xc0026e94
c0021333:	e8 c3 b9 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021338:	83 c4 10             	add    esp,0x10
c002133b:	e8 42 10 00 00       	call   c0022382 <x87Init>
c0021340:	b8 00 00 00 00       	mov    eax,0x0
c0021345:	83 c4 0c             	add    esp,0xc
c0021348:	c3                   	ret    
c0021349:	90                   	nop
c002134a:	66 90                	xchg   ax,ax

c002134c <x87::close(int, int, void*)>:
c002134c:	83 ec 0c             	sub    esp,0xc
c002134f:	e8 48 10 00 00       	call   c002239c <x87Close>
c0021354:	b8 00 00 00 00       	mov    eax,0x0
c0021359:	83 c4 0c             	add    esp,0xc
c002135c:	c3                   	ret    
c002135d:	90                   	nop
c002135e:	66 90                	xchg   ax,ax

c0021360 <x87::available()>:
c0021360:	83 ec 0c             	sub    esp,0xc
c0021363:	e8 ee 0f 00 00       	call   c0022356 <x87Detect>
c0021368:	85 c0                	test   eax,eax
c002136a:	0f 95 c0             	setne  al
c002136d:	83 c4 0c             	add    esp,0xc
c0021370:	c3                   	ret    
c0021371:	90                   	nop
c0021372:	66 90                	xchg   ax,ax

c0021374 <x87::save(void*)>:
c0021374:	83 ec 0c             	sub    esp,0xc
c0021377:	83 ec 0c             	sub    esp,0xc
c002137a:	68 a3 6e 02 c0       	push   0xc0026ea3
c002137f:	e8 77 b9 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021384:	83 c4 10             	add    esp,0x10
c0021387:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002138b:	83 ec 0c             	sub    esp,0xc
c002138e:	50                   	push   eax
c002138f:	e8 dd 0f 00 00       	call   c0022371 <x87Save>
c0021394:	83 c4 10             	add    esp,0x10
c0021397:	83 ec 0c             	sub    esp,0xc
c002139a:	68 b4 6e 02 c0       	push   0xc0026eb4
c002139f:	e8 57 b9 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00213a4:	83 c4 10             	add    esp,0x10
c00213a7:	90                   	nop
c00213a8:	83 c4 0c             	add    esp,0xc
c00213ab:	c3                   	ret    

c00213ac <x87::load(void*)>:
c00213ac:	83 ec 0c             	sub    esp,0xc
c00213af:	83 ec 0c             	sub    esp,0xc
c00213b2:	68 c5 6e 02 c0       	push   0xc0026ec5
c00213b7:	e8 3f b9 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00213bc:	83 c4 10             	add    esp,0x10
c00213bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00213c3:	83 ec 0c             	sub    esp,0xc
c00213c6:	50                   	push   eax
c00213c7:	e8 ae 0f 00 00       	call   c002237a <x87Load>
c00213cc:	83 c4 10             	add    esp,0x10
c00213cf:	83 ec 0c             	sub    esp,0xc
c00213d2:	68 d6 6e 02 c0       	push   0xc0026ed6
c00213d7:	e8 1f b9 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c00213dc:	83 c4 10             	add    esp,0x10
c00213df:	90                   	nop
c00213e0:	83 c4 0c             	add    esp,0xc
c00213e3:	c3                   	ret    

c00213e4 <x87::x87()>:
c00213e4:	83 ec 0c             	sub    esp,0xc
c00213e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213eb:	83 ec 08             	sub    esp,0x8
c00213ee:	68 e7 6e 02 c0       	push   0xc0026ee7
c00213f3:	50                   	push   eax
c00213f4:	e8 8b d3 fe ff       	call   c000e784 <FPU::FPU(char const*)>
c00213f9:	83 c4 10             	add    esp,0x10
c00213fc:	ba f8 6e 02 c0       	mov    edx,0xc0026ef8
c0021401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021405:	89 10                	mov    DWORD PTR [eax],edx
c0021407:	90                   	nop
c0021408:	83 c4 0c             	add    esp,0xc
c002140b:	c3                   	ret    

c002140c <APIC::disable()>:
c002140c:	90                   	nop
c002140d:	c3                   	ret    

c002140e <APIC::close(int, int, void*)>:
c002140e:	55                   	push   ebp
c002140f:	89 e5                	mov    ebp,esp
c0021411:	83 ec 08             	sub    esp,0x8
c0021414:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021417:	8b 00                	mov    eax,DWORD PTR [eax]
c0021419:	83 c0 3c             	add    eax,0x3c
c002141c:	8b 00                	mov    eax,DWORD PTR [eax]
c002141e:	83 ec 0c             	sub    esp,0xc
c0021421:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021424:	ff d0                	call   eax
c0021426:	83 c4 10             	add    esp,0x10
c0021429:	b8 00 00 00 00       	mov    eax,0x0
c002142e:	c9                   	leave  
c002142f:	c3                   	ret    

c0021430 <IOAPIC::close(int, int, void*)>:
c0021430:	b8 00 00 00 00       	mov    eax,0x0
c0021435:	c3                   	ret    

c0021436 <APIC::io_wait()>:
c0021436:	eb 00                	jmp    c0021438 <APIC::io_wait()+0x2>
c0021438:	eb 00                	jmp    c002143a <APIC::io_wait()+0x4>
c002143a:	90                   	nop
c002143b:	c3                   	ret    

c002143c <APIC::getBase()>:
c002143c:	55                   	push   ebp
c002143d:	89 e5                	mov    ebp,esp
c002143f:	83 ec 18             	sub    esp,0x18
c0021442:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0021447:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002144d:	83 e0 08             	and    eax,0x8
c0021450:	84 c0                	test   al,al
c0021452:	75 07                	jne    c002145b <APIC::getBase()+0x1f>
c0021454:	b8 00 00 00 00       	mov    eax,0x0
c0021459:	eb 21                	jmp    c002147c <APIC::getBase()+0x40>
c002145b:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0021460:	83 ec 08             	sub    esp,0x8
c0021463:	6a 1b                	push   0x1b
c0021465:	50                   	push   eax
c0021466:	e8 bf 7a fe ff       	call   c0008f2a <Computer::rdmsr(unsigned int)>
c002146b:	83 c4 10             	add    esp,0x10
c002146e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0021471:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0021474:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021477:	25 00 f0 ff ff       	and    eax,0xfffff000
c002147c:	c9                   	leave  
c002147d:	c3                   	ret    

c002147e <APIC::eoi(unsigned char)>:
c002147e:	55                   	push   ebp
c002147f:	89 e5                	mov    ebp,esp
c0021481:	83 ec 28             	sub    esp,0x28
c0021484:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021487:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c002148a:	83 ec 0c             	sub    esp,0xc
c002148d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021490:	e8 a7 ff ff ff       	call   c002143c <APIC::getBase()>
c0021495:	83 c4 10             	add    esp,0x10
c0021498:	05 b0 00 00 00       	add    eax,0xb0
c002149d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00214a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00214a3:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00214a9:	90                   	nop
c00214aa:	c9                   	leave  
c00214ab:	c3                   	ret    

c00214ac <APIC::open(int, int, void*)>:
c00214ac:	55                   	push   ebp
c00214ad:	89 e5                	mov    ebp,esp
c00214af:	57                   	push   edi
c00214b0:	56                   	push   esi
c00214b1:	53                   	push   ebx
c00214b2:	83 ec 2c             	sub    esp,0x2c
c00214b5:	83 ec 0c             	sub    esp,0xc
c00214b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00214bb:	e8 7c ff ff ff       	call   c002143c <APIC::getBase()>
c00214c0:	83 c4 10             	add    esp,0x10
c00214c3:	89 c2                	mov    edx,eax
c00214c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00214c8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00214ce:	0f b6 f8             	movzx  edi,al
c00214d1:	89 d0                	mov    eax,edx
c00214d3:	ba 00 00 00 00       	mov    edx,0x0
c00214d8:	89 c1                	mov    ecx,eax
c00214da:	80 e5 ff             	and    ch,0xff
c00214dd:	89 cb                	mov    ebx,ecx
c00214df:	0f b6 f2             	movzx  esi,dl
c00214e2:	89 d8                	mov    eax,ebx
c00214e4:	89 f2                	mov    edx,esi
c00214e6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00214e9:	8d 5f 08             	lea    ebx,[edi+0x8]
c00214ec:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00214f0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00214f4:	83 e0 00             	and    eax,0x0
c00214f7:	09 d0                	or     eax,edx
c00214f9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00214fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021500:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0021506:	8d 50 01             	lea    edx,[eax+0x1]
c0021509:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002150c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021512:	0f b6 d0             	movzx  edx,al
c0021515:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021518:	83 c2 08             	add    edx,0x8
c002151b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002151f:	0f b6 c9             	movzx  ecx,cl
c0021522:	81 c9 00 00 01 00    	or     ecx,0x10000
c0021528:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002152c:	83 ec 0c             	sub    esp,0xc
c002152f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021532:	e8 05 ff ff ff       	call   c002143c <APIC::getBase()>
c0021537:	83 c4 10             	add    esp,0x10
c002153a:	05 f0 00 00 00       	add    eax,0xf0
c002153f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0021542:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021545:	8b 00                	mov    eax,DWORD PTR [eax]
c0021547:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002154a:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0021551:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0021558:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002155b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002155e:	89 10                	mov    DWORD PTR [eax],edx
c0021560:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0021567:	a1 70 87 02 c0       	mov    eax,ds:0xc0028770
c002156c:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c002156f:	7d 7c                	jge    c00215ed <APIC::open(int, int, void*)+0x141>
c0021571:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021574:	8b 04 85 80 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7880]
c002157b:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c002157e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021581:	8b 04 85 80 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7880]
c0021588:	c1 e8 08             	shr    eax,0x8
c002158b:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c002158f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0021592:	8b 04 85 80 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7880]
c0021599:	c1 e8 18             	shr    eax,0x18
c002159c:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c002159f:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00215a3:	75 40                	jne    c00215e5 <APIC::open(int, int, void*)+0x139>
c00215a5:	83 ec 0c             	sub    esp,0xc
c00215a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00215ab:	e8 8c fe ff ff       	call   c002143c <APIC::getBase()>
c00215b0:	83 c4 10             	add    esp,0x10
c00215b3:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00215b7:	75 07                	jne    c00215c0 <APIC::open(int, int, void*)+0x114>
c00215b9:	ba 60 03 00 00       	mov    edx,0x360
c00215be:	eb 05                	jmp    c00215c5 <APIC::open(int, int, void*)+0x119>
c00215c0:	ba 50 03 00 00       	mov    edx,0x350
c00215c5:	01 d0                	add    eax,edx
c00215c7:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00215ca:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00215cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00215cf:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00215d2:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00215d9:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00215dd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00215e0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00215e3:	89 10                	mov    DWORD PTR [eax],edx
c00215e5:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00215e8:	e9 7a ff ff ff       	jmp    c0021567 <APIC::open(int, int, void*)+0xbb>
c00215ed:	b8 00 00 00 00       	mov    eax,0x0
c00215f2:	8d 65 f4             	lea    esp,[ebp-0xc]
c00215f5:	5b                   	pop    ebx
c00215f6:	5e                   	pop    esi
c00215f7:	5f                   	pop    edi
c00215f8:	5d                   	pop    ebp
c00215f9:	c3                   	ret    

c00215fa <IOAPIC::IOAPIC()>:
c00215fa:	83 ec 0c             	sub    esp,0xc
c00215fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021601:	83 ec 08             	sub    esp,0x8
c0021604:	68 28 6f 02 c0       	push   0xc0026f28
c0021609:	50                   	push   eax
c002160a:	e8 63 ce fe ff       	call   c000e472 <Device::Device(char const*)>
c002160f:	83 c4 10             	add    esp,0x10
c0021612:	ba 50 70 02 c0       	mov    edx,0xc0027050
c0021617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002161b:	89 10                	mov    DWORD PTR [eax],edx
c002161d:	90                   	nop
c002161e:	83 c4 0c             	add    esp,0xc
c0021621:	c3                   	ret    

c0021622 <APIC::APIC()>:
c0021622:	53                   	push   ebx
c0021623:	83 ec 18             	sub    esp,0x18
c0021626:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002162a:	83 ec 08             	sub    esp,0x8
c002162d:	68 30 6f 02 c0       	push   0xc0026f30
c0021632:	50                   	push   eax
c0021633:	e8 4e d5 fe ff       	call   c000eb86 <InterruptController::InterruptController(char const*)>
c0021638:	83 c4 10             	add    esp,0x10
c002163b:	ba 08 70 02 c0       	mov    edx,0xc0027008
c0021640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021644:	89 10                	mov    DWORD PTR [eax],edx
c0021646:	a0 a0 9e 02 c0       	mov    al,ds:0xc0029ea0
c002164b:	83 f0 01             	xor    eax,0x1
c002164e:	84 c0                	test   al,al
c0021650:	0f 84 a1 00 00 00    	je     c00216f7 <APIC::APIC()+0xd5>
c0021656:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c002165b:	a0 20 88 02 c0       	mov    al,ds:0xc0028820
c0021660:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0021664:	0f 83 86 00 00 00    	jae    c00216f0 <APIC::APIC()+0xce>
c002166a:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0021672:	83 ec 0c             	sub    esp,0xc
c0021675:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021679:	e8 91 83 fe ff       	call   c0009a0f <malloc>
c002167e:	83 c4 10             	add    esp,0x10
c0021681:	89 c3                	mov    ebx,eax
c0021683:	83 ec 0c             	sub    esp,0xc
c0021686:	53                   	push   ebx
c0021687:	e8 6e ff ff ff       	call   c00215fa <IOAPIC::IOAPIC()>
c002168c:	83 c4 10             	add    esp,0x10
c002168f:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0021693:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0021698:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002169c:	89 14 85 80 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6180],edx
c00216a3:	a1 60 9e 02 c0       	mov    eax,ds:0xc0029e60
c00216a8:	40                   	inc    eax
c00216a9:	a3 60 9e 02 c0       	mov    ds:0xc0029e60,eax
c00216ae:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c00216b3:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00216b9:	83 ec 08             	sub    esp,0x8
c00216bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00216c0:	50                   	push   eax
c00216c1:	e8 a8 cb fe ff       	call   c000e26e <Device::addChild(Device*)>
c00216c6:	83 c4 10             	add    esp,0x10
c00216c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00216cf:	83 c0 08             	add    eax,0x8
c00216d2:	8b 00                	mov    eax,DWORD PTR [eax]
c00216d4:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00216d9:	6a 00                	push   0x0
c00216db:	6a 00                	push   0x0
c00216dd:	52                   	push   edx
c00216de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216e2:	ff d0                	call   eax
c00216e4:	83 c4 10             	add    esp,0x10
c00216e7:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c00216eb:	e9 6b ff ff ff       	jmp    c002165b <APIC::APIC()+0x39>
c00216f0:	c6 05 a0 9e 02 c0 01 	mov    BYTE PTR ds:0xc0029ea0,0x1
c00216f7:	90                   	nop
c00216f8:	83 c4 18             	add    esp,0x18
c00216fb:	5b                   	pop    ebx
c00216fc:	c3                   	ret    
c00216fd:	90                   	nop

c00216fe <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00216fe:	55                   	push   ebp
c00216ff:	89 e5                	mov    ebp,esp
c0021701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021704:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c002170a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002170d:	72 1d                	jb     c002172c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002170f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021712:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0021718:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002171b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0021721:	01 d0                	add    eax,edx
c0021723:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0021726:	73 04                	jae    c002172c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0021728:	b0 01                	mov    al,0x1
c002172a:	eb 02                	jmp    c002172e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002172c:	b0 00                	mov    al,0x0
c002172e:	5d                   	pop    ebp
c002172f:	c3                   	ret    

c0021730 <IOAPIC::read(int)>:
c0021730:	55                   	push   ebp
c0021731:	89 e5                	mov    ebp,esp
c0021733:	83 ec 10             	sub    esp,0x10
c0021736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021739:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002173f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021742:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021745:	0f b6 d0             	movzx  edx,al
c0021748:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002174b:	89 10                	mov    DWORD PTR [eax],edx
c002174d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021750:	83 c0 10             	add    eax,0x10
c0021753:	8b 00                	mov    eax,DWORD PTR [eax]
c0021755:	c9                   	leave  
c0021756:	c3                   	ret    
c0021757:	90                   	nop

c0021758 <IOAPIC::open(int, int, void*)>:
c0021758:	55                   	push   ebp
c0021759:	89 e5                	mov    ebp,esp
c002175b:	57                   	push   edi
c002175c:	56                   	push   esi
c002175d:	53                   	push   ebx
c002175e:	83 ec 0c             	sub    esp,0xc
c0021761:	83 ec 0c             	sub    esp,0xc
c0021764:	68 5b 6f 02 c0       	push   0xc0026f5b
c0021769:	e8 8d b5 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c002176e:	83 c4 10             	add    esp,0x10
c0021771:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021774:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021777:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002177d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021780:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0021786:	8b 14 85 60 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd77a0]
c002178d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021790:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0021796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021799:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002179f:	8b 14 85 e0 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7720]
c00217a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217a9:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00217af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217b2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00217b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217bb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00217c1:	0f b6 f8             	movzx  edi,al
c00217c4:	89 d0                	mov    eax,edx
c00217c6:	ba 00 00 00 00       	mov    edx,0x0
c00217cb:	89 c1                	mov    ecx,eax
c00217cd:	80 e5 ff             	and    ch,0xff
c00217d0:	89 cb                	mov    ebx,ecx
c00217d2:	0f b6 f2             	movzx  esi,dl
c00217d5:	89 d8                	mov    eax,ebx
c00217d7:	89 f2                	mov    edx,esi
c00217d9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00217dc:	8d 5f 08             	lea    ebx,[edi+0x8]
c00217df:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00217e3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00217e7:	83 e0 00             	and    eax,0x0
c00217ea:	09 d0                	or     eax,edx
c00217ec:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00217f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00217f3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00217f9:	8d 50 01             	lea    edx,[eax+0x1]
c00217fc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00217ff:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0021805:	0f b6 d0             	movzx  edx,al
c0021808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002180b:	83 c2 08             	add    edx,0x8
c002180e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0021812:	0f b6 c9             	movzx  ecx,cl
c0021815:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002181b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002181f:	83 ec 08             	sub    esp,0x8
c0021822:	6a 01                	push   0x1
c0021824:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021827:	e8 04 ff ff ff       	call   c0021730 <IOAPIC::read(int)>
c002182c:	83 c4 10             	add    esp,0x10
c002182f:	c1 f8 10             	sar    eax,0x10
c0021832:	0f b6 c0             	movzx  eax,al
c0021835:	8d 50 01             	lea    edx,[eax+0x1]
c0021838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002183b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0021841:	b8 00 00 00 00       	mov    eax,0x0
c0021846:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021849:	5b                   	pop    ebx
c002184a:	5e                   	pop    esi
c002184b:	5f                   	pop    edi
c002184c:	5d                   	pop    ebp
c002184d:	c3                   	ret    

c002184e <IOAPIC::write(int, int)>:
c002184e:	55                   	push   ebp
c002184f:	89 e5                	mov    ebp,esp
c0021851:	83 ec 10             	sub    esp,0x10
c0021854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021857:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002185d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0021860:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021863:	0f b6 d0             	movzx  edx,al
c0021866:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021869:	89 10                	mov    DWORD PTR [eax],edx
c002186b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002186e:	8d 50 10             	lea    edx,[eax+0x10]
c0021871:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021874:	89 02                	mov    DWORD PTR [edx],eax
c0021876:	90                   	nop
c0021877:	c9                   	leave  
c0021878:	c3                   	ret    
c0021879:	90                   	nop

c002187a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002187a:	55                   	push   ebp
c002187b:	89 e5                	mov    ebp,esp
c002187d:	53                   	push   ebx
c002187e:	83 ec 2c             	sub    esp,0x2c
c0021881:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021884:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0021887:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002188a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002188d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0021890:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0021893:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0021896:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021899:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002189c:	88 d8                	mov    al,bl
c002189e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00218a1:	88 c8                	mov    al,cl
c00218a3:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00218a6:	88 d0                	mov    al,dl
c00218a8:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00218ab:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00218af:	83 c0 08             	add    eax,0x8
c00218b2:	01 c0                	add    eax,eax
c00218b4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00218b7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00218bb:	83 c0 08             	add    eax,0x8
c00218be:	01 c0                	add    eax,eax
c00218c0:	40                   	inc    eax
c00218c1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00218c4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00218c7:	50                   	push   eax
c00218c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218cb:	e8 60 fe ff ff       	call   c0021730 <IOAPIC::read(int)>
c00218d0:	83 c4 08             	add    esp,0x8
c00218d3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00218d6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00218dd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00218e0:	c1 e0 18             	shl    eax,0x18
c00218e3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00218e6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00218e9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00218ec:	52                   	push   edx
c00218ed:	50                   	push   eax
c00218ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00218f1:	e8 58 ff ff ff       	call   c002184e <IOAPIC::write(int, int)>
c00218f6:	83 c4 0c             	add    esp,0xc
c00218f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00218fc:	50                   	push   eax
c00218fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021900:	e8 2b fe ff ff       	call   c0021730 <IOAPIC::read(int)>
c0021905:	83 c4 08             	add    esp,0x8
c0021908:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c002190b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0021912:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0021919:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0021920:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0021924:	74 09                	je     c002192f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0021926:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c002192d:	eb 07                	jmp    c0021936 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002192f:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0021936:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002193a:	74 09                	je     c0021945 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c002193c:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0021943:	eb 07                	jmp    c002194c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0021945:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c002194c:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0021953:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0021957:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002195a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c002195d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021960:	52                   	push   edx
c0021961:	50                   	push   eax
c0021962:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021965:	e8 e4 fe ff ff       	call   c002184e <IOAPIC::write(int, int)>
c002196a:	83 c4 0c             	add    esp,0xc
c002196d:	90                   	nop
c002196e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0021971:	c9                   	leave  
c0021972:	c3                   	ret    
c0021973:	90                   	nop

c0021974 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0021974:	55                   	push   ebp
c0021975:	89 e5                	mov    ebp,esp
c0021977:	57                   	push   edi
c0021978:	56                   	push   esi
c0021979:	53                   	push   ebx
c002197a:	83 ec 2c             	sub    esp,0x2c
c002197d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0021980:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0021983:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0021987:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002198b:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002198f:	74 5a                	je     c00219eb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0021991:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0021995:	7f 44                	jg     c00219db <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0021997:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002199a:	05 00 76 02 c0       	add    eax,0xc0027600
c002199f:	8a 00                	mov    al,BYTE PTR [eax]
c00219a1:	0f b6 c0             	movzx  eax,al
c00219a4:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00219a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219aa:	66 8b 84 00 00 88 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7800]
c00219b2:	0f b7 c0             	movzx  eax,ax
c00219b5:	83 e0 02             	and    eax,0x2
c00219b8:	85 c0                	test   eax,eax
c00219ba:	74 04                	je     c00219c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00219bc:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00219c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00219c3:	66 8b 84 00 00 88 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd7800]
c00219cb:	0f b7 c0             	movzx  eax,ax
c00219ce:	83 e0 08             	and    eax,0x8
c00219d1:	85 c0                	test   eax,eax
c00219d3:	74 16                	je     c00219eb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00219d5:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00219d9:	eb 10                	jmp    c00219eb <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00219db:	83 ec 0c             	sub    esp,0xc
c00219de:	68 6c 6f 02 c0       	push   0xc0026f6c
c00219e3:	e8 bb 2f ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c00219e8:	83 c4 10             	add    esp,0x10
c00219eb:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00219ef:	a1 60 9e 02 c0       	mov    eax,ds:0xc0029e60
c00219f4:	83 ec 08             	sub    esp,0x8
c00219f7:	50                   	push   eax
c00219f8:	68 a4 6f 02 c0       	push   0xc0026fa4
c00219fd:	e8 f9 b2 fe ff       	call   c000ccfb <Dbg::kprintf(char const*, ...)>
c0021a02:	83 c4 10             	add    esp,0x10
c0021a05:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0021a0c:	a1 60 9e 02 c0       	mov    eax,ds:0xc0029e60
c0021a11:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0021a14:	7d 67                	jge    c0021a7d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021a16:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021a19:	8b 04 85 80 9e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6180]
c0021a20:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021a23:	83 ec 08             	sub    esp,0x8
c0021a26:	52                   	push   edx
c0021a27:	50                   	push   eax
c0021a28:	e8 d1 fc ff ff       	call   c00216fe <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0021a2d:	83 c4 10             	add    esp,0x10
c0021a30:	84 c0                	test   al,al
c0021a32:	74 44                	je     c0021a78 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0021a34:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0021a37:	8b 1c 85 80 9e 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd6180]
c0021a3e:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0021a42:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0021a45:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0021a49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021a4c:	83 c0 20             	add    eax,0x20
c0021a4f:	0f b6 f0             	movzx  esi,al
c0021a52:	b8 00 00 00 00       	mov    eax,0x0
c0021a57:	99                   	cdq    
c0021a58:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0021a5b:	0f b6 c9             	movzx  ecx,cl
c0021a5e:	83 ec 04             	sub    esp,0x4
c0021a61:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0021a64:	57                   	push   edi
c0021a65:	56                   	push   esi
c0021a66:	52                   	push   edx
c0021a67:	50                   	push   eax
c0021a68:	51                   	push   ecx
c0021a69:	53                   	push   ebx
c0021a6a:	e8 0b fe ff ff       	call   c002187a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0021a6f:	83 c4 20             	add    esp,0x20
c0021a72:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0021a76:	eb 05                	jmp    c0021a7d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0021a78:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0021a7b:	eb 8f                	jmp    c0021a0c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0021a7d:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0021a80:	83 f0 01             	xor    eax,0x1
c0021a83:	84 c0                	test   al,al
c0021a85:	74 10                	je     c0021a97 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0021a87:	83 ec 0c             	sub    esp,0xc
c0021a8a:	68 bb 6f 02 c0       	push   0xc0026fbb
c0021a8f:	e8 0f 2f ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0021a94:	83 c4 10             	add    esp,0x10
c0021a97:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0021a9b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0021aa2:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0021aa6:	7f 65                	jg     c0021b0d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0021aa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021aab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021aae:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021ab5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021ab8:	01 ca                	add    edx,ecx
c0021aba:	83 c2 54             	add    edx,0x54
c0021abd:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0021ac1:	85 c0                	test   eax,eax
c0021ac3:	75 43                	jne    c0021b08 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0021ac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ac8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021acb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021ad2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021ad5:	01 ca                	add    edx,ecx
c0021ad7:	8d 4a 54             	lea    ecx,[edx+0x54]
c0021ada:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021add:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021ae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021ae4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0021ae7:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0021aee:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021af1:	01 ca                	add    edx,ecx
c0021af3:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0021af9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0021afc:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0021b00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021b03:	83 e8 20             	sub    eax,0x20
c0021b06:	eb 1a                	jmp    c0021b22 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0021b08:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0021b0b:	eb 95                	jmp    c0021aa2 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0021b0d:	83 ec 0c             	sub    esp,0xc
c0021b10:	68 c8 6f 02 c0       	push   0xc0026fc8
c0021b15:	e8 89 2e ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0021b1a:	83 c4 10             	add    esp,0x10
c0021b1d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0021b22:	8d 65 f4             	lea    esp,[ebp-0xc]
c0021b25:	5b                   	pop    ebx
c0021b26:	5e                   	pop    esi
c0021b27:	5f                   	pop    edi
c0021b28:	5d                   	pop    ebp
c0021b29:	c3                   	ret    

c0021b2a <PIC::disable()>:
c0021b2a:	55                   	push   ebp
c0021b2b:	89 e5                	mov    ebp,esp
c0021b2d:	83 ec 10             	sub    esp,0x10
c0021b30:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0021b36:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0021b3a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021b3d:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021b41:	ee                   	out    dx,al
c0021b42:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0021b48:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0021b4c:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021b4f:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0021b53:	ee                   	out    dx,al
c0021b54:	90                   	nop
c0021b55:	c9                   	leave  
c0021b56:	c3                   	ret    
c0021b57:	90                   	nop

c0021b58 <PIC::close(int, int, void*)>:
c0021b58:	55                   	push   ebp
c0021b59:	89 e5                	mov    ebp,esp
c0021b5b:	83 ec 08             	sub    esp,0x8
c0021b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0021b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b63:	83 c0 3c             	add    eax,0x3c
c0021b66:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b68:	83 ec 0c             	sub    esp,0xc
c0021b6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021b6e:	ff d0                	call   eax
c0021b70:	83 c4 10             	add    esp,0x10
c0021b73:	b8 00 00 00 00       	mov    eax,0x0
c0021b78:	c9                   	leave  
c0021b79:	c3                   	ret    

c0021b7a <PIC::PIC()>:
c0021b7a:	83 ec 0c             	sub    esp,0xc
c0021b7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b81:	83 ec 08             	sub    esp,0x8
c0021b84:	68 74 70 02 c0       	push   0xc0027074
c0021b89:	50                   	push   eax
c0021b8a:	e8 f7 cf fe ff       	call   c000eb86 <InterruptController::InterruptController(char const*)>
c0021b8f:	83 c4 10             	add    esp,0x10
c0021b92:	ba a0 70 02 c0       	mov    edx,0xc00270a0
c0021b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b9b:	89 10                	mov    DWORD PTR [eax],edx
c0021b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021ba7:	0f b6 d0             	movzx  edx,al
c0021baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bae:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0021bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bbf:	0f b6 d0             	movzx  edx,al
c0021bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bc6:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bcf:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bd5:	8d 50 01             	lea    edx,[eax+0x1]
c0021bd8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021bdc:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021be2:	0f b6 d0             	movzx  edx,al
c0021be5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021be9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021bed:	83 e1 3f             	and    ecx,0x3f
c0021bf0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021bf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021bfe:	0f b6 d0             	movzx  edx,al
c0021c01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c05:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0021c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c16:	0f b6 d0             	movzx  edx,al
c0021c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0021c22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0021c2c:	8d 50 01             	lea    edx,[eax+0x1]
c0021c2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021c33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0021c39:	0f b6 d0             	movzx  edx,al
c0021c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0021c44:	83 e1 3f             	and    ecx,0x3f
c0021c47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021c4b:	90                   	nop
c0021c4c:	83 c4 0c             	add    esp,0xc
c0021c4f:	c3                   	ret    

c0021c50 <PIC::ioWait()>:
c0021c50:	eb 00                	jmp    c0021c52 <PIC::ioWait()+0x2>
c0021c52:	eb 00                	jmp    c0021c54 <PIC::ioWait()+0x4>
c0021c54:	90                   	nop
c0021c55:	c3                   	ret    

c0021c56 <PIC::getIRQReg(int)>:
c0021c56:	55                   	push   ebp
c0021c57:	89 e5                	mov    ebp,esp
c0021c59:	83 ec 10             	sub    esp,0x10
c0021c5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c5f:	0f b6 c0             	movzx  eax,al
c0021c62:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021c68:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0021c6b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021c6e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021c72:	ee                   	out    dx,al
c0021c73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021c76:	0f b6 c0             	movzx  eax,al
c0021c79:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021c7f:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0021c82:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021c85:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021c89:	ee                   	out    dx,al
c0021c8a:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0021c90:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0021c94:	89 c2                	mov    edx,eax
c0021c96:	ec                   	in     al,dx
c0021c97:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0021c9a:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021c9d:	0f b6 c0             	movzx  eax,al
c0021ca0:	c1 e0 08             	shl    eax,0x8
c0021ca3:	89 c1                	mov    ecx,eax
c0021ca5:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0021cab:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0021caf:	89 c2                	mov    edx,eax
c0021cb1:	ec                   	in     al,dx
c0021cb2:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0021cb5:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0021cb8:	0f b6 c0             	movzx  eax,al
c0021cbb:	09 c8                	or     eax,ecx
c0021cbd:	c9                   	leave  
c0021cbe:	c3                   	ret    
c0021cbf:	90                   	nop

c0021cc0 <PIC::eoi(unsigned char)>:
c0021cc0:	55                   	push   ebp
c0021cc1:	89 e5                	mov    ebp,esp
c0021cc3:	83 ec 14             	sub    esp,0x14
c0021cc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0021cc9:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0021ccc:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021cd0:	75 1e                	jne    c0021cf0 <PIC::eoi(unsigned char)+0x30>
c0021cd2:	6a 0b                	push   0xb
c0021cd4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cd7:	e8 7a ff ff ff       	call   c0021c56 <PIC::getIRQReg(int)>
c0021cdc:	83 c4 08             	add    esp,0x8
c0021cdf:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0021ce3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0021ce7:	25 80 00 00 00       	and    eax,0x80
c0021cec:	85 c0                	test   eax,eax
c0021cee:	74 5f                	je     c0021d4f <PIC::eoi(unsigned char)+0x8f>
c0021cf0:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0021cf4:	75 2d                	jne    c0021d23 <PIC::eoi(unsigned char)+0x63>
c0021cf6:	6a 0b                	push   0xb
c0021cf8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021cfb:	e8 56 ff ff ff       	call   c0021c56 <PIC::getIRQReg(int)>
c0021d00:	83 c4 08             	add    esp,0x8
c0021d03:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0021d07:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0021d0a:	66 85 c0             	test   ax,ax
c0021d0d:	78 14                	js     c0021d23 <PIC::eoi(unsigned char)+0x63>
c0021d0f:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0021d15:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0021d19:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0021d1c:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0021d20:	ee                   	out    dx,al
c0021d21:	eb 2d                	jmp    c0021d50 <PIC::eoi(unsigned char)+0x90>
c0021d23:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0021d27:	76 12                	jbe    c0021d3b <PIC::eoi(unsigned char)+0x7b>
c0021d29:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0021d2f:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0021d33:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021d36:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021d3a:	ee                   	out    dx,al
c0021d3b:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0021d41:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0021d45:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021d48:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021d4c:	ee                   	out    dx,al
c0021d4d:	eb 01                	jmp    c0021d50 <PIC::eoi(unsigned char)+0x90>
c0021d4f:	90                   	nop
c0021d50:	c9                   	leave  
c0021d51:	c3                   	ret    

c0021d52 <PIC::remap()>:
c0021d52:	55                   	push   ebp
c0021d53:	89 e5                	mov    ebp,esp
c0021d55:	83 ec 48             	sub    esp,0x48
c0021d58:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0021d5f:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0021d66:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0021d6c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0021d6f:	89 c2                	mov    edx,eax
c0021d71:	ec                   	in     al,dx
c0021d72:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0021d75:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0021d78:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0021d7b:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0021d81:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0021d84:	89 c2                	mov    edx,eax
c0021d86:	ec                   	in     al,dx
c0021d87:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0021d8a:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0021d8d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0021d90:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0021d96:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0021d9a:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0021d9d:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0021da0:	ee                   	out    dx,al
c0021da1:	83 ec 0c             	sub    esp,0xc
c0021da4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021da7:	e8 a4 fe ff ff       	call   c0021c50 <PIC::ioWait()>
c0021dac:	83 c4 10             	add    esp,0x10
c0021daf:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0021db5:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0021db9:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0021dbc:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0021dbf:	ee                   	out    dx,al
c0021dc0:	83 ec 0c             	sub    esp,0xc
c0021dc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dc6:	e8 85 fe ff ff       	call   c0021c50 <PIC::ioWait()>
c0021dcb:	83 c4 10             	add    esp,0x10
c0021dce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0021dd1:	0f b6 c0             	movzx  eax,al
c0021dd4:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0021dda:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0021ddd:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0021de0:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0021de3:	ee                   	out    dx,al
c0021de4:	83 ec 0c             	sub    esp,0xc
c0021de7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021dea:	e8 61 fe ff ff       	call   c0021c50 <PIC::ioWait()>
c0021def:	83 c4 10             	add    esp,0x10
c0021df2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0021df5:	0f b6 c0             	movzx  eax,al
c0021df8:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0021dfe:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0021e01:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0021e04:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0021e07:	ee                   	out    dx,al
c0021e08:	83 ec 0c             	sub    esp,0xc
c0021e0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e0e:	e8 3d fe ff ff       	call   c0021c50 <PIC::ioWait()>
c0021e13:	83 c4 10             	add    esp,0x10
c0021e16:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0021e1c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0021e20:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0021e23:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0021e26:	ee                   	out    dx,al
c0021e27:	83 ec 0c             	sub    esp,0xc
c0021e2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e2d:	e8 1e fe ff ff       	call   c0021c50 <PIC::ioWait()>
c0021e32:	83 c4 10             	add    esp,0x10
c0021e35:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0021e3b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0021e3f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0021e42:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0021e45:	ee                   	out    dx,al
c0021e46:	83 ec 0c             	sub    esp,0xc
c0021e49:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e4c:	e8 ff fd ff ff       	call   c0021c50 <PIC::ioWait()>
c0021e51:	83 c4 10             	add    esp,0x10
c0021e54:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0021e5a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0021e5e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0021e61:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0021e64:	ee                   	out    dx,al
c0021e65:	83 ec 0c             	sub    esp,0xc
c0021e68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e6b:	e8 e0 fd ff ff       	call   c0021c50 <PIC::ioWait()>
c0021e70:	83 c4 10             	add    esp,0x10
c0021e73:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0021e79:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0021e7d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0021e80:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0021e83:	ee                   	out    dx,al
c0021e84:	83 ec 0c             	sub    esp,0xc
c0021e87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021e8a:	e8 c1 fd ff ff       	call   c0021c50 <PIC::ioWait()>
c0021e8f:	83 c4 10             	add    esp,0x10
c0021e92:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0021e96:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0021e9c:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0021e9f:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0021ea2:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0021ea5:	ee                   	out    dx,al
c0021ea6:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0021eaa:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0021eb0:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0021eb3:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0021eb6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0021eb9:	ee                   	out    dx,al
c0021eba:	90                   	nop
c0021ebb:	c9                   	leave  
c0021ebc:	c3                   	ret    
c0021ebd:	90                   	nop

c0021ebe <PIC::open(int, int, void*)>:
c0021ebe:	55                   	push   ebp
c0021ebf:	89 e5                	mov    ebp,esp
c0021ec1:	83 ec 18             	sub    esp,0x18
c0021ec4:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0021eca:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0021ece:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0021ed1:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0021ed5:	ee                   	out    dx,al
c0021ed6:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0021edc:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0021ee0:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0021ee3:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0021ee7:	ee                   	out    dx,al
c0021ee8:	83 ec 0c             	sub    esp,0xc
c0021eeb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0021eee:	e8 5f fe ff ff       	call   c0021d52 <PIC::remap()>
c0021ef3:	83 c4 10             	add    esp,0x10
c0021ef6:	b8 00 00 00 00       	mov    eax,0x0
c0021efb:	c9                   	leave  
c0021efc:	c3                   	ret    
c0021efd:	66 90                	xchg   ax,ax
c0021eff:	90                   	nop

c0021f00 <APICTimer::close(int, int, void*)>:
c0021f00:	b8 00 00 00 00       	mov    eax,0x0
c0021f05:	c3                   	ret    
c0021f06:	66 90                	xchg   ax,ax

c0021f08 <apicTimerHandler(regs*, void*)>:
c0021f08:	83 ec 0c             	sub    esp,0xc
c0021f0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021f0f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0021f11:	b8 10 27 00 00       	mov    eax,0x2710
c0021f16:	ba 00 00 00 00       	mov    edx,0x0
c0021f1b:	f7 f1                	div    ecx
c0021f1d:	83 ec 0c             	sub    esp,0xc
c0021f20:	50                   	push   eax
c0021f21:	e8 af eb fe ff       	call   c0010ad5 <timerHandler(unsigned int)>
c0021f26:	83 c4 10             	add    esp,0x10
c0021f29:	90                   	nop
c0021f2a:	83 c4 0c             	add    esp,0xc
c0021f2d:	c3                   	ret    
c0021f2e:	66 90                	xchg   ax,ax

c0021f30 <APICTimer::write(int)>:
c0021f30:	83 ec 1c             	sub    esp,0x1c
c0021f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f37:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021f3b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0021f41:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c0021f46:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0021f4c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0021f52:	83 ec 0c             	sub    esp,0xc
c0021f55:	50                   	push   eax
c0021f56:	e8 e1 f4 ff ff       	call   c002143c <APIC::getBase()>
c0021f5b:	83 c4 10             	add    esp,0x10
c0021f5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021f62:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c0021f67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f6b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f6f:	05 e0 03 00 00       	add    eax,0x3e0
c0021f74:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0021f7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f7e:	05 80 03 00 00       	add    eax,0x380
c0021f83:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0021f89:	fb                   	sti    
c0021f8a:	66 90                	xchg   ax,ax
c0021f8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021f90:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c0021f96:	a1 2c 85 02 c0       	mov    eax,ds:0xc002852c
c0021f9b:	39 c2                	cmp    edx,eax
c0021f9d:	76 05                	jbe    c0021fa4 <APICTimer::write(int)+0x74>
c0021f9f:	eb eb                	jmp    c0021f8c <APICTimer::write(int)+0x5c>
c0021fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0021fa4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fa8:	05 20 03 00 00       	add    eax,0x320
c0021fad:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0021fb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fb7:	05 90 03 00 00       	add    eax,0x390
c0021fbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fbe:	f7 d0                	not    eax
c0021fc0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021fc4:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fcc:	ba 00 00 00 00       	mov    edx,0x0
c0021fd1:	f7 f1                	div    ecx
c0021fd3:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fd6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021fda:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0021fe0:	0d 00 00 02 00       	or     eax,0x20000
c0021fe5:	89 c2                	mov    edx,eax
c0021fe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021feb:	05 20 03 00 00       	add    eax,0x320
c0021ff0:	89 10                	mov    DWORD PTR [eax],edx
c0021ff2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021ff6:	05 e0 03 00 00       	add    eax,0x3e0
c0021ffb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0022001:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022005:	05 80 03 00 00       	add    eax,0x380
c002200a:	89 c2                	mov    edx,eax
c002200c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002200f:	89 02                	mov    DWORD PTR [edx],eax
c0022011:	90                   	nop
c0022012:	83 c4 1c             	add    esp,0x1c
c0022015:	c3                   	ret    
c0022016:	66 90                	xchg   ax,ax

c0022018 <APICTimer::open(int, int, void*)>:
c0022018:	57                   	push   edi
c0022019:	56                   	push   esi
c002201a:	53                   	push   ebx
c002201b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002201f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022021:	83 c0 24             	add    eax,0x24
c0022024:	8b 00                	mov    eax,DWORD PTR [eax]
c0022026:	83 ec 08             	sub    esp,0x8
c0022029:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002202d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022031:	ff d0                	call   eax
c0022033:	83 c4 10             	add    esp,0x10
c0022036:	a1 08 7f 02 c0       	mov    eax,ds:0xc0027f08
c002203b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022041:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0022047:	83 ec 0c             	sub    esp,0xc
c002204a:	50                   	push   eax
c002204b:	e8 ec f3 ff ff       	call   c002143c <APIC::getBase()>
c0022050:	83 c4 10             	add    esp,0x10
c0022053:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0022059:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002205d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0022063:	0f b6 f8             	movzx  edi,al
c0022066:	89 d0                	mov    eax,edx
c0022068:	ba 00 00 00 00       	mov    edx,0x0
c002206d:	89 c1                	mov    ecx,eax
c002206f:	80 e5 ff             	and    ch,0xff
c0022072:	89 cb                	mov    ebx,ecx
c0022074:	0f b6 f2             	movzx  esi,dl
c0022077:	89 d8                	mov    eax,ebx
c0022079:	89 f2                	mov    edx,esi
c002207b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002207f:	8d 5f 08             	lea    ebx,[edi+0x8]
c0022082:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0022086:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002208a:	83 e0 00             	and    eax,0x0
c002208d:	09 d0                	or     eax,edx
c002208f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0022093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022097:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002209d:	8d 50 01             	lea    edx,[eax+0x1]
c00220a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00220a4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00220aa:	0f b6 d0             	movzx  edx,al
c00220ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220b1:	83 c2 08             	add    edx,0x8
c00220b4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00220b8:	0f b6 c9             	movzx  ecx,cl
c00220bb:	81 c9 00 00 01 00    	or     ecx,0x10000
c00220c1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00220c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00220cd:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00220d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00220db:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00220e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00220e5:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00220eb:	83 ec 0c             	sub    esp,0xc
c00220ee:	51                   	push   ecx
c00220ef:	6a 01                	push   0x1
c00220f1:	68 08 1f 02 c0       	push   0xc0021f08
c00220f6:	52                   	push   edx
c00220f7:	50                   	push   eax
c00220f8:	e8 e9 c0 fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00220fd:	83 c4 20             	add    esp,0x20
c0022100:	89 c2                	mov    edx,eax
c0022102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022106:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c002210c:	b8 00 00 00 00       	mov    eax,0x0
c0022111:	5b                   	pop    ebx
c0022112:	5e                   	pop    esi
c0022113:	5f                   	pop    edi
c0022114:	c3                   	ret    
c0022115:	90                   	nop
c0022116:	66 90                	xchg   ax,ax

c0022118 <APICTimer::APICTimer()>:
c0022118:	83 ec 0c             	sub    esp,0xc
c002211b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211f:	83 ec 08             	sub    esp,0x8
c0022122:	68 e0 70 02 c0       	push   0xc00270e0
c0022127:	50                   	push   eax
c0022128:	e8 17 e9 fe ff       	call   c0010a44 <Timer::Timer(char const*)>
c002212d:	83 c4 10             	add    esp,0x10
c0022130:	ba f4 70 02 c0       	mov    edx,0xc00270f4
c0022135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022139:	89 10                	mov    DWORD PTR [eax],edx
c002213b:	90                   	nop
c002213c:	83 c4 0c             	add    esp,0xc
c002213f:	c3                   	ret    

c0022140 <PIT::write(int)>:
c0022140:	83 ec 10             	sub    esp,0x10
c0022143:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022147:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002214b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022151:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022155:	a3 a4 9e 02 c0       	mov    ds:0xc0029ea4,eax
c002215a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002215f:	99                   	cdq    
c0022160:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0022164:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022168:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002216f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0022174:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0022178:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002217d:	ee                   	out    dx,al
c002217e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022182:	0f b6 c0             	movzx  eax,al
c0022185:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002218c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0022190:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0022194:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0022199:	ee                   	out    dx,al
c002219a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002219e:	c1 f8 08             	sar    eax,0x8
c00221a1:	0f b6 c0             	movzx  eax,al
c00221a4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c00221ab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00221af:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00221b3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00221b8:	ee                   	out    dx,al
c00221b9:	90                   	nop
c00221ba:	83 c4 10             	add    esp,0x10
c00221bd:	c3                   	ret    
c00221be:	66 90                	xchg   ax,ax

c00221c0 <pitHandler(regs*, void*)>:
c00221c0:	83 ec 0c             	sub    esp,0xc
c00221c3:	8b 0d a4 9e 02 c0    	mov    ecx,DWORD PTR ds:0xc0029ea4
c00221c9:	b8 10 27 00 00       	mov    eax,0x2710
c00221ce:	99                   	cdq    
c00221cf:	f7 f9                	idiv   ecx
c00221d1:	83 ec 0c             	sub    esp,0xc
c00221d4:	50                   	push   eax
c00221d5:	e8 fb e8 fe ff       	call   c0010ad5 <timerHandler(unsigned int)>
c00221da:	83 c4 10             	add    esp,0x10
c00221dd:	90                   	nop
c00221de:	83 c4 0c             	add    esp,0xc
c00221e1:	c3                   	ret    
c00221e2:	66 90                	xchg   ax,ax

c00221e4 <PIT::open(int, int, void*)>:
c00221e4:	83 ec 0c             	sub    esp,0xc
c00221e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00221eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00221ed:	83 c0 24             	add    eax,0x24
c00221f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00221f2:	83 ec 08             	sub    esp,0x8
c00221f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00221fd:	ff d0                	call   eax
c00221ff:	83 c4 10             	add    esp,0x10
c0022202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022206:	83 ec 0c             	sub    esp,0xc
c0022209:	6a 00                	push   0x0
c002220b:	6a 01                	push   0x1
c002220d:	68 c0 21 02 c0       	push   0xc00221c0
c0022212:	6a 00                	push   0x0
c0022214:	50                   	push   eax
c0022215:	e8 cc bf fe ff       	call   c000e1e6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002221a:	83 c4 20             	add    esp,0x20
c002221d:	89 c2                	mov    edx,eax
c002221f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022223:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0022229:	b8 00 00 00 00       	mov    eax,0x0
c002222e:	83 c4 0c             	add    esp,0xc
c0022231:	c3                   	ret    
c0022232:	66 90                	xchg   ax,ax

c0022234 <PIT::close(int, int, void*)>:
c0022234:	83 ec 0c             	sub    esp,0xc
c0022237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002223b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0022245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022249:	6a 01                	push   0x1
c002224b:	68 c0 21 02 c0       	push   0xc00221c0
c0022250:	6a 00                	push   0x0
c0022252:	50                   	push   eax
c0022253:	e8 d8 bf fe ff       	call   c000e230 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0022258:	83 c4 10             	add    esp,0x10
c002225b:	b8 00 00 00 00       	mov    eax,0x0
c0022260:	83 c4 0c             	add    esp,0xc
c0022263:	c3                   	ret    

c0022264 <PIT::PIT()>:
c0022264:	83 ec 0c             	sub    esp,0xc
c0022267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002226b:	83 ec 08             	sub    esp,0x8
c002226e:	68 1c 71 02 c0       	push   0xc002711c
c0022273:	50                   	push   eax
c0022274:	e8 cb e7 fe ff       	call   c0010a44 <Timer::Timer(char const*)>
c0022279:	83 c4 10             	add    esp,0x10
c002227c:	ba 44 71 02 c0       	mov    edx,0xc0027144
c0022281:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022285:	89 10                	mov    DWORD PTR [eax],edx
c0022287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002228b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022291:	0f b6 d0             	movzx  edx,al
c0022294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022298:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002229f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222a3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222a9:	0f b6 d0             	movzx  edx,al
c00222ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c00222b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00222bf:	8d 50 01             	lea    edx,[eax+0x1]
c00222c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00222c6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00222cc:	0f b6 d0             	movzx  edx,al
c00222cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00222d3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00222d7:	83 e1 3f             	and    ecx,0x3f
c00222da:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00222de:	90                   	nop
c00222df:	83 c4 0c             	add    esp,0xc
c00222e2:	c3                   	ret    
c00222e3:	66 90                	xchg   ax,ax
c00222e5:	66 90                	xchg   ax,ax
c00222e7:	66 90                	xchg   ax,ax
c00222e9:	66 90                	xchg   ax,ax
c00222eb:	66 90                	xchg   ax,ax
c00222ed:	66 90                	xchg   ax,ax
c00222ef:	90                   	nop

c00222f0 <avxDetect>:
c00222f0:	b8 00 00 00 00       	mov    eax,0x0
c00222f5:	c3                   	ret    

c00222f6 <avxSave>:
c00222f6:	c3                   	ret    

c00222f7 <avxLoad>:
c00222f7:	c3                   	ret    

c00222f8 <avxInit>:
c00222f8:	c3                   	ret    

c00222f9 <avxClose>:
c00222f9:	c3                   	ret    

c00222fa <wouldSheSayYes>:
c00222fa:	c3                   	ret    
c00222fb:	49                   	dec    ecx
c00222fc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0022300:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0022304:	75 20                	jne    c0022326 <sseDetect.noSSE+0x1>
c0022306:	4e                   	dec    esi
c0022307:	79 61                	jns    c002236a <x87Detect+0x14>
c0022309:	68 2e 2e 2e 00       	push   0x2e2e2e
c002230e:	66 90                	xchg   ax,ax

c0022310 <absolutelyNoChanceInHell>:
c0022310:	b8 01 00 00 00       	mov    eax,0x1
c0022315:	0f a2                	cpuid  
c0022317:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002231d:	74 06                	je     c0022325 <sseDetect.noSSE>
c002231f:	b8 01 00 00 00       	mov    eax,0x1
c0022324:	c3                   	ret    

c0022325 <sseDetect.noSSE>:
c0022325:	31 c0                	xor    eax,eax
c0022327:	c3                   	ret    

c0022328 <sseSave>:
c0022328:	0f ae 44 24 04       	fxsave [esp+0x4]
c002232d:	c3                   	ret    

c002232e <sseLoad>:
c002232e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0022333:	c3                   	ret    

c0022334 <sseInit>:
c0022334:	e8 49 00 00 00       	call   c0022382 <x87Init>
c0022339:	0f 20 e0             	mov    eax,cr4
c002233c:	66 0d 00 06          	or     ax,0x600
c0022340:	0f 22 e0             	mov    cr4,eax
c0022343:	c3                   	ret    

c0022344 <sseClose>:
c0022344:	c3                   	ret    
c0022345:	66 90                	xchg   ax,ax
c0022347:	66 90                	xchg   ax,ax
c0022349:	66 90                	xchg   ax,ax
c002234b:	66 90                	xchg   ax,ax
c002234d:	66 90                	xchg   ax,ax
c002234f:	90                   	nop

c0022350 <value_37F>:
c0022350:	7f 03                	jg     c0022355 <value_37A+0x1>

c0022352 <value_37E>:
c0022352:	7e 03                	jle    c0022357 <x87Detect+0x1>

c0022354 <value_37A>:
c0022354:	7a 03                	jp     c0022359 <x87Detect+0x3>

c0022356 <x87Detect>:
c0022356:	b8 01 00 00 00       	mov    eax,0x1
c002235b:	0f a2                	cpuid  
c002235d:	f7 c2 01 00 00 00    	test   edx,0x1
c0022363:	74 06                	je     c002236b <x87Detect.nox87>
c0022365:	b8 01 00 00 00       	mov    eax,0x1
c002236a:	c3                   	ret    

c002236b <x87Detect.nox87>:
c002236b:	b8 00 00 00 00       	mov    eax,0x0
c0022370:	c3                   	ret    

c0022371 <x87Save>:
c0022371:	55                   	push   ebp
c0022372:	89 e5                	mov    ebp,esp
c0022374:	9b dd 75 08          	fsave  [ebp+0x8]
c0022378:	c9                   	leave  
c0022379:	c3                   	ret    

c002237a <x87Load>:
c002237a:	55                   	push   ebp
c002237b:	89 e5                	mov    ebp,esp
c002237d:	dd 65 08             	frstor [ebp+0x8]
c0022380:	c9                   	leave  
c0022381:	c3                   	ret    

c0022382 <x87Init>:
c0022382:	9b db e3             	finit  
c0022385:	0f 20 c0             	mov    eax,cr0
c0022388:	66 25 fb ff          	and    ax,0xfffb
c002238c:	66 0d 22 00          	or     ax,0x22
c0022390:	0f 22 c0             	mov    cr0,eax
c0022393:	0f 06                	clts   
c0022395:	d9 2d 54 23 02 c0    	fldcw  WORD PTR ds:0xc0022354
c002239b:	c3                   	ret    

c002239c <x87Close>:
c002239c:	c3                   	ret    
c002239d:	66 90                	xchg   ax,ax
c002239f:	90                   	nop

c00223a0 <__do_global_ctors_aux>:
c00223a0:	a1 3c 35 02 c0       	mov    eax,ds:0xc002353c
c00223a5:	83 f8 ff             	cmp    eax,0xffffffff
c00223a8:	74 1a                	je     c00223c4 <__do_global_ctors_aux+0x24>
c00223aa:	55                   	push   ebp
c00223ab:	89 e5                	mov    ebp,esp
c00223ad:	53                   	push   ebx
c00223ae:	52                   	push   edx
c00223af:	bb 3c 35 02 c0       	mov    ebx,0xc002353c
c00223b4:	ff d0                	call   eax
c00223b6:	83 eb 04             	sub    ebx,0x4
c00223b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00223bb:	83 f8 ff             	cmp    eax,0xffffffff
c00223be:	75 f4                	jne    c00223b4 <__do_global_ctors_aux+0x14>
c00223c0:	58                   	pop    eax
c00223c1:	5b                   	pop    ebx
c00223c2:	5d                   	pop    ebp
c00223c3:	c3                   	ret    
c00223c4:	c3                   	ret    
c00223c5:	66 90                	xchg   ax,ax
c00223c7:	90                   	nop

c00223c8 <__divdi3>:
c00223c8:	55                   	push   ebp
c00223c9:	57                   	push   edi
c00223ca:	56                   	push   esi
c00223cb:	53                   	push   ebx
c00223cc:	83 ec 1c             	sub    esp,0x1c
c00223cf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00223d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00223d7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00223da:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00223de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00223e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00223e6:	85 db                	test   ebx,ebx
c00223e8:	0f 88 8e 00 00 00    	js     c002247c <__divdi3+0xb4>
c00223ee:	89 dd                	mov    ebp,ebx
c00223f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00223f8:	89 d3                	mov    ebx,edx
c00223fa:	85 d2                	test   edx,edx
c00223fc:	79 0d                	jns    c002240b <__divdi3+0x43>
c00223fe:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0022402:	f7 d8                	neg    eax
c0022404:	83 d2 00             	adc    edx,0x0
c0022407:	f7 da                	neg    edx
c0022409:	89 d3                	mov    ebx,edx
c002240b:	89 c7                	mov    edi,eax
c002240d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022410:	85 db                	test   ebx,ebx
c0022412:	75 48                	jne    c002245c <__divdi3+0x94>
c0022414:	39 ef                	cmp    edi,ebp
c0022416:	76 24                	jbe    c002243c <__divdi3+0x74>
c0022418:	89 ea                	mov    edx,ebp
c002241a:	f7 f7                	div    edi
c002241c:	89 c1                	mov    ecx,eax
c002241e:	31 f6                	xor    esi,esi
c0022420:	89 c8                	mov    eax,ecx
c0022422:	89 f2                	mov    edx,esi
c0022424:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022428:	85 c9                	test   ecx,ecx
c002242a:	74 07                	je     c0022433 <__divdi3+0x6b>
c002242c:	f7 d8                	neg    eax
c002242e:	83 d2 00             	adc    edx,0x0
c0022431:	f7 da                	neg    edx
c0022433:	83 c4 1c             	add    esp,0x1c
c0022436:	5b                   	pop    ebx
c0022437:	5e                   	pop    esi
c0022438:	5f                   	pop    edi
c0022439:	5d                   	pop    ebp
c002243a:	c3                   	ret    
c002243b:	90                   	nop
c002243c:	85 ff                	test   edi,edi
c002243e:	75 0b                	jne    c002244b <__divdi3+0x83>
c0022440:	b8 01 00 00 00       	mov    eax,0x1
c0022445:	31 d2                	xor    edx,edx
c0022447:	f7 f3                	div    ebx
c0022449:	89 c7                	mov    edi,eax
c002244b:	31 d2                	xor    edx,edx
c002244d:	89 e8                	mov    eax,ebp
c002244f:	f7 f7                	div    edi
c0022451:	89 c6                	mov    esi,eax
c0022453:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0022456:	f7 f7                	div    edi
c0022458:	89 c1                	mov    ecx,eax
c002245a:	eb c4                	jmp    c0022420 <__divdi3+0x58>
c002245c:	39 eb                	cmp    ebx,ebp
c002245e:	77 3c                	ja     c002249c <__divdi3+0xd4>
c0022460:	0f bd f3             	bsr    esi,ebx
c0022463:	83 f6 1f             	xor    esi,0x1f
c0022466:	75 40                	jne    c00224a8 <__divdi3+0xe0>
c0022468:	39 eb                	cmp    ebx,ebp
c002246a:	72 09                	jb     c0022475 <__divdi3+0xad>
c002246c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002246f:	0f 87 97 00 00 00    	ja     c002250c <__divdi3+0x144>
c0022475:	b9 01 00 00 00       	mov    ecx,0x1
c002247a:	eb a4                	jmp    c0022420 <__divdi3+0x58>
c002247c:	f7 d9                	neg    ecx
c002247e:	83 d3 00             	adc    ebx,0x0
c0022481:	f7 db                	neg    ebx
c0022483:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0022486:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002248a:	89 dd                	mov    ebp,ebx
c002248c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0022494:	e9 5f ff ff ff       	jmp    c00223f8 <__divdi3+0x30>
c0022499:	8d 76 00             	lea    esi,[esi+0x0]
c002249c:	31 f6                	xor    esi,esi
c002249e:	31 c9                	xor    ecx,ecx
c00224a0:	e9 7b ff ff ff       	jmp    c0022420 <__divdi3+0x58>
c00224a5:	8d 76 00             	lea    esi,[esi+0x0]
c00224a8:	b8 20 00 00 00       	mov    eax,0x20
c00224ad:	29 f0                	sub    eax,esi
c00224af:	89 f1                	mov    ecx,esi
c00224b1:	d3 e3                	shl    ebx,cl
c00224b3:	89 fa                	mov    edx,edi
c00224b5:	88 c1                	mov    cl,al
c00224b7:	d3 ea                	shr    edx,cl
c00224b9:	09 da                	or     edx,ebx
c00224bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00224bf:	89 f1                	mov    ecx,esi
c00224c1:	d3 e7                	shl    edi,cl
c00224c3:	89 eb                	mov    ebx,ebp
c00224c5:	88 c1                	mov    cl,al
c00224c7:	d3 eb                	shr    ebx,cl
c00224c9:	89 f1                	mov    ecx,esi
c00224cb:	d3 e5                	shl    ebp,cl
c00224cd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00224d0:	88 c1                	mov    cl,al
c00224d2:	d3 ea                	shr    edx,cl
c00224d4:	09 d5                	or     ebp,edx
c00224d6:	89 e8                	mov    eax,ebp
c00224d8:	89 da                	mov    edx,ebx
c00224da:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00224de:	89 d3                	mov    ebx,edx
c00224e0:	89 c5                	mov    ebp,eax
c00224e2:	f7 e7                	mul    edi
c00224e4:	39 d3                	cmp    ebx,edx
c00224e6:	72 18                	jb     c0022500 <__divdi3+0x138>
c00224e8:	74 0a                	je     c00224f4 <__divdi3+0x12c>
c00224ea:	89 e9                	mov    ecx,ebp
c00224ec:	31 f6                	xor    esi,esi
c00224ee:	e9 2d ff ff ff       	jmp    c0022420 <__divdi3+0x58>
c00224f3:	90                   	nop
c00224f4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00224f7:	89 f1                	mov    ecx,esi
c00224f9:	d3 e7                	shl    edi,cl
c00224fb:	39 c7                	cmp    edi,eax
c00224fd:	73 eb                	jae    c00224ea <__divdi3+0x122>
c00224ff:	90                   	nop
c0022500:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0022503:	31 f6                	xor    esi,esi
c0022505:	e9 16 ff ff ff       	jmp    c0022420 <__divdi3+0x58>
c002250a:	66 90                	xchg   ax,ax
c002250c:	31 c9                	xor    ecx,ecx
c002250e:	e9 0d ff ff ff       	jmp    c0022420 <__divdi3+0x58>
c0022513:	90                   	nop

c0022514 <__moddi3>:
c0022514:	55                   	push   ebp
c0022515:	57                   	push   edi
c0022516:	56                   	push   esi
c0022517:	53                   	push   ebx
c0022518:	83 ec 2c             	sub    esp,0x2c
c002251b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002251f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0022523:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022527:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002252b:	85 db                	test   ebx,ebx
c002252d:	0f 88 85 00 00 00    	js     c00225b8 <__moddi3+0xa4>
c0022533:	89 de                	mov    esi,ebx
c0022535:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002253d:	89 d7                	mov    edi,edx
c002253f:	85 d2                	test   edx,edx
c0022541:	79 09                	jns    c002254c <__moddi3+0x38>
c0022543:	f7 d8                	neg    eax
c0022545:	83 d2 00             	adc    edx,0x0
c0022548:	f7 da                	neg    edx
c002254a:	89 d7                	mov    edi,edx
c002254c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022550:	89 cd                	mov    ebp,ecx
c0022552:	85 ff                	test   edi,edi
c0022554:	75 52                	jne    c00225a8 <__moddi3+0x94>
c0022556:	89 c3                	mov    ebx,eax
c0022558:	39 f0                	cmp    eax,esi
c002255a:	76 24                	jbe    c0022580 <__moddi3+0x6c>
c002255c:	89 c8                	mov    eax,ecx
c002255e:	89 f2                	mov    edx,esi
c0022560:	f7 f3                	div    ebx
c0022562:	89 d6                	mov    esi,edx
c0022564:	89 f0                	mov    eax,esi
c0022566:	31 d2                	xor    edx,edx
c0022568:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002256c:	85 c9                	test   ecx,ecx
c002256e:	74 07                	je     c0022577 <__moddi3+0x63>
c0022570:	f7 d8                	neg    eax
c0022572:	83 d2 00             	adc    edx,0x0
c0022575:	f7 da                	neg    edx
c0022577:	83 c4 2c             	add    esp,0x2c
c002257a:	5b                   	pop    ebx
c002257b:	5e                   	pop    esi
c002257c:	5f                   	pop    edi
c002257d:	5d                   	pop    ebp
c002257e:	c3                   	ret    
c002257f:	90                   	nop
c0022580:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0022584:	85 db                	test   ebx,ebx
c0022586:	75 0d                	jne    c0022595 <__moddi3+0x81>
c0022588:	b8 01 00 00 00       	mov    eax,0x1
c002258d:	31 d2                	xor    edx,edx
c002258f:	f7 f7                	div    edi
c0022591:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022595:	89 f0                	mov    eax,esi
c0022597:	31 d2                	xor    edx,edx
c0022599:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002259d:	f7 f7                	div    edi
c002259f:	89 e8                	mov    eax,ebp
c00225a1:	f7 f7                	div    edi
c00225a3:	89 d6                	mov    esi,edx
c00225a5:	eb bd                	jmp    c0022564 <__moddi3+0x50>
c00225a7:	90                   	nop
c00225a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00225ac:	39 f7                	cmp    edi,esi
c00225ae:	76 20                	jbe    c00225d0 <__moddi3+0xbc>
c00225b0:	89 c8                	mov    eax,ecx
c00225b2:	89 f2                	mov    edx,esi
c00225b4:	eb b2                	jmp    c0022568 <__moddi3+0x54>
c00225b6:	66 90                	xchg   ax,ax
c00225b8:	f7 d9                	neg    ecx
c00225ba:	83 d3 00             	adc    ebx,0x0
c00225bd:	f7 db                	neg    ebx
c00225bf:	89 de                	mov    esi,ebx
c00225c1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00225c9:	e9 6f ff ff ff       	jmp    c002253d <__moddi3+0x29>
c00225ce:	66 90                	xchg   ax,ax
c00225d0:	0f bd c7             	bsr    eax,edi
c00225d3:	83 f0 1f             	xor    eax,0x1f
c00225d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00225da:	75 24                	jne    c0022600 <__moddi3+0xec>
c00225dc:	39 f7                	cmp    edi,esi
c00225de:	72 06                	jb     c00225e6 <__moddi3+0xd2>
c00225e0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00225e4:	77 0c                	ja     c00225f2 <__moddi3+0xde>
c00225e6:	89 e9                	mov    ecx,ebp
c00225e8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00225ec:	19 fe                	sbb    esi,edi
c00225ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00225f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00225f6:	89 f2                	mov    edx,esi
c00225f8:	e9 6b ff ff ff       	jmp    c0022568 <__moddi3+0x54>
c00225fd:	8d 76 00             	lea    esi,[esi+0x0]
c0022600:	b8 20 00 00 00       	mov    eax,0x20
c0022605:	89 c2                	mov    edx,eax
c0022607:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002260b:	29 da                	sub    edx,ebx
c002260d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0022611:	88 d9                	mov    cl,bl
c0022613:	d3 e7                	shl    edi,cl
c0022615:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022619:	88 d1                	mov    cl,dl
c002261b:	d3 e8                	shr    eax,cl
c002261d:	09 c7                	or     edi,eax
c002261f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0022623:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022627:	89 d8                	mov    eax,ebx
c0022629:	88 d9                	mov    cl,bl
c002262b:	d3 e7                	shl    edi,cl
c002262d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022631:	89 f3                	mov    ebx,esi
c0022633:	88 d1                	mov    cl,dl
c0022635:	d3 eb                	shr    ebx,cl
c0022637:	89 c7                	mov    edi,eax
c0022639:	88 c1                	mov    cl,al
c002263b:	d3 e6                	shl    esi,cl
c002263d:	89 e8                	mov    eax,ebp
c002263f:	88 d1                	mov    cl,dl
c0022641:	d3 e8                	shr    eax,cl
c0022643:	09 f0                	or     eax,esi
c0022645:	89 f9                	mov    ecx,edi
c0022647:	d3 e5                	shl    ebp,cl
c0022649:	89 da                	mov    edx,ebx
c002264b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002264f:	89 d3                	mov    ebx,edx
c0022651:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022655:	89 c6                	mov    esi,eax
c0022657:	89 d1                	mov    ecx,edx
c0022659:	39 d3                	cmp    ebx,edx
c002265b:	72 27                	jb     c0022684 <__moddi3+0x170>
c002265d:	74 21                	je     c0022680 <__moddi3+0x16c>
c002265f:	29 f5                	sub    ebp,esi
c0022661:	19 cb                	sbb    ebx,ecx
c0022663:	89 de                	mov    esi,ebx
c0022665:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0022669:	d3 e6                	shl    esi,cl
c002266b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002266f:	89 f9                	mov    ecx,edi
c0022671:	d3 ed                	shr    ebp,cl
c0022673:	09 ee                	or     esi,ebp
c0022675:	89 f0                	mov    eax,esi
c0022677:	d3 eb                	shr    ebx,cl
c0022679:	89 da                	mov    edx,ebx
c002267b:	e9 e8 fe ff ff       	jmp    c0022568 <__moddi3+0x54>
c0022680:	39 c5                	cmp    ebp,eax
c0022682:	73 db                	jae    c002265f <__moddi3+0x14b>
c0022684:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0022688:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c002268c:	89 d1                	mov    ecx,edx
c002268e:	89 c6                	mov    esi,eax
c0022690:	eb cd                	jmp    c002265f <__moddi3+0x14b>
c0022692:	66 90                	xchg   ax,ax

c0022694 <__udivdi3>:
c0022694:	55                   	push   ebp
c0022695:	57                   	push   edi
c0022696:	56                   	push   esi
c0022697:	53                   	push   ebx
c0022698:	83 ec 1c             	sub    esp,0x1c
c002269b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002269f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00226a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00226a7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00226ab:	85 d2                	test   edx,edx
c00226ad:	75 41                	jne    c00226f0 <__udivdi3+0x5c>
c00226af:	39 f7                	cmp    edi,esi
c00226b1:	76 15                	jbe    c00226c8 <__udivdi3+0x34>
c00226b3:	89 e8                	mov    eax,ebp
c00226b5:	89 f2                	mov    edx,esi
c00226b7:	f7 f7                	div    edi
c00226b9:	31 db                	xor    ebx,ebx
c00226bb:	89 da                	mov    edx,ebx
c00226bd:	83 c4 1c             	add    esp,0x1c
c00226c0:	5b                   	pop    ebx
c00226c1:	5e                   	pop    esi
c00226c2:	5f                   	pop    edi
c00226c3:	5d                   	pop    ebp
c00226c4:	c3                   	ret    
c00226c5:	8d 76 00             	lea    esi,[esi+0x0]
c00226c8:	89 f9                	mov    ecx,edi
c00226ca:	85 ff                	test   edi,edi
c00226cc:	75 0b                	jne    c00226d9 <__udivdi3+0x45>
c00226ce:	b8 01 00 00 00       	mov    eax,0x1
c00226d3:	31 d2                	xor    edx,edx
c00226d5:	f7 f7                	div    edi
c00226d7:	89 c1                	mov    ecx,eax
c00226d9:	31 d2                	xor    edx,edx
c00226db:	89 f0                	mov    eax,esi
c00226dd:	f7 f1                	div    ecx
c00226df:	89 c3                	mov    ebx,eax
c00226e1:	89 e8                	mov    eax,ebp
c00226e3:	f7 f1                	div    ecx
c00226e5:	89 da                	mov    edx,ebx
c00226e7:	83 c4 1c             	add    esp,0x1c
c00226ea:	5b                   	pop    ebx
c00226eb:	5e                   	pop    esi
c00226ec:	5f                   	pop    edi
c00226ed:	5d                   	pop    ebp
c00226ee:	c3                   	ret    
c00226ef:	90                   	nop
c00226f0:	39 f2                	cmp    edx,esi
c00226f2:	77 1c                	ja     c0022710 <__udivdi3+0x7c>
c00226f4:	0f bd da             	bsr    ebx,edx
c00226f7:	83 f3 1f             	xor    ebx,0x1f
c00226fa:	75 24                	jne    c0022720 <__udivdi3+0x8c>
c00226fc:	39 f2                	cmp    edx,esi
c00226fe:	72 08                	jb     c0022708 <__udivdi3+0x74>
c0022700:	39 ef                	cmp    edi,ebp
c0022702:	0f 87 84 00 00 00    	ja     c002278c <__udivdi3+0xf8>
c0022708:	b8 01 00 00 00       	mov    eax,0x1
c002270d:	eb ac                	jmp    c00226bb <__udivdi3+0x27>
c002270f:	90                   	nop
c0022710:	31 db                	xor    ebx,ebx
c0022712:	31 c0                	xor    eax,eax
c0022714:	89 da                	mov    edx,ebx
c0022716:	83 c4 1c             	add    esp,0x1c
c0022719:	5b                   	pop    ebx
c002271a:	5e                   	pop    esi
c002271b:	5f                   	pop    edi
c002271c:	5d                   	pop    ebp
c002271d:	c3                   	ret    
c002271e:	66 90                	xchg   ax,ax
c0022720:	b8 20 00 00 00       	mov    eax,0x20
c0022725:	29 d8                	sub    eax,ebx
c0022727:	88 d9                	mov    cl,bl
c0022729:	d3 e2                	shl    edx,cl
c002272b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002272f:	89 fa                	mov    edx,edi
c0022731:	88 c1                	mov    cl,al
c0022733:	d3 ea                	shr    edx,cl
c0022735:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022739:	09 d1                	or     ecx,edx
c002273b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002273f:	88 d9                	mov    cl,bl
c0022741:	d3 e7                	shl    edi,cl
c0022743:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022747:	89 f7                	mov    edi,esi
c0022749:	88 c1                	mov    cl,al
c002274b:	d3 ef                	shr    edi,cl
c002274d:	88 d9                	mov    cl,bl
c002274f:	d3 e6                	shl    esi,cl
c0022751:	89 ea                	mov    edx,ebp
c0022753:	88 c1                	mov    cl,al
c0022755:	d3 ea                	shr    edx,cl
c0022757:	09 d6                	or     esi,edx
c0022759:	89 f0                	mov    eax,esi
c002275b:	89 fa                	mov    edx,edi
c002275d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0022761:	89 d7                	mov    edi,edx
c0022763:	89 c6                	mov    esi,eax
c0022765:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022769:	39 d7                	cmp    edi,edx
c002276b:	72 13                	jb     c0022780 <__udivdi3+0xec>
c002276d:	74 09                	je     c0022778 <__udivdi3+0xe4>
c002276f:	89 f0                	mov    eax,esi
c0022771:	31 db                	xor    ebx,ebx
c0022773:	e9 43 ff ff ff       	jmp    c00226bb <__udivdi3+0x27>
c0022778:	88 d9                	mov    cl,bl
c002277a:	d3 e5                	shl    ebp,cl
c002277c:	39 c5                	cmp    ebp,eax
c002277e:	73 ef                	jae    c002276f <__udivdi3+0xdb>
c0022780:	8d 46 ff             	lea    eax,[esi-0x1]
c0022783:	31 db                	xor    ebx,ebx
c0022785:	e9 31 ff ff ff       	jmp    c00226bb <__udivdi3+0x27>
c002278a:	66 90                	xchg   ax,ax
c002278c:	31 c0                	xor    eax,eax
c002278e:	e9 28 ff ff ff       	jmp    c00226bb <__udivdi3+0x27>
c0022793:	90                   	nop

c0022794 <__umoddi3>:
c0022794:	55                   	push   ebp
c0022795:	57                   	push   edi
c0022796:	56                   	push   esi
c0022797:	53                   	push   ebx
c0022798:	83 ec 1c             	sub    esp,0x1c
c002279b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002279f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00227a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00227a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00227ab:	89 da                	mov    edx,ebx
c00227ad:	85 c0                	test   eax,eax
c00227af:	75 37                	jne    c00227e8 <__umoddi3+0x54>
c00227b1:	39 df                	cmp    edi,ebx
c00227b3:	76 13                	jbe    c00227c8 <__umoddi3+0x34>
c00227b5:	89 f0                	mov    eax,esi
c00227b7:	f7 f7                	div    edi
c00227b9:	89 d0                	mov    eax,edx
c00227bb:	31 d2                	xor    edx,edx
c00227bd:	83 c4 1c             	add    esp,0x1c
c00227c0:	5b                   	pop    ebx
c00227c1:	5e                   	pop    esi
c00227c2:	5f                   	pop    edi
c00227c3:	5d                   	pop    ebp
c00227c4:	c3                   	ret    
c00227c5:	8d 76 00             	lea    esi,[esi+0x0]
c00227c8:	89 fd                	mov    ebp,edi
c00227ca:	85 ff                	test   edi,edi
c00227cc:	75 0b                	jne    c00227d9 <__umoddi3+0x45>
c00227ce:	b8 01 00 00 00       	mov    eax,0x1
c00227d3:	31 d2                	xor    edx,edx
c00227d5:	f7 f7                	div    edi
c00227d7:	89 c5                	mov    ebp,eax
c00227d9:	89 d8                	mov    eax,ebx
c00227db:	31 d2                	xor    edx,edx
c00227dd:	f7 f5                	div    ebp
c00227df:	89 f0                	mov    eax,esi
c00227e1:	f7 f5                	div    ebp
c00227e3:	89 d0                	mov    eax,edx
c00227e5:	eb d4                	jmp    c00227bb <__umoddi3+0x27>
c00227e7:	90                   	nop
c00227e8:	89 f1                	mov    ecx,esi
c00227ea:	39 d8                	cmp    eax,ebx
c00227ec:	76 0a                	jbe    c00227f8 <__umoddi3+0x64>
c00227ee:	89 f0                	mov    eax,esi
c00227f0:	83 c4 1c             	add    esp,0x1c
c00227f3:	5b                   	pop    ebx
c00227f4:	5e                   	pop    esi
c00227f5:	5f                   	pop    edi
c00227f6:	5d                   	pop    ebp
c00227f7:	c3                   	ret    
c00227f8:	0f bd e8             	bsr    ebp,eax
c00227fb:	83 f5 1f             	xor    ebp,0x1f
c00227fe:	75 1c                	jne    c002281c <__umoddi3+0x88>
c0022800:	39 d8                	cmp    eax,ebx
c0022802:	72 04                	jb     c0022808 <__umoddi3+0x74>
c0022804:	39 f7                	cmp    edi,esi
c0022806:	77 08                	ja     c0022810 <__umoddi3+0x7c>
c0022808:	89 da                	mov    edx,ebx
c002280a:	29 fe                	sub    esi,edi
c002280c:	19 c2                	sbb    edx,eax
c002280e:	89 f1                	mov    ecx,esi
c0022810:	89 c8                	mov    eax,ecx
c0022812:	83 c4 1c             	add    esp,0x1c
c0022815:	5b                   	pop    ebx
c0022816:	5e                   	pop    esi
c0022817:	5f                   	pop    edi
c0022818:	5d                   	pop    ebp
c0022819:	c3                   	ret    
c002281a:	66 90                	xchg   ax,ax
c002281c:	ba 20 00 00 00       	mov    edx,0x20
c0022821:	29 ea                	sub    edx,ebp
c0022823:	89 e9                	mov    ecx,ebp
c0022825:	d3 e0                	shl    eax,cl
c0022827:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002282b:	89 f8                	mov    eax,edi
c002282d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022831:	88 d1                	mov    cl,dl
c0022833:	d3 e8                	shr    eax,cl
c0022835:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022839:	09 c1                	or     ecx,eax
c002283b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002283f:	89 e9                	mov    ecx,ebp
c0022841:	d3 e7                	shl    edi,cl
c0022843:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0022847:	89 d8                	mov    eax,ebx
c0022849:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002284d:	88 d1                	mov    cl,dl
c002284f:	d3 e8                	shr    eax,cl
c0022851:	89 c7                	mov    edi,eax
c0022853:	89 e9                	mov    ecx,ebp
c0022855:	d3 e3                	shl    ebx,cl
c0022857:	89 f0                	mov    eax,esi
c0022859:	88 d1                	mov    cl,dl
c002285b:	d3 e8                	shr    eax,cl
c002285d:	09 d8                	or     eax,ebx
c002285f:	89 e9                	mov    ecx,ebp
c0022861:	d3 e6                	shl    esi,cl
c0022863:	89 f3                	mov    ebx,esi
c0022865:	89 fa                	mov    edx,edi
c0022867:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002286b:	89 d1                	mov    ecx,edx
c002286d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0022871:	89 c6                	mov    esi,eax
c0022873:	89 d7                	mov    edi,edx
c0022875:	39 d1                	cmp    ecx,edx
c0022877:	72 27                	jb     c00228a0 <__umoddi3+0x10c>
c0022879:	74 21                	je     c002289c <__umoddi3+0x108>
c002287b:	89 ca                	mov    edx,ecx
c002287d:	29 f3                	sub    ebx,esi
c002287f:	19 fa                	sbb    edx,edi
c0022881:	89 d0                	mov    eax,edx
c0022883:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0022887:	d3 e0                	shl    eax,cl
c0022889:	89 e9                	mov    ecx,ebp
c002288b:	d3 eb                	shr    ebx,cl
c002288d:	09 d8                	or     eax,ebx
c002288f:	d3 ea                	shr    edx,cl
c0022891:	83 c4 1c             	add    esp,0x1c
c0022894:	5b                   	pop    ebx
c0022895:	5e                   	pop    esi
c0022896:	5f                   	pop    edi
c0022897:	5d                   	pop    ebp
c0022898:	c3                   	ret    
c0022899:	8d 76 00             	lea    esi,[esi+0x0]
c002289c:	39 c3                	cmp    ebx,eax
c002289e:	73 db                	jae    c002287b <__umoddi3+0xe7>
c00228a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00228a4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00228a8:	89 d7                	mov    edi,edx
c00228aa:	89 c6                	mov    esi,eax
c00228ac:	eb cd                	jmp    c002287b <__umoddi3+0xe7>

Disassembly of section .init:

c00228ae <_init>:
c00228ae:	55                   	push   ebp
c00228af:	89 e5                	mov    ebp,esp
c00228b1:	e8 62 d8 fd ff       	call   c0000118 <frame_dummy>
c00228b6:	e8 e5 fa ff ff       	call   c00223a0 <__do_global_ctors_aux>
c00228bb:	5d                   	pop    ebp
c00228bc:	c3                   	ret    

Disassembly of section .fini:

c00228bd <_fini>:
c00228bd:	55                   	push   ebp
c00228be:	89 e5                	mov    ebp,esp
c00228c0:	e8 e3 d7 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00228c5:	5d                   	pop    ebp
c00228c6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00228c8 <Computer::~Computer()>:
c00228c8:	83 ec 0c             	sub    esp,0xc
c00228cb:	ba f4 3e 02 c0       	mov    edx,0xc0023ef4
c00228d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228d4:	89 10                	mov    DWORD PTR [eax],edx
c00228d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228da:	83 ec 0c             	sub    esp,0xc
c00228dd:	50                   	push   eax
c00228de:	e8 59 b8 fe ff       	call   c000e13c <Device::~Device()>
c00228e3:	83 c4 10             	add    esp,0x10
c00228e6:	90                   	nop
c00228e7:	83 c4 0c             	add    esp,0xc
c00228ea:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00228ec <Computer::~Computer()>:
c00228ec:	83 ec 0c             	sub    esp,0xc
c00228ef:	83 ec 0c             	sub    esp,0xc
c00228f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00228f6:	e8 cd ff ff ff       	call   c00228c8 <Computer::~Computer()>
c00228fb:	83 c4 10             	add    esp,0x10
c00228fe:	83 ec 08             	sub    esp,0x8
c0022901:	68 ec 01 00 00       	push   0x1ec
c0022906:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002290a:	e8 0b a3 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002290f:	83 c4 10             	add    esp,0x10
c0022912:	83 c4 0c             	add    esp,0xc
c0022915:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0022916 <idleCommon()>:
c0022916:	83 ec 0c             	sub    esp,0xc
c0022919:	fa                   	cli    
c002291a:	ff 05 28 94 02 c0    	inc    DWORD PTR ds:0xc0029428
c0022920:	e8 8b 5c ff ff       	call   c00185b0 <schedule()>
c0022925:	a1 28 94 02 c0       	mov    eax,ds:0xc0029428
c002292a:	48                   	dec    eax
c002292b:	a3 28 94 02 c0       	mov    ds:0xc0029428,eax
c0022930:	75 01                	jne    c0022933 <idleCommon()+0x1d>
c0022932:	fb                   	sti    
c0022933:	83 c4 0c             	add    esp,0xc
c0022936:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0022938 <LinkedList<UnixFile>::~LinkedList()>:
c0022938:	90                   	nop
c0022939:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002293a <LinkedList<UnixFile>::LinkedList()>:
c002293a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002293e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022948:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002294f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022953:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002295a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002295e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022964:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022968:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002296f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022973:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002297a:	90                   	nop
c002297b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002297c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002297c:	83 ec 0c             	sub    esp,0xc
c002297f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022984:	75 10                	jne    c0022996 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0022986:	83 ec 0c             	sub    esp,0xc
c0022989:	68 c4 42 02 c0       	push   0xc00242c4
c002298e:	e8 10 20 ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022993:	83 c4 10             	add    esp,0x10
c0022996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299a:	8b 00                	mov    eax,DWORD PTR [eax]
c002299c:	85 c0                	test   eax,eax
c002299e:	74 34                	je     c00229d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00229a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229a7:	85 c0                	test   eax,eax
c00229a9:	74 29                	je     c00229d4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00229ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229b2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229b6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00229b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229cb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00229d2:	eb 65                	jmp    c0022a39 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00229d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00229da:	85 c0                	test   eax,eax
c00229dc:	75 4b                	jne    c0022a29 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00229de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229e5:	85 c0                	test   eax,eax
c00229e7:	75 40                	jne    c0022a29 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00229e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229f1:	89 10                	mov    DWORD PTR [eax],edx
c00229f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00229fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a02:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a05:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a10:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a13:	85 c0                	test   eax,eax
c0022a15:	74 22                	je     c0022a39 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022a17:	83 ec 0c             	sub    esp,0xc
c0022a1a:	68 e6 42 02 c0       	push   0xc00242e6
c0022a1f:	e8 7f 1f ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022a24:	83 c4 10             	add    esp,0x10
c0022a27:	eb 10                	jmp    c0022a39 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0022a29:	83 ec 0c             	sub    esp,0xc
c0022a2c:	68 f0 42 02 c0       	push   0xc00242f0
c0022a31:	e8 6d 1f ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022a36:	83 c4 10             	add    esp,0x10
c0022a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a3d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a40:	8d 50 01             	lea    edx,[eax+0x1]
c0022a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a47:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022a4a:	90                   	nop
c0022a4b:	83 c4 0c             	add    esp,0xc
c0022a4e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0022a50 <LinkedList<UnixFile>::getFirstElement()>:
c0022a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a54:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a56:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0022a58 <LinkedList<UnixFile>::removeFirst()>:
c0022a58:	83 ec 0c             	sub    esp,0xc
c0022a5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a5f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a61:	85 c0                	test   eax,eax
c0022a63:	75 12                	jne    c0022a77 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0022a65:	83 ec 0c             	sub    esp,0xc
c0022a68:	68 fc 42 02 c0       	push   0xc00242fc
c0022a6d:	e8 31 1f ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022a72:	83 c4 10             	add    esp,0x10
c0022a75:	eb 7e                	jmp    c0022af5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0022a77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022a7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a81:	85 c0                	test   eax,eax
c0022a83:	74 10                	je     c0022a95 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0022a85:	83 ec 0c             	sub    esp,0xc
c0022a88:	68 47 43 02 c0       	push   0xc0024347
c0022a8d:	e8 11 1f ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022a92:	83 c4 10             	add    esp,0x10
c0022a95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a99:	8b 00                	mov    eax,DWORD PTR [eax]
c0022a9b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022a9e:	85 c0                	test   eax,eax
c0022aa0:	75 33                	jne    c0022ad5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0022aa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022aa6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022aac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ab0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022ab7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022abb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022abe:	83 f8 01             	cmp    eax,0x1
c0022ac1:	74 21                	je     c0022ae4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022ac3:	83 ec 0c             	sub    esp,0xc
c0022ac6:	68 20 43 02 c0       	push   0xc0024320
c0022acb:	e8 d3 1e ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022ad0:	83 c4 10             	add    esp,0x10
c0022ad3:	eb 0f                	jmp    c0022ae4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0022ad5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ad9:	8b 00                	mov    eax,DWORD PTR [eax]
c0022adb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0022ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae2:	89 10                	mov    DWORD PTR [eax],edx
c0022ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ae8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022aeb:	8d 50 ff             	lea    edx,[eax-0x1]
c0022aee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022af2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022af5:	83 c4 0c             	add    esp,0xc
c0022af8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0022afa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0022afa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022afe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022b01:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0022b02 <DriverlessDevice::~DriverlessDevice()>:
c0022b02:	ba 5c 4b 02 c0       	mov    edx,0xc0024b5c
c0022b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b0b:	89 10                	mov    DWORD PTR [eax],edx
c0022b0d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022b11:	50                   	push   eax
c0022b12:	e8 25 b6 fe ff       	call   c000e13c <Device::~Device()>
c0022b17:	83 c4 04             	add    esp,0x4
c0022b1a:	90                   	nop
c0022b1b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0022b1c <DriverlessDevice::~DriverlessDevice()>:
c0022b1c:	83 ec 0c             	sub    esp,0xc
c0022b1f:	83 ec 0c             	sub    esp,0xc
c0022b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b26:	e8 d7 ff ff ff       	call   c0022b02 <DriverlessDevice::~DriverlessDevice()>
c0022b2b:	83 c4 10             	add    esp,0x10
c0022b2e:	83 ec 08             	sub    esp,0x8
c0022b31:	68 58 01 00 00       	push   0x158
c0022b36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022b3a:	e8 db a0 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0022b3f:	83 c4 10             	add    esp,0x10
c0022b42:	83 c4 0c             	add    esp,0xc
c0022b45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0022b46 <LinkedList<Device>::addElement(Device*)>:
c0022b46:	83 ec 0c             	sub    esp,0xc
c0022b49:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022b4e:	75 10                	jne    c0022b60 <LinkedList<Device>::addElement(Device*)+0x1a>
c0022b50:	83 ec 0c             	sub    esp,0xc
c0022b53:	68 c4 42 02 c0       	push   0xc00242c4
c0022b58:	e8 46 1e ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022b5d:	83 c4 10             	add    esp,0x10
c0022b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b64:	8b 00                	mov    eax,DWORD PTR [eax]
c0022b66:	85 c0                	test   eax,eax
c0022b68:	74 3a                	je     c0022ba4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b71:	85 c0                	test   eax,eax
c0022b73:	74 2f                	je     c0022ba4 <LinkedList<Device>::addElement(Device*)+0x5e>
c0022b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b79:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b80:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0022b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b8a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b8e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022b95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022b98:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022ba2:	eb 68                	jmp    c0022c0c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ba8:	8b 00                	mov    eax,DWORD PTR [eax]
c0022baa:	85 c0                	test   eax,eax
c0022bac:	75 4e                	jne    c0022bfc <LinkedList<Device>::addElement(Device*)+0xb6>
c0022bae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bb5:	85 c0                	test   eax,eax
c0022bb7:	75 43                	jne    c0022bfc <LinkedList<Device>::addElement(Device*)+0xb6>
c0022bb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022bc1:	89 10                	mov    DWORD PTR [eax],edx
c0022bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022bcb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022bd5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0022bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022be6:	85 c0                	test   eax,eax
c0022be8:	74 22                	je     c0022c0c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022bea:	83 ec 0c             	sub    esp,0xc
c0022bed:	68 e6 42 02 c0       	push   0xc00242e6
c0022bf2:	e8 ac 1d ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022bf7:	83 c4 10             	add    esp,0x10
c0022bfa:	eb 10                	jmp    c0022c0c <LinkedList<Device>::addElement(Device*)+0xc6>
c0022bfc:	83 ec 0c             	sub    esp,0xc
c0022bff:	68 f0 42 02 c0       	push   0xc00242f0
c0022c04:	e8 9a 1d ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022c09:	83 c4 10             	add    esp,0x10
c0022c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c10:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022c13:	8d 50 01             	lea    edx,[eax+0x1]
c0022c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c1a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022c1d:	90                   	nop
c0022c1e:	83 c4 0c             	add    esp,0xc
c0022c21:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0022c22 <LinkedList<Device>::LinkedList()>:
c0022c22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c26:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022c2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c30:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c3b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022c42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c46:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022c4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022c57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c5b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0022c62:	90                   	nop
c0022c63:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0022c64 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0022c64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c6a:	85 c0                	test   eax,eax
c0022c6c:	75 0e                	jne    c0022c7c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022c6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022c75:	85 c0                	test   eax,eax
c0022c77:	75 03                	jne    c0022c7c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0022c79:	b0 01                	mov    al,0x1
c0022c7b:	c3                   	ret    
c0022c7c:	b0 00                	mov    al,0x0
c0022c7e:	90                   	nop
c0022c7f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0022c80 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0022c80:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c84:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c86:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0022c88 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0022c88:	83 ec 0c             	sub    esp,0xc
c0022c8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0022c91:	85 c0                	test   eax,eax
c0022c93:	75 17                	jne    c0022cac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0022c95:	83 ec 0c             	sub    esp,0xc
c0022c98:	68 fc 42 02 c0       	push   0xc00242fc
c0022c9d:	e8 01 1d ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022ca2:	83 c4 10             	add    esp,0x10
c0022ca5:	e9 92 00 00 00       	jmp    c0022d3c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c0022caa:	66 90                	xchg   ax,ax
c0022cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022cb3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022cb6:	85 c0                	test   eax,eax
c0022cb8:	0f 95 c0             	setne  al
c0022cbb:	84 c0                	test   al,al
c0022cbd:	74 11                	je     c0022cd0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c0022cbf:	83 ec 0c             	sub    esp,0xc
c0022cc2:	68 47 43 02 c0       	push   0xc0024347
c0022cc7:	e8 d7 1c ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022ccc:	83 c4 10             	add    esp,0x10
c0022ccf:	90                   	nop
c0022cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0022cd9:	85 c0                	test   eax,eax
c0022cdb:	0f 94 c0             	sete   al
c0022cde:	84 c0                	test   al,al
c0022ce0:	74 36                	je     c0022d18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c0022ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ce6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cf0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022cfb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022cfe:	83 f8 01             	cmp    eax,0x1
c0022d01:	74 25                	je     c0022d28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022d03:	83 ec 0c             	sub    esp,0xc
c0022d06:	68 20 43 02 c0       	push   0xc0024320
c0022d0b:	e8 93 1c ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022d10:	83 c4 10             	add    esp,0x10
c0022d13:	eb 13                	jmp    c0022d28 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0022d15:	8d 76 00             	lea    esi,[esi+0x0]
c0022d18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d1c:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d1e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0022d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d25:	89 10                	mov    DWORD PTR [eax],edx
c0022d27:	90                   	nop
c0022d28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d2c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d2f:	8d 50 ff             	lea    edx,[eax-0x1]
c0022d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d36:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022d39:	8d 76 00             	lea    esi,[esi+0x0]
c0022d3c:	83 c4 0c             	add    esp,0xc
c0022d3f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0022d40 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0022d40:	83 ec 0c             	sub    esp,0xc
c0022d43:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0022d48:	75 12                	jne    c0022d5c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0022d4a:	83 ec 0c             	sub    esp,0xc
c0022d4d:	68 c4 42 02 c0       	push   0xc00242c4
c0022d52:	e8 4c 1c ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022d57:	83 c4 10             	add    esp,0x10
c0022d5a:	66 90                	xchg   ax,ax
c0022d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0022d62:	85 c0                	test   eax,eax
c0022d64:	74 36                	je     c0022d9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022d66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d6a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d6d:	85 c0                	test   eax,eax
c0022d6f:	74 2b                	je     c0022d9c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0022d71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d75:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d7c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0022d7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022d87:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022d8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022d8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022d91:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022d98:	eb 6a                	jmp    c0022e04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022d9a:	66 90                	xchg   ax,ax
c0022d9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022da0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022da2:	85 c0                	test   eax,eax
c0022da4:	75 4e                	jne    c0022df4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022da6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022daa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022dad:	85 c0                	test   eax,eax
c0022daf:	75 43                	jne    c0022df4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0022db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022db5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022db9:	89 10                	mov    DWORD PTR [eax],edx
c0022dbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dbf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022dc3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022dc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022dcd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022dd8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022ddb:	85 c0                	test   eax,eax
c0022ddd:	74 25                	je     c0022e04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022ddf:	83 ec 0c             	sub    esp,0xc
c0022de2:	68 e6 42 02 c0       	push   0xc00242e6
c0022de7:	e8 b7 1b ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022dec:	83 c4 10             	add    esp,0x10
c0022def:	eb 13                	jmp    c0022e04 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0022df1:	8d 76 00             	lea    esi,[esi+0x0]
c0022df4:	83 ec 0c             	sub    esp,0xc
c0022df7:	68 f0 42 02 c0       	push   0xc00242f0
c0022dfc:	e8 a2 1b ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022e01:	83 c4 10             	add    esp,0x10
c0022e04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e08:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022e0b:	8d 50 01             	lea    edx,[eax+0x1]
c0022e0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e12:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022e15:	90                   	nop
c0022e16:	83 c4 0c             	add    esp,0xc
c0022e19:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0022e1c <ACPI::~ACPI()>:
c0022e1c:	83 ec 0c             	sub    esp,0xc
c0022e1f:	ba e8 55 02 c0       	mov    edx,0xc00255e8
c0022e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e28:	89 10                	mov    DWORD PTR [eax],edx
c0022e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e2e:	83 ec 0c             	sub    esp,0xc
c0022e31:	50                   	push   eax
c0022e32:	e8 05 b3 fe ff       	call   c000e13c <Device::~Device()>
c0022e37:	83 c4 10             	add    esp,0x10
c0022e3a:	90                   	nop
c0022e3b:	83 c4 0c             	add    esp,0xc
c0022e3e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0022e40 <ACPI::~ACPI()>:
c0022e40:	83 ec 0c             	sub    esp,0xc
c0022e43:	83 ec 0c             	sub    esp,0xc
c0022e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e4a:	e8 cd ff ff ff       	call   c0022e1c <ACPI::~ACPI()>
c0022e4f:	83 c4 10             	add    esp,0x10
c0022e52:	83 ec 08             	sub    esp,0x8
c0022e55:	68 64 12 00 00       	push   0x1264
c0022e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022e5e:	e8 b7 9d fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0022e63:	83 c4 10             	add    esp,0x10
c0022e66:	83 c4 0c             	add    esp,0xc
c0022e69:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0022e6c <LinkedList<Device>::~LinkedList()>:
c0022e6c:	90                   	nop
c0022e6d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0022e70 <LinkedList<Device>::isEmpty()>:
c0022e70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e74:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e76:	85 c0                	test   eax,eax
c0022e78:	75 0e                	jne    c0022e88 <LinkedList<Device>::isEmpty()+0x18>
c0022e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022e81:	85 c0                	test   eax,eax
c0022e83:	75 03                	jne    c0022e88 <LinkedList<Device>::isEmpty()+0x18>
c0022e85:	b0 01                	mov    al,0x1
c0022e87:	c3                   	ret    
c0022e88:	b0 00                	mov    al,0x0
c0022e8a:	90                   	nop
c0022e8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0022e8c <LinkedList<Device>::getFirstElement()>:
c0022e8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022e90:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e92:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0022e94 <LinkedList<Device>::removeFirst()>:
c0022e94:	83 ec 0c             	sub    esp,0xc
c0022e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022e9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0022e9d:	85 c0                	test   eax,eax
c0022e9f:	75 17                	jne    c0022eb8 <LinkedList<Device>::removeFirst()+0x24>
c0022ea1:	83 ec 0c             	sub    esp,0xc
c0022ea4:	68 fc 42 02 c0       	push   0xc00242fc
c0022ea9:	e8 f5 1a ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022eae:	83 c4 10             	add    esp,0x10
c0022eb1:	e9 92 00 00 00       	jmp    c0022f48 <LinkedList<Device>::removeFirst()+0xb4>
c0022eb6:	66 90                	xchg   ax,ax
c0022eb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ebc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022ebf:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022ec5:	85 c0                	test   eax,eax
c0022ec7:	74 13                	je     c0022edc <LinkedList<Device>::removeFirst()+0x48>
c0022ec9:	83 ec 0c             	sub    esp,0xc
c0022ecc:	68 47 43 02 c0       	push   0xc0024347
c0022ed1:	e8 cd 1a ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022ed6:	83 c4 10             	add    esp,0x10
c0022ed9:	8d 76 00             	lea    esi,[esi+0x0]
c0022edc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ee0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ee2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0022ee8:	85 c0                	test   eax,eax
c0022eea:	75 34                	jne    c0022f20 <LinkedList<Device>::removeFirst()+0x8c>
c0022eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022ef0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022ef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022efa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0022f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f08:	83 f8 01             	cmp    eax,0x1
c0022f0b:	74 27                	je     c0022f34 <LinkedList<Device>::removeFirst()+0xa0>
c0022f0d:	83 ec 0c             	sub    esp,0xc
c0022f10:	68 20 43 02 c0       	push   0xc0024320
c0022f15:	e8 89 1a ff ff       	call   c00149a3 <Krnl::panic(char const*)>
c0022f1a:	83 c4 10             	add    esp,0x10
c0022f1d:	eb 15                	jmp    c0022f34 <LinkedList<Device>::removeFirst()+0xa0>
c0022f1f:	90                   	nop
c0022f20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f24:	8b 00                	mov    eax,DWORD PTR [eax]
c0022f26:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0022f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f30:	89 10                	mov    DWORD PTR [eax],edx
c0022f32:	66 90                	xchg   ax,ax
c0022f34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f38:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022f3b:	8d 50 ff             	lea    edx,[eax-0x1]
c0022f3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f42:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0022f45:	8d 76 00             	lea    esi,[esi+0x0]
c0022f48:	83 c4 0c             	add    esp,0xc
c0022f4b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0022f4c <CPU::~CPU()>:
c0022f4c:	83 ec 0c             	sub    esp,0xc
c0022f4f:	ba c4 59 02 c0       	mov    edx,0xc00259c4
c0022f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f58:	89 10                	mov    DWORD PTR [eax],edx
c0022f5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f5e:	83 ec 0c             	sub    esp,0xc
c0022f61:	50                   	push   eax
c0022f62:	e8 d5 b1 fe ff       	call   c000e13c <Device::~Device()>
c0022f67:	83 c4 10             	add    esp,0x10
c0022f6a:	90                   	nop
c0022f6b:	83 c4 0c             	add    esp,0xc
c0022f6e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0022f70 <CPU::~CPU()>:
c0022f70:	83 ec 0c             	sub    esp,0xc
c0022f73:	83 ec 0c             	sub    esp,0xc
c0022f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f7a:	e8 cd ff ff ff       	call   c0022f4c <CPU::~CPU()>
c0022f7f:	83 c4 10             	add    esp,0x10
c0022f82:	83 ec 08             	sub    esp,0x8
c0022f85:	68 98 11 00 00       	push   0x1198
c0022f8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022f8e:	e8 87 9c fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0022f93:	83 c4 10             	add    esp,0x10
c0022f96:	83 c4 0c             	add    esp,0xc
c0022f99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0022f9c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0022f9c:	90                   	nop
c0022f9d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0022fa0 <ThreadControlBlock::ThreadControlBlock()>:
c0022fa0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fa4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0022fab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022faf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0022fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fba:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0022fc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fc5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0022fcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fd0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0022fd7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fdb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0022fdf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022fe3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0022fe7:	90                   	nop
c0022fe8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0022fec <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0022fec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ff0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022ff6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ffa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023001:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023005:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002300c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023010:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0023016:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002301a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0023021:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023025:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002302c:	90                   	nop
c002302d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0023030 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0023030:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023034:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0023037:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0023038 <Vm::_FPUState::_FPUState()>:
c0023038:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002303c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0023043:	90                   	nop
c0023044:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0023046 <PCI::~PCI()>:
c0023046:	83 ec 0c             	sub    esp,0xc
c0023049:	ba b0 67 02 c0       	mov    edx,0xc00267b0
c002304e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023052:	89 10                	mov    DWORD PTR [eax],edx
c0023054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023058:	83 ec 0c             	sub    esp,0xc
c002305b:	50                   	push   eax
c002305c:	e8 ab aa fe ff       	call   c000db0c <Bus::~Bus()>
c0023061:	83 c4 10             	add    esp,0x10
c0023064:	90                   	nop
c0023065:	83 c4 0c             	add    esp,0xc
c0023068:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002306a <PCI::~PCI()>:
c002306a:	83 ec 0c             	sub    esp,0xc
c002306d:	83 ec 0c             	sub    esp,0xc
c0023070:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023074:	e8 cd ff ff ff       	call   c0023046 <PCI::~PCI()>
c0023079:	83 c4 10             	add    esp,0x10
c002307c:	83 ec 08             	sub    esp,0x8
c002307f:	68 5c 01 00 00       	push   0x15c
c0023084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023088:	e8 8d 9b fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002308d:	83 c4 10             	add    esp,0x10
c0023090:	83 c4 0c             	add    esp,0xc
c0023093:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0023094 <IDE::~IDE()>:
c0023094:	83 ec 0c             	sub    esp,0xc
c0023097:	ba 64 68 02 c0       	mov    edx,0xc0026864
c002309c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a0:	89 10                	mov    DWORD PTR [eax],edx
c00230a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230a6:	83 ec 0c             	sub    esp,0xc
c00230a9:	50                   	push   eax
c00230aa:	e8 a5 b5 fe ff       	call   c000e654 <HardDiskController::~HardDiskController()>
c00230af:	83 c4 10             	add    esp,0x10
c00230b2:	90                   	nop
c00230b3:	83 c4 0c             	add    esp,0xc
c00230b6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00230b8 <IDE::~IDE()>:
c00230b8:	83 ec 0c             	sub    esp,0xc
c00230bb:	83 ec 0c             	sub    esp,0xc
c00230be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230c2:	e8 cd ff ff ff       	call   c0023094 <IDE::~IDE()>
c00230c7:	83 c4 10             	add    esp,0x10
c00230ca:	83 ec 08             	sub    esp,0x8
c00230cd:	68 70 02 00 00       	push   0x270
c00230d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00230d6:	e8 3f 9b fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00230db:	83 c4 10             	add    esp,0x10
c00230de:	83 c4 0c             	add    esp,0xc
c00230e1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00230e2 <SATABus::~SATABus()>:
c00230e2:	83 ec 0c             	sub    esp,0xc
c00230e5:	ba 20 69 02 c0       	mov    edx,0xc0026920
c00230ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230ee:	89 10                	mov    DWORD PTR [eax],edx
c00230f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00230f4:	83 ec 0c             	sub    esp,0xc
c00230f7:	50                   	push   eax
c00230f8:	e8 57 b5 fe ff       	call   c000e654 <HardDiskController::~HardDiskController()>
c00230fd:	83 c4 10             	add    esp,0x10
c0023100:	90                   	nop
c0023101:	83 c4 0c             	add    esp,0xc
c0023104:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0023106 <SATABus::~SATABus()>:
c0023106:	83 ec 0c             	sub    esp,0xc
c0023109:	83 ec 0c             	sub    esp,0xc
c002310c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023110:	e8 cd ff ff ff       	call   c00230e2 <SATABus::~SATABus()>
c0023115:	83 c4 10             	add    esp,0x10
c0023118:	83 ec 08             	sub    esp,0x8
c002311b:	68 64 01 00 00       	push   0x164
c0023120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023124:	e8 f1 9a fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023129:	83 c4 10             	add    esp,0x10
c002312c:	83 c4 0c             	add    esp,0xc
c002312f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0023130 <ATA::~ATA()>:
c0023130:	83 ec 0c             	sub    esp,0xc
c0023133:	ba 98 69 02 c0       	mov    edx,0xc0026998
c0023138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002313c:	89 10                	mov    DWORD PTR [eax],edx
c002313e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023142:	83 ec 0c             	sub    esp,0xc
c0023145:	50                   	push   eax
c0023146:	e8 eb b5 fe ff       	call   c000e736 <PhysicalDisk::~PhysicalDisk()>
c002314b:	83 c4 10             	add    esp,0x10
c002314e:	90                   	nop
c002314f:	83 c4 0c             	add    esp,0xc
c0023152:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0023154 <ATA::~ATA()>:
c0023154:	83 ec 0c             	sub    esp,0xc
c0023157:	83 ec 0c             	sub    esp,0xc
c002315a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002315e:	e8 cd ff ff ff       	call   c0023130 <ATA::~ATA()>
c0023163:	83 c4 10             	add    esp,0x10
c0023166:	83 ec 08             	sub    esp,0x8
c0023169:	68 7c 01 00 00       	push   0x17c
c002316e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023172:	e8 a3 9a fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023177:	83 c4 10             	add    esp,0x10
c002317a:	83 c4 0c             	add    esp,0xc
c002317d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c002317e <ATAPI::~ATAPI()>:
c002317e:	83 ec 0c             	sub    esp,0xc
c0023181:	ba fc 69 02 c0       	mov    edx,0xc00269fc
c0023186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002318a:	89 10                	mov    DWORD PTR [eax],edx
c002318c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023190:	83 ec 0c             	sub    esp,0xc
c0023193:	50                   	push   eax
c0023194:	e8 9d b5 fe ff       	call   c000e736 <PhysicalDisk::~PhysicalDisk()>
c0023199:	83 c4 10             	add    esp,0x10
c002319c:	90                   	nop
c002319d:	83 c4 0c             	add    esp,0xc
c00231a0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00231a2 <ATAPI::~ATAPI()>:
c00231a2:	83 ec 0c             	sub    esp,0xc
c00231a5:	83 ec 0c             	sub    esp,0xc
c00231a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231ac:	e8 cd ff ff ff       	call   c002317e <ATAPI::~ATAPI()>
c00231b1:	83 c4 10             	add    esp,0x10
c00231b4:	83 ec 08             	sub    esp,0x8
c00231b7:	68 84 01 00 00       	push   0x184
c00231bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231c0:	e8 55 9a fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00231c5:	83 c4 10             	add    esp,0x10
c00231c8:	83 c4 0c             	add    esp,0xc
c00231cb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00231cc <SATA::~SATA()>:
c00231cc:	83 ec 0c             	sub    esp,0xc
c00231cf:	ba 38 6c 02 c0       	mov    edx,0xc0026c38
c00231d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231d8:	89 10                	mov    DWORD PTR [eax],edx
c00231da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00231de:	83 ec 0c             	sub    esp,0xc
c00231e1:	50                   	push   eax
c00231e2:	e8 4f b5 fe ff       	call   c000e736 <PhysicalDisk::~PhysicalDisk()>
c00231e7:	83 c4 10             	add    esp,0x10
c00231ea:	90                   	nop
c00231eb:	83 c4 0c             	add    esp,0xc
c00231ee:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00231f0 <SATA::~SATA()>:
c00231f0:	83 ec 0c             	sub    esp,0xc
c00231f3:	83 ec 0c             	sub    esp,0xc
c00231f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00231fa:	e8 cd ff ff ff       	call   c00231cc <SATA::~SATA()>
c00231ff:	83 c4 10             	add    esp,0x10
c0023202:	83 ec 08             	sub    esp,0x8
c0023205:	68 7c 01 00 00       	push   0x17c
c002320a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002320e:	e8 07 9a fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023213:	83 c4 10             	add    esp,0x10
c0023216:	83 c4 0c             	add    esp,0xc
c0023219:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002321a <SATAPI::~SATAPI()>:
c002321a:	83 ec 0c             	sub    esp,0xc
c002321d:	ba a4 6d 02 c0       	mov    edx,0xc0026da4
c0023222:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023226:	89 10                	mov    DWORD PTR [eax],edx
c0023228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002322c:	83 ec 0c             	sub    esp,0xc
c002322f:	50                   	push   eax
c0023230:	e8 01 b5 fe ff       	call   c000e736 <PhysicalDisk::~PhysicalDisk()>
c0023235:	83 c4 10             	add    esp,0x10
c0023238:	90                   	nop
c0023239:	83 c4 0c             	add    esp,0xc
c002323c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002323e <SATAPI::~SATAPI()>:
c002323e:	83 ec 0c             	sub    esp,0xc
c0023241:	83 ec 0c             	sub    esp,0xc
c0023244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023248:	e8 cd ff ff ff       	call   c002321a <SATAPI::~SATAPI()>
c002324d:	83 c4 10             	add    esp,0x10
c0023250:	83 ec 08             	sub    esp,0x8
c0023253:	68 84 01 00 00       	push   0x184
c0023258:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002325c:	e8 b9 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023261:	83 c4 10             	add    esp,0x10
c0023264:	83 c4 0c             	add    esp,0xc
c0023267:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0023268 <AVX::~AVX()>:
c0023268:	83 ec 0c             	sub    esp,0xc
c002326b:	ba e4 6d 02 c0       	mov    edx,0xc0026de4
c0023270:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023274:	89 10                	mov    DWORD PTR [eax],edx
c0023276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002327a:	83 ec 0c             	sub    esp,0xc
c002327d:	50                   	push   eax
c002327e:	e8 39 b5 fe ff       	call   c000e7bc <FPU::~FPU()>
c0023283:	83 c4 10             	add    esp,0x10
c0023286:	90                   	nop
c0023287:	83 c4 0c             	add    esp,0xc
c002328a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c002328c <AVX::~AVX()>:
c002328c:	83 ec 0c             	sub    esp,0xc
c002328f:	83 ec 0c             	sub    esp,0xc
c0023292:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023296:	e8 cd ff ff ff       	call   c0023268 <AVX::~AVX()>
c002329b:	83 c4 10             	add    esp,0x10
c002329e:	83 ec 08             	sub    esp,0x8
c00232a1:	68 58 01 00 00       	push   0x158
c00232a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232aa:	e8 6b 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00232af:	83 c4 10             	add    esp,0x10
c00232b2:	83 c4 0c             	add    esp,0xc
c00232b5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c00232b8 <MMX::~MMX()>:
c00232b8:	83 ec 0c             	sub    esp,0xc
c00232bb:	ba 24 6e 02 c0       	mov    edx,0xc0026e24
c00232c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232c4:	89 10                	mov    DWORD PTR [eax],edx
c00232c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00232ca:	83 ec 0c             	sub    esp,0xc
c00232cd:	50                   	push   eax
c00232ce:	e8 e9 b4 fe ff       	call   c000e7bc <FPU::~FPU()>
c00232d3:	83 c4 10             	add    esp,0x10
c00232d6:	90                   	nop
c00232d7:	83 c4 0c             	add    esp,0xc
c00232da:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00232dc <MMX::~MMX()>:
c00232dc:	83 ec 0c             	sub    esp,0xc
c00232df:	83 ec 0c             	sub    esp,0xc
c00232e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232e6:	e8 cd ff ff ff       	call   c00232b8 <MMX::~MMX()>
c00232eb:	83 c4 10             	add    esp,0x10
c00232ee:	83 ec 08             	sub    esp,0x8
c00232f1:	68 58 01 00 00       	push   0x158
c00232f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00232fa:	e8 1b 99 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00232ff:	83 c4 10             	add    esp,0x10
c0023302:	83 c4 0c             	add    esp,0xc
c0023305:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0023308 <SSE::~SSE()>:
c0023308:	83 ec 0c             	sub    esp,0xc
c002330b:	ba 64 6e 02 c0       	mov    edx,0xc0026e64
c0023310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023314:	89 10                	mov    DWORD PTR [eax],edx
c0023316:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002331a:	83 ec 0c             	sub    esp,0xc
c002331d:	50                   	push   eax
c002331e:	e8 99 b4 fe ff       	call   c000e7bc <FPU::~FPU()>
c0023323:	83 c4 10             	add    esp,0x10
c0023326:	90                   	nop
c0023327:	83 c4 0c             	add    esp,0xc
c002332a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c002332c <SSE::~SSE()>:
c002332c:	83 ec 0c             	sub    esp,0xc
c002332f:	83 ec 0c             	sub    esp,0xc
c0023332:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023336:	e8 cd ff ff ff       	call   c0023308 <SSE::~SSE()>
c002333b:	83 c4 10             	add    esp,0x10
c002333e:	83 ec 08             	sub    esp,0x8
c0023341:	68 58 01 00 00       	push   0x158
c0023346:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002334a:	e8 cb 98 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002334f:	83 c4 10             	add    esp,0x10
c0023352:	83 c4 0c             	add    esp,0xc
c0023355:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0023358 <x87::~x87()>:
c0023358:	83 ec 0c             	sub    esp,0xc
c002335b:	ba f8 6e 02 c0       	mov    edx,0xc0026ef8
c0023360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023364:	89 10                	mov    DWORD PTR [eax],edx
c0023366:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002336a:	83 ec 0c             	sub    esp,0xc
c002336d:	50                   	push   eax
c002336e:	e8 49 b4 fe ff       	call   c000e7bc <FPU::~FPU()>
c0023373:	83 c4 10             	add    esp,0x10
c0023376:	90                   	nop
c0023377:	83 c4 0c             	add    esp,0xc
c002337a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002337c <x87::~x87()>:
c002337c:	83 ec 0c             	sub    esp,0xc
c002337f:	83 ec 0c             	sub    esp,0xc
c0023382:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023386:	e8 cd ff ff ff       	call   c0023358 <x87::~x87()>
c002338b:	83 c4 10             	add    esp,0x10
c002338e:	83 ec 08             	sub    esp,0x8
c0023391:	68 58 01 00 00       	push   0x158
c0023396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002339a:	e8 7b 98 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002339f:	83 c4 10             	add    esp,0x10
c00233a2:	83 c4 0c             	add    esp,0xc
c00233a5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00233a6 <IOAPIC::~IOAPIC()>:
c00233a6:	83 ec 0c             	sub    esp,0xc
c00233a9:	ba 50 70 02 c0       	mov    edx,0xc0027050
c00233ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b2:	89 10                	mov    DWORD PTR [eax],edx
c00233b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00233b8:	83 ec 0c             	sub    esp,0xc
c00233bb:	50                   	push   eax
c00233bc:	e8 7b ad fe ff       	call   c000e13c <Device::~Device()>
c00233c1:	83 c4 10             	add    esp,0x10
c00233c4:	90                   	nop
c00233c5:	83 c4 0c             	add    esp,0xc
c00233c8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00233ca <IOAPIC::~IOAPIC()>:
c00233ca:	83 ec 0c             	sub    esp,0xc
c00233cd:	83 ec 0c             	sub    esp,0xc
c00233d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233d4:	e8 cd ff ff ff       	call   c00233a6 <IOAPIC::~IOAPIC()>
c00233d9:	83 c4 10             	add    esp,0x10
c00233dc:	83 ec 08             	sub    esp,0x8
c00233df:	68 68 01 00 00       	push   0x168
c00233e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00233e8:	e8 2d 98 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00233ed:	83 c4 10             	add    esp,0x10
c00233f0:	83 c4 0c             	add    esp,0xc
c00233f3:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00233f4 <APIC::~APIC()>:
c00233f4:	83 ec 0c             	sub    esp,0xc
c00233f7:	ba 08 70 02 c0       	mov    edx,0xc0027008
c00233fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023400:	89 10                	mov    DWORD PTR [eax],edx
c0023402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023406:	83 ec 0c             	sub    esp,0xc
c0023409:	50                   	push   eax
c002340a:	e8 1d b8 fe ff       	call   c000ec2c <InterruptController::~InterruptController()>
c002340f:	83 c4 10             	add    esp,0x10
c0023412:	90                   	nop
c0023413:	83 c4 0c             	add    esp,0xc
c0023416:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0023418 <APIC::~APIC()>:
c0023418:	83 ec 0c             	sub    esp,0xc
c002341b:	83 ec 0c             	sub    esp,0xc
c002341e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023422:	e8 cd ff ff ff       	call   c00233f4 <APIC::~APIC()>
c0023427:	83 c4 10             	add    esp,0x10
c002342a:	83 ec 08             	sub    esp,0x8
c002342d:	68 58 21 00 00       	push   0x2158
c0023432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023436:	e8 df 97 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c002343b:	83 c4 10             	add    esp,0x10
c002343e:	83 c4 0c             	add    esp,0xc
c0023441:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0023442 <PIC::~PIC()>:
c0023442:	83 ec 0c             	sub    esp,0xc
c0023445:	ba a0 70 02 c0       	mov    edx,0xc00270a0
c002344a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002344e:	89 10                	mov    DWORD PTR [eax],edx
c0023450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023454:	83 ec 0c             	sub    esp,0xc
c0023457:	50                   	push   eax
c0023458:	e8 cf b7 fe ff       	call   c000ec2c <InterruptController::~InterruptController()>
c002345d:	83 c4 10             	add    esp,0x10
c0023460:	90                   	nop
c0023461:	83 c4 0c             	add    esp,0xc
c0023464:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0023466 <PIC::~PIC()>:
c0023466:	83 ec 0c             	sub    esp,0xc
c0023469:	83 ec 0c             	sub    esp,0xc
c002346c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023470:	e8 cd ff ff ff       	call   c0023442 <PIC::~PIC()>
c0023475:	83 c4 10             	add    esp,0x10
c0023478:	83 ec 08             	sub    esp,0x8
c002347b:	68 58 21 00 00       	push   0x2158
c0023480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023484:	e8 91 97 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023489:	83 c4 10             	add    esp,0x10
c002348c:	83 c4 0c             	add    esp,0xc
c002348f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0023490 <APICTimer::~APICTimer()>:
c0023490:	83 ec 0c             	sub    esp,0xc
c0023493:	ba f4 70 02 c0       	mov    edx,0xc00270f4
c0023498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002349c:	89 10                	mov    DWORD PTR [eax],edx
c002349e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234a2:	83 ec 0c             	sub    esp,0xc
c00234a5:	50                   	push   eax
c00234a6:	e8 d1 d5 fe ff       	call   c0010a7c <Timer::~Timer()>
c00234ab:	83 c4 10             	add    esp,0x10
c00234ae:	90                   	nop
c00234af:	83 c4 0c             	add    esp,0xc
c00234b2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00234b4 <APICTimer::~APICTimer()>:
c00234b4:	83 ec 0c             	sub    esp,0xc
c00234b7:	83 ec 0c             	sub    esp,0xc
c00234ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234be:	e8 cd ff ff ff       	call   c0023490 <APICTimer::~APICTimer()>
c00234c3:	83 c4 10             	add    esp,0x10
c00234c6:	83 ec 08             	sub    esp,0x8
c00234c9:	68 60 01 00 00       	push   0x160
c00234ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00234d2:	e8 43 97 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c00234d7:	83 c4 10             	add    esp,0x10
c00234da:	83 c4 0c             	add    esp,0xc
c00234dd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00234e0 <PIT::~PIT()>:
c00234e0:	83 ec 0c             	sub    esp,0xc
c00234e3:	ba 44 71 02 c0       	mov    edx,0xc0027144
c00234e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234ec:	89 10                	mov    DWORD PTR [eax],edx
c00234ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00234f2:	83 ec 0c             	sub    esp,0xc
c00234f5:	50                   	push   eax
c00234f6:	e8 81 d5 fe ff       	call   c0010a7c <Timer::~Timer()>
c00234fb:	83 c4 10             	add    esp,0x10
c00234fe:	90                   	nop
c00234ff:	83 c4 0c             	add    esp,0xc
c0023502:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0023504 <PIT::~PIT()>:
c0023504:	83 ec 0c             	sub    esp,0xc
c0023507:	83 ec 0c             	sub    esp,0xc
c002350a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002350e:	e8 cd ff ff ff       	call   c00234e0 <PIT::~PIT()>
c0023513:	83 c4 10             	add    esp,0x10
c0023516:	83 ec 08             	sub    esp,0x8
c0023519:	68 5c 01 00 00       	push   0x15c
c002351e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023522:	e8 f3 96 fe ff       	call   c000cc1a <operator delete(void*, unsigned long)>
c0023527:	83 c4 10             	add    esp,0x10
c002352a:	83 c4 0c             	add    esp,0xc
c002352d:	c3                   	ret    
