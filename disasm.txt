
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d f8 00 00       	call   c000f82d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 70 02 00       	call   c0027088 <_init>
c0000025:	c3                   	ret    
c0000026:	bb e4 7b 02 c0       	mov    ebx,0xc0027be4
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb f0 7b 02 c0    	cmp    ebx,0xc0027bf0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 18 bf 02 c0       	mov    eax,0xc002bf18
c0000049:	3d 18 bf 02 c0       	cmp    eax,0xc002bf18
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 18 bf 02 c0       	push   0xc002bf18
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 18 bf 02 c0       	mov    eax,0xc002bf18
c0000075:	2d 18 bf 02 c0       	sub    eax,0xc002bf18
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 18 bf 02 c0       	push   0xc002bf18
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 48 c5 02 c0 00 	cmp    BYTE PTR ds:0xc002c548,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb f8 7b 02 c0       	mov    ebx,0xc0027bf8
c00000bb:	81 eb f4 7b 02 c0    	sub    ebx,0xc0027bf4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be f4 7b 02 c0       	mov    esi,0xc0027bf4
c00000ca:	a1 4c c5 02 c0       	mov    eax,ds:0xc002c54c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 4c c5 02 c0       	mov    ds:0xc002c54c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 4c c5 02 c0       	mov    eax,ds:0xc002c54c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 18 bf 02 c0       	push   0xc002bf18
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 48 c5 02 c0 01 	mov    BYTE PTR ds:0xc002c548,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 50 c5 02 c0       	push   0xc002c550
c000012c:	68 18 bf 02 c0       	push   0xc002bf18
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <prepareTramp>:
c0000150:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000157:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c000015e:	50                   	push   eax
c000015f:	0f 20 d8             	mov    eax,cr3
c0000162:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000167:	58                   	pop    eax
c0000168:	c3                   	ret    

c0000169 <voodooXADD>:
c0000169:	55                   	push   ebp
c000016a:	89 e5                	mov    ebp,esp
c000016c:	60                   	pusha  
c000016d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000170:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0000173:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0000176:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000179:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000017c:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c000017f:	0f 02 ff             	lar    edi,di
c0000182:	c1 ef 0d             	shr    edi,0xd
c0000185:	66 81 e7 03 00       	and    di,0x3
c000018a:	75 09                	jne    c0000195 <voodooXADD.usermode>
c000018c:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c000018f:	81 c4 14 00 00 00    	add    esp,0x14

c0000195 <voodooXADD.usermode>:
c0000195:	89 35 30 02 00 c0    	mov    DWORD PTR ds:0xc0000230,esi
c000019b:	89 25 2c 02 00 c0    	mov    DWORD PTR ds:0xc000022c,esp
c00001a1:	60                   	pusha  
c00001a2:	b0 90                	mov    al,0x90
c00001a4:	b9 20 00 00 00       	mov    ecx,0x20
c00001a9:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001ae:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001b0:	61                   	popa   
c00001b1:	60                   	pusha  
c00001b2:	89 d6                	mov    esi,edx
c00001b4:	bf 03 02 00 c0       	mov    edi,0xc0000203
c00001b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001bb:	61                   	popa   
c00001bc:	60                   	pusha  
c00001bd:	89 d6                	mov    esi,edx
c00001bf:	bf 13 02 00 c0       	mov    edi,0xc0000213
c00001c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00001c6:	61                   	popa   
c00001c7:	b1 90                	mov    cl,0x90
c00001c9:	85 db                	test   ebx,ebx
c00001cb:	74 06                	je     c00001d3 <voodooXADD.skipChange>
c00001cd:	8a 8b 02 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdfe]

c00001d3 <voodooXADD.skipChange>:
c00001d3:	88 8b 03 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdfd],cl
c00001d9:	80 ab 04 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdfc],0x3a
c00001e0:	88 8b 13 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffded],cl
c00001e6:	80 ab 14 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffdec],0xbe
c00001ed:	89 c4                	mov    esp,eax
c00001ef:	81 c4 10 00 00 00    	add    esp,0x10
c00001f5:	5f                   	pop    edi
c00001f6:	5e                   	pop    esi
c00001f7:	5d                   	pop    ebp
c00001f8:	5b                   	pop    ebx
c00001f9:	5b                   	pop    ebx
c00001fa:	5a                   	pop    edx
c00001fb:	59                   	pop    ecx
c00001fc:	58                   	pop    eax
c00001fd:	8b 25 30 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000230

c0000203 <voodooXADD.helper>:
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	90                   	nop
c0000217:	90                   	nop
c0000218:	90                   	nop
c0000219:	90                   	nop
c000021a:	90                   	nop
c000021b:	90                   	nop
c000021c:	90                   	nop
c000021d:	90                   	nop
c000021e:	90                   	nop
c000021f:	90                   	nop
c0000220:	90                   	nop
c0000221:	90                   	nop
c0000222:	90                   	nop
c0000223:	8b 25 2c 02 00 c0    	mov    esp,DWORD PTR ds:0xc000022c
c0000229:	61                   	popa   
c000022a:	c9                   	leave  
c000022b:	c3                   	ret    

c000022c <voodooXADD.oldStack>:
c000022c:	00 00                	add    BYTE PTR [eax],al
	...

c0000230 <voodooXADD.newStack>:
c0000230:	00 00                	add    BYTE PTR [eax],al
	...

c0000234 <doTPAUSE>:
c0000234:	fb                   	sti    
c0000235:	31 c0                	xor    eax,eax
c0000237:	31 d2                	xor    edx,edx
c0000239:	66 0f ae f0          	tpause eax
c000023d:	c3                   	ret    

c000023e <hasLegacyFPU>:
c000023e:	0f 20 c2             	mov    edx,cr0
c0000241:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000247:	0f 22 c2             	mov    cr0,edx
c000024a:	db e3                	fninit 
c000024c:	dd 3d 61 02 00 c0    	fnstsw WORD PTR ds:0xc0000261
c0000252:	31 c0                	xor    eax,eax
c0000254:	66 81 3d 61 02 00 c0 00 00 	cmp    WORD PTR ds:0xc0000261,0x0
c000025d:	75 01                	jne    c0000260 <hasLegacyFPU.nofpu>

c000025f <hasLegacyFPU.hasfpu>:
c000025f:	40                   	inc    eax

c0000260 <hasLegacyFPU.nofpu>:
c0000260:	c3                   	ret    

c0000261 <testword>:
c0000261:	aa                   	stos   BYTE PTR es:[edi],al
c0000262:	55                   	push   ebp

c0000263 <is486>:
c0000263:	0f 09                	wbinvd 
c0000265:	31 c0                	xor    eax,eax
c0000267:	40                   	inc    eax
c0000268:	c3                   	ret    
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	90                   	nop
c000026f:	90                   	nop
c0000270:	90                   	nop
c0000271:	90                   	nop
c0000272:	90                   	nop
c0000273:	90                   	nop
c0000274:	90                   	nop
c0000275:	90                   	nop
c0000276:	90                   	nop
c0000277:	90                   	nop
c0000278:	90                   	nop
c0000279:	90                   	nop
c000027a:	90                   	nop
c000027b:	90                   	nop
c000027c:	90                   	nop
c000027d:	90                   	nop
c000027e:	90                   	nop
c000027f:	90                   	nop
c0000280:	90                   	nop
c0000281:	90                   	nop
c0000282:	90                   	nop
c0000283:	90                   	nop
c0000284:	90                   	nop
c0000285:	90                   	nop
c0000286:	90                   	nop
c0000287:	90                   	nop
c0000288:	90                   	nop
c0000289:	90                   	nop
c000028a:	90                   	nop
c000028b:	90                   	nop
c000028c:	90                   	nop
c000028d:	90                   	nop
c000028e:	90                   	nop
c000028f:	90                   	nop
c0000290:	90                   	nop
c0000291:	90                   	nop
c0000292:	90                   	nop
c0000293:	90                   	nop
c0000294:	90                   	nop
c0000295:	90                   	nop
c0000296:	31 c0                	xor    eax,eax
c0000298:	c3                   	ret    

c0000299 <detectCPUID>:
c0000299:	9c                   	pushf  
c000029a:	9c                   	pushf  
c000029b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002a2:	9d                   	popf   
c00002a3:	9c                   	pushf  
c00002a4:	58                   	pop    eax
c00002a5:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002a8:	9d                   	popf   
c00002a9:	25 00 00 20 00       	and    eax,0x200000
c00002ae:	c3                   	ret    

c00002af <goToVM86>:
c00002af:	55                   	push   ebp
c00002b0:	89 e5                	mov    ebp,esp
c00002b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00002b5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00002b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00002bb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00002be:	25 ff ff 00 00       	and    eax,0xffff
c00002c3:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00002c9:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00002cf:	81 e2 ff ff 00 00    	and    edx,0xffff
c00002d5:	52                   	push   edx
c00002d6:	51                   	push   ecx
c00002d7:	68 02 02 02 00       	push   0x20202
c00002dc:	53                   	push   ebx
c00002dd:	50                   	push   eax
c00002de:	cf                   	iret   

c00002df <goToUsermode>:
c00002df:	55                   	push   ebp
c00002e0:	89 e5                	mov    ebp,esp
c00002e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002e5:	66 b8 23 00          	mov    ax,0x23
c00002e9:	66 8e d8             	mov    ds,ax
c00002ec:	66 8e c0             	mov    es,ax
c00002ef:	66 8e e0             	mov    fs,ax
c00002f2:	66 8e e8             	mov    gs,ax
c00002f5:	89 e0                	mov    eax,esp
c00002f7:	68 23 00 00 00       	push   0x23
c00002fc:	50                   	push   eax
c00002fd:	68 02 02 00 00       	push   0x202
c0000302:	68 1b 00 00 00       	push   0x1b
c0000307:	53                   	push   ebx
c0000308:	cf                   	iret   

c0000309 <switchToThreadASMFirstTime>:
c0000309:	9c                   	pushf  
c000030a:	fa                   	cli    
c000030b:	50                   	push   eax
c000030c:	53                   	push   ebx
c000030d:	51                   	push   ecx
c000030e:	52                   	push   edx
c000030f:	56                   	push   esi
c0000310:	57                   	push   edi
c0000311:	55                   	push   ebp
c0000312:	e9 11 00 00 00       	jmp    c0000328 <commonThreadSwitch>

c0000317 <switchToThreadASM>:
c0000317:	9c                   	pushf  
c0000318:	50                   	push   eax
c0000319:	53                   	push   ebx
c000031a:	51                   	push   ecx
c000031b:	52                   	push   edx
c000031c:	56                   	push   esi
c000031d:	57                   	push   edi
c000031e:	55                   	push   ebp
c000031f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000325:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000328 <commonThreadSwitch>:
c0000328:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000032c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000332:	8b 06                	mov    eax,DWORD PTR [esi]
c0000334:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000337:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000033a:	0f 20 d9             	mov    ecx,cr3
c000033d:	39 c8                	cmp    eax,ecx
c000033f:	74 03                	je     c0000344 <commonThreadSwitch.doneVAS>
c0000341:	0f 22 d8             	mov    cr3,eax

c0000344 <commonThreadSwitch.doneVAS>:
c0000344:	85 d2                	test   edx,edx
c0000346:	75 11                	jne    c0000359 <commonThreadSwitch.firstTime>
c0000348:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000034b:	e8 e0 c5 01 00       	call   c001c930 <changeTSS>
c0000350:	5d                   	pop    ebp
c0000351:	5f                   	pop    edi
c0000352:	5e                   	pop    esi
c0000353:	5a                   	pop    edx
c0000354:	59                   	pop    ecx
c0000355:	5b                   	pop    ebx
c0000356:	58                   	pop    eax
c0000357:	9d                   	popf   
c0000358:	c3                   	ret    

c0000359 <commonThreadSwitch.firstTime>:
c0000359:	fa                   	cli    
c000035a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000035d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000362:	60                   	pusha  
c0000363:	e8 37 22 01 00       	call   c001259f <mapVASFirstTime>
c0000368:	61                   	popa   
c0000369:	89 c4                	mov    esp,eax
c000036b:	56                   	push   esi
c000036c:	52                   	push   edx
c000036d:	e8 be c5 01 00       	call   c001c930 <changeTSS>
c0000372:	5a                   	pop    edx
c0000373:	5e                   	pop    esi
c0000374:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000037b:	5d                   	pop    ebp
c000037c:	5f                   	pop    edi
c000037d:	5e                   	pop    esi
c000037e:	59                   	pop    ecx
c000037f:	59                   	pop    ecx
c0000380:	5b                   	pop    ebx
c0000381:	58                   	pop    eax
c0000382:	81 c4 04 00 00 00    	add    esp,0x4
c0000388:	6a 02                	push   0x2
c000038a:	9d                   	popf   
c000038b:	52                   	push   edx
c000038c:	e8 0c ca 01 00       	call   c001cd9d <taskStartupFunction>
c0000391:	5a                   	pop    edx
c0000392:	50                   	push   eax
c0000393:	ff d2                	call   edx
c0000395:	e8 ba cf 01 00       	call   c001d354 <taskReturned>
c000039a:	e9 fb ff ff ff       	jmp    c000039a <commonThreadSwitch.firstTime+0x41>

c000039f <asmQuickAcquireLock>:
c000039f:	55                   	push   ebp
c00003a0:	89 e5                	mov    ebp,esp
c00003a2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003a5 <asmQuickAcquireLock.retry>:
c00003a5:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003aa:	72 02                	jb     c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003ac:	fa                   	cli    
c00003ad:	c3                   	ret    

c00003ae <asmQuickAcquireLock.spin_with_pause>:
c00003ae:	f3 90                	pause  
c00003b0:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003b6:	75 f6                	jne    c00003ae <asmQuickAcquireLock.spin_with_pause>
c00003b8:	e9 e8 ff ff ff       	jmp    c00003a5 <asmQuickAcquireLock.retry>

c00003bd <asmQuickReleaseLock>:
c00003bd:	55                   	push   ebp
c00003be:	89 e5                	mov    ebp,esp
c00003c0:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003c7:	5d                   	pop    ebp
c00003c8:	c3                   	ret    

c00003c9 <asmAcquireLock>:
c00003c9:	55                   	push   ebp
c00003ca:	89 e5                	mov    ebp,esp
c00003cc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003cf <asmAcquireLock.retry>:
c00003cf:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003d4:	72 05                	jb     c00003db <asmAcquireLock.spin_with_pause>
c00003d6:	9c                   	pushf  
c00003d7:	58                   	pop    eax
c00003d8:	fa                   	cli    
c00003d9:	5d                   	pop    ebp
c00003da:	c3                   	ret    

c00003db <asmAcquireLock.spin_with_pause>:
c00003db:	f3 90                	pause  
c00003dd:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003e3:	75 f6                	jne    c00003db <asmAcquireLock.spin_with_pause>
c00003e5:	e9 e5 ff ff ff       	jmp    c00003cf <asmAcquireLock.retry>

c00003ea <asmReleaseLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003f3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003f9:	52                   	push   edx
c00003fa:	9d                   	popf   
c00003fb:	5d                   	pop    ebp
c00003fc:	c3                   	ret    

c00003fd <loadGDT>:
c00003fd:	0f 01 15 90 c9 02 c0 	lgdtd  ds:0xc002c990
c0000404:	66 b8 10 00          	mov    ax,0x10
c0000408:	66 8e d8             	mov    ds,ax
c000040b:	66 8e c0             	mov    es,ax
c000040e:	66 8e e0             	mov    fs,ax
c0000411:	66 8e e8             	mov    gs,ax
c0000414:	66 8e d0             	mov    ss,ax
c0000417:	e9 00 00 00 00       	jmp    c000041c <flush2>

c000041c <flush2>:
c000041c:	c3                   	ret    

c000041d <isr0>:
c000041d:	fa                   	cli    
c000041e:	68 00 00 00 00       	push   0x0
c0000423:	68 00 00 00 00       	push   0x0
c0000428:	e9 44 01 00 00       	jmp    c0000571 <int_common_stub>

c000042d <isr1>:
c000042d:	fa                   	cli    
c000042e:	6a 00                	push   0x0
c0000430:	6a 01                	push   0x1
c0000432:	e9 3a 01 00 00       	jmp    c0000571 <int_common_stub>

c0000437 <isr2>:
c0000437:	fa                   	cli    
c0000438:	6a 00                	push   0x0
c000043a:	6a 02                	push   0x2
c000043c:	e9 30 01 00 00       	jmp    c0000571 <int_common_stub>

c0000441 <isr3>:
c0000441:	fa                   	cli    
c0000442:	6a 00                	push   0x0
c0000444:	6a 03                	push   0x3
c0000446:	e9 26 01 00 00       	jmp    c0000571 <int_common_stub>

c000044b <isr4>:
c000044b:	fa                   	cli    
c000044c:	6a 00                	push   0x0
c000044e:	6a 04                	push   0x4
c0000450:	e9 1c 01 00 00       	jmp    c0000571 <int_common_stub>

c0000455 <isr5>:
c0000455:	fa                   	cli    
c0000456:	6a 00                	push   0x0
c0000458:	6a 05                	push   0x5
c000045a:	e9 12 01 00 00       	jmp    c0000571 <int_common_stub>

c000045f <isr6>:
c000045f:	fa                   	cli    
c0000460:	6a 00                	push   0x0
c0000462:	6a 06                	push   0x6
c0000464:	e9 08 01 00 00       	jmp    c0000571 <int_common_stub>

c0000469 <isr7>:
c0000469:	fa                   	cli    
c000046a:	6a 00                	push   0x0
c000046c:	6a 07                	push   0x7
c000046e:	e9 fe 00 00 00       	jmp    c0000571 <int_common_stub>

c0000473 <isr8>:
c0000473:	fa                   	cli    
c0000474:	6a 08                	push   0x8
c0000476:	e9 f6 00 00 00       	jmp    c0000571 <int_common_stub>

c000047b <isr9>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 09                	push   0x9
c0000480:	e9 ec 00 00 00       	jmp    c0000571 <int_common_stub>

c0000485 <isr10>:
c0000485:	fa                   	cli    
c0000486:	6a 0a                	push   0xa
c0000488:	e9 e4 00 00 00       	jmp    c0000571 <int_common_stub>

c000048d <isr11>:
c000048d:	fa                   	cli    
c000048e:	6a 0b                	push   0xb
c0000490:	e9 dc 00 00 00       	jmp    c0000571 <int_common_stub>

c0000495 <isr12>:
c0000495:	fa                   	cli    
c0000496:	6a 0c                	push   0xc
c0000498:	e9 d4 00 00 00       	jmp    c0000571 <int_common_stub>

c000049d <isr13>:
c000049d:	fa                   	cli    
c000049e:	6a 0d                	push   0xd
c00004a0:	e9 cc 00 00 00       	jmp    c0000571 <int_common_stub>

c00004a5 <isr14>:
c00004a5:	fa                   	cli    
c00004a6:	6a 0e                	push   0xe
c00004a8:	e9 c4 00 00 00       	jmp    c0000571 <int_common_stub>

c00004ad <isr15>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 0f                	push   0xf
c00004b2:	e9 ba 00 00 00       	jmp    c0000571 <int_common_stub>

c00004b7 <isr16>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 10                	push   0x10
c00004bc:	e9 b0 00 00 00       	jmp    c0000571 <int_common_stub>

c00004c1 <isr17>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 11                	push   0x11
c00004c6:	e9 a6 00 00 00       	jmp    c0000571 <int_common_stub>

c00004cb <isr18>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 12                	push   0x12
c00004d0:	e9 9c 00 00 00       	jmp    c0000571 <int_common_stub>

c00004d5 <irq3>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 23                	push   0x23
c00004da:	e9 92 00 00 00       	jmp    c0000571 <int_common_stub>

c00004df <irq4>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 24                	push   0x24
c00004e4:	e9 88 00 00 00       	jmp    c0000571 <int_common_stub>

c00004e9 <irq5>:
c00004e9:	fa                   	cli    
c00004ea:	6a 00                	push   0x0
c00004ec:	6a 25                	push   0x25
c00004ee:	e9 7e 00 00 00       	jmp    c0000571 <int_common_stub>

c00004f3 <irq6>:
c00004f3:	fa                   	cli    
c00004f4:	6a 00                	push   0x0
c00004f6:	6a 26                	push   0x26
c00004f8:	e9 74 00 00 00       	jmp    c0000571 <int_common_stub>

c00004fd <irq7>:
c00004fd:	fa                   	cli    
c00004fe:	6a 00                	push   0x0
c0000500:	6a 27                	push   0x27
c0000502:	e9 6a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000507 <irq8>:
c0000507:	fa                   	cli    
c0000508:	6a 00                	push   0x0
c000050a:	6a 28                	push   0x28
c000050c:	e9 60 00 00 00       	jmp    c0000571 <int_common_stub>

c0000511 <irq9>:
c0000511:	fa                   	cli    
c0000512:	6a 00                	push   0x0
c0000514:	6a 29                	push   0x29
c0000516:	e9 56 00 00 00       	jmp    c0000571 <int_common_stub>

c000051b <irq10>:
c000051b:	fa                   	cli    
c000051c:	6a 00                	push   0x0
c000051e:	6a 2a                	push   0x2a
c0000520:	e9 4c 00 00 00       	jmp    c0000571 <int_common_stub>

c0000525 <irq11>:
c0000525:	fa                   	cli    
c0000526:	6a 00                	push   0x0
c0000528:	6a 2b                	push   0x2b
c000052a:	e9 42 00 00 00       	jmp    c0000571 <int_common_stub>

c000052f <irq12>:
c000052f:	fa                   	cli    
c0000530:	6a 00                	push   0x0
c0000532:	6a 2c                	push   0x2c
c0000534:	e9 38 00 00 00       	jmp    c0000571 <int_common_stub>

c0000539 <irq13>:
c0000539:	fa                   	cli    
c000053a:	6a 00                	push   0x0
c000053c:	6a 2d                	push   0x2d
c000053e:	e9 2e 00 00 00       	jmp    c0000571 <int_common_stub>

c0000543 <irq14>:
c0000543:	fa                   	cli    
c0000544:	6a 00                	push   0x0
c0000546:	6a 2e                	push   0x2e
c0000548:	e9 24 00 00 00       	jmp    c0000571 <int_common_stub>

c000054d <irq15>:
c000054d:	fa                   	cli    
c000054e:	6a 00                	push   0x0
c0000550:	6a 2f                	push   0x2f
c0000552:	e9 1a 00 00 00       	jmp    c0000571 <int_common_stub>

c0000557 <irq1>:
c0000557:	fa                   	cli    
c0000558:	6a 00                	push   0x0
c000055a:	6a 21                	push   0x21
c000055c:	eb 13                	jmp    c0000571 <int_common_stub>

c000055e <irq2>:
c000055e:	fa                   	cli    
c000055f:	6a 00                	push   0x0
c0000561:	6a 22                	push   0x22
c0000563:	eb 0c                	jmp    c0000571 <int_common_stub>

c0000565 <isr96>:
c0000565:	6a 00                	push   0x0
c0000567:	6a 60                	push   0x60
c0000569:	fb                   	sti    
c000056a:	eb 05                	jmp    c0000571 <int_common_stub>

c000056c <irq0>:
c000056c:	fa                   	cli    
c000056d:	6a 00                	push   0x0
c000056f:	6a 20                	push   0x20

c0000571 <int_common_stub>:
c0000571:	60                   	pusha  
c0000572:	1e                   	push   ds
c0000573:	06                   	push   es
c0000574:	0f a0                	push   fs
c0000576:	0f a8                	push   gs
c0000578:	66 b8 10 00          	mov    ax,0x10
c000057c:	66 8e d8             	mov    ds,ax
c000057f:	66 8e c0             	mov    es,ax
c0000582:	66 8e e0             	mov    fs,ax
c0000585:	66 8e e8             	mov    gs,ax
c0000588:	54                   	push   esp
c0000589:	e8 c9 3e 01 00       	call   c0014457 <int_handler>
c000058e:	81 c4 04 00 00 00    	add    esp,0x4
c0000594:	0f a9                	pop    gs
c0000596:	0f a1                	pop    fs
c0000598:	07                   	pop    es
c0000599:	1f                   	pop    ds
c000059a:	61                   	popa   
c000059b:	81 c4 08 00 00 00    	add    esp,0x8
c00005a1:	cf                   	iret   

c00005a2 <irq16>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 30                	push   0x30
c00005a7:	e9 c5 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ac <irq17>:
c00005ac:	fa                   	cli    
c00005ad:	6a 00                	push   0x0
c00005af:	6a 31                	push   0x31
c00005b1:	e9 bb ff ff ff       	jmp    c0000571 <int_common_stub>

c00005b6 <irq18>:
c00005b6:	fa                   	cli    
c00005b7:	6a 00                	push   0x0
c00005b9:	6a 32                	push   0x32
c00005bb:	e9 b1 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005c0 <irq19>:
c00005c0:	fa                   	cli    
c00005c1:	6a 00                	push   0x0
c00005c3:	6a 33                	push   0x33
c00005c5:	e9 a7 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005ca <irq20>:
c00005ca:	fa                   	cli    
c00005cb:	6a 00                	push   0x0
c00005cd:	6a 34                	push   0x34
c00005cf:	e9 9d ff ff ff       	jmp    c0000571 <int_common_stub>

c00005d4 <irq21>:
c00005d4:	fa                   	cli    
c00005d5:	6a 00                	push   0x0
c00005d7:	6a 35                	push   0x35
c00005d9:	e9 93 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005de <irq22>:
c00005de:	fa                   	cli    
c00005df:	6a 00                	push   0x0
c00005e1:	6a 36                	push   0x36
c00005e3:	e9 89 ff ff ff       	jmp    c0000571 <int_common_stub>

c00005e8 <irq23>:
c00005e8:	fa                   	cli    
c00005e9:	6a 00                	push   0x0
c00005eb:	6a 37                	push   0x37
c00005ed:	e9 7f ff ff ff       	jmp    c0000571 <int_common_stub>

c00005f2 <memcmp>:
c00005f2:	56                   	push   esi
c00005f3:	53                   	push   ebx
c00005f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00005f8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000600:	01 d6                	add    esi,edx
c0000602:	39 f2                	cmp    edx,esi
c0000604:	74 0e                	je     c0000614 <memcmp+0x22>
c0000606:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000609:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000060c:	38 c8                	cmp    al,cl
c000060e:	75 08                	jne    c0000618 <memcmp+0x26>
c0000610:	42                   	inc    edx
c0000611:	43                   	inc    ebx
c0000612:	eb ee                	jmp    c0000602 <memcmp+0x10>
c0000614:	31 c0                	xor    eax,eax
c0000616:	eb 02                	jmp    c000061a <memcmp+0x28>
c0000618:	29 c8                	sub    eax,ecx
c000061a:	5b                   	pop    ebx
c000061b:	5e                   	pop    esi
c000061c:	c3                   	ret    

c000061d <memmove>:
c000061d:	56                   	push   esi
c000061e:	53                   	push   ebx
c000061f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000623:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000627:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000062b:	39 c8                	cmp    eax,ecx
c000062d:	73 12                	jae    c0000641 <memmove+0x24>
c000062f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000632:	89 c3                	mov    ebx,eax
c0000634:	39 f1                	cmp    ecx,esi
c0000636:	74 1a                	je     c0000652 <memmove+0x35>
c0000638:	8a 11                	mov    dl,BYTE PTR [ecx]
c000063a:	43                   	inc    ebx
c000063b:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000063e:	41                   	inc    ecx
c000063f:	eb f3                	jmp    c0000634 <memmove+0x17>
c0000641:	76 0f                	jbe    c0000652 <memmove+0x35>
c0000643:	85 d2                	test   edx,edx
c0000645:	74 0b                	je     c0000652 <memmove+0x35>
c0000647:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c000064b:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c000064f:	4a                   	dec    edx
c0000650:	eb f1                	jmp    c0000643 <memmove+0x26>
c0000652:	5b                   	pop    ebx
c0000653:	5e                   	pop    esi
c0000654:	c3                   	ret    

c0000655 <memcpy>:
c0000655:	57                   	push   edi
c0000656:	56                   	push   esi
c0000657:	53                   	push   ebx
c0000658:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000065c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000660:	89 da                	mov    edx,ebx
c0000662:	89 d9                	mov    ecx,ebx
c0000664:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000668:	83 e2 fc             	and    edx,0xfffffffc
c000066b:	c1 e9 02             	shr    ecx,0x2
c000066e:	89 c7                	mov    edi,eax
c0000670:	fc                   	cld    
c0000671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000673:	8d 0c 16             	lea    ecx,[esi+edx*1]
c0000676:	01 c2                	add    edx,eax
c0000678:	01 de                	add    esi,ebx
c000067a:	39 f1                	cmp    ecx,esi
c000067c:	74 09                	je     c0000687 <memcpy+0x32>
c000067e:	8a 19                	mov    bl,BYTE PTR [ecx]
c0000680:	42                   	inc    edx
c0000681:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000684:	41                   	inc    ecx
c0000685:	eb f3                	jmp    c000067a <memcpy+0x25>
c0000687:	5b                   	pop    ebx
c0000688:	5e                   	pop    esi
c0000689:	5f                   	pop    edi
c000068a:	c3                   	ret    

c000068b <memset>:
c000068b:	53                   	push   ebx
c000068c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000690:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000694:	89 c2                	mov    edx,eax
c0000696:	01 c1                	add    ecx,eax
c0000698:	39 ca                	cmp    edx,ecx
c000069a:	74 0a                	je     c00006a6 <memset+0x1b>
c000069c:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006a0:	42                   	inc    edx
c00006a1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006a4:	eb f2                	jmp    c0000698 <memset+0xd>
c00006a6:	5b                   	pop    ebx
c00006a7:	c3                   	ret    

c00006a8 <strlen>:
c00006a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006ac:	31 c0                	xor    eax,eax
c00006ae:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b2:	74 03                	je     c00006b7 <strlen+0xf>
c00006b4:	40                   	inc    eax
c00006b5:	eb f7                	jmp    c00006ae <strlen+0x6>
c00006b7:	c3                   	ret    

c00006b8 <strpbrk>:
c00006b8:	53                   	push   ebx
c00006b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006bd:	8a 08                	mov    cl,BYTE PTR [eax]
c00006bf:	84 c9                	test   cl,cl
c00006c1:	74 14                	je     c00006d7 <strpbrk+0x1f>
c00006c3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006c7:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006c9:	84 db                	test   bl,bl
c00006cb:	74 07                	je     c00006d4 <strpbrk+0x1c>
c00006cd:	38 cb                	cmp    bl,cl
c00006cf:	74 08                	je     c00006d9 <strpbrk+0x21>
c00006d1:	42                   	inc    edx
c00006d2:	eb f3                	jmp    c00006c7 <strpbrk+0xf>
c00006d4:	40                   	inc    eax
c00006d5:	eb e6                	jmp    c00006bd <strpbrk+0x5>
c00006d7:	31 c0                	xor    eax,eax
c00006d9:	5b                   	pop    ebx
c00006da:	c3                   	ret    

c00006db <strtok>:
c00006db:	56                   	push   esi
c00006dc:	53                   	push   ebx
c00006dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006e5:	85 db                	test   ebx,ebx
c00006e7:	75 0e                	jne    c00006f7 <strtok+0x1c>
c00006e9:	8b 1d 68 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c568
c00006ef:	85 db                	test   ebx,ebx
c00006f1:	75 04                	jne    c00006f7 <strtok+0x1c>
c00006f3:	31 db                	xor    ebx,ebx
c00006f5:	eb 2e                	jmp    c0000725 <strtok+0x4a>
c00006f7:	56                   	push   esi
c00006f8:	53                   	push   ebx
c00006f9:	e8 ba ff ff ff       	call   c00006b8 <strpbrk>
c00006fe:	5a                   	pop    edx
c00006ff:	a3 68 c5 02 c0       	mov    ds:0xc002c568,eax
c0000704:	59                   	pop    ecx
c0000705:	a1 68 c5 02 c0       	mov    eax,ds:0xc002c568
c000070a:	39 d8                	cmp    eax,ebx
c000070c:	75 07                	jne    c0000715 <strtok+0x3a>
c000070e:	43                   	inc    ebx
c000070f:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000713:	eb e2                	jmp    c00006f7 <strtok+0x1c>
c0000715:	85 c0                	test   eax,eax
c0000717:	74 da                	je     c00006f3 <strtok+0x18>
c0000719:	8d 50 01             	lea    edx,[eax+0x1]
c000071c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000071f:	89 15 68 c5 02 c0    	mov    DWORD PTR ds:0xc002c568,edx
c0000725:	89 d8                	mov    eax,ebx
c0000727:	5b                   	pop    ebx
c0000728:	5e                   	pop    esi
c0000729:	c3                   	ret    

c000072a <strcpy>:
c000072a:	53                   	push   ebx
c000072b:	31 d2                	xor    edx,edx
c000072d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000731:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000735:	8d 1c 10             	lea    ebx,[eax+edx*1]
c0000738:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c000073b:	84 c9                	test   cl,cl
c000073d:	74 06                	je     c0000745 <strcpy+0x1b>
c000073f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000742:	42                   	inc    edx
c0000743:	eb ec                	jmp    c0000731 <strcpy+0x7>
c0000745:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000748:	5b                   	pop    ebx
c0000749:	c3                   	ret    

c000074a <strncpy>:
c000074a:	56                   	push   esi
c000074b:	53                   	push   ebx
c000074c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000750:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000754:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0000758:	89 c3                	mov    ebx,eax
c000075a:	85 c9                	test   ecx,ecx
c000075c:	74 1a                	je     c0000778 <strncpy+0x2e>
c000075e:	46                   	inc    esi
c000075f:	43                   	inc    ebx
c0000760:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000763:	49                   	dec    ecx
c0000764:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000767:	84 d2                	test   dl,dl
c0000769:	75 ef                	jne    c000075a <strncpy+0x10>
c000076b:	31 d2                	xor    edx,edx
c000076d:	39 d1                	cmp    ecx,edx
c000076f:	74 07                	je     c0000778 <strncpy+0x2e>
c0000771:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c0000775:	42                   	inc    edx
c0000776:	eb f5                	jmp    c000076d <strncpy+0x23>
c0000778:	5b                   	pop    ebx
c0000779:	5e                   	pop    esi
c000077a:	c3                   	ret    

c000077b <strcmp>:
c000077b:	31 c9                	xor    ecx,ecx
c000077d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000785:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000789:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000078d:	38 d0                	cmp    al,dl
c000078f:	75 08                	jne    c0000799 <strcmp+0x1e>
c0000791:	41                   	inc    ecx
c0000792:	84 c0                	test   al,al
c0000794:	75 e7                	jne    c000077d <strcmp+0x2>
c0000796:	31 c0                	xor    eax,eax
c0000798:	c3                   	ret    
c0000799:	29 d0                	sub    eax,edx
c000079b:	c3                   	ret    

c000079c <strchr>:
c000079c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007a0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007a2:	84 d2                	test   dl,dl
c00007a4:	74 09                	je     c00007af <strchr+0x13>
c00007a6:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007aa:	74 05                	je     c00007b1 <strchr+0x15>
c00007ac:	40                   	inc    eax
c00007ad:	eb f1                	jmp    c00007a0 <strchr+0x4>
c00007af:	31 c0                	xor    eax,eax
c00007b1:	c3                   	ret    

c00007b2 <strncmp>:
c00007b2:	56                   	push   esi
c00007b3:	53                   	push   ebx
c00007b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007bc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c0:	01 d6                	add    esi,edx
c00007c2:	39 f2                	cmp    edx,esi
c00007c4:	74 12                	je     c00007d8 <strncmp+0x26>
c00007c6:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007c9:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007cc:	38 c8                	cmp    al,cl
c00007ce:	75 0c                	jne    c00007dc <strncmp+0x2a>
c00007d0:	42                   	inc    edx
c00007d1:	84 c0                	test   al,al
c00007d3:	74 03                	je     c00007d8 <strncmp+0x26>
c00007d5:	43                   	inc    ebx
c00007d6:	eb ea                	jmp    c00007c2 <strncmp+0x10>
c00007d8:	31 c0                	xor    eax,eax
c00007da:	eb 02                	jmp    c00007de <strncmp+0x2c>
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5b                   	pop    ebx
c00007df:	5e                   	pop    esi
c00007e0:	c3                   	ret    

c00007e1 <strcat>:
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007e6:	89 c1                	mov    ecx,eax
c00007e8:	8d 51 01             	lea    edx,[ecx+0x1]
c00007eb:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007ef:	74 04                	je     c00007f5 <strcat+0x14>
c00007f1:	89 d1                	mov    ecx,edx
c00007f3:	eb f3                	jmp    c00007e8 <strcat+0x7>
c00007f5:	31 d2                	xor    edx,edx
c00007f7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007fb:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c00007fe:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000801:	42                   	inc    edx
c0000802:	84 db                	test   bl,bl
c0000804:	75 f1                	jne    c00007f7 <strcat+0x16>
c0000806:	5b                   	pop    ebx
c0000807:	c3                   	ret    

c0000808 <strncat>:
c0000808:	56                   	push   esi
c0000809:	53                   	push   ebx
c000080a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000080e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000812:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000816:	89 c2                	mov    edx,eax
c0000818:	85 db                	test   ebx,ebx
c000081a:	74 23                	je     c000083f <strncat+0x37>
c000081c:	8d 72 01             	lea    esi,[edx+0x1]
c000081f:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000823:	74 04                	je     c0000829 <strncat+0x21>
c0000825:	89 f2                	mov    edx,esi
c0000827:	eb f3                	jmp    c000081c <strncat+0x14>
c0000829:	8d 34 19             	lea    esi,[ecx+ebx*1]
c000082c:	41                   	inc    ecx
c000082d:	42                   	inc    edx
c000082e:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000831:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000834:	84 db                	test   bl,bl
c0000836:	74 07                	je     c000083f <strncat+0x37>
c0000838:	39 f1                	cmp    ecx,esi
c000083a:	75 f0                	jne    c000082c <strncat+0x24>
c000083c:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000083f:	5b                   	pop    ebx
c0000840:	5e                   	pop    esi
c0000841:	c3                   	ret    

c0000842 <strstr>:
c0000842:	57                   	push   edi
c0000843:	56                   	push   esi
c0000844:	53                   	push   ebx
c0000845:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000849:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000084d:	57                   	push   edi
c000084e:	e8 55 fe ff ff       	call   c00006a8 <strlen>
c0000853:	59                   	pop    ecx
c0000854:	89 c6                	mov    esi,eax
c0000856:	85 c0                	test   eax,eax
c0000858:	74 1f                	je     c0000879 <strstr+0x37>
c000085a:	53                   	push   ebx
c000085b:	e8 48 fe ff ff       	call   c00006a8 <strlen>
c0000860:	5a                   	pop    edx
c0000861:	39 f0                	cmp    eax,esi
c0000863:	72 12                	jb     c0000877 <strstr+0x35>
c0000865:	56                   	push   esi
c0000866:	57                   	push   edi
c0000867:	53                   	push   ebx
c0000868:	e8 85 fd ff ff       	call   c00005f2 <memcmp>
c000086d:	83 c4 0c             	add    esp,0xc
c0000870:	85 c0                	test   eax,eax
c0000872:	74 05                	je     c0000879 <strstr+0x37>
c0000874:	43                   	inc    ebx
c0000875:	eb e3                	jmp    c000085a <strstr+0x18>
c0000877:	31 db                	xor    ebx,ebx
c0000879:	89 d8                	mov    eax,ebx
c000087b:	5b                   	pop    ebx
c000087c:	5e                   	pop    esi
c000087d:	5f                   	pop    edi
c000087e:	c3                   	ret    

c000087f <toupper>:
c000087f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000883:	0f b6 d0             	movzx  edx,al
c0000886:	f6 82 00 7c 02 c0 02 	test   BYTE PTR [edx-0x3ffd8400],0x2
c000088d:	74 03                	je     c0000892 <toupper+0x13>
c000088f:	83 e8 20             	sub    eax,0x20
c0000892:	c3                   	ret    

c0000893 <tolower>:
c0000893:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000897:	0f b6 d0             	movzx  edx,al
c000089a:	f6 82 00 7c 02 c0 01 	test   BYTE PTR [edx-0x3ffd8400],0x1
c00008a1:	74 03                	je     c00008a6 <tolower+0x13>
c00008a3:	83 c0 20             	add    eax,0x20
c00008a6:	c3                   	ret    

c00008a7 <simple_strtoul>:
c00008a7:	55                   	push   ebp
c00008a8:	57                   	push   edi
c00008a9:	56                   	push   esi
c00008aa:	53                   	push   ebx
c00008ab:	83 ec 08             	sub    esp,0x8
c00008ae:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008b2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008b6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008b9:	f6 82 00 7c 02 c0 08 	test   BYTE PTR [edx-0x3ffd8400],0x8
c00008c0:	74 03                	je     c00008c5 <simple_strtoul+0x1e>
c00008c2:	41                   	inc    ecx
c00008c3:	eb f1                	jmp    c00008b6 <simple_strtoul+0xf>
c00008c5:	80 fa 09             	cmp    dl,0x9
c00008c8:	74 f8                	je     c00008c2 <simple_strtoul+0x1b>
c00008ca:	80 fa 2d             	cmp    dl,0x2d
c00008cd:	75 0b                	jne    c00008da <simple_strtoul+0x33>
c00008cf:	41                   	inc    ecx
c00008d0:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c00008d8:	eb 0e                	jmp    c00008e8 <simple_strtoul+0x41>
c00008da:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00008e2:	80 fa 2b             	cmp    dl,0x2b
c00008e5:	75 01                	jne    c00008e8 <simple_strtoul+0x41>
c00008e7:	41                   	inc    ecx
c00008e8:	85 f6                	test   esi,esi
c00008ea:	75 22                	jne    c000090e <simple_strtoul+0x67>
c00008ec:	be 0a 00 00 00       	mov    esi,0xa
c00008f1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008f4:	75 5a                	jne    c0000950 <simple_strtoul+0xa9>
c00008f6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008fa:	50                   	push   eax
c00008fb:	e8 93 ff ff ff       	call   c0000893 <tolower>
c0000900:	5a                   	pop    edx
c0000901:	83 f8 78             	cmp    eax,0x78
c0000904:	74 03                	je     c0000909 <simple_strtoul+0x62>
c0000906:	41                   	inc    ecx
c0000907:	eb 16                	jmp    c000091f <simple_strtoul+0x78>
c0000909:	83 c1 02             	add    ecx,0x2
c000090c:	eb 22                	jmp    c0000930 <simple_strtoul+0x89>
c000090e:	8d 46 fe             	lea    eax,[esi-0x2]
c0000911:	83 f8 22             	cmp    eax,0x22
c0000914:	0f 87 b7 00 00 00    	ja     c00009d1 <simple_strtoul+0x12a>
c000091a:	83 fe 08             	cmp    esi,0x8
c000091d:	75 0c                	jne    c000092b <simple_strtoul+0x84>
c000091f:	be 08 00 00 00       	mov    esi,0x8
c0000924:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000927:	75 27                	jne    c0000950 <simple_strtoul+0xa9>
c0000929:	eb 1f                	jmp    c000094a <simple_strtoul+0xa3>
c000092b:	83 fe 10             	cmp    esi,0x10
c000092e:	75 20                	jne    c0000950 <simple_strtoul+0xa9>
c0000930:	be 10 00 00 00       	mov    esi,0x10
c0000935:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000938:	75 16                	jne    c0000950 <simple_strtoul+0xa9>
c000093a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c000093e:	50                   	push   eax
c000093f:	e8 4f ff ff ff       	call   c0000893 <tolower>
c0000944:	5d                   	pop    ebp
c0000945:	83 f8 78             	cmp    eax,0x78
c0000948:	74 03                	je     c000094d <simple_strtoul+0xa6>
c000094a:	41                   	inc    ecx
c000094b:	eb 03                	jmp    c0000950 <simple_strtoul+0xa9>
c000094d:	83 c1 02             	add    ecx,0x2
c0000950:	31 ed                	xor    ebp,ebp
c0000952:	31 db                	xor    ebx,ebx
c0000954:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000095b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000095d:	84 d2                	test   dl,dl
c000095f:	74 27                	je     c0000988 <simple_strtoul+0xe1>
c0000961:	0f b6 fa             	movzx  edi,dl
c0000964:	f6 87 00 7c 02 c0 04 	test   BYTE PTR [edi-0x3ffd8400],0x4
c000096b:	74 05                	je     c0000972 <simple_strtoul+0xcb>
c000096d:	83 ef 30             	sub    edi,0x30
c0000970:	eb 22                	jmp    c0000994 <simple_strtoul+0xed>
c0000972:	0f be d2             	movsx  edx,dl
c0000975:	52                   	push   edx
c0000976:	e8 04 ff ff ff       	call   c000087f <toupper>
c000097b:	5f                   	pop    edi
c000097c:	0f b6 d0             	movzx  edx,al
c000097f:	f6 82 00 7c 02 c0 01 	test   BYTE PTR [edx-0x3ffd8400],0x1
c0000986:	75 09                	jne    c0000991 <simple_strtoul+0xea>
c0000988:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000098d:	75 2d                	jne    c00009bc <simple_strtoul+0x115>
c000098f:	eb 57                	jmp    c00009e8 <simple_strtoul+0x141>
c0000991:	8d 78 c9             	lea    edi,[eax-0x37]
c0000994:	39 f7                	cmp    edi,esi
c0000996:	73 f0                	jae    c0000988 <simple_strtoul+0xe1>
c0000998:	31 d2                	xor    edx,edx
c000099a:	89 f8                	mov    eax,edi
c000099c:	f7 d0                	not    eax
c000099e:	f7 f6                	div    esi
c00009a0:	39 d8                	cmp    eax,ebx
c00009a2:	72 0e                	jb     c00009b2 <simple_strtoul+0x10b>
c00009a4:	0f af de             	imul   ebx,esi
c00009a7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009ae:	01 fb                	add    ebx,edi
c00009b0:	eb 07                	jmp    c00009b9 <simple_strtoul+0x112>
c00009b2:	bd 01 00 00 00       	mov    ebp,0x1
c00009b7:	31 db                	xor    ebx,ebx
c00009b9:	41                   	inc    ecx
c00009ba:	eb 9f                	jmp    c000095b <simple_strtoul+0xb4>
c00009bc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009bf:	09 d8                	or     eax,ebx
c00009c1:	75 1f                	jne    c00009e2 <simple_strtoul+0x13b>
c00009c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00009cb:	31 db                	xor    ebx,ebx
c00009cd:	89 38                	mov    DWORD PTR [eax],edi
c00009cf:	eb 17                	jmp    c00009e8 <simple_strtoul+0x141>
c00009d1:	31 db                	xor    ebx,ebx
c00009d3:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009d8:	74 14                	je     c00009ee <simple_strtoul+0x147>
c00009da:	31 ed                	xor    ebp,ebp
c00009dc:	85 c9                	test   ecx,ecx
c00009de:	75 e3                	jne    c00009c3 <simple_strtoul+0x11c>
c00009e0:	31 db                	xor    ebx,ebx
c00009e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e6:	89 08                	mov    DWORD PTR [eax],ecx
c00009e8:	4d                   	dec    ebp
c00009e9:	75 03                	jne    c00009ee <simple_strtoul+0x147>
c00009eb:	83 cb ff             	or     ebx,0xffffffff
c00009ee:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009f3:	75 02                	jne    c00009f7 <simple_strtoul+0x150>
c00009f5:	f7 db                	neg    ebx
c00009f7:	83 c4 08             	add    esp,0x8
c00009fa:	89 d8                	mov    eax,ebx
c00009fc:	5b                   	pop    ebx
c00009fd:	5e                   	pop    esi
c00009fe:	5f                   	pop    edi
c00009ff:	5d                   	pop    ebp
c0000a00:	c3                   	ret    

c0000a01 <largebin_index>:
c0000a01:	89 c2                	mov    edx,eax
c0000a03:	c1 ea 08             	shr    edx,0x8
c0000a06:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a0c:	77 10                	ja     c0000a1e <largebin_index+0x1d>
c0000a0e:	0f bd d2             	bsr    edx,edx
c0000a11:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a14:	d3 e8                	shr    eax,cl
c0000a16:	83 e0 03             	and    eax,0x3
c0000a19:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a1d:	c3                   	ret    
c0000a1e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a23:	c3                   	ret    

c0000a24 <malloc_init_state>:
c0000a24:	53                   	push   ebx
c0000a25:	8d 50 34             	lea    edx,[eax+0x34]
c0000a28:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a2e:	89 d1                	mov    ecx,edx
c0000a30:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a33:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a36:	83 c2 08             	add    edx,0x8
c0000a39:	39 da                	cmp    edx,ebx
c0000a3b:	75 f3                	jne    c0000a30 <malloc_init_state+0xc>
c0000a3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a3f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a49:	83 e2 03             	and    edx,0x3
c0000a4c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a56:	83 ca 48             	or     edx,0x48
c0000a59:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a63:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000a6d:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000a74:	89 10                	mov    DWORD PTR [eax],edx
c0000a76:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000a79:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a83:	5b                   	pop    ebx
c0000a84:	c3                   	ret    

c0000a85 <malloc_consolidate>:
c0000a85:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a87:	85 d2                	test   edx,edx
c0000a89:	0f 84 d8 00 00 00    	je     c0000b67 <malloc_consolidate+0xe2>
c0000a8f:	55                   	push   ebp
c0000a90:	83 e2 fd             	and    edx,0xfffffffd
c0000a93:	57                   	push   edi
c0000a94:	89 c5                	mov    ebp,eax
c0000a96:	56                   	push   esi
c0000a97:	8d 78 34             	lea    edi,[eax+0x34]
c0000a9a:	53                   	push   ebx
c0000a9b:	83 ec 10             	sub    esp,0x10
c0000a9e:	89 10                	mov    DWORD PTR [eax],edx
c0000aa0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000aa4:	c1 ea 03             	shr    edx,0x3
c0000aa7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000aab:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000aaf:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000ab2:	85 d2                	test   edx,edx
c0000ab4:	0f 84 98 00 00 00    	je     c0000b52 <malloc_consolidate+0xcd>
c0000aba:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ac1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000ac4:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000ac7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000acb:	89 f9                	mov    ecx,edi
c0000acd:	83 e1 fe             	and    ecx,0xfffffffe
c0000ad0:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000ad3:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000ad6:	83 e3 fc             	and    ebx,0xfffffffc
c0000ad9:	83 e7 01             	and    edi,0x1
c0000adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000adf:	75 14                	jne    c0000af5 <malloc_consolidate+0x70>
c0000ae1:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000ae3:	29 fa                	sub    edx,edi
c0000ae5:	01 f9                	add    ecx,edi
c0000ae7:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000aea:	89 fb                	mov    ebx,edi
c0000aec:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000aef:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000af2:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000af5:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000af8:	74 40                	je     c0000b3a <malloc_consolidate+0xb5>
c0000afa:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000afd:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b00:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b04:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b07:	83 e7 01             	and    edi,0x1
c0000b0a:	75 0e                	jne    c0000b1a <malloc_consolidate+0x95>
c0000b0c:	01 d9                	add    ecx,ebx
c0000b0e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b11:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b14:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b17:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b1a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b1d:	89 ce                	mov    esi,ecx
c0000b1f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b22:	83 ce 01             	or     esi,0x1
c0000b25:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b28:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b2b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b2e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b32:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b35:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b38:	eb 0c                	jmp    c0000b46 <malloc_consolidate+0xc1>
c0000b3a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b3d:	83 c9 01             	or     ecx,0x1
c0000b40:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b43:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b4a:	85 d2                	test   edx,edx
c0000b4c:	0f 85 6f ff ff ff    	jne    c0000ac1 <malloc_consolidate+0x3c>
c0000b52:	83 c5 04             	add    ebp,0x4
c0000b55:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b59:	0f 85 50 ff ff ff    	jne    c0000aaf <malloc_consolidate+0x2a>
c0000b5f:	83 c4 10             	add    esp,0x10
c0000b62:	5b                   	pop    ebx
c0000b63:	5e                   	pop    esi
c0000b64:	5f                   	pop    edi
c0000b65:	5d                   	pop    ebp
c0000b66:	c3                   	ret    
c0000b67:	e9 b8 fe ff ff       	jmp    c0000a24 <malloc_init_state>

c0000b6c <dlfree>:
c0000b6c:	57                   	push   edi
c0000b6d:	56                   	push   esi
c0000b6e:	53                   	push   ebx
c0000b6f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000b73:	85 db                	test   ebx,ebx
c0000b75:	0f 84 e2 00 00 00    	je     c0000c5d <dlfree+0xf1>
c0000b7b:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000b7e:	8b 0d 80 c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c580
c0000b84:	89 f0                	mov    eax,esi
c0000b86:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b89:	83 e0 fc             	and    eax,0xfffffffc
c0000b8c:	39 c1                	cmp    ecx,eax
c0000b8e:	72 24                	jb     c0000bb4 <dlfree+0x48>
c0000b90:	83 c9 03             	or     ecx,0x3
c0000b93:	c1 e8 03             	shr    eax,0x3
c0000b96:	89 0d 80 c5 02 c0    	mov    DWORD PTR ds:0xc002c580,ecx
c0000b9c:	83 e8 02             	sub    eax,0x2
c0000b9f:	8b 0c 85 84 c5 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3a7c]
c0000ba6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000ba8:	89 14 85 84 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a7c],edx
c0000baf:	e9 a9 00 00 00       	jmp    c0000c5d <dlfree+0xf1>
c0000bb4:	83 e6 02             	and    esi,0x2
c0000bb7:	0f 85 a0 00 00 00    	jne    c0000c5d <dlfree+0xf1>
c0000bbd:	83 c9 01             	or     ecx,0x1
c0000bc0:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bc3:	89 0d 80 c5 02 c0    	mov    DWORD PTR ds:0xc002c580,ecx
c0000bc9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000bcc:	83 e1 fc             	and    ecx,0xfffffffc
c0000bcf:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000bd3:	75 13                	jne    c0000be8 <dlfree+0x7c>
c0000bd5:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000bd8:	29 da                	sub    edx,ebx
c0000bda:	01 d8                	add    eax,ebx
c0000bdc:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000bdf:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000be2:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000be5:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000be8:	39 35 ac c5 02 c0    	cmp    DWORD PTR ds:0xc002c5ac,esi
c0000bee:	74 40                	je     c0000c30 <dlfree+0xc4>
c0000bf0:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000bf4:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000bf7:	80 e3 01             	and    bl,0x1
c0000bfa:	75 0e                	jne    c0000c0a <dlfree+0x9e>
c0000bfc:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000bff:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c02:	01 c8                	add    eax,ecx
c0000c04:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c07:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c0a:	8b 0d bc c5 02 c0    	mov    ecx,DWORD PTR ds:0xc002c5bc
c0000c10:	c7 42 0c b4 c5 02 c0 	mov    DWORD PTR [edx+0xc],0xc002c5b4
c0000c17:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c1a:	89 15 bc c5 02 c0    	mov    DWORD PTR ds:0xc002c5bc,edx
c0000c20:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c23:	89 c1                	mov    ecx,eax
c0000c25:	83 c9 01             	or     ecx,0x1
c0000c28:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c2b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c2e:	eb 10                	jmp    c0000c40 <dlfree+0xd4>
c0000c30:	01 c8                	add    eax,ecx
c0000c32:	89 c1                	mov    ecx,eax
c0000c34:	83 c9 01             	or     ecx,0x1
c0000c37:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c3a:	89 15 ac c5 02 c0    	mov    DWORD PTR ds:0xc002c5ac,edx
c0000c40:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c45:	76 16                	jbe    c0000c5d <dlfree+0xf1>
c0000c47:	f6 05 80 c5 02 c0 02 	test   BYTE PTR ds:0xc002c580,0x2
c0000c4e:	74 0d                	je     c0000c5d <dlfree+0xf1>
c0000c50:	5b                   	pop    ebx
c0000c51:	b8 80 c5 02 c0       	mov    eax,0xc002c580
c0000c56:	5e                   	pop    esi
c0000c57:	5f                   	pop    edi
c0000c58:	e9 28 fe ff ff       	jmp    c0000a85 <malloc_consolidate>
c0000c5d:	5b                   	pop    ebx
c0000c5e:	5e                   	pop    esi
c0000c5f:	5f                   	pop    edi
c0000c60:	c3                   	ret    

c0000c61 <sYSMALLOc>:
c0000c61:	55                   	push   ebp
c0000c62:	57                   	push   edi
c0000c63:	56                   	push   esi
c0000c64:	53                   	push   ebx
c0000c65:	89 d3                	mov    ebx,edx
c0000c67:	83 ec 2c             	sub    esp,0x2c
c0000c6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000c6e:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000c74:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000c77:	8d 42 ff             	lea    eax,[edx-0x1]
c0000c7a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000c7e:	74 1f                	je     c0000c9f <sYSMALLOc+0x3e>
c0000c80:	89 d8                	mov    eax,ebx
c0000c82:	e8 fe fd ff ff       	call   c0000a85 <malloc_consolidate>
c0000c87:	83 ec 0c             	sub    esp,0xc
c0000c8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c8e:	83 e8 07             	sub    eax,0x7
c0000c91:	50                   	push   eax
c0000c92:	e8 30 02 00 00       	call   c0000ec7 <dlmalloc>
c0000c97:	83 c4 10             	add    esp,0x10
c0000c9a:	e9 20 02 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000c9f:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ca2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ca8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000cab:	83 e0 fc             	and    eax,0xfffffffc
c0000cae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000cb6:	83 c0 10             	add    eax,0x10
c0000cb9:	01 c1                	add    ecx,eax
c0000cbb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cc6:	74 04                	je     c0000ccc <sYSMALLOc+0x6b>
c0000cc8:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000ccc:	f7 da                	neg    edx
c0000cce:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000cd2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000cd6:	21 d1                	and    ecx,edx
c0000cd8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000cdc:	7f 07                	jg     c0000ce5 <sYSMALLOc+0x84>
c0000cde:	31 c0                	xor    eax,eax
c0000ce0:	e9 da 01 00 00       	jmp    c0000ebf <sYSMALLOc+0x25e>
c0000ce5:	83 ec 0c             	sub    esp,0xc
c0000ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000cec:	e8 3a e6 00 00       	call   c000f32b <sbrk>
c0000cf1:	83 c4 10             	add    esp,0x10
c0000cf4:	89 c6                	mov    esi,eax
c0000cf6:	83 f8 ff             	cmp    eax,0xffffffff
c0000cf9:	74 e3                	je     c0000cde <sYSMALLOc+0x7d>
c0000cfb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000cff:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000d03:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000d06:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000d0c:	39 f1                	cmp    ecx,esi
c0000d0e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000d14:	75 13                	jne    c0000d29 <sYSMALLOc+0xc8>
c0000d16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d1a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d1e:	83 c8 01             	or     eax,0x1
c0000d21:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d24:	e9 3e 01 00 00       	jmp    c0000e67 <sYSMALLOc+0x206>
c0000d29:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000d2f:	88 d0                	mov    al,dl
c0000d31:	83 e0 01             	and    eax,0x1
c0000d34:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d39:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000d3d:	0f 95 c0             	setne  al
c0000d40:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000d44:	39 f1                	cmp    ecx,esi
c0000d46:	76 12                	jbe    c0000d5a <sYSMALLOc+0xf9>
c0000d48:	84 c0                	test   al,al
c0000d4a:	74 0e                	je     c0000d5a <sYSMALLOc+0xf9>
c0000d4c:	83 e2 fe             	and    edx,0xfffffffe
c0000d4f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000d55:	e9 83 00 00 00       	jmp    c0000ddd <sYSMALLOc+0x17c>
c0000d5a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000d5f:	74 7c                	je     c0000ddd <sYSMALLOc+0x17c>
c0000d61:	84 c0                	test   al,al
c0000d63:	74 0c                	je     c0000d71 <sYSMALLOc+0x110>
c0000d65:	89 f0                	mov    eax,esi
c0000d67:	29 c8                	sub    eax,ecx
c0000d69:	01 e8                	add    eax,ebp
c0000d6b:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000d71:	89 f2                	mov    edx,esi
c0000d73:	83 e2 07             	and    edx,0x7
c0000d76:	74 0c                	je     c0000d84 <sYSMALLOc+0x123>
c0000d78:	b8 08 00 00 00       	mov    eax,0x8
c0000d7d:	29 d0                	sub    eax,edx
c0000d7f:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000d82:	eb 04                	jmp    c0000d88 <sYSMALLOc+0x127>
c0000d84:	89 f5                	mov    ebp,esi
c0000d86:	31 c0                	xor    eax,eax
c0000d88:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d94:	01 c1                	add    ecx,eax
c0000d96:	83 ec 0c             	sub    esp,0xc
c0000d99:	01 f1                	add    ecx,esi
c0000d9b:	01 ca                	add    edx,ecx
c0000d9d:	29 c8                	sub    eax,ecx
c0000d9f:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000da3:	01 c2                	add    edx,eax
c0000da5:	52                   	push   edx
c0000da6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000daa:	e8 7c e5 00 00       	call   c000f32b <sbrk>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	83 f8 ff             	cmp    eax,0xffffffff
c0000db5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000db9:	75 0f                	jne    c0000dca <sYSMALLOc+0x169>
c0000dbb:	83 ec 0c             	sub    esp,0xc
c0000dbe:	6a 00                	push   0x0
c0000dc0:	e8 66 e5 00 00       	call   c000f32b <sbrk>
c0000dc5:	83 c4 10             	add    esp,0x10
c0000dc8:	eb 30                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000dca:	39 c6                	cmp    esi,eax
c0000dcc:	76 33                	jbe    c0000e01 <sYSMALLOc+0x1a0>
c0000dce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000dd2:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000dd9:	01 f0                	add    eax,esi
c0000ddb:	eb 1d                	jmp    c0000dfa <sYSMALLOc+0x199>
c0000ddd:	83 ec 0c             	sub    esp,0xc
c0000de0:	89 f5                	mov    ebp,esi
c0000de2:	6a 00                	push   0x0
c0000de4:	e8 42 e5 00 00       	call   c000f32b <sbrk>
c0000de9:	89 c2                	mov    edx,eax
c0000deb:	29 f2                	sub    edx,esi
c0000ded:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000df1:	83 c4 10             	add    esp,0x10
c0000df4:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000dfa:	31 d2                	xor    edx,edx
c0000dfc:	83 f8 ff             	cmp    eax,0xffffffff
c0000dff:	74 66                	je     c0000e67 <sYSMALLOc+0x206>
c0000e01:	29 e8                	sub    eax,ebp
c0000e03:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000e06:	01 d0                	add    eax,edx
c0000e08:	83 c8 01             	or     eax,0x1
c0000e0b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000e0e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e14:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e19:	74 4c                	je     c0000e67 <sYSMALLOc+0x206>
c0000e1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e1f:	83 e8 0c             	sub    eax,0xc
c0000e22:	83 e0 f8             	and    eax,0xfffffff8
c0000e25:	89 c2                	mov    edx,eax
c0000e27:	83 ca 01             	or     edx,0x1
c0000e2a:	83 f8 0f             	cmp    eax,0xf
c0000e2d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e30:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e38:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000e40:	76 25                	jbe    c0000e67 <sYSMALLOc+0x206>
c0000e42:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000e48:	83 ec 0c             	sub    esp,0xc
c0000e4b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e55:	83 c7 08             	add    edi,0x8
c0000e58:	57                   	push   edi
c0000e59:	e8 0e fd ff ff       	call   c0000b6c <dlfree>
c0000e5e:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e64:	83 c4 10             	add    esp,0x10
c0000e67:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000e6d:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000e73:	73 06                	jae    c0000e7b <sYSMALLOc+0x21a>
c0000e75:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000e7b:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e81:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e87:	73 06                	jae    c0000e8f <sYSMALLOc+0x22e>
c0000e89:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e8f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e92:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e95:	83 e2 fc             	and    edx,0xfffffffc
c0000e98:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e9c:	0f 82 3c fe ff ff    	jb     c0000cde <sYSMALLOc+0x7d>
c0000ea2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ea6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ea9:	29 fa                	sub    edx,edi
c0000eab:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000eae:	83 ca 01             	or     edx,0x1
c0000eb1:	89 fb                	mov    ebx,edi
c0000eb3:	83 c0 08             	add    eax,0x8
c0000eb6:	83 cb 01             	or     ebx,0x1
c0000eb9:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000ebc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000ebf:	83 c4 2c             	add    esp,0x2c
c0000ec2:	5b                   	pop    ebx
c0000ec3:	5e                   	pop    esi
c0000ec4:	5f                   	pop    edi
c0000ec5:	5d                   	pop    ebp
c0000ec6:	c3                   	ret    

c0000ec7 <dlmalloc>:
c0000ec7:	55                   	push   ebp
c0000ec8:	57                   	push   edi
c0000ec9:	56                   	push   esi
c0000eca:	53                   	push   ebx
c0000ecb:	83 ec 1c             	sub    esp,0x1c
c0000ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000ed2:	83 f8 df             	cmp    eax,0xffffffdf
c0000ed5:	0f 87 70 03 00 00    	ja     c000124b <dlmalloc+0x384>
c0000edb:	83 c0 0b             	add    eax,0xb
c0000ede:	be 10 00 00 00       	mov    esi,0x10
c0000ee3:	83 f8 0f             	cmp    eax,0xf
c0000ee6:	76 05                	jbe    c0000eed <dlmalloc+0x26>
c0000ee8:	83 e0 f8             	and    eax,0xfffffff8
c0000eeb:	89 c6                	mov    esi,eax
c0000eed:	8b 3d 80 c5 02 c0    	mov    edi,DWORD PTR ds:0xc002c580
c0000ef3:	f7 c7 01 00 00 00    	test   edi,0x1
c0000ef9:	75 17                	jne    c0000f12 <dlmalloc+0x4b>
c0000efb:	85 ff                	test   edi,edi
c0000efd:	0f 85 05 03 00 00    	jne    c0001208 <dlmalloc+0x341>
c0000f03:	b8 80 c5 02 c0       	mov    eax,0xc002c580
c0000f08:	e8 78 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f0d:	e9 f6 02 00 00       	jmp    c0001208 <dlmalloc+0x341>
c0000f12:	39 f7                	cmp    edi,esi
c0000f14:	72 1f                	jb     c0000f35 <dlmalloc+0x6e>
c0000f16:	89 f2                	mov    edx,esi
c0000f18:	c1 ea 03             	shr    edx,0x3
c0000f1b:	83 ea 02             	sub    edx,0x2
c0000f1e:	8b 04 95 84 c5 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3a7c]
c0000f25:	85 c0                	test   eax,eax
c0000f27:	74 0c                	je     c0000f35 <dlmalloc+0x6e>
c0000f29:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f2c:	89 0c 95 84 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3a7c],ecx
c0000f33:	eb 30                	jmp    c0000f65 <dlmalloc+0x9e>
c0000f35:	89 f0                	mov    eax,esi
c0000f37:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f3d:	77 2e                	ja     c0000f6d <dlmalloc+0xa6>
c0000f3f:	c1 e8 03             	shr    eax,0x3
c0000f42:	8d 14 c5 b4 c5 02 c0 	lea    edx,[eax*8-0x3ffd3a4c]
c0000f49:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4d:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f50:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f53:	39 c3                	cmp    ebx,eax
c0000f55:	74 2e                	je     c0000f85 <dlmalloc+0xbe>
c0000f57:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f5a:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f5f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f62:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000f65:	83 c0 08             	add    eax,0x8
c0000f68:	e9 e0 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0000f6d:	e8 8f fa ff ff       	call   c0000a01 <largebin_index>
c0000f72:	83 e7 02             	and    edi,0x2
c0000f75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f79:	74 0a                	je     c0000f85 <dlmalloc+0xbe>
c0000f7b:	b8 80 c5 02 c0       	mov    eax,0xc002c580
c0000f80:	e8 00 fb ff ff       	call   c0000a85 <malloc_consolidate>
c0000f85:	8d 46 10             	lea    eax,[esi+0x10]
c0000f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f8c:	8b 1d c0 c5 02 c0    	mov    ebx,DWORD PTR ds:0xc002c5c0
c0000f92:	81 fb b4 c5 02 c0    	cmp    ebx,0xc002c5b4
c0000f98:	0f 84 13 01 00 00    	je     c00010b1 <dlmalloc+0x1ea>
c0000f9e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fa1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fa4:	83 e7 fc             	and    edi,0xfffffffc
c0000fa7:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fad:	77 4c                	ja     c0000ffb <dlmalloc+0x134>
c0000faf:	3d b4 c5 02 c0       	cmp    eax,0xc002c5b4
c0000fb4:	75 45                	jne    c0000ffb <dlmalloc+0x134>
c0000fb6:	39 1d b0 c5 02 c0    	cmp    DWORD PTR ds:0xc002c5b0,ebx
c0000fbc:	75 3d                	jne    c0000ffb <dlmalloc+0x134>
c0000fbe:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000fc2:	73 37                	jae    c0000ffb <dlmalloc+0x134>
c0000fc4:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000fc7:	89 fa                	mov    edx,edi
c0000fc9:	a3 bc c5 02 c0       	mov    ds:0xc002c5bc,eax
c0000fce:	a3 c0 c5 02 c0       	mov    ds:0xc002c5c0,eax
c0000fd3:	a3 b0 c5 02 c0       	mov    ds:0xc002c5b0,eax
c0000fd8:	29 f2                	sub    edx,esi
c0000fda:	c7 40 08 b4 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c5b4
c0000fe1:	c7 40 0c b4 c5 02 c0 	mov    DWORD PTR [eax+0xc],0xc002c5b4
c0000fe8:	83 ce 01             	or     esi,0x1
c0000feb:	89 d1                	mov    ecx,edx
c0000fed:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000ff0:	83 c9 01             	or     ecx,0x1
c0000ff3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000ff6:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000ff9:	eb 15                	jmp    c0001010 <dlmalloc+0x149>
c0000ffb:	a3 c0 c5 02 c0       	mov    ds:0xc002c5c0,eax
c0001000:	39 fe                	cmp    esi,edi
c0001002:	c7 40 08 b4 c5 02 c0 	mov    DWORD PTR [eax+0x8],0xc002c5b4
c0001009:	75 0d                	jne    c0001018 <dlmalloc+0x151>
c000100b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001010:	8d 43 08             	lea    eax,[ebx+0x8]
c0001013:	e9 35 02 00 00       	jmp    c000124d <dlmalloc+0x386>
c0001018:	89 f8                	mov    eax,edi
c000101a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001020:	77 19                	ja     c000103b <dlmalloc+0x174>
c0001022:	c1 e8 03             	shr    eax,0x3
c0001025:	8d 14 00             	lea    edx,[eax+eax*1]
c0001028:	83 c2 0d             	add    edx,0xd
c000102b:	8d 2c 95 78 c5 02 c0 	lea    ebp,[edx*4-0x3ffd3a88]
c0001032:	8b 14 95 80 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3a80]
c0001039:	eb 46                	jmp    c0001081 <dlmalloc+0x1ba>
c000103b:	e8 c1 f9 ff ff       	call   c0000a01 <largebin_index>
c0001040:	8d 14 00             	lea    edx,[eax+eax*1]
c0001043:	83 c2 0d             	add    edx,0xd
c0001046:	8d 0c 95 80 c5 02 c0 	lea    ecx,[edx*4-0x3ffd3a80]
c000104d:	8b 14 95 80 c5 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3a80]
c0001054:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001057:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000105b:	89 d5                	mov    ebp,edx
c000105d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001061:	74 1e                	je     c0001081 <dlmalloc+0x1ba>
c0001063:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001066:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001069:	77 12                	ja     c000107d <dlmalloc+0x1b6>
c000106b:	83 cf 01             	or     edi,0x1
c000106e:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001071:	76 05                	jbe    c0001078 <dlmalloc+0x1b1>
c0001073:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001076:	eb f6                	jmp    c000106e <dlmalloc+0x1a7>
c0001078:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000107b:	eb 04                	jmp    c0001081 <dlmalloc+0x1ba>
c000107d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001081:	89 c7                	mov    edi,eax
c0001083:	88 c1                	mov    cl,al
c0001085:	c1 ff 05             	sar    edi,0x5
c0001088:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000108c:	bf 01 00 00 00       	mov    edi,0x1
c0001091:	d3 e7                	shl    edi,cl
c0001093:	89 f8                	mov    eax,edi
c0001095:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001099:	09 04 bd b4 c8 02 c0 	or     DWORD PTR [edi*4-0x3ffd374c],eax
c00010a0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010a3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010a6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010a9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010ac:	e9 db fe ff ff       	jmp    c0000f8c <dlmalloc+0xc5>
c00010b1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010b7:	76 78                	jbe    c0001131 <dlmalloc+0x26a>
c00010b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010bd:	8d 04 c5 b4 c5 02 c0 	lea    eax,[eax*8-0x3ffd3a4c]
c00010c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00010c7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010ca:	39 ca                	cmp    edx,ecx
c00010cc:	74 63                	je     c0001131 <dlmalloc+0x26a>
c00010ce:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00010d1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00010d4:	83 e3 fc             	and    ebx,0xfffffffc
c00010d7:	39 de                	cmp    esi,ebx
c00010d9:	77 52                	ja     c000112d <dlmalloc+0x266>
c00010db:	89 df                	mov    edi,ebx
c00010dd:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00010e0:	29 f7                	sub    edi,esi
c00010e2:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00010e5:	01 d3                	add    ebx,edx
c00010e7:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00010ea:	83 ff 0f             	cmp    edi,0xf
c00010ed:	8d 42 08             	lea    eax,[edx+0x8]
c00010f0:	77 09                	ja     c00010fb <dlmalloc+0x234>
c00010f2:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00010f6:	e9 52 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c00010fb:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00010fe:	83 ce 01             	or     esi,0x1
c0001101:	89 0d bc c5 02 c0    	mov    DWORD PTR ds:0xc002c5bc,ecx
c0001107:	89 0d c0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5c0,ecx
c000110d:	c7 41 08 b4 c5 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002c5b4
c0001114:	c7 41 0c b4 c5 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002c5b4
c000111b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000111e:	89 fa                	mov    edx,edi
c0001120:	83 ca 01             	or     edx,0x1
c0001123:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001126:	89 3b                	mov    DWORD PTR [ebx],edi
c0001128:	e9 20 01 00 00       	jmp    c000124d <dlmalloc+0x386>
c000112d:	89 c2                	mov    edx,eax
c000112f:	eb 99                	jmp    c00010ca <dlmalloc+0x203>
c0001131:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001135:	b8 01 00 00 00       	mov    eax,0x1
c000113a:	41                   	inc    ecx
c000113b:	89 cb                	mov    ebx,ecx
c000113d:	8d 14 cd ac c5 02 c0 	lea    edx,[ecx*8-0x3ffd3a54]
c0001144:	c1 eb 05             	shr    ebx,0x5
c0001147:	d3 e0                	shl    eax,cl
c0001149:	8b 3c 9d b4 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd374c]
c0001150:	39 f8                	cmp    eax,edi
c0001152:	77 04                	ja     c0001158 <dlmalloc+0x291>
c0001154:	85 c0                	test   eax,eax
c0001156:	75 26                	jne    c000117e <dlmalloc+0x2b7>
c0001158:	43                   	inc    ebx
c0001159:	83 fb 02             	cmp    ebx,0x2
c000115c:	0f 87 a6 00 00 00    	ja     c0001208 <dlmalloc+0x341>
c0001162:	8b 3c 9d b4 c8 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd374c]
c0001169:	85 ff                	test   edi,edi
c000116b:	74 eb                	je     c0001158 <dlmalloc+0x291>
c000116d:	89 d8                	mov    eax,ebx
c000116f:	c1 e0 06             	shl    eax,0x6
c0001172:	8d 14 85 ac c5 02 c0 	lea    edx,[eax*4-0x3ffd3a54]
c0001179:	b8 01 00 00 00       	mov    eax,0x1
c000117e:	85 f8                	test   eax,edi
c0001180:	75 07                	jne    c0001189 <dlmalloc+0x2c2>
c0001182:	83 c2 08             	add    edx,0x8
c0001185:	01 c0                	add    eax,eax
c0001187:	eb f5                	jmp    c000117e <dlmalloc+0x2b7>
c0001189:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000118c:	39 ca                	cmp    edx,ecx
c000118e:	75 14                	jne    c00011a4 <dlmalloc+0x2dd>
c0001190:	89 c1                	mov    ecx,eax
c0001192:	83 c2 08             	add    edx,0x8
c0001195:	f7 d1                	not    ecx
c0001197:	01 c0                	add    eax,eax
c0001199:	21 cf                	and    edi,ecx
c000119b:	89 3c 9d b4 c8 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd374c],edi
c00011a2:	eb ac                	jmp    c0001150 <dlmalloc+0x289>
c00011a4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011a7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011aa:	83 e0 fc             	and    eax,0xfffffffc
c00011ad:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011b0:	89 c3                	mov    ebx,eax
c00011b2:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011b5:	29 f3                	sub    ebx,esi
c00011b7:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011ba:	83 fb 0f             	cmp    ebx,0xf
c00011bd:	8d 41 08             	lea    eax,[ecx+0x8]
c00011c0:	77 09                	ja     c00011cb <dlmalloc+0x304>
c00011c2:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00011c6:	e9 82 00 00 00       	jmp    c000124d <dlmalloc+0x386>
c00011cb:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00011ce:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d4:	89 3d bc c5 02 c0    	mov    DWORD PTR ds:0xc002c5bc,edi
c00011da:	89 3d c0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5c0,edi
c00011e0:	c7 47 08 b4 c5 02 c0 	mov    DWORD PTR [edi+0x8],0xc002c5b4
c00011e7:	c7 47 0c b4 c5 02 c0 	mov    DWORD PTR [edi+0xc],0xc002c5b4
c00011ee:	77 06                	ja     c00011f6 <dlmalloc+0x32f>
c00011f0:	89 3d b0 c5 02 c0    	mov    DWORD PTR ds:0xc002c5b0,edi
c00011f6:	83 ce 01             	or     esi,0x1
c00011f9:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00011fc:	89 d9                	mov    ecx,ebx
c00011fe:	83 c9 01             	or     ecx,0x1
c0001201:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001204:	89 1a                	mov    DWORD PTR [edx],ebx
c0001206:	eb 45                	jmp    c000124d <dlmalloc+0x386>
c0001208:	a1 ac c5 02 c0       	mov    eax,ds:0xc002c5ac
c000120d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001210:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001213:	83 e2 fc             	and    edx,0xfffffffc
c0001216:	39 d1                	cmp    ecx,edx
c0001218:	77 1e                	ja     c0001238 <dlmalloc+0x371>
c000121a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000121d:	89 f3                	mov    ebx,esi
c000121f:	89 0d ac c5 02 c0    	mov    DWORD PTR ds:0xc002c5ac,ecx
c0001225:	83 cb 01             	or     ebx,0x1
c0001228:	29 f2                	sub    edx,esi
c000122a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000122d:	83 ca 01             	or     edx,0x1
c0001230:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001233:	e9 2d fd ff ff       	jmp    c0000f65 <dlmalloc+0x9e>
c0001238:	83 c4 1c             	add    esp,0x1c
c000123b:	89 f0                	mov    eax,esi
c000123d:	5b                   	pop    ebx
c000123e:	ba 80 c5 02 c0       	mov    edx,0xc002c580
c0001243:	5e                   	pop    esi
c0001244:	5f                   	pop    edi
c0001245:	5d                   	pop    ebp
c0001246:	e9 16 fa ff ff       	jmp    c0000c61 <sYSMALLOc>
c000124b:	31 c0                	xor    eax,eax
c000124d:	83 c4 1c             	add    esp,0x1c
c0001250:	5b                   	pop    ebx
c0001251:	5e                   	pop    esi
c0001252:	5f                   	pop    edi
c0001253:	5d                   	pop    ebp
c0001254:	c3                   	ret    

c0001255 <iALLOc>:
c0001255:	55                   	push   ebp
c0001256:	89 c5                	mov    ebp,eax
c0001258:	57                   	push   edi
c0001259:	56                   	push   esi
c000125a:	53                   	push   ebx
c000125b:	83 ec 2c             	sub    esp,0x2c
c000125e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001262:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001266:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000126a:	83 3d 80 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c580,0x0
c0001271:	75 12                	jne    c0001285 <iALLOc+0x30>
c0001273:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001277:	b8 80 c5 02 c0       	mov    eax,0xc002c580
c000127c:	e8 04 f8 ff ff       	call   c0000a85 <malloc_consolidate>
c0001281:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001285:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000128a:	74 12                	je     c000129e <iALLOc+0x49>
c000128c:	85 ed                	test   ebp,ebp
c000128e:	0f 84 64 01 00 00    	je     c00013f8 <iALLOc+0x1a3>
c0001294:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000129c:	eb 33                	jmp    c00012d1 <iALLOc+0x7c>
c000129e:	85 ed                	test   ebp,ebp
c00012a0:	75 14                	jne    c00012b6 <iALLOc+0x61>
c00012a2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012aa:	83 c4 2c             	add    esp,0x2c
c00012ad:	5b                   	pop    ebx
c00012ae:	5e                   	pop    esi
c00012af:	5f                   	pop    edi
c00012b0:	5d                   	pop    ebp
c00012b1:	e9 11 fc ff ff       	jmp    c0000ec7 <dlmalloc>
c00012b6:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012bd:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00012c5:	83 f8 0f             	cmp    eax,0xf
c00012c8:	76 07                	jbe    c00012d1 <iALLOc+0x7c>
c00012ca:	83 e0 f8             	and    eax,0xfffffff8
c00012cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00012d1:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00012d6:	75 09                	jne    c00012e1 <iALLOc+0x8c>
c00012d8:	89 d0                	mov    eax,edx
c00012da:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00012dd:	31 f6                	xor    esi,esi
c00012df:	eb 3b                	jmp    c000131c <iALLOc+0xc7>
c00012e1:	8b 02                	mov    eax,DWORD PTR [edx]
c00012e3:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00012eb:	83 c0 0b             	add    eax,0xb
c00012ee:	83 f8 0f             	cmp    eax,0xf
c00012f1:	76 07                	jbe    c00012fa <iALLOc+0xa5>
c00012f3:	83 e0 f8             	and    eax,0xfffffff8
c00012f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00012fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00012fe:	0f af f5             	imul   esi,ebp
c0001301:	eb 25                	jmp    c0001328 <iALLOc+0xd3>
c0001303:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001305:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001308:	bb 10 00 00 00       	mov    ebx,0x10
c000130d:	83 f9 0f             	cmp    ecx,0xf
c0001310:	76 05                	jbe    c0001317 <iALLOc+0xc2>
c0001312:	83 e1 f8             	and    ecx,0xfffffff8
c0001315:	89 cb                	mov    ebx,ecx
c0001317:	01 de                	add    esi,ebx
c0001319:	83 c0 04             	add    eax,0x4
c000131c:	39 c7                	cmp    edi,eax
c000131e:	75 e3                	jne    c0001303 <iALLOc+0xae>
c0001320:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000132c:	8b 1d d4 c8 02 c0    	mov    ebx,DWORD PTR ds:0xc002c8d4
c0001332:	83 ec 0c             	sub    esp,0xc
c0001335:	c7 05 d4 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c8d4,0x0
c000133f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001343:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001347:	50                   	push   eax
c0001348:	e8 7a fb ff ff       	call   c0000ec7 <dlmalloc>
c000134d:	83 c4 10             	add    esp,0x10
c0001350:	89 1d d4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8d4,ebx
c0001356:	85 c0                	test   eax,eax
c0001358:	0f 84 92 00 00 00    	je     c00013f0 <iALLOc+0x19b>
c000135e:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001361:	8d 78 f8             	lea    edi,[eax-0x8]
c0001364:	83 e3 fc             	and    ebx,0xfffffffc
c0001367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000136b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001370:	74 1e                	je     c0001390 <iALLOc+0x13b>
c0001372:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001376:	89 d9                	mov    ecx,ebx
c0001378:	52                   	push   edx
c0001379:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000137d:	83 e9 04             	sub    ecx,0x4
c0001380:	51                   	push   ecx
c0001381:	6a 00                	push   0x0
c0001383:	50                   	push   eax
c0001384:	e8 02 f3 ff ff       	call   c000068b <memset>
c0001389:	83 c4 10             	add    esp,0x10
c000138c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001390:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001395:	75 14                	jne    c00013ab <iALLOc+0x156>
c0001397:	8d 04 37             	lea    eax,[edi+esi*1]
c000139a:	29 f3                	sub    ebx,esi
c000139c:	8d 48 08             	lea    ecx,[eax+0x8]
c000139f:	83 cb 01             	or     ebx,0x1
c00013a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013a6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013a9:	89 f3                	mov    ebx,esi
c00013ab:	31 c0                	xor    eax,eax
c00013ad:	4d                   	dec    ebp
c00013ae:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013b1:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013b5:	39 c5                	cmp    ebp,eax
c00013b7:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013ba:	74 2c                	je     c00013e8 <iALLOc+0x193>
c00013bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013c0:	85 c9                	test   ecx,ecx
c00013c2:	75 15                	jne    c00013d9 <iALLOc+0x184>
c00013c4:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00013c7:	8d 71 0b             	lea    esi,[ecx+0xb]
c00013ca:	b9 10 00 00 00       	mov    ecx,0x10
c00013cf:	83 fe 0f             	cmp    esi,0xf
c00013d2:	76 05                	jbe    c00013d9 <iALLOc+0x184>
c00013d4:	83 e6 f8             	and    esi,0xfffffff8
c00013d7:	89 f1                	mov    ecx,esi
c00013d9:	89 ce                	mov    esi,ecx
c00013db:	29 cb                	sub    ebx,ecx
c00013dd:	83 ce 01             	or     esi,0x1
c00013e0:	40                   	inc    eax
c00013e1:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00013e4:	01 cf                	add    edi,ecx
c00013e6:	eb c6                	jmp    c00013ae <iALLOc+0x159>
c00013e8:	83 cb 01             	or     ebx,0x1
c00013eb:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00013ee:	eb 08                	jmp    c00013f8 <iALLOc+0x1a3>
c00013f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00013f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00013fc:	83 c4 2c             	add    esp,0x2c
c00013ff:	5b                   	pop    ebx
c0001400:	5e                   	pop    esi
c0001401:	5f                   	pop    edi
c0001402:	5d                   	pop    ebp
c0001403:	c3                   	ret    

c0001404 <dlrealloc>:
c0001404:	55                   	push   ebp
c0001405:	57                   	push   edi
c0001406:	56                   	push   esi
c0001407:	53                   	push   ebx
c0001408:	83 ec 1c             	sub    esp,0x1c
c000140b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000140f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001413:	85 db                	test   ebx,ebx
c0001415:	75 10                	jne    c0001427 <dlrealloc+0x23>
c0001417:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000141b:	83 c4 1c             	add    esp,0x1c
c000141e:	5b                   	pop    ebx
c000141f:	5e                   	pop    esi
c0001420:	5f                   	pop    edi
c0001421:	5d                   	pop    ebp
c0001422:	e9 a0 fa ff ff       	jmp    c0000ec7 <dlmalloc>
c0001427:	83 f8 df             	cmp    eax,0xffffffdf
c000142a:	76 07                	jbe    c0001433 <dlrealloc+0x2f>
c000142c:	31 db                	xor    ebx,ebx
c000142e:	e9 7c 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c0001433:	83 c0 0b             	add    eax,0xb
c0001436:	bf 10 00 00 00       	mov    edi,0x10
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 05                	jbe    c0001445 <dlrealloc+0x41>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 c7                	mov    edi,eax
c0001445:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001448:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000144b:	89 c6                	mov    esi,eax
c000144d:	83 e6 fc             	and    esi,0xfffffffc
c0001450:	a8 02                	test   al,0x2
c0001452:	75 d8                	jne    c000142c <dlrealloc+0x28>
c0001454:	39 f7                	cmp    edi,esi
c0001456:	0f 86 15 01 00 00    	jbe    c0001571 <dlrealloc+0x16d>
c000145c:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0001460:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001463:	39 15 ac c5 02 c0    	cmp    DWORD PTR ds:0xc002c5ac,edx
c0001469:	75 33                	jne    c000149e <dlrealloc+0x9a>
c000146b:	83 e1 fc             	and    ecx,0xfffffffc
c000146e:	01 f1                	add    ecx,esi
c0001470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001474:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001477:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000147b:	77 49                	ja     c00014c6 <dlrealloc+0xc2>
c000147d:	01 fd                	add    ebp,edi
c000147f:	83 e0 01             	and    eax,0x1
c0001482:	09 f8                	or     eax,edi
c0001484:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001487:	89 2d ac c5 02 c0    	mov    DWORD PTR ds:0xc002c5ac,ebp
c000148d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001491:	29 f8                	sub    eax,edi
c0001493:	83 c8 01             	or     eax,0x1
c0001496:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001499:	e9 11 01 00 00       	jmp    c00015af <dlrealloc+0x1ab>
c000149e:	89 c8                	mov    eax,ecx
c00014a0:	83 e0 fe             	and    eax,0xfffffffe
c00014a3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014a8:	75 1c                	jne    c00014c6 <dlrealloc+0xc2>
c00014aa:	83 e1 fc             	and    ecx,0xfffffffc
c00014ad:	01 f1                	add    ecx,esi
c00014af:	39 cf                	cmp    edi,ecx
c00014b1:	77 13                	ja     c00014c6 <dlrealloc+0xc2>
c00014b3:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014b6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014b9:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014bc:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014bf:	89 ce                	mov    esi,ecx
c00014c1:	e9 ab 00 00 00       	jmp    c0001571 <dlrealloc+0x16d>
c00014c6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00014ca:	8d 47 f9             	lea    eax,[edi-0x7]
c00014cd:	83 ec 0c             	sub    esp,0xc
c00014d0:	50                   	push   eax
c00014d1:	e8 f1 f9 ff ff       	call   c0000ec7 <dlmalloc>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	89 c1                	mov    ecx,eax
c00014db:	85 c0                	test   eax,eax
c00014dd:	0f 84 49 ff ff ff    	je     c000142c <dlrealloc+0x28>
c00014e3:	8d 40 f8             	lea    eax,[eax-0x8]
c00014e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00014ea:	39 c2                	cmp    edx,eax
c00014ec:	75 0a                	jne    c00014f8 <dlrealloc+0xf4>
c00014ee:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00014f1:	83 e0 fc             	and    eax,0xfffffffc
c00014f4:	01 c6                	add    esi,eax
c00014f6:	eb 79                	jmp    c0001571 <dlrealloc+0x16d>
c00014f8:	83 ee 04             	sub    esi,0x4
c00014fb:	83 fe 27             	cmp    esi,0x27
c00014fe:	76 16                	jbe    c0001516 <dlrealloc+0x112>
c0001500:	50                   	push   eax
c0001501:	56                   	push   esi
c0001502:	53                   	push   ebx
c0001503:	51                   	push   ecx
c0001504:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001508:	e8 48 f1 ff ff       	call   c0000655 <memcpy>
c000150d:	83 c4 10             	add    esp,0x10
c0001510:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001514:	eb 43                	jmp    c0001559 <dlrealloc+0x155>
c0001516:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001518:	83 fe 13             	cmp    esi,0x13
c000151b:	89 01                	mov    DWORD PTR [ecx],eax
c000151d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001520:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001523:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001526:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001529:	76 2e                	jbe    c0001559 <dlrealloc+0x155>
c000152b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000152e:	83 fe 1b             	cmp    esi,0x1b
c0001531:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001534:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001537:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000153a:	76 1d                	jbe    c0001559 <dlrealloc+0x155>
c000153c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000153f:	83 fe 23             	cmp    esi,0x23
c0001542:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001545:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001548:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000154b:	76 0c                	jbe    c0001559 <dlrealloc+0x155>
c000154d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0001550:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c0001553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001556:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001559:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000155d:	83 ec 0c             	sub    esp,0xc
c0001560:	53                   	push   ebx
c0001561:	e8 06 f6 ff ff       	call   c0000b6c <dlfree>
c0001566:	83 c4 10             	add    esp,0x10
c0001569:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000156d:	89 cb                	mov    ebx,ecx
c000156f:	eb 3e                	jmp    c00015af <dlrealloc+0x1ab>
c0001571:	89 f2                	mov    edx,esi
c0001573:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001576:	29 fa                	sub    edx,edi
c0001578:	83 e1 01             	and    ecx,0x1
c000157b:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c000157f:	83 fa 0f             	cmp    edx,0xf
c0001582:	77 0b                	ja     c000158f <dlrealloc+0x18b>
c0001584:	09 ce                	or     esi,ecx
c0001586:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001589:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000158d:	eb 20                	jmp    c00015af <dlrealloc+0x1ab>
c000158f:	01 fd                	add    ebp,edi
c0001591:	83 ec 0c             	sub    esp,0xc
c0001594:	09 cf                	or     edi,ecx
c0001596:	83 ca 01             	or     edx,0x1
c0001599:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000159c:	83 c5 08             	add    ebp,0x8
c000159f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00015a2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015a6:	55                   	push   ebp
c00015a7:	e8 c0 f5 ff ff       	call   c0000b6c <dlfree>
c00015ac:	83 c4 10             	add    esp,0x10
c00015af:	83 c4 1c             	add    esp,0x1c
c00015b2:	89 d8                	mov    eax,ebx
c00015b4:	5b                   	pop    ebx
c00015b5:	5e                   	pop    esi
c00015b6:	5f                   	pop    edi
c00015b7:	5d                   	pop    ebp
c00015b8:	c3                   	ret    

c00015b9 <dlmemalign>:
c00015b9:	55                   	push   ebp
c00015ba:	57                   	push   edi
c00015bb:	56                   	push   esi
c00015bc:	53                   	push   ebx
c00015bd:	83 ec 0c             	sub    esp,0xc
c00015c0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00015c8:	83 fa 08             	cmp    edx,0x8
c00015cb:	77 10                	ja     c00015dd <dlmemalign+0x24>
c00015cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00015d1:	83 c4 0c             	add    esp,0xc
c00015d4:	5b                   	pop    ebx
c00015d5:	5e                   	pop    esi
c00015d6:	5f                   	pop    edi
c00015d7:	5d                   	pop    ebp
c00015d8:	e9 ea f8 ff ff       	jmp    c0000ec7 <dlmalloc>
c00015dd:	bf 10 00 00 00       	mov    edi,0x10
c00015e2:	83 fa 0f             	cmp    edx,0xf
c00015e5:	76 13                	jbe    c00015fa <dlmemalign+0x41>
c00015e7:	8d 4a ff             	lea    ecx,[edx-0x1]
c00015ea:	85 d1                	test   ecx,edx
c00015ec:	75 04                	jne    c00015f2 <dlmemalign+0x39>
c00015ee:	89 d7                	mov    edi,edx
c00015f0:	eb 08                	jmp    c00015fa <dlmemalign+0x41>
c00015f2:	39 d7                	cmp    edi,edx
c00015f4:	73 04                	jae    c00015fa <dlmemalign+0x41>
c00015f6:	01 ff                	add    edi,edi
c00015f8:	eb f8                	jmp    c00015f2 <dlmemalign+0x39>
c00015fa:	83 f8 df             	cmp    eax,0xffffffdf
c00015fd:	76 07                	jbe    c0001606 <dlmemalign+0x4d>
c00015ff:	31 c0                	xor    eax,eax
c0001601:	e9 ce 00 00 00       	jmp    c00016d4 <dlmemalign+0x11b>
c0001606:	83 c0 0b             	add    eax,0xb
c0001609:	bd 10 00 00 00       	mov    ebp,0x10
c000160e:	83 f8 0f             	cmp    eax,0xf
c0001611:	76 05                	jbe    c0001618 <dlmemalign+0x5f>
c0001613:	83 e0 f8             	and    eax,0xfffffff8
c0001616:	89 c5                	mov    ebp,eax
c0001618:	83 ec 0c             	sub    esp,0xc
c000161b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000161f:	50                   	push   eax
c0001620:	e8 a2 f8 ff ff       	call   c0000ec7 <dlmalloc>
c0001625:	83 c4 10             	add    esp,0x10
c0001628:	89 c1                	mov    ecx,eax
c000162a:	85 c0                	test   eax,eax
c000162c:	74 d1                	je     c00015ff <dlmemalign+0x46>
c000162e:	31 d2                	xor    edx,edx
c0001630:	8d 70 f8             	lea    esi,[eax-0x8]
c0001633:	f7 f7                	div    edi
c0001635:	85 d2                	test   edx,edx
c0001637:	74 62                	je     c000169b <dlmemalign+0xe2>
c0001639:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000163d:	89 f8                	mov    eax,edi
c000163f:	f7 d8                	neg    eax
c0001641:	21 c3                	and    ebx,eax
c0001643:	83 eb 08             	sub    ebx,0x8
c0001646:	89 d8                	mov    eax,ebx
c0001648:	29 f0                	sub    eax,esi
c000164a:	83 f8 0f             	cmp    eax,0xf
c000164d:	77 02                	ja     c0001651 <dlmemalign+0x98>
c000164f:	01 fb                	add    ebx,edi
c0001651:	89 d8                	mov    eax,ebx
c0001653:	29 f0                	sub    eax,esi
c0001655:	89 c6                	mov    esi,eax
c0001657:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000165a:	89 c2                	mov    edx,eax
c000165c:	83 e2 fc             	and    edx,0xfffffffc
c000165f:	29 f2                	sub    edx,esi
c0001661:	a8 02                	test   al,0x2
c0001663:	74 10                	je     c0001675 <dlmemalign+0xbc>
c0001665:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001668:	83 ca 02             	or     edx,0x2
c000166b:	8d 43 08             	lea    eax,[ebx+0x8]
c000166e:	89 33                	mov    DWORD PTR [ebx],esi
c0001670:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001673:	eb 5f                	jmp    c00016d4 <dlmemalign+0x11b>
c0001675:	83 ec 0c             	sub    esp,0xc
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 c8 01             	or     eax,0x1
c000167d:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001680:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001685:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001688:	83 e0 01             	and    eax,0x1
c000168b:	09 f0                	or     eax,esi
c000168d:	89 de                	mov    esi,ebx
c000168f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001692:	51                   	push   ecx
c0001693:	e8 d4 f4 ff ff       	call   c0000b6c <dlfree>
c0001698:	83 c4 10             	add    esp,0x10
c000169b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000169e:	a8 02                	test   al,0x2
c00016a0:	75 2f                	jne    c00016d1 <dlmemalign+0x118>
c00016a2:	83 e0 fc             	and    eax,0xfffffffc
c00016a5:	8d 55 10             	lea    edx,[ebp+0x10]
c00016a8:	39 c2                	cmp    edx,eax
c00016aa:	73 25                	jae    c00016d1 <dlmemalign+0x118>
c00016ac:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016af:	83 ec 0c             	sub    esp,0xc
c00016b2:	29 e8                	sub    eax,ebp
c00016b4:	83 c2 08             	add    edx,0x8
c00016b7:	83 c8 01             	or     eax,0x1
c00016ba:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00016bd:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016c0:	83 e0 01             	and    eax,0x1
c00016c3:	09 c5                	or     ebp,eax
c00016c5:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00016c8:	52                   	push   edx
c00016c9:	e8 9e f4 ff ff       	call   c0000b6c <dlfree>
c00016ce:	83 c4 10             	add    esp,0x10
c00016d1:	8d 46 08             	lea    eax,[esi+0x8]
c00016d4:	83 c4 0c             	add    esp,0xc
c00016d7:	5b                   	pop    ebx
c00016d8:	5e                   	pop    esi
c00016d9:	5f                   	pop    edi
c00016da:	5d                   	pop    ebp
c00016db:	c3                   	ret    

c00016dc <dlcalloc>:
c00016dc:	53                   	push   ebx
c00016dd:	83 ec 14             	sub    esp,0x14
c00016e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00016e4:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00016e9:	50                   	push   eax
c00016ea:	e8 d8 f7 ff ff       	call   c0000ec7 <dlmalloc>
c00016ef:	83 c4 10             	add    esp,0x10
c00016f2:	89 c3                	mov    ebx,eax
c00016f4:	85 c0                	test   eax,eax
c00016f6:	74 77                	je     c000176f <dlcalloc+0x93>
c00016f8:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00016fb:	89 d0                	mov    eax,edx
c00016fd:	83 e0 fc             	and    eax,0xfffffffc
c0001700:	80 e2 02             	and    dl,0x2
c0001703:	75 5a                	jne    c000175f <dlcalloc+0x83>
c0001705:	83 e8 04             	sub    eax,0x4
c0001708:	83 f8 27             	cmp    eax,0x27
c000170b:	76 03                	jbe    c0001710 <dlcalloc+0x34>
c000170d:	51                   	push   ecx
c000170e:	eb 53                	jmp    c0001763 <dlcalloc+0x87>
c0001710:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001716:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000171d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001724:	83 f8 13             	cmp    eax,0x13
c0001727:	76 46                	jbe    c000176f <dlcalloc+0x93>
c0001729:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001730:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001737:	83 f8 1b             	cmp    eax,0x1b
c000173a:	76 33                	jbe    c000176f <dlcalloc+0x93>
c000173c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001743:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000174a:	83 f8 23             	cmp    eax,0x23
c000174d:	76 20                	jbe    c000176f <dlcalloc+0x93>
c000174f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001756:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000175d:	eb 10                	jmp    c000176f <dlcalloc+0x93>
c000175f:	83 e8 08             	sub    eax,0x8
c0001762:	52                   	push   edx
c0001763:	50                   	push   eax
c0001764:	6a 00                	push   0x0
c0001766:	53                   	push   ebx
c0001767:	e8 1f ef ff ff       	call   c000068b <memset>
c000176c:	83 c4 10             	add    esp,0x10
c000176f:	89 d8                	mov    eax,ebx
c0001771:	83 c4 08             	add    esp,0x8
c0001774:	5b                   	pop    ebx
c0001775:	c3                   	ret    

c0001776 <dlcfree>:
c0001776:	e9 f1 f3 ff ff       	jmp    c0000b6c <dlfree>

c000177b <dlindependent_calloc>:
c000177b:	83 ec 28             	sub    esp,0x28
c000177e:	b9 03 00 00 00       	mov    ecx,0x3
c0001783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000178b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000178f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001797:	e8 b9 fa ff ff       	call   c0001255 <iALLOc>
c000179c:	83 c4 2c             	add    esp,0x2c
c000179f:	c3                   	ret    

c00017a0 <dlindependent_comalloc>:
c00017a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017a8:	31 c9                	xor    ecx,ecx
c00017aa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017b2:	e9 9e fa ff ff       	jmp    c0001255 <iALLOc>

c00017b7 <dlvalloc>:
c00017b7:	83 ec 0c             	sub    esp,0xc
c00017ba:	83 3d 80 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c580,0x0
c00017c1:	75 0a                	jne    c00017cd <dlvalloc+0x16>
c00017c3:	b8 80 c5 02 c0       	mov    eax,0xc002c580
c00017c8:	e8 b8 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017cd:	50                   	push   eax
c00017ce:	50                   	push   eax
c00017cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00017d3:	ff 35 dc c8 02 c0    	push   DWORD PTR ds:0xc002c8dc
c00017d9:	e8 db fd ff ff       	call   c00015b9 <dlmemalign>
c00017de:	83 c4 1c             	add    esp,0x1c
c00017e1:	c3                   	ret    

c00017e2 <dlpvalloc>:
c00017e2:	83 ec 0c             	sub    esp,0xc
c00017e5:	83 3d 80 c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c580,0x0
c00017ec:	75 0a                	jne    c00017f8 <dlpvalloc+0x16>
c00017ee:	b8 80 c5 02 c0       	mov    eax,0xc002c580
c00017f3:	e8 8d f2 ff ff       	call   c0000a85 <malloc_consolidate>
c00017f8:	a1 dc c8 02 c0       	mov    eax,ds:0xc002c8dc
c00017fd:	89 c1                	mov    ecx,eax
c00017ff:	52                   	push   edx
c0001800:	f7 d9                	neg    ecx
c0001802:	52                   	push   edx
c0001803:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001807:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000180b:	21 ca                	and    edx,ecx
c000180d:	52                   	push   edx
c000180e:	50                   	push   eax
c000180f:	e8 a5 fd ff ff       	call   c00015b9 <dlmemalign>
c0001814:	83 c4 1c             	add    esp,0x1c
c0001817:	c3                   	ret    

c0001818 <dlmalloc_trim>:
c0001818:	b8 80 c5 02 c0       	mov    eax,0xc002c580
c000181d:	e8 63 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001822:	31 c0                	xor    eax,eax
c0001824:	c3                   	ret    

c0001825 <dlmalloc_usable_size>:
c0001825:	53                   	push   ebx
c0001826:	31 c0                	xor    eax,eax
c0001828:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000182c:	85 c9                	test   ecx,ecx
c000182e:	74 24                	je     c0001854 <dlmalloc_usable_size+0x2f>
c0001830:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001833:	f6 c2 02             	test   dl,0x2
c0001836:	74 08                	je     c0001840 <dlmalloc_usable_size+0x1b>
c0001838:	83 e2 fc             	and    edx,0xfffffffc
c000183b:	8d 42 f8             	lea    eax,[edx-0x8]
c000183e:	eb 14                	jmp    c0001854 <dlmalloc_usable_size+0x2f>
c0001840:	89 d3                	mov    ebx,edx
c0001842:	31 c0                	xor    eax,eax
c0001844:	83 e3 fe             	and    ebx,0xfffffffe
c0001847:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c000184c:	74 06                	je     c0001854 <dlmalloc_usable_size+0x2f>
c000184e:	83 e2 fc             	and    edx,0xfffffffc
c0001851:	8d 42 fc             	lea    eax,[edx-0x4]
c0001854:	5b                   	pop    ebx
c0001855:	c3                   	ret    

c0001856 <dlmallinfo>:
c0001856:	55                   	push   ebp
c0001857:	57                   	push   edi
c0001858:	56                   	push   esi
c0001859:	53                   	push   ebx
c000185a:	83 ec 08             	sub    esp,0x8
c000185d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001861:	83 3d ac c5 02 c0 00 	cmp    DWORD PTR ds:0xc002c5ac,0x0
c0001868:	75 0a                	jne    c0001874 <dlmallinfo+0x1e>
c000186a:	b8 80 c5 02 c0       	mov    eax,0xc002c580
c000186f:	e8 11 f2 ff ff       	call   c0000a85 <malloc_consolidate>
c0001874:	a1 ac c5 02 c0       	mov    eax,ds:0xc002c5ac
c0001879:	31 ed                	xor    ebp,ebp
c000187b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000187e:	31 c9                	xor    ecx,ecx
c0001880:	83 e0 fc             	and    eax,0xfffffffc
c0001883:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001887:	31 c0                	xor    eax,eax
c0001889:	8b 14 85 84 c5 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3a7c]
c0001890:	85 d2                	test   edx,edx
c0001892:	74 0e                	je     c00018a2 <dlmallinfo+0x4c>
c0001894:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001897:	45                   	inc    ebp
c0001898:	83 e6 fc             	and    esi,0xfffffffc
c000189b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000189e:	01 f1                	add    ecx,esi
c00018a0:	eb ee                	jmp    c0001890 <dlmallinfo+0x3a>
c00018a2:	40                   	inc    eax
c00018a3:	83 f8 0a             	cmp    eax,0xa
c00018a6:	75 e1                	jne    c0001889 <dlmallinfo+0x33>
c00018a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018ac:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018b3:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018b6:	b8 b4 c5 02 c0       	mov    eax,0xc002c5b4
c00018bb:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018be:	39 f0                	cmp    eax,esi
c00018c0:	74 10                	je     c00018d2 <dlmallinfo+0x7c>
c00018c2:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00018c5:	ff 04 24             	inc    DWORD PTR [esp]
c00018c8:	83 e7 fc             	and    edi,0xfffffffc
c00018cb:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00018ce:	01 fa                	add    edx,edi
c00018d0:	eb ec                	jmp    c00018be <dlmallinfo+0x68>
c00018d2:	83 c0 08             	add    eax,0x8
c00018d5:	3d ac c8 02 c0       	cmp    eax,0xc002c8ac
c00018da:	75 df                	jne    c00018bb <dlmallinfo+0x65>
c00018dc:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00018df:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00018e2:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00018e5:	a1 e8 c8 02 c0       	mov    eax,ds:0xc002c8e8
c00018ea:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00018ed:	89 03                	mov    DWORD PTR [ebx],eax
c00018ef:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00018f2:	8b 35 d0 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8d0
c00018f8:	29 d0                	sub    eax,edx
c00018fa:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c00018fd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001900:	8b 35 e4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8e4
c0001906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000190a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000190d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001910:	8b 35 f4 c8 02 c0    	mov    esi,DWORD PTR ds:0xc002c8f4
c0001916:	89 d8                	mov    eax,ebx
c0001918:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000191b:	83 c4 08             	add    esp,0x8
c000191e:	5b                   	pop    ebx
c000191f:	5e                   	pop    esi
c0001920:	5f                   	pop    edi
c0001921:	5d                   	pop    ebp
c0001922:	c2 04 00             	ret    0x4

c0001925 <dlmalloc_stats>:
c0001925:	83 ec 30             	sub    esp,0x30
c0001928:	8d 44 24 08          	lea    eax,[esp+0x8]
c000192c:	50                   	push   eax
c000192d:	e8 24 ff ff ff       	call   c0001856 <dlmallinfo>
c0001932:	83 c4 30             	add    esp,0x30
c0001935:	c3                   	ret    

c0001936 <dlmallopt>:
c0001936:	56                   	push   esi
c0001937:	b8 80 c5 02 c0       	mov    eax,0xc002c580
c000193c:	53                   	push   ebx
c000193d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001941:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001945:	e8 3b f1 ff ff       	call   c0000a85 <malloc_consolidate>
c000194a:	8d 46 04             	lea    eax,[esi+0x4]
c000194d:	83 f8 05             	cmp    eax,0x5
c0001950:	77 67                	ja     c00019b9 <dlmallopt+0x83>
c0001952:	ff 24 85 04 7d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd82fc]
c0001959:	83 fb 50             	cmp    ebx,0x50
c000195c:	77 5b                	ja     c00019b9 <dlmallopt+0x83>
c000195e:	ba 08 00 00 00       	mov    edx,0x8
c0001963:	85 db                	test   ebx,ebx
c0001965:	74 12                	je     c0001979 <dlmallopt+0x43>
c0001967:	83 c3 0b             	add    ebx,0xb
c000196a:	ba 10 00 00 00       	mov    edx,0x10
c000196f:	83 fb 0f             	cmp    ebx,0xf
c0001972:	76 05                	jbe    c0001979 <dlmallopt+0x43>
c0001974:	89 da                	mov    edx,ebx
c0001976:	83 e2 f8             	and    edx,0xfffffff8
c0001979:	a1 80 c5 02 c0       	mov    eax,ds:0xc002c580
c000197e:	83 e0 03             	and    eax,0x3
c0001981:	09 d0                	or     eax,edx
c0001983:	a3 80 c5 02 c0       	mov    ds:0xc002c580,eax
c0001988:	eb 31                	jmp    c00019bb <dlmallopt+0x85>
c000198a:	89 1d c4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c4,ebx
c0001990:	eb 06                	jmp    c0001998 <dlmallopt+0x62>
c0001992:	89 1d c8 c8 02 c0    	mov    DWORD PTR ds:0xc002c8c8,ebx
c0001998:	be 01 00 00 00       	mov    esi,0x1
c000199d:	eb 1c                	jmp    c00019bb <dlmallopt+0x85>
c000199f:	89 1d cc c8 02 c0    	mov    DWORD PTR ds:0xc002c8cc,ebx
c00019a5:	eb f1                	jmp    c0001998 <dlmallopt+0x62>
c00019a7:	31 f6                	xor    esi,esi
c00019a9:	85 db                	test   ebx,ebx
c00019ab:	75 0e                	jne    c00019bb <dlmallopt+0x85>
c00019ad:	c7 05 d4 c8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c8d4,0x0
c00019b7:	eb df                	jmp    c0001998 <dlmallopt+0x62>
c00019b9:	31 f6                	xor    esi,esi
c00019bb:	89 f0                	mov    eax,esi
c00019bd:	5b                   	pop    ebx
c00019be:	5e                   	pop    esi
c00019bf:	c3                   	ret    

c00019c0 <disk_status>:
c00019c0:	31 c0                	xor    eax,eax
c00019c2:	c3                   	ret    

c00019c3 <disk_initialize>:
c00019c3:	31 c0                	xor    eax,eax
c00019c5:	c3                   	ret    

c00019c6 <disk_read>:
c00019c6:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019cb:	0f b6 04 85 40 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1fc0]
c00019d3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d7:	e9 70 e3 01 00       	jmp    c001fd4c <fatWrapperReadDisk>

c00019dc <disk_write>:
c00019dc:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00019e1:	0f b6 04 85 40 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1fc0]
c00019e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019ed:	e9 a1 e3 01 00       	jmp    c001fd93 <fatWrapperWriteDisk>

c00019f2 <disk_ioctl>:
c00019f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00019f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00019fb:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a00:	0f b6 04 85 40 e0 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1fc0]
c0001a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a0c:	e9 c9 e3 01 00       	jmp    c001fdda <fatWrapperIoctl>

c0001a11 <ld_word>:
c0001a11:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a18:	c1 e2 08             	shl    edx,0x8
c0001a1b:	09 d0                	or     eax,edx
c0001a1d:	c3                   	ret    

c0001a1e <ld_dword>:
c0001a1e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a22:	89 d1                	mov    ecx,edx
c0001a24:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a28:	c1 e1 08             	shl    ecx,0x8
c0001a2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a2e:	09 ca                	or     edx,ecx
c0001a30:	c1 e2 08             	shl    edx,0x8
c0001a33:	09 d0                	or     eax,edx
c0001a35:	c3                   	ret    

c0001a36 <ld_qword>:
c0001a36:	57                   	push   edi
c0001a37:	56                   	push   esi
c0001a38:	53                   	push   ebx
c0001a39:	31 db                	xor    ebx,ebx
c0001a3b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a3e:	89 df                	mov    edi,ebx
c0001a40:	89 ce                	mov    esi,ecx
c0001a42:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a46:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a4a:	c1 e6 08             	shl    esi,0x8
c0001a4d:	09 f2                	or     edx,esi
c0001a4f:	89 d6                	mov    esi,edx
c0001a51:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a55:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a59:	c1 e6 08             	shl    esi,0x8
c0001a5c:	09 f2                	or     edx,esi
c0001a5e:	89 d6                	mov    esi,edx
c0001a60:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a64:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e6 08             	shl    esi,0x8
c0001a6e:	89 fb                	mov    ebx,edi
c0001a70:	09 f2                	or     edx,esi
c0001a72:	89 d1                	mov    ecx,edx
c0001a74:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001a78:	c1 e1 08             	shl    ecx,0x8
c0001a7b:	89 da                	mov    edx,ebx
c0001a7d:	09 c8                	or     eax,ecx
c0001a7f:	5b                   	pop    ebx
c0001a80:	5e                   	pop    esi
c0001a81:	5f                   	pop    edi
c0001a82:	c3                   	ret    

c0001a83 <st_word>:
c0001a83:	66 89 10             	mov    WORD PTR [eax],dx
c0001a86:	c3                   	ret    

c0001a87 <st_dword>:
c0001a87:	89 10                	mov    DWORD PTR [eax],edx
c0001a89:	c3                   	ret    

c0001a8a <st_qword>:
c0001a8a:	89 10                	mov    DWORD PTR [eax],edx
c0001a8c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a8f:	c3                   	ret    

c0001a90 <mem_cpy>:
c0001a90:	85 c9                	test   ecx,ecx
c0001a92:	74 10                	je     c0001aa4 <mem_cpy+0x14>
c0001a94:	57                   	push   edi
c0001a95:	01 c1                	add    ecx,eax
c0001a97:	56                   	push   esi
c0001a98:	89 c7                	mov    edi,eax
c0001a9a:	89 d6                	mov    esi,edx
c0001a9c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a9d:	39 f9                	cmp    ecx,edi
c0001a9f:	75 fb                	jne    c0001a9c <mem_cpy+0xc>
c0001aa1:	5e                   	pop    esi
c0001aa2:	5f                   	pop    edi
c0001aa3:	c3                   	ret    
c0001aa4:	c3                   	ret    

c0001aa5 <mem_set>:
c0001aa5:	01 c1                	add    ecx,eax
c0001aa7:	40                   	inc    eax
c0001aa8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001aab:	39 c8                	cmp    eax,ecx
c0001aad:	75 f8                	jne    c0001aa7 <mem_set+0x2>
c0001aaf:	c3                   	ret    

c0001ab0 <mem_cmp>:
c0001ab0:	57                   	push   edi
c0001ab1:	56                   	push   esi
c0001ab2:	89 c6                	mov    esi,eax
c0001ab4:	53                   	push   ebx
c0001ab5:	46                   	inc    esi
c0001ab6:	42                   	inc    edx
c0001ab7:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001abb:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001abf:	29 fb                	sub    ebx,edi
c0001ac1:	89 cf                	mov    edi,ecx
c0001ac3:	29 f7                	sub    edi,esi
c0001ac5:	01 c7                	add    edi,eax
c0001ac7:	74 04                	je     c0001acd <mem_cmp+0x1d>
c0001ac9:	85 db                	test   ebx,ebx
c0001acb:	74 e8                	je     c0001ab5 <mem_cmp+0x5>
c0001acd:	89 d8                	mov    eax,ebx
c0001acf:	5b                   	pop    ebx
c0001ad0:	5e                   	pop    esi
c0001ad1:	5f                   	pop    edi
c0001ad2:	c3                   	ret    

c0001ad3 <chk_chr>:
c0001ad3:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001ad6:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001ad9:	74 07                	je     c0001ae2 <chk_chr+0xf>
c0001adb:	39 d1                	cmp    ecx,edx
c0001add:	74 03                	je     c0001ae2 <chk_chr+0xf>
c0001adf:	40                   	inc    eax
c0001ae0:	eb f1                	jmp    c0001ad3 <chk_chr>
c0001ae2:	89 c8                	mov    eax,ecx
c0001ae4:	c3                   	ret    

c0001ae5 <dbc_1st>:
c0001ae5:	31 c0                	xor    eax,eax
c0001ae7:	c3                   	ret    

c0001ae8 <dbc_2nd>:
c0001ae8:	31 c0                	xor    eax,eax
c0001aea:	c3                   	ret    

c0001aeb <tchar2uni>:
c0001aeb:	57                   	push   edi
c0001aec:	89 c7                	mov    edi,eax
c0001aee:	56                   	push   esi
c0001aef:	53                   	push   ebx
c0001af0:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001af2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001af4:	8d 73 01             	lea    esi,[ebx+0x1]
c0001af7:	84 c9                	test   cl,cl
c0001af9:	78 0a                	js     c0001b05 <tchar2uni+0x1a>
c0001afb:	0f b6 d1             	movzx  edx,cl
c0001afe:	89 f3                	mov    ebx,esi
c0001b00:	e9 9f 00 00 00       	jmp    c0001ba4 <tchar2uni+0xb9>
c0001b05:	88 ca                	mov    dl,cl
c0001b07:	83 e2 e0             	and    edx,0xffffffe0
c0001b0a:	80 fa c0             	cmp    dl,0xc0
c0001b0d:	75 0c                	jne    c0001b1b <tchar2uni+0x30>
c0001b0f:	89 ca                	mov    edx,ecx
c0001b11:	b9 01 00 00 00       	mov    ecx,0x1
c0001b16:	83 e2 1f             	and    edx,0x1f
c0001b19:	eb 2e                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b1b:	88 ca                	mov    dl,cl
c0001b1d:	83 e2 f0             	and    edx,0xfffffff0
c0001b20:	80 fa e0             	cmp    dl,0xe0
c0001b23:	75 0c                	jne    c0001b31 <tchar2uni+0x46>
c0001b25:	89 ca                	mov    edx,ecx
c0001b27:	b9 02 00 00 00       	mov    ecx,0x2
c0001b2c:	83 e2 0f             	and    edx,0xf
c0001b2f:	eb 18                	jmp    c0001b49 <tchar2uni+0x5e>
c0001b31:	88 ca                	mov    dl,cl
c0001b33:	83 e2 f8             	and    edx,0xfffffff8
c0001b36:	88 d0                	mov    al,dl
c0001b38:	83 ca ff             	or     edx,0xffffffff
c0001b3b:	3c f0                	cmp    al,0xf0
c0001b3d:	75 6c                	jne    c0001bab <tchar2uni+0xc0>
c0001b3f:	89 ca                	mov    edx,ecx
c0001b41:	b9 03 00 00 00       	mov    ecx,0x3
c0001b46:	83 e2 07             	and    edx,0x7
c0001b49:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b4d:	46                   	inc    esi
c0001b4e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b51:	88 c8                	mov    al,cl
c0001b53:	83 e0 c0             	and    eax,0xffffffc0
c0001b56:	3c 80                	cmp    al,0x80
c0001b58:	75 4e                	jne    c0001ba8 <tchar2uni+0xbd>
c0001b5a:	c1 e2 06             	shl    edx,0x6
c0001b5d:	83 e1 3f             	and    ecx,0x3f
c0001b60:	09 ca                	or     edx,ecx
c0001b62:	39 de                	cmp    esi,ebx
c0001b64:	75 e7                	jne    c0001b4d <tchar2uni+0x62>
c0001b66:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001b69:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001b6f:	77 37                	ja     c0001ba8 <tchar2uni+0xbd>
c0001b71:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001b77:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b7d:	76 29                	jbe    c0001ba8 <tchar2uni+0xbd>
c0001b7f:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b85:	76 1d                	jbe    c0001ba4 <tchar2uni+0xb9>
c0001b87:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b8d:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b93:	c1 e1 06             	shl    ecx,0x6
c0001b96:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b9c:	09 ca                	or     edx,ecx
c0001b9e:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001ba4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001ba6:	eb 03                	jmp    c0001bab <tchar2uni+0xc0>
c0001ba8:	83 ca ff             	or     edx,0xffffffff
c0001bab:	5b                   	pop    ebx
c0001bac:	89 d0                	mov    eax,edx
c0001bae:	5e                   	pop    esi
c0001baf:	5f                   	pop    edi
c0001bb0:	c3                   	ret    

c0001bb1 <put_utf>:
c0001bb1:	53                   	push   ebx
c0001bb2:	83 f8 7f             	cmp    eax,0x7f
c0001bb5:	89 c3                	mov    ebx,eax
c0001bb7:	b0 00                	mov    al,0x0
c0001bb9:	77 11                	ja     c0001bcc <put_utf+0x1b>
c0001bbb:	85 c9                	test   ecx,ecx
c0001bbd:	0f 84 e5 00 00 00    	je     c0001ca8 <put_utf+0xf7>
c0001bc3:	88 1a                	mov    BYTE PTR [edx],bl
c0001bc5:	b0 01                	mov    al,0x1
c0001bc7:	e9 dc 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bcc:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001bd2:	77 23                	ja     c0001bf7 <put_utf+0x46>
c0001bd4:	83 f9 01             	cmp    ecx,0x1
c0001bd7:	0f 86 cb 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001bdd:	89 d8                	mov    eax,ebx
c0001bdf:	83 e3 3f             	and    ebx,0x3f
c0001be2:	c1 e8 06             	shr    eax,0x6
c0001be5:	83 cb 80             	or     ebx,0xffffff80
c0001be8:	83 c8 c0             	or     eax,0xffffffc0
c0001beb:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001bee:	88 02                	mov    BYTE PTR [edx],al
c0001bf0:	b0 02                	mov    al,0x2
c0001bf2:	e9 b1 00 00 00       	jmp    c0001ca8 <put_utf+0xf7>
c0001bf7:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001bfd:	77 40                	ja     c0001c3f <put_utf+0x8e>
c0001bff:	83 f9 02             	cmp    ecx,0x2
c0001c02:	0f 86 a0 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c08:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c0e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c14:	0f 86 8e 00 00 00    	jbe    c0001ca8 <put_utf+0xf7>
c0001c1a:	89 d8                	mov    eax,ebx
c0001c1c:	c1 e8 0c             	shr    eax,0xc
c0001c1f:	83 c8 e0             	or     eax,0xffffffe0
c0001c22:	88 02                	mov    BYTE PTR [edx],al
c0001c24:	89 d8                	mov    eax,ebx
c0001c26:	83 e3 3f             	and    ebx,0x3f
c0001c29:	c1 e8 06             	shr    eax,0x6
c0001c2c:	83 cb 80             	or     ebx,0xffffff80
c0001c2f:	83 e0 3f             	and    eax,0x3f
c0001c32:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c35:	83 c8 80             	or     eax,0xffffff80
c0001c38:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c3b:	b0 03                	mov    al,0x3
c0001c3d:	eb 69                	jmp    c0001ca8 <put_utf+0xf7>
c0001c3f:	83 f9 03             	cmp    ecx,0x3
c0001c42:	76 64                	jbe    c0001ca8 <put_utf+0xf7>
c0001c44:	89 d9                	mov    ecx,ebx
c0001c46:	0f b7 c3             	movzx  eax,bx
c0001c49:	66 31 c9             	xor    cx,cx
c0001c4c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c52:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c58:	c1 e9 06             	shr    ecx,0x6
c0001c5b:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001c61:	77 43                	ja     c0001ca6 <put_utf+0xf5>
c0001c63:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c69:	77 3b                	ja     c0001ca6 <put_utf+0xf5>
c0001c6b:	09 cb                	or     ebx,ecx
c0001c6d:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001c73:	89 d8                	mov    eax,ebx
c0001c75:	c1 e8 12             	shr    eax,0x12
c0001c78:	83 c8 f0             	or     eax,0xfffffff0
c0001c7b:	88 02                	mov    BYTE PTR [edx],al
c0001c7d:	89 d8                	mov    eax,ebx
c0001c7f:	c1 e8 0c             	shr    eax,0xc
c0001c82:	83 e0 3f             	and    eax,0x3f
c0001c85:	83 c8 80             	or     eax,0xffffff80
c0001c88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c8b:	89 d8                	mov    eax,ebx
c0001c8d:	83 e3 3f             	and    ebx,0x3f
c0001c90:	c1 e8 06             	shr    eax,0x6
c0001c93:	83 cb 80             	or     ebx,0xffffff80
c0001c96:	83 e0 3f             	and    eax,0x3f
c0001c99:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c9c:	83 c8 80             	or     eax,0xffffff80
c0001c9f:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ca2:	b0 04                	mov    al,0x4
c0001ca4:	eb 02                	jmp    c0001ca8 <put_utf+0xf7>
c0001ca6:	31 c0                	xor    eax,eax
c0001ca8:	5b                   	pop    ebx
c0001ca9:	c3                   	ret    

c0001caa <clst2sect>:
c0001caa:	89 c1                	mov    ecx,eax
c0001cac:	83 ea 02             	sub    edx,0x2
c0001caf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cb2:	83 e8 02             	sub    eax,0x2
c0001cb5:	39 d0                	cmp    eax,edx
c0001cb7:	76 0d                	jbe    c0001cc6 <clst2sect+0x1c>
c0001cb9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cbd:	f7 e2                	mul    edx
c0001cbf:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cc2:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001cc5:	c3                   	ret    
c0001cc6:	31 c0                	xor    eax,eax
c0001cc8:	31 d2                	xor    edx,edx
c0001cca:	c3                   	ret    

c0001ccb <clmt_clust>:
c0001ccb:	57                   	push   edi
c0001ccc:	89 cf                	mov    edi,ecx
c0001cce:	56                   	push   esi
c0001ccf:	89 d6                	mov    esi,edx
c0001cd1:	53                   	push   ebx
c0001cd2:	0f ac fe 09          	shrd   esi,edi,0x9
c0001cd6:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001cd9:	89 f2                	mov    edx,esi
c0001cdb:	8b 00                	mov    eax,DWORD PTR [eax]
c0001cdd:	c1 ef 09             	shr    edi,0x9
c0001ce0:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001ce4:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001ce7:	89 f9                	mov    ecx,edi
c0001ce9:	31 ff                	xor    edi,edi
c0001ceb:	57                   	push   edi
c0001cec:	56                   	push   esi
c0001ced:	51                   	push   ecx
c0001cee:	52                   	push   edx
c0001cef:	e8 f8 36 02 00       	call   c00253ec <__udivdi3>
c0001cf4:	83 c4 10             	add    esp,0x10
c0001cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001cf9:	85 d2                	test   edx,edx
c0001cfb:	74 10                	je     c0001d0d <clmt_clust+0x42>
c0001cfd:	39 d0                	cmp    eax,edx
c0001cff:	72 07                	jb     c0001d08 <clmt_clust+0x3d>
c0001d01:	29 d0                	sub    eax,edx
c0001d03:	83 c3 08             	add    ebx,0x8
c0001d06:	eb ef                	jmp    c0001cf7 <clmt_clust+0x2c>
c0001d08:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d0b:	89 c2                	mov    edx,eax
c0001d0d:	5b                   	pop    ebx
c0001d0e:	89 d0                	mov    eax,edx
c0001d10:	5e                   	pop    esi
c0001d11:	5f                   	pop    edi
c0001d12:	c3                   	ret    

c0001d13 <pick_lfn>:
c0001d13:	55                   	push   ebp
c0001d14:	57                   	push   edi
c0001d15:	56                   	push   esi
c0001d16:	89 d6                	mov    esi,edx
c0001d18:	53                   	push   ebx
c0001d19:	89 c3                	mov    ebx,eax
c0001d1b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d1e:	e8 ee fc ff ff       	call   c0001a11 <ld_word>
c0001d23:	66 85 c0             	test   ax,ax
c0001d26:	74 04                	je     c0001d2c <pick_lfn+0x19>
c0001d28:	31 c0                	xor    eax,eax
c0001d2a:	eb 5c                	jmp    c0001d88 <pick_lfn+0x75>
c0001d2c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d2f:	bd 01 00 00 00       	mov    ebp,0x1
c0001d34:	83 e1 bf             	and    ecx,0xffffffbf
c0001d37:	31 ff                	xor    edi,edi
c0001d39:	49                   	dec    ecx
c0001d3a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d3d:	0f b6 87 20 7e 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd81e0]
c0001d44:	01 f0                	add    eax,esi
c0001d46:	e8 c6 fc ff ff       	call   c0001a11 <ld_word>
c0001d4b:	66 85 ed             	test   bp,bp
c0001d4e:	74 11                	je     c0001d61 <pick_lfn+0x4e>
c0001d50:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d56:	77 d0                	ja     c0001d28 <pick_lfn+0x15>
c0001d58:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d5c:	89 c5                	mov    ebp,eax
c0001d5e:	41                   	inc    ecx
c0001d5f:	eb 04                	jmp    c0001d65 <pick_lfn+0x52>
c0001d61:	66 40                	inc    ax
c0001d63:	75 c3                	jne    c0001d28 <pick_lfn+0x15>
c0001d65:	47                   	inc    edi
c0001d66:	83 ff 0d             	cmp    edi,0xd
c0001d69:	75 d2                	jne    c0001d3d <pick_lfn+0x2a>
c0001d6b:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001d6e:	74 13                	je     c0001d83 <pick_lfn+0x70>
c0001d70:	66 85 ed             	test   bp,bp
c0001d73:	74 0e                	je     c0001d83 <pick_lfn+0x70>
c0001d75:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d7b:	77 ab                	ja     c0001d28 <pick_lfn+0x15>
c0001d7d:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d83:	b8 01 00 00 00       	mov    eax,0x1
c0001d88:	5b                   	pop    ebx
c0001d89:	5e                   	pop    esi
c0001d8a:	5f                   	pop    edi
c0001d8b:	5d                   	pop    ebp
c0001d8c:	c3                   	ret    

c0001d8d <put_lfn>:
c0001d8d:	55                   	push   ebp
c0001d8e:	31 ed                	xor    ebp,ebp
c0001d90:	57                   	push   edi
c0001d91:	89 d7                	mov    edi,edx
c0001d93:	56                   	push   esi
c0001d94:	31 f6                	xor    esi,esi
c0001d96:	53                   	push   ebx
c0001d97:	83 ec 08             	sub    esp,0x8
c0001d9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d9d:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001da1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001da5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001dab:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001dae:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001db1:	31 d2                	xor    edx,edx
c0001db3:	e8 cb fc ff ff       	call   c0001a83 <st_word>
c0001db8:	0f b6 d9             	movzx  ebx,cl
c0001dbb:	4b                   	dec    ebx
c0001dbc:	6b db 0d             	imul   ebx,ebx,0xd
c0001dbf:	66 83 fe ff          	cmp    si,0xffff
c0001dc3:	74 08                	je     c0001dcd <put_lfn+0x40>
c0001dc5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001dc8:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001dcc:	43                   	inc    ebx
c0001dcd:	0f b6 85 20 7e 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd81e0]
c0001dd4:	0f b7 d6             	movzx  edx,si
c0001dd7:	01 f8                	add    eax,edi
c0001dd9:	e8 a5 fc ff ff       	call   c0001a83 <st_word>
c0001dde:	66 85 f6             	test   si,si
c0001de1:	75 03                	jne    c0001de6 <put_lfn+0x59>
c0001de3:	83 ce ff             	or     esi,0xffffffff
c0001de6:	45                   	inc    ebp
c0001de7:	83 fd 0d             	cmp    ebp,0xd
c0001dea:	75 d3                	jne    c0001dbf <put_lfn+0x32>
c0001dec:	66 46                	inc    si
c0001dee:	74 0a                	je     c0001dfa <put_lfn+0x6d>
c0001df0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001df3:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001df8:	75 09                	jne    c0001e03 <put_lfn+0x76>
c0001dfa:	88 c8                	mov    al,cl
c0001dfc:	83 c8 40             	or     eax,0x40
c0001dff:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e03:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e07:	88 07                	mov    BYTE PTR [edi],al
c0001e09:	83 c4 08             	add    esp,0x8
c0001e0c:	5b                   	pop    ebx
c0001e0d:	5e                   	pop    esi
c0001e0e:	5f                   	pop    edi
c0001e0f:	5d                   	pop    ebp
c0001e10:	c3                   	ret    

c0001e11 <gen_numname>:
c0001e11:	57                   	push   edi
c0001e12:	89 cf                	mov    edi,ecx
c0001e14:	56                   	push   esi
c0001e15:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e1a:	53                   	push   ebx
c0001e1b:	89 c6                	mov    esi,eax
c0001e1d:	83 ec 10             	sub    esp,0x10
c0001e20:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e24:	e8 67 fc ff ff       	call   c0001a90 <mem_cpy>
c0001e29:	83 fb 05             	cmp    ebx,0x5
c0001e2c:	76 2d                	jbe    c0001e5b <gen_numname+0x4a>
c0001e2e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e31:	66 85 c0             	test   ax,ax
c0001e34:	74 25                	je     c0001e5b <gen_numname+0x4a>
c0001e36:	83 c7 02             	add    edi,0x2
c0001e39:	ba 10 00 00 00       	mov    edx,0x10
c0001e3e:	01 db                	add    ebx,ebx
c0001e40:	89 c1                	mov    ecx,eax
c0001e42:	66 d1 e8             	shr    ax,1
c0001e45:	83 e1 01             	and    ecx,0x1
c0001e48:	01 cb                	add    ebx,ecx
c0001e4a:	0f ba e3 10          	bt     ebx,0x10
c0001e4e:	73 06                	jae    c0001e56 <gen_numname+0x45>
c0001e50:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e56:	4a                   	dec    edx
c0001e57:	75 e5                	jne    c0001e3e <gen_numname+0x2d>
c0001e59:	eb d3                	jmp    c0001e2e <gen_numname+0x1d>
c0001e5b:	b8 07 00 00 00       	mov    eax,0x7
c0001e60:	88 d9                	mov    cl,bl
c0001e62:	83 e1 0f             	and    ecx,0xf
c0001e65:	8d 51 30             	lea    edx,[ecx+0x30]
c0001e68:	80 fa 39             	cmp    dl,0x39
c0001e6b:	76 03                	jbe    c0001e70 <gen_numname+0x5f>
c0001e6d:	8d 51 37             	lea    edx,[ecx+0x37]
c0001e70:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001e73:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001e77:	89 da                	mov    edx,ebx
c0001e79:	c1 ea 04             	shr    edx,0x4
c0001e7c:	83 fb 0f             	cmp    ebx,0xf
c0001e7f:	76 06                	jbe    c0001e87 <gen_numname+0x76>
c0001e81:	89 c8                	mov    eax,ecx
c0001e83:	89 d3                	mov    ebx,edx
c0001e85:	eb d9                	jmp    c0001e60 <gen_numname+0x4f>
c0001e87:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e8c:	31 d2                	xor    edx,edx
c0001e8e:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e91:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e94:	39 ca                	cmp    edx,ecx
c0001e96:	73 18                	jae    c0001eb0 <gen_numname+0x9f>
c0001e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e9b:	3c 20                	cmp    al,0x20
c0001e9d:	74 11                	je     c0001eb0 <gen_numname+0x9f>
c0001e9f:	e8 41 fc ff ff       	call   c0001ae5 <dbc_1st>
c0001ea4:	85 c0                	test   eax,eax
c0001ea6:	74 05                	je     c0001ead <gen_numname+0x9c>
c0001ea8:	39 d3                	cmp    ebx,edx
c0001eaa:	74 04                	je     c0001eb0 <gen_numname+0x9f>
c0001eac:	42                   	inc    edx
c0001ead:	42                   	inc    edx
c0001eae:	eb e1                	jmp    c0001e91 <gen_numname+0x80>
c0001eb0:	b0 20                	mov    al,0x20
c0001eb2:	83 f9 07             	cmp    ecx,0x7
c0001eb5:	77 05                	ja     c0001ebc <gen_numname+0xab>
c0001eb7:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ebb:	41                   	inc    ecx
c0001ebc:	42                   	inc    edx
c0001ebd:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001ec1:	83 fa 07             	cmp    edx,0x7
c0001ec4:	76 ea                	jbe    c0001eb0 <gen_numname+0x9f>
c0001ec6:	83 c4 10             	add    esp,0x10
c0001ec9:	5b                   	pop    ebx
c0001eca:	5e                   	pop    esi
c0001ecb:	5f                   	pop    edi
c0001ecc:	c3                   	ret    

c0001ecd <sum_sfn>:
c0001ecd:	31 c9                	xor    ecx,ecx
c0001ecf:	31 d2                	xor    edx,edx
c0001ed1:	d0 ca                	ror    dl,1
c0001ed3:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001ed6:	41                   	inc    ecx
c0001ed7:	83 f9 0b             	cmp    ecx,0xb
c0001eda:	75 f5                	jne    c0001ed1 <sum_sfn+0x4>
c0001edc:	88 d0                	mov    al,dl
c0001ede:	c3                   	ret    

c0001edf <xdir_sum>:
c0001edf:	56                   	push   esi
c0001ee0:	31 c9                	xor    ecx,ecx
c0001ee2:	53                   	push   ebx
c0001ee3:	31 d2                	xor    edx,edx
c0001ee5:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001ee9:	43                   	inc    ebx
c0001eea:	c1 e3 05             	shl    ebx,0x5
c0001eed:	83 fa 02             	cmp    edx,0x2
c0001ef0:	74 0b                	je     c0001efd <xdir_sum+0x1e>
c0001ef2:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001ef6:	66 d1 c9             	ror    cx,1
c0001ef9:	01 f1                	add    ecx,esi
c0001efb:	eb 05                	jmp    c0001f02 <xdir_sum+0x23>
c0001efd:	ba 03 00 00 00       	mov    edx,0x3
c0001f02:	42                   	inc    edx
c0001f03:	39 d3                	cmp    ebx,edx
c0001f05:	77 e6                	ja     c0001eed <xdir_sum+0xe>
c0001f07:	89 c8                	mov    eax,ecx
c0001f09:	5b                   	pop    ebx
c0001f0a:	5e                   	pop    esi
c0001f0b:	c3                   	ret    

c0001f0c <xsum32>:
c0001f0c:	d1 ca                	ror    edx,1
c0001f0e:	0f b6 c0             	movzx  eax,al
c0001f11:	01 d0                	add    eax,edx
c0001f13:	c3                   	ret    

c0001f14 <get_xfileinfo>:
c0001f14:	55                   	push   ebp
c0001f15:	31 c9                	xor    ecx,ecx
c0001f17:	57                   	push   edi
c0001f18:	bd 40 00 00 00       	mov    ebp,0x40
c0001f1d:	56                   	push   esi
c0001f1e:	31 ff                	xor    edi,edi
c0001f20:	53                   	push   ebx
c0001f21:	89 c6                	mov    esi,eax
c0001f23:	83 ec 0c             	sub    esp,0xc
c0001f26:	89 d3                	mov    ebx,edx
c0001f28:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f2f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f36:	76 6d                	jbe    c0001fa5 <get_xfileinfo+0x91>
c0001f38:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f3e:	76 0b                	jbe    c0001f4b <get_xfileinfo+0x37>
c0001f40:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f44:	bf 01 00 00 00       	mov    edi,0x1
c0001f49:	eb 63                	jmp    c0001fae <get_xfileinfo+0x9a>
c0001f4b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f51:	75 03                	jne    c0001f56 <get_xfileinfo+0x42>
c0001f53:	83 c5 02             	add    ebp,0x2
c0001f56:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f59:	83 c5 02             	add    ebp,0x2
c0001f5c:	e8 b0 fa ff ff       	call   c0001a11 <ld_word>
c0001f61:	ff 04 24             	inc    DWORD PTR [esp]
c0001f64:	66 85 c9             	test   cx,cx
c0001f67:	75 0d                	jne    c0001f76 <get_xfileinfo+0x62>
c0001f69:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001f6f:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001f74:	76 2b                	jbe    c0001fa1 <get_xfileinfo+0x8d>
c0001f76:	c1 e1 10             	shl    ecx,0x10
c0001f79:	ba ff 00 00 00       	mov    edx,0xff
c0001f7e:	0f b7 c0             	movzx  eax,ax
c0001f81:	29 fa                	sub    edx,edi
c0001f83:	09 c8                	or     eax,ecx
c0001f85:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f89:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f8d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f91:	e8 1b fc ff ff       	call   c0001bb1 <put_utf>
c0001f96:	84 c0                	test   al,al
c0001f98:	74 a6                	je     c0001f40 <get_xfileinfo+0x2c>
c0001f9a:	0f b6 c0             	movzx  eax,al
c0001f9d:	01 c7                	add    edi,eax
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	89 c1                	mov    ecx,eax
c0001fa3:	eb 8a                	jmp    c0001f2f <get_xfileinfo+0x1b>
c0001fa5:	85 ff                	test   edi,edi
c0001fa7:	74 97                	je     c0001f40 <get_xfileinfo+0x2c>
c0001fa9:	66 85 c9             	test   cx,cx
c0001fac:	75 92                	jne    c0001f40 <get_xfileinfo+0x2c>
c0001fae:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fb3:	31 c0                	xor    eax,eax
c0001fb5:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001fb9:	31 d2                	xor    edx,edx
c0001fbb:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001fbe:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001fc1:	80 e1 10             	and    cl,0x10
c0001fc4:	75 08                	jne    c0001fce <get_xfileinfo+0xba>
c0001fc6:	8d 46 38             	lea    eax,[esi+0x38]
c0001fc9:	e8 68 fa ff ff       	call   c0001a36 <ld_qword>
c0001fce:	89 03                	mov    DWORD PTR [ebx],eax
c0001fd0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001fd3:	8d 46 0c             	lea    eax,[esi+0xc]
c0001fd6:	e8 36 fa ff ff       	call   c0001a11 <ld_word>
c0001fdb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001fdf:	8d 46 0e             	lea    eax,[esi+0xe]
c0001fe2:	e8 2a fa ff ff       	call   c0001a11 <ld_word>
c0001fe7:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001feb:	83 c4 0c             	add    esp,0xc
c0001fee:	5b                   	pop    ebx
c0001fef:	5e                   	pop    esi
c0001ff0:	5f                   	pop    edi
c0001ff1:	5d                   	pop    ebp
c0001ff2:	c3                   	ret    

c0001ff3 <get_ldnumber>:
c0001ff3:	8b 10                	mov    edx,DWORD PTR [eax]
c0001ff5:	85 d2                	test   edx,edx
c0001ff7:	74 14                	je     c000200d <get_ldnumber+0x1a>
c0001ff9:	56                   	push   esi
c0001ffa:	53                   	push   ebx
c0001ffb:	89 d3                	mov    ebx,edx
c0001ffd:	43                   	inc    ebx
c0001ffe:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002001:	80 f9 1f             	cmp    cl,0x1f
c0002004:	76 0d                	jbe    c0002013 <get_ldnumber+0x20>
c0002006:	80 f9 3a             	cmp    cl,0x3a
c0002009:	75 f2                	jne    c0001ffd <get_ldnumber+0xa>
c000200b:	eb 0a                	jmp    c0002017 <get_ldnumber+0x24>
c000200d:	83 c9 ff             	or     ecx,0xffffffff
c0002010:	89 c8                	mov    eax,ecx
c0002012:	c3                   	ret    
c0002013:	31 c9                	xor    ecx,ecx
c0002015:	eb 24                	jmp    c000203b <get_ldnumber+0x48>
c0002017:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000201a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000201d:	80 f9 09             	cmp    cl,0x9
c0002020:	77 16                	ja     c0002038 <get_ldnumber+0x45>
c0002022:	83 c2 02             	add    edx,0x2
c0002025:	83 c9 ff             	or     ecx,0xffffffff
c0002028:	39 d3                	cmp    ebx,edx
c000202a:	75 0f                	jne    c000203b <get_ldnumber+0x48>
c000202c:	89 f2                	mov    edx,esi
c000202e:	89 18                	mov    DWORD PTR [eax],ebx
c0002030:	0f be ca             	movsx  ecx,dl
c0002033:	83 e9 30             	sub    ecx,0x30
c0002036:	eb 03                	jmp    c000203b <get_ldnumber+0x48>
c0002038:	83 c9 ff             	or     ecx,0xffffffff
c000203b:	89 c8                	mov    eax,ecx
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	c3                   	ret    

c0002040 <crc32>:
c0002040:	56                   	push   esi
c0002041:	89 d6                	mov    esi,edx
c0002043:	53                   	push   ebx
c0002044:	b2 01                	mov    dl,0x1
c0002046:	bb 08 00 00 00       	mov    ebx,0x8
c000204b:	89 f1                	mov    ecx,esi
c000204d:	84 d1                	test   cl,dl
c000204f:	0f 95 c1             	setne  cl
c0002052:	0f b6 c9             	movzx  ecx,cl
c0002055:	31 c1                	xor    ecx,eax
c0002057:	89 c8                	mov    eax,ecx
c0002059:	d1 e8                	shr    eax,1
c000205b:	80 e1 01             	and    cl,0x1
c000205e:	74 05                	je     c0002065 <crc32+0x25>
c0002060:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002065:	d1 e2                	shl    edx,1
c0002067:	4b                   	dec    ebx
c0002068:	75 e1                	jne    c000204b <crc32+0xb>
c000206a:	5b                   	pop    ebx
c000206b:	5e                   	pop    esi
c000206c:	c3                   	ret    

c000206d <test_gpt_header>:
c000206d:	55                   	push   ebp
c000206e:	b9 10 00 00 00       	mov    ecx,0x10
c0002073:	57                   	push   edi
c0002074:	ba 20 7d 02 c0       	mov    edx,0xc0027d20
c0002079:	56                   	push   esi
c000207a:	31 ff                	xor    edi,edi
c000207c:	53                   	push   ebx
c000207d:	89 c3                	mov    ebx,eax
c000207f:	e8 2c fa ff ff       	call   c0001ab0 <mem_cmp>
c0002084:	85 c0                	test   eax,eax
c0002086:	75 55                	jne    c00020dd <test_gpt_header+0x70>
c0002088:	89 c7                	mov    edi,eax
c000208a:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000208f:	83 ce ff             	or     esi,0xffffffff
c0002092:	31 d2                	xor    edx,edx
c0002094:	83 fd 03             	cmp    ebp,0x3
c0002097:	76 05                	jbe    c000209e <test_gpt_header+0x31>
c0002099:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000209e:	89 f0                	mov    eax,esi
c00020a0:	45                   	inc    ebp
c00020a1:	e8 9a ff ff ff       	call   c0002040 <crc32>
c00020a6:	83 fd 4c             	cmp    ebp,0x4c
c00020a9:	89 c6                	mov    esi,eax
c00020ab:	75 e5                	jne    c0002092 <test_gpt_header+0x25>
c00020ad:	8d 43 10             	lea    eax,[ebx+0x10]
c00020b0:	f7 d6                	not    esi
c00020b2:	e8 67 f9 ff ff       	call   c0001a1e <ld_dword>
c00020b7:	39 c6                	cmp    esi,eax
c00020b9:	75 22                	jne    c00020dd <test_gpt_header+0x70>
c00020bb:	8d 43 54             	lea    eax,[ebx+0x54]
c00020be:	e8 5b f9 ff ff       	call   c0001a1e <ld_dword>
c00020c3:	83 c0 80             	add    eax,0xffffff80
c00020c6:	75 15                	jne    c00020dd <test_gpt_header+0x70>
c00020c8:	8d 43 50             	lea    eax,[ebx+0x50]
c00020cb:	e8 4e f9 ff ff       	call   c0001a1e <ld_dword>
c00020d0:	3d 80 00 00 00       	cmp    eax,0x80
c00020d5:	0f 96 c0             	setbe  al
c00020d8:	0f b6 c0             	movzx  eax,al
c00020db:	89 c7                	mov    edi,eax
c00020dd:	5b                   	pop    ebx
c00020de:	89 f8                	mov    eax,edi
c00020e0:	5e                   	pop    esi
c00020e1:	5f                   	pop    edi
c00020e2:	5d                   	pop    ebp
c00020e3:	c3                   	ret    

c00020e4 <make_rand>:
c00020e4:	56                   	push   esi
c00020e5:	85 c0                	test   eax,eax
c00020e7:	53                   	push   ebx
c00020e8:	75 05                	jne    c00020ef <make_rand+0xb>
c00020ea:	b8 01 00 00 00       	mov    eax,0x1
c00020ef:	01 d1                	add    ecx,edx
c00020f1:	bb 08 00 00 00       	mov    ebx,0x8
c00020f6:	89 c6                	mov    esi,eax
c00020f8:	d1 e8                	shr    eax,1
c00020fa:	83 e6 01             	and    esi,0x1
c00020fd:	85 f6                	test   esi,esi
c00020ff:	74 05                	je     c0002106 <make_rand+0x22>
c0002101:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002106:	4b                   	dec    ebx
c0002107:	75 ed                	jne    c00020f6 <make_rand+0x12>
c0002109:	42                   	inc    edx
c000210a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000210d:	39 ca                	cmp    edx,ecx
c000210f:	75 e0                	jne    c00020f1 <make_rand+0xd>
c0002111:	5b                   	pop    ebx
c0002112:	5e                   	pop    esi
c0002113:	c3                   	ret    

c0002114 <validate>:
c0002114:	56                   	push   esi
c0002115:	53                   	push   ebx
c0002116:	89 d6                	mov    esi,edx
c0002118:	51                   	push   ecx
c0002119:	85 c0                	test   eax,eax
c000211b:	75 09                	jne    c0002126 <validate+0x12>
c000211d:	b8 09 00 00 00       	mov    eax,0x9
c0002122:	31 c9                	xor    ecx,ecx
c0002124:	eb 2f                	jmp    c0002155 <validate+0x41>
c0002126:	89 c3                	mov    ebx,eax
c0002128:	8b 00                	mov    eax,DWORD PTR [eax]
c000212a:	85 c0                	test   eax,eax
c000212c:	74 ef                	je     c000211d <validate+0x9>
c000212e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002131:	74 ea                	je     c000211d <validate+0x9>
c0002133:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002137:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000213b:	75 e0                	jne    c000211d <validate+0x9>
c000213d:	83 ec 0c             	sub    esp,0xc
c0002140:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002144:	50                   	push   eax
c0002145:	e8 76 f8 ff ff       	call   c00019c0 <disk_status>
c000214a:	83 c4 10             	add    esp,0x10
c000214d:	a8 01                	test   al,0x1
c000214f:	75 cc                	jne    c000211d <validate+0x9>
c0002151:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002153:	31 c0                	xor    eax,eax
c0002155:	89 0e                	mov    DWORD PTR [esi],ecx
c0002157:	5a                   	pop    edx
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	c3                   	ret    

c000215b <sync_window>:
c000215b:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c000215f:	0f 84 85 00 00 00    	je     c00021ea <sync_window+0x8f>
c0002165:	55                   	push   ebp
c0002166:	8d 68 54             	lea    ebp,[eax+0x54]
c0002169:	57                   	push   edi
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 28             	sub    esp,0x28
c0002171:	6a 01                	push   0x1
c0002173:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002176:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002179:	55                   	push   ebp
c000217a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000217e:	50                   	push   eax
c000217f:	e8 58 f8 ff ff       	call   c00019dc <disk_write>
c0002184:	83 c4 20             	add    esp,0x20
c0002187:	ba 01 00 00 00       	mov    edx,0x1
c000218c:	85 c0                	test   eax,eax
c000218e:	75 50                	jne    c00021e0 <sync_window+0x85>
c0002190:	31 ff                	xor    edi,edi
c0002192:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002195:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002199:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000219d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021a0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021a3:	89 c6                	mov    esi,eax
c00021a5:	89 d7                	mov    edi,edx
c00021a7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021aa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021ae:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021b1:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021b5:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021b9:	73 23                	jae    c00021de <sync_window+0x83>
c00021bb:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021bf:	75 1d                	jne    c00021de <sync_window+0x83>
c00021c1:	83 ec 0c             	sub    esp,0xc
c00021c4:	6a 01                	push   0x1
c00021c6:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021ca:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00021ce:	52                   	push   edx
c00021cf:	50                   	push   eax
c00021d0:	55                   	push   ebp
c00021d1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021d5:	50                   	push   eax
c00021d6:	e8 01 f8 ff ff       	call   c00019dc <disk_write>
c00021db:	83 c4 20             	add    esp,0x20
c00021de:	31 d2                	xor    edx,edx
c00021e0:	83 c4 1c             	add    esp,0x1c
c00021e3:	89 d0                	mov    eax,edx
c00021e5:	5b                   	pop    ebx
c00021e6:	5e                   	pop    esi
c00021e7:	5f                   	pop    edi
c00021e8:	5d                   	pop    ebp
c00021e9:	c3                   	ret    
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	89 d0                	mov    eax,edx
c00021ee:	c3                   	ret    

c00021ef <move_window>:
c00021ef:	56                   	push   esi
c00021f0:	53                   	push   ebx
c00021f1:	89 c3                	mov    ebx,eax
c00021f3:	83 ec 14             	sub    esp,0x14
c00021f6:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c00021f9:	75 07                	jne    c0002202 <move_window+0x13>
c00021fb:	31 f6                	xor    esi,esi
c00021fd:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002200:	74 59                	je     c000225b <move_window+0x6c>
c0002202:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000220a:	89 d8                	mov    eax,ebx
c000220c:	e8 4a ff ff ff       	call   c000215b <sync_window>
c0002211:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002215:	89 c6                	mov    esi,eax
c0002217:	85 c0                	test   eax,eax
c0002219:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000221d:	75 3c                	jne    c000225b <move_window+0x6c>
c000221f:	83 ec 0c             	sub    esp,0xc
c0002222:	8d 43 54             	lea    eax,[ebx+0x54]
c0002225:	6a 01                	push   0x1
c0002227:	51                   	push   ecx
c0002228:	52                   	push   edx
c0002229:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000222d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002231:	50                   	push   eax
c0002232:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002236:	50                   	push   eax
c0002237:	e8 8a f7 ff ff       	call   c00019c6 <disk_read>
c000223c:	83 c4 20             	add    esp,0x20
c000223f:	85 c0                	test   eax,eax
c0002241:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002245:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002249:	74 0a                	je     c0002255 <move_window+0x66>
c000224b:	83 ca ff             	or     edx,0xffffffff
c000224e:	be 01 00 00 00       	mov    esi,0x1
c0002253:	89 d1                	mov    ecx,edx
c0002255:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002258:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000225b:	89 f0                	mov    eax,esi
c000225d:	83 c4 14             	add    esp,0x14
c0002260:	5b                   	pop    ebx
c0002261:	5e                   	pop    esi
c0002262:	c3                   	ret    

c0002263 <check_fs>:
c0002263:	53                   	push   ebx
c0002264:	89 c3                	mov    ebx,eax
c0002266:	83 ec 08             	sub    esp,0x8
c0002269:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000226d:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c0002274:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c000227b:	e8 6f ff ff ff       	call   c00021ef <move_window>
c0002280:	ba 04 00 00 00       	mov    edx,0x4
c0002285:	85 c0                	test   eax,eax
c0002287:	0f 85 89 00 00 00    	jne    c0002316 <check_fs+0xb3>
c000228d:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002293:	e8 79 f7 ff ff       	call   c0001a11 <ld_word>
c0002298:	ba 03 00 00 00       	mov    edx,0x3
c000229d:	66 3d 55 aa          	cmp    ax,0xaa55
c00022a1:	75 73                	jne    c0002316 <check_fs+0xb3>
c00022a3:	ba 40 7e 02 c0       	mov    edx,0xc0027e40
c00022a8:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ab:	b9 0b 00 00 00       	mov    ecx,0xb
c00022b0:	e8 fb f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022b5:	ba 01 00 00 00       	mov    edx,0x1
c00022ba:	85 c0                	test   eax,eax
c00022bc:	74 58                	je     c0002316 <check_fs+0xb3>
c00022be:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022c1:	8d 50 18             	lea    edx,[eax+0x18]
c00022c4:	80 fa 01             	cmp    dl,0x1
c00022c7:	76 09                	jbe    c00022d2 <check_fs+0x6f>
c00022c9:	ba 02 00 00 00       	mov    edx,0x2
c00022ce:	3c eb                	cmp    al,0xeb
c00022d0:	75 44                	jne    c0002316 <check_fs+0xb3>
c00022d2:	ba f0 ad 02 c0       	mov    edx,0xc002adf0
c00022d7:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c00022dd:	b9 03 00 00 00       	mov    ecx,0x3
c00022e2:	e8 c9 f7 ff ff       	call   c0001ab0 <mem_cmp>
c00022e7:	31 d2                	xor    edx,edx
c00022e9:	85 c0                	test   eax,eax
c00022eb:	74 29                	je     c0002316 <check_fs+0xb3>
c00022ed:	ba 4c 7e 02 c0       	mov    edx,0xc0027e4c
c00022f2:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c00022f8:	b9 05 00 00 00       	mov    ecx,0x5
c00022fd:	e8 ae f7 ff ff       	call   c0001ab0 <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 0e                	je     c0002316 <check_fs+0xb3>
c0002308:	31 d2                	xor    edx,edx
c000230a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002311:	0f 95 c2             	setne  dl
c0002314:	01 d2                	add    edx,edx
c0002316:	89 d0                	mov    eax,edx
c0002318:	83 c4 08             	add    esp,0x8
c000231b:	5b                   	pop    ebx
c000231c:	c3                   	ret    

c000231d <find_volume>:
c000231d:	55                   	push   ebp
c000231e:	31 c9                	xor    ecx,ecx
c0002320:	57                   	push   edi
c0002321:	56                   	push   esi
c0002322:	89 d6                	mov    esi,edx
c0002324:	53                   	push   ebx
c0002325:	31 d2                	xor    edx,edx
c0002327:	83 ec 3c             	sub    esp,0x3c
c000232a:	89 c3                	mov    ebx,eax
c000232c:	e8 32 ff ff ff       	call   c0002263 <check_fs>
c0002331:	83 f8 02             	cmp    eax,0x2
c0002334:	74 0e                	je     c0002344 <find_volume+0x27>
c0002336:	0f 87 5d 01 00 00    	ja     c0002499 <find_volume+0x17c>
c000233c:	85 f6                	test   esi,esi
c000233e:	0f 84 55 01 00 00    	je     c0002499 <find_volume+0x17c>
c0002344:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000234b:	0f 85 dd 00 00 00    	jne    c000242e <find_volume+0x111>
c0002351:	31 c9                	xor    ecx,ecx
c0002353:	ba 01 00 00 00       	mov    edx,0x1
c0002358:	89 d8                	mov    eax,ebx
c000235a:	e8 90 fe ff ff       	call   c00021ef <move_window>
c000235f:	85 c0                	test   eax,eax
c0002361:	74 0a                	je     c000236d <find_volume+0x50>
c0002363:	b8 04 00 00 00       	mov    eax,0x4
c0002368:	e9 2c 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c000236d:	8d 6b 54             	lea    ebp,[ebx+0x54]
c0002370:	89 e8                	mov    eax,ebp
c0002372:	e8 f6 fc ff ff       	call   c000206d <test_gpt_header>
c0002377:	85 c0                	test   eax,eax
c0002379:	75 0a                	jne    c0002385 <find_volume+0x68>
c000237b:	b8 03 00 00 00       	mov    eax,0x3
c0002380:	e9 14 01 00 00       	jmp    c0002499 <find_volume+0x17c>
c0002385:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c000238b:	e8 8e f6 ff ff       	call   c0001a1e <ld_dword>
c0002390:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002394:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c000239a:	e8 97 f6 ff ff       	call   c0001a36 <ld_qword>
c000239f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023ab:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023bb:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023bf:	74 ba                	je     c000237b <find_volume+0x5e>
c00023c1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023c5:	31 c9                	xor    ecx,ecx
c00023c7:	c1 e7 07             	shl    edi,0x7
c00023ca:	89 d8                	mov    eax,ebx
c00023cc:	89 fa                	mov    edx,edi
c00023ce:	c1 ea 09             	shr    edx,0x9
c00023d1:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c00023d5:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c00023d9:	e8 11 fe ff ff       	call   c00021ef <move_window>
c00023de:	85 c0                	test   eax,eax
c00023e0:	75 81                	jne    c0002363 <find_volume+0x46>
c00023e2:	81 e7 80 01 00 00    	and    edi,0x180
c00023e8:	b9 10 00 00 00       	mov    ecx,0x10
c00023ed:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c00023f1:	ba 30 7e 02 c0       	mov    edx,0xc0027e30
c00023f6:	e8 b5 f6 ff ff       	call   c0001ab0 <mem_cmp>
c00023fb:	85 c0                	test   eax,eax
c00023fd:	75 29                	jne    c0002428 <find_volume+0x10b>
c00023ff:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002403:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002407:	e8 2a f6 ff ff       	call   c0001a36 <ld_qword>
c000240c:	89 d1                	mov    ecx,edx
c000240e:	89 c2                	mov    edx,eax
c0002410:	89 d8                	mov    eax,ebx
c0002412:	e8 4c fe ff ff       	call   c0002263 <check_fs>
c0002417:	85 f6                	test   esi,esi
c0002419:	75 07                	jne    c0002422 <find_volume+0x105>
c000241b:	83 f8 01             	cmp    eax,0x1
c000241e:	77 08                	ja     c0002428 <find_volume+0x10b>
c0002420:	eb 77                	jmp    c0002499 <find_volume+0x17c>
c0002422:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002426:	74 71                	je     c0002499 <find_volume+0x17c>
c0002428:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000242c:	eb 89                	jmp    c00023b7 <find_volume+0x9a>
c000242e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002432:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002438:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000243e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002442:	89 cd                	mov    ebp,ecx
c0002444:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002448:	89 f8                	mov    eax,edi
c000244a:	83 c7 10             	add    edi,0x10
c000244d:	e8 cc f5 ff ff       	call   c0001a1e <ld_dword>
c0002452:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002456:	89 01                	mov    DWORD PTR [ecx],eax
c0002458:	83 c1 04             	add    ecx,0x4
c000245b:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c000245f:	75 e3                	jne    c0002444 <find_volume+0x127>
c0002461:	31 ff                	xor    edi,edi
c0002463:	85 f6                	test   esi,esi
c0002465:	74 03                	je     c000246a <find_volume+0x14d>
c0002467:	8d 7e ff             	lea    edi,[esi-0x1]
c000246a:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000246e:	85 d2                	test   edx,edx
c0002470:	74 14                	je     c0002486 <find_volume+0x169>
c0002472:	31 c9                	xor    ecx,ecx
c0002474:	89 d8                	mov    eax,ebx
c0002476:	e8 e8 fd ff ff       	call   c0002263 <check_fs>
c000247b:	83 f8 01             	cmp    eax,0x1
c000247e:	76 19                	jbe    c0002499 <find_volume+0x17c>
c0002480:	85 f6                	test   esi,esi
c0002482:	74 0f                	je     c0002493 <find_volume+0x176>
c0002484:	eb 13                	jmp    c0002499 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 85 ed fe ff ff    	jne    c000237b <find_volume+0x5e>
c000248e:	b8 03 00 00 00       	mov    eax,0x3
c0002493:	47                   	inc    edi
c0002494:	83 ff 03             	cmp    edi,0x3
c0002497:	76 d1                	jbe    c000246a <find_volume+0x14d>
c0002499:	83 c4 3c             	add    esp,0x3c
c000249c:	5b                   	pop    ebx
c000249d:	5e                   	pop    esi
c000249e:	5f                   	pop    edi
c000249f:	5d                   	pop    ebp
c00024a0:	c3                   	ret    

c00024a1 <mount_volume>:
c00024a1:	55                   	push   ebp
c00024a2:	57                   	push   edi
c00024a3:	89 cf                	mov    edi,ecx
c00024a5:	56                   	push   esi
c00024a6:	53                   	push   ebx
c00024a7:	bb 0b 00 00 00       	mov    ebx,0xb
c00024ac:	83 ec 3c             	sub    esp,0x3c
c00024af:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024b9:	e8 35 fb ff ff       	call   c0001ff3 <get_ldnumber>
c00024be:	85 c0                	test   eax,eax
c00024c0:	0f 88 3a 05 00 00    	js     c0002a00 <mount_volume+0x55f>
c00024c6:	8b 2c 85 20 c9 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd36e0]
c00024cd:	89 c6                	mov    esi,eax
c00024cf:	bb 0c 00 00 00       	mov    ebx,0xc
c00024d4:	85 ed                	test   ebp,ebp
c00024d6:	0f 84 24 05 00 00    	je     c0002a00 <mount_volume+0x55f>
c00024dc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024e0:	83 e7 fe             	and    edi,0xfffffffe
c00024e3:	89 2a                	mov    DWORD PTR [edx],ebp
c00024e5:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c00024e9:	74 32                	je     c000251d <mount_volume+0x7c>
c00024eb:	83 ec 0c             	sub    esp,0xc
c00024ee:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00024f2:	50                   	push   eax
c00024f3:	e8 c8 f4 ff ff       	call   c00019c0 <disk_status>
c00024f8:	83 c4 10             	add    esp,0x10
c00024fb:	a8 01                	test   al,0x1
c00024fd:	75 1e                	jne    c000251d <mount_volume+0x7c>
c00024ff:	31 db                	xor    ebx,ebx
c0002501:	89 f9                	mov    ecx,edi
c0002503:	84 c9                	test   cl,cl
c0002505:	0f 84 f5 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c000250b:	a8 04                	test   al,0x4
c000250d:	0f 84 ed 04 00 00    	je     c0002a00 <mount_volume+0x55f>
c0002513:	bb 0a 00 00 00       	mov    ebx,0xa
c0002518:	e9 e3 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c000251d:	83 ec 0c             	sub    esp,0xc
c0002520:	89 f0                	mov    eax,esi
c0002522:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002526:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002529:	0f b6 f0             	movzx  esi,al
c000252c:	bb 03 00 00 00       	mov    ebx,0x3
c0002531:	56                   	push   esi
c0002532:	e8 8c f4 ff ff       	call   c00019c3 <disk_initialize>
c0002537:	83 c4 10             	add    esp,0x10
c000253a:	a8 01                	test   al,0x1
c000253c:	0f 85 be 04 00 00    	jne    c0002a00 <mount_volume+0x55f>
c0002542:	89 f9                	mov    ecx,edi
c0002544:	84 c9                	test   cl,cl
c0002546:	74 04                	je     c000254c <mount_volume+0xab>
c0002548:	a8 04                	test   al,0x4
c000254a:	75 c7                	jne    c0002513 <mount_volume+0x72>
c000254c:	31 d2                	xor    edx,edx
c000254e:	89 e8                	mov    eax,ebp
c0002550:	e8 c8 fd ff ff       	call   c000231d <find_volume>
c0002555:	83 f8 04             	cmp    eax,0x4
c0002558:	75 0a                	jne    c0002564 <mount_volume+0xc3>
c000255a:	bb 01 00 00 00       	mov    ebx,0x1
c000255f:	e9 9c 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002564:	83 f8 01             	cmp    eax,0x1
c0002567:	76 0a                	jbe    c0002573 <mount_volume+0xd2>
c0002569:	bb 0d 00 00 00       	mov    ebx,0xd
c000256e:	e9 8d 04 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c0002573:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002576:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002579:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000257d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002581:	75 17                	jne    c000259a <mount_volume+0xf9>
c0002583:	b8 0b 00 00 00       	mov    eax,0xb
c0002588:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000258d:	75 da                	jne    c0002569 <mount_volume+0xc8>
c000258f:	40                   	inc    eax
c0002590:	83 f8 40             	cmp    eax,0x40
c0002593:	75 f3                	jne    c0002588 <mount_volume+0xe7>
c0002595:	e9 5a 02 00 00       	jmp    c00027f4 <mount_volume+0x353>
c000259a:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000259d:	e8 6f f4 ff ff       	call   c0001a11 <ld_word>
c00025a2:	66 3d 00 02          	cmp    ax,0x200
c00025a6:	75 c1                	jne    c0002569 <mount_volume+0xc8>
c00025a8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025ab:	e8 61 f4 ff ff       	call   c0001a11 <ld_word>
c00025b0:	0f b7 c0             	movzx  eax,ax
c00025b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025b7:	85 c0                	test   eax,eax
c00025b9:	75 0c                	jne    c00025c7 <mount_volume+0x126>
c00025bb:	8d 45 78             	lea    eax,[ebp+0x78]
c00025be:	e8 5b f4 ff ff       	call   c0001a1e <ld_dword>
c00025c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025cb:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025ce:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025d1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00025d5:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00025d8:	48                   	dec    eax
c00025d9:	3c 01                	cmp    al,0x1
c00025db:	77 8c                	ja     c0002569 <mount_volume+0xc8>
c00025dd:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c00025e1:	89 c3                	mov    ebx,eax
c00025e3:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00025e7:	66 85 c0             	test   ax,ax
c00025ea:	0f 84 79 ff ff ff    	je     c0002569 <mount_volume+0xc8>
c00025f0:	8d 40 ff             	lea    eax,[eax-0x1]
c00025f3:	85 d8                	test   eax,ebx
c00025f5:	0f 85 6e ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c00025fb:	8d 45 65             	lea    eax,[ebp+0x65]
c00025fe:	e8 0e f4 ff ff       	call   c0001a11 <ld_word>
c0002603:	89 c7                	mov    edi,eax
c0002605:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002609:	a8 0f                	test   al,0xf
c000260b:	0f 85 58 ff ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002611:	8d 45 67             	lea    eax,[ebp+0x67]
c0002614:	e8 f8 f3 ff ff       	call   c0001a11 <ld_word>
c0002619:	0f b7 f0             	movzx  esi,ax
c000261c:	85 f6                	test   esi,esi
c000261e:	75 0a                	jne    c000262a <mount_volume+0x189>
c0002620:	8d 45 74             	lea    eax,[ebp+0x74]
c0002623:	e8 f6 f3 ff ff       	call   c0001a1e <ld_dword>
c0002628:	89 c6                	mov    esi,eax
c000262a:	8d 45 62             	lea    eax,[ebp+0x62]
c000262d:	e8 df f3 ff ff       	call   c0001a11 <ld_word>
c0002632:	66 85 c0             	test   ax,ax
c0002635:	0f 84 2e ff ff ff    	je     c0002569 <mount_volume+0xc8>
c000263b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002640:	0f b7 c8             	movzx  ecx,ax
c0002643:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002648:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000264c:	89 fa                	mov    edx,edi
c000264e:	66 c1 ea 04          	shr    dx,0x4
c0002652:	0f b7 d2             	movzx  edx,dx
c0002655:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002659:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000265c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002660:	39 c6                	cmp    esi,eax
c0002662:	0f 82 01 ff ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002668:	29 c6                	sub    esi,eax
c000266a:	31 d2                	xor    edx,edx
c000266c:	89 f0                	mov    eax,esi
c000266e:	f7 f3                	div    ebx
c0002670:	39 de                	cmp    esi,ebx
c0002672:	0f 82 f1 fe ff ff    	jb     c0002569 <mount_volume+0xc8>
c0002678:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000267d:	0f 87 e6 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002683:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002688:	0f 86 63 03 00 00    	jbe    c00029f1 <mount_volume+0x550>
c000268e:	bb 03 00 00 00       	mov    ebx,0x3
c0002693:	8d 70 02             	lea    esi,[eax+0x2]
c0002696:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000269a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000269e:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026a1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026a4:	31 d2                	xor    edx,edx
c00026a6:	89 c8                	mov    eax,ecx
c00026a8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026ab:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026af:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026b7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026bb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026be:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026c5:	31 d2                	xor    edx,edx
c00026c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026cf:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026d2:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00026d5:	83 fb 03             	cmp    ebx,0x3
c00026d8:	75 2b                	jne    c0002705 <mount_volume+0x264>
c00026da:	8d 45 7e             	lea    eax,[ebp+0x7e]
c00026dd:	e8 2f f3 ff ff       	call   c0001a11 <ld_word>
c00026e2:	66 09 c7             	or     di,ax
c00026e5:	0f 85 7e fe ff ff    	jne    c0002569 <mount_volume+0xc8>
c00026eb:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c00026f1:	c1 e6 02             	shl    esi,0x2
c00026f4:	e8 25 f3 ff ff       	call   c0001a1e <ld_dword>
c00026f9:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002700:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002703:	eb 30                	jmp    c0002735 <mount_volume+0x294>
c0002705:	66 85 ff             	test   di,di
c0002708:	0f 84 5b fe ff ff    	je     c0002569 <mount_volume+0xc8>
c000270e:	31 d2                	xor    edx,edx
c0002710:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002714:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002718:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000271c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000271f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002722:	83 fb 02             	cmp    ebx,0x2
c0002725:	75 04                	jne    c000272b <mount_volume+0x28a>
c0002727:	01 f6                	add    esi,esi
c0002729:	eb 0a                	jmp    c0002735 <mount_volume+0x294>
c000272b:	8d 04 76             	lea    eax,[esi+esi*2]
c000272e:	83 e6 01             	and    esi,0x1
c0002731:	d1 e8                	shr    eax,1
c0002733:	01 c6                	add    esi,eax
c0002735:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000273b:	c1 ee 09             	shr    esi,0x9
c000273e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002742:	0f 87 21 fe ff ff    	ja     c0002569 <mount_volume+0xc8>
c0002748:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000274f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002756:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000275a:	83 fb 03             	cmp    ebx,0x3
c000275d:	75 7a                	jne    c00027d9 <mount_volume+0x338>
c000275f:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002765:	e8 a7 f2 ff ff       	call   c0001a11 <ld_word>
c000276a:	66 48                	dec    ax
c000276c:	75 6b                	jne    c00027d9 <mount_volume+0x338>
c000276e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002772:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002776:	83 c2 01             	add    edx,0x1
c0002779:	89 e8                	mov    eax,ebp
c000277b:	83 d1 00             	adc    ecx,0x0
c000277e:	e8 6c fa ff ff       	call   c00021ef <move_window>
c0002783:	85 c0                	test   eax,eax
c0002785:	75 52                	jne    c00027d9 <mount_volume+0x338>
c0002787:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c000278b:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002791:	e8 7b f2 ff ff       	call   c0001a11 <ld_word>
c0002796:	66 3d 55 aa          	cmp    ax,0xaa55
c000279a:	75 3d                	jne    c00027d9 <mount_volume+0x338>
c000279c:	8d 45 54             	lea    eax,[ebp+0x54]
c000279f:	e8 7a f2 ff ff       	call   c0001a1e <ld_dword>
c00027a4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027a9:	75 2e                	jne    c00027d9 <mount_volume+0x338>
c00027ab:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027b1:	e8 68 f2 ff ff       	call   c0001a1e <ld_dword>
c00027b6:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027bb:	75 1c                	jne    c00027d9 <mount_volume+0x338>
c00027bd:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027c3:	e8 56 f2 ff ff       	call   c0001a1e <ld_dword>
c00027c8:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027cb:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027d1:	e8 48 f2 ff ff       	call   c0001a1e <ld_dword>
c00027d6:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c00027d9:	66 a1 00 c9 02 c0    	mov    ax,ds:0xc002c900
c00027df:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c00027e2:	40                   	inc    eax
c00027e3:	31 db                	xor    ebx,ebx
c00027e5:	66 a3 00 c9 02 c0    	mov    ds:0xc002c900,ax
c00027eb:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c00027ef:	e9 0c 02 00 00       	jmp    c0002a00 <mount_volume+0x55f>
c00027f4:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c00027fa:	e8 12 f2 ff ff       	call   c0001a11 <ld_word>
c00027ff:	66 3d 00 01          	cmp    ax,0x100
c0002803:	0f 85 60 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002809:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002810:	0f 85 53 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002816:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c000281c:	e8 15 f2 ff ff       	call   c0001a36 <ld_qword>
c0002821:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002825:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002829:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000282f:	e8 ea f1 ff ff       	call   c0001a1e <ld_dword>
c0002834:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002837:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000283d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002840:	fe c8                	dec    al
c0002842:	0f 85 21 fd ff ff    	jne    c0002569 <mount_volume+0xc8>
c0002848:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000284f:	bb 01 00 00 00       	mov    ebx,0x1
c0002854:	d3 e3                	shl    ebx,cl
c0002856:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000285a:	66 85 db             	test   bx,bx
c000285d:	0f 84 06 fd ff ff    	je     c0002569 <mount_volume+0xc8>
c0002863:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002869:	e8 b0 f1 ff ff       	call   c0001a1e <ld_dword>
c000286e:	89 c6                	mov    esi,eax
c0002870:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002875:	0f 87 ee fc ff ff    	ja     c0002569 <mount_volume+0xc8>
c000287b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000287f:	8d 40 02             	lea    eax,[eax+0x2]
c0002882:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002885:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000288c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000288f:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002895:	e8 84 f1 ff ff       	call   c0001a1e <ld_dword>
c000289a:	31 d2                	xor    edx,edx
c000289c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028a0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028ac:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028af:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028b2:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028b8:	e8 61 f1 ff ff       	call   c0001a1e <ld_dword>
c00028bd:	31 d2                	xor    edx,edx
c00028bf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028c3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028c7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028cb:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ce:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028d1:	0f b7 c3             	movzx  eax,bx
c00028d4:	31 d2                	xor    edx,edx
c00028d6:	0f af f0             	imul   esi,eax
c00028d9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00028e3:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c00028e7:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00028eb:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c00028ef:	39 c1                	cmp    ecx,eax
c00028f1:	89 df                	mov    edi,ebx
c00028f3:	19 d7                	sbb    edi,edx
c00028f5:	0f 82 6e fc ff ff    	jb     c0002569 <mount_volume+0xc8>
c00028fb:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002901:	31 db                	xor    ebx,ebx
c0002903:	e8 16 f1 ff ff       	call   c0001a1e <ld_dword>
c0002908:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000290f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002912:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000291a:	85 db                	test   ebx,ebx
c000291c:	75 39                	jne    c0002957 <mount_volume+0x4b6>
c000291e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002922:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002926:	0f 86 3d fc ff ff    	jbe    c0002569 <mount_volume+0xc8>
c000292c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000292f:	31 ff                	xor    edi,edi
c0002931:	89 e8                	mov    eax,ebp
c0002933:	e8 72 f3 ff ff       	call   c0001caa <clst2sect>
c0002938:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000293c:	01 c6                	add    esi,eax
c000293e:	89 e8                	mov    eax,ebp
c0002940:	11 d7                	adc    edi,edx
c0002942:	89 f2                	mov    edx,esi
c0002944:	89 f9                	mov    ecx,edi
c0002946:	e8 a4 f8 ff ff       	call   c00021ef <move_window>
c000294b:	85 c0                	test   eax,eax
c000294d:	0f 85 07 fc ff ff    	jne    c000255a <mount_volume+0xb9>
c0002953:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002957:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c000295c:	74 0b                	je     c0002969 <mount_volume+0x4c8>
c000295e:	83 c3 20             	add    ebx,0x20
c0002961:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002967:	eb b1                	jmp    c000291a <mount_volume+0x479>
c0002969:	8d 75 54             	lea    esi,[ebp+0x54]
c000296c:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002970:	e8 a9 f0 ff ff       	call   c0001a1e <ld_dword>
c0002975:	89 c3                	mov    ebx,eax
c0002977:	83 f8 01             	cmp    eax,0x1
c000297a:	0f 86 e9 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002980:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002983:	0f 86 e0 fb ff ff    	jbe    c0002569 <mount_volume+0xc8>
c0002989:	8d 53 fe             	lea    edx,[ebx-0x2]
c000298c:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002990:	0f af c2             	imul   eax,edx
c0002993:	31 d2                	xor    edx,edx
c0002995:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002998:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000299b:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000299e:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029a1:	31 c9                	xor    ecx,ecx
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	89 e8                	mov    eax,ebp
c00029a7:	c1 ea 07             	shr    edx,0x7
c00029aa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029ad:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029b0:	e8 3a f8 ff ff       	call   c00021ef <move_window>
c00029b5:	85 c0                	test   eax,eax
c00029b7:	0f 85 9d fb ff ff    	jne    c000255a <mount_volume+0xb9>
c00029bd:	89 d8                	mov    eax,ebx
c00029bf:	83 e0 7f             	and    eax,0x7f
c00029c2:	8d 04 86             	lea    eax,[esi+eax*4]
c00029c5:	e8 54 f0 ff ff       	call   c0001a1e <ld_dword>
c00029ca:	83 f8 ff             	cmp    eax,0xffffffff
c00029cd:	74 0a                	je     c00029d9 <mount_volume+0x538>
c00029cf:	43                   	inc    ebx
c00029d0:	39 d8                	cmp    eax,ebx
c00029d2:	74 cd                	je     c00029a1 <mount_volume+0x500>
c00029d4:	e9 90 fb ff ff       	jmp    c0002569 <mount_volume+0xc8>
c00029d9:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e0:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029e7:	bb 04 00 00 00       	mov    ebx,0x4
c00029ec:	e9 e8 fd ff ff       	jmp    c00027d9 <mount_volume+0x338>
c00029f1:	3d f6 0f 00 00       	cmp    eax,0xff6
c00029f6:	19 db                	sbb    ebx,ebx
c00029f8:	83 c3 02             	add    ebx,0x2
c00029fb:	e9 93 fc ff ff       	jmp    c0002693 <mount_volume+0x1f2>
c0002a00:	83 c4 3c             	add    esp,0x3c
c0002a03:	89 d8                	mov    eax,ebx
c0002a05:	5b                   	pop    ebx
c0002a06:	5e                   	pop    esi
c0002a07:	5f                   	pop    edi
c0002a08:	5d                   	pop    ebp
c0002a09:	c3                   	ret    

c0002a0a <find_bitmap>:
c0002a0a:	55                   	push   ebp
c0002a0b:	57                   	push   edi
c0002a0c:	89 c7                	mov    edi,eax
c0002a0e:	56                   	push   esi
c0002a0f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a12:	53                   	push   ebx
c0002a13:	83 ec 1c             	sub    esp,0x1c
c0002a16:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a19:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a1d:	83 e8 02             	sub    eax,0x2
c0002a20:	39 f0                	cmp    eax,esi
c0002a22:	77 02                	ja     c0002a26 <find_bitmap+0x1c>
c0002a24:	31 f6                	xor    esi,esi
c0002a26:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a2a:	89 f3                	mov    ebx,esi
c0002a2c:	31 ed                	xor    ebp,ebp
c0002a2e:	31 c9                	xor    ecx,ecx
c0002a30:	89 da                	mov    edx,ebx
c0002a32:	89 f8                	mov    eax,edi
c0002a34:	c1 ea 0c             	shr    edx,0xc
c0002a37:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a3a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a3d:	e8 ad f7 ff ff       	call   c00021ef <move_window>
c0002a42:	85 c0                	test   eax,eax
c0002a44:	75 68                	jne    c0002aae <find_bitmap+0xa4>
c0002a46:	89 da                	mov    edx,ebx
c0002a48:	89 d9                	mov    ecx,ebx
c0002a4a:	c1 ea 03             	shr    edx,0x3
c0002a4d:	83 e1 07             	and    ecx,0x7
c0002a50:	b8 01 00 00 00       	mov    eax,0x1
c0002a55:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a5b:	d3 e0                	shl    eax,cl
c0002a5d:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a60:	83 e9 02             	sub    ecx,0x2
c0002a63:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a67:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a6b:	43                   	inc    ebx
c0002a6c:	21 c1                	and    ecx,eax
c0002a6e:	d1 e0                	shl    eax,1
c0002a70:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002a74:	77 09                	ja     c0002a7f <find_bitmap+0x75>
c0002a76:	31 db                	xor    ebx,ebx
c0002a78:	ba 00 02 00 00       	mov    edx,0x200
c0002a7d:	31 c0                	xor    eax,eax
c0002a7f:	84 c9                	test   cl,cl
c0002a81:	75 10                	jne    c0002a93 <find_bitmap+0x89>
c0002a83:	45                   	inc    ebp
c0002a84:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a88:	75 0f                	jne    c0002a99 <find_bitmap+0x8f>
c0002a8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a8e:	83 c0 02             	add    eax,0x2
c0002a91:	eb 22                	jmp    c0002ab5 <find_bitmap+0xab>
c0002a93:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a97:	31 ed                	xor    ebp,ebp
c0002a99:	39 de                	cmp    esi,ebx
c0002a9b:	74 16                	je     c0002ab3 <find_bitmap+0xa9>
c0002a9d:	84 c0                	test   al,al
c0002a9f:	75 c6                	jne    c0002a67 <find_bitmap+0x5d>
c0002aa1:	42                   	inc    edx
c0002aa2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002aa8:	77 84                	ja     c0002a2e <find_bitmap+0x24>
c0002aaa:	b0 01                	mov    al,0x1
c0002aac:	eb b9                	jmp    c0002a67 <find_bitmap+0x5d>
c0002aae:	83 c8 ff             	or     eax,0xffffffff
c0002ab1:	eb 02                	jmp    c0002ab5 <find_bitmap+0xab>
c0002ab3:	31 c0                	xor    eax,eax
c0002ab5:	83 c4 1c             	add    esp,0x1c
c0002ab8:	5b                   	pop    ebx
c0002ab9:	5e                   	pop    esi
c0002aba:	5f                   	pop    edi
c0002abb:	5d                   	pop    ebp
c0002abc:	c3                   	ret    

c0002abd <change_bitmap>:
c0002abd:	55                   	push   ebp
c0002abe:	89 cd                	mov    ebp,ecx
c0002ac0:	57                   	push   edi
c0002ac1:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002ac4:	56                   	push   esi
c0002ac5:	89 c7                	mov    edi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	89 c8                	mov    eax,ecx
c0002aca:	83 ec 1c             	sub    esp,0x1c
c0002acd:	31 d2                	xor    edx,edx
c0002acf:	89 ce                	mov    esi,ecx
c0002ad1:	c1 e8 0c             	shr    eax,0xc
c0002ad4:	bb 01 00 00 00       	mov    ebx,0x1
c0002ad9:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002adc:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002adf:	c1 ee 03             	shr    esi,0x3
c0002ae2:	83 e1 07             	and    ecx,0x7
c0002ae5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002aeb:	d3 e3                	shl    ebx,cl
c0002aed:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002af1:	89 c1                	mov    ecx,eax
c0002af3:	89 d3                	mov    ebx,edx
c0002af5:	83 c1 01             	add    ecx,0x1
c0002af8:	83 d3 00             	adc    ebx,0x0
c0002afb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002aff:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b03:	89 d1                	mov    ecx,edx
c0002b05:	89 c2                	mov    edx,eax
c0002b07:	89 f8                	mov    eax,edi
c0002b09:	e8 e1 f6 ff ff       	call   c00021ef <move_window>
c0002b0e:	89 c1                	mov    ecx,eax
c0002b10:	85 c0                	test   eax,eax
c0002b12:	75 48                	jne    c0002b5c <change_bitmap+0x9f>
c0002b14:	31 d2                	xor    edx,edx
c0002b16:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b1a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b1e:	0f 95 c2             	setne  dl
c0002b21:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b25:	74 3c                	je     c0002b63 <change_bitmap+0xa6>
c0002b27:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b2b:	4d                   	dec    ebp
c0002b2c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b30:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b34:	74 32                	je     c0002b68 <change_bitmap+0xab>
c0002b36:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b3a:	75 d8                	jne    c0002b14 <change_bitmap+0x57>
c0002b3c:	8d 46 01             	lea    eax,[esi+0x1]
c0002b3f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b44:	89 c3                	mov    ebx,eax
c0002b46:	31 f6                	xor    esi,esi
c0002b48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b50:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b56:	74 99                	je     c0002af1 <change_bitmap+0x34>
c0002b58:	89 de                	mov    esi,ebx
c0002b5a:	eb b8                	jmp    c0002b14 <change_bitmap+0x57>
c0002b5c:	b9 01 00 00 00       	mov    ecx,0x1
c0002b61:	eb 05                	jmp    c0002b68 <change_bitmap+0xab>
c0002b63:	b9 02 00 00 00       	mov    ecx,0x2
c0002b68:	83 c4 1c             	add    esp,0x1c
c0002b6b:	89 c8                	mov    eax,ecx
c0002b6d:	5b                   	pop    ebx
c0002b6e:	5e                   	pop    esi
c0002b6f:	5f                   	pop    edi
c0002b70:	5d                   	pop    ebp
c0002b71:	c3                   	ret    

c0002b72 <put_fat>:
c0002b72:	83 fa 01             	cmp    edx,0x1
c0002b75:	0f 86 7b 01 00 00    	jbe    c0002cf6 <put_fat+0x184>
c0002b7b:	55                   	push   ebp
c0002b7c:	57                   	push   edi
c0002b7d:	89 cf                	mov    edi,ecx
c0002b7f:	56                   	push   esi
c0002b80:	b9 02 00 00 00       	mov    ecx,0x2
c0002b85:	53                   	push   ebx
c0002b86:	89 c6                	mov    esi,eax
c0002b88:	83 ec 1c             	sub    esp,0x1c
c0002b8b:	89 d3                	mov    ebx,edx
c0002b8d:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b90:	0f 86 68 01 00 00    	jbe    c0002cfe <put_fat+0x18c>
c0002b96:	8a 00                	mov    al,BYTE PTR [eax]
c0002b98:	3c 02                	cmp    al,0x2
c0002b9a:	0f 84 c7 00 00 00    	je     c0002c67 <put_fat+0xf5>
c0002ba0:	77 09                	ja     c0002bab <put_fat+0x39>
c0002ba2:	fe c8                	dec    al
c0002ba4:	74 17                	je     c0002bbd <put_fat+0x4b>
c0002ba6:	e9 53 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bab:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb0:	3c 04                	cmp    al,0x4
c0002bb2:	0f 86 e1 00 00 00    	jbe    c0002c99 <put_fat+0x127>
c0002bb8:	e9 41 01 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002bbd:	89 d5                	mov    ebp,edx
c0002bbf:	31 c9                	xor    ecx,ecx
c0002bc1:	d1 ed                	shr    ebp,1
c0002bc3:	89 f0                	mov    eax,esi
c0002bc5:	01 d5                	add    ebp,edx
c0002bc7:	89 ea                	mov    edx,ebp
c0002bc9:	c1 ea 09             	shr    edx,0x9
c0002bcc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bcf:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bd2:	e8 18 f6 ff ff       	call   c00021ef <move_window>
c0002bd7:	89 c1                	mov    ecx,eax
c0002bd9:	85 c0                	test   eax,eax
c0002bdb:	0f 85 1d 01 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002be1:	8d 46 54             	lea    eax,[esi+0x54]
c0002be4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002be8:	8d 45 01             	lea    eax,[ebp+0x1]
c0002beb:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bf5:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bf9:	89 f8                	mov    eax,edi
c0002bfb:	83 e3 01             	and    ebx,0x1
c0002bfe:	74 0d                	je     c0002c0d <put_fat+0x9b>
c0002c00:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c03:	89 fa                	mov    edx,edi
c0002c05:	83 e0 0f             	and    eax,0xf
c0002c08:	c1 e2 04             	shl    edx,0x4
c0002c0b:	09 d0                	or     eax,edx
c0002c0d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c14:	31 c9                	xor    ecx,ecx
c0002c16:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c1a:	c1 ea 09             	shr    edx,0x9
c0002c1d:	89 f0                	mov    eax,esi
c0002c1f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c22:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c25:	e8 c5 f5 ff ff       	call   c00021ef <move_window>
c0002c2a:	89 c1                	mov    ecx,eax
c0002c2c:	85 c0                	test   eax,eax
c0002c2e:	0f 85 ca 00 00 00    	jne    c0002cfe <put_fat+0x18c>
c0002c34:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c38:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c3e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c42:	85 db                	test   ebx,ebx
c0002c44:	74 07                	je     c0002c4d <put_fat+0xdb>
c0002c46:	c1 ef 04             	shr    edi,0x4
c0002c49:	89 fa                	mov    edx,edi
c0002c4b:	eb 0e                	jmp    c0002c5b <put_fat+0xe9>
c0002c4d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c50:	c1 ef 08             	shr    edi,0x8
c0002c53:	83 e2 f0             	and    edx,0xfffffff0
c0002c56:	83 e7 0f             	and    edi,0xf
c0002c59:	09 fa                	or     edx,edi
c0002c5b:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c5e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c62:	e9 97 00 00 00       	jmp    c0002cfe <put_fat+0x18c>
c0002c67:	31 c9                	xor    ecx,ecx
c0002c69:	c1 ea 08             	shr    edx,0x8
c0002c6c:	89 f0                	mov    eax,esi
c0002c6e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c71:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c74:	e8 76 f5 ff ff       	call   c00021ef <move_window>
c0002c79:	89 c1                	mov    ecx,eax
c0002c7b:	85 c0                	test   eax,eax
c0002c7d:	75 7f                	jne    c0002cfe <put_fat+0x18c>
c0002c7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c83:	01 db                	add    ebx,ebx
c0002c85:	0f b7 d7             	movzx  edx,di
c0002c88:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c8e:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c92:	e8 ec ed ff ff       	call   c0001a83 <st_word>
c0002c97:	eb 53                	jmp    c0002cec <put_fat+0x17a>
c0002c99:	31 c9                	xor    ecx,ecx
c0002c9b:	c1 ea 07             	shr    edx,0x7
c0002c9e:	89 f0                	mov    eax,esi
c0002ca0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ca3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca6:	e8 44 f5 ff ff       	call   c00021ef <move_window>
c0002cab:	89 c1                	mov    ecx,eax
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 4d                	jne    c0002cfe <put_fat+0x18c>
c0002cb1:	c1 e3 02             	shl    ebx,0x2
c0002cb4:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002cba:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002cbd:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cc1:	74 1c                	je     c0002cdf <put_fat+0x16d>
c0002cc3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cc7:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002ccd:	89 d8                	mov    eax,ebx
c0002ccf:	e8 4a ed ff ff       	call   c0001a1e <ld_dword>
c0002cd4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cd8:	25 00 00 00 f0       	and    eax,0xf0000000
c0002cdd:	09 c7                	or     edi,eax
c0002cdf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002ce3:	89 fa                	mov    edx,edi
c0002ce5:	89 d8                	mov    eax,ebx
c0002ce7:	e8 9b ed ff ff       	call   c0001a87 <st_dword>
c0002cec:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002cf0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002cf4:	eb 08                	jmp    c0002cfe <put_fat+0x18c>
c0002cf6:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfb:	89 c8                	mov    eax,ecx
c0002cfd:	c3                   	ret    
c0002cfe:	83 c4 1c             	add    esp,0x1c
c0002d01:	89 c8                	mov    eax,ecx
c0002d03:	5b                   	pop    ebx
c0002d04:	5e                   	pop    esi
c0002d05:	5f                   	pop    edi
c0002d06:	5d                   	pop    ebp
c0002d07:	c3                   	ret    

c0002d08 <fill_last_frag>:
c0002d08:	57                   	push   edi
c0002d09:	89 cf                	mov    edi,ecx
c0002d0b:	56                   	push   esi
c0002d0c:	89 d6                	mov    esi,edx
c0002d0e:	53                   	push   ebx
c0002d0f:	89 c3                	mov    ebx,eax
c0002d11:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d14:	85 c0                	test   eax,eax
c0002d16:	74 21                	je     c0002d39 <fill_last_frag+0x31>
c0002d18:	89 f9                	mov    ecx,edi
c0002d1a:	83 f8 01             	cmp    eax,0x1
c0002d1d:	76 05                	jbe    c0002d24 <fill_last_frag+0x1c>
c0002d1f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d22:	29 c1                	sub    ecx,eax
c0002d24:	8d 56 01             	lea    edx,[esi+0x1]
c0002d27:	29 c2                	sub    edx,eax
c0002d29:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d2b:	e8 42 fe ff ff       	call   c0002b72 <put_fat>
c0002d30:	85 c0                	test   eax,eax
c0002d32:	75 05                	jne    c0002d39 <fill_last_frag+0x31>
c0002d34:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d37:	eb d8                	jmp    c0002d11 <fill_last_frag+0x9>
c0002d39:	5b                   	pop    ebx
c0002d3a:	5e                   	pop    esi
c0002d3b:	5f                   	pop    edi
c0002d3c:	c3                   	ret    

c0002d3d <fill_first_frag>:
c0002d3d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d41:	75 2d                	jne    c0002d70 <fill_first_frag+0x33>
c0002d43:	57                   	push   edi
c0002d44:	56                   	push   esi
c0002d45:	53                   	push   ebx
c0002d46:	89 c3                	mov    ebx,eax
c0002d48:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d4b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d4e:	01 d7                	add    edi,edx
c0002d50:	39 fa                	cmp    edx,edi
c0002d52:	74 14                	je     c0002d68 <fill_first_frag+0x2b>
c0002d54:	8d 72 01             	lea    esi,[edx+0x1]
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	89 f1                	mov    ecx,esi
c0002d5b:	e8 12 fe ff ff       	call   c0002b72 <put_fat>
c0002d60:	89 f2                	mov    edx,esi
c0002d62:	85 c0                	test   eax,eax
c0002d64:	74 ea                	je     c0002d50 <fill_first_frag+0x13>
c0002d66:	eb 0b                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d68:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d6c:	31 c0                	xor    eax,eax
c0002d6e:	eb 03                	jmp    c0002d73 <fill_first_frag+0x36>
c0002d70:	31 c0                	xor    eax,eax
c0002d72:	c3                   	ret    
c0002d73:	5b                   	pop    ebx
c0002d74:	5e                   	pop    esi
c0002d75:	5f                   	pop    edi
c0002d76:	c3                   	ret    

c0002d77 <get_fat>:
c0002d77:	83 fa 01             	cmp    edx,0x1
c0002d7a:	0f 86 db 01 00 00    	jbe    c0002f5b <get_fat+0x1e4>
c0002d80:	55                   	push   ebp
c0002d81:	b9 01 00 00 00       	mov    ecx,0x1
c0002d86:	57                   	push   edi
c0002d87:	56                   	push   esi
c0002d88:	53                   	push   ebx
c0002d89:	83 ec 1c             	sub    esp,0x1c
c0002d8c:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d8e:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d91:	0f 86 cc 01 00 00    	jbe    c0002f63 <get_fat+0x1ec>
c0002d97:	89 c3                	mov    ebx,eax
c0002d99:	89 d6                	mov    esi,edx
c0002d9b:	8a 07                	mov    al,BYTE PTR [edi]
c0002d9d:	3c 02                	cmp    al,0x2
c0002d9f:	0f 84 99 00 00 00    	je     c0002e3e <get_fat+0xc7>
c0002da5:	77 09                	ja     c0002db0 <get_fat+0x39>
c0002da7:	fe c8                	dec    al
c0002da9:	74 1a                	je     c0002dc5 <get_fat+0x4e>
c0002dab:	e9 b3 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002db0:	3c 03                	cmp    al,0x3
c0002db2:	0f 84 b5 00 00 00    	je     c0002e6d <get_fat+0xf6>
c0002db8:	3c 04                	cmp    al,0x4
c0002dba:	0f 84 e3 00 00 00    	je     c0002ea3 <get_fat+0x12c>
c0002dc0:	e9 9e 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002dc5:	89 d3                	mov    ebx,edx
c0002dc7:	31 c9                	xor    ecx,ecx
c0002dc9:	d1 eb                	shr    ebx,1
c0002dcb:	89 f8                	mov    eax,edi
c0002dcd:	01 d3                	add    ebx,edx
c0002dcf:	89 da                	mov    edx,ebx
c0002dd1:	c1 ea 09             	shr    edx,0x9
c0002dd4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dd7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dda:	e8 10 f4 ff ff       	call   c00021ef <move_window>
c0002ddf:	85 c0                	test   eax,eax
c0002de1:	74 08                	je     c0002deb <get_fat+0x74>
c0002de3:	83 c9 ff             	or     ecx,0xffffffff
c0002de6:	e9 78 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002deb:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002dee:	31 c9                	xor    ecx,ecx
c0002df0:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002df6:	89 ea                	mov    edx,ebp
c0002df8:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002dfc:	c1 ea 09             	shr    edx,0x9
c0002dff:	89 f8                	mov    eax,edi
c0002e01:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e04:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e07:	e8 e3 f3 ff ff       	call   c00021ef <move_window>
c0002e0c:	85 c0                	test   eax,eax
c0002e0e:	75 d3                	jne    c0002de3 <get_fat+0x6c>
c0002e10:	0f b6 c3             	movzx  eax,bl
c0002e13:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e19:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e1e:	c1 e3 08             	shl    ebx,0x8
c0002e21:	09 c3                	or     ebx,eax
c0002e23:	89 d9                	mov    ecx,ebx
c0002e25:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e2b:	83 e6 01             	and    esi,0x1
c0002e2e:	0f 84 2f 01 00 00    	je     c0002f63 <get_fat+0x1ec>
c0002e34:	89 d9                	mov    ecx,ebx
c0002e36:	c1 e9 04             	shr    ecx,0x4
c0002e39:	e9 25 01 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e3e:	31 c9                	xor    ecx,ecx
c0002e40:	c1 ea 08             	shr    edx,0x8
c0002e43:	89 f8                	mov    eax,edi
c0002e45:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e48:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e4b:	e8 9f f3 ff ff       	call   c00021ef <move_window>
c0002e50:	85 c0                	test   eax,eax
c0002e52:	75 8f                	jne    c0002de3 <get_fat+0x6c>
c0002e54:	01 f6                	add    esi,esi
c0002e56:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e5c:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e60:	e8 ac eb ff ff       	call   c0001a11 <ld_word>
c0002e65:	0f b7 c8             	movzx  ecx,ax
c0002e68:	e9 f6 00 00 00       	jmp    c0002f63 <get_fat+0x1ec>
c0002e6d:	31 c9                	xor    ecx,ecx
c0002e6f:	c1 ea 07             	shr    edx,0x7
c0002e72:	89 f8                	mov    eax,edi
c0002e74:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e77:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e7a:	e8 70 f3 ff ff       	call   c00021ef <move_window>
c0002e7f:	85 c0                	test   eax,eax
c0002e81:	0f 85 5c ff ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002e87:	c1 e6 02             	shl    esi,0x2
c0002e8a:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e90:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e94:	e8 85 eb ff ff       	call   c0001a1e <ld_dword>
c0002e99:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e9e:	e9 b4 00 00 00       	jmp    c0002f57 <get_fat+0x1e0>
c0002ea3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ea6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ea9:	89 d1                	mov    ecx,edx
c0002eab:	09 c1                	or     ecx,eax
c0002ead:	74 06                	je     c0002eb5 <get_fat+0x13e>
c0002eaf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002eb3:	75 0f                	jne    c0002ec4 <get_fat+0x14d>
c0002eb5:	b9 01 00 00 00       	mov    ecx,0x1
c0002eba:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002ebe:	0f 85 9f 00 00 00    	jne    c0002f63 <get_fat+0x1ec>
c0002ec4:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ec8:	89 f5                	mov    ebp,esi
c0002eca:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002ecf:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002ed2:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002ed5:	80 f9 02             	cmp    cl,0x2
c0002ed8:	75 35                	jne    c0002f0f <get_fat+0x198>
c0002eda:	83 c0 ff             	add    eax,0xffffffff
c0002edd:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002ee2:	83 d2 ff             	adc    edx,0xffffffff
c0002ee5:	31 db                	xor    ebx,ebx
c0002ee7:	0f ac d0 09          	shrd   eax,edx,0x9
c0002eeb:	53                   	push   ebx
c0002eec:	c1 ea 09             	shr    edx,0x9
c0002eef:	51                   	push   ecx
c0002ef0:	52                   	push   edx
c0002ef1:	50                   	push   eax
c0002ef2:	e8 f5 24 02 00       	call   c00253ec <__udivdi3>
c0002ef7:	83 c4 10             	add    esp,0x10
c0002efa:	b9 01 00 00 00       	mov    ecx,0x1
c0002eff:	39 c5                	cmp    ebp,eax
c0002f01:	77 60                	ja     c0002f63 <get_fat+0x1ec>
c0002f03:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f08:	74 59                	je     c0002f63 <get_fat+0x1ec>
c0002f0a:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f0d:	eb 54                	jmp    c0002f63 <get_fat+0x1ec>
c0002f0f:	80 f9 03             	cmp    cl,0x3
c0002f12:	75 05                	jne    c0002f19 <get_fat+0x1a2>
c0002f14:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f17:	77 f1                	ja     c0002f0a <get_fat+0x193>
c0002f19:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f1e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f22:	75 3f                	jne    c0002f63 <get_fat+0x1ec>
c0002f24:	31 c9                	xor    ecx,ecx
c0002f26:	89 f2                	mov    edx,esi
c0002f28:	89 f8                	mov    eax,edi
c0002f2a:	c1 ea 07             	shr    edx,0x7
c0002f2d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f30:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f33:	e8 b7 f2 ff ff       	call   c00021ef <move_window>
c0002f38:	85 c0                	test   eax,eax
c0002f3a:	0f 85 a3 fe ff ff    	jne    c0002de3 <get_fat+0x6c>
c0002f40:	c1 e6 02             	shl    esi,0x2
c0002f43:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f49:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f4d:	e8 cc ea ff ff       	call   c0001a1e <ld_dword>
c0002f52:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f57:	89 c1                	mov    ecx,eax
c0002f59:	eb 08                	jmp    c0002f63 <get_fat+0x1ec>
c0002f5b:	b9 01 00 00 00       	mov    ecx,0x1
c0002f60:	89 c8                	mov    eax,ecx
c0002f62:	c3                   	ret    
c0002f63:	83 c4 1c             	add    esp,0x1c
c0002f66:	89 c8                	mov    eax,ecx
c0002f68:	5b                   	pop    ebx
c0002f69:	5e                   	pop    esi
c0002f6a:	5f                   	pop    edi
c0002f6b:	5d                   	pop    ebp
c0002f6c:	c3                   	ret    

c0002f6d <dir_sdi>:
c0002f6d:	55                   	push   ebp
c0002f6e:	57                   	push   edi
c0002f6f:	56                   	push   esi
c0002f70:	53                   	push   ebx
c0002f71:	89 c3                	mov    ebx,eax
c0002f73:	83 ec 1c             	sub    esp,0x1c
c0002f76:	8b 38                	mov    edi,DWORD PTR [eax]
c0002f78:	31 c0                	xor    eax,eax
c0002f7a:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002f7d:	0f 94 c0             	sete   al
c0002f80:	48                   	dec    eax
c0002f81:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f86:	05 00 00 00 10       	add    eax,0x10000000
c0002f8b:	39 d0                	cmp    eax,edx
c0002f8d:	77 0a                	ja     c0002f99 <dir_sdi+0x2c>
c0002f8f:	b8 02 00 00 00       	mov    eax,0x2
c0002f94:	e9 c4 00 00 00       	jmp    c000305d <dir_sdi+0xf0>
c0002f99:	89 d6                	mov    esi,edx
c0002f9b:	f6 c2 1f             	test   dl,0x1f
c0002f9e:	75 ef                	jne    c0002f8f <dir_sdi+0x22>
c0002fa0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fa3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fa6:	85 c9                	test   ecx,ecx
c0002fa8:	75 2d                	jne    c0002fd7 <dir_sdi+0x6a>
c0002faa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fad:	77 1b                	ja     c0002fca <dir_sdi+0x5d>
c0002faf:	89 f2                	mov    edx,esi
c0002fb1:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fb5:	c1 ea 05             	shr    edx,0x5
c0002fb8:	39 c2                	cmp    edx,eax
c0002fba:	73 d3                	jae    c0002f8f <dir_sdi+0x22>
c0002fbc:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fbf:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002fc2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc5:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc8:	eb 4b                	jmp    c0003015 <dir_sdi+0xa8>
c0002fca:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fcd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 da                	je     c0002faf <dir_sdi+0x42>
c0002fd5:	89 c1                	mov    ecx,eax
c0002fd7:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002fdb:	c1 e5 09             	shl    ebp,0x9
c0002fde:	89 ca                	mov    edx,ecx
c0002fe0:	39 ee                	cmp    esi,ebp
c0002fe2:	72 1c                	jb     c0003000 <dir_sdi+0x93>
c0002fe4:	89 d8                	mov    eax,ebx
c0002fe6:	e8 8c fd ff ff       	call   c0002d77 <get_fat>
c0002feb:	89 c1                	mov    ecx,eax
c0002fed:	83 f8 ff             	cmp    eax,0xffffffff
c0002ff0:	74 66                	je     c0003058 <dir_sdi+0xeb>
c0002ff2:	83 f8 01             	cmp    eax,0x1
c0002ff5:	76 98                	jbe    c0002f8f <dir_sdi+0x22>
c0002ff7:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002ffa:	76 93                	jbe    c0002f8f <dir_sdi+0x22>
c0002ffc:	29 ee                	sub    esi,ebp
c0002ffe:	eb de                	jmp    c0002fde <dir_sdi+0x71>
c0003000:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003004:	89 f8                	mov    eax,edi
c0003006:	e8 9f ec ff ff       	call   c0001caa <clst2sect>
c000300b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000300f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003012:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003015:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003018:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000301b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000301e:	89 d1                	mov    ecx,edx
c0003020:	09 c1                	or     ecx,eax
c0003022:	0f 84 67 ff ff ff    	je     c0002f8f <dir_sdi+0x22>
c0003028:	89 f1                	mov    ecx,esi
c000302a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003032:	c1 e9 09             	shr    ecx,0x9
c0003035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003039:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000303d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003041:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003044:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000304a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000304d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003051:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003054:	31 c0                	xor    eax,eax
c0003056:	eb 05                	jmp    c000305d <dir_sdi+0xf0>
c0003058:	b8 01 00 00 00       	mov    eax,0x1
c000305d:	83 c4 1c             	add    esp,0x1c
c0003060:	5b                   	pop    ebx
c0003061:	5e                   	pop    esi
c0003062:	5f                   	pop    edi
c0003063:	5d                   	pop    ebp
c0003064:	c3                   	ret    

c0003065 <create_chain>:
c0003065:	55                   	push   ebp
c0003066:	89 c5                	mov    ebp,eax
c0003068:	57                   	push   edi
c0003069:	56                   	push   esi
c000306a:	53                   	push   ebx
c000306b:	83 ec 1c             	sub    esp,0x1c
c000306e:	85 d2                	test   edx,edx
c0003070:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003074:	8b 30                	mov    esi,DWORD PTR [eax]
c0003076:	75 0e                	jne    c0003086 <create_chain+0x21>
c0003078:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000307b:	85 ff                	test   edi,edi
c000307d:	74 39                	je     c00030b8 <create_chain+0x53>
c000307f:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0003082:	77 39                	ja     c00030bd <create_chain+0x58>
c0003084:	eb 32                	jmp    c00030b8 <create_chain+0x53>
c0003086:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000308a:	e8 e8 fc ff ff       	call   c0002d77 <get_fat>
c000308f:	89 c3                	mov    ebx,eax
c0003091:	83 f8 01             	cmp    eax,0x1
c0003094:	77 0a                	ja     c00030a0 <create_chain+0x3b>
c0003096:	bb 01 00 00 00       	mov    ebx,0x1
c000309b:	e9 ba 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030a0:	83 f8 ff             	cmp    eax,0xffffffff
c00030a3:	0f 84 62 01 00 00    	je     c000320b <create_chain+0x1a6>
c00030a9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030ac:	0f 87 a8 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030b2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030b6:	eb 05                	jmp    c00030bd <create_chain+0x58>
c00030b8:	bf 01 00 00 00       	mov    edi,0x1
c00030bd:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030c1:	75 07                	jne    c00030ca <create_chain+0x65>
c00030c3:	31 db                	xor    ebx,ebx
c00030c5:	e9 90 01 00 00       	jmp    c000325a <create_chain+0x1f5>
c00030ca:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030cd:	75 74                	jne    c0003143 <create_chain+0xde>
c00030cf:	b9 01 00 00 00       	mov    ecx,0x1
c00030d4:	89 fa                	mov    edx,edi
c00030d6:	89 f0                	mov    eax,esi
c00030d8:	e8 2d f9 ff ff       	call   c0002a0a <find_bitmap>
c00030dd:	89 c3                	mov    ebx,eax
c00030df:	8d 40 ff             	lea    eax,[eax-0x1]
c00030e2:	83 f8 fd             	cmp    eax,0xfffffffd
c00030e5:	0f 87 6f 01 00 00    	ja     c000325a <create_chain+0x1f5>
c00030eb:	83 ec 0c             	sub    esp,0xc
c00030ee:	b9 01 00 00 00       	mov    ecx,0x1
c00030f3:	6a 01                	push   0x1
c00030f5:	89 da                	mov    edx,ebx
c00030f7:	89 f0                	mov    eax,esi
c00030f9:	e8 bf f9 ff ff       	call   c0002abd <change_bitmap>
c00030fe:	83 c4 10             	add    esp,0x10
c0003101:	83 f8 02             	cmp    eax,0x2
c0003104:	74 90                	je     c0003096 <create_chain+0x31>
c0003106:	83 f8 01             	cmp    eax,0x1
c0003109:	0f 84 fc 00 00 00    	je     c000320b <create_chain+0x1a6>
c000310f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003114:	75 09                	jne    c000311f <create_chain+0xba>
c0003116:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000311a:	e9 0c 01 00 00       	jmp    c000322b <create_chain+0x1c6>
c000311f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003123:	0f 85 e7 00 00 00    	jne    c0003210 <create_chain+0x1ab>
c0003129:	8d 57 01             	lea    edx,[edi+0x1]
c000312c:	39 da                	cmp    edx,ebx
c000312e:	0f 84 f7 00 00 00    	je     c000322b <create_chain+0x1c6>
c0003134:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003137:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000313b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000313e:	e9 cd 00 00 00       	jmp    c0003210 <create_chain+0x1ab>
c0003143:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003147:	75 41                	jne    c000318a <create_chain+0x125>
c0003149:	8d 5f 01             	lea    ebx,[edi+0x1]
c000314c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000314f:	77 05                	ja     c0003156 <create_chain+0xf1>
c0003151:	bb 02 00 00 00       	mov    ebx,0x2
c0003156:	89 da                	mov    edx,ebx
c0003158:	89 e8                	mov    eax,ebp
c000315a:	e8 18 fc ff ff       	call   c0002d77 <get_fat>
c000315f:	83 f8 01             	cmp    eax,0x1
c0003162:	0f 84 2e ff ff ff    	je     c0003096 <create_chain+0x31>
c0003168:	83 f8 ff             	cmp    eax,0xffffffff
c000316b:	0f 84 9a 00 00 00    	je     c000320b <create_chain+0x1a6>
c0003171:	85 c0                	test   eax,eax
c0003173:	74 11                	je     c0003186 <create_chain+0x121>
c0003175:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003178:	83 f8 01             	cmp    eax,0x1
c000317b:	76 0d                	jbe    c000318a <create_chain+0x125>
c000317d:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003180:	76 08                	jbe    c000318a <create_chain+0x125>
c0003182:	89 c7                	mov    edi,eax
c0003184:	eb 04                	jmp    c000318a <create_chain+0x125>
c0003186:	85 db                	test   ebx,ebx
c0003188:	75 38                	jne    c00031c2 <create_chain+0x15d>
c000318a:	89 fb                	mov    ebx,edi
c000318c:	43                   	inc    ebx
c000318d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003190:	77 0e                	ja     c00031a0 <create_chain+0x13b>
c0003192:	83 ff 01             	cmp    edi,0x1
c0003195:	0f 86 28 ff ff ff    	jbe    c00030c3 <create_chain+0x5e>
c000319b:	bb 02 00 00 00       	mov    ebx,0x2
c00031a0:	89 da                	mov    edx,ebx
c00031a2:	89 e8                	mov    eax,ebp
c00031a4:	e8 ce fb ff ff       	call   c0002d77 <get_fat>
c00031a9:	85 c0                	test   eax,eax
c00031ab:	74 15                	je     c00031c2 <create_chain+0x15d>
c00031ad:	83 f8 01             	cmp    eax,0x1
c00031b0:	0f 84 e0 fe ff ff    	je     c0003096 <create_chain+0x31>
c00031b6:	40                   	inc    eax
c00031b7:	74 52                	je     c000320b <create_chain+0x1a6>
c00031b9:	39 fb                	cmp    ebx,edi
c00031bb:	75 cf                	jne    c000318c <create_chain+0x127>
c00031bd:	e9 01 ff ff ff       	jmp    c00030c3 <create_chain+0x5e>
c00031c2:	83 c9 ff             	or     ecx,0xffffffff
c00031c5:	89 da                	mov    edx,ebx
c00031c7:	89 f0                	mov    eax,esi
c00031c9:	e8 a4 f9 ff ff       	call   c0002b72 <put_fat>
c00031ce:	85 c0                	test   eax,eax
c00031d0:	75 32                	jne    c0003204 <create_chain+0x19f>
c00031d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00031d7:	74 11                	je     c00031ea <create_chain+0x185>
c00031d9:	89 d9                	mov    ecx,ebx
c00031db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031df:	89 f0                	mov    eax,esi
c00031e1:	e8 8c f9 ff ff       	call   c0002b72 <put_fat>
c00031e6:	85 c0                	test   eax,eax
c00031e8:	75 1a                	jne    c0003204 <create_chain+0x19f>
c00031ea:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00031ed:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c00031f0:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c00031f3:	8d 51 fe             	lea    edx,[ecx-0x2]
c00031f6:	39 d0                	cmp    eax,edx
c00031f8:	77 04                	ja     c00031fe <create_chain+0x199>
c00031fa:	48                   	dec    eax
c00031fb:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00031fe:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003202:	eb 56                	jmp    c000325a <create_chain+0x1f5>
c0003204:	48                   	dec    eax
c0003205:	0f 85 8b fe ff ff    	jne    c0003096 <create_chain+0x31>
c000320b:	83 cb ff             	or     ebx,0xffffffff
c000320e:	eb 4a                	jmp    c000325a <create_chain+0x1f5>
c0003210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003214:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003217:	41                   	inc    ecx
c0003218:	39 d9                	cmp    ecx,ebx
c000321a:	75 19                	jne    c0003235 <create_chain+0x1d0>
c000321c:	b9 02 00 00 00       	mov    ecx,0x2
c0003221:	85 d2                	test   edx,edx
c0003223:	74 03                	je     c0003228 <create_chain+0x1c3>
c0003225:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003228:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000322b:	85 c0                	test   eax,eax
c000322d:	0f 85 63 fe ff ff    	jne    c0003096 <create_chain+0x31>
c0003233:	eb b5                	jmp    c00031ea <create_chain+0x185>
c0003235:	85 d2                	test   edx,edx
c0003237:	75 07                	jne    c0003240 <create_chain+0x1db>
c0003239:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003240:	89 d9                	mov    ecx,ebx
c0003242:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003246:	89 e8                	mov    eax,ebp
c0003248:	e8 bb fa ff ff       	call   c0002d08 <fill_last_frag>
c000324d:	85 c0                	test   eax,eax
c000324f:	75 b3                	jne    c0003204 <create_chain+0x19f>
c0003251:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003258:	eb 90                	jmp    c00031ea <create_chain+0x185>
c000325a:	83 c4 1c             	add    esp,0x1c
c000325d:	89 d8                	mov    eax,ebx
c000325f:	5b                   	pop    ebx
c0003260:	5e                   	pop    esi
c0003261:	5f                   	pop    edi
c0003262:	5d                   	pop    ebp
c0003263:	c3                   	ret    

c0003264 <remove_chain>:
c0003264:	55                   	push   ebp
c0003265:	57                   	push   edi
c0003266:	56                   	push   esi
c0003267:	53                   	push   ebx
c0003268:	83 ec 1c             	sub    esp,0x1c
c000326b:	83 fa 01             	cmp    edx,0x1
c000326e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003272:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003274:	77 0a                	ja     c0003280 <remove_chain+0x1c>
c0003276:	b8 02 00 00 00       	mov    eax,0x2
c000327b:	e9 24 01 00 00       	jmp    c00033a4 <remove_chain+0x140>
c0003280:	89 d6                	mov    esi,edx
c0003282:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003285:	76 ef                	jbe    c0003276 <remove_chain+0x12>
c0003287:	89 c7                	mov    edi,eax
c0003289:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000328e:	75 06                	jne    c0003296 <remove_chain+0x32>
c0003290:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003294:	eb 54                	jmp    c00032ea <remove_chain+0x86>
c0003296:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003299:	75 06                	jne    c00032a1 <remove_chain+0x3d>
c000329b:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000329f:	74 ef                	je     c0003290 <remove_chain+0x2c>
c00032a1:	83 c9 ff             	or     ecx,0xffffffff
c00032a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032a8:	89 d8                	mov    eax,ebx
c00032aa:	e8 c3 f8 ff ff       	call   c0002b72 <put_fat>
c00032af:	85 c0                	test   eax,eax
c00032b1:	74 dd                	je     c0003290 <remove_chain+0x2c>
c00032b3:	e9 ec 00 00 00       	jmp    c00033a4 <remove_chain+0x140>
c00032b8:	83 f8 01             	cmp    eax,0x1
c00032bb:	74 b9                	je     c0003276 <remove_chain+0x12>
c00032bd:	83 f8 ff             	cmp    eax,0xffffffff
c00032c0:	74 6d                	je     c000332f <remove_chain+0xcb>
c00032c2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c5:	75 6f                	jne    c0003336 <remove_chain+0xd2>
c00032c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032ca:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032cd:	8d 51 fe             	lea    edx,[ecx-0x2]
c00032d0:	39 d0                	cmp    eax,edx
c00032d2:	73 08                	jae    c00032dc <remove_chain+0x78>
c00032d4:	40                   	inc    eax
c00032d5:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c00032d9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00032dc:	8d 4e 01             	lea    ecx,[esi+0x1]
c00032df:	39 e9                	cmp    ecx,ebp
c00032e1:	75 64                	jne    c0003347 <remove_chain+0xe3>
c00032e3:	89 ee                	mov    esi,ebp
c00032e5:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c00032e8:	76 0f                	jbe    c00032f9 <remove_chain+0x95>
c00032ea:	89 f2                	mov    edx,esi
c00032ec:	89 f8                	mov    eax,edi
c00032ee:	e8 84 fa ff ff       	call   c0002d77 <get_fat>
c00032f3:	89 c5                	mov    ebp,eax
c00032f5:	85 c0                	test   eax,eax
c00032f7:	75 bf                	jne    c00032b8 <remove_chain+0x54>
c00032f9:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032fc:	0f 85 a0 00 00 00    	jne    c00033a2 <remove_chain+0x13e>
c0003302:	eb 6c                	jmp    c0003370 <remove_chain+0x10c>
c0003304:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003307:	84 c0                	test   al,al
c0003309:	75 7d                	jne    c0003388 <remove_chain+0x124>
c000330b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000330e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003312:	0f 84 86 00 00 00    	je     c000339e <remove_chain+0x13a>
c0003318:	89 da                	mov    edx,ebx
c000331a:	89 f8                	mov    eax,edi
c000331c:	e8 56 fa ff ff       	call   c0002d77 <get_fat>
c0003321:	83 f8 01             	cmp    eax,0x1
c0003324:	0f 86 4c ff ff ff    	jbe    c0003276 <remove_chain+0x12>
c000332a:	83 f8 ff             	cmp    eax,0xffffffff
c000332d:	75 4e                	jne    c000337d <remove_chain+0x119>
c000332f:	b8 01 00 00 00       	mov    eax,0x1
c0003334:	eb 6e                	jmp    c00033a4 <remove_chain+0x140>
c0003336:	31 c9                	xor    ecx,ecx
c0003338:	89 f2                	mov    edx,esi
c000333a:	89 d8                	mov    eax,ebx
c000333c:	e8 31 f8 ff ff       	call   c0002b72 <put_fat>
c0003341:	85 c0                	test   eax,eax
c0003343:	74 82                	je     c00032c7 <remove_chain+0x63>
c0003345:	eb 5d                	jmp    c00033a4 <remove_chain+0x140>
c0003347:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000334a:	75 1b                	jne    c0003367 <remove_chain+0x103>
c000334c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003350:	89 d8                	mov    eax,ebx
c0003352:	83 ec 0c             	sub    esp,0xc
c0003355:	6a 00                	push   0x0
c0003357:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000335b:	e8 5d f7 ff ff       	call   c0002abd <change_bitmap>
c0003360:	83 c4 10             	add    esp,0x10
c0003363:	85 c0                	test   eax,eax
c0003365:	75 3d                	jne    c00033a4 <remove_chain+0x140>
c0003367:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000336b:	e9 73 ff ff ff       	jmp    c00032e3 <remove_chain+0x7f>
c0003370:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003375:	75 8d                	jne    c0003304 <remove_chain+0xa0>
c0003377:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c000337b:	eb 25                	jmp    c00033a2 <remove_chain+0x13e>
c000337d:	8d 53 01             	lea    edx,[ebx+0x1]
c0003380:	89 c3                	mov    ebx,eax
c0003382:	39 c2                	cmp    edx,eax
c0003384:	74 88                	je     c000330e <remove_chain+0xaa>
c0003386:	eb 1a                	jmp    c00033a2 <remove_chain+0x13e>
c0003388:	3c 03                	cmp    al,0x3
c000338a:	75 16                	jne    c00033a2 <remove_chain+0x13e>
c000338c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000338f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003393:	77 0d                	ja     c00033a2 <remove_chain+0x13e>
c0003395:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003398:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000339c:	72 04                	jb     c00033a2 <remove_chain+0x13e>
c000339e:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033a2:	31 c0                	xor    eax,eax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <dir_clear>:
c00033ac:	55                   	push   ebp
c00033ad:	57                   	push   edi
c00033ae:	56                   	push   esi
c00033af:	89 c6                	mov    esi,eax
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033b9:	e8 9d ed ff ff       	call   c000215b <sync_window>
c00033be:	85 c0                	test   eax,eax
c00033c0:	0f 85 de 00 00 00    	jne    c00034a4 <dir_clear+0xf8>
c00033c6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033ca:	89 f0                	mov    eax,esi
c00033cc:	8d 6e 54             	lea    ebp,[esi+0x54]
c00033cf:	e8 d6 e8 ff ff       	call   c0001caa <clst2sect>
c00033d4:	b9 00 02 00 00       	mov    ecx,0x200
c00033d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00033dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00033e1:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c00033e4:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c00033e7:	89 e8                	mov    eax,ebp
c00033e9:	31 d2                	xor    edx,edx
c00033eb:	e8 b5 e6 ff ff       	call   c0001aa5 <mem_set>
c00033f0:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c00033f4:	c1 e3 09             	shl    ebx,0x9
c00033f7:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c00033fd:	76 1f                	jbe    c000341e <dir_clear+0x72>
c00033ff:	bb 00 80 00 00       	mov    ebx,0x8000
c0003404:	eb 18                	jmp    c000341e <dir_clear+0x72>
c0003406:	83 ec 0c             	sub    esp,0xc
c0003409:	53                   	push   ebx
c000340a:	e8 35 4e 00 00       	call   c0008244 <ff_memalloc>
c000340f:	83 c4 10             	add    esp,0x10
c0003412:	89 c7                	mov    edi,eax
c0003414:	85 c0                	test   eax,eax
c0003416:	0f 85 8f 00 00 00    	jne    c00034ab <dir_clear+0xff>
c000341c:	d1 eb                	shr    ebx,1
c000341e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003424:	77 e0                	ja     c0003406 <dir_clear+0x5a>
c0003426:	31 db                	xor    ebx,ebx
c0003428:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000342c:	39 d8                	cmp    eax,ebx
c000342e:	76 66                	jbe    c0003496 <dir_clear+0xea>
c0003430:	83 ec 0c             	sub    esp,0xc
c0003433:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003437:	6a 01                	push   0x1
c0003439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000343d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003441:	55                   	push   ebp
c0003442:	50                   	push   eax
c0003443:	e8 94 e5 ff ff       	call   c00019dc <disk_write>
c0003448:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000344d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003452:	83 c4 20             	add    esp,0x20
c0003455:	85 c0                	test   eax,eax
c0003457:	75 3d                	jne    c0003496 <dir_clear+0xea>
c0003459:	43                   	inc    ebx
c000345a:	eb cc                	jmp    c0003428 <dir_clear+0x7c>
c000345c:	83 ec 0c             	sub    esp,0xc
c000345f:	31 d2                	xor    edx,edx
c0003461:	55                   	push   ebp
c0003462:	89 d8                	mov    eax,ebx
c0003464:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003468:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000346c:	52                   	push   edx
c000346d:	50                   	push   eax
c000346e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003472:	57                   	push   edi
c0003473:	50                   	push   eax
c0003474:	e8 63 e5 ff ff       	call   c00019dc <disk_write>
c0003479:	83 c4 20             	add    esp,0x20
c000347c:	85 c0                	test   eax,eax
c000347e:	75 0a                	jne    c000348a <dir_clear+0xde>
c0003480:	01 eb                	add    ebx,ebp
c0003482:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003486:	39 d8                	cmp    eax,ebx
c0003488:	77 d2                	ja     c000345c <dir_clear+0xb0>
c000348a:	83 ec 0c             	sub    esp,0xc
c000348d:	57                   	push   edi
c000348e:	e8 c7 4d 00 00       	call   c000825a <ff_memfree>
c0003493:	83 c4 10             	add    esp,0x10
c0003496:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000349a:	39 d8                	cmp    eax,ebx
c000349c:	0f 95 c0             	setne  al
c000349f:	0f b6 c0             	movzx  eax,al
c00034a2:	eb 19                	jmp    c00034bd <dir_clear+0x111>
c00034a4:	b8 01 00 00 00       	mov    eax,0x1
c00034a9:	eb 12                	jmp    c00034bd <dir_clear+0x111>
c00034ab:	89 d9                	mov    ecx,ebx
c00034ad:	31 d2                	xor    edx,edx
c00034af:	c1 eb 09             	shr    ebx,0x9
c00034b2:	e8 ee e5 ff ff       	call   c0001aa5 <mem_set>
c00034b7:	89 dd                	mov    ebp,ebx
c00034b9:	31 db                	xor    ebx,ebx
c00034bb:	eb c5                	jmp    c0003482 <dir_clear+0xd6>
c00034bd:	83 c4 1c             	add    esp,0x1c
c00034c0:	5b                   	pop    ebx
c00034c1:	5e                   	pop    esi
c00034c2:	5f                   	pop    edi
c00034c3:	5d                   	pop    ebp
c00034c4:	c3                   	ret    

c00034c5 <dir_next>:
c00034c5:	55                   	push   ebp
c00034c6:	57                   	push   edi
c00034c7:	56                   	push   esi
c00034c8:	53                   	push   ebx
c00034c9:	89 c3                	mov    ebx,eax
c00034cb:	83 ec 1c             	sub    esp,0x1c
c00034ce:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00034d4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00034d7:	8d 78 20             	lea    edi,[eax+0x20]
c00034da:	31 c0                	xor    eax,eax
c00034dc:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00034e0:	0f 94 c0             	sete   al
c00034e3:	48                   	dec    eax
c00034e4:	25 00 00 20 f0       	and    eax,0xf0200000
c00034e9:	05 00 00 00 10       	add    eax,0x10000000
c00034ee:	39 f8                	cmp    eax,edi
c00034f0:	77 0e                	ja     c0003500 <dir_next+0x3b>
c00034f2:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034f9:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003500:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003503:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003506:	b8 04 00 00 00       	mov    eax,0x4
c000350b:	89 ce                	mov    esi,ecx
c000350d:	09 d6                	or     esi,edx
c000350f:	0f 84 da 00 00 00    	je     c00035ef <dir_next+0x12a>
c0003515:	89 f8                	mov    eax,edi
c0003517:	25 ff 01 00 00       	and    eax,0x1ff
c000351c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003520:	0f 85 b9 00 00 00    	jne    c00035df <dir_next+0x11a>
c0003526:	83 c2 01             	add    edx,0x1
c0003529:	83 d1 00             	adc    ecx,0x0
c000352c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000352f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003532:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003535:	85 d2                	test   edx,edx
c0003537:	75 29                	jne    c0003562 <dir_next+0x9d>
c0003539:	89 fa                	mov    edx,edi
c000353b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000353f:	c1 ea 05             	shr    edx,0x5
c0003542:	39 c2                	cmp    edx,eax
c0003544:	0f 82 95 00 00 00    	jb     c00035df <dir_next+0x11a>
c000354a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003551:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003558:	b8 04 00 00 00       	mov    eax,0x4
c000355d:	e9 8d 00 00 00       	jmp    c00035ef <dir_next+0x12a>
c0003562:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003566:	89 f9                	mov    ecx,edi
c0003568:	48                   	dec    eax
c0003569:	c1 e9 09             	shr    ecx,0x9
c000356c:	85 c8                	test   eax,ecx
c000356e:	75 6f                	jne    c00035df <dir_next+0x11a>
c0003570:	89 d8                	mov    eax,ebx
c0003572:	e8 00 f8 ff ff       	call   c0002d77 <get_fat>
c0003577:	89 c6                	mov    esi,eax
c0003579:	83 f8 01             	cmp    eax,0x1
c000357c:	77 07                	ja     c0003585 <dir_next+0xc0>
c000357e:	b8 02 00 00 00       	mov    eax,0x2
c0003583:	eb 6a                	jmp    c00035ef <dir_next+0x12a>
c0003585:	83 f8 ff             	cmp    eax,0xffffffff
c0003588:	75 07                	jne    c0003591 <dir_next+0xcc>
c000358a:	b8 01 00 00 00       	mov    eax,0x1
c000358f:	eb 5e                	jmp    c00035ef <dir_next+0x12a>
c0003591:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003594:	77 37                	ja     c00035cd <dir_next+0x108>
c0003596:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000359b:	74 ad                	je     c000354a <dir_next+0x85>
c000359d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 be fa ff ff       	call   c0003065 <create_chain>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	b8 07 00 00 00       	mov    eax,0x7
c00035ae:	85 f6                	test   esi,esi
c00035b0:	74 3d                	je     c00035ef <dir_next+0x12a>
c00035b2:	83 fe 01             	cmp    esi,0x1
c00035b5:	74 c7                	je     c000357e <dir_next+0xb9>
c00035b7:	83 fe ff             	cmp    esi,0xffffffff
c00035ba:	74 ce                	je     c000358a <dir_next+0xc5>
c00035bc:	89 f2                	mov    edx,esi
c00035be:	89 e8                	mov    eax,ebp
c00035c0:	e8 e7 fd ff ff       	call   c00033ac <dir_clear>
c00035c5:	85 c0                	test   eax,eax
c00035c7:	75 c1                	jne    c000358a <dir_next+0xc5>
c00035c9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035cd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00035d0:	89 f2                	mov    edx,esi
c00035d2:	89 e8                	mov    eax,ebp
c00035d4:	e8 d1 e6 ff ff       	call   c0001caa <clst2sect>
c00035d9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00035dc:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00035df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035e3:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c00035e6:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c00035ea:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00035ed:	31 c0                	xor    eax,eax
c00035ef:	83 c4 1c             	add    esp,0x1c
c00035f2:	5b                   	pop    ebx
c00035f3:	5e                   	pop    esi
c00035f4:	5f                   	pop    edi
c00035f5:	5d                   	pop    ebp
c00035f6:	c3                   	ret    

c00035f7 <load_xdir>:
c00035f7:	55                   	push   ebp
c00035f8:	57                   	push   edi
c00035f9:	56                   	push   esi
c00035fa:	89 c6                	mov    esi,eax
c00035fc:	53                   	push   ebx
c00035fd:	83 ec 1c             	sub    esp,0x1c
c0003600:	8b 00                	mov    eax,DWORD PTR [eax]
c0003602:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003605:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003608:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000360b:	e8 df eb ff ff       	call   c00021ef <move_window>
c0003610:	89 c3                	mov    ebx,eax
c0003612:	85 c0                	test   eax,eax
c0003614:	0f 85 0c 01 00 00    	jne    c0003726 <load_xdir+0x12f>
c000361a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000361d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003620:	0f 85 fb 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c0003626:	89 f8                	mov    eax,edi
c0003628:	b9 20 00 00 00       	mov    ecx,0x20
c000362d:	e8 5e e4 ff ff       	call   c0001a90 <mem_cpy>
c0003632:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003636:	40                   	inc    eax
c0003637:	c1 e0 05             	shl    eax,0x5
c000363a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000363e:	83 e8 60             	sub    eax,0x60
c0003641:	3d 00 02 00 00       	cmp    eax,0x200
c0003646:	0f 87 d5 00 00 00    	ja     c0003721 <load_xdir+0x12a>
c000364c:	31 d2                	xor    edx,edx
c000364e:	89 f0                	mov    eax,esi
c0003650:	e8 70 fe ff ff       	call   c00034c5 <dir_next>
c0003655:	89 c3                	mov    ebx,eax
c0003657:	83 f8 04             	cmp    eax,0x4
c000365a:	0f 84 c1 00 00 00    	je     c0003721 <load_xdir+0x12a>
c0003660:	85 c0                	test   eax,eax
c0003662:	0f 85 be 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c0003668:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000366b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000366e:	8b 06                	mov    eax,DWORD PTR [esi]
c0003670:	e8 7a eb ff ff       	call   c00021ef <move_window>
c0003675:	89 c3                	mov    ebx,eax
c0003677:	85 c0                	test   eax,eax
c0003679:	0f 85 a7 00 00 00    	jne    c0003726 <load_xdir+0x12f>
c000367f:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003682:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003685:	0f 85 96 00 00 00    	jne    c0003721 <load_xdir+0x12a>
c000368b:	8d 47 20             	lea    eax,[edi+0x20]
c000368e:	b9 20 00 00 00       	mov    ecx,0x20
c0003693:	e8 f8 e3 ff ff       	call   c0001a90 <mem_cpy>
c0003698:	31 d2                	xor    edx,edx
c000369a:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000369e:	b9 0f 00 00 00       	mov    ecx,0xf
c00036a3:	83 c0 2c             	add    eax,0x2c
c00036a6:	f7 f1                	div    ecx
c00036a8:	c1 e0 05             	shl    eax,0x5
c00036ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036af:	77 70                	ja     c0003721 <load_xdir+0x12a>
c00036b1:	bd 40 00 00 00       	mov    ebp,0x40
c00036b6:	31 d2                	xor    edx,edx
c00036b8:	89 f0                	mov    eax,esi
c00036ba:	e8 06 fe ff ff       	call   c00034c5 <dir_next>
c00036bf:	89 c3                	mov    ebx,eax
c00036c1:	83 f8 04             	cmp    eax,0x4
c00036c4:	74 5b                	je     c0003721 <load_xdir+0x12a>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 5c                	jne    c0003726 <load_xdir+0x12f>
c00036ca:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036cd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00036d0:	8b 06                	mov    eax,DWORD PTR [esi]
c00036d2:	e8 18 eb ff ff       	call   c00021ef <move_window>
c00036d7:	89 c3                	mov    ebx,eax
c00036d9:	85 c0                	test   eax,eax
c00036db:	75 49                	jne    c0003726 <load_xdir+0x12f>
c00036dd:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036e0:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c00036e3:	75 3c                	jne    c0003721 <load_xdir+0x12a>
c00036e5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00036eb:	77 0d                	ja     c00036fa <load_xdir+0x103>
c00036ed:	8d 04 2f             	lea    eax,[edi+ebp*1]
c00036f0:	b9 20 00 00 00       	mov    ecx,0x20
c00036f5:	e8 96 e3 ff ff       	call   c0001a90 <mem_cpy>
c00036fa:	83 c5 20             	add    ebp,0x20
c00036fd:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003701:	77 b3                	ja     c00036b6 <load_xdir+0xbf>
c0003703:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003709:	77 1b                	ja     c0003726 <load_xdir+0x12f>
c000370b:	89 f8                	mov    eax,edi
c000370d:	e8 cd e7 ff ff       	call   c0001edf <xdir_sum>
c0003712:	89 c1                	mov    ecx,eax
c0003714:	8d 47 02             	lea    eax,[edi+0x2]
c0003717:	e8 f5 e2 ff ff       	call   c0001a11 <ld_word>
c000371c:	66 39 c1             	cmp    cx,ax
c000371f:	74 05                	je     c0003726 <load_xdir+0x12f>
c0003721:	bb 02 00 00 00       	mov    ebx,0x2
c0003726:	83 c4 1c             	add    esp,0x1c
c0003729:	89 d8                	mov    eax,ebx
c000372b:	5b                   	pop    ebx
c000372c:	5e                   	pop    esi
c000372d:	5f                   	pop    edi
c000372e:	5d                   	pop    ebp
c000372f:	c3                   	ret    

c0003730 <load_obj_xdir>:
c0003730:	53                   	push   ebx
c0003731:	89 c3                	mov    ebx,eax
c0003733:	83 ec 08             	sub    esp,0x8
c0003736:	8b 02                	mov    eax,DWORD PTR [edx]
c0003738:	89 03                	mov    DWORD PTR [ebx],eax
c000373a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000373d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003740:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003743:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003746:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003749:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003750:	30 c0                	xor    al,al
c0003752:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003759:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000375c:	89 d8                	mov    eax,ebx
c000375e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003761:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003764:	e8 04 f8 ff ff       	call   c0002f6d <dir_sdi>
c0003769:	85 c0                	test   eax,eax
c000376b:	75 0b                	jne    c0003778 <load_obj_xdir+0x48>
c000376d:	89 d8                	mov    eax,ebx
c000376f:	83 c4 08             	add    esp,0x8
c0003772:	5b                   	pop    ebx
c0003773:	e9 7f fe ff ff       	jmp    c00035f7 <load_xdir>
c0003778:	83 c4 08             	add    esp,0x8
c000377b:	5b                   	pop    ebx
c000377c:	c3                   	ret    

c000377d <dir_read>:
c000377d:	55                   	push   ebp
c000377e:	bd 04 00 00 00       	mov    ebp,0x4
c0003783:	57                   	push   edi
c0003784:	56                   	push   esi
c0003785:	be ff ff ff ff       	mov    esi,0xffffffff
c000378a:	53                   	push   ebx
c000378b:	89 c3                	mov    ebx,eax
c000378d:	83 ec 1c             	sub    esp,0x1c
c0003790:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003794:	8b 38                	mov    edi,DWORD PTR [eax]
c0003796:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000379b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a1:	89 c8                	mov    eax,ecx
c00037a3:	09 d0                	or     eax,edx
c00037a5:	0f 84 25 01 00 00    	je     c00038d0 <dir_read+0x153>
c00037ab:	89 f8                	mov    eax,edi
c00037ad:	e8 3d ea ff ff       	call   c00021ef <move_window>
c00037b2:	89 c5                	mov    ebp,eax
c00037b4:	85 c0                	test   eax,eax
c00037b6:	0f 85 23 01 00 00    	jne    c00038df <dir_read+0x162>
c00037bc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037bf:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037c1:	84 c9                	test   cl,cl
c00037c3:	0f 84 11 01 00 00    	je     c00038da <dir_read+0x15d>
c00037c9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037cc:	75 48                	jne    c0003816 <dir_read+0x99>
c00037ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037d3:	74 10                	je     c00037e5 <dir_read+0x68>
c00037d5:	80 f9 83             	cmp    cl,0x83
c00037d8:	0f 85 dd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037de:	31 ed                	xor    ebp,ebp
c00037e0:	e9 08 01 00 00       	jmp    c00038ed <dir_read+0x170>
c00037e5:	80 f9 85             	cmp    cl,0x85
c00037e8:	0f 85 cd 00 00 00    	jne    c00038bb <dir_read+0x13e>
c00037ee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037f1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037f4:	89 d8                	mov    eax,ebx
c00037f6:	e8 fc fd ff ff       	call   c00035f7 <load_xdir>
c00037fb:	89 c5                	mov    ebp,eax
c00037fd:	85 c0                	test   eax,eax
c00037ff:	0f 85 da 00 00 00    	jne    c00038df <dir_read+0x162>
c0003805:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003808:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000380b:	83 e0 3f             	and    eax,0x3f
c000380e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003811:	e9 d7 00 00 00       	jmp    c00038ed <dir_read+0x170>
c0003816:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003819:	83 e0 3f             	and    eax,0x3f
c000381c:	80 f9 2e             	cmp    cl,0x2e
c000381f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003823:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003826:	0f 84 8a 00 00 00    	je     c00038b6 <dir_read+0x139>
c000382c:	80 f9 e5             	cmp    cl,0xe5
c000382f:	0f 84 81 00 00 00    	je     c00038b6 <dir_read+0x139>
c0003835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003839:	83 e0 1f             	and    eax,0x1f
c000383c:	83 f8 08             	cmp    eax,0x8
c000383f:	0f 94 c0             	sete   al
c0003842:	0f b6 c0             	movzx  eax,al
c0003845:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003849:	75 6b                	jne    c00038b6 <dir_read+0x139>
c000384b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003850:	75 44                	jne    c0003896 <dir_read+0x119>
c0003852:	f6 c1 40             	test   cl,0x40
c0003855:	74 12                	je     c0003869 <dir_read+0xec>
c0003857:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000385a:	83 e1 bf             	and    ecx,0xffffffbf
c000385d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003861:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003864:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003867:	eb 06                	jmp    c000386f <dir_read+0xf2>
c0003869:	89 f0                	mov    eax,esi
c000386b:	38 c8                	cmp    al,cl
c000386d:	75 47                	jne    c00038b6 <dir_read+0x139>
c000386f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003873:	be ff ff ff ff       	mov    esi,0xffffffff
c0003878:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c000387b:	75 3e                	jne    c00038bb <dir_read+0x13e>
c000387d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003881:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003884:	e8 8a e4 ff ff       	call   c0001d13 <pick_lfn>
c0003889:	85 c0                	test   eax,eax
c000388b:	74 2e                	je     c00038bb <dir_read+0x13e>
c000388d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003891:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003894:	eb 25                	jmp    c00038bb <dir_read+0x13e>
c0003896:	89 f0                	mov    eax,esi
c0003898:	84 c0                	test   al,al
c000389a:	75 11                	jne    c00038ad <dir_read+0x130>
c000389c:	89 d0                	mov    eax,edx
c000389e:	e8 2a e6 ff ff       	call   c0001ecd <sum_sfn>
c00038a3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038a7:	0f 84 31 ff ff ff    	je     c00037de <dir_read+0x61>
c00038ad:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038b4:	eb 37                	jmp    c00038ed <dir_read+0x170>
c00038b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038bb:	31 d2                	xor    edx,edx
c00038bd:	89 d8                	mov    eax,ebx
c00038bf:	e8 01 fc ff ff       	call   c00034c5 <dir_next>
c00038c4:	89 c5                	mov    ebp,eax
c00038c6:	85 c0                	test   eax,eax
c00038c8:	0f 84 cd fe ff ff    	je     c000379b <dir_read+0x1e>
c00038ce:	eb 0f                	jmp    c00038df <dir_read+0x162>
c00038d0:	85 ed                	test   ebp,ebp
c00038d2:	0f 84 06 ff ff ff    	je     c00037de <dir_read+0x61>
c00038d8:	eb 05                	jmp    c00038df <dir_read+0x162>
c00038da:	bd 04 00 00 00       	mov    ebp,0x4
c00038df:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00038e6:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00038ed:	83 c4 1c             	add    esp,0x1c
c00038f0:	89 e8                	mov    eax,ebp
c00038f2:	5b                   	pop    ebx
c00038f3:	5e                   	pop    esi
c00038f4:	5f                   	pop    edi
c00038f5:	5d                   	pop    ebp
c00038f6:	c3                   	ret    

c00038f7 <dir_alloc>:
c00038f7:	55                   	push   ebp
c00038f8:	89 d5                	mov    ebp,edx
c00038fa:	57                   	push   edi
c00038fb:	31 d2                	xor    edx,edx
c00038fd:	56                   	push   esi
c00038fe:	53                   	push   ebx
c00038ff:	89 c3                	mov    ebx,eax
c0003901:	83 ec 0c             	sub    esp,0xc
c0003904:	8b 38                	mov    edi,DWORD PTR [eax]
c0003906:	e8 62 f6 ff ff       	call   c0002f6d <dir_sdi>
c000390b:	85 c0                	test   eax,eax
c000390d:	75 4e                	jne    c000395d <dir_alloc+0x66>
c000390f:	31 f6                	xor    esi,esi
c0003911:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003914:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003917:	89 f8                	mov    eax,edi
c0003919:	e8 d1 e8 ff ff       	call   c00021ef <move_window>
c000391e:	85 c0                	test   eax,eax
c0003920:	75 3b                	jne    c000395d <dir_alloc+0x66>
c0003922:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003925:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003928:	8a 12                	mov    dl,BYTE PTR [edx]
c000392a:	75 07                	jne    c0003933 <dir_alloc+0x3c>
c000392c:	f7 d2                	not    edx
c000392e:	c0 ea 07             	shr    dl,0x7
c0003931:	eb 0d                	jmp    c0003940 <dir_alloc+0x49>
c0003933:	84 d2                	test   dl,dl
c0003935:	0f 94 c1             	sete   cl
c0003938:	80 fa e5             	cmp    dl,0xe5
c000393b:	0f 94 c2             	sete   dl
c000393e:	09 ca                	or     edx,ecx
c0003940:	84 d2                	test   dl,dl
c0003942:	74 07                	je     c000394b <dir_alloc+0x54>
c0003944:	46                   	inc    esi
c0003945:	39 ee                	cmp    esi,ebp
c0003947:	75 04                	jne    c000394d <dir_alloc+0x56>
c0003949:	eb 1c                	jmp    c0003967 <dir_alloc+0x70>
c000394b:	31 f6                	xor    esi,esi
c000394d:	ba 01 00 00 00       	mov    edx,0x1
c0003952:	89 d8                	mov    eax,ebx
c0003954:	e8 6c fb ff ff       	call   c00034c5 <dir_next>
c0003959:	85 c0                	test   eax,eax
c000395b:	74 b4                	je     c0003911 <dir_alloc+0x1a>
c000395d:	83 f8 04             	cmp    eax,0x4
c0003960:	75 05                	jne    c0003967 <dir_alloc+0x70>
c0003962:	b8 07 00 00 00       	mov    eax,0x7
c0003967:	83 c4 0c             	add    esp,0xc
c000396a:	5b                   	pop    ebx
c000396b:	5e                   	pop    esi
c000396c:	5f                   	pop    edi
c000396d:	5d                   	pop    ebp
c000396e:	c3                   	ret    

c000396f <store_xdir>:
c000396f:	55                   	push   ebp
c0003970:	57                   	push   edi
c0003971:	89 c7                	mov    edi,eax
c0003973:	56                   	push   esi
c0003974:	53                   	push   ebx
c0003975:	83 ec 0c             	sub    esp,0xc
c0003978:	8b 00                	mov    eax,DWORD PTR [eax]
c000397a:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c000397d:	89 e8                	mov    eax,ebp
c000397f:	e8 5b e5 ff ff       	call   c0001edf <xdir_sum>
c0003984:	0f b7 d0             	movzx  edx,ax
c0003987:	8d 45 02             	lea    eax,[ebp+0x2]
c000398a:	e8 f4 e0 ff ff       	call   c0001a83 <st_word>
c000398f:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003993:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003996:	89 f8                	mov    eax,edi
c0003998:	e8 d0 f5 ff ff       	call   c0002f6d <dir_sdi>
c000399d:	89 c6                	mov    esi,eax
c000399f:	85 f6                	test   esi,esi
c00039a1:	75 3d                	jne    c00039e0 <store_xdir+0x71>
c00039a3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039a6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039a9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039ab:	e8 3f e8 ff ff       	call   c00021ef <move_window>
c00039b0:	89 c6                	mov    esi,eax
c00039b2:	85 c0                	test   eax,eax
c00039b4:	75 2a                	jne    c00039e0 <store_xdir+0x71>
c00039b6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039b9:	b9 20 00 00 00       	mov    ecx,0x20
c00039be:	89 ea                	mov    edx,ebp
c00039c0:	e8 cb e0 ff ff       	call   c0001a90 <mem_cpy>
c00039c5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039c7:	85 db                	test   ebx,ebx
c00039c9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039cd:	74 11                	je     c00039e0 <store_xdir+0x71>
c00039cf:	31 d2                	xor    edx,edx
c00039d1:	89 f8                	mov    eax,edi
c00039d3:	83 c5 20             	add    ebp,0x20
c00039d6:	e8 ea fa ff ff       	call   c00034c5 <dir_next>
c00039db:	4b                   	dec    ebx
c00039dc:	89 c6                	mov    esi,eax
c00039de:	eb bf                	jmp    c000399f <store_xdir+0x30>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	83 fe 02             	cmp    esi,0x2
c00039e5:	76 05                	jbe    c00039ec <store_xdir+0x7d>
c00039e7:	b8 02 00 00 00       	mov    eax,0x2
c00039ec:	83 c4 0c             	add    esp,0xc
c00039ef:	5b                   	pop    ebx
c00039f0:	5e                   	pop    esi
c00039f1:	5f                   	pop    edi
c00039f2:	5d                   	pop    ebp
c00039f3:	c3                   	ret    

c00039f4 <dir_remove>:
c00039f4:	57                   	push   edi
c00039f5:	56                   	push   esi
c00039f6:	53                   	push   ebx
c00039f7:	89 c3                	mov    ebx,eax
c00039f9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00039fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00039fe:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a01:	83 fa ff             	cmp    edx,0xffffffff
c0003a04:	74 09                	je     c0003a0f <dir_remove+0x1b>
c0003a06:	e8 62 f5 ff ff       	call   c0002f6d <dir_sdi>
c0003a0b:	85 c0                	test   eax,eax
c0003a0d:	75 41                	jne    c0003a50 <dir_remove+0x5c>
c0003a0f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a12:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a15:	89 f0                	mov    eax,esi
c0003a17:	e8 d3 e7 ff ff       	call   c00021ef <move_window>
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	75 26                	jne    c0003a46 <dir_remove+0x52>
c0003a20:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a23:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a26:	75 05                	jne    c0003a2d <dir_remove+0x39>
c0003a28:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a2b:	eb 03                	jmp    c0003a30 <dir_remove+0x3c>
c0003a2d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a30:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a34:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a37:	73 17                	jae    c0003a50 <dir_remove+0x5c>
c0003a39:	31 d2                	xor    edx,edx
c0003a3b:	89 d8                	mov    eax,ebx
c0003a3d:	e8 83 fa ff ff       	call   c00034c5 <dir_next>
c0003a42:	85 c0                	test   eax,eax
c0003a44:	74 c9                	je     c0003a0f <dir_remove+0x1b>
c0003a46:	83 f8 04             	cmp    eax,0x4
c0003a49:	75 05                	jne    c0003a50 <dir_remove+0x5c>
c0003a4b:	b8 02 00 00 00       	mov    eax,0x2
c0003a50:	5b                   	pop    ebx
c0003a51:	5e                   	pop    esi
c0003a52:	5f                   	pop    edi
c0003a53:	c3                   	ret    

c0003a54 <create_name>:
c0003a54:	55                   	push   ebp
c0003a55:	89 d5                	mov    ebp,edx
c0003a57:	57                   	push   edi
c0003a58:	89 c7                	mov    edi,eax
c0003a5a:	56                   	push   esi
c0003a5b:	31 f6                	xor    esi,esi
c0003a5d:	53                   	push   ebx
c0003a5e:	83 ec 3c             	sub    esp,0x3c
c0003a61:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a63:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a67:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a69:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a6c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003a70:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003a74:	e8 72 e0 ff ff       	call   c0001aeb <tchar2uni>
c0003a79:	89 c3                	mov    ebx,eax
c0003a7b:	83 f8 ff             	cmp    eax,0xffffffff
c0003a7e:	75 0a                	jne    c0003a8a <create_name+0x36>
c0003a80:	b8 06 00 00 00       	mov    eax,0x6
c0003a85:	e9 9e 02 00 00       	jmp    c0003d28 <create_name+0x2d4>
c0003a8a:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a8f:	76 0c                	jbe    c0003a9d <create_name+0x49>
c0003a91:	c1 e8 10             	shr    eax,0x10
c0003a94:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a98:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a9c:	46                   	inc    esi
c0003a9d:	66 83 fb 1f          	cmp    bx,0x1f
c0003aa1:	76 4f                	jbe    c0003af2 <create_name+0x9e>
c0003aa3:	66 83 fb 5c          	cmp    bx,0x5c
c0003aa7:	74 35                	je     c0003ade <create_name+0x8a>
c0003aa9:	66 83 fb 2f          	cmp    bx,0x2f
c0003aad:	74 2f                	je     c0003ade <create_name+0x8a>
c0003aaf:	66 83 fb 7f          	cmp    bx,0x7f
c0003ab3:	77 11                	ja     c0003ac6 <create_name+0x72>
c0003ab5:	0f b7 d3             	movzx  edx,bx
c0003ab8:	b8 52 7e 02 c0       	mov    eax,0xc0027e52
c0003abd:	e8 11 e0 ff ff       	call   c0001ad3 <chk_chr>
c0003ac2:	85 c0                	test   eax,eax
c0003ac4:	75 ba                	jne    c0003a80 <create_name+0x2c>
c0003ac6:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003acc:	77 b2                	ja     c0003a80 <create_name+0x2c>
c0003ace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad2:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003ad6:	46                   	inc    esi
c0003ad7:	eb 97                	jmp    c0003a70 <create_name+0x1c>
c0003ad9:	40                   	inc    eax
c0003ada:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ade:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003ae2:	8a 10                	mov    dl,BYTE PTR [eax]
c0003ae4:	80 fa 2f             	cmp    dl,0x2f
c0003ae7:	74 f0                	je     c0003ad9 <create_name+0x85>
c0003ae9:	80 fa 5c             	cmp    dl,0x5c
c0003aec:	74 eb                	je     c0003ad9 <create_name+0x85>
c0003aee:	31 db                	xor    ebx,ebx
c0003af0:	eb 02                	jmp    c0003af4 <create_name+0xa0>
c0003af2:	b3 04                	mov    bl,0x4
c0003af4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003af8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003afb:	85 f6                	test   esi,esi
c0003afd:	74 18                	je     c0003b17 <create_name+0xc3>
c0003aff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b03:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b08:	66 83 f8 20          	cmp    ax,0x20
c0003b0c:	74 06                	je     c0003b14 <create_name+0xc0>
c0003b0e:	66 83 f8 2e          	cmp    ax,0x2e
c0003b12:	75 03                	jne    c0003b17 <create_name+0xc3>
c0003b14:	4e                   	dec    esi
c0003b15:	eb e4                	jmp    c0003afb <create_name+0xa7>
c0003b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b1b:	31 ed                	xor    ebp,ebp
c0003b1d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b23:	85 f6                	test   esi,esi
c0003b25:	0f 84 55 ff ff ff    	je     c0003a80 <create_name+0x2c>
c0003b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b2f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b32:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b36:	66 83 f8 20          	cmp    ax,0x20
c0003b3a:	75 04                	jne    c0003b40 <create_name+0xec>
c0003b3c:	89 d5                	mov    ebp,edx
c0003b3e:	eb eb                	jmp    c0003b2b <create_name+0xd7>
c0003b40:	85 ed                	test   ebp,ebp
c0003b42:	75 06                	jne    c0003b4a <create_name+0xf6>
c0003b44:	66 83 f8 2e          	cmp    ax,0x2e
c0003b48:	75 08                	jne    c0003b52 <create_name+0xfe>
c0003b4a:	83 cb 03             	or     ebx,0x3
c0003b4d:	eb 03                	jmp    c0003b52 <create_name+0xfe>
c0003b4f:	4e                   	dec    esi
c0003b50:	74 0c                	je     c0003b5e <create_name+0x10a>
c0003b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b56:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b5c:	75 f1                	jne    c0003b4f <create_name+0xfb>
c0003b5e:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b63:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b66:	ba 20 00 00 00       	mov    edx,0x20
c0003b6b:	e8 35 df ff ff       	call   c0001aa5 <mem_set>
c0003b70:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003b78:	31 c9                	xor    ecx,ecx
c0003b7a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003b7f:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b8a:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b8e:	66 85 ed             	test   bp,bp
c0003b91:	0f 84 30 01 00 00    	je     c0003cc7 <create_name+0x273>
c0003b97:	66 83 fd 20          	cmp    bp,0x20
c0003b9b:	74 10                	je     c0003bad <create_name+0x159>
c0003b9d:	66 83 fd 2e          	cmp    bp,0x2e
c0003ba1:	75 13                	jne    c0003bb6 <create_name+0x162>
c0003ba3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003ba7:	0f 84 6b 01 00 00    	je     c0003d18 <create_name+0x2c4>
c0003bad:	83 cb 03             	or     ebx,0x3
c0003bb0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003bb4:	eb c9                	jmp    c0003b7f <create_name+0x12b>
c0003bb6:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003bba:	73 0b                	jae    c0003bc7 <create_name+0x173>
c0003bbc:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003bc0:	75 47                	jne    c0003c09 <create_name+0x1b5>
c0003bc2:	e9 51 01 00 00       	jmp    c0003d18 <create_name+0x2c4>
c0003bc7:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003bcc:	75 10                	jne    c0003bde <create_name+0x18a>
c0003bce:	83 cb 03             	or     ebx,0x3
c0003bd1:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003bd9:	e9 e9 00 00 00       	jmp    c0003cc7 <create_name+0x273>
c0003bde:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003be2:	74 0d                	je     c0003bf1 <create_name+0x19d>
c0003be4:	83 cb 03             	or     ebx,0x3
c0003be7:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003beb:	0f 87 d6 00 00 00    	ja     c0003cc7 <create_name+0x273>
c0003bf1:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003bf6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003bfa:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003c02:	b9 08 00 00 00       	mov    ecx,0x8
c0003c07:	eb a7                	jmp    c0003bb0 <create_name+0x15c>
c0003c09:	66 83 fd 7f          	cmp    bp,0x7f
c0003c0d:	76 68                	jbe    c0003c77 <create_name+0x223>
c0003c0f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c13:	88 da                	mov    dl,bl
c0003c15:	83 ca 02             	or     edx,0x2
c0003c18:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c1c:	50                   	push   eax
c0003c1d:	50                   	push   eax
c0003c1e:	68 b5 01 00 00       	push   0x1b5
c0003c23:	55                   	push   ebp
c0003c24:	e8 48 46 00 00       	call   c0008271 <ff_uni2oem>
c0003c29:	83 c4 10             	add    esp,0x10
c0003c2c:	89 c5                	mov    ebp,eax
c0003c2e:	a8 80                	test   al,0x80
c0003c30:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c34:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c38:	74 0c                	je     c0003c46 <create_name+0x1f2>
c0003c3a:	83 e5 7f             	and    ebp,0x7f
c0003c3d:	0f b6 ad a0 7d 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd8260]
c0003c44:	eb 2a                	jmp    c0003c70 <create_name+0x21c>
c0003c46:	66 3d ff 00          	cmp    ax,0xff
c0003c4a:	76 24                	jbe    c0003c70 <create_name+0x21c>
c0003c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003c50:	48                   	dec    eax
c0003c51:	39 c8                	cmp    eax,ecx
c0003c53:	77 0c                	ja     c0003c61 <create_name+0x20d>
c0003c55:	83 cb 03             	or     ebx,0x3
c0003c58:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003c5c:	e9 4f ff ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003c61:	89 e8                	mov    eax,ebp
c0003c63:	88 d3                	mov    bl,dl
c0003c65:	66 c1 e8 08          	shr    ax,0x8
c0003c69:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c6d:	41                   	inc    ecx
c0003c6e:	eb 4b                	jmp    c0003cbb <create_name+0x267>
c0003c70:	88 d3                	mov    bl,dl
c0003c72:	66 85 ed             	test   bp,bp
c0003c75:	74 19                	je     c0003c90 <create_name+0x23c>
c0003c77:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003c7b:	0f b7 d5             	movzx  edx,bp
c0003c7e:	b8 5b 7e 02 c0       	mov    eax,0xc0027e5b
c0003c83:	e8 4b de ff ff       	call   c0001ad3 <chk_chr>
c0003c88:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	74 0a                	je     c0003c9a <create_name+0x246>
c0003c90:	83 cb 03             	or     ebx,0x3
c0003c93:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c98:	eb 21                	jmp    c0003cbb <create_name+0x267>
c0003c9a:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c9d:	66 83 f8 19          	cmp    ax,0x19
c0003ca1:	77 07                	ja     c0003caa <create_name+0x256>
c0003ca3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ca8:	eb 11                	jmp    c0003cbb <create_name+0x267>
c0003caa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cad:	66 83 f8 19          	cmp    ax,0x19
c0003cb1:	77 08                	ja     c0003cbb <create_name+0x267>
c0003cb3:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003cb8:	83 ed 20             	sub    ebp,0x20
c0003cbb:	89 e8                	mov    eax,ebp
c0003cbd:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003cc1:	41                   	inc    ecx
c0003cc2:	e9 e9 fe ff ff       	jmp    c0003bb0 <create_name+0x15c>
c0003cc7:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003ccb:	75 04                	jne    c0003cd1 <create_name+0x27d>
c0003ccd:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cd1:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003cd6:	75 05                	jne    c0003cdd <create_name+0x289>
c0003cd8:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003cdd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003ce1:	83 e0 0c             	and    eax,0xc
c0003ce4:	3c 0c                	cmp    al,0xc
c0003ce6:	74 0b                	je     c0003cf3 <create_name+0x29f>
c0003ce8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003cec:	83 e0 03             	and    eax,0x3
c0003cef:	3c 03                	cmp    al,0x3
c0003cf1:	75 05                	jne    c0003cf8 <create_name+0x2a4>
c0003cf3:	83 cb 02             	or     ebx,0x2
c0003cf6:	eb 19                	jmp    c0003d11 <create_name+0x2bd>
c0003cf8:	f6 c3 02             	test   bl,0x2
c0003cfb:	75 14                	jne    c0003d11 <create_name+0x2bd>
c0003cfd:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003d02:	74 03                	je     c0003d07 <create_name+0x2b3>
c0003d04:	83 cb 10             	or     ebx,0x10
c0003d07:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003d0c:	74 03                	je     c0003d11 <create_name+0x2bd>
c0003d0e:	83 cb 08             	or     ebx,0x8
c0003d11:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d14:	31 c0                	xor    eax,eax
c0003d16:	eb 10                	jmp    c0003d28 <create_name+0x2d4>
c0003d18:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d1d:	0f 85 ce fe ff ff    	jne    c0003bf1 <create_name+0x19d>
c0003d23:	e9 a6 fe ff ff       	jmp    c0003bce <create_name+0x17a>
c0003d28:	83 c4 3c             	add    esp,0x3c
c0003d2b:	5b                   	pop    ebx
c0003d2c:	5e                   	pop    esi
c0003d2d:	5f                   	pop    edi
c0003d2e:	5d                   	pop    ebp
c0003d2f:	c3                   	ret    

c0003d30 <xname_sum>:
c0003d30:	56                   	push   esi
c0003d31:	53                   	push   ebx
c0003d32:	89 c6                	mov    esi,eax
c0003d34:	51                   	push   ecx
c0003d35:	31 db                	xor    ebx,ebx
c0003d37:	83 c6 02             	add    esi,0x2
c0003d3a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d3e:	66 85 c0             	test   ax,ax
c0003d41:	74 1f                	je     c0003d62 <xname_sum+0x32>
c0003d43:	83 ec 0c             	sub    esp,0xc
c0003d46:	66 d1 cb             	ror    bx,1
c0003d49:	50                   	push   eax
c0003d4a:	e8 1e 46 00 00       	call   c000836d <ff_wtoupper>
c0003d4f:	83 c4 10             	add    esp,0x10
c0003d52:	0f b6 d0             	movzx  edx,al
c0003d55:	66 c1 e8 08          	shr    ax,0x8
c0003d59:	01 d3                	add    ebx,edx
c0003d5b:	66 d1 cb             	ror    bx,1
c0003d5e:	01 c3                	add    ebx,eax
c0003d60:	eb d5                	jmp    c0003d37 <xname_sum+0x7>
c0003d62:	89 d8                	mov    eax,ebx
c0003d64:	5a                   	pop    edx
c0003d65:	5b                   	pop    ebx
c0003d66:	5e                   	pop    esi
c0003d67:	c3                   	ret    

c0003d68 <create_xdir>:
c0003d68:	55                   	push   ebp
c0003d69:	b9 40 00 00 00       	mov    ecx,0x40
c0003d6e:	57                   	push   edi
c0003d6f:	bd 01 00 00 00       	mov    ebp,0x1
c0003d74:	56                   	push   esi
c0003d75:	31 ff                	xor    edi,edi
c0003d77:	53                   	push   ebx
c0003d78:	be 40 00 00 00       	mov    esi,0x40
c0003d7d:	89 c3                	mov    ebx,eax
c0003d7f:	83 ec 1c             	sub    esp,0x1c
c0003d82:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d86:	31 d2                	xor    edx,edx
c0003d88:	e8 18 dd ff ff       	call   c0001aa5 <mem_set>
c0003d8d:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d90:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d94:	31 c9                	xor    ecx,ecx
c0003d96:	8d 46 01             	lea    eax,[esi+0x1]
c0003d99:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d9d:	83 c6 02             	add    esi,0x2
c0003da0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003da4:	66 85 ed             	test   bp,bp
c0003da7:	74 12                	je     c0003dbb <create_xdir+0x53>
c0003da9:	0f b6 c1             	movzx  eax,cl
c0003dac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003db0:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003db4:	66 83 fd 01          	cmp    bp,0x1
c0003db8:	80 d9 ff             	sbb    cl,0xff
c0003dbb:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dbe:	0f b7 d5             	movzx  edx,bp
c0003dc1:	83 c6 02             	add    esi,0x2
c0003dc4:	e8 ba dc ff ff       	call   c0001a83 <st_word>
c0003dc9:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003dcf:	75 d3                	jne    c0003da4 <create_xdir+0x3c>
c0003dd1:	8d 47 01             	lea    eax,[edi+0x1]
c0003dd4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dd8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003ddc:	0f b6 c1             	movzx  eax,cl
c0003ddf:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003de4:	74 07                	je     c0003ded <create_xdir+0x85>
c0003de6:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003deb:	eb a9                	jmp    c0003d96 <create_xdir+0x2e>
c0003ded:	8d 47 02             	lea    eax,[edi+0x2]
c0003df0:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003df3:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003df6:	89 d0                	mov    eax,edx
c0003df8:	e8 33 ff ff ff       	call   c0003d30 <xname_sum>
c0003dfd:	83 c4 1c             	add    esp,0x1c
c0003e00:	0f b7 d0             	movzx  edx,ax
c0003e03:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e06:	5b                   	pop    ebx
c0003e07:	5e                   	pop    esi
c0003e08:	5f                   	pop    edi
c0003e09:	5d                   	pop    ebp
c0003e0a:	e9 74 dc ff ff       	jmp    c0001a83 <st_word>

c0003e0f <cmp_lfn>:
c0003e0f:	55                   	push   ebp
c0003e10:	57                   	push   edi
c0003e11:	89 d7                	mov    edi,edx
c0003e13:	56                   	push   esi
c0003e14:	53                   	push   ebx
c0003e15:	83 ec 1c             	sub    esp,0x1c
c0003e18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e1c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e1f:	e8 ed db ff ff       	call   c0001a11 <ld_word>
c0003e24:	66 85 c0             	test   ax,ax
c0003e27:	74 07                	je     c0003e30 <cmp_lfn+0x21>
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	e9 9a 00 00 00       	jmp    c0003eca <cmp_lfn+0xbb>
c0003e30:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e32:	bd 01 00 00 00       	mov    ebp,0x1
c0003e37:	83 e3 3f             	and    ebx,0x3f
c0003e3a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e42:	4b                   	dec    ebx
c0003e43:	6b db 0d             	imul   ebx,ebx,0xd
c0003e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e4a:	0f b6 80 20 7e 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd81e0]
c0003e51:	01 f8                	add    eax,edi
c0003e53:	e8 b9 db ff ff       	call   c0001a11 <ld_word>
c0003e58:	66 85 ed             	test   bp,bp
c0003e5b:	89 c6                	mov    esi,eax
c0003e5d:	74 3c                	je     c0003e9b <cmp_lfn+0x8c>
c0003e5f:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e65:	77 c2                	ja     c0003e29 <cmp_lfn+0x1a>
c0003e67:	83 ec 0c             	sub    esp,0xc
c0003e6a:	0f b7 c0             	movzx  eax,ax
c0003e6d:	50                   	push   eax
c0003e6e:	e8 fa 44 00 00       	call   c000836d <ff_wtoupper>
c0003e73:	89 c5                	mov    ebp,eax
c0003e75:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e80:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e84:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e87:	e8 e1 44 00 00       	call   c000836d <ff_wtoupper>
c0003e8c:	83 c4 10             	add    esp,0x10
c0003e8f:	39 c5                	cmp    ebp,eax
c0003e91:	75 96                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e93:	89 f5                	mov    ebp,esi
c0003e95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e99:	eb 04                	jmp    c0003e9f <cmp_lfn+0x90>
c0003e9b:	66 46                	inc    si
c0003e9d:	75 8a                	jne    c0003e29 <cmp_lfn+0x1a>
c0003e9f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003ea3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ea8:	75 9c                	jne    c0003e46 <cmp_lfn+0x37>
c0003eaa:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ead:	74 16                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eaf:	66 85 ed             	test   bp,bp
c0003eb2:	74 11                	je     c0003ec5 <cmp_lfn+0xb6>
c0003eb4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eb8:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ebd:	0f 94 c0             	sete   al
c0003ec0:	0f b6 c0             	movzx  eax,al
c0003ec3:	eb 05                	jmp    c0003eca <cmp_lfn+0xbb>
c0003ec5:	b8 01 00 00 00       	mov    eax,0x1
c0003eca:	83 c4 1c             	add    esp,0x1c
c0003ecd:	5b                   	pop    ebx
c0003ece:	5e                   	pop    esi
c0003ecf:	5f                   	pop    edi
c0003ed0:	5d                   	pop    ebp
c0003ed1:	c3                   	ret    

c0003ed2 <dir_find>:
c0003ed2:	55                   	push   ebp
c0003ed3:	31 d2                	xor    edx,edx
c0003ed5:	57                   	push   edi
c0003ed6:	56                   	push   esi
c0003ed7:	53                   	push   ebx
c0003ed8:	89 c3                	mov    ebx,eax
c0003eda:	83 ec 1c             	sub    esp,0x1c
c0003edd:	8b 30                	mov    esi,DWORD PTR [eax]
c0003edf:	e8 89 f0 ff ff       	call   c0002f6d <dir_sdi>
c0003ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ee7:	85 c0                	test   eax,eax
c0003ee9:	0f 85 9e 01 00 00    	jne    c000408d <dir_find+0x1bb>
c0003eef:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003ef2:	0f 85 8d 00 00 00    	jne    c0003f85 <dir_find+0xb3>
c0003ef8:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003efb:	e8 30 fe ff ff       	call   c0003d30 <xname_sum>
c0003f00:	89 c7                	mov    edi,eax
c0003f02:	31 d2                	xor    edx,edx
c0003f04:	89 d8                	mov    eax,ebx
c0003f06:	e8 72 f8 ff ff       	call   c000377d <dir_read>
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	0f 85 5e 01 00 00    	jne    c0004071 <dir_find+0x19f>
c0003f13:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f16:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f19:	e8 f3 da ff ff       	call   c0001a11 <ld_word>
c0003f1e:	66 39 f8             	cmp    ax,di
c0003f21:	75 df                	jne    c0003f02 <dir_find+0x30>
c0003f23:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003f26:	31 ed                	xor    ebp,ebp
c0003f28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003f2c:	ba 40 00 00 00       	mov    edx,0x40
c0003f31:	89 e9                	mov    ecx,ebp
c0003f33:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003f37:	0f 84 42 01 00 00    	je     c000407f <dir_find+0x1ad>
c0003f3d:	f6 c2 1f             	test   dl,0x1f
c0003f40:	75 03                	jne    c0003f45 <dir_find+0x73>
c0003f42:	83 c2 02             	add    edx,0x2
c0003f45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003f49:	89 d0                	mov    eax,edx
c0003f4b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f4e:	e8 be da ff ff       	call   c0001a11 <ld_word>
c0003f53:	83 ec 0c             	sub    esp,0xc
c0003f56:	0f b7 c0             	movzx  eax,ax
c0003f59:	50                   	push   eax
c0003f5a:	e8 0e 44 00 00       	call   c000836d <ff_wtoupper>
c0003f5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f63:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f66:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003f6a:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f6d:	e8 fb 43 00 00       	call   c000836d <ff_wtoupper>
c0003f72:	83 c4 10             	add    esp,0x10
c0003f75:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f79:	75 87                	jne    c0003f02 <dir_find+0x30>
c0003f7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003f7f:	45                   	inc    ebp
c0003f80:	83 c2 02             	add    edx,0x2
c0003f83:	eb ac                	jmp    c0003f31 <dir_find+0x5f>
c0003f85:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f8c:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f91:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f96:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f99:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f9c:	89 f0                	mov    eax,esi
c0003f9e:	e8 4c e2 ff ff       	call   c00021ef <move_window>
c0003fa3:	85 c0                	test   eax,eax
c0003fa5:	0f 85 c6 00 00 00    	jne    c0004071 <dir_find+0x19f>
c0003fab:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fae:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fb1:	84 c9                	test   cl,cl
c0003fb3:	0f 84 bd 00 00 00    	je     c0004076 <dir_find+0x1a4>
c0003fb9:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fbc:	88 d0                	mov    al,dl
c0003fbe:	83 e0 3f             	and    eax,0x3f
c0003fc1:	80 f9 e5             	cmp    cl,0xe5
c0003fc4:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fc7:	0f 84 87 00 00 00    	je     c0004054 <dir_find+0x182>
c0003fcd:	80 e2 08             	and    dl,0x8
c0003fd0:	74 06                	je     c0003fd8 <dir_find+0x106>
c0003fd2:	3c 0f                	cmp    al,0xf
c0003fd4:	75 7e                	jne    c0004054 <dir_find+0x182>
c0003fd6:	eb 04                	jmp    c0003fdc <dir_find+0x10a>
c0003fd8:	3c 0f                	cmp    al,0xf
c0003fda:	75 4c                	jne    c0004028 <dir_find+0x156>
c0003fdc:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003fe0:	75 7e                	jne    c0004060 <dir_find+0x18e>
c0003fe2:	f6 c1 40             	test   cl,0x40
c0003fe5:	74 12                	je     c0003ff9 <dir_find+0x127>
c0003fe7:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003fea:	83 e1 bf             	and    ecx,0xffffffbf
c0003fed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003ff1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ff4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ff7:	eb 06                	jmp    c0003fff <dir_find+0x12d>
c0003ff9:	89 f8                	mov    eax,edi
c0003ffb:	38 c8                	cmp    al,cl
c0003ffd:	75 5c                	jne    c000405b <dir_find+0x189>
c0003fff:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004003:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004008:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000400b:	75 53                	jne    c0004060 <dir_find+0x18e>
c000400d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004011:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004014:	89 ea                	mov    edx,ebp
c0004016:	e8 f4 fd ff ff       	call   c0003e0f <cmp_lfn>
c000401b:	85 c0                	test   eax,eax
c000401d:	74 41                	je     c0004060 <dir_find+0x18e>
c000401f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004023:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004026:	eb 38                	jmp    c0004060 <dir_find+0x18e>
c0004028:	89 f8                	mov    eax,edi
c000402a:	84 c0                	test   al,al
c000402c:	75 0d                	jne    c000403b <dir_find+0x169>
c000402e:	89 e8                	mov    eax,ebp
c0004030:	e8 98 de ff ff       	call   c0001ecd <sum_sfn>
c0004035:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004039:	74 52                	je     c000408d <dir_find+0x1bb>
c000403b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000403f:	75 13                	jne    c0004054 <dir_find+0x182>
c0004041:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004044:	b9 0b 00 00 00       	mov    ecx,0xb
c0004049:	89 e8                	mov    eax,ebp
c000404b:	e8 60 da ff ff       	call   c0001ab0 <mem_cmp>
c0004050:	85 c0                	test   eax,eax
c0004052:	74 39                	je     c000408d <dir_find+0x1bb>
c0004054:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000405b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004060:	31 d2                	xor    edx,edx
c0004062:	89 d8                	mov    eax,ebx
c0004064:	e8 5c f4 ff ff       	call   c00034c5 <dir_next>
c0004069:	85 c0                	test   eax,eax
c000406b:	0f 84 25 ff ff ff    	je     c0003f96 <dir_find+0xc4>
c0004071:	89 04 24             	mov    DWORD PTR [esp],eax
c0004074:	eb 17                	jmp    c000408d <dir_find+0x1bb>
c0004076:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000407d:	eb 0e                	jmp    c000408d <dir_find+0x1bb>
c000407f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004082:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004087:	0f 85 75 fe ff ff    	jne    c0003f02 <dir_find+0x30>
c000408d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004090:	83 c4 1c             	add    esp,0x1c
c0004093:	5b                   	pop    ebx
c0004094:	5e                   	pop    esi
c0004095:	5f                   	pop    edi
c0004096:	5d                   	pop    ebp
c0004097:	c3                   	ret    

c0004098 <dir_register>:
c0004098:	55                   	push   ebp
c0004099:	57                   	push   edi
c000409a:	56                   	push   esi
c000409b:	be 06 00 00 00       	mov    esi,0x6
c00040a0:	53                   	push   ebx
c00040a1:	83 ec 6c             	sub    esp,0x6c
c00040a4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040a8:	0f 85 62 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ae:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040b0:	31 ff                	xor    edi,edi
c00040b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040b5:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040ba:	74 03                	je     c00040bf <dir_register+0x27>
c00040bc:	47                   	inc    edi
c00040bd:	eb f6                	jmp    c00040b5 <dir_register+0x1d>
c00040bf:	89 c3                	mov    ebx,eax
c00040c1:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040c5:	0f 85 e1 00 00 00    	jne    c00041ac <dir_register+0x114>
c00040cb:	83 c7 0e             	add    edi,0xe
c00040ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00040d3:	89 f8                	mov    eax,edi
c00040d5:	31 d2                	xor    edx,edx
c00040d7:	f7 f1                	div    ecx
c00040d9:	8d 50 02             	lea    edx,[eax+0x2]
c00040dc:	89 c7                	mov    edi,eax
c00040de:	89 d8                	mov    eax,ebx
c00040e0:	e8 12 f8 ff ff       	call   c00038f7 <dir_alloc>
c00040e5:	89 c6                	mov    esi,eax
c00040e7:	85 c0                	test   eax,eax
c00040e9:	0f 85 21 02 00 00    	jne    c0004310 <dir_register+0x278>
c00040ef:	81 c7 01 00 00 08    	add    edi,0x8000001
c00040f5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00040f8:	c1 e7 05             	shl    edi,0x5
c00040fb:	29 f8                	sub    eax,edi
c00040fd:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004100:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004103:	a8 04                	test   al,0x4
c0004105:	0f 84 91 00 00 00    	je     c000419c <dir_register+0x104>
c000410b:	83 e0 fb             	and    eax,0xfffffffb
c000410e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004111:	89 d8                	mov    eax,ebx
c0004113:	e8 25 ec ff ff       	call   c0002d3d <fill_first_frag>
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 ee 01 00 00    	jne    c000430e <dir_register+0x276>
c0004120:	83 c9 ff             	or     ecx,0xffffffff
c0004123:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004126:	89 d8                	mov    eax,ebx
c0004128:	e8 db eb ff ff       	call   c0002d08 <fill_last_frag>
c000412d:	85 c0                	test   eax,eax
c000412f:	0f 85 d9 01 00 00    	jne    c000430e <dir_register+0x276>
c0004135:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004139:	74 61                	je     c000419c <dir_register+0x104>
c000413b:	89 da                	mov    edx,ebx
c000413d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004141:	e8 ea f5 ff ff       	call   c0003730 <load_obj_xdir>
c0004146:	85 c0                	test   eax,eax
c0004148:	0f 85 c0 01 00 00    	jne    c000430e <dir_register+0x276>
c000414e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004152:	31 c9                	xor    ecx,ecx
c0004154:	c1 e2 09             	shl    edx,0x9
c0004157:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000415a:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000415d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004160:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004163:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004166:	83 c0 38             	add    eax,0x38
c0004169:	e8 1c d9 ff ff       	call   c0001a8a <st_qword>
c000416e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004171:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004174:	83 c0 28             	add    eax,0x28
c0004177:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000417a:	e8 0b d9 ff ff       	call   c0001a8a <st_qword>
c000417f:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004182:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004185:	83 c8 01             	or     eax,0x1
c0004188:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c000418b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000418f:	e8 db f7 ff ff       	call   c000396f <store_xdir>
c0004194:	85 c0                	test   eax,eax
c0004196:	0f 85 72 01 00 00    	jne    c000430e <dir_register+0x276>
c000419c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000419f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041a2:	e8 c1 fb ff ff       	call   c0003d68 <create_xdir>
c00041a7:	e9 64 01 00 00       	jmp    c0004310 <dir_register+0x278>
c00041ac:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041af:	b9 0c 00 00 00       	mov    ecx,0xc
c00041b4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041b8:	89 c2                	mov    edx,eax
c00041ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041be:	e8 cd d8 ff ff       	call   c0001a90 <mem_cpy>
c00041c3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041c8:	74 58                	je     c0004222 <dir_register+0x18a>
c00041ca:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041ce:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041d6:	83 ec 0c             	sub    esp,0xc
c00041d9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041e0:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041e8:	e8 24 dc ff ff       	call   c0001e11 <gen_numname>
c00041ed:	89 d8                	mov    eax,ebx
c00041ef:	e8 de fc ff ff       	call   c0003ed2 <dir_find>
c00041f4:	83 c4 10             	add    esp,0x10
c00041f7:	89 c6                	mov    esi,eax
c00041f9:	85 c0                	test   eax,eax
c00041fb:	75 15                	jne    c0004212 <dir_register+0x17a>
c00041fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004201:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004206:	75 ce                	jne    c00041d6 <dir_register+0x13e>
c0004208:	be 07 00 00 00       	mov    esi,0x7
c000420d:	e9 fe 00 00 00       	jmp    c0004310 <dir_register+0x278>
c0004212:	83 f8 04             	cmp    eax,0x4
c0004215:	0f 85 f5 00 00 00    	jne    c0004310 <dir_register+0x278>
c000421b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000421f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004222:	b9 01 00 00 00       	mov    ecx,0x1
c0004227:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000422c:	74 0f                	je     c000423d <dir_register+0x1a5>
c000422e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004233:	8d 47 0c             	lea    eax,[edi+0xc]
c0004236:	31 d2                	xor    edx,edx
c0004238:	f7 f1                	div    ecx
c000423a:	8d 48 01             	lea    ecx,[eax+0x1]
c000423d:	89 ca                	mov    edx,ecx
c000423f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004243:	89 d8                	mov    eax,ebx
c0004245:	e8 ad f6 ff ff       	call   c00038f7 <dir_alloc>
c000424a:	89 c6                	mov    esi,eax
c000424c:	85 c0                	test   eax,eax
c000424e:	0f 85 bc 00 00 00    	jne    c0004310 <dir_register+0x278>
c0004254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004258:	49                   	dec    ecx
c0004259:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425d:	74 6a                	je     c00042c9 <dir_register+0x231>
c000425f:	89 c8                	mov    eax,ecx
c0004261:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004264:	c1 e0 05             	shl    eax,0x5
c0004267:	29 c2                	sub    edx,eax
c0004269:	89 d8                	mov    eax,ebx
c000426b:	e8 fd ec ff ff       	call   c0002f6d <dir_sdi>
c0004270:	89 c6                	mov    esi,eax
c0004272:	85 c0                	test   eax,eax
c0004274:	0f 85 96 00 00 00    	jne    c0004310 <dir_register+0x278>
c000427a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000427e:	e8 4a dc ff ff       	call   c0001ecd <sum_sfn>
c0004283:	0f b6 f8             	movzx  edi,al
c0004286:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004289:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000428c:	89 e8                	mov    eax,ebp
c000428e:	e8 5c df ff ff       	call   c00021ef <move_window>
c0004293:	89 c6                	mov    esi,eax
c0004295:	85 c0                	test   eax,eax
c0004297:	75 77                	jne    c0004310 <dir_register+0x278>
c0004299:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000429e:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042a1:	83 ec 0c             	sub    esp,0xc
c00042a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042a7:	57                   	push   edi
c00042a8:	e8 e0 da ff ff       	call   c0001d8d <put_lfn>
c00042ad:	31 d2                	xor    edx,edx
c00042af:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042b3:	89 d8                	mov    eax,ebx
c00042b5:	e8 0b f2 ff ff       	call   c00034c5 <dir_next>
c00042ba:	83 c4 10             	add    esp,0x10
c00042bd:	89 c6                	mov    esi,eax
c00042bf:	85 c0                	test   eax,eax
c00042c1:	75 4d                	jne    c0004310 <dir_register+0x278>
c00042c3:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00042c7:	75 bd                	jne    c0004286 <dir_register+0x1ee>
c00042c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042cc:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042cf:	89 e8                	mov    eax,ebp
c00042d1:	e8 19 df ff ff       	call   c00021ef <move_window>
c00042d6:	89 c6                	mov    esi,eax
c00042d8:	85 c0                	test   eax,eax
c00042da:	75 34                	jne    c0004310 <dir_register+0x278>
c00042dc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042df:	b9 20 00 00 00       	mov    ecx,0x20
c00042e4:	31 d2                	xor    edx,edx
c00042e6:	e8 ba d7 ff ff       	call   c0001aa5 <mem_set>
c00042eb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00042f2:	b9 0b 00 00 00       	mov    ecx,0xb
c00042f7:	e8 94 d7 ff ff       	call   c0001a90 <mem_cpy>
c00042fc:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c00042ff:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004302:	83 e0 18             	and    eax,0x18
c0004305:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004308:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000430c:	eb 02                	jmp    c0004310 <dir_register+0x278>
c000430e:	89 c6                	mov    esi,eax
c0004310:	83 c4 6c             	add    esp,0x6c
c0004313:	89 f0                	mov    eax,esi
c0004315:	5b                   	pop    ebx
c0004316:	5e                   	pop    esi
c0004317:	5f                   	pop    edi
c0004318:	5d                   	pop    ebp
c0004319:	c3                   	ret    

c000431a <sync_fs>:
c000431a:	56                   	push   esi
c000431b:	53                   	push   ebx
c000431c:	53                   	push   ebx
c000431d:	89 c3                	mov    ebx,eax
c000431f:	e8 37 de ff ff       	call   c000215b <sync_window>
c0004324:	85 c0                	test   eax,eax
c0004326:	0f 85 b1 00 00 00    	jne    c00043dd <sync_fs+0xc3>
c000432c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000432f:	0f 85 8e 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c0004335:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004339:	0f 85 84 00 00 00    	jne    c00043c3 <sync_fs+0xa9>
c000433f:	b9 00 02 00 00       	mov    ecx,0x200
c0004344:	8d 73 54             	lea    esi,[ebx+0x54]
c0004347:	31 d2                	xor    edx,edx
c0004349:	89 f0                	mov    eax,esi
c000434b:	e8 55 d7 ff ff       	call   c0001aa5 <mem_set>
c0004350:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004356:	ba 55 aa 00 00       	mov    edx,0xaa55
c000435b:	e8 23 d7 ff ff       	call   c0001a83 <st_word>
c0004360:	ba 52 52 61 41       	mov    edx,0x41615252
c0004365:	89 f0                	mov    eax,esi
c0004367:	e8 1b d7 ff ff       	call   c0001a87 <st_dword>
c000436c:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004372:	ba 72 72 41 61       	mov    edx,0x61417272
c0004377:	e8 0b d7 ff ff       	call   c0001a87 <st_dword>
c000437c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000437f:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004385:	e8 fd d6 ff ff       	call   c0001a87 <st_dword>
c000438a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000438d:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004393:	e8 ef d6 ff ff       	call   c0001a87 <st_dword>
c0004398:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000439b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000439e:	83 c0 01             	add    eax,0x1
c00043a1:	83 d2 00             	adc    edx,0x0
c00043a4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043a7:	83 ec 0c             	sub    esp,0xc
c00043aa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043ad:	6a 01                	push   0x1
c00043af:	52                   	push   edx
c00043b0:	50                   	push   eax
c00043b1:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043b5:	56                   	push   esi
c00043b6:	50                   	push   eax
c00043b7:	e8 20 d6 ff ff       	call   c00019dc <disk_write>
c00043bc:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043c0:	83 c4 20             	add    esp,0x20
c00043c3:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043c7:	51                   	push   ecx
c00043c8:	6a 00                	push   0x0
c00043ca:	6a 00                	push   0x0
c00043cc:	50                   	push   eax
c00043cd:	e8 20 d6 ff ff       	call   c00019f2 <disk_ioctl>
c00043d2:	83 c4 10             	add    esp,0x10
c00043d5:	85 c0                	test   eax,eax
c00043d7:	0f 95 c0             	setne  al
c00043da:	0f b6 c0             	movzx  eax,al
c00043dd:	5a                   	pop    edx
c00043de:	5b                   	pop    ebx
c00043df:	5e                   	pop    esi
c00043e0:	c3                   	ret    

c00043e1 <create_partition>:
c00043e1:	55                   	push   ebp
c00043e2:	0f b6 c0             	movzx  eax,al
c00043e5:	57                   	push   edi
c00043e6:	56                   	push   esi
c00043e7:	53                   	push   ebx
c00043e8:	83 ec 60             	sub    esp,0x60
c00043eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043ef:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00043f3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00043f7:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00043fb:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c00043ff:	50                   	push   eax
c0004400:	6a 01                	push   0x1
c0004402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004406:	e8 e7 d5 ff ff       	call   c00019f2 <disk_ioctl>
c000440b:	83 c4 10             	add    esp,0x10
c000440e:	85 c0                	test   eax,eax
c0004410:	74 0a                	je     c000441c <create_partition+0x3b>
c0004412:	b8 01 00 00 00       	mov    eax,0x1
c0004417:	e9 67 05 00 00       	jmp    c0004983 <create_partition+0x5a2>
c000441c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004420:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004424:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004428:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000442c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004431:	0f 86 ed 03 00 00    	jbe    c0004824 <create_partition+0x443>
c0004437:	83 c0 df             	add    eax,0xffffffdf
c000443a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004442:	83 d2 ff             	adc    edx,0xffffffff
c0004445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004449:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000444d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004451:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004455:	83 c0 bd             	add    eax,0xffffffbd
c0004458:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000445f:	83 d2 ff             	adc    edx,0xffffffff
c0004462:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004466:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000446a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004472:	be 22 00 00 00       	mov    esi,0x22
c0004477:	31 ff                	xor    edi,edi
c0004479:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004481:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004489:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0004491:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004495:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000449b:	75 0e                	jne    c00044ab <create_partition+0xca>
c000449d:	b9 00 02 00 00       	mov    ecx,0x200
c00044a2:	31 d2                	xor    edx,edx
c00044a4:	89 d8                	mov    eax,ebx
c00044a6:	e8 fa d5 ff ff       	call   c0001aa5 <mem_set>
c00044ab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044b7:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044ba:	0f 84 23 01 00 00    	je     c00045e3 <create_partition+0x202>
c00044c0:	89 f0                	mov    eax,esi
c00044c2:	89 fa                	mov    edx,edi
c00044c4:	05 ff 07 00 00       	add    eax,0x7ff
c00044c9:	83 d2 00             	adc    edx,0x0
c00044cc:	89 c1                	mov    ecx,eax
c00044ce:	89 d7                	mov    edi,edx
c00044d0:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044da:	89 ce                	mov    esi,ecx
c00044dc:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044e0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044e4:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044e8:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00044eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00044f2:	b8 64 00 00 00       	mov    eax,0x64
c00044f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00044fa:	b8 00 00 00 00       	mov    eax,0x0
c00044ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004503:	72 41                	jb     c0004546 <create_partition+0x165>
c0004505:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004509:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004511:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004516:	01 c1                	add    ecx,eax
c0004518:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000451c:	f7 24 24             	mul    DWORD PTR [esp]
c000451f:	6a 00                	push   0x0
c0004521:	01 ca                	add    edx,ecx
c0004523:	6a 64                	push   0x64
c0004525:	52                   	push   edx
c0004526:	50                   	push   eax
c0004527:	e8 c0 0e 02 00       	call   c00253ec <__udivdi3>
c000452c:	83 c4 10             	add    esp,0x10
c000452f:	05 ff 07 00 00       	add    eax,0x7ff
c0004534:	83 d2 00             	adc    edx,0x0
c0004537:	89 c1                	mov    ecx,eax
c0004539:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000453d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004543:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004546:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000454d:	01 f0                	add    eax,esi
c000454f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004553:	11 fa                	adc    edx,edi
c0004555:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004559:	19 d1                	sbb    ecx,edx
c000455b:	73 2e                	jae    c000458b <create_partition+0x1aa>
c000455d:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004561:	89 f8                	mov    eax,edi
c0004563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000456a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000456e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004576:	73 6b                	jae    c00045e3 <create_partition+0x202>
c0004578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000457c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004580:	29 f0                	sub    eax,esi
c0004582:	19 fa                	sbb    edx,edi
c0004584:	89 04 24             	mov    DWORD PTR [esp],eax
c0004587:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000458b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000458f:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004592:	74 4f                	je     c00045e3 <create_partition+0x202>
c0004594:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004597:	b9 10 00 00 00       	mov    ecx,0x10
c000459c:	ba 30 7e 02 c0       	mov    edx,0xc0027e30
c00045a1:	e8 ea d4 ff ff       	call   c0001a90 <mem_cpy>
c00045a6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045aa:	b9 10 00 00 00       	mov    ecx,0x10
c00045af:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045b3:	e8 2c db ff ff       	call   c00020e4 <make_rand>
c00045b8:	89 f2                	mov    edx,esi
c00045ba:	89 f9                	mov    ecx,edi
c00045bc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045c0:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045c4:	e8 c1 d4 ff ff       	call   c0001a8a <st_qword>
c00045c9:	03 34 24             	add    esi,DWORD PTR [esp]
c00045cc:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045d0:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045d4:	89 f2                	mov    edx,esi
c00045d6:	89 f9                	mov    ecx,edi
c00045d8:	83 c2 ff             	add    edx,0xffffffff
c00045db:	83 d1 ff             	adc    ecx,0xffffffff
c00045de:	e8 a7 d4 ff ff       	call   c0001a8a <st_qword>
c00045e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045e7:	83 e8 80             	sub    eax,0xffffff80
c00045ea:	89 c5                	mov    ebp,eax
c00045ec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f0:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045f6:	75 6b                	jne    c0004663 <create_partition+0x282>
c00045f8:	45                   	inc    ebp
c00045f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045fd:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004602:	e8 39 da ff ff       	call   c0002040 <crc32>
c0004607:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000460d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004611:	75 e5                	jne    c00045f8 <create_partition+0x217>
c0004613:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004617:	31 d2                	xor    edx,edx
c0004619:	83 ec 0c             	sub    esp,0xc
c000461c:	c1 ed 09             	shr    ebp,0x9
c000461f:	6a 01                	push   0x1
c0004621:	8d 45 02             	lea    eax,[ebp+0x2]
c0004624:	52                   	push   edx
c0004625:	50                   	push   eax
c0004626:	53                   	push   ebx
c0004627:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000462b:	e8 ac d3 ff ff       	call   c00019dc <disk_write>
c0004630:	83 c4 20             	add    esp,0x20
c0004633:	85 c0                	test   eax,eax
c0004635:	0f 85 d7 fd ff ff    	jne    c0004412 <create_partition+0x31>
c000463b:	83 ec 0c             	sub    esp,0xc
c000463e:	31 d2                	xor    edx,edx
c0004640:	6a 01                	push   0x1
c0004642:	89 e8                	mov    eax,ebp
c0004644:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004648:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000464c:	52                   	push   edx
c000464d:	50                   	push   eax
c000464e:	53                   	push   ebx
c000464f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004653:	e8 84 d3 ff ff       	call   c00019dc <disk_write>
c0004658:	83 c4 20             	add    esp,0x20
c000465b:	85 c0                	test   eax,eax
c000465d:	0f 85 af fd ff ff    	jne    c0004412 <create_partition+0x31>
c0004663:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004667:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000466b:	3d 00 40 00 00       	cmp    eax,0x4000
c0004670:	74 0d                	je     c000467f <create_partition+0x29e>
c0004672:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004676:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000467a:	e9 12 fe ff ff       	jmp    c0004491 <create_partition+0xb0>
c000467f:	31 d2                	xor    edx,edx
c0004681:	b9 00 02 00 00       	mov    ecx,0x200
c0004686:	89 d8                	mov    eax,ebx
c0004688:	8d 6b 20             	lea    ebp,[ebx+0x20]
c000468b:	e8 15 d4 ff ff       	call   c0001aa5 <mem_set>
c0004690:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004693:	b9 10 00 00 00       	mov    ecx,0x10
c0004698:	ba 20 7d 02 c0       	mov    edx,0xc0027d20
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 ec d3 ff ff       	call   c0001a90 <mem_cpy>
c00046a4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046a8:	8d 43 58             	lea    eax,[ebx+0x58]
c00046ab:	f7 d2                	not    edx
c00046ad:	e8 d5 d3 ff ff       	call   c0001a87 <st_dword>
c00046b2:	8d 43 18             	lea    eax,[ebx+0x18]
c00046b5:	31 c9                	xor    ecx,ecx
c00046b7:	89 04 24             	mov    DWORD PTR [esp],eax
c00046ba:	ba 01 00 00 00       	mov    edx,0x1
c00046bf:	e8 c6 d3 ff ff       	call   c0001a8a <st_qword>
c00046c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046c8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046cc:	83 c2 ff             	add    edx,0xffffffff
c00046cf:	89 e8                	mov    eax,ebp
c00046d1:	83 d1 ff             	adc    ecx,0xffffffff
c00046d4:	e8 b1 d3 ff ff       	call   c0001a8a <st_qword>
c00046d9:	31 c9                	xor    ecx,ecx
c00046db:	8d 43 28             	lea    eax,[ebx+0x28]
c00046de:	ba 22 00 00 00       	mov    edx,0x22
c00046e3:	e8 a2 d3 ff ff       	call   c0001a8a <st_qword>
c00046e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00046ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00046f0:	83 c2 de             	add    edx,0xffffffde
c00046f3:	8d 43 30             	lea    eax,[ebx+0x30]
c00046f6:	83 d1 ff             	adc    ecx,0xffffffff
c00046f9:	31 f6                	xor    esi,esi
c00046fb:	e8 8a d3 ff ff       	call   c0001a8a <st_qword>
c0004700:	8d 43 54             	lea    eax,[ebx+0x54]
c0004703:	ba 80 00 00 00       	mov    edx,0x80
c0004708:	e8 7a d3 ff ff       	call   c0001a87 <st_dword>
c000470d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004710:	ba 80 00 00 00       	mov    edx,0x80
c0004715:	e8 6d d3 ff ff       	call   c0001a87 <st_dword>
c000471a:	ba 02 00 00 00       	mov    edx,0x2
c000471f:	89 f8                	mov    eax,edi
c0004721:	e8 61 d3 ff ff       	call   c0001a87 <st_dword>
c0004726:	8d 53 38             	lea    edx,[ebx+0x38]
c0004729:	b9 10 00 00 00       	mov    ecx,0x10
c000472e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004732:	e8 ad d9 ff ff       	call   c00020e4 <make_rand>
c0004737:	83 c8 ff             	or     eax,0xffffffff
c000473a:	46                   	inc    esi
c000473b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004740:	e8 fb d8 ff ff       	call   c0002040 <crc32>
c0004745:	83 fe 5c             	cmp    esi,0x5c
c0004748:	75 f0                	jne    c000473a <create_partition+0x359>
c000474a:	f7 d0                	not    eax
c000474c:	8d 73 10             	lea    esi,[ebx+0x10]
c000474f:	89 c2                	mov    edx,eax
c0004751:	89 f0                	mov    eax,esi
c0004753:	e8 2f d3 ff ff       	call   c0001a87 <st_dword>
c0004758:	83 ec 0c             	sub    esp,0xc
c000475b:	6a 01                	push   0x1
c000475d:	6a 00                	push   0x0
c000475f:	6a 01                	push   0x1
c0004761:	53                   	push   ebx
c0004762:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004766:	e8 71 d2 ff ff       	call   c00019dc <disk_write>
c000476b:	83 c4 20             	add    esp,0x20
c000476e:	85 c0                	test   eax,eax
c0004770:	0f 85 9c fc ff ff    	jne    c0004412 <create_partition+0x31>
c0004776:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000477a:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000477e:	83 c2 ff             	add    edx,0xffffffff
c0004781:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004784:	83 d1 ff             	adc    ecx,0xffffffff
c0004787:	e8 fe d2 ff ff       	call   c0001a8a <st_qword>
c000478c:	ba 01 00 00 00       	mov    edx,0x1
c0004791:	31 c9                	xor    ecx,ecx
c0004793:	89 e8                	mov    eax,ebp
c0004795:	e8 f0 d2 ff ff       	call   c0001a8a <st_qword>
c000479a:	89 f8                	mov    eax,edi
c000479c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047a0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a4:	31 ff                	xor    edi,edi
c00047a6:	e8 df d2 ff ff       	call   c0001a8a <st_qword>
c00047ab:	89 f0                	mov    eax,esi
c00047ad:	31 d2                	xor    edx,edx
c00047af:	e8 d3 d2 ff ff       	call   c0001a87 <st_dword>
c00047b4:	83 c8 ff             	or     eax,0xffffffff
c00047b7:	47                   	inc    edi
c00047b8:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047bd:	e8 7e d8 ff ff       	call   c0002040 <crc32>
c00047c2:	83 ff 5c             	cmp    edi,0x5c
c00047c5:	75 f0                	jne    c00047b7 <create_partition+0x3d6>
c00047c7:	f7 d0                	not    eax
c00047c9:	89 c2                	mov    edx,eax
c00047cb:	89 f0                	mov    eax,esi
c00047cd:	e8 b5 d2 ff ff       	call   c0001a87 <st_dword>
c00047d2:	83 ec 0c             	sub    esp,0xc
c00047d5:	6a 01                	push   0x1
c00047d7:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047db:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047df:	83 c0 ff             	add    eax,0xffffffff
c00047e2:	83 d2 ff             	adc    edx,0xffffffff
c00047e5:	52                   	push   edx
c00047e6:	50                   	push   eax
c00047e7:	53                   	push   ebx
c00047e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00047ec:	e8 eb d1 ff ff       	call   c00019dc <disk_write>
c00047f1:	83 c4 20             	add    esp,0x20
c00047f4:	85 c0                	test   eax,eax
c00047f6:	0f 85 16 fc ff ff    	jne    c0004412 <create_partition+0x31>
c00047fc:	31 d2                	xor    edx,edx
c00047fe:	89 d8                	mov    eax,ebx
c0004800:	b9 00 02 00 00       	mov    ecx,0x200
c0004805:	e8 9b d2 ff ff       	call   c0001aa5 <mem_set>
c000480a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004810:	b9 10 00 00 00       	mov    ecx,0x10
c0004815:	ba 30 7d 02 c0       	mov    edx,0xc0027d30
c000481a:	e8 71 d2 ff ff       	call   c0001a90 <mem_cpy>
c000481f:	e9 21 01 00 00       	jmp    c0004945 <create_partition+0x564>
c0004824:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004828:	b9 05 00 00 00       	mov    ecx,0x5
c000482d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004830:	bf 08 00 00 00       	mov    edi,0x8
c0004835:	89 f8                	mov    eax,edi
c0004837:	31 d2                	xor    edx,edx
c0004839:	0f b6 f0             	movzx  esi,al
c000483c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000483f:	f7 f6                	div    esi
c0004841:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004846:	76 0a                	jbe    c0004852 <create_partition+0x471>
c0004848:	d1 e7                	shl    edi,1
c000484a:	49                   	dec    ecx
c000484b:	75 e8                	jne    c0004835 <create_partition+0x454>
c000484d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004852:	b9 00 02 00 00       	mov    ecx,0x200
c0004857:	31 d2                	xor    edx,edx
c0004859:	89 d8                	mov    eax,ebx
c000485b:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004861:	e8 3f d2 ff ff       	call   c0001aa5 <mem_set>
c0004866:	b9 64 00 00 00       	mov    ecx,0x64
c000486b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000486e:	31 d2                	xor    edx,edx
c0004870:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004878:	f7 f1                	div    ecx
c000487a:	b9 3f 00 00 00       	mov    ecx,0x3f
c000487f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004883:	89 f8                	mov    eax,edi
c0004885:	0f b6 c0             	movzx  eax,al
c0004888:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000488c:	e9 80 00 00 00       	jmp    c0004911 <create_partition+0x530>
c0004891:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004894:	29 cf                	sub    edi,ecx
c0004896:	89 ca                	mov    edx,ecx
c0004898:	89 f0                	mov    eax,esi
c000489a:	bd 3f 00 00 00       	mov    ebp,0x3f
c000489f:	e8 e3 d1 ff ff       	call   c0001a87 <st_dword>
c00048a4:	8d 46 04             	lea    eax,[esi+0x4]
c00048a7:	89 fa                	mov    edx,edi
c00048a9:	83 c6 10             	add    esi,0x10
c00048ac:	e8 d6 d1 ff ff       	call   c0001a87 <st_dword>
c00048b1:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00048b5:	31 d2                	xor    edx,edx
c00048b7:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c00048ba:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c00048be:	89 c8                	mov    eax,ecx
c00048c0:	01 f9                	add    ecx,edi
c00048c2:	f7 f5                	div    ebp
c00048c4:	89 d5                	mov    ebp,edx
c00048c6:	31 d2                	xor    edx,edx
c00048c8:	45                   	inc    ebp
c00048c9:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048cd:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c00048d0:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c00048d3:	89 c2                	mov    edx,eax
c00048d5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00048d8:	c1 ea 02             	shr    edx,0x2
c00048db:	83 e2 c0             	and    edx,0xffffffc0
c00048de:	09 ea                	or     edx,ebp
c00048e0:	bd 3f 00 00 00       	mov    ebp,0x3f
c00048e5:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c00048e8:	31 d2                	xor    edx,edx
c00048ea:	f7 f5                	div    ebp
c00048ec:	89 d7                	mov    edi,edx
c00048ee:	31 d2                	xor    edx,edx
c00048f0:	47                   	inc    edi
c00048f1:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c00048f5:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c00048f8:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c00048fb:	89 c5                	mov    ebp,eax
c00048fd:	c1 ed 02             	shr    ebp,0x2
c0004900:	83 e5 c0             	and    ebp,0xffffffc0
c0004903:	09 ef                	or     edi,ebp
c0004905:	89 fa                	mov    edx,edi
c0004907:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c000490a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000490f:	74 34                	je     c0004945 <create_partition+0x564>
c0004911:	85 c9                	test   ecx,ecx
c0004913:	74 30                	je     c0004945 <create_partition+0x564>
c0004915:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004918:	76 2b                	jbe    c0004945 <create_partition+0x564>
c000491a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000491e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004922:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004925:	83 ff 64             	cmp    edi,0x64
c0004928:	76 4b                	jbe    c0004975 <create_partition+0x594>
c000492a:	89 f8                	mov    eax,edi
c000492c:	01 c8                	add    eax,ecx
c000492e:	0f 82 5d ff ff ff    	jb     c0004891 <create_partition+0x4b0>
c0004934:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004937:	0f 87 54 ff ff ff    	ja     c0004891 <create_partition+0x4b0>
c000493d:	85 ff                	test   edi,edi
c000493f:	0f 85 51 ff ff ff    	jne    c0004896 <create_partition+0x4b5>
c0004945:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000494b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004950:	e8 2e d1 ff ff       	call   c0001a83 <st_word>
c0004955:	83 ec 0c             	sub    esp,0xc
c0004958:	6a 01                	push   0x1
c000495a:	6a 00                	push   0x0
c000495c:	6a 00                	push   0x0
c000495e:	53                   	push   ebx
c000495f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004963:	e8 74 d0 ff ff       	call   c00019dc <disk_write>
c0004968:	83 c4 20             	add    esp,0x20
c000496b:	85 c0                	test   eax,eax
c000496d:	0f 95 c0             	setne  al
c0004970:	0f b6 c0             	movzx  eax,al
c0004973:	eb 0e                	jmp    c0004983 <create_partition+0x5a2>
c0004975:	74 07                	je     c000497e <create_partition+0x59d>
c0004977:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c000497c:	eb ac                	jmp    c000492a <create_partition+0x549>
c000497e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004981:	eb a7                	jmp    c000492a <create_partition+0x549>
c0004983:	83 c4 5c             	add    esp,0x5c
c0004986:	5b                   	pop    ebx
c0004987:	5e                   	pop    esi
c0004988:	5f                   	pop    edi
c0004989:	5d                   	pop    ebp
c000498a:	c3                   	ret    

c000498b <get_fileinfo>:
c000498b:	55                   	push   ebp
c000498c:	57                   	push   edi
c000498d:	56                   	push   esi
c000498e:	53                   	push   ebx
c000498f:	83 ec 1c             	sub    esp,0x1c
c0004992:	8b 30                	mov    esi,DWORD PTR [eax]
c0004994:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004998:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000499c:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000499f:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049a2:	0f 84 dc 01 00 00    	je     c0004b84 <get_fileinfo+0x1f9>
c00049a8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ab:	75 0f                	jne    c00049bc <get_fileinfo+0x31>
c00049ad:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049b0:	83 c4 1c             	add    esp,0x1c
c00049b3:	5b                   	pop    ebx
c00049b4:	5e                   	pop    esi
c00049b5:	5f                   	pop    edi
c00049b6:	5d                   	pop    ebp
c00049b7:	e9 58 d5 ff ff       	jmp    c0001f14 <get_xfileinfo>
c00049bc:	89 d3                	mov    ebx,edx
c00049be:	89 c6                	mov    esi,eax
c00049c0:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049c4:	74 6a                	je     c0004a30 <get_fileinfo+0xa5>
c00049c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049ce:	31 ed                	xor    ebp,ebp
c00049d0:	31 ff                	xor    edi,edi
c00049d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049d6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049da:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00049dd:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c00049e1:	66 85 d2             	test   dx,dx
c00049e4:	74 3e                	je     c0004a24 <get_fileinfo+0x99>
c00049e6:	66 85 ed             	test   bp,bp
c00049e9:	75 0c                	jne    c00049f7 <get_fileinfo+0x6c>
c00049eb:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c00049f1:	66 3d ff 07          	cmp    ax,0x7ff
c00049f5:	76 22                	jbe    c0004a19 <get_fileinfo+0x8e>
c00049f7:	b9 ff 00 00 00       	mov    ecx,0xff
c00049fc:	89 e8                	mov    eax,ebp
c00049fe:	29 f9                	sub    ecx,edi
c0004a00:	c1 e0 10             	shl    eax,0x10
c0004a03:	09 d0                	or     eax,edx
c0004a05:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a09:	e8 a3 d1 ff ff       	call   c0001bb1 <put_utf>
c0004a0e:	84 c0                	test   al,al
c0004a10:	74 10                	je     c0004a22 <get_fileinfo+0x97>
c0004a12:	0f b6 c0             	movzx  eax,al
c0004a15:	31 d2                	xor    edx,edx
c0004a17:	01 c7                	add    edi,eax
c0004a19:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a1e:	89 d5                	mov    ebp,edx
c0004a20:	eb b0                	jmp    c00049d2 <get_fileinfo+0x47>
c0004a22:	31 ff                	xor    edi,edi
c0004a24:	66 85 ed             	test   bp,bp
c0004a27:	74 02                	je     c0004a2b <get_fileinfo+0xa0>
c0004a29:	31 ff                	xor    edi,edi
c0004a2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a30:	31 ff                	xor    edi,edi
c0004a32:	31 c9                	xor    ecx,ecx
c0004a34:	83 f9 0a             	cmp    ecx,0xa
c0004a37:	0f 87 ad 00 00 00    	ja     c0004aea <get_fileinfo+0x15f>
c0004a3d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a43:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a47:	66 83 fa 20          	cmp    dx,0x20
c0004a4b:	0f 84 92 00 00 00    	je     c0004ae3 <get_fileinfo+0x158>
c0004a51:	66 83 fa 05          	cmp    dx,0x5
c0004a55:	75 05                	jne    c0004a5c <get_fileinfo+0xd1>
c0004a57:	ba e5 00 00 00       	mov    edx,0xe5
c0004a5c:	83 ff 0b             	cmp    edi,0xb
c0004a5f:	77 0b                	ja     c0004a6c <get_fileinfo+0xe1>
c0004a61:	83 fd 09             	cmp    ebp,0x9
c0004a64:	75 06                	jne    c0004a6c <get_fileinfo+0xe1>
c0004a66:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a6b:	47                   	inc    edi
c0004a6c:	0f b7 c2             	movzx  eax,dx
c0004a6f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a73:	e8 6d d0 ff ff       	call   c0001ae5 <dbc_1st>
c0004a78:	85 c0                	test   eax,eax
c0004a7a:	74 2f                	je     c0004aab <get_fileinfo+0x120>
c0004a7c:	83 fd 08             	cmp    ebp,0x8
c0004a7f:	74 2a                	je     c0004aab <get_fileinfo+0x120>
c0004a81:	83 fd 0b             	cmp    ebp,0xb
c0004a84:	74 25                	je     c0004aab <get_fileinfo+0x120>
c0004a86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a89:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a8d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a91:	e8 52 d0 ff ff       	call   c0001ae8 <dbc_2nd>
c0004a96:	85 c0                	test   eax,eax
c0004a98:	74 11                	je     c0004aab <get_fileinfo+0x120>
c0004a9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a9e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004aa3:	c1 e2 08             	shl    edx,0x8
c0004aa6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004aa9:	09 c2                	or     edx,eax
c0004aab:	0f b7 d2             	movzx  edx,dx
c0004aae:	50                   	push   eax
c0004aaf:	50                   	push   eax
c0004ab0:	68 b5 01 00 00       	push   0x1b5
c0004ab5:	52                   	push   edx
c0004ab6:	e8 46 38 00 00       	call   c0008301 <ff_oem2uni>
c0004abb:	83 c4 10             	add    esp,0x10
c0004abe:	66 85 c0             	test   ax,ax
c0004ac1:	75 04                	jne    c0004ac7 <get_fileinfo+0x13c>
c0004ac3:	31 ff                	xor    edi,edi
c0004ac5:	eb 23                	jmp    c0004aea <get_fileinfo+0x15f>
c0004ac7:	b9 0c 00 00 00       	mov    ecx,0xc
c0004acc:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004ad0:	29 f9                	sub    ecx,edi
c0004ad2:	0f b7 c0             	movzx  eax,ax
c0004ad5:	e8 d7 d0 ff ff       	call   c0001bb1 <put_utf>
c0004ada:	84 c0                	test   al,al
c0004adc:	74 e5                	je     c0004ac3 <get_fileinfo+0x138>
c0004ade:	0f b6 c0             	movzx  eax,al
c0004ae1:	01 c7                	add    edi,eax
c0004ae3:	89 e9                	mov    ecx,ebp
c0004ae5:	e9 4a ff ff ff       	jmp    c0004a34 <get_fileinfo+0xa9>
c0004aea:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004aef:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004af3:	75 54                	jne    c0004b49 <get_fileinfo+0x1be>
c0004af5:	85 ff                	test   edi,edi
c0004af7:	75 0b                	jne    c0004b04 <get_fileinfo+0x179>
c0004af9:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004afd:	ba 01 00 00 00       	mov    edx,0x1
c0004b02:	eb 33                	jmp    c0004b37 <get_fileinfo+0x1ac>
c0004b04:	b1 08                	mov    cl,0x8
c0004b06:	31 d2                	xor    edx,edx
c0004b08:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b0e:	84 c0                	test   al,al
c0004b10:	74 25                	je     c0004b37 <get_fileinfo+0x1ac>
c0004b12:	66 83 f8 2e          	cmp    ax,0x2e
c0004b16:	74 16                	je     c0004b2e <get_fileinfo+0x1a3>
c0004b18:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b1b:	66 83 ff 19          	cmp    di,0x19
c0004b1f:	77 0f                	ja     c0004b30 <get_fileinfo+0x1a5>
c0004b21:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b24:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b27:	74 07                	je     c0004b30 <get_fileinfo+0x1a5>
c0004b29:	83 c0 20             	add    eax,0x20
c0004b2c:	eb 02                	jmp    c0004b30 <get_fileinfo+0x1a5>
c0004b2e:	b1 10                	mov    cl,0x10
c0004b30:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b34:	42                   	inc    edx
c0004b35:	eb d1                	jmp    c0004b08 <get_fileinfo+0x17d>
c0004b37:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b3c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b3f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b43:	75 04                	jne    c0004b49 <get_fileinfo+0x1be>
c0004b45:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b49:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b4c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b4f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b52:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b55:	83 c0 1c             	add    eax,0x1c
c0004b58:	e8 c1 ce ff ff       	call   c0001a1e <ld_dword>
c0004b5d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b64:	89 03                	mov    DWORD PTR [ebx],eax
c0004b66:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b69:	83 c0 16             	add    eax,0x16
c0004b6c:	e8 a0 ce ff ff       	call   c0001a11 <ld_word>
c0004b71:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 18             	add    eax,0x18
c0004b7b:	e8 91 ce ff ff       	call   c0001a11 <ld_word>
c0004b80:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b84:	83 c4 1c             	add    esp,0x1c
c0004b87:	5b                   	pop    ebx
c0004b88:	5e                   	pop    esi
c0004b89:	5f                   	pop    edi
c0004b8a:	5d                   	pop    ebp
c0004b8b:	c3                   	ret    

c0004b8c <ld_clust.isra.0>:
c0004b8c:	56                   	push   esi
c0004b8d:	89 c6                	mov    esi,eax
c0004b8f:	53                   	push   ebx
c0004b90:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b93:	89 d3                	mov    ebx,edx
c0004b95:	e8 77 ce ff ff       	call   c0001a11 <ld_word>
c0004b9a:	0f b7 c8             	movzx  ecx,ax
c0004b9d:	89 f0                	mov    eax,esi
c0004b9f:	3c 03                	cmp    al,0x3
c0004ba1:	75 0d                	jne    c0004bb0 <ld_clust.isra.0+0x24>
c0004ba3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004ba6:	e8 66 ce ff ff       	call   c0001a11 <ld_word>
c0004bab:	c1 e0 10             	shl    eax,0x10
c0004bae:	09 c1                	or     ecx,eax
c0004bb0:	89 c8                	mov    eax,ecx
c0004bb2:	5b                   	pop    ebx
c0004bb3:	5e                   	pop    esi
c0004bb4:	c3                   	ret    

c0004bb5 <st_clust.isra.1>:
c0004bb5:	56                   	push   esi
c0004bb6:	89 c6                	mov    esi,eax
c0004bb8:	53                   	push   ebx
c0004bb9:	89 d3                	mov    ebx,edx
c0004bbb:	0f b7 d1             	movzx  edx,cx
c0004bbe:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004bc1:	e8 bd ce ff ff       	call   c0001a83 <st_word>
c0004bc6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bc9:	75 0f                	jne    c0004bda <st_clust.isra.1+0x25>
c0004bcb:	c1 e9 10             	shr    ecx,0x10
c0004bce:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bd1:	89 ca                	mov    edx,ecx
c0004bd3:	5b                   	pop    ebx
c0004bd4:	5e                   	pop    esi
c0004bd5:	e9 a9 ce ff ff       	jmp    c0001a83 <st_word>
c0004bda:	5b                   	pop    ebx
c0004bdb:	5e                   	pop    esi
c0004bdc:	c3                   	ret    

c0004bdd <init_alloc_info.isra.2>:
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	89 c6                	mov    esi,eax
c0004be1:	89 d3                	mov    ebx,edx
c0004be3:	51                   	push   ecx
c0004be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0004be6:	83 c0 34             	add    eax,0x34
c0004be9:	e8 30 ce ff ff       	call   c0001a1e <ld_dword>
c0004bee:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004bf1:	8b 06                	mov    eax,DWORD PTR [esi]
c0004bf3:	83 c0 38             	add    eax,0x38
c0004bf6:	e8 3b ce ff ff       	call   c0001a36 <ld_qword>
c0004bfb:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004bfe:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c01:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c03:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c06:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c0d:	83 e0 02             	and    eax,0x2
c0004c10:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c13:	5b                   	pop    ebx
c0004c14:	5b                   	pop    ebx
c0004c15:	5e                   	pop    esi
c0004c16:	c3                   	ret    

c0004c17 <follow_path>:
c0004c17:	56                   	push   esi
c0004c18:	53                   	push   ebx
c0004c19:	89 c3                	mov    ebx,eax
c0004c1b:	83 ec 14             	sub    esp,0x14
c0004c1e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c22:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c28:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c2a:	80 fa 5c             	cmp    dl,0x5c
c0004c2d:	75 07                	jne    c0004c36 <follow_path+0x1f>
c0004c2f:	40                   	inc    eax
c0004c30:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c34:	eb ee                	jmp    c0004c24 <follow_path+0xd>
c0004c36:	80 fa 2f             	cmp    dl,0x2f
c0004c39:	74 f4                	je     c0004c2f <follow_path+0x18>
c0004c3b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c42:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c49:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c4c:	77 52                	ja     c0004ca0 <follow_path+0x89>
c0004c4e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c52:	31 d2                	xor    edx,edx
c0004c54:	89 d8                	mov    eax,ebx
c0004c56:	e8 12 e3 ff ff       	call   c0002f6d <dir_sdi>
c0004c5b:	eb 7c                	jmp    c0004cd9 <follow_path+0xc2>
c0004c5d:	89 d8                	mov    eax,ebx
c0004c5f:	e8 6e f2 ff ff       	call   c0003ed2 <dir_find>
c0004c64:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c67:	85 c0                	test   eax,eax
c0004c69:	75 46                	jne    c0004cb1 <follow_path+0x9a>
c0004c6b:	80 e2 04             	and    dl,0x4
c0004c6e:	75 69                	jne    c0004cd9 <follow_path+0xc2>
c0004c70:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c74:	74 5e                	je     c0004cd4 <follow_path+0xbd>
c0004c76:	8a 06                	mov    al,BYTE PTR [esi]
c0004c78:	3c 04                	cmp    al,0x4
c0004c7a:	75 41                	jne    c0004cbd <follow_path+0xa6>
c0004c7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004c7f:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c83:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c86:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c89:	30 c0                	xor    al,al
c0004c8b:	09 d0                	or     eax,edx
c0004c8d:	89 da                	mov    edx,ebx
c0004c8f:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c92:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c95:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c98:	8d 46 10             	lea    eax,[esi+0x10]
c0004c9b:	e8 3d ff ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ca0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ca4:	89 d8                	mov    eax,ebx
c0004ca6:	e8 a9 ed ff ff       	call   c0003a54 <create_name>
c0004cab:	85 c0                	test   eax,eax
c0004cad:	74 ae                	je     c0004c5d <follow_path+0x46>
c0004caf:	eb 28                	jmp    c0004cd9 <follow_path+0xc2>
c0004cb1:	83 f8 04             	cmp    eax,0x4
c0004cb4:	75 23                	jne    c0004cd9 <follow_path+0xc2>
c0004cb6:	80 e2 04             	and    dl,0x4
c0004cb9:	74 19                	je     c0004cd4 <follow_path+0xbd>
c0004cbb:	eb 1c                	jmp    c0004cd9 <follow_path+0xc2>
c0004cbd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004cc0:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004cc6:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004cca:	e8 bd fe ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ccf:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cd2:	eb cc                	jmp    c0004ca0 <follow_path+0x89>
c0004cd4:	b8 05 00 00 00       	mov    eax,0x5
c0004cd9:	83 c4 14             	add    esp,0x14
c0004cdc:	5b                   	pop    ebx
c0004cdd:	5e                   	pop    esi
c0004cde:	c3                   	ret    

c0004cdf <f_mount>:
c0004cdf:	53                   	push   ebx
c0004ce0:	83 ec 18             	sub    esp,0x18
c0004ce3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004ce7:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004cf3:	e8 fb d2 ff ff       	call   c0001ff3 <get_ldnumber>
c0004cf8:	89 c2                	mov    edx,eax
c0004cfa:	b8 0b 00 00 00       	mov    eax,0xb
c0004cff:	85 d2                	test   edx,edx
c0004d01:	78 39                	js     c0004d3c <f_mount+0x5d>
c0004d03:	8b 04 95 20 c9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd36e0]
c0004d0a:	85 c0                	test   eax,eax
c0004d0c:	74 03                	je     c0004d11 <f_mount+0x32>
c0004d0e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d15:	85 c0                	test   eax,eax
c0004d17:	74 03                	je     c0004d1c <f_mount+0x3d>
c0004d19:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d20:	89 04 95 20 c9 02 c0 	mov    DWORD PTR [edx*4-0x3ffd36e0],eax
c0004d27:	31 c0                	xor    eax,eax
c0004d29:	84 db                	test   bl,bl
c0004d2b:	74 0f                	je     c0004d3c <f_mount+0x5d>
c0004d2d:	31 c9                	xor    ecx,ecx
c0004d2f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d33:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d37:	e8 65 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d3c:	83 c4 18             	add    esp,0x18
c0004d3f:	5b                   	pop    ebx
c0004d40:	c3                   	ret    

c0004d41 <f_open>:
c0004d41:	55                   	push   ebp
c0004d42:	bd 09 00 00 00       	mov    ebp,0x9
c0004d47:	57                   	push   edi
c0004d48:	56                   	push   esi
c0004d49:	53                   	push   ebx
c0004d4a:	83 ec 7c             	sub    esp,0x7c
c0004d4d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d54:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d5b:	85 db                	test   ebx,ebx
c0004d5d:	0f 84 10 04 00 00    	je     c0005173 <f_open+0x432>
c0004d63:	89 fe                	mov    esi,edi
c0004d65:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d69:	83 e6 3f             	and    esi,0x3f
c0004d6c:	89 f0                	mov    eax,esi
c0004d6e:	0f b6 c8             	movzx  ecx,al
c0004d71:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d78:	e8 24 d7 ff ff       	call   c00024a1 <mount_volume>
c0004d7d:	89 c5                	mov    ebp,eax
c0004d7f:	85 c0                	test   eax,eax
c0004d81:	0f 85 e6 03 00 00    	jne    c000516d <f_open+0x42c>
c0004d87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d8b:	bd 11 00 00 00       	mov    ebp,0x11
c0004d90:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d94:	83 ec 0c             	sub    esp,0xc
c0004d97:	68 60 04 00 00       	push   0x460
c0004d9c:	e8 a3 34 00 00       	call   c0008244 <ff_memalloc>
c0004da1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004da5:	83 c4 10             	add    esp,0x10
c0004da8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dad:	0f 84 c0 03 00 00    	je     c0005173 <f_open+0x432>
c0004db3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004db7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dbb:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004dc1:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004dc4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dc7:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004dce:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004dd2:	e8 40 fe ff ff       	call   c0004c17 <follow_path>
c0004dd7:	89 c5                	mov    ebp,eax
c0004dd9:	85 c0                	test   eax,eax
c0004ddb:	75 0c                	jne    c0004de9 <f_open+0xa8>
c0004ddd:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004de2:	79 05                	jns    c0004de9 <f_open+0xa8>
c0004de4:	bd 06 00 00 00       	mov    ebp,0x6
c0004de9:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004def:	0f 84 84 01 00 00    	je     c0004f79 <f_open+0x238>
c0004df5:	85 ed                	test   ebp,ebp
c0004df7:	74 20                	je     c0004e19 <f_open+0xd8>
c0004df9:	83 fd 04             	cmp    ebp,0x4
c0004dfc:	0f 85 58 03 00 00    	jne    c000515a <f_open+0x419>
c0004e02:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e06:	83 ce 08             	or     esi,0x8
c0004e09:	e8 8a f2 ff ff       	call   c0004098 <dir_register>
c0004e0e:	89 c5                	mov    ebp,eax
c0004e10:	85 c0                	test   eax,eax
c0004e12:	74 2f                	je     c0004e43 <f_open+0x102>
c0004e14:	e9 41 03 00 00       	jmp    c000515a <f_open+0x419>
c0004e19:	bd 07 00 00 00       	mov    ebp,0x7
c0004e1e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e23:	0f 85 31 03 00 00    	jne    c000515a <f_open+0x419>
c0004e29:	bd 08 00 00 00       	mov    ebp,0x8
c0004e2e:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e34:	0f 85 20 03 00 00    	jne    c000515a <f_open+0x419>
c0004e3a:	83 e7 08             	and    edi,0x8
c0004e3d:	0f 84 65 01 00 00    	je     c0004fa8 <f_open+0x267>
c0004e43:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e47:	8a 02                	mov    al,BYTE PTR [edx]
c0004e49:	3c 04                	cmp    al,0x4
c0004e4b:	0f 85 97 00 00 00    	jne    c0004ee8 <f_open+0x1a7>
c0004e51:	8d 42 10             	lea    eax,[edx+0x10]
c0004e54:	89 13                	mov    DWORD PTR [ebx],edx
c0004e56:	89 da                	mov    edx,ebx
c0004e58:	e8 80 fd ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004e5d:	31 d2                	xor    edx,edx
c0004e5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e63:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e6b:	83 c0 02             	add    eax,0x2
c0004e6e:	e8 32 cc ff ff       	call   c0001aa5 <mem_set>
c0004e73:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004e78:	31 d2                	xor    edx,edx
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e81:	83 c0 26             	add    eax,0x26
c0004e84:	e8 1c cc ff ff       	call   c0001aa5 <mem_set>
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e90:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e94:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e99:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9c:	83 c0 08             	add    eax,0x8
c0004e9f:	e8 e3 cb ff ff       	call   c0001a87 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004eab:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004eaf:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb3:	e8 b7 ea ff ff       	call   c000396f <store_xdir>
c0004eb8:	89 c5                	mov    ebp,eax
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 98 02 00 00    	jne    c000515a <f_open+0x419>
c0004ec2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ec5:	85 d2                	test   edx,edx
c0004ec7:	0f 84 db 00 00 00    	je     c0004fa8 <f_open+0x267>
c0004ecd:	31 c9                	xor    ecx,ecx
c0004ecf:	89 d8                	mov    eax,ebx
c0004ed1:	e8 8e e3 ff ff       	call   c0003264 <remove_chain>
c0004ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004eda:	89 c5                	mov    ebp,eax
c0004edc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004edf:	48                   	dec    eax
c0004ee0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004ee3:	e9 b8 00 00 00       	jmp    c0004fa0 <f_open+0x25f>
c0004ee8:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004eec:	89 ea                	mov    edx,ebp
c0004eee:	e8 99 fc ff ff       	call   c0004b8c <ld_clust.isra.0>
c0004ef3:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ef8:	89 c7                	mov    edi,eax
c0004efa:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004efd:	e8 85 cb ff ff       	call   c0001a87 <st_dword>
c0004f02:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f06:	31 c9                	xor    ecx,ecx
c0004f08:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f10:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f14:	e8 9c fc ff ff       	call   c0004bb5 <st_clust.isra.1>
c0004f19:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f1d:	31 d2                	xor    edx,edx
c0004f1f:	83 c0 1c             	add    eax,0x1c
c0004f22:	e8 60 cb ff ff       	call   c0001a87 <st_dword>
c0004f27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f2b:	85 ff                	test   edi,edi
c0004f2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f31:	74 75                	je     c0004fa8 <f_open+0x267>
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	31 c9                	xor    ecx,ecx
c0004f39:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f3c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f3f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f47:	89 fa                	mov    edx,edi
c0004f49:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f4d:	e8 12 e3 ff ff       	call   c0003264 <remove_chain>
c0004f52:	89 c5                	mov    ebp,eax
c0004f54:	85 c0                	test   eax,eax
c0004f56:	0f 85 fe 01 00 00    	jne    c000515a <f_open+0x419>
c0004f5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f60:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f68:	4f                   	dec    edi
c0004f69:	e8 81 d2 ff ff       	call   c00021ef <move_window>
c0004f6e:	89 c5                	mov    ebp,eax
c0004f70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f74:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f77:	eb 27                	jmp    c0004fa0 <f_open+0x25f>
c0004f79:	85 ed                	test   ebp,ebp
c0004f7b:	0f 85 d9 01 00 00    	jne    c000515a <f_open+0x419>
c0004f81:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f85:	bd 04 00 00 00       	mov    ebp,0x4
c0004f8a:	a8 10                	test   al,0x10
c0004f8c:	0f 85 c8 01 00 00    	jne    c000515a <f_open+0x419>
c0004f92:	83 e7 02             	and    edi,0x2
c0004f95:	74 11                	je     c0004fa8 <f_open+0x267>
c0004f97:	bd 07 00 00 00       	mov    ebp,0x7
c0004f9c:	a8 01                	test   al,0x1
c0004f9e:	eb 02                	jmp    c0004fa2 <f_open+0x261>
c0004fa0:	85 ed                	test   ebp,ebp
c0004fa2:	0f 85 b2 01 00 00    	jne    c000515a <f_open+0x419>
c0004fa8:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fae:	74 03                	je     c0004fb3 <f_open+0x272>
c0004fb0:	83 ce 40             	or     esi,0x40
c0004fb3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fb7:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fba:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fbd:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fc0:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fc3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fc7:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fca:	8a 02                	mov    al,BYTE PTR [edx]
c0004fcc:	3c 04                	cmp    al,0x4
c0004fce:	75 2a                	jne    c0004ffa <f_open+0x2b9>
c0004fd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004fd4:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004fd9:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004fdc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004fe0:	30 c0                	xor    al,al
c0004fe2:	09 c8                	or     eax,ecx
c0004fe4:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004fe7:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004feb:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004fee:	8d 42 10             	lea    eax,[edx+0x10]
c0004ff1:	89 da                	mov    edx,ebx
c0004ff3:	e8 e5 fb ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0004ff8:	eb 1c                	jmp    c0005016 <f_open+0x2d5>
c0004ffa:	89 fa                	mov    edx,edi
c0004ffc:	e8 8b fb ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005001:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005004:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005007:	e8 12 ca ff ff       	call   c0001a1e <ld_dword>
c000500c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005013:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005016:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000501a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005021:	89 03                	mov    DWORD PTR [ebx],eax
c0005023:	31 d2                	xor    edx,edx
c0005025:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005029:	b9 00 02 00 00       	mov    ecx,0x200
c000502e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005032:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005036:	89 f0                	mov    eax,esi
c0005038:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000503f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005042:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005049:	8d 43 50             	lea    eax,[ebx+0x50]
c000504c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005053:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000505a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000505e:	e8 42 ca ff ff       	call   c0001aa5 <mem_set>
c0005063:	83 e6 20             	and    esi,0x20
c0005066:	75 07                	jne    c000506f <f_open+0x32e>
c0005068:	31 ed                	xor    ebp,ebp
c000506a:	e9 eb 00 00 00       	jmp    c000515a <f_open+0x419>
c000506f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005072:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000507d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005081:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005085:	74 e1                	je     c0005068 <f_open+0x327>
c0005087:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000508b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000508f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005092:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005099:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000509c:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050a0:	31 ff                	xor    edi,edi
c00050a2:	c1 e5 09             	shl    ebp,0x9
c00050a5:	89 ee                	mov    esi,ebp
c00050a7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050ab:	89 f8                	mov    eax,edi
c00050ad:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050b1:	73 22                	jae    c00050d5 <f_open+0x394>
c00050b3:	89 d8                	mov    eax,ebx
c00050b5:	e8 bd dc ff ff       	call   c0002d77 <get_fat>
c00050ba:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050be:	89 c2                	mov    edx,eax
c00050c0:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050c4:	83 f8 01             	cmp    eax,0x1
c00050c7:	76 10                	jbe    c00050d9 <f_open+0x398>
c00050c9:	83 f8 ff             	cmp    eax,0xffffffff
c00050cc:	75 d9                	jne    c00050a7 <f_open+0x366>
c00050ce:	bd 01 00 00 00       	mov    ebp,0x1
c00050d3:	eb 09                	jmp    c00050de <f_open+0x39d>
c00050d5:	31 ed                	xor    ebp,ebp
c00050d7:	eb 05                	jmp    c00050de <f_open+0x39d>
c00050d9:	bd 02 00 00 00       	mov    ebp,0x2
c00050de:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00050e1:	85 ed                	test   ebp,ebp
c00050e3:	75 75                	jne    c000515a <f_open+0x419>
c00050e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050e9:	25 ff 01 00 00       	and    eax,0x1ff
c00050ee:	0f 84 74 ff ff ff    	je     c0005068 <f_open+0x327>
c00050f4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00050f8:	bd 02 00 00 00       	mov    ebp,0x2
c00050fd:	89 c8                	mov    eax,ecx
c00050ff:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005103:	e8 a2 cb ff ff       	call   c0001caa <clst2sect>
c0005108:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000510c:	89 d7                	mov    edi,edx
c000510e:	09 c7                	or     edi,eax
c0005110:	74 48                	je     c000515a <f_open+0x419>
c0005112:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005116:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000511a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005122:	0f ac fe 09          	shrd   esi,edi,0x9
c0005126:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000512a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000512e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005131:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005135:	83 ec 0c             	sub    esp,0xc
c0005138:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000513b:	6a 01                	push   0x1
c000513d:	52                   	push   edx
c000513e:	50                   	push   eax
c000513f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005143:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005147:	50                   	push   eax
c0005148:	e8 79 c8 ff ff       	call   c00019c6 <disk_read>
c000514d:	83 c4 20             	add    esp,0x20
c0005150:	85 c0                	test   eax,eax
c0005152:	0f 95 c0             	setne  al
c0005155:	0f b6 c0             	movzx  eax,al
c0005158:	89 c5                	mov    ebp,eax
c000515a:	83 ec 0c             	sub    esp,0xc
c000515d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005161:	e8 f4 30 00 00       	call   c000825a <ff_memfree>
c0005166:	83 c4 10             	add    esp,0x10
c0005169:	85 ed                	test   ebp,ebp
c000516b:	74 06                	je     c0005173 <f_open+0x432>
c000516d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005173:	83 c4 7c             	add    esp,0x7c
c0005176:	89 e8                	mov    eax,ebp
c0005178:	5b                   	pop    ebx
c0005179:	5e                   	pop    esi
c000517a:	5f                   	pop    edi
c000517b:	5d                   	pop    ebp
c000517c:	c3                   	ret    

c000517d <f_read>:
c000517d:	55                   	push   ebp
c000517e:	57                   	push   edi
c000517f:	56                   	push   esi
c0005180:	53                   	push   ebx
c0005181:	83 ec 2c             	sub    esp,0x2c
c0005184:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005188:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000518c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005192:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005196:	89 d8                	mov    eax,ebx
c0005198:	e8 77 cf ff ff       	call   c0002114 <validate>
c000519d:	89 c5                	mov    ebp,eax
c000519f:	85 c0                	test   eax,eax
c00051a1:	0f 85 4c 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051a7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ab:	85 ed                	test   ebp,ebp
c00051ad:	0f 85 40 02 00 00    	jne    c00053f3 <f_read+0x276>
c00051b3:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051b7:	0f 84 31 02 00 00    	je     c00053ee <f_read+0x271>
c00051bd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051c0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051c3:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051c6:	bf 00 00 00 00       	mov    edi,0x0
c00051cb:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051ce:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051d2:	89 d1                	mov    ecx,edx
c00051d4:	19 f9                	sbb    ecx,edi
c00051d6:	0f 83 cf 00 00 00    	jae    c00052ab <f_read+0x12e>
c00051dc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00051e0:	e9 c6 00 00 00       	jmp    c00052ab <f_read+0x12e>
c00051e5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00051e8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00051eb:	89 d0                	mov    eax,edx
c00051ed:	25 ff 01 00 00       	and    eax,0x1ff
c00051f2:	0f 85 c9 01 00 00    	jne    c00053c1 <f_read+0x244>
c00051f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051fc:	89 d6                	mov    esi,edx
c00051fe:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005202:	89 cf                	mov    edi,ecx
c0005204:	48                   	dec    eax
c0005205:	0f ac fe 09          	shrd   esi,edi,0x9
c0005209:	21 f0                	and    eax,esi
c000520b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000520f:	0f 84 a6 00 00 00    	je     c00052bb <f_read+0x13e>
c0005215:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005219:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000521c:	89 c8                	mov    eax,ecx
c000521e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005221:	e8 84 ca ff ff       	call   c0001caa <clst2sect>
c0005226:	89 d7                	mov    edi,edx
c0005228:	09 c7                	or     edi,eax
c000522a:	0f 84 b4 00 00 00    	je     c00052e4 <f_read+0x167>
c0005230:	31 ff                	xor    edi,edi
c0005232:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005236:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005239:	01 c6                	add    esi,eax
c000523b:	11 d7                	adc    edi,edx
c000523d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005245:	0f 86 fd 00 00 00    	jbe    c0005348 <f_read+0x1cb>
c000524b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000524f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005253:	c1 e8 09             	shr    eax,0x9
c0005256:	89 04 24             	mov    DWORD PTR [esp],eax
c0005259:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000525d:	03 14 24             	add    edx,DWORD PTR [esp]
c0005260:	39 c2                	cmp    edx,eax
c0005262:	76 07                	jbe    c000526b <f_read+0xee>
c0005264:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005268:	89 04 24             	mov    DWORD PTR [esp],eax
c000526b:	83 ec 0c             	sub    esp,0xc
c000526e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005272:	57                   	push   edi
c0005273:	56                   	push   esi
c0005274:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005278:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000527c:	50                   	push   eax
c000527d:	e8 44 c7 ff ff       	call   c00019c6 <disk_read>
c0005282:	83 c4 20             	add    esp,0x20
c0005285:	85 c0                	test   eax,eax
c0005287:	75 6e                	jne    c00052f7 <f_read+0x17a>
c0005289:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000528d:	78 7e                	js     c000530d <f_read+0x190>
c000528f:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005292:	c1 e6 09             	shl    esi,0x9
c0005295:	31 ff                	xor    edi,edi
c0005297:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000529b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000529f:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052a3:	01 30                	add    DWORD PTR [eax],esi
c00052a5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052a8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ab:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052b0:	0f 85 2f ff ff ff    	jne    c00051e5 <f_read+0x68>
c00052b6:	e9 38 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052bb:	89 c8                	mov    eax,ecx
c00052bd:	09 d0                	or     eax,edx
c00052bf:	75 05                	jne    c00052c6 <f_read+0x149>
c00052c1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052c4:	eb 19                	jmp    c00052df <f_read+0x162>
c00052c6:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ca:	74 09                	je     c00052d5 <f_read+0x158>
c00052cc:	89 d8                	mov    eax,ebx
c00052ce:	e8 f8 c9 ff ff       	call   c0001ccb <clmt_clust>
c00052d3:	eb 0a                	jmp    c00052df <f_read+0x162>
c00052d5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052d8:	89 d8                	mov    eax,ebx
c00052da:	e8 98 da ff ff       	call   c0002d77 <get_fat>
c00052df:	83 f8 01             	cmp    eax,0x1
c00052e2:	77 0e                	ja     c00052f2 <f_read+0x175>
c00052e4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00052e8:	bd 02 00 00 00       	mov    ebp,0x2
c00052ed:	e9 01 01 00 00       	jmp    c00053f3 <f_read+0x276>
c00052f2:	83 f8 ff             	cmp    eax,0xffffffff
c00052f5:	75 0e                	jne    c0005305 <f_read+0x188>
c00052f7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00052fb:	bd 01 00 00 00       	mov    ebp,0x1
c0005300:	e9 ee 00 00 00       	jmp    c00053f3 <f_read+0x276>
c0005305:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005308:	e9 08 ff ff ff       	jmp    c0005215 <f_read+0x98>
c000530d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005310:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005313:	29 f0                	sub    eax,esi
c0005315:	19 fa                	sbb    edx,edi
c0005317:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000531a:	89 d7                	mov    edi,edx
c000531c:	ba 00 00 00 00       	mov    edx,0x0
c0005321:	89 f9                	mov    ecx,edi
c0005323:	19 d1                	sbb    ecx,edx
c0005325:	0f 83 64 ff ff ff    	jae    c000528f <f_read+0x112>
c000532b:	89 c7                	mov    edi,eax
c000532d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005330:	c1 e7 09             	shl    edi,0x9
c0005333:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005337:	b9 00 02 00 00       	mov    ecx,0x200
c000533c:	01 f8                	add    eax,edi
c000533e:	e8 4d c7 ff ff       	call   c0001a90 <mem_cpy>
c0005343:	e9 47 ff ff ff       	jmp    c000528f <f_read+0x112>
c0005348:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000534b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000534e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005351:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005355:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c0005359:	75 05                	jne    c0005360 <f_read+0x1e3>
c000535b:	39 34 24             	cmp    DWORD PTR [esp],esi
c000535e:	74 5b                	je     c00053bb <f_read+0x23e>
c0005360:	8d 43 50             	lea    eax,[ebx+0x50]
c0005363:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005367:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000536b:	79 2a                	jns    c0005397 <f_read+0x21a>
c000536d:	83 ec 0c             	sub    esp,0xc
c0005370:	6a 01                	push   0x1
c0005372:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005376:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000537a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000537e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005382:	50                   	push   eax
c0005383:	e8 54 c6 ff ff       	call   c00019dc <disk_write>
c0005388:	83 c4 20             	add    esp,0x20
c000538b:	85 c0                	test   eax,eax
c000538d:	0f 85 64 ff ff ff    	jne    c00052f7 <f_read+0x17a>
c0005393:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005397:	83 ec 0c             	sub    esp,0xc
c000539a:	6a 01                	push   0x1
c000539c:	57                   	push   edi
c000539d:	56                   	push   esi
c000539e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053a6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053aa:	50                   	push   eax
c00053ab:	e8 16 c6 ff ff       	call   c00019c6 <disk_read>
c00053b0:	83 c4 20             	add    esp,0x20
c00053b3:	85 c0                	test   eax,eax
c00053b5:	0f 85 3c ff ff ff    	jne    c00052f7 <f_read+0x17a>
c00053bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053c4:	ba 00 02 00 00       	mov    edx,0x200
c00053c9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053d2:	29 c2                	sub    edx,eax
c00053d4:	39 d6                	cmp    esi,edx
c00053d6:	76 02                	jbe    c00053da <f_read+0x25d>
c00053d8:	89 d6                	mov    esi,edx
c00053da:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c00053de:	89 f1                	mov    ecx,esi
c00053e0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e4:	e8 a7 c6 ff ff       	call   c0001a90 <mem_cpy>
c00053e9:	e9 a7 fe ff ff       	jmp    c0005295 <f_read+0x118>
c00053ee:	bd 07 00 00 00       	mov    ebp,0x7
c00053f3:	83 c4 2c             	add    esp,0x2c
c00053f6:	89 e8                	mov    eax,ebp
c00053f8:	5b                   	pop    ebx
c00053f9:	5e                   	pop    esi
c00053fa:	5f                   	pop    edi
c00053fb:	5d                   	pop    ebp
c00053fc:	c3                   	ret    

c00053fd <f_write>:
c00053fd:	55                   	push   ebp
c00053fe:	57                   	push   edi
c00053ff:	56                   	push   esi
c0005400:	53                   	push   ebx
c0005401:	83 ec 2c             	sub    esp,0x2c
c0005404:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000540c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005412:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f7 cc ff ff       	call   c0002114 <validate>
c000541d:	89 c5                	mov    ebp,eax
c000541f:	85 c0                	test   eax,eax
c0005421:	0f 85 86 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005427:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000542b:	85 ed                	test   ebp,ebp
c000542d:	0f 85 7a 02 00 00    	jne    c00056ad <f_write+0x2b0>
c0005433:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005437:	0f 84 6b 02 00 00    	je     c00056a8 <f_write+0x2ab>
c000543d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005441:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005444:	0f 84 43 01 00 00    	je     c000558d <f_write+0x190>
c000544a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000544d:	89 c1                	mov    ecx,eax
c000544f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005453:	0f 83 34 01 00 00    	jae    c000558d <f_write+0x190>
c0005459:	f7 d0                	not    eax
c000545b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000545f:	e9 29 01 00 00       	jmp    c000558d <f_write+0x190>
c0005464:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005467:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000546a:	89 d0                	mov    eax,edx
c000546c:	25 ff 01 00 00       	and    eax,0x1ff
c0005471:	0f 85 00 02 00 00    	jne    c0005677 <f_write+0x27a>
c0005477:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000547b:	89 d6                	mov    esi,edx
c000547d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005481:	89 cf                	mov    edi,ecx
c0005483:	48                   	dec    eax
c0005484:	0f ac fe 09          	shrd   esi,edi,0x9
c0005488:	21 f0                	and    eax,esi
c000548a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000548e:	0f 84 06 01 00 00    	je     c000559a <f_write+0x19d>
c0005494:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005498:	0f 88 6e 01 00 00    	js     c000560c <f_write+0x20f>
c000549e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054a2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054a5:	89 c8                	mov    eax,ecx
c00054a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ab:	e8 fa c7 ff ff       	call   c0001caa <clst2sect>
c00054b0:	89 d1                	mov    ecx,edx
c00054b2:	09 c1                	or     ecx,eax
c00054b4:	0f 84 1c 01 00 00    	je     c00055d6 <f_write+0x1d9>
c00054ba:	31 ff                	xor    edi,edi
c00054bc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054c0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054c4:	01 c6                	add    esi,eax
c00054c6:	11 d7                	adc    edi,edx
c00054c8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054d0:	0f 86 63 01 00 00    	jbe    c0005639 <f_write+0x23c>
c00054d6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054de:	c1 e8 09             	shr    eax,0x9
c00054e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054e5:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054e9:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c00054ed:	39 c2                	cmp    edx,eax
c00054ef:	76 08                	jbe    c00054f9 <f_write+0xfc>
c00054f1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054f9:	83 ec 0c             	sub    esp,0xc
c00054fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005500:	57                   	push   edi
c0005501:	56                   	push   esi
c0005502:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005506:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000550a:	50                   	push   eax
c000550b:	e8 cc c4 ff ff       	call   c00019dc <disk_write>
c0005510:	83 c4 20             	add    esp,0x20
c0005513:	85 c0                	test   eax,eax
c0005515:	0f 85 ce 00 00 00    	jne    c00055e9 <f_write+0x1ec>
c000551b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000551e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005521:	29 f0                	sub    eax,esi
c0005523:	19 fa                	sbb    edx,edi
c0005525:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005529:	89 d7                	mov    edi,edx
c000552b:	ba 00 00 00 00       	mov    edx,0x0
c0005530:	89 f9                	mov    ecx,edi
c0005532:	19 d1                	sbb    ecx,edx
c0005534:	73 1c                	jae    c0005552 <f_write+0x155>
c0005536:	89 c7                	mov    edi,eax
c0005538:	b9 00 02 00 00       	mov    ecx,0x200
c000553d:	c1 e7 09             	shl    edi,0x9
c0005540:	8d 43 50             	lea    eax,[ebx+0x50]
c0005543:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005547:	89 fa                	mov    edx,edi
c0005549:	e8 42 c5 ff ff       	call   c0001a90 <mem_cpy>
c000554e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005552:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005556:	c1 e6 09             	shl    esi,0x9
c0005559:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000555d:	31 ff                	xor    edi,edi
c000555f:	01 30                	add    DWORD PTR [eax],esi
c0005561:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005565:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005569:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000556c:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c000556f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005572:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005575:	89 c1                	mov    ecx,eax
c0005577:	39 f2                	cmp    edx,esi
c0005579:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000557c:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000557f:	19 f9                	sbb    ecx,edi
c0005581:	73 04                	jae    c0005587 <f_write+0x18a>
c0005583:	89 f2                	mov    edx,esi
c0005585:	89 f8                	mov    eax,edi
c0005587:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000558a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000558d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005592:	0f 85 cc fe ff ff    	jne    c0005464 <f_write+0x67>
c0005598:	eb 2e                	jmp    c00055c8 <f_write+0x1cb>
c000559a:	89 c8                	mov    eax,ecx
c000559c:	09 d0                	or     eax,edx
c000559e:	75 0b                	jne    c00055ab <f_write+0x1ae>
c00055a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055a3:	31 d2                	xor    edx,edx
c00055a5:	85 c0                	test   eax,eax
c00055a7:	75 28                	jne    c00055d1 <f_write+0x1d4>
c00055a9:	eb 12                	jmp    c00055bd <f_write+0x1c0>
c00055ab:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055af:	74 09                	je     c00055ba <f_write+0x1bd>
c00055b1:	89 d8                	mov    eax,ebx
c00055b3:	e8 13 c7 ff ff       	call   c0001ccb <clmt_clust>
c00055b8:	eb 0a                	jmp    c00055c4 <f_write+0x1c7>
c00055ba:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055bd:	89 d8                	mov    eax,ebx
c00055bf:	e8 a1 da ff ff       	call   c0003065 <create_chain>
c00055c4:	85 c0                	test   eax,eax
c00055c6:	75 09                	jne    c00055d1 <f_write+0x1d4>
c00055c8:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055cc:	e9 dc 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055d1:	83 f8 01             	cmp    eax,0x1
c00055d4:	75 0e                	jne    c00055e4 <f_write+0x1e7>
c00055d6:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055da:	bd 02 00 00 00       	mov    ebp,0x2
c00055df:	e9 c9 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055e4:	83 f8 ff             	cmp    eax,0xffffffff
c00055e7:	75 0e                	jne    c00055f7 <f_write+0x1fa>
c00055e9:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00055ed:	bd 01 00 00 00       	mov    ebp,0x1
c00055f2:	e9 b6 00 00 00       	jmp    c00056ad <f_write+0x2b0>
c00055f7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055fa:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00055fe:	0f 85 90 fe ff ff    	jne    c0005494 <f_write+0x97>
c0005604:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005607:	e9 88 fe ff ff       	jmp    c0005494 <f_write+0x97>
c000560c:	83 ec 0c             	sub    esp,0xc
c000560f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005612:	6a 01                	push   0x1
c0005614:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005617:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000561a:	50                   	push   eax
c000561b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000561f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005623:	50                   	push   eax
c0005624:	e8 b3 c3 ff ff       	call   c00019dc <disk_write>
c0005629:	83 c4 20             	add    esp,0x20
c000562c:	85 c0                	test   eax,eax
c000562e:	75 b9                	jne    c00055e9 <f_write+0x1ec>
c0005630:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005634:	e9 65 fe ff ff       	jmp    c000549e <f_write+0xa1>
c0005639:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000563c:	75 05                	jne    c0005643 <f_write+0x246>
c000563e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005641:	74 2e                	je     c0005671 <f_write+0x274>
c0005643:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005646:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005649:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000564c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000564f:	73 20                	jae    c0005671 <f_write+0x274>
c0005651:	83 ec 0c             	sub    esp,0xc
c0005654:	8d 43 50             	lea    eax,[ebx+0x50]
c0005657:	6a 01                	push   0x1
c0005659:	57                   	push   edi
c000565a:	56                   	push   esi
c000565b:	50                   	push   eax
c000565c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005660:	50                   	push   eax
c0005661:	e8 60 c3 ff ff       	call   c00019c6 <disk_read>
c0005666:	83 c4 20             	add    esp,0x20
c0005669:	85 c0                	test   eax,eax
c000566b:	0f 85 78 ff ff ff    	jne    c00055e9 <f_write+0x1ec>
c0005671:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005674:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005677:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567a:	ba 00 02 00 00       	mov    edx,0x200
c000567f:	25 ff 01 00 00       	and    eax,0x1ff
c0005684:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005688:	29 c2                	sub    edx,eax
c000568a:	39 d6                	cmp    esi,edx
c000568c:	76 02                	jbe    c0005690 <f_write+0x293>
c000568e:	89 d6                	mov    esi,edx
c0005690:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005694:	89 f1                	mov    ecx,esi
c0005696:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000569a:	e8 f1 c3 ff ff       	call   c0001a90 <mem_cpy>
c000569f:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056a3:	e9 b1 fe ff ff       	jmp    c0005559 <f_write+0x15c>
c00056a8:	bd 07 00 00 00       	mov    ebp,0x7
c00056ad:	83 c4 2c             	add    esp,0x2c
c00056b0:	89 e8                	mov    eax,ebp
c00056b2:	5b                   	pop    ebx
c00056b3:	5e                   	pop    esi
c00056b4:	5f                   	pop    edi
c00056b5:	5d                   	pop    ebp
c00056b6:	c3                   	ret    

c00056b7 <f_sync>:
c00056b7:	56                   	push   esi
c00056b8:	53                   	push   ebx
c00056b9:	83 ec 64             	sub    esp,0x64
c00056bc:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056c0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056c4:	89 d8                	mov    eax,ebx
c00056c6:	e8 49 ca ff ff       	call   c0002114 <validate>
c00056cb:	85 c0                	test   eax,eax
c00056cd:	0f 85 ba 01 00 00    	jne    c000588d <f_sync+0x1d6>
c00056d3:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056d6:	f6 c2 40             	test   dl,0x40
c00056d9:	0f 84 ae 01 00 00    	je     c000588d <f_sync+0x1d6>
c00056df:	84 d2                	test   dl,dl
c00056e1:	79 33                	jns    c0005716 <f_sync+0x5f>
c00056e3:	83 ec 0c             	sub    esp,0xc
c00056e6:	8d 43 50             	lea    eax,[ebx+0x50]
c00056e9:	6a 01                	push   0x1
c00056eb:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00056ee:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00056f1:	50                   	push   eax
c00056f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00056fa:	50                   	push   eax
c00056fb:	e8 dc c2 ff ff       	call   c00019dc <disk_write>
c0005700:	83 c4 20             	add    esp,0x20
c0005703:	89 c2                	mov    edx,eax
c0005705:	b8 01 00 00 00       	mov    eax,0x1
c000570a:	85 d2                	test   edx,edx
c000570c:	0f 85 7b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005712:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000571d:	0f 85 11 01 00 00    	jne    c0005834 <f_sync+0x17d>
c0005723:	89 d8                	mov    eax,ebx
c0005725:	e8 13 d6 ff ff       	call   c0002d3d <fill_first_frag>
c000572a:	85 c0                	test   eax,eax
c000572c:	0f 85 5b 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005732:	83 c9 ff             	or     ecx,0xffffffff
c0005735:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005738:	89 d8                	mov    eax,ebx
c000573a:	e8 c9 d5 ff ff       	call   c0002d08 <fill_last_frag>
c000573f:	85 c0                	test   eax,eax
c0005741:	0f 85 46 01 00 00    	jne    c000588d <f_sync+0x1d6>
c0005747:	83 ec 0c             	sub    esp,0xc
c000574a:	68 60 04 00 00       	push   0x460
c000574f:	e8 f0 2a 00 00       	call   c0008244 <ff_memalloc>
c0005754:	83 c4 10             	add    esp,0x10
c0005757:	89 c6                	mov    esi,eax
c0005759:	b8 11 00 00 00       	mov    eax,0x11
c000575e:	85 f6                	test   esi,esi
c0005760:	0f 84 27 01 00 00    	je     c000588d <f_sync+0x1d6>
c0005766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576a:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005770:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005773:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005776:	89 da                	mov    edx,ebx
c0005778:	8d 44 24 14          	lea    eax,[esp+0x14]
c000577c:	e8 af df ff ff       	call   c0003730 <load_obj_xdir>
c0005781:	85 c0                	test   eax,eax
c0005783:	0f 85 95 00 00 00    	jne    c000581e <f_sync+0x167>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005790:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005794:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005797:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c000579a:	83 ca 01             	or     edx,0x1
c000579d:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057a3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057a6:	83 c0 34             	add    eax,0x34
c00057a9:	e8 d9 c2 ff ff       	call   c0001a87 <st_dword>
c00057ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057b8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057bb:	83 c0 38             	add    eax,0x38
c00057be:	e8 c7 c2 ff ff       	call   c0001a8a <st_qword>
c00057c3:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ca:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057cd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d0:	83 c0 28             	add    eax,0x28
c00057d3:	e8 b2 c2 ff ff       	call   c0001a8a <st_qword>
c00057d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057dc:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057e4:	83 c0 0c             	add    eax,0xc
c00057e7:	e8 9b c2 ff ff       	call   c0001a87 <st_dword>
c00057ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057f3:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c00057f7:	31 d2                	xor    edx,edx
c00057f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057fc:	83 c0 10             	add    eax,0x10
c00057ff:	e8 83 c2 ff ff       	call   c0001a87 <st_dword>
c0005804:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005808:	e8 62 e1 ff ff       	call   c000396f <store_xdir>
c000580d:	85 c0                	test   eax,eax
c000580f:	75 0d                	jne    c000581e <f_sync+0x167>
c0005811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005815:	e8 00 eb ff ff       	call   c000431a <sync_fs>
c000581a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000581e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005822:	83 ec 0c             	sub    esp,0xc
c0005825:	56                   	push   esi
c0005826:	e8 2f 2a 00 00       	call   c000825a <ff_memfree>
c000582b:	83 c4 10             	add    esp,0x10
c000582e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005832:	eb 59                	jmp    c000588d <f_sync+0x1d6>
c0005834:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005837:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000583a:	e8 b0 c9 ff ff       	call   c00021ef <move_window>
c000583f:	85 c0                	test   eax,eax
c0005841:	75 4a                	jne    c000588d <f_sync+0x1d6>
c0005843:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005846:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000584a:	89 f2                	mov    edx,esi
c000584c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000584f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005851:	e8 5f f3 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0005856:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005859:	8d 46 1c             	lea    eax,[esi+0x1c]
c000585c:	e8 26 c2 ff ff       	call   c0001a87 <st_dword>
c0005861:	8d 46 16             	lea    eax,[esi+0x16]
c0005864:	ba 00 00 21 50       	mov    edx,0x50210000
c0005869:	e8 19 c2 ff ff       	call   c0001a87 <st_dword>
c000586e:	8d 46 12             	lea    eax,[esi+0x12]
c0005871:	31 d2                	xor    edx,edx
c0005873:	e8 0b c2 ff ff       	call   c0001a83 <st_word>
c0005878:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000587c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005884:	e8 91 ea ff ff       	call   c000431a <sync_fs>
c0005889:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000588d:	83 c4 64             	add    esp,0x64
c0005890:	5b                   	pop    ebx
c0005891:	5e                   	pop    esi
c0005892:	c3                   	ret    

c0005893 <f_close>:
c0005893:	53                   	push   ebx
c0005894:	83 ec 24             	sub    esp,0x24
c0005897:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000589b:	53                   	push   ebx
c000589c:	e8 16 fe ff ff       	call   c00056b7 <f_sync>
c00058a1:	83 c4 10             	add    esp,0x10
c00058a4:	85 c0                	test   eax,eax
c00058a6:	75 15                	jne    c00058bd <f_close+0x2a>
c00058a8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058ac:	89 d8                	mov    eax,ebx
c00058ae:	e8 61 c8 ff ff       	call   c0002114 <validate>
c00058b3:	85 c0                	test   eax,eax
c00058b5:	75 06                	jne    c00058bd <f_close+0x2a>
c00058b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058bd:	83 c4 18             	add    esp,0x18
c00058c0:	5b                   	pop    ebx
c00058c1:	c3                   	ret    

c00058c2 <f_lseek>:
c00058c2:	55                   	push   ebp
c00058c3:	57                   	push   edi
c00058c4:	56                   	push   esi
c00058c5:	53                   	push   ebx
c00058c6:	83 ec 3c             	sub    esp,0x3c
c00058c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058cd:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00058d8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058dc:	89 d8                	mov    eax,ebx
c00058de:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00058e2:	e8 2d c8 ff ff       	call   c0002114 <validate>
c00058e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058eb:	85 c0                	test   eax,eax
c00058ed:	0f 85 7a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c00058f3:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c00058f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058fb:	85 c0                	test   eax,eax
c00058fd:	0f 85 6a 04 00 00    	jne    c0005d6d <f_lseek+0x4ab>
c0005903:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005907:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000590a:	74 0c                	je     c0005918 <f_lseek+0x56>
c000590c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000590f:	85 c0                	test   eax,eax
c0005911:	75 1f                	jne    c0005932 <f_lseek+0x70>
c0005913:	e9 b5 01 00 00       	jmp    c0005acd <f_lseek+0x20b>
c0005918:	83 c9 ff             	or     ecx,0xffffffff
c000591b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000591e:	89 d8                	mov    eax,ebx
c0005920:	e8 e3 d3 ff ff       	call   c0002d08 <fill_last_frag>
c0005925:	85 c0                	test   eax,eax
c0005927:	74 e3                	je     c000590c <f_lseek+0x4a>
c0005929:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000592d:	e9 3b 04 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c0005932:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005937:	0f 85 ac 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c000593d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005941:	0f 85 a2 00 00 00    	jne    c00059e9 <f_lseek+0x127>
c0005947:	8d 78 04             	lea    edi,[eax+0x4]
c000594a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c000594d:	8b 00                	mov    eax,DWORD PTR [eax]
c000594f:	be 02 00 00 00       	mov    esi,0x2
c0005954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005958:	85 ed                	test   ebp,ebp
c000595a:	74 73                	je     c00059cf <f_lseek+0x10d>
c000595c:	89 e9                	mov    ecx,ebp
c000595e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005965:	ff 04 24             	inc    DWORD PTR [esp]
c0005968:	89 ca                	mov    edx,ecx
c000596a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000596e:	89 d8                	mov    eax,ebx
c0005970:	e8 02 d4 ff ff       	call   c0002d77 <get_fat>
c0005975:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005979:	83 f8 01             	cmp    eax,0x1
c000597c:	77 11                	ja     c000598f <f_lseek+0xcd>
c000597e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005982:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c000598a:	e9 de 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c000598f:	83 f8 ff             	cmp    eax,0xffffffff
c0005992:	75 11                	jne    c00059a5 <f_lseek+0xe3>
c0005994:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005998:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c00059a0:	e9 c8 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059a5:	8d 51 01             	lea    edx,[ecx+0x1]
c00059a8:	89 c1                	mov    ecx,eax
c00059aa:	39 c2                	cmp    edx,eax
c00059ac:	74 b7                	je     c0005965 <f_lseek+0xa3>
c00059ae:	83 c6 02             	add    esi,0x2
c00059b1:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c00059b5:	72 0b                	jb     c00059c2 <f_lseek+0x100>
c00059b7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059ba:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059bd:	89 0f                	mov    DWORD PTR [edi],ecx
c00059bf:	83 c7 08             	add    edi,0x8
c00059c2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059c6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059c9:	76 04                	jbe    c00059cf <f_lseek+0x10d>
c00059cb:	89 c5                	mov    ebp,eax
c00059cd:	eb 8d                	jmp    c000595c <f_lseek+0x9a>
c00059cf:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059d2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00059d6:	89 30                	mov    DWORD PTR [eax],esi
c00059d8:	0f 87 87 03 00 00    	ja     c0005d65 <f_lseek+0x4a3>
c00059de:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c00059e4:	e9 84 03 00 00       	jmp    c0005d6d <f_lseek+0x4ab>
c00059e9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00059ec:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00059ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00059f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00059f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00059fb:	39 04 24             	cmp    DWORD PTR [esp],eax
c00059fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a02:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005a06:	73 0f                	jae    c0005a17 <f_lseek+0x155>
c0005a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a0b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005a13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005a17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005a1b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005a1f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005a22:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005a25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a29:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005a2d:	0f 84 3a 03 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a33:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005a37:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005a3b:	83 c6 ff             	add    esi,0xffffffff
c0005a3e:	89 d8                	mov    eax,ebx
c0005a40:	83 d7 ff             	adc    edi,0xffffffff
c0005a43:	89 f2                	mov    edx,esi
c0005a45:	89 f9                	mov    ecx,edi
c0005a47:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005a4e:	e8 78 c2 ff ff       	call   c0001ccb <clmt_clust>
c0005a53:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a57:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a5a:	89 c2                	mov    edx,eax
c0005a5c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005a60:	89 c8                	mov    eax,ecx
c0005a62:	e8 43 c2 ff ff       	call   c0001caa <clst2sect>
c0005a67:	89 d7                	mov    edi,edx
c0005a69:	09 c7                	or     edi,eax
c0005a6b:	0f 84 0d ff ff ff    	je     c000597e <f_lseek+0xbc>
c0005a71:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005a75:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005a7b:	0f 84 ec 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005a81:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a85:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a89:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a8c:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a90:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a94:	4d                   	dec    ebp
c0005a95:	31 ff                	xor    edi,edi
c0005a97:	21 ee                	and    esi,ebp
c0005a99:	01 c6                	add    esi,eax
c0005a9b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a9e:	11 d7                	adc    edi,edx
c0005aa0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005aa3:	39 fa                	cmp    edx,edi
c0005aa5:	75 08                	jne    c0005aaf <f_lseek+0x1ed>
c0005aa7:	39 f0                	cmp    eax,esi
c0005aa9:	0f 84 be 02 00 00    	je     c0005d6d <f_lseek+0x4ab>
c0005aaf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ab2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ab6:	0f 89 80 02 00 00    	jns    c0005d3c <f_lseek+0x47a>
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	6a 01                	push   0x1
c0005ac1:	52                   	push   edx
c0005ac2:	50                   	push   eax
c0005ac3:	55                   	push   ebp
c0005ac4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac8:	e9 5a 02 00 00       	jmp    c0005d27 <f_lseek+0x465>
c0005acd:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ad1:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005ad4:	74 16                	je     c0005aec <f_lseek+0x22a>
c0005ad6:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005adb:	76 0f                	jbe    c0005aec <f_lseek+0x22a>
c0005add:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005ae4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005aec:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005af2:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005af5:	89 c7                	mov    edi,eax
c0005af7:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005afb:	73 0d                	jae    c0005b0a <f_lseek+0x248>
c0005afd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005b01:	75 07                	jne    c0005b0a <f_lseek+0x248>
c0005b03:	89 14 24             	mov    DWORD PTR [esp],edx
c0005b06:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b0a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b10:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b14:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b1b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b22:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b25:	75 09                	jne    c0005b30 <f_lseek+0x26e>
c0005b27:	31 f6                	xor    esi,esi
c0005b29:	31 ff                	xor    edi,edi
c0005b2b:	e9 af 01 00 00       	jmp    c0005cdf <f_lseek+0x41d>
c0005b30:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b34:	89 d7                	mov    edi,edx
c0005b36:	c1 e1 09             	shl    ecx,0x9
c0005b39:	09 c7                	or     edi,eax
c0005b3b:	89 cd                	mov    ebp,ecx
c0005b3d:	74 6d                	je     c0005bac <f_lseek+0x2ea>
c0005b3f:	83 c0 ff             	add    eax,0xffffffff
c0005b42:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b46:	83 d2 ff             	adc    edx,0xffffffff
c0005b49:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b50:	83 c0 ff             	add    eax,0xffffffff
c0005b53:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b57:	83 d2 ff             	adc    edx,0xffffffff
c0005b5a:	31 ff                	xor    edi,edi
c0005b5c:	57                   	push   edi
c0005b5d:	51                   	push   ecx
c0005b5e:	52                   	push   edx
c0005b5f:	50                   	push   eax
c0005b60:	e8 87 f8 01 00       	call   c00253ec <__udivdi3>
c0005b65:	83 c4 10             	add    esp,0x10
c0005b68:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005b70:	57                   	push   edi
c0005b71:	55                   	push   ebp
c0005b72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b7a:	e8 6d f8 01 00       	call   c00253ec <__udivdi3>
c0005b7f:	83 c4 10             	add    esp,0x10
c0005b82:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b86:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b8a:	19 d1                	sbb    ecx,edx
c0005b8c:	72 1e                	jb     c0005bac <f_lseek+0x2ea>
c0005b8e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b92:	89 e9                	mov    ecx,ebp
c0005b94:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b97:	f7 d9                	neg    ecx
c0005b99:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b9c:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005ba0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ba3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ba6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005baa:	eb 28                	jmp    c0005bd4 <f_lseek+0x312>
c0005bac:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005baf:	85 c0                	test   eax,eax
c0005bb1:	75 1e                	jne    c0005bd1 <f_lseek+0x30f>
c0005bb3:	31 d2                	xor    edx,edx
c0005bb5:	89 d8                	mov    eax,ebx
c0005bb7:	e8 a9 d4 ff ff       	call   c0003065 <create_chain>
c0005bbc:	83 f8 01             	cmp    eax,0x1
c0005bbf:	0f 84 b9 fd ff ff    	je     c000597e <f_lseek+0xbc>
c0005bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc8:	0f 84 c6 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005bce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bd1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	0f 84 4b ff ff ff    	je     c0005b27 <f_lseek+0x265>
c0005bdc:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005be0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005be8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005beb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005bef:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005bf2:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bf5:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005bf9:	0f 83 9d 00 00 00    	jae    c0005c9c <f_lseek+0x3da>
c0005bff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005c03:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005c07:	29 34 24             	sub    DWORD PTR [esp],esi
c0005c0a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005c0e:	01 f2                	add    edx,esi
c0005c10:	11 f9                	adc    ecx,edi
c0005c12:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005c16:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005c1a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005c1d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005c20:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005c23:	f6 c1 02             	test   cl,0x2
c0005c26:	74 35                	je     c0005c5d <f_lseek+0x39b>
c0005c28:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005c2c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005c2f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005c32:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005c36:	73 16                	jae    c0005c4e <f_lseek+0x38c>
c0005c38:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c3c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c40:	88 ca                	mov    dl,cl
c0005c42:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c45:	83 ca 40             	or     edx,0x40
c0005c48:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c4b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c4e:	89 c2                	mov    edx,eax
c0005c50:	89 d8                	mov    eax,ebx
c0005c52:	e8 0e d4 ff ff       	call   c0003065 <create_chain>
c0005c57:	85 c0                	test   eax,eax
c0005c59:	75 0b                	jne    c0005c66 <f_lseek+0x3a4>
c0005c5b:	eb 30                	jmp    c0005c8d <f_lseek+0x3cb>
c0005c5d:	89 c2                	mov    edx,eax
c0005c5f:	89 d8                	mov    eax,ebx
c0005c61:	e8 11 d1 ff ff       	call   c0002d77 <get_fat>
c0005c66:	83 f8 ff             	cmp    eax,0xffffffff
c0005c69:	0f 84 25 fd ff ff    	je     c0005994 <f_lseek+0xd2>
c0005c6f:	83 f8 01             	cmp    eax,0x1
c0005c72:	0f 86 06 fd ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c7c:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c7f:	0f 86 f9 fc ff ff    	jbe    c000597e <f_lseek+0xbc>
c0005c85:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c88:	e9 5b ff ff ff       	jmp    c0005be8 <f_lseek+0x326>
c0005c8d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c94:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c9c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c9f:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ca3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ca6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ca9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005cac:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005cb2:	0f 84 6f fe ff ff    	je     c0005b27 <f_lseek+0x265>
c0005cb8:	89 c2                	mov    edx,eax
c0005cba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005cbe:	e8 e7 bf ff ff       	call   c0001caa <clst2sect>
c0005cc3:	89 d7                	mov    edi,edx
c0005cc5:	09 c7                	or     edi,eax
c0005cc7:	0f 84 b1 fc ff ff    	je     c000597e <f_lseek+0xbc>
c0005ccd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cd4:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cd8:	c1 ef 09             	shr    edi,0x9
c0005cdb:	01 c6                	add    esi,eax
c0005cdd:	11 d7                	adc    edi,edx
c0005cdf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005ce2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005ce5:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005ce8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005ceb:	19 d1                	sbb    ecx,edx
c0005ced:	73 0a                	jae    c0005cf9 <f_lseek+0x437>
c0005cef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cf2:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cf5:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cf9:	a9 ff 01 00 00       	test   eax,0x1ff
c0005cfe:	74 6d                	je     c0005d6d <f_lseek+0x4ab>
c0005d00:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d06:	39 fa                	cmp    edx,edi
c0005d08:	75 04                	jne    c0005d0e <f_lseek+0x44c>
c0005d0a:	39 f0                	cmp    eax,esi
c0005d0c:	74 5f                	je     c0005d6d <f_lseek+0x4ab>
c0005d0e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d11:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d15:	79 25                	jns    c0005d3c <f_lseek+0x47a>
c0005d17:	83 ec 0c             	sub    esp,0xc
c0005d1a:	6a 01                	push   0x1
c0005d1c:	52                   	push   edx
c0005d1d:	50                   	push   eax
c0005d1e:	55                   	push   ebp
c0005d1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d23:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d27:	50                   	push   eax
c0005d28:	e8 af bc ff ff       	call   c00019dc <disk_write>
c0005d2d:	83 c4 20             	add    esp,0x20
c0005d30:	85 c0                	test   eax,eax
c0005d32:	0f 85 5c fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d38:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d3c:	83 ec 0c             	sub    esp,0xc
c0005d3f:	6a 01                	push   0x1
c0005d41:	57                   	push   edi
c0005d42:	56                   	push   esi
c0005d43:	55                   	push   ebp
c0005d44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d48:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d4c:	50                   	push   eax
c0005d4d:	e8 74 bc ff ff       	call   c00019c6 <disk_read>
c0005d52:	83 c4 20             	add    esp,0x20
c0005d55:	85 c0                	test   eax,eax
c0005d57:	0f 85 37 fc ff ff    	jne    c0005994 <f_lseek+0xd2>
c0005d5d:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d60:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d63:	eb 08                	jmp    c0005d6d <f_lseek+0x4ab>
c0005d65:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005d6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005d71:	83 c4 3c             	add    esp,0x3c
c0005d74:	5b                   	pop    ebx
c0005d75:	5e                   	pop    esi
c0005d76:	5f                   	pop    edi
c0005d77:	5d                   	pop    ebp
c0005d78:	c3                   	ret    

c0005d79 <f_opendir>:
c0005d79:	56                   	push   esi
c0005d7a:	b8 09 00 00 00       	mov    eax,0x9
c0005d7f:	53                   	push   ebx
c0005d80:	83 ec 24             	sub    esp,0x24
c0005d83:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d87:	85 db                	test   ebx,ebx
c0005d89:	0f 84 e6 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005d8f:	31 c9                	xor    ecx,ecx
c0005d91:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d95:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d99:	e8 03 c7 ff ff       	call   c00024a1 <mount_volume>
c0005d9e:	85 c0                	test   eax,eax
c0005da0:	0f 85 c9 00 00 00    	jne    c0005e6f <f_opendir+0xf6>
c0005da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005daa:	83 ec 0c             	sub    esp,0xc
c0005dad:	89 03                	mov    DWORD PTR [ebx],eax
c0005daf:	68 60 04 00 00       	push   0x460
c0005db4:	e8 8b 24 00 00       	call   c0008244 <ff_memalloc>
c0005db9:	83 c4 10             	add    esp,0x10
c0005dbc:	89 c6                	mov    esi,eax
c0005dbe:	b8 11 00 00 00       	mov    eax,0x11
c0005dc3:	85 f6                	test   esi,esi
c0005dc5:	0f 84 aa 00 00 00    	je     c0005e75 <f_opendir+0xfc>
c0005dcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005dcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005dd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ddb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005ddf:	89 d8                	mov    eax,ebx
c0005de1:	e8 31 ee ff ff       	call   c0004c17 <follow_path>
c0005de6:	85 c0                	test   eax,eax
c0005de8:	75 61                	jne    c0005e4b <f_opendir+0xd2>
c0005dea:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dee:	78 46                	js     c0005e36 <f_opendir+0xbd>
c0005df0:	b8 05 00 00 00       	mov    eax,0x5
c0005df5:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005df9:	74 50                	je     c0005e4b <f_opendir+0xd2>
c0005dfb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dff:	8a 01                	mov    al,BYTE PTR [ecx]
c0005e01:	3c 04                	cmp    al,0x4
c0005e03:	75 26                	jne    c0005e2b <f_opendir+0xb2>
c0005e05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e08:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005e0b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005e0e:	30 d2                	xor    dl,dl
c0005e10:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005e14:	09 c2                	or     edx,eax
c0005e16:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005e19:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005e1c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005e1f:	89 da                	mov    edx,ebx
c0005e21:	8d 41 10             	lea    eax,[ecx+0x10]
c0005e24:	e8 b4 ed ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c0005e29:	eb 0b                	jmp    c0005e36 <f_opendir+0xbd>
c0005e2b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005e2e:	e8 59 ed ff ff       	call   c0004b8c <ld_clust.isra.0>
c0005e33:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3a:	31 d2                	xor    edx,edx
c0005e3c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e40:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e44:	89 d8                	mov    eax,ebx
c0005e46:	e8 22 d1 ff ff       	call   c0002f6d <dir_sdi>
c0005e4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e4f:	83 ec 0c             	sub    esp,0xc
c0005e52:	56                   	push   esi
c0005e53:	e8 02 24 00 00       	call   c000825a <ff_memfree>
c0005e58:	83 c4 10             	add    esp,0x10
c0005e5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e5f:	83 f8 04             	cmp    eax,0x4
c0005e62:	74 06                	je     c0005e6a <f_opendir+0xf1>
c0005e64:	85 c0                	test   eax,eax
c0005e66:	74 0d                	je     c0005e75 <f_opendir+0xfc>
c0005e68:	eb 05                	jmp    c0005e6f <f_opendir+0xf6>
c0005e6a:	b8 05 00 00 00       	mov    eax,0x5
c0005e6f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e75:	83 c4 24             	add    esp,0x24
c0005e78:	5b                   	pop    ebx
c0005e79:	5e                   	pop    esi
c0005e7a:	c3                   	ret    

c0005e7b <f_closedir>:
c0005e7b:	53                   	push   ebx
c0005e7c:	83 ec 18             	sub    esp,0x18
c0005e7f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e83:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e87:	89 d8                	mov    eax,ebx
c0005e89:	e8 86 c2 ff ff       	call   c0002114 <validate>
c0005e8e:	85 c0                	test   eax,eax
c0005e90:	75 06                	jne    c0005e98 <f_closedir+0x1d>
c0005e92:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e98:	83 c4 18             	add    esp,0x18
c0005e9b:	5b                   	pop    ebx
c0005e9c:	c3                   	ret    

c0005e9d <f_readdir>:
c0005e9d:	57                   	push   edi
c0005e9e:	56                   	push   esi
c0005e9f:	53                   	push   ebx
c0005ea0:	83 ec 20             	sub    esp,0x20
c0005ea3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ea7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005eab:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 5e c2 ff ff       	call   c0002114 <validate>
c0005eb6:	85 c0                	test   eax,eax
c0005eb8:	75 77                	jne    c0005f31 <f_readdir+0x94>
c0005eba:	85 ff                	test   edi,edi
c0005ebc:	75 0b                	jne    c0005ec9 <f_readdir+0x2c>
c0005ebe:	31 d2                	xor    edx,edx
c0005ec0:	89 d8                	mov    eax,ebx
c0005ec2:	e8 a6 d0 ff ff       	call   c0002f6d <dir_sdi>
c0005ec7:	eb 68                	jmp    c0005f31 <f_readdir+0x94>
c0005ec9:	83 ec 0c             	sub    esp,0xc
c0005ecc:	68 60 04 00 00       	push   0x460
c0005ed1:	e8 6e 23 00 00       	call   c0008244 <ff_memalloc>
c0005ed6:	83 c4 10             	add    esp,0x10
c0005ed9:	89 c6                	mov    esi,eax
c0005edb:	b8 11 00 00 00       	mov    eax,0x11
c0005ee0:	85 f6                	test   esi,esi
c0005ee2:	74 4d                	je     c0005f31 <f_readdir+0x94>
c0005ee4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ee8:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005eee:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ef1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ef4:	31 d2                	xor    edx,edx
c0005ef6:	89 d8                	mov    eax,ebx
c0005ef8:	e8 80 d8 ff ff       	call   c000377d <dir_read>
c0005efd:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005f02:	75 19                	jne    c0005f1d <f_readdir+0x80>
c0005f04:	89 fa                	mov    edx,edi
c0005f06:	89 d8                	mov    eax,ebx
c0005f08:	e8 7e ea ff ff       	call   c000498b <get_fileinfo>
c0005f0d:	31 d2                	xor    edx,edx
c0005f0f:	89 d8                	mov    eax,ebx
c0005f11:	e8 af d5 ff ff       	call   c00034c5 <dir_next>
c0005f16:	83 f8 04             	cmp    eax,0x4
c0005f19:	75 02                	jne    c0005f1d <f_readdir+0x80>
c0005f1b:	31 c0                	xor    eax,eax
c0005f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f21:	83 ec 0c             	sub    esp,0xc
c0005f24:	56                   	push   esi
c0005f25:	e8 30 23 00 00       	call   c000825a <ff_memfree>
c0005f2a:	83 c4 10             	add    esp,0x10
c0005f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f31:	83 c4 20             	add    esp,0x20
c0005f34:	5b                   	pop    ebx
c0005f35:	5e                   	pop    esi
c0005f36:	5f                   	pop    edi
c0005f37:	c3                   	ret    

c0005f38 <f_stat>:
c0005f38:	57                   	push   edi
c0005f39:	31 c9                	xor    ecx,ecx
c0005f3b:	56                   	push   esi
c0005f3c:	53                   	push   ebx
c0005f3d:	83 ec 50             	sub    esp,0x50
c0005f40:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f44:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f48:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f4c:	e8 50 c5 ff ff       	call   c00024a1 <mount_volume>
c0005f51:	89 c3                	mov    ebx,eax
c0005f53:	85 c0                	test   eax,eax
c0005f55:	75 67                	jne    c0005fbe <f_stat+0x86>
c0005f57:	83 ec 0c             	sub    esp,0xc
c0005f5a:	bb 11 00 00 00       	mov    ebx,0x11
c0005f5f:	68 60 04 00 00       	push   0x460
c0005f64:	e8 db 22 00 00       	call   c0008244 <ff_memalloc>
c0005f69:	83 c4 10             	add    esp,0x10
c0005f6c:	89 c6                	mov    esi,eax
c0005f6e:	85 c0                	test   eax,eax
c0005f70:	74 4c                	je     c0005fbe <f_stat+0x86>
c0005f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f76:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f7c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f7f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f82:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f86:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f8a:	e8 88 ec ff ff       	call   c0004c17 <follow_path>
c0005f8f:	89 c3                	mov    ebx,eax
c0005f91:	85 c0                	test   eax,eax
c0005f93:	75 1d                	jne    c0005fb2 <f_stat+0x7a>
c0005f95:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f9a:	78 11                	js     c0005fad <f_stat+0x75>
c0005f9c:	85 ff                	test   edi,edi
c0005f9e:	74 12                	je     c0005fb2 <f_stat+0x7a>
c0005fa0:	89 fa                	mov    edx,edi
c0005fa2:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005fa6:	e8 e0 e9 ff ff       	call   c000498b <get_fileinfo>
c0005fab:	eb 05                	jmp    c0005fb2 <f_stat+0x7a>
c0005fad:	bb 06 00 00 00       	mov    ebx,0x6
c0005fb2:	83 ec 0c             	sub    esp,0xc
c0005fb5:	56                   	push   esi
c0005fb6:	e8 9f 22 00 00       	call   c000825a <ff_memfree>
c0005fbb:	83 c4 10             	add    esp,0x10
c0005fbe:	83 c4 50             	add    esp,0x50
c0005fc1:	89 d8                	mov    eax,ebx
c0005fc3:	5b                   	pop    ebx
c0005fc4:	5e                   	pop    esi
c0005fc5:	5f                   	pop    edi
c0005fc6:	c3                   	ret    

c0005fc7 <f_getfree>:
c0005fc7:	55                   	push   ebp
c0005fc8:	31 c9                	xor    ecx,ecx
c0005fca:	57                   	push   edi
c0005fcb:	56                   	push   esi
c0005fcc:	53                   	push   ebx
c0005fcd:	83 ec 5c             	sub    esp,0x5c
c0005fd0:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fd4:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fd8:	e8 c4 c4 ff ff       	call   c00024a1 <mount_volume>
c0005fdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005fe1:	85 c0                	test   eax,eax
c0005fe3:	0f 85 9d 01 00 00    	jne    c0006186 <f_getfree+0x1bf>
c0005fe9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fed:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005ff1:	89 02                	mov    DWORD PTR [edx],eax
c0005ff3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005ff6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005ff9:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005ffc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006000:	39 f2                	cmp    edx,esi
c0006002:	77 0b                	ja     c000600f <f_getfree+0x48>
c0006004:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006008:	89 10                	mov    DWORD PTR [eax],edx
c000600a:	e9 77 01 00 00       	jmp    c0006186 <f_getfree+0x1bf>
c000600f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006011:	80 fa 01             	cmp    dl,0x1
c0006014:	75 3a                	jne    c0006050 <f_getfree+0x89>
c0006016:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000601a:	be 02 00 00 00       	mov    esi,0x2
c000601f:	31 db                	xor    ebx,ebx
c0006021:	89 f2                	mov    edx,esi
c0006023:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006027:	e8 4b cd ff ff       	call   c0002d77 <get_fat>
c000602c:	83 f8 ff             	cmp    eax,0xffffffff
c000602f:	0f 84 28 01 00 00    	je     c000615d <f_getfree+0x196>
c0006035:	83 f8 01             	cmp    eax,0x1
c0006038:	0f 84 29 01 00 00    	je     c0006167 <f_getfree+0x1a0>
c000603e:	83 d3 00             	adc    ebx,0x0
c0006041:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006045:	46                   	inc    esi
c0006046:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006049:	77 d6                	ja     c0006021 <f_getfree+0x5a>
c000604b:	e9 25 01 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c0006050:	80 fa 04             	cmp    dl,0x4
c0006053:	0f 85 88 00 00 00    	jne    c00060e1 <f_getfree+0x11a>
c0006059:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000605c:	31 ed                	xor    ebp,ebp
c000605e:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006061:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006065:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006069:	31 db                	xor    ebx,ebx
c000606b:	85 ed                	test   ebp,ebp
c000606d:	75 3f                	jne    c00060ae <f_getfree+0xe7>
c000606f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006073:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006077:	83 c0 01             	add    eax,0x1
c000607a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000607e:	83 d2 00             	adc    edx,0x0
c0006081:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006085:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006089:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006091:	e8 59 c1 ff ff       	call   c00021ef <move_window>
c0006096:	85 c0                	test   eax,eax
c0006098:	0f 85 d3 00 00 00    	jne    c0006171 <f_getfree+0x1aa>
c000609e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00060a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00060aa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00060ae:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b2:	8d 4e f8             	lea    ecx,[esi-0x8]
c00060b5:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00060b9:	89 cf                	mov    edi,ecx
c00060bb:	85 f6                	test   esi,esi
c00060bd:	74 12                	je     c00060d1 <f_getfree+0x10a>
c00060bf:	88 c1                	mov    cl,al
c00060c1:	83 e1 01             	and    ecx,0x1
c00060c4:	80 f9 01             	cmp    cl,0x1
c00060c7:	83 d3 00             	adc    ebx,0x0
c00060ca:	d0 e8                	shr    al,1
c00060cc:	4e                   	dec    esi
c00060cd:	39 fe                	cmp    esi,edi
c00060cf:	75 ea                	jne    c00060bb <f_getfree+0xf4>
c00060d1:	45                   	inc    ebp
c00060d2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00060d8:	85 f6                	test   esi,esi
c00060da:	75 8f                	jne    c000606b <f_getfree+0xa4>
c00060dc:	e9 94 00 00 00       	jmp    c0006175 <f_getfree+0x1ae>
c00060e1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060e4:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060e7:	31 f6                	xor    esi,esi
c00060e9:	31 db                	xor    ebx,ebx
c00060eb:	85 f6                	test   esi,esi
c00060ed:	75 1b                	jne    c000610a <f_getfree+0x143>
c00060ef:	89 d7                	mov    edi,edx
c00060f1:	89 cd                	mov    ebp,ecx
c00060f3:	83 c7 01             	add    edi,0x1
c00060f6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fa:	83 d5 00             	adc    ebp,0x0
c00060fd:	e8 ed c0 ff ff       	call   c00021ef <move_window>
c0006102:	85 c0                	test   eax,eax
c0006104:	75 6b                	jne    c0006171 <f_getfree+0x1aa>
c0006106:	89 fa                	mov    edx,edi
c0006108:	89 e9                	mov    ecx,ebp
c000610a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000610e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006112:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006116:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006119:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000611d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006121:	75 11                	jne    c0006134 <f_getfree+0x16d>
c0006123:	e8 e9 b8 ff ff       	call   c0001a11 <ld_word>
c0006128:	66 83 f8 01          	cmp    ax,0x1
c000612c:	83 d3 00             	adc    ebx,0x0
c000612f:	83 c6 02             	add    esi,0x2
c0006132:	eb 13                	jmp    c0006147 <f_getfree+0x180>
c0006134:	e8 e5 b8 ff ff       	call   c0001a1e <ld_dword>
c0006139:	25 ff ff ff 0f       	and    eax,0xfffffff
c000613e:	83 f8 01             	cmp    eax,0x1
c0006141:	83 d3 00             	adc    ebx,0x0
c0006144:	83 c6 04             	add    esi,0x4
c0006147:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000614d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006151:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006155:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006159:	75 90                	jne    c00060eb <f_getfree+0x124>
c000615b:	eb 18                	jmp    c0006175 <f_getfree+0x1ae>
c000615d:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006165:	eb 0e                	jmp    c0006175 <f_getfree+0x1ae>
c0006167:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c000616f:	eb 04                	jmp    c0006175 <f_getfree+0x1ae>
c0006171:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006175:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006179:	89 18                	mov    DWORD PTR [eax],ebx
c000617b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000617f:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006182:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000618a:	83 c4 5c             	add    esp,0x5c
c000618d:	5b                   	pop    ebx
c000618e:	5e                   	pop    esi
c000618f:	5f                   	pop    edi
c0006190:	5d                   	pop    ebp
c0006191:	c3                   	ret    

c0006192 <f_truncate>:
c0006192:	56                   	push   esi
c0006193:	53                   	push   ebx
c0006194:	83 ec 14             	sub    esp,0x14
c0006197:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000619b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000619f:	89 d8                	mov    eax,ebx
c00061a1:	e8 6e bf ff ff       	call   c0002114 <validate>
c00061a6:	89 c6                	mov    esi,eax
c00061a8:	85 c0                	test   eax,eax
c00061aa:	0f 85 d2 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061b0:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061b4:	85 f6                	test   esi,esi
c00061b6:	0f 85 c6 00 00 00    	jne    c0006282 <f_truncate+0xf0>
c00061bc:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061c0:	0f 84 b7 00 00 00    	je     c000627d <f_truncate+0xeb>
c00061c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061c9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061cc:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061cf:	89 d1                	mov    ecx,edx
c00061d1:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061d4:	0f 83 a8 00 00 00    	jae    c0006282 <f_truncate+0xf0>
c00061da:	09 c2                	or     edx,eax
c00061dc:	75 15                	jne    c00061f3 <f_truncate+0x61>
c00061de:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061e1:	31 c9                	xor    ecx,ecx
c00061e3:	89 d8                	mov    eax,ebx
c00061e5:	e8 7a d0 ff ff       	call   c0003264 <remove_chain>
c00061ea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061f1:	eb 35                	jmp    c0006228 <f_truncate+0x96>
c00061f3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061f6:	89 d8                	mov    eax,ebx
c00061f8:	e8 7a cb ff ff       	call   c0002d77 <get_fat>
c00061fd:	89 c2                	mov    edx,eax
c00061ff:	b8 01 00 00 00       	mov    eax,0x1
c0006204:	83 fa ff             	cmp    edx,0xffffffff
c0006207:	74 1f                	je     c0006228 <f_truncate+0x96>
c0006209:	b8 02 00 00 00       	mov    eax,0x2
c000620e:	83 fa 01             	cmp    edx,0x1
c0006211:	74 15                	je     c0006228 <f_truncate+0x96>
c0006213:	31 c0                	xor    eax,eax
c0006215:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006219:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000621c:	76 0a                	jbe    c0006228 <f_truncate+0x96>
c000621e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006221:	89 d8                	mov    eax,ebx
c0006223:	e8 3c d0 ff ff       	call   c0003264 <remove_chain>
c0006228:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000622b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000622e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006231:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006234:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006237:	83 ca 40             	or     edx,0x40
c000623a:	85 c0                	test   eax,eax
c000623c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000623f:	75 35                	jne    c0006276 <f_truncate+0xe4>
c0006241:	84 d2                	test   dl,dl
c0006243:	79 3d                	jns    c0006282 <f_truncate+0xf0>
c0006245:	83 ec 0c             	sub    esp,0xc
c0006248:	8d 43 50             	lea    eax,[ebx+0x50]
c000624b:	6a 01                	push   0x1
c000624d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006250:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006253:	50                   	push   eax
c0006254:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006258:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000625c:	50                   	push   eax
c000625d:	e8 7a b7 ff ff       	call   c00019dc <disk_write>
c0006262:	83 c4 20             	add    esp,0x20
c0006265:	85 c0                	test   eax,eax
c0006267:	75 08                	jne    c0006271 <f_truncate+0xdf>
c0006269:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000626d:	31 f6                	xor    esi,esi
c000626f:	eb 11                	jmp    c0006282 <f_truncate+0xf0>
c0006271:	b8 01 00 00 00       	mov    eax,0x1
c0006276:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006279:	89 c6                	mov    esi,eax
c000627b:	eb 05                	jmp    c0006282 <f_truncate+0xf0>
c000627d:	be 07 00 00 00       	mov    esi,0x7
c0006282:	89 f0                	mov    eax,esi
c0006284:	83 c4 14             	add    esp,0x14
c0006287:	5b                   	pop    ebx
c0006288:	5e                   	pop    esi
c0006289:	c3                   	ret    

c000628a <f_unlink>:
c000628a:	56                   	push   esi
c000628b:	b9 02 00 00 00       	mov    ecx,0x2
c0006290:	53                   	push   ebx
c0006291:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006297:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000629b:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00062a2:	e8 fa c1 ff ff       	call   c00024a1 <mount_volume>
c00062a7:	85 c0                	test   eax,eax
c00062a9:	0f 85 55 01 00 00    	jne    c0006404 <f_unlink+0x17a>
c00062af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b3:	83 ec 0c             	sub    esp,0xc
c00062b6:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062ba:	68 60 04 00 00       	push   0x460
c00062bf:	e8 80 1f 00 00       	call   c0008244 <ff_memalloc>
c00062c4:	83 c4 10             	add    esp,0x10
c00062c7:	89 c3                	mov    ebx,eax
c00062c9:	b8 11 00 00 00       	mov    eax,0x11
c00062ce:	85 db                	test   ebx,ebx
c00062d0:	0f 84 2e 01 00 00    	je     c0006404 <f_unlink+0x17a>
c00062d6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062da:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062e0:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062e6:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062ed:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062f1:	e8 21 e9 ff ff       	call   c0004c17 <follow_path>
c00062f6:	85 c0                	test   eax,eax
c00062f8:	0f 85 f2 00 00 00    	jne    c00063f0 <f_unlink+0x166>
c00062fe:	b8 06 00 00 00       	mov    eax,0x6
c0006303:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000630b:	0f 88 df 00 00 00    	js     c00063f0 <f_unlink+0x166>
c0006311:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006316:	74 0a                	je     c0006322 <f_unlink+0x98>
c0006318:	b8 07 00 00 00       	mov    eax,0x7
c000631d:	e9 ce 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006326:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000632a:	8a 02                	mov    al,BYTE PTR [edx]
c000632c:	3c 04                	cmp    al,0x4
c000632e:	75 12                	jne    c0006342 <f_unlink+0xb8>
c0006330:	8d 42 10             	lea    eax,[edx+0x10]
c0006333:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006337:	e8 a1 e8 ff ff       	call   c0004bdd <init_alloc_info.isra.2>
c000633c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006340:	eb 0e                	jmp    c0006350 <f_unlink+0xc6>
c0006342:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006349:	e8 3e e8 ff ff       	call   c0004b8c <ld_clust.isra.0>
c000634e:	89 c6                	mov    esi,eax
c0006350:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006355:	75 12                	jne    c0006369 <f_unlink+0xdf>
c0006357:	8d 44 24 48          	lea    eax,[esp+0x48]
c000635b:	e8 94 d6 ff ff       	call   c00039f4 <dir_remove>
c0006360:	85 c0                	test   eax,eax
c0006362:	74 6c                	je     c00063d0 <f_unlink+0x146>
c0006364:	e9 87 00 00 00       	jmp    c00063f0 <f_unlink+0x166>
c0006369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000636d:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006374:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c000637b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637e:	75 21                	jne    c00063a1 <f_unlink+0x117>
c0006380:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006384:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006388:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000639a:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00063a1:	31 d2                	xor    edx,edx
c00063a3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063aa:	e8 be cb ff ff       	call   c0002f6d <dir_sdi>
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 3d                	jne    c00063f0 <f_unlink+0x166>
c00063b3:	31 d2                	xor    edx,edx
c00063b5:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063bc:	e8 bc d3 ff ff       	call   c000377d <dir_read>
c00063c1:	85 c0                	test   eax,eax
c00063c3:	0f 84 4f ff ff ff    	je     c0006318 <f_unlink+0x8e>
c00063c9:	83 f8 04             	cmp    eax,0x4
c00063cc:	75 22                	jne    c00063f0 <f_unlink+0x166>
c00063ce:	eb 87                	jmp    c0006357 <f_unlink+0xcd>
c00063d0:	85 f6                	test   esi,esi
c00063d2:	75 0b                	jne    c00063df <f_unlink+0x155>
c00063d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d8:	e8 3d df ff ff       	call   c000431a <sync_fs>
c00063dd:	eb 11                	jmp    c00063f0 <f_unlink+0x166>
c00063df:	31 c9                	xor    ecx,ecx
c00063e1:	89 f2                	mov    edx,esi
c00063e3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00063e7:	e8 78 ce ff ff       	call   c0003264 <remove_chain>
c00063ec:	85 c0                	test   eax,eax
c00063ee:	74 e4                	je     c00063d4 <f_unlink+0x14a>
c00063f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063f4:	83 ec 0c             	sub    esp,0xc
c00063f7:	53                   	push   ebx
c00063f8:	e8 5d 1e 00 00       	call   c000825a <ff_memfree>
c00063fd:	83 c4 10             	add    esp,0x10
c0006400:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006404:	81 c4 e4 00 00 00    	add    esp,0xe4
c000640a:	5b                   	pop    ebx
c000640b:	5e                   	pop    esi
c000640c:	c3                   	ret    

c000640d <f_mkdir>:
c000640d:	57                   	push   edi
c000640e:	b9 02 00 00 00       	mov    ecx,0x2
c0006413:	56                   	push   esi
c0006414:	53                   	push   ebx
c0006415:	83 c4 80             	add    esp,0xffffff80
c0006418:	8d 54 24 08          	lea    edx,[esp+0x8]
c000641c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006423:	e8 79 c0 ff ff       	call   c00024a1 <mount_volume>
c0006428:	89 c3                	mov    ebx,eax
c000642a:	85 c0                	test   eax,eax
c000642c:	0f 85 fe 01 00 00    	jne    c0006630 <f_mkdir+0x223>
c0006432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006436:	bb 11 00 00 00       	mov    ebx,0x11
c000643b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	68 60 04 00 00       	push   0x460
c0006447:	e8 f8 1d 00 00       	call   c0008244 <ff_memalloc>
c000644c:	83 c4 10             	add    esp,0x10
c000644f:	89 c7                	mov    edi,eax
c0006451:	85 c0                	test   eax,eax
c0006453:	0f 84 d7 01 00 00    	je     c0006630 <f_mkdir+0x223>
c0006459:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000645d:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006463:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006466:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006469:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006470:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006474:	e8 9e e7 ff ff       	call   c0004c17 <follow_path>
c0006479:	89 c3                	mov    ebx,eax
c000647b:	85 c0                	test   eax,eax
c000647d:	74 3e                	je     c00064bd <f_mkdir+0xb0>
c000647f:	83 f8 04             	cmp    eax,0x4
c0006482:	75 3e                	jne    c00064c2 <f_mkdir+0xb5>
c0006484:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006488:	31 d2                	xor    edx,edx
c000648a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000648e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006492:	e8 ce cb ff ff       	call   c0003065 <create_chain>
c0006497:	89 c6                	mov    esi,eax
c0006499:	85 c0                	test   eax,eax
c000649b:	74 0c                	je     c00064a9 <f_mkdir+0x9c>
c000649d:	bb 02 00 00 00       	mov    ebx,0x2
c00064a2:	83 f8 01             	cmp    eax,0x1
c00064a5:	74 07                	je     c00064ae <f_mkdir+0xa1>
c00064a7:	eb 2a                	jmp    c00064d3 <f_mkdir+0xc6>
c00064a9:	bb 07 00 00 00       	mov    ebx,0x7
c00064ae:	31 c9                	xor    ecx,ecx
c00064b0:	89 f2                	mov    edx,esi
c00064b2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064b6:	e8 a9 cd ff ff       	call   c0003264 <remove_chain>
c00064bb:	eb 05                	jmp    c00064c2 <f_mkdir+0xb5>
c00064bd:	bb 08 00 00 00       	mov    ebx,0x8
c00064c2:	83 ec 0c             	sub    esp,0xc
c00064c5:	57                   	push   edi
c00064c6:	e8 8f 1d 00 00       	call   c000825a <ff_memfree>
c00064cb:	83 c4 10             	add    esp,0x10
c00064ce:	e9 5d 01 00 00       	jmp    c0006630 <f_mkdir+0x223>
c00064d3:	bb 01 00 00 00       	mov    ebx,0x1
c00064d8:	83 f8 ff             	cmp    eax,0xffffffff
c00064db:	74 d1                	je     c00064ae <f_mkdir+0xa1>
c00064dd:	89 f2                	mov    edx,esi
c00064df:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064e3:	e8 c4 ce ff ff       	call   c00033ac <dir_clear>
c00064e8:	89 c3                	mov    ebx,eax
c00064ea:	85 c0                	test   eax,eax
c00064ec:	75 c0                	jne    c00064ae <f_mkdir+0xa1>
c00064ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f5:	74 69                	je     c0006560 <f_mkdir+0x153>
c00064f7:	b9 0b 00 00 00       	mov    ecx,0xb
c00064fc:	83 c0 54             	add    eax,0x54
c00064ff:	ba 20 00 00 00       	mov    edx,0x20
c0006504:	e8 9c b5 ff ff       	call   c0001aa5 <mem_set>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006512:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006516:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000651a:	83 c0 6a             	add    eax,0x6a
c000651d:	e8 65 b5 ff ff       	call   c0001a87 <st_dword>
c0006522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006526:	89 f1                	mov    ecx,esi
c0006528:	8d 50 54             	lea    edx,[eax+0x54]
c000652b:	e8 85 e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	b9 20 00 00 00       	mov    ecx,0x20
c0006539:	8d 50 54             	lea    edx,[eax+0x54]
c000653c:	83 c0 74             	add    eax,0x74
c000653f:	e8 4c b5 ff ff       	call   c0001a90 <mem_cpy>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000654c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006550:	8d 50 74             	lea    edx,[eax+0x74]
c0006553:	e8 5d e6 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000655c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006560:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006564:	e8 2f db ff ff       	call   c0004098 <dir_register>
c0006569:	89 c3                	mov    ebx,eax
c000656b:	85 c0                	test   eax,eax
c000656d:	0f 85 3b ff ff ff    	jne    c00064ae <f_mkdir+0xa1>
c0006573:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006577:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000657a:	75 74                	jne    c00065f0 <f_mkdir+0x1e3>
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	ba 00 00 21 50       	mov    edx,0x50210000
c0006584:	83 c0 0c             	add    eax,0xc
c0006587:	e8 fb b4 ff ff       	call   c0001a87 <st_dword>
c000658c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006590:	89 f2                	mov    edx,esi
c0006592:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006595:	83 c0 34             	add    eax,0x34
c0006598:	e8 ea b4 ff ff       	call   c0001a87 <st_dword>
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065a8:	c1 e2 09             	shl    edx,0x9
c00065ab:	83 c0 38             	add    eax,0x38
c00065ae:	e8 d4 b4 ff ff       	call   c0001a87 <st_dword>
c00065b3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b7:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065be:	c1 e2 09             	shl    edx,0x9
c00065c1:	83 c0 28             	add    eax,0x28
c00065c4:	e8 be b4 ff ff       	call   c0001a87 <st_dword>
c00065c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065d0:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065d7:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065db:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065df:	e8 8b d3 ff ff       	call   c000396f <store_xdir>
c00065e4:	89 c3                	mov    ebx,eax
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 d4 fe ff ff    	jne    c00064c2 <f_mkdir+0xb5>
c00065ee:	eb 30                	jmp    c0006620 <f_mkdir+0x213>
c00065f0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065f4:	ba 00 00 21 50       	mov    edx,0x50210000
c00065f9:	83 c0 16             	add    eax,0x16
c00065fc:	e8 86 b4 ff ff       	call   c0001a87 <st_dword>
c0006601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006605:	89 f1                	mov    ecx,esi
c0006607:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000660b:	e8 a5 e5 ff ff       	call   c0004bb5 <st_clust.isra.1>
c0006610:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006614:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006618:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000661c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006620:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006624:	e8 f1 dc ff ff       	call   c000431a <sync_fs>
c0006629:	89 c3                	mov    ebx,eax
c000662b:	e9 92 fe ff ff       	jmp    c00064c2 <f_mkdir+0xb5>
c0006630:	83 ec 80             	sub    esp,0xffffff80
c0006633:	89 d8                	mov    eax,ebx
c0006635:	5b                   	pop    ebx
c0006636:	5e                   	pop    esi
c0006637:	5f                   	pop    edi
c0006638:	c3                   	ret    

c0006639 <f_rename>:
c0006639:	55                   	push   ebp
c000663a:	57                   	push   edi
c000663b:	56                   	push   esi
c000663c:	53                   	push   ebx
c000663d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006643:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000664a:	e8 a4 b9 ff ff       	call   c0001ff3 <get_ldnumber>
c000664f:	b9 02 00 00 00       	mov    ecx,0x2
c0006654:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006658:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000665f:	e8 3d be ff ff       	call   c00024a1 <mount_volume>
c0006664:	85 c0                	test   eax,eax
c0006666:	0f 85 b5 02 00 00    	jne    c0006921 <f_rename+0x2e8>
c000666c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006677:	68 60 04 00 00       	push   0x460
c000667c:	e8 c3 1b 00 00       	call   c0008244 <ff_memalloc>
c0006681:	83 c4 10             	add    esp,0x10
c0006684:	89 c3                	mov    ebx,eax
c0006686:	b8 11 00 00 00       	mov    eax,0x11
c000668b:	85 db                	test   ebx,ebx
c000668d:	0f 84 8e 02 00 00    	je     c0006921 <f_rename+0x2e8>
c0006693:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006697:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000669d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00066a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066a3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00066aa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00066ae:	e8 64 e5 ff ff       	call   c0004c17 <follow_path>
c00066b3:	85 c0                	test   eax,eax
c00066b5:	0f 85 52 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066bb:	b8 06 00 00 00       	mov    eax,0x6
c00066c0:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066c8:	0f 85 3f 02 00 00    	jne    c000690d <f_rename+0x2d4>
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066d5:	0f 85 05 01 00 00    	jne    c00067e0 <f_rename+0x1a7>
c00066db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066de:	b9 40 00 00 00       	mov    ecx,0x40
c00066e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066e7:	e8 a4 b3 ff ff       	call   c0001a90 <mem_cpy>
c00066ec:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066f1:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066f5:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fc:	e8 8f b3 ff ff       	call   c0001a90 <mem_cpy>
c0006701:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006708:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000670f:	e8 03 e5 ff ff       	call   c0004c17 <follow_path>
c0006714:	85 c0                	test   eax,eax
c0006716:	75 29                	jne    c0006741 <f_rename+0x108>
c0006718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000671c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006723:	74 0a                	je     c000672f <f_rename+0xf6>
c0006725:	b8 08 00 00 00       	mov    eax,0x8
c000672a:	e9 de 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c000672f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006736:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000673d:	75 e6                	jne    c0006725 <f_rename+0xec>
c000673f:	eb 09                	jmp    c000674a <f_rename+0x111>
c0006741:	83 f8 04             	cmp    eax,0x4
c0006744:	0f 85 c3 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000674a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006751:	e8 42 d9 ff ff       	call   c0004098 <dir_register>
c0006756:	85 c0                	test   eax,eax
c0006758:	0f 85 af 01 00 00    	jne    c000690d <f_rename+0x2d4>
c000675e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006762:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006765:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006768:	89 c5                	mov    ebp,eax
c000676a:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000676d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006771:	8d 46 24             	lea    eax,[esi+0x24]
c0006774:	e8 98 b2 ff ff       	call   c0001a11 <ld_word>
c0006779:	b9 40 00 00 00       	mov    ecx,0x40
c000677e:	89 c7                	mov    edi,eax
c0006780:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006784:	89 f0                	mov    eax,esi
c0006786:	e8 05 b3 ff ff       	call   c0001a90 <mem_cpy>
c000678b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678f:	89 e9                	mov    ecx,ebp
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006797:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c000679b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000679f:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00067a5:	0f b7 d7             	movzx  edx,di
c00067a8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ab:	83 c0 24             	add    eax,0x24
c00067ae:	e8 d0 b2 ff ff       	call   c0001a83 <st_word>
c00067b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067b7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067ba:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067bd:	a8 10                	test   al,0x10
c00067bf:	75 06                	jne    c00067c7 <f_rename+0x18e>
c00067c1:	83 c8 20             	or     eax,0x20
c00067c4:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ce:	e8 9c d1 ff ff       	call   c000396f <store_xdir>
c00067d3:	85 c0                	test   eax,eax
c00067d5:	0f 84 1c 01 00 00    	je     c00068f7 <f_rename+0x2be>
c00067db:	e9 2d 01 00 00       	jmp    c000690d <f_rename+0x2d4>
c00067e0:	b9 20 00 00 00       	mov    ecx,0x20
c00067e5:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067f0:	e8 9b b2 ff ff       	call   c0001a90 <mem_cpy>
c00067f5:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067fa:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067fe:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006805:	e8 86 b2 ff ff       	call   c0001a90 <mem_cpy>
c000680a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006811:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006818:	e8 fa e3 ff ff       	call   c0004c17 <follow_path>
c000681d:	85 c0                	test   eax,eax
c000681f:	75 27                	jne    c0006848 <f_rename+0x20f>
c0006821:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006825:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000682c:	0f 85 f3 fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006832:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006839:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006840:	0f 85 df fe ff ff    	jne    c0006725 <f_rename+0xec>
c0006846:	eb 09                	jmp    c0006851 <f_rename+0x218>
c0006848:	83 f8 04             	cmp    eax,0x4
c000684b:	0f 85 bc 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006851:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006858:	e8 3b d8 ff ff       	call   c0004098 <dir_register>
c000685d:	85 c0                	test   eax,eax
c000685f:	0f 85 a8 00 00 00    	jne    c000690d <f_rename+0x2d4>
c0006865:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000686c:	b9 13 00 00 00       	mov    ecx,0x13
c0006871:	8d 46 0d             	lea    eax,[esi+0xd]
c0006874:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006878:	e8 13 b2 ff ff       	call   c0001a90 <mem_cpy>
c000687d:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006881:	a8 10                	test   al,0x10
c0006883:	75 03                	jne    c0006888 <f_rename+0x24f>
c0006885:	83 c8 20             	or     eax,0x20
c0006888:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c000688b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000688f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006893:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006897:	74 5e                	je     c00068f7 <f_rename+0x2be>
c0006899:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00068a0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00068a4:	74 51                	je     c00068f7 <f_rename+0x2be>
c00068a6:	89 f2                	mov    edx,esi
c00068a8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00068ac:	8a 07                	mov    al,BYTE PTR [edi]
c00068ae:	e8 d9 e2 ff ff       	call   c0004b8c <ld_clust.isra.0>
c00068b3:	89 c2                	mov    edx,eax
c00068b5:	89 f8                	mov    eax,edi
c00068b7:	e8 ee b3 ff ff       	call   c0001caa <clst2sect>
c00068bc:	89 c6                	mov    esi,eax
c00068be:	89 d1                	mov    ecx,edx
c00068c0:	b8 02 00 00 00       	mov    eax,0x2
c00068c5:	09 f2                	or     edx,esi
c00068c7:	74 44                	je     c000690d <f_rename+0x2d4>
c00068c9:	89 f2                	mov    edx,esi
c00068cb:	89 f8                	mov    eax,edi
c00068cd:	e8 1d b9 ff ff       	call   c00021ef <move_window>
c00068d2:	85 c0                	test   eax,eax
c00068d4:	75 37                	jne    c000690d <f_rename+0x2d4>
c00068d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068da:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068de:	75 17                	jne    c00068f7 <f_rename+0x2be>
c00068e0:	8d 50 74             	lea    edx,[eax+0x74]
c00068e3:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068ea:	e8 c6 e2 ff ff       	call   c0004bb5 <st_clust.isra.1>
c00068ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f3:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068f7:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fb:	e8 f4 d0 ff ff       	call   c00039f4 <dir_remove>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 09                	jne    c000690d <f_rename+0x2d4>
c0006904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006908:	e8 0d da ff ff       	call   c000431a <sync_fs>
c000690d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006911:	83 ec 0c             	sub    esp,0xc
c0006914:	53                   	push   ebx
c0006915:	e8 40 19 00 00       	call   c000825a <ff_memfree>
c000691a:	83 c4 10             	add    esp,0x10
c000691d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006921:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006927:	5b                   	pop    ebx
c0006928:	5e                   	pop    esi
c0006929:	5f                   	pop    edi
c000692a:	5d                   	pop    ebp
c000692b:	c3                   	ret    

c000692c <f_chmod>:
c000692c:	57                   	push   edi
c000692d:	b9 02 00 00 00       	mov    ecx,0x2
c0006932:	56                   	push   esi
c0006933:	53                   	push   ebx
c0006934:	83 ec 60             	sub    esp,0x60
c0006937:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000693b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000693f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006943:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006947:	e8 55 bb ff ff       	call   c00024a1 <mount_volume>
c000694c:	85 c0                	test   eax,eax
c000694e:	0f 85 af 00 00 00    	jne    c0006a03 <f_chmod+0xd7>
c0006954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006958:	83 ec 0c             	sub    esp,0xc
c000695b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000695f:	68 60 04 00 00       	push   0x460
c0006964:	e8 db 18 00 00       	call   c0008244 <ff_memalloc>
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	89 c6                	mov    esi,eax
c000696e:	b8 11 00 00 00       	mov    eax,0x11
c0006973:	85 f6                	test   esi,esi
c0006975:	0f 84 88 00 00 00    	je     c0006a03 <f_chmod+0xd7>
c000697b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000697f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006985:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006988:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000698b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000698f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006993:	e8 7f e2 ff ff       	call   c0004c17 <follow_path>
c0006998:	85 c0                	test   eax,eax
c000699a:	75 53                	jne    c00069ef <f_chmod+0xc3>
c000699c:	b8 06 00 00 00       	mov    eax,0x6
c00069a1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069a6:	75 47                	jne    c00069ef <f_chmod+0xc3>
c00069a8:	89 f9                	mov    ecx,edi
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 e1 27             	and    ecx,0x27
c00069b1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069b4:	75 1d                	jne    c00069d3 <f_chmod+0xa7>
c00069b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069b9:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069bc:	21 cb                	and    ebx,ecx
c00069be:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069c1:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069c8:	e8 a2 cf ff ff       	call   c000396f <store_xdir>
c00069cd:	85 c0                	test   eax,eax
c00069cf:	75 1e                	jne    c00069ef <f_chmod+0xc3>
c00069d1:	eb 13                	jmp    c00069e6 <f_chmod+0xba>
c00069d3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069d7:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069da:	21 cb                	and    ebx,ecx
c00069dc:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069df:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069e2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ea:	e8 2b d9 ff ff       	call   c000431a <sync_fs>
c00069ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069f3:	83 ec 0c             	sub    esp,0xc
c00069f6:	56                   	push   esi
c00069f7:	e8 5e 18 00 00       	call   c000825a <ff_memfree>
c00069fc:	83 c4 10             	add    esp,0x10
c00069ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a03:	83 c4 60             	add    esp,0x60
c0006a06:	5b                   	pop    ebx
c0006a07:	5e                   	pop    esi
c0006a08:	5f                   	pop    edi
c0006a09:	c3                   	ret    

c0006a0a <f_utime>:
c0006a0a:	56                   	push   esi
c0006a0b:	b9 02 00 00 00       	mov    ecx,0x2
c0006a10:	53                   	push   ebx
c0006a11:	83 ec 64             	sub    esp,0x64
c0006a14:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a18:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a1c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a20:	e8 7c ba ff ff       	call   c00024a1 <mount_volume>
c0006a25:	85 c0                	test   eax,eax
c0006a27:	0f 85 b5 00 00 00    	jne    c0006ae2 <f_utime+0xd8>
c0006a2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a31:	83 ec 0c             	sub    esp,0xc
c0006a34:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a38:	68 60 04 00 00       	push   0x460
c0006a3d:	e8 02 18 00 00       	call   c0008244 <ff_memalloc>
c0006a42:	83 c4 10             	add    esp,0x10
c0006a45:	89 c3                	mov    ebx,eax
c0006a47:	b8 11 00 00 00       	mov    eax,0x11
c0006a4c:	85 db                	test   ebx,ebx
c0006a4e:	0f 84 8e 00 00 00    	je     c0006ae2 <f_utime+0xd8>
c0006a54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a58:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a5e:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a61:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a64:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a68:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a6c:	e8 a6 e1 ff ff       	call   c0004c17 <follow_path>
c0006a71:	85 c0                	test   eax,eax
c0006a73:	75 59                	jne    c0006ace <f_utime+0xc4>
c0006a75:	b8 06 00 00 00       	mov    eax,0x6
c0006a7a:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a7f:	75 4d                	jne    c0006ace <f_utime+0xc4>
c0006a81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a85:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a89:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a8d:	c1 e2 10             	shl    edx,0x10
c0006a90:	09 ca                	or     edx,ecx
c0006a92:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a95:	75 1a                	jne    c0006ab1 <f_utime+0xa7>
c0006a97:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a9a:	83 c0 0c             	add    eax,0xc
c0006a9d:	e8 e5 af ff ff       	call   c0001a87 <st_dword>
c0006aa2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aa6:	e8 c4 ce ff ff       	call   c000396f <store_xdir>
c0006aab:	85 c0                	test   eax,eax
c0006aad:	75 1f                	jne    c0006ace <f_utime+0xc4>
c0006aaf:	eb 14                	jmp    c0006ac5 <f_utime+0xbb>
c0006ab1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ab5:	83 c0 16             	add    eax,0x16
c0006ab8:	e8 ca af ff ff       	call   c0001a87 <st_dword>
c0006abd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	e8 4c d8 ff ff       	call   c000431a <sync_fs>
c0006ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006ad2:	83 ec 0c             	sub    esp,0xc
c0006ad5:	53                   	push   ebx
c0006ad6:	e8 7f 17 00 00       	call   c000825a <ff_memfree>
c0006adb:	83 c4 10             	add    esp,0x10
c0006ade:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ae2:	83 c4 64             	add    esp,0x64
c0006ae5:	5b                   	pop    ebx
c0006ae6:	5e                   	pop    esi
c0006ae7:	c3                   	ret    

c0006ae8 <f_getlabel>:
c0006ae8:	55                   	push   ebp
c0006ae9:	31 c9                	xor    ecx,ecx
c0006aeb:	57                   	push   edi
c0006aec:	56                   	push   esi
c0006aed:	53                   	push   ebx
c0006aee:	83 ec 6c             	sub    esp,0x6c
c0006af1:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006af5:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006afc:	e8 a0 b9 ff ff       	call   c00024a1 <mount_volume>
c0006b01:	89 c6                	mov    esi,eax
c0006b03:	85 c0                	test   eax,eax
c0006b05:	0f 85 c1 01 00 00    	jne    c0006ccc <f_getlabel+0x1e4>
c0006b0b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006b13:	0f 84 5f 01 00 00    	je     c0006c78 <f_getlabel+0x190>
c0006b19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b1d:	31 d2                	xor    edx,edx
c0006b1f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b2b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b2f:	e8 39 c4 ff ff       	call   c0002f6d <dir_sdi>
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 85 2d 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b3c:	ba 01 00 00 00       	mov    edx,0x1
c0006b41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b45:	e8 33 cc ff ff       	call   c000377d <dir_read>
c0006b4a:	85 c0                	test   eax,eax
c0006b4c:	0f 85 17 01 00 00    	jne    c0006c69 <f_getlabel+0x181>
c0006b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b56:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b59:	74 09                	je     c0006b64 <f_getlabel+0x7c>
c0006b5b:	31 db                	xor    ebx,ebx
c0006b5d:	31 c9                	xor    ecx,ecx
c0006b5f:	e9 c8 00 00 00       	jmp    c0006c2c <f_getlabel+0x144>
c0006b64:	31 ed                	xor    ebp,ebp
c0006b66:	31 db                	xor    ebx,ebx
c0006b68:	31 ff                	xor    edi,edi
c0006b6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b72:	39 fa                	cmp    edx,edi
c0006b74:	76 4b                	jbe    c0006bc1 <f_getlabel+0xd9>
c0006b76:	47                   	inc    edi
c0006b77:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b7a:	01 d0                	add    eax,edx
c0006b7c:	e8 90 ae ff ff       	call   c0001a11 <ld_word>
c0006b81:	66 85 ed             	test   bp,bp
c0006b84:	75 0d                	jne    c0006b93 <f_getlabel+0xab>
c0006b86:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b8c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b91:	76 28                	jbe    c0006bbb <f_getlabel+0xd3>
c0006b93:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b9a:	89 e9                	mov    ecx,ebp
c0006b9c:	01 da                	add    edx,ebx
c0006b9e:	c1 e1 10             	shl    ecx,0x10
c0006ba1:	0f b7 c0             	movzx  eax,ax
c0006ba4:	09 c8                	or     eax,ecx
c0006ba6:	b9 04 00 00 00       	mov    ecx,0x4
c0006bab:	e8 01 b0 ff ff       	call   c0001bb1 <put_utf>
c0006bb0:	84 c0                	test   al,al
c0006bb2:	74 0b                	je     c0006bbf <f_getlabel+0xd7>
c0006bb4:	0f b6 c0             	movzx  eax,al
c0006bb7:	01 c3                	add    ebx,eax
c0006bb9:	31 c0                	xor    eax,eax
c0006bbb:	89 c5                	mov    ebp,eax
c0006bbd:	eb ab                	jmp    c0006b6a <f_getlabel+0x82>
c0006bbf:	31 db                	xor    ebx,ebx
c0006bc1:	66 85 ed             	test   bp,bp
c0006bc4:	74 02                	je     c0006bc8 <f_getlabel+0xe0>
c0006bc6:	31 db                	xor    ebx,ebx
c0006bc8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bcf:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006bd3:	e9 a0 00 00 00       	jmp    c0006c78 <f_getlabel+0x190>
c0006bd8:	83 ff 0b             	cmp    edi,0xb
c0006bdb:	74 11                	je     c0006bee <f_getlabel+0x106>
c0006bdd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006be2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006be6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006be9:	c1 e0 08             	shl    eax,0x8
c0006bec:	09 c2                	or     edx,eax
c0006bee:	0f b7 d2             	movzx  edx,dx
c0006bf1:	50                   	push   eax
c0006bf2:	50                   	push   eax
c0006bf3:	68 b5 01 00 00       	push   0x1b5
c0006bf8:	52                   	push   edx
c0006bf9:	e8 03 17 00 00       	call   c0008301 <ff_oem2uni>
c0006bfe:	83 c4 10             	add    esp,0x10
c0006c01:	66 85 c0             	test   ax,ax
c0006c04:	74 46                	je     c0006c4c <f_getlabel+0x164>
c0006c06:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006c0d:	0f b7 c0             	movzx  eax,ax
c0006c10:	01 da                	add    edx,ebx
c0006c12:	b9 04 00 00 00       	mov    ecx,0x4
c0006c17:	e8 95 af ff ff       	call   c0001bb1 <put_utf>
c0006c1c:	84 c0                	test   al,al
c0006c1e:	74 2c                	je     c0006c4c <f_getlabel+0x164>
c0006c20:	0f b6 c0             	movzx  eax,al
c0006c23:	01 c3                	add    ebx,eax
c0006c25:	83 ff 0b             	cmp    edi,0xb
c0006c28:	74 24                	je     c0006c4e <f_getlabel+0x166>
c0006c2a:	89 f9                	mov    ecx,edi
c0006c2c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c30:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c33:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c38:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c3d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c41:	e8 9f ae ff ff       	call   c0001ae5 <dbc_1st>
c0006c46:	85 c0                	test   eax,eax
c0006c48:	74 a4                	je     c0006bee <f_getlabel+0x106>
c0006c4a:	eb 8c                	jmp    c0006bd8 <f_getlabel+0xf0>
c0006c4c:	31 db                	xor    ebx,ebx
c0006c4e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006c55:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006c58:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006c5f:	74 17                	je     c0006c78 <f_getlabel+0x190>
c0006c61:	4b                   	dec    ebx
c0006c62:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006c65:	74 ee                	je     c0006c55 <f_getlabel+0x16d>
c0006c67:	eb 0f                	jmp    c0006c78 <f_getlabel+0x190>
c0006c69:	83 f8 04             	cmp    eax,0x4
c0006c6c:	75 5c                	jne    c0006cca <f_getlabel+0x1e2>
c0006c6e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c75:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c78:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c80:	74 4a                	je     c0006ccc <f_getlabel+0x1e4>
c0006c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c86:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c89:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c8c:	e8 5e b5 ff ff       	call   c00021ef <move_window>
c0006c91:	89 c6                	mov    esi,eax
c0006c93:	85 c0                	test   eax,eax
c0006c95:	75 35                	jne    c0006ccc <f_getlabel+0x1e4>
c0006c97:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c9b:	b8 43 00 00 00       	mov    eax,0x43
c0006ca0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ca2:	80 f9 03             	cmp    cl,0x3
c0006ca5:	74 0f                	je     c0006cb6 <f_getlabel+0x1ce>
c0006ca7:	31 c0                	xor    eax,eax
c0006ca9:	80 f9 04             	cmp    cl,0x4
c0006cac:	0f 94 c0             	sete   al
c0006caf:	48                   	dec    eax
c0006cb0:	83 e0 c3             	and    eax,0xffffffc3
c0006cb3:	83 c0 64             	add    eax,0x64
c0006cb6:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cba:	e8 5f ad ff ff       	call   c0001a1e <ld_dword>
c0006cbf:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cc6:	89 07                	mov    DWORD PTR [edi],eax
c0006cc8:	eb 02                	jmp    c0006ccc <f_getlabel+0x1e4>
c0006cca:	89 c6                	mov    esi,eax
c0006ccc:	83 c4 6c             	add    esp,0x6c
c0006ccf:	89 f0                	mov    eax,esi
c0006cd1:	5b                   	pop    ebx
c0006cd2:	5e                   	pop    esi
c0006cd3:	5f                   	pop    edi
c0006cd4:	5d                   	pop    ebp
c0006cd5:	c3                   	ret    

c0006cd6 <f_setlabel>:
c0006cd6:	56                   	push   esi
c0006cd7:	b9 02 00 00 00       	mov    ecx,0x2
c0006cdc:	53                   	push   ebx
c0006cdd:	83 ec 74             	sub    esp,0x74
c0006ce0:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006ce4:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ceb:	e8 b1 b7 ff ff       	call   c00024a1 <mount_volume>
c0006cf0:	89 c6                	mov    esi,eax
c0006cf2:	85 c0                	test   eax,eax
c0006cf4:	0f 85 41 02 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006cfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cfe:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d01:	0f 85 8e 00 00 00    	jne    c0006d95 <f_setlabel+0xbf>
c0006d07:	b9 16 00 00 00       	mov    ecx,0x16
c0006d0c:	31 d2                	xor    edx,edx
c0006d0e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d12:	31 db                	xor    ebx,ebx
c0006d14:	e8 8c ad ff ff       	call   c0001aa5 <mem_set>
c0006d19:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d20:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d23:	0f 86 0a 01 00 00    	jbe    c0006e33 <f_setlabel+0x15d>
c0006d29:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d30:	e8 b6 ad ff ff       	call   c0001aeb <tchar2uni>
c0006d35:	89 c6                	mov    esi,eax
c0006d37:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d3c:	76 2a                	jbe    c0006d68 <f_setlabel+0x92>
c0006d3e:	83 f8 ff             	cmp    eax,0xffffffff
c0006d41:	74 05                	je     c0006d48 <f_setlabel+0x72>
c0006d43:	83 fb 09             	cmp    ebx,0x9
c0006d46:	76 0a                	jbe    c0006d52 <f_setlabel+0x7c>
c0006d48:	be 06 00 00 00       	mov    esi,0x6
c0006d4d:	e9 e9 01 00 00       	jmp    c0006f3b <f_setlabel+0x265>
c0006d52:	89 c2                	mov    edx,eax
c0006d54:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d58:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d5b:	c1 ea 10             	shr    edx,0x10
c0006d5e:	01 c8                	add    eax,ecx
c0006d60:	43                   	inc    ebx
c0006d61:	e8 1d ad ff ff       	call   c0001a83 <st_word>
c0006d66:	eb 04                	jmp    c0006d6c <f_setlabel+0x96>
c0006d68:	85 c0                	test   eax,eax
c0006d6a:	74 dc                	je     c0006d48 <f_setlabel+0x72>
c0006d6c:	89 f2                	mov    edx,esi
c0006d6e:	b8 77 7d 02 c0       	mov    eax,0xc0027d77
c0006d73:	e8 5b ad ff ff       	call   c0001ad3 <chk_chr>
c0006d78:	85 c0                	test   eax,eax
c0006d7a:	75 cc                	jne    c0006d48 <f_setlabel+0x72>
c0006d7c:	83 fb 0a             	cmp    ebx,0xa
c0006d7f:	77 c7                	ja     c0006d48 <f_setlabel+0x72>
c0006d81:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d84:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d88:	0f b7 d6             	movzx  edx,si
c0006d8b:	01 c8                	add    eax,ecx
c0006d8d:	43                   	inc    ebx
c0006d8e:	e8 f0 ac ff ff       	call   c0001a83 <st_word>
c0006d93:	eb 84                	jmp    c0006d19 <f_setlabel+0x43>
c0006d95:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d9a:	ba 20 00 00 00       	mov    edx,0x20
c0006d9f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006da3:	31 db                	xor    ebx,ebx
c0006da5:	e8 fb ac ff ff       	call   c0001aa5 <mem_set>
c0006daa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006db1:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006db4:	76 60                	jbe    c0006e16 <f_setlabel+0x140>
c0006db6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006dbd:	e8 29 ad ff ff       	call   c0001aeb <tchar2uni>
c0006dc2:	3d ff ff 00 00       	cmp    eax,0xffff
c0006dc7:	0f 87 7b ff ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006dcd:	83 ec 0c             	sub    esp,0xc
c0006dd0:	50                   	push   eax
c0006dd1:	e8 97 15 00 00       	call   c000836d <ff_wtoupper>
c0006dd6:	5a                   	pop    edx
c0006dd7:	59                   	pop    ecx
c0006dd8:	68 b5 01 00 00       	push   0x1b5
c0006ddd:	50                   	push   eax
c0006dde:	e8 8e 14 00 00       	call   c0008271 <ff_uni2oem>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	89 c6                	mov    esi,eax
c0006de8:	66 85 c0             	test   ax,ax
c0006deb:	0f 84 57 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006df1:	0f b7 d0             	movzx  edx,ax
c0006df4:	b8 70 7d 02 c0       	mov    eax,0xc0027d70
c0006df9:	e8 d5 ac ff ff       	call   c0001ad3 <chk_chr>
c0006dfe:	85 c0                	test   eax,eax
c0006e00:	0f 85 42 ff ff ff    	jne    c0006d48 <f_setlabel+0x72>
c0006e06:	66 81 fe ff 00       	cmp    si,0xff
c0006e0b:	0f 87 14 01 00 00    	ja     c0006f25 <f_setlabel+0x24f>
c0006e11:	e9 fa 00 00 00       	jmp    c0006f10 <f_setlabel+0x23a>
c0006e16:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e1b:	0f 84 27 ff ff ff    	je     c0006d48 <f_setlabel+0x72>
c0006e21:	85 db                	test   ebx,ebx
c0006e23:	74 0e                	je     c0006e33 <f_setlabel+0x15d>
c0006e25:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e28:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e2d:	75 04                	jne    c0006e33 <f_setlabel+0x15d>
c0006e2f:	89 c3                	mov    ebx,eax
c0006e31:	eb ee                	jmp    c0006e21 <f_setlabel+0x14b>
c0006e33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e37:	31 d2                	xor    edx,edx
c0006e39:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e3d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e45:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e49:	e8 1f c1 ff ff       	call   c0002f6d <dir_sdi>
c0006e4e:	89 c6                	mov    esi,eax
c0006e50:	85 c0                	test   eax,eax
c0006e52:	0f 85 e3 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006e58:	ba 01 00 00 00       	mov    edx,0x1
c0006e5d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e61:	e8 17 c9 ff ff       	call   c000377d <dir_read>
c0006e66:	85 c0                	test   eax,eax
c0006e68:	75 21                	jne    c0006e8b <f_setlabel+0x1b5>
c0006e6a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e72:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e75:	74 5d                	je     c0006ed4 <f_setlabel+0x1fe>
c0006e77:	85 db                	test   ebx,ebx
c0006e79:	74 0b                	je     c0006e86 <f_setlabel+0x1b0>
c0006e7b:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e80:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e84:	eb 70                	jmp    c0006ef6 <f_setlabel+0x220>
c0006e86:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e89:	eb 70                	jmp    c0006efb <f_setlabel+0x225>
c0006e8b:	83 f8 04             	cmp    eax,0x4
c0006e8e:	75 7c                	jne    c0006f0c <f_setlabel+0x236>
c0006e90:	85 db                	test   ebx,ebx
c0006e92:	0f 84 a3 00 00 00    	je     c0006f3b <f_setlabel+0x265>
c0006e98:	ba 01 00 00 00       	mov    edx,0x1
c0006e9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006ea1:	e8 51 ca ff ff       	call   c00038f7 <dir_alloc>
c0006ea6:	89 c6                	mov    esi,eax
c0006ea8:	85 c0                	test   eax,eax
c0006eaa:	0f 85 8b 00 00 00    	jne    c0006f3b <f_setlabel+0x265>
c0006eb0:	31 d2                	xor    edx,edx
c0006eb2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006eb6:	b9 20 00 00 00       	mov    ecx,0x20
c0006ebb:	e8 e5 ab ff ff       	call   c0001aa5 <mem_set>
c0006ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ec4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ec7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ecb:	75 18                	jne    c0006ee5 <f_setlabel+0x20f>
c0006ecd:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ed0:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed4:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ed7:	b9 16 00 00 00       	mov    ecx,0x16
c0006edc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee0:	83 c0 02             	add    eax,0x2
c0006ee3:	eb 9b                	jmp    c0006e80 <f_setlabel+0x1aa>
c0006ee5:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006ee9:	b9 0b 00 00 00       	mov    ecx,0xb
c0006eee:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ef2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ef6:	e8 95 ab ff ff       	call   c0001a90 <mem_cpy>
c0006efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eff:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006f03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f07:	e8 0e d4 ff ff       	call   c000431a <sync_fs>
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	eb 2b                	jmp    c0006f3b <f_setlabel+0x265>
c0006f10:	83 fb 0a             	cmp    ebx,0xa
c0006f13:	0f 87 2f fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f19:	89 f0                	mov    eax,esi
c0006f1b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f1f:	43                   	inc    ebx
c0006f20:	e9 85 fe ff ff       	jmp    c0006daa <f_setlabel+0xd4>
c0006f25:	83 fb 09             	cmp    ebx,0x9
c0006f28:	0f 87 1a fe ff ff    	ja     c0006d48 <f_setlabel+0x72>
c0006f2e:	89 f0                	mov    eax,esi
c0006f30:	66 c1 e8 08          	shr    ax,0x8
c0006f34:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f38:	43                   	inc    ebx
c0006f39:	eb de                	jmp    c0006f19 <f_setlabel+0x243>
c0006f3b:	89 f0                	mov    eax,esi
c0006f3d:	83 c4 74             	add    esp,0x74
c0006f40:	5b                   	pop    ebx
c0006f41:	5e                   	pop    esi
c0006f42:	c3                   	ret    

c0006f43 <f_forward>:
c0006f43:	55                   	push   ebp
c0006f44:	57                   	push   edi
c0006f45:	56                   	push   esi
c0006f46:	53                   	push   ebx
c0006f47:	83 ec 2c             	sub    esp,0x2c
c0006f4a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f4e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f52:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f58:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f5c:	89 d8                	mov    eax,ebx
c0006f5e:	e8 b1 b1 ff ff       	call   c0002114 <validate>
c0006f63:	89 c5                	mov    ebp,eax
c0006f65:	85 c0                	test   eax,eax
c0006f67:	0f 85 aa 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f6d:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f71:	85 ed                	test   ebp,ebp
c0006f73:	0f 85 9e 01 00 00    	jne    c0007117 <f_forward+0x1d4>
c0006f79:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f7d:	0f 84 8f 01 00 00    	je     c0007112 <f_forward+0x1cf>
c0006f83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f89:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f8c:	bf 00 00 00 00       	mov    edi,0x0
c0006f91:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f94:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f98:	89 d1                	mov    ecx,edx
c0006f9a:	19 f9                	sbb    ecx,edi
c0006f9c:	0f 83 cf 00 00 00    	jae    c0007071 <f_forward+0x12e>
c0006fa2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006fa6:	e9 c6 00 00 00       	jmp    c0007071 <f_forward+0x12e>
c0006fab:	50                   	push   eax
c0006fac:	50                   	push   eax
c0006fad:	6a 00                	push   0x0
c0006faf:	6a 00                	push   0x0
c0006fb1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fb5:	83 c4 10             	add    esp,0x10
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	0f 84 57 01 00 00    	je     c0007117 <f_forward+0x1d4>
c0006fc0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fc3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fc7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fca:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fce:	89 d7                	mov    edi,edx
c0006fd0:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fd3:	89 c6                	mov    esi,eax
c0006fd5:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fd9:	21 ce                	and    esi,ecx
c0006fdb:	89 c1                	mov    ecx,eax
c0006fdd:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fe3:	0f 84 98 00 00 00    	je     c0007081 <f_forward+0x13e>
c0006fe9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fed:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006ff0:	89 c8                	mov    eax,ecx
c0006ff2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006ff6:	e8 af ac ff ff       	call   c0001caa <clst2sect>
c0006ffb:	89 d7                	mov    edi,edx
c0006ffd:	09 c7                	or     edi,eax
c0006fff:	0f 84 9e 00 00 00    	je     c00070a3 <f_forward+0x160>
c0007005:	31 ff                	xor    edi,edi
c0007007:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000700a:	01 c6                	add    esi,eax
c000700c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007010:	11 d7                	adc    edi,edx
c0007012:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007015:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007018:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000701c:	39 fa                	cmp    edx,edi
c000701e:	0f 85 a2 00 00 00    	jne    c00070c6 <f_forward+0x183>
c0007024:	39 f0                	cmp    eax,esi
c0007026:	0f 85 9a 00 00 00    	jne    c00070c6 <f_forward+0x183>
c000702c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000702f:	ba 00 02 00 00       	mov    edx,0x200
c0007034:	25 ff 01 00 00       	and    eax,0x1ff
c0007039:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000703d:	29 c2                	sub    edx,eax
c000703f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007042:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007045:	39 d1                	cmp    ecx,edx
c0007047:	76 02                	jbe    c000704b <f_forward+0x108>
c0007049:	89 d1                	mov    ecx,edx
c000704b:	8d 73 50             	lea    esi,[ebx+0x50]
c000704e:	52                   	push   edx
c000704f:	01 c6                	add    esi,eax
c0007051:	52                   	push   edx
c0007052:	51                   	push   ecx
c0007053:	56                   	push   esi
c0007054:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007058:	83 c4 10             	add    esp,0x10
c000705b:	85 c0                	test   eax,eax
c000705d:	74 44                	je     c00070a3 <f_forward+0x160>
c000705f:	31 ff                	xor    edi,edi
c0007061:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007064:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007067:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000706b:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c000706f:	01 07                	add    DWORD PTR [edi],eax
c0007071:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007076:	0f 85 2f ff ff ff    	jne    c0006fab <f_forward+0x68>
c000707c:	e9 96 00 00 00       	jmp    c0007117 <f_forward+0x1d4>
c0007081:	85 f6                	test   esi,esi
c0007083:	0f 85 60 ff ff ff    	jne    c0006fe9 <f_forward+0xa6>
c0007089:	89 d7                	mov    edi,edx
c000708b:	09 c7                	or     edi,eax
c000708d:	75 05                	jne    c0007094 <f_forward+0x151>
c000708f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007092:	eb 0a                	jmp    c000709e <f_forward+0x15b>
c0007094:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007097:	89 d8                	mov    eax,ebx
c0007099:	e8 d9 bc ff ff       	call   c0002d77 <get_fat>
c000709e:	83 f8 01             	cmp    eax,0x1
c00070a1:	77 0b                	ja     c00070ae <f_forward+0x16b>
c00070a3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00070a7:	bd 02 00 00 00       	mov    ebp,0x2
c00070ac:	eb 69                	jmp    c0007117 <f_forward+0x1d4>
c00070ae:	83 f8 ff             	cmp    eax,0xffffffff
c00070b1:	75 0b                	jne    c00070be <f_forward+0x17b>
c00070b3:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070b7:	bd 01 00 00 00       	mov    ebp,0x1
c00070bc:	eb 59                	jmp    c0007117 <f_forward+0x1d4>
c00070be:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070c1:	e9 23 ff ff ff       	jmp    c0006fe9 <f_forward+0xa6>
c00070c6:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070ca:	79 20                	jns    c00070ec <f_forward+0x1a9>
c00070cc:	83 ec 0c             	sub    esp,0xc
c00070cf:	6a 01                	push   0x1
c00070d1:	52                   	push   edx
c00070d2:	50                   	push   eax
c00070d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070d7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070db:	50                   	push   eax
c00070dc:	e8 fb a8 ff ff       	call   c00019dc <disk_write>
c00070e1:	83 c4 20             	add    esp,0x20
c00070e4:	85 c0                	test   eax,eax
c00070e6:	75 cb                	jne    c00070b3 <f_forward+0x170>
c00070e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070ec:	83 ec 0c             	sub    esp,0xc
c00070ef:	6a 01                	push   0x1
c00070f1:	57                   	push   edi
c00070f2:	56                   	push   esi
c00070f3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070fb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070ff:	50                   	push   eax
c0007100:	e8 c1 a8 ff ff       	call   c00019c6 <disk_read>
c0007105:	83 c4 20             	add    esp,0x20
c0007108:	85 c0                	test   eax,eax
c000710a:	0f 84 1c ff ff ff    	je     c000702c <f_forward+0xe9>
c0007110:	eb a1                	jmp    c00070b3 <f_forward+0x170>
c0007112:	bd 07 00 00 00       	mov    ebp,0x7
c0007117:	83 c4 2c             	add    esp,0x2c
c000711a:	89 e8                	mov    eax,ebp
c000711c:	5b                   	pop    ebx
c000711d:	5e                   	pop    esi
c000711e:	5f                   	pop    edi
c000711f:	5d                   	pop    ebp
c0007120:	c3                   	ret    

c0007121 <f_mkfs>:
c0007121:	55                   	push   ebp
c0007122:	57                   	push   edi
c0007123:	56                   	push   esi
c0007124:	53                   	push   ebx
c0007125:	bb 0b 00 00 00       	mov    ebx,0xb
c000712a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007130:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007137:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000713e:	e8 b0 ae ff ff       	call   c0001ff3 <get_ldnumber>
c0007143:	85 c0                	test   eax,eax
c0007145:	0f 88 ec 10 00 00    	js     c0008237 <f_mkfs+0x1116>
c000714b:	8b 14 85 20 c9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd36e0]
c0007152:	85 d2                	test   edx,edx
c0007154:	74 03                	je     c0007159 <f_mkfs+0x38>
c0007156:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007159:	85 f6                	test   esi,esi
c000715b:	75 05                	jne    c0007162 <f_mkfs+0x41>
c000715d:	be 60 7d 02 c0       	mov    esi,0xc0027d60
c0007162:	83 ec 0c             	sub    esp,0xc
c0007165:	0f b6 c0             	movzx  eax,al
c0007168:	bb 03 00 00 00       	mov    ebx,0x3
c000716d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007171:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007175:	e8 49 a8 ff ff       	call   c00019c3 <disk_initialize>
c000717a:	83 c4 10             	add    esp,0x10
c000717d:	a8 01                	test   al,0x1
c000717f:	0f 85 b2 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007185:	bb 0a 00 00 00       	mov    ebx,0xa
c000718a:	a8 04                	test   al,0x4
c000718c:	0f 85 a5 10 00 00    	jne    c0008237 <f_mkfs+0x1116>
c0007192:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007195:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007199:	85 c0                	test   eax,eax
c000719b:	75 20                	jne    c00071bd <f_mkfs+0x9c>
c000719d:	51                   	push   ecx
c000719e:	8d 44 24 78          	lea    eax,[esp+0x78]
c00071a2:	50                   	push   eax
c00071a3:	6a 03                	push   0x3
c00071a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071a9:	e8 44 a8 ff ff       	call   c00019f2 <disk_ioctl>
c00071ae:	83 c4 10             	add    esp,0x10
c00071b1:	85 c0                	test   eax,eax
c00071b3:	74 08                	je     c00071bd <f_mkfs+0x9c>
c00071b5:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071bd:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071c1:	8d 42 ff             	lea    eax,[edx-0x1]
c00071c4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071c9:	77 04                	ja     c00071cf <f_mkfs+0xae>
c00071cb:	85 c2                	test   edx,eax
c00071cd:	74 08                	je     c00071d7 <f_mkfs+0xb6>
c00071cf:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071d7:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071da:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c00071de:	48                   	dec    eax
c00071df:	3c 01                	cmp    al,0x1
c00071e1:	76 05                	jbe    c00071e8 <f_mkfs+0xc7>
c00071e3:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c00071e8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071ef:	48                   	dec    eax
c00071f0:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071f5:	77 07                	ja     c00071fe <f_mkfs+0xdd>
c00071f7:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071fc:	74 08                	je     c0007206 <f_mkfs+0xe5>
c00071fe:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007206:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007209:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000720f:	77 07                	ja     c0007218 <f_mkfs+0xf7>
c0007211:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007214:	85 d8                	test   eax,ebx
c0007216:	74 02                	je     c000721a <f_mkfs+0xf9>
c0007218:	31 db                	xor    ebx,ebx
c000721a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007225:	77 0a                	ja     c0007231 <f_mkfs+0x110>
c0007227:	bb 11 00 00 00       	mov    ebx,0x11
c000722c:	e9 06 10 00 00       	jmp    c0008237 <f_mkfs+0x1116>
c0007231:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007238:	8b 36                	mov    esi,DWORD PTR [esi]
c000723a:	85 ed                	test   ebp,ebp
c000723c:	75 1e                	jne    c000725c <f_mkfs+0x13b>
c000723e:	83 ec 0c             	sub    esp,0xc
c0007241:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007248:	25 00 fe ff ff       	and    eax,0xfffffe00
c000724d:	50                   	push   eax
c000724e:	e8 f1 0f 00 00       	call   c0008244 <ff_memalloc>
c0007253:	83 c4 10             	add    esp,0x10
c0007256:	89 c5                	mov    ebp,eax
c0007258:	85 c0                	test   eax,eax
c000725a:	74 cb                	je     c0007227 <f_mkfs+0x106>
c000725c:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007264:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000726c:	52                   	push   edx
c000726d:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007271:	50                   	push   eax
c0007272:	6a 01                	push   0x1
c0007274:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007278:	e8 75 a7 ff ff       	call   c00019f2 <disk_ioctl>
c000727d:	83 c4 10             	add    esp,0x10
c0007280:	85 c0                	test   eax,eax
c0007282:	0f 85 4a 0f 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007288:	89 f1                	mov    ecx,esi
c000728a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007292:	83 e1 0f             	and    ecx,0xf
c0007295:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000729d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00072a1:	83 e6 08             	and    esi,0x8
c00072a4:	75 56                	jne    c00072fc <f_mkfs+0x1db>
c00072a6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00072aa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072ae:	83 ff 00             	cmp    edi,0x0
c00072b1:	76 20                	jbe    c00072d3 <f_mkfs+0x1b2>
c00072b3:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072b8:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072c0:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072c6:	83 d7 ff             	adc    edi,0xffffffff
c00072c9:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072cd:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072d1:	eb 21                	jmp    c00072f4 <f_mkfs+0x1d3>
c00072d3:	ba 3f 00 00 00       	mov    edx,0x3f
c00072d8:	39 f2                	cmp    edx,esi
c00072da:	19 f8                	sbb    eax,edi
c00072dc:	73 1e                	jae    c00072fc <f_mkfs+0x1db>
c00072de:	83 c6 c1             	add    esi,0xffffffc1
c00072e1:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072e9:	83 d7 ff             	adc    edi,0xffffffff
c00072ec:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072f0:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072f4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072fc:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007300:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007304:	89 04 24             	mov    DWORD PTR [esp],eax
c0007307:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000730b:	31 c0                	xor    eax,eax
c000730d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007312:	89 c7                	mov    edi,eax
c0007314:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007317:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000731b:	0f 83 c5 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c0007321:	89 df                	mov    edi,ebx
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000732a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007331:	c1 ef 09             	shr    edi,0x9
c0007334:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007339:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000733d:	74 29                	je     c0007368 <f_mkfs+0x247>
c000733f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007345:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000734a:	0f 97 c2             	seta   dl
c000734d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007350:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007354:	0f 92 c0             	setb   al
c0007357:	08 c2                	or     dl,al
c0007359:	75 5b                	jne    c00073b6 <f_mkfs+0x295>
c000735b:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c000735f:	83 e0 07             	and    eax,0x7
c0007362:	3c 04                	cmp    al,0x4
c0007364:	74 50                	je     c00073b6 <f_mkfs+0x295>
c0007366:	eb 1b                	jmp    c0007383 <f_mkfs+0x262>
c0007368:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000736d:	0f 87 73 0a 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007373:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007379:	76 08                	jbe    c0007383 <f_mkfs+0x262>
c000737b:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007383:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007387:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000738b:	83 e0 01             	and    eax,0x1
c000738e:	80 e1 02             	and    cl,0x2
c0007391:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007395:	74 0d                	je     c00073a4 <f_mkfs+0x283>
c0007397:	84 c0                	test   al,al
c0007399:	0f 84 53 09 00 00    	je     c0007cf2 <f_mkfs+0xbd1>
c000739f:	e9 12 08 00 00       	jmp    c0007bb6 <f_mkfs+0xa95>
c00073a4:	bb 13 00 00 00       	mov    ebx,0x13
c00073a9:	84 c0                	test   al,al
c00073ab:	0f 85 05 08 00 00    	jne    c0007bb6 <f_mkfs+0xa95>
c00073b1:	e9 39 0e 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c00073b6:	31 c0                	xor    eax,eax
c00073b8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073bd:	89 c7                	mov    edi,eax
c00073bf:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073c2:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073c6:	0f 83 1a 0a 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00073cc:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073d2:	77 39                	ja     c000740d <f_mkfs+0x2ec>
c00073d4:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073d9:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073e1:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073e4:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073e8:	73 08                	jae    c00073f2 <f_mkfs+0x2d1>
c00073ea:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073f2:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073f7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073fa:	b8 00 00 00 00       	mov    eax,0x0
c00073ff:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007403:	73 08                	jae    c000740d <f_mkfs+0x2ec>
c0007405:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000740d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007411:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007415:	83 c0 20             	add    eax,0x20
c0007418:	83 d2 00             	adc    edx,0x0
c000741b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000741f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007423:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007427:	31 d2                	xor    edx,edx
c0007429:	31 ff                	xor    edi,edi
c000742b:	52                   	push   edx
c000742c:	89 fb                	mov    ebx,edi
c000742e:	50                   	push   eax
c000742f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007433:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007437:	e8 b0 df 01 00       	call   c00253ec <__udivdi3>
c000743c:	83 c4 10             	add    esp,0x10
c000743f:	c1 e0 02             	shl    eax,0x2
c0007442:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007446:	05 07 02 00 00       	add    eax,0x207
c000744b:	89 f1                	mov    ecx,esi
c000744d:	c1 e8 09             	shr    eax,0x9
c0007450:	83 c1 ff             	add    ecx,0xffffffff
c0007453:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007457:	83 d3 ff             	adc    ebx,0xffffffff
c000745a:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000745e:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007462:	31 d2                	xor    edx,edx
c0007464:	01 c8                	add    eax,ecx
c0007466:	11 da                	adc    edx,ebx
c0007468:	89 c1                	mov    ecx,eax
c000746a:	f7 de                	neg    esi
c000746c:	89 d0                	mov    eax,edx
c000746e:	83 d7 00             	adc    edi,0x0
c0007471:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007475:	f7 df                	neg    edi
c0007477:	21 f1                	and    ecx,esi
c0007479:	21 f8                	and    eax,edi
c000747b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000747f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007483:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007487:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000748b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000748f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007492:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007496:	0f ac d0 01          	shrd   eax,edx,0x1
c000749a:	89 df                	mov    edi,ebx
c000749c:	d1 ea                	shr    edx,1
c000749e:	39 c1                	cmp    ecx,eax
c00074a0:	19 d7                	sbb    edi,edx
c00074a2:	0f 83 3e 09 00 00    	jae    c0007de6 <f_mkfs+0xcc5>
c00074a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00074ac:	31 d2                	xor    edx,edx
c00074ae:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074b6:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ba:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074bd:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074c1:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074c5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074cd:	83 f8 0f             	cmp    eax,0xf
c00074d0:	0f 86 10 09 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c00074d6:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074de:	0f 87 02 09 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c00074e4:	31 d2                	xor    edx,edx
c00074e6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074ea:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074f2:	83 c0 07             	add    eax,0x7
c00074f5:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074fd:	c1 e8 03             	shr    eax,0x3
c0007500:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007507:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000750b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000750f:	c1 e0 09             	shl    eax,0x9
c0007512:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007516:	48                   	dec    eax
c0007517:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000751b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000751f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007523:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007527:	31 d2                	xor    edx,edx
c0007529:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000752d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007538:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000753d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007541:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007545:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007549:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000754d:	31 ff                	xor    edi,edi
c000754f:	31 f6                	xor    esi,esi
c0007551:	31 db                	xor    ebx,ebx
c0007553:	85 ff                	test   edi,edi
c0007555:	74 05                	je     c000755c <f_mkfs+0x43b>
c0007557:	4f                   	dec    edi
c0007558:	74 44                	je     c000759e <f_mkfs+0x47d>
c000755a:	eb 4f                	jmp    c00075ab <f_mkfs+0x48a>
c000755c:	83 ec 0c             	sub    esp,0xc
c000755f:	0f b7 c3             	movzx  eax,bx
c0007562:	50                   	push   eax
c0007563:	e8 05 0e 00 00       	call   c000836d <ff_wtoupper>
c0007568:	83 c4 10             	add    esp,0x10
c000756b:	89 c1                	mov    ecx,eax
c000756d:	8d 53 01             	lea    edx,[ebx+0x1]
c0007570:	66 39 c3             	cmp    bx,ax
c0007573:	75 3e                	jne    c00075b3 <f_mkfs+0x492>
c0007575:	be 01 00 00 00       	mov    esi,0x1
c000757a:	89 df                	mov    edi,ebx
c000757c:	66 01 f7             	add    di,si
c000757f:	75 07                	jne    c0007588 <f_mkfs+0x467>
c0007581:	83 fe 7f             	cmp    esi,0x7f
c0007584:	77 31                	ja     c00075b7 <f_mkfs+0x496>
c0007586:	eb 16                	jmp    c000759e <f_mkfs+0x47d>
c0007588:	83 ec 0c             	sub    esp,0xc
c000758b:	0f b7 ff             	movzx  edi,di
c000758e:	57                   	push   edi
c000758f:	e8 d9 0d 00 00       	call   c000836d <ff_wtoupper>
c0007594:	83 c4 10             	add    esp,0x10
c0007597:	39 c7                	cmp    edi,eax
c0007599:	75 e6                	jne    c0007581 <f_mkfs+0x460>
c000759b:	46                   	inc    esi
c000759c:	eb dc                	jmp    c000757a <f_mkfs+0x459>
c000759e:	31 c0                	xor    eax,eax
c00075a0:	89 d9                	mov    ecx,ebx
c00075a2:	4e                   	dec    esi
c00075a3:	0f 95 c0             	setne  al
c00075a6:	43                   	inc    ebx
c00075a7:	89 c7                	mov    edi,eax
c00075a9:	eb 14                	jmp    c00075bf <f_mkfs+0x49e>
c00075ab:	89 f1                	mov    ecx,esi
c00075ad:	01 f3                	add    ebx,esi
c00075af:	31 ff                	xor    edi,edi
c00075b1:	eb 0c                	jmp    c00075bf <f_mkfs+0x49e>
c00075b3:	89 d3                	mov    ebx,edx
c00075b5:	eb 08                	jmp    c00075bf <f_mkfs+0x49e>
c00075b7:	bf 02 00 00 00       	mov    edi,0x2
c00075bc:	83 c9 ff             	or     ecx,0xffffffff
c00075bf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c6:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075ca:	0f b6 c1             	movzx  eax,cl
c00075cd:	e8 3a a9 ff ff       	call   c0001f0c <xsum32>
c00075d2:	66 c1 e9 08          	shr    cx,0x8
c00075d6:	89 c2                	mov    edx,eax
c00075d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075db:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075df:	0f b7 c1             	movzx  eax,cx
c00075e2:	e8 25 a9 ff ff       	call   c0001f0c <xsum32>
c00075e7:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075ec:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075f0:	66 85 db             	test   bx,bx
c00075f3:	74 1f                	je     c0007614 <f_mkfs+0x4f3>
c00075f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075f8:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ff:	83 c0 02             	add    eax,0x2
c0007602:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007608:	39 c2                	cmp    edx,eax
c000760a:	74 08                	je     c0007614 <f_mkfs+0x4f3>
c000760c:	89 04 24             	mov    DWORD PTR [esp],eax
c000760f:	e9 3f ff ff ff       	jmp    c0007553 <f_mkfs+0x432>
c0007614:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007617:	83 ec 0c             	sub    esp,0xc
c000761a:	05 01 02 00 00       	add    eax,0x201
c000761f:	c1 e8 09             	shr    eax,0x9
c0007622:	50                   	push   eax
c0007623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007627:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000762f:	55                   	push   ebp
c0007630:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007634:	e8 a3 a3 ff ff       	call   c00019dc <disk_write>
c0007639:	83 c4 20             	add    esp,0x20
c000763c:	85 c0                	test   eax,eax
c000763e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007641:	0f 85 8b 0b 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007647:	89 d0                	mov    eax,edx
c0007649:	31 d2                	xor    edx,edx
c000764b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000764f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007653:	66 85 db             	test   bx,bx
c0007656:	74 04                	je     c000765c <f_mkfs+0x53b>
c0007658:	31 c0                	xor    eax,eax
c000765a:	eb b0                	jmp    c000760c <f_mkfs+0x4eb>
c000765c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007660:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007664:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007668:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766e:	31 d2                	xor    edx,edx
c0007670:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c000767b:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000767f:	c1 eb 09             	shr    ebx,0x9
c0007682:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007689:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000768d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007691:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007695:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007699:	8d 70 01             	lea    esi,[eax+0x1]
c000769c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076a0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00076a4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00076ab:	31 d2                	xor    edx,edx
c00076ad:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00076b5:	89 c1                	mov    ecx,eax
c00076b7:	89 e8                	mov    eax,ebp
c00076b9:	e8 e7 a3 ff ff       	call   c0001aa5 <mem_set>
c00076be:	31 c0                	xor    eax,eax
c00076c0:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076c3:	76 10                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076c5:	83 fe 07             	cmp    esi,0x7
c00076c8:	76 0b                	jbe    c00076d5 <f_mkfs+0x5b4>
c00076ca:	40                   	inc    eax
c00076cb:	83 ee 08             	sub    esi,0x8
c00076ce:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076d3:	eb eb                	jmp    c00076c0 <f_mkfs+0x59f>
c00076d5:	b2 01                	mov    dl,0x1
c00076d7:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076db:	85 f6                	test   esi,esi
c00076dd:	74 0c                	je     c00076eb <f_mkfs+0x5ca>
c00076df:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076e2:	76 07                	jbe    c00076eb <f_mkfs+0x5ca>
c00076e4:	08 11                	or     BYTE PTR [ecx],dl
c00076e6:	4e                   	dec    esi
c00076e7:	d1 e2                	shl    edx,1
c00076e9:	eb f0                	jmp    c00076db <f_mkfs+0x5ba>
c00076eb:	89 df                	mov    edi,ebx
c00076ed:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076f1:	76 04                	jbe    c00076f7 <f_mkfs+0x5d6>
c00076f3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076f7:	83 ec 0c             	sub    esp,0xc
c00076fa:	57                   	push   edi
c00076fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007703:	55                   	push   ebp
c0007704:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007708:	e8 cf a2 ff ff       	call   c00019dc <disk_write>
c000770d:	83 c4 20             	add    esp,0x20
c0007710:	85 c0                	test   eax,eax
c0007712:	0f 85 ba 0a 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007718:	31 d2                	xor    edx,edx
c000771a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000771e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007722:	29 fb                	sub    ebx,edi
c0007724:	0f 85 7a ff ff ff    	jne    c00076a4 <f_mkfs+0x583>
c000772a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000772e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007736:	31 f6                	xor    esi,esi
c0007738:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000773c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000773f:	31 d2                	xor    edx,edx
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 5d a3 ff ff       	call   c0001aa5 <mem_set>
c0007748:	31 c9                	xor    ecx,ecx
c000774a:	85 db                	test   ebx,ebx
c000774c:	75 40                	jne    c000778e <f_mkfs+0x66d>
c000774e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007753:	89 e8                	mov    eax,ebp
c0007755:	bb 02 00 00 00       	mov    ebx,0x2
c000775a:	e8 28 a3 ff ff       	call   c0001a87 <st_dword>
c000775f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007762:	83 ca ff             	or     edx,0xffffffff
c0007765:	e8 1d a3 ff ff       	call   c0001a87 <st_dword>
c000776a:	b9 08 00 00 00       	mov    ecx,0x8
c000776f:	eb 1d                	jmp    c000778e <f_mkfs+0x66d>
c0007771:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007774:	76 3b                	jbe    c00077b1 <f_mkfs+0x690>
c0007776:	43                   	inc    ebx
c0007777:	83 fe 01             	cmp    esi,0x1
c000777a:	89 da                	mov    edx,ebx
c000777c:	77 03                	ja     c0007781 <f_mkfs+0x660>
c000777e:	83 ca ff             	or     edx,0xffffffff
c0007781:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007785:	4e                   	dec    esi
c0007786:	e8 fc a2 ff ff       	call   c0001a87 <st_dword>
c000778b:	83 c1 04             	add    ecx,0x4
c000778e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007792:	85 f6                	test   esi,esi
c0007794:	75 db                	jne    c0007771 <f_mkfs+0x650>
c0007796:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c000779b:	77 14                	ja     c00077b1 <f_mkfs+0x690>
c000779d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00077a1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00077a8:	85 f6                	test   esi,esi
c00077aa:	74 05                	je     c00077b1 <f_mkfs+0x690>
c00077ac:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00077af:	77 dd                	ja     c000778e <f_mkfs+0x66d>
c00077b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00077b5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077b9:	39 cf                	cmp    edi,ecx
c00077bb:	76 02                	jbe    c00077bf <f_mkfs+0x69e>
c00077bd:	89 cf                	mov    edi,ecx
c00077bf:	83 ec 0c             	sub    esp,0xc
c00077c2:	57                   	push   edi
c00077c3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077c7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00077cb:	55                   	push   ebp
c00077cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077d0:	e8 07 a2 ff ff       	call   c00019dc <disk_write>
c00077d5:	83 c4 20             	add    esp,0x20
c00077d8:	85 c0                	test   eax,eax
c00077da:	0f 85 f2 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00077e0:	31 d2                	xor    edx,edx
c00077e2:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c00077e6:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c00077ea:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c00077ee:	0f 85 48 ff ff ff    	jne    c000773c <f_mkfs+0x61b>
c00077f4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077f7:	31 d2                	xor    edx,edx
c00077f9:	89 e8                	mov    eax,ebp
c00077fb:	31 ff                	xor    edi,edi
c00077fd:	e8 a3 a2 ff ff       	call   c0001aa5 <mem_set>
c0007802:	8d 45 34             	lea    eax,[ebp+0x34]
c0007805:	ba 02 00 00 00       	mov    edx,0x2
c000780a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000780e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007812:	e8 70 a2 ff ff       	call   c0001a87 <st_dword>
c0007817:	8d 45 38             	lea    eax,[ebp+0x38]
c000781a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000781e:	e8 64 a2 ff ff       	call   c0001a87 <st_dword>
c0007823:	8d 45 44             	lea    eax,[ebp+0x44]
c0007826:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000782a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000782e:	e8 54 a2 ff ff       	call   c0001a87 <st_dword>
c0007833:	8d 45 54             	lea    eax,[ebp+0x54]
c0007836:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000783a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783e:	83 c2 02             	add    edx,0x2
c0007841:	e8 41 a2 ff ff       	call   c0001a87 <st_dword>
c0007846:	8d 45 58             	lea    eax,[ebp+0x58]
c0007849:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000784d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007851:	e8 31 a2 ff ff       	call   c0001a87 <st_dword>
c0007856:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000785a:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000785f:	89 c6                	mov    esi,eax
c0007861:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007865:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007869:	89 04 24             	mov    DWORD PTR [esp],eax
c000786c:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007870:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007873:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007877:	39 cb                	cmp    ebx,ecx
c0007879:	76 02                	jbe    c000787d <f_mkfs+0x75c>
c000787b:	89 cb                	mov    ebx,ecx
c000787d:	83 ec 0c             	sub    esp,0xc
c0007880:	53                   	push   ebx
c0007881:	57                   	push   edi
c0007882:	56                   	push   esi
c0007883:	55                   	push   ebp
c0007884:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007888:	e8 4f a1 ff ff       	call   c00019dc <disk_write>
c000788d:	83 c4 20             	add    esp,0x20
c0007890:	85 c0                	test   eax,eax
c0007892:	0f 85 3a 09 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007898:	31 d2                	xor    edx,edx
c000789a:	b9 00 02 00 00       	mov    ecx,0x200
c000789f:	89 e8                	mov    eax,ebp
c00078a1:	e8 ff a1 ff ff       	call   c0001aa5 <mem_set>
c00078a6:	31 d2                	xor    edx,edx
c00078a8:	01 de                	add    esi,ebx
c00078aa:	11 d7                	adc    edi,edx
c00078ac:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00078af:	75 bf                	jne    c0007870 <f_mkfs+0x74f>
c00078b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078b5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078b9:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078c1:	b9 00 02 00 00       	mov    ecx,0x200
c00078c6:	31 d2                	xor    edx,edx
c00078c8:	89 e8                	mov    eax,ebp
c00078ca:	e8 d6 a1 ff ff       	call   c0001aa5 <mem_set>
c00078cf:	b9 0b 00 00 00       	mov    ecx,0xb
c00078d4:	ba 40 7e 02 c0       	mov    edx,0xc0027e40
c00078d9:	89 e8                	mov    eax,ebp
c00078db:	e8 b0 a1 ff ff       	call   c0001a90 <mem_cpy>
c00078e0:	8d 45 40             	lea    eax,[ebp+0x40]
c00078e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078eb:	e8 9a a1 ff ff       	call   c0001a8a <st_qword>
c00078f0:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078f4:	8d 45 48             	lea    eax,[ebp+0x48]
c00078f7:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078fb:	e8 8a a1 ff ff       	call   c0001a8a <st_qword>
c0007900:	8d 45 50             	lea    eax,[ebp+0x50]
c0007903:	ba 20 00 00 00       	mov    edx,0x20
c0007908:	e8 7a a1 ff ff       	call   c0001a87 <st_dword>
c000790d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007911:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007915:	e8 6d a1 ff ff       	call   c0001a87 <st_dword>
c000791a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000791e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007922:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007926:	e8 5c a1 ff ff       	call   c0001a87 <st_dword>
c000792b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000792e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007932:	e8 50 a1 ff ff       	call   c0001a87 <st_dword>
c0007937:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000793b:	8d 50 02             	lea    edx,[eax+0x2]
c000793e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007941:	e8 41 a1 ff ff       	call   c0001a87 <st_dword>
c0007946:	8d 45 64             	lea    eax,[ebp+0x64]
c0007949:	ba 00 00 21 50       	mov    edx,0x50210000
c000794e:	e8 34 a1 ff ff       	call   c0001a87 <st_dword>
c0007953:	8d 45 68             	lea    eax,[ebp+0x68]
c0007956:	ba 00 01 00 00       	mov    edx,0x100
c000795b:	e8 23 a1 ff ff       	call   c0001a83 <st_word>
c0007960:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007964:	b8 0a 00 00 00       	mov    eax,0xa
c0007969:	48                   	dec    eax
c000796a:	74 05                	je     c0007971 <f_mkfs+0x850>
c000796c:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000796f:	eb f8                	jmp    c0007969 <f_mkfs+0x848>
c0007971:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007975:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000797d:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007981:	74 05                	je     c0007988 <f_mkfs+0x867>
c0007983:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007986:	eb f5                	jmp    c000797d <f_mkfs+0x85c>
c0007988:	8d 45 78             	lea    eax,[ebp+0x78]
c000798b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007990:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007996:	31 db                	xor    ebx,ebx
c0007998:	e8 e6 a0 ff ff       	call   c0001a83 <st_word>
c000799d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00079a3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00079a8:	89 04 24             	mov    DWORD PTR [esp],eax
c00079ab:	e8 d3 a0 ff ff       	call   c0001a83 <st_word>
c00079b0:	31 c9                	xor    ecx,ecx
c00079b2:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079b5:	83 f8 01             	cmp    eax,0x1
c00079b8:	76 13                	jbe    c00079cd <f_mkfs+0x8ac>
c00079ba:	83 f9 70             	cmp    ecx,0x70
c00079bd:	74 0e                	je     c00079cd <f_mkfs+0x8ac>
c00079bf:	89 da                	mov    edx,ebx
c00079c1:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079c6:	e8 41 a5 ff ff       	call   c0001f0c <xsum32>
c00079cb:	89 c3                	mov    ebx,eax
c00079cd:	41                   	inc    ecx
c00079ce:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079d4:	75 dc                	jne    c00079b2 <f_mkfs+0x891>
c00079d6:	89 f0                	mov    eax,esi
c00079d8:	89 fa                	mov    edx,edi
c00079da:	83 c0 01             	add    eax,0x1
c00079dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079e1:	83 d2 00             	adc    edx,0x0
c00079e4:	83 ec 0c             	sub    esp,0xc
c00079e7:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00079eb:	6a 01                	push   0x1
c00079ed:	57                   	push   edi
c00079ee:	56                   	push   esi
c00079ef:	55                   	push   ebp
c00079f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079f4:	e8 e3 9f ff ff       	call   c00019dc <disk_write>
c00079f9:	83 c4 20             	add    esp,0x20
c00079fc:	85 c0                	test   eax,eax
c00079fe:	0f 85 ce 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a04:	31 d2                	xor    edx,edx
c0007a06:	b9 00 02 00 00       	mov    ecx,0x200
c0007a0b:	89 e8                	mov    eax,ebp
c0007a0d:	e8 93 a0 ff ff       	call   c0001aa5 <mem_set>
c0007a12:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a17:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a1a:	e8 64 a0 ff ff       	call   c0001a83 <st_word>
c0007a1f:	89 f0                	mov    eax,esi
c0007a21:	89 fa                	mov    edx,edi
c0007a23:	83 c0 09             	add    eax,0x9
c0007a26:	83 d2 00             	adc    edx,0x0
c0007a29:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a2c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a30:	31 c9                	xor    ecx,ecx
c0007a32:	41                   	inc    ecx
c0007a33:	89 da                	mov    edx,ebx
c0007a35:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a3a:	e8 cd a4 ff ff       	call   c0001f0c <xsum32>
c0007a3f:	89 c3                	mov    ebx,eax
c0007a41:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a47:	75 e9                	jne    c0007a32 <f_mkfs+0x911>
c0007a49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a4d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a51:	83 c0 01             	add    eax,0x1
c0007a54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a58:	83 d2 00             	adc    edx,0x0
c0007a5b:	83 ec 0c             	sub    esp,0xc
c0007a5e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007a62:	6a 01                	push   0x1
c0007a64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a68:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a6c:	55                   	push   ebp
c0007a6d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a71:	e8 66 9f ff ff       	call   c00019dc <disk_write>
c0007a76:	83 c4 20             	add    esp,0x20
c0007a79:	85 c0                	test   eax,eax
c0007a7b:	0f 85 51 07 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007a81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a85:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a89:	75 09                	jne    c0007a94 <f_mkfs+0x973>
c0007a8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a8e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a92:	74 12                	je     c0007aa6 <f_mkfs+0x985>
c0007a94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a98:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a9c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007aa0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007aa4:	eb 8a                	jmp    c0007a30 <f_mkfs+0x90f>
c0007aa6:	31 d2                	xor    edx,edx
c0007aa8:	b9 00 02 00 00       	mov    ecx,0x200
c0007aad:	89 e8                	mov    eax,ebp
c0007aaf:	e8 f1 9f ff ff       	call   c0001aa5 <mem_set>
c0007ab4:	83 c6 0b             	add    esi,0xb
c0007ab7:	83 d7 00             	adc    edi,0x0
c0007aba:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007abe:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ac2:	31 c9                	xor    ecx,ecx
c0007ac4:	41                   	inc    ecx
c0007ac5:	89 da                	mov    edx,ebx
c0007ac7:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007acc:	e8 3b a4 ff ff       	call   c0001f0c <xsum32>
c0007ad1:	89 c3                	mov    ebx,eax
c0007ad3:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ad9:	75 e9                	jne    c0007ac4 <f_mkfs+0x9a3>
c0007adb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ade:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ae2:	83 c6 01             	add    esi,0x1
c0007ae5:	83 d7 00             	adc    edi,0x0
c0007ae8:	83 ec 0c             	sub    esp,0xc
c0007aeb:	6a 01                	push   0x1
c0007aed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007af5:	55                   	push   ebp
c0007af6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007afa:	e8 dd 9e ff ff       	call   c00019dc <disk_write>
c0007aff:	83 c4 20             	add    esp,0x20
c0007b02:	85 c0                	test   eax,eax
c0007b04:	0f 85 c8 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b0a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007b0e:	75 06                	jne    c0007b16 <f_mkfs+0x9f5>
c0007b10:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b14:	74 09                	je     c0007b1f <f_mkfs+0x9fe>
c0007b16:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b19:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b1d:	eb a3                	jmp    c0007ac2 <f_mkfs+0x9a1>
c0007b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b23:	89 da                	mov    edx,ebx
c0007b25:	01 e8                	add    eax,ebp
c0007b27:	e8 5b 9f ff ff       	call   c0001a87 <st_dword>
c0007b2c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b31:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b39:	75 e4                	jne    c0007b1f <f_mkfs+0x9fe>
c0007b3b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b3e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b42:	83 c6 02             	add    esi,0x2
c0007b45:	83 d7 00             	adc    edi,0x0
c0007b48:	83 ec 0c             	sub    esp,0xc
c0007b4b:	6a 01                	push   0x1
c0007b4d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b51:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b55:	55                   	push   ebp
c0007b56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b5a:	e8 7d 9e ff ff       	call   c00019dc <disk_write>
c0007b5f:	83 c4 20             	add    esp,0x20
c0007b62:	85 c0                	test   eax,eax
c0007b64:	0f 85 68 06 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007b6a:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b6f:	74 0d                	je     c0007b7e <f_mkfs+0xa5d>
c0007b71:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b79:	e9 43 fd ff ff       	jmp    c00078c1 <f_mkfs+0x7a0>
c0007b7e:	b1 07                	mov    cl,0x7
c0007b80:	e9 e3 05 00 00       	jmp    c0008168 <f_mkfs+0x1047>
c0007b85:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b8a:	0f 85 4f 02 00 00    	jne    c0007ddf <f_mkfs+0xcbe>
c0007b90:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b95:	0f 86 22 02 00 00    	jbe    c0007dbd <f_mkfs+0xc9c>
c0007b9b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ba0:	0f 85 81 06 00 00    	jne    c0008227 <f_mkfs+0x1106>
c0007ba6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ba9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bad:	83 f8 40             	cmp    eax,0x40
c0007bb0:	0f 87 51 06 00 00    	ja     c0008207 <f_mkfs+0x10e6>
c0007bb6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007bba:	85 ff                	test   edi,edi
c0007bbc:	75 1c                	jne    c0007bda <f_mkfs+0xab9>
c0007bbe:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007bc1:	ba 40 7d 02 c0       	mov    edx,0xc0027d40
c0007bc6:	c1 e9 0c             	shr    ecx,0xc
c0007bc9:	bf 01 00 00 00       	mov    edi,0x1
c0007bce:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bd1:	66 85 c0             	test   ax,ax
c0007bd4:	0f 85 95 01 00 00    	jne    c0007d6f <f_mkfs+0xc4e>
c0007bda:	31 d2                	xor    edx,edx
c0007bdc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bdf:	f7 f7                	div    edi
c0007be1:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007be6:	0f 86 95 01 00 00    	jbe    c0007d81 <f_mkfs+0xc60>
c0007bec:	83 c0 02             	add    eax,0x2
c0007bef:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007bf4:	01 c0                	add    eax,eax
c0007bf6:	05 ff 01 00 00       	add    eax,0x1ff
c0007bfb:	be 01 00 00 00       	mov    esi,0x1
c0007c00:	c1 e8 09             	shr    eax,0x9
c0007c03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007c07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c0b:	c1 e0 05             	shl    eax,0x5
c0007c0e:	c1 e8 09             	shr    eax,0x9
c0007c11:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c15:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007c1a:	31 d2                	xor    edx,edx
c0007c1c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007c20:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007c24:	89 f0                	mov    eax,esi
c0007c26:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c2a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c2e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c3a:	31 d2                	xor    edx,edx
c0007c3c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007c41:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c45:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c49:	31 db                	xor    ebx,ebx
c0007c4b:	01 c8                	add    eax,ecx
c0007c4d:	11 da                	adc    edx,ebx
c0007c4f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c53:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c57:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c5b:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c5f:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c63:	f7 da                	neg    edx
c0007c65:	21 d1                	and    ecx,edx
c0007c67:	29 d9                	sub    ecx,ebx
c0007c69:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c6e:	0f 85 20 01 00 00    	jne    c0007d94 <f_mkfs+0xc73>
c0007c74:	31 db                	xor    ebx,ebx
c0007c76:	01 ce                	add    esi,ecx
c0007c78:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c7c:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c80:	31 d2                	xor    edx,edx
c0007c82:	89 f8                	mov    eax,edi
c0007c84:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c88:	c1 e0 04             	shl    eax,0x4
c0007c8b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c8f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c93:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c97:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c9b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c9e:	19 d3                	sbb    ebx,edx
c0007ca0:	0f 82 40 01 00 00    	jb     c0007de6 <f_mkfs+0xcc5>
c0007ca6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ca9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cad:	89 c8                	mov    eax,ecx
c0007caf:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007cb4:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007cb8:	29 f0                	sub    eax,esi
c0007cba:	29 d0                	sub    eax,edx
c0007cbc:	31 d2                	xor    edx,edx
c0007cbe:	f7 f7                	div    edi
c0007cc0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cc5:	89 c3                	mov    ebx,eax
c0007cc7:	0f 85 b8 fe ff ff    	jne    c0007b85 <f_mkfs+0xa64>
c0007ccd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cd2:	0f 87 1d 01 00 00    	ja     c0007df5 <f_mkfs+0xcd4>
c0007cd8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cdd:	0f 85 03 01 00 00    	jne    c0007de6 <f_mkfs+0xcc5>
c0007ce3:	83 ff 01             	cmp    edi,0x1
c0007ce6:	0f 86 fa 00 00 00    	jbe    c0007de6 <f_mkfs+0xcc5>
c0007cec:	d1 ef                	shr    edi,1
c0007cee:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007cf2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007cf6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007cf9:	85 db                	test   ebx,ebx
c0007cfb:	75 2d                	jne    c0007d2a <f_mkfs+0xc09>
c0007cfd:	89 cb                	mov    ebx,ecx
c0007cff:	ba 50 7d 02 c0       	mov    edx,0xc0027d50
c0007d04:	c1 eb 11             	shr    ebx,0x11
c0007d07:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007d0f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d12:	66 85 c0             	test   ax,ax
c0007d15:	74 11                	je     c0007d28 <f_mkfs+0xc07>
c0007d17:	83 c2 02             	add    edx,0x2
c0007d1a:	39 d8                	cmp    eax,ebx
c0007d1c:	77 0a                	ja     c0007d28 <f_mkfs+0xc07>
c0007d1e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d22:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d26:	eb e7                	jmp    c0007d0f <f_mkfs+0xbee>
c0007d28:	31 db                	xor    ebx,ebx
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	89 c8                	mov    eax,ecx
c0007d2e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d32:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d39:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d3e:	c1 ea 09             	shr    edx,0x9
c0007d41:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d46:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d4a:	0f 87 96 00 00 00    	ja     c0007de6 <f_mkfs+0xcc5>
c0007d50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d54:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007d5c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d60:	be 20 00 00 00       	mov    esi,0x20
c0007d65:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d6a:	e9 a6 fe ff ff       	jmp    c0007c15 <f_mkfs+0xaf4>
c0007d6f:	83 c2 02             	add    edx,0x2
c0007d72:	39 c8                	cmp    eax,ecx
c0007d74:	0f 87 60 fe ff ff    	ja     c0007bda <f_mkfs+0xab9>
c0007d7a:	01 ff                	add    edi,edi
c0007d7c:	e9 4d fe ff ff       	jmp    c0007bce <f_mkfs+0xaad>
c0007d81:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d84:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d89:	40                   	inc    eax
c0007d8a:	d1 e8                	shr    eax,1
c0007d8c:	83 c0 03             	add    eax,0x3
c0007d8f:	e9 62 fe ff ff       	jmp    c0007bf6 <f_mkfs+0xad5>
c0007d94:	31 d2                	xor    edx,edx
c0007d96:	89 c8                	mov    eax,ecx
c0007d98:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d9c:	85 d2                	test   edx,edx
c0007d9e:	74 0c                	je     c0007dac <f_mkfs+0xc8b>
c0007da0:	49                   	dec    ecx
c0007da1:	46                   	inc    esi
c0007da2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007da7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007dac:	89 c8                	mov    eax,ecx
c0007dae:	31 d2                	xor    edx,edx
c0007db0:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007db4:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007db8:	e9 c3 fe ff ff       	jmp    c0007c80 <f_mkfs+0xb5f>
c0007dbd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dc2:	77 31                	ja     c0007df5 <f_mkfs+0xcd4>
c0007dc4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dc9:	75 1b                	jne    c0007de6 <f_mkfs+0xcc5>
c0007dcb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dd2:	3d 80 00 00 00       	cmp    eax,0x80
c0007dd7:	0f 86 d9 fd ff ff    	jbe    c0007bb6 <f_mkfs+0xa95>
c0007ddd:	eb 07                	jmp    c0007de6 <f_mkfs+0xcc5>
c0007ddf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007de4:	76 0a                	jbe    c0007df0 <f_mkfs+0xccf>
c0007de6:	bb 0e 00 00 00       	mov    ebx,0xe
c0007deb:	e9 ff 03 00 00       	jmp    c00081ef <f_mkfs+0x10ce>
c0007df0:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007df5:	31 d2                	xor    edx,edx
c0007df7:	b9 00 02 00 00       	mov    ecx,0x200
c0007dfc:	89 e8                	mov    eax,ebp
c0007dfe:	e8 a2 9c ff ff       	call   c0001aa5 <mem_set>
c0007e03:	b9 0b 00 00 00       	mov    ecx,0xb
c0007e08:	ba 62 7e 02 c0       	mov    edx,0xc0027e62
c0007e0d:	89 e8                	mov    eax,ebp
c0007e0f:	e8 7c 9c ff ff       	call   c0001a90 <mem_cpy>
c0007e14:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e17:	ba 00 02 00 00       	mov    edx,0x200
c0007e1c:	e8 62 9c ff ff       	call   c0001a83 <st_word>
c0007e21:	89 f8                	mov    eax,edi
c0007e23:	0f b7 d6             	movzx  edx,si
c0007e26:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e29:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e2c:	e8 52 9c ff ff       	call   c0001a83 <st_word>
c0007e31:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007e35:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e3a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e3d:	75 08                	jne    c0007e47 <f_mkfs+0xd26>
c0007e3f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e47:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e4e:	e8 30 9c ff ff       	call   c0001a83 <st_word>
c0007e53:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e58:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e5c:	39 d0                	cmp    eax,edx
c0007e5e:	b8 00 00 00 00       	mov    eax,0x0
c0007e63:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e67:	72 0a                	jb     c0007e73 <f_mkfs+0xd52>
c0007e69:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e6c:	e8 12 9c ff ff       	call   c0001a83 <st_word>
c0007e71:	eb 08                	jmp    c0007e7b <f_mkfs+0xd5a>
c0007e73:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e76:	e8 0c 9c ff ff       	call   c0001a87 <st_dword>
c0007e7b:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e7e:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e83:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e87:	e8 f7 9b ff ff       	call   c0001a83 <st_word>
c0007e8c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e8f:	ba ff 00 00 00       	mov    edx,0xff
c0007e94:	e8 ea 9b ff ff       	call   c0001a83 <st_word>
c0007e99:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007ea0:	e8 e2 9b ff ff       	call   c0001a87 <st_dword>
c0007ea5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eaa:	75 57                	jne    c0007f03 <f_mkfs+0xde2>
c0007eac:	8d 45 43             	lea    eax,[ebp+0x43]
c0007eaf:	ba 00 00 21 50       	mov    edx,0x50210000
c0007eb4:	e8 ce 9b ff ff       	call   c0001a87 <st_dword>
c0007eb9:	8d 45 24             	lea    eax,[ebp+0x24]
c0007ebc:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ec0:	e8 c2 9b ff ff       	call   c0001a87 <st_dword>
c0007ec5:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007ec8:	ba 02 00 00 00       	mov    edx,0x2
c0007ecd:	e8 b5 9b ff ff       	call   c0001a87 <st_dword>
c0007ed2:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ed5:	ba 01 00 00 00       	mov    edx,0x1
c0007eda:	e8 a4 9b ff ff       	call   c0001a83 <st_word>
c0007edf:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ee2:	ba 06 00 00 00       	mov    edx,0x6
c0007ee7:	e8 97 9b ff ff       	call   c0001a83 <st_word>
c0007eec:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ef0:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ef4:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ef7:	b9 13 00 00 00       	mov    ecx,0x13
c0007efc:	ba 6e 7e 02 c0       	mov    edx,0xc0027e6e
c0007f01:	eb 2f                	jmp    c0007f32 <f_mkfs+0xe11>
c0007f03:	8d 45 27             	lea    eax,[ebp+0x27]
c0007f06:	ba 00 00 21 50       	mov    edx,0x50210000
c0007f0b:	e8 77 9b ff ff       	call   c0001a87 <st_dword>
c0007f10:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f15:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f18:	e8 66 9b ff ff       	call   c0001a83 <st_word>
c0007f1d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f21:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f25:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f28:	b9 13 00 00 00       	mov    ecx,0x13
c0007f2d:	ba 82 7e 02 c0       	mov    edx,0xc0027e82
c0007f32:	e8 59 9b ff ff       	call   c0001a90 <mem_cpy>
c0007f37:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f42:	89 f0                	mov    eax,esi
c0007f44:	e8 3a 9b ff ff       	call   c0001a83 <st_word>
c0007f49:	83 ec 0c             	sub    esp,0xc
c0007f4c:	6a 01                	push   0x1
c0007f4e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f52:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f56:	55                   	push   ebp
c0007f57:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5b:	e8 7c 9a ff ff       	call   c00019dc <disk_write>
c0007f60:	83 c4 20             	add    esp,0x20
c0007f63:	85 c0                	test   eax,eax
c0007f65:	0f 85 67 02 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0007f6b:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f70:	0f 85 b7 00 00 00    	jne    c000802d <f_mkfs+0xf0c>
c0007f76:	83 ec 0c             	sub    esp,0xc
c0007f79:	6a 01                	push   0x1
c0007f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f83:	83 c0 06             	add    eax,0x6
c0007f86:	83 d2 00             	adc    edx,0x0
c0007f89:	52                   	push   edx
c0007f8a:	50                   	push   eax
c0007f8b:	55                   	push   ebp
c0007f8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f90:	e8 47 9a ff ff       	call   c00019dc <disk_write>
c0007f95:	83 c4 20             	add    esp,0x20
c0007f98:	b9 00 02 00 00       	mov    ecx,0x200
c0007f9d:	31 d2                	xor    edx,edx
c0007f9f:	89 e8                	mov    eax,ebp
c0007fa1:	e8 ff 9a ff ff       	call   c0001aa5 <mem_set>
c0007fa6:	ba 52 52 61 41       	mov    edx,0x41615252
c0007fab:	89 e8                	mov    eax,ebp
c0007fad:	e8 d5 9a ff ff       	call   c0001a87 <st_dword>
c0007fb2:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fb8:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fbd:	e8 c5 9a ff ff       	call   c0001a87 <st_dword>
c0007fc2:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fc5:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fcb:	e8 b7 9a ff ff       	call   c0001a87 <st_dword>
c0007fd0:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fd6:	ba 02 00 00 00       	mov    edx,0x2
c0007fdb:	e8 a7 9a ff ff       	call   c0001a87 <st_dword>
c0007fe0:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fe5:	89 f0                	mov    eax,esi
c0007fe7:	e8 97 9a ff ff       	call   c0001a83 <st_word>
c0007fec:	83 ec 0c             	sub    esp,0xc
c0007fef:	6a 01                	push   0x1
c0007ff1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ff5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ff9:	83 c0 07             	add    eax,0x7
c0007ffc:	83 d2 00             	adc    edx,0x0
c0007fff:	52                   	push   edx
c0008000:	50                   	push   eax
c0008001:	55                   	push   ebp
c0008002:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008006:	e8 d1 99 ff ff       	call   c00019dc <disk_write>
c000800b:	83 c4 14             	add    esp,0x14
c000800e:	6a 01                	push   0x1
c0008010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008018:	83 c0 01             	add    eax,0x1
c000801b:	83 d2 00             	adc    edx,0x0
c000801e:	52                   	push   edx
c000801f:	50                   	push   eax
c0008020:	55                   	push   ebp
c0008021:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008025:	e8 b2 99 ff ff       	call   c00019dc <disk_write>
c000802a:	83 c4 20             	add    esp,0x20
c000802d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008034:	31 d2                	xor    edx,edx
c0008036:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000803c:	31 db                	xor    ebx,ebx
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 60 9a ff ff       	call   c0001aa5 <mem_set>
c0008045:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000804a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008051:	0f 94 c3             	sete   bl
c0008054:	4b                   	dec    ebx
c0008055:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000805b:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008061:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008066:	75 21                	jne    c0008089 <f_mkfs+0xf68>
c0008068:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000806d:	89 e8                	mov    eax,ebp
c000806f:	e8 13 9a ff ff       	call   c0001a87 <st_dword>
c0008074:	8d 45 04             	lea    eax,[ebp+0x4]
c0008077:	83 ca ff             	or     edx,0xffffffff
c000807a:	e8 08 9a ff ff       	call   c0001a87 <st_dword>
c000807f:	8d 45 08             	lea    eax,[ebp+0x8]
c0008082:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008087:	eb 04                	jmp    c000808d <f_mkfs+0xf6c>
c0008089:	89 da                	mov    edx,ebx
c000808b:	89 e8                	mov    eax,ebp
c000808d:	e8 f5 99 ff ff       	call   c0001a87 <st_dword>
c0008092:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008096:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000809a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000809e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00080a2:	39 ce                	cmp    esi,ecx
c00080a4:	76 02                	jbe    c00080a8 <f_mkfs+0xf87>
c00080a6:	89 ce                	mov    esi,ecx
c00080a8:	83 ec 0c             	sub    esp,0xc
c00080ab:	56                   	push   esi
c00080ac:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080b4:	55                   	push   ebp
c00080b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080b9:	e8 1e 99 ff ff       	call   c00019dc <disk_write>
c00080be:	83 c4 20             	add    esp,0x20
c00080c1:	85 c0                	test   eax,eax
c00080c3:	0f 85 09 01 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c00080c9:	31 d2                	xor    edx,edx
c00080cb:	b9 00 02 00 00       	mov    ecx,0x200
c00080d0:	89 e8                	mov    eax,ebp
c00080d2:	e8 ce 99 ff ff       	call   c0001aa5 <mem_set>
c00080d7:	31 d2                	xor    edx,edx
c00080d9:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080dd:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080e1:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080e5:	75 b3                	jne    c000809a <f_mkfs+0xf79>
c00080e7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080ea:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080f1:	40                   	inc    eax
c00080f2:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c00080f6:	0f 87 65 ff ff ff    	ja     c0008061 <f_mkfs+0xf40>
c00080fc:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008101:	74 04                	je     c0008107 <f_mkfs+0xfe6>
c0008103:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008107:	89 fb                	mov    ebx,edi
c0008109:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000810d:	76 04                	jbe    c0008113 <f_mkfs+0xff2>
c000810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008113:	83 ec 0c             	sub    esp,0xc
c0008116:	53                   	push   ebx
c0008117:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000811f:	55                   	push   ebp
c0008120:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008124:	e8 b3 98 ff ff       	call   c00019dc <disk_write>
c0008129:	83 c4 20             	add    esp,0x20
c000812c:	85 c0                	test   eax,eax
c000812e:	0f 85 9e 00 00 00    	jne    c00081d2 <f_mkfs+0x10b1>
c0008134:	31 d2                	xor    edx,edx
c0008136:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000813a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000813e:	29 df                	sub    edi,ebx
c0008140:	75 c5                	jne    c0008107 <f_mkfs+0xfe6>
c0008142:	b1 0c                	mov    cl,0xc
c0008144:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008149:	74 1d                	je     c0008168 <f_mkfs+0x1047>
c000814b:	b8 ff ff 00 00       	mov    eax,0xffff
c0008150:	b1 06                	mov    cl,0x6
c0008152:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008156:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000815a:	72 0c                	jb     c0008168 <f_mkfs+0x1047>
c000815c:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008161:	0f 94 c1             	sete   cl
c0008164:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008168:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000816d:	75 4c                	jne    c00081bb <f_mkfs+0x109a>
c000816f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008173:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008177:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000817e:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008185:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008190:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000819b:	0f b6 c9             	movzx  ecx,cl
c000819e:	83 ec 0c             	sub    esp,0xc
c00081a1:	55                   	push   ebp
c00081a2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	e8 2f c2 ff ff       	call   c00043e1 <create_partition>
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	89 c3                	mov    ebx,eax
c00081b7:	85 c0                	test   eax,eax
c00081b9:	75 34                	jne    c00081ef <f_mkfs+0x10ce>
c00081bb:	31 db                	xor    ebx,ebx
c00081bd:	50                   	push   eax
c00081be:	6a 00                	push   0x0
c00081c0:	6a 00                	push   0x0
c00081c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081c6:	e8 27 98 ff ff       	call   c00019f2 <disk_ioctl>
c00081cb:	83 c4 10             	add    esp,0x10
c00081ce:	85 c0                	test   eax,eax
c00081d0:	74 1d                	je     c00081ef <f_mkfs+0x10ce>
c00081d2:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081da:	75 0c                	jne    c00081e8 <f_mkfs+0x10c7>
c00081dc:	83 ec 0c             	sub    esp,0xc
c00081df:	55                   	push   ebp
c00081e0:	e8 75 00 00 00       	call   c000825a <ff_memfree>
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	bb 01 00 00 00       	mov    ebx,0x1
c00081ed:	eb 48                	jmp    c0008237 <f_mkfs+0x1116>
c00081ef:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081f7:	75 3e                	jne    c0008237 <f_mkfs+0x1116>
c00081f9:	83 ec 0c             	sub    esp,0xc
c00081fc:	55                   	push   ebp
c00081fd:	e8 58 00 00 00       	call   c000825a <ff_memfree>
c0008202:	83 c4 10             	add    esp,0x10
c0008205:	eb 30                	jmp    c0008237 <f_mkfs+0x1116>
c0008207:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000820c:	0f 85 eb fa ff ff    	jne    c0007cfd <f_mkfs+0xbdc>
c0008212:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008216:	81 ff 80 00 00 00    	cmp    edi,0x80
c000821c:	0f 86 b8 f9 ff ff    	jbe    c0007bda <f_mkfs+0xab9>
c0008222:	e9 bf fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008227:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000822c:	0f 85 c0 fa ff ff    	jne    c0007cf2 <f_mkfs+0xbd1>
c0008232:	e9 af fb ff ff       	jmp    c0007de6 <f_mkfs+0xcc5>
c0008237:	81 c4 9c 00 00 00    	add    esp,0x9c
c000823d:	89 d8                	mov    eax,ebx
c000823f:	5b                   	pop    ebx
c0008240:	5e                   	pop    esi
c0008241:	5f                   	pop    edi
c0008242:	5d                   	pop    ebp
c0008243:	c3                   	ret    

c0008244 <ff_memalloc>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 81 72 00 00       	call   c000f4d4 <malloc>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 c4 0c             	add    esp,0xc
c0008259:	c3                   	ret    

c000825a <ff_memfree>:
c000825a:	83 ec 0c             	sub    esp,0xc
c000825d:	83 ec 0c             	sub    esp,0xc
c0008260:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008264:	e8 7b 72 00 00       	call   c000f4e4 <free>
c0008269:	83 c4 10             	add    esp,0x10
c000826c:	90                   	nop
c000826d:	83 c4 0c             	add    esp,0xc
c0008270:	c3                   	ret    

c0008271 <ff_uni2oem>:
c0008271:	83 ec 14             	sub    esp,0x14
c0008274:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008278:	66 89 04 24          	mov    WORD PTR [esp],ax
c000827c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008283:	c7 44 24 0c a0 81 02 c0 	mov    DWORD PTR [esp+0xc],0xc00281a0
c000828b:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008290:	77 0b                	ja     c000829d <ff_uni2oem+0x2c>
c0008292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008296:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000829b:	eb 5b                	jmp    c00082f8 <ff_uni2oem+0x87>
c000829d:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00082a5:	77 51                	ja     c00082f8 <ff_uni2oem+0x87>
c00082a7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ad:	75 49                	jne    c00082f8 <ff_uni2oem+0x87>
c00082af:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082b6:	eb 0b                	jmp    c00082c3 <ff_uni2oem+0x52>
c00082b8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082bd:	40                   	inc    eax
c00082be:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082c3:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082c9:	77 1b                	ja     c00082e6 <ff_uni2oem+0x75>
c00082cb:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c00082d0:	01 c0                	add    eax,eax
c00082d2:	89 c2                	mov    edx,eax
c00082d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082d8:	01 d0                	add    eax,edx
c00082da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dd:	0f b7 c0             	movzx  eax,ax
c00082e0:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082e4:	75 d2                	jne    c00082b8 <ff_uni2oem+0x47>
c00082e6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082eb:	83 e8 80             	sub    eax,0xffffff80
c00082ee:	25 ff 00 00 00       	and    eax,0xff
c00082f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082f8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082fd:	83 c4 14             	add    esp,0x14
c0008300:	c3                   	ret    

c0008301 <ff_oem2uni>:
c0008301:	83 ec 18             	sub    esp,0x18
c0008304:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008308:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000830c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008311:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008315:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000831c:	c7 44 24 10 a0 81 02 c0 	mov    DWORD PTR [esp+0x10],0xc00281a0
c0008324:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000832a:	77 0b                	ja     c0008337 <ff_oem2uni+0x36>
c000832c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008330:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008335:	eb 2d                	jmp    c0008364 <ff_oem2uni+0x63>
c0008337:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000833d:	75 25                	jne    c0008364 <ff_oem2uni+0x63>
c000833f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008346:	77 1c                	ja     c0008364 <ff_oem2uni+0x63>
c0008348:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000834d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008352:	01 c0                	add    eax,eax
c0008354:	89 c2                	mov    edx,eax
c0008356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000835a:	01 d0                	add    eax,edx
c000835c:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835f:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008364:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008369:	83 c4 18             	add    esp,0x18
c000836c:	c3                   	ret    

c000836d <ff_wtoupper>:
c000836d:	83 ec 10             	sub    esp,0x10
c0008370:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008378:	0f 87 3e 01 00 00    	ja     c00084bc <ff_wtoupper+0x14f>
c000837e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008382:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008387:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000838e:	77 07                	ja     c0008397 <ff_wtoupper+0x2a>
c0008390:	b8 a0 7f 02 c0       	mov    eax,0xc0027fa0
c0008395:	eb 05                	jmp    c000839c <ff_wtoupper+0x2f>
c0008397:	b8 e0 7e 02 c0       	mov    eax,0xc0027ee0
c000839c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	8d 50 02             	lea    edx,[eax+0x2]
c00083a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083ab:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083ae:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083b3:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b9:	0f 84 f4 00 00 00    	je     c00084b3 <ff_wtoupper+0x146>
c00083bf:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083c4:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c9:	0f 82 e4 00 00 00    	jb     c00084b3 <ff_wtoupper+0x146>
c00083cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083d3:	8d 50 02             	lea    edx,[eax+0x2]
c00083d6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083da:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083dd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083e2:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083e7:	66 c1 e8 08          	shr    ax,0x8
c00083eb:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083f0:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083f7:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00083fc:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008401:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008406:	01 ca                	add    edx,ecx
c0008408:	39 d0                	cmp    eax,edx
c000840a:	0f 8d 86 00 00 00    	jge    c0008496 <ff_wtoupper+0x129>
c0008410:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008415:	83 f8 08             	cmp    eax,0x8
c0008418:	0f 87 94 00 00 00    	ja     c00084b2 <ff_wtoupper+0x145>
c000841e:	8b 04 85 a0 7e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8160]
c0008425:	ff e0                	jmp    eax
c0008427:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000842c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008431:	29 c2                	sub    edx,eax
c0008433:	89 d0                	mov    eax,edx
c0008435:	01 c0                	add    eax,eax
c0008437:	89 c2                	mov    edx,eax
c0008439:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000843d:	01 d0                	add    eax,edx
c000843f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008442:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008447:	eb 4b                	jmp    c0008494 <ff_wtoupper+0x127>
c0008449:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000844e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008452:	83 e0 01             	and    eax,0x1
c0008455:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000845a:	eb 38                	jmp    c0008494 <ff_wtoupper+0x127>
c000845c:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008462:	eb 30                	jmp    c0008494 <ff_wtoupper+0x127>
c0008464:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000846a:	eb 28                	jmp    c0008494 <ff_wtoupper+0x127>
c000846c:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008472:	eb 20                	jmp    c0008494 <ff_wtoupper+0x127>
c0008474:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000847a:	eb 18                	jmp    c0008494 <ff_wtoupper+0x127>
c000847c:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008482:	eb 10                	jmp    c0008494 <ff_wtoupper+0x127>
c0008484:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000848a:	eb 08                	jmp    c0008494 <ff_wtoupper+0x127>
c000848c:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008493:	90                   	nop
c0008494:	eb 1c                	jmp    c00084b2 <ff_wtoupper+0x145>
c0008496:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000849c:	0f 85 fe fe ff ff    	jne    c00083a0 <ff_wtoupper+0x33>
c00084a2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00084a7:	01 c0                	add    eax,eax
c00084a9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084ad:	e9 ee fe ff ff       	jmp    c00083a0 <ff_wtoupper+0x33>
c00084b2:	90                   	nop
c00084b3:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00084b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084c0:	83 c4 10             	add    esp,0x10
c00084c3:	c3                   	ret    

c00084c4 <psrc_set_converter>:
c00084c4:	56                   	push   esi
c00084c5:	89 d6                	mov    esi,edx
c00084c7:	53                   	push   ebx
c00084c8:	89 c3                	mov    ebx,eax
c00084ca:	83 ec 0c             	sub    esp,0xc
c00084cd:	52                   	push   edx
c00084ce:	50                   	push   eax
c00084cf:	e8 6f 55 00 00       	call   c000da43 <sinc_set_converter>
c00084d4:	83 c4 10             	add    esp,0x10
c00084d7:	85 c0                	test   eax,eax
c00084d9:	74 25                	je     c0008500 <psrc_set_converter+0x3c>
c00084db:	50                   	push   eax
c00084dc:	50                   	push   eax
c00084dd:	56                   	push   esi
c00084de:	53                   	push   ebx
c00084df:	e8 17 5d 00 00       	call   c000e1fb <zoh_set_converter>
c00084e4:	83 c4 10             	add    esp,0x10
c00084e7:	85 c0                	test   eax,eax
c00084e9:	74 15                	je     c0008500 <psrc_set_converter+0x3c>
c00084eb:	51                   	push   ecx
c00084ec:	51                   	push   ecx
c00084ed:	56                   	push   esi
c00084ee:	53                   	push   ebx
c00084ef:	e8 0f 11 00 00       	call   c0009603 <linear_set_converter>
c00084f4:	83 c4 10             	add    esp,0x10
c00084f7:	ba 0a 00 00 00       	mov    edx,0xa
c00084fc:	85 c0                	test   eax,eax
c00084fe:	75 02                	jne    c0008502 <psrc_set_converter+0x3e>
c0008500:	31 d2                	xor    edx,edx
c0008502:	89 d0                	mov    eax,edx
c0008504:	5a                   	pop    edx
c0008505:	5b                   	pop    ebx
c0008506:	5e                   	pop    esi
c0008507:	c3                   	ret    

c0008508 <src_delete>:
c0008508:	53                   	push   ebx
c0008509:	83 ec 08             	sub    esp,0x8
c000850c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008510:	85 db                	test   ebx,ebx
c0008512:	74 29                	je     c000853d <src_delete+0x35>
c0008514:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008517:	85 c0                	test   eax,eax
c0008519:	74 0c                	je     c0008527 <src_delete+0x1f>
c000851b:	83 ec 0c             	sub    esp,0xc
c000851e:	50                   	push   eax
c000851f:	e8 c0 6f 00 00       	call   c000f4e4 <free>
c0008524:	83 c4 10             	add    esp,0x10
c0008527:	50                   	push   eax
c0008528:	6a 3c                	push   0x3c
c000852a:	6a 00                	push   0x0
c000852c:	53                   	push   ebx
c000852d:	e8 59 81 ff ff       	call   c000068b <memset>
c0008532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008535:	e8 aa 6f 00 00       	call   c000f4e4 <free>
c000853a:	83 c4 10             	add    esp,0x10
c000853d:	31 c0                	xor    eax,eax
c000853f:	83 c4 08             	add    esp,0x8
c0008542:	5b                   	pop    ebx
c0008543:	c3                   	ret    

c0008544 <src_process>:
c0008544:	55                   	push   ebp
c0008545:	57                   	push   edi
c0008546:	56                   	push   esi
c0008547:	53                   	push   ebx
c0008548:	83 ec 1c             	sub    esp,0x1c
c000854b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000854f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008553:	85 ed                	test   ebp,ebp
c0008555:	0f 84 6f 01 00 00    	je     c00086ca <src_process+0x186>
c000855b:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c000855f:	0f 84 6c 01 00 00    	je     c00086d1 <src_process+0x18d>
c0008565:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c0008569:	0f 84 62 01 00 00    	je     c00086d1 <src_process+0x18d>
c000856f:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c0008576:	0f 85 5c 01 00 00    	jne    c00086d8 <src_process+0x194>
c000857c:	85 db                	test   ebx,ebx
c000857e:	0f 84 5b 01 00 00    	je     c00086df <src_process+0x19b>
c0008584:	8b 33                	mov    esi,DWORD PTR [ebx]
c0008586:	85 f6                	test   esi,esi
c0008588:	0f 84 58 01 00 00    	je     c00086e6 <src_process+0x1a2>
c000858e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0008591:	85 ff                	test   edi,edi
c0008593:	0f 84 4d 01 00 00    	je     c00086e6 <src_process+0x1a2>
c0008599:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000859c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000859f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00085a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085a7:	68 00 00 70 3f       	push   0x3f700000
c00085ac:	6a 00                	push   0x0
c00085ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085b6:	e8 04 e9 01 00       	call   c0026ebf <__ltdf2>
c00085bb:	83 c4 10             	add    esp,0x10
c00085be:	85 c0                	test   eax,eax
c00085c0:	0f 88 27 01 00 00    	js     c00086ed <src_process+0x1a9>
c00085c6:	68 00 00 70 40       	push   0x40700000
c00085cb:	6a 00                	push   0x0
c00085cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00085d5:	e8 c7 e8 01 00       	call   c0026ea1 <__gtdf2>
c00085da:	83 c4 10             	add    esp,0x10
c00085dd:	85 c0                	test   eax,eax
c00085df:	0f 8f 08 01 00 00    	jg     c00086ed <src_process+0x1a9>
c00085e5:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00085e9:	79 07                	jns    c00085f2 <src_process+0xae>
c00085eb:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00085f2:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00085f5:	85 c0                	test   eax,eax
c00085f7:	79 50                	jns    c0008649 <src_process+0x105>
c00085f9:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008600:	39 fe                	cmp    esi,edi
c0008602:	72 37                	jb     c000863b <src_process+0xf7>
c0008604:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000860b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008612:	68 00 00 70 3f       	push   0x3f700000
c0008617:	6a 00                	push   0x0
c0008619:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000861c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000861f:	e8 9b e8 01 00       	call   c0026ebf <__ltdf2>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	85 c0                	test   eax,eax
c0008629:	79 37                	jns    c0008662 <src_process+0x11e>
c000862b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000862f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008633:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008636:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008639:	eb 27                	jmp    c0008662 <src_process+0x11e>
c000863b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000863e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008642:	8d 04 86             	lea    eax,[esi+eax*4]
c0008645:	39 c7                	cmp    edi,eax
c0008647:	eb 0d                	jmp    c0008656 <src_process+0x112>
c0008649:	39 fe                	cmp    esi,edi
c000864b:	72 ee                	jb     c000863b <src_process+0xf7>
c000864d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008651:	8d 04 87             	lea    eax,[edi+eax*4]
c0008654:	39 c6                	cmp    esi,eax
c0008656:	73 ac                	jae    c0008604 <src_process+0xc0>
c0008658:	b8 10 00 00 00       	mov    eax,0x10
c000865d:	e9 90 00 00 00       	jmp    c00086f2 <src_process+0x1ae>
c0008662:	83 ec 10             	sub    esp,0x10
c0008665:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008668:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000866b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000866e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008671:	e8 4e df 01 00       	call   c00265c4 <__subdf3>
c0008676:	83 c4 18             	add    esp,0x18
c0008679:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000867d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008681:	52                   	push   edx
c0008682:	50                   	push   eax
c0008683:	e8 c8 e9 01 00       	call   c0027050 <fabs>
c0008688:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000868c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008690:	83 c4 10             	add    esp,0x10
c0008693:	68 af 03 d2 3c       	push   0x3cd203af
c0008698:	68 16 56 e7 9e       	push   0x9ee75616
c000869d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00086a5:	e8 15 e8 01 00       	call   c0026ebf <__ltdf2>
c00086aa:	83 c4 10             	add    esp,0x10
c00086ad:	85 c0                	test   eax,eax
c00086af:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00086b3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00086b7:	79 05                	jns    c00086be <src_process+0x17a>
c00086b9:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00086bc:	eb 03                	jmp    c00086c1 <src_process+0x17d>
c00086be:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00086c1:	83 c4 1c             	add    esp,0x1c
c00086c4:	5b                   	pop    ebx
c00086c5:	5e                   	pop    esi
c00086c6:	5f                   	pop    edi
c00086c7:	5d                   	pop    ebp
c00086c8:	ff e0                	jmp    eax
c00086ca:	b8 02 00 00 00       	mov    eax,0x2
c00086cf:	eb 21                	jmp    c00086f2 <src_process+0x1ae>
c00086d1:	b8 07 00 00 00       	mov    eax,0x7
c00086d6:	eb 1a                	jmp    c00086f2 <src_process+0x1ae>
c00086d8:	b8 12 00 00 00       	mov    eax,0x12
c00086dd:	eb 13                	jmp    c00086f2 <src_process+0x1ae>
c00086df:	b8 03 00 00 00       	mov    eax,0x3
c00086e4:	eb 0c                	jmp    c00086f2 <src_process+0x1ae>
c00086e6:	b8 04 00 00 00       	mov    eax,0x4
c00086eb:	eb 05                	jmp    c00086f2 <src_process+0x1ae>
c00086ed:	b8 06 00 00 00       	mov    eax,0x6
c00086f2:	83 c4 1c             	add    esp,0x1c
c00086f5:	5b                   	pop    ebx
c00086f6:	5e                   	pop    esi
c00086f7:	5f                   	pop    edi
c00086f8:	5d                   	pop    ebp
c00086f9:	c3                   	ret    

c00086fa <src_callback_read>:
c00086fa:	55                   	push   ebp
c00086fb:	57                   	push   edi
c00086fc:	56                   	push   esi
c00086fd:	53                   	push   ebx
c00086fe:	83 ec 3c             	sub    esp,0x3c
c0008701:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008705:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008709:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000870d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008711:	85 ed                	test   ebp,ebp
c0008713:	0f 8e 52 01 00 00    	jle    c000886b <src_callback_read+0x171>
c0008719:	85 db                	test   ebx,ebx
c000871b:	0f 84 4a 01 00 00    	je     c000886b <src_callback_read+0x171>
c0008721:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008728:	74 0c                	je     c0008736 <src_callback_read+0x3c>
c000872a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008731:	e9 35 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008736:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000873a:	75 0c                	jne    c0008748 <src_callback_read+0x4e>
c000873c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008743:	e9 23 01 00 00       	jmp    c000886b <src_callback_read+0x171>
c0008748:	51                   	push   ecx
c0008749:	6a 24                	push   0x24
c000874b:	6a 00                	push   0x0
c000874d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008751:	50                   	push   eax
c0008752:	e8 34 7f ff ff       	call   c000068b <memset>
c0008757:	83 c4 10             	add    esp,0x10
c000875a:	68 00 00 70 3f       	push   0x3f700000
c000875f:	6a 00                	push   0x0
c0008761:	57                   	push   edi
c0008762:	56                   	push   esi
c0008763:	e8 57 e7 01 00       	call   c0026ebf <__ltdf2>
c0008768:	83 c4 10             	add    esp,0x10
c000876b:	85 c0                	test   eax,eax
c000876d:	78 3e                	js     c00087ad <src_callback_read+0xb3>
c000876f:	68 00 00 70 40       	push   0x40700000
c0008774:	6a 00                	push   0x0
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	e8 24 e7 01 00       	call   c0026ea1 <__gtdf2>
c000877d:	83 c4 10             	add    esp,0x10
c0008780:	85 c0                	test   eax,eax
c0008782:	7f 29                	jg     c00087ad <src_callback_read+0xb3>
c0008784:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0008788:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000878c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008790:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0008794:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0008797:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000879b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000879f:	31 f6                	xor    esi,esi
c00087a1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00087a4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00087a8:	e9 97 00 00 00       	jmp    c0008844 <src_callback_read+0x14a>
c00087ad:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00087b4:	e9 b2 00 00 00       	jmp    c000886b <src_callback_read+0x171>
c00087b9:	8d 44 24 04          	lea    eax,[esp+0x4]
c00087bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087c1:	52                   	push   edx
c00087c2:	52                   	push   edx
c00087c3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00087c7:	50                   	push   eax
c00087c8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087cb:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00087ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00087d2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00087d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	85 c0                	test   eax,eax
c00087df:	75 08                	jne    c00087e9 <src_callback_read+0xef>
c00087e1:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c00087e9:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087f0:	50                   	push   eax
c00087f1:	50                   	push   eax
c00087f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00087f6:	50                   	push   eax
c00087f7:	53                   	push   ebx
c00087f8:	e8 47 fd ff ff       	call   c0008544 <src_process>
c00087fd:	83 c4 10             	add    esp,0x10
c0008800:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008807:	85 c0                	test   eax,eax
c0008809:	75 49                	jne    c0008854 <src_callback_read+0x15a>
c000880b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000880f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008812:	89 f9                	mov    ecx,edi
c0008814:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008818:	0f af ca             	imul   ecx,edx
c000881b:	c1 e1 02             	shl    ecx,0x2
c000881e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008822:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008826:	0f af d1             	imul   edx,ecx
c0008829:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c000882d:	c1 e2 02             	shl    edx,0x2
c0008830:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008834:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008837:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000883c:	74 12                	je     c0008850 <src_callback_read+0x156>
c000883e:	39 d5                	cmp    ebp,edx
c0008840:	7e 14                	jle    c0008856 <src_callback_read+0x15c>
c0008842:	89 d6                	mov    esi,edx
c0008844:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008849:	75 9e                	jne    c00087e9 <src_callback_read+0xef>
c000884b:	e9 69 ff ff ff       	jmp    c00087b9 <src_callback_read+0xbf>
c0008850:	85 c9                	test   ecx,ecx
c0008852:	75 ea                	jne    c000883e <src_callback_read+0x144>
c0008854:	89 f2                	mov    edx,esi
c0008856:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000885a:	85 c0                	test   eax,eax
c000885c:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000885f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008863:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008866:	74 05                	je     c000886d <src_callback_read+0x173>
c0008868:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000886b:	31 d2                	xor    edx,edx
c000886d:	83 c4 3c             	add    esp,0x3c
c0008870:	89 d0                	mov    eax,edx
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	5f                   	pop    edi
c0008875:	5d                   	pop    ebp
c0008876:	c3                   	ret    

c0008877 <src_set_ratio>:
c0008877:	57                   	push   edi
c0008878:	ba 02 00 00 00       	mov    edx,0x2
c000887d:	56                   	push   esi
c000887e:	53                   	push   ebx
c000887f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008883:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008887:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000888b:	85 db                	test   ebx,ebx
c000888d:	74 4c                	je     c00088db <src_set_ratio+0x64>
c000888f:	ba 07 00 00 00       	mov    edx,0x7
c0008894:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008898:	74 41                	je     c00088db <src_set_ratio+0x64>
c000889a:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c000889e:	74 3b                	je     c00088db <src_set_ratio+0x64>
c00088a0:	68 00 00 70 3f       	push   0x3f700000
c00088a5:	6a 00                	push   0x0
c00088a7:	57                   	push   edi
c00088a8:	56                   	push   esi
c00088a9:	e8 11 e6 01 00       	call   c0026ebf <__ltdf2>
c00088ae:	83 c4 10             	add    esp,0x10
c00088b1:	ba 06 00 00 00       	mov    edx,0x6
c00088b6:	85 c0                	test   eax,eax
c00088b8:	78 21                	js     c00088db <src_set_ratio+0x64>
c00088ba:	68 00 00 70 40       	push   0x40700000
c00088bf:	6a 00                	push   0x0
c00088c1:	57                   	push   edi
c00088c2:	56                   	push   esi
c00088c3:	e8 d9 e5 01 00       	call   c0026ea1 <__gtdf2>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	ba 06 00 00 00       	mov    edx,0x6
c00088d0:	85 c0                	test   eax,eax
c00088d2:	7f 07                	jg     c00088db <src_set_ratio+0x64>
c00088d4:	89 33                	mov    DWORD PTR [ebx],esi
c00088d6:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c00088d9:	31 d2                	xor    edx,edx
c00088db:	5b                   	pop    ebx
c00088dc:	89 d0                	mov    eax,edx
c00088de:	5e                   	pop    esi
c00088df:	5f                   	pop    edi
c00088e0:	c3                   	ret    

c00088e1 <src_get_channels>:
c00088e1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00088e5:	b8 02 00 00 00       	mov    eax,0x2
c00088ea:	85 d2                	test   edx,edx
c00088ec:	74 14                	je     c0008902 <src_get_channels+0x21>
c00088ee:	b8 07 00 00 00       	mov    eax,0x7
c00088f3:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00088f7:	74 09                	je     c0008902 <src_get_channels+0x21>
c00088f9:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00088fd:	74 03                	je     c0008902 <src_get_channels+0x21>
c00088ff:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008902:	c3                   	ret    

c0008903 <src_reset>:
c0008903:	53                   	push   ebx
c0008904:	b8 02 00 00 00       	mov    eax,0x2
c0008909:	83 ec 08             	sub    esp,0x8
c000890c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008910:	85 db                	test   ebx,ebx
c0008912:	74 36                	je     c000894a <src_reset+0x47>
c0008914:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008917:	85 c0                	test   eax,eax
c0008919:	74 09                	je     c0008924 <src_reset+0x21>
c000891b:	83 ec 0c             	sub    esp,0xc
c000891e:	53                   	push   ebx
c000891f:	ff d0                	call   eax
c0008921:	83 c4 10             	add    esp,0x10
c0008924:	31 c0                	xor    eax,eax
c0008926:	31 d2                	xor    edx,edx
c0008928:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000892b:	89 03                	mov    DWORD PTR [ebx],eax
c000892d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008930:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008933:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000893a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008941:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008948:	31 c0                	xor    eax,eax
c000894a:	83 c4 08             	add    esp,0x8
c000894d:	5b                   	pop    ebx
c000894e:	c3                   	ret    

c000894f <src_new>:
c000894f:	57                   	push   edi
c0008950:	56                   	push   esi
c0008951:	53                   	push   ebx
c0008952:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008956:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000895a:	85 f6                	test   esi,esi
c000895c:	74 73                	je     c00089d1 <src_new+0x82>
c000895e:	85 ff                	test   edi,edi
c0008960:	7f 08                	jg     c000896a <src_new+0x1b>
c0008962:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008968:	eb 1e                	jmp    c0008988 <src_new+0x39>
c000896a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008970:	50                   	push   eax
c0008971:	50                   	push   eax
c0008972:	6a 3c                	push   0x3c
c0008974:	6a 01                	push   0x1
c0008976:	e8 89 6b 00 00       	call   c000f504 <calloc>
c000897b:	83 c4 10             	add    esp,0x10
c000897e:	89 c3                	mov    ebx,eax
c0008980:	85 c0                	test   eax,eax
c0008982:	75 10                	jne    c0008994 <src_new+0x45>
c0008984:	85 f6                	test   esi,esi
c0008986:	75 04                	jne    c000898c <src_new+0x3d>
c0008988:	31 db                	xor    ebx,ebx
c000898a:	eb 4b                	jmp    c00089d7 <src_new+0x88>
c000898c:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008992:	eb 43                	jmp    c00089d7 <src_new+0x88>
c0008994:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008997:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000899e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00089a2:	e8 1d fb ff ff       	call   c00084c4 <psrc_set_converter>
c00089a7:	85 c0                	test   eax,eax
c00089a9:	74 18                	je     c00089c3 <src_new+0x74>
c00089ab:	85 f6                	test   esi,esi
c00089ad:	74 06                	je     c00089b5 <src_new+0x66>
c00089af:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00089b5:	83 ec 0c             	sub    esp,0xc
c00089b8:	53                   	push   ebx
c00089b9:	31 db                	xor    ebx,ebx
c00089bb:	e8 24 6b 00 00       	call   c000f4e4 <free>
c00089c0:	83 c4 10             	add    esp,0x10
c00089c3:	83 ec 0c             	sub    esp,0xc
c00089c6:	53                   	push   ebx
c00089c7:	e8 37 ff ff ff       	call   c0008903 <src_reset>
c00089cc:	83 c4 10             	add    esp,0x10
c00089cf:	eb 06                	jmp    c00089d7 <src_new+0x88>
c00089d1:	85 ff                	test   edi,edi
c00089d3:	7f 9b                	jg     c0008970 <src_new+0x21>
c00089d5:	eb b1                	jmp    c0008988 <src_new+0x39>
c00089d7:	89 d8                	mov    eax,ebx
c00089d9:	5b                   	pop    ebx
c00089da:	5e                   	pop    esi
c00089db:	5f                   	pop    edi
c00089dc:	c3                   	ret    

c00089dd <src_callback_new>:
c00089dd:	56                   	push   esi
c00089de:	53                   	push   ebx
c00089df:	53                   	push   ebx
c00089e0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00089e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00089e8:	85 f6                	test   esi,esi
c00089ea:	75 0e                	jne    c00089fa <src_callback_new+0x1d>
c00089ec:	31 db                	xor    ebx,ebx
c00089ee:	85 c0                	test   eax,eax
c00089f0:	74 47                	je     c0008a39 <src_callback_new+0x5c>
c00089f2:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00089f8:	eb 3f                	jmp    c0008a39 <src_callback_new+0x5c>
c00089fa:	85 c0                	test   eax,eax
c00089fc:	74 06                	je     c0008a04 <src_callback_new+0x27>
c00089fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008a04:	51                   	push   ecx
c0008a05:	50                   	push   eax
c0008a06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008a0e:	e8 3c ff ff ff       	call   c000894f <src_new>
c0008a13:	83 c4 10             	add    esp,0x10
c0008a16:	89 c3                	mov    ebx,eax
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	74 1d                	je     c0008a39 <src_callback_new+0x5c>
c0008a1c:	83 ec 0c             	sub    esp,0xc
c0008a1f:	50                   	push   eax
c0008a20:	e8 de fe ff ff       	call   c0008903 <src_reset>
c0008a25:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a29:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a30:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008a33:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008a36:	83 c4 10             	add    esp,0x10
c0008a39:	89 d8                	mov    eax,ebx
c0008a3b:	5a                   	pop    edx
c0008a3c:	5b                   	pop    ebx
c0008a3d:	5e                   	pop    esi
c0008a3e:	c3                   	ret    

c0008a3f <src_get_name>:
c0008a3f:	53                   	push   ebx
c0008a40:	83 ec 14             	sub    esp,0x14
c0008a43:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a47:	53                   	push   ebx
c0008a48:	e8 d0 4f 00 00       	call   c000da1d <sinc_get_name>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	85 c0                	test   eax,eax
c0008a52:	75 1d                	jne    c0008a71 <src_get_name+0x32>
c0008a54:	83 ec 0c             	sub    esp,0xc
c0008a57:	53                   	push   ebx
c0008a58:	e8 80 57 00 00       	call   c000e1dd <zoh_get_name>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	85 c0                	test   eax,eax
c0008a62:	75 0d                	jne    c0008a71 <src_get_name+0x32>
c0008a64:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a68:	83 c4 08             	add    esp,0x8
c0008a6b:	5b                   	pop    ebx
c0008a6c:	e9 74 0b 00 00       	jmp    c00095e5 <linear_get_name>
c0008a71:	83 c4 08             	add    esp,0x8
c0008a74:	5b                   	pop    ebx
c0008a75:	c3                   	ret    

c0008a76 <src_get_description>:
c0008a76:	53                   	push   ebx
c0008a77:	83 ec 14             	sub    esp,0x14
c0008a7a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a7e:	53                   	push   ebx
c0008a7f:	e8 ac 4f 00 00       	call   c000da30 <sinc_get_description>
c0008a84:	83 c4 10             	add    esp,0x10
c0008a87:	85 c0                	test   eax,eax
c0008a89:	75 1d                	jne    c0008aa8 <src_get_description+0x32>
c0008a8b:	83 ec 0c             	sub    esp,0xc
c0008a8e:	53                   	push   ebx
c0008a8f:	e8 58 57 00 00       	call   c000e1ec <zoh_get_description>
c0008a94:	83 c4 10             	add    esp,0x10
c0008a97:	85 c0                	test   eax,eax
c0008a99:	75 0d                	jne    c0008aa8 <src_get_description+0x32>
c0008a9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a9f:	83 c4 08             	add    esp,0x8
c0008aa2:	5b                   	pop    ebx
c0008aa3:	e9 4c 0b 00 00       	jmp    c00095f4 <linear_get_description>
c0008aa8:	83 c4 08             	add    esp,0x8
c0008aab:	5b                   	pop    ebx
c0008aac:	c3                   	ret    

c0008aad <src_get_version>:
c0008aad:	b8 a0 82 02 c0       	mov    eax,0xc00282a0
c0008ab2:	c3                   	ret    

c0008ab3 <src_is_valid_ratio>:
c0008ab3:	83 ec 1c             	sub    esp,0x1c
c0008ab6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008aba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008abe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ac2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ac6:	68 00 00 70 3f       	push   0x3f700000
c0008acb:	6a 00                	push   0x0
c0008acd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ad5:	e8 e5 e3 01 00       	call   c0026ebf <__ltdf2>
c0008ada:	83 c4 10             	add    esp,0x10
c0008add:	31 d2                	xor    edx,edx
c0008adf:	85 c0                	test   eax,eax
c0008ae1:	78 1e                	js     c0008b01 <src_is_valid_ratio+0x4e>
c0008ae3:	68 00 00 70 40       	push   0x40700000
c0008ae8:	6a 00                	push   0x0
c0008aea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008aee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008af2:	e8 aa e3 01 00       	call   c0026ea1 <__gtdf2>
c0008af7:	31 d2                	xor    edx,edx
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	85 c0                	test   eax,eax
c0008afe:	0f 9e c2             	setle  dl
c0008b01:	89 d0                	mov    eax,edx
c0008b03:	83 c4 1c             	add    esp,0x1c
c0008b06:	c3                   	ret    

c0008b07 <src_error>:
c0008b07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b0b:	31 c0                	xor    eax,eax
c0008b0d:	85 d2                	test   edx,edx
c0008b0f:	74 03                	je     c0008b14 <src_error+0xd>
c0008b11:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008b14:	c3                   	ret    

c0008b15 <src_strerror>:
c0008b15:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b19:	31 c0                	xor    eax,eax
c0008b1b:	83 fa 17             	cmp    edx,0x17
c0008b1e:	77 07                	ja     c0008b27 <src_strerror+0x12>
c0008b20:	8b 04 95 00 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7900]
c0008b27:	c3                   	ret    

c0008b28 <src_simple>:
c0008b28:	56                   	push   esi
c0008b29:	53                   	push   ebx
c0008b2a:	83 ec 18             	sub    esp,0x18
c0008b2d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008b31:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008b35:	50                   	push   eax
c0008b36:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008b3e:	e8 0c fe ff ff       	call   c000894f <src_new>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	85 c0                	test   eax,eax
c0008b48:	75 06                	jne    c0008b50 <src_simple+0x28>
c0008b4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008b4e:	eb 25                	jmp    c0008b75 <src_simple+0x4d>
c0008b50:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008b57:	89 c3                	mov    ebx,eax
c0008b59:	50                   	push   eax
c0008b5a:	50                   	push   eax
c0008b5b:	56                   	push   esi
c0008b5c:	53                   	push   ebx
c0008b5d:	e8 e2 f9 ff ff       	call   c0008544 <src_process>
c0008b62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008b69:	e8 9a f9 ff ff       	call   c0008508 <src_delete>
c0008b6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b72:	83 c4 10             	add    esp,0x10
c0008b75:	83 c4 14             	add    esp,0x14
c0008b78:	5b                   	pop    ebx
c0008b79:	5e                   	pop    esi
c0008b7a:	c3                   	ret    

c0008b7b <src_short_to_float_array>:
c0008b7b:	53                   	push   ebx
c0008b7c:	83 ec 18             	sub    esp,0x18
c0008b7f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008b83:	85 db                	test   ebx,ebx
c0008b85:	74 54                	je     c0008bdb <src_short_to_float_array+0x60>
c0008b87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008b8b:	4b                   	dec    ebx
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008b93:	50                   	push   eax
c0008b94:	e8 ba e0 01 00       	call   c0026c53 <__floatsidf>
c0008b99:	83 c4 10             	add    esp,0x10
c0008b9c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ba0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ba4:	68 00 00 00 3f       	push   0x3f000000
c0008ba9:	6a 00                	push   0x0
c0008bab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008baf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb3:	e8 38 da 01 00       	call   c00265f0 <__muldf3>
c0008bb8:	59                   	pop    ecx
c0008bb9:	59                   	pop    ecx
c0008bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008bbe:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008bc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bca:	e8 f4 e2 01 00       	call   c0026ec3 <__truncdfsf2>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008bd6:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008bd9:	eb a8                	jmp    c0008b83 <src_short_to_float_array+0x8>
c0008bdb:	83 c4 18             	add    esp,0x18
c0008bde:	5b                   	pop    ebx
c0008bdf:	c3                   	ret    

c0008be0 <src_float_to_short_array>:
c0008be0:	56                   	push   esi
c0008be1:	53                   	push   ebx
c0008be2:	83 ec 14             	sub    esp,0x14
c0008be5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008be9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008bed:	85 db                	test   ebx,ebx
c0008bef:	0f 84 a4 00 00 00    	je     c0008c99 <src_float_to_short_array+0xb9>
c0008bf5:	83 ec 0c             	sub    esp,0xc
c0008bf8:	4b                   	dec    ebx
c0008bf9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008bfd:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008c00:	e8 e2 e3 01 00       	call   c0026fe7 <__extendsfdf2>
c0008c05:	83 c4 10             	add    esp,0x10
c0008c08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c0c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c10:	68 00 00 e0 41       	push   0x41e00000
c0008c15:	6a 00                	push   0x0
c0008c17:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c1f:	e8 cc d9 01 00       	call   c00265f0 <__muldf3>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c2b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008c2f:	68 ff ff df 41       	push   0x41dfffff
c0008c34:	68 00 00 c0 ff       	push   0xffc00000
c0008c39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c41:	e8 77 e2 01 00       	call   c0026ebd <__gedf2>
c0008c46:	83 c4 10             	add    esp,0x10
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	78 08                	js     c0008c55 <src_float_to_short_array+0x75>
c0008c4d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008c53:	eb 98                	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c55:	68 00 00 e0 c1       	push   0xc1e00000
c0008c5a:	6a 00                	push   0x0
c0008c5c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c60:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c64:	e8 58 e2 01 00       	call   c0026ec1 <__ledf2>
c0008c69:	83 c4 10             	add    esp,0x10
c0008c6c:	85 c0                	test   eax,eax
c0008c6e:	7f 0b                	jg     c0008c7b <src_float_to_short_array+0x9b>
c0008c70:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008c76:	e9 72 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c7b:	50                   	push   eax
c0008c7c:	50                   	push   eax
c0008c7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c85:	e8 e6 e3 01 00       	call   c0027070 <lrint>
c0008c8a:	83 c4 10             	add    esp,0x10
c0008c8d:	c1 f8 10             	sar    eax,0x10
c0008c90:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008c94:	e9 54 ff ff ff       	jmp    c0008bed <src_float_to_short_array+0xd>
c0008c99:	83 c4 14             	add    esp,0x14
c0008c9c:	5b                   	pop    ebx
c0008c9d:	5e                   	pop    esi
c0008c9e:	c3                   	ret    

c0008c9f <src_int_to_float_array>:
c0008c9f:	53                   	push   ebx
c0008ca0:	83 ec 18             	sub    esp,0x18
c0008ca3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ca7:	85 db                	test   ebx,ebx
c0008ca9:	74 52                	je     c0008cfd <src_int_to_float_array+0x5e>
c0008cab:	83 ec 0c             	sub    esp,0xc
c0008cae:	4b                   	dec    ebx
c0008caf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008cb3:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008cb6:	e8 98 df 01 00       	call   c0026c53 <__floatsidf>
c0008cbb:	83 c4 10             	add    esp,0x10
c0008cbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cc2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cc6:	68 00 00 00 3e       	push   0x3e000000
c0008ccb:	6a 00                	push   0x0
c0008ccd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cd5:	e8 16 d9 01 00       	call   c00265f0 <__muldf3>
c0008cda:	59                   	pop    ecx
c0008cdb:	59                   	pop    ecx
c0008cdc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008ce0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008ce4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ce8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008cec:	e8 d2 e1 01 00       	call   c0026ec3 <__truncdfsf2>
c0008cf1:	83 c4 10             	add    esp,0x10
c0008cf4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008cf8:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008cfb:	eb aa                	jmp    c0008ca7 <src_int_to_float_array+0x8>
c0008cfd:	83 c4 18             	add    esp,0x18
c0008d00:	5b                   	pop    ebx
c0008d01:	c3                   	ret    

c0008d02 <src_float_to_int_array>:
c0008d02:	56                   	push   esi
c0008d03:	53                   	push   ebx
c0008d04:	83 ec 14             	sub    esp,0x14
c0008d07:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d0b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008d0f:	85 db                	test   ebx,ebx
c0008d11:	0f 84 a2 00 00 00    	je     c0008db9 <src_float_to_int_array+0xb7>
c0008d17:	83 ec 0c             	sub    esp,0xc
c0008d1a:	4b                   	dec    ebx
c0008d1b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008d1f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008d22:	e8 c0 e2 01 00       	call   c0026fe7 <__extendsfdf2>
c0008d27:	83 c4 10             	add    esp,0x10
c0008d2a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d2e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d32:	68 00 00 e0 41       	push   0x41e00000
c0008d37:	6a 00                	push   0x0
c0008d39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d41:	e8 aa d8 01 00       	call   c00265f0 <__muldf3>
c0008d46:	83 c4 10             	add    esp,0x10
c0008d49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d4d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d51:	68 ff ff df 41       	push   0x41dfffff
c0008d56:	68 00 00 c0 ff       	push   0xffc00000
c0008d5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d63:	e8 55 e1 01 00       	call   c0026ebd <__gedf2>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	85 c0                	test   eax,eax
c0008d6d:	78 09                	js     c0008d78 <src_float_to_int_array+0x76>
c0008d6f:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008d76:	eb 97                	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d78:	68 00 00 e0 c1       	push   0xc1e00000
c0008d7d:	6a 00                	push   0x0
c0008d7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d87:	e8 35 e1 01 00       	call   c0026ec1 <__ledf2>
c0008d8c:	83 c4 10             	add    esp,0x10
c0008d8f:	85 c0                	test   eax,eax
c0008d91:	7f 0c                	jg     c0008d9f <src_float_to_int_array+0x9d>
c0008d93:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008d9a:	e9 70 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008d9f:	50                   	push   eax
c0008da0:	50                   	push   eax
c0008da1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008da9:	e8 c2 e2 01 00       	call   c0027070 <lrint>
c0008dae:	83 c4 10             	add    esp,0x10
c0008db1:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008db4:	e9 56 ff ff ff       	jmp    c0008d0f <src_float_to_int_array+0xd>
c0008db9:	83 c4 14             	add    esp,0x14
c0008dbc:	5b                   	pop    ebx
c0008dbd:	5e                   	pop    esi
c0008dbe:	c3                   	ret    

c0008dbf <linear_vari_process>:
c0008dbf:	55                   	push   ebp
c0008dc0:	31 d2                	xor    edx,edx
c0008dc2:	57                   	push   edi
c0008dc3:	56                   	push   esi
c0008dc4:	53                   	push   ebx
c0008dc5:	83 ec 3c             	sub    esp,0x3c
c0008dc8:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008dcc:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008dd0:	0f 8e d3 07 00 00    	jle    c00095a9 <linear_vari_process+0x7ea>
c0008dd6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008dda:	ba 05 00 00 00       	mov    edx,0x5
c0008ddf:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0008de2:	85 db                	test   ebx,ebx
c0008de4:	0f 84 bf 07 00 00    	je     c00095a9 <linear_vari_process+0x7ea>
c0008dea:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008ded:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008df1:	74 19                	je     c0008e0c <linear_vari_process+0x4d>
c0008df3:	31 d2                	xor    edx,edx
c0008df5:	39 c2                	cmp    edx,eax
c0008df7:	7d 0c                	jge    c0008e05 <linear_vari_process+0x46>
c0008df9:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dfb:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c0008dfe:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0008e02:	42                   	inc    edx
c0008e03:	eb f0                	jmp    c0008df5 <linear_vari_process+0x36>
c0008e05:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008e0c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008e0f:	0f af d0             	imul   edx,eax
c0008e12:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008e15:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008e19:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008e20:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008e23:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008e2a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e2e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e3b:	68 00 00 70 3f       	push   0x3f700000
c0008e40:	6a 00                	push   0x0
c0008e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e4a:	e8 70 e0 01 00       	call   c0026ebf <__ltdf2>
c0008e4f:	83 c4 10             	add    esp,0x10
c0008e52:	ba 16 00 00 00       	mov    edx,0x16
c0008e57:	85 c0                	test   eax,eax
c0008e59:	0f 88 4a 07 00 00    	js     c00095a9 <linear_vari_process+0x7ea>
c0008e5f:	68 00 00 70 40       	push   0x40700000
c0008e64:	6a 00                	push   0x0
c0008e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008e6e:	e8 2e e0 01 00       	call   c0026ea1 <__gtdf2>
c0008e73:	83 c4 10             	add    esp,0x10
c0008e76:	ba 16 00 00 00       	mov    edx,0x16
c0008e7b:	85 c0                	test   eax,eax
c0008e7d:	0f 8f 26 07 00 00    	jg     c00095a9 <linear_vari_process+0x7ea>
c0008e83:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008e87:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0008e8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0008e8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e95:	68 00 00 f0 3f       	push   0x3ff00000
c0008e9a:	6a 00                	push   0x0
c0008e9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ea4:	e8 16 e0 01 00       	call   c0026ebf <__ltdf2>
c0008ea9:	83 c4 10             	add    esp,0x10
c0008eac:	85 c0                	test   eax,eax
c0008eae:	0f 89 89 02 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008eb4:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0008eb7:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c0008eba:	0f 8d 7d 02 00 00    	jge    c000913d <linear_vari_process+0x37e>
c0008ec0:	83 ec 0c             	sub    esp,0xc
c0008ec3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0008ec6:	e8 88 dd 01 00       	call   c0026c53 <__floatsidf>
c0008ecb:	83 c4 10             	add    esp,0x10
c0008ece:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ed1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008ed5:	68 00 00 f0 3f       	push   0x3ff00000
c0008eda:	6a 00                	push   0x0
c0008edc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ee4:	e8 8a d0 01 00       	call   c0025f73 <__adddf3>
c0008ee9:	83 c4 10             	add    esp,0x10
c0008eec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ef0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ef4:	52                   	push   edx
c0008ef5:	50                   	push   eax
c0008ef6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008efe:	e8 ed d6 01 00       	call   c00265f0 <__muldf3>
c0008f03:	5d                   	pop    ebp
c0008f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f08:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f0c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0008f0f:	e8 3f dd 01 00       	call   c0026c53 <__floatsidf>
c0008f14:	83 c4 10             	add    esp,0x10
c0008f17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f1b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f1f:	52                   	push   edx
c0008f20:	50                   	push   eax
c0008f21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f29:	e8 45 d0 01 00       	call   c0025f73 <__adddf3>
c0008f2e:	59                   	pop    ecx
c0008f2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008f33:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008f37:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0008f3a:	e8 14 dd 01 00       	call   c0026c53 <__floatsidf>
c0008f3f:	83 c4 10             	add    esp,0x10
c0008f42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008f46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008f4a:	52                   	push   edx
c0008f4b:	50                   	push   eax
c0008f4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008f54:	e8 64 df 01 00       	call   c0026ebd <__gedf2>
c0008f59:	83 c4 10             	add    esp,0x10
c0008f5c:	85 c0                	test   eax,eax
c0008f5e:	0f 89 d9 01 00 00    	jns    c000913d <linear_vari_process+0x37e>
c0008f64:	85 ff                	test   edi,edi
c0008f66:	0f 8e f4 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008f6c:	83 ec 10             	sub    esp,0x10
c0008f6f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008f72:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008f75:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0008f79:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0008f7c:	ff 30                	push   DWORD PTR [eax]
c0008f7e:	e8 41 d6 01 00       	call   c00265c4 <__subdf3>
c0008f83:	83 c4 18             	add    esp,0x18
c0008f86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f8e:	52                   	push   edx
c0008f8f:	50                   	push   eax
c0008f90:	e8 bb e0 01 00       	call   c0027050 <fabs>
c0008f95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f99:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f9d:	83 c4 10             	add    esp,0x10
c0008fa0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c0008fa5:	68 23 42 92 0c       	push   0xc924223
c0008faa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fae:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008fb2:	e8 ea de 01 00       	call   c0026ea1 <__gtdf2>
c0008fb7:	83 c4 10             	add    esp,0x10
c0008fba:	85 c0                	test   eax,eax
c0008fbc:	0f 8e 9e 00 00 00    	jle    c0009060 <linear_vari_process+0x2a1>
c0008fc2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0008fc6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008fc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008fcf:	89 04 24             	mov    DWORD PTR [esp],eax
c0008fd2:	52                   	push   edx
c0008fd3:	50                   	push   eax
c0008fd4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0008fd7:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0008fda:	e8 e5 d5 01 00       	call   c00265c4 <__subdf3>
c0008fdf:	59                   	pop    ecx
c0008fe0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008fe4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008fe8:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008feb:	e8 63 dc 01 00       	call   c0026c53 <__floatsidf>
c0008ff0:	83 c4 10             	add    esp,0x10
c0008ff3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0008ff7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008ffb:	52                   	push   edx
c0008ffc:	50                   	push   eax
c0008ffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009005:	e8 e6 d5 01 00       	call   c00265f0 <__muldf3>
c000900a:	5f                   	pop    edi
c000900b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000900f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009013:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009016:	e8 38 dc 01 00       	call   c0026c53 <__floatsidf>
c000901b:	83 c4 10             	add    esp,0x10
c000901e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009022:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009026:	52                   	push   edx
c0009027:	50                   	push   eax
c0009028:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000902c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009030:	e8 9f d8 01 00       	call   c00268d4 <__divdf3>
c0009035:	83 c4 10             	add    esp,0x10
c0009038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000903c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009040:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009044:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000904c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009050:	e8 1e cf 01 00       	call   c0025f73 <__adddf3>
c0009055:	83 c4 10             	add    esp,0x10
c0009058:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009060:	31 ff                	xor    edi,edi
c0009062:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009065:	0f 8e 9d 00 00 00    	jle    c0009108 <linear_vari_process+0x349>
c000906b:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000906e:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c0009072:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009075:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0009079:	89 04 24             	mov    DWORD PTR [esp],eax
c000907c:	8b 06                	mov    eax,DWORD PTR [esi]
c000907e:	52                   	push   edx
c000907f:	52                   	push   edx
c0009080:	55                   	push   ebp
c0009081:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c0009084:	47                   	inc    edi
c0009085:	e8 7e c8 01 00       	call   c0025908 <__subsf3>
c000908a:	89 04 24             	mov    DWORD PTR [esp],eax
c000908d:	e8 55 df 01 00       	call   c0026fe7 <__extendsfdf2>
c0009092:	83 c4 10             	add    esp,0x10
c0009095:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000909d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00090a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ad:	e8 3e d5 01 00       	call   c00265f0 <__muldf3>
c00090b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00090b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00090b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00090bd:	e8 25 df 01 00       	call   c0026fe7 <__extendsfdf2>
c00090c2:	83 c4 10             	add    esp,0x10
c00090c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090c9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090cd:	52                   	push   edx
c00090ce:	50                   	push   eax
c00090cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090d7:	e8 97 ce 01 00       	call   c0025f73 <__adddf3>
c00090dc:	59                   	pop    ecx
c00090dd:	5d                   	pop    ebp
c00090de:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090e2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00090e6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ea:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00090ee:	e8 d0 dd 01 00       	call   c0026ec3 <__truncdfsf2>
c00090f3:	83 c4 10             	add    esp,0x10
c00090f6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00090f9:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00090fd:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009100:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009103:	e9 5a ff ff ff       	jmp    c0009062 <linear_vari_process+0x2a3>
c0009108:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000910c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009110:	68 00 00 f0 3f       	push   0x3ff00000
c0009115:	6a 00                	push   0x0
c0009117:	e8 b8 d7 01 00       	call   c00268d4 <__divdf3>
c000911c:	83 c4 10             	add    esp,0x10
c000911f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009122:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009126:	52                   	push   edx
c0009127:	50                   	push   eax
c0009128:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	e8 3e ce 01 00       	call   c0025f73 <__adddf3>
c0009135:	83 c4 10             	add    esp,0x10
c0009138:	e9 50 fd ff ff       	jmp    c0008e8d <linear_vari_process+0xce>
c000913d:	50                   	push   eax
c000913e:	50                   	push   eax
c000913f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009143:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009147:	e8 24 df 01 00       	call   c0027070 <lrint>
c000914c:	83 ec 0c             	sub    esp,0xc
c000914f:	50                   	push   eax
c0009150:	e8 fe da 01 00       	call   c0026c53 <__floatsidf>
c0009155:	83 c4 10             	add    esp,0x10
c0009158:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000915c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009160:	52                   	push   edx
c0009161:	50                   	push   eax
c0009162:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009166:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000916a:	e8 55 d4 01 00       	call   c00265c4 <__subdf3>
c000916f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009173:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009177:	83 c4 20             	add    esp,0x20
c000917a:	6a 00                	push   0x0
c000917c:	6a 00                	push   0x0
c000917e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009182:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009186:	e8 34 dd 01 00       	call   c0026ebf <__ltdf2>
c000918b:	83 c4 10             	add    esp,0x10
c000918e:	85 c0                	test   eax,eax
c0009190:	79 1e                	jns    c00091b0 <linear_vari_process+0x3f1>
c0009192:	68 00 00 f0 3f       	push   0x3ff00000
c0009197:	6a 00                	push   0x0
c0009199:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000919d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a1:	e8 cd cd 01 00       	call   c0025f73 <__adddf3>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 04 24             	mov    DWORD PTR [esp],eax
c00091ac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00091b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00091b3:	83 ec 10             	sub    esp,0x10
c00091b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00091be:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00091c6:	e8 f9 d3 01 00       	call   c00265c4 <__subdf3>
c00091cb:	83 c4 18             	add    esp,0x18
c00091ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091d2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091d6:	52                   	push   edx
c00091d7:	50                   	push   eax
c00091d8:	e8 93 de 01 00       	call   c0027070 <lrint>
c00091dd:	83 c4 10             	add    esp,0x10
c00091e0:	0f af f8             	imul   edi,eax
c00091e3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00091e6:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c00091e9:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00091ec:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c00091ef:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c00091f2:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00091f6:	0f 8d 13 03 00 00    	jge    c000950f <linear_vari_process+0x750>
c00091fc:	83 ec 0c             	sub    esp,0xc
c00091ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009202:	e8 4c da 01 00       	call   c0026c53 <__floatsidf>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000920e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009212:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009216:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000921a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000921e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009222:	e8 c9 d3 01 00       	call   c00265f0 <__muldf3>
c0009227:	89 3c 24             	mov    DWORD PTR [esp],edi
c000922a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000922e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009232:	e8 1c da 01 00       	call   c0026c53 <__floatsidf>
c0009237:	83 c4 10             	add    esp,0x10
c000923a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000923e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009242:	52                   	push   edx
c0009243:	50                   	push   eax
c0009244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009248:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000924c:	e8 22 cd 01 00       	call   c0025f73 <__adddf3>
c0009251:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009254:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009258:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000925c:	e8 f2 d9 01 00       	call   c0026c53 <__floatsidf>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009268:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000926c:	52                   	push   edx
c000926d:	50                   	push   eax
c000926e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009276:	e8 44 dc 01 00       	call   c0026ebf <__ltdf2>
c000927b:	83 c4 10             	add    esp,0x10
c000927e:	85 c0                	test   eax,eax
c0009280:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009284:	0f 89 85 02 00 00    	jns    c000950f <linear_vari_process+0x750>
c000928a:	85 c9                	test   ecx,ecx
c000928c:	0f 8e f5 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c0009292:	83 ec 10             	sub    esp,0x10
c0009295:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009298:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000929b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c000929f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00092a2:	ff 30                	push   DWORD PTR [eax]
c00092a4:	e8 1b d3 01 00       	call   c00265c4 <__subdf3>
c00092a9:	83 c4 18             	add    esp,0x18
c00092ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	e8 95 dd 01 00       	call   c0027050 <fabs>
c00092bb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092bf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00092cb:	68 23 42 92 0c       	push   0xc924223
c00092d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00092d8:	e8 c4 db 01 00       	call   c0026ea1 <__gtdf2>
c00092dd:	83 c4 10             	add    esp,0x10
c00092e0:	85 c0                	test   eax,eax
c00092e2:	0f 8e 9f 00 00 00    	jle    c0009387 <linear_vari_process+0x5c8>
c00092e8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00092ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00092ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00092f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092f9:	52                   	push   edx
c00092fa:	50                   	push   eax
c00092fb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00092fe:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009301:	e8 be d2 01 00       	call   c00265c4 <__subdf3>
c0009306:	5f                   	pop    edi
c0009307:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000930b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000930f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009312:	e8 3c d9 01 00       	call   c0026c53 <__floatsidf>
c0009317:	83 c4 10             	add    esp,0x10
c000931a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000931e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009322:	52                   	push   edx
c0009323:	50                   	push   eax
c0009324:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009328:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000932c:	e8 bf d2 01 00       	call   c00265f0 <__muldf3>
c0009331:	5d                   	pop    ebp
c0009332:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009336:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000933a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000933d:	e8 11 d9 01 00       	call   c0026c53 <__floatsidf>
c0009342:	83 c4 10             	add    esp,0x10
c0009345:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009349:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000934d:	52                   	push   edx
c000934e:	50                   	push   eax
c000934f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009353:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009357:	e8 78 d5 01 00       	call   c00268d4 <__divdf3>
c000935c:	83 c4 10             	add    esp,0x10
c000935f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009363:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009367:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009377:	e8 f7 cb 01 00       	call   c0025f73 <__adddf3>
c000937c:	83 c4 10             	add    esp,0x10
c000937f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009383:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009387:	31 ff                	xor    edi,edi
c0009389:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000938c:	39 f8                	cmp    eax,edi
c000938e:	0f 8e ac 00 00 00    	jle    c0009440 <linear_vari_process+0x681>
c0009394:	8b 16                	mov    edx,DWORD PTR [esi]
c0009396:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0009399:	29 c1                	sub    ecx,eax
c000939b:	89 c8                	mov    eax,ecx
c000939d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00093a0:	01 f8                	add    eax,edi
c00093a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00093a6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00093a9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00093ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093b0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00093b3:	51                   	push   ecx
c00093b4:	01 f8                	add    eax,edi
c00093b6:	51                   	push   ecx
c00093b7:	47                   	inc    edi
c00093b8:	55                   	push   ebp
c00093b9:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00093bc:	e8 47 c5 01 00       	call   c0025908 <__subsf3>
c00093c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00093c4:	e8 1e dc 01 00       	call   c0026fe7 <__extendsfdf2>
c00093c9:	83 c4 10             	add    esp,0x10
c00093cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093d0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00093d4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093d8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00093dc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093e4:	e8 07 d2 01 00       	call   c00265f0 <__muldf3>
c00093e9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00093f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00093f4:	e8 ee db 01 00       	call   c0026fe7 <__extendsfdf2>
c00093f9:	83 c4 10             	add    esp,0x10
c00093fc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009400:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009404:	52                   	push   edx
c0009405:	50                   	push   eax
c0009406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000940e:	e8 60 cb 01 00       	call   c0025f73 <__adddf3>
c0009413:	5d                   	pop    ebp
c0009414:	59                   	pop    ecx
c0009415:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009419:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000941d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009421:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009425:	e8 99 da 01 00       	call   c0026ec3 <__truncdfsf2>
c000942a:	83 c4 10             	add    esp,0x10
c000942d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009431:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009435:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009438:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000943b:	e9 49 ff ff ff       	jmp    c0009389 <linear_vari_process+0x5ca>
c0009440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009448:	68 00 00 f0 3f       	push   0x3ff00000
c000944d:	6a 00                	push   0x0
c000944f:	e8 80 d4 01 00       	call   c00268d4 <__divdf3>
c0009454:	83 c4 10             	add    esp,0x10
c0009457:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000945f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009463:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009467:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946f:	e8 ff ca 01 00       	call   c0025f73 <__adddf3>
c0009474:	59                   	pop    ecx
c0009475:	5f                   	pop    edi
c0009476:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000947a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000947e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009482:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009486:	e8 e5 db 01 00       	call   c0027070 <lrint>
c000948b:	83 ec 0c             	sub    esp,0xc
c000948e:	50                   	push   eax
c000948f:	e8 bf d7 01 00       	call   c0026c53 <__floatsidf>
c0009494:	83 c4 10             	add    esp,0x10
c0009497:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000949b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000949f:	52                   	push   edx
c00094a0:	50                   	push   eax
c00094a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00094a9:	e8 16 d1 01 00       	call   c00265c4 <__subdf3>
c00094ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00094b2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00094b6:	83 c4 20             	add    esp,0x20
c00094b9:	6a 00                	push   0x0
c00094bb:	6a 00                	push   0x0
c00094bd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094c5:	e8 f5 d9 01 00       	call   c0026ebf <__ltdf2>
c00094ca:	83 c4 10             	add    esp,0x10
c00094cd:	85 c0                	test   eax,eax
c00094cf:	79 1e                	jns    c00094ef <linear_vari_process+0x730>
c00094d1:	68 00 00 f0 3f       	push   0x3ff00000
c00094d6:	6a 00                	push   0x0
c00094d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094dc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00094e0:	e8 8e ca 01 00       	call   c0025f73 <__adddf3>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00094eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00094ef:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00094f2:	83 ec 10             	sub    esp,0x10
c00094f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094fd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009505:	e8 ba d0 01 00       	call   c00265c4 <__subdf3>
c000950a:	e9 bc fc ff ff       	jmp    c00091cb <linear_vari_process+0x40c>
c000950f:	39 fd                	cmp    ebp,edi
c0009511:	7d 38                	jge    c000954b <linear_vari_process+0x78c>
c0009513:	83 ec 0c             	sub    esp,0xc
c0009516:	89 f8                	mov    eax,edi
c0009518:	29 e8                	sub    eax,ebp
c000951a:	99                   	cdq    
c000951b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000951e:	50                   	push   eax
c000951f:	e8 2f d7 01 00       	call   c0026c53 <__floatsidf>
c0009524:	83 c4 10             	add    esp,0x10
c0009527:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000952f:	52                   	push   edx
c0009530:	50                   	push   eax
c0009531:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009535:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009539:	e8 35 ca 01 00       	call   c0025f73 <__adddf3>
c000953e:	83 c4 10             	add    esp,0x10
c0009541:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009544:	89 04 24             	mov    DWORD PTR [esp],eax
c0009547:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000954b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000954f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009552:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009556:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0009559:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000955c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000955f:	85 c0                	test   eax,eax
c0009561:	7f 29                	jg     c000958c <linear_vari_process+0x7cd>
c0009563:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000956b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000956f:	89 01                	mov    DWORD PTR [ecx],eax
c0009571:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0009574:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009577:	99                   	cdq    
c0009578:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000957b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000957e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009581:	99                   	cdq    
c0009582:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009585:	31 d2                	xor    edx,edx
c0009587:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000958a:	eb 1d                	jmp    c00095a9 <linear_vari_process+0x7ea>
c000958c:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000958f:	31 d2                	xor    edx,edx
c0009591:	29 c8                	sub    eax,ecx
c0009593:	c1 e0 02             	shl    eax,0x2
c0009596:	39 d1                	cmp    ecx,edx
c0009598:	7e c9                	jle    c0009563 <linear_vari_process+0x7a4>
c000959a:	8b 3e                	mov    edi,DWORD PTR [esi]
c000959c:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c000959f:	83 c0 04             	add    eax,0x4
c00095a2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00095a6:	42                   	inc    edx
c00095a7:	eb ed                	jmp    c0009596 <linear_vari_process+0x7d7>
c00095a9:	83 c4 3c             	add    esp,0x3c
c00095ac:	89 d0                	mov    eax,edx
c00095ae:	5b                   	pop    ebx
c00095af:	5e                   	pop    esi
c00095b0:	5f                   	pop    edi
c00095b1:	5d                   	pop    ebp
c00095b2:	c3                   	ret    

c00095b3 <linear_reset>:
c00095b3:	83 ec 0c             	sub    esp,0xc
c00095b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00095ba:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00095bd:	85 c0                	test   eax,eax
c00095bf:	74 20                	je     c00095e1 <linear_reset+0x2e>
c00095c1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00095c4:	83 c0 1c             	add    eax,0x1c
c00095c7:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00095ca:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00095d1:	c1 e2 02             	shl    edx,0x2
c00095d4:	51                   	push   ecx
c00095d5:	52                   	push   edx
c00095d6:	6a 00                	push   0x0
c00095d8:	50                   	push   eax
c00095d9:	e8 ad 70 ff ff       	call   c000068b <memset>
c00095de:	83 c4 10             	add    esp,0x10
c00095e1:	83 c4 0c             	add    esp,0xc
c00095e4:	c3                   	ret    

c00095e5 <linear_get_name>:
c00095e5:	31 c0                	xor    eax,eax
c00095e7:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095ec:	75 05                	jne    c00095f3 <linear_get_name+0xe>
c00095ee:	b8 60 87 02 c0       	mov    eax,0xc0028760
c00095f3:	c3                   	ret    

c00095f4 <linear_get_description>:
c00095f4:	31 c0                	xor    eax,eax
c00095f6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00095fb:	75 05                	jne    c0009602 <linear_get_description+0xe>
c00095fd:	b8 74 87 02 c0       	mov    eax,0xc0028774
c0009602:	c3                   	ret    

c0009603 <linear_set_converter>:
c0009603:	53                   	push   ebx
c0009604:	b8 0a 00 00 00       	mov    eax,0xa
c0009609:	83 ec 08             	sub    esp,0x8
c000960c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009610:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009615:	75 6e                	jne    c0009685 <linear_set_converter+0x82>
c0009617:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000961a:	85 c0                	test   eax,eax
c000961c:	74 13                	je     c0009631 <linear_set_converter+0x2e>
c000961e:	83 ec 0c             	sub    esp,0xc
c0009621:	50                   	push   eax
c0009622:	e8 bd 5e 00 00       	call   c000f4e4 <free>
c0009627:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000962e:	83 c4 10             	add    esp,0x10
c0009631:	50                   	push   eax
c0009632:	50                   	push   eax
c0009633:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009636:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000963d:	50                   	push   eax
c000963e:	6a 01                	push   0x1
c0009640:	e8 bf 5e 00 00       	call   c000f504 <calloc>
c0009645:	83 c4 10             	add    esp,0x10
c0009648:	89 c2                	mov    edx,eax
c000964a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000964d:	85 d2                	test   edx,edx
c000964f:	b8 01 00 00 00       	mov    eax,0x1
c0009654:	74 2f                	je     c0009685 <linear_set_converter+0x82>
c0009656:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009659:	83 ec 0c             	sub    esp,0xc
c000965c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000965f:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009665:	c7 43 24 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008dbf
c000966c:	c7 43 20 bf 8d 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008dbf
c0009673:	c7 43 28 b3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095b3
c000967a:	53                   	push   ebx
c000967b:	e8 33 ff ff ff       	call   c00095b3 <linear_reset>
c0009680:	83 c4 10             	add    esp,0x10
c0009683:	31 c0                	xor    eax,eax
c0009685:	83 c4 08             	add    esp,0x8
c0009688:	5b                   	pop    ebx
c0009689:	c3                   	ret    

c000968a <int_to_fp>:
c000968a:	c1 e0 0c             	shl    eax,0xc
c000968d:	c3                   	ret    

c000968e <fp_to_int>:
c000968e:	c1 f8 0c             	sar    eax,0xc
c0009691:	c3                   	ret    

c0009692 <fp_fraction_part>:
c0009692:	25 ff 0f 00 00       	and    eax,0xfff
c0009697:	c3                   	ret    

c0009698 <fp_to_double>:
c0009698:	83 ec 1c             	sub    esp,0x1c
c000969b:	e8 f2 ff ff ff       	call   c0009692 <fp_fraction_part>
c00096a0:	83 ec 0c             	sub    esp,0xc
c00096a3:	50                   	push   eax
c00096a4:	e8 aa d5 01 00       	call   c0026c53 <__floatsidf>
c00096a9:	83 c4 10             	add    esp,0x10
c00096ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096b4:	68 00 00 30 3f       	push   0x3f300000
c00096b9:	6a 00                	push   0x0
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096c3:	e8 28 cf 01 00       	call   c00265f0 <__muldf3>
c00096c8:	83 c4 2c             	add    esp,0x2c
c00096cb:	c3                   	ret    

c00096cc <calc_output_single>:
c00096cc:	55                   	push   ebp
c00096cd:	57                   	push   edi
c00096ce:	56                   	push   esi
c00096cf:	89 c6                	mov    esi,eax
c00096d1:	53                   	push   ebx
c00096d2:	89 d3                	mov    ebx,edx
c00096d4:	83 ec 4c             	sub    esp,0x4c
c00096d7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00096db:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096de:	e8 a7 ff ff ff       	call   c000968a <int_to_fp>
c00096e3:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c00096e6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00096ea:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00096ee:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c00096f2:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c00096f5:	99                   	cdq    
c00096f6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00096fe:	f7 fb                	idiv   ebx
c0009700:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009708:	89 da                	mov    edx,ebx
c000970a:	0f af d0             	imul   edx,eax
c000970d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009711:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009715:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009719:	29 c2                	sub    edx,eax
c000971b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000971e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009722:	83 c5 04             	add    ebp,0x4
c0009725:	e8 6e ff ff ff       	call   c0009698 <fp_to_double>
c000972a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000972e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009736:	e8 53 ff ff ff       	call   c000968e <fp_to_int>
c000973b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000973e:	52                   	push   edx
c000973f:	52                   	push   edx
c0009740:	51                   	push   ecx
c0009741:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009745:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009749:	e8 ba c1 01 00       	call   c0025908 <__subsf3>
c000974e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009751:	e8 91 d8 01 00       	call   c0026fe7 <__extendsfdf2>
c0009756:	83 c4 10             	add    esp,0x10
c0009759:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000975d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009761:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009765:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009769:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000976d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009771:	e8 7a ce 01 00       	call   c00265f0 <__muldf3>
c0009776:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000977a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000977e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009781:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009785:	e8 5d d8 01 00       	call   c0026fe7 <__extendsfdf2>
c000978a:	83 c4 10             	add    esp,0x10
c000978d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009795:	52                   	push   edx
c0009796:	50                   	push   eax
c0009797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000979f:	e8 cf c7 01 00       	call   c0025f73 <__adddf3>
c00097a4:	59                   	pop    ecx
c00097a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00097a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00097ad:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00097b3:	e8 2f d8 01 00       	call   c0026fe7 <__extendsfdf2>
c00097b8:	83 c4 10             	add    esp,0x10
c00097bb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00097bf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00097c3:	52                   	push   edx
c00097c4:	50                   	push   eax
c00097c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00097cd:	e8 1e ce 01 00       	call   c00265f0 <__muldf3>
c00097d2:	83 c4 10             	add    esp,0x10
c00097d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00097d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00097dd:	52                   	push   edx
c00097de:	50                   	push   eax
c00097df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00097e7:	e8 87 c7 01 00       	call   c0025f73 <__adddf3>
c00097ec:	83 c4 10             	add    esp,0x10
c00097ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00097f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00097f7:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c00097fb:	0f 89 1d ff ff ff    	jns    c000971e <calc_output_single+0x52>
c0009801:	89 d9                	mov    ecx,ebx
c0009803:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009807:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c000980b:	89 dd                	mov    ebp,ebx
c000980d:	29 c8                	sub    eax,ecx
c000980f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009817:	99                   	cdq    
c0009818:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009820:	f7 fb                	idiv   ebx
c0009822:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009826:	0f af e8             	imul   ebp,eax
c0009829:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c000982d:	01 cd                	add    ebp,ecx
c000982f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009832:	89 e8                	mov    eax,ebp
c0009834:	83 ee 04             	sub    esi,0x4
c0009837:	e8 5c fe ff ff       	call   c0009698 <fp_to_double>
c000983c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009840:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009844:	89 e8                	mov    eax,ebp
c0009846:	29 dd                	sub    ebp,ebx
c0009848:	e8 41 fe ff ff       	call   c000968e <fp_to_int>
c000984d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009850:	52                   	push   edx
c0009851:	52                   	push   edx
c0009852:	51                   	push   ecx
c0009853:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009857:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000985b:	e8 a8 c0 01 00       	call   c0025908 <__subsf3>
c0009860:	89 04 24             	mov    DWORD PTR [esp],eax
c0009863:	e8 7f d7 01 00       	call   c0026fe7 <__extendsfdf2>
c0009868:	83 c4 10             	add    esp,0x10
c000986b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000986f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009873:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009877:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000987b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000987f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009883:	e8 68 cd 01 00       	call   c00265f0 <__muldf3>
c0009888:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000988c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009890:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009893:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009897:	e8 4b d7 01 00       	call   c0026fe7 <__extendsfdf2>
c000989c:	83 c4 10             	add    esp,0x10
c000989f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098a3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098a7:	52                   	push   edx
c00098a8:	50                   	push   eax
c00098a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098b1:	e8 bd c6 01 00       	call   c0025f73 <__adddf3>
c00098b6:	59                   	pop    ecx
c00098b7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00098bb:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00098bf:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c00098c5:	e8 1d d7 01 00       	call   c0026fe7 <__extendsfdf2>
c00098ca:	83 c4 10             	add    esp,0x10
c00098cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00098d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00098d5:	52                   	push   edx
c00098d6:	50                   	push   eax
c00098d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098db:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00098df:	e8 0c cd 01 00       	call   c00265f0 <__muldf3>
c00098e4:	83 c4 10             	add    esp,0x10
c00098e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00098eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00098ef:	52                   	push   edx
c00098f0:	50                   	push   eax
c00098f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00098f9:	e8 75 c6 01 00       	call   c0025f73 <__adddf3>
c00098fe:	83 c4 10             	add    esp,0x10
c0009901:	85 ed                	test   ebp,ebp
c0009903:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009907:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000990b:	0f 8f 21 ff ff ff    	jg     c0009832 <calc_output_single+0x166>
c0009911:	52                   	push   edx
c0009912:	50                   	push   eax
c0009913:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009917:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000991b:	e8 53 c6 01 00       	call   c0025f73 <__adddf3>
c0009920:	83 c4 5c             	add    esp,0x5c
c0009923:	5b                   	pop    ebx
c0009924:	5e                   	pop    esi
c0009925:	5f                   	pop    edi
c0009926:	5d                   	pop    ebp
c0009927:	c3                   	ret    

c0009928 <calc_output_stereo>:
c0009928:	55                   	push   ebp
c0009929:	89 cd                	mov    ebp,ecx
c000992b:	57                   	push   edi
c000992c:	56                   	push   esi
c000992d:	53                   	push   ebx
c000992e:	89 c3                	mov    ebx,eax
c0009930:	83 ec 6c             	sub    esp,0x6c
c0009933:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009937:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000993e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009945:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009949:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000994d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009950:	e8 35 fd ff ff       	call   c000968a <int_to_fp>
c0009955:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000995d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009961:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009969:	29 c8                	sub    eax,ecx
c000996b:	99                   	cdq    
c000996c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009974:	0f af d0             	imul   edx,eax
c0009977:	8d 34 0a             	lea    esi,[edx+ecx*1]
c000997a:	31 d2                	xor    edx,edx
c000997c:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009980:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009984:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009987:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000998b:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c000998e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009992:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009996:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009999:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000999e:	29 c1                	sub    ecx,eax
c00099a0:	31 c0                	xor    eax,eax
c00099a2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c00099a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099ad:	83 c7 08             	add    edi,0x8
c00099b0:	e8 e3 fc ff ff       	call   c0009698 <fp_to_double>
c00099b5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00099b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00099bd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00099c1:	e8 c8 fc ff ff       	call   c000968e <fp_to_int>
c00099c6:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c00099c9:	52                   	push   edx
c00099ca:	52                   	push   edx
c00099cb:	51                   	push   ecx
c00099cc:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c00099d0:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c00099d4:	e8 2f bf 01 00       	call   c0025908 <__subsf3>
c00099d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00099dc:	e8 06 d6 01 00       	call   c0026fe7 <__extendsfdf2>
c00099e1:	83 c4 10             	add    esp,0x10
c00099e4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00099e8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c00099ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00099f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00099fc:	e8 ef cb 01 00       	call   c00265f0 <__muldf3>
c0009a01:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009a05:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009a09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009a10:	e8 d2 d5 01 00       	call   c0026fe7 <__extendsfdf2>
c0009a15:	83 c4 10             	add    esp,0x10
c0009a18:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a1c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a20:	52                   	push   edx
c0009a21:	50                   	push   eax
c0009a22:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a26:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009a2a:	e8 44 c5 01 00       	call   c0025f73 <__adddf3>
c0009a2f:	59                   	pop    ecx
c0009a30:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009a34:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009a38:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009a3e:	e8 a4 d5 01 00       	call   c0026fe7 <__extendsfdf2>
c0009a43:	83 c4 10             	add    esp,0x10
c0009a46:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a4a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a4e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009a56:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009a5e:	e8 8d cb 01 00       	call   c00265f0 <__muldf3>
c0009a63:	83 c4 10             	add    esp,0x10
c0009a66:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a6a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a6e:	52                   	push   edx
c0009a6f:	50                   	push   eax
c0009a70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009a78:	e8 f6 c4 01 00       	call   c0025f73 <__adddf3>
c0009a7d:	59                   	pop    ecx
c0009a7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009a82:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009a86:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009a8c:	e8 56 d5 01 00       	call   c0026fe7 <__extendsfdf2>
c0009a91:	83 c4 10             	add    esp,0x10
c0009a94:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009a98:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009a9c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009aa4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aa8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009aac:	e8 3f cb 01 00       	call   c00265f0 <__muldf3>
c0009ab1:	83 c4 10             	add    esp,0x10
c0009ab4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ab8:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009abc:	52                   	push   edx
c0009abd:	50                   	push   eax
c0009abe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ac6:	e8 a8 c4 01 00       	call   c0025f73 <__adddf3>
c0009acb:	83 c4 10             	add    esp,0x10
c0009ace:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009ad2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ada:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009ade:	0f 89 c5 fe ff ff    	jns    c00099a9 <calc_output_stereo+0x81>
c0009ae4:	29 e9                	sub    ecx,ebp
c0009ae6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009aea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009aee:	29 c8                	sub    eax,ecx
c0009af0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009af8:	99                   	cdq    
c0009af9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009afd:	31 d2                	xor    edx,edx
c0009aff:	0f af f8             	imul   edi,eax
c0009b02:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b06:	40                   	inc    eax
c0009b07:	01 cf                	add    edi,ecx
c0009b09:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009b0e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009b12:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009b1a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009b1d:	31 c0                	xor    eax,eax
c0009b1f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b23:	89 f8                	mov    eax,edi
c0009b25:	83 eb 08             	sub    ebx,0x8
c0009b28:	e8 6b fb ff ff       	call   c0009698 <fp_to_double>
c0009b2d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009b31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009b35:	89 f8                	mov    eax,edi
c0009b37:	e8 52 fb ff ff       	call   c000968e <fp_to_int>
c0009b3c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009b3f:	52                   	push   edx
c0009b40:	52                   	push   edx
c0009b41:	55                   	push   ebp
c0009b42:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009b46:	e8 bd bd 01 00       	call   c0025908 <__subsf3>
c0009b4b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b4e:	e8 94 d4 01 00       	call   c0026fe7 <__extendsfdf2>
c0009b53:	83 c4 10             	add    esp,0x10
c0009b56:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b5a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b62:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009b66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009b6e:	e8 7d ca 01 00       	call   c00265f0 <__muldf3>
c0009b73:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	e8 64 d4 01 00       	call   c0026fe7 <__extendsfdf2>
c0009b83:	83 c4 10             	add    esp,0x10
c0009b86:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b8a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009b8e:	52                   	push   edx
c0009b8f:	50                   	push   eax
c0009b90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b94:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009b98:	e8 d6 c3 01 00       	call   c0025f73 <__adddf3>
c0009b9d:	59                   	pop    ecx
c0009b9e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009ba2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009ba6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009bac:	e8 36 d4 01 00       	call   c0026fe7 <__extendsfdf2>
c0009bb1:	83 c4 10             	add    esp,0x10
c0009bb4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bbc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009bc4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009bcc:	e8 1f ca 01 00       	call   c00265f0 <__muldf3>
c0009bd1:	83 c4 10             	add    esp,0x10
c0009bd4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bd8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009bdc:	52                   	push   edx
c0009bdd:	50                   	push   eax
c0009bde:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009be6:	e8 88 c3 01 00       	call   c0025f73 <__adddf3>
c0009beb:	5d                   	pop    ebp
c0009bec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009bf0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009bf4:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009bfa:	e8 e8 d3 01 00       	call   c0026fe7 <__extendsfdf2>
c0009bff:	83 c4 10             	add    esp,0x10
c0009c02:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009c06:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009c0a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c0e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c12:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c16:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c1a:	e8 d1 c9 01 00       	call   c00265f0 <__muldf3>
c0009c1f:	83 c4 10             	add    esp,0x10
c0009c22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009c26:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009c2a:	52                   	push   edx
c0009c2b:	50                   	push   eax
c0009c2c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c30:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009c34:	e8 3a c3 01 00       	call   c0025f73 <__adddf3>
c0009c39:	83 c4 10             	add    esp,0x10
c0009c3c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009c40:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009c44:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009c48:	85 ff                	test   edi,edi
c0009c4a:	0f 8f d3 fe ff ff    	jg     c0009b23 <calc_output_stereo+0x1fb>
c0009c50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009c60:	e8 0e c3 01 00       	call   c0025f73 <__adddf3>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c70:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009c78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c80:	e8 6b c9 01 00       	call   c00265f0 <__muldf3>
c0009c85:	59                   	pop    ecx
c0009c86:	5b                   	pop    ebx
c0009c87:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c8f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c93:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009c97:	e8 27 d2 01 00       	call   c0026ec3 <__truncdfsf2>
c0009c9c:	83 c4 10             	add    esp,0x10
c0009c9f:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ca6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cb8:	e8 b6 c2 01 00       	call   c0025f73 <__adddf3>
c0009cbd:	83 c4 10             	add    esp,0x10
c0009cc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009cc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009cc8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ccc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009cd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cd8:	e8 13 c9 01 00       	call   c00265f0 <__muldf3>
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ce3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ce7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009cef:	e8 cf d1 01 00       	call   c0026ec3 <__truncdfsf2>
c0009cf4:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009cfb:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009cfe:	83 c4 7c             	add    esp,0x7c
c0009d01:	5b                   	pop    ebx
c0009d02:	5e                   	pop    esi
c0009d03:	5f                   	pop    edi
c0009d04:	5d                   	pop    ebp
c0009d05:	c3                   	ret    

c0009d06 <calc_output_quad>:
c0009d06:	55                   	push   ebp
c0009d07:	57                   	push   edi
c0009d08:	56                   	push   esi
c0009d09:	89 c6                	mov    esi,eax
c0009d0b:	53                   	push   ebx
c0009d0c:	83 ec 7c             	sub    esp,0x7c
c0009d0f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d13:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009d17:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009d1e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009d25:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009d29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009d2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009d30:	e8 55 f9 ff ff       	call   c000968a <int_to_fp>
c0009d35:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009d38:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009d3b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009d3f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009d43:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009d47:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009d4b:	99                   	cdq    
c0009d4c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009d50:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d54:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009d57:	31 d2                	xor    edx,edx
c0009d59:	0f af d8             	imul   ebx,eax
c0009d5c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009d64:	0f af c7             	imul   eax,edi
c0009d67:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009d6b:	29 c1                	sub    ecx,eax
c0009d6d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009d75:	31 c0                	xor    eax,eax
c0009d77:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009d7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d7e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d82:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d86:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d8e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d92:	89 d8                	mov    eax,ebx
c0009d94:	83 c7 10             	add    edi,0x10
c0009d97:	e8 fc f8 ff ff       	call   c0009698 <fp_to_double>
c0009d9c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009da0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da4:	89 d8                	mov    eax,ebx
c0009da6:	e8 e3 f8 ff ff       	call   c000968e <fp_to_int>
c0009dab:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009daf:	52                   	push   edx
c0009db0:	52                   	push   edx
c0009db1:	51                   	push   ecx
c0009db2:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009db6:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009dba:	e8 49 bb 01 00       	call   c0025908 <__subsf3>
c0009dbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0009dc2:	e8 20 d2 01 00       	call   c0026fe7 <__extendsfdf2>
c0009dc7:	83 c4 10             	add    esp,0x10
c0009dca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009dce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dda:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009dde:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009de2:	e8 09 c8 01 00       	call   c00265f0 <__muldf3>
c0009de7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0009deb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009def:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009df2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009df6:	e8 ec d1 01 00       	call   c0026fe7 <__extendsfdf2>
c0009dfb:	83 c4 10             	add    esp,0x10
c0009dfe:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e02:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e06:	52                   	push   edx
c0009e07:	50                   	push   eax
c0009e08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e10:	e8 5e c1 01 00       	call   c0025f73 <__adddf3>
c0009e15:	59                   	pop    ecx
c0009e16:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e1a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e1e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c0009e24:	e8 be d1 01 00       	call   c0026fe7 <__extendsfdf2>
c0009e29:	83 c4 10             	add    esp,0x10
c0009e2c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e30:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e3c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e40:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e44:	e8 a7 c7 01 00       	call   c00265f0 <__muldf3>
c0009e49:	83 c4 10             	add    esp,0x10
c0009e4c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e50:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e54:	52                   	push   edx
c0009e55:	50                   	push   eax
c0009e56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009e5e:	e8 10 c1 01 00       	call   c0025f73 <__adddf3>
c0009e63:	59                   	pop    ecx
c0009e64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009e68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009e6c:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c0009e72:	e8 70 d1 01 00       	call   c0026fe7 <__extendsfdf2>
c0009e77:	83 c4 10             	add    esp,0x10
c0009e7a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e7e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009e82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e8e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009e92:	e8 59 c7 01 00       	call   c00265f0 <__muldf3>
c0009e97:	83 c4 10             	add    esp,0x10
c0009e9a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009e9e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ea2:	52                   	push   edx
c0009ea3:	50                   	push   eax
c0009ea4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009eac:	e8 c2 c0 01 00       	call   c0025f73 <__adddf3>
c0009eb1:	59                   	pop    ecx
c0009eb2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0009eb6:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0009eba:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009ec0:	e8 22 d1 01 00       	call   c0026fe7 <__extendsfdf2>
c0009ec5:	83 c4 10             	add    esp,0x10
c0009ec8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009ecc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ed8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009edc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009ee0:	e8 0b c7 01 00       	call   c00265f0 <__muldf3>
c0009ee5:	83 c4 10             	add    esp,0x10
c0009ee8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009eec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ef0:	52                   	push   edx
c0009ef1:	50                   	push   eax
c0009ef2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009ef6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009efa:	e8 74 c0 01 00       	call   c0025f73 <__adddf3>
c0009eff:	59                   	pop    ecx
c0009f00:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009f04:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009f08:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009f0e:	e8 d4 d0 01 00       	call   c0026fe7 <__extendsfdf2>
c0009f13:	83 c4 10             	add    esp,0x10
c0009f16:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009f1a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009f26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009f2e:	e8 bd c6 01 00       	call   c00265f0 <__muldf3>
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009f3a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009f3e:	52                   	push   edx
c0009f3f:	50                   	push   eax
c0009f40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009f48:	e8 26 c0 01 00       	call   c0025f73 <__adddf3>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009f54:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009f58:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c0009f5c:	0f 89 30 fe ff ff    	jns    c0009d92 <calc_output_quad+0x8c>
c0009f62:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0009f66:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009f6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f6e:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0009f72:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0009f7a:	29 c8                	sub    eax,ecx
c0009f7c:	99                   	cdq    
c0009f7d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f81:	31 d2                	xor    edx,edx
c0009f83:	0f af d8             	imul   ebx,eax
c0009f86:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009f8a:	40                   	inc    eax
c0009f8b:	01 cb                	add    ebx,ecx
c0009f8d:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0009f92:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009f96:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c0009f9a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009f9e:	8d 34 86             	lea    esi,[esi+eax*4]
c0009fa1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0009fa9:	31 c0                	xor    eax,eax
c0009fab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009faf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009fb3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009fb7:	89 d8                	mov    eax,ebx
c0009fb9:	83 ee 10             	sub    esi,0x10
c0009fbc:	e8 d7 f6 ff ff       	call   c0009698 <fp_to_double>
c0009fc1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fc9:	89 d8                	mov    eax,ebx
c0009fcb:	e8 be f6 ff ff       	call   c000968e <fp_to_int>
c0009fd0:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c0009fd4:	52                   	push   edx
c0009fd5:	52                   	push   edx
c0009fd6:	57                   	push   edi
c0009fd7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009fdb:	e8 28 b9 01 00       	call   c0025908 <__subsf3>
c0009fe0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009fe3:	e8 ff cf 01 00       	call   c0026fe7 <__extendsfdf2>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fef:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c0009ff3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ff7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ffb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0009fff:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a003:	e8 e8 c5 01 00       	call   c00265f0 <__muldf3>
c000a008:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a00b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a00f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a013:	e8 cf cf 01 00       	call   c0026fe7 <__extendsfdf2>
c000a018:	83 c4 10             	add    esp,0x10
c000a01b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a023:	52                   	push   edx
c000a024:	50                   	push   eax
c000a025:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a029:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a02d:	e8 41 bf 01 00       	call   c0025f73 <__adddf3>
c000a032:	59                   	pop    ecx
c000a033:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a037:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a03b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a041:	e8 a1 cf 01 00       	call   c0026fe7 <__extendsfdf2>
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a04d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a051:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a055:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a059:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a05d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a061:	e8 8a c5 01 00       	call   c00265f0 <__muldf3>
c000a066:	83 c4 10             	add    esp,0x10
c000a069:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a06d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a071:	52                   	push   edx
c000a072:	50                   	push   eax
c000a073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a07b:	e8 f3 be 01 00       	call   c0025f73 <__adddf3>
c000a080:	5f                   	pop    edi
c000a081:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a085:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a089:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a08f:	e8 53 cf 01 00       	call   c0026fe7 <__extendsfdf2>
c000a094:	83 c4 10             	add    esp,0x10
c000a097:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a09b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0a7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0ab:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0af:	e8 3c c5 01 00       	call   c00265f0 <__muldf3>
c000a0b4:	83 c4 10             	add    esp,0x10
c000a0b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0bf:	52                   	push   edx
c000a0c0:	50                   	push   eax
c000a0c1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a0c9:	e8 a5 be 01 00       	call   c0025f73 <__adddf3>
c000a0ce:	59                   	pop    ecx
c000a0cf:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a0d3:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a0d7:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a0dd:	e8 05 cf 01 00       	call   c0026fe7 <__extendsfdf2>
c000a0e2:	83 c4 10             	add    esp,0x10
c000a0e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0fd:	e8 ee c4 01 00       	call   c00265f0 <__muldf3>
c000a102:	83 c4 10             	add    esp,0x10
c000a105:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a109:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a10d:	52                   	push   edx
c000a10e:	50                   	push   eax
c000a10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a113:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a117:	e8 57 be 01 00       	call   c0025f73 <__adddf3>
c000a11c:	5f                   	pop    edi
c000a11d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a121:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a125:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a12b:	e8 b7 ce 01 00       	call   c0026fe7 <__extendsfdf2>
c000a130:	83 c4 10             	add    esp,0x10
c000a133:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a137:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a13b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a13f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a143:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a147:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a14b:	e8 a0 c4 01 00       	call   c00265f0 <__muldf3>
c000a150:	83 c4 10             	add    esp,0x10
c000a153:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a157:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a15b:	52                   	push   edx
c000a15c:	50                   	push   eax
c000a15d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a161:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a165:	e8 09 be 01 00       	call   c0025f73 <__adddf3>
c000a16a:	83 c4 10             	add    esp,0x10
c000a16d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a171:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a175:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a179:	85 db                	test   ebx,ebx
c000a17b:	0f 8f 36 fe ff ff    	jg     c0009fb7 <calc_output_quad+0x2b1>
c000a181:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a185:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a189:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a18d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a191:	e8 dd bd 01 00       	call   c0025f73 <__adddf3>
c000a196:	83 c4 10             	add    esp,0x10
c000a199:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a19d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1b1:	e8 3a c4 01 00       	call   c00265f0 <__muldf3>
c000a1b6:	59                   	pop    ecx
c000a1b7:	5b                   	pop    ebx
c000a1b8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a1bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1c8:	e8 f6 cc 01 00       	call   c0026ec3 <__truncdfsf2>
c000a1cd:	83 c4 10             	add    esp,0x10
c000a1d0:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a1d7:	89 06                	mov    DWORD PTR [esi],eax
c000a1d9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1dd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a1e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a1e9:	e8 85 bd 01 00       	call   c0025f73 <__adddf3>
c000a1ee:	83 c4 10             	add    esp,0x10
c000a1f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a1f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a1fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a201:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a205:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a209:	e8 e2 c3 01 00       	call   c00265f0 <__muldf3>
c000a20e:	5e                   	pop    esi
c000a20f:	5f                   	pop    edi
c000a210:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a214:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a21c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a220:	e8 9e cc 01 00       	call   c0026ec3 <__truncdfsf2>
c000a225:	83 c4 10             	add    esp,0x10
c000a228:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a22f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a232:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a236:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a23a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a23e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a242:	e8 2c bd 01 00       	call   c0025f73 <__adddf3>
c000a247:	83 c4 10             	add    esp,0x10
c000a24a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a24e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a252:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a256:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a25e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a262:	e8 89 c3 01 00       	call   c00265f0 <__muldf3>
c000a267:	5d                   	pop    ebp
c000a268:	59                   	pop    ecx
c000a269:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a26d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a271:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a279:	e8 45 cc 01 00       	call   c0026ec3 <__truncdfsf2>
c000a27e:	83 c4 10             	add    esp,0x10
c000a281:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a288:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a28b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a28f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a293:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a297:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a29b:	e8 d3 bc 01 00       	call   c0025f73 <__adddf3>
c000a2a0:	83 c4 10             	add    esp,0x10
c000a2a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a2a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a2ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2bb:	e8 30 c3 01 00       	call   c00265f0 <__muldf3>
c000a2c0:	5b                   	pop    ebx
c000a2c1:	5e                   	pop    esi
c000a2c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a2c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a2ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a2d2:	e8 ec cb 01 00       	call   c0026ec3 <__truncdfsf2>
c000a2d7:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a2de:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a2e1:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a2e7:	5b                   	pop    ebx
c000a2e8:	5e                   	pop    esi
c000a2e9:	5f                   	pop    edi
c000a2ea:	5d                   	pop    ebp
c000a2eb:	c3                   	ret    

c000a2ec <calc_output_hex>:
c000a2ec:	55                   	push   ebp
c000a2ed:	89 cd                	mov    ebp,ecx
c000a2ef:	57                   	push   edi
c000a2f0:	56                   	push   esi
c000a2f1:	53                   	push   ebx
c000a2f2:	89 c3                	mov    ebx,eax
c000a2f4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a2fa:	89 14 24             	mov    DWORD PTR [esp],edx
c000a2fd:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a304:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a30b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a30f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a313:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a316:	e8 6f f3 ff ff       	call   c000968a <int_to_fp>
c000a31b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a31e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a322:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a325:	29 c8                	sub    eax,ecx
c000a327:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a32b:	99                   	cdq    
c000a32c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a334:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a337:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a33f:	0f af f8             	imul   edi,eax
c000a342:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a345:	01 cf                	add    edi,ecx
c000a347:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a34b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a34e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a352:	0f af c2             	imul   eax,edx
c000a355:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a359:	29 c1                	sub    ecx,eax
c000a35b:	31 d2                	xor    edx,edx
c000a35d:	31 c0                	xor    eax,eax
c000a35f:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a36a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a36e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a372:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a376:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a37a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a37e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a382:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a386:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38a:	89 f8                	mov    eax,edi
c000a38c:	e8 07 f3 ff ff       	call   c0009698 <fp_to_double>
c000a391:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a395:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a399:	89 f8                	mov    eax,edi
c000a39b:	e8 ee f2 ff ff       	call   c000968e <fp_to_int>
c000a3a0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3a4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a3a7:	52                   	push   edx
c000a3a8:	52                   	push   edx
c000a3a9:	51                   	push   ecx
c000a3aa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a3ae:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a3b5:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a3b9:	e8 4a b5 01 00       	call   c0025908 <__subsf3>
c000a3be:	89 04 24             	mov    DWORD PTR [esp],eax
c000a3c1:	e8 21 cc 01 00       	call   c0026fe7 <__extendsfdf2>
c000a3c6:	83 c4 10             	add    esp,0x10
c000a3c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a3cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a3e1:	e8 0a c2 01 00       	call   c00265f0 <__muldf3>
c000a3e6:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a3ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a3ee:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a3f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a3f5:	e8 ed cb 01 00       	call   c0026fe7 <__extendsfdf2>
c000a3fa:	83 c4 10             	add    esp,0x10
c000a3fd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a401:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a40f:	e8 5f bb 01 00       	call   c0025f73 <__adddf3>
c000a414:	59                   	pop    ecx
c000a415:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a419:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a41d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a423:	e8 bf cb 01 00       	call   c0026fe7 <__extendsfdf2>
c000a428:	83 c4 10             	add    esp,0x10
c000a42b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a42f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a433:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a437:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a43f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a443:	e8 a8 c1 01 00       	call   c00265f0 <__muldf3>
c000a448:	83 c4 10             	add    esp,0x10
c000a44b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a44f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a453:	52                   	push   edx
c000a454:	50                   	push   eax
c000a455:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a459:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a45d:	e8 11 bb 01 00       	call   c0025f73 <__adddf3>
c000a462:	59                   	pop    ecx
c000a463:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a467:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a46b:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a471:	e8 71 cb 01 00       	call   c0026fe7 <__extendsfdf2>
c000a476:	83 c4 10             	add    esp,0x10
c000a479:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a47d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a481:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a485:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a489:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a48d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a491:	e8 5a c1 01 00       	call   c00265f0 <__muldf3>
c000a496:	83 c4 10             	add    esp,0x10
c000a499:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a49d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4a1:	52                   	push   edx
c000a4a2:	50                   	push   eax
c000a4a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4ab:	e8 c3 ba 01 00       	call   c0025f73 <__adddf3>
c000a4b0:	59                   	pop    ecx
c000a4b1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a4b5:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a4b9:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a4bf:	e8 23 cb 01 00       	call   c0026fe7 <__extendsfdf2>
c000a4c4:	83 c4 10             	add    esp,0x10
c000a4c7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4cb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4d7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4db:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a4df:	e8 0c c1 01 00       	call   c00265f0 <__muldf3>
c000a4e4:	83 c4 10             	add    esp,0x10
c000a4e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a4eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a4ef:	52                   	push   edx
c000a4f0:	50                   	push   eax
c000a4f1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a4f9:	e8 75 ba 01 00       	call   c0025f73 <__adddf3>
c000a4fe:	59                   	pop    ecx
c000a4ff:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a503:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a507:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a50d:	e8 d5 ca 01 00       	call   c0026fe7 <__extendsfdf2>
c000a512:	83 c4 10             	add    esp,0x10
c000a515:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a519:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a51d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a521:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a525:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a529:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a52d:	e8 be c0 01 00       	call   c00265f0 <__muldf3>
c000a532:	83 c4 10             	add    esp,0x10
c000a535:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a539:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a53d:	52                   	push   edx
c000a53e:	50                   	push   eax
c000a53f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a543:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a547:	e8 27 ba 01 00       	call   c0025f73 <__adddf3>
c000a54c:	59                   	pop    ecx
c000a54d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a551:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a555:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a55b:	e8 87 ca 01 00       	call   c0026fe7 <__extendsfdf2>
c000a560:	83 c4 10             	add    esp,0x10
c000a563:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a567:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a573:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a577:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a57b:	e8 70 c0 01 00       	call   c00265f0 <__muldf3>
c000a580:	83 c4 10             	add    esp,0x10
c000a583:	83 c6 18             	add    esi,0x18
c000a586:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a58a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a58e:	52                   	push   edx
c000a58f:	50                   	push   eax
c000a590:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a594:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a598:	e8 d6 b9 01 00       	call   c0025f73 <__adddf3>
c000a59d:	59                   	pop    ecx
c000a59e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a5a2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a5a6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a5ac:	e8 36 ca 01 00       	call   c0026fe7 <__extendsfdf2>
c000a5b1:	83 c4 10             	add    esp,0x10
c000a5b4:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5b8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a5bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a5c4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5c8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a5cc:	e8 1f c0 01 00       	call   c00265f0 <__muldf3>
c000a5d1:	83 c4 10             	add    esp,0x10
c000a5d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5d8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5dc:	52                   	push   edx
c000a5dd:	50                   	push   eax
c000a5de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a5e6:	e8 88 b9 01 00       	call   c0025f73 <__adddf3>
c000a5eb:	83 c4 10             	add    esp,0x10
c000a5ee:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a5f2:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a5f6:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a5f9:	0f 89 8b fd ff ff    	jns    c000a38a <calc_output_hex+0x9e>
c000a5ff:	31 f6                	xor    esi,esi
c000a601:	31 ff                	xor    edi,edi
c000a603:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a607:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a60a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a60e:	29 e9                	sub    ecx,ebp
c000a610:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a614:	29 c8                	sub    eax,ecx
c000a616:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a619:	99                   	cdq    
c000a61a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a61e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a621:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a625:	0f af e8             	imul   ebp,eax
c000a628:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a62c:	40                   	inc    eax
c000a62d:	01 cd                	add    ebp,ecx
c000a62f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a634:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a638:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a63c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a640:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a643:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a647:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a64b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a64f:	89 e8                	mov    eax,ebp
c000a651:	e8 42 f0 ff ff       	call   c0009698 <fp_to_double>
c000a656:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a65a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a65e:	89 e8                	mov    eax,ebp
c000a660:	e8 29 f0 ff ff       	call   c000968e <fp_to_int>
c000a665:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a669:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a66c:	52                   	push   edx
c000a66d:	52                   	push   edx
c000a66e:	51                   	push   ecx
c000a66f:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a676:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a67d:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a681:	e8 82 b2 01 00       	call   c0025908 <__subsf3>
c000a686:	89 04 24             	mov    DWORD PTR [esp],eax
c000a689:	e8 59 c9 01 00       	call   c0026fe7 <__extendsfdf2>
c000a68e:	83 c4 10             	add    esp,0x10
c000a691:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a695:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a699:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a69d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6a1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a6a9:	e8 42 bf 01 00       	call   c00265f0 <__muldf3>
c000a6ae:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a6b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6b9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a6bc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a6c0:	e8 22 c9 01 00       	call   c0026fe7 <__extendsfdf2>
c000a6c5:	83 c4 10             	add    esp,0x10
c000a6c8:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6cc:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6d0:	52                   	push   edx
c000a6d1:	50                   	push   eax
c000a6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6da:	e8 94 b8 01 00       	call   c0025f73 <__adddf3>
c000a6df:	59                   	pop    ecx
c000a6e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a6e4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a6e8:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a6ee:	e8 f4 c8 01 00       	call   c0026fe7 <__extendsfdf2>
c000a6f3:	83 c4 10             	add    esp,0x10
c000a6f6:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a6fa:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a706:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a70e:	e8 dd be 01 00       	call   c00265f0 <__muldf3>
c000a713:	83 c4 10             	add    esp,0x10
c000a716:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a71a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a71e:	52                   	push   edx
c000a71f:	50                   	push   eax
c000a720:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a724:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a728:	e8 46 b8 01 00       	call   c0025f73 <__adddf3>
c000a72d:	59                   	pop    ecx
c000a72e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a732:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a736:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a73c:	e8 a6 c8 01 00       	call   c0026fe7 <__extendsfdf2>
c000a741:	83 c4 10             	add    esp,0x10
c000a744:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a748:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a74c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a754:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a758:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a75c:	e8 8f be 01 00       	call   c00265f0 <__muldf3>
c000a761:	83 c4 10             	add    esp,0x10
c000a764:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a768:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a76c:	52                   	push   edx
c000a76d:	50                   	push   eax
c000a76e:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a772:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a776:	e8 f8 b7 01 00       	call   c0025f73 <__adddf3>
c000a77b:	59                   	pop    ecx
c000a77c:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a780:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a784:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a78a:	e8 58 c8 01 00       	call   c0026fe7 <__extendsfdf2>
c000a78f:	83 c4 10             	add    esp,0x10
c000a792:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a796:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a79a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a79e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7a6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7aa:	e8 41 be 01 00       	call   c00265f0 <__muldf3>
c000a7af:	83 c4 10             	add    esp,0x10
c000a7b2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7b6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7ba:	52                   	push   edx
c000a7bb:	50                   	push   eax
c000a7bc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c0:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c4:	e8 aa b7 01 00       	call   c0025f73 <__adddf3>
c000a7c9:	59                   	pop    ecx
c000a7ca:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a7ce:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000a7d2:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000a7d8:	e8 0a c8 01 00       	call   c0026fe7 <__extendsfdf2>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a7e4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a7e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a7f8:	e8 f3 bd 01 00       	call   c00265f0 <__muldf3>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a804:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a808:	52                   	push   edx
c000a809:	50                   	push   eax
c000a80a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a80e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a812:	e8 5c b7 01 00       	call   c0025f73 <__adddf3>
c000a817:	59                   	pop    ecx
c000a818:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a81c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a820:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000a826:	e8 bc c7 01 00       	call   c0026fe7 <__extendsfdf2>
c000a82b:	83 c4 10             	add    esp,0x10
c000a82e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a832:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a836:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a83e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a842:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a846:	e8 a5 bd 01 00       	call   c00265f0 <__muldf3>
c000a84b:	83 c4 10             	add    esp,0x10
c000a84e:	83 eb 18             	sub    ebx,0x18
c000a851:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a855:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a859:	52                   	push   edx
c000a85a:	50                   	push   eax
c000a85b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a85f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a863:	e8 0b b7 01 00       	call   c0025f73 <__adddf3>
c000a868:	59                   	pop    ecx
c000a869:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a86d:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000a871:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000a877:	e8 6b c7 01 00       	call   c0026fe7 <__extendsfdf2>
c000a87c:	83 c4 10             	add    esp,0x10
c000a87f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a883:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a887:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a88f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a893:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a897:	e8 54 bd 01 00       	call   c00265f0 <__muldf3>
c000a89c:	83 c4 10             	add    esp,0x10
c000a89f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8a3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8a7:	52                   	push   edx
c000a8a8:	50                   	push   eax
c000a8a9:	57                   	push   edi
c000a8aa:	56                   	push   esi
c000a8ab:	e8 c3 b6 01 00       	call   c0025f73 <__adddf3>
c000a8b0:	83 c4 10             	add    esp,0x10
c000a8b3:	89 c6                	mov    esi,eax
c000a8b5:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000a8b8:	89 d7                	mov    edi,edx
c000a8ba:	85 ed                	test   ebp,ebp
c000a8bc:	0f 8f 8d fd ff ff    	jg     c000a64f <calc_output_hex+0x363>
c000a8c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8d2:	e8 9c b6 01 00       	call   c0025f73 <__adddf3>
c000a8d7:	83 c4 10             	add    esp,0x10
c000a8da:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a8f1:	e8 fa bc 01 00       	call   c00265f0 <__muldf3>
c000a8f6:	59                   	pop    ecx
c000a8f7:	5b                   	pop    ebx
c000a8f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a900:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a904:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a908:	e8 b6 c5 01 00       	call   c0026ec3 <__truncdfsf2>
c000a90d:	83 c4 10             	add    esp,0x10
c000a910:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a917:	89 03                	mov    DWORD PTR [ebx],eax
c000a919:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a91d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a921:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a925:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a929:	e8 45 b6 01 00       	call   c0025f73 <__adddf3>
c000a92e:	83 c4 10             	add    esp,0x10
c000a931:	89 04 24             	mov    DWORD PTR [esp],eax
c000a934:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a93c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a940:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a948:	e8 a3 bc 01 00       	call   c00265f0 <__muldf3>
c000a94d:	5d                   	pop    ebp
c000a94e:	59                   	pop    ecx
c000a94f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a953:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a957:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a95f:	e8 5f c5 01 00       	call   c0026ec3 <__truncdfsf2>
c000a964:	83 c4 10             	add    esp,0x10
c000a967:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a96e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000a971:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a975:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a979:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a97d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a981:	e8 ed b5 01 00       	call   c0025f73 <__adddf3>
c000a986:	83 c4 10             	add    esp,0x10
c000a989:	89 04 24             	mov    DWORD PTR [esp],eax
c000a98c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a990:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a994:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a998:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a99c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9a0:	e8 4b bc 01 00       	call   c00265f0 <__muldf3>
c000a9a5:	5b                   	pop    ebx
c000a9a6:	5d                   	pop    ebp
c000a9a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9b7:	e8 07 c5 01 00       	call   c0026ec3 <__truncdfsf2>
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000a9c6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000a9c9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9cd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a9d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a9d9:	e8 95 b5 01 00       	call   c0025f73 <__adddf3>
c000a9de:	83 c4 10             	add    esp,0x10
c000a9e1:	89 04 24             	mov    DWORD PTR [esp],eax
c000a9e4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9e8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9ec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a9f8:	e8 f3 bb 01 00       	call   c00265f0 <__muldf3>
c000a9fd:	59                   	pop    ecx
c000a9fe:	5b                   	pop    ebx
c000a9ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa07:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa0f:	e8 af c4 01 00       	call   c0026ec3 <__truncdfsf2>
c000aa14:	83 c4 10             	add    esp,0x10
c000aa17:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000aa21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa25:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000aa29:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa2d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000aa31:	e8 3d b5 01 00       	call   c0025f73 <__adddf3>
c000aa36:	83 c4 10             	add    esp,0x10
c000aa39:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa48:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa4c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa50:	e8 9b bb 01 00       	call   c00265f0 <__muldf3>
c000aa55:	5d                   	pop    ebp
c000aa56:	59                   	pop    ecx
c000aa57:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aa5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa5f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa63:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa67:	e8 57 c4 01 00       	call   c0026ec3 <__truncdfsf2>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aa76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000aa79:	57                   	push   edi
c000aa7a:	56                   	push   esi
c000aa7b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa7f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000aa83:	e8 eb b4 01 00       	call   c0025f73 <__adddf3>
c000aa88:	83 c4 10             	add    esp,0x10
c000aa8b:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa8e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa92:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa96:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aa9e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aaa2:	e8 49 bb 01 00       	call   c00265f0 <__muldf3>
c000aaa7:	5b                   	pop    ebx
c000aaa8:	5e                   	pop    esi
c000aaa9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aaad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aab1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aab9:	e8 05 c4 01 00       	call   c0026ec3 <__truncdfsf2>
c000aabe:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000aac5:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aac8:	81 c4 9c 00 00 00    	add    esp,0x9c
c000aace:	5b                   	pop    ebx
c000aacf:	5e                   	pop    esi
c000aad0:	5f                   	pop    edi
c000aad1:	5d                   	pop    ebp
c000aad2:	c3                   	ret    

c000aad3 <sinc_reset>:
c000aad3:	56                   	push   esi
c000aad4:	53                   	push   ebx
c000aad5:	51                   	push   ecx
c000aad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aada:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000aadd:	85 db                	test   ebx,ebx
c000aadf:	74 59                	je     c000ab3a <sinc_reset+0x67>
c000aae1:	31 d2                	xor    edx,edx
c000aae3:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000aaea:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000aaed:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000aaf0:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000aaf7:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000aafe:	31 c0                	xor    eax,eax
c000ab00:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ab06:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ab09:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ab0c:	52                   	push   edx
c000ab0d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab10:	c1 e0 02             	shl    eax,0x2
c000ab13:	50                   	push   eax
c000ab14:	6a 00                	push   0x0
c000ab16:	56                   	push   esi
c000ab17:	e8 6f 5b ff ff       	call   c000068b <memset>
c000ab1c:	83 c4 0c             	add    esp,0xc
c000ab1f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab22:	c1 e0 02             	shl    eax,0x2
c000ab25:	50                   	push   eax
c000ab26:	68 aa 00 00 00       	push   0xaa
c000ab2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ab2e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ab31:	50                   	push   eax
c000ab32:	e8 54 5b ff ff       	call   c000068b <memset>
c000ab37:	83 c4 10             	add    esp,0x10
c000ab3a:	58                   	pop    eax
c000ab3b:	5b                   	pop    ebx
c000ab3c:	5e                   	pop    esi
c000ab3d:	c3                   	ret    

c000ab3e <calc_output_multi>:
c000ab3e:	55                   	push   ebp
c000ab3f:	57                   	push   edi
c000ab40:	56                   	push   esi
c000ab41:	89 c6                	mov    esi,eax
c000ab43:	53                   	push   ebx
c000ab44:	83 ec 4c             	sub    esp,0x4c
c000ab47:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ab4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ab4f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ab53:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ab57:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ab5b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ab5f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ab63:	8d 46 44             	lea    eax,[esi+0x44]
c000ab66:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab69:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ab6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ab73:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ab76:	e8 0f eb ff ff       	call   c000968a <int_to_fp>
c000ab7b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000ab7e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ab82:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000ab86:	99                   	cdq    
c000ab87:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000ab8b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ab8f:	0f af d0             	imul   edx,eax
c000ab92:	0f af c3             	imul   eax,ebx
c000ab95:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ab99:	29 c1                	sub    ecx,eax
c000ab9b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ab9f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000aba3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000abaa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000abae:	57                   	push   edi
c000abaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000abb3:	6a 00                	push   0x0
c000abb5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abb9:	e8 cd 5a ff ff       	call   c000068b <memset>
c000abbe:	83 c4 10             	add    esp,0x10
c000abc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abc5:	89 df                	mov    edi,ebx
c000abc7:	e8 cc ea ff ff       	call   c0009698 <fp_to_double>
c000abcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000abd4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abd8:	e8 b1 ea ff ff       	call   c000968e <fp_to_int>
c000abdd:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000abe0:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000abe3:	51                   	push   ecx
c000abe4:	51                   	push   ecx
c000abe5:	55                   	push   ebp
c000abe6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000abea:	e8 19 ad 01 00       	call   c0025908 <__subsf3>
c000abef:	89 04 24             	mov    DWORD PTR [esp],eax
c000abf2:	e8 f0 c3 01 00       	call   c0026fe7 <__extendsfdf2>
c000abf7:	83 c4 10             	add    esp,0x10
c000abfa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000abfe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac0a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac0e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac12:	e8 d9 b9 01 00       	call   c00265f0 <__muldf3>
c000ac17:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ac1a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ac1e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ac22:	e8 c0 c3 01 00       	call   c0026fe7 <__extendsfdf2>
c000ac27:	83 c4 10             	add    esp,0x10
c000ac2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac32:	52                   	push   edx
c000ac33:	50                   	push   eax
c000ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac3c:	e8 32 b3 01 00       	call   c0025f73 <__adddf3>
c000ac41:	83 c4 10             	add    esp,0x10
c000ac44:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac48:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ac4c:	89 f8                	mov    eax,edi
c000ac4e:	b9 08 00 00 00       	mov    ecx,0x8
c000ac53:	99                   	cdq    
c000ac54:	f7 f9                	idiv   ecx
c000ac56:	4a                   	dec    edx
c000ac57:	83 fa 06             	cmp    edx,0x6
c000ac5a:	77 07                	ja     c000ac63 <calc_output_multi+0x125>
c000ac5c:	ff 24 95 a4 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd785c]
c000ac63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ac66:	4f                   	dec    edi
c000ac67:	83 ec 0c             	sub    esp,0xc
c000ac6a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ac6d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ac71:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ac78:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ac7c:	e8 66 c3 01 00       	call   c0026fe7 <__extendsfdf2>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ac88:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ac8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ac94:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac98:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ac9c:	e8 4f b9 01 00       	call   c00265f0 <__muldf3>
c000aca1:	83 c4 10             	add    esp,0x10
c000aca4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aca8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000acac:	52                   	push   edx
c000acad:	50                   	push   eax
c000acae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000acb1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000acb4:	e8 ba b2 01 00       	call   c0025f73 <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000acbf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000acc2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000acc5:	4f                   	dec    edi
c000acc6:	83 ec 0c             	sub    esp,0xc
c000acc9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000accc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000acd0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000acd7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000acdb:	e8 07 c3 01 00       	call   c0026fe7 <__extendsfdf2>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ace7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aceb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000acf3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acf7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000acfb:	e8 f0 b8 01 00       	call   c00265f0 <__muldf3>
c000ad00:	83 c4 10             	add    esp,0x10
c000ad03:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad07:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad0b:	52                   	push   edx
c000ad0c:	50                   	push   eax
c000ad0d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad10:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad13:	e8 5b b2 01 00       	call   c0025f73 <__adddf3>
c000ad18:	83 c4 10             	add    esp,0x10
c000ad1b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad1e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad21:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad24:	4f                   	dec    edi
c000ad25:	83 ec 0c             	sub    esp,0xc
c000ad28:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad2f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad36:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad3a:	e8 a8 c2 01 00       	call   c0026fe7 <__extendsfdf2>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad46:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ad52:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad56:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad5a:	e8 91 b8 01 00       	call   c00265f0 <__muldf3>
c000ad5f:	83 c4 10             	add    esp,0x10
c000ad62:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ad66:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ad6a:	52                   	push   edx
c000ad6b:	50                   	push   eax
c000ad6c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ad6f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ad72:	e8 fc b1 01 00       	call   c0025f73 <__adddf3>
c000ad77:	83 c4 10             	add    esp,0x10
c000ad7a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ad7d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ad80:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ad83:	4f                   	dec    edi
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ad8a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ad8e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ad95:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ad99:	e8 49 c2 01 00       	call   c0026fe7 <__extendsfdf2>
c000ad9e:	83 c4 10             	add    esp,0x10
c000ada1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ada5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ada9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000adb1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000adb9:	e8 32 b8 01 00       	call   c00265f0 <__muldf3>
c000adbe:	83 c4 10             	add    esp,0x10
c000adc1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000adc5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000adc9:	52                   	push   edx
c000adca:	50                   	push   eax
c000adcb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000adce:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000add1:	e8 9d b1 01 00       	call   c0025f73 <__adddf3>
c000add6:	83 c4 10             	add    esp,0x10
c000add9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000addc:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000addf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ade2:	4f                   	dec    edi
c000ade3:	83 ec 0c             	sub    esp,0xc
c000ade6:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ade9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aded:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000adf4:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000adf8:	e8 ea c1 01 00       	call   c0026fe7 <__extendsfdf2>
c000adfd:	83 c4 10             	add    esp,0x10
c000ae00:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae04:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae18:	e8 d3 b7 01 00       	call   c00265f0 <__muldf3>
c000ae1d:	83 c4 10             	add    esp,0x10
c000ae20:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae24:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae28:	52                   	push   edx
c000ae29:	50                   	push   eax
c000ae2a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae2d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae30:	e8 3e b1 01 00       	call   c0025f73 <__adddf3>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae3b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae3e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae41:	4f                   	dec    edi
c000ae42:	83 ec 0c             	sub    esp,0xc
c000ae45:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae48:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ae4c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000ae53:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000ae57:	e8 8b c1 01 00       	call   c0026fe7 <__extendsfdf2>
c000ae5c:	83 c4 10             	add    esp,0x10
c000ae5f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae63:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae6f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae77:	e8 74 b7 01 00       	call   c00265f0 <__muldf3>
c000ae7c:	83 c4 10             	add    esp,0x10
c000ae7f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae83:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae87:	52                   	push   edx
c000ae88:	50                   	push   eax
c000ae89:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000ae8c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000ae8f:	e8 df b0 01 00       	call   c0025f73 <__adddf3>
c000ae94:	83 c4 10             	add    esp,0x10
c000ae97:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ae9a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000ae9d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aea0:	4f                   	dec    edi
c000aea1:	83 ec 0c             	sub    esp,0xc
c000aea4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aea7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aeab:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aeb2:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aeb6:	e8 2c c1 01 00       	call   c0026fe7 <__extendsfdf2>
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aec2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aeca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aece:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed6:	e8 15 b7 01 00       	call   c00265f0 <__muldf3>
c000aedb:	83 c4 10             	add    esp,0x10
c000aede:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aee2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aee6:	52                   	push   edx
c000aee7:	50                   	push   eax
c000aee8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aeeb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aeee:	e8 80 b0 01 00       	call   c0025f73 <__adddf3>
c000aef3:	83 c4 10             	add    esp,0x10
c000aef6:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef9:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aefc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeff:	4f                   	dec    edi
c000af00:	83 ec 0c             	sub    esp,0xc
c000af03:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af0a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af11:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af15:	e8 cd c0 01 00       	call   c0026fe7 <__extendsfdf2>
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af21:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af2d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af31:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af35:	e8 b6 b6 01 00       	call   c00265f0 <__muldf3>
c000af3a:	83 c4 10             	add    esp,0x10
c000af3d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af41:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af45:	52                   	push   edx
c000af46:	50                   	push   eax
c000af47:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af4a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af4d:	e8 21 b0 01 00       	call   c0025f73 <__adddf3>
c000af52:	83 c4 10             	add    esp,0x10
c000af55:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af58:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af5b:	85 ff                	test   edi,edi
c000af5d:	0f 8f e9 fc ff ff    	jg     c000ac4c <calc_output_multi+0x10e>
c000af63:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000af67:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000af6b:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000af6f:	0f 89 4c fc ff ff    	jns    c000abc1 <calc_output_multi+0x83>
c000af75:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000af79:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000af7d:	29 c8                	sub    eax,ecx
c000af7f:	99                   	cdq    
c000af80:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000af84:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000af88:	0f af d0             	imul   edx,eax
c000af8b:	40                   	inc    eax
c000af8c:	01 d1                	add    ecx,edx
c000af8e:	0f af c3             	imul   eax,ebx
c000af91:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000af95:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000af98:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af9c:	55                   	push   ebp
c000af9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000afa1:	6a 00                	push   0x0
c000afa3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afa7:	e8 df 56 ff ff       	call   c000068b <memset>
c000afac:	83 c4 10             	add    esp,0x10
c000afaf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afb3:	e8 e0 e6 ff ff       	call   c0009698 <fp_to_double>
c000afb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000afbc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000afc0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000afc4:	e8 c5 e6 ff ff       	call   c000968e <fp_to_int>
c000afc9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000afcc:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000afcf:	57                   	push   edi
c000afd0:	57                   	push   edi
c000afd1:	89 df                	mov    edi,ebx
c000afd3:	55                   	push   ebp
c000afd4:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000afd8:	e8 2b a9 01 00       	call   c0025908 <__subsf3>
c000afdd:	89 04 24             	mov    DWORD PTR [esp],eax
c000afe0:	e8 02 c0 01 00       	call   c0026fe7 <__extendsfdf2>
c000afe5:	83 c4 10             	add    esp,0x10
c000afe8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000afec:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000aff0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000affc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b000:	e8 eb b5 01 00       	call   c00265f0 <__muldf3>
c000b005:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b008:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b00c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b010:	e8 d2 bf 01 00       	call   c0026fe7 <__extendsfdf2>
c000b015:	83 c4 10             	add    esp,0x10
c000b018:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b01c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b020:	52                   	push   edx
c000b021:	50                   	push   eax
c000b022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b02a:	e8 44 af 01 00       	call   c0025f73 <__adddf3>
c000b02f:	83 c4 10             	add    esp,0x10
c000b032:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b036:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b03a:	89 f8                	mov    eax,edi
c000b03c:	b9 08 00 00 00       	mov    ecx,0x8
c000b041:	99                   	cdq    
c000b042:	f7 f9                	idiv   ecx
c000b044:	4a                   	dec    edx
c000b045:	83 fa 06             	cmp    edx,0x6
c000b048:	77 07                	ja     c000b051 <calc_output_multi+0x513>
c000b04a:	ff 24 95 c0 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7840]
c000b051:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b055:	4f                   	dec    edi
c000b056:	83 ec 0c             	sub    esp,0xc
c000b059:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b05c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b060:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b067:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b06b:	e8 77 bf 01 00       	call   c0026fe7 <__extendsfdf2>
c000b070:	83 c4 10             	add    esp,0x10
c000b073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b077:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b07f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b083:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b087:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b08b:	e8 60 b5 01 00       	call   c00265f0 <__muldf3>
c000b090:	83 c4 10             	add    esp,0x10
c000b093:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b097:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b09b:	52                   	push   edx
c000b09c:	50                   	push   eax
c000b09d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0a0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0a3:	e8 cb ae 01 00       	call   c0025f73 <__adddf3>
c000b0a8:	83 c4 10             	add    esp,0x10
c000b0ab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b5:	4f                   	dec    edi
c000b0b6:	83 ec 0c             	sub    esp,0xc
c000b0b9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0c0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0c7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0cb:	e8 17 bf 01 00       	call   c0026fe7 <__extendsfdf2>
c000b0d0:	83 c4 10             	add    esp,0x10
c000b0d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b0eb:	e8 00 b5 01 00       	call   c00265f0 <__muldf3>
c000b0f0:	83 c4 10             	add    esp,0x10
c000b0f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b0f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b0fb:	52                   	push   edx
c000b0fc:	50                   	push   eax
c000b0fd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b100:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b103:	e8 6b ae 01 00       	call   c0025f73 <__adddf3>
c000b108:	83 c4 10             	add    esp,0x10
c000b10b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b10e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b115:	4f                   	dec    edi
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b11c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b120:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b127:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b12b:	e8 b7 be 01 00       	call   c0026fe7 <__extendsfdf2>
c000b130:	83 c4 10             	add    esp,0x10
c000b133:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b137:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b13b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b13f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b143:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b147:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b14b:	e8 a0 b4 01 00       	call   c00265f0 <__muldf3>
c000b150:	83 c4 10             	add    esp,0x10
c000b153:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b157:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b15b:	52                   	push   edx
c000b15c:	50                   	push   eax
c000b15d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b160:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b163:	e8 0b ae 01 00       	call   c0025f73 <__adddf3>
c000b168:	83 c4 10             	add    esp,0x10
c000b16b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b16e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b171:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b175:	4f                   	dec    edi
c000b176:	83 ec 0c             	sub    esp,0xc
c000b179:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b17c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b180:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b187:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b18b:	e8 57 be 01 00       	call   c0026fe7 <__extendsfdf2>
c000b190:	83 c4 10             	add    esp,0x10
c000b193:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b19b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b19f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1a7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1ab:	e8 40 b4 01 00       	call   c00265f0 <__muldf3>
c000b1b0:	83 c4 10             	add    esp,0x10
c000b1b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1bb:	52                   	push   edx
c000b1bc:	50                   	push   eax
c000b1bd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b1c0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b1c3:	e8 ab ad 01 00       	call   c0025f73 <__adddf3>
c000b1c8:	83 c4 10             	add    esp,0x10
c000b1cb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1ce:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d5:	4f                   	dec    edi
c000b1d6:	83 ec 0c             	sub    esp,0xc
c000b1d9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b1dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1e0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b1e7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b1eb:	e8 f7 bd 01 00       	call   c0026fe7 <__extendsfdf2>
c000b1f0:	83 c4 10             	add    esp,0x10
c000b1f3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b1f7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b1fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b1ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b203:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b207:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20b:	e8 e0 b3 01 00       	call   c00265f0 <__muldf3>
c000b210:	83 c4 10             	add    esp,0x10
c000b213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b217:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b21b:	52                   	push   edx
c000b21c:	50                   	push   eax
c000b21d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b220:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b223:	e8 4b ad 01 00       	call   c0025f73 <__adddf3>
c000b228:	83 c4 10             	add    esp,0x10
c000b22b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b22e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b231:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b235:	4f                   	dec    edi
c000b236:	83 ec 0c             	sub    esp,0xc
c000b239:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b23c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b240:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b247:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b24b:	e8 97 bd 01 00       	call   c0026fe7 <__extendsfdf2>
c000b250:	83 c4 10             	add    esp,0x10
c000b253:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b257:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b25b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b25f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b263:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b267:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b26b:	e8 80 b3 01 00       	call   c00265f0 <__muldf3>
c000b270:	83 c4 10             	add    esp,0x10
c000b273:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b277:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b27b:	52                   	push   edx
c000b27c:	50                   	push   eax
c000b27d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b280:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b283:	e8 eb ac 01 00       	call   c0025f73 <__adddf3>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b28e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b291:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b295:	4f                   	dec    edi
c000b296:	83 ec 0c             	sub    esp,0xc
c000b299:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b29c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2a0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2a7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2ab:	e8 37 bd 01 00       	call   c0026fe7 <__extendsfdf2>
c000b2b0:	83 c4 10             	add    esp,0x10
c000b2b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2cb:	e8 20 b3 01 00       	call   c00265f0 <__muldf3>
c000b2d0:	83 c4 10             	add    esp,0x10
c000b2d3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2d7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2db:	52                   	push   edx
c000b2dc:	50                   	push   eax
c000b2dd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2e0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2e3:	e8 8b ac 01 00       	call   c0025f73 <__adddf3>
c000b2e8:	83 c4 10             	add    esp,0x10
c000b2eb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2ee:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2f5:	4f                   	dec    edi
c000b2f6:	83 ec 0c             	sub    esp,0xc
c000b2f9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2fc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b300:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b307:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b30b:	e8 d7 bc 01 00       	call   c0026fe7 <__extendsfdf2>
c000b310:	83 c4 10             	add    esp,0x10
c000b313:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b317:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b31b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b31f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b323:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b327:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b32b:	e8 c0 b2 01 00       	call   c00265f0 <__muldf3>
c000b330:	83 c4 10             	add    esp,0x10
c000b333:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b337:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b33b:	52                   	push   edx
c000b33c:	50                   	push   eax
c000b33d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b340:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b343:	e8 2b ac 01 00       	call   c0025f73 <__adddf3>
c000b348:	83 c4 10             	add    esp,0x10
c000b34b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b34e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b351:	85 ff                	test   edi,edi
c000b353:	0f 8f e1 fc ff ff    	jg     c000b03a <calc_output_multi+0x4fc>
c000b359:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b35d:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b361:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b365:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b36a:	0f 8f 3f fc ff ff    	jg     c000afaf <calc_output_multi+0x471>
c000b370:	be 08 00 00 00       	mov    esi,0x8
c000b375:	89 d8                	mov    eax,ebx
c000b377:	99                   	cdq    
c000b378:	f7 fe                	idiv   esi
c000b37a:	4a                   	dec    edx
c000b37b:	83 fa 06             	cmp    edx,0x6
c000b37e:	77 07                	ja     c000b387 <calc_output_multi+0x849>
c000b380:	ff 24 95 dc 87 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd7824]
c000b387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b38b:	4b                   	dec    ebx
c000b38c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b390:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b393:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b397:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b39b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b39e:	e8 d0 ab 01 00       	call   c0025f73 <__adddf3>
c000b3a3:	83 c4 10             	add    esp,0x10
c000b3a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3be:	e8 2d b2 01 00       	call   c00265f0 <__muldf3>
c000b3c3:	5d                   	pop    ebp
c000b3c4:	59                   	pop    ecx
c000b3c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b3c9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b3cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d5:	e8 e9 ba 01 00       	call   c0026ec3 <__truncdfsf2>
c000b3da:	83 c4 10             	add    esp,0x10
c000b3dd:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b3e1:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b3e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3e8:	4b                   	dec    ebx
c000b3e9:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3ed:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b3f8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b3fb:	e8 73 ab 01 00       	call   c0025f73 <__adddf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b40b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b413:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b417:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41b:	e8 d0 b1 01 00       	call   c00265f0 <__muldf3>
c000b420:	59                   	pop    ecx
c000b421:	5f                   	pop    edi
c000b422:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b426:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b432:	e8 8c ba 01 00       	call   c0026ec3 <__truncdfsf2>
c000b437:	83 c4 10             	add    esp,0x10
c000b43a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b43e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b441:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b445:	4b                   	dec    ebx
c000b446:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b44a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b44d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b451:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b455:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b458:	e8 16 ab 01 00       	call   c0025f73 <__adddf3>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b464:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b470:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b474:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b478:	e8 73 b1 01 00       	call   c00265f0 <__muldf3>
c000b47d:	5f                   	pop    edi
c000b47e:	5d                   	pop    ebp
c000b47f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b483:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b48f:	e8 2f ba 01 00       	call   c0026ec3 <__truncdfsf2>
c000b494:	83 c4 10             	add    esp,0x10
c000b497:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b49b:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b49e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a2:	4b                   	dec    ebx
c000b4a3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4a7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ae:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b4b2:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b4b5:	e8 b9 aa 01 00       	call   c0025f73 <__adddf3>
c000b4ba:	83 c4 10             	add    esp,0x10
c000b4bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4d5:	e8 16 b1 01 00       	call   c00265f0 <__muldf3>
c000b4da:	5d                   	pop    ebp
c000b4db:	59                   	pop    ecx
c000b4dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b4e0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4ec:	e8 d2 b9 01 00       	call   c0026ec3 <__truncdfsf2>
c000b4f1:	83 c4 10             	add    esp,0x10
c000b4f4:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b4f8:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b4fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4ff:	4b                   	dec    ebx
c000b500:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b504:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b507:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b50b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b50f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b512:	e8 5c aa 01 00       	call   c0025f73 <__adddf3>
c000b517:	83 c4 10             	add    esp,0x10
c000b51a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b51e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b526:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b532:	e8 b9 b0 01 00       	call   c00265f0 <__muldf3>
c000b537:	59                   	pop    ecx
c000b538:	5f                   	pop    edi
c000b539:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b53d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b541:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b549:	e8 75 b9 01 00       	call   c0026ec3 <__truncdfsf2>
c000b54e:	83 c4 10             	add    esp,0x10
c000b551:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b555:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b558:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b55c:	4b                   	dec    ebx
c000b55d:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b561:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b568:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b56c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b56f:	e8 ff a9 01 00       	call   c0025f73 <__adddf3>
c000b574:	83 c4 10             	add    esp,0x10
c000b577:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b57b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b57f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b587:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b58f:	e8 5c b0 01 00       	call   c00265f0 <__muldf3>
c000b594:	5f                   	pop    edi
c000b595:	5d                   	pop    ebp
c000b596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b59e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5a6:	e8 18 b9 01 00       	call   c0026ec3 <__truncdfsf2>
c000b5ab:	83 c4 10             	add    esp,0x10
c000b5ae:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b5b2:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b5b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5b9:	4b                   	dec    ebx
c000b5ba:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5be:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c5:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c9:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cc:	e8 a2 a9 01 00       	call   c0025f73 <__adddf3>
c000b5d1:	83 c4 10             	add    esp,0x10
c000b5d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ec:	e8 ff af 01 00       	call   c00265f0 <__muldf3>
c000b5f1:	5d                   	pop    ebp
c000b5f2:	59                   	pop    ecx
c000b5f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b603:	e8 bb b8 01 00       	call   c0026ec3 <__truncdfsf2>
c000b608:	83 c4 10             	add    esp,0x10
c000b60b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b60f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b616:	4b                   	dec    ebx
c000b617:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b61e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b622:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b626:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b629:	e8 45 a9 01 00       	call   c0025f73 <__adddf3>
c000b62e:	83 c4 10             	add    esp,0x10
c000b631:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b635:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b639:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b63d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b641:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b645:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b649:	e8 a2 af 01 00       	call   c00265f0 <__muldf3>
c000b64e:	59                   	pop    ecx
c000b64f:	5f                   	pop    edi
c000b650:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b654:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b658:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b660:	e8 5e b8 01 00       	call   c0026ec3 <__truncdfsf2>
c000b665:	83 c4 10             	add    esp,0x10
c000b668:	85 db                	test   ebx,ebx
c000b66a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b66e:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b671:	0f 8f fe fc ff ff    	jg     c000b375 <calc_output_multi+0x837>
c000b677:	83 c4 4c             	add    esp,0x4c
c000b67a:	5b                   	pop    ebx
c000b67b:	5e                   	pop    esi
c000b67c:	5f                   	pop    edi
c000b67d:	5d                   	pop    ebp
c000b67e:	c3                   	ret    

c000b67f <double_to_fp>:
c000b67f:	83 ec 0c             	sub    esp,0xc
c000b682:	68 00 00 b0 40       	push   0x40b00000
c000b687:	6a 00                	push   0x0
c000b689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b691:	e8 5a af 01 00       	call   c00265f0 <__muldf3>
c000b696:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b69a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b69e:	83 c4 1c             	add    esp,0x1c
c000b6a1:	e9 ca b9 01 00       	jmp    c0027070 <lrint>

c000b6a6 <prepare_data>:
c000b6a6:	55                   	push   ebp
c000b6a7:	57                   	push   edi
c000b6a8:	56                   	push   esi
c000b6a9:	53                   	push   ebx
c000b6aa:	83 ec 1c             	sub    esp,0x1c
c000b6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b6b1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b6b5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b6b9:	0f 89 57 01 00 00    	jns    c000b816 <prepare_data+0x170>
c000b6bf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b6c2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b6c5:	85 d2                	test   edx,edx
c000b6c7:	75 0d                	jne    c000b6d6 <prepare_data+0x30>
c000b6c9:	8d 14 36             	lea    edx,[esi+esi*1]
c000b6cc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b6cf:	29 d0                	sub    eax,edx
c000b6d1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b6d4:	eb 44                	jmp    c000b71a <prepare_data+0x74>
c000b6d6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b6d9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b6dc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b6df:	39 c1                	cmp    ecx,eax
c000b6e1:	7d 04                	jge    c000b6e7 <prepare_data+0x41>
c000b6e3:	29 d0                	sub    eax,edx
c000b6e5:	eb 2d                	jmp    c000b714 <prepare_data+0x6e>
c000b6e7:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b6ed:	29 d7                	sub    edi,edx
c000b6ef:	01 f7                	add    edi,esi
c000b6f1:	51                   	push   ecx
c000b6f2:	29 f2                	sub    edx,esi
c000b6f4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b6fb:	8d 14 90             	lea    edx,[eax+edx*4]
c000b6fe:	51                   	push   ecx
c000b6ff:	52                   	push   edx
c000b700:	50                   	push   eax
c000b701:	e8 17 4f ff ff       	call   c000061d <memmove>
c000b706:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b709:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b70c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b70f:	29 f0                	sub    eax,esi
c000b711:	83 c4 10             	add    esp,0x10
c000b714:	29 f0                	sub    eax,esi
c000b716:	79 02                	jns    c000b71a <prepare_data+0x74>
c000b718:	31 c0                	xor    eax,eax
c000b71a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b71d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b720:	29 ef                	sub    edi,ebp
c000b722:	39 c7                	cmp    edi,eax
c000b724:	7e 02                	jle    c000b728 <prepare_data+0x82>
c000b726:	89 c7                	mov    edi,eax
c000b728:	89 f8                	mov    eax,edi
c000b72a:	99                   	cdq    
c000b72b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b72e:	b8 15 00 00 00       	mov    eax,0x15
c000b733:	29 d7                	sub    edi,edx
c000b735:	0f 88 dd 00 00 00    	js     c000b818 <prepare_data+0x172>
c000b73b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b73e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b741:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b744:	0f 8f ce 00 00 00    	jg     c000b818 <prepare_data+0x172>
c000b74a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b750:	50                   	push   eax
c000b751:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b758:	50                   	push   eax
c000b759:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b75d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b75f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b762:	50                   	push   eax
c000b763:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b766:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b76a:	50                   	push   eax
c000b76b:	e8 e5 4e ff ff       	call   c0000655 <memcpy>
c000b770:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b773:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b776:	01 fd                	add    ebp,edi
c000b778:	01 f9                	add    ecx,edi
c000b77a:	83 c4 10             	add    esp,0x10
c000b77d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b780:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b783:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b786:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b78a:	0f 85 86 00 00 00    	jne    c000b816 <prepare_data+0x170>
c000b790:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b793:	89 e8                	mov    eax,ebp
c000b795:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b798:	29 c8                	sub    eax,ecx
c000b79a:	39 f8                	cmp    eax,edi
c000b79c:	7d 78                	jge    c000b816 <prepare_data+0x170>
c000b79e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b7a2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b7a6:	74 6e                	je     c000b816 <prepare_data+0x170>
c000b7a8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b7ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b7af:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b7b2:	29 ef                	sub    edi,ebp
c000b7b4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b7b8:	7c 29                	jl     c000b7e3 <prepare_data+0x13d>
c000b7ba:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7bd:	29 f1                	sub    ecx,esi
c000b7bf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b7c6:	55                   	push   ebp
c000b7c7:	50                   	push   eax
c000b7c8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b7cb:	50                   	push   eax
c000b7cc:	52                   	push   edx
c000b7cd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b7d1:	e8 47 4e ff ff       	call   c000061d <memmove>
c000b7d6:	83 c4 10             	add    esp,0x10
c000b7d9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b7dc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b7df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b7e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000b7e6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000b7e9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000b7ec:	83 c6 05             	add    esi,0x5
c000b7ef:	78 07                	js     c000b7f8 <prepare_data+0x152>
c000b7f1:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b7f4:	39 cf                	cmp    edi,ecx
c000b7f6:	7e 04                	jle    c000b7fc <prepare_data+0x156>
c000b7f8:	89 ce                	mov    esi,ecx
c000b7fa:	29 c6                	sub    esi,eax
c000b7fc:	8d 04 82             	lea    eax,[edx+eax*4]
c000b7ff:	51                   	push   ecx
c000b800:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000b807:	51                   	push   ecx
c000b808:	6a 00                	push   0x0
c000b80a:	50                   	push   eax
c000b80b:	e8 7b 4e ff ff       	call   c000068b <memset>
c000b810:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000b813:	83 c4 10             	add    esp,0x10
c000b816:	31 c0                	xor    eax,eax
c000b818:	83 c4 1c             	add    esp,0x1c
c000b81b:	5b                   	pop    ebx
c000b81c:	5e                   	pop    esi
c000b81d:	5f                   	pop    edi
c000b81e:	5d                   	pop    ebp
c000b81f:	c3                   	ret    

c000b820 <sinc_multichan_vari_process>:
c000b820:	55                   	push   ebp
c000b821:	ba 05 00 00 00       	mov    edx,0x5
c000b826:	57                   	push   edi
c000b827:	56                   	push   esi
c000b828:	53                   	push   ebx
c000b829:	83 ec 4c             	sub    esp,0x4c
c000b82c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000b830:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000b834:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000b837:	85 db                	test   ebx,ebx
c000b839:	0f 84 9b 06 00 00    	je     c000beda <sinc_multichan_vari_process+0x6ba>
c000b83f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000b842:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b845:	0f af c5             	imul   eax,ebp
c000b848:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000b84b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000b84e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000b855:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000b85c:	0f af c5             	imul   eax,ebp
c000b85f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000b862:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000b865:	8b 06                	mov    eax,DWORD PTR [esi]
c000b867:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b86b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b86f:	68 00 00 70 3f       	push   0x3f700000
c000b874:	6a 00                	push   0x0
c000b876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b87e:	e8 3c b6 01 00       	call   c0026ebf <__ltdf2>
c000b883:	83 c4 10             	add    esp,0x10
c000b886:	ba 16 00 00 00       	mov    edx,0x16
c000b88b:	85 c0                	test   eax,eax
c000b88d:	0f 88 47 06 00 00    	js     c000beda <sinc_multichan_vari_process+0x6ba>
c000b893:	68 00 00 70 40       	push   0x40700000
c000b898:	6a 00                	push   0x0
c000b89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8a2:	e8 fa b5 01 00       	call   c0026ea1 <__gtdf2>
c000b8a7:	83 c4 10             	add    esp,0x10
c000b8aa:	ba 16 00 00 00       	mov    edx,0x16
c000b8af:	85 c0                	test   eax,eax
c000b8b1:	0f 8f 23 06 00 00    	jg     c000beda <sinc_multichan_vari_process+0x6ba>
c000b8b7:	83 ec 0c             	sub    esp,0xc
c000b8ba:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000b8bd:	e8 91 b3 01 00       	call   c0026c53 <__floatsidf>
c000b8c2:	83 c4 10             	add    esp,0x10
c000b8c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b8c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b8cd:	68 00 00 00 40       	push   0x40000000
c000b8d2:	6a 00                	push   0x0
c000b8d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8dc:	e8 92 a6 01 00       	call   c0025f73 <__adddf3>
c000b8e1:	59                   	pop    ecx
c000b8e2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8e6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8ea:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b8ed:	e8 61 b3 01 00       	call   c0026c53 <__floatsidf>
c000b8f2:	83 c4 10             	add    esp,0x10
c000b8f5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b8f9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b8fd:	52                   	push   edx
c000b8fe:	50                   	push   eax
c000b8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b907:	e8 c8 af 01 00       	call   c00268d4 <__divdf3>
c000b90c:	83 c4 10             	add    esp,0x10
c000b90f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b913:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b917:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000b91a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000b91d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b921:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b925:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b929:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b92d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b935:	e8 67 b5 01 00       	call   c0026ea1 <__gtdf2>
c000b93a:	83 c4 10             	add    esp,0x10
c000b93d:	85 c0                	test   eax,eax
c000b93f:	7e 2d                	jle    c000b96e <sinc_multichan_vari_process+0x14e>
c000b941:	68 00 00 f0 3f       	push   0x3ff00000
c000b946:	6a 00                	push   0x0
c000b948:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b94c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b950:	e8 6a b5 01 00       	call   c0026ebf <__ltdf2>
c000b955:	83 c4 10             	add    esp,0x10
c000b958:	85 c0                	test   eax,eax
c000b95a:	79 4d                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b95c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b960:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b96c:	eb 1b                	jmp    c000b989 <sinc_multichan_vari_process+0x169>
c000b96e:	68 00 00 f0 3f       	push   0x3ff00000
c000b973:	6a 00                	push   0x0
c000b975:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b979:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b97d:	e8 3d b5 01 00       	call   c0026ebf <__ltdf2>
c000b982:	83 c4 10             	add    esp,0x10
c000b985:	85 c0                	test   eax,eax
c000b987:	79 20                	jns    c000b9a9 <sinc_multichan_vari_process+0x189>
c000b989:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b98d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000b991:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b995:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b999:	e8 36 af 01 00       	call   c00268d4 <__divdf3>
c000b99e:	83 c4 10             	add    esp,0x10
c000b9a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9a9:	50                   	push   eax
c000b9aa:	50                   	push   eax
c000b9ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9b3:	e8 b8 b6 01 00       	call   c0027070 <lrint>
c000b9b8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000b9bb:	40                   	inc    eax
c000b9bc:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9c0:	0f af c5             	imul   eax,ebp
c000b9c3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b9c7:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000b9ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b9ce:	58                   	pop    eax
c000b9cf:	5a                   	pop    edx
c000b9d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b9d8:	e8 93 b6 01 00       	call   c0027070 <lrint>
c000b9dd:	83 ec 0c             	sub    esp,0xc
c000b9e0:	50                   	push   eax
c000b9e1:	e8 6d b2 01 00       	call   c0026c53 <__floatsidf>
c000b9e6:	83 c4 10             	add    esp,0x10
c000b9e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b9ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000b9f1:	52                   	push   edx
c000b9f2:	50                   	push   eax
c000b9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9fb:	e8 c4 ab 01 00       	call   c00265c4 <__subdf3>
c000ba00:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba04:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba08:	83 c4 20             	add    esp,0x20
c000ba0b:	6a 00                	push   0x0
c000ba0d:	6a 00                	push   0x0
c000ba0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba13:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba17:	e8 a3 b4 01 00       	call   c0026ebf <__ltdf2>
c000ba1c:	83 c4 10             	add    esp,0x10
c000ba1f:	85 c0                	test   eax,eax
c000ba21:	79 1f                	jns    c000ba42 <sinc_multichan_vari_process+0x222>
c000ba23:	68 00 00 f0 3f       	push   0x3ff00000
c000ba28:	6a 00                	push   0x0
c000ba2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ba32:	e8 3c a5 01 00       	call   c0025f73 <__adddf3>
c000ba37:	83 c4 10             	add    esp,0x10
c000ba3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ba3e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ba42:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ba45:	83 ec 10             	sub    esp,0x10
c000ba48:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ba4c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba4f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ba5f:	e8 60 ab 01 00       	call   c00265c4 <__subdf3>
c000ba64:	83 c4 18             	add    esp,0x18
c000ba67:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ba6b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ba6f:	52                   	push   edx
c000ba70:	50                   	push   eax
c000ba71:	e8 fa b5 01 00       	call   c0027070 <lrint>
c000ba76:	0f af e8             	imul   ebp,eax
c000ba79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ba7d:	01 e8                	add    eax,ebp
c000ba7f:	99                   	cdq    
c000ba80:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ba83:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ba86:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ba8e:	68 00 00 f0 3f       	push   0x3ff00000
c000ba93:	6a 00                	push   0x0
c000ba95:	e8 3a ae 01 00       	call   c00268d4 <__divdf3>
c000ba9a:	83 c4 10             	add    esp,0x10
c000ba9d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000baa1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baa5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000baaa:	68 23 42 92 0c       	push   0xc924223
c000baaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bab7:	e8 b7 a4 01 00       	call   c0025f73 <__adddf3>
c000babc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bac0:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bac4:	83 c4 20             	add    esp,0x20
c000bac7:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bacf:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bad7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bada:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000badd:	7d 50                	jge    c000bb2f <sinc_multichan_vari_process+0x30f>
c000badf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bae2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bae5:	01 c8                	add    eax,ecx
c000bae7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000baea:	99                   	cdq    
c000baeb:	f7 f9                	idiv   ecx
c000baed:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000baf1:	7d 0c                	jge    c000baff <sinc_multichan_vari_process+0x2df>
c000baf3:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000baf6:	85 ed                	test   ebp,ebp
c000baf8:	79 6b                	jns    c000bb65 <sinc_multichan_vari_process+0x345>
c000bafa:	e9 e6 00 00 00       	jmp    c000bbe5 <sinc_multichan_vari_process+0x3c5>
c000baff:	50                   	push   eax
c000bb00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bb04:	57                   	push   edi
c000bb05:	53                   	push   ebx
c000bb06:	e8 9b fb ff ff       	call   c000b6a6 <prepare_data>
c000bb0b:	83 c4 10             	add    esp,0x10
c000bb0e:	89 c2                	mov    edx,eax
c000bb10:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bb13:	85 c0                	test   eax,eax
c000bb15:	0f 85 bf 03 00 00    	jne    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb1b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bb1e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bb21:	01 c8                	add    eax,ecx
c000bb23:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bb26:	99                   	cdq    
c000bb27:	f7 f9                	idiv   ecx
c000bb29:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bb2d:	7c c4                	jl     c000baf3 <sinc_multichan_vari_process+0x2d3>
c000bb2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb37:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bb3a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bb3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb41:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb45:	89 06                	mov    DWORD PTR [esi],eax
c000bb47:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bb4a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bb4d:	99                   	cdq    
c000bb4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb51:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bb54:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bb57:	99                   	cdq    
c000bb58:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bb5b:	31 d2                	xor    edx,edx
c000bb5d:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bb60:	e9 75 03 00 00       	jmp    c000beda <sinc_multichan_vari_process+0x6ba>
c000bb65:	83 ec 0c             	sub    esp,0xc
c000bb68:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bb6b:	e8 e3 b0 01 00       	call   c0026c53 <__floatsidf>
c000bb70:	83 c4 10             	add    esp,0x10
c000bb73:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb77:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb7b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb7f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bb83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb87:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb8b:	e8 e3 a3 01 00       	call   c0025f73 <__adddf3>
c000bb90:	83 c4 10             	add    esp,0x10
c000bb93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb97:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bb9b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bb9f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bba3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bba7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbab:	e8 c3 a3 01 00       	call   c0025f73 <__adddf3>
c000bbb0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bbb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bbb7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bbbb:	e8 93 b0 01 00       	call   c0026c53 <__floatsidf>
c000bbc0:	83 c4 10             	add    esp,0x10
c000bbc3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbc7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbcb:	52                   	push   edx
c000bbcc:	50                   	push   eax
c000bbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bbd5:	e8 e3 b2 01 00       	call   c0026ebd <__gedf2>
c000bbda:	83 c4 10             	add    esp,0x10
c000bbdd:	85 c0                	test   eax,eax
c000bbdf:	0f 89 4a ff ff ff    	jns    c000bb2f <sinc_multichan_vari_process+0x30f>
c000bbe5:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000bbe9:	0f 8e ed 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bbef:	83 ec 10             	sub    esp,0x10
c000bbf2:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bbf5:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bbf8:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000bbfb:	ff 36                	push   DWORD PTR [esi]
c000bbfd:	e8 c2 a9 01 00       	call   c00265c4 <__subdf3>
c000bc02:	83 c4 18             	add    esp,0x18
c000bc05:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc09:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc0d:	52                   	push   edx
c000bc0e:	50                   	push   eax
c000bc0f:	e8 3c b4 01 00       	call   c0027050 <fabs>
c000bc14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc18:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bc1c:	83 c4 10             	add    esp,0x10
c000bc1f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000bc24:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc31:	e8 6b b2 01 00       	call   c0026ea1 <__gtdf2>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	85 c0                	test   eax,eax
c000bc3b:	0f 8e 9b 00 00 00    	jle    c000bcdc <sinc_multichan_vari_process+0x4bc>
c000bc41:	8b 06                	mov    eax,DWORD PTR [esi]
c000bc43:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bc46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bc4e:	52                   	push   edx
c000bc4f:	50                   	push   eax
c000bc50:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bc53:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bc56:	e8 69 a9 01 00       	call   c00265c4 <__subdf3>
c000bc5b:	59                   	pop    ecx
c000bc5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc60:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc64:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000bc67:	e8 e7 af 01 00       	call   c0026c53 <__floatsidf>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc73:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc77:	52                   	push   edx
c000bc78:	50                   	push   eax
c000bc79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc81:	e8 6a a9 01 00       	call   c00265f0 <__muldf3>
c000bc86:	5d                   	pop    ebp
c000bc87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc8b:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bc8f:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bc92:	e8 bc af 01 00       	call   c0026c53 <__floatsidf>
c000bc97:	83 c4 10             	add    esp,0x10
c000bc9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bca2:	52                   	push   edx
c000bca3:	50                   	push   eax
c000bca4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bca8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcac:	e8 23 ac 01 00       	call   c00268d4 <__divdf3>
c000bcb1:	83 c4 10             	add    esp,0x10
c000bcb4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcb8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bcc4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bcc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bccc:	e8 a2 a2 01 00       	call   c0025f73 <__adddf3>
c000bcd1:	83 c4 10             	add    esp,0x10
c000bcd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bcd8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bcdc:	83 ec 0c             	sub    esp,0xc
c000bcdf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bce2:	e8 6c af 01 00       	call   c0026c53 <__floatsidf>
c000bce7:	83 c4 10             	add    esp,0x10
c000bcea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd02:	e8 b8 b1 01 00       	call   c0026ebf <__ltdf2>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	85 c0                	test   eax,eax
c000bd0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd10:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bd14:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bd18:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bd1c:	78 10                	js     c000bd2e <sinc_multichan_vari_process+0x50e>
c000bd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd22:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bd2a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bd2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd3e:	e8 ad a8 01 00       	call   c00265f0 <__muldf3>
c000bd43:	59                   	pop    ecx
c000bd44:	5d                   	pop    ebp
c000bd45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd49:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd55:	e8 25 f9 ff ff       	call   c000b67f <double_to_fp>
c000bd5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd5e:	89 c5                	mov    ebp,eax
c000bd60:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bd6c:	e8 7f a8 01 00       	call   c00265f0 <__muldf3>
c000bd71:	83 c4 18             	add    esp,0x18
c000bd74:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bd78:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bd7c:	52                   	push   edx
c000bd7d:	50                   	push   eax
c000bd7e:	e8 fc f8 ff ff       	call   c000b67f <double_to_fp>
c000bd83:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bd86:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bd8a:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bd8d:	8d 04 90             	lea    eax,[eax+edx*4]
c000bd90:	50                   	push   eax
c000bd91:	50                   	push   eax
c000bd92:	50                   	push   eax
c000bd93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bd96:	e8 b8 ae 01 00       	call   c0026c53 <__floatsidf>
c000bd9b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bd9f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bda3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bda7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdaf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bdb3:	e8 1c ab 01 00       	call   c00268d4 <__divdf3>
c000bdb8:	83 c4 1c             	add    esp,0x1c
c000bdbb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bdbf:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bdc3:	52                   	push   edx
c000bdc4:	89 ea                	mov    edx,ebp
c000bdc6:	50                   	push   eax
c000bdc7:	89 d8                	mov    eax,ebx
c000bdc9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bdcc:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000bdd0:	e8 69 ed ff ff       	call   c000ab3e <calc_output_multi>
c000bdd5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bdd8:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000bddb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bddf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bde3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bde7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000bdeb:	e8 e4 aa 01 00       	call   c00268d4 <__divdf3>
c000bdf0:	83 c4 10             	add    esp,0x10
c000bdf3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bdf7:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000bdfb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdff:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be03:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be07:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000be0b:	e8 63 a1 01 00       	call   c0025f73 <__adddf3>
c000be10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000be14:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000be18:	83 c4 28             	add    esp,0x28
c000be1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be1f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be23:	e8 48 b2 01 00       	call   c0027070 <lrint>
c000be28:	83 ec 0c             	sub    esp,0xc
c000be2b:	50                   	push   eax
c000be2c:	e8 22 ae 01 00       	call   c0026c53 <__floatsidf>
c000be31:	83 c4 10             	add    esp,0x10
c000be34:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be38:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be3c:	52                   	push   edx
c000be3d:	50                   	push   eax
c000be3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000be46:	e8 79 a7 01 00       	call   c00265c4 <__subdf3>
c000be4b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be4f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be53:	83 c4 20             	add    esp,0x20
c000be56:	6a 00                	push   0x0
c000be58:	6a 00                	push   0x0
c000be5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be62:	e8 58 b0 01 00       	call   c0026ebf <__ltdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	79 20                	jns    c000be8e <sinc_multichan_vari_process+0x66e>
c000be6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000be7e:	e8 f0 a0 01 00       	call   c0025f73 <__adddf3>
c000be83:	83 c4 10             	add    esp,0x10
c000be86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be8e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000be91:	83 ec 10             	sub    esp,0x10
c000be94:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000be98:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000be9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bea3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bea7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000beab:	e8 14 a7 01 00       	call   c00265c4 <__subdf3>
c000beb0:	83 c4 18             	add    esp,0x18
c000beb3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000beb7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bebb:	52                   	push   edx
c000bebc:	50                   	push   eax
c000bebd:	e8 ae b1 01 00       	call   c0027070 <lrint>
c000bec2:	0f af e8             	imul   ebp,eax
c000bec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	01 e8                	add    eax,ebp
c000bece:	99                   	cdq    
c000becf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bed2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bed5:	e9 fd fb ff ff       	jmp    c000bad7 <sinc_multichan_vari_process+0x2b7>
c000beda:	83 c4 4c             	add    esp,0x4c
c000bedd:	89 d0                	mov    eax,edx
c000bedf:	5b                   	pop    ebx
c000bee0:	5e                   	pop    esi
c000bee1:	5f                   	pop    edi
c000bee2:	5d                   	pop    ebp
c000bee3:	c3                   	ret    

c000bee4 <sinc_hex_vari_process>:
c000bee4:	55                   	push   ebp
c000bee5:	ba 05 00 00 00       	mov    edx,0x5
c000beea:	57                   	push   edi
c000beeb:	56                   	push   esi
c000beec:	53                   	push   ebx
c000beed:	83 ec 4c             	sub    esp,0x4c
c000bef0:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000bef4:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000bef8:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000befb:	85 db                	test   ebx,ebx
c000befd:	0f 84 9c 06 00 00    	je     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf03:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bf06:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000bf09:	0f af c7             	imul   eax,edi
c000bf0c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000bf0f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000bf12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000bf19:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000bf20:	0f af c7             	imul   eax,edi
c000bf23:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bf26:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000bf29:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bf2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf34:	68 00 00 70 3f       	push   0x3f700000
c000bf39:	6a 00                	push   0x0
c000bf3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf43:	e8 77 af 01 00       	call   c0026ebf <__ltdf2>
c000bf48:	83 c4 10             	add    esp,0x10
c000bf4b:	ba 16 00 00 00       	mov    edx,0x16
c000bf50:	85 c0                	test   eax,eax
c000bf52:	0f 88 47 06 00 00    	js     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf58:	68 00 00 70 40       	push   0x40700000
c000bf5d:	6a 00                	push   0x0
c000bf5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf67:	e8 35 af 01 00       	call   c0026ea1 <__gtdf2>
c000bf6c:	83 c4 10             	add    esp,0x10
c000bf6f:	ba 16 00 00 00       	mov    edx,0x16
c000bf74:	85 c0                	test   eax,eax
c000bf76:	0f 8f 23 06 00 00    	jg     c000c59f <sinc_hex_vari_process+0x6bb>
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bf82:	e8 cc ac 01 00       	call   c0026c53 <__floatsidf>
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bf8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bf92:	68 00 00 00 40       	push   0x40000000
c000bf97:	6a 00                	push   0x0
c000bf99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfa1:	e8 cd 9f 01 00       	call   c0025f73 <__adddf3>
c000bfa6:	59                   	pop    ecx
c000bfa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bfab:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bfaf:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfb2:	e8 9c ac 01 00       	call   c0026c53 <__floatsidf>
c000bfb7:	83 c4 10             	add    esp,0x10
c000bfba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfbe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfc2:	52                   	push   edx
c000bfc3:	50                   	push   eax
c000bfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfcc:	e8 03 a9 01 00       	call   c00268d4 <__divdf3>
c000bfd1:	83 c4 10             	add    esp,0x10
c000bfd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bfd8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bfdc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000bfdf:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000bfe2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfe6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bfea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bff6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bffa:	e8 a2 ae 01 00       	call   c0026ea1 <__gtdf2>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	85 c0                	test   eax,eax
c000c004:	7e 2d                	jle    c000c033 <sinc_hex_vari_process+0x14f>
c000c006:	68 00 00 f0 3f       	push   0x3ff00000
c000c00b:	6a 00                	push   0x0
c000c00d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c015:	e8 a5 ae 01 00       	call   c0026ebf <__ltdf2>
c000c01a:	83 c4 10             	add    esp,0x10
c000c01d:	85 c0                	test   eax,eax
c000c01f:	79 4d                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c025:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c029:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c02d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c031:	eb 1b                	jmp    c000c04e <sinc_hex_vari_process+0x16a>
c000c033:	68 00 00 f0 3f       	push   0x3ff00000
c000c038:	6a 00                	push   0x0
c000c03a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c03e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c042:	e8 78 ae 01 00       	call   c0026ebf <__ltdf2>
c000c047:	83 c4 10             	add    esp,0x10
c000c04a:	85 c0                	test   eax,eax
c000c04c:	79 20                	jns    c000c06e <sinc_hex_vari_process+0x18a>
c000c04e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c052:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c056:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c05e:	e8 71 a8 01 00       	call   c00268d4 <__divdf3>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c06a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06e:	50                   	push   eax
c000c06f:	50                   	push   eax
c000c070:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c074:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c078:	e8 f3 af 01 00       	call   c0027070 <lrint>
c000c07d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c080:	40                   	inc    eax
c000c081:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c085:	0f af c7             	imul   eax,edi
c000c088:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c08c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c08f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c093:	58                   	pop    eax
c000c094:	5a                   	pop    edx
c000c095:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c099:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c09d:	e8 ce af 01 00       	call   c0027070 <lrint>
c000c0a2:	83 ec 0c             	sub    esp,0xc
c000c0a5:	50                   	push   eax
c000c0a6:	e8 a8 ab 01 00       	call   c0026c53 <__floatsidf>
c000c0ab:	83 c4 10             	add    esp,0x10
c000c0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c0b6:	52                   	push   edx
c000c0b7:	50                   	push   eax
c000c0b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0c0:	e8 ff a4 01 00       	call   c00265c4 <__subdf3>
c000c0c5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0c9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0cd:	83 c4 20             	add    esp,0x20
c000c0d0:	6a 00                	push   0x0
c000c0d2:	6a 00                	push   0x0
c000c0d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0dc:	e8 de ad 01 00       	call   c0026ebf <__ltdf2>
c000c0e1:	83 c4 10             	add    esp,0x10
c000c0e4:	85 c0                	test   eax,eax
c000c0e6:	79 1f                	jns    c000c107 <sinc_hex_vari_process+0x223>
c000c0e8:	68 00 00 f0 3f       	push   0x3ff00000
c000c0ed:	6a 00                	push   0x0
c000c0ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0f7:	e8 77 9e 01 00       	call   c0025f73 <__adddf3>
c000c0fc:	83 c4 10             	add    esp,0x10
c000c0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c103:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c107:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c10a:	83 ec 10             	sub    esp,0x10
c000c10d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c111:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c11c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	e8 9b a4 01 00       	call   c00265c4 <__subdf3>
c000c129:	83 c4 18             	add    esp,0x18
c000c12c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c130:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c134:	52                   	push   edx
c000c135:	50                   	push   eax
c000c136:	e8 35 af 01 00       	call   c0027070 <lrint>
c000c13b:	0f af f8             	imul   edi,eax
c000c13e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c142:	01 f8                	add    eax,edi
c000c144:	99                   	cdq    
c000c145:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c148:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c14b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c14f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c153:	68 00 00 f0 3f       	push   0x3ff00000
c000c158:	6a 00                	push   0x0
c000c15a:	e8 75 a7 01 00       	call   c00268d4 <__divdf3>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c166:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c16a:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c16f:	68 23 42 92 0c       	push   0xc924223
c000c174:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c178:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c17c:	e8 f2 9d 01 00       	call   c0025f73 <__adddf3>
c000c181:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c185:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c189:	83 c4 20             	add    esp,0x20
c000c18c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c194:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c19c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c19f:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c1a2:	7d 50                	jge    c000c1f4 <sinc_hex_vari_process+0x310>
c000c1a4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1aa:	01 c8                	add    eax,ecx
c000c1ac:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1af:	99                   	cdq    
c000c1b0:	f7 f9                	idiv   ecx
c000c1b2:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1b6:	7d 0c                	jge    c000c1c4 <sinc_hex_vari_process+0x2e0>
c000c1b8:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c1bb:	85 ff                	test   edi,edi
c000c1bd:	79 6c                	jns    c000c22b <sinc_hex_vari_process+0x347>
c000c1bf:	e9 e7 00 00 00       	jmp    c000c2ab <sinc_hex_vari_process+0x3c7>
c000c1c4:	50                   	push   eax
c000c1c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c1c9:	56                   	push   esi
c000c1ca:	53                   	push   ebx
c000c1cb:	e8 d6 f4 ff ff       	call   c000b6a6 <prepare_data>
c000c1d0:	83 c4 10             	add    esp,0x10
c000c1d3:	89 c2                	mov    edx,eax
c000c1d5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c1d8:	85 c0                	test   eax,eax
c000c1da:	0f 85 bf 03 00 00    	jne    c000c59f <sinc_hex_vari_process+0x6bb>
c000c1e0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c1e3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c1e6:	01 c8                	add    eax,ecx
c000c1e8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c1eb:	99                   	cdq    
c000c1ec:	f7 f9                	idiv   ecx
c000c1ee:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c1f2:	7c c4                	jl     c000c1b8 <sinc_hex_vari_process+0x2d4>
c000c1f4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c1f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c1fc:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c1ff:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c206:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c20a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c20d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c210:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c213:	99                   	cdq    
c000c214:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c217:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c21a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c21d:	99                   	cdq    
c000c21e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c221:	31 d2                	xor    edx,edx
c000c223:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c226:	e9 74 03 00 00       	jmp    c000c59f <sinc_hex_vari_process+0x6bb>
c000c22b:	83 ec 0c             	sub    esp,0xc
c000c22e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c231:	e8 1d aa 01 00       	call   c0026c53 <__floatsidf>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c241:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c249:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c24d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c251:	e8 1d 9d 01 00       	call   c0025f73 <__adddf3>
c000c256:	83 c4 10             	add    esp,0x10
c000c259:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c25d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c261:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c265:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c269:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c271:	e8 fd 9c 01 00       	call   c0025f73 <__adddf3>
c000c276:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c279:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c27d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c281:	e8 cd a9 01 00       	call   c0026c53 <__floatsidf>
c000c286:	83 c4 10             	add    esp,0x10
c000c289:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c28d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c291:	52                   	push   edx
c000c292:	50                   	push   eax
c000c293:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c29b:	e8 1d ac 01 00       	call   c0026ebd <__gedf2>
c000c2a0:	83 c4 10             	add    esp,0x10
c000c2a3:	85 c0                	test   eax,eax
c000c2a5:	0f 89 49 ff ff ff    	jns    c000c1f4 <sinc_hex_vari_process+0x310>
c000c2ab:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c2af:	0f 8e ef 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c2b5:	83 ec 10             	sub    esp,0x10
c000c2b8:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c2bb:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c2be:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c2c1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c2c4:	e8 fb a2 01 00       	call   c00265c4 <__subdf3>
c000c2c9:	83 c4 18             	add    esp,0x18
c000c2cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2d0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d4:	52                   	push   edx
c000c2d5:	50                   	push   eax
c000c2d6:	e8 75 ad 01 00       	call   c0027050 <fabs>
c000c2db:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2df:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c2e3:	83 c4 10             	add    esp,0x10
c000c2e6:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c2eb:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f8:	e8 a4 ab 01 00       	call   c0026ea1 <__gtdf2>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	85 c0                	test   eax,eax
c000c302:	0f 8e 9c 00 00 00    	jle    c000c3a4 <sinc_hex_vari_process+0x4c0>
c000c308:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c30b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c30e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c312:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c316:	52                   	push   edx
c000c317:	50                   	push   eax
c000c318:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c31b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c31e:	e8 a1 a2 01 00       	call   c00265c4 <__subdf3>
c000c323:	59                   	pop    ecx
c000c324:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c328:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c32c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c32f:	e8 1f a9 01 00       	call   c0026c53 <__floatsidf>
c000c334:	83 c4 10             	add    esp,0x10
c000c337:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c33b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c33f:	52                   	push   edx
c000c340:	50                   	push   eax
c000c341:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c345:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c349:	e8 a2 a2 01 00       	call   c00265f0 <__muldf3>
c000c34e:	5f                   	pop    edi
c000c34f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c353:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c357:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c35a:	e8 f4 a8 01 00       	call   c0026c53 <__floatsidf>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c366:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c36a:	52                   	push   edx
c000c36b:	50                   	push   eax
c000c36c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c370:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c374:	e8 5b a5 01 00       	call   c00268d4 <__divdf3>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c380:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c388:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c38c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c390:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c394:	e8 da 9b 01 00       	call   c0025f73 <__adddf3>
c000c399:	83 c4 10             	add    esp,0x10
c000c39c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c3a0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c3a4:	83 ec 0c             	sub    esp,0xc
c000c3a7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c3aa:	e8 a4 a8 01 00       	call   c0026c53 <__floatsidf>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ca:	e8 f0 aa 01 00       	call   c0026ebf <__ltdf2>
c000c3cf:	83 c4 10             	add    esp,0x10
c000c3d2:	85 c0                	test   eax,eax
c000c3d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c3dc:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c3e0:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c3e4:	78 10                	js     c000c3f6 <sinc_hex_vari_process+0x512>
c000c3e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c3ea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c3ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c3f2:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c3f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c406:	e8 e5 a1 01 00       	call   c00265f0 <__muldf3>
c000c40b:	59                   	pop    ecx
c000c40c:	5f                   	pop    edi
c000c40d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c411:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c41d:	e8 5d f2 ff ff       	call   c000b67f <double_to_fp>
c000c422:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c426:	89 c7                	mov    edi,eax
c000c428:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c42c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c430:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c434:	e8 b7 a1 01 00       	call   c00265f0 <__muldf3>
c000c439:	83 c4 18             	add    esp,0x18
c000c43c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c440:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c444:	52                   	push   edx
c000c445:	50                   	push   eax
c000c446:	e8 34 f2 ff ff       	call   c000b67f <double_to_fp>
c000c44b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c452:	83 c4 0c             	add    esp,0xc
c000c455:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c458:	8d 04 90             	lea    eax,[eax+edx*4]
c000c45b:	50                   	push   eax
c000c45c:	50                   	push   eax
c000c45d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c460:	e8 ee a7 01 00       	call   c0026c53 <__floatsidf>
c000c465:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c469:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c46d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c471:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c475:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c479:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c47d:	e8 52 a4 01 00       	call   c00268d4 <__divdf3>
c000c482:	83 c4 18             	add    esp,0x18
c000c485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c489:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c48d:	52                   	push   edx
c000c48e:	89 fa                	mov    edx,edi
c000c490:	50                   	push   eax
c000c491:	89 d8                	mov    eax,ebx
c000c493:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c497:	e8 50 de ff ff       	call   c000a2ec <calc_output_hex>
c000c49c:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c4a0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b0:	e8 1f a4 01 00       	call   c00268d4 <__divdf3>
c000c4b5:	83 c4 10             	add    esp,0x10
c000c4b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4cc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c4d0:	e8 9e 9a 01 00       	call   c0025f73 <__adddf3>
c000c4d5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c4d9:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c4dd:	83 c4 18             	add    esp,0x18
c000c4e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e8:	e8 83 ab 01 00       	call   c0027070 <lrint>
c000c4ed:	83 ec 0c             	sub    esp,0xc
c000c4f0:	50                   	push   eax
c000c4f1:	e8 5d a7 01 00       	call   c0026c53 <__floatsidf>
c000c4f6:	83 c4 10             	add    esp,0x10
c000c4f9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4fd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c501:	52                   	push   edx
c000c502:	50                   	push   eax
c000c503:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c507:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c50b:	e8 b4 a0 01 00       	call   c00265c4 <__subdf3>
c000c510:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c514:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c518:	83 c4 20             	add    esp,0x20
c000c51b:	6a 00                	push   0x0
c000c51d:	6a 00                	push   0x0
c000c51f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c523:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c527:	e8 93 a9 01 00       	call   c0026ebf <__ltdf2>
c000c52c:	83 c4 10             	add    esp,0x10
c000c52f:	85 c0                	test   eax,eax
c000c531:	79 20                	jns    c000c553 <sinc_hex_vari_process+0x66f>
c000c533:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c537:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c53b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c53f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c543:	e8 2b 9a 01 00       	call   c0025f73 <__adddf3>
c000c548:	83 c4 10             	add    esp,0x10
c000c54b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c54f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c553:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c556:	83 ec 10             	sub    esp,0x10
c000c559:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c55d:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c568:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c56c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c570:	e8 4f a0 01 00       	call   c00265c4 <__subdf3>
c000c575:	83 c4 18             	add    esp,0x18
c000c578:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c57c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c580:	52                   	push   edx
c000c581:	50                   	push   eax
c000c582:	e8 e9 aa 01 00       	call   c0027070 <lrint>
c000c587:	0f af f8             	imul   edi,eax
c000c58a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c58e:	83 c4 10             	add    esp,0x10
c000c591:	01 f8                	add    eax,edi
c000c593:	99                   	cdq    
c000c594:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c597:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c59a:	e9 fd fb ff ff       	jmp    c000c19c <sinc_hex_vari_process+0x2b8>
c000c59f:	83 c4 4c             	add    esp,0x4c
c000c5a2:	89 d0                	mov    eax,edx
c000c5a4:	5b                   	pop    ebx
c000c5a5:	5e                   	pop    esi
c000c5a6:	5f                   	pop    edi
c000c5a7:	5d                   	pop    ebp
c000c5a8:	c3                   	ret    

c000c5a9 <sinc_quad_vari_process>:
c000c5a9:	55                   	push   ebp
c000c5aa:	ba 05 00 00 00       	mov    edx,0x5
c000c5af:	57                   	push   edi
c000c5b0:	56                   	push   esi
c000c5b1:	53                   	push   ebx
c000c5b2:	83 ec 4c             	sub    esp,0x4c
c000c5b5:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c5b9:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c5bd:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c5c0:	85 db                	test   ebx,ebx
c000c5c2:	0f 84 9c 06 00 00    	je     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c5c8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c5cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c5ce:	0f af c7             	imul   eax,edi
c000c5d1:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c5d4:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c5d7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c5de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c5e5:	0f af c7             	imul   eax,edi
c000c5e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c5eb:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c5ee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c5f1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f9:	68 00 00 70 3f       	push   0x3f700000
c000c5fe:	6a 00                	push   0x0
c000c600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c604:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c608:	e8 b2 a8 01 00       	call   c0026ebf <__ltdf2>
c000c60d:	83 c4 10             	add    esp,0x10
c000c610:	ba 16 00 00 00       	mov    edx,0x16
c000c615:	85 c0                	test   eax,eax
c000c617:	0f 88 47 06 00 00    	js     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c61d:	68 00 00 70 40       	push   0x40700000
c000c622:	6a 00                	push   0x0
c000c624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c62c:	e8 70 a8 01 00       	call   c0026ea1 <__gtdf2>
c000c631:	83 c4 10             	add    esp,0x10
c000c634:	ba 16 00 00 00       	mov    edx,0x16
c000c639:	85 c0                	test   eax,eax
c000c63b:	0f 8f 23 06 00 00    	jg     c000cc64 <sinc_quad_vari_process+0x6bb>
c000c641:	83 ec 0c             	sub    esp,0xc
c000c644:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c647:	e8 07 a6 01 00       	call   c0026c53 <__floatsidf>
c000c64c:	83 c4 10             	add    esp,0x10
c000c64f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c653:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c657:	68 00 00 00 40       	push   0x40000000
c000c65c:	6a 00                	push   0x0
c000c65e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c662:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c666:	e8 08 99 01 00       	call   c0025f73 <__adddf3>
c000c66b:	59                   	pop    ecx
c000c66c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c670:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c674:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c677:	e8 d7 a5 01 00       	call   c0026c53 <__floatsidf>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c683:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c687:	52                   	push   edx
c000c688:	50                   	push   eax
c000c689:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c68d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c691:	e8 3e a2 01 00       	call   c00268d4 <__divdf3>
c000c696:	83 c4 10             	add    esp,0x10
c000c699:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c69d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6a1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c6a4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c6a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c6bf:	e8 dd a7 01 00       	call   c0026ea1 <__gtdf2>
c000c6c4:	83 c4 10             	add    esp,0x10
c000c6c7:	85 c0                	test   eax,eax
c000c6c9:	7e 2d                	jle    c000c6f8 <sinc_quad_vari_process+0x14f>
c000c6cb:	68 00 00 f0 3f       	push   0x3ff00000
c000c6d0:	6a 00                	push   0x0
c000c6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6da:	e8 e0 a7 01 00       	call   c0026ebf <__ltdf2>
c000c6df:	83 c4 10             	add    esp,0x10
c000c6e2:	85 c0                	test   eax,eax
c000c6e4:	79 4d                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c6ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c6f6:	eb 1b                	jmp    c000c713 <sinc_quad_vari_process+0x16a>
c000c6f8:	68 00 00 f0 3f       	push   0x3ff00000
c000c6fd:	6a 00                	push   0x0
c000c6ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c703:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c707:	e8 b3 a7 01 00       	call   c0026ebf <__ltdf2>
c000c70c:	83 c4 10             	add    esp,0x10
c000c70f:	85 c0                	test   eax,eax
c000c711:	79 20                	jns    c000c733 <sinc_quad_vari_process+0x18a>
c000c713:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c717:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c71b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c71f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c723:	e8 ac a1 01 00       	call   c00268d4 <__divdf3>
c000c728:	83 c4 10             	add    esp,0x10
c000c72b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c733:	50                   	push   eax
c000c734:	50                   	push   eax
c000c735:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c739:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c73d:	e8 2e a9 01 00       	call   c0027070 <lrint>
c000c742:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c745:	40                   	inc    eax
c000c746:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c74a:	0f af c7             	imul   eax,edi
c000c74d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c751:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c754:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c758:	58                   	pop    eax
c000c759:	5a                   	pop    edx
c000c75a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c75e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c762:	e8 09 a9 01 00       	call   c0027070 <lrint>
c000c767:	83 ec 0c             	sub    esp,0xc
c000c76a:	50                   	push   eax
c000c76b:	e8 e3 a4 01 00       	call   c0026c53 <__floatsidf>
c000c770:	83 c4 10             	add    esp,0x10
c000c773:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c77b:	52                   	push   edx
c000c77c:	50                   	push   eax
c000c77d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c781:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c785:	e8 3a 9e 01 00       	call   c00265c4 <__subdf3>
c000c78a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c78e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c792:	83 c4 20             	add    esp,0x20
c000c795:	6a 00                	push   0x0
c000c797:	6a 00                	push   0x0
c000c799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c79d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7a1:	e8 19 a7 01 00       	call   c0026ebf <__ltdf2>
c000c7a6:	83 c4 10             	add    esp,0x10
c000c7a9:	85 c0                	test   eax,eax
c000c7ab:	79 1f                	jns    c000c7cc <sinc_quad_vari_process+0x223>
c000c7ad:	68 00 00 f0 3f       	push   0x3ff00000
c000c7b2:	6a 00                	push   0x0
c000c7b4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7bc:	e8 b2 97 01 00       	call   c0025f73 <__adddf3>
c000c7c1:	83 c4 10             	add    esp,0x10
c000c7c4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7cc:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7cf:	83 ec 10             	sub    esp,0x10
c000c7d2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c7d6:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7e1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c7e9:	e8 d6 9d 01 00       	call   c00265c4 <__subdf3>
c000c7ee:	83 c4 18             	add    esp,0x18
c000c7f1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c7f5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c7f9:	52                   	push   edx
c000c7fa:	50                   	push   eax
c000c7fb:	e8 70 a8 01 00       	call   c0027070 <lrint>
c000c800:	0f af f8             	imul   edi,eax
c000c803:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c807:	01 f8                	add    eax,edi
c000c809:	99                   	cdq    
c000c80a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c80d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c810:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c814:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c818:	68 00 00 f0 3f       	push   0x3ff00000
c000c81d:	6a 00                	push   0x0
c000c81f:	e8 b0 a0 01 00       	call   c00268d4 <__divdf3>
c000c824:	83 c4 10             	add    esp,0x10
c000c827:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c82b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c82f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c834:	68 23 42 92 0c       	push   0xc924223
c000c839:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c83d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c841:	e8 2d 97 01 00       	call   c0025f73 <__adddf3>
c000c846:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c84a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c84e:	83 c4 20             	add    esp,0x20
c000c851:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c859:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c861:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c864:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c867:	7d 50                	jge    c000c8b9 <sinc_quad_vari_process+0x310>
c000c869:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c86c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c86f:	01 c8                	add    eax,ecx
c000c871:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c874:	99                   	cdq    
c000c875:	f7 f9                	idiv   ecx
c000c877:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c87b:	7d 0c                	jge    c000c889 <sinc_quad_vari_process+0x2e0>
c000c87d:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c880:	85 ff                	test   edi,edi
c000c882:	79 6c                	jns    c000c8f0 <sinc_quad_vari_process+0x347>
c000c884:	e9 e7 00 00 00       	jmp    c000c970 <sinc_quad_vari_process+0x3c7>
c000c889:	50                   	push   eax
c000c88a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c88e:	56                   	push   esi
c000c88f:	53                   	push   ebx
c000c890:	e8 11 ee ff ff       	call   c000b6a6 <prepare_data>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	89 c2                	mov    edx,eax
c000c89a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c89d:	85 c0                	test   eax,eax
c000c89f:	0f 85 bf 03 00 00    	jne    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8a5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c8a8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c8ab:	01 c8                	add    eax,ecx
c000c8ad:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c8b0:	99                   	cdq    
c000c8b1:	f7 f9                	idiv   ecx
c000c8b3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c8b7:	7c c4                	jl     c000c87d <sinc_quad_vari_process+0x2d4>
c000c8b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c8bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c8c1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c8c4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c8cf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c8d2:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c8d5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c8d8:	99                   	cdq    
c000c8d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8dc:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c8df:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c8e2:	99                   	cdq    
c000c8e3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c8e6:	31 d2                	xor    edx,edx
c000c8e8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c8eb:	e9 74 03 00 00       	jmp    c000cc64 <sinc_quad_vari_process+0x6bb>
c000c8f0:	83 ec 0c             	sub    esp,0xc
c000c8f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c8f6:	e8 58 a3 01 00       	call   c0026c53 <__floatsidf>
c000c8fb:	83 c4 10             	add    esp,0x10
c000c8fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c902:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c906:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c90e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c912:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c916:	e8 58 96 01 00       	call   c0025f73 <__adddf3>
c000c91b:	83 c4 10             	add    esp,0x10
c000c91e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c922:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c926:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c92e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c932:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c936:	e8 38 96 01 00       	call   c0025f73 <__adddf3>
c000c93b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c93e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c942:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c946:	e8 08 a3 01 00       	call   c0026c53 <__floatsidf>
c000c94b:	83 c4 10             	add    esp,0x10
c000c94e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c952:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c956:	52                   	push   edx
c000c957:	50                   	push   eax
c000c958:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c95c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c960:	e8 58 a5 01 00       	call   c0026ebd <__gedf2>
c000c965:	83 c4 10             	add    esp,0x10
c000c968:	85 c0                	test   eax,eax
c000c96a:	0f 89 49 ff ff ff    	jns    c000c8b9 <sinc_quad_vari_process+0x310>
c000c970:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c974:	0f 8e ef 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c97a:	83 ec 10             	sub    esp,0x10
c000c97d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c980:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c983:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c986:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c989:	e8 36 9c 01 00       	call   c00265c4 <__subdf3>
c000c98e:	83 c4 18             	add    esp,0x18
c000c991:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c995:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c999:	52                   	push   edx
c000c99a:	50                   	push   eax
c000c99b:	e8 b0 a6 01 00       	call   c0027050 <fabs>
c000c9a0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c9a4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c9a8:	83 c4 10             	add    esp,0x10
c000c9ab:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c9b0:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c9b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9bd:	e8 df a4 01 00       	call   c0026ea1 <__gtdf2>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	85 c0                	test   eax,eax
c000c9c7:	0f 8e 9c 00 00 00    	jle    c000ca69 <sinc_quad_vari_process+0x4c0>
c000c9cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9d0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c9d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c9d7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c9db:	52                   	push   edx
c000c9dc:	50                   	push   eax
c000c9dd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c9e0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c9e3:	e8 dc 9b 01 00       	call   c00265c4 <__subdf3>
c000c9e8:	59                   	pop    ecx
c000c9e9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c9ed:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c9f1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c9f4:	e8 5a a2 01 00       	call   c0026c53 <__floatsidf>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca00:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca04:	52                   	push   edx
c000ca05:	50                   	push   eax
c000ca06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca0e:	e8 dd 9b 01 00       	call   c00265f0 <__muldf3>
c000ca13:	5f                   	pop    edi
c000ca14:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ca18:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000ca1c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000ca1f:	e8 2f a2 01 00       	call   c0026c53 <__floatsidf>
c000ca24:	83 c4 10             	add    esp,0x10
c000ca27:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca2b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca2f:	52                   	push   edx
c000ca30:	50                   	push   eax
c000ca31:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca39:	e8 96 9e 01 00       	call   c00268d4 <__divdf3>
c000ca3e:	83 c4 10             	add    esp,0x10
c000ca41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca45:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca59:	e8 15 95 01 00       	call   c0025f73 <__adddf3>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca65:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ca69:	83 ec 0c             	sub    esp,0xc
c000ca6c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ca6f:	e8 df a1 01 00       	call   c0026c53 <__floatsidf>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca8f:	e8 2b a4 01 00       	call   c0026ebf <__ltdf2>
c000ca94:	83 c4 10             	add    esp,0x10
c000ca97:	85 c0                	test   eax,eax
c000ca99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ca9d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000caa1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000caa5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000caa9:	78 10                	js     c000cabb <sinc_quad_vari_process+0x512>
c000caab:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000caaf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cab3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cab7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cabb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cabf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cac3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cac7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cacb:	e8 20 9b 01 00       	call   c00265f0 <__muldf3>
c000cad0:	59                   	pop    ecx
c000cad1:	5f                   	pop    edi
c000cad2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cad6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cade:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cae2:	e8 98 eb ff ff       	call   c000b67f <double_to_fp>
c000cae7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caeb:	89 c7                	mov    edi,eax
c000caed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caf1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caf9:	e8 f2 9a 01 00       	call   c00265f0 <__muldf3>
c000cafe:	83 c4 18             	add    esp,0x18
c000cb01:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb05:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb09:	52                   	push   edx
c000cb0a:	50                   	push   eax
c000cb0b:	e8 6f eb ff ff       	call   c000b67f <double_to_fp>
c000cb10:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cb13:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cb17:	83 c4 0c             	add    esp,0xc
c000cb1a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cb1d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cb20:	50                   	push   eax
c000cb21:	50                   	push   eax
c000cb22:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cb25:	e8 29 a1 01 00       	call   c0026c53 <__floatsidf>
c000cb2a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cb2e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cb32:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb36:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb3e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb42:	e8 8d 9d 01 00       	call   c00268d4 <__divdf3>
c000cb47:	83 c4 18             	add    esp,0x18
c000cb4a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb4e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb52:	52                   	push   edx
c000cb53:	89 fa                	mov    edx,edi
c000cb55:	50                   	push   eax
c000cb56:	89 d8                	mov    eax,ebx
c000cb58:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cb5c:	e8 a5 d1 ff ff       	call   c0009d06 <calc_output_quad>
c000cb61:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cb65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cb6d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb71:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb75:	e8 5a 9d 01 00       	call   c00268d4 <__divdf3>
c000cb7a:	83 c4 10             	add    esp,0x10
c000cb7d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb81:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb91:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cb95:	e8 d9 93 01 00       	call   c0025f73 <__adddf3>
c000cb9a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cb9e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cba2:	83 c4 18             	add    esp,0x18
c000cba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbad:	e8 be a4 01 00       	call   c0027070 <lrint>
c000cbb2:	83 ec 0c             	sub    esp,0xc
c000cbb5:	50                   	push   eax
c000cbb6:	e8 98 a0 01 00       	call   c0026c53 <__floatsidf>
c000cbbb:	83 c4 10             	add    esp,0x10
c000cbbe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cbc2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cbc6:	52                   	push   edx
c000cbc7:	50                   	push   eax
c000cbc8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbcc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cbd0:	e8 ef 99 01 00       	call   c00265c4 <__subdf3>
c000cbd5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbd9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbdd:	83 c4 20             	add    esp,0x20
c000cbe0:	6a 00                	push   0x0
c000cbe2:	6a 00                	push   0x0
c000cbe4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbe8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cbec:	e8 ce a2 01 00       	call   c0026ebf <__ltdf2>
c000cbf1:	83 c4 10             	add    esp,0x10
c000cbf4:	85 c0                	test   eax,eax
c000cbf6:	79 20                	jns    c000cc18 <sinc_quad_vari_process+0x66f>
c000cbf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc00:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc08:	e8 66 93 01 00       	call   c0025f73 <__adddf3>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc18:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000cc1b:	83 ec 10             	sub    esp,0x10
c000cc1e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cc22:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cc35:	e8 8a 99 01 00       	call   c00265c4 <__subdf3>
c000cc3a:	83 c4 18             	add    esp,0x18
c000cc3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc45:	52                   	push   edx
c000cc46:	50                   	push   eax
c000cc47:	e8 24 a4 01 00       	call   c0027070 <lrint>
c000cc4c:	0f af f8             	imul   edi,eax
c000cc4f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc53:	83 c4 10             	add    esp,0x10
c000cc56:	01 f8                	add    eax,edi
c000cc58:	99                   	cdq    
c000cc59:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000cc5c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000cc5f:	e9 fd fb ff ff       	jmp    c000c861 <sinc_quad_vari_process+0x2b8>
c000cc64:	83 c4 4c             	add    esp,0x4c
c000cc67:	89 d0                	mov    eax,edx
c000cc69:	5b                   	pop    ebx
c000cc6a:	5e                   	pop    esi
c000cc6b:	5f                   	pop    edi
c000cc6c:	5d                   	pop    ebp
c000cc6d:	c3                   	ret    

c000cc6e <sinc_stereo_vari_process>:
c000cc6e:	55                   	push   ebp
c000cc6f:	ba 05 00 00 00       	mov    edx,0x5
c000cc74:	57                   	push   edi
c000cc75:	56                   	push   esi
c000cc76:	53                   	push   ebx
c000cc77:	83 ec 4c             	sub    esp,0x4c
c000cc7a:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cc7e:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000cc82:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000cc85:	85 db                	test   ebx,ebx
c000cc87:	0f 84 9c 06 00 00    	je     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cc8d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cc90:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cc93:	0f af c7             	imul   eax,edi
c000cc96:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cc99:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cc9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cca3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ccaa:	0f af c7             	imul   eax,edi
c000ccad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ccb0:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ccb3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ccb6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccbe:	68 00 00 70 3f       	push   0x3f700000
c000ccc3:	6a 00                	push   0x0
c000ccc5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cccd:	e8 ed a1 01 00       	call   c0026ebf <__ltdf2>
c000ccd2:	83 c4 10             	add    esp,0x10
c000ccd5:	ba 16 00 00 00       	mov    edx,0x16
c000ccda:	85 c0                	test   eax,eax
c000ccdc:	0f 88 47 06 00 00    	js     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cce2:	68 00 00 70 40       	push   0x40700000
c000cce7:	6a 00                	push   0x0
c000cce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cced:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccf1:	e8 ab a1 01 00       	call   c0026ea1 <__gtdf2>
c000ccf6:	83 c4 10             	add    esp,0x10
c000ccf9:	ba 16 00 00 00       	mov    edx,0x16
c000ccfe:	85 c0                	test   eax,eax
c000cd00:	0f 8f 23 06 00 00    	jg     c000d329 <sinc_stereo_vari_process+0x6bb>
c000cd06:	83 ec 0c             	sub    esp,0xc
c000cd09:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cd0c:	e8 42 9f 01 00       	call   c0026c53 <__floatsidf>
c000cd11:	83 c4 10             	add    esp,0x10
c000cd14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd1c:	68 00 00 00 40       	push   0x40000000
c000cd21:	6a 00                	push   0x0
c000cd23:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd27:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd2b:	e8 43 92 01 00       	call   c0025f73 <__adddf3>
c000cd30:	59                   	pop    ecx
c000cd31:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd35:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd39:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd3c:	e8 12 9f 01 00       	call   c0026c53 <__floatsidf>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd48:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd4c:	52                   	push   edx
c000cd4d:	50                   	push   eax
c000cd4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd56:	e8 79 9b 01 00       	call   c00268d4 <__divdf3>
c000cd5b:	83 c4 10             	add    esp,0x10
c000cd5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cd62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cd66:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cd69:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cd6c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cd70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cd74:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd78:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd7c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd80:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cd84:	e8 18 a1 01 00       	call   c0026ea1 <__gtdf2>
c000cd89:	83 c4 10             	add    esp,0x10
c000cd8c:	85 c0                	test   eax,eax
c000cd8e:	7e 2d                	jle    c000cdbd <sinc_stereo_vari_process+0x14f>
c000cd90:	68 00 00 f0 3f       	push   0x3ff00000
c000cd95:	6a 00                	push   0x0
c000cd97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd9f:	e8 1b a1 01 00       	call   c0026ebf <__ltdf2>
c000cda4:	83 c4 10             	add    esp,0x10
c000cda7:	85 c0                	test   eax,eax
c000cda9:	79 4d                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdaf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cdb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cdb7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cdbb:	eb 1b                	jmp    c000cdd8 <sinc_stereo_vari_process+0x16a>
c000cdbd:	68 00 00 f0 3f       	push   0x3ff00000
c000cdc2:	6a 00                	push   0x0
c000cdc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cdcc:	e8 ee a0 01 00       	call   c0026ebf <__ltdf2>
c000cdd1:	83 c4 10             	add    esp,0x10
c000cdd4:	85 c0                	test   eax,eax
c000cdd6:	79 20                	jns    c000cdf8 <sinc_stereo_vari_process+0x18a>
c000cdd8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cddc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cde0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cde8:	e8 e7 9a 01 00       	call   c00268d4 <__divdf3>
c000cded:	83 c4 10             	add    esp,0x10
c000cdf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf8:	50                   	push   eax
c000cdf9:	50                   	push   eax
c000cdfa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdfe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce02:	e8 69 a2 01 00       	call   c0027070 <lrint>
c000ce07:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000ce0a:	40                   	inc    eax
c000ce0b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0f:	0f af c7             	imul   eax,edi
c000ce12:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ce16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ce19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce1d:	58                   	pop    eax
c000ce1e:	5a                   	pop    edx
c000ce1f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce23:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ce27:	e8 44 a2 01 00       	call   c0027070 <lrint>
c000ce2c:	83 ec 0c             	sub    esp,0xc
c000ce2f:	50                   	push   eax
c000ce30:	e8 1e 9e 01 00       	call   c0026c53 <__floatsidf>
c000ce35:	83 c4 10             	add    esp,0x10
c000ce38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce3c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce40:	52                   	push   edx
c000ce41:	50                   	push   eax
c000ce42:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ce4a:	e8 75 97 01 00       	call   c00265c4 <__subdf3>
c000ce4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce53:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce57:	83 c4 20             	add    esp,0x20
c000ce5a:	6a 00                	push   0x0
c000ce5c:	6a 00                	push   0x0
c000ce5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce66:	e8 54 a0 01 00       	call   c0026ebf <__ltdf2>
c000ce6b:	83 c4 10             	add    esp,0x10
c000ce6e:	85 c0                	test   eax,eax
c000ce70:	79 1f                	jns    c000ce91 <sinc_stereo_vari_process+0x223>
c000ce72:	68 00 00 f0 3f       	push   0x3ff00000
c000ce77:	6a 00                	push   0x0
c000ce79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	e8 ed 90 01 00       	call   c0025f73 <__adddf3>
c000ce86:	83 c4 10             	add    esp,0x10
c000ce89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce91:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce94:	83 ec 10             	sub    esp,0x10
c000ce97:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ce9b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cea6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ceae:	e8 11 97 01 00       	call   c00265c4 <__subdf3>
c000ceb3:	83 c4 18             	add    esp,0x18
c000ceb6:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ceba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cebe:	52                   	push   edx
c000cebf:	50                   	push   eax
c000cec0:	e8 ab a1 01 00       	call   c0027070 <lrint>
c000cec5:	0f af f8             	imul   edi,eax
c000cec8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cecc:	01 f8                	add    eax,edi
c000cece:	99                   	cdq    
c000cecf:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ced2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ced5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ced9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cedd:	68 00 00 f0 3f       	push   0x3ff00000
c000cee2:	6a 00                	push   0x0
c000cee4:	e8 eb 99 01 00       	call   c00268d4 <__divdf3>
c000cee9:	83 c4 10             	add    esp,0x10
c000ceec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cef0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cef4:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000cef9:	68 23 42 92 0c       	push   0xc924223
c000cefe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf02:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cf06:	e8 68 90 01 00       	call   c0025f73 <__adddf3>
c000cf0b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000cf0f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000cf13:	83 c4 20             	add    esp,0x20
c000cf16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cf1e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cf26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cf29:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cf2c:	7d 50                	jge    c000cf7e <sinc_stereo_vari_process+0x310>
c000cf2e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf31:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf34:	01 c8                	add    eax,ecx
c000cf36:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf39:	99                   	cdq    
c000cf3a:	f7 f9                	idiv   ecx
c000cf3c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf40:	7d 0c                	jge    c000cf4e <sinc_stereo_vari_process+0x2e0>
c000cf42:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cf45:	85 ff                	test   edi,edi
c000cf47:	79 6c                	jns    c000cfb5 <sinc_stereo_vari_process+0x347>
c000cf49:	e9 e7 00 00 00       	jmp    c000d035 <sinc_stereo_vari_process+0x3c7>
c000cf4e:	50                   	push   eax
c000cf4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cf53:	56                   	push   esi
c000cf54:	53                   	push   ebx
c000cf55:	e8 4c e7 ff ff       	call   c000b6a6 <prepare_data>
c000cf5a:	83 c4 10             	add    esp,0x10
c000cf5d:	89 c2                	mov    edx,eax
c000cf5f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cf62:	85 c0                	test   eax,eax
c000cf64:	0f 85 bf 03 00 00    	jne    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cf6a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cf6d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cf70:	01 c8                	add    eax,ecx
c000cf72:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cf75:	99                   	cdq    
c000cf76:	f7 f9                	idiv   ecx
c000cf78:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cf7c:	7c c4                	jl     c000cf42 <sinc_stereo_vari_process+0x2d4>
c000cf7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cf82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf86:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cf89:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf94:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cf97:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cf9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cf9d:	99                   	cdq    
c000cf9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfa1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cfa4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cfab:	31 d2                	xor    edx,edx
c000cfad:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cfb0:	e9 74 03 00 00       	jmp    c000d329 <sinc_stereo_vari_process+0x6bb>
c000cfb5:	83 ec 0c             	sub    esp,0xc
c000cfb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cfbb:	e8 93 9c 01 00       	call   c0026c53 <__floatsidf>
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cfd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cfdb:	e8 93 8f 01 00       	call   c0025f73 <__adddf3>
c000cfe0:	83 c4 10             	add    esp,0x10
c000cfe3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cfe7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cfeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cfef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cff3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cff7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cffb:	e8 73 8f 01 00       	call   c0025f73 <__adddf3>
c000d000:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d003:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d007:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d00b:	e8 43 9c 01 00       	call   c0026c53 <__floatsidf>
c000d010:	83 c4 10             	add    esp,0x10
c000d013:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d017:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d01b:	52                   	push   edx
c000d01c:	50                   	push   eax
c000d01d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d021:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d025:	e8 93 9e 01 00       	call   c0026ebd <__gedf2>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	85 c0                	test   eax,eax
c000d02f:	0f 89 49 ff ff ff    	jns    c000cf7e <sinc_stereo_vari_process+0x310>
c000d035:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d039:	0f 8e ef 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d03f:	83 ec 10             	sub    esp,0x10
c000d042:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d045:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d048:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d04b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d04e:	e8 71 95 01 00       	call   c00265c4 <__subdf3>
c000d053:	83 c4 18             	add    esp,0x18
c000d056:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d05a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05e:	52                   	push   edx
c000d05f:	50                   	push   eax
c000d060:	e8 eb 9f 01 00       	call   c0027050 <fabs>
c000d065:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d069:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d06d:	83 c4 10             	add    esp,0x10
c000d070:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d075:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d07a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d07e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d082:	e8 1a 9e 01 00       	call   c0026ea1 <__gtdf2>
c000d087:	83 c4 10             	add    esp,0x10
c000d08a:	85 c0                	test   eax,eax
c000d08c:	0f 8e 9c 00 00 00    	jle    c000d12e <sinc_stereo_vari_process+0x4c0>
c000d092:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d095:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d098:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d09c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d0a0:	52                   	push   edx
c000d0a1:	50                   	push   eax
c000d0a2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d0a5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d0a8:	e8 17 95 01 00       	call   c00265c4 <__subdf3>
c000d0ad:	59                   	pop    ecx
c000d0ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0b2:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0b6:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d0b9:	e8 95 9b 01 00       	call   c0026c53 <__floatsidf>
c000d0be:	83 c4 10             	add    esp,0x10
c000d0c1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0c9:	52                   	push   edx
c000d0ca:	50                   	push   eax
c000d0cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0d3:	e8 18 95 01 00       	call   c00265f0 <__muldf3>
c000d0d8:	5f                   	pop    edi
c000d0d9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d0dd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d0e1:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d0e4:	e8 6a 9b 01 00       	call   c0026c53 <__floatsidf>
c000d0e9:	83 c4 10             	add    esp,0x10
c000d0ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0f0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0f4:	52                   	push   edx
c000d0f5:	50                   	push   eax
c000d0f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d0fe:	e8 d1 97 01 00       	call   c00268d4 <__divdf3>
c000d103:	83 c4 10             	add    esp,0x10
c000d106:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d112:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d116:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d11e:	e8 50 8e 01 00       	call   c0025f73 <__adddf3>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d12e:	83 ec 0c             	sub    esp,0xc
c000d131:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d134:	e8 1a 9b 01 00       	call   c0026c53 <__floatsidf>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d148:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d150:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d154:	e8 66 9d 01 00       	call   c0026ebf <__ltdf2>
c000d159:	83 c4 10             	add    esp,0x10
c000d15c:	85 c0                	test   eax,eax
c000d15e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d162:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d166:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d16a:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d16e:	78 10                	js     c000d180 <sinc_stereo_vari_process+0x512>
c000d170:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d174:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d178:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d17c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d180:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d184:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d188:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d18c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d190:	e8 5b 94 01 00       	call   c00265f0 <__muldf3>
c000d195:	59                   	pop    ecx
c000d196:	5f                   	pop    edi
c000d197:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d19b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d19f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d1a7:	e8 d3 e4 ff ff       	call   c000b67f <double_to_fp>
c000d1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b0:	89 c7                	mov    edi,eax
c000d1b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d1b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1ba:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d1be:	e8 2d 94 01 00       	call   c00265f0 <__muldf3>
c000d1c3:	83 c4 18             	add    esp,0x18
c000d1c6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d1ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d1ce:	52                   	push   edx
c000d1cf:	50                   	push   eax
c000d1d0:	e8 aa e4 ff ff       	call   c000b67f <double_to_fp>
c000d1d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d1d8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d1dc:	83 c4 0c             	add    esp,0xc
c000d1df:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d1e2:	8d 04 90             	lea    eax,[eax+edx*4]
c000d1e5:	50                   	push   eax
c000d1e6:	50                   	push   eax
c000d1e7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d1ea:	e8 64 9a 01 00       	call   c0026c53 <__floatsidf>
c000d1ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d1f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d1f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1fb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d203:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d207:	e8 c8 96 01 00       	call   c00268d4 <__divdf3>
c000d20c:	83 c4 18             	add    esp,0x18
c000d20f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d213:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d217:	52                   	push   edx
c000d218:	89 fa                	mov    edx,edi
c000d21a:	50                   	push   eax
c000d21b:	89 d8                	mov    eax,ebx
c000d21d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d221:	e8 02 c7 ff ff       	call   c0009928 <calc_output_stereo>
c000d226:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d22a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d22e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d232:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d236:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23a:	e8 95 96 01 00       	call   c00268d4 <__divdf3>
c000d23f:	83 c4 10             	add    esp,0x10
c000d242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d246:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d24a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d24e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d252:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d256:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d25a:	e8 14 8d 01 00       	call   c0025f73 <__adddf3>
c000d25f:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d263:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d267:	83 c4 18             	add    esp,0x18
c000d26a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d26e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d272:	e8 f9 9d 01 00       	call   c0027070 <lrint>
c000d277:	83 ec 0c             	sub    esp,0xc
c000d27a:	50                   	push   eax
c000d27b:	e8 d3 99 01 00       	call   c0026c53 <__floatsidf>
c000d280:	83 c4 10             	add    esp,0x10
c000d283:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d287:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d291:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d295:	e8 2a 93 01 00       	call   c00265c4 <__subdf3>
c000d29a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d29e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2a2:	83 c4 20             	add    esp,0x20
c000d2a5:	6a 00                	push   0x0
c000d2a7:	6a 00                	push   0x0
c000d2a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2b1:	e8 09 9c 01 00       	call   c0026ebf <__ltdf2>
c000d2b6:	83 c4 10             	add    esp,0x10
c000d2b9:	85 c0                	test   eax,eax
c000d2bb:	79 20                	jns    c000d2dd <sinc_stereo_vari_process+0x66f>
c000d2bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d2cd:	e8 a1 8c 01 00       	call   c0025f73 <__adddf3>
c000d2d2:	83 c4 10             	add    esp,0x10
c000d2d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d2d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d2dd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d2e0:	83 ec 10             	sub    esp,0x10
c000d2e3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d2e7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d2fa:	e8 c5 92 01 00       	call   c00265c4 <__subdf3>
c000d2ff:	83 c4 18             	add    esp,0x18
c000d302:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d306:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d30a:	52                   	push   edx
c000d30b:	50                   	push   eax
c000d30c:	e8 5f 9d 01 00       	call   c0027070 <lrint>
c000d311:	0f af f8             	imul   edi,eax
c000d314:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	01 f8                	add    eax,edi
c000d31d:	99                   	cdq    
c000d31e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d321:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d324:	e9 fd fb ff ff       	jmp    c000cf26 <sinc_stereo_vari_process+0x2b8>
c000d329:	83 c4 4c             	add    esp,0x4c
c000d32c:	89 d0                	mov    eax,edx
c000d32e:	5b                   	pop    ebx
c000d32f:	5e                   	pop    esi
c000d330:	5f                   	pop    edi
c000d331:	5d                   	pop    ebp
c000d332:	c3                   	ret    

c000d333 <sinc_mono_vari_process>:
c000d333:	55                   	push   ebp
c000d334:	ba 05 00 00 00       	mov    edx,0x5
c000d339:	57                   	push   edi
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	83 ec 4c             	sub    esp,0x4c
c000d33f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d343:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d347:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d34a:	85 db                	test   ebx,ebx
c000d34c:	0f 84 c1 06 00 00    	je     c000da13 <sinc_mono_vari_process+0x6e0>
c000d352:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d355:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d358:	0f af c7             	imul   eax,edi
c000d35b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d35e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d361:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d368:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d36f:	0f af c7             	imul   eax,edi
c000d372:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d375:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d379:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d37c:	8b 00                	mov    eax,DWORD PTR [eax]
c000d37e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d382:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d386:	68 00 00 70 3f       	push   0x3f700000
c000d38b:	6a 00                	push   0x0
c000d38d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d391:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d395:	e8 25 9b 01 00       	call   c0026ebf <__ltdf2>
c000d39a:	83 c4 10             	add    esp,0x10
c000d39d:	ba 16 00 00 00       	mov    edx,0x16
c000d3a2:	85 c0                	test   eax,eax
c000d3a4:	0f 88 69 06 00 00    	js     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3aa:	68 00 00 70 40       	push   0x40700000
c000d3af:	6a 00                	push   0x0
c000d3b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3b9:	e8 e3 9a 01 00       	call   c0026ea1 <__gtdf2>
c000d3be:	83 c4 10             	add    esp,0x10
c000d3c1:	ba 16 00 00 00       	mov    edx,0x16
c000d3c6:	85 c0                	test   eax,eax
c000d3c8:	0f 8f 45 06 00 00    	jg     c000da13 <sinc_mono_vari_process+0x6e0>
c000d3ce:	83 ec 0c             	sub    esp,0xc
c000d3d1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d3d4:	e8 7a 98 01 00       	call   c0026c53 <__floatsidf>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d3e4:	68 00 00 00 40       	push   0x40000000
c000d3e9:	6a 00                	push   0x0
c000d3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d3f3:	e8 7b 8b 01 00       	call   c0025f73 <__adddf3>
c000d3f8:	59                   	pop    ecx
c000d3f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d3fd:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d401:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d404:	e8 4a 98 01 00       	call   c0026c53 <__floatsidf>
c000d409:	83 c4 10             	add    esp,0x10
c000d40c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d410:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d414:	52                   	push   edx
c000d415:	50                   	push   eax
c000d416:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d41e:	e8 b1 94 01 00       	call   c00268d4 <__divdf3>
c000d423:	83 c4 10             	add    esp,0x10
c000d426:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d42a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d42e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d431:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d434:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d438:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d43c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d440:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d444:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d448:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d44c:	e8 50 9a 01 00       	call   c0026ea1 <__gtdf2>
c000d451:	83 c4 10             	add    esp,0x10
c000d454:	85 c0                	test   eax,eax
c000d456:	7e 2d                	jle    c000d485 <sinc_mono_vari_process+0x152>
c000d458:	68 00 00 f0 3f       	push   0x3ff00000
c000d45d:	6a 00                	push   0x0
c000d45f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d467:	e8 53 9a 01 00       	call   c0026ebf <__ltdf2>
c000d46c:	83 c4 10             	add    esp,0x10
c000d46f:	85 c0                	test   eax,eax
c000d471:	79 4d                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d477:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d483:	eb 1b                	jmp    c000d4a0 <sinc_mono_vari_process+0x16d>
c000d485:	68 00 00 f0 3f       	push   0x3ff00000
c000d48a:	6a 00                	push   0x0
c000d48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d494:	e8 26 9a 01 00       	call   c0026ebf <__ltdf2>
c000d499:	83 c4 10             	add    esp,0x10
c000d49c:	85 c0                	test   eax,eax
c000d49e:	79 20                	jns    c000d4c0 <sinc_mono_vari_process+0x18d>
c000d4a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d4a8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ac:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4b0:	e8 1f 94 01 00       	call   c00268d4 <__divdf3>
c000d4b5:	83 c4 10             	add    esp,0x10
c000d4b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4c0:	50                   	push   eax
c000d4c1:	50                   	push   eax
c000d4c2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ca:	e8 a1 9b 01 00       	call   c0027070 <lrint>
c000d4cf:	40                   	inc    eax
c000d4d0:	0f af c7             	imul   eax,edi
c000d4d3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d4d7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d4db:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d4de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d4e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4e9:	58                   	pop    eax
c000d4ea:	5a                   	pop    edx
c000d4eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d4f3:	e8 78 9b 01 00       	call   c0027070 <lrint>
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	50                   	push   eax
c000d4fc:	e8 52 97 01 00       	call   c0026c53 <__floatsidf>
c000d501:	83 c4 10             	add    esp,0x10
c000d504:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d508:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d50c:	52                   	push   edx
c000d50d:	50                   	push   eax
c000d50e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d512:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d516:	e8 a9 90 01 00       	call   c00265c4 <__subdf3>
c000d51b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d51f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d523:	83 c4 20             	add    esp,0x20
c000d526:	6a 00                	push   0x0
c000d528:	6a 00                	push   0x0
c000d52a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d52e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d532:	e8 88 99 01 00       	call   c0026ebf <__ltdf2>
c000d537:	83 c4 10             	add    esp,0x10
c000d53a:	85 c0                	test   eax,eax
c000d53c:	79 1f                	jns    c000d55d <sinc_mono_vari_process+0x22a>
c000d53e:	68 00 00 f0 3f       	push   0x3ff00000
c000d543:	6a 00                	push   0x0
c000d545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d549:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d54d:	e8 21 8a 01 00       	call   c0025f73 <__adddf3>
c000d552:	83 c4 10             	add    esp,0x10
c000d555:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d559:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d55d:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d560:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d563:	83 ec 10             	sub    esp,0x10
c000d566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d56e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d572:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d576:	e8 49 90 01 00       	call   c00265c4 <__subdf3>
c000d57b:	83 c4 18             	add    esp,0x18
c000d57e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d582:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d586:	52                   	push   edx
c000d587:	50                   	push   eax
c000d588:	e8 e3 9a 01 00       	call   c0027070 <lrint>
c000d58d:	0f af f8             	imul   edi,eax
c000d590:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d593:	31 ff                	xor    edi,edi
c000d595:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d59a:	99                   	cdq    
c000d59b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d59e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d5a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d5a9:	55                   	push   ebp
c000d5aa:	57                   	push   edi
c000d5ab:	e8 24 93 01 00       	call   c00268d4 <__divdf3>
c000d5b0:	83 c4 10             	add    esp,0x10
c000d5b3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d5b7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d5bb:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d5c0:	68 23 42 92 0c       	push   0xc924223
c000d5c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5c9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d5cd:	e8 a1 89 01 00       	call   c0025f73 <__adddf3>
c000d5d2:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d5d6:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d5da:	83 c4 20             	add    esp,0x20
c000d5dd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d5e1:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d5e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d5e8:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d5eb:	7d 54                	jge    c000d641 <sinc_mono_vari_process+0x30e>
c000d5ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d5f0:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d5f3:	01 c8                	add    eax,ecx
c000d5f5:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d5f8:	99                   	cdq    
c000d5f9:	f7 f9                	idiv   ecx
c000d5fb:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d5ff:	7d 0c                	jge    c000d60d <sinc_mono_vari_process+0x2da>
c000d601:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d604:	85 ff                	test   edi,edi
c000d606:	79 73                	jns    c000d67b <sinc_mono_vari_process+0x348>
c000d608:	e9 ee 00 00 00       	jmp    c000d6fb <sinc_mono_vari_process+0x3c8>
c000d60d:	50                   	push   eax
c000d60e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d612:	56                   	push   esi
c000d613:	53                   	push   ebx
c000d614:	e8 8d e0 ff ff       	call   c000b6a6 <prepare_data>
c000d619:	89 c2                	mov    edx,eax
c000d61b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d61f:	83 c4 10             	add    esp,0x10
c000d622:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d625:	85 d2                	test   edx,edx
c000d627:	0f 85 e6 03 00 00    	jne    c000da13 <sinc_mono_vari_process+0x6e0>
c000d62d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d630:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d633:	01 c8                	add    eax,ecx
c000d635:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d638:	99                   	cdq    
c000d639:	f7 f9                	idiv   ecx
c000d63b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d63f:	7c c0                	jl     c000d601 <sinc_mono_vari_process+0x2ce>
c000d641:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d645:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d64d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d650:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d653:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d657:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d65b:	89 01                	mov    DWORD PTR [ecx],eax
c000d65d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d660:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d663:	99                   	cdq    
c000d664:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d66a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d66d:	99                   	cdq    
c000d66e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d671:	31 d2                	xor    edx,edx
c000d673:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d676:	e9 98 03 00 00       	jmp    c000da13 <sinc_mono_vari_process+0x6e0>
c000d67b:	83 ec 0c             	sub    esp,0xc
c000d67e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d681:	e8 cd 95 01 00       	call   c0026c53 <__floatsidf>
c000d686:	83 c4 10             	add    esp,0x10
c000d689:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d68d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d691:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d695:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d699:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d69d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6a1:	e8 cd 88 01 00       	call   c0025f73 <__adddf3>
c000d6a6:	83 c4 10             	add    esp,0x10
c000d6a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d6ad:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d6b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d6b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6c1:	e8 ad 88 01 00       	call   c0025f73 <__adddf3>
c000d6c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d6cd:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d6d1:	e8 7d 95 01 00       	call   c0026c53 <__floatsidf>
c000d6d6:	83 c4 10             	add    esp,0x10
c000d6d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d6dd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d6e1:	52                   	push   edx
c000d6e2:	50                   	push   eax
c000d6e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d6eb:	e8 b1 97 01 00       	call   c0026ea1 <__gtdf2>
c000d6f0:	83 c4 10             	add    esp,0x10
c000d6f3:	85 c0                	test   eax,eax
c000d6f5:	0f 8f 46 ff ff ff    	jg     c000d641 <sinc_mono_vari_process+0x30e>
c000d6fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d6ff:	0f 8e f5 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d705:	83 ec 10             	sub    esp,0x10
c000d708:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d70b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d70e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d712:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d715:	ff 30                	push   DWORD PTR [eax]
c000d717:	e8 a8 8e 01 00       	call   c00265c4 <__subdf3>
c000d71c:	83 c4 18             	add    esp,0x18
c000d71f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d723:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d727:	52                   	push   edx
c000d728:	50                   	push   eax
c000d729:	e8 22 99 01 00       	call   c0027050 <fabs>
c000d72e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d732:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d736:	83 c4 10             	add    esp,0x10
c000d739:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d73e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d74b:	e8 51 97 01 00       	call   c0026ea1 <__gtdf2>
c000d750:	83 c4 10             	add    esp,0x10
c000d753:	85 c0                	test   eax,eax
c000d755:	0f 8e 9f 00 00 00    	jle    c000d7fa <sinc_mono_vari_process+0x4c7>
c000d75b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d75f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d762:	8b 00                	mov    eax,DWORD PTR [eax]
c000d764:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d768:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d76c:	52                   	push   edx
c000d76d:	50                   	push   eax
c000d76e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d771:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d774:	e8 4b 8e 01 00       	call   c00265c4 <__subdf3>
c000d779:	5f                   	pop    edi
c000d77a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d77e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d782:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d785:	e8 c9 94 01 00       	call   c0026c53 <__floatsidf>
c000d78a:	83 c4 10             	add    esp,0x10
c000d78d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d791:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d795:	52                   	push   edx
c000d796:	50                   	push   eax
c000d797:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d79f:	e8 4c 8e 01 00       	call   c00265f0 <__muldf3>
c000d7a4:	5d                   	pop    ebp
c000d7a5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d7a9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d7ad:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d7b0:	e8 9e 94 01 00       	call   c0026c53 <__floatsidf>
c000d7b5:	83 c4 10             	add    esp,0x10
c000d7b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d7bc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d7c0:	52                   	push   edx
c000d7c1:	50                   	push   eax
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ca:	e8 05 91 01 00       	call   c00268d4 <__divdf3>
c000d7cf:	83 c4 10             	add    esp,0x10
c000d7d2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7ea:	e8 84 87 01 00       	call   c0025f73 <__adddf3>
c000d7ef:	83 c4 10             	add    esp,0x10
c000d7f2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d7f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d7fa:	83 ec 0c             	sub    esp,0xc
c000d7fd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d800:	e8 4e 94 01 00       	call   c0026c53 <__floatsidf>
c000d805:	83 c4 10             	add    esp,0x10
c000d808:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d80c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d81c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d820:	e8 9a 96 01 00       	call   c0026ebf <__ltdf2>
c000d825:	83 c4 10             	add    esp,0x10
c000d828:	85 c0                	test   eax,eax
c000d82a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d82e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000d832:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000d836:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000d83a:	78 10                	js     c000d84c <sinc_mono_vari_process+0x519>
c000d83c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d840:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d844:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d848:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d84c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d850:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d85c:	e8 8f 8d 01 00       	call   c00265f0 <__muldf3>
c000d861:	59                   	pop    ecx
c000d862:	5f                   	pop    edi
c000d863:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d867:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d86b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d86f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d873:	e8 07 de ff ff       	call   c000b67f <double_to_fp>
c000d878:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d87c:	89 c7                	mov    edi,eax
c000d87e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d882:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d886:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d88a:	e8 61 8d 01 00       	call   c00265f0 <__muldf3>
c000d88f:	83 c4 18             	add    esp,0x18
c000d892:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d896:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d89a:	52                   	push   edx
c000d89b:	50                   	push   eax
c000d89c:	e8 de dd ff ff       	call   c000b67f <double_to_fp>
c000d8a1:	83 ec 0c             	sub    esp,0xc
c000d8a4:	89 c5                	mov    ebp,eax
c000d8a6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d8a9:	e8 a5 93 01 00       	call   c0026c53 <__floatsidf>
c000d8ae:	83 c4 10             	add    esp,0x10
c000d8b1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8b5:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8b9:	52                   	push   edx
c000d8ba:	50                   	push   eax
c000d8bb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d8c3:	e8 0c 90 01 00       	call   c00268d4 <__divdf3>
c000d8c8:	83 c4 10             	add    esp,0x10
c000d8cb:	89 e9                	mov    ecx,ebp
c000d8cd:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d8d1:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d8d5:	89 d8                	mov    eax,ebx
c000d8d7:	89 fa                	mov    edx,edi
c000d8d9:	e8 ee bd ff ff       	call   c00096cc <calc_output_single>
c000d8de:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000d8e1:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000d8e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8e8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d8ec:	52                   	push   edx
c000d8ed:	50                   	push   eax
c000d8ee:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d8f6:	e8 f5 8c 01 00       	call   c00265f0 <__muldf3>
c000d8fb:	59                   	pop    ecx
c000d8fc:	59                   	pop    ecx
c000d8fd:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d901:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d905:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d909:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d90d:	e8 b1 95 01 00       	call   c0026ec3 <__truncdfsf2>
c000d912:	83 c4 10             	add    esp,0x10
c000d915:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000d918:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000d91b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d91f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d923:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d927:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d92b:	e8 a4 8f 01 00       	call   c00268d4 <__divdf3>
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d937:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d93b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d93f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d943:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d947:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d94b:	e8 23 86 01 00       	call   c0025f73 <__adddf3>
c000d950:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000d954:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d958:	83 c4 18             	add    esp,0x18
c000d95b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d95f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d963:	e8 08 97 01 00       	call   c0027070 <lrint>
c000d968:	83 ec 0c             	sub    esp,0xc
c000d96b:	50                   	push   eax
c000d96c:	e8 e2 92 01 00       	call   c0026c53 <__floatsidf>
c000d971:	83 c4 10             	add    esp,0x10
c000d974:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d978:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d97c:	52                   	push   edx
c000d97d:	50                   	push   eax
c000d97e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d982:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d986:	e8 39 8c 01 00       	call   c00265c4 <__subdf3>
c000d98b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d98f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d993:	83 c4 20             	add    esp,0x20
c000d996:	6a 00                	push   0x0
c000d998:	6a 00                	push   0x0
c000d99a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d99e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9a2:	e8 18 95 01 00       	call   c0026ebf <__ltdf2>
c000d9a7:	83 c4 10             	add    esp,0x10
c000d9aa:	85 c0                	test   eax,eax
c000d9ac:	79 20                	jns    c000d9ce <sinc_mono_vari_process+0x69b>
c000d9ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d9be:	e8 b0 85 01 00       	call   c0025f73 <__adddf3>
c000d9c3:	83 c4 10             	add    esp,0x10
c000d9c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d9ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d9ce:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d9d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d9d4:	83 ec 10             	sub    esp,0x10
c000d9d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9df:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9e7:	e8 d8 8b 01 00       	call   c00265c4 <__subdf3>
c000d9ec:	83 c4 18             	add    esp,0x18
c000d9ef:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9f7:	52                   	push   edx
c000d9f8:	50                   	push   eax
c000d9f9:	e8 72 96 01 00       	call   c0027070 <lrint>
c000d9fe:	83 c4 10             	add    esp,0x10
c000da01:	0f af f8             	imul   edi,eax
c000da04:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000da07:	99                   	cdq    
c000da08:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000da0b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000da0e:	e9 d2 fb ff ff       	jmp    c000d5e5 <sinc_mono_vari_process+0x2b2>
c000da13:	83 c4 4c             	add    esp,0x4c
c000da16:	89 d0                	mov    eax,edx
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	5d                   	pop    ebp
c000da1c:	c3                   	ret    

c000da1d <sinc_get_name>:
c000da1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da21:	31 c0                	xor    eax,eax
c000da23:	83 fa 02             	cmp    edx,0x2
c000da26:	77 07                	ja     c000da2f <sinc_get_name+0x12>
c000da28:	8b 04 95 04 88 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd77fc]
c000da2f:	c3                   	ret    

c000da30 <sinc_get_description>:
c000da30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000da34:	31 c0                	xor    eax,eax
c000da36:	83 fa 02             	cmp    edx,0x2
c000da39:	77 07                	ja     c000da42 <sinc_get_description+0x12>
c000da3b:	8b 04 95 f8 87 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7808]
c000da42:	c3                   	ret    

c000da43 <sinc_set_converter>:
c000da43:	53                   	push   ebx
c000da44:	81 ec 58 08 00 00    	sub    esp,0x858
c000da4a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000da51:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000da54:	85 c0                	test   eax,eax
c000da56:	74 13                	je     c000da6b <sinc_set_converter+0x28>
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 83 1a 00 00       	call   c000f4e4 <free>
c000da61:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000da68:	83 c4 10             	add    esp,0x10
c000da6b:	50                   	push   eax
c000da6c:	68 44 08 00 00       	push   0x844
c000da71:	6a 00                	push   0x0
c000da73:	8d 44 24 18          	lea    eax,[esp+0x18]
c000da77:	50                   	push   eax
c000da78:	e8 0e 2c ff ff       	call   c000068b <memset>
c000da7d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000da80:	83 c4 10             	add    esp,0x10
c000da83:	b8 0b 00 00 00       	mov    eax,0xb
c000da88:	81 fa 80 00 00 00    	cmp    edx,0x80
c000da8e:	7f 6e                	jg     c000dafe <sinc_set_converter+0xbb>
c000da90:	83 fa 01             	cmp    edx,0x1
c000da93:	75 10                	jne    c000daa5 <sinc_set_converter+0x62>
c000da95:	c7 43 24 33 d3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d333
c000da9c:	c7 43 20 33 d3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d333
c000daa3:	eb 4d                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daa5:	83 fa 02             	cmp    edx,0x2
c000daa8:	75 10                	jne    c000daba <sinc_set_converter+0x77>
c000daaa:	c7 43 24 6e cc 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cc6e
c000dab1:	c7 43 20 6e cc 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cc6e
c000dab8:	eb 38                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000daba:	83 fa 04             	cmp    edx,0x4
c000dabd:	75 10                	jne    c000dacf <sinc_set_converter+0x8c>
c000dabf:	c7 43 24 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c5a9
c000dac6:	c7 43 20 a9 c5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c5a9
c000dacd:	eb 23                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dacf:	83 fa 06             	cmp    edx,0x6
c000dad2:	75 10                	jne    c000dae4 <sinc_set_converter+0xa1>
c000dad4:	c7 43 24 e4 be 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000bee4
c000dadb:	c7 43 20 e4 be 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000bee4
c000dae2:	eb 0e                	jmp    c000daf2 <sinc_set_converter+0xaf>
c000dae4:	c7 43 24 20 b8 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000b820
c000daeb:	c7 43 20 20 b8 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000b820
c000daf2:	c7 43 28 d3 aa 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000aad3
c000daf9:	b8 0a 00 00 00       	mov    eax,0xa
c000dafe:	81 c4 58 08 00 00    	add    esp,0x858
c000db04:	5b                   	pop    ebx
c000db05:	c3                   	ret    

c000db06 <zoh_vari_process>:
c000db06:	55                   	push   ebp
c000db07:	31 d2                	xor    edx,edx
c000db09:	57                   	push   edi
c000db0a:	56                   	push   esi
c000db0b:	53                   	push   ebx
c000db0c:	83 ec 3c             	sub    esp,0x3c
c000db0f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000db13:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000db17:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000db1b:	0f 8e 80 06 00 00    	jle    c000e1a1 <zoh_vari_process+0x69b>
c000db21:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000db24:	ba 05 00 00 00       	mov    edx,0x5
c000db29:	85 db                	test   ebx,ebx
c000db2b:	0f 84 70 06 00 00    	je     c000e1a1 <zoh_vari_process+0x69b>
c000db31:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000db34:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000db38:	74 19                	je     c000db53 <zoh_vari_process+0x4d>
c000db3a:	31 d2                	xor    edx,edx
c000db3c:	39 c2                	cmp    edx,eax
c000db3e:	7d 0c                	jge    c000db4c <zoh_vari_process+0x46>
c000db40:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000db42:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000db45:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000db49:	42                   	inc    edx
c000db4a:	eb f0                	jmp    c000db3c <zoh_vari_process+0x36>
c000db4c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000db53:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000db56:	0f af d0             	imul   edx,eax
c000db59:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000db5c:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000db60:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000db67:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000db6a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000db71:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000db74:	8b 07                	mov    eax,DWORD PTR [edi]
c000db76:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000db7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db7e:	68 00 00 70 3f       	push   0x3f700000
c000db83:	6a 00                	push   0x0
c000db85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000db8d:	e8 2d 93 01 00       	call   c0026ebf <__ltdf2>
c000db92:	83 c4 10             	add    esp,0x10
c000db95:	ba 16 00 00 00       	mov    edx,0x16
c000db9a:	85 c0                	test   eax,eax
c000db9c:	0f 88 ff 05 00 00    	js     c000e1a1 <zoh_vari_process+0x69b>
c000dba2:	68 00 00 70 40       	push   0x40700000
c000dba7:	6a 00                	push   0x0
c000dba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbb1:	e8 eb 92 01 00       	call   c0026ea1 <__gtdf2>
c000dbb6:	83 c4 10             	add    esp,0x10
c000dbb9:	ba 16 00 00 00       	mov    edx,0x16
c000dbbe:	85 c0                	test   eax,eax
c000dbc0:	0f 8f db 05 00 00    	jg     c000e1a1 <zoh_vari_process+0x69b>
c000dbc6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000dbc9:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000dbcc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dbd4:	68 00 00 f0 3f       	push   0x3ff00000
c000dbd9:	6a 00                	push   0x0
c000dbdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	e8 d7 92 01 00       	call   c0026ebf <__ltdf2>
c000dbe8:	83 c4 10             	add    esp,0x10
c000dbeb:	85 c0                	test   eax,eax
c000dbed:	0f 89 da 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dbf3:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000dbf6:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000dbf9:	0f 8d ce 01 00 00    	jge    c000ddcd <zoh_vari_process+0x2c7>
c000dbff:	83 ec 0c             	sub    esp,0xc
c000dc02:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dc05:	e8 49 90 01 00       	call   c0026c53 <__floatsidf>
c000dc0a:	83 c4 10             	add    esp,0x10
c000dc0d:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc10:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dc14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc24:	e8 c7 89 01 00       	call   c00265f0 <__muldf3>
c000dc29:	59                   	pop    ecx
c000dc2a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc2e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc32:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000dc35:	e8 19 90 01 00       	call   c0026c53 <__floatsidf>
c000dc3a:	83 c4 10             	add    esp,0x10
c000dc3d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc41:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc45:	52                   	push   edx
c000dc46:	50                   	push   eax
c000dc47:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc4f:	e8 1f 83 01 00       	call   c0025f73 <__adddf3>
c000dc54:	59                   	pop    ecx
c000dc55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dc59:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dc5d:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000dc60:	e8 ee 8f 01 00       	call   c0026c53 <__floatsidf>
c000dc65:	83 c4 10             	add    esp,0x10
c000dc68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dc6c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc70:	52                   	push   edx
c000dc71:	50                   	push   eax
c000dc72:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc76:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dc7a:	e8 3e 92 01 00       	call   c0026ebd <__gedf2>
c000dc7f:	83 c4 10             	add    esp,0x10
c000dc82:	85 c0                	test   eax,eax
c000dc84:	0f 89 43 01 00 00    	jns    c000ddcd <zoh_vari_process+0x2c7>
c000dc8a:	85 ed                	test   ebp,ebp
c000dc8c:	0f 8e ec 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dc92:	83 ec 10             	sub    esp,0x10
c000dc95:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dc98:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dc9b:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000dc9e:	ff 37                	push   DWORD PTR [edi]
c000dca0:	e8 1f 89 01 00       	call   c00265c4 <__subdf3>
c000dca5:	83 c4 18             	add    esp,0x18
c000dca8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dcb0:	52                   	push   edx
c000dcb1:	50                   	push   eax
c000dcb2:	e8 99 93 01 00       	call   c0027050 <fabs>
c000dcb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dcbb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000dcc7:	68 23 42 92 0c       	push   0xc924223
c000dccc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dcd4:	e8 c8 91 01 00       	call   c0026ea1 <__gtdf2>
c000dcd9:	83 c4 10             	add    esp,0x10
c000dcdc:	85 c0                	test   eax,eax
c000dcde:	0f 8e 9a 00 00 00    	jle    c000dd7e <zoh_vari_process+0x278>
c000dce4:	8b 07                	mov    eax,DWORD PTR [edi]
c000dce6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dce9:	89 04 24             	mov    DWORD PTR [esp],eax
c000dcec:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dcf0:	52                   	push   edx
c000dcf1:	50                   	push   eax
c000dcf2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dcf5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000dcf8:	e8 c7 88 01 00       	call   c00265c4 <__subdf3>
c000dcfd:	59                   	pop    ecx
c000dcfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd02:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd06:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dd09:	e8 45 8f 01 00       	call   c0026c53 <__floatsidf>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd15:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd19:	52                   	push   edx
c000dd1a:	50                   	push   eax
c000dd1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd23:	e8 c8 88 01 00       	call   c00265f0 <__muldf3>
c000dd28:	5d                   	pop    ebp
c000dd29:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dd2d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dd31:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dd34:	e8 1a 8f 01 00       	call   c0026c53 <__floatsidf>
c000dd39:	83 c4 10             	add    esp,0x10
c000dd3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dd40:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dd44:	52                   	push   edx
c000dd45:	50                   	push   eax
c000dd46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd4e:	e8 81 8b 01 00       	call   c00268d4 <__divdf3>
c000dd53:	83 c4 10             	add    esp,0x10
c000dd56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd5a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd5e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd62:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dd66:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dd6e:	e8 00 82 01 00       	call   c0025f73 <__adddf3>
c000dd73:	83 c4 10             	add    esp,0x10
c000dd76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd7a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dd7e:	31 c0                	xor    eax,eax
c000dd80:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dd83:	7e 13                	jle    c000dd98 <zoh_vari_process+0x292>
c000dd85:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dd89:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dd8c:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dd8f:	40                   	inc    eax
c000dd90:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dd93:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dd96:	eb e8                	jmp    c000dd80 <zoh_vari_process+0x27a>
c000dd98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dd9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dda0:	68 00 00 f0 3f       	push   0x3ff00000
c000dda5:	6a 00                	push   0x0
c000dda7:	e8 28 8b 01 00       	call   c00268d4 <__divdf3>
c000ddac:	83 c4 10             	add    esp,0x10
c000ddaf:	89 04 24             	mov    DWORD PTR [esp],eax
c000ddb2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ddb6:	52                   	push   edx
c000ddb7:	50                   	push   eax
c000ddb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddc0:	e8 ae 81 01 00       	call   c0025f73 <__adddf3>
c000ddc5:	83 c4 10             	add    esp,0x10
c000ddc8:	e9 ff fd ff ff       	jmp    c000dbcc <zoh_vari_process+0xc6>
c000ddcd:	55                   	push   ebp
c000ddce:	55                   	push   ebp
c000ddcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddd7:	e8 94 92 01 00       	call   c0027070 <lrint>
c000dddc:	83 ec 0c             	sub    esp,0xc
c000dddf:	50                   	push   eax
c000dde0:	e8 6e 8e 01 00       	call   c0026c53 <__floatsidf>
c000dde5:	83 c4 10             	add    esp,0x10
c000dde8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ddec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ddf0:	52                   	push   edx
c000ddf1:	50                   	push   eax
c000ddf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddf6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ddfa:	e8 c5 87 01 00       	call   c00265c4 <__subdf3>
c000ddff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000de03:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000de07:	83 c4 20             	add    esp,0x20
c000de0a:	6a 00                	push   0x0
c000de0c:	6a 00                	push   0x0
c000de0e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de16:	e8 a4 90 01 00       	call   c0026ebf <__ltdf2>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	79 1e                	jns    c000de40 <zoh_vari_process+0x33a>
c000de22:	68 00 00 f0 3f       	push   0x3ff00000
c000de27:	6a 00                	push   0x0
c000de29:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de2d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de31:	e8 3d 81 01 00       	call   c0025f73 <__adddf3>
c000de36:	83 c4 10             	add    esp,0x10
c000de39:	89 04 24             	mov    DWORD PTR [esp],eax
c000de3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de40:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000de43:	83 ec 10             	sub    esp,0x10
c000de46:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de52:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000de56:	e8 69 87 01 00       	call   c00265c4 <__subdf3>
c000de5b:	83 c4 18             	add    esp,0x18
c000de5e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de62:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de66:	52                   	push   edx
c000de67:	50                   	push   eax
c000de68:	e8 03 92 01 00       	call   c0027070 <lrint>
c000de6d:	83 c4 10             	add    esp,0x10
c000de70:	0f af e8             	imul   ebp,eax
c000de73:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000de76:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000de79:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000de7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de80:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000de83:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de87:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000de8a:	0f 8d 7a 02 00 00    	jge    c000e10a <zoh_vari_process+0x604>
c000de90:	83 ec 0c             	sub    esp,0xc
c000de93:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de96:	e8 b8 8d 01 00       	call   c0026c53 <__floatsidf>
c000de9b:	83 c4 10             	add    esp,0x10
c000de9e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dea2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deaa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000deae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000deb6:	e8 35 87 01 00       	call   c00265f0 <__muldf3>
c000debb:	59                   	pop    ecx
c000debc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dec0:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dec4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dec8:	e8 86 8d 01 00       	call   c0026c53 <__floatsidf>
c000decd:	83 c4 10             	add    esp,0x10
c000ded0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ded4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ded8:	52                   	push   edx
c000ded9:	50                   	push   eax
c000deda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dede:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dee2:	e8 8c 80 01 00       	call   c0025f73 <__adddf3>
c000dee7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000deea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000deee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000def2:	e8 5c 8d 01 00       	call   c0026c53 <__floatsidf>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000defe:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df02:	52                   	push   edx
c000df03:	50                   	push   eax
c000df04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000df0c:	e8 b0 8f 01 00       	call   c0026ec1 <__ledf2>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	85 c0                	test   eax,eax
c000df16:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000df1a:	0f 8f ea 01 00 00    	jg     c000e10a <zoh_vari_process+0x604>
c000df20:	85 c9                	test   ecx,ecx
c000df22:	0f 8e ed 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df28:	83 ec 10             	sub    esp,0x10
c000df2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df2e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df31:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000df34:	ff 37                	push   DWORD PTR [edi]
c000df36:	e8 89 86 01 00       	call   c00265c4 <__subdf3>
c000df3b:	83 c4 18             	add    esp,0x18
c000df3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df42:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df46:	52                   	push   edx
c000df47:	50                   	push   eax
c000df48:	e8 03 91 01 00       	call   c0027050 <fabs>
c000df4d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df51:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000df55:	83 c4 10             	add    esp,0x10
c000df58:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df5d:	68 23 42 92 0c       	push   0xc924223
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 32 8f 01 00       	call   c0026ea1 <__gtdf2>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	85 c0                	test   eax,eax
c000df74:	0f 8e 9b 00 00 00    	jle    c000e015 <zoh_vari_process+0x50f>
c000df7a:	8b 07                	mov    eax,DWORD PTR [edi]
c000df7c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df83:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df87:	52                   	push   edx
c000df88:	50                   	push   eax
c000df89:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df8c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df8f:	e8 30 86 01 00       	call   c00265c4 <__subdf3>
c000df94:	5d                   	pop    ebp
c000df95:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000df99:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000df9d:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000dfa0:	e8 ae 8c 01 00       	call   c0026c53 <__floatsidf>
c000dfa5:	83 c4 10             	add    esp,0x10
c000dfa8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfac:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfb0:	52                   	push   edx
c000dfb1:	50                   	push   eax
c000dfb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfba:	e8 31 86 01 00       	call   c00265f0 <__muldf3>
c000dfbf:	59                   	pop    ecx
c000dfc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dfc4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000dfc8:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000dfcb:	e8 83 8c 01 00       	call   c0026c53 <__floatsidf>
c000dfd0:	83 c4 10             	add    esp,0x10
c000dfd3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dfd7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dfdb:	52                   	push   edx
c000dfdc:	50                   	push   eax
c000dfdd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfe5:	e8 ea 88 01 00       	call   c00268d4 <__divdf3>
c000dfea:	83 c4 10             	add    esp,0x10
c000dfed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dff1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000dff5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e001:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e005:	e8 69 7f 01 00       	call   c0025f73 <__adddf3>
c000e00a:	83 c4 10             	add    esp,0x10
c000e00d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e011:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e015:	31 d2                	xor    edx,edx
c000e017:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e01a:	39 d0                	cmp    eax,edx
c000e01c:	7e 1d                	jle    c000e03b <zoh_vari_process+0x535>
c000e01e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e021:	29 c1                	sub    ecx,eax
c000e023:	89 c8                	mov    eax,ecx
c000e025:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e027:	01 d0                	add    eax,edx
c000e029:	42                   	inc    edx
c000e02a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e02d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e030:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e033:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e036:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e039:	eb dc                	jmp    c000e017 <zoh_vari_process+0x511>
c000e03b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	68 00 00 f0 3f       	push   0x3ff00000
c000e048:	6a 00                	push   0x0
c000e04a:	e8 85 88 01 00       	call   c00268d4 <__divdf3>
c000e04f:	83 c4 10             	add    esp,0x10
c000e052:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e056:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e05a:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e05e:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e06a:	e8 04 7f 01 00       	call   c0025f73 <__adddf3>
c000e06f:	5d                   	pop    ebp
c000e070:	59                   	pop    ecx
c000e071:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e075:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e079:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e07d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e081:	e8 ea 8f 01 00       	call   c0027070 <lrint>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	50                   	push   eax
c000e08a:	e8 c4 8b 01 00       	call   c0026c53 <__floatsidf>
c000e08f:	83 c4 10             	add    esp,0x10
c000e092:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e096:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e09a:	52                   	push   edx
c000e09b:	50                   	push   eax
c000e09c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a4:	e8 1b 85 01 00       	call   c00265c4 <__subdf3>
c000e0a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e0ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e0b1:	83 c4 20             	add    esp,0x20
c000e0b4:	6a 00                	push   0x0
c000e0b6:	6a 00                	push   0x0
c000e0b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0bc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0c0:	e8 fa 8d 01 00       	call   c0026ebf <__ltdf2>
c000e0c5:	83 c4 10             	add    esp,0x10
c000e0c8:	85 c0                	test   eax,eax
c000e0ca:	79 1e                	jns    c000e0ea <zoh_vari_process+0x5e4>
c000e0cc:	68 00 00 f0 3f       	push   0x3ff00000
c000e0d1:	6a 00                	push   0x0
c000e0d3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0d7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e0db:	e8 93 7e 01 00       	call   c0025f73 <__adddf3>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0e6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e0ea:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e0ed:	83 ec 10             	sub    esp,0x10
c000e0f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e0f8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e100:	e8 bf 84 01 00       	call   c00265c4 <__subdf3>
c000e105:	e9 51 fd ff ff       	jmp    c000de5b <zoh_vari_process+0x355>
c000e10a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e10e:	7d 3a                	jge    c000e14a <zoh_vari_process+0x644>
c000e110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e114:	83 ec 0c             	sub    esp,0xc
c000e117:	29 e8                	sub    eax,ebp
c000e119:	99                   	cdq    
c000e11a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e11d:	50                   	push   eax
c000e11e:	e8 30 8b 01 00       	call   c0026c53 <__floatsidf>
c000e123:	83 c4 10             	add    esp,0x10
c000e126:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e12a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e12e:	52                   	push   edx
c000e12f:	50                   	push   eax
c000e130:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e134:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e138:	e8 36 7e 01 00       	call   c0025f73 <__adddf3>
c000e13d:	83 c4 10             	add    esp,0x10
c000e140:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e143:	89 04 24             	mov    DWORD PTR [esp],eax
c000e146:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e14a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e14d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e151:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e154:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e15a:	85 c0                	test   eax,eax
c000e15c:	7f 25                	jg     c000e183 <zoh_vari_process+0x67d>
c000e15e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e162:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e166:	89 07                	mov    DWORD PTR [edi],eax
c000e168:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e16b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e16e:	99                   	cdq    
c000e16f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e172:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e175:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e178:	99                   	cdq    
c000e179:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e17c:	31 d2                	xor    edx,edx
c000e17e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e181:	eb 1e                	jmp    c000e1a1 <zoh_vari_process+0x69b>
c000e183:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e186:	31 d2                	xor    edx,edx
c000e188:	29 c8                	sub    eax,ecx
c000e18a:	c1 e0 02             	shl    eax,0x2
c000e18d:	39 d1                	cmp    ecx,edx
c000e18f:	7e cd                	jle    c000e15e <zoh_vari_process+0x658>
c000e191:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e193:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e197:	83 c0 04             	add    eax,0x4
c000e19a:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e19e:	42                   	inc    edx
c000e19f:	eb ec                	jmp    c000e18d <zoh_vari_process+0x687>
c000e1a1:	83 c4 3c             	add    esp,0x3c
c000e1a4:	89 d0                	mov    eax,edx
c000e1a6:	5b                   	pop    ebx
c000e1a7:	5e                   	pop    esi
c000e1a8:	5f                   	pop    edi
c000e1a9:	5d                   	pop    ebp
c000e1aa:	c3                   	ret    

c000e1ab <zoh_reset>:
c000e1ab:	83 ec 0c             	sub    esp,0xc
c000e1ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e1b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e1b5:	85 c0                	test   eax,eax
c000e1b7:	74 20                	je     c000e1d9 <zoh_reset+0x2e>
c000e1b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e1bc:	83 c0 1c             	add    eax,0x1c
c000e1bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e1c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e1c9:	c1 e2 02             	shl    edx,0x2
c000e1cc:	51                   	push   ecx
c000e1cd:	52                   	push   edx
c000e1ce:	6a 00                	push   0x0
c000e1d0:	50                   	push   eax
c000e1d1:	e8 b5 24 ff ff       	call   c000068b <memset>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	83 c4 0c             	add    esp,0xc
c000e1dc:	c3                   	ret    

c000e1dd <zoh_get_name>:
c000e1dd:	31 c0                	xor    eax,eax
c000e1df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1e4:	75 05                	jne    c000e1eb <zoh_get_name+0xe>
c000e1e6:	b8 1e 89 02 c0       	mov    eax,0xc002891e
c000e1eb:	c3                   	ret    

c000e1ec <zoh_get_description>:
c000e1ec:	31 c0                	xor    eax,eax
c000e1ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e1f3:	75 05                	jne    c000e1fa <zoh_get_description+0xe>
c000e1f5:	b8 2f 89 02 c0       	mov    eax,0xc002892f
c000e1fa:	c3                   	ret    

c000e1fb <zoh_set_converter>:
c000e1fb:	53                   	push   ebx
c000e1fc:	b8 0a 00 00 00       	mov    eax,0xa
c000e201:	83 ec 08             	sub    esp,0x8
c000e204:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e208:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e20d:	75 6e                	jne    c000e27d <zoh_set_converter+0x82>
c000e20f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e212:	85 c0                	test   eax,eax
c000e214:	74 13                	je     c000e229 <zoh_set_converter+0x2e>
c000e216:	83 ec 0c             	sub    esp,0xc
c000e219:	50                   	push   eax
c000e21a:	e8 c5 12 00 00       	call   c000f4e4 <free>
c000e21f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	50                   	push   eax
c000e22a:	50                   	push   eax
c000e22b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e22e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e235:	50                   	push   eax
c000e236:	6a 01                	push   0x1
c000e238:	e8 c7 12 00 00       	call   c000f504 <calloc>
c000e23d:	83 c4 10             	add    esp,0x10
c000e240:	89 c2                	mov    edx,eax
c000e242:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e245:	85 d2                	test   edx,edx
c000e247:	b8 01 00 00 00       	mov    eax,0x1
c000e24c:	74 2f                	je     c000e27d <zoh_set_converter+0x82>
c000e24e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e251:	83 ec 0c             	sub    esp,0xc
c000e254:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e257:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e25d:	c7 43 24 06 db 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000db06
c000e264:	c7 43 20 06 db 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000db06
c000e26b:	c7 43 28 ab e1 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e1ab
c000e272:	53                   	push   ebx
c000e273:	e8 33 ff ff ff       	call   c000e1ab <zoh_reset>
c000e278:	83 c4 10             	add    esp,0x10
c000e27b:	31 c0                	xor    eax,eax
c000e27d:	83 c4 08             	add    esp,0x8
c000e280:	5b                   	pop    ebx
c000e281:	c3                   	ret    

c000e282 <CPU::current()>:
c000e282:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c000e287:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e28d:	90                   	nop
c000e28e:	c3                   	ret    

c000e28f <operator new(unsigned long)>:
c000e28f:	83 ec 0c             	sub    esp,0xc
c000e292:	83 ec 0c             	sub    esp,0xc
c000e295:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e299:	e8 36 12 00 00       	call   c000f4d4 <malloc>
c000e29e:	83 c4 10             	add    esp,0x10
c000e2a1:	83 c4 0c             	add    esp,0xc
c000e2a4:	c3                   	ret    
c000e2a5:	90                   	nop

c000e2a6 <Computer::close(int, int, void*)>:
c000e2a6:	57                   	push   edi
c000e2a7:	56                   	push   esi
c000e2a8:	53                   	push   ebx
c000e2a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e2ad:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e2b1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e2b5:	83 ec 0c             	sub    esp,0xc
c000e2b8:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e2be:	e8 63 5a 00 00       	call   c0013d26 <Device::closeAll()>
c000e2c3:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e2c9:	83 c4 10             	add    esp,0x10
c000e2cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000e2ce:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e2d2:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e2da:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e2de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e2:	5b                   	pop    ebx
c000e2e3:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e2e6:	5e                   	pop    esi
c000e2e7:	5f                   	pop    edi
c000e2e8:	ff e0                	jmp    eax

c000e2ea <Computer::Computer()>:
c000e2ea:	83 ec 0c             	sub    esp,0xc
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	83 ec 08             	sub    esp,0x8
c000e2f4:	68 66 89 02 c0       	push   0xc0028966
c000e2f9:	50                   	push   eax
c000e2fa:	e8 a1 5a 00 00       	call   c0013da0 <Device::Device(char const*)>
c000e2ff:	83 c4 10             	add    esp,0x10
c000e302:	ba 30 8b 02 c0       	mov    edx,0xc0028b30
c000e307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e30b:	89 10                	mov    DWORD PTR [eax],edx
c000e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e311:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e31f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e333:	83 ca 04             	or     edx,0x4
c000e336:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e340:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e346:	0f b6 d0             	movzx  edx,al
c000e349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e34d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e358:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e35e:	0f b6 d0             	movzx  edx,al
c000e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e365:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e36a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e374:	8d 50 01             	lea    edx,[eax+0x1]
c000e377:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e37b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e381:	0f b6 d0             	movzx  edx,al
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e38c:	83 e1 3f             	and    ecx,0x3f
c000e38f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e397:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e39d:	0f b6 d0             	movzx  edx,al
c000e3a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3b5:	0f b6 d0             	movzx  edx,al
c000e3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bc:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e3c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3c5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3cb:	8d 50 01             	lea    edx,[eax+0x1]
c000e3ce:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e3d2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e3d8:	0f b6 d0             	movzx  edx,al
c000e3db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3df:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e3e3:	83 e1 3f             	and    ecx,0x3f
c000e3e6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e3f4:	0f b6 d0             	movzx  edx,al
c000e3f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3fb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e406:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e40c:	0f b6 d0             	movzx  edx,al
c000e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e413:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e41c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e422:	8d 50 01             	lea    edx,[eax+0x1]
c000e425:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e429:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e42f:	0f b6 d0             	movzx  edx,al
c000e432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e436:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e43a:	83 e1 3f             	and    ecx,0x3f
c000e43d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e441:	90                   	nop
c000e442:	83 c4 0c             	add    esp,0xc
c000e445:	c3                   	ret    

c000e446 <Computer::setBootMessage(char const*)>:
c000e446:	c3                   	ret    
c000e447:	90                   	nop

c000e448 <Computer::start()>:
c000e448:	56                   	push   esi
c000e449:	53                   	push   ebx
c000e44a:	83 ec 10             	sub    esp,0x10
c000e44d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e451:	fb                   	sti    
c000e452:	68 3f 07 00 00       	push   0x73f
c000e457:	e8 78 10 00 00       	call   c000f4d4 <malloc>
c000e45c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e463:	89 c6                	mov    esi,eax
c000e465:	ff 35 d4 de 02 c0    	push   DWORD PTR ds:0xc002ded4
c000e46b:	68 6f 89 02 c0       	push   0xc002896f
c000e470:	6a 01                	push   0x1
c000e472:	50                   	push   eax
c000e473:	e8 26 e7 00 00       	call   c001cb9e <Process::Process(bool, char const*, Process*, char**)>
c000e478:	83 c4 20             	add    esp,0x20
c000e47b:	68 ff 00 00 00       	push   0xff
c000e480:	6a 00                	push   0x0
c000e482:	68 69 ee 00 c0       	push   0xc000ee69
c000e487:	56                   	push   esi
c000e488:	e8 0f ea 00 00       	call   c001ce9c <Process::createThread(void (*)(void*), void*, int)>
c000e48d:	6a 7a                	push   0x7a
c000e48f:	6a 00                	push   0x0
c000e491:	68 fa d6 01 c0       	push   0xc001d6fa
c000e496:	ff 35 d4 de 02 c0    	push   DWORD PTR ds:0xc002ded4
c000e49c:	e8 fb e9 00 00       	call   c001ce9c <Process::createThread(void (*)(void*), void*, int)>
c000e4a1:	83 c4 20             	add    esp,0x20
c000e4a4:	a3 88 de 02 c0       	mov    ds:0xc002de88,eax
c000e4a9:	e8 cd f5 00 00       	call   c001da7b <Vm::initialise8086()>
c000e4ae:	c6 05 8d c9 02 c0 01 	mov    BYTE PTR ds:0xc002c98d,0x1
c000e4b5:	e8 62 46 00 00       	call   c0012b1c <initVFS()>
c000e4ba:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4c2:	6a 00                	push   0x0
c000e4c4:	6a 00                	push   0x0
c000e4c6:	6a 00                	push   0x0
c000e4c8:	50                   	push   eax
c000e4c9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e4cc:	e8 d1 b2 00 00       	call   c00197a2 <Krnl::loadSystemEnv()>
c000e4d1:	e8 70 d0 00 00       	call   c001b546 <setupSystemCalls()>
c000e4d6:	e8 53 51 00 00       	call   c001362e <loadClockSettings()>
c000e4db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4de:	e8 17 58 00 00       	call   c0013cfa <Device::loadDriversForAll()>
c000e4e3:	58                   	pop    eax
c000e4e4:	8b 1d 88 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c988
c000e4ea:	5a                   	pop    edx
c000e4eb:	6a 01                	push   0x1
c000e4ed:	68 7c 89 02 c0       	push   0xc002897c
c000e4f2:	e8 ff e1 00 00       	call   c001c6f6 <Thr::loadDLL(char const*, bool)>
c000e4f7:	59                   	pop    ecx
c000e4f8:	5e                   	pop    esi
c000e4f9:	53                   	push   ebx
c000e4fa:	50                   	push   eax
c000e4fb:	e8 05 e4 00 00       	call   c001c905 <Thr::executeDLL(unsigned long, void*)>
c000e500:	c7 04 24 f8 9b 02 c0 	mov    DWORD PTR [esp],0xc0029bf8
c000e507:	e8 b5 42 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	83 ec 0c             	sub    esp,0xc
c000e512:	6a 02                	push   0x2
c000e514:	e8 e7 ec 00 00       	call   c001d200 <blockTask(TaskState)>
c000e519:	83 c4 10             	add    esp,0x10
c000e51c:	eb f1                	jmp    c000e50f <Computer::start()+0xc7>

c000e51e <firstTask()>:
c000e51e:	83 ec 18             	sub    esp,0x18
c000e521:	ff 35 88 c9 02 c0    	push   DWORD PTR ds:0xc002c988
c000e527:	e8 1c ff ff ff       	call   c000e448 <Computer::start()>

c000e52c <Computer::detectFeatures()>:
c000e52c:	55                   	push   ebp
c000e52d:	57                   	push   edi
c000e52e:	56                   	push   esi
c000e52f:	53                   	push   ebx
c000e530:	83 ec 1c             	sub    esp,0x1c
c000e533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e537:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e541:	e8 53 1d ff ff       	call   c0000299 <detectCPUID>
c000e546:	85 c0                	test   eax,eax
c000e548:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e54e:	0f 95 c2             	setne  dl
c000e551:	83 e0 fd             	and    eax,0xfffffffd
c000e554:	d1 e2                	shl    edx,1
c000e556:	09 d0                	or     eax,edx
c000e558:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e55e:	a8 02                	test   al,0x2
c000e560:	75 46                	jne    c000e5a8 <Computer::detectFeatures()+0x7c>
c000e562:	f6 05 a1 c9 02 c0 04 	test   BYTE PTR ds:0xc002c9a1,0x4
c000e569:	74 07                	je     c000e572 <Computer::detectFeatures()+0x46>
c000e56b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e572:	e8 3f 6b 01 00       	call   c00250b6 <x87Detect>
c000e577:	83 e0 01             	and    eax,0x1
c000e57a:	c1 e0 04             	shl    eax,0x4
c000e57d:	88 c2                	mov    dl,al
c000e57f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e585:	83 e0 ef             	and    eax,0xffffffef
c000e588:	09 d0                	or     eax,edx
c000e58a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e590:	a8 10                	test   al,0x10
c000e592:	0f 85 2a 01 00 00    	jne    c000e6c2 <Computer::detectFeatures()+0x196>
c000e598:	84 c0                	test   al,al
c000e59a:	0f 88 45 01 00 00    	js     c000e6e5 <Computer::detectFeatures()+0x1b9>
c000e5a0:	83 c4 1c             	add    esp,0x1c
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	5d                   	pop    ebp
c000e5a7:	c3                   	ret    
c000e5a8:	83 ec 0c             	sub    esp,0xc
c000e5ab:	6a 20                	push   0x20
c000e5ad:	e8 b2 9b 00 00       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c000e5b2:	83 e0 01             	and    eax,0x1
c000e5b5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e5bc:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e5c2:	83 e0 f7             	and    eax,0xfffffff7
c000e5c5:	09 d0                	or     eax,edx
c000e5c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e5cd:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e5d4:	e8 8b 9b 00 00       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c000e5d9:	83 e0 01             	and    eax,0x1
c000e5dc:	88 c2                	mov    dl,al
c000e5de:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e5e4:	83 e0 fe             	and    eax,0xfffffffe
c000e5e7:	09 d0                	or     eax,edx
c000e5e9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e5ef:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e5f6:	e8 69 9b 00 00       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c000e5fb:	c1 e0 07             	shl    eax,0x7
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e606:	83 e0 7f             	and    eax,0x7f
c000e609:	09 d0                	or     eax,edx
c000e60b:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e611:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e618:	e8 47 9b 00 00       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c000e61d:	83 c4 10             	add    esp,0x10
c000e620:	83 e0 01             	and    eax,0x1
c000e623:	c1 e0 05             	shl    eax,0x5
c000e626:	88 c2                	mov    dl,al
c000e628:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e62e:	83 e0 df             	and    eax,0xffffffdf
c000e631:	09 d0                	or     eax,edx
c000e633:	f7 05 a0 c9 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002c9a0,0x401
c000e63d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e643:	0f 84 c2 00 00 00    	je     c000e70b <Computer::detectFeatures()+0x1df>
c000e649:	83 e0 fe             	and    eax,0xfffffffe
c000e64c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e652:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e658:	88 c2                	mov    dl,al
c000e65a:	83 e2 09             	and    edx,0x9
c000e65d:	fe ca                	dec    dl
c000e65f:	75 09                	jne    c000e66a <Computer::detectFeatures()+0x13e>
c000e661:	83 e0 fe             	and    eax,0xfffffffe
c000e664:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e66a:	83 ec 0c             	sub    esp,0xc
c000e66d:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e671:	50                   	push   eax
c000e672:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e676:	55                   	push   ebp
c000e677:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e67b:	57                   	push   edi
c000e67c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e680:	56                   	push   esi
c000e681:	68 00 00 00 80       	push   0x80000000
c000e686:	e8 55 9a 00 00       	call   c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e68b:	83 c4 20             	add    esp,0x20
c000e68e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000e695:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000e699:	0f 86 c3 fe ff ff    	jbe    c000e562 <Computer::detectFeatures()+0x36>
c000e69f:	83 ec 0c             	sub    esp,0xc
c000e6a2:	50                   	push   eax
c000e6a3:	55                   	push   ebp
c000e6a4:	57                   	push   edi
c000e6a5:	56                   	push   esi
c000e6a6:	68 01 00 00 80       	push   0x80000001
c000e6ab:	e8 30 9a 00 00       	call   c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e6b0:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000e6ba:	83 c4 20             	add    esp,0x20
c000e6bd:	e9 a0 fe ff ff       	jmp    c000e562 <Computer::detectFeatures()+0x36>
c000e6c2:	e8 a9 69 01 00       	call   c0025070 <absolutelyNoChanceInHell>
c000e6c7:	88 c2                	mov    dl,al
c000e6c9:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e6cf:	c1 e2 07             	shl    edx,0x7
c000e6d2:	83 e0 7f             	and    eax,0x7f
c000e6d5:	09 d0                	or     eax,edx
c000e6d7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e6dd:	84 c0                	test   al,al
c000e6df:	0f 89 bb fe ff ff    	jns    c000e5a0 <Computer::detectFeatures()+0x74>
c000e6e5:	e8 66 69 01 00       	call   c0025050 <avxDetect>
c000e6ea:	83 e0 01             	and    eax,0x1
c000e6ed:	c1 e0 05             	shl    eax,0x5
c000e6f0:	88 c2                	mov    dl,al
c000e6f2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e6f8:	83 e0 df             	and    eax,0xffffffdf
c000e6fb:	09 d0                	or     eax,edx
c000e6fd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e703:	83 c4 1c             	add    esp,0x1c
c000e706:	5b                   	pop    ebx
c000e707:	5e                   	pop    esi
c000e708:	5f                   	pop    edi
c000e709:	5d                   	pop    ebp
c000e70a:	c3                   	ret    
c000e70b:	83 ec 0c             	sub    esp,0xc
c000e70e:	68 00 02 00 00       	push   0x200
c000e713:	e8 4c 9a 00 00       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c000e718:	83 c4 10             	add    esp,0x10
c000e71b:	83 e0 01             	and    eax,0x1
c000e71e:	88 c2                	mov    dl,al
c000e720:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e726:	83 e0 fe             	and    eax,0xfffffffe
c000e729:	09 d0                	or     eax,edx
c000e72b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e731:	e9 1c ff ff ff       	jmp    c000e652 <Computer::detectFeatures()+0x126>

c000e736 <Computer::displayFeatures()>:
c000e736:	53                   	push   ebx
c000e737:	83 ec 14             	sub    esp,0x14
c000e73a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e73e:	68 9f 89 02 c0       	push   0xc002899f
c000e743:	e8 79 40 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e748:	83 c4 10             	add    esp,0x10
c000e74b:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000e752:	0f 85 73 02 00 00    	jne    c000e9cb <Computer::displayFeatures()+0x295>
c000e758:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e75d:	83 ec 08             	sub    esp,0x8
c000e760:	50                   	push   eax
c000e761:	68 b2 89 02 c0       	push   0xc00289b2
c000e766:	e8 56 40 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e76b:	83 c4 10             	add    esp,0x10
c000e76e:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000e775:	0f 85 8c 02 00 00    	jne    c000ea07 <Computer::displayFeatures()+0x2d1>
c000e77b:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e780:	83 ec 08             	sub    esp,0x8
c000e783:	50                   	push   eax
c000e784:	68 c3 89 02 c0       	push   0xc00289c3
c000e789:	e8 33 40 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e78e:	83 c4 10             	add    esp,0x10
c000e791:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000e798:	0f 85 5f 02 00 00    	jne    c000e9fd <Computer::displayFeatures()+0x2c7>
c000e79e:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e7a3:	83 ec 08             	sub    esp,0x8
c000e7a6:	50                   	push   eax
c000e7a7:	68 d4 89 02 c0       	push   0xc00289d4
c000e7ac:	e8 10 40 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e7b1:	83 c4 10             	add    esp,0x10
c000e7b4:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000e7bb:	0f 85 32 02 00 00    	jne    c000e9f3 <Computer::displayFeatures()+0x2bd>
c000e7c1:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e7c6:	83 ec 08             	sub    esp,0x8
c000e7c9:	50                   	push   eax
c000e7ca:	68 e5 89 02 c0       	push   0xc00289e5
c000e7cf:	e8 ed 3f 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e7d4:	83 c4 10             	add    esp,0x10
c000e7d7:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000e7de:	0f 85 05 02 00 00    	jne    c000e9e9 <Computer::displayFeatures()+0x2b3>
c000e7e4:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e7e9:	83 ec 08             	sub    esp,0x8
c000e7ec:	50                   	push   eax
c000e7ed:	68 f6 89 02 c0       	push   0xc00289f6
c000e7f2:	e8 ca 3f 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e7f7:	83 c4 10             	add    esp,0x10
c000e7fa:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000e801:	0f 85 d8 01 00 00    	jne    c000e9df <Computer::displayFeatures()+0x2a9>
c000e807:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e80c:	83 ec 08             	sub    esp,0x8
c000e80f:	50                   	push   eax
c000e810:	68 07 8a 02 c0       	push   0xc0028a07
c000e815:	e8 a7 3f 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e81a:	83 c4 10             	add    esp,0x10
c000e81d:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000e824:	0f 85 ab 01 00 00    	jne    c000e9d5 <Computer::displayFeatures()+0x29f>
c000e82a:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e82f:	83 ec 08             	sub    esp,0x8
c000e832:	50                   	push   eax
c000e833:	68 18 8a 02 c0       	push   0xc0028a18
c000e838:	e8 84 3f 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e83d:	83 c4 10             	add    esp,0x10
c000e840:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000e847:	0f 88 1b 02 00 00    	js     c000ea68 <Computer::displayFeatures()+0x332>
c000e84d:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e852:	83 ec 08             	sub    esp,0x8
c000e855:	50                   	push   eax
c000e856:	68 29 8a 02 c0       	push   0xc0028a29
c000e85b:	e8 61 3f 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e860:	83 c4 10             	add    esp,0x10
c000e863:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000e86a:	0f 85 a1 01 00 00    	jne    c000ea11 <Computer::displayFeatures()+0x2db>
c000e870:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e875:	83 ec 08             	sub    esp,0x8
c000e878:	50                   	push   eax
c000e879:	68 3a 8a 02 c0       	push   0xc0028a3a
c000e87e:	e8 3e 3f 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e883:	83 c4 10             	add    esp,0x10
c000e886:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000e88d:	0f 85 cb 01 00 00    	jne    c000ea5e <Computer::displayFeatures()+0x328>
c000e893:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e898:	83 ec 08             	sub    esp,0x8
c000e89b:	50                   	push   eax
c000e89c:	68 4b 8a 02 c0       	push   0xc0028a4b
c000e8a1:	e8 1b 3f 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e8a6:	83 c4 10             	add    esp,0x10
c000e8a9:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000e8b0:	0f 85 9e 01 00 00    	jne    c000ea54 <Computer::displayFeatures()+0x31e>
c000e8b6:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e8bb:	83 ec 08             	sub    esp,0x8
c000e8be:	50                   	push   eax
c000e8bf:	68 5c 8a 02 c0       	push   0xc0028a5c
c000e8c4:	e8 f8 3e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e8c9:	83 c4 10             	add    esp,0x10
c000e8cc:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000e8d3:	0f 85 71 01 00 00    	jne    c000ea4a <Computer::displayFeatures()+0x314>
c000e8d9:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e8de:	83 ec 08             	sub    esp,0x8
c000e8e1:	50                   	push   eax
c000e8e2:	68 6d 8a 02 c0       	push   0xc0028a6d
c000e8e7:	e8 d5 3e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e8ec:	83 c4 10             	add    esp,0x10
c000e8ef:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000e8f6:	0f 85 44 01 00 00    	jne    c000ea40 <Computer::displayFeatures()+0x30a>
c000e8fc:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e901:	83 ec 08             	sub    esp,0x8
c000e904:	50                   	push   eax
c000e905:	68 7e 8a 02 c0       	push   0xc0028a7e
c000e90a:	e8 b2 3e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e90f:	83 c4 10             	add    esp,0x10
c000e912:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000e919:	0f 85 17 01 00 00    	jne    c000ea36 <Computer::displayFeatures()+0x300>
c000e91f:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e924:	83 ec 08             	sub    esp,0x8
c000e927:	50                   	push   eax
c000e928:	68 8f 8a 02 c0       	push   0xc0028a8f
c000e92d:	e8 8f 3e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e932:	83 c4 10             	add    esp,0x10
c000e935:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000e93c:	0f 85 ea 00 00 00    	jne    c000ea2c <Computer::displayFeatures()+0x2f6>
c000e942:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e947:	83 ec 08             	sub    esp,0x8
c000e94a:	50                   	push   eax
c000e94b:	68 a0 8a 02 c0       	push   0xc0028aa0
c000e950:	e8 6c 3e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e955:	83 c4 10             	add    esp,0x10
c000e958:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000e95f:	0f 88 0d 01 00 00    	js     c000ea72 <Computer::displayFeatures()+0x33c>
c000e965:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e96a:	83 ec 08             	sub    esp,0x8
c000e96d:	50                   	push   eax
c000e96e:	68 b1 8a 02 c0       	push   0xc0028ab1
c000e973:	e8 49 3e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e978:	83 c4 10             	add    esp,0x10
c000e97b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000e982:	0f 85 9a 00 00 00    	jne    c000ea22 <Computer::displayFeatures()+0x2ec>
c000e988:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e98d:	83 ec 08             	sub    esp,0x8
c000e990:	50                   	push   eax
c000e991:	68 c2 8a 02 c0       	push   0xc0028ac2
c000e996:	e8 26 3e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e99b:	83 c4 10             	add    esp,0x10
c000e99e:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000e9a5:	75 74                	jne    c000ea1b <Computer::displayFeatures()+0x2e5>
c000e9a7:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c000e9ac:	83 ec 08             	sub    esp,0x8
c000e9af:	50                   	push   eax
c000e9b0:	68 d3 8a 02 c0       	push   0xc0028ad3
c000e9b5:	e8 07 3e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000e9ba:	c7 44 24 20 9b a2 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a29b
c000e9c2:	83 c4 18             	add    esp,0x18
c000e9c5:	5b                   	pop    ebx
c000e9c6:	e9 f6 3d 00 00       	jmp    c00127c1 <Dbg::kprintf(char const*, ...)>
c000e9cb:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000e9d0:	e9 88 fd ff ff       	jmp    c000e75d <Computer::displayFeatures()+0x27>
c000e9d5:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000e9da:	e9 50 fe ff ff       	jmp    c000e82f <Computer::displayFeatures()+0xf9>
c000e9df:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000e9e4:	e9 23 fe ff ff       	jmp    c000e80c <Computer::displayFeatures()+0xd6>
c000e9e9:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000e9ee:	e9 f6 fd ff ff       	jmp    c000e7e9 <Computer::displayFeatures()+0xb3>
c000e9f3:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000e9f8:	e9 c9 fd ff ff       	jmp    c000e7c6 <Computer::displayFeatures()+0x90>
c000e9fd:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea02:	e9 9c fd ff ff       	jmp    c000e7a3 <Computer::displayFeatures()+0x6d>
c000ea07:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea0c:	e9 6f fd ff ff       	jmp    c000e780 <Computer::displayFeatures()+0x4a>
c000ea11:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea16:	e9 5a fe ff ff       	jmp    c000e875 <Computer::displayFeatures()+0x13f>
c000ea1b:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea20:	eb 8a                	jmp    c000e9ac <Computer::displayFeatures()+0x276>
c000ea22:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea27:	e9 61 ff ff ff       	jmp    c000e98d <Computer::displayFeatures()+0x257>
c000ea2c:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea31:	e9 11 ff ff ff       	jmp    c000e947 <Computer::displayFeatures()+0x211>
c000ea36:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea3b:	e9 e4 fe ff ff       	jmp    c000e924 <Computer::displayFeatures()+0x1ee>
c000ea40:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea45:	e9 b7 fe ff ff       	jmp    c000e901 <Computer::displayFeatures()+0x1cb>
c000ea4a:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea4f:	e9 8a fe ff ff       	jmp    c000e8de <Computer::displayFeatures()+0x1a8>
c000ea54:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea59:	e9 5d fe ff ff       	jmp    c000e8bb <Computer::displayFeatures()+0x185>
c000ea5e:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea63:	e9 30 fe ff ff       	jmp    c000e898 <Computer::displayFeatures()+0x162>
c000ea68:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea6d:	e9 e0 fd ff ff       	jmp    c000e852 <Computer::displayFeatures()+0x11c>
c000ea72:	b8 98 89 02 c0       	mov    eax,0xc0028998
c000ea77:	e9 ee fe ff ff       	jmp    c000e96a <Computer::displayFeatures()+0x234>

c000ea7c <Computer::rdmsr(unsigned int)>:
c000ea7c:	83 ec 0c             	sub    esp,0xc
c000ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea83:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ea8a:	74 0a                	je     c000ea96 <Computer::rdmsr(unsigned int)+0x1a>
c000ea8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea90:	0f 32                	rdmsr  
c000ea92:	83 c4 0c             	add    esp,0xc
c000ea95:	c3                   	ret    
c000ea96:	83 ec 0c             	sub    esp,0xc
c000ea99:	68 e4 8a 02 c0       	push   0xc0028ae4
c000ea9e:	e8 38 ae 00 00       	call   c00198db <Krnl::panic(char const*)>
c000eaa3:	83 c4 10             	add    esp,0x10
c000eaa6:	eb e4                	jmp    c000ea8c <Computer::rdmsr(unsigned int)+0x10>

c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000eaa8:	57                   	push   edi
c000eaa9:	56                   	push   esi
c000eaaa:	52                   	push   edx
c000eaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eaaf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000eab3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000eab7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000eabe:	74 0e                	je     c000eace <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000eac0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000eac4:	89 f0                	mov    eax,esi
c000eac6:	89 fa                	mov    edx,edi
c000eac8:	0f 30                	wrmsr  
c000eaca:	58                   	pop    eax
c000eacb:	5e                   	pop    esi
c000eacc:	5f                   	pop    edi
c000eacd:	c3                   	ret    
c000eace:	83 ec 0c             	sub    esp,0xc
c000ead1:	68 ea 8a 02 c0       	push   0xc0028aea
c000ead6:	e8 00 ae 00 00       	call   c00198db <Krnl::panic(char const*)>
c000eadb:	83 c4 10             	add    esp,0x10
c000eade:	eb e0                	jmp    c000eac0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eae0 <Computer::nmiEnabled()>:
c000eae0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eae4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eaea:	c3                   	ret    
c000eaeb:	90                   	nop

c000eaec <Computer::readCMOS(unsigned char)>:
c000eaec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eaf0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eaf7:	19 c0                	sbb    eax,eax
c000eaf9:	83 e0 80             	and    eax,0xffffff80
c000eafc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eb00:	e6 70                	out    0x70,al
c000eb02:	e4 71                	in     al,0x71
c000eb04:	c3                   	ret    
c000eb05:	90                   	nop

c000eb06 <Computer::enableNMI(bool)>:
c000eb06:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eb0e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eb14:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eb1c:	eb ce                	jmp    c000eaec <Computer::readCMOS(unsigned char)>

c000eb1e <Computer::open(int, int, void*)>:
c000eb1e:	56                   	push   esi
c000eb1f:	53                   	push   ebx
c000eb20:	83 ec 10             	sub    esp,0x10
c000eb23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb27:	f6 05 a0 c9 02 c0 04 	test   BYTE PTR ds:0xc002c9a0,0x4
c000eb2e:	68 68 22 00 00       	push   0x2268
c000eb33:	0f 94 05 c4 b8 02 c0 	sete   BYTE PTR ds:0xc002b8c4
c000eb3a:	e8 95 09 00 00       	call   c000f4d4 <malloc>
c000eb3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb42:	89 c6                	mov    esi,eax
c000eb44:	e8 27 8c 00 00       	call   c0017770 <ACPI::ACPI()>
c000eb49:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eb4f:	58                   	pop    eax
c000eb50:	5a                   	pop    edx
c000eb51:	56                   	push   esi
c000eb52:	53                   	push   ebx
c000eb53:	e8 58 50 00 00       	call   c0013bb0 <Device::addChild(Device*)>
c000eb58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb5b:	e8 cc f9 ff ff       	call   c000e52c <Computer::detectFeatures()>
c000eb60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eb63:	e8 ce fb ff ff       	call   c000e736 <Computer::displayFeatures()>
c000eb68:	59                   	pop    ecx
c000eb69:	5e                   	pop    esi
c000eb6a:	6a 01                	push   0x1
c000eb6c:	53                   	push   ebx
c000eb6d:	e8 94 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000eb72:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eb79:	e8 56 09 00 00       	call   c000f4d4 <malloc>
c000eb7e:	89 04 24             	mov    DWORD PTR [esp],eax
c000eb81:	89 c6                	mov    esi,eax
c000eb83:	e8 94 96 00 00       	call   c001821c <CPU::CPU()>
c000eb88:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eb8e:	58                   	pop    eax
c000eb8f:	5a                   	pop    edx
c000eb90:	56                   	push   esi
c000eb91:	53                   	push   ebx
c000eb92:	e8 19 50 00 00       	call   c0013bb0 <Device::addChild(Device*)>
c000eb97:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000eb9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000eb9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000eba3:	6a 00                	push   0x0
c000eba5:	6a 00                	push   0x0
c000eba7:	50                   	push   eax
c000eba8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebab:	83 c4 20             	add    esp,0x20
c000ebae:	e8 6f 55 00 00       	call   c0014122 <setupFPU()>
c000ebb3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ebb9:	85 c0                	test   eax,eax
c000ebbb:	74 1f                	je     c000ebdc <Computer::open(int, int, void*)+0xbe>
c000ebbd:	83 ec 08             	sub    esp,0x8
c000ebc0:	50                   	push   eax
c000ebc1:	53                   	push   ebx
c000ebc2:	e8 e9 4f 00 00       	call   c0013bb0 <Device::addChild(Device*)>
c000ebc7:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ebcd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ebcf:	6a 00                	push   0x0
c000ebd1:	6a 00                	push   0x0
c000ebd3:	6a 00                	push   0x0
c000ebd5:	50                   	push   eax
c000ebd6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ebd9:	83 c4 20             	add    esp,0x20
c000ebdc:	83 ec 0c             	sub    esp,0xc
c000ebdf:	68 1e e5 00 c0       	push   0xc000e51e
c000ebe4:	e8 b3 e3 00 00       	call   c001cf9c <setupMultitasking(void (*)())>
c000ebe9:	83 c4 14             	add    esp,0x14
c000ebec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebf1:	5b                   	pop    ebx
c000ebf2:	5e                   	pop    esi
c000ebf3:	c3                   	ret    

c000ebf4 <Computer::disableNMI()>:
c000ebf4:	6a 00                	push   0x0
c000ebf6:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ebfa:	e8 07 ff ff ff       	call   c000eb06 <Computer::enableNMI(bool)>
c000ebff:	58                   	pop    eax
c000ec00:	5a                   	pop    edx
c000ec01:	c3                   	ret    

c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ec02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec06:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ec0d:	19 c0                	sbb    eax,eax
c000ec0f:	83 e0 80             	and    eax,0xffffff80
c000ec12:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ec16:	e6 70                	out    0x70,al
c000ec18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec1c:	e6 71                	out    0x71,al
c000ec1e:	c3                   	ret    
c000ec1f:	90                   	nop

c000ec20 <Computer::handleNMI()>:
c000ec20:	56                   	push   esi
c000ec21:	53                   	push   ebx
c000ec22:	83 ec 10             	sub    esp,0x10
c000ec25:	e4 92                	in     al,0x92
c000ec27:	89 c6                	mov    esi,eax
c000ec29:	e4 61                	in     al,0x61
c000ec2b:	68 f0 8a 02 c0       	push   0xc0028af0
c000ec30:	88 c3                	mov    bl,al
c000ec32:	e8 8a 3b 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000ec37:	83 c4 10             	add    esp,0x10
c000ec3a:	83 e6 10             	and    esi,0x10
c000ec3d:	75 0d                	jne    c000ec4c <Computer::handleNMI()+0x2c>
c000ec3f:	f6 c3 40             	test   bl,0x40
c000ec42:	75 1d                	jne    c000ec61 <Computer::handleNMI()+0x41>
c000ec44:	84 db                	test   bl,bl
c000ec46:	78 2d                	js     c000ec75 <Computer::handleNMI()+0x55>
c000ec48:	58                   	pop    eax
c000ec49:	5b                   	pop    ebx
c000ec4a:	5e                   	pop    esi
c000ec4b:	c3                   	ret    
c000ec4c:	83 ec 0c             	sub    esp,0xc
c000ec4f:	68 01 8b 02 c0       	push   0xc0028b01
c000ec54:	e8 82 ac 00 00       	call   c00198db <Krnl::panic(char const*)>
c000ec59:	83 c4 10             	add    esp,0x10
c000ec5c:	f6 c3 40             	test   bl,0x40
c000ec5f:	74 e3                	je     c000ec44 <Computer::handleNMI()+0x24>
c000ec61:	83 ec 0c             	sub    esp,0xc
c000ec64:	68 0e 8b 02 c0       	push   0xc0028b0e
c000ec69:	e8 6d ac 00 00       	call   c00198db <Krnl::panic(char const*)>
c000ec6e:	83 c4 10             	add    esp,0x10
c000ec71:	84 db                	test   bl,bl
c000ec73:	79 d3                	jns    c000ec48 <Computer::handleNMI()+0x28>
c000ec75:	c7 44 24 10 18 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028b18
c000ec7d:	5a                   	pop    edx
c000ec7e:	5b                   	pop    ebx
c000ec7f:	5e                   	pop    esi
c000ec80:	e9 56 ac 00 00       	jmp    c00198db <Krnl::panic(char const*)>
c000ec85:	90                   	nop

c000ec86 <Computer::setDiskActivityLight(int, bool)>:
c000ec86:	56                   	push   esi
c000ec87:	53                   	push   ebx
c000ec88:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ec8c:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ec91:	77 1b                	ja     c000ecae <Computer::setDiskActivityLight(int, bool)+0x28>
c000ec93:	e4 92                	in     al,0x92
c000ec95:	bb 40 00 00 00       	mov    ebx,0x40
c000ec9a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000ec9e:	89 da                	mov    edx,ebx
c000eca0:	d3 e2                	shl    edx,cl
c000eca2:	89 f1                	mov    ecx,esi
c000eca4:	f7 d2                	not    edx
c000eca6:	d3 e3                	shl    ebx,cl
c000eca8:	21 d0                	and    eax,edx
c000ecaa:	09 d8                	or     eax,ebx
c000ecac:	e6 92                	out    0x92,al
c000ecae:	5b                   	pop    ebx
c000ecaf:	5e                   	pop    esi
c000ecb0:	c3                   	ret    
c000ecb1:	90                   	nop

c000ecb2 <GDTEntry::setBase(unsigned int)>:
c000ecb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecb6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecba:	89 c1                	mov    ecx,eax
c000ecbc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000ecc0:	c1 e9 10             	shr    ecx,0x10
c000ecc3:	c1 e8 18             	shr    eax,0x18
c000ecc6:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecc9:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000eccc:	c3                   	ret    
c000eccd:	90                   	nop

c000ecce <GDTEntry::setLimit(unsigned int)>:
c000ecce:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecd6:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ecd9:	66 89 01             	mov    WORD PTR [ecx],ax
c000ecdc:	83 e2 f0             	and    edx,0xfffffff0
c000ecdf:	c1 e8 10             	shr    eax,0x10
c000ece2:	83 e0 0f             	and    eax,0xf
c000ece5:	09 d0                	or     eax,edx
c000ece7:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecea:	c3                   	ret    
c000eceb:	90                   	nop

c000ecec <GDT::GDT()>:
c000ecec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ecf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed00:	90                   	nop
c000ed01:	c3                   	ret    

c000ed02 <GDT::addEntry(GDTEntry)>:
c000ed02:	53                   	push   ebx
c000ed03:	83 ec 0c             	sub    esp,0xc
c000ed06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ed0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed0c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000ed13:	52                   	push   edx
c000ed14:	50                   	push   eax
c000ed15:	68 54 8b 02 c0       	push   0xc0028b54
c000ed1a:	e8 a2 3a 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000ed1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ed21:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ed25:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000ed29:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000ed2d:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000ed31:	8d 50 01             	lea    edx,[eax+0x1]
c000ed34:	c1 e0 03             	shl    eax,0x3
c000ed37:	89 13                	mov    DWORD PTR [ebx],edx
c000ed39:	83 c4 18             	add    esp,0x18
c000ed3c:	5b                   	pop    ebx
c000ed3d:	c3                   	ret    

c000ed3e <GDT::getNumberOfEntries()>:
c000ed3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed42:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed44:	c3                   	ret    
c000ed45:	90                   	nop

c000ed46 <GDT::flush()>:
c000ed46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed4a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed4c:	83 c0 04             	add    eax,0x4
c000ed4f:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed56:	a3 92 c9 02 c0       	mov    ds:0xc002c992,eax
c000ed5b:	66 89 15 90 c9 02 c0 	mov    WORD PTR ds:0xc002c990,dx
c000ed62:	e9 96 16 ff ff       	jmp    c00003fd <loadGDT>
c000ed67:	90                   	nop

c000ed68 <GDT::setup()>:
c000ed68:	55                   	push   ebp
c000ed69:	57                   	push   edi
c000ed6a:	56                   	push   esi
c000ed6b:	53                   	push   ebx
c000ed6c:	83 ec 3c             	sub    esp,0x3c
c000ed6f:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ed73:	6a 00                	push   0x0
c000ed75:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000ed79:	53                   	push   ebx
c000ed7a:	e8 33 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed7f:	6a 00                	push   0x0
c000ed81:	53                   	push   ebx
c000ed82:	e8 47 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000ed87:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000ed8f:	6a 00                	push   0x0
c000ed91:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000ed95:	53                   	push   ebx
c000ed96:	e8 17 ff ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000ed9b:	68 ff ff ff 00       	push   0xffffff
c000eda0:	53                   	push   ebx
c000eda1:	e8 28 ff ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000eda6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000edaa:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edaf:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000edb8:	83 c4 20             	add    esp,0x20
c000edbb:	6a 00                	push   0x0
c000edbd:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000edc1:	53                   	push   ebx
c000edc2:	e8 eb fe ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c000edc7:	68 ff ff ff 00       	push   0xffffff
c000edcc:	53                   	push   ebx
c000edcd:	e8 fc fe ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c000edd2:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000edd6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000edda:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000edde:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000ede2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ede6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edeb:	0d 00 92 c0 00       	or     eax,0xc09200
c000edf0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edf4:	89 d8                	mov    eax,ebx
c000edf6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edfa:	80 cc 60             	or     ah,0x60
c000edfd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ee01:	83 c4 0c             	add    esp,0xc
c000ee04:	89 f8                	mov    eax,edi
c000ee06:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee0a:	80 cc 60             	or     ah,0x60
c000ee0d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee11:	89 c7                	mov    edi,eax
c000ee13:	55                   	push   ebp
c000ee14:	e8 e9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee20:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee24:	55                   	push   ebp
c000ee25:	e8 d8 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee31:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee35:	55                   	push   ebp
c000ee36:	e8 c7 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ee46:	53                   	push   ebx
c000ee47:	51                   	push   ecx
c000ee48:	55                   	push   ebp
c000ee49:	e8 b4 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee4e:	83 c4 0c             	add    esp,0xc
c000ee51:	57                   	push   edi
c000ee52:	56                   	push   esi
c000ee53:	55                   	push   ebp
c000ee54:	e8 a9 fe ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c000ee59:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ee5c:	e8 e5 fe ff ff       	call   c000ed46 <GDT::flush()>
c000ee61:	83 c4 4c             	add    esp,0x4c
c000ee64:	5b                   	pop    ebx
c000ee65:	5e                   	pop    esi
c000ee66:	5f                   	pop    edi
c000ee67:	5d                   	pop    ebp
c000ee68:	c3                   	ret    

c000ee69 <idleFunction(void*)>:
c000ee69:	53                   	push   ebx
c000ee6a:	83 ec 08             	sub    esp,0x8
c000ee6d:	e8 fa de 00 00       	call   c001cd6c <unlockScheduler()>
c000ee72:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c000ee77:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000ee7d:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000ee84:	74 3c                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee86:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee8d:	74 33                	je     c000eec2 <idleFunction(void*)+0x59>
c000ee8f:	31 db                	xor    ebx,ebx
c000ee91:	52                   	push   edx
c000ee92:	52                   	push   edx
c000ee93:	68 e1 00 00 00       	push   0xe1
c000ee98:	50                   	push   eax
c000ee99:	e8 de fb ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c000ee9e:	53                   	push   ebx
c000ee9f:	83 e0 02             	and    eax,0x2
c000eea2:	50                   	push   eax
c000eea3:	68 e1 00 00 00       	push   0xe1
c000eea8:	ff 35 88 c9 02 c0    	push   DWORD PTR ds:0xc002c988
c000eeae:	e8 f5 fb ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000eeb3:	83 c4 20             	add    esp,0x20
c000eeb6:	e8 79 13 ff ff       	call   c0000234 <doTPAUSE>
c000eebb:	e8 30 82 01 00       	call   c00270f0 <idleCommon()>
c000eec0:	eb f4                	jmp    c000eeb6 <idleFunction(void*)+0x4d>
c000eec2:	fb                   	sti    
c000eec3:	f4                   	hlt    
c000eec4:	e8 27 82 01 00       	call   c00270f0 <idleCommon()>
c000eec9:	eb f7                	jmp    c000eec2 <idleFunction(void*)+0x59>
c000eecb:	90                   	nop

c000eecc <IDTEntry::IDTEntry(bool)>:
c000eecc:	83 ec 04             	sub    esp,0x4
c000eecf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed3:	88 04 24             	mov    BYTE PTR [esp],al
c000eed6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeda:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eee4:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eee8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeec:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeef:	83 e2 f0             	and    edx,0xfffffff0
c000eef2:	83 ca 0e             	or     edx,0xe
c000eef5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eefc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eeff:	83 e2 ef             	and    edx,0xffffffef
c000ef02:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef05:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ef09:	74 04                	je     c000ef0f <IDTEntry::IDTEntry(bool)+0x43>
c000ef0b:	b2 03                	mov    dl,0x3
c000ef0d:	eb 02                	jmp    c000ef11 <IDTEntry::IDTEntry(bool)+0x45>
c000ef0f:	b2 00                	mov    dl,0x0
c000ef11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef15:	83 e2 03             	and    edx,0x3
c000ef18:	88 d1                	mov    cl,dl
c000ef1a:	c1 e1 05             	shl    ecx,0x5
c000ef1d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef20:	83 e2 9f             	and    edx,0xffffff9f
c000ef23:	09 ca                	or     edx,ecx
c000ef25:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef2c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2f:	83 ca 80             	or     edx,0xffffff80
c000ef32:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef35:	90                   	nop
c000ef36:	83 c4 04             	add    esp,0x4
c000ef39:	c3                   	ret    

c000ef3a <IDTEntry::setOffset(unsigned int)>:
c000ef3a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef42:	66 89 02             	mov    WORD PTR [edx],ax
c000ef45:	c1 e8 10             	shr    eax,0x10
c000ef48:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef4c:	c3                   	ret    
c000ef4d:	90                   	nop

c000ef4e <IDT::IDT()>:
c000ef4e:	90                   	nop
c000ef4f:	c3                   	ret    

c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef54:	83 c0 30             	add    eax,0x30
c000ef57:	c3                   	ret    

c000ef58 <IDT::addEntry(IDTEntry, int)>:
c000ef58:	53                   	push   ebx
c000ef59:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef69:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6c:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef70:	5b                   	pop    ebx
c000ef71:	c3                   	ret    

c000ef72 <IDT::addEntry(int, void (*)(), bool)>:
c000ef72:	53                   	push   ebx
c000ef73:	83 ec 10             	sub    esp,0x10
c000ef76:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef7b:	50                   	push   eax
c000ef7c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef80:	53                   	push   ebx
c000ef81:	e8 46 ff ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000ef86:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef8a:	53                   	push   ebx
c000ef8b:	e8 aa ff ff ff       	call   c000ef3a <IDTEntry::setOffset(unsigned int)>
c000ef90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef94:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef98:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000efa0:	e8 b3 ff ff ff       	call   c000ef58 <IDT::addEntry(IDTEntry, int)>
c000efa5:	83 c4 30             	add    esp,0x30
c000efa8:	5b                   	pop    ebx
c000efa9:	c3                   	ret    

c000efaa <IDT::flush()>:
c000efaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efae:	66 c7 05 98 c9 02 c0 ff 07 	mov    WORD PTR ds:0xc002c998,0x7ff
c000efb7:	a3 9a c9 02 c0       	mov    ds:0xc002c99a,eax
c000efbc:	0f 01 1d 98 c9 02 c0 	lidtd  ds:0xc002c998
c000efc3:	c3                   	ret    

c000efc4 <IDT::setup()>:
c000efc4:	57                   	push   edi
c000efc5:	56                   	push   esi
c000efc6:	53                   	push   ebx
c000efc7:	83 ec 10             	sub    esp,0x10
c000efca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efce:	6a 00                	push   0x0
c000efd0:	68 1d 04 00 c0       	push   0xc000041d
c000efd5:	6a 00                	push   0x0
c000efd7:	53                   	push   ebx
c000efd8:	e8 95 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efdd:	6a 00                	push   0x0
c000efdf:	68 2d 04 00 c0       	push   0xc000042d
c000efe4:	6a 01                	push   0x1
c000efe6:	53                   	push   ebx
c000efe7:	e8 86 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000efec:	83 c4 20             	add    esp,0x20
c000efef:	6a 00                	push   0x0
c000eff1:	68 37 04 00 c0       	push   0xc0000437
c000eff6:	6a 02                	push   0x2
c000eff8:	53                   	push   ebx
c000eff9:	e8 74 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000effe:	6a 00                	push   0x0
c000f000:	68 41 04 00 c0       	push   0xc0000441
c000f005:	6a 03                	push   0x3
c000f007:	53                   	push   ebx
c000f008:	e8 65 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f00d:	83 c4 20             	add    esp,0x20
c000f010:	6a 00                	push   0x0
c000f012:	68 4b 04 00 c0       	push   0xc000044b
c000f017:	6a 04                	push   0x4
c000f019:	53                   	push   ebx
c000f01a:	e8 53 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f01f:	6a 00                	push   0x0
c000f021:	68 55 04 00 c0       	push   0xc0000455
c000f026:	6a 05                	push   0x5
c000f028:	53                   	push   ebx
c000f029:	e8 44 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f02e:	83 c4 20             	add    esp,0x20
c000f031:	6a 00                	push   0x0
c000f033:	68 5f 04 00 c0       	push   0xc000045f
c000f038:	6a 06                	push   0x6
c000f03a:	53                   	push   ebx
c000f03b:	e8 32 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f040:	6a 00                	push   0x0
c000f042:	68 69 04 00 c0       	push   0xc0000469
c000f047:	6a 07                	push   0x7
c000f049:	53                   	push   ebx
c000f04a:	e8 23 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f04f:	83 c4 20             	add    esp,0x20
c000f052:	6a 00                	push   0x0
c000f054:	68 73 04 00 c0       	push   0xc0000473
c000f059:	6a 08                	push   0x8
c000f05b:	53                   	push   ebx
c000f05c:	e8 11 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f061:	6a 00                	push   0x0
c000f063:	68 7b 04 00 c0       	push   0xc000047b
c000f068:	6a 09                	push   0x9
c000f06a:	53                   	push   ebx
c000f06b:	e8 02 ff ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f070:	83 c4 20             	add    esp,0x20
c000f073:	6a 00                	push   0x0
c000f075:	68 85 04 00 c0       	push   0xc0000485
c000f07a:	6a 0a                	push   0xa
c000f07c:	53                   	push   ebx
c000f07d:	e8 f0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f082:	6a 00                	push   0x0
c000f084:	68 8d 04 00 c0       	push   0xc000048d
c000f089:	6a 0b                	push   0xb
c000f08b:	53                   	push   ebx
c000f08c:	e8 e1 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f091:	83 c4 20             	add    esp,0x20
c000f094:	6a 00                	push   0x0
c000f096:	68 95 04 00 c0       	push   0xc0000495
c000f09b:	6a 0c                	push   0xc
c000f09d:	53                   	push   ebx
c000f09e:	e8 cf fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0a3:	6a 00                	push   0x0
c000f0a5:	68 9d 04 00 c0       	push   0xc000049d
c000f0aa:	6a 0d                	push   0xd
c000f0ac:	53                   	push   ebx
c000f0ad:	e8 c0 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0b2:	83 c4 20             	add    esp,0x20
c000f0b5:	6a 00                	push   0x0
c000f0b7:	68 a5 04 00 c0       	push   0xc00004a5
c000f0bc:	6a 0e                	push   0xe
c000f0be:	53                   	push   ebx
c000f0bf:	e8 ae fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0c4:	6a 00                	push   0x0
c000f0c6:	68 ad 04 00 c0       	push   0xc00004ad
c000f0cb:	6a 0f                	push   0xf
c000f0cd:	53                   	push   ebx
c000f0ce:	e8 9f fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0d3:	83 c4 20             	add    esp,0x20
c000f0d6:	6a 00                	push   0x0
c000f0d8:	68 b7 04 00 c0       	push   0xc00004b7
c000f0dd:	6a 10                	push   0x10
c000f0df:	53                   	push   ebx
c000f0e0:	e8 8d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0e5:	6a 00                	push   0x0
c000f0e7:	68 c1 04 00 c0       	push   0xc00004c1
c000f0ec:	6a 11                	push   0x11
c000f0ee:	53                   	push   ebx
c000f0ef:	e8 7e fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f0f4:	83 c4 20             	add    esp,0x20
c000f0f7:	6a 00                	push   0x0
c000f0f9:	68 cb 04 00 c0       	push   0xc00004cb
c000f0fe:	6a 12                	push   0x12
c000f100:	53                   	push   ebx
c000f101:	e8 6c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f106:	6a 01                	push   0x1
c000f108:	68 65 05 00 c0       	push   0xc0000565
c000f10d:	6a 60                	push   0x60
c000f10f:	53                   	push   ebx
c000f110:	e8 5d fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f115:	83 c4 20             	add    esp,0x20
c000f118:	6a 00                	push   0x0
c000f11a:	68 6c 05 00 c0       	push   0xc000056c
c000f11f:	6a 20                	push   0x20
c000f121:	53                   	push   ebx
c000f122:	e8 4b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f127:	6a 00                	push   0x0
c000f129:	68 57 05 00 c0       	push   0xc0000557
c000f12e:	6a 21                	push   0x21
c000f130:	53                   	push   ebx
c000f131:	e8 3c fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f136:	83 c4 20             	add    esp,0x20
c000f139:	6a 00                	push   0x0
c000f13b:	68 5e 05 00 c0       	push   0xc000055e
c000f140:	6a 22                	push   0x22
c000f142:	53                   	push   ebx
c000f143:	e8 2a fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f148:	6a 00                	push   0x0
c000f14a:	68 d5 04 00 c0       	push   0xc00004d5
c000f14f:	6a 23                	push   0x23
c000f151:	53                   	push   ebx
c000f152:	e8 1b fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f157:	83 c4 20             	add    esp,0x20
c000f15a:	6a 00                	push   0x0
c000f15c:	68 df 04 00 c0       	push   0xc00004df
c000f161:	6a 24                	push   0x24
c000f163:	53                   	push   ebx
c000f164:	e8 09 fe ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f169:	6a 00                	push   0x0
c000f16b:	68 e9 04 00 c0       	push   0xc00004e9
c000f170:	6a 25                	push   0x25
c000f172:	53                   	push   ebx
c000f173:	e8 fa fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f178:	83 c4 20             	add    esp,0x20
c000f17b:	6a 00                	push   0x0
c000f17d:	68 f3 04 00 c0       	push   0xc00004f3
c000f182:	6a 26                	push   0x26
c000f184:	53                   	push   ebx
c000f185:	e8 e8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f18a:	6a 00                	push   0x0
c000f18c:	68 fd 04 00 c0       	push   0xc00004fd
c000f191:	6a 27                	push   0x27
c000f193:	53                   	push   ebx
c000f194:	e8 d9 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f199:	83 c4 20             	add    esp,0x20
c000f19c:	6a 00                	push   0x0
c000f19e:	68 07 05 00 c0       	push   0xc0000507
c000f1a3:	6a 28                	push   0x28
c000f1a5:	53                   	push   ebx
c000f1a6:	e8 c7 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ab:	6a 00                	push   0x0
c000f1ad:	68 11 05 00 c0       	push   0xc0000511
c000f1b2:	6a 29                	push   0x29
c000f1b4:	53                   	push   ebx
c000f1b5:	e8 b8 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ba:	83 c4 20             	add    esp,0x20
c000f1bd:	6a 00                	push   0x0
c000f1bf:	68 1b 05 00 c0       	push   0xc000051b
c000f1c4:	6a 2a                	push   0x2a
c000f1c6:	53                   	push   ebx
c000f1c7:	e8 a6 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1cc:	6a 00                	push   0x0
c000f1ce:	68 25 05 00 c0       	push   0xc0000525
c000f1d3:	6a 2b                	push   0x2b
c000f1d5:	53                   	push   ebx
c000f1d6:	e8 97 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1db:	83 c4 20             	add    esp,0x20
c000f1de:	6a 00                	push   0x0
c000f1e0:	68 2f 05 00 c0       	push   0xc000052f
c000f1e5:	6a 2c                	push   0x2c
c000f1e7:	53                   	push   ebx
c000f1e8:	e8 85 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1ed:	6a 00                	push   0x0
c000f1ef:	68 39 05 00 c0       	push   0xc0000539
c000f1f4:	6a 2d                	push   0x2d
c000f1f6:	53                   	push   ebx
c000f1f7:	e8 76 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f1fc:	83 c4 20             	add    esp,0x20
c000f1ff:	6a 00                	push   0x0
c000f201:	68 43 05 00 c0       	push   0xc0000543
c000f206:	6a 2e                	push   0x2e
c000f208:	53                   	push   ebx
c000f209:	e8 64 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f20e:	6a 00                	push   0x0
c000f210:	68 4d 05 00 c0       	push   0xc000054d
c000f215:	6a 2f                	push   0x2f
c000f217:	53                   	push   ebx
c000f218:	e8 55 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f21d:	83 c4 20             	add    esp,0x20
c000f220:	6a 00                	push   0x0
c000f222:	68 a2 05 00 c0       	push   0xc00005a2
c000f227:	6a 30                	push   0x30
c000f229:	53                   	push   ebx
c000f22a:	e8 43 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f22f:	6a 00                	push   0x0
c000f231:	68 ac 05 00 c0       	push   0xc00005ac
c000f236:	6a 31                	push   0x31
c000f238:	53                   	push   ebx
c000f239:	e8 34 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f23e:	83 c4 20             	add    esp,0x20
c000f241:	6a 00                	push   0x0
c000f243:	68 b6 05 00 c0       	push   0xc00005b6
c000f248:	6a 32                	push   0x32
c000f24a:	53                   	push   ebx
c000f24b:	e8 22 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f250:	6a 00                	push   0x0
c000f252:	68 c0 05 00 c0       	push   0xc00005c0
c000f257:	6a 33                	push   0x33
c000f259:	53                   	push   ebx
c000f25a:	e8 13 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f25f:	83 c4 20             	add    esp,0x20
c000f262:	6a 00                	push   0x0
c000f264:	68 ca 05 00 c0       	push   0xc00005ca
c000f269:	6a 34                	push   0x34
c000f26b:	53                   	push   ebx
c000f26c:	e8 01 fd ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f271:	6a 00                	push   0x0
c000f273:	68 d4 05 00 c0       	push   0xc00005d4
c000f278:	6a 35                	push   0x35
c000f27a:	53                   	push   ebx
c000f27b:	e8 f2 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f280:	83 c4 20             	add    esp,0x20
c000f283:	6a 00                	push   0x0
c000f285:	68 de 05 00 c0       	push   0xc00005de
c000f28a:	6a 36                	push   0x36
c000f28c:	53                   	push   ebx
c000f28d:	e8 e0 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f292:	6a 00                	push   0x0
c000f294:	68 e8 05 00 c0       	push   0xc00005e8
c000f299:	6a 37                	push   0x37
c000f29b:	53                   	push   ebx
c000f29c:	e8 d1 fc ff ff       	call   c000ef72 <IDT::addEntry(int, void (*)(), bool)>
c000f2a1:	83 c4 20             	add    esp,0x20
c000f2a4:	e8 b8 26 00 00       	call   c0011961 <Virt::getAKernelVAS()>
c000f2a9:	52                   	push   edx
c000f2aa:	6a 03                	push   0x3
c000f2ac:	6a 02                	push   0x2
c000f2ae:	50                   	push   eax
c000f2af:	e8 e8 2c 00 00       	call   c0011f9c <VAS::allocatePages(int, int)>
c000f2b4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2bb:	89 c6                	mov    esi,eax
c000f2bd:	e8 12 02 00 00       	call   c000f4d4 <malloc>
c000f2c2:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2cb:	89 c7                	mov    edi,eax
c000f2cd:	e8 30 1e 00 00       	call   c0011102 <TSS::TSS()>
c000f2d2:	83 c4 0c             	add    esp,0xc
c000f2d5:	68 73 04 00 c0       	push   0xc0000473
c000f2da:	56                   	push   esi
c000f2db:	57                   	push   edi
c000f2dc:	e8 61 1e 00 00       	call   c0011142 <TSS::setup(unsigned long, unsigned long)>
c000f2e1:	59                   	pop    ecx
c000f2e2:	89 c6                	mov    esi,eax
c000f2e4:	5f                   	pop    edi
c000f2e5:	6a 00                	push   0x0
c000f2e7:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2eb:	50                   	push   eax
c000f2ec:	e8 db fb ff ff       	call   c000eecc <IDTEntry::IDTEntry(bool)>
c000f2f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f5:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2fa:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f301:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f30b:	80 ce 05             	or     dh,0x5
c000f30e:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f311:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f315:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f319:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f31c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31f:	e8 86 fc ff ff       	call   c000efaa <IDT::flush()>
c000f324:	83 c4 20             	add    esp,0x20
c000f327:	5b                   	pop    ebx
c000f328:	5e                   	pop    esi
c000f329:	5f                   	pop    edi
c000f32a:	c3                   	ret    

c000f32b <sbrk>:
c000f32b:	55                   	push   ebp
c000f32c:	57                   	push   edi
c000f32d:	56                   	push   esi
c000f32e:	53                   	push   ebx
c000f32f:	83 ec 1c             	sub    esp,0x1c
c000f332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f336:	85 c0                	test   eax,eax
c000f338:	74 3e                	je     c000f378 <sbrk+0x4d>
c000f33a:	78 43                	js     c000f37f <sbrk+0x54>
c000f33c:	8b 15 88 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c988
c000f342:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f348:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f34e:	83 e2 01             	and    edx,0x1
c000f351:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f355:	8b 0d ac b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8ac
c000f35b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f35f:	05 ff 0f 00 00       	add    eax,0xfff
c000f364:	89 c2                	mov    edx,eax
c000f366:	78 2f                	js     c000f397 <sbrk+0x6c>
c000f368:	c1 fa 0c             	sar    edx,0xc
c000f36b:	89 d7                	mov    edi,edx
c000f36d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f371:	be 00 00 00 00       	mov    esi,0x0
c000f376:	eb 36                	jmp    c000f3ae <sbrk+0x83>
c000f378:	a1 ac b8 02 c0       	mov    eax,ds:0xc002b8ac
c000f37d:	eb 74                	jmp    c000f3f3 <sbrk+0xc8>
c000f37f:	83 ec 08             	sub    esp,0x8
c000f382:	50                   	push   eax
c000f383:	68 70 8b 02 c0       	push   0xc0028b70
c000f388:	e8 34 34 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f395:	eb 5c                	jmp    c000f3f3 <sbrk+0xc8>
c000f397:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f39d:	eb c9                	jmp    c000f368 <sbrk+0x3d>
c000f39f:	81 05 ac b8 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002b8ac,0x1000
c000f3a9:	46                   	inc    esi
c000f3aa:	39 f7                	cmp    edi,esi
c000f3ac:	74 34                	je     c000f3e2 <sbrk+0xb7>
c000f3ae:	e8 ae 25 00 00       	call   c0011961 <Virt::getAKernelVAS()>
c000f3b3:	89 c3                	mov    ebx,eax
c000f3b5:	8b 2d ac b8 02 c0    	mov    ebp,DWORD PTR ds:0xc002b8ac
c000f3bb:	e8 28 07 00 00       	call   c000fae8 <Phys::allocatePage()>
c000f3c0:	68 01 04 00 00       	push   0x401
c000f3c5:	55                   	push   ebp
c000f3c6:	50                   	push   eax
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 cf 2a 00 00       	call   c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3d5:	74 c8                	je     c000f39f <sbrk+0x74>
c000f3d7:	8b 1d ac b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ac
c000f3dd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f3e0:	eb bd                	jmp    c000f39f <sbrk+0x74>
c000f3e2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f3e7:	75 12                	jne    c000f3fb <sbrk+0xd0>
c000f3e9:	0f 20 d8             	mov    eax,cr3
c000f3ec:	0f 22 d8             	mov    cr3,eax
c000f3ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f3f3:	83 c4 1c             	add    esp,0x1c
c000f3f6:	5b                   	pop    ebx
c000f3f7:	5e                   	pop    esi
c000f3f8:	5f                   	pop    edi
c000f3f9:	5d                   	pop    ebp
c000f3fa:	c3                   	ret    
c000f3fb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f3ff:	89 cb                	mov    ebx,ecx
c000f401:	c1 eb 0a             	shr    ebx,0xa
c000f404:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f40a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f410:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f414:	c1 e0 0c             	shl    eax,0xc
c000f417:	01 c8                	add    eax,ecx
c000f419:	c1 e8 0a             	shr    eax,0xa
c000f41c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f421:	2d 00 00 40 00       	sub    eax,0x400000
c000f426:	39 c3                	cmp    ebx,eax
c000f428:	77 c5                	ja     c000f3ef <sbrk+0xc4>
c000f42a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f42d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f433:	39 d8                	cmp    eax,ebx
c000f435:	73 f3                	jae    c000f42a <sbrk+0xff>
c000f437:	eb b6                	jmp    c000f3ef <sbrk+0xc4>

c000f439 <mmap>:
c000f439:	83 ec 18             	sub    esp,0x18
c000f43c:	68 a0 8b 02 c0       	push   0xc0028ba0
c000f441:	e8 95 a4 00 00       	call   c00198db <Krnl::panic(char const*)>
c000f446:	b8 00 00 00 00       	mov    eax,0x0
c000f44b:	83 c4 1c             	add    esp,0x1c
c000f44e:	c3                   	ret    

c000f44f <munmap>:
c000f44f:	83 ec 18             	sub    esp,0x18
c000f452:	68 a5 8b 02 c0       	push   0xc0028ba5
c000f457:	e8 7f a4 00 00       	call   c00198db <Krnl::panic(char const*)>
c000f45c:	b8 00 00 00 00       	mov    eax,0x0
c000f461:	83 c4 1c             	add    esp,0x1c
c000f464:	c3                   	ret    

c000f465 <liballoc_lock()>:
c000f465:	83 ec 0c             	sub    esp,0xc
c000f468:	e8 fd d8 00 00       	call   c001cd6a <lockScheduler()>
c000f46d:	b8 00 00 00 00       	mov    eax,0x0
c000f472:	83 c4 0c             	add    esp,0xc
c000f475:	c3                   	ret    

c000f476 <liballoc_unlock()>:
c000f476:	83 ec 0c             	sub    esp,0xc
c000f479:	e8 ee d8 00 00       	call   c001cd6c <unlockScheduler()>
c000f47e:	b8 00 00 00 00       	mov    eax,0x0
c000f483:	83 c4 0c             	add    esp,0xc
c000f486:	c3                   	ret    

c000f487 <liballoc_alloc(int)>:
c000f487:	83 ec 0c             	sub    esp,0xc
c000f48a:	e8 d2 24 00 00       	call   c0011961 <Virt::getAKernelVAS()>
c000f48f:	83 ec 04             	sub    esp,0x4
c000f492:	6a 01                	push   0x1
c000f494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f498:	50                   	push   eax
c000f499:	e8 fe 2a 00 00       	call   c0011f9c <VAS::allocatePages(int, int)>
c000f49e:	83 c4 1c             	add    esp,0x1c
c000f4a1:	c3                   	ret    

c000f4a2 <liballoc_free(void*, int)>:
c000f4a2:	83 ec 0c             	sub    esp,0xc
c000f4a5:	e8 b7 24 00 00       	call   c0011961 <Virt::getAKernelVAS()>
c000f4aa:	83 ec 08             	sub    esp,0x8
c000f4ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f4b1:	50                   	push   eax
c000f4b2:	e8 a1 27 00 00       	call   c0011c58 <VAS::freeAllocatedPages(unsigned long)>
c000f4b7:	b8 00 00 00 00       	mov    eax,0x0
c000f4bc:	83 c4 1c             	add    esp,0x1c
c000f4bf:	c3                   	ret    

c000f4c0 <realloc>:
c000f4c0:	83 ec 14             	sub    esp,0x14
c000f4c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4cb:	e8 34 1f ff ff       	call   c0001404 <dlrealloc>
c000f4d0:	83 c4 1c             	add    esp,0x1c
c000f4d3:	c3                   	ret    

c000f4d4 <malloc>:
c000f4d4:	83 ec 18             	sub    esp,0x18
c000f4d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4db:	e8 e7 19 ff ff       	call   c0000ec7 <dlmalloc>
c000f4e0:	83 c4 1c             	add    esp,0x1c
c000f4e3:	c3                   	ret    

c000f4e4 <free>:
c000f4e4:	83 ec 18             	sub    esp,0x18
c000f4e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4eb:	e8 7c 16 ff ff       	call   c0000b6c <dlfree>
c000f4f0:	83 c4 1c             	add    esp,0x1c
c000f4f3:	c3                   	ret    

c000f4f4 <rfree>:
c000f4f4:	83 ec 18             	sub    esp,0x18
c000f4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fb:	e8 6c 16 ff ff       	call   c0000b6c <dlfree>
c000f500:	83 c4 1c             	add    esp,0x1c
c000f503:	c3                   	ret    

c000f504 <calloc>:
c000f504:	56                   	push   esi
c000f505:	53                   	push   ebx
c000f506:	83 ec 10             	sub    esp,0x10
c000f509:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f50d:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f512:	53                   	push   ebx
c000f513:	e8 bc ff ff ff       	call   c000f4d4 <malloc>
c000f518:	89 c6                	mov    esi,eax
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	53                   	push   ebx
c000f51e:	6a 00                	push   0x0
c000f520:	50                   	push   eax
c000f521:	e8 65 11 ff ff       	call   c000068b <memset>
c000f526:	89 f0                	mov    eax,esi
c000f528:	83 c4 14             	add    esp,0x14
c000f52b:	5b                   	pop    ebx
c000f52c:	5e                   	pop    esi
c000f52d:	c3                   	ret    

c000f52e <hwTextMode_loadInData(VgaText*)>:
c000f52e:	55                   	push   ebp
c000f52f:	a1 c0 b8 02 c0       	mov    eax,ds:0xc002b8c0
c000f534:	57                   	push   edi
c000f535:	56                   	push   esi
c000f536:	53                   	push   ebx
c000f537:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f53b:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f541:	85 d2                	test   edx,edx
c000f543:	7e 2f                	jle    c000f574 <hwTextMode_loadInData(VgaText*)+0x46>
c000f545:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f54b:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f54e:	31 f6                	xor    esi,esi
c000f550:	29 fd                	sub    ebp,edi
c000f552:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f555:	31 c0                	xor    eax,eax
c000f557:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f55b:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f55f:	40                   	inc    eax
c000f560:	83 f8 50             	cmp    eax,0x50
c000f563:	75 f2                	jne    c000f557 <hwTextMode_loadInData(VgaText*)+0x29>
c000f565:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f56b:	46                   	inc    esi
c000f56c:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f572:	7f de                	jg     c000f552 <hwTextMode_loadInData(VgaText*)+0x24>
c000f574:	5b                   	pop    ebx
c000f575:	5e                   	pop    esi
c000f576:	5f                   	pop    edi
c000f577:	5d                   	pop    ebp
c000f578:	c3                   	ret    

c000f579 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f579:	57                   	push   edi
c000f57a:	8b 15 c0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8c0
c000f580:	56                   	push   esi
c000f581:	8d b2 a0 00 00 00    	lea    esi,[edx+0xa0]
c000f587:	53                   	push   ebx
c000f588:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f58c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f590:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000f596:	8b bb d8 0f 00 00    	mov    edi,DWORD PTR [ebx+0xfd8]
c000f59c:	c1 e0 04             	shl    eax,0x4
c000f59f:	83 e7 0f             	and    edi,0xf
c000f5a2:	0f b6 c0             	movzx  eax,al
c000f5a5:	41                   	inc    ecx
c000f5a6:	09 f8                	or     eax,edi
c000f5a8:	83 c2 02             	add    edx,0x2
c000f5ab:	0f b6 79 ff          	movzx  edi,BYTE PTR [ecx-0x1]
c000f5af:	c1 e0 08             	shl    eax,0x8
c000f5b2:	09 f8                	or     eax,edi
c000f5b4:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000f5b8:	39 f2                	cmp    edx,esi
c000f5ba:	75 d4                	jne    c000f590 <hwTextMode_loadInTitle(VgaText*, char*)+0x17>
c000f5bc:	5b                   	pop    ebx
c000f5bd:	5e                   	pop    esi
c000f5be:	5f                   	pop    edi
c000f5bf:	c3                   	ret    

c000f5c0 <hwTextMode_showCursor(VgaText*, bool)>:
c000f5c0:	56                   	push   esi
c000f5c1:	53                   	push   ebx
c000f5c2:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000f5c7:	74 38                	je     c000f601 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000f5c9:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f5ce:	b0 0a                	mov    al,0xa
c000f5d0:	89 da                	mov    edx,ebx
c000f5d2:	ee                   	out    dx,al
c000f5d3:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f5d8:	89 ca                	mov    edx,ecx
c000f5da:	ec                   	in     al,dx
c000f5db:	b2 0f                	mov    dl,0xf
c000f5dd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f5e1:	83 e0 c0             	and    eax,0xffffffc0
c000f5e4:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f5ea:	09 d0                	or     eax,edx
c000f5ec:	89 ca                	mov    edx,ecx
c000f5ee:	ee                   	out    dx,al
c000f5ef:	b0 0b                	mov    al,0xb
c000f5f1:	89 da                	mov    edx,ebx
c000f5f3:	ee                   	out    dx,al
c000f5f4:	89 ca                	mov    edx,ecx
c000f5f6:	ec                   	in     al,dx
c000f5f7:	83 e0 e0             	and    eax,0xffffffe0
c000f5fa:	83 c8 0f             	or     eax,0xf
c000f5fd:	ee                   	out    dx,al
c000f5fe:	5b                   	pop    ebx
c000f5ff:	5e                   	pop    esi
c000f600:	c3                   	ret    
c000f601:	b0 0a                	mov    al,0xa
c000f603:	ba d4 03 00 00       	mov    edx,0x3d4
c000f608:	ee                   	out    dx,al
c000f609:	b0 20                	mov    al,0x20
c000f60b:	ba d5 03 00 00       	mov    edx,0x3d5
c000f610:	ee                   	out    dx,al
c000f611:	5b                   	pop    ebx
c000f612:	5e                   	pop    esi
c000f613:	c3                   	ret    

c000f614 <hwTextMode_update(VgaText*)>:
c000f614:	c3                   	ret    

c000f615 <hwTextMode_updateCursor(VgaText*)>:
c000f615:	56                   	push   esi
c000f616:	b9 19 00 00 00       	mov    ecx,0x19
c000f61b:	53                   	push   ebx
c000f61c:	be d4 03 00 00       	mov    esi,0x3d4
c000f621:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f625:	89 f2                	mov    edx,esi
c000f627:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f62d:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f633:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f636:	c1 e1 04             	shl    ecx,0x4
c000f639:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f63f:	b0 0f                	mov    al,0xf
c000f641:	ee                   	out    dx,al
c000f642:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f647:	88 c8                	mov    al,cl
c000f649:	89 da                	mov    edx,ebx
c000f64b:	ee                   	out    dx,al
c000f64c:	b0 0e                	mov    al,0xe
c000f64e:	89 f2                	mov    edx,esi
c000f650:	ee                   	out    dx,al
c000f651:	89 c8                	mov    eax,ecx
c000f653:	89 da                	mov    edx,ebx
c000f655:	66 c1 e8 08          	shr    ax,0x8
c000f659:	ee                   	out    dx,al
c000f65a:	5b                   	pop    ebx
c000f65b:	5e                   	pop    esi
c000f65c:	c3                   	ret    

c000f65d <hwTextMode_disableBlink(VgaText*, bool)>:
c000f65d:	ba da 03 00 00       	mov    edx,0x3da
c000f662:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000f667:	75 18                	jne    c000f681 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000f669:	ec                   	in     al,dx
c000f66a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f66f:	b0 30                	mov    al,0x30
c000f671:	89 ca                	mov    edx,ecx
c000f673:	ee                   	out    dx,al
c000f674:	ba c1 03 00 00       	mov    edx,0x3c1
c000f679:	ec                   	in     al,dx
c000f67a:	83 c8 08             	or     eax,0x8
c000f67d:	89 ca                	mov    edx,ecx
c000f67f:	ee                   	out    dx,al
c000f680:	c3                   	ret    
c000f681:	ec                   	in     al,dx
c000f682:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000f687:	b0 30                	mov    al,0x30
c000f689:	89 ca                	mov    edx,ecx
c000f68b:	ee                   	out    dx,al
c000f68c:	ba c1 03 00 00       	mov    edx,0x3c1
c000f691:	ec                   	in     al,dx
c000f692:	83 e0 f7             	and    eax,0xfffffff7
c000f695:	89 ca                	mov    edx,ecx
c000f697:	ee                   	out    dx,al
c000f698:	c3                   	ret    

c000f699 <hwTextMode_scrollScreen(VgaText*)>:
c000f699:	55                   	push   ebp
c000f69a:	bd 02 00 00 00       	mov    ebp,0x2
c000f69f:	57                   	push   edi
c000f6a0:	56                   	push   esi
c000f6a1:	53                   	push   ebx
c000f6a2:	83 ec 1c             	sub    esp,0x1c
c000f6a5:	a1 c0 b8 02 c0       	mov    eax,ds:0xc002b8c0
c000f6aa:	05 a0 00 00 00       	add    eax,0xa0
c000f6af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f6b3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f6b7:	31 c0                	xor    eax,eax
c000f6b9:	eb 0b                	jmp    c000f6c6 <hwTextMode_scrollScreen(VgaText*)+0x2d>
c000f6bb:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6c1:	74 57                	je     c000f71a <hwTextMode_scrollScreen(VgaText*)+0x81>
c000f6c3:	43                   	inc    ebx
c000f6c4:	89 f0                	mov    eax,esi
c000f6c6:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000f6cc:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000f6d2:	88 13                	mov    BYTE PTR [ebx],dl
c000f6d4:	8d 70 01             	lea    esi,[eax+0x1]
c000f6d7:	83 fd 18             	cmp    ebp,0x18
c000f6da:	75 df                	jne    c000f6bb <hwTextMode_scrollScreen(VgaText*)+0x22>
c000f6dc:	a8 01                	test   al,0x1
c000f6de:	75 13                	jne    c000f6f3 <hwTextMode_scrollScreen(VgaText*)+0x5a>
c000f6e0:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000f6e3:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000f6e9:	75 d8                	jne    c000f6c3 <hwTextMode_scrollScreen(VgaText*)+0x2a>
c000f6eb:	83 c4 1c             	add    esp,0x1c
c000f6ee:	5b                   	pop    ebx
c000f6ef:	5e                   	pop    esi
c000f6f0:	5f                   	pop    edi
c000f6f1:	5d                   	pop    ebp
c000f6f2:	c3                   	ret    
c000f6f3:	83 ec 08             	sub    esp,0x8
c000f6f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f6fa:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000f701:	50                   	push   eax
c000f702:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f706:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000f70d:	50                   	push   eax
c000f70e:	e8 19 0c 00 00       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c000f713:	83 c4 10             	add    esp,0x10
c000f716:	88 07                	mov    BYTE PTR [edi],al
c000f718:	eb c9                	jmp    c000f6e3 <hwTextMode_scrollScreen(VgaText*)+0x4a>
c000f71a:	45                   	inc    ebp
c000f71b:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000f723:	eb 8e                	jmp    c000f6b3 <hwTextMode_scrollScreen(VgaText*)+0x1a>

c000f725 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000f725:	56                   	push   esi
c000f726:	53                   	push   ebx
c000f727:	83 ec 0c             	sub    esp,0xc
c000f72a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000f72e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000f732:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f737:	50                   	push   eax
c000f738:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f73d:	50                   	push   eax
c000f73e:	e8 e9 0b 00 00       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c000f743:	5a                   	pop    edx
c000f744:	0f b6 c0             	movzx  eax,al
c000f747:	59                   	pop    ecx
c000f748:	50                   	push   eax
c000f749:	89 f0                	mov    eax,esi
c000f74b:	0f be f0             	movsx  esi,al
c000f74e:	56                   	push   esi
c000f74f:	e8 92 0c 00 00       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c000f754:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000f758:	ba 19 00 00 00       	mov    edx,0x19
c000f75d:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000f763:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000f766:	8d 14 92             	lea    edx,[edx+edx*4]
c000f769:	c1 e1 04             	shl    ecx,0x4
c000f76c:	c1 e2 04             	shl    edx,0x4
c000f76f:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000f773:	01 ca                	add    edx,ecx
c000f775:	8b 0d c0 b8 02 c0    	mov    ecx,DWORD PTR ds:0xc002b8c0
c000f77b:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000f77f:	83 c4 14             	add    esp,0x14
c000f782:	5b                   	pop    ebx
c000f783:	5e                   	pop    esi
c000f784:	c3                   	ret    

c000f785 <setupTextMode()>:
c000f785:	a1 10 04 00 00       	mov    eax,ds:0x410
c000f78a:	83 e0 30             	and    eax,0x30
c000f78d:	66 83 f8 30          	cmp    ax,0x30
c000f791:	74 11                	je     c000f7a4 <setupTextMode()+0x1f>
c000f793:	81 2d c0 b8 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002b8c0,0x8000
c000f79d:	c6 05 20 ca 02 c0 01 	mov    BYTE PTR ds:0xc002ca20,0x1
c000f7a4:	c6 05 00 00 0b c2 41 	mov    BYTE PTR ds:0xc20b0000,0x41
c000f7ab:	c6 05 01 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0001,0x2
c000f7b2:	c6 05 02 00 0b c2 42 	mov    BYTE PTR ds:0xc20b0002,0x42
c000f7b9:	c6 05 03 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0003,0x2
c000f7c0:	c6 05 04 00 0b c2 43 	mov    BYTE PTR ds:0xc20b0004,0x43
c000f7c7:	c6 05 05 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0005,0x2
c000f7ce:	c6 05 06 00 0b c2 44 	mov    BYTE PTR ds:0xc20b0006,0x44
c000f7d5:	c6 05 07 00 0b c2 02 	mov    BYTE PTR ds:0xc20b0007,0x2
c000f7dc:	c7 05 58 ca 02 c0 5d f6 00 c0 	mov    DWORD PTR ds:0xc002ca58,0xc000f65d
c000f7e6:	c7 05 44 ca 02 c0 2e f5 00 c0 	mov    DWORD PTR ds:0xc002ca44,0xc000f52e
c000f7f0:	c7 05 40 ca 02 c0 79 f5 00 c0 	mov    DWORD PTR ds:0xc002ca40,0xc000f579
c000f7fa:	c7 05 4c ca 02 c0 99 f6 00 c0 	mov    DWORD PTR ds:0xc002ca4c,0xc000f699
c000f804:	c7 05 54 ca 02 c0 c0 f5 00 c0 	mov    DWORD PTR ds:0xc002ca54,0xc000f5c0
c000f80e:	c7 05 48 ca 02 c0 14 f6 00 c0 	mov    DWORD PTR ds:0xc002ca48,0xc000f614
c000f818:	c7 05 50 ca 02 c0 15 f6 00 c0 	mov    DWORD PTR ds:0xc002ca50,0xc000f615
c000f822:	c7 05 5c ca 02 c0 25 f7 00 c0 	mov    DWORD PTR ds:0xc002ca5c,0xc000f725
c000f82c:	c3                   	ret    

c000f82d <kernel_main>:
c000f82d:	57                   	push   edi
c000f82e:	bf f9 03 00 00       	mov    edi,0x3f9
c000f833:	56                   	push   esi
c000f834:	31 f6                	xor    esi,esi
c000f836:	53                   	push   ebx
c000f837:	83 ec 10             	sub    esp,0x10
c000f83a:	e8 47 09 00 00       	call   c0010186 <installVgaTextImplementation()>
c000f83f:	e8 41 ff ff ff       	call   c000f785 <setupTextMode()>
c000f844:	89 f0                	mov    eax,esi
c000f846:	89 fa                	mov    edx,edi
c000f848:	ee                   	out    dx,al
c000f849:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f84e:	b0 80                	mov    al,0x80
c000f850:	89 da                	mov    edx,ebx
c000f852:	ee                   	out    dx,al
c000f853:	b1 03                	mov    cl,0x3
c000f855:	ba f8 03 00 00       	mov    edx,0x3f8
c000f85a:	88 c8                	mov    al,cl
c000f85c:	ee                   	out    dx,al
c000f85d:	89 f0                	mov    eax,esi
c000f85f:	89 fa                	mov    edx,edi
c000f861:	ee                   	out    dx,al
c000f862:	88 c8                	mov    al,cl
c000f864:	89 da                	mov    edx,ebx
c000f866:	ee                   	out    dx,al
c000f867:	b0 c7                	mov    al,0xc7
c000f869:	ba fa 03 00 00       	mov    edx,0x3fa
c000f86e:	ee                   	out    dx,al
c000f86f:	b0 0b                	mov    al,0xb
c000f871:	ba fc 03 00 00       	mov    edx,0x3fc
c000f876:	ee                   	out    dx,al
c000f877:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f87c:	83 ec 0c             	sub    esp,0xc
c000f87f:	05 ff 0f 00 00       	add    eax,0xfff
c000f884:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f889:	50                   	push   eax
c000f88a:	e8 b3 03 00 00       	call   c000fc42 <Phys::physicalMemorySetup(unsigned int)>
c000f88f:	e8 4e 20 00 00       	call   c00118e2 <Virt::virtualMemorySetup()>
c000f894:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000f89a:	83 c4 10             	add    esp,0x10
c000f89d:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000f8a3:	75 0e                	jne    c000f8b3 <kernel_main+0x86>
c000f8a5:	89 d8                	mov    eax,ebx
c000f8a7:	25 48 03 00 00       	and    eax,0x348
c000f8ac:	3d 00 03 00 00       	cmp    eax,0x300
c000f8b1:	74 10                	je     c000f8c3 <kernel_main+0x96>
c000f8b3:	83 ec 0c             	sub    esp,0xc
c000f8b6:	68 9c a2 02 c0       	push   0xc002a29c
c000f8bb:	e8 1b a0 00 00       	call   c00198db <Krnl::panic(char const*)>
c000f8c0:	83 c4 10             	add    esp,0x10
c000f8c3:	83 ec 0c             	sub    esp,0xc
c000f8c6:	89 1d a0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9a0,ebx
c000f8cc:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f8d0:	53                   	push   ebx
c000f8d1:	e8 c0 21 00 00       	call   c0011a96 <VAS::VAS()>
c000f8d6:	89 1d 04 cb 02 c0    	mov    DWORD PTR ds:0xc002cb04,ebx
c000f8dc:	e8 3f 07 ff ff       	call   c0000020 <callGlobalConstructors>
c000f8e1:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000f8e8:	e8 e7 fb ff ff       	call   c000f4d4 <malloc>
c000f8ed:	89 04 24             	mov    DWORD PTR [esp],eax
c000f8f0:	89 c6                	mov    esi,eax
c000f8f2:	e8 f3 e9 ff ff       	call   c000e2ea <Computer::Computer()>
c000f8f7:	6a 00                	push   0x0
c000f8f9:	89 35 88 c9 02 c0    	mov    DWORD PTR ds:0xc002c988,esi
c000f8ff:	6a 00                	push   0x0
c000f901:	6a 00                	push   0x0
c000f903:	56                   	push   esi
c000f904:	e8 15 f2 ff ff       	call   c000eb1e <Computer::open(int, int, void*)>
c000f909:	83 c4 14             	add    esp,0x14
c000f90c:	53                   	push   ebx
c000f90d:	e8 1e 24 00 00       	call   c0011d30 <VAS::~VAS()>
c000f912:	c7 04 24 ac 8b 02 c0 	mov    DWORD PTR [esp],0xc0028bac
c000f919:	e8 bd 9f 00 00       	call   c00198db <Krnl::panic(char const*)>
c000f91e:	83 c4 20             	add    esp,0x20
c000f921:	5b                   	pop    ebx
c000f922:	5e                   	pop    esi
c000f923:	5f                   	pop    edi
c000f924:	c3                   	ret    

c000f925 <Phys::allocateDMA(unsigned long)>:
c000f925:	55                   	push   ebp
c000f926:	31 d2                	xor    edx,edx
c000f928:	57                   	push   edi
c000f929:	31 ed                	xor    ebp,ebp
c000f92b:	56                   	push   esi
c000f92c:	31 c9                	xor    ecx,ecx
c000f92e:	53                   	push   ebx
c000f92f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f933:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000f939:	31 c0                	xor    eax,eax
c000f93b:	c1 ee 0c             	shr    esi,0xc
c000f93e:	eb 17                	jmp    c000f957 <Phys::allocateDMA(unsigned long)+0x32>
c000f940:	85 c9                	test   ecx,ecx
c000f942:	75 04                	jne    c000f948 <Phys::allocateDMA(unsigned long)+0x23>
c000f944:	89 d5                	mov    ebp,edx
c000f946:	89 d0                	mov    eax,edx
c000f948:	8d 59 01             	lea    ebx,[ecx+0x1]
c000f94b:	39 de                	cmp    esi,ebx
c000f94d:	74 20                	je     c000f96f <Phys::allocateDMA(unsigned long)+0x4a>
c000f94f:	42                   	inc    edx
c000f950:	89 d9                	mov    ecx,ebx
c000f952:	83 fa 2f             	cmp    edx,0x2f
c000f955:	7f 11                	jg     c000f968 <Phys::allocateDMA(unsigned long)+0x43>
c000f957:	80 ba e0 c9 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd3620],0x0
c000f95e:	74 e0                	je     c000f940 <Phys::allocateDMA(unsigned long)+0x1b>
c000f960:	31 c9                	xor    ecx,ecx
c000f962:	42                   	inc    edx
c000f963:	83 fa 2f             	cmp    edx,0x2f
c000f966:	7e ef                	jle    c000f957 <Phys::allocateDMA(unsigned long)+0x32>
c000f968:	5b                   	pop    ebx
c000f969:	31 c0                	xor    eax,eax
c000f96b:	5e                   	pop    esi
c000f96c:	5f                   	pop    edi
c000f96d:	5d                   	pop    ebp
c000f96e:	c3                   	ret    
c000f96f:	8d 14 30             	lea    edx,[eax+esi*1]
c000f972:	89 d7                	mov    edi,edx
c000f974:	4f                   	dec    edi
c000f975:	79 03                	jns    c000f97a <Phys::allocateDMA(unsigned long)+0x55>
c000f977:	8d 7a 0e             	lea    edi,[edx+0xe]
c000f97a:	c1 ff 04             	sar    edi,0x4
c000f97d:	89 c2                	mov    edx,eax
c000f97f:	c1 fa 04             	sar    edx,0x4
c000f982:	39 fa                	cmp    edx,edi
c000f984:	75 2f                	jne    c000f9b5 <Phys::allocateDMA(unsigned long)+0x90>
c000f986:	85 db                	test   ebx,ebx
c000f988:	74 1a                	je     c000f9a4 <Phys::allocateDMA(unsigned long)+0x7f>
c000f98a:	be e0 c9 02 c0       	mov    esi,0xc002c9e0
c000f98f:	8d 90 e0 c9 02 c0    	lea    edx,[eax-0x3ffd3620]
c000f995:	f7 d6                	not    esi
c000f997:	29 c6                	sub    esi,eax
c000f999:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f99c:	42                   	inc    edx
c000f99d:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000f9a0:	39 d9                	cmp    ecx,ebx
c000f9a2:	7f f5                	jg     c000f999 <Phys::allocateDMA(unsigned long)+0x74>
c000f9a4:	85 ff                	test   edi,edi
c000f9a6:	74 13                	je     c000f9bb <Phys::allocateDMA(unsigned long)+0x96>
c000f9a8:	5b                   	pop    ebx
c000f9a9:	05 50 20 0c 00       	add    eax,0xc2050
c000f9ae:	5e                   	pop    esi
c000f9af:	c1 e0 0c             	shl    eax,0xc
c000f9b2:	5f                   	pop    edi
c000f9b3:	5d                   	pop    ebp
c000f9b4:	c3                   	ret    
c000f9b5:	89 ea                	mov    edx,ebp
c000f9b7:	31 c9                	xor    ecx,ecx
c000f9b9:	eb a7                	jmp    c000f962 <Phys::allocateDMA(unsigned long)+0x3d>
c000f9bb:	5b                   	pop    ebx
c000f9bc:	c1 e0 0c             	shl    eax,0xc
c000f9bf:	5e                   	pop    esi
c000f9c0:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000f9c5:	5f                   	pop    edi
c000f9c6:	5d                   	pop    ebp
c000f9c7:	c3                   	ret    

c000f9c8 <Phys::freeDMA(unsigned long, unsigned long)>:
c000f9c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f9cc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f9d0:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000f9d6:	c1 e9 0c             	shr    ecx,0xc
c000f9d9:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000f9de:	76 25                	jbe    c000fa05 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000f9e0:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000f9e5:	c1 e8 0c             	shr    eax,0xc
c000f9e8:	8d 50 10             	lea    edx,[eax+0x10]
c000f9eb:	85 c9                	test   ecx,ecx
c000f9ed:	74 15                	je     c000fa04 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000f9ef:	8d 82 e0 c9 02 c0    	lea    eax,[edx-0x3ffd3620]
c000f9f5:	8d 94 11 e0 c9 02 c0 	lea    edx,[ecx+edx*1-0x3ffd3620]
c000f9fc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f9ff:	40                   	inc    eax
c000fa00:	39 d0                	cmp    eax,edx
c000fa02:	75 f8                	jne    c000f9fc <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fa04:	c3                   	ret    
c000fa05:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fa0b:	c1 ea 0c             	shr    edx,0xc
c000fa0e:	eb db                	jmp    c000f9eb <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fa10 <Phys::setPageState(unsigned long, bool)>:
c000fa10:	56                   	push   esi
c000fa11:	ba 01 00 00 00       	mov    edx,0x1
c000fa16:	53                   	push   ebx
c000fa17:	8b 35 b0 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b8b0
c000fa1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa21:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fa25:	89 c8                	mov    eax,ecx
c000fa27:	83 e1 07             	and    ecx,0x7
c000fa2a:	c1 e8 03             	shr    eax,0x3
c000fa2d:	d3 e3                	shl    ebx,cl
c000fa2f:	01 c6                	add    esi,eax
c000fa31:	d3 e2                	shl    edx,cl
c000fa33:	f7 d2                	not    edx
c000fa35:	20 16                	and    BYTE PTR [esi],dl
c000fa37:	03 05 b0 b8 02 c0    	add    eax,DWORD PTR ds:0xc002b8b0
c000fa3d:	08 18                	or     BYTE PTR [eax],bl
c000fa3f:	5b                   	pop    ebx
c000fa40:	5e                   	pop    esi
c000fa41:	c3                   	ret    

c000fa42 <Phys::getPageState(unsigned long)>:
c000fa42:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fa46:	8b 15 b0 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b8b0
c000fa4c:	89 c8                	mov    eax,ecx
c000fa4e:	83 e1 07             	and    ecx,0x7
c000fa51:	c1 e8 03             	shr    eax,0x3
c000fa54:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fa58:	d3 f8                	sar    eax,cl
c000fa5a:	83 e0 01             	and    eax,0x1
c000fa5d:	c3                   	ret    

c000fa5e <Phys::freePage(unsigned long)>:
c000fa5e:	53                   	push   ebx
c000fa5f:	83 ec 08             	sub    esp,0x8
c000fa62:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa66:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fa6c:	76 57                	jbe    c000fac5 <Phys::freePage(unsigned long)+0x67>
c000fa6e:	c1 eb 0c             	shr    ebx,0xc
c000fa71:	53                   	push   ebx
c000fa72:	e8 cb ff ff ff       	call   c000fa42 <Phys::getPageState(unsigned long)>
c000fa77:	5a                   	pop    edx
c000fa78:	84 c0                	test   al,al
c000fa7a:	74 5b                	je     c000fad7 <Phys::freePage(unsigned long)+0x79>
c000fa7c:	a1 cc c9 02 c0       	mov    eax,ds:0xc002c9cc
c000fa81:	48                   	dec    eax
c000fa82:	a3 cc c9 02 c0       	mov    ds:0xc002c9cc,eax
c000fa87:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa8a:	8d 04 80             	lea    eax,[eax+eax*4]
c000fa8d:	c1 e0 02             	shl    eax,0x2
c000fa90:	99                   	cdq    
c000fa91:	f7 3d d0 c9 02 c0    	idiv   DWORD PTR ds:0xc002c9d0
c000fa97:	39 05 c8 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9c8,eax
c000fa9d:	75 13                	jne    c000fab2 <Phys::freePage(unsigned long)+0x54>
c000fa9f:	83 ec 08             	sub    esp,0x8
c000faa2:	6a 00                	push   0x0
c000faa4:	53                   	push   ebx
c000faa5:	e8 66 ff ff ff       	call   c000fa10 <Phys::setPageState(unsigned long, bool)>
c000faaa:	83 c4 10             	add    esp,0x10
c000faad:	83 c4 08             	add    esp,0x8
c000fab0:	5b                   	pop    ebx
c000fab1:	c3                   	ret    
c000fab2:	83 ec 0c             	sub    esp,0xc
c000fab5:	a3 c8 c9 02 c0       	mov    ds:0xc002c9c8,eax
c000faba:	50                   	push   eax
c000fabb:	e8 6e 0a 00 00       	call   c001052e <VgaText::updateRAMUsageDisplay(int)>
c000fac0:	83 c4 10             	add    esp,0x10
c000fac3:	eb da                	jmp    c000fa9f <Phys::freePage(unsigned long)+0x41>
c000fac5:	68 00 10 00 00       	push   0x1000
c000faca:	53                   	push   ebx
c000facb:	e8 f8 fe ff ff       	call   c000f9c8 <Phys::freeDMA(unsigned long, unsigned long)>
c000fad0:	59                   	pop    ecx
c000fad1:	5b                   	pop    ebx
c000fad2:	83 c4 08             	add    esp,0x8
c000fad5:	5b                   	pop    ebx
c000fad6:	c3                   	ret    
c000fad7:	c7 44 24 10 c7 8b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028bc7
c000fadf:	83 c4 08             	add    esp,0x8
c000fae2:	5b                   	pop    ebx
c000fae3:	e9 f3 9d 00 00       	jmp    c00198db <Krnl::panic(char const*)>

c000fae8 <Phys::allocatePage()>:
c000fae8:	56                   	push   esi
c000fae9:	53                   	push   ebx
c000faea:	51                   	push   ecx
c000faeb:	8b 35 c0 c9 02 c0    	mov    esi,DWORD PTR ds:0xc002c9c0
c000faf1:	89 f3                	mov    ebx,esi
c000faf3:	eb 0a                	jmp    c000faff <Phys::allocatePage()+0x17>
c000faf5:	89 1d c0 c9 02 c0    	mov    DWORD PTR ds:0xc002c9c0,ebx
c000fafb:	39 de                	cmp    esi,ebx
c000fafd:	74 24                	je     c000fb23 <Phys::allocatePage()+0x3b>
c000faff:	53                   	push   ebx
c000fb00:	e8 3d ff ff ff       	call   c000fa42 <Phys::getPageState(unsigned long)>
c000fb05:	5a                   	pop    edx
c000fb06:	84 c0                	test   al,al
c000fb08:	74 5a                	je     c000fb64 <Phys::allocatePage()+0x7c>
c000fb0a:	43                   	inc    ebx
c000fb0b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fb11:	75 e2                	jne    c000faf5 <Phys::allocatePage()+0xd>
c000fb13:	31 db                	xor    ebx,ebx
c000fb15:	c7 05 c0 c9 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c9c0,0x0
c000fb1f:	39 de                	cmp    esi,ebx
c000fb21:	75 dc                	jne    c000faff <Phys::allocatePage()+0x17>
c000fb23:	83 ec 0c             	sub    esp,0xc
c000fb26:	68 dd 8b 02 c0       	push   0xc0028bdd
c000fb2b:	e8 91 2c 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000fb30:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000fb37:	e8 e9 fd ff ff       	call   c000f925 <Phys::allocateDMA(unsigned long)>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	85 c0                	test   eax,eax
c000fb41:	75 56                	jne    c000fb99 <Phys::allocatePage()+0xb1>
c000fb43:	83 ec 0c             	sub    esp,0xc
c000fb46:	68 ee 8b 02 c0       	push   0xc0028bee
c000fb4b:	e8 8b 9d 00 00       	call   c00198db <Krnl::panic(char const*)>
c000fb50:	83 c4 10             	add    esp,0x10
c000fb53:	8b 1d c0 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9c0
c000fb59:	53                   	push   ebx
c000fb5a:	e8 e3 fe ff ff       	call   c000fa42 <Phys::getPageState(unsigned long)>
c000fb5f:	5a                   	pop    edx
c000fb60:	84 c0                	test   al,al
c000fb62:	75 a6                	jne    c000fb0a <Phys::allocatePage()+0x22>
c000fb64:	6a 01                	push   0x1
c000fb66:	53                   	push   ebx
c000fb67:	e8 a4 fe ff ff       	call   c000fa10 <Phys::setPageState(unsigned long, bool)>
c000fb6c:	a1 cc c9 02 c0       	mov    eax,ds:0xc002c9cc
c000fb71:	59                   	pop    ecx
c000fb72:	40                   	inc    eax
c000fb73:	5b                   	pop    ebx
c000fb74:	a3 cc c9 02 c0       	mov    ds:0xc002c9cc,eax
c000fb79:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb7c:	8d 04 80             	lea    eax,[eax+eax*4]
c000fb7f:	c1 e0 02             	shl    eax,0x2
c000fb82:	99                   	cdq    
c000fb83:	f7 3d d0 c9 02 c0    	idiv   DWORD PTR ds:0xc002c9d0
c000fb89:	39 05 c8 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9c8,eax
c000fb8f:	75 0c                	jne    c000fb9d <Phys::allocatePage()+0xb5>
c000fb91:	a1 c0 c9 02 c0       	mov    eax,ds:0xc002c9c0
c000fb96:	c1 e0 0c             	shl    eax,0xc
c000fb99:	5a                   	pop    edx
c000fb9a:	5b                   	pop    ebx
c000fb9b:	5e                   	pop    esi
c000fb9c:	c3                   	ret    
c000fb9d:	83 ec 0c             	sub    esp,0xc
c000fba0:	a3 c8 c9 02 c0       	mov    ds:0xc002c9c8,eax
c000fba5:	50                   	push   eax
c000fba6:	e8 83 09 00 00       	call   c001052e <VgaText::updateRAMUsageDisplay(int)>
c000fbab:	83 c4 10             	add    esp,0x10
c000fbae:	eb e1                	jmp    c000fb91 <Phys::allocatePage()+0xa9>

c000fbb0 <Phys::allocateContiguousPages(int)>:
c000fbb0:	57                   	push   edi
c000fbb1:	56                   	push   esi
c000fbb2:	53                   	push   ebx
c000fbb3:	31 db                	xor    ebx,ebx
c000fbb5:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000fbb9:	e8 ac d1 00 00       	call   c001cd6a <lockScheduler()>
c000fbbe:	85 db                	test   ebx,ebx
c000fbc0:	75 11                	jne    c000fbd3 <Phys::allocateContiguousPages(int)+0x23>
c000fbc2:	e8 21 ff ff ff       	call   c000fae8 <Phys::allocatePage()>
c000fbc7:	83 ff 01             	cmp    edi,0x1
c000fbca:	89 c6                	mov    esi,eax
c000fbcc:	74 21                	je     c000fbef <Phys::allocateContiguousPages(int)+0x3f>
c000fbce:	bb 01 00 00 00       	mov    ebx,0x1
c000fbd3:	e8 10 ff ff ff       	call   c000fae8 <Phys::allocatePage()>
c000fbd8:	89 da                	mov    edx,ebx
c000fbda:	c1 e2 0c             	shl    edx,0xc
c000fbdd:	01 f2                	add    edx,esi
c000fbdf:	39 c2                	cmp    edx,eax
c000fbe1:	74 17                	je     c000fbfa <Phys::allocateContiguousPages(int)+0x4a>
c000fbe3:	bb 01 00 00 00       	mov    ebx,0x1
c000fbe8:	89 c6                	mov    esi,eax
c000fbea:	83 ff 01             	cmp    edi,0x1
c000fbed:	75 e4                	jne    c000fbd3 <Phys::allocateContiguousPages(int)+0x23>
c000fbef:	e8 78 d1 00 00       	call   c001cd6c <unlockScheduler()>
c000fbf4:	89 f0                	mov    eax,esi
c000fbf6:	5b                   	pop    ebx
c000fbf7:	5e                   	pop    esi
c000fbf8:	5f                   	pop    edi
c000fbf9:	c3                   	ret    
c000fbfa:	43                   	inc    ebx
c000fbfb:	39 fb                	cmp    ebx,edi
c000fbfd:	75 bf                	jne    c000fbbe <Phys::allocateContiguousPages(int)+0xe>
c000fbff:	e8 68 d1 00 00       	call   c001cd6c <unlockScheduler()>
c000fc04:	89 f0                	mov    eax,esi
c000fc06:	5b                   	pop    ebx
c000fc07:	5e                   	pop    esi
c000fc08:	5f                   	pop    edi
c000fc09:	c3                   	ret    

c000fc0a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000fc0a:	56                   	push   esi
c000fc0b:	53                   	push   ebx
c000fc0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc10:	39 1d c4 c9 02 c0    	cmp    DWORD PTR ds:0xc002c9c4,ebx
c000fc16:	73 06                	jae    c000fc1e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000fc18:	89 1d c4 c9 02 c0    	mov    DWORD PTR ds:0xc002c9c4,ebx
c000fc1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc22:	c1 eb 0c             	shr    ebx,0xc
c000fc25:	c1 e8 0c             	shr    eax,0xc
c000fc28:	39 d8                	cmp    eax,ebx
c000fc2a:	73 13                	jae    c000fc3f <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000fc2c:	6a 00                	push   0x0
c000fc2e:	8d 70 01             	lea    esi,[eax+0x1]
c000fc31:	50                   	push   eax
c000fc32:	e8 d9 fd ff ff       	call   c000fa10 <Phys::setPageState(unsigned long, bool)>
c000fc37:	5a                   	pop    edx
c000fc38:	89 f0                	mov    eax,esi
c000fc3a:	59                   	pop    ecx
c000fc3b:	39 f3                	cmp    ebx,esi
c000fc3d:	75 ed                	jne    c000fc2c <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000fc3f:	5b                   	pop    ebx
c000fc40:	5e                   	pop    esi
c000fc41:	c3                   	ret    

c000fc42 <Phys::physicalMemorySetup(unsigned int)>:
c000fc42:	55                   	push   ebp
c000fc43:	57                   	push   edi
c000fc44:	56                   	push   esi
c000fc45:	53                   	push   ebx
c000fc46:	31 db                	xor    ebx,ebx
c000fc48:	83 ec 40             	sub    esp,0x40
c000fc4b:	6a 30                	push   0x30
c000fc4d:	6a 00                	push   0x0
c000fc4f:	68 e0 c9 02 c0       	push   0xc002c9e0
c000fc54:	e8 32 0a ff ff       	call   c000068b <memset>
c000fc59:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000fc5d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc62:	05 00 10 00 00       	add    eax,0x1000
c000fc67:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000fc6b:	83 c4 10             	add    esp,0x10
c000fc6e:	83 ec 08             	sub    esp,0x8
c000fc71:	6a 01                	push   0x1
c000fc73:	53                   	push   ebx
c000fc74:	43                   	inc    ebx
c000fc75:	e8 96 fd ff ff       	call   c000fa10 <Phys::setPageState(unsigned long, bool)>
c000fc7a:	83 c4 10             	add    esp,0x10
c000fc7d:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fc83:	75 e9                	jne    c000fc6e <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000fc85:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000fc8c:	66 85 c0             	test   ax,ax
c000fc8f:	0f 84 8e 01 00 00    	je     c000fe23 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c000fc95:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000fc99:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fca1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fca5:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fcaa:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fcae:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fcb6:	eb 15                	jmp    c000fccd <Phys::physicalMemorySetup(unsigned int)+0x8b>
c000fcb8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000fcbc:	83 c3 18             	add    ebx,0x18
c000fcbf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fcc3:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fcc7:	0f 84 66 01 00 00    	je     c000fe33 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fccd:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fcd0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fcd3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fcd6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fcda:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fcde:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fce0:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fce3:	01 f0                	add    eax,esi
c000fce5:	55                   	push   ebp
c000fce6:	11 fa                	adc    edx,edi
c000fce8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fcec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fcf0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fcf4:	56                   	push   esi
c000fcf5:	68 28 8c 02 c0       	push   0xc0028c28
c000fcfa:	e8 c2 2a 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000fcff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fd03:	83 c4 10             	add    esp,0x10
c000fd06:	09 f8                	or     eax,edi
c000fd08:	0f 85 25 01 00 00    	jne    c000fe33 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c000fd0e:	4d                   	dec    ebp
c000fd0f:	75 a7                	jne    c000fcb8 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd11:	ba 00 00 08 00       	mov    edx,0x80000
c000fd16:	89 c1                	mov    ecx,eax
c000fd18:	39 f2                	cmp    edx,esi
c000fd1a:	19 f9                	sbb    ecx,edi
c000fd1c:	0f 82 a7 00 00 00    	jb     c000fdc9 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd22:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fd26:	89 c1                	mov    ecx,eax
c000fd28:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fd2c:	0f 83 97 00 00 00    	jae    c000fdc9 <Phys::physicalMemorySetup(unsigned int)+0x187>
c000fd32:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fd37:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fd3b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fd3f:	39 fa                	cmp    edx,edi
c000fd41:	19 e8                	sbb    eax,ebp
c000fd43:	0f 82 14 01 00 00    	jb     c000fe5d <Phys::physicalMemorySetup(unsigned int)+0x21b>
c000fd49:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fd4d:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fd51:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fd57:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fd5c:	83 d5 ff             	adc    ebp,0xffffffff
c000fd5f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fd63:	31 c0                	xor    eax,eax
c000fd65:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fd69:	39 fa                	cmp    edx,edi
c000fd6b:	89 c1                	mov    ecx,eax
c000fd6d:	19 e9                	sbb    ecx,ebp
c000fd6f:	0f 83 43 ff ff ff    	jae    c000fcb8 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fd75:	be 00 00 08 00       	mov    esi,0x80000
c000fd7a:	50                   	push   eax
c000fd7b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fd7f:	57                   	push   edi
c000fd80:	56                   	push   esi
c000fd81:	68 4c 8c 02 c0       	push   0xc0028c4c
c000fd86:	e8 36 2a 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000fd8b:	5a                   	pop    edx
c000fd8c:	59                   	pop    ecx
c000fd8d:	57                   	push   edi
c000fd8e:	56                   	push   esi
c000fd8f:	e8 76 fe ff ff       	call   c000fc0a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fd94:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fd98:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fd9c:	83 c4 0c             	add    esp,0xc
c000fd9f:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fda3:	03 05 d0 c9 02 c0    	add    eax,DWORD PTR ds:0xc002c9d0
c000fda9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fdb0:	a3 d0 c9 02 c0       	mov    ds:0xc002c9d0,eax
c000fdb5:	52                   	push   edx
c000fdb6:	50                   	push   eax
c000fdb7:	68 0a 8c 02 c0       	push   0xc0028c0a
c000fdbc:	e8 00 2a 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c000fdc1:	83 c4 10             	add    esp,0x10
c000fdc4:	e9 ef fe ff ff       	jmp    c000fcb8 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdc9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fdcd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fdd1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fdd5:	39 ea                	cmp    edx,ebp
c000fdd7:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fddb:	0f 82 d7 fe ff ff    	jb     c000fcb8 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fde1:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fde6:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fdea:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fdee:	0f 83 c4 fe ff ff    	jae    c000fcb8 <Phys::physicalMemorySetup(unsigned int)+0x76>
c000fdf4:	39 ee                	cmp    esi,ebp
c000fdf6:	89 f8                	mov    eax,edi
c000fdf8:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fdfc:	0f 83 78 ff ff ff    	jae    c000fd7a <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe06:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe0a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fe0e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fe12:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fe16:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fe1a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fe1e:	e9 57 ff ff ff       	jmp    c000fd7a <Phys::physicalMemorySetup(unsigned int)+0x138>
c000fe23:	83 ec 0c             	sub    esp,0xc
c000fe26:	68 fc 8b 02 c0       	push   0xc0028bfc
c000fe2b:	e8 ab 9a 00 00       	call   c00198db <Krnl::panic(char const*)>
c000fe30:	83 c4 10             	add    esp,0x10
c000fe33:	bb 40 01 00 00       	mov    ebx,0x140
c000fe38:	83 ec 08             	sub    esp,0x8
c000fe3b:	6a 00                	push   0x0
c000fe3d:	53                   	push   ebx
c000fe3e:	43                   	inc    ebx
c000fe3f:	e8 cc fb ff ff       	call   c000fa10 <Phys::setPageState(unsigned long, bool)>
c000fe44:	ff 05 d0 c9 02 c0    	inc    DWORD PTR ds:0xc002c9d0
c000fe4a:	83 c4 10             	add    esp,0x10
c000fe4d:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000fe53:	75 e3                	jne    c000fe38 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c000fe55:	83 c4 3c             	add    esp,0x3c
c000fe58:	5b                   	pop    ebx
c000fe59:	5e                   	pop    esi
c000fe5a:	5f                   	pop    edi
c000fe5b:	5d                   	pop    ebp
c000fe5c:	c3                   	ret    
c000fe5d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fe65:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fe6d:	e9 d7 fe ff ff       	jmp    c000fd49 <Phys::physicalMemorySetup(unsigned int)+0x107>

c000fe72 <Pipe::isAtty()>:
c000fe72:	31 c0                	xor    eax,eax
c000fe74:	c3                   	ret    
c000fe75:	90                   	nop

c000fe76 <Pipe::~Pipe()>:
c000fe76:	83 ec 0c             	sub    esp,0xc
c000fe79:	ba b8 8c 02 c0       	mov    edx,0xc0028cb8
c000fe7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe82:	89 10                	mov    DWORD PTR [eax],edx
c000fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe88:	83 ec 0c             	sub    esp,0xc
c000fe8b:	50                   	push   eax
c000fe8c:	e8 df 16 00 00       	call   c0011570 <UnixFile::~UnixFile()>
c000fe91:	83 c4 10             	add    esp,0x10
c000fe94:	90                   	nop
c000fe95:	83 c4 0c             	add    esp,0xc
c000fe98:	c3                   	ret    
c000fe99:	90                   	nop

c000fe9a <Pipe::~Pipe()>:
c000fe9a:	83 ec 0c             	sub    esp,0xc
c000fe9d:	83 ec 0c             	sub    esp,0xc
c000fea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fea4:	e8 cd ff ff ff       	call   c000fe76 <Pipe::~Pipe()>
c000fea9:	83 c4 10             	add    esp,0x10
c000feac:	83 ec 08             	sub    esp,0x8
c000feaf:	6a 20                	push   0x20
c000feb1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feb5:	e8 27 28 00 00       	call   c00126e1 <operator delete(void*, unsigned long)>
c000feba:	83 c4 10             	add    esp,0x10
c000febd:	83 c4 0c             	add    esp,0xc
c000fec0:	c3                   	ret    
c000fec1:	90                   	nop

c000fec2 <Pipe::read(unsigned long long, void*, int*)>:
c000fec2:	55                   	push   ebp
c000fec3:	57                   	push   edi
c000fec4:	56                   	push   esi
c000fec5:	53                   	push   ebx
c000fec6:	83 ec 1c             	sub    esp,0x1c
c000fec9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fecd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fed1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fed5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fed8:	89 c8                	mov    eax,ecx
c000feda:	99                   	cdq    
c000fedb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fedf:	74 19                	je     c000fefa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fee1:	39 f9                	cmp    ecx,edi
c000fee3:	89 d1                	mov    ecx,edx
c000fee5:	19 f1                	sbb    ecx,esi
c000fee7:	73 11                	jae    c000fefa <Pipe::read(unsigned long long, void*, int*)+0x38>
c000fee9:	e8 7c ce 00 00       	call   c001cd6a <lockScheduler()>
c000feee:	e8 b3 d1 00 00       	call   c001d0a6 <schedule()>
c000fef3:	e8 74 ce 00 00       	call   c001cd6c <unlockScheduler()>
c000fef8:	eb db                	jmp    c000fed5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fefa:	39 f8                	cmp    eax,edi
c000fefc:	89 d1                	mov    ecx,edx
c000fefe:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ff02:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000ff06:	19 f1                	sbb    ecx,esi
c000ff08:	73 08                	jae    c000ff12 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000ff0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ff0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ff12:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff15:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff18:	29 c6                	sub    esi,eax
c000ff1a:	89 f1                	mov    ecx,esi
c000ff1c:	c1 f9 1f             	sar    ecx,0x1f
c000ff1f:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000ff23:	89 ca                	mov    edx,ecx
c000ff25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ff29:	19 d1                	sbb    ecx,edx
c000ff2b:	73 04                	jae    c000ff31 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000ff2d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ff31:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ff35:	89 fd                	mov    ebp,edi
c000ff37:	29 f5                	sub    ebp,esi
c000ff39:	85 f6                	test   esi,esi
c000ff3b:	74 12                	je     c000ff4f <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000ff3d:	52                   	push   edx
c000ff3e:	56                   	push   esi
c000ff3f:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000ff42:	50                   	push   eax
c000ff43:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ff47:	e8 09 07 ff ff       	call   c0000655 <memcpy>
c000ff4c:	83 c4 10             	add    esp,0x10
c000ff4f:	85 ed                	test   ebp,ebp
c000ff51:	74 12                	je     c000ff65 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ff53:	50                   	push   eax
c000ff54:	55                   	push   ebp
c000ff55:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ff58:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ff5c:	56                   	push   esi
c000ff5d:	e8 f3 06 ff ff       	call   c0000655 <memcpy>
c000ff62:	83 c4 10             	add    esp,0x10
c000ff65:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ff68:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ff6b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ff6e:	99                   	cdq    
c000ff6f:	89 f7                	mov    edi,esi
c000ff71:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ff75:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ff79:	c1 ff 1f             	sar    edi,0x1f
c000ff7c:	57                   	push   edi
c000ff7d:	56                   	push   esi
c000ff7e:	52                   	push   edx
c000ff7f:	50                   	push   eax
c000ff80:	e8 67 55 01 00       	call   c00254ec <__umoddi3>
c000ff85:	83 c4 10             	add    esp,0x10
c000ff88:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ff8b:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ff90:	75 10                	jne    c000ffa2 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ff92:	83 ec 0c             	sub    esp,0xc
c000ff95:	68 75 8c 02 c0       	push   0xc0028c75
c000ff9a:	e8 3c 99 00 00       	call   c00198db <Krnl::panic(char const*)>
c000ff9f:	83 c4 10             	add    esp,0x10
c000ffa2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ffa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffaa:	89 10                	mov    DWORD PTR [eax],edx
c000ffac:	83 c4 1c             	add    esp,0x1c
c000ffaf:	31 c0                	xor    eax,eax
c000ffb1:	5b                   	pop    ebx
c000ffb2:	5e                   	pop    esi
c000ffb3:	5f                   	pop    edi
c000ffb4:	5d                   	pop    ebp
c000ffb5:	c3                   	ret    

c000ffb6 <Pipe::write(unsigned long long, void*, int*)>:
c000ffb6:	55                   	push   ebp
c000ffb7:	57                   	push   edi
c000ffb8:	56                   	push   esi
c000ffb9:	53                   	push   ebx
c000ffba:	83 ec 1c             	sub    esp,0x1c
c000ffbd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ffc1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ffc5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ffc9:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffcc:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ffcf:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ffd2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ffd6:	89 de                	mov    esi,ebx
c000ffd8:	89 df                	mov    edi,ebx
c000ffda:	c1 ff 1f             	sar    edi,0x1f
c000ffdd:	01 c6                	add    esi,eax
c000ffdf:	89 c8                	mov    eax,ecx
c000ffe1:	11 d7                	adc    edi,edx
c000ffe3:	99                   	cdq    
c000ffe4:	39 f1                	cmp    ecx,esi
c000ffe6:	89 d0                	mov    eax,edx
c000ffe8:	19 f8                	sbb    eax,edi
c000ffea:	b8 01 00 00 00       	mov    eax,0x1
c000ffef:	0f 82 80 00 00 00    	jb     c0010075 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000fff5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fff8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000fffb:	01 d8                	add    eax,ebx
c000fffd:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010001:	99                   	cdq    
c0010002:	f7 f9                	idiv   ecx
c0010004:	29 d1                	sub    ecx,edx
c0010006:	89 d7                	mov    edi,edx
c0010008:	89 c8                	mov    eax,ecx
c001000a:	99                   	cdq    
c001000b:	39 ce                	cmp    esi,ecx
c001000d:	19 d3                	sbb    ebx,edx
c001000f:	bb 00 00 00 00       	mov    ebx,0x0
c0010014:	72 04                	jb     c001001a <Pipe::write(unsigned long long, void*, int*)+0x64>
c0010016:	89 f3                	mov    ebx,esi
c0010018:	29 cb                	sub    ebx,ecx
c001001a:	89 f1                	mov    ecx,esi
c001001c:	29 d9                	sub    ecx,ebx
c001001e:	74 1a                	je     c001003a <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010020:	52                   	push   edx
c0010021:	51                   	push   ecx
c0010022:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010026:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001002a:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c001002d:	57                   	push   edi
c001002e:	e8 22 06 ff ff       	call   c0000655 <memcpy>
c0010033:	83 c4 10             	add    esp,0x10
c0010036:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001003a:	85 db                	test   ebx,ebx
c001003c:	74 12                	je     c0010050 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c001003e:	50                   	push   eax
c001003f:	53                   	push   ebx
c0010040:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c0010044:	51                   	push   ecx
c0010045:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0010048:	e8 08 06 ff ff       	call   c0000655 <memcpy>
c001004d:	83 c4 10             	add    esp,0x10
c0010050:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c0010053:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010058:	75 10                	jne    c001006a <Pipe::write(unsigned long long, void*, int*)+0xb4>
c001005a:	83 ec 0c             	sub    esp,0xc
c001005d:	68 91 8c 02 c0       	push   0xc0028c91
c0010062:	e8 74 98 00 00       	call   c00198db <Krnl::panic(char const*)>
c0010067:	83 c4 10             	add    esp,0x10
c001006a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001006e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0010071:	89 38                	mov    DWORD PTR [eax],edi
c0010073:	31 c0                	xor    eax,eax
c0010075:	83 c4 1c             	add    esp,0x1c
c0010078:	5b                   	pop    ebx
c0010079:	5e                   	pop    esi
c001007a:	5f                   	pop    edi
c001007b:	5d                   	pop    ebp
c001007c:	c3                   	ret    
c001007d:	90                   	nop

c001007e <Pipe::Pipe(int)>:
c001007e:	83 ec 0c             	sub    esp,0xc
c0010081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010085:	83 ec 08             	sub    esp,0x8
c0010088:	6a 00                	push   0x0
c001008a:	50                   	push   eax
c001008b:	e8 fe 12 00 00       	call   c001138e <UnixFile::UnixFile(int)>
c0010090:	83 c4 10             	add    esp,0x10
c0010093:	ba b8 8c 02 c0       	mov    edx,0xc0028cb8
c0010098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001009c:	89 10                	mov    DWORD PTR [eax],edx
c001009e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00100a6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00100a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ad:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00100b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00100bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100c3:	83 ec 0c             	sub    esp,0xc
c00100c6:	50                   	push   eax
c00100c7:	e8 08 f4 ff ff       	call   c000f4d4 <malloc>
c00100cc:	83 c4 10             	add    esp,0x10
c00100cf:	89 c2                	mov    edx,eax
c00100d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00100d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100dc:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00100e0:	90                   	nop
c00100e1:	83 c4 0c             	add    esp,0xc
c00100e4:	c3                   	ret    
c00100e5:	90                   	nop

c00100e6 <VgaText::isAtty()>:
c00100e6:	b0 01                	mov    al,0x1
c00100e8:	c3                   	ret    
c00100e9:	90                   	nop

c00100ea <VgaText::~VgaText()>:
c00100ea:	83 ec 0c             	sub    esp,0xc
c00100ed:	ba 74 8d 02 c0       	mov    edx,0xc0028d74
c00100f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f6:	89 10                	mov    DWORD PTR [eax],edx
c00100f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100fc:	83 ec 0c             	sub    esp,0xc
c00100ff:	50                   	push   eax
c0010100:	e8 6b 14 00 00       	call   c0011570 <UnixFile::~UnixFile()>
c0010105:	83 c4 10             	add    esp,0x10
c0010108:	90                   	nop
c0010109:	83 c4 0c             	add    esp,0xc
c001010c:	c3                   	ret    
c001010d:	90                   	nop

c001010e <VgaText::~VgaText()>:
c001010e:	83 ec 0c             	sub    esp,0xc
c0010111:	83 ec 0c             	sub    esp,0xc
c0010114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010118:	e8 cd ff ff ff       	call   c00100ea <VgaText::~VgaText()>
c001011d:	83 c4 10             	add    esp,0x10
c0010120:	83 ec 08             	sub    esp,0x8
c0010123:	68 60 12 00 00       	push   0x1260
c0010128:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001012c:	e8 b0 25 00 00       	call   c00126e1 <operator delete(void*, unsigned long)>
c0010131:	83 c4 10             	add    esp,0x10
c0010134:	83 c4 0c             	add    esp,0xc
c0010137:	c3                   	ret    

c0010138 <VgaText::read(unsigned long long, void*, int*)>:
c0010138:	83 ec 10             	sub    esp,0x10
c001013b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001013f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010143:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010147:	e8 a9 58 00 00       	call   c00159f5 <readKeyboard(VgaText*, char*, unsigned long)>
c001014c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010150:	89 02                	mov    DWORD PTR [edx],eax
c0010152:	31 c0                	xor    eax,eax
c0010154:	83 c4 1c             	add    esp,0x1c
c0010157:	c3                   	ret    

c0010158 <setTerminalScrollLock(bool)>:
c0010158:	c3                   	ret    

c0010159 <addToTerminalCycle(VgaText*)>:
c0010159:	8b 15 60 ca 02 c0    	mov    edx,DWORD PTR ds:0xc002ca60
c001015f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010163:	85 d2                	test   edx,edx
c0010165:	75 0c                	jne    c0010173 <addToTerminalCycle(VgaText*)+0x1a>
c0010167:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c001016d:	a3 60 ca 02 c0       	mov    ds:0xc002ca60,eax
c0010172:	c3                   	ret    
c0010173:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c0010179:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c001017f:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c0010185:	c3                   	ret    

c0010186 <installVgaTextImplementation()>:
c0010186:	83 ec 10             	sub    esp,0x10
c0010189:	6a 20                	push   0x20
c001018b:	6a 00                	push   0x0
c001018d:	68 40 ca 02 c0       	push   0xc002ca40
c0010192:	e8 f4 04 ff ff       	call   c000068b <memset>
c0010197:	83 c4 1c             	add    esp,0x1c
c001019a:	c3                   	ret    

c001019b <scrollTerminalScrollLock(int)>:
c001019b:	c3                   	ret    

c001019c <VgaText::load()>:
c001019c:	53                   	push   ebx
c001019d:	31 c0                	xor    eax,eax
c001019f:	83 ec 58             	sub    esp,0x58
c00101a2:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00101a6:	89 e2                	mov    edx,esp
c00101a8:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00101ac:	40                   	inc    eax
c00101ad:	83 f8 50             	cmp    eax,0x50
c00101b0:	75 f6                	jne    c00101a8 <VgaText::load()+0xc>
c00101b2:	31 c0                	xor    eax,eax
c00101b4:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c00101bb:	84 c9                	test   cl,cl
c00101bd:	74 06                	je     c00101c5 <VgaText::load()+0x29>
c00101bf:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00101c2:	40                   	inc    eax
c00101c3:	eb ef                	jmp    c00101b4 <VgaText::load()+0x18>
c00101c5:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c00101cb:	85 c0                	test   eax,eax
c00101cd:	74 09                	je     c00101d8 <VgaText::load()+0x3c>
c00101cf:	51                   	push   ecx
c00101d0:	51                   	push   ecx
c00101d1:	52                   	push   edx
c00101d2:	53                   	push   ebx
c00101d3:	ff d0                	call   eax
c00101d5:	83 c4 10             	add    esp,0x10
c00101d8:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c00101de:	85 c0                	test   eax,eax
c00101e0:	74 09                	je     c00101eb <VgaText::load()+0x4f>
c00101e2:	83 ec 0c             	sub    esp,0xc
c00101e5:	53                   	push   ebx
c00101e6:	ff d0                	call   eax
c00101e8:	83 c4 10             	add    esp,0x10
c00101eb:	83 c4 58             	add    esp,0x58
c00101ee:	5b                   	pop    ebx
c00101ef:	c3                   	ret    

c00101f0 <VgaText::updateCursor()>:
c00101f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101f4:	39 05 64 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca64,eax
c00101fa:	75 0c                	jne    c0010208 <VgaText::updateCursor()+0x18>
c00101fc:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010202:	85 c0                	test   eax,eax
c0010204:	74 02                	je     c0010208 <VgaText::updateCursor()+0x18>
c0010206:	ff e0                	jmp    eax
c0010208:	c3                   	ret    
c0010209:	90                   	nop

c001020a <VgaText::showCursor(bool)>:
c001020a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001020e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010212:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010218:	c3                   	ret    
c0010219:	90                   	nop

c001021a <VgaText::disableBlink(bool)>:
c001021a:	56                   	push   esi
c001021b:	53                   	push   ebx
c001021c:	51                   	push   ecx
c001021d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010221:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010225:	39 1d 64 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca64,ebx
c001022b:	75 18                	jne    c0010245 <VgaText::disableBlink(bool)+0x2b>
c001022d:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010233:	85 c0                	test   eax,eax
c0010235:	74 0e                	je     c0010245 <VgaText::disableBlink(bool)+0x2b>
c0010237:	89 f1                	mov    ecx,esi
c0010239:	52                   	push   edx
c001023a:	52                   	push   edx
c001023b:	0f b6 d1             	movzx  edx,cl
c001023e:	52                   	push   edx
c001023f:	53                   	push   ebx
c0010240:	ff d0                	call   eax
c0010242:	83 c4 10             	add    esp,0x10
c0010245:	89 f0                	mov    eax,esi
c0010247:	83 f0 01             	xor    eax,0x1
c001024a:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c0010250:	58                   	pop    eax
c0010251:	5b                   	pop    ebx
c0010252:	5e                   	pop    esi
c0010253:	c3                   	ret    

c0010254 <VgaText::doANSI_SGR(int)>:
c0010254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001025c:	85 d2                	test   edx,edx
c001025e:	75 14                	jne    c0010274 <VgaText::doANSI_SGR(int)+0x20>
c0010260:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010266:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001026c:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c0010272:	eb 65                	jmp    c00102d9 <VgaText::doANSI_SGR(int)+0x85>
c0010274:	83 fa 07             	cmp    edx,0x7
c0010277:	75 14                	jne    c001028d <VgaText::doANSI_SGR(int)+0x39>
c0010279:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001027f:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010285:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c001028b:	eb 4c                	jmp    c00102d9 <VgaText::doANSI_SGR(int)+0x85>
c001028d:	83 fa 1b             	cmp    edx,0x1b
c0010290:	74 ce                	je     c0010260 <VgaText::doANSI_SGR(int)+0xc>
c0010292:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010295:	83 f9 07             	cmp    ecx,0x7
c0010298:	77 09                	ja     c00102a3 <VgaText::doANSI_SGR(int)+0x4f>
c001029a:	8b 14 8d e0 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4720]
c00102a1:	eb 20                	jmp    c00102c3 <VgaText::doANSI_SGR(int)+0x6f>
c00102a3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00102a6:	83 f9 07             	cmp    ecx,0x7
c00102a9:	77 09                	ja     c00102b4 <VgaText::doANSI_SGR(int)+0x60>
c00102ab:	8b 14 8d e0 b8 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd4720]
c00102b2:	eb 25                	jmp    c00102d9 <VgaText::doANSI_SGR(int)+0x85>
c00102b4:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00102b7:	83 f9 07             	cmp    ecx,0x7
c00102ba:	77 0e                	ja     c00102ca <VgaText::doANSI_SGR(int)+0x76>
c00102bc:	8b 14 95 98 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4868]
c00102c3:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00102c9:	c3                   	ret    
c00102ca:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00102cd:	83 f9 07             	cmp    ecx,0x7
c00102d0:	77 0d                	ja     c00102df <VgaText::doANSI_SGR(int)+0x8b>
c00102d2:	8b 14 95 70 b7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4890]
c00102d9:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00102df:	c3                   	ret    

c00102e0 <VgaText::setDefaultBgColour(VgaColour)>:
c00102e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102e8:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00102ee:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00102f4:	c3                   	ret    
c00102f5:	90                   	nop

c00102f6 <VgaText::setDefaultFgColour(VgaColour)>:
c00102f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102fe:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c0010304:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001030a:	c3                   	ret    
c001030b:	90                   	nop

c001030c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001030c:	53                   	push   ebx
c001030d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010311:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010315:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010319:	51                   	push   ecx
c001031a:	e8 c1 ff ff ff       	call   c00102e0 <VgaText::setDefaultBgColour(VgaColour)>
c001031f:	58                   	pop    eax
c0010320:	5a                   	pop    edx
c0010321:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010325:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010329:	5b                   	pop    ebx
c001032a:	eb ca                	jmp    c00102f6 <VgaText::setDefaultFgColour(VgaColour)>

c001032c <VgaText::combineColours(unsigned char, unsigned char)>:
c001032c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010330:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010334:	b0 02                	mov    al,0x2
c0010336:	80 3d 20 ca 02 c0 00 	cmp    BYTE PTR ds:0xc002ca20,0x0
c001033d:	75 0a                	jne    c0010349 <VgaText::combineColours(unsigned char, unsigned char)+0x1d>
c001033f:	83 e2 0f             	and    edx,0xf
c0010342:	c1 e1 04             	shl    ecx,0x4
c0010345:	88 c8                	mov    al,cl
c0010347:	09 d0                	or     eax,edx
c0010349:	c3                   	ret    

c001034a <VgaText::scrollScreen()>:
c001034a:	55                   	push   ebp
c001034b:	57                   	push   edi
c001034c:	bf 01 00 00 00       	mov    edi,0x1
c0010351:	56                   	push   esi
c0010352:	53                   	push   ebx
c0010353:	83 ec 0c             	sub    esp,0xc
c0010356:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001035a:	69 f7 a0 00 00 00    	imul   esi,edi,0xa0
c0010360:	31 ed                	xor    ebp,ebp
c0010362:	01 de                	add    esi,ebx
c0010364:	8a 46 0c             	mov    al,BYTE PTR [esi+0xc]
c0010367:	83 ff 17             	cmp    edi,0x17
c001036a:	88 86 6c ff ff ff    	mov    BYTE PTR [esi-0x94],al
c0010370:	75 28                	jne    c001039a <VgaText::scrollScreen()+0x50>
c0010372:	f7 c5 01 00 00 00    	test   ebp,0x1
c0010378:	74 1c                	je     c0010396 <VgaText::scrollScreen()+0x4c>
c001037a:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c0010381:	50                   	push   eax
c0010382:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010389:	50                   	push   eax
c001038a:	e8 9d ff ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c001038f:	5a                   	pop    edx
c0010390:	59                   	pop    ecx
c0010391:	88 46 0c             	mov    BYTE PTR [esi+0xc],al
c0010394:	eb 04                	jmp    c001039a <VgaText::scrollScreen()+0x50>
c0010396:	c6 46 0c 20          	mov    BYTE PTR [esi+0xc],0x20
c001039a:	45                   	inc    ebp
c001039b:	46                   	inc    esi
c001039c:	81 fd a0 00 00 00    	cmp    ebp,0xa0
c00103a2:	75 c0                	jne    c0010364 <VgaText::scrollScreen()+0x1a>
c00103a4:	47                   	inc    edi
c00103a5:	83 ff 18             	cmp    edi,0x18
c00103a8:	75 b0                	jne    c001035a <VgaText::scrollScreen()+0x10>
c00103aa:	39 1d 64 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca64,ebx
c00103b0:	75 24                	jne    c00103d6 <VgaText::scrollScreen()+0x8c>
c00103b2:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00103b9:	74 08                	je     c00103c3 <VgaText::scrollScreen()+0x79>
c00103bb:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c00103c1:	eb 13                	jmp    c00103d6 <VgaText::scrollScreen()+0x8c>
c00103c3:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c00103c9:	85 c0                	test   eax,eax
c00103cb:	74 09                	je     c00103d6 <VgaText::scrollScreen()+0x8c>
c00103cd:	83 ec 0c             	sub    esp,0xc
c00103d0:	53                   	push   ebx
c00103d1:	ff d0                	call   eax
c00103d3:	83 c4 10             	add    esp,0x10
c00103d6:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00103da:	83 c4 0c             	add    esp,0xc
c00103dd:	5b                   	pop    ebx
c00103de:	5e                   	pop    esi
c00103df:	5f                   	pop    edi
c00103e0:	5d                   	pop    ebp
c00103e1:	e9 0a fe ff ff       	jmp    c00101f0 <VgaText::updateCursor()>

c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>:
c00103e6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00103eb:	c1 e0 08             	shl    eax,0x8
c00103ee:	89 c2                	mov    edx,eax
c00103f0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00103f5:	09 d0                	or     eax,edx
c00103f7:	c3                   	ret    

c00103f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00103f8:	53                   	push   ebx
c00103f9:	83 ec 08             	sub    esp,0x8
c00103fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010400:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010405:	50                   	push   eax
c0010406:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001040b:	50                   	push   eax
c001040c:	e8 1b ff ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c0010411:	5a                   	pop    edx
c0010412:	0f b6 c0             	movzx  eax,al
c0010415:	59                   	pop    ecx
c0010416:	0f be 4c 24 14       	movsx  ecx,BYTE PTR [esp+0x14]
c001041b:	50                   	push   eax
c001041c:	51                   	push   ecx
c001041d:	e8 c4 ff ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010422:	5a                   	pop    edx
c0010423:	5a                   	pop    edx
c0010424:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001042a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c001042e:	0f b7 d2             	movzx  edx,dx
c0010431:	66 89 44 53 0c       	mov    WORD PTR [ebx+edx*2+0xc],ax
c0010436:	39 1d 64 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca64,ebx
c001043c:	75 14                	jne    c0010452 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001043e:	8b 83 18 10 00 00    	mov    eax,DWORD PTR [ebx+0x1018]
c0010444:	85 c0                	test   eax,eax
c0010446:	74 0a                	je     c0010452 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010448:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001044c:	83 c4 08             	add    esp,0x8
c001044f:	5b                   	pop    ebx
c0010450:	ff e0                	jmp    eax
c0010452:	83 c4 08             	add    esp,0x8
c0010455:	5b                   	pop    ebx
c0010456:	c3                   	ret    
c0010457:	90                   	nop

c0010458 <VgaText::getCursorX()>:
c0010458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001045c:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c0010462:	c3                   	ret    
c0010463:	90                   	nop

c0010464 <VgaText::getCursorY()>:
c0010464:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010468:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c001046e:	c3                   	ret    
c001046f:	90                   	nop

c0010470 <VgaText::setCursor(int, int)>:
c0010470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010474:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010478:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c001047e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010482:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010488:	e9 63 fd ff ff       	jmp    c00101f0 <VgaText::updateCursor()>
c001048d:	90                   	nop

c001048e <VgaText::setCursorX(int)>:
c001048e:	83 ec 10             	sub    esp,0x10
c0010491:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010495:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c001049b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001049f:	50                   	push   eax
c00104a0:	e8 cb ff ff ff       	call   c0010470 <VgaText::setCursor(int, int)>
c00104a5:	83 c4 1c             	add    esp,0x1c
c00104a8:	c3                   	ret    
c00104a9:	90                   	nop

c00104aa <VgaText::setCursorY(int)>:
c00104aa:	83 ec 10             	sub    esp,0x10
c00104ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00104b1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00104b5:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00104bb:	50                   	push   eax
c00104bc:	e8 af ff ff ff       	call   c0010470 <VgaText::setCursor(int, int)>
c00104c1:	83 c4 1c             	add    esp,0x1c
c00104c4:	c3                   	ret    
c00104c5:	90                   	nop

c00104c6 <VgaText::incrementCursor(bool)>:
c00104c6:	56                   	push   esi
c00104c7:	53                   	push   ebx
c00104c8:	51                   	push   ecx
c00104c9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00104cd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00104d1:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c00104d7:	40                   	inc    eax
c00104d8:	83 f8 50             	cmp    eax,0x50
c00104db:	74 08                	je     c00104e5 <VgaText::incrementCursor(bool)+0x1f>
c00104dd:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c00104e3:	eb 33                	jmp    c0010518 <VgaText::incrementCursor(bool)+0x52>
c00104e5:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00104eb:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00104f5:	8d 50 01             	lea    edx,[eax+0x1]
c00104f8:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00104fe:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010504:	75 12                	jne    c0010518 <VgaText::incrementCursor(bool)+0x52>
c0010506:	83 ec 0c             	sub    esp,0xc
c0010509:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c001050f:	53                   	push   ebx
c0010510:	e8 35 fe ff ff       	call   c001034a <VgaText::scrollScreen()>
c0010515:	83 c4 10             	add    esp,0x10
c0010518:	89 f0                	mov    eax,esi
c001051a:	84 c0                	test   al,al
c001051c:	74 0c                	je     c001052a <VgaText::incrementCursor(bool)+0x64>
c001051e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010522:	5a                   	pop    edx
c0010523:	5b                   	pop    ebx
c0010524:	5e                   	pop    esi
c0010525:	e9 c6 fc ff ff       	jmp    c00101f0 <VgaText::updateCursor()>
c001052a:	58                   	pop    eax
c001052b:	5b                   	pop    ebx
c001052c:	5e                   	pop    esi
c001052d:	c3                   	ret    

c001052e <VgaText::updateRAMUsageDisplay(int)>:
c001052e:	56                   	push   esi
c001052f:	8b 35 c0 b8 02 c0    	mov    esi,DWORD PTR ds:0xc002b8c0
c0010535:	53                   	push   ebx
c0010536:	6a 0f                	push   0xf
c0010538:	6a 00                	push   0x0
c001053a:	e8 ed fd ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c001053f:	5a                   	pop    edx
c0010540:	0f b6 c0             	movzx  eax,al
c0010543:	59                   	pop    ecx
c0010544:	b9 0a 00 00 00       	mov    ecx,0xa
c0010549:	50                   	push   eax
c001054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054e:	99                   	cdq    
c001054f:	f7 f9                	idiv   ecx
c0010551:	89 d3                	mov    ebx,edx
c0010553:	83 c0 30             	add    eax,0x30
c0010556:	83 c3 30             	add    ebx,0x30
c0010559:	0f be c0             	movsx  eax,al
c001055c:	0f b6 db             	movzx  ebx,bl
c001055f:	50                   	push   eax
c0010560:	e8 81 fe ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010565:	5a                   	pop    edx
c0010566:	59                   	pop    ecx
c0010567:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c001056e:	6a 0f                	push   0xf
c0010570:	6a 00                	push   0x0
c0010572:	e8 b5 fd ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c0010577:	5a                   	pop    edx
c0010578:	0f b6 c0             	movzx  eax,al
c001057b:	59                   	pop    ecx
c001057c:	50                   	push   eax
c001057d:	53                   	push   ebx
c001057e:	e8 63 fe ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010583:	5b                   	pop    ebx
c0010584:	5a                   	pop    edx
c0010585:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c001058c:	6a 0f                	push   0xf
c001058e:	6a 00                	push   0x0
c0010590:	e8 97 fd ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c0010595:	59                   	pop    ecx
c0010596:	0f b6 c0             	movzx  eax,al
c0010599:	5b                   	pop    ebx
c001059a:	50                   	push   eax
c001059b:	6a 25                	push   0x25
c001059d:	e8 44 fe ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c00105a2:	5a                   	pop    edx
c00105a3:	59                   	pop    ecx
c00105a4:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00105ab:	5b                   	pop    ebx
c00105ac:	5e                   	pop    esi
c00105ad:	c3                   	ret    

c00105ae <VgaText::updateDiskUsage()>:
c00105ae:	55                   	push   ebp
c00105af:	57                   	push   edi
c00105b0:	8b 3d c0 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b8c0
c00105b6:	56                   	push   esi
c00105b7:	53                   	push   ebx
c00105b8:	bb 0a 00 00 00       	mov    ebx,0xa
c00105bd:	6a 0f                	push   0xf
c00105bf:	6a 00                	push   0x0
c00105c1:	e8 66 fd ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c00105c6:	5a                   	pop    edx
c00105c7:	8b 35 c8 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ecc8
c00105cd:	59                   	pop    ecx
c00105ce:	0f b6 c0             	movzx  eax,al
c00105d1:	b9 10 27 00 00       	mov    ecx,0x2710
c00105d6:	50                   	push   eax
c00105d7:	89 f0                	mov    eax,esi
c00105d9:	99                   	cdq    
c00105da:	f7 f9                	idiv   ecx
c00105dc:	99                   	cdq    
c00105dd:	f7 fb                	idiv   ebx
c00105df:	83 c2 30             	add    edx,0x30
c00105e2:	0f b6 d2             	movzx  edx,dl
c00105e5:	52                   	push   edx
c00105e6:	e8 fb fd ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c00105eb:	5d                   	pop    ebp
c00105ec:	5a                   	pop    edx
c00105ed:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c00105f1:	6a 0f                	push   0xf
c00105f3:	6a 00                	push   0x0
c00105f5:	e8 32 fd ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c00105fa:	59                   	pop    ecx
c00105fb:	0f b6 c0             	movzx  eax,al
c00105fe:	5d                   	pop    ebp
c00105ff:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010604:	50                   	push   eax
c0010605:	89 f0                	mov    eax,esi
c0010607:	99                   	cdq    
c0010608:	f7 fd                	idiv   ebp
c001060a:	99                   	cdq    
c001060b:	f7 fb                	idiv   ebx
c001060d:	8d 42 30             	lea    eax,[edx+0x30]
c0010610:	0f b6 c0             	movzx  eax,al
c0010613:	50                   	push   eax
c0010614:	e8 cd fd ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010619:	5a                   	pop    edx
c001061a:	59                   	pop    ecx
c001061b:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010622:	6a 0f                	push   0xf
c0010624:	6a 00                	push   0x0
c0010626:	e8 01 fd ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c001062b:	5a                   	pop    edx
c001062c:	0f b6 c0             	movzx  eax,al
c001062f:	59                   	pop    ecx
c0010630:	b9 64 00 00 00       	mov    ecx,0x64
c0010635:	50                   	push   eax
c0010636:	89 f0                	mov    eax,esi
c0010638:	99                   	cdq    
c0010639:	f7 f9                	idiv   ecx
c001063b:	99                   	cdq    
c001063c:	f7 fb                	idiv   ebx
c001063e:	8d 42 30             	lea    eax,[edx+0x30]
c0010641:	0f b6 c0             	movzx  eax,al
c0010644:	50                   	push   eax
c0010645:	e8 9c fd ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c001064a:	5a                   	pop    edx
c001064b:	59                   	pop    ecx
c001064c:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010653:	6a 0f                	push   0xf
c0010655:	6a 00                	push   0x0
c0010657:	e8 d0 fc ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c001065c:	5a                   	pop    edx
c001065d:	0f b6 c0             	movzx  eax,al
c0010660:	59                   	pop    ecx
c0010661:	50                   	push   eax
c0010662:	89 f0                	mov    eax,esi
c0010664:	99                   	cdq    
c0010665:	f7 fb                	idiv   ebx
c0010667:	89 d6                	mov    esi,edx
c0010669:	99                   	cdq    
c001066a:	f7 fb                	idiv   ebx
c001066c:	8d 42 30             	lea    eax,[edx+0x30]
c001066f:	0f b6 c0             	movzx  eax,al
c0010672:	50                   	push   eax
c0010673:	e8 6e fd ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010678:	5a                   	pop    edx
c0010679:	59                   	pop    ecx
c001067a:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010681:	6a 0f                	push   0xf
c0010683:	6a 00                	push   0x0
c0010685:	e8 a2 fc ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c001068a:	5a                   	pop    edx
c001068b:	0f b6 c0             	movzx  eax,al
c001068e:	59                   	pop    ecx
c001068f:	50                   	push   eax
c0010690:	8d 46 30             	lea    eax,[esi+0x30]
c0010693:	0f b6 f0             	movzx  esi,al
c0010696:	56                   	push   esi
c0010697:	e8 4a fd ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c001069c:	5e                   	pop    esi
c001069d:	5a                   	pop    edx
c001069e:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c00106a5:	6a 0f                	push   0xf
c00106a7:	6a 00                	push   0x0
c00106a9:	e8 7e fc ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c00106ae:	59                   	pop    ecx
c00106af:	0f b6 c0             	movzx  eax,al
c00106b2:	5e                   	pop    esi
c00106b3:	b9 10 27 00 00       	mov    ecx,0x2710
c00106b8:	8b 35 c4 ec 02 c0    	mov    esi,DWORD PTR ds:0xc002ecc4
c00106be:	50                   	push   eax
c00106bf:	89 f0                	mov    eax,esi
c00106c1:	99                   	cdq    
c00106c2:	f7 f9                	idiv   ecx
c00106c4:	99                   	cdq    
c00106c5:	f7 fb                	idiv   ebx
c00106c7:	8d 42 30             	lea    eax,[edx+0x30]
c00106ca:	0f b6 c0             	movzx  eax,al
c00106cd:	50                   	push   eax
c00106ce:	e8 13 fd ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c00106d3:	5a                   	pop    edx
c00106d4:	59                   	pop    ecx
c00106d5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c00106dc:	6a 0f                	push   0xf
c00106de:	6a 00                	push   0x0
c00106e0:	e8 47 fc ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c00106e5:	5a                   	pop    edx
c00106e6:	0f b6 c0             	movzx  eax,al
c00106e9:	59                   	pop    ecx
c00106ea:	50                   	push   eax
c00106eb:	89 f0                	mov    eax,esi
c00106ed:	99                   	cdq    
c00106ee:	f7 fd                	idiv   ebp
c00106f0:	99                   	cdq    
c00106f1:	f7 fb                	idiv   ebx
c00106f3:	83 c2 30             	add    edx,0x30
c00106f6:	0f b6 d2             	movzx  edx,dl
c00106f9:	52                   	push   edx
c00106fa:	e8 e7 fc ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c00106ff:	5d                   	pop    ebp
c0010700:	5a                   	pop    edx
c0010701:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010708:	6a 0f                	push   0xf
c001070a:	6a 00                	push   0x0
c001070c:	e8 1b fc ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c0010711:	59                   	pop    ecx
c0010712:	0f b6 c0             	movzx  eax,al
c0010715:	5d                   	pop    ebp
c0010716:	b9 64 00 00 00       	mov    ecx,0x64
c001071b:	50                   	push   eax
c001071c:	89 f0                	mov    eax,esi
c001071e:	99                   	cdq    
c001071f:	f7 f9                	idiv   ecx
c0010721:	99                   	cdq    
c0010722:	f7 fb                	idiv   ebx
c0010724:	83 c2 30             	add    edx,0x30
c0010727:	0f b6 d2             	movzx  edx,dl
c001072a:	52                   	push   edx
c001072b:	e8 b6 fc ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010730:	5a                   	pop    edx
c0010731:	59                   	pop    ecx
c0010732:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010739:	6a 0f                	push   0xf
c001073b:	6a 00                	push   0x0
c001073d:	e8 ea fb ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c0010742:	5d                   	pop    ebp
c0010743:	0f b6 c0             	movzx  eax,al
c0010746:	5a                   	pop    edx
c0010747:	50                   	push   eax
c0010748:	89 f0                	mov    eax,esi
c001074a:	99                   	cdq    
c001074b:	f7 fb                	idiv   ebx
c001074d:	89 d6                	mov    esi,edx
c001074f:	99                   	cdq    
c0010750:	f7 fb                	idiv   ebx
c0010752:	8d 42 30             	lea    eax,[edx+0x30]
c0010755:	0f b6 c0             	movzx  eax,al
c0010758:	50                   	push   eax
c0010759:	e8 88 fc ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c001075e:	59                   	pop    ecx
c001075f:	5b                   	pop    ebx
c0010760:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010767:	6a 0f                	push   0xf
c0010769:	6a 00                	push   0x0
c001076b:	e8 bc fb ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c0010770:	5d                   	pop    ebp
c0010771:	0f b6 c0             	movzx  eax,al
c0010774:	5a                   	pop    edx
c0010775:	50                   	push   eax
c0010776:	8d 46 30             	lea    eax,[esi+0x30]
c0010779:	0f b6 f0             	movzx  esi,al
c001077c:	56                   	push   esi
c001077d:	e8 64 fc ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010782:	59                   	pop    ecx
c0010783:	5b                   	pop    ebx
c0010784:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c001078b:	5b                   	pop    ebx
c001078c:	5e                   	pop    esi
c001078d:	5f                   	pop    edi
c001078e:	5d                   	pop    ebp
c001078f:	c3                   	ret    

c0010790 <VgaText::updateTitle()>:
c0010790:	53                   	push   ebx
c0010791:	31 c0                	xor    eax,eax
c0010793:	83 ec 58             	sub    esp,0x58
c0010796:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001079a:	89 e1                	mov    ecx,esp
c001079c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00107a0:	40                   	inc    eax
c00107a1:	83 f8 50             	cmp    eax,0x50
c00107a4:	75 f6                	jne    c001079c <VgaText::updateTitle()+0xc>
c00107a6:	31 c0                	xor    eax,eax
c00107a8:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00107af:	84 db                	test   bl,bl
c00107b1:	74 06                	je     c00107b9 <VgaText::updateTitle()+0x29>
c00107b3:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00107b6:	40                   	inc    eax
c00107b7:	eb ef                	jmp    c00107a8 <VgaText::updateTitle()+0x18>
c00107b9:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00107bf:	85 c0                	test   eax,eax
c00107c1:	74 09                	je     c00107cc <VgaText::updateTitle()+0x3c>
c00107c3:	53                   	push   ebx
c00107c4:	53                   	push   ebx
c00107c5:	51                   	push   ecx
c00107c6:	52                   	push   edx
c00107c7:	ff d0                	call   eax
c00107c9:	83 c4 10             	add    esp,0x10
c00107cc:	e8 dd fd ff ff       	call   c00105ae <VgaText::updateDiskUsage()>
c00107d1:	83 c4 58             	add    esp,0x58
c00107d4:	5b                   	pop    ebx
c00107d5:	c3                   	ret    

c00107d6 <VgaText::setTitleTextColour(VgaColour)>:
c00107d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107da:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107de:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00107e4:	eb aa                	jmp    c0010790 <VgaText::updateTitle()>

c00107e6 <VgaText::setTitleColour(VgaColour)>:
c00107e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107ea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00107ee:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00107f4:	eb 9a                	jmp    c0010790 <VgaText::updateTitle()>

c00107f6 <VgaText::setTitle(char*)>:
c00107f6:	53                   	push   ebx
c00107f7:	83 ec 10             	sub    esp,0x10
c00107fa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010802:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010808:	50                   	push   eax
c0010809:	e8 1c ff fe ff       	call   c000072a <strcpy>
c001080e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010812:	83 c4 18             	add    esp,0x18
c0010815:	5b                   	pop    ebx
c0010816:	e9 75 ff ff ff       	jmp    c0010790 <VgaText::updateTitle()>
c001081b:	90                   	nop

c001081c <VgaText::decrementCursor(bool)>:
c001081c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010820:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010824:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c001082a:	85 c0                	test   eax,eax
c001082c:	74 07                	je     c0010835 <VgaText::decrementCursor(bool)+0x19>
c001082e:	48                   	dec    eax
c001082f:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010835:	84 c9                	test   cl,cl
c0010837:	74 09                	je     c0010842 <VgaText::decrementCursor(bool)+0x26>
c0010839:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001083d:	e9 ae f9 ff ff       	jmp    c00101f0 <VgaText::updateCursor()>
c0010842:	c3                   	ret    
c0010843:	90                   	nop

c0010844 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010844:	53                   	push   ebx
c0010845:	83 ec 08             	sub    esp,0x8
c0010848:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001084c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010850:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010854:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010858:	3c 07                	cmp    al,0x7
c001085a:	75 2a                	jne    c0010886 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c001085c:	a1 0c cb 02 c0       	mov    eax,ds:0xc002cb0c
c0010861:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010869:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010871:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010879:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001087d:	83 c4 08             	add    esp,0x8
c0010880:	5b                   	pop    ebx
c0010881:	e9 3a 2d 00 00       	jmp    c00135c0 <Buzzer::beep(int, int, bool)>
c0010886:	3c 0d                	cmp    al,0xd
c0010888:	75 0c                	jne    c0010896 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c001088a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010894:	eb 3b                	jmp    c00108d1 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010896:	3c 0a                	cmp    al,0xa
c0010898:	75 40                	jne    c00108da <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c001089a:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00108a0:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00108aa:	8d 50 01             	lea    edx,[eax+0x1]
c00108ad:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00108b3:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00108b9:	75 12                	jne    c00108cd <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00108bb:	83 ec 0c             	sub    esp,0xc
c00108be:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00108c4:	53                   	push   ebx
c00108c5:	e8 80 fa ff ff       	call   c001034a <VgaText::scrollScreen()>
c00108ca:	83 c4 10             	add    esp,0x10
c00108cd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108d1:	83 c4 08             	add    esp,0x8
c00108d4:	5b                   	pop    ebx
c00108d5:	e9 16 f9 ff ff       	jmp    c00101f0 <VgaText::updateCursor()>
c00108da:	3c 08                	cmp    al,0x8
c00108dc:	75 31                	jne    c001090f <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00108de:	50                   	push   eax
c00108df:	50                   	push   eax
c00108e0:	6a 01                	push   0x1
c00108e2:	53                   	push   ebx
c00108e3:	e8 34 ff ff ff       	call   c001081c <VgaText::decrementCursor(bool)>
c00108e8:	5a                   	pop    edx
c00108e9:	59                   	pop    ecx
c00108ea:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00108f0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00108f6:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c00108fc:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010902:	6a 20                	push   0x20
c0010904:	53                   	push   ebx
c0010905:	e8 ee fa ff ff       	call   c00103f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001090a:	83 c4 28             	add    esp,0x28
c001090d:	5b                   	pop    ebx
c001090e:	c3                   	ret    
c001090f:	83 ec 08             	sub    esp,0x8
c0010912:	0f be c0             	movsx  eax,al
c0010915:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c001091b:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010921:	51                   	push   ecx
c0010922:	52                   	push   edx
c0010923:	50                   	push   eax
c0010924:	53                   	push   ebx
c0010925:	e8 ce fa ff ff       	call   c00103f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001092a:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001092e:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010936:	83 c4 28             	add    esp,0x28
c0010939:	5b                   	pop    ebx
c001093a:	e9 87 fb ff ff       	jmp    c00104c6 <VgaText::incrementCursor(bool)>
c001093f:	90                   	nop

c0010940 <VgaText::isShowingCursor()>:
c0010940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010944:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c001094a:	c3                   	ret    
c001094b:	90                   	nop

c001094c <VgaText::isBlinkDisabled()>:
c001094c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010950:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010956:	83 f0 01             	xor    eax,0x1
c0010959:	c3                   	ret    

c001095a <VgaText::setCursorHeight(int)>:
c001095a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001095e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010962:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010968:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c001096f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010973:	e9 92 f8 ff ff       	jmp    c001020a <VgaText::showCursor(bool)>

c0010978 <VgaText::getCursorHeight()>:
c0010978:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001097c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010982:	c3                   	ret    

c0010983 <setActiveTerminal(VgaText*)>:
c0010983:	53                   	push   ebx
c0010984:	83 ec 08             	sub    esp,0x8
c0010987:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001098b:	85 db                	test   ebx,ebx
c001098d:	75 11                	jne    c00109a0 <setActiveTerminal(VgaText*)+0x1d>
c001098f:	c7 44 24 10 cc 8c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0028ccc
c0010997:	83 c4 08             	add    esp,0x8
c001099a:	5b                   	pop    ebx
c001099b:	e9 3b 8f 00 00       	jmp    c00198db <Krnl::panic(char const*)>
c00109a0:	50                   	push   eax
c00109a1:	50                   	push   eax
c00109a2:	53                   	push   ebx
c00109a3:	68 da 8c 02 c0       	push   0xc0028cda
c00109a8:	e8 14 1e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00109ad:	a1 64 ca 02 c0       	mov    eax,ds:0xc002ca64
c00109b2:	83 c4 10             	add    esp,0x10
c00109b5:	85 c0                	test   eax,eax
c00109b7:	74 0c                	je     c00109c5 <setActiveTerminal(VgaText*)+0x42>
c00109b9:	83 ec 0c             	sub    esp,0xc
c00109bc:	50                   	push   eax
c00109bd:	e8 2e f8 ff ff       	call   c00101f0 <VgaText::updateCursor()>
c00109c2:	83 c4 10             	add    esp,0x10
c00109c5:	89 1d 64 ca 02 c0    	mov    DWORD PTR ds:0xc002ca64,ebx
c00109cb:	51                   	push   ecx
c00109cc:	51                   	push   ecx
c00109cd:	53                   	push   ebx
c00109ce:	68 f2 8c 02 c0       	push   0xc0028cf2
c00109d3:	e8 e9 1d 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00109d8:	83 c4 0c             	add    esp,0xc
c00109db:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00109e1:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00109e7:	53                   	push   ebx
c00109e8:	e8 83 fa ff ff       	call   c0010470 <VgaText::setCursor(int, int)>
c00109ed:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109f0:	e8 57 ff ff ff       	call   c001094c <VgaText::isBlinkDisabled()>
c00109f5:	5a                   	pop    edx
c00109f6:	0f b6 c0             	movzx  eax,al
c00109f9:	59                   	pop    ecx
c00109fa:	50                   	push   eax
c00109fb:	53                   	push   ebx
c00109fc:	e8 19 f8 ff ff       	call   c001021a <VgaText::disableBlink(bool)>
c0010a01:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a04:	e8 6f ff ff ff       	call   c0010978 <VgaText::getCursorHeight()>
c0010a09:	5a                   	pop    edx
c0010a0a:	59                   	pop    ecx
c0010a0b:	50                   	push   eax
c0010a0c:	53                   	push   ebx
c0010a0d:	e8 48 ff ff ff       	call   c001095a <VgaText::setCursorHeight(int)>
c0010a12:	83 c4 10             	add    esp,0x10
c0010a15:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010a1c:	75 0a                	jne    c0010a28 <setActiveTerminal(VgaText*)+0xa5>
c0010a1e:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010a28:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010a2c:	83 c4 08             	add    esp,0x8
c0010a2f:	5b                   	pop    ebx
c0010a30:	e9 67 f7 ff ff       	jmp    c001019c <VgaText::load()>

c0010a35 <doTerminalCycle()>:
c0010a35:	83 ec 18             	sub    esp,0x18
c0010a38:	a1 60 ca 02 c0       	mov    eax,ds:0xc002ca60
c0010a3d:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010a43:	50                   	push   eax
c0010a44:	a3 60 ca 02 c0       	mov    ds:0xc002ca60,eax
c0010a49:	e8 35 ff ff ff       	call   c0010983 <setActiveTerminal(VgaText*)>
c0010a4e:	83 c4 1c             	add    esp,0x1c
c0010a51:	c3                   	ret    

c0010a52 <VgaText::doUpdate()>:
c0010a52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010a56:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010a5c:	85 c0                	test   eax,eax
c0010a5e:	74 02                	je     c0010a62 <VgaText::doUpdate()+0x10>
c0010a60:	ff e0                	jmp    eax
c0010a62:	c3                   	ret    
c0010a63:	90                   	nop

c0010a64 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010a64:	55                   	push   ebp
c0010a65:	57                   	push   edi
c0010a66:	56                   	push   esi
c0010a67:	53                   	push   ebx
c0010a68:	83 ec 1c             	sub    esp,0x1c
c0010a6b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010a6f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a74:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010a7b:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010a7e:	50                   	push   eax
c0010a7f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010a84:	50                   	push   eax
c0010a85:	e8 a2 f8 ff ff       	call   c001032c <VgaText::combineColours(unsigned char, unsigned char)>
c0010a8a:	59                   	pop    ecx
c0010a8b:	0f b6 c0             	movzx  eax,al
c0010a8e:	5b                   	pop    ebx
c0010a8f:	31 c9                	xor    ecx,ecx
c0010a91:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010a99:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010a9d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010aa3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010aa7:	0f b7 db             	movzx  ebx,bx
c0010aaa:	01 db                	add    ebx,ebx
c0010aac:	01 fb                	add    ebx,edi
c0010aae:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010ab1:	84 c0                	test   al,al
c0010ab3:	0f 84 38 01 00 00    	je     c0010bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010ab9:	3c 0d                	cmp    al,0xd
c0010abb:	75 0f                	jne    c0010acc <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010abd:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ac7:	e9 1f 01 00 00       	jmp    c0010beb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010acc:	3c 0a                	cmp    al,0xa
c0010ace:	75 5b                	jne    c0010b2b <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010ad0:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010ad6:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010ae0:	8d 48 01             	lea    ecx,[eax+0x1]
c0010ae3:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010ae9:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010aef:	75 12                	jne    c0010b03 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010af1:	83 ec 0c             	sub    esp,0xc
c0010af4:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010afa:	55                   	push   ebp
c0010afb:	e8 4a f8 ff ff       	call   c001034a <VgaText::scrollScreen()>
c0010b00:	83 c4 10             	add    esp,0x10
c0010b03:	83 ec 0c             	sub    esp,0xc
c0010b06:	55                   	push   ebp
c0010b07:	e8 e4 f6 ff ff       	call   c00101f0 <VgaText::updateCursor()>
c0010b0c:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b14:	83 c4 10             	add    esp,0x10
c0010b17:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b1d:	31 c9                	xor    ecx,ecx
c0010b1f:	0f b7 db             	movzx  ebx,bx
c0010b22:	01 db                	add    ebx,ebx
c0010b24:	01 fb                	add    ebx,edi
c0010b26:	e9 c0 00 00 00       	jmp    c0010beb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b2b:	3c 08                	cmp    al,0x8
c0010b2d:	75 4e                	jne    c0010b7d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010b2f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010b33:	53                   	push   ebx
c0010b34:	53                   	push   ebx
c0010b35:	6a 01                	push   0x1
c0010b37:	55                   	push   ebp
c0010b38:	e8 df fc ff ff       	call   c001081c <VgaText::decrementCursor(bool)>
c0010b3d:	58                   	pop    eax
c0010b3e:	5a                   	pop    edx
c0010b3f:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010b45:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010b4b:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010b51:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010b57:	6a 20                	push   0x20
c0010b59:	55                   	push   ebp
c0010b5a:	e8 99 f8 ff ff       	call   c00103f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010b5f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010b67:	83 c4 20             	add    esp,0x20
c0010b6a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010b70:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010b74:	0f b7 db             	movzx  ebx,bx
c0010b77:	01 db                	add    ebx,ebx
c0010b79:	01 fb                	add    ebx,edi
c0010b7b:	eb 6e                	jmp    c0010beb <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010b7d:	51                   	push   ecx
c0010b7e:	51                   	push   ecx
c0010b7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010b83:	50                   	push   eax
c0010b84:	e8 5d f8 ff ff       	call   c00103e6 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b89:	83 c4 10             	add    esp,0x10
c0010b8c:	66 89 03             	mov    WORD PTR [ebx],ax
c0010b8f:	39 2d 64 ca 02 c0    	cmp    DWORD PTR ds:0xc002ca64,ebp
c0010b95:	75 2a                	jne    c0010bc1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010b97:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010b9d:	85 c0                	test   eax,eax
c0010b9f:	74 20                	je     c0010bc1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010ba1:	52                   	push   edx
c0010ba2:	52                   	push   edx
c0010ba3:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ba9:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010baf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010bb3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010bb7:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010bba:	51                   	push   ecx
c0010bbb:	55                   	push   ebp
c0010bbc:	ff d0                	call   eax
c0010bbe:	83 c4 20             	add    esp,0x20
c0010bc1:	83 c3 02             	add    ebx,0x2
c0010bc4:	50                   	push   eax
c0010bc5:	50                   	push   eax
c0010bc6:	6a 00                	push   0x0
c0010bc8:	55                   	push   ebp
c0010bc9:	e8 f8 f8 ff ff       	call   c00104c6 <VgaText::incrementCursor(bool)>
c0010bce:	83 c4 10             	add    esp,0x10
c0010bd1:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010bd8:	75 0f                	jne    c0010be9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010bda:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010be2:	0f b7 db             	movzx  ebx,bx
c0010be5:	01 db                	add    ebx,ebx
c0010be7:	01 fb                	add    ebx,edi
c0010be9:	b1 01                	mov    cl,0x1
c0010beb:	46                   	inc    esi
c0010bec:	e9 bd fe ff ff       	jmp    c0010aae <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010bf1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010bf5:	83 ec 0c             	sub    esp,0xc
c0010bf8:	55                   	push   ebp
c0010bf9:	e8 f2 f5 ff ff       	call   c00101f0 <VgaText::updateCursor()>
c0010bfe:	83 c4 10             	add    esp,0x10
c0010c01:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010c05:	84 c9                	test   cl,cl
c0010c07:	74 0c                	je     c0010c15 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010c09:	83 ec 0c             	sub    esp,0xc
c0010c0c:	55                   	push   ebp
c0010c0d:	e8 40 fe ff ff       	call   c0010a52 <VgaText::doUpdate()>
c0010c12:	83 c4 10             	add    esp,0x10
c0010c15:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010c1c:	83 c4 1c             	add    esp,0x1c
c0010c1f:	5b                   	pop    ebx
c0010c20:	5e                   	pop    esi
c0010c21:	5f                   	pop    edi
c0010c22:	5d                   	pop    ebp
c0010c23:	c3                   	ret    

c0010c24 <VgaText::clearScreen()>:
c0010c24:	57                   	push   edi
c0010c25:	56                   	push   esi
c0010c26:	31 f6                	xor    esi,esi
c0010c28:	53                   	push   ebx
c0010c29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c2d:	52                   	push   edx
c0010c2e:	6a 00                	push   0x0
c0010c30:	6a 00                	push   0x0
c0010c32:	53                   	push   ebx
c0010c33:	e8 38 f8 ff ff       	call   c0010470 <VgaText::setCursor(int, int)>
c0010c38:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010c3f:	83 c4 10             	add    esp,0x10
c0010c42:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010c48:	7e 26                	jle    c0010c70 <VgaText::clearScreen()+0x4c>
c0010c4a:	31 ff                	xor    edi,edi
c0010c4c:	50                   	push   eax
c0010c4d:	50                   	push   eax
c0010c4e:	56                   	push   esi
c0010c4f:	57                   	push   edi
c0010c50:	47                   	inc    edi
c0010c51:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010c57:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010c5d:	6a 20                	push   0x20
c0010c5f:	53                   	push   ebx
c0010c60:	e8 93 f7 ff ff       	call   c00103f8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c65:	83 c4 20             	add    esp,0x20
c0010c68:	83 ff 50             	cmp    edi,0x50
c0010c6b:	75 df                	jne    c0010c4c <VgaText::clearScreen()+0x28>
c0010c6d:	46                   	inc    esi
c0010c6e:	eb d2                	jmp    c0010c42 <VgaText::clearScreen()+0x1e>
c0010c70:	83 ec 0c             	sub    esp,0xc
c0010c73:	53                   	push   ebx
c0010c74:	e8 d9 fd ff ff       	call   c0010a52 <VgaText::doUpdate()>
c0010c79:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010c80:	83 c4 10             	add    esp,0x10
c0010c83:	5b                   	pop    ebx
c0010c84:	5e                   	pop    esi
c0010c85:	5f                   	pop    edi
c0010c86:	c3                   	ret    
c0010c87:	90                   	nop

c0010c88 <VgaText::putchar(char)>:
c0010c88:	56                   	push   esi
c0010c89:	53                   	push   ebx
c0010c8a:	83 ec 14             	sub    esp,0x14
c0010c8d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010c91:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c95:	3c 5b                	cmp    al,0x5b
c0010c97:	75 21                	jne    c0010cba <VgaText::putchar(char)+0x32>
c0010c99:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0010ca0:	74 28                	je     c0010cca <VgaText::putchar(char)+0x42>
c0010ca2:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0010cab:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0010cb5:	e9 e2 00 00 00       	jmp    c0010d9c <VgaText::putchar(char)+0x114>
c0010cba:	3c 1b                	cmp    al,0x1b
c0010cbc:	75 0c                	jne    c0010cca <VgaText::putchar(char)+0x42>
c0010cbe:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0010cc5:	e9 d2 00 00 00       	jmp    c0010d9c <VgaText::putchar(char)+0x114>
c0010cca:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0010cd0:	84 c9                	test   cl,cl
c0010cd2:	0f 84 ab 00 00 00    	je     c0010d83 <VgaText::putchar(char)+0xfb>
c0010cd8:	8d 50 c0             	lea    edx,[eax-0x40]
c0010cdb:	80 fa 3e             	cmp    dl,0x3e
c0010cde:	0f 87 82 00 00 00    	ja     c0010d66 <VgaText::putchar(char)+0xde>
c0010ce4:	3c 6d                	cmp    al,0x6d
c0010ce6:	75 4d                	jne    c0010d35 <VgaText::putchar(char)+0xad>
c0010ce8:	31 f6                	xor    esi,esi
c0010cea:	31 d2                	xor    edx,edx
c0010cec:	31 c0                	xor    eax,eax
c0010cee:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c0010cf4:	7e 30                	jle    c0010d26 <VgaText::putchar(char)+0x9e>
c0010cf6:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010cfe:	80 fa 3b             	cmp    dl,0x3b
c0010d01:	75 17                	jne    c0010d1a <VgaText::putchar(char)+0x92>
c0010d03:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010d07:	50                   	push   eax
c0010d08:	53                   	push   ebx
c0010d09:	e8 46 f5 ff ff       	call   c0010254 <VgaText::doANSI_SGR(int)>
c0010d0e:	59                   	pop    ecx
c0010d0f:	31 d2                	xor    edx,edx
c0010d11:	58                   	pop    eax
c0010d12:	31 c0                	xor    eax,eax
c0010d14:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010d18:	eb 09                	jmp    c0010d23 <VgaText::putchar(char)+0x9b>
c0010d1a:	6b c0 0a             	imul   eax,eax,0xa
c0010d1d:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010d21:	88 ca                	mov    dl,cl
c0010d23:	46                   	inc    esi
c0010d24:	eb c8                	jmp    c0010cee <VgaText::putchar(char)+0x66>
c0010d26:	84 d2                	test   dl,dl
c0010d28:	74 31                	je     c0010d5b <VgaText::putchar(char)+0xd3>
c0010d2a:	50                   	push   eax
c0010d2b:	53                   	push   ebx
c0010d2c:	e8 23 f5 ff ff       	call   c0010254 <VgaText::doANSI_SGR(int)>
c0010d31:	58                   	pop    eax
c0010d32:	5a                   	pop    edx
c0010d33:	eb 26                	jmp    c0010d5b <VgaText::putchar(char)+0xd3>
c0010d35:	3c 4a                	cmp    al,0x4a
c0010d37:	75 22                	jne    c0010d5b <VgaText::putchar(char)+0xd3>
c0010d39:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010d40:	75 19                	jne    c0010d5b <VgaText::putchar(char)+0xd3>
c0010d42:	83 ec 0c             	sub    esp,0xc
c0010d45:	53                   	push   ebx
c0010d46:	e8 d9 fe ff ff       	call   c0010c24 <VgaText::clearScreen()>
c0010d4b:	83 c4 0c             	add    esp,0xc
c0010d4e:	6a 00                	push   0x0
c0010d50:	6a 00                	push   0x0
c0010d52:	53                   	push   ebx
c0010d53:	e8 18 f7 ff ff       	call   c0010470 <VgaText::setCursor(int, int)>
c0010d58:	83 c4 10             	add    esp,0x10
c0010d5b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010d64:	eb 36                	jmp    c0010d9c <VgaText::putchar(char)+0x114>
c0010d66:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010d6c:	83 fa 0e             	cmp    edx,0xe
c0010d6f:	7f 2b                	jg     c0010d9c <VgaText::putchar(char)+0x114>
c0010d71:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010d74:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010d7a:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010d81:	eb 19                	jmp    c0010d9c <VgaText::putchar(char)+0x114>
c0010d83:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010d89:	0f be c0             	movsx  eax,al
c0010d8c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010d92:	50                   	push   eax
c0010d93:	53                   	push   ebx
c0010d94:	e8 ab fa ff ff       	call   c0010844 <VgaText::putchar(char, VgaColour, VgaColour)>
c0010d99:	83 c4 10             	add    esp,0x10
c0010d9c:	83 c4 14             	add    esp,0x14
c0010d9f:	5b                   	pop    ebx
c0010da0:	5e                   	pop    esi
c0010da1:	c3                   	ret    

c0010da2 <VgaText::puts(char const*)>:
c0010da2:	53                   	push   ebx
c0010da3:	83 ec 08             	sub    esp,0x8
c0010da6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010daa:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010dad:	84 c0                	test   al,al
c0010daf:	74 12                	je     c0010dc3 <VgaText::puts(char const*)+0x21>
c0010db1:	43                   	inc    ebx
c0010db2:	51                   	push   ecx
c0010db3:	51                   	push   ecx
c0010db4:	50                   	push   eax
c0010db5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010db9:	e8 ca fe ff ff       	call   c0010c88 <VgaText::putchar(char)>
c0010dbe:	83 c4 10             	add    esp,0x10
c0010dc1:	eb e7                	jmp    c0010daa <VgaText::puts(char const*)+0x8>
c0010dc3:	83 c4 08             	add    esp,0x8
c0010dc6:	5b                   	pop    ebx
c0010dc7:	c3                   	ret    

c0010dc8 <VgaText::putx(unsigned int)>:
c0010dc8:	57                   	push   edi
c0010dc9:	b9 11 00 00 00       	mov    ecx,0x11
c0010dce:	56                   	push   esi
c0010dcf:	be 0e 8d 02 c0       	mov    esi,0xc0028d0e
c0010dd4:	53                   	push   ebx
c0010dd5:	83 ec 20             	sub    esp,0x20
c0010dd8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ddc:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010de0:	fc                   	cld    
c0010de1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010de3:	be 08 00 00 00       	mov    esi,0x8
c0010de8:	50                   	push   eax
c0010de9:	50                   	push   eax
c0010dea:	89 d8                	mov    eax,ebx
c0010dec:	c1 e3 04             	shl    ebx,0x4
c0010def:	c1 e8 1c             	shr    eax,0x1c
c0010df2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010df7:	50                   	push   eax
c0010df8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010dfc:	e8 87 fe ff ff       	call   c0010c88 <VgaText::putchar(char)>
c0010e01:	83 c4 10             	add    esp,0x10
c0010e04:	4e                   	dec    esi
c0010e05:	75 e1                	jne    c0010de8 <VgaText::putx(unsigned int)+0x20>
c0010e07:	83 c4 20             	add    esp,0x20
c0010e0a:	5b                   	pop    ebx
c0010e0b:	5e                   	pop    esi
c0010e0c:	5f                   	pop    edi
c0010e0d:	c3                   	ret    

c0010e0e <VgaText::VgaText(char const*)>:
c0010e0e:	57                   	push   edi
c0010e0f:	56                   	push   esi
c0010e10:	53                   	push   ebx
c0010e11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e15:	83 ec 08             	sub    esp,0x8
c0010e18:	6a 00                	push   0x0
c0010e1a:	50                   	push   eax
c0010e1b:	e8 6e 05 00 00       	call   c001138e <UnixFile::UnixFile(int)>
c0010e20:	83 c4 10             	add    esp,0x10
c0010e23:	ba 74 8d 02 c0       	mov    edx,0xc0028d74
c0010e28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e2c:	89 10                	mov    DWORD PTR [eax],edx
c0010e2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e32:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010e3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e40:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010e4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e4e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010e55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e59:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010e60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e64:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010e6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e72:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e80:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010e87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e8b:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e96:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010e9c:	bb 40 ca 02 c0       	mov    ebx,0xc002ca40
c0010ea1:	b8 08 00 00 00       	mov    eax,0x8
c0010ea6:	fc                   	cld    
c0010ea7:	89 d7                	mov    edi,edx
c0010ea9:	89 de                	mov    esi,ebx
c0010eab:	89 c1                	mov    ecx,eax
c0010ead:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010eaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eb3:	05 1e 10 00 00       	add    eax,0x101e
c0010eb8:	83 ec 08             	sub    esp,0x8
c0010ebb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ebf:	50                   	push   eax
c0010ec0:	e8 65 f8 fe ff       	call   c000072a <strcpy>
c0010ec5:	83 c4 10             	add    esp,0x10
c0010ec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ecc:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010ed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010eda:	83 c0 0c             	add    eax,0xc
c0010edd:	83 ec 04             	sub    esp,0x4
c0010ee0:	68 00 0f 00 00       	push   0xf00
c0010ee5:	6a 00                	push   0x0
c0010ee7:	50                   	push   eax
c0010ee8:	e8 9e f7 fe ff       	call   c000068b <memset>
c0010eed:	83 c4 10             	add    esp,0x10
c0010ef0:	83 ec 04             	sub    esp,0x4
c0010ef3:	6a 00                	push   0x0
c0010ef5:	6a 07                	push   0x7
c0010ef7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010efb:	e8 0c f4 ff ff       	call   c001030c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010f00:	83 c4 10             	add    esp,0x10
c0010f03:	83 ec 08             	sub    esp,0x8
c0010f06:	6a 02                	push   0x2
c0010f08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f0c:	e8 49 fa ff ff       	call   c001095a <VgaText::setCursorHeight(int)>
c0010f11:	83 c4 10             	add    esp,0x10
c0010f14:	83 ec 04             	sub    esp,0x4
c0010f17:	6a 00                	push   0x0
c0010f19:	6a 00                	push   0x0
c0010f1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f1f:	e8 4c f5 ff ff       	call   c0010470 <VgaText::setCursor(int, int)>
c0010f24:	83 c4 10             	add    esp,0x10
c0010f27:	83 ec 08             	sub    esp,0x8
c0010f2a:	6a 01                	push   0x1
c0010f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f30:	e8 d5 f2 ff ff       	call   c001020a <VgaText::showCursor(bool)>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	83 ec 08             	sub    esp,0x8
c0010f3b:	6a 01                	push   0x1
c0010f3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f41:	e8 d4 f2 ff ff       	call   c001021a <VgaText::disableBlink(bool)>
c0010f46:	83 c4 10             	add    esp,0x10
c0010f49:	83 ec 0c             	sub    esp,0xc
c0010f4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f50:	e8 cf fc ff ff       	call   c0010c24 <VgaText::clearScreen()>
c0010f55:	83 c4 10             	add    esp,0x10
c0010f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010f63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f67:	05 9e 10 00 00       	add    eax,0x109e
c0010f6c:	83 ec 04             	sub    esp,0x4
c0010f6f:	68 96 00 00 00       	push   0x96
c0010f74:	6a 00                	push   0x0
c0010f76:	50                   	push   eax
c0010f77:	e8 0f f7 fe ff       	call   c000068b <memset>
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f83:	05 34 11 00 00       	add    eax,0x1134
c0010f88:	83 ec 04             	sub    esp,0x4
c0010f8b:	68 2c 01 00 00       	push   0x12c
c0010f90:	6a 00                	push   0x0
c0010f92:	50                   	push   eax
c0010f93:	e8 f3 f6 fe ff       	call   c000068b <memset>
c0010f98:	83 c4 10             	add    esp,0x10
c0010f9b:	90                   	nop
c0010f9c:	5b                   	pop    ebx
c0010f9d:	5e                   	pop    esi
c0010f9e:	5f                   	pop    edi
c0010f9f:	c3                   	ret    

c0010fa0 <VgaText::receiveKey(unsigned char)>:
c0010fa0:	55                   	push   ebp
c0010fa1:	57                   	push   edi
c0010fa2:	56                   	push   esi
c0010fa3:	53                   	push   ebx
c0010fa4:	83 ec 1c             	sub    esp,0x1c
c0010fa7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010fab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010faf:	84 db                	test   bl,bl
c0010fb1:	0f 84 c9 00 00 00    	je     c0011080 <VgaText::receiveKey(unsigned char)+0xe0>
c0010fb7:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010fbd:	80 fb 08             	cmp    bl,0x8
c0010fc0:	75 2c                	jne    c0010fee <VgaText::receiveKey(unsigned char)+0x4e>
c0010fc2:	83 ec 0c             	sub    esp,0xc
c0010fc5:	57                   	push   edi
c0010fc6:	e8 dd f6 fe ff       	call   c00006a8 <strlen>
c0010fcb:	83 c4 10             	add    esp,0x10
c0010fce:	85 c0                	test   eax,eax
c0010fd0:	74 41                	je     c0011013 <VgaText::receiveKey(unsigned char)+0x73>
c0010fd2:	50                   	push   eax
c0010fd3:	50                   	push   eax
c0010fd4:	6a 08                	push   0x8
c0010fd6:	56                   	push   esi
c0010fd7:	e8 ac fc ff ff       	call   c0010c88 <VgaText::putchar(char)>
c0010fdc:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010fdf:	e8 c4 f6 fe ff       	call   c00006a8 <strlen>
c0010fe4:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010fec:	eb 22                	jmp    c0011010 <VgaText::receiveKey(unsigned char)+0x70>
c0010fee:	0f be c3             	movsx  eax,bl
c0010ff1:	52                   	push   edx
c0010ff2:	52                   	push   edx
c0010ff3:	50                   	push   eax
c0010ff4:	56                   	push   esi
c0010ff5:	e8 8e fc ff ff       	call   c0010c88 <VgaText::putchar(char)>
c0010ffa:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010ffe:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011003:	59                   	pop    ecx
c0011004:	5d                   	pop    ebp
c0011005:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011009:	50                   	push   eax
c001100a:	57                   	push   edi
c001100b:	e8 d1 f7 fe ff       	call   c00007e1 <strcat>
c0011010:	83 c4 10             	add    esp,0x10
c0011013:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c001101a:	75 05                	jne    c0011021 <VgaText::receiveKey(unsigned char)+0x81>
c001101c:	80 fb 0a             	cmp    bl,0xa
c001101f:	75 53                	jne    c0011074 <VgaText::receiveKey(unsigned char)+0xd4>
c0011021:	83 ec 0c             	sub    esp,0xc
c0011024:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c001102a:	53                   	push   ebx
c001102b:	e8 78 f6 fe ff       	call   c00006a8 <strlen>
c0011030:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011033:	89 c5                	mov    ebp,eax
c0011035:	e8 6e f6 fe ff       	call   c00006a8 <strlen>
c001103a:	83 c4 10             	add    esp,0x10
c001103d:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0011041:	3d 2c 01 00 00       	cmp    eax,0x12c
c0011046:	76 10                	jbe    c0011058 <VgaText::receiveKey(unsigned char)+0xb8>
c0011048:	83 ec 0c             	sub    esp,0xc
c001104b:	68 1f 8d 02 c0       	push   0xc0028d1f
c0011050:	e8 86 88 00 00       	call   c00198db <Krnl::panic(char const*)>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	50                   	push   eax
c0011059:	50                   	push   eax
c001105a:	57                   	push   edi
c001105b:	53                   	push   ebx
c001105c:	e8 80 f7 fe ff       	call   c00007e1 <strcat>
c0011061:	83 c4 0c             	add    esp,0xc
c0011064:	68 96 00 00 00       	push   0x96
c0011069:	6a 00                	push   0x0
c001106b:	57                   	push   edi
c001106c:	e8 1a f6 fe ff       	call   c000068b <memset>
c0011071:	83 c4 10             	add    esp,0x10
c0011074:	83 ec 0c             	sub    esp,0xc
c0011077:	56                   	push   esi
c0011078:	e8 d5 f9 ff ff       	call   c0010a52 <VgaText::doUpdate()>
c001107d:	83 c4 10             	add    esp,0x10
c0011080:	83 c4 1c             	add    esp,0x1c
c0011083:	5b                   	pop    ebx
c0011084:	5e                   	pop    esi
c0011085:	5f                   	pop    edi
c0011086:	5d                   	pop    ebp
c0011087:	c3                   	ret    

c0011088 <VgaText::write(unsigned long long, void*, int*)>:
c0011088:	55                   	push   ebp
c0011089:	57                   	push   edi
c001108a:	56                   	push   esi
c001108b:	53                   	push   ebx
c001108c:	83 ec 0c             	sub    esp,0xc
c001108f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011093:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011097:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001109b:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c00110a2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00110a5:	39 eb                	cmp    ebx,ebp
c00110a7:	74 13                	je     c00110bc <VgaText::write(unsigned long long, void*, int*)+0x34>
c00110a9:	43                   	inc    ebx
c00110aa:	50                   	push   eax
c00110ab:	50                   	push   eax
c00110ac:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00110b0:	50                   	push   eax
c00110b1:	56                   	push   esi
c00110b2:	e8 d1 fb ff ff       	call   c0010c88 <VgaText::putchar(char)>
c00110b7:	83 c4 10             	add    esp,0x10
c00110ba:	eb e9                	jmp    c00110a5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00110bc:	83 ec 0c             	sub    esp,0xc
c00110bf:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c00110c6:	56                   	push   esi
c00110c7:	e8 86 f9 ff ff       	call   c0010a52 <VgaText::doUpdate()>
c00110cc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00110d0:	89 38                	mov    DWORD PTR [eax],edi
c00110d2:	83 c4 1c             	add    esp,0x1c
c00110d5:	31 c0                	xor    eax,eax
c00110d7:	5b                   	pop    ebx
c00110d8:	5e                   	pop    esi
c00110d9:	5f                   	pop    edi
c00110da:	5d                   	pop    ebp
c00110db:	c3                   	ret    

c00110dc <newTerminal(char*)>:
c00110dc:	83 ec 28             	sub    esp,0x28
c00110df:	68 60 12 00 00       	push   0x1260
c00110e4:	e8 eb e3 ff ff       	call   c000f4d4 <malloc>
c00110e9:	5a                   	pop    edx
c00110ea:	59                   	pop    ecx
c00110eb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00110ef:	50                   	push   eax
c00110f0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00110f4:	e8 15 fd ff ff       	call   c0010e0e <VgaText::VgaText(char const*)>
c00110f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00110fd:	83 c4 2c             	add    esp,0x2c
c0011100:	c3                   	ret    
c0011101:	90                   	nop

c0011102 <TSS::TSS()>:
c0011102:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011106:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001110d:	90                   	nop
c001110e:	c3                   	ret    
c001110f:	90                   	nop

c0011110 <TSS::setESP(unsigned long)>:
c0011110:	55                   	push   ebp
c0011111:	89 e5                	mov    ebp,esp
c0011113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011116:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001111c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001111f:	90                   	nop
c0011120:	5d                   	pop    ebp
c0011121:	c3                   	ret    

c0011122 <TSS::flush()>:
c0011122:	55                   	push   ebp
c0011123:	89 e5                	mov    ebp,esp
c0011125:	83 ec 10             	sub    esp,0x10
c0011128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001112b:	8b 00                	mov    eax,DWORD PTR [eax]
c001112d:	83 c8 03             	or     eax,0x3
c0011130:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011134:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0011138:	66 89 d0             	mov    ax,dx
c001113b:	0f 00 d8             	ltr    ax
c001113e:	90                   	nop
c001113f:	c9                   	leave  
c0011140:	c3                   	ret    
c0011141:	90                   	nop

c0011142 <TSS::setup(unsigned long, unsigned long)>:
c0011142:	55                   	push   ebp
c0011143:	89 e5                	mov    ebp,esp
c0011145:	83 ec 18             	sub    esp,0x18
c0011148:	83 ec 0c             	sub    esp,0xc
c001114b:	6a 68                	push   0x68
c001114d:	e8 82 e3 ff ff       	call   c000f4d4 <malloc>
c0011152:	83 c4 10             	add    esp,0x10
c0011155:	89 c2                	mov    edx,eax
c0011157:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001115a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001115d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011163:	83 ec 04             	sub    esp,0x4
c0011166:	6a 68                	push   0x68
c0011168:	6a 00                	push   0x0
c001116a:	50                   	push   eax
c001116b:	e8 1b f5 fe ff       	call   c000068b <memset>
c0011170:	83 c4 10             	add    esp,0x10
c0011173:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011176:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011179:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001117f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011185:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001118b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001118e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011191:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011194:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001119a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001119d:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00111a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111a9:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00111af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111b5:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00111bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111c1:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00111c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111cd:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00111d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111d9:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00111df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111e5:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00111e8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00111eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00111f4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00111f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00111fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00111fd:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011207:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001120a:	0f 20 da             	mov    edx,cr3
c001120d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011210:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011213:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011219:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001121c:	83 ec 08             	sub    esp,0x8
c001121f:	50                   	push   eax
c0011220:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011223:	50                   	push   eax
c0011224:	e8 89 da ff ff       	call   c000ecb2 <GDTEntry::setBase(unsigned int)>
c0011229:	83 c4 10             	add    esp,0x10
c001122c:	83 ec 08             	sub    esp,0x8
c001122f:	6a 68                	push   0x68
c0011231:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011234:	50                   	push   eax
c0011235:	e8 94 da ff ff       	call   c000ecce <GDTEntry::setLimit(unsigned int)>
c001123a:	83 c4 10             	add    esp,0x10
c001123d:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011241:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011244:	83 e0 0f             	and    eax,0xf
c0011247:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001124a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c001124d:	83 c8 40             	or     eax,0x40
c0011250:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011253:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0011258:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001125e:	05 78 01 00 00       	add    eax,0x178
c0011263:	83 ec 04             	sub    esp,0x4
c0011266:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011269:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001126c:	50                   	push   eax
c001126d:	e8 90 da ff ff       	call   c000ed02 <GDT::addEntry(GDTEntry)>
c0011272:	83 c4 10             	add    esp,0x10
c0011275:	89 c2                	mov    edx,eax
c0011277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001127a:	89 10                	mov    DWORD PTR [eax],edx
c001127c:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0011281:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011287:	05 78 01 00 00       	add    eax,0x178
c001128c:	83 ec 0c             	sub    esp,0xc
c001128f:	50                   	push   eax
c0011290:	e8 b1 da ff ff       	call   c000ed46 <GDT::flush()>
c0011295:	83 c4 10             	add    esp,0x10
c0011298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001129b:	8b 00                	mov    eax,DWORD PTR [eax]
c001129d:	83 ec 08             	sub    esp,0x8
c00112a0:	50                   	push   eax
c00112a1:	68 88 8d 02 c0       	push   0xc0028d88
c00112a6:	e8 16 15 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00112ab:	83 c4 10             	add    esp,0x10
c00112ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00112b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00112b3:	c9                   	leave  
c00112b4:	c3                   	ret    
c00112b5:	90                   	nop

c00112b6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00112b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00112ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00112c1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00112c6:	75 08                	jne    c00112d0 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00112c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00112ce:	eb 38                	jmp    c0011308 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c00112d0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00112d5:	75 17                	jne    c00112ee <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c00112d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00112df:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00112e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00112e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00112eb:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c00112ee:	89 c1                	mov    ecx,eax
c00112f0:	83 e1 fd             	and    ecx,0xfffffffd
c00112f3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00112f9:	74 cd                	je     c00112c8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00112fb:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011300:	83 e0 ef             	and    eax,0xffffffef
c0011303:	83 f8 08             	cmp    eax,0x8
c0011306:	76 c0                	jbe    c00112c8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011308:	31 c0                	xor    eax,eax
c001130a:	c3                   	ret    
c001130b:	90                   	nop

c001130c <ReservedFilename::isAtty()>:
c001130c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011310:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011313:	31 c0                	xor    eax,eax
c0011315:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001131b:	74 09                	je     c0011326 <ReservedFilename::isAtty()+0x1a>
c001131d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011323:	0f 94 c0             	sete   al
c0011326:	c3                   	ret    
c0011327:	90                   	nop

c0011328 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001132c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011330:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011333:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011337:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c001133c:	75 08                	jne    c0011346 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c001133e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011344:	eb 3d                	jmp    c0011383 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011346:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001134b:	75 17                	jne    c0011364 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c001134d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011352:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011355:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001135b:	8b 10                	mov    edx,DWORD PTR [eax]
c001135d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011361:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011364:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011369:	75 04                	jne    c001136f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001136b:	89 0a                	mov    DWORD PTR [edx],ecx
c001136d:	eb 14                	jmp    c0011383 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001136f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011374:	74 c8                	je     c001133e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011376:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001137b:	83 e0 ef             	and    eax,0xffffffef
c001137e:	83 f8 08             	cmp    eax,0x8
c0011381:	76 bb                	jbe    c001133e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011383:	31 c0                	xor    eax,eax
c0011385:	c3                   	ret    

c0011386 <UnixFile::getFileDescriptor()>:
c0011386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001138a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001138d:	c3                   	ret    

c001138e <UnixFile::UnixFile(int)>:
c001138e:	53                   	push   ebx
c001138f:	83 ec 28             	sub    esp,0x28
c0011392:	ba 74 8e 02 c0       	mov    edx,0xc0028e74
c0011397:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001139b:	89 10                	mov    DWORD PTR [eax],edx
c001139d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00113a5:	0f 8f 8c 01 00 00    	jg     c0011537 <UnixFile::UnixFile(int)+0x1a9>
c00113ab:	a1 20 b9 02 c0       	mov    eax,ds:0xc002b920
c00113b0:	8d 50 01             	lea    edx,[eax+0x1]
c00113b3:	89 15 20 b9 02 c0    	mov    DWORD PTR ds:0xc002b920,edx
c00113b9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00113bd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00113c0:	83 ec 08             	sub    esp,0x8
c00113c3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00113c7:	68 f8 ca 02 c0       	push   0xc002caf8
c00113cc:	e8 8f 5d 01 00       	call   c0027160 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00113d1:	83 c4 10             	add    esp,0x10
c00113d4:	a0 f4 ca 02 c0       	mov    al,ds:0xc002caf4
c00113d9:	83 f0 01             	xor    eax,0x1
c00113dc:	84 c0                	test   al,al
c00113de:	0f 84 54 01 00 00    	je     c0011538 <UnixFile::UnixFile(int)+0x1aa>
c00113e4:	c6 05 f4 ca 02 c0 01 	mov    BYTE PTR ds:0xc002caf4,0x1
c00113eb:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00113f3:	83 ec 0c             	sub    esp,0xc
c00113f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113fa:	e8 d5 e0 ff ff       	call   c000f4d4 <malloc>
c00113ff:	83 c4 10             	add    esp,0x10
c0011402:	89 c3                	mov    ebx,eax
c0011404:	83 ec 08             	sub    esp,0x8
c0011407:	68 03 ff ff 0f       	push   0xfffff03
c001140c:	53                   	push   ebx
c001140d:	e8 2c 01 00 00       	call   c001153e <ReservedFilename::ReservedFilename(int)>
c0011412:	83 c4 10             	add    esp,0x10
c0011415:	89 1d ec ca 02 c0    	mov    DWORD PTR ds:0xc002caec,ebx
c001141b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011423:	83 ec 0c             	sub    esp,0xc
c0011426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001142a:	e8 a5 e0 ff ff       	call   c000f4d4 <malloc>
c001142f:	83 c4 10             	add    esp,0x10
c0011432:	89 c3                	mov    ebx,eax
c0011434:	83 ec 08             	sub    esp,0x8
c0011437:	68 01 ff ff 0f       	push   0xfffff01
c001143c:	53                   	push   ebx
c001143d:	e8 fc 00 00 00       	call   c001153e <ReservedFilename::ReservedFilename(int)>
c0011442:	83 c4 10             	add    esp,0x10
c0011445:	89 1d f0 ca 02 c0    	mov    DWORD PTR ds:0xc002caf0,ebx
c001144b:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011453:	83 ec 0c             	sub    esp,0xc
c0011456:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001145a:	e8 75 e0 ff ff       	call   c000f4d4 <malloc>
c001145f:	83 c4 10             	add    esp,0x10
c0011462:	89 c3                	mov    ebx,eax
c0011464:	83 ec 08             	sub    esp,0x8
c0011467:	68 00 ff ff 0f       	push   0xfffff00
c001146c:	53                   	push   ebx
c001146d:	e8 cc 00 00 00       	call   c001153e <ReservedFilename::ReservedFilename(int)>
c0011472:	83 c4 10             	add    esp,0x10
c0011475:	89 1d e4 ca 02 c0    	mov    DWORD PTR ds:0xc002cae4,ebx
c001147b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011483:	83 ec 0c             	sub    esp,0xc
c0011486:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001148a:	e8 45 e0 ff ff       	call   c000f4d4 <malloc>
c001148f:	83 c4 10             	add    esp,0x10
c0011492:	89 c3                	mov    ebx,eax
c0011494:	83 ec 08             	sub    esp,0x8
c0011497:	68 02 ff ff 0f       	push   0xfffff02
c001149c:	53                   	push   ebx
c001149d:	e8 9c 00 00 00       	call   c001153e <ReservedFilename::ReservedFilename(int)>
c00114a2:	83 c4 10             	add    esp,0x10
c00114a5:	89 1d e8 ca 02 c0    	mov    DWORD PTR ds:0xc002cae8,ebx
c00114ab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00114b3:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00114b8:	7f 7e                	jg     c0011538 <UnixFile::UnixFile(int)+0x1aa>
c00114ba:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00114c2:	83 ec 0c             	sub    esp,0xc
c00114c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00114c9:	e8 06 e0 ff ff       	call   c000f4d4 <malloc>
c00114ce:	83 c4 10             	add    esp,0x10
c00114d1:	89 c3                	mov    ebx,eax
c00114d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114d7:	05 10 ff ff 0f       	add    eax,0xfffff10
c00114dc:	83 ec 08             	sub    esp,0x8
c00114df:	50                   	push   eax
c00114e0:	53                   	push   ebx
c00114e1:	e8 58 00 00 00       	call   c001153e <ReservedFilename::ReservedFilename(int)>
c00114e6:	83 c4 10             	add    esp,0x10
c00114e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114ed:	89 1c 85 c0 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3540],ebx
c00114f4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00114fc:	83 ec 0c             	sub    esp,0xc
c00114ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011503:	e8 cc df ff ff       	call   c000f4d4 <malloc>
c0011508:	83 c4 10             	add    esp,0x10
c001150b:	89 c3                	mov    ebx,eax
c001150d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011511:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011516:	83 ec 08             	sub    esp,0x8
c0011519:	50                   	push   eax
c001151a:	53                   	push   ebx
c001151b:	e8 1e 00 00 00       	call   c001153e <ReservedFilename::ReservedFilename(int)>
c0011520:	83 c4 10             	add    esp,0x10
c0011523:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011527:	89 1c 85 80 ca 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3580],ebx
c001152e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011532:	e9 7c ff ff ff       	jmp    c00114b3 <UnixFile::UnixFile(int)+0x125>
c0011537:	90                   	nop
c0011538:	83 c4 28             	add    esp,0x28
c001153b:	5b                   	pop    ebx
c001153c:	c3                   	ret    
c001153d:	90                   	nop

c001153e <ReservedFilename::ReservedFilename(int)>:
c001153e:	83 ec 0c             	sub    esp,0xc
c0011541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011545:	83 ec 08             	sub    esp,0x8
c0011548:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001154c:	50                   	push   eax
c001154d:	e8 3c fe ff ff       	call   c001138e <UnixFile::UnixFile(int)>
c0011552:	83 c4 10             	add    esp,0x10
c0011555:	ba 90 8e 02 c0       	mov    edx,0xc0028e90
c001155a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001155e:	89 10                	mov    DWORD PTR [eax],edx
c0011560:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011564:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011568:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001156b:	90                   	nop
c001156c:	83 c4 0c             	add    esp,0xc
c001156f:	c3                   	ret    

c0011570 <UnixFile::~UnixFile()>:
c0011570:	83 ec 1c             	sub    esp,0x1c
c0011573:	ba 74 8e 02 c0       	mov    edx,0xc0028e74
c0011578:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001157c:	89 10                	mov    DWORD PTR [eax],edx
c001157e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011582:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011585:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001158a:	7f 73                	jg     c00115ff <UnixFile::~UnixFile()+0x8f>
c001158c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011594:	83 ec 0c             	sub    esp,0xc
c0011597:	68 f8 ca 02 c0       	push   0xc002caf8
c001159c:	e8 93 5c 01 00       	call   c0027234 <LinkedList<UnixFile>::getFirstElement()>
c00115a1:	83 c4 10             	add    esp,0x10
c00115a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00115a8:	83 ec 0c             	sub    esp,0xc
c00115ab:	68 f8 ca 02 c0       	push   0xc002caf8
c00115b0:	e8 87 5c 01 00       	call   c002723c <LinkedList<UnixFile>::removeFirst()>
c00115b5:	83 c4 10             	add    esp,0x10
c00115b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00115bc:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00115c0:	74 40                	je     c0011602 <UnixFile::~UnixFile()+0x92>
c00115c2:	83 ec 08             	sub    esp,0x8
c00115c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00115c9:	68 f8 ca 02 c0       	push   0xc002caf8
c00115ce:	e8 8d 5b 01 00       	call   c0027160 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00115d3:	83 c4 10             	add    esp,0x10
c00115d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00115da:	8d 50 01             	lea    edx,[eax+0x1]
c00115dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00115e1:	3d 88 13 00 00       	cmp    eax,0x1388
c00115e6:	0f 94 c0             	sete   al
c00115e9:	84 c0                	test   al,al
c00115eb:	74 a7                	je     c0011594 <UnixFile::~UnixFile()+0x24>
c00115ed:	83 ec 0c             	sub    esp,0xc
c00115f0:	68 4c 8e 02 c0       	push   0xc0028e4c
c00115f5:	e8 e1 82 00 00       	call   c00198db <Krnl::panic(char const*)>
c00115fa:	83 c4 10             	add    esp,0x10
c00115fd:	eb 95                	jmp    c0011594 <UnixFile::~UnixFile()+0x24>
c00115ff:	90                   	nop
c0011600:	eb 01                	jmp    c0011603 <UnixFile::~UnixFile()+0x93>
c0011602:	90                   	nop
c0011603:	90                   	nop
c0011604:	83 c4 1c             	add    esp,0x1c
c0011607:	c3                   	ret    

c0011608 <UnixFile::~UnixFile()>:
c0011608:	83 ec 0c             	sub    esp,0xc
c001160b:	83 ec 0c             	sub    esp,0xc
c001160e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011612:	e8 59 ff ff ff       	call   c0011570 <UnixFile::~UnixFile()>
c0011617:	83 c4 10             	add    esp,0x10
c001161a:	83 ec 08             	sub    esp,0x8
c001161d:	6a 0c                	push   0xc
c001161f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011623:	e8 b9 10 00 00       	call   c00126e1 <operator delete(void*, unsigned long)>
c0011628:	83 c4 10             	add    esp,0x10
c001162b:	83 c4 0c             	add    esp,0xc
c001162e:	c3                   	ret    
c001162f:	90                   	nop

c0011630 <ReservedFilename::~ReservedFilename()>:
c0011630:	83 ec 0c             	sub    esp,0xc
c0011633:	ba 90 8e 02 c0       	mov    edx,0xc0028e90
c0011638:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001163c:	89 10                	mov    DWORD PTR [eax],edx
c001163e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011642:	83 ec 0c             	sub    esp,0xc
c0011645:	50                   	push   eax
c0011646:	e8 25 ff ff ff       	call   c0011570 <UnixFile::~UnixFile()>
c001164b:	83 c4 10             	add    esp,0x10
c001164e:	90                   	nop
c001164f:	83 c4 0c             	add    esp,0xc
c0011652:	c3                   	ret    
c0011653:	90                   	nop

c0011654 <ReservedFilename::~ReservedFilename()>:
c0011654:	83 ec 0c             	sub    esp,0xc
c0011657:	83 ec 0c             	sub    esp,0xc
c001165a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001165e:	e8 cd ff ff ff       	call   c0011630 <ReservedFilename::~ReservedFilename()>
c0011663:	83 c4 10             	add    esp,0x10
c0011666:	83 ec 08             	sub    esp,0x8
c0011669:	6a 0c                	push   0xc
c001166b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001166f:	e8 6d 10 00 00       	call   c00126e1 <operator delete(void*, unsigned long)>
c0011674:	83 c4 10             	add    esp,0x10
c0011677:	83 c4 0c             	add    esp,0xc
c001167a:	c3                   	ret    

c001167b <getFromFileDescriptor(int)>:
c001167b:	53                   	push   ebx
c001167c:	83 ec 08             	sub    esp,0x8
c001167f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011683:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011689:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001168f:	7f 2c                	jg     c00116bd <getFromFileDescriptor(int)+0x42>
c0011691:	83 ec 0c             	sub    esp,0xc
c0011694:	68 f8 ca 02 c0       	push   0xc002caf8
c0011699:	e8 96 5b 01 00       	call   c0027234 <LinkedList<UnixFile>::getFirstElement()>
c001169e:	83 c4 10             	add    esp,0x10
c00116a1:	85 c0                	test   eax,eax
c00116a3:	75 04                	jne    c00116a9 <getFromFileDescriptor(int)+0x2e>
c00116a5:	31 c0                	xor    eax,eax
c00116a7:	eb 6e                	jmp    c0011717 <getFromFileDescriptor(int)+0x9c>
c00116a9:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00116ac:	74 69                	je     c0011717 <getFromFileDescriptor(int)+0x9c>
c00116ae:	52                   	push   edx
c00116af:	52                   	push   edx
c00116b0:	50                   	push   eax
c00116b1:	68 f8 ca 02 c0       	push   0xc002caf8
c00116b6:	e8 23 5c 01 00       	call   c00272de <LinkedList<UnixFile>::getNext(UnixFile*)>
c00116bb:	eb e1                	jmp    c001169e <getFromFileDescriptor(int)+0x23>
c00116bd:	a1 ec ca 02 c0       	mov    eax,ds:0xc002caec
c00116c2:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00116c8:	74 4d                	je     c0011717 <getFromFileDescriptor(int)+0x9c>
c00116ca:	a1 f0 ca 02 c0       	mov    eax,ds:0xc002caf0
c00116cf:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00116d5:	74 40                	je     c0011717 <getFromFileDescriptor(int)+0x9c>
c00116d7:	a1 e8 ca 02 c0       	mov    eax,ds:0xc002cae8
c00116dc:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00116e2:	74 33                	je     c0011717 <getFromFileDescriptor(int)+0x9c>
c00116e4:	a1 e4 ca 02 c0       	mov    eax,ds:0xc002cae4
c00116e9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00116ef:	74 26                	je     c0011717 <getFromFileDescriptor(int)+0x9c>
c00116f1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00116f7:	83 f8 08             	cmp    eax,0x8
c00116fa:	77 09                	ja     c0011705 <getFromFileDescriptor(int)+0x8a>
c00116fc:	8b 04 85 c0 ca 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3540]
c0011703:	eb 12                	jmp    c0011717 <getFromFileDescriptor(int)+0x9c>
c0011705:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001170b:	83 fb 08             	cmp    ebx,0x8
c001170e:	77 95                	ja     c00116a5 <getFromFileDescriptor(int)+0x2a>
c0011710:	8b 04 9d 80 ca 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3580]
c0011717:	83 c4 08             	add    esp,0x8
c001171a:	5b                   	pop    ebx
c001171b:	c3                   	ret    

c001171c <__static_initialization_and_destruction_0(int, int)>:
c001171c:	83 ec 0c             	sub    esp,0xc
c001171f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011724:	75 34                	jne    c001175a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011726:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001172e:	75 2a                	jne    c001175a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011730:	83 ec 0c             	sub    esp,0xc
c0011733:	68 f8 ca 02 c0       	push   0xc002caf8
c0011738:	e8 cb 59 01 00       	call   c0027108 <LinkedList<UnixFile>::LinkedList()>
c001173d:	83 c4 10             	add    esp,0x10
c0011740:	83 ec 04             	sub    esp,0x4
c0011743:	68 a8 b8 02 c0       	push   0xc002b8a8
c0011748:	68 f8 ca 02 c0       	push   0xc002caf8
c001174d:	68 06 71 02 c0       	push   0xc0027106
c0011752:	e8 04 0f 00 00       	call   c001265b <__cxa_atexit>
c0011757:	83 c4 10             	add    esp,0x10
c001175a:	90                   	nop
c001175b:	83 c4 0c             	add    esp,0xc
c001175e:	c3                   	ret    

c001175f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001175f:	83 ec 0c             	sub    esp,0xc
c0011762:	83 ec 08             	sub    esp,0x8
c0011765:	68 ff ff 00 00       	push   0xffff
c001176a:	6a 01                	push   0x1
c001176c:	e8 ab ff ff ff       	call   c001171c <__static_initialization_and_destruction_0(int, int)>
c0011771:	83 c4 10             	add    esp,0x10
c0011774:	83 c4 0c             	add    esp,0xc
c0011777:	c3                   	ret    

c0011778 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011778:	53                   	push   ebx
c0011779:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001177d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011781:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011787:	89 c8                	mov    eax,ecx
c0011789:	d1 e8                	shr    eax,1
c001178b:	03 05 28 b9 02 c0    	add    eax,DWORD PTR ds:0xc002b928
c0011791:	83 e1 01             	and    ecx,0x1
c0011794:	8a 10                	mov    dl,BYTE PTR [eax]
c0011796:	75 09                	jne    c00117a1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011798:	83 e2 f0             	and    edx,0xfffffff0
c001179b:	09 da                	or     edx,ebx
c001179d:	88 10                	mov    BYTE PTR [eax],dl
c001179f:	5b                   	pop    ebx
c00117a0:	c3                   	ret    
c00117a1:	c1 e3 04             	shl    ebx,0x4
c00117a4:	83 e2 0f             	and    edx,0xf
c00117a7:	09 da                	or     edx,ebx
c00117a9:	88 10                	mov    BYTE PTR [eax],dl
c00117ab:	5b                   	pop    ebx
c00117ac:	c3                   	ret    

c00117ad <Virt::getPageState(unsigned long)>:
c00117ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00117b1:	8b 0d 28 b9 02 c0    	mov    ecx,DWORD PTR ds:0xc002b928
c00117b7:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00117bd:	89 d0                	mov    eax,edx
c00117bf:	d1 e8                	shr    eax,1
c00117c1:	83 e2 01             	and    edx,0x1
c00117c4:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00117c7:	75 04                	jne    c00117cd <Virt::getPageState(unsigned long)+0x20>
c00117c9:	83 e0 0f             	and    eax,0xf
c00117cc:	c3                   	ret    
c00117cd:	c0 e8 04             	shr    al,0x4
c00117d0:	c3                   	ret    

c00117d1 <Virt::allocateKernelVirtualPages(int)>:
c00117d1:	55                   	push   ebp
c00117d2:	31 ed                	xor    ebp,ebp
c00117d4:	57                   	push   edi
c00117d5:	56                   	push   esi
c00117d6:	53                   	push   ebx
c00117d7:	31 db                	xor    ebx,ebx
c00117d9:	83 ec 1c             	sub    esp,0x1c
c00117dc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00117e0:	8b 3d 24 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b924
c00117e6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00117eb:	57                   	push   edi
c00117ec:	e8 bc ff ff ff       	call   c00117ad <Virt::getPageState(unsigned long)>
c00117f1:	5a                   	pop    edx
c00117f2:	84 c0                	test   al,al
c00117f4:	75 3a                	jne    c0011830 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00117f6:	85 db                	test   ebx,ebx
c00117f8:	75 02                	jne    c00117fc <Virt::allocateKernelVirtualPages(int)+0x2b>
c00117fa:	89 fd                	mov    ebp,edi
c00117fc:	43                   	inc    ebx
c00117fd:	39 f3                	cmp    ebx,esi
c00117ff:	74 5a                	je     c001185b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011801:	47                   	inc    edi
c0011802:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011808:	76 31                	jbe    c001183b <Virt::allocateKernelVirtualPages(int)+0x6a>
c001180a:	c7 05 24 b9 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002b924,0xc8000
c0011814:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011819:	75 28                	jne    c0011843 <Virt::allocateKernelVirtualPages(int)+0x72>
c001181b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011820:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011825:	57                   	push   edi
c0011826:	e8 82 ff ff ff       	call   c00117ad <Virt::getPageState(unsigned long)>
c001182b:	5a                   	pop    edx
c001182c:	84 c0                	test   al,al
c001182e:	74 c6                	je     c00117f6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011830:	31 db                	xor    ebx,ebx
c0011832:	47                   	inc    edi
c0011833:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011839:	77 cf                	ja     c001180a <Virt::allocateKernelVirtualPages(int)+0x39>
c001183b:	89 3d 24 b9 02 c0    	mov    DWORD PTR ds:0xc002b924,edi
c0011841:	eb a8                	jmp    c00117eb <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011843:	83 ec 0c             	sub    esp,0xc
c0011846:	68 a4 8e 02 c0       	push   0xc0028ea4
c001184b:	e8 8b 80 00 00       	call   c00198db <Krnl::panic(char const*)>
c0011850:	8b 3d 24 b9 02 c0    	mov    edi,DWORD PTR ds:0xc002b924
c0011856:	83 c4 10             	add    esp,0x10
c0011859:	eb 90                	jmp    c00117eb <Virt::allocateKernelVirtualPages(int)+0x1a>
c001185b:	89 2d 24 b9 02 c0    	mov    DWORD PTR ds:0xc002b924,ebp
c0011861:	4b                   	dec    ebx
c0011862:	74 5f                	je     c00118c3 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011864:	85 f6                	test   esi,esi
c0011866:	74 3d                	je     c00118a5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011868:	89 e8                	mov    eax,ebp
c001186a:	31 db                	xor    ebx,ebx
c001186c:	8d 7e ff             	lea    edi,[esi-0x1]
c001186f:	eb 14                	jmp    c0011885 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011871:	6a 01                	push   0x1
c0011873:	43                   	inc    ebx
c0011874:	50                   	push   eax
c0011875:	e8 fe fe ff ff       	call   c0011778 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001187a:	58                   	pop    eax
c001187b:	39 f3                	cmp    ebx,esi
c001187d:	5a                   	pop    edx
c001187e:	74 25                	je     c00118a5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011880:	a1 24 b9 02 c0       	mov    eax,ds:0xc002b924
c0011885:	8d 50 01             	lea    edx,[eax+0x1]
c0011888:	85 db                	test   ebx,ebx
c001188a:	89 15 24 b9 02 c0    	mov    DWORD PTR ds:0xc002b924,edx
c0011890:	74 20                	je     c00118b2 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011892:	39 df                	cmp    edi,ebx
c0011894:	75 db                	jne    c0011871 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011896:	6a 03                	push   0x3
c0011898:	43                   	inc    ebx
c0011899:	50                   	push   eax
c001189a:	e8 d9 fe ff ff       	call   c0011778 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001189f:	59                   	pop    ecx
c00118a0:	39 f3                	cmp    ebx,esi
c00118a2:	58                   	pop    eax
c00118a3:	75 db                	jne    c0011880 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00118a5:	83 c4 1c             	add    esp,0x1c
c00118a8:	89 e8                	mov    eax,ebp
c00118aa:	5b                   	pop    ebx
c00118ab:	c1 e0 0c             	shl    eax,0xc
c00118ae:	5e                   	pop    esi
c00118af:	5f                   	pop    edi
c00118b0:	5d                   	pop    ebp
c00118b1:	c3                   	ret    
c00118b2:	6a 02                	push   0x2
c00118b4:	bb 01 00 00 00       	mov    ebx,0x1
c00118b9:	50                   	push   eax
c00118ba:	e8 b9 fe ff ff       	call   c0011778 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118bf:	58                   	pop    eax
c00118c0:	5a                   	pop    edx
c00118c1:	eb bd                	jmp    c0011880 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00118c3:	6a 04                	push   0x4
c00118c5:	8d 45 01             	lea    eax,[ebp+0x1]
c00118c8:	55                   	push   ebp
c00118c9:	a3 24 b9 02 c0       	mov    ds:0xc002b924,eax
c00118ce:	e8 a5 fe ff ff       	call   c0011778 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118d3:	59                   	pop    ecx
c00118d4:	89 e8                	mov    eax,ebp
c00118d6:	5b                   	pop    ebx
c00118d7:	c1 e0 0c             	shl    eax,0xc
c00118da:	83 c4 1c             	add    esp,0x1c
c00118dd:	5b                   	pop    ebx
c00118de:	5e                   	pop    esi
c00118df:	5f                   	pop    edi
c00118e0:	5d                   	pop    ebp
c00118e1:	c3                   	ret    

c00118e2 <Virt::virtualMemorySetup()>:
c00118e2:	53                   	push   ebx
c00118e3:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00118e8:	83 ec 08             	sub    esp,0x8
c00118eb:	6a 0f                	push   0xf
c00118ed:	53                   	push   ebx
c00118ee:	43                   	inc    ebx
c00118ef:	e8 84 fe ff ff       	call   c0011778 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00118f4:	59                   	pop    ecx
c00118f5:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00118fb:	58                   	pop    eax
c00118fc:	75 ed                	jne    c00118eb <Virt::virtualMemorySetup()+0x9>
c00118fe:	83 ec 08             	sub    esp,0x8
c0011901:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011906:	68 00 00 00 c8       	push   0xc8000000
c001190b:	68 2b 90 02 c0       	push   0xc002902b
c0011910:	e8 ac 0e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0011915:	58                   	pop    eax
c0011916:	5a                   	pop    edx
c0011917:	68 00 f0 ff ef       	push   0xeffff000
c001191c:	68 3f 90 02 c0       	push   0xc002903f
c0011921:	e8 9b 0e 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0011926:	83 c4 10             	add    esp,0x10
c0011929:	83 ec 08             	sub    esp,0x8
c001192c:	6a 00                	push   0x0
c001192e:	53                   	push   ebx
c001192f:	43                   	inc    ebx
c0011930:	e8 43 fe ff ff       	call   c0011778 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001193e:	75 e9                	jne    c0011929 <Virt::virtualMemorySetup()+0x47>
c0011940:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011945:	83 ec 08             	sub    esp,0x8
c0011948:	6a 0f                	push   0xf
c001194a:	53                   	push   ebx
c001194b:	43                   	inc    ebx
c001194c:	e8 27 fe ff ff       	call   c0011778 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011951:	83 c4 10             	add    esp,0x10
c0011954:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c001195a:	75 e9                	jne    c0011945 <Virt::virtualMemorySetup()+0x63>
c001195c:	83 c4 08             	add    esp,0x8
c001195f:	5b                   	pop    ebx
c0011960:	c3                   	ret    

c0011961 <Virt::getAKernelVAS()>:
c0011961:	a1 04 cb 02 c0       	mov    eax,ds:0xc002cb04
c0011966:	c3                   	ret    

c0011967 <Virt::setupPageSwapping(int)>:
c0011967:	57                   	push   edi
c0011968:	56                   	push   esi
c0011969:	53                   	push   ebx
c001196a:	83 ec 1c             	sub    esp,0x1c
c001196d:	68 14 01 00 00       	push   0x114
c0011972:	e8 5d db ff ff       	call   c000f4d4 <malloc>
c0011977:	83 c4 0c             	add    esp,0xc
c001197a:	89 c6                	mov    esi,eax
c001197c:	ff 35 d4 de 02 c0    	push   DWORD PTR ds:0xc002ded4
c0011982:	68 53 90 02 c0       	push   0xc0029053
c0011987:	50                   	push   eax
c0011988:	e8 63 13 00 00       	call   c0012cf0 <File::File(char const*, Process*)>
c001198d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011990:	e8 37 15 00 00       	call   c0012ecc <File::unlink()>
c0011995:	58                   	pop    eax
c0011996:	5a                   	pop    edx
c0011997:	6a 12                	push   0x12
c0011999:	56                   	push   esi
c001199a:	e8 b5 13 00 00       	call   c0012d54 <File::open(FileOpenMode)>
c001199f:	83 c4 10             	add    esp,0x10
c00119a2:	85 c0                	test   eax,eax
c00119a4:	0f 85 ca 00 00 00    	jne    c0011a74 <Virt::setupPageSwapping(int)+0x10d>
c00119aa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00119ae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00119b6:	c1 e3 08             	shl    ebx,0x8
c00119b9:	83 ec 0c             	sub    esp,0xc
c00119bc:	68 00 00 01 00       	push   0x10000
c00119c1:	e8 0e db ff ff       	call   c000f4d4 <malloc>
c00119c6:	83 c4 0c             	add    esp,0xc
c00119c9:	89 c7                	mov    edi,eax
c00119cb:	68 00 00 01 00       	push   0x10000
c00119d0:	6a 00                	push   0x0
c00119d2:	50                   	push   eax
c00119d3:	e8 b3 ec fe ff       	call   c000068b <memset>
c00119d8:	83 c4 10             	add    esp,0x10
c00119db:	85 db                	test   ebx,ebx
c00119dd:	79 03                	jns    c00119e2 <Virt::setupPageSwapping(int)+0x7b>
c00119df:	83 c3 0f             	add    ebx,0xf
c00119e2:	c1 fb 04             	sar    ebx,0x4
c00119e5:	4b                   	dec    ebx
c00119e6:	83 fb ff             	cmp    ebx,0xffffffff
c00119e9:	74 4b                	je     c0011a36 <Virt::setupPageSwapping(int)+0xcf>
c00119eb:	83 ec 0c             	sub    esp,0xc
c00119ee:	8b 06                	mov    eax,DWORD PTR [esi]
c00119f0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00119f4:	52                   	push   edx
c00119f5:	57                   	push   edi
c00119f6:	6a 00                	push   0x0
c00119f8:	68 00 00 01 00       	push   0x10000
c00119fd:	56                   	push   esi
c00119fe:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011a01:	83 c4 20             	add    esp,0x20
c0011a04:	85 c0                	test   eax,eax
c0011a06:	75 59                	jne    c0011a61 <Virt::setupPageSwapping(int)+0xfa>
c0011a08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a0c:	3d 00 00 01 00       	cmp    eax,0x10000
c0011a11:	74 d2                	je     c00119e5 <Virt::setupPageSwapping(int)+0x7e>
c0011a13:	83 ec 08             	sub    esp,0x8
c0011a16:	4b                   	dec    ebx
c0011a17:	50                   	push   eax
c0011a18:	68 a6 90 02 c0       	push   0xc00290a6
c0011a1d:	e8 9f 0d 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0011a22:	c7 04 24 af 90 02 c0 	mov    DWORD PTR [esp],0xc00290af
c0011a29:	e8 ad 7e 00 00       	call   c00198db <Krnl::panic(char const*)>
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	83 fb ff             	cmp    ebx,0xffffffff
c0011a34:	75 b5                	jne    c00119eb <Virt::setupPageSwapping(int)+0x84>
c0011a36:	83 ec 0c             	sub    esp,0xc
c0011a39:	56                   	push   esi
c0011a3a:	e8 73 13 00 00       	call   c0012db2 <File::close()>
c0011a3f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011a42:	e8 ad da ff ff       	call   c000f4f4 <rfree>
c0011a47:	83 c4 10             	add    esp,0x10
c0011a4a:	85 f6                	test   esi,esi
c0011a4c:	74 0c                	je     c0011a5a <Virt::setupPageSwapping(int)+0xf3>
c0011a4e:	83 ec 0c             	sub    esp,0xc
c0011a51:	8b 06                	mov    eax,DWORD PTR [esi]
c0011a53:	56                   	push   esi
c0011a54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a57:	83 c4 10             	add    esp,0x10
c0011a5a:	83 c4 10             	add    esp,0x10
c0011a5d:	5b                   	pop    ebx
c0011a5e:	5e                   	pop    esi
c0011a5f:	5f                   	pop    edi
c0011a60:	c3                   	ret    
c0011a61:	83 ec 08             	sub    esp,0x8
c0011a64:	50                   	push   eax
c0011a65:	68 8e 90 02 c0       	push   0xc002908e
c0011a6a:	e8 52 0d 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0011a6f:	83 c4 10             	add    esp,0x10
c0011a72:	eb 94                	jmp    c0011a08 <Virt::setupPageSwapping(int)+0xa1>
c0011a74:	83 ec 08             	sub    esp,0x8
c0011a77:	50                   	push   eax
c0011a78:	68 6a 90 02 c0       	push   0xc002906a
c0011a7d:	e8 3f 0d 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0011a82:	c7 04 24 73 90 02 c0 	mov    DWORD PTR [esp],0xc0029073
c0011a89:	e8 4d 7e 00 00       	call   c00198db <Krnl::panic(char const*)>
c0011a8e:	83 c4 10             	add    esp,0x10
c0011a91:	e9 14 ff ff ff       	jmp    c00119aa <Virt::setupPageSwapping(int)+0x43>

c0011a96 <VAS::VAS()>:
c0011a96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011aa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aa5:	a3 04 cb 02 c0       	mov    ds:0xc002cb04,eax
c0011aaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011aae:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011ab2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ab6:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011ab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011abd:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011ac4:	90                   	nop
c0011ac5:	c3                   	ret    

c0011ac6 <VAS::VAS(VAS*)>:
c0011ac6:	83 ec 0c             	sub    esp,0xc
c0011ac9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011acd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011ad4:	83 ec 0c             	sub    esp,0xc
c0011ad7:	68 c4 8e 02 c0       	push   0xc0028ec4
c0011adc:	e8 fa 7d 00 00       	call   c00198db <Krnl::panic(char const*)>
c0011ae1:	83 c4 10             	add    esp,0x10
c0011ae4:	90                   	nop
c0011ae5:	83 c4 0c             	add    esp,0xc
c0011ae8:	c3                   	ret    
c0011ae9:	90                   	nop

c0011aea <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011aea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011aee:	89 c2                	mov    edx,eax
c0011af0:	c1 e8 0a             	shr    eax,0xa
c0011af3:	c1 ea 16             	shr    edx,0x16
c0011af6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011afb:	19 c9                	sbb    ecx,ecx
c0011afd:	c1 e2 0c             	shl    edx,0xc
c0011b00:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011b06:	25 fc 0f 00 00       	and    eax,0xffc
c0011b0b:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011b12:	01 d0                	add    eax,edx
c0011b14:	c3                   	ret    
c0011b15:	90                   	nop

c0011b16 <VAS::getPageTableEntry(unsigned long)>:
c0011b16:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b1a:	89 ca                	mov    edx,ecx
c0011b1c:	c1 e9 0a             	shr    ecx,0xa
c0011b1f:	c1 ea 16             	shr    edx,0x16
c0011b22:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011b28:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011b2e:	c1 e0 0c             	shl    eax,0xc
c0011b31:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011b34:	c3                   	ret    

c0011b35 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011b35:	57                   	push   edi
c0011b36:	56                   	push   esi
c0011b37:	be 01 00 00 00       	mov    esi,0x1
c0011b3c:	53                   	push   ebx
c0011b3d:	83 ec 10             	sub    esp,0x10
c0011b40:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b44:	c1 eb 0c             	shr    ebx,0xc
c0011b47:	eb 3f                	jmp    c0011b88 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011b49:	e8 13 fe ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c0011b4e:	83 ec 08             	sub    esp,0x8
c0011b51:	57                   	push   edi
c0011b52:	50                   	push   eax
c0011b53:	e8 be ff ff ff       	call   c0011b16 <VAS::getPageTableEntry(unsigned long)>
c0011b58:	83 c4 10             	add    esp,0x10
c0011b5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b5d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011b61:	f6 c4 04             	test   ah,0x4
c0011b64:	75 5f                	jne    c0011bc5 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011b66:	80 fa 04             	cmp    dl,0x4
c0011b69:	74 78                	je     c0011be3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011b6b:	80 fa 02             	cmp    dl,0x2
c0011b6e:	0f 84 88 00 00 00    	je     c0011bfc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011b74:	80 fa 03             	cmp    dl,0x3
c0011b77:	0f 84 ad 00 00 00    	je     c0011c2a <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011b7d:	fe ca                	dec    dl
c0011b7f:	0f 84 92 00 00 00    	je     c0011c17 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011b85:	43                   	inc    ebx
c0011b86:	31 f6                	xor    esi,esi
c0011b88:	53                   	push   ebx
c0011b89:	e8 1f fc ff ff       	call   c00117ad <Virt::getPageState(unsigned long)>
c0011b8e:	5f                   	pop    edi
c0011b8f:	89 df                	mov    edi,ebx
c0011b91:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011b95:	c1 e7 0c             	shl    edi,0xc
c0011b98:	84 c0                	test   al,al
c0011b9a:	75 ad                	jne    c0011b49 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011b9c:	83 ec 0c             	sub    esp,0xc
c0011b9f:	68 b5 90 02 c0       	push   0xc00290b5
c0011ba4:	e8 32 7d 00 00       	call   c00198db <Krnl::panic(char const*)>
c0011ba9:	e8 b3 fd ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c0011bae:	5a                   	pop    edx
c0011baf:	59                   	pop    ecx
c0011bb0:	57                   	push   edi
c0011bb1:	50                   	push   eax
c0011bb2:	e8 5f ff ff ff       	call   c0011b16 <VAS::getPageTableEntry(unsigned long)>
c0011bb7:	83 c4 10             	add    esp,0x10
c0011bba:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bbc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011bc0:	f6 c4 04             	test   ah,0x4
c0011bc3:	74 c0                	je     c0011b85 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011bc5:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011bc9:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011bce:	83 ec 0c             	sub    esp,0xc
c0011bd1:	50                   	push   eax
c0011bd2:	e8 87 de ff ff       	call   c000fa5e <Phys::freePage(unsigned long)>
c0011bd7:	83 c4 10             	add    esp,0x10
c0011bda:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011bde:	80 fa 04             	cmp    dl,0x4
c0011be1:	75 88                	jne    c0011b6b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011be3:	89 f0                	mov    eax,esi
c0011be5:	84 c0                	test   al,al
c0011be7:	75 47                	jne    c0011c30 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011be9:	c7 44 24 20 e8 8e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0028ee8
c0011bf1:	83 c4 10             	add    esp,0x10
c0011bf4:	5b                   	pop    ebx
c0011bf5:	5e                   	pop    esi
c0011bf6:	5f                   	pop    edi
c0011bf7:	e9 df 7c 00 00       	jmp    c00198db <Krnl::panic(char const*)>
c0011bfc:	89 f0                	mov    eax,esi
c0011bfe:	84 c0                	test   al,al
c0011c00:	75 15                	jne    c0011c17 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011c02:	83 ec 0c             	sub    esp,0xc
c0011c05:	68 d1 90 02 c0       	push   0xc00290d1
c0011c0a:	e8 cc 7c 00 00       	call   c00198db <Krnl::panic(char const*)>
c0011c0f:	83 c4 10             	add    esp,0x10
c0011c12:	e9 6e ff ff ff       	jmp    c0011b85 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011c17:	83 ec 08             	sub    esp,0x8
c0011c1a:	6a 00                	push   0x0
c0011c1c:	53                   	push   ebx
c0011c1d:	e8 56 fb ff ff       	call   c0011778 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c22:	83 c4 10             	add    esp,0x10
c0011c25:	e9 5b ff ff ff       	jmp    c0011b85 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011c2a:	89 f0                	mov    eax,esi
c0011c2c:	84 c0                	test   al,al
c0011c2e:	75 15                	jne    c0011c45 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011c30:	83 ec 08             	sub    esp,0x8
c0011c33:	6a 00                	push   0x0
c0011c35:	53                   	push   ebx
c0011c36:	e8 3d fb ff ff       	call   c0011778 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c3b:	83 c4 10             	add    esp,0x10
c0011c3e:	83 c4 10             	add    esp,0x10
c0011c41:	5b                   	pop    ebx
c0011c42:	5e                   	pop    esi
c0011c43:	5f                   	pop    edi
c0011c44:	c3                   	ret    
c0011c45:	c7 44 24 20 ed 90 02 c0 	mov    DWORD PTR [esp+0x20],0xc00290ed
c0011c4d:	83 c4 10             	add    esp,0x10
c0011c50:	5b                   	pop    ebx
c0011c51:	5e                   	pop    esi
c0011c52:	5f                   	pop    edi
c0011c53:	e9 83 7c 00 00       	jmp    c00198db <Krnl::panic(char const*)>

c0011c58 <VAS::freeAllocatedPages(unsigned long)>:
c0011c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011c5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011c60:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011c64:	74 09                	je     c0011c6f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011c66:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011c6a:	e9 c6 fe ff ff       	jmp    c0011b35 <Virt::freeKernelVirtualPages(unsigned long)>
c0011c6f:	c7 44 24 04 0c 8f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0028f0c
c0011c77:	e9 45 0b 00 00       	jmp    c00127c1 <Dbg::kprintf(char const*, ...)>

c0011c7c <VAS::virtualToPhysical(unsigned long)>:
c0011c7c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c80:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0011c84:	e8 8d fe ff ff       	call   c0011b16 <VAS::getPageTableEntry(unsigned long)>
c0011c89:	5a                   	pop    edx
c0011c8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8c:	59                   	pop    ecx
c0011c8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011c92:	c3                   	ret    
c0011c93:	90                   	nop

c0011c94 <VAS::reflagRange(unsigned long, int, int, int)>:
c0011c94:	55                   	push   ebp
c0011c95:	57                   	push   edi
c0011c96:	56                   	push   esi
c0011c97:	53                   	push   ebx
c0011c98:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011c9c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0011ca0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0011ca4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011ca8:	85 db                	test   ebx,ebx
c0011caa:	7e 22                	jle    c0011cce <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0011cac:	c1 e3 0c             	shl    ebx,0xc
c0011caf:	01 f3                	add    ebx,esi
c0011cb1:	56                   	push   esi
c0011cb2:	81 c6 00 10 00 00    	add    esi,0x1000
c0011cb8:	55                   	push   ebp
c0011cb9:	e8 58 fe ff ff       	call   c0011b16 <VAS::getPageTableEntry(unsigned long)>
c0011cbe:	5a                   	pop    edx
c0011cbf:	59                   	pop    ecx
c0011cc0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011cc2:	21 f9                	and    ecx,edi
c0011cc4:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0011cc8:	39 f3                	cmp    ebx,esi
c0011cca:	89 08                	mov    DWORD PTR [eax],ecx
c0011ccc:	75 e3                	jne    c0011cb1 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c0011cce:	5b                   	pop    ebx
c0011ccf:	5e                   	pop    esi
c0011cd0:	5f                   	pop    edi
c0011cd1:	5d                   	pop    ebp
c0011cd2:	c3                   	ret    
c0011cd3:	90                   	nop

c0011cd4 <VAS::setToWriteCombining(unsigned long, int)>:
c0011cd4:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0011cd9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011cdf:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0011ce6:	75 01                	jne    c0011ce9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0011ce8:	c3                   	ret    
c0011ce9:	68 80 00 00 00       	push   0x80
c0011cee:	6a ff                	push   0xffffffff
c0011cf0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cf4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cf8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011cfc:	e8 93 ff ff ff       	call   c0011c94 <VAS::reflagRange(unsigned long, int, int, int)>
c0011d01:	83 c4 14             	add    esp,0x14
c0011d04:	c3                   	ret    
c0011d05:	90                   	nop

c0011d06 <VAS::mapOtherVASIn(bool, VAS*)>:
c0011d06:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011d0b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d0f:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0011d12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d16:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0011d19:	19 c0                	sbb    eax,eax
c0011d1b:	83 ca 03             	or     edx,0x3
c0011d1e:	83 e0 fc             	and    eax,0xfffffffc
c0011d21:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0011d28:	0f 20 d8             	mov    eax,cr3
c0011d2b:	0f 22 d8             	mov    cr3,eax
c0011d2e:	c3                   	ret    
c0011d2f:	90                   	nop

c0011d30 <VAS::~VAS()>:
c0011d30:	83 ec 2c             	sub    esp,0x2c
c0011d33:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d3b:	e8 2a b0 00 00       	call   c001cd6a <lockScheduler()>
c0011d40:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d47:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011d4a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011d50:	83 ec 04             	sub    esp,0x4
c0011d53:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011d57:	6a 01                	push   0x1
c0011d59:	50                   	push   eax
c0011d5a:	e8 a7 ff ff ff       	call   c0011d06 <VAS::mapOtherVASIn(bool, VAS*)>
c0011d5f:	83 c4 10             	add    esp,0x10
c0011d62:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011d6a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0011d72:	0f 8f d7 00 00 00    	jg     c0011e4f <VAS::~VAS()+0x11f>
c0011d78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011d7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011d7f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011d83:	c1 e2 02             	shl    edx,0x2
c0011d86:	01 d0                	add    eax,edx
c0011d88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d92:	83 e0 01             	and    eax,0x1
c0011d95:	0f 84 ab 00 00 00    	je     c0011e46 <VAS::~VAS()+0x116>
c0011d9b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011da3:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011dab:	7f 75                	jg     c0011e22 <VAS::~VAS()+0xf2>
c0011dad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011db1:	c1 e0 0a             	shl    eax,0xa
c0011db4:	89 c2                	mov    edx,eax
c0011db6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011dba:	01 d0                	add    eax,edx
c0011dbc:	c1 e0 0c             	shl    eax,0xc
c0011dbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011dc3:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011dc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dca:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011dcd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011dd3:	83 ec 04             	sub    esp,0x4
c0011dd6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011dda:	6a 01                	push   0x1
c0011ddc:	50                   	push   eax
c0011ddd:	e8 08 fd ff ff       	call   c0011aea <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011de2:	83 c4 10             	add    esp,0x10
c0011de5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011de9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ded:	8b 00                	mov    eax,DWORD PTR [eax]
c0011def:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011df3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011df7:	25 01 04 00 00       	and    eax,0x401
c0011dfc:	3d 01 04 00 00       	cmp    eax,0x401
c0011e01:	75 19                	jne    c0011e1c <VAS::~VAS()+0xec>
c0011e03:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e07:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e0c:	83 ec 0c             	sub    esp,0xc
c0011e0f:	50                   	push   eax
c0011e10:	e8 49 dc ff ff       	call   c000fa5e <Phys::freePage(unsigned long)>
c0011e15:	83 c4 10             	add    esp,0x10
c0011e18:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e1c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0011e20:	eb 81                	jmp    c0011da3 <VAS::~VAS()+0x73>
c0011e22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e26:	25 00 04 00 00       	and    eax,0x400
c0011e2b:	74 19                	je     c0011e46 <VAS::~VAS()+0x116>
c0011e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e31:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e36:	83 ec 0c             	sub    esp,0xc
c0011e39:	50                   	push   eax
c0011e3a:	e8 1f dc ff ff       	call   c000fa5e <Phys::freePage(unsigned long)>
c0011e3f:	83 c4 10             	add    esp,0x10
c0011e42:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e46:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011e4a:	e9 1b ff ff ff       	jmp    c0011d6a <VAS::~VAS()+0x3a>
c0011e4f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e53:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e56:	83 ec 0c             	sub    esp,0xc
c0011e59:	50                   	push   eax
c0011e5a:	e8 d6 fc ff ff       	call   c0011b35 <Virt::freeKernelVirtualPages(unsigned long)>
c0011e5f:	83 c4 10             	add    esp,0x10
c0011e62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e66:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011e69:	83 ec 0c             	sub    esp,0xc
c0011e6c:	50                   	push   eax
c0011e6d:	e8 ec db ff ff       	call   c000fa5e <Phys::freePage(unsigned long)>
c0011e72:	83 c4 10             	add    esp,0x10
c0011e75:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011e79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e7d:	c1 e0 02             	shl    eax,0x2
c0011e80:	83 ec 08             	sub    esp,0x8
c0011e83:	50                   	push   eax
c0011e84:	68 30 8f 02 c0       	push   0xc0028f30
c0011e89:	e8 33 09 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0011e8e:	83 c4 10             	add    esp,0x10
c0011e91:	e8 d6 ae 00 00       	call   c001cd6c <unlockScheduler()>
c0011e96:	90                   	nop
c0011e97:	83 c4 2c             	add    esp,0x2c
c0011e9a:	c3                   	ret    
c0011e9b:	90                   	nop

c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011e9c:	55                   	push   ebp
c0011e9d:	57                   	push   edi
c0011e9e:	56                   	push   esi
c0011e9f:	53                   	push   ebx
c0011ea0:	83 ec 1c             	sub    esp,0x1c
c0011ea3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011ea7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011eab:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0011eb1:	77 08                	ja     c0011ebb <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0011eb3:	0f 20 d8             	mov    eax,cr3
c0011eb6:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011eb9:	75 47                	jne    c0011f02 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ebf:	09 d8                	or     eax,ebx
c0011ec1:	a9 ff 0f 00 00       	test   eax,0xfff
c0011ec6:	75 57                	jne    c0011f1f <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011ec8:	89 de                	mov    esi,ebx
c0011eca:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ecd:	c1 ee 16             	shr    esi,0x16
c0011ed0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011ed7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011edb:	74 54                	je     c0011f31 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011edd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ee1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0011ee7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0011eeb:	c1 e6 0c             	shl    esi,0xc
c0011eee:	c1 eb 0a             	shr    ebx,0xa
c0011ef1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0011ef7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0011efa:	83 c4 1c             	add    esp,0x1c
c0011efd:	5b                   	pop    ebx
c0011efe:	5e                   	pop    esi
c0011eff:	5f                   	pop    edi
c0011f00:	5d                   	pop    ebp
c0011f01:	c3                   	ret    
c0011f02:	83 ec 0c             	sub    esp,0xc
c0011f05:	68 50 8f 02 c0       	push   0xc0028f50
c0011f0a:	e8 b2 08 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0011f0f:	83 c4 10             	add    esp,0x10
c0011f12:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f16:	09 d8                	or     eax,ebx
c0011f18:	a9 ff 0f 00 00       	test   eax,0xfff
c0011f1d:	74 a9                	je     c0011ec8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011f1f:	83 ec 0c             	sub    esp,0xc
c0011f22:	68 b8 8f 02 c0       	push   0xc0028fb8
c0011f27:	e8 af 79 00 00       	call   c00198db <Krnl::panic(char const*)>
c0011f2c:	83 c4 10             	add    esp,0x10
c0011f2f:	eb 97                	jmp    c0011ec8 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0011f31:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011f35:	e8 ae db ff ff       	call   c000fae8 <Phys::allocatePage()>
c0011f3a:	89 c5                	mov    ebp,eax
c0011f3c:	e8 20 fa ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c0011f41:	83 ec 0c             	sub    esp,0xc
c0011f44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011f48:	6a 01                	push   0x1
c0011f4a:	e8 82 f8 ff ff       	call   c00117d1 <Virt::allocateKernelVirtualPages(int)>
c0011f4f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011f56:	6a 01                	push   0x1
c0011f58:	50                   	push   eax
c0011f59:	55                   	push   ebp
c0011f5a:	81 cd 07 04 00 00    	or     ebp,0x407
c0011f60:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011f64:	51                   	push   ecx
c0011f65:	e8 26 02 00 00       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f6a:	83 c4 1c             	add    esp,0x1c
c0011f6d:	68 00 10 00 00       	push   0x1000
c0011f72:	6a 00                	push   0x0
c0011f74:	50                   	push   eax
c0011f75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011f79:	e8 0d e7 fe ff       	call   c000068b <memset>
c0011f7e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011f82:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011f85:	e8 ab fb ff ff       	call   c0011b35 <Virt::freeKernelVirtualPages(unsigned long)>
c0011f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011f8e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011f91:	83 c4 10             	add    esp,0x10
c0011f94:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011f97:	e9 41 ff ff ff       	jmp    c0011edd <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011f9c <VAS::allocatePages(int, int)>:
c0011f9c:	55                   	push   ebp
c0011f9d:	57                   	push   edi
c0011f9e:	56                   	push   esi
c0011f9f:	53                   	push   ebx
c0011fa0:	83 ec 1c             	sub    esp,0x1c
c0011fa3:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011fa7:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0011fac:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011fb2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011fb8:	83 e0 01             	and    eax,0x1
c0011fbb:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011fbf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011fc3:	0f 85 cc 00 00 00    	jne    c0012095 <VAS::allocatePages(int, int)+0xf9>
c0011fc9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011fcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fd0:	85 c0                	test   eax,eax
c0011fd2:	0f 84 a1 00 00 00    	je     c0012079 <VAS::allocatePages(int, int)+0xdd>
c0011fd8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011fdc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011fe0:	c1 e6 0c             	shl    esi,0xc
c0011fe3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011fe7:	85 c0                	test   eax,eax
c0011fe9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011fec:	7e 33                	jle    c0012021 <VAS::allocatePages(int, int)+0x85>
c0011fee:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011ff2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ff6:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ffc:	e8 e7 da ff ff       	call   c000fae8 <Phys::allocatePage()>
c0012001:	55                   	push   ebp
c0012002:	53                   	push   ebx
c0012003:	50                   	push   eax
c0012004:	57                   	push   edi
c0012005:	e8 92 fe ff ff       	call   c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)>
c001200a:	83 c4 10             	add    esp,0x10
c001200d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012012:	74 03                	je     c0012017 <VAS::allocatePages(int, int)+0x7b>
c0012014:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012017:	81 c3 00 10 00 00    	add    ebx,0x1000
c001201d:	39 de                	cmp    esi,ebx
c001201f:	75 db                	jne    c0011ffc <VAS::allocatePages(int, int)+0x60>
c0012021:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012026:	75 12                	jne    c001203a <VAS::allocatePages(int, int)+0x9e>
c0012028:	0f 20 d8             	mov    eax,cr3
c001202b:	0f 22 d8             	mov    cr3,eax
c001202e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012032:	83 c4 1c             	add    esp,0x1c
c0012035:	5b                   	pop    ebx
c0012036:	5e                   	pop    esi
c0012037:	5f                   	pop    edi
c0012038:	5d                   	pop    ebp
c0012039:	c3                   	ret    
c001203a:	c1 ee 0a             	shr    esi,0xa
c001203d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012041:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012047:	c1 eb 0a             	shr    ebx,0xa
c001204a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012050:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012056:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001205c:	39 c3                	cmp    ebx,eax
c001205e:	77 ce                	ja     c001202e <VAS::allocatePages(int, int)+0x92>
c0012060:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012063:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012069:	39 d8                	cmp    eax,ebx
c001206b:	73 f3                	jae    c0012060 <VAS::allocatePages(int, int)+0xc4>
c001206d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012071:	83 c4 1c             	add    esp,0x1c
c0012074:	5b                   	pop    ebx
c0012075:	5e                   	pop    esi
c0012076:	5f                   	pop    edi
c0012077:	5d                   	pop    ebp
c0012078:	c3                   	ret    
c0012079:	83 ec 0c             	sub    esp,0xc
c001207c:	68 dc 8f 02 c0       	push   0xc0028fdc
c0012081:	e8 55 78 00 00       	call   c00198db <Krnl::panic(char const*)>
c0012086:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012089:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001208d:	83 c4 10             	add    esp,0x10
c0012090:	e9 43 ff ff ff       	jmp    c0011fd8 <VAS::allocatePages(int, int)+0x3c>
c0012095:	83 ec 0c             	sub    esp,0xc
c0012098:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001209c:	e8 30 f7 ff ff       	call   c00117d1 <Virt::allocateKernelVirtualPages(int)>
c00120a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00120a5:	83 c4 10             	add    esp,0x10
c00120a8:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00120ad:	0f 87 9b 00 00 00    	ja     c001214e <VAS::allocatePages(int, int)+0x1b2>
c00120b3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00120b7:	85 d2                	test   edx,edx
c00120b9:	7e 3c                	jle    c00120f7 <VAS::allocatePages(int, int)+0x15b>
c00120bb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00120bf:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00120c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00120c7:	c1 e5 0c             	shl    ebp,0xc
c00120ca:	81 ce 00 04 00 00    	or     esi,0x400
c00120d0:	01 dd                	add    ebp,ebx
c00120d2:	e8 11 da ff ff       	call   c000fae8 <Phys::allocatePage()>
c00120d7:	56                   	push   esi
c00120d8:	53                   	push   ebx
c00120d9:	50                   	push   eax
c00120da:	57                   	push   edi
c00120db:	e8 bc fd ff ff       	call   c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)>
c00120e0:	83 c4 10             	add    esp,0x10
c00120e3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120e8:	74 03                	je     c00120ed <VAS::allocatePages(int, int)+0x151>
c00120ea:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00120ed:	81 c3 00 10 00 00    	add    ebx,0x1000
c00120f3:	39 dd                	cmp    ebp,ebx
c00120f5:	75 db                	jne    c00120d2 <VAS::allocatePages(int, int)+0x136>
c00120f7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00120fc:	0f 84 26 ff ff ff    	je     c0012028 <VAS::allocatePages(int, int)+0x8c>
c0012102:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012106:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001210a:	89 d3                	mov    ebx,edx
c001210c:	c1 e0 0c             	shl    eax,0xc
c001210f:	c1 eb 0a             	shr    ebx,0xa
c0012112:	01 d0                	add    eax,edx
c0012114:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001211a:	c1 e8 0a             	shr    eax,0xa
c001211d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012123:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012128:	2d 00 00 40 00       	sub    eax,0x400000
c001212d:	39 c3                	cmp    ebx,eax
c001212f:	0f 87 f9 fe ff ff    	ja     c001202e <VAS::allocatePages(int, int)+0x92>
c0012135:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012138:	81 c3 00 10 00 00    	add    ebx,0x1000
c001213e:	39 d8                	cmp    eax,ebx
c0012140:	73 f3                	jae    c0012135 <VAS::allocatePages(int, int)+0x199>
c0012142:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012146:	83 c4 1c             	add    esp,0x1c
c0012149:	5b                   	pop    ebx
c001214a:	5e                   	pop    esi
c001214b:	5f                   	pop    edi
c001214c:	5d                   	pop    ebp
c001214d:	c3                   	ret    
c001214e:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0012153:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012159:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012160:	0f 84 4d ff ff ff    	je     c00120b3 <VAS::allocatePages(int, int)+0x117>
c0012166:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001216e:	e9 40 ff ff ff       	jmp    c00120b3 <VAS::allocatePages(int, int)+0x117>
c0012173:	90                   	nop

c0012174 <VAS::setCPUSpecific(unsigned long)>:
c0012174:	83 ec 0c             	sub    esp,0xc
c0012177:	6a 05                	push   0x5
c0012179:	68 00 00 40 c2       	push   0xc2400000
c001217e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012186:	e8 11 fd ff ff       	call   c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)>
c001218b:	83 c4 1c             	add    esp,0x1c
c001218e:	c3                   	ret    
c001218f:	90                   	nop

c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012190:	55                   	push   ebp
c0012191:	57                   	push   edi
c0012192:	56                   	push   esi
c0012193:	53                   	push   ebx
c0012194:	83 ec 1c             	sub    esp,0x1c
c0012197:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001219c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00121a0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121a6:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00121aa:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c00121b0:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00121b4:	83 e0 01             	and    eax,0x1
c00121b7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00121bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121bf:	85 c0                	test   eax,eax
c00121c1:	7e 39                	jle    c00121fc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00121c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121c7:	89 f3                	mov    ebx,esi
c00121c9:	c1 e0 0c             	shl    eax,0xc
c00121cc:	01 f0                	add    eax,esi
c00121ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121d2:	55                   	push   ebp
c00121d3:	53                   	push   ebx
c00121d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00121d8:	29 f0                	sub    eax,esi
c00121da:	01 d8                	add    eax,ebx
c00121dc:	50                   	push   eax
c00121dd:	57                   	push   edi
c00121de:	e8 b9 fc ff ff       	call   c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)>
c00121e3:	83 c4 10             	add    esp,0x10
c00121e6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00121eb:	74 03                	je     c00121f0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00121ed:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00121f0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00121f6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00121fa:	75 d6                	jne    c00121d2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00121fc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012201:	75 10                	jne    c0012213 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0012203:	0f 20 d8             	mov    eax,cr3
c0012206:	0f 22 d8             	mov    cr3,eax
c0012209:	83 c4 1c             	add    esp,0x1c
c001220c:	89 f0                	mov    eax,esi
c001220e:	5b                   	pop    ebx
c001220f:	5e                   	pop    esi
c0012210:	5f                   	pop    edi
c0012211:	5d                   	pop    ebp
c0012212:	c3                   	ret    
c0012213:	89 f3                	mov    ebx,esi
c0012215:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012219:	c1 eb 0a             	shr    ebx,0xa
c001221c:	c1 e0 0c             	shl    eax,0xc
c001221f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012225:	01 f0                	add    eax,esi
c0012227:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001222d:	c1 e8 0a             	shr    eax,0xa
c0012230:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012235:	2d 00 00 40 00       	sub    eax,0x400000
c001223a:	39 c3                	cmp    ebx,eax
c001223c:	77 cb                	ja     c0012209 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001223e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012241:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012247:	39 d8                	cmp    eax,ebx
c0012249:	73 f3                	jae    c001223e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001224b:	83 c4 1c             	add    esp,0x1c
c001224e:	89 f0                	mov    eax,esi
c0012250:	5b                   	pop    ebx
c0012251:	5e                   	pop    esi
c0012252:	5f                   	pop    edi
c0012253:	5d                   	pop    ebp
c0012254:	c3                   	ret    
c0012255:	90                   	nop

c0012256 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012256:	55                   	push   ebp
c0012257:	57                   	push   edi
c0012258:	56                   	push   esi
c0012259:	53                   	push   ebx
c001225a:	83 ec 1c             	sub    esp,0x1c
c001225d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012261:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012265:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012269:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001226d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012272:	75 4a                	jne    c00122be <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012274:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012278:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001227b:	c1 eb 16             	shr    ebx,0x16
c001227e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012285:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012289:	74 4d                	je     c00122d8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001228b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001228f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012293:	c1 e8 0a             	shr    eax,0xa
c0012296:	80 fa 01             	cmp    dl,0x1
c0012299:	19 d2                	sbb    edx,edx
c001229b:	c1 e3 0c             	shl    ebx,0xc
c001229e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00122a2:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00122a8:	25 fc 0f 00 00       	and    eax,0xffc
c00122ad:	01 d8                	add    eax,ebx
c00122af:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00122b6:	83 c4 1c             	add    esp,0x1c
c00122b9:	5b                   	pop    ebx
c00122ba:	5e                   	pop    esi
c00122bb:	5f                   	pop    edi
c00122bc:	5d                   	pop    ebp
c00122bd:	c3                   	ret    
c00122be:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00122c2:	83 ec 0c             	sub    esp,0xc
c00122c5:	68 08 90 02 c0       	push   0xc0029008
c00122ca:	e8 0c 76 00 00       	call   c00198db <Krnl::panic(char const*)>
c00122cf:	83 c4 10             	add    esp,0x10
c00122d2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00122d6:	eb 9c                	jmp    c0012274 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00122d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122dc:	e8 07 d8 ff ff       	call   c000fae8 <Phys::allocatePage()>
c00122e1:	89 c5                	mov    ebp,eax
c00122e3:	e8 79 f6 ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c00122e8:	83 ec 0c             	sub    esp,0xc
c00122eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122ef:	6a 01                	push   0x1
c00122f1:	e8 db f4 ff ff       	call   c00117d1 <Virt::allocateKernelVirtualPages(int)>
c00122f6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00122fd:	6a 01                	push   0x1
c00122ff:	50                   	push   eax
c0012300:	55                   	push   ebp
c0012301:	81 cd 07 04 00 00    	or     ebp,0x407
c0012307:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001230b:	51                   	push   ecx
c001230c:	e8 7f fe ff ff       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012311:	83 c4 1c             	add    esp,0x1c
c0012314:	68 00 10 00 00       	push   0x1000
c0012319:	6a 00                	push   0x0
c001231b:	50                   	push   eax
c001231c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012320:	e8 66 e3 fe ff       	call   c000068b <memset>
c0012325:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012329:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001232c:	e8 04 f8 ff ff       	call   c0011b35 <Virt::freeKernelVirtualPages(unsigned long)>
c0012331:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012334:	83 c4 10             	add    esp,0x10
c0012337:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001233a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001233e:	e9 48 ff ff ff       	jmp    c001228b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012343:	90                   	nop

c0012344 <VAS::VAS(bool)>:
c0012344:	53                   	push   ebx
c0012345:	83 ec 28             	sub    esp,0x28
c0012348:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001234c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012350:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012354:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001235b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001235f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012363:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012366:	e8 7d d7 ff ff       	call   c000fae8 <Phys::allocatePage()>
c001236b:	89 c2                	mov    edx,eax
c001236d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012371:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012374:	e8 e8 f5 ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c0012379:	89 c3                	mov    ebx,eax
c001237b:	83 ec 0c             	sub    esp,0xc
c001237e:	6a 01                	push   0x1
c0012380:	e8 4c f4 ff ff       	call   c00117d1 <Virt::allocateKernelVirtualPages(int)>
c0012385:	83 c4 10             	add    esp,0x10
c0012388:	89 c2                	mov    edx,eax
c001238a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001238e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012391:	83 ec 0c             	sub    esp,0xc
c0012394:	6a 03                	push   0x3
c0012396:	6a 01                	push   0x1
c0012398:	52                   	push   edx
c0012399:	50                   	push   eax
c001239a:	53                   	push   ebx
c001239b:	e8 f0 fd ff ff       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123a0:	83 c4 20             	add    esp,0x20
c00123a3:	89 c2                	mov    edx,eax
c00123a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123a9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00123ac:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00123b4:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00123bc:	7f 1c                	jg     c00123da <VAS::VAS(bool)+0x96>
c00123be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00123c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00123c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00123c9:	c1 e2 02             	shl    edx,0x2
c00123cc:	01 d0                	add    eax,edx
c00123ce:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00123d4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00123d8:	eb da                	jmp    c00123b4 <VAS::VAS(bool)+0x70>
c00123da:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00123e2:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00123ea:	7f 7a                	jg     c0012466 <VAS::VAS(bool)+0x122>
c00123ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00123f0:	2d 00 02 00 00       	sub    eax,0x200
c00123f5:	c1 e0 0c             	shl    eax,0xc
c00123f8:	83 c8 03             	or     eax,0x3
c00123fb:	89 c2                	mov    edx,eax
c00123fd:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0012402:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012408:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001240e:	83 e0 10             	and    eax,0x10
c0012411:	84 c0                	test   al,al
c0012413:	74 07                	je     c001241c <VAS::VAS(bool)+0xd8>
c0012415:	b8 00 01 00 00       	mov    eax,0x100
c001241a:	eb 05                	jmp    c0012421 <VAS::VAS(bool)+0xdd>
c001241c:	b8 00 00 00 00       	mov    eax,0x0
c0012421:	09 d0                	or     eax,edx
c0012423:	89 c1                	mov    ecx,eax
c0012425:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012429:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001242c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012430:	c1 e2 02             	shl    edx,0x2
c0012433:	01 d0                	add    eax,edx
c0012435:	89 ca                	mov    edx,ecx
c0012437:	89 10                	mov    DWORD PTR [eax],edx
c0012439:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001243d:	2d 40 03 00 00       	sub    eax,0x340
c0012442:	83 f8 7f             	cmp    eax,0x7f
c0012445:	77 16                	ja     c001245d <VAS::VAS(bool)+0x119>
c0012447:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001244b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001244e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012452:	c1 e2 02             	shl    edx,0x2
c0012455:	01 d0                	add    eax,edx
c0012457:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001245d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012461:	e9 7c ff ff ff       	jmp    c00123e2 <VAS::VAS(bool)+0x9e>
c0012466:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001246b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012471:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012477:	83 e0 10             	and    eax,0x10
c001247a:	84 c0                	test   al,al
c001247c:	74 07                	je     c0012485 <VAS::VAS(bool)+0x141>
c001247e:	b8 03 41 00 00       	mov    eax,0x4103
c0012483:	eb 05                	jmp    c001248a <VAS::VAS(bool)+0x146>
c0012485:	b8 03 40 00 00       	mov    eax,0x4003
c001248a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001248e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012491:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012497:	89 02                	mov    DWORD PTR [edx],eax
c0012499:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001249e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124a4:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00124aa:	83 ec 08             	sub    esp,0x8
c00124ad:	50                   	push   eax
c00124ae:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00124b2:	e8 bd fc ff ff       	call   c0012174 <VAS::setCPUSpecific(unsigned long)>
c00124b7:	83 c4 10             	add    esp,0x10
c00124ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124be:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00124c1:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00124c6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124cc:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00124d2:	83 e0 10             	and    eax,0x10
c00124d5:	84 c0                	test   al,al
c00124d7:	74 07                	je     c00124e0 <VAS::VAS(bool)+0x19c>
c00124d9:	b8 00 01 00 00       	mov    eax,0x100
c00124de:	eb 05                	jmp    c00124e5 <VAS::VAS(bool)+0x1a1>
c00124e0:	b8 00 00 00 00       	mov    eax,0x0
c00124e5:	09 c2                	or     edx,eax
c00124e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00124eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00124ee:	05 fc 0f 00 00       	add    eax,0xffc
c00124f3:	83 ca 03             	or     edx,0x3
c00124f6:	89 10                	mov    DWORD PTR [eax],edx
c00124f8:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00124fd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012503:	83 ec 0c             	sub    esp,0xc
c0012506:	50                   	push   eax
c0012507:	e8 90 19 00 00       	call   c0013e9c <Device::getName()>
c001250c:	83 c4 10             	add    esp,0x10
c001250f:	83 ec 08             	sub    esp,0x8
c0012512:	68 07 91 02 c0       	push   0xc0029107
c0012517:	50                   	push   eax
c0012518:	e8 5e e2 fe ff       	call   c000077b <strcmp>
c001251d:	83 c4 10             	add    esp,0x10
c0012520:	85 c0                	test   eax,eax
c0012522:	0f 94 c0             	sete   al
c0012525:	84 c0                	test   al,al
c0012527:	74 70                	je     c0012599 <VAS::VAS(bool)+0x255>
c0012529:	e8 1f a8 00 00       	call   c001cd4d <disableIRQs()>
c001252e:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0012533:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012539:	05 7c 09 00 00       	add    eax,0x97c
c001253e:	83 ec 0c             	sub    esp,0xc
c0012541:	50                   	push   eax
c0012542:	e8 09 ca ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012547:	83 c4 10             	add    esp,0x10
c001254a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001254f:	89 c3                	mov    ebx,eax
c0012551:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0012556:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001255c:	05 7c 09 00 00       	add    eax,0x97c
c0012561:	83 ec 0c             	sub    esp,0xc
c0012564:	50                   	push   eax
c0012565:	e8 e6 c9 ff ff       	call   c000ef50 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001256a:	83 c4 10             	add    esp,0x10
c001256d:	83 ec 08             	sub    esp,0x8
c0012570:	50                   	push   eax
c0012571:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012575:	e8 9c f5 ff ff       	call   c0011b16 <VAS::getPageTableEntry(unsigned long)>
c001257a:	83 c4 10             	add    esp,0x10
c001257d:	8b 00                	mov    eax,DWORD PTR [eax]
c001257f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012584:	6a 11                	push   0x11
c0012586:	53                   	push   ebx
c0012587:	50                   	push   eax
c0012588:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001258c:	e8 0b f9 ff ff       	call   c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012591:	83 c4 10             	add    esp,0x10
c0012594:	e8 c2 a7 00 00       	call   c001cd5b <enableIRQs()>
c0012599:	90                   	nop
c001259a:	83 c4 28             	add    esp,0x28
c001259d:	5b                   	pop    ebx
c001259e:	c3                   	ret    

c001259f <mapVASFirstTime>:
c001259f:	55                   	push   ebp
c00125a0:	57                   	push   edi
c00125a1:	56                   	push   esi
c00125a2:	53                   	push   ebx
c00125a3:	83 ec 0c             	sub    esp,0xc
c00125a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125ab:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00125ae:	4a                   	dec    edx
c00125af:	0f 84 8e 00 00 00    	je     c0012643 <mapVASFirstTime+0xa4>
c00125b5:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00125b8:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c00125bb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00125c0:	c1 e5 15             	shl    ebp,0x15
c00125c3:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c00125c8:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00125ce:	29 eb                	sub    ebx,ebp
c00125d0:	29 ee                	sub    esi,ebp
c00125d2:	e8 11 d5 ff ff       	call   c000fae8 <Phys::allocatePage()>
c00125d7:	83 ec 0c             	sub    esp,0xc
c00125da:	68 03 04 00 00       	push   0x403
c00125df:	6a 01                	push   0x1
c00125e1:	53                   	push   ebx
c00125e2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00125e8:	50                   	push   eax
c00125e9:	57                   	push   edi
c00125ea:	e8 a1 fb ff ff       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00125ef:	83 c4 20             	add    esp,0x20
c00125f2:	39 f3                	cmp    ebx,esi
c00125f4:	75 dc                	jne    c00125d2 <mapVASFirstTime+0x33>
c00125f6:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00125fb:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012600:	29 ee                	sub    esi,ebp
c0012602:	29 e8                	sub    eax,ebp
c0012604:	89 c5                	mov    ebp,eax
c0012606:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c001260a:	19 db                	sbb    ebx,ebx
c001260c:	e8 d7 d4 ff ff       	call   c000fae8 <Phys::allocatePage()>
c0012611:	83 e3 04             	and    ebx,0x4
c0012614:	83 ec 0c             	sub    esp,0xc
c0012617:	81 c3 03 04 00 00    	add    ebx,0x403
c001261d:	53                   	push   ebx
c001261e:	6a 01                	push   0x1
c0012620:	56                   	push   esi
c0012621:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012627:	50                   	push   eax
c0012628:	57                   	push   edi
c0012629:	e8 62 fb ff ff       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001262e:	83 c4 20             	add    esp,0x20
c0012631:	39 f5                	cmp    ebp,esi
c0012633:	75 d1                	jne    c0012606 <mapVASFirstTime+0x67>
c0012635:	0f 20 d8             	mov    eax,cr3
c0012638:	0f 22 d8             	mov    cr3,eax
c001263b:	83 c4 0c             	add    esp,0xc
c001263e:	5b                   	pop    ebx
c001263f:	5e                   	pop    esi
c0012640:	5f                   	pop    edi
c0012641:	5d                   	pop    ebp
c0012642:	c3                   	ret    
c0012643:	83 ec 0c             	sub    esp,0xc
c0012646:	68 15 91 02 c0       	push   0xc0029115
c001264b:	e8 71 01 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0012650:	83 c4 10             	add    esp,0x10
c0012653:	83 c4 0c             	add    esp,0xc
c0012656:	5b                   	pop    ebx
c0012657:	5e                   	pop    esi
c0012658:	5f                   	pop    edi
c0012659:	5d                   	pop    ebp
c001265a:	c3                   	ret    

c001265b <__cxa_atexit>:
c001265b:	31 c0                	xor    eax,eax
c001265d:	c3                   	ret    

c001265e <__cxa_finalize>:
c001265e:	c3                   	ret    

c001265f <__stack_chk_fail>:
c001265f:	55                   	push   ebp
c0012660:	89 e5                	mov    ebp,esp
c0012662:	83 ec 14             	sub    esp,0x14
c0012665:	68 2e 91 02 c0       	push   0xc002912e
c001266a:	e8 52 01 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001266f:	58                   	pop    eax
c0012670:	5a                   	pop    edx
c0012671:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012674:	68 7e 91 02 c0       	push   0xc002917e
c0012679:	e8 43 01 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001267e:	59                   	pop    ecx
c001267f:	58                   	pop    eax
c0012680:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012683:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012686:	68 7e 91 02 c0       	push   0xc002917e
c001268b:	e8 31 01 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0012690:	5a                   	pop    edx
c0012691:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012694:	59                   	pop    ecx
c0012695:	8b 00                	mov    eax,DWORD PTR [eax]
c0012697:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001269a:	68 7e 91 02 c0       	push   0xc002917e
c001269f:	e8 1d 01 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00126a4:	5a                   	pop    edx
c00126a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00126a8:	59                   	pop    ecx
c00126a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00126ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00126ad:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00126b0:	68 7e 91 02 c0       	push   0xc002917e
c00126b5:	e8 07 01 00 00       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00126ba:	c7 04 24 86 91 02 c0 	mov    DWORD PTR [esp],0xc0029186
c00126c1:	e8 15 72 00 00       	call   c00198db <Krnl::panic(char const*)>
c00126c6:	83 c4 10             	add    esp,0x10
c00126c9:	c9                   	leave  
c00126ca:	c3                   	ret    

c00126cb <__cxa_pure_virtual>:
c00126cb:	83 ec 18             	sub    esp,0x18
c00126ce:	68 9e 91 02 c0       	push   0xc002919e
c00126d3:	e8 03 72 00 00       	call   c00198db <Krnl::panic(char const*)>
c00126d8:	83 c4 1c             	add    esp,0x1c
c00126db:	c3                   	ret    

c00126dc <operator new[](unsigned long)>:
c00126dc:	e9 f3 cd ff ff       	jmp    c000f4d4 <malloc>

c00126e1 <operator delete(void*, unsigned long)>:
c00126e1:	e9 0e ce ff ff       	jmp    c000f4f4 <rfree>

c00126e6 <operator delete[](void*)>:
c00126e6:	e9 09 ce ff ff       	jmp    c000f4f4 <rfree>

c00126eb <operator delete[](void*, unsigned long)>:
c00126eb:	e9 04 ce ff ff       	jmp    c000f4f4 <rfree>

c00126f0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c00126f0:	57                   	push   edi
c00126f1:	b9 3f 00 00 00       	mov    ecx,0x3f
c00126f6:	56                   	push   esi
c00126f7:	be b4 91 02 c0       	mov    esi,0xc00291b4
c00126fc:	53                   	push   ebx
c00126fd:	83 ec 40             	sub    esp,0x40
c0012700:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012704:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012708:	fc                   	cld    
c0012709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001270b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c001270f:	83 f9 3e             	cmp    ecx,0x3e
c0012712:	7e 05                	jle    c0012719 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012714:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012719:	89 df                	mov    edi,ebx
c001271b:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001271f:	eb 02                	jmp    c0012723 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012721:	89 c7                	mov    edi,eax
c0012723:	31 d2                	xor    edx,edx
c0012725:	46                   	inc    esi
c0012726:	89 f8                	mov    eax,edi
c0012728:	f7 f1                	div    ecx
c001272a:	39 cf                	cmp    edi,ecx
c001272c:	73 f3                	jae    c0012721 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c001272e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012731:	eb 02                	jmp    c0012735 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012733:	89 c3                	mov    ebx,eax
c0012735:	31 d2                	xor    edx,edx
c0012737:	4e                   	dec    esi
c0012738:	89 d8                	mov    eax,ebx
c001273a:	f7 f1                	div    ecx
c001273c:	39 cb                	cmp    ebx,ecx
c001273e:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012742:	88 16                	mov    BYTE PTR [esi],dl
c0012744:	73 ed                	jae    c0012733 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012746:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001274a:	83 c4 40             	add    esp,0x40
c001274d:	5b                   	pop    ebx
c001274e:	5e                   	pop    esi
c001274f:	5f                   	pop    edi
c0012750:	c3                   	ret    

c0012751 <Dbg::logc(char)>:
c0012751:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012755:	ba fd 03 00 00       	mov    edx,0x3fd
c001275a:	ec                   	in     al,dx
c001275b:	a8 20                	test   al,0x20
c001275d:	74 fb                	je     c001275a <Dbg::logc(char)+0x9>
c001275f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012764:	88 c8                	mov    al,cl
c0012766:	ee                   	out    dx,al
c0012767:	c3                   	ret    

c0012768 <Dbg::logs(char*)>:
c0012768:	53                   	push   ebx
c0012769:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001276d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012770:	84 c0                	test   al,al
c0012772:	74 0f                	je     c0012783 <Dbg::logs(char*)+0x1b>
c0012774:	50                   	push   eax
c0012775:	43                   	inc    ebx
c0012776:	e8 d6 ff ff ff       	call   c0012751 <Dbg::logc(char)>
c001277b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001277e:	5a                   	pop    edx
c001277f:	84 c0                	test   al,al
c0012781:	75 f1                	jne    c0012774 <Dbg::logs(char*)+0xc>
c0012783:	5b                   	pop    ebx
c0012784:	c3                   	ret    

c0012785 <Dbg::logWriteInt(unsigned int)>:
c0012785:	83 ec 10             	sub    esp,0x10
c0012788:	6a 0a                	push   0xa
c001278a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001278e:	50                   	push   eax
c001278f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012793:	e8 58 ff ff ff       	call   c00126f0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012798:	50                   	push   eax
c0012799:	e8 ca ff ff ff       	call   c0012768 <Dbg::logs(char*)>
c001279e:	83 c4 20             	add    esp,0x20
c00127a1:	c3                   	ret    

c00127a2 <Dbg::logWriteIntBase(unsigned int, int)>:
c00127a2:	83 ec 10             	sub    esp,0x10
c00127a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00127a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00127ad:	50                   	push   eax
c00127ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127b2:	e8 39 ff ff ff       	call   c00126f0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c00127b7:	50                   	push   eax
c00127b8:	e8 ab ff ff ff       	call   c0012768 <Dbg::logs(char*)>
c00127bd:	83 c4 20             	add    esp,0x20
c00127c0:	c3                   	ret    

c00127c1 <Dbg::kprintf(char const*, ...)>:
c00127c1:	55                   	push   ebp
c00127c2:	57                   	push   edi
c00127c3:	56                   	push   esi
c00127c4:	53                   	push   ebx
c00127c5:	83 ec 0c             	sub    esp,0xc
c00127c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00127cc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00127d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00127d4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00127d7:	84 c0                	test   al,al
c00127d9:	74 4a                	je     c0012825 <Dbg::kprintf(char const*, ...)+0x64>
c00127db:	31 db                	xor    ebx,ebx
c00127dd:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00127e0:	3c 25                	cmp    al,0x25
c00127e2:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c00127e5:	0f 85 e4 00 00 00    	jne    c00128cf <Dbg::kprintf(char const*, ...)+0x10e>
c00127eb:	83 c3 02             	add    ebx,0x2
c00127ee:	8a 07                	mov    al,BYTE PTR [edi]
c00127f0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c00127f3:	83 e8 25             	sub    eax,0x25
c00127f6:	3c 53                	cmp    al,0x53
c00127f8:	0f 87 ba 00 00 00    	ja     c00128b8 <Dbg::kprintf(char const*, ...)+0xf7>
c00127fe:	0f b6 c0             	movzx  eax,al
c0012801:	ff 24 85 f4 91 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6e0c]
c0012808:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001280c:	89 c8                	mov    eax,ecx
c001280e:	83 c1 04             	add    ecx,0x4
c0012811:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012815:	ff 30                	push   DWORD PTR [eax]
c0012817:	e8 4c ff ff ff       	call   c0012768 <Dbg::logs(char*)>
c001281c:	58                   	pop    eax
c001281d:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012821:	84 c0                	test   al,al
c0012823:	75 b8                	jne    c00127dd <Dbg::kprintf(char const*, ...)+0x1c>
c0012825:	83 c4 0c             	add    esp,0xc
c0012828:	5b                   	pop    ebx
c0012829:	5e                   	pop    esi
c001282a:	5f                   	pop    edi
c001282b:	5d                   	pop    ebp
c001282c:	c3                   	ret    
c001282d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012831:	89 d0                	mov    eax,edx
c0012833:	83 c2 04             	add    edx,0x4
c0012836:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001283a:	ff 30                	push   DWORD PTR [eax]
c001283c:	e8 44 ff ff ff       	call   c0012785 <Dbg::logWriteInt(unsigned int)>
c0012841:	58                   	pop    eax
c0012842:	eb d9                	jmp    c001281d <Dbg::kprintf(char const*, ...)+0x5c>
c0012844:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012848:	89 d0                	mov    eax,edx
c001284a:	83 c2 04             	add    edx,0x4
c001284d:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012850:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012854:	50                   	push   eax
c0012855:	e8 f7 fe ff ff       	call   c0012751 <Dbg::logc(char)>
c001285a:	58                   	pop    eax
c001285b:	eb c0                	jmp    c001281d <Dbg::kprintf(char const*, ...)+0x5c>
c001285d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012861:	89 c8                	mov    eax,ecx
c0012863:	83 c1 04             	add    ecx,0x4
c0012866:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c001286a:	ff 30                	push   DWORD PTR [eax]
c001286c:	e8 14 ff ff ff       	call   c0012785 <Dbg::logWriteInt(unsigned int)>
c0012871:	5f                   	pop    edi
c0012872:	eb a9                	jmp    c001281d <Dbg::kprintf(char const*, ...)+0x5c>
c0012874:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012878:	89 c8                	mov    eax,ecx
c001287a:	83 c1 04             	add    ecx,0x4
c001287d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012881:	6a 10                	push   0x10
c0012883:	ff 30                	push   DWORD PTR [eax]
c0012885:	e8 18 ff ff ff       	call   c00127a2 <Dbg::logWriteIntBase(unsigned int, int)>
c001288a:	59                   	pop    ecx
c001288b:	5f                   	pop    edi
c001288c:	eb 8f                	jmp    c001281d <Dbg::kprintf(char const*, ...)+0x5c>
c001288e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012892:	89 d0                	mov    eax,edx
c0012894:	83 c2 08             	add    edx,0x8
c0012897:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001289b:	6a 10                	push   0x10
c001289d:	ff 30                	push   DWORD PTR [eax]
c001289f:	e8 fe fe ff ff       	call   c00127a2 <Dbg::logWriteIntBase(unsigned int, int)>
c00128a4:	58                   	pop    eax
c00128a5:	5a                   	pop    edx
c00128a6:	e9 72 ff ff ff       	jmp    c001281d <Dbg::kprintf(char const*, ...)+0x5c>
c00128ab:	6a 25                	push   0x25
c00128ad:	e8 9f fe ff ff       	call   c0012751 <Dbg::logc(char)>
c00128b2:	58                   	pop    eax
c00128b3:	e9 65 ff ff ff       	jmp    c001281d <Dbg::kprintf(char const*, ...)+0x5c>
c00128b8:	6a 25                	push   0x25
c00128ba:	e8 92 fe ff ff       	call   c0012751 <Dbg::logc(char)>
c00128bf:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00128c2:	50                   	push   eax
c00128c3:	e8 89 fe ff ff       	call   c0012751 <Dbg::logc(char)>
c00128c8:	5a                   	pop    edx
c00128c9:	59                   	pop    ecx
c00128ca:	e9 4e ff ff ff       	jmp    c001281d <Dbg::kprintf(char const*, ...)+0x5c>
c00128cf:	50                   	push   eax
c00128d0:	89 eb                	mov    ebx,ebp
c00128d2:	e8 7a fe ff ff       	call   c0012751 <Dbg::logc(char)>
c00128d7:	89 fd                	mov    ebp,edi
c00128d9:	58                   	pop    eax
c00128da:	e9 3e ff ff ff       	jmp    c001281d <Dbg::kprintf(char const*, ...)+0x5c>
c00128df:	90                   	nop

c00128e0 <File::read(unsigned long long, void*, int*)>:
c00128e0:	53                   	push   ebx
c00128e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00128e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00128e9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00128f0:	3c 19                	cmp    al,0x19
c00128f2:	77 35                	ja     c0012929 <File::read(unsigned long long, void*, int*)+0x49>
c00128f4:	8b 04 85 a0 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3060]
c00128fb:	85 c0                	test   eax,eax
c00128fd:	74 2a                	je     c0012929 <File::read(unsigned long long, void*, int*)+0x49>
c00128ff:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012905:	85 c0                	test   eax,eax
c0012907:	74 20                	je     c0012929 <File::read(unsigned long long, void*, int*)+0x49>
c0012909:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001290d:	74 21                	je     c0012930 <File::read(unsigned long long, void*, int*)+0x50>
c001290f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012911:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012915:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001291b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001291f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012923:	5b                   	pop    ebx
c0012924:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012927:	ff e0                	jmp    eax
c0012929:	b8 0b 00 00 00       	mov    eax,0xb
c001292e:	eb 05                	jmp    c0012935 <File::read(unsigned long long, void*, int*)+0x55>
c0012930:	b8 05 00 00 00       	mov    eax,0x5
c0012935:	5b                   	pop    ebx
c0012936:	c3                   	ret    
c0012937:	90                   	nop

c0012938 <File::write(unsigned long long, void*, int*)>:
c0012938:	53                   	push   ebx
c0012939:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001293d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012941:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012948:	3c 19                	cmp    al,0x19
c001294a:	77 35                	ja     c0012981 <File::write(unsigned long long, void*, int*)+0x49>
c001294c:	8b 04 85 a0 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3060]
c0012953:	85 c0                	test   eax,eax
c0012955:	74 2a                	je     c0012981 <File::write(unsigned long long, void*, int*)+0x49>
c0012957:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001295d:	85 c0                	test   eax,eax
c001295f:	74 20                	je     c0012981 <File::write(unsigned long long, void*, int*)+0x49>
c0012961:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012965:	74 21                	je     c0012988 <File::write(unsigned long long, void*, int*)+0x50>
c0012967:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012969:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001296d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012973:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012977:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001297b:	5b                   	pop    ebx
c001297c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001297f:	ff e0                	jmp    eax
c0012981:	b8 0b 00 00 00       	mov    eax,0xb
c0012986:	eb 05                	jmp    c001298d <File::write(unsigned long long, void*, int*)+0x55>
c0012988:	b8 05 00 00 00       	mov    eax,0x5
c001298d:	5b                   	pop    ebx
c001298e:	c3                   	ret    
c001298f:	90                   	nop

c0012990 <Directory::read(unsigned long long, void*, int*)>:
c0012990:	53                   	push   ebx
c0012991:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012995:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012999:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00129a0:	3c 19                	cmp    al,0x19
c00129a2:	77 35                	ja     c00129d9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00129a4:	8b 04 85 a0 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3060]
c00129ab:	85 c0                	test   eax,eax
c00129ad:	74 2a                	je     c00129d9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00129af:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129b5:	85 c0                	test   eax,eax
c00129b7:	74 20                	je     c00129d9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00129b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00129bd:	74 21                	je     c00129e0 <Directory::read(unsigned long long, void*, int*)+0x50>
c00129bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c00129c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00129c5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00129cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00129cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00129d3:	5b                   	pop    ebx
c00129d4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00129d7:	ff e0                	jmp    eax
c00129d9:	b8 0b 00 00 00       	mov    eax,0xb
c00129de:	eb 05                	jmp    c00129e5 <Directory::read(unsigned long long, void*, int*)+0x55>
c00129e0:	b8 05 00 00 00       	mov    eax,0x5
c00129e5:	5b                   	pop    ebx
c00129e6:	c3                   	ret    
c00129e7:	90                   	nop

c00129e8 <Directory::write(unsigned long long, void*, int*)>:
c00129e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00129ec:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00129f3:	b8 0b 00 00 00       	mov    eax,0xb
c00129f8:	80 fa 19             	cmp    dl,0x19
c00129fb:	77 18                	ja     c0012a15 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00129fd:	8b 14 95 a0 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3060]
c0012a04:	85 d2                	test   edx,edx
c0012a06:	74 0d                	je     c0012a15 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012a08:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012a0f:	19 c0                	sbb    eax,eax
c0012a11:	83 e0 0a             	and    eax,0xa
c0012a14:	40                   	inc    eax
c0012a15:	c3                   	ret    

c0012a16 <File::isAtty()>:
c0012a16:	31 c0                	xor    eax,eax
c0012a18:	c3                   	ret    
c0012a19:	90                   	nop

c0012a1a <Directory::isAtty()>:
c0012a1a:	31 c0                	xor    eax,eax
c0012a1c:	c3                   	ret    
c0012a1d:	90                   	nop

c0012a1e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012a1e:	b8 0a 00 00 00       	mov    eax,0xa
c0012a23:	c3                   	ret    

c0012a24 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012a24:	b8 0a 00 00 00       	mov    eax,0xa
c0012a29:	c3                   	ret    

c0012a2a <File::~File()>:
c0012a2a:	83 ec 0c             	sub    esp,0xc
c0012a2d:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c0012a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a36:	89 10                	mov    DWORD PTR [eax],edx
c0012a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a3c:	83 ec 0c             	sub    esp,0xc
c0012a3f:	50                   	push   eax
c0012a40:	e8 2b eb ff ff       	call   c0011570 <UnixFile::~UnixFile()>
c0012a45:	83 c4 10             	add    esp,0x10
c0012a48:	90                   	nop
c0012a49:	83 c4 0c             	add    esp,0xc
c0012a4c:	c3                   	ret    
c0012a4d:	90                   	nop

c0012a4e <File::~File()>:
c0012a4e:	83 ec 0c             	sub    esp,0xc
c0012a51:	83 ec 0c             	sub    esp,0xc
c0012a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a58:	e8 cd ff ff ff       	call   c0012a2a <File::~File()>
c0012a5d:	83 c4 10             	add    esp,0x10
c0012a60:	83 ec 08             	sub    esp,0x8
c0012a63:	68 14 01 00 00       	push   0x114
c0012a68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a6c:	e8 70 fc ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0012a71:	83 c4 10             	add    esp,0x10
c0012a74:	83 c4 0c             	add    esp,0xc
c0012a77:	c3                   	ret    

c0012a78 <Directory::~Directory()>:
c0012a78:	83 ec 0c             	sub    esp,0xc
c0012a7b:	ba cc 93 02 c0       	mov    edx,0xc00293cc
c0012a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a84:	89 10                	mov    DWORD PTR [eax],edx
c0012a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a8a:	83 ec 0c             	sub    esp,0xc
c0012a8d:	50                   	push   eax
c0012a8e:	e8 dd ea ff ff       	call   c0011570 <UnixFile::~UnixFile()>
c0012a93:	83 c4 10             	add    esp,0x10
c0012a96:	90                   	nop
c0012a97:	83 c4 0c             	add    esp,0xc
c0012a9a:	c3                   	ret    
c0012a9b:	90                   	nop

c0012a9c <Directory::~Directory()>:
c0012a9c:	83 ec 0c             	sub    esp,0xc
c0012a9f:	83 ec 0c             	sub    esp,0xc
c0012aa2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012aa6:	e8 cd ff ff ff       	call   c0012a78 <Directory::~Directory()>
c0012aab:	83 c4 10             	add    esp,0x10
c0012aae:	83 ec 08             	sub    esp,0x8
c0012ab1:	68 14 01 00 00       	push   0x114
c0012ab6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012aba:	e8 22 fc ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0012abf:	83 c4 10             	add    esp,0x10
c0012ac2:	83 c4 0c             	add    esp,0xc
c0012ac5:	c3                   	ret    

c0012ac6 <Filesystem::Filesystem()>:
c0012ac6:	ba 4c 93 02 c0       	mov    edx,0xc002934c
c0012acb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012acf:	89 10                	mov    DWORD PTR [eax],edx
c0012ad1:	8b 15 08 cb 02 c0    	mov    edx,DWORD PTR ds:0xc002cb08
c0012ad7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012adb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ae2:	a3 08 cb 02 c0       	mov    ds:0xc002cb08,eax
c0012ae7:	90                   	nop
c0012ae8:	c3                   	ret    
c0012ae9:	90                   	nop

c0012aea <Filesystem::~Filesystem()>:
c0012aea:	ba 4c 93 02 c0       	mov    edx,0xc002934c
c0012aef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012af3:	89 10                	mov    DWORD PTR [eax],edx
c0012af5:	90                   	nop
c0012af6:	c3                   	ret    
c0012af7:	90                   	nop

c0012af8 <Filesystem::~Filesystem()>:
c0012af8:	83 ec 0c             	sub    esp,0xc
c0012afb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012aff:	e8 e6 ff ff ff       	call   c0012aea <Filesystem::~Filesystem()>
c0012b04:	83 c4 04             	add    esp,0x4
c0012b07:	83 ec 08             	sub    esp,0x8
c0012b0a:	6a 08                	push   0x8
c0012b0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b10:	e8 cc fb ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0012b15:	83 c4 10             	add    esp,0x10
c0012b18:	83 c4 0c             	add    esp,0xc
c0012b1b:	c3                   	ret    

c0012b1c <initVFS()>:
c0012b1c:	83 ec 18             	sub    esp,0x18
c0012b1f:	6a 08                	push   0x8
c0012b21:	e8 ae c9 ff ff       	call   c000f4d4 <malloc>
c0012b26:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b29:	e8 b0 d3 00 00       	call   c001fede <FAT::FAT()>
c0012b2e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012b35:	e8 9a c9 ff ff       	call   c000f4d4 <malloc>
c0012b3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0012b3d:	e8 12 e6 00 00       	call   c0021154 <ISO9660::ISO9660()>
c0012b42:	83 c4 1c             	add    esp,0x1c
c0012b45:	c3                   	ret    

c0012b46 <standardiseFiles(char*, char const*, char const*)>:
c0012b46:	55                   	push   ebp
c0012b47:	57                   	push   edi
c0012b48:	56                   	push   esi
c0012b49:	53                   	push   ebx
c0012b4a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012b50:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012b57:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012b5e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012b65:	68 00 04 00 00       	push   0x400
c0012b6a:	6a 00                	push   0x0
c0012b6c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012b70:	56                   	push   esi
c0012b71:	e8 15 db fe ff       	call   c000068b <memset>
c0012b76:	83 c4 10             	add    esp,0x10
c0012b79:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012b7d:	75 0b                	jne    c0012b8a <standardiseFiles(char*, char const*, char const*)+0x44>
c0012b7f:	50                   	push   eax
c0012b80:	50                   	push   eax
c0012b81:	57                   	push   edi
c0012b82:	56                   	push   esi
c0012b83:	e8 a2 db fe ff       	call   c000072a <strcpy>
c0012b88:	eb 41                	jmp    c0012bcb <standardiseFiles(char*, char const*, char const*)+0x85>
c0012b8a:	8a 07                	mov    al,BYTE PTR [edi]
c0012b8c:	3c 5c                	cmp    al,0x5c
c0012b8e:	74 04                	je     c0012b94 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012b90:	3c 2f                	cmp    al,0x2f
c0012b92:	75 18                	jne    c0012bac <standardiseFiles(char*, char const*, char const*)+0x66>
c0012b94:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012b97:	3c 60                	cmp    al,0x60
c0012b99:	7e 03                	jle    c0012b9e <standardiseFiles(char*, char const*, char const*)+0x58>
c0012b9b:	83 e8 20             	sub    eax,0x20
c0012b9e:	88 04 24             	mov    BYTE PTR [esp],al
c0012ba1:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012ba8:	50                   	push   eax
c0012ba9:	50                   	push   eax
c0012baa:	eb 18                	jmp    c0012bc4 <standardiseFiles(char*, char const*, char const*)+0x7e>
c0012bac:	50                   	push   eax
c0012bad:	50                   	push   eax
c0012bae:	55                   	push   ebp
c0012baf:	56                   	push   esi
c0012bb0:	e8 75 db fe ff       	call   c000072a <strcpy>
c0012bb5:	5a                   	pop    edx
c0012bb6:	59                   	pop    ecx
c0012bb7:	68 c6 a7 02 c0       	push   0xc002a7c6
c0012bbc:	56                   	push   esi
c0012bbd:	e8 1f dc fe ff       	call   c00007e1 <strcat>
c0012bc2:	5d                   	pop    ebp
c0012bc3:	58                   	pop    eax
c0012bc4:	57                   	push   edi
c0012bc5:	56                   	push   esi
c0012bc6:	e8 16 dc fe ff       	call   c00007e1 <strcat>
c0012bcb:	83 c4 10             	add    esp,0x10
c0012bce:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012bd1:	3c 60                	cmp    al,0x60
c0012bd3:	7e 03                	jle    c0012bd8 <standardiseFiles(char*, char const*, char const*)+0x92>
c0012bd5:	83 e8 20             	sub    eax,0x20
c0012bd8:	88 04 24             	mov    BYTE PTR [esp],al
c0012bdb:	88 03                	mov    BYTE PTR [ebx],al
c0012bdd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012be4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012bea:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012bee:	bf 03 00 00 00       	mov    edi,0x3
c0012bf3:	b8 03 00 00 00       	mov    eax,0x3
c0012bf8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012bfb:	84 d2                	test   dl,dl
c0012bfd:	0f 84 91 00 00 00    	je     c0012c94 <standardiseFiles(char*, char const*, char const*)+0x14e>
c0012c03:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012c06:	80 fa 5c             	cmp    dl,0x5c
c0012c09:	74 05                	je     c0012c10 <standardiseFiles(char*, char const*, char const*)+0xca>
c0012c0b:	80 fa 2f             	cmp    dl,0x2f
c0012c0e:	75 12                	jne    c0012c22 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c10:	89 c5                	mov    ebp,eax
c0012c12:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012c17:	74 09                	je     c0012c22 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012c19:	40                   	inc    eax
c0012c1a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012c1e:	89 cf                	mov    edi,ecx
c0012c20:	eb d6                	jmp    c0012bf8 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012c22:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012c27:	75 5b                	jne    c0012c84 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c29:	80 fa 2e             	cmp    dl,0x2e
c0012c2c:	75 56                	jne    c0012c84 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012c2e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012c32:	74 19                	je     c0012c4d <standardiseFiles(char*, char const*, char const*)+0x107>
c0012c34:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c39:	74 53                	je     c0012c8e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012c3b:	89 f9                	mov    ecx,edi
c0012c3d:	41                   	inc    ecx
c0012c3e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c41:	80 fa 2f             	cmp    dl,0x2f
c0012c44:	74 f7                	je     c0012c3d <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c46:	80 fa 5c             	cmp    dl,0x5c
c0012c49:	74 f2                	je     c0012c3d <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012c4b:	eb d1                	jmp    c0012c1e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c4d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012c52:	74 3a                	je     c0012c8e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012c54:	83 f8 03             	cmp    eax,0x3
c0012c57:	74 c5                	je     c0012c1e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c59:	41                   	inc    ecx
c0012c5a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012c5d:	80 fa 2f             	cmp    dl,0x2f
c0012c60:	74 f7                	je     c0012c59 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c62:	80 fa 5c             	cmp    dl,0x5c
c0012c65:	74 f2                	je     c0012c59 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012c67:	48                   	dec    eax
c0012c68:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c6c:	75 06                	jne    c0012c74 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c6e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c72:	eb f3                	jmp    c0012c67 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012c74:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012c78:	74 07                	je     c0012c81 <standardiseFiles(char*, char const*, char const*)+0x13b>
c0012c7a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c7e:	48                   	dec    eax
c0012c7f:	eb f3                	jmp    c0012c74 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012c81:	40                   	inc    eax
c0012c82:	eb 9a                	jmp    c0012c1e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c84:	80 fa 2f             	cmp    dl,0x2f
c0012c87:	74 95                	je     c0012c1e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c89:	80 fa 5c             	cmp    dl,0x5c
c0012c8c:	74 90                	je     c0012c1e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c8e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012c91:	40                   	inc    eax
c0012c92:	eb 8a                	jmp    c0012c1e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012c94:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012c98:	83 ec 0c             	sub    esp,0xc
c0012c9b:	53                   	push   ebx
c0012c9c:	e8 07 da fe ff       	call   c00006a8 <strlen>
c0012ca1:	83 c4 10             	add    esp,0x10
c0012ca4:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012ca9:	75 26                	jne    c0012cd1 <standardiseFiles(char*, char const*, char const*)+0x18b>
c0012cab:	83 ec 0c             	sub    esp,0xc
c0012cae:	53                   	push   ebx
c0012caf:	e8 f4 d9 fe ff       	call   c00006a8 <strlen>
c0012cb4:	83 c4 10             	add    esp,0x10
c0012cb7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0012cbc:	74 26                	je     c0012ce4 <standardiseFiles(char*, char const*, char const*)+0x19e>
c0012cbe:	83 ec 0c             	sub    esp,0xc
c0012cc1:	53                   	push   ebx
c0012cc2:	e8 e1 d9 fe ff       	call   c00006a8 <strlen>
c0012cc7:	83 c4 10             	add    esp,0x10
c0012cca:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0012ccf:	eb c7                	jmp    c0012c98 <standardiseFiles(char*, char const*, char const*)+0x152>
c0012cd1:	83 ec 0c             	sub    esp,0xc
c0012cd4:	53                   	push   ebx
c0012cd5:	e8 ce d9 fe ff       	call   c00006a8 <strlen>
c0012cda:	83 c4 10             	add    esp,0x10
c0012cdd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ce2:	74 c7                	je     c0012cab <standardiseFiles(char*, char const*, char const*)+0x165>
c0012ce4:	81 c4 0c 04 00 00    	add    esp,0x40c
c0012cea:	5b                   	pop    ebx
c0012ceb:	5e                   	pop    esi
c0012cec:	5f                   	pop    edi
c0012ced:	5d                   	pop    ebp
c0012cee:	c3                   	ret    
c0012cef:	90                   	nop

c0012cf0 <File::File(char const*, Process*)>:
c0012cf0:	83 ec 0c             	sub    esp,0xc
c0012cf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012cf7:	83 ec 08             	sub    esp,0x8
c0012cfa:	6a 00                	push   0x0
c0012cfc:	50                   	push   eax
c0012cfd:	e8 8c e6 ff ff       	call   c001138e <UnixFile::UnixFile(int)>
c0012d02:	83 c4 10             	add    esp,0x10
c0012d05:	ba b0 93 02 c0       	mov    edx,0xc00293b0
c0012d0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d0e:	89 10                	mov    DWORD PTR [eax],edx
c0012d10:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012d14:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012d1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d1e:	83 c0 0d             	add    eax,0xd
c0012d21:	83 ec 04             	sub    esp,0x4
c0012d24:	52                   	push   edx
c0012d25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d29:	50                   	push   eax
c0012d2a:	e8 17 fe ff ff       	call   c0012b46 <standardiseFiles(char*, char const*, char const*)>
c0012d2f:	83 c4 10             	add    esp,0x10
c0012d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d36:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012d39:	8d 50 bf             	lea    edx,[eax-0x41]
c0012d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d40:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d4a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012d4e:	90                   	nop
c0012d4f:	83 c4 0c             	add    esp,0xc
c0012d52:	c3                   	ret    
c0012d53:	90                   	nop

c0012d54 <File::open(FileOpenMode)>:
c0012d54:	53                   	push   ebx
c0012d55:	b8 0b 00 00 00       	mov    eax,0xb
c0012d5a:	83 ec 08             	sub    esp,0x8
c0012d5d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012d61:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012d68:	80 fa 19             	cmp    dl,0x19
c0012d6b:	77 40                	ja     c0012dad <File::open(FileOpenMode)+0x59>
c0012d6d:	8b 14 95 a0 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3060]
c0012d74:	85 d2                	test   edx,edx
c0012d76:	74 35                	je     c0012dad <File::open(FileOpenMode)+0x59>
c0012d78:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012d7e:	85 d2                	test   edx,edx
c0012d80:	74 2b                	je     c0012dad <File::open(FileOpenMode)+0x59>
c0012d82:	b8 06 00 00 00       	mov    eax,0x6
c0012d87:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012d8b:	75 20                	jne    c0012dad <File::open(FileOpenMode)+0x59>
c0012d8d:	8b 02                	mov    eax,DWORD PTR [edx]
c0012d8f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012d95:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d99:	51                   	push   ecx
c0012d9a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012d9d:	51                   	push   ecx
c0012d9e:	52                   	push   edx
c0012d9f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012da2:	83 c4 10             	add    esp,0x10
c0012da5:	85 c0                	test   eax,eax
c0012da7:	75 04                	jne    c0012dad <File::open(FileOpenMode)+0x59>
c0012da9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012dad:	83 c4 08             	add    esp,0x8
c0012db0:	5b                   	pop    ebx
c0012db1:	c3                   	ret    

c0012db2 <File::close()>:
c0012db2:	53                   	push   ebx
c0012db3:	b8 0b 00 00 00       	mov    eax,0xb
c0012db8:	83 ec 08             	sub    esp,0x8
c0012dbb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012dbf:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012dc6:	80 fa 19             	cmp    dl,0x19
c0012dc9:	77 41                	ja     c0012e0c <File::close()+0x5a>
c0012dcb:	8b 1c 95 a0 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3060]
c0012dd2:	85 db                	test   ebx,ebx
c0012dd4:	74 36                	je     c0012e0c <File::close()+0x5a>
c0012dd6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012ddd:	74 2d                	je     c0012e0c <File::close()+0x5a>
c0012ddf:	b8 05 00 00 00       	mov    eax,0x5
c0012de4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012de8:	74 22                	je     c0012e0c <File::close()+0x5a>
c0012dea:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012dee:	8b 04 95 a0 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3060]
c0012df5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012dfb:	53                   	push   ebx
c0012dfc:	53                   	push   ebx
c0012dfd:	8b 10                	mov    edx,DWORD PTR [eax]
c0012dff:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012e05:	50                   	push   eax
c0012e06:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0012e09:	83 c4 10             	add    esp,0x10
c0012e0c:	83 c4 08             	add    esp,0x8
c0012e0f:	5b                   	pop    ebx
c0012e10:	c3                   	ret    
c0012e11:	90                   	nop

c0012e12 <File::seek(unsigned long long)>:
c0012e12:	56                   	push   esi
c0012e13:	53                   	push   ebx
c0012e14:	b8 0b 00 00 00       	mov    eax,0xb
c0012e19:	51                   	push   ecx
c0012e1a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012e1e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012e22:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012e29:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012e2d:	80 fa 19             	cmp    dl,0x19
c0012e30:	77 31                	ja     c0012e63 <File::seek(unsigned long long)+0x51>
c0012e32:	8b 14 95 a0 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3060]
c0012e39:	85 d2                	test   edx,edx
c0012e3b:	74 26                	je     c0012e63 <File::seek(unsigned long long)+0x51>
c0012e3d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e43:	85 d2                	test   edx,edx
c0012e45:	74 1c                	je     c0012e63 <File::seek(unsigned long long)+0x51>
c0012e47:	b8 05 00 00 00       	mov    eax,0x5
c0012e4c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012e50:	74 11                	je     c0012e63 <File::seek(unsigned long long)+0x51>
c0012e52:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e54:	53                   	push   ebx
c0012e55:	51                   	push   ecx
c0012e56:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012e5c:	52                   	push   edx
c0012e5d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012e60:	83 c4 10             	add    esp,0x10
c0012e63:	5a                   	pop    edx
c0012e64:	5b                   	pop    ebx
c0012e65:	5e                   	pop    esi
c0012e66:	c3                   	ret    
c0012e67:	90                   	nop

c0012e68 <File::tell(unsigned long long*)>:
c0012e68:	83 ec 0c             	sub    esp,0xc
c0012e6b:	b8 0b 00 00 00       	mov    eax,0xb
c0012e70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e74:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e7b:	80 fa 19             	cmp    dl,0x19
c0012e7e:	77 34                	ja     c0012eb4 <File::tell(unsigned long long*)+0x4c>
c0012e80:	8b 14 95 a0 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3060]
c0012e87:	85 d2                	test   edx,edx
c0012e89:	74 29                	je     c0012eb4 <File::tell(unsigned long long*)+0x4c>
c0012e8b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e91:	85 d2                	test   edx,edx
c0012e93:	74 1f                	je     c0012eb4 <File::tell(unsigned long long*)+0x4c>
c0012e95:	b8 05 00 00 00       	mov    eax,0x5
c0012e9a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e9e:	74 14                	je     c0012eb4 <File::tell(unsigned long long*)+0x4c>
c0012ea0:	50                   	push   eax
c0012ea1:	8b 02                	mov    eax,DWORD PTR [edx]
c0012ea3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ea7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012ead:	52                   	push   edx
c0012eae:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012eb1:	83 c4 10             	add    esp,0x10
c0012eb4:	83 c4 0c             	add    esp,0xc
c0012eb7:	c3                   	ret    

c0012eb8 <File::rewind()>:
c0012eb8:	83 ec 10             	sub    esp,0x10
c0012ebb:	6a 00                	push   0x0
c0012ebd:	6a 00                	push   0x0
c0012ebf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ec3:	e8 4a ff ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c0012ec8:	83 c4 1c             	add    esp,0x1c
c0012ecb:	c3                   	ret    

c0012ecc <File::unlink()>:
c0012ecc:	83 ec 0c             	sub    esp,0xc
c0012ecf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ed4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ed8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012edf:	80 f9 19             	cmp    cl,0x19
c0012ee2:	77 2f                	ja     c0012f13 <File::unlink()+0x47>
c0012ee4:	8b 0c 8d a0 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3060]
c0012eeb:	85 c9                	test   ecx,ecx
c0012eed:	74 24                	je     c0012f13 <File::unlink()+0x47>
c0012eef:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ef5:	85 c9                	test   ecx,ecx
c0012ef7:	74 1a                	je     c0012f13 <File::unlink()+0x47>
c0012ef9:	b8 06 00 00 00       	mov    eax,0x6
c0012efe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f02:	75 0f                	jne    c0012f13 <File::unlink()+0x47>
c0012f04:	83 c2 0d             	add    edx,0xd
c0012f07:	50                   	push   eax
c0012f08:	50                   	push   eax
c0012f09:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f0b:	52                   	push   edx
c0012f0c:	51                   	push   ecx
c0012f0d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012f10:	83 c4 10             	add    esp,0x10
c0012f13:	83 c4 0c             	add    esp,0xc
c0012f16:	c3                   	ret    
c0012f17:	90                   	nop

c0012f18 <File::rename(char const*)>:
c0012f18:	83 ec 0c             	sub    esp,0xc
c0012f1b:	b8 0b 00 00 00       	mov    eax,0xb
c0012f20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f24:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f2b:	80 f9 19             	cmp    cl,0x19
c0012f2e:	77 32                	ja     c0012f62 <File::rename(char const*)+0x4a>
c0012f30:	8b 0c 8d a0 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3060]
c0012f37:	85 c9                	test   ecx,ecx
c0012f39:	74 27                	je     c0012f62 <File::rename(char const*)+0x4a>
c0012f3b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f41:	85 c9                	test   ecx,ecx
c0012f43:	74 1d                	je     c0012f62 <File::rename(char const*)+0x4a>
c0012f45:	b8 06 00 00 00       	mov    eax,0x6
c0012f4a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f4e:	75 12                	jne    c0012f62 <File::rename(char const*)+0x4a>
c0012f50:	83 c2 0d             	add    edx,0xd
c0012f53:	50                   	push   eax
c0012f54:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f5a:	52                   	push   edx
c0012f5b:	51                   	push   ecx
c0012f5c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f5f:	83 c4 10             	add    esp,0x10
c0012f62:	83 c4 0c             	add    esp,0xc
c0012f65:	c3                   	ret    

c0012f66 <File::chfatattr(unsigned char, unsigned char)>:
c0012f66:	57                   	push   edi
c0012f67:	b8 0b 00 00 00       	mov    eax,0xb
c0012f6c:	56                   	push   esi
c0012f6d:	53                   	push   ebx
c0012f6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f72:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012f76:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f7d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012f81:	80 f9 19             	cmp    cl,0x19
c0012f84:	77 37                	ja     c0012fbd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f86:	8b 0c 8d a0 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3060]
c0012f8d:	85 c9                	test   ecx,ecx
c0012f8f:	74 2c                	je     c0012fbd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f91:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f97:	85 c9                	test   ecx,ecx
c0012f99:	74 22                	je     c0012fbd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012f9b:	b8 06 00 00 00       	mov    eax,0x6
c0012fa0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012fa4:	75 17                	jne    c0012fbd <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012fa6:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012fa8:	89 f0                	mov    eax,esi
c0012faa:	83 c2 0d             	add    edx,0xd
c0012fad:	0f b6 f0             	movzx  esi,al
c0012fb0:	0f b6 db             	movzx  ebx,bl
c0012fb3:	56                   	push   esi
c0012fb4:	53                   	push   ebx
c0012fb5:	52                   	push   edx
c0012fb6:	51                   	push   ecx
c0012fb7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012fba:	83 c4 10             	add    esp,0x10
c0012fbd:	5b                   	pop    ebx
c0012fbe:	5e                   	pop    esi
c0012fbf:	5f                   	pop    edi
c0012fc0:	c3                   	ret    
c0012fc1:	90                   	nop

c0012fc2 <File::exists()>:
c0012fc2:	83 ec 0c             	sub    esp,0xc
c0012fc5:	31 c0                	xor    eax,eax
c0012fc7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fcb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012fd2:	80 f9 19             	cmp    cl,0x19
c0012fd5:	77 24                	ja     c0012ffb <File::exists()+0x39>
c0012fd7:	8b 0c 8d a0 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3060]
c0012fde:	85 c9                	test   ecx,ecx
c0012fe0:	74 19                	je     c0012ffb <File::exists()+0x39>
c0012fe2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012fe8:	85 c9                	test   ecx,ecx
c0012fea:	74 0f                	je     c0012ffb <File::exists()+0x39>
c0012fec:	83 c2 0d             	add    edx,0xd
c0012fef:	50                   	push   eax
c0012ff0:	50                   	push   eax
c0012ff1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012ff3:	52                   	push   edx
c0012ff4:	51                   	push   ecx
c0012ff5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012ff8:	83 c4 10             	add    esp,0x10
c0012ffb:	83 c4 0c             	add    esp,0xc
c0012ffe:	c3                   	ret    
c0012fff:	90                   	nop

c0013000 <File::stat(unsigned long long*, bool*)>:
c0013000:	56                   	push   esi
c0013001:	53                   	push   ebx
c0013002:	50                   	push   eax
c0013003:	b8 0b 00 00 00       	mov    eax,0xb
c0013008:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001300c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013010:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013017:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001301b:	80 f9 19             	cmp    cl,0x19
c001301e:	77 3d                	ja     c001305d <File::stat(unsigned long long*, bool*)+0x5d>
c0013020:	8b 0c 8d a0 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3060]
c0013027:	85 c9                	test   ecx,ecx
c0013029:	74 32                	je     c001305d <File::stat(unsigned long long*, bool*)+0x5d>
c001302b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013031:	85 c9                	test   ecx,ecx
c0013033:	74 28                	je     c001305d <File::stat(unsigned long long*, bool*)+0x5d>
c0013035:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013037:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001303b:	74 13                	je     c0013050 <File::stat(unsigned long long*, bool*)+0x50>
c001303d:	83 ec 04             	sub    esp,0x4
c0013040:	56                   	push   esi
c0013041:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013047:	51                   	push   ecx
c0013048:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c001304b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001304e:	eb 0a                	jmp    c001305a <File::stat(unsigned long long*, bool*)+0x5a>
c0013050:	53                   	push   ebx
c0013051:	83 c2 0d             	add    edx,0xd
c0013054:	56                   	push   esi
c0013055:	52                   	push   edx
c0013056:	51                   	push   ecx
c0013057:	ff 50 30             	call   DWORD PTR [eax+0x30]
c001305a:	83 c4 10             	add    esp,0x10
c001305d:	5a                   	pop    edx
c001305e:	5b                   	pop    ebx
c001305f:	5e                   	pop    esi
c0013060:	c3                   	ret    

c0013061 <getcwd(Process*, char*, int)>:
c0013061:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013065:	31 c0                	xor    eax,eax
c0013067:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001306a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001306e:	7d 15                	jge    c0013085 <getcwd(Process*, char*, int)+0x24>
c0013070:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013074:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c001307b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001307e:	84 c9                	test   cl,cl
c0013080:	74 06                	je     c0013088 <getcwd(Process*, char*, int)+0x27>
c0013082:	40                   	inc    eax
c0013083:	eb e2                	jmp    c0013067 <getcwd(Process*, char*, int)+0x6>
c0013085:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013088:	31 c0                	xor    eax,eax
c001308a:	c3                   	ret    

c001308b <setcwd(Process*, char*)>:
c001308b:	55                   	push   ebp
c001308c:	57                   	push   edi
c001308d:	56                   	push   esi
c001308e:	53                   	push   ebx
c001308f:	81 ec 20 02 00 00    	sub    esp,0x220
c0013095:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001309c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00130a2:	57                   	push   edi
c00130a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00130aa:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00130ae:	56                   	push   esi
c00130af:	e8 92 fa ff ff       	call   c0012b46 <standardiseFiles(char*, char const*, char const*)>
c00130b4:	89 34 24             	mov    DWORD PTR [esp],esi
c00130b7:	e8 ec d5 fe ff       	call   c00006a8 <strlen>
c00130bc:	83 c4 10             	add    esp,0x10
c00130bf:	83 f8 02             	cmp    eax,0x2
c00130c2:	77 17                	ja     c00130db <setcwd(Process*, char*)+0x50>
c00130c4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00130c9:	83 e8 41             	sub    eax,0x41
c00130cc:	83 f8 19             	cmp    eax,0x19
c00130cf:	76 24                	jbe    c00130f5 <setcwd(Process*, char*)+0x6a>
c00130d1:	b8 03 00 00 00       	mov    eax,0x3
c00130d6:	e9 e0 00 00 00       	jmp    c00131bb <setcwd(Process*, char*)+0x130>
c00130db:	83 ec 0c             	sub    esp,0xc
c00130de:	56                   	push   esi
c00130df:	e8 c4 d5 fe ff       	call   c00006a8 <strlen>
c00130e4:	83 c4 10             	add    esp,0x10
c00130e7:	83 f8 03             	cmp    eax,0x3
c00130ea:	75 34                	jne    c0013120 <setcwd(Process*, char*)+0x95>
c00130ec:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00130f1:	75 2d                	jne    c0013120 <setcwd(Process*, char*)+0x95>
c00130f3:	eb cf                	jmp    c00130c4 <setcwd(Process*, char*)+0x39>
c00130f5:	8b 14 85 a0 cf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3060]
c00130fc:	b8 05 00 00 00       	mov    eax,0x5
c0013101:	85 d2                	test   edx,edx
c0013103:	0f 84 b2 00 00 00    	je     c00131bb <setcwd(Process*, char*)+0x130>
c0013109:	b8 06 00 00 00       	mov    eax,0x6
c001310e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013115:	0f 85 92 00 00 00    	jne    c00131ad <setcwd(Process*, char*)+0x122>
c001311b:	e9 9b 00 00 00       	jmp    c00131bb <setcwd(Process*, char*)+0x130>
c0013120:	83 ec 0c             	sub    esp,0xc
c0013123:	68 14 01 00 00       	push   0x114
c0013128:	e8 a7 c3 ff ff       	call   c000f4d4 <malloc>
c001312d:	83 c4 0c             	add    esp,0xc
c0013130:	89 c3                	mov    ebx,eax
c0013132:	55                   	push   ebp
c0013133:	56                   	push   esi
c0013134:	50                   	push   eax
c0013135:	e8 b6 fb ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001313a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001313f:	83 c4 0c             	add    esp,0xc
c0013142:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013146:	50                   	push   eax
c0013147:	8d 44 24 10          	lea    eax,[esp+0x10]
c001314b:	50                   	push   eax
c001314c:	53                   	push   ebx
c001314d:	e8 ae fe ff ff       	call   c0013000 <File::stat(unsigned long long*, bool*)>
c0013152:	83 c4 10             	add    esp,0x10
c0013155:	83 f8 02             	cmp    eax,0x2
c0013158:	74 04                	je     c001315e <setcwd(Process*, char*)+0xd3>
c001315a:	85 c0                	test   eax,eax
c001315c:	74 1c                	je     c001317a <setcwd(Process*, char*)+0xef>
c001315e:	b8 01 00 00 00       	mov    eax,0x1
c0013163:	85 db                	test   ebx,ebx
c0013165:	74 54                	je     c00131bb <setcwd(Process*, char*)+0x130>
c0013167:	83 ec 0c             	sub    esp,0xc
c001316a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001316c:	53                   	push   ebx
c001316d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013170:	83 c4 10             	add    esp,0x10
c0013173:	b8 01 00 00 00       	mov    eax,0x1
c0013178:	eb 41                	jmp    c00131bb <setcwd(Process*, char*)+0x130>
c001317a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001317f:	75 1c                	jne    c001319d <setcwd(Process*, char*)+0x112>
c0013181:	b8 02 00 00 00       	mov    eax,0x2
c0013186:	85 db                	test   ebx,ebx
c0013188:	74 31                	je     c00131bb <setcwd(Process*, char*)+0x130>
c001318a:	83 ec 0c             	sub    esp,0xc
c001318d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001318f:	53                   	push   ebx
c0013190:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013193:	83 c4 10             	add    esp,0x10
c0013196:	b8 02 00 00 00       	mov    eax,0x2
c001319b:	eb 1e                	jmp    c00131bb <setcwd(Process*, char*)+0x130>
c001319d:	85 db                	test   ebx,ebx
c001319f:	74 0c                	je     c00131ad <setcwd(Process*, char*)+0x122>
c00131a1:	83 ec 0c             	sub    esp,0xc
c00131a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00131a6:	53                   	push   ebx
c00131a7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00131aa:	83 c4 10             	add    esp,0x10
c00131ad:	50                   	push   eax
c00131ae:	50                   	push   eax
c00131af:	56                   	push   esi
c00131b0:	57                   	push   edi
c00131b1:	e8 74 d5 fe ff       	call   c000072a <strcpy>
c00131b6:	83 c4 10             	add    esp,0x10
c00131b9:	31 c0                	xor    eax,eax
c00131bb:	81 c4 1c 02 00 00    	add    esp,0x21c
c00131c1:	5b                   	pop    ebx
c00131c2:	5e                   	pop    esi
c00131c3:	5f                   	pop    edi
c00131c4:	5d                   	pop    ebp
c00131c5:	c3                   	ret    

c00131c6 <Directory::Directory(char const*, Process*)>:
c00131c6:	83 ec 0c             	sub    esp,0xc
c00131c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131cd:	83 ec 08             	sub    esp,0x8
c00131d0:	6a 00                	push   0x0
c00131d2:	50                   	push   eax
c00131d3:	e8 b6 e1 ff ff       	call   c001138e <UnixFile::UnixFile(int)>
c00131d8:	83 c4 10             	add    esp,0x10
c00131db:	ba cc 93 02 c0       	mov    edx,0xc00293cc
c00131e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131e4:	89 10                	mov    DWORD PTR [eax],edx
c00131e6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00131ea:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00131f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f4:	83 c0 0d             	add    eax,0xd
c00131f7:	83 ec 04             	sub    esp,0x4
c00131fa:	52                   	push   edx
c00131fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131ff:	50                   	push   eax
c0013200:	e8 41 f9 ff ff       	call   c0012b46 <standardiseFiles(char*, char const*, char const*)>
c0013205:	83 c4 10             	add    esp,0x10
c0013208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001320c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001320f:	8d 50 bf             	lea    edx,[eax-0x41]
c0013212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013216:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001321c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013220:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013224:	90                   	nop
c0013225:	83 c4 0c             	add    esp,0xc
c0013228:	c3                   	ret    
c0013229:	90                   	nop

c001322a <Directory::open()>:
c001322a:	53                   	push   ebx
c001322b:	b8 0b 00 00 00       	mov    eax,0xb
c0013230:	83 ec 08             	sub    esp,0x8
c0013233:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013237:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001323e:	80 fa 19             	cmp    dl,0x19
c0013241:	77 3d                	ja     c0013280 <Directory::open()+0x56>
c0013243:	8b 14 95 a0 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3060]
c001324a:	85 d2                	test   edx,edx
c001324c:	74 32                	je     c0013280 <Directory::open()+0x56>
c001324e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013254:	85 d2                	test   edx,edx
c0013256:	74 28                	je     c0013280 <Directory::open()+0x56>
c0013258:	b8 06 00 00 00       	mov    eax,0x6
c001325d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013261:	75 1d                	jne    c0013280 <Directory::open()+0x56>
c0013263:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013269:	50                   	push   eax
c001326a:	8b 02                	mov    eax,DWORD PTR [edx]
c001326c:	51                   	push   ecx
c001326d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013270:	51                   	push   ecx
c0013271:	52                   	push   edx
c0013272:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013275:	83 c4 10             	add    esp,0x10
c0013278:	85 c0                	test   eax,eax
c001327a:	75 04                	jne    c0013280 <Directory::open()+0x56>
c001327c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013280:	83 c4 08             	add    esp,0x8
c0013283:	5b                   	pop    ebx
c0013284:	c3                   	ret    
c0013285:	90                   	nop

c0013286 <Directory::close()>:
c0013286:	53                   	push   ebx
c0013287:	b8 0b 00 00 00       	mov    eax,0xb
c001328c:	83 ec 08             	sub    esp,0x8
c001328f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013293:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001329a:	80 fa 19             	cmp    dl,0x19
c001329d:	77 41                	ja     c00132e0 <Directory::close()+0x5a>
c001329f:	8b 1c 95 a0 cf 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd3060]
c00132a6:	85 db                	test   ebx,ebx
c00132a8:	74 36                	je     c00132e0 <Directory::close()+0x5a>
c00132aa:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00132b1:	74 2d                	je     c00132e0 <Directory::close()+0x5a>
c00132b3:	b8 05 00 00 00       	mov    eax,0x5
c00132b8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00132bc:	74 22                	je     c00132e0 <Directory::close()+0x5a>
c00132be:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00132c2:	8b 04 95 a0 cf 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3060]
c00132c9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00132cf:	53                   	push   ebx
c00132d0:	53                   	push   ebx
c00132d1:	8b 10                	mov    edx,DWORD PTR [eax]
c00132d3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00132d9:	50                   	push   eax
c00132da:	ff 52 20             	call   DWORD PTR [edx+0x20]
c00132dd:	83 c4 10             	add    esp,0x10
c00132e0:	83 c4 08             	add    esp,0x8
c00132e3:	5b                   	pop    ebx
c00132e4:	c3                   	ret    
c00132e5:	90                   	nop

c00132e6 <Directory::unlink()>:
c00132e6:	83 ec 0c             	sub    esp,0xc
c00132e9:	b8 0b 00 00 00       	mov    eax,0xb
c00132ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132f2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132f9:	80 f9 19             	cmp    cl,0x19
c00132fc:	77 2f                	ja     c001332d <Directory::unlink()+0x47>
c00132fe:	8b 0c 8d a0 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3060]
c0013305:	85 c9                	test   ecx,ecx
c0013307:	74 24                	je     c001332d <Directory::unlink()+0x47>
c0013309:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001330f:	85 c9                	test   ecx,ecx
c0013311:	74 1a                	je     c001332d <Directory::unlink()+0x47>
c0013313:	b8 06 00 00 00       	mov    eax,0x6
c0013318:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001331c:	75 0f                	jne    c001332d <Directory::unlink()+0x47>
c001331e:	83 c2 0d             	add    edx,0xd
c0013321:	50                   	push   eax
c0013322:	50                   	push   eax
c0013323:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013325:	52                   	push   edx
c0013326:	51                   	push   ecx
c0013327:	ff 50 38             	call   DWORD PTR [eax+0x38]
c001332a:	83 c4 10             	add    esp,0x10
c001332d:	83 c4 0c             	add    esp,0xc
c0013330:	c3                   	ret    
c0013331:	90                   	nop

c0013332 <Directory::rename(char const*)>:
c0013332:	83 ec 0c             	sub    esp,0xc
c0013335:	b8 0b 00 00 00       	mov    eax,0xb
c001333a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001333e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013345:	80 f9 19             	cmp    cl,0x19
c0013348:	77 32                	ja     c001337c <Directory::rename(char const*)+0x4a>
c001334a:	8b 0c 8d a0 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3060]
c0013351:	85 c9                	test   ecx,ecx
c0013353:	74 27                	je     c001337c <Directory::rename(char const*)+0x4a>
c0013355:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001335b:	85 c9                	test   ecx,ecx
c001335d:	74 1d                	je     c001337c <Directory::rename(char const*)+0x4a>
c001335f:	b8 06 00 00 00       	mov    eax,0x6
c0013364:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013368:	75 12                	jne    c001337c <Directory::rename(char const*)+0x4a>
c001336a:	83 c2 0d             	add    edx,0xd
c001336d:	50                   	push   eax
c001336e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013370:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013374:	52                   	push   edx
c0013375:	51                   	push   ecx
c0013376:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013379:	83 c4 10             	add    esp,0x10
c001337c:	83 c4 0c             	add    esp,0xc
c001337f:	c3                   	ret    

c0013380 <Directory::exists()>:
c0013380:	83 ec 0c             	sub    esp,0xc
c0013383:	31 c0                	xor    eax,eax
c0013385:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013389:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013390:	80 f9 19             	cmp    cl,0x19
c0013393:	77 24                	ja     c00133b9 <Directory::exists()+0x39>
c0013395:	8b 0c 8d a0 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3060]
c001339c:	85 c9                	test   ecx,ecx
c001339e:	74 19                	je     c00133b9 <Directory::exists()+0x39>
c00133a0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133a6:	85 c9                	test   ecx,ecx
c00133a8:	74 0f                	je     c00133b9 <Directory::exists()+0x39>
c00133aa:	83 c2 0d             	add    edx,0xd
c00133ad:	50                   	push   eax
c00133ae:	50                   	push   eax
c00133af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133b1:	52                   	push   edx
c00133b2:	51                   	push   ecx
c00133b3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00133b6:	83 c4 10             	add    esp,0x10
c00133b9:	83 c4 0c             	add    esp,0xc
c00133bc:	c3                   	ret    
c00133bd:	90                   	nop

c00133be <Directory::read(dirent*)>:
c00133be:	83 ec 1c             	sub    esp,0x1c
c00133c1:	b8 0b 00 00 00       	mov    eax,0xb
c00133c6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00133ca:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00133d1:	80 fa 19             	cmp    dl,0x19
c00133d4:	77 30                	ja     c0013406 <Directory::read(dirent*)+0x48>
c00133d6:	8b 14 95 a0 cf 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3060]
c00133dd:	85 d2                	test   edx,edx
c00133df:	74 25                	je     c0013406 <Directory::read(dirent*)+0x48>
c00133e1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00133e8:	74 1c                	je     c0013406 <Directory::read(dirent*)+0x48>
c00133ea:	83 ec 0c             	sub    esp,0xc
c00133ed:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133ef:	8d 54 24 18          	lea    edx,[esp+0x18]
c00133f3:	52                   	push   edx
c00133f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00133f8:	6a 00                	push   0x0
c00133fa:	68 10 01 00 00       	push   0x110
c00133ff:	51                   	push   ecx
c0013400:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013403:	83 c4 20             	add    esp,0x20
c0013406:	83 c4 1c             	add    esp,0x1c
c0013409:	c3                   	ret    

c001340a <Directory::create()>:
c001340a:	83 ec 0c             	sub    esp,0xc
c001340d:	b8 0b 00 00 00       	mov    eax,0xb
c0013412:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013416:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001341d:	80 f9 19             	cmp    cl,0x19
c0013420:	77 2f                	ja     c0013451 <Directory::create()+0x47>
c0013422:	8b 0c 8d a0 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3060]
c0013429:	85 c9                	test   ecx,ecx
c001342b:	74 24                	je     c0013451 <Directory::create()+0x47>
c001342d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013433:	85 c9                	test   ecx,ecx
c0013435:	74 1a                	je     c0013451 <Directory::create()+0x47>
c0013437:	b8 06 00 00 00       	mov    eax,0x6
c001343c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013440:	75 0f                	jne    c0013451 <Directory::create()+0x47>
c0013442:	83 c2 0d             	add    edx,0xd
c0013445:	50                   	push   eax
c0013446:	50                   	push   eax
c0013447:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013449:	52                   	push   edx
c001344a:	51                   	push   ecx
c001344b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001344e:	83 c4 10             	add    esp,0x10
c0013451:	83 c4 0c             	add    esp,0xc
c0013454:	c3                   	ret    
c0013455:	90                   	nop

c0013456 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013456:	b8 0a 00 00 00       	mov    eax,0xa
c001345b:	c3                   	ret    

c001345c <Bus::Bus(char const*)>:
c001345c:	83 ec 0c             	sub    esp,0xc
c001345f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013463:	83 ec 08             	sub    esp,0x8
c0013466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001346a:	50                   	push   eax
c001346b:	e8 30 09 00 00       	call   c0013da0 <Device::Device(char const*)>
c0013470:	83 c4 10             	add    esp,0x10
c0013473:	ba e8 93 02 c0       	mov    edx,0xc00293e8
c0013478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001347c:	89 10                	mov    DWORD PTR [eax],edx
c001347e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013482:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001348c:	90                   	nop
c001348d:	83 c4 0c             	add    esp,0xc
c0013490:	c3                   	ret    
c0013491:	90                   	nop

c0013492 <Bus::~Bus()>:
c0013492:	83 ec 0c             	sub    esp,0xc
c0013495:	ba e8 93 02 c0       	mov    edx,0xc00293e8
c001349a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001349e:	89 10                	mov    DWORD PTR [eax],edx
c00134a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134a4:	83 ec 0c             	sub    esp,0xc
c00134a7:	50                   	push   eax
c00134a8:	e8 d5 05 00 00       	call   c0013a82 <Device::~Device()>
c00134ad:	83 c4 10             	add    esp,0x10
c00134b0:	90                   	nop
c00134b1:	83 c4 0c             	add    esp,0xc
c00134b4:	c3                   	ret    
c00134b5:	90                   	nop

c00134b6 <Bus::~Bus()>:
c00134b6:	83 ec 0c             	sub    esp,0xc
c00134b9:	83 ec 0c             	sub    esp,0xc
c00134bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134c0:	e8 cd ff ff ff       	call   c0013492 <Bus::~Bus()>
c00134c5:	83 c4 10             	add    esp,0x10
c00134c8:	83 ec 08             	sub    esp,0x8
c00134cb:	68 58 01 00 00       	push   0x158
c00134d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134d4:	e8 08 f2 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00134d9:	83 c4 10             	add    esp,0x10
c00134dc:	83 c4 0c             	add    esp,0xc
c00134df:	c3                   	ret    

c00134e0 <Buzzer::Buzzer(char const*)>:
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00134e7:	83 ec 08             	sub    esp,0x8
c00134ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00134ee:	50                   	push   eax
c00134ef:	e8 ac 08 00 00       	call   c0013da0 <Device::Device(char const*)>
c00134f4:	83 c4 10             	add    esp,0x10
c00134f7:	ba 14 94 02 c0       	mov    edx,0xc0029414
c00134fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013500:	89 10                	mov    DWORD PTR [eax],edx
c0013502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013506:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013514:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c001351e:	90                   	nop
c001351f:	83 c4 0c             	add    esp,0xc
c0013522:	c3                   	ret    
c0013523:	90                   	nop

c0013524 <Buzzer::~Buzzer()>:
c0013524:	83 ec 0c             	sub    esp,0xc
c0013527:	ba 14 94 02 c0       	mov    edx,0xc0029414
c001352c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013530:	89 10                	mov    DWORD PTR [eax],edx
c0013532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013536:	83 ec 0c             	sub    esp,0xc
c0013539:	50                   	push   eax
c001353a:	e8 43 05 00 00       	call   c0013a82 <Device::~Device()>
c001353f:	83 c4 10             	add    esp,0x10
c0013542:	90                   	nop
c0013543:	83 c4 0c             	add    esp,0xc
c0013546:	c3                   	ret    
c0013547:	90                   	nop

c0013548 <Buzzer::~Buzzer()>:
c0013548:	83 ec 0c             	sub    esp,0xc
c001354b:	83 ec 0c             	sub    esp,0xc
c001354e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013552:	e8 cd ff ff ff       	call   c0013524 <Buzzer::~Buzzer()>
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	83 ec 08             	sub    esp,0x8
c001355d:	68 5c 01 00 00       	push   0x15c
c0013562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013566:	e8 76 f1 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c001356b:	83 c4 10             	add    esp,0x10
c001356e:	83 c4 0c             	add    esp,0xc
c0013571:	c3                   	ret    

c0013572 <Buzzer::stop()>:
c0013572:	83 ec 14             	sub    esp,0x14
c0013575:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013579:	8b 10                	mov    edx,DWORD PTR [eax]
c001357b:	6a 00                	push   0x0
c001357d:	50                   	push   eax
c001357e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013581:	83 c4 1c             	add    esp,0x1c
c0013584:	c3                   	ret    

c0013585 <beepThread(void*)>:
c0013585:	53                   	push   ebx
c0013586:	83 ec 08             	sub    esp,0x8
c0013589:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001358d:	e8 da 97 00 00       	call   c001cd6c <unlockScheduler()>
c0013592:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013597:	52                   	push   edx
c0013598:	52                   	push   edx
c0013599:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001359f:	52                   	push   edx
c00135a0:	50                   	push   eax
c00135a1:	e8 14 9d 00 00       	call   c001d2ba <nanoSleep(unsigned long long)>
c00135a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135a9:	e8 c4 ff ff ff       	call   c0013572 <Buzzer::stop()>
c00135ae:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00135b6:	83 c4 18             	add    esp,0x18
c00135b9:	5b                   	pop    ebx
c00135ba:	e9 41 9c 00 00       	jmp    c001d200 <blockTask(TaskState)>
c00135bf:	90                   	nop

c00135c0 <Buzzer::beep(int, int, bool)>:
c00135c0:	57                   	push   edi
c00135c1:	56                   	push   esi
c00135c2:	53                   	push   ebx
c00135c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00135cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00135cf:	52                   	push   edx
c00135d0:	52                   	push   edx
c00135d1:	8b 06                	mov    eax,DWORD PTR [esi]
c00135d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135d7:	56                   	push   esi
c00135d8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00135db:	83 c4 10             	add    esp,0x10
c00135de:	89 f8                	mov    eax,edi
c00135e0:	84 c0                	test   al,al
c00135e2:	74 1f                	je     c0013603 <Buzzer::beep(int, int, bool)+0x43>
c00135e4:	50                   	push   eax
c00135e5:	50                   	push   eax
c00135e6:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00135ec:	99                   	cdq    
c00135ed:	52                   	push   edx
c00135ee:	50                   	push   eax
c00135ef:	e8 c6 9c 00 00       	call   c001d2ba <nanoSleep(unsigned long long)>
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00135fb:	5b                   	pop    ebx
c00135fc:	5e                   	pop    esi
c00135fd:	5f                   	pop    edi
c00135fe:	e9 6f ff ff ff       	jmp    c0013572 <Buzzer::stop()>
c0013603:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013609:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001360e:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013616:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001361a:	c7 44 24 14 85 35 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013585
c0013622:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013626:	5b                   	pop    ebx
c0013627:	5e                   	pop    esi
c0013628:	5f                   	pop    edi
c0013629:	e9 6e 98 00 00       	jmp    c001ce9c <Process::createThread(void (*)(void*), void*, int)>

c001362e <loadClockSettings()>:
c001362e:	c7 05 14 cb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002cb14,0xa
c0013638:	c6 05 11 cb 02 c0 00 	mov    BYTE PTR ds:0xc002cb11,0x0
c001363f:	c6 05 10 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb10,0x1
c0013646:	c3                   	ret    
c0013647:	90                   	nop

c0013648 <Clock::Clock(char const*)>:
c0013648:	83 ec 0c             	sub    esp,0xc
c001364b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001364f:	83 ec 08             	sub    esp,0x8
c0013652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013656:	50                   	push   eax
c0013657:	e8 44 07 00 00       	call   c0013da0 <Device::Device(char const*)>
c001365c:	83 c4 10             	add    esp,0x10
c001365f:	ba 44 94 02 c0       	mov    edx,0xc0029444
c0013664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013668:	89 10                	mov    DWORD PTR [eax],edx
c001366a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001366e:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013678:	90                   	nop
c0013679:	83 c4 0c             	add    esp,0xc
c001367c:	c3                   	ret    
c001367d:	90                   	nop

c001367e <Clock::~Clock()>:
c001367e:	83 ec 0c             	sub    esp,0xc
c0013681:	ba 44 94 02 c0       	mov    edx,0xc0029444
c0013686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001368a:	89 10                	mov    DWORD PTR [eax],edx
c001368c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013690:	83 ec 0c             	sub    esp,0xc
c0013693:	50                   	push   eax
c0013694:	e8 e9 03 00 00       	call   c0013a82 <Device::~Device()>
c0013699:	83 c4 10             	add    esp,0x10
c001369c:	90                   	nop
c001369d:	83 c4 0c             	add    esp,0xc
c00136a0:	c3                   	ret    
c00136a1:	90                   	nop

c00136a2 <Clock::~Clock()>:
c00136a2:	83 ec 0c             	sub    esp,0xc
c00136a5:	83 ec 0c             	sub    esp,0xc
c00136a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136ac:	e8 cd ff ff ff       	call   c001367e <Clock::~Clock()>
c00136b1:	83 c4 10             	add    esp,0x10
c00136b4:	83 ec 08             	sub    esp,0x8
c00136b7:	68 58 01 00 00       	push   0x158
c00136bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00136c0:	e8 1c f0 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00136c5:	83 c4 10             	add    esp,0x10
c00136c8:	83 c4 0c             	add    esp,0xc
c00136cb:	c3                   	ret    

c00136cc <Clock::timeInSecondsLocal()>:
c00136cc:	53                   	push   ebx
c00136cd:	83 ec 14             	sub    esp,0x14
c00136d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00136d6:	50                   	push   eax
c00136d7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00136da:	0f b6 0d 10 cb 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cb10
c00136e1:	03 0d 14 cb 02 c0    	add    ecx,DWORD PTR ds:0xc002cb14
c00136e7:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00136ed:	89 cb                	mov    ebx,ecx
c00136ef:	c1 fb 1f             	sar    ebx,0x1f
c00136f2:	01 c8                	add    eax,ecx
c00136f4:	11 da                	adc    edx,ebx
c00136f6:	83 c4 10             	add    esp,0x10
c00136f9:	31 c9                	xor    ecx,ecx
c00136fb:	80 3d 11 cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cb11,0x0
c0013702:	74 05                	je     c0013709 <Clock::timeInSecondsLocal()+0x3d>
c0013704:	b9 08 07 00 00       	mov    ecx,0x708
c0013709:	31 db                	xor    ebx,ebx
c001370b:	01 c8                	add    eax,ecx
c001370d:	11 da                	adc    edx,ebx
c001370f:	83 c4 08             	add    esp,0x8
c0013712:	5b                   	pop    ebx
c0013713:	c3                   	ret    

c0013714 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013714:	57                   	push   edi
c0013715:	56                   	push   esi
c0013716:	53                   	push   ebx
c0013717:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001371b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001371f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013721:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013725:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013728:	0f b6 05 10 cb 02 c0 	movzx  eax,BYTE PTR ds:0xc002cb10
c001372f:	03 05 14 cb 02 c0    	add    eax,DWORD PTR ds:0xc002cb14
c0013735:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001373b:	99                   	cdq    
c001373c:	29 c6                	sub    esi,eax
c001373e:	19 d7                	sbb    edi,edx
c0013740:	89 f0                	mov    eax,esi
c0013742:	89 fa                	mov    edx,edi
c0013744:	31 f6                	xor    esi,esi
c0013746:	80 3d 11 cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cb11,0x0
c001374d:	74 05                	je     c0013754 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001374f:	be 08 07 00 00       	mov    esi,0x708
c0013754:	31 ff                	xor    edi,edi
c0013756:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001375a:	29 f0                	sub    eax,esi
c001375c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013760:	19 fa                	sbb    edx,edi
c0013762:	89 d8                	mov    eax,ebx
c0013764:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013768:	5b                   	pop    ebx
c0013769:	5e                   	pop    esi
c001376a:	5f                   	pop    edi
c001376b:	ff e0                	jmp    eax

c001376d <datetimeToSeconds(datetime_t)>:
c001376d:	55                   	push   ebp
c001376e:	57                   	push   edi
c001376f:	56                   	push   esi
c0013770:	53                   	push   ebx
c0013771:	83 ec 14             	sub    esp,0x14
c0013774:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013778:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001377c:	89 d3                	mov    ebx,edx
c001377e:	0f b6 c6             	movzx  eax,dh
c0013781:	c1 eb 10             	shr    ebx,0x10
c0013784:	48                   	dec    eax
c0013785:	66 81 eb 6c 07       	sub    bx,0x76c
c001378a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001378e:	0f b6 f5             	movzx  esi,ch
c0013791:	89 cf                	mov    edi,ecx
c0013793:	6b f6 3c             	imul   esi,esi,0x3c
c0013796:	c1 ef 10             	shr    edi,0x10
c0013799:	0f b6 c9             	movzx  ecx,cl
c001379c:	89 f8                	mov    eax,edi
c001379e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00137a4:	0f b6 f8             	movzx  edi,al
c00137a7:	0f b6 d2             	movzx  edx,dl
c00137aa:	01 fe                	add    esi,edi
c00137ac:	01 f1                	add    ecx,esi
c00137ae:	0f b7 f3             	movzx  esi,bx
c00137b1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00137b5:	c1 f9 1f             	sar    ecx,0x1f
c00137b8:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00137bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00137c1:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00137c6:	8b 0c 8d 80 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b80]
c00137cd:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00137d1:	76 29                	jbe    c00137fc <datetimeToSeconds(datetime_t)+0x8f>
c00137d3:	f6 c3 03             	test   bl,0x3
c00137d6:	75 24                	jne    c00137fc <datetimeToSeconds(datetime_t)+0x8f>
c00137d8:	31 d2                	xor    edx,edx
c00137da:	bf 64 00 00 00       	mov    edi,0x64
c00137df:	89 d8                	mov    eax,ebx
c00137e1:	66 f7 f7             	div    di
c00137e4:	66 85 d2             	test   dx,dx
c00137e7:	75 12                	jne    c00137fb <datetimeToSeconds(datetime_t)+0x8e>
c00137e9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00137ef:	bf 90 01 00 00       	mov    edi,0x190
c00137f4:	99                   	cdq    
c00137f5:	f7 ff                	idiv   edi
c00137f7:	85 d2                	test   edx,edx
c00137f9:	75 01                	jne    c00137fc <datetimeToSeconds(datetime_t)+0x8f>
c00137fb:	41                   	inc    ecx
c00137fc:	66 83 fb 46          	cmp    bx,0x46
c0013800:	76 45                	jbe    c0013847 <datetimeToSeconds(datetime_t)+0xda>
c0013802:	bb 46 00 00 00       	mov    ebx,0x46
c0013807:	bf 64 00 00 00       	mov    edi,0x64
c001380c:	bd 90 01 00 00       	mov    ebp,0x190
c0013811:	b8 6d 01 00 00       	mov    eax,0x16d
c0013816:	f6 c3 03             	test   bl,0x3
c0013819:	75 23                	jne    c001383e <datetimeToSeconds(datetime_t)+0xd1>
c001381b:	89 d8                	mov    eax,ebx
c001381d:	99                   	cdq    
c001381e:	f7 ff                	idiv   edi
c0013820:	b8 6e 01 00 00       	mov    eax,0x16e
c0013825:	85 d2                	test   edx,edx
c0013827:	75 15                	jne    c001383e <datetimeToSeconds(datetime_t)+0xd1>
c0013829:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001382f:	99                   	cdq    
c0013830:	f7 fd                	idiv   ebp
c0013832:	83 fa 01             	cmp    edx,0x1
c0013835:	19 c0                	sbb    eax,eax
c0013837:	f7 d0                	not    eax
c0013839:	05 6e 01 00 00       	add    eax,0x16e
c001383e:	01 c1                	add    ecx,eax
c0013840:	43                   	inc    ebx
c0013841:	39 f3                	cmp    ebx,esi
c0013843:	7c cc                	jl     c0013811 <datetimeToSeconds(datetime_t)+0xa4>
c0013845:	eb 35                	jmp    c001387c <datetimeToSeconds(datetime_t)+0x10f>
c0013847:	74 33                	je     c001387c <datetimeToSeconds(datetime_t)+0x10f>
c0013849:	b8 45 00 00 00       	mov    eax,0x45
c001384e:	89 c2                	mov    edx,eax
c0013850:	83 e2 03             	and    edx,0x3
c0013853:	39 f0                	cmp    eax,esi
c0013855:	7e 0f                	jle    c0013866 <datetimeToSeconds(datetime_t)+0xf9>
c0013857:	83 fa 01             	cmp    edx,0x1
c001385a:	19 d2                	sbb    edx,edx
c001385c:	48                   	dec    eax
c001385d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013864:	eb e8                	jmp    c001384e <datetimeToSeconds(datetime_t)+0xe1>
c0013866:	b8 6d 01 00 00       	mov    eax,0x16d
c001386b:	85 d2                	test   edx,edx
c001386d:	75 0b                	jne    c001387a <datetimeToSeconds(datetime_t)+0x10d>
c001386f:	66 83 fb 01          	cmp    bx,0x1
c0013873:	19 c0                	sbb    eax,eax
c0013875:	05 6e 01 00 00       	add    eax,0x16e
c001387a:	29 c1                	sub    ecx,eax
c001387c:	b8 80 51 01 00       	mov    eax,0x15180
c0013881:	f7 e9                	imul   ecx
c0013883:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013887:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001388b:	83 c4 14             	add    esp,0x14
c001388e:	5b                   	pop    ebx
c001388f:	5e                   	pop    esi
c0013890:	5f                   	pop    edi
c0013891:	5d                   	pop    ebp
c0013892:	c3                   	ret    
c0013893:	90                   	nop

c0013894 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013894:	57                   	push   edi
c0013895:	56                   	push   esi
c0013896:	53                   	push   ebx
c0013897:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001389b:	8b 06                	mov    eax,DWORD PTR [esi]
c001389d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00138a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00138a8:	e8 c0 fe ff ff       	call   c001376d <datetimeToSeconds(datetime_t)>
c00138ad:	59                   	pop    ecx
c00138ae:	0f b6 0d 10 cb 02 c0 	movzx  ecx,BYTE PTR ds:0xc002cb10
c00138b5:	5b                   	pop    ebx
c00138b6:	03 0d 14 cb 02 c0    	add    ecx,DWORD PTR ds:0xc002cb14
c00138bc:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00138c2:	89 cb                	mov    ebx,ecx
c00138c4:	c1 fb 1f             	sar    ebx,0x1f
c00138c7:	29 c8                	sub    eax,ecx
c00138c9:	19 da                	sbb    edx,ebx
c00138cb:	31 c9                	xor    ecx,ecx
c00138cd:	80 3d 11 cb 02 c0 00 	cmp    BYTE PTR ds:0xc002cb11,0x0
c00138d4:	74 05                	je     c00138db <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00138d6:	b9 08 07 00 00       	mov    ecx,0x708
c00138db:	31 db                	xor    ebx,ebx
c00138dd:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00138e1:	29 c8                	sub    eax,ecx
c00138e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00138e7:	19 da                	sbb    edx,ebx
c00138e9:	89 f8                	mov    eax,edi
c00138eb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00138ef:	5b                   	pop    ebx
c00138f0:	5e                   	pop    esi
c00138f1:	5f                   	pop    edi
c00138f2:	ff e0                	jmp    eax

c00138f4 <secondsToDatetime(unsigned long long)>:
c00138f4:	55                   	push   ebp
c00138f5:	57                   	push   edi
c00138f6:	56                   	push   esi
c00138f7:	53                   	push   ebx
c00138f8:	83 ec 1c             	sub    esp,0x1c
c00138fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013903:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013907:	6a 00                	push   0x0
c0013909:	68 80 51 01 00       	push   0x15180
c001390e:	55                   	push   ebp
c001390f:	57                   	push   edi
c0013910:	e8 d7 1a 01 00       	call   c00253ec <__udivdi3>
c0013915:	83 c4 10             	add    esp,0x10
c0013918:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001391e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013922:	6a 00                	push   0x0
c0013924:	68 80 51 01 00       	push   0x15180
c0013929:	55                   	push   ebp
c001392a:	57                   	push   edi
c001392b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013930:	e8 b7 1b 01 00       	call   c00254ec <__umoddi3>
c0013935:	83 c4 10             	add    esp,0x10
c0013938:	99                   	cdq    
c0013939:	f7 ff                	idiv   edi
c001393b:	bf 3c 00 00 00       	mov    edi,0x3c
c0013940:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013943:	89 d0                	mov    eax,edx
c0013945:	99                   	cdq    
c0013946:	f7 ff                	idiv   edi
c0013948:	85 db                	test   ebx,ebx
c001394a:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001394d:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013950:	79 11                	jns    c0013963 <secondsToDatetime(unsigned long long)+0x6f>
c0013952:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013956:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001395c:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013961:	eb 07                	jmp    c001396a <secondsToDatetime(unsigned long long)+0x76>
c0013963:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013968:	89 d8                	mov    eax,ebx
c001396a:	bf b4 05 00 00       	mov    edi,0x5b4
c001396f:	99                   	cdq    
c0013970:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013975:	f7 f9                	idiv   ecx
c0013977:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c001397c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013980:	31 d2                	xor    edx,edx
c0013982:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c001398a:	01 c3                	add    ebx,eax
c001398c:	89 d8                	mov    eax,ebx
c001398e:	f7 f1                	div    ecx
c0013990:	31 d2                	xor    edx,edx
c0013992:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013995:	89 d8                	mov    eax,ebx
c0013997:	f7 f7                	div    edi
c0013999:	31 d2                	xor    edx,edx
c001399b:	29 c1                	sub    ecx,eax
c001399d:	89 d8                	mov    eax,ebx
c001399f:	f7 f5                	div    ebp
c00139a1:	bd 6d 01 00 00       	mov    ebp,0x16d
c00139a6:	29 c1                	sub    ecx,eax
c00139a8:	31 d2                	xor    edx,edx
c00139aa:	89 c8                	mov    eax,ecx
c00139ac:	f7 f5                	div    ebp
c00139ae:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00139b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139b7:	31 d2                	xor    edx,edx
c00139b9:	89 c8                	mov    eax,ecx
c00139bb:	f7 f5                	div    ebp
c00139bd:	31 d2                	xor    edx,edx
c00139bf:	01 c3                	add    ebx,eax
c00139c1:	89 c8                	mov    eax,ecx
c00139c3:	f7 f7                	div    edi
c00139c5:	bf 99 00 00 00       	mov    edi,0x99
c00139ca:	29 c3                	sub    ebx,eax
c00139cc:	31 d2                	xor    edx,edx
c00139ce:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00139d6:	29 c3                	sub    ebx,eax
c00139d8:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00139db:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00139de:	bb 05 00 00 00       	mov    ebx,0x5
c00139e3:	83 c1 02             	add    ecx,0x2
c00139e6:	89 c8                	mov    eax,ecx
c00139e8:	f7 f7                	div    edi
c00139ea:	31 d2                	xor    edx,edx
c00139ec:	89 c7                	mov    edi,eax
c00139ee:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00139f4:	83 c0 02             	add    eax,0x2
c00139f7:	f7 f3                	div    ebx
c00139f9:	89 eb                	mov    ebx,ebp
c00139fb:	29 c3                	sub    ebx,eax
c00139fd:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013a03:	88 1e                	mov    BYTE PTR [esi],bl
c0013a05:	19 c0                	sbb    eax,eax
c0013a07:	31 d2                	xor    edx,edx
c0013a09:	83 e0 0c             	and    eax,0xc
c0013a0c:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013a10:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013a18:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013a1c:	83 f9 01             	cmp    ecx,0x1
c0013a1f:	0f 96 c2             	setbe  dl
c0013a22:	41                   	inc    ecx
c0013a23:	01 d0                	add    eax,edx
c0013a25:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013a28:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013a2c:	83 c4 1c             	add    esp,0x1c
c0013a2f:	89 f0                	mov    eax,esi
c0013a31:	5b                   	pop    ebx
c0013a32:	5e                   	pop    esi
c0013a33:	5f                   	pop    edi
c0013a34:	5d                   	pop    ebp
c0013a35:	c2 04 00             	ret    0x4

c0013a38 <Clock::timeInDatetimeLocal()>:
c0013a38:	53                   	push   ebx
c0013a39:	83 ec 14             	sub    esp,0x14
c0013a3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013a40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013a44:	e8 83 fc ff ff       	call   c00136cc <Clock::timeInSecondsLocal()>
c0013a49:	83 c4 0c             	add    esp,0xc
c0013a4c:	52                   	push   edx
c0013a4d:	50                   	push   eax
c0013a4e:	53                   	push   ebx
c0013a4f:	e8 a0 fe ff ff       	call   c00138f4 <secondsToDatetime(unsigned long long)>
c0013a54:	89 d8                	mov    eax,ebx
c0013a56:	83 c4 14             	add    esp,0x14
c0013a59:	5b                   	pop    ebx
c0013a5a:	c2 04 00             	ret    0x4
c0013a5d:	90                   	nop

c0013a5e <Device::hibernate()>:
c0013a5e:	c3                   	ret    
c0013a5f:	90                   	nop

c0013a60 <Device::wake()>:
c0013a60:	c3                   	ret    
c0013a61:	90                   	nop

c0013a62 <Device::detect()>:
c0013a62:	c3                   	ret    
c0013a63:	90                   	nop

c0013a64 <Device::disableLegacy()>:
c0013a64:	c3                   	ret    
c0013a65:	90                   	nop

c0013a66 <Device::powerSaving(PowerSavingLevel)>:
c0013a66:	c3                   	ret    
c0013a67:	90                   	nop

c0013a68 <DriverlessDevice::close(int, int, void*)>:
c0013a68:	31 c0                	xor    eax,eax
c0013a6a:	c3                   	ret    
c0013a6b:	90                   	nop

c0013a6c <DriverlessDevice::detect()>:
c0013a6c:	c3                   	ret    
c0013a6d:	90                   	nop

c0013a6e <DriverlessDevice::open(int, int, void*)>:
c0013a6e:	83 ec 18             	sub    esp,0x18
c0013a71:	68 b0 94 02 c0       	push   0xc00294b0
c0013a76:	e8 60 5e 00 00       	call   c00198db <Krnl::panic(char const*)>
c0013a7b:	83 c8 ff             	or     eax,0xffffffff
c0013a7e:	83 c4 1c             	add    esp,0x1c
c0013a81:	c3                   	ret    

c0013a82 <Device::~Device()>:
c0013a82:	ba d8 94 02 c0       	mov    edx,0xc00294d8
c0013a87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013a8b:	89 10                	mov    DWORD PTR [eax],edx
c0013a8d:	90                   	nop
c0013a8e:	c3                   	ret    
c0013a8f:	90                   	nop

c0013a90 <Device::~Device()>:
c0013a90:	83 ec 0c             	sub    esp,0xc
c0013a93:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013a97:	e8 e6 ff ff ff       	call   c0013a82 <Device::~Device()>
c0013a9c:	83 c4 04             	add    esp,0x4
c0013a9f:	83 ec 08             	sub    esp,0x8
c0013aa2:	68 58 01 00 00       	push   0x158
c0013aa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aab:	e8 31 ec ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0013ab0:	83 c4 10             	add    esp,0x10
c0013ab3:	83 c4 0c             	add    esp,0xc
c0013ab6:	c3                   	ret    
c0013ab7:	90                   	nop

c0013ab8 <Device::findAndLoadDriver()>:
c0013ab8:	c3                   	ret    
c0013ab9:	90                   	nop

c0013aba <Device::preOpenPCI(PCIDeviceInfo)>:
c0013aba:	57                   	push   edi
c0013abb:	b9 09 00 00 00       	mov    ecx,0x9
c0013ac0:	56                   	push   esi
c0013ac1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013ac5:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013ac9:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013ad3:	81 c7 18 01 00 00    	add    edi,0x118
c0013ad9:	fc                   	cld    
c0013ada:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013adc:	5e                   	pop    esi
c0013add:	5f                   	pop    edi
c0013ade:	c3                   	ret    
c0013adf:	90                   	nop

c0013ae0 <Device::preOpenACPI(void*, char*, char*)>:
c0013ae0:	56                   	push   esi
c0013ae1:	53                   	push   ebx
c0013ae2:	83 ec 08             	sub    esp,0x8
c0013ae5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013ae9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013aed:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013af7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013afb:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013b01:	6a 1e                	push   0x1e
c0013b03:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013b09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013b0d:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013b13:	50                   	push   eax
c0013b14:	e8 3c cb fe ff       	call   c0000655 <memcpy>
c0013b19:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013b1d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013b21:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013b29:	83 c4 14             	add    esp,0x14
c0013b2c:	5b                   	pop    ebx
c0013b2d:	5e                   	pop    esi
c0013b2e:	e9 22 cb fe ff       	jmp    c0000655 <memcpy>
c0013b33:	90                   	nop

c0013b34 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013b34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b38:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b3d:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b44:	75 0b                	jne    c0013b51 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013b46:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b48:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b4c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013b4f:	eb 1e                	jmp    c0013b6f <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013b51:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0013b56:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b5c:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013b62:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013b64:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013b6c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013b6f:	ff e0                	jmp    eax
c0013b71:	90                   	nop

c0013b72 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013b72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013b76:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013b7b:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013b82:	75 0b                	jne    c0013b8f <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013b84:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b86:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013b8a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013b8d:	eb 1e                	jmp    c0013bad <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013b8f:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0013b94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013b9a:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013ba0:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013ba2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013ba6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013baa:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013bad:	ff e0                	jmp    eax
c0013baf:	90                   	nop

c0013bb0 <Device::addChild(Device*)>:
c0013bb0:	53                   	push   ebx
c0013bb1:	83 ec 08             	sub    esp,0x8
c0013bb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bb8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bbc:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013bc2:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013bc8:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013bca:	85 d2                	test   edx,edx
c0013bcc:	74 04                	je     c0013bd2 <Device::addChild(Device*)+0x22>
c0013bce:	89 d3                	mov    ebx,edx
c0013bd0:	eb f6                	jmp    c0013bc8 <Device::addChild(Device*)+0x18>
c0013bd2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013bd5:	83 ec 0c             	sub    esp,0xc
c0013bd8:	6a 08                	push   0x8
c0013bda:	e8 f5 b8 ff ff       	call   c000f4d4 <malloc>
c0013bdf:	89 03                	mov    DWORD PTR [ebx],eax
c0013be1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013be7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013bee:	83 c4 18             	add    esp,0x18
c0013bf1:	5b                   	pop    ebx
c0013bf2:	c3                   	ret    
c0013bf3:	90                   	nop

c0013bf4 <Device::removeAllChildren()>:
c0013bf4:	56                   	push   esi
c0013bf5:	53                   	push   ebx
c0013bf6:	52                   	push   edx
c0013bf7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013bfb:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013c01:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c04:	74 17                	je     c0013c1d <Device::removeAllChildren()+0x29>
c0013c06:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013c09:	85 c0                	test   eax,eax
c0013c0b:	74 0c                	je     c0013c19 <Device::removeAllChildren()+0x25>
c0013c0d:	83 ec 0c             	sub    esp,0xc
c0013c10:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c12:	50                   	push   eax
c0013c13:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013c16:	83 c4 10             	add    esp,0x10
c0013c19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c1b:	eb e4                	jmp    c0013c01 <Device::removeAllChildren()+0xd>
c0013c1d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c23:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013c29:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0013c2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013c36:	58                   	pop    eax
c0013c37:	5b                   	pop    ebx
c0013c38:	5e                   	pop    esi
c0013c39:	c3                   	ret    

c0013c3a <Device::hibernateAll()>:
c0013c3a:	53                   	push   ebx
c0013c3b:	83 ec 14             	sub    esp,0x14
c0013c3e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c42:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c44:	53                   	push   ebx
c0013c45:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013c48:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c4e:	83 c4 10             	add    esp,0x10
c0013c51:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c54:	74 0f                	je     c0013c65 <Device::hibernateAll()+0x2b>
c0013c56:	83 ec 0c             	sub    esp,0xc
c0013c59:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c5c:	e8 d9 ff ff ff       	call   c0013c3a <Device::hibernateAll()>
c0013c61:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c63:	eb e9                	jmp    c0013c4e <Device::hibernateAll()+0x14>
c0013c65:	83 c4 08             	add    esp,0x8
c0013c68:	5b                   	pop    ebx
c0013c69:	c3                   	ret    

c0013c6a <Device::wakeAll()>:
c0013c6a:	53                   	push   ebx
c0013c6b:	83 ec 14             	sub    esp,0x14
c0013c6e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c72:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c74:	53                   	push   ebx
c0013c75:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013c78:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013c7e:	83 c4 10             	add    esp,0x10
c0013c81:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013c84:	74 0f                	je     c0013c95 <Device::wakeAll()+0x2b>
c0013c86:	83 ec 0c             	sub    esp,0xc
c0013c89:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013c8c:	e8 d9 ff ff ff       	call   c0013c6a <Device::wakeAll()>
c0013c91:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013c93:	eb e9                	jmp    c0013c7e <Device::wakeAll()+0x14>
c0013c95:	83 c4 08             	add    esp,0x8
c0013c98:	5b                   	pop    ebx
c0013c99:	c3                   	ret    

c0013c9a <Device::detectAll()>:
c0013c9a:	53                   	push   ebx
c0013c9b:	83 ec 14             	sub    esp,0x14
c0013c9e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013ca2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ca4:	53                   	push   ebx
c0013ca5:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0013ca8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cae:	83 c4 10             	add    esp,0x10
c0013cb1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013cb4:	74 0f                	je     c0013cc5 <Device::detectAll()+0x2b>
c0013cb6:	83 ec 0c             	sub    esp,0xc
c0013cb9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cbc:	e8 d9 ff ff ff       	call   c0013c9a <Device::detectAll()>
c0013cc1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cc3:	eb e9                	jmp    c0013cae <Device::detectAll()+0x14>
c0013cc5:	83 c4 08             	add    esp,0x8
c0013cc8:	5b                   	pop    ebx
c0013cc9:	c3                   	ret    

c0013cca <Device::disableLegacyAll()>:
c0013cca:	53                   	push   ebx
c0013ccb:	83 ec 14             	sub    esp,0x14
c0013cce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013cd2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013cd4:	53                   	push   ebx
c0013cd5:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0013cd8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013cde:	83 c4 10             	add    esp,0x10
c0013ce1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013ce4:	74 0f                	je     c0013cf5 <Device::disableLegacyAll()+0x2b>
c0013ce6:	83 ec 0c             	sub    esp,0xc
c0013ce9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013cec:	e8 d9 ff ff ff       	call   c0013cca <Device::disableLegacyAll()>
c0013cf1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013cf3:	eb e9                	jmp    c0013cde <Device::disableLegacyAll()+0x14>
c0013cf5:	83 c4 08             	add    esp,0x8
c0013cf8:	5b                   	pop    ebx
c0013cf9:	c3                   	ret    

c0013cfa <Device::loadDriversForAll()>:
c0013cfa:	53                   	push   ebx
c0013cfb:	83 ec 08             	sub    esp,0x8
c0013cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d02:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013d08:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013d0a:	85 db                	test   ebx,ebx
c0013d0c:	74 12                	je     c0013d20 <Device::loadDriversForAll()+0x26>
c0013d0e:	83 ec 0c             	sub    esp,0xc
c0013d11:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013d14:	e8 e1 ff ff ff       	call   c0013cfa <Device::loadDriversForAll()>
c0013d19:	83 c4 10             	add    esp,0x10
c0013d1c:	89 d8                	mov    eax,ebx
c0013d1e:	eb e8                	jmp    c0013d08 <Device::loadDriversForAll()+0xe>
c0013d20:	83 c4 08             	add    esp,0x8
c0013d23:	5b                   	pop    ebx
c0013d24:	c3                   	ret    
c0013d25:	90                   	nop

c0013d26 <Device::closeAll()>:
c0013d26:	53                   	push   ebx
c0013d27:	83 ec 08             	sub    esp,0x8
c0013d2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013d2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d30:	6a 00                	push   0x0
c0013d32:	6a 00                	push   0x0
c0013d34:	6a 00                	push   0x0
c0013d36:	53                   	push   ebx
c0013d37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d3a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d40:	83 c4 10             	add    esp,0x10
c0013d43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d46:	74 0f                	je     c0013d57 <Device::closeAll()+0x31>
c0013d48:	83 ec 0c             	sub    esp,0xc
c0013d4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d4e:	e8 d3 ff ff ff       	call   c0013d26 <Device::closeAll()>
c0013d53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d55:	eb e9                	jmp    c0013d40 <Device::closeAll()+0x1a>
c0013d57:	83 c4 08             	add    esp,0x8
c0013d5a:	5b                   	pop    ebx
c0013d5b:	c3                   	ret    

c0013d5c <Device::powerSavingAll(PowerSavingLevel)>:
c0013d5c:	56                   	push   esi
c0013d5d:	53                   	push   ebx
c0013d5e:	83 ec 0c             	sub    esp,0xc
c0013d61:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d65:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013d69:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d6b:	56                   	push   esi
c0013d6c:	53                   	push   ebx
c0013d6d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0013d70:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013d76:	83 c4 10             	add    esp,0x10
c0013d79:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013d7c:	74 0f                	je     c0013d8d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0013d7e:	52                   	push   edx
c0013d7f:	52                   	push   edx
c0013d80:	56                   	push   esi
c0013d81:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013d84:	e8 d3 ff ff ff       	call   c0013d5c <Device::powerSavingAll(PowerSavingLevel)>
c0013d89:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013d8b:	eb e9                	jmp    c0013d76 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013d8d:	58                   	pop    eax
c0013d8e:	5b                   	pop    ebx
c0013d8f:	5e                   	pop    esi
c0013d90:	c3                   	ret    
c0013d91:	90                   	nop

c0013d92 <Device::setName(char const*)>:
c0013d92:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0013d9a:	e9 8b c9 fe ff       	jmp    c000072a <strcpy>
c0013d9f:	90                   	nop

c0013da0 <Device::Device(char const*)>:
c0013da0:	83 ec 1c             	sub    esp,0x1c
c0013da3:	ba d8 94 02 c0       	mov    edx,0xc00294d8
c0013da8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dac:	89 10                	mov    DWORD PTR [eax],edx
c0013dae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013db2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0013dbc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013dca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dce:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013dd8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ddc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013de6:	83 ec 08             	sub    esp,0x8
c0013de9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013ded:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013df1:	e8 9c ff ff ff       	call   c0013d92 <Device::setName(char const*)>
c0013df6:	83 c4 10             	add    esp,0x10
c0013df9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0013e01:	83 ec 0c             	sub    esp,0xc
c0013e04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013e08:	e8 c7 b6 ff ff       	call   c000f4d4 <malloc>
c0013e0d:	83 c4 10             	add    esp,0x10
c0013e10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013e21:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013e27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e2b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e31:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013e37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e3b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013e41:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013e48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e4c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013e53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e57:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e62:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013e6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e70:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e7e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013e8c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013e96:	90                   	nop
c0013e97:	83 c4 1c             	add    esp,0x1c
c0013e9a:	c3                   	ret    
c0013e9b:	90                   	nop

c0013e9c <Device::getName()>:
c0013e9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013ea0:	05 d0 00 00 00       	add    eax,0xd0
c0013ea5:	c3                   	ret    

c0013ea6 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013ea6:	83 ec 0c             	sub    esp,0xc
c0013ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ead:	83 ec 08             	sub    esp,0x8
c0013eb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013eb4:	50                   	push   eax
c0013eb5:	e8 e6 fe ff ff       	call   c0013da0 <Device::Device(char const*)>
c0013eba:	83 c4 10             	add    esp,0x10
c0013ebd:	ba 04 95 02 c0       	mov    edx,0xc0029504
c0013ec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec6:	89 10                	mov    DWORD PTR [eax],edx
c0013ec8:	90                   	nop
c0013ec9:	83 c4 0c             	add    esp,0xc
c0013ecc:	c3                   	ret    
c0013ecd:	90                   	nop

c0013ece <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013ece:	57                   	push   edi
c0013ecf:	56                   	push   esi
c0013ed0:	53                   	push   ebx
c0013ed1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ed5:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013ed9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013edd:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013ee3:	75 0c                	jne    c0013ef1 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013ee5:	52                   	push   edx
c0013ee6:	52                   	push   edx
c0013ee7:	53                   	push   ebx
c0013ee8:	56                   	push   esi
c0013ee9:	e8 3c 34 01 00       	call   c002732a <LinkedList<Device>::addElement(Device*)>
c0013eee:	83 c4 10             	add    esp,0x10
c0013ef1:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013ef7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013efa:	74 12                	je     c0013f0e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013efc:	50                   	push   eax
c0013efd:	57                   	push   edi
c0013efe:	56                   	push   esi
c0013eff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013f02:	e8 c7 ff ff ff       	call   c0013ece <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f07:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013f09:	83 c4 10             	add    esp,0x10
c0013f0c:	eb e9                	jmp    c0013ef7 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013f0e:	5b                   	pop    ebx
c0013f0f:	5e                   	pop    esi
c0013f10:	5f                   	pop    edi
c0013f11:	c3                   	ret    

c0013f12 <getDevicesOfType(DeviceType)>:
c0013f12:	53                   	push   ebx
c0013f13:	83 ec 14             	sub    esp,0x14
c0013f16:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013f1a:	53                   	push   ebx
c0013f1b:	e8 e6 34 01 00       	call   c0027406 <LinkedList<Device>::LinkedList()>
c0013f20:	83 c4 0c             	add    esp,0xc
c0013f23:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f27:	53                   	push   ebx
c0013f28:	ff 35 88 c9 02 c0    	push   DWORD PTR ds:0xc002c988
c0013f2e:	e8 9b ff ff ff       	call   c0013ece <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013f33:	89 d8                	mov    eax,ebx
c0013f35:	83 c4 18             	add    esp,0x18
c0013f38:	5b                   	pop    ebx
c0013f39:	c2 04 00             	ret    0x4

c0013f3c <HardDiskController::HardDiskController(char const*)>:
c0013f3c:	83 ec 0c             	sub    esp,0xc
c0013f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f43:	83 ec 08             	sub    esp,0x8
c0013f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f4a:	50                   	push   eax
c0013f4b:	e8 50 fe ff ff       	call   c0013da0 <Device::Device(char const*)>
c0013f50:	83 c4 10             	add    esp,0x10
c0013f53:	ba 30 95 02 c0       	mov    edx,0xc0029530
c0013f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f5c:	89 10                	mov    DWORD PTR [eax],edx
c0013f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f62:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013f6c:	90                   	nop
c0013f6d:	83 c4 0c             	add    esp,0xc
c0013f70:	c3                   	ret    
c0013f71:	90                   	nop

c0013f72 <HardDiskController::~HardDiskController()>:
c0013f72:	83 ec 0c             	sub    esp,0xc
c0013f75:	ba 30 95 02 c0       	mov    edx,0xc0029530
c0013f7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f7e:	89 10                	mov    DWORD PTR [eax],edx
c0013f80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f84:	83 ec 0c             	sub    esp,0xc
c0013f87:	50                   	push   eax
c0013f88:	e8 f5 fa ff ff       	call   c0013a82 <Device::~Device()>
c0013f8d:	83 c4 10             	add    esp,0x10
c0013f90:	90                   	nop
c0013f91:	83 c4 0c             	add    esp,0xc
c0013f94:	c3                   	ret    
c0013f95:	90                   	nop

c0013f96 <HardDiskController::~HardDiskController()>:
c0013f96:	83 ec 0c             	sub    esp,0xc
c0013f99:	83 ec 0c             	sub    esp,0xc
c0013f9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fa0:	e8 cd ff ff ff       	call   c0013f72 <HardDiskController::~HardDiskController()>
c0013fa5:	83 c4 10             	add    esp,0x10
c0013fa8:	83 ec 08             	sub    esp,0x8
c0013fab:	68 58 01 00 00       	push   0x158
c0013fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fb4:	e8 28 e7 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0013fb9:	83 c4 10             	add    esp,0x10
c0013fbc:	83 c4 0c             	add    esp,0xc
c0013fbf:	c3                   	ret    

c0013fc0 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013fc0:	83 ec 0c             	sub    esp,0xc
c0013fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc7:	83 ec 08             	sub    esp,0x8
c0013fca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013fce:	50                   	push   eax
c0013fcf:	e8 cc fd ff ff       	call   c0013da0 <Device::Device(char const*)>
c0013fd4:	83 c4 10             	add    esp,0x10
c0013fd7:	ba 5c 95 02 c0       	mov    edx,0xc002955c
c0013fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fe0:	89 10                	mov    DWORD PTR [eax],edx
c0013fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fe6:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff1:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ffc:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001400a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001400e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014018:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014022:	90                   	nop
c0014023:	83 c4 0c             	add    esp,0xc
c0014026:	c3                   	ret    
c0014027:	90                   	nop

c0014028 <PhysicalDisk::startCache()>:
c0014028:	56                   	push   esi
c0014029:	53                   	push   ebx
c001402a:	83 ec 10             	sub    esp,0x10
c001402d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014031:	6a 30                	push   0x30
c0014033:	e8 9c b4 ff ff       	call   c000f4d4 <malloc>
c0014038:	89 c6                	mov    esi,eax
c001403a:	58                   	pop    eax
c001403b:	5a                   	pop    edx
c001403c:	53                   	push   ebx
c001403d:	56                   	push   esi
c001403e:	e8 dd 25 00 00       	call   c0016620 <VCache::VCache(PhysicalDisk*)>
c0014043:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014049:	83 c4 14             	add    esp,0x14
c001404c:	5b                   	pop    ebx
c001404d:	5e                   	pop    esi
c001404e:	c3                   	ret    
c001404f:	90                   	nop

c0014050 <PhysicalDisk::~PhysicalDisk()>:
c0014050:	83 ec 0c             	sub    esp,0xc
c0014053:	ba 5c 95 02 c0       	mov    edx,0xc002955c
c0014058:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001405c:	89 10                	mov    DWORD PTR [eax],edx
c001405e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014062:	83 ec 0c             	sub    esp,0xc
c0014065:	50                   	push   eax
c0014066:	e8 17 fa ff ff       	call   c0013a82 <Device::~Device()>
c001406b:	83 c4 10             	add    esp,0x10
c001406e:	90                   	nop
c001406f:	83 c4 0c             	add    esp,0xc
c0014072:	c3                   	ret    
c0014073:	90                   	nop

c0014074 <PhysicalDisk::~PhysicalDisk()>:
c0014074:	83 ec 0c             	sub    esp,0xc
c0014077:	83 ec 0c             	sub    esp,0xc
c001407a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001407e:	e8 cd ff ff ff       	call   c0014050 <PhysicalDisk::~PhysicalDisk()>
c0014083:	83 c4 10             	add    esp,0x10
c0014086:	83 ec 08             	sub    esp,0x8
c0014089:	68 6c 01 00 00       	push   0x16c
c001408e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014092:	e8 4a e6 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0014097:	83 c4 10             	add    esp,0x10
c001409a:	83 c4 0c             	add    esp,0xc
c001409d:	c3                   	ret    

c001409e <FPU::FPU(char const*)>:
c001409e:	83 ec 0c             	sub    esp,0xc
c00140a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140a5:	83 ec 08             	sub    esp,0x8
c00140a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140ac:	50                   	push   eax
c00140ad:	e8 ee fc ff ff       	call   c0013da0 <Device::Device(char const*)>
c00140b2:	83 c4 10             	add    esp,0x10
c00140b5:	ba 9c 95 02 c0       	mov    edx,0xc002959c
c00140ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140be:	89 10                	mov    DWORD PTR [eax],edx
c00140c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140c4:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00140ce:	90                   	nop
c00140cf:	83 c4 0c             	add    esp,0xc
c00140d2:	c3                   	ret    
c00140d3:	90                   	nop

c00140d4 <FPU::~FPU()>:
c00140d4:	83 ec 0c             	sub    esp,0xc
c00140d7:	ba 9c 95 02 c0       	mov    edx,0xc002959c
c00140dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e0:	89 10                	mov    DWORD PTR [eax],edx
c00140e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140e6:	83 ec 0c             	sub    esp,0xc
c00140e9:	50                   	push   eax
c00140ea:	e8 93 f9 ff ff       	call   c0013a82 <Device::~Device()>
c00140ef:	83 c4 10             	add    esp,0x10
c00140f2:	90                   	nop
c00140f3:	83 c4 0c             	add    esp,0xc
c00140f6:	c3                   	ret    
c00140f7:	90                   	nop

c00140f8 <FPU::~FPU()>:
c00140f8:	83 ec 0c             	sub    esp,0xc
c00140fb:	83 ec 0c             	sub    esp,0xc
c00140fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014102:	e8 cd ff ff ff       	call   c00140d4 <FPU::~FPU()>
c0014107:	83 c4 10             	add    esp,0x10
c001410a:	83 ec 08             	sub    esp,0x8
c001410d:	68 58 01 00 00       	push   0x158
c0014112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014116:	e8 c6 e5 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c001411b:	83 c4 10             	add    esp,0x10
c001411e:	83 c4 0c             	add    esp,0xc
c0014121:	c3                   	ret    

c0014122 <setupFPU()>:
c0014122:	53                   	push   ebx
c0014123:	83 ec 08             	sub    esp,0x8
c0014126:	8b 15 88 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c988
c001412c:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c0014133:	74 19                	je     c001414e <setupFPU()+0x2c>
c0014135:	83 ec 0c             	sub    esp,0xc
c0014138:	68 58 01 00 00       	push   0x158
c001413d:	e8 92 b3 ff ff       	call   c000f4d4 <malloc>
c0014142:	89 c3                	mov    ebx,eax
c0014144:	89 04 24             	mov    DWORD PTR [esp],eax
c0014147:	e8 30 fe 00 00       	call   c0023f7c <AVX::AVX()>
c001414c:	eb 5b                	jmp    c00141a9 <setupFPU()+0x87>
c001414e:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014154:	84 c0                	test   al,al
c0014156:	79 19                	jns    c0014171 <setupFPU()+0x4f>
c0014158:	83 ec 0c             	sub    esp,0xc
c001415b:	68 58 01 00 00       	push   0x158
c0014160:	e8 6f b3 ff ff       	call   c000f4d4 <malloc>
c0014165:	89 c3                	mov    ebx,eax
c0014167:	89 04 24             	mov    DWORD PTR [esp],eax
c001416a:	e8 33 ff 00 00       	call   c00240a2 <SSE::SSE()>
c001416f:	eb 38                	jmp    c00141a9 <setupFPU()+0x87>
c0014171:	a8 20                	test   al,0x20
c0014173:	74 19                	je     c001418e <setupFPU()+0x6c>
c0014175:	83 ec 0c             	sub    esp,0xc
c0014178:	68 58 01 00 00       	push   0x158
c001417d:	e8 52 b3 ff ff       	call   c000f4d4 <malloc>
c0014182:	89 c3                	mov    ebx,eax
c0014184:	89 04 24             	mov    DWORD PTR [esp],eax
c0014187:	e8 80 fe 00 00       	call   c002400c <MMX::MMX()>
c001418c:	eb 1b                	jmp    c00141a9 <setupFPU()+0x87>
c001418e:	a8 10                	test   al,0x10
c0014190:	74 1c                	je     c00141ae <setupFPU()+0x8c>
c0014192:	83 ec 0c             	sub    esp,0xc
c0014195:	68 58 01 00 00       	push   0x158
c001419a:	e8 35 b3 ff ff       	call   c000f4d4 <malloc>
c001419f:	89 c3                	mov    ebx,eax
c00141a1:	89 04 24             	mov    DWORD PTR [esp],eax
c00141a4:	e8 87 ff 00 00       	call   c0024130 <x87::x87()>
c00141a9:	83 c4 10             	add    esp,0x10
c00141ac:	eb 24                	jmp    c00141d2 <setupFPU()+0xb0>
c00141ae:	83 e0 ef             	and    eax,0xffffffef
c00141b1:	83 ec 0c             	sub    esp,0xc
c00141b4:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00141ba:	68 88 95 02 c0       	push   0xc0029588
c00141bf:	e8 fd e5 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00141c4:	0f 20 c0             	mov    eax,cr0
c00141c7:	83 c8 04             	or     eax,0x4
c00141ca:	0f 22 c0             	mov    cr0,eax
c00141cd:	31 db                	xor    ebx,ebx
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	89 d8                	mov    eax,ebx
c00141d4:	83 c4 08             	add    esp,0x8
c00141d7:	5b                   	pop    ebx
c00141d8:	c3                   	ret    
c00141d9:	90                   	nop

c00141da <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00141da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00141de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00141e2:	c1 e0 04             	shl    eax,0x4
c00141e5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00141e9:	8d 50 10             	lea    edx,[eax+0x10]
c00141ec:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00141f2:	74 08                	je     c00141fc <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00141f4:	83 c0 04             	add    eax,0x4
c00141f7:	39 d0                	cmp    eax,edx
c00141f9:	75 f1                	jne    c00141ec <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00141fb:	c3                   	ret    
c00141fc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014206:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014210:	eb e2                	jmp    c00141f4 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014212 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014212:	57                   	push   edi
c0014213:	31 c0                	xor    eax,eax
c0014215:	56                   	push   esi
c0014216:	53                   	push   ebx
c0014217:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001421b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001421f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014223:	89 da                	mov    edx,ebx
c0014225:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014229:	c1 e2 04             	shl    edx,0x4
c001422c:	01 ca                	add    edx,ecx
c001422e:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014236:	74 16                	je     c001424e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014238:	40                   	inc    eax
c0014239:	83 f8 04             	cmp    eax,0x4
c001423c:	75 f0                	jne    c001422e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001423e:	c7 44 24 10 cc 95 02 c0 	mov    DWORD PTR [esp+0x10],0xc00295cc
c0014246:	5b                   	pop    ebx
c0014247:	5e                   	pop    esi
c0014248:	5f                   	pop    edi
c0014249:	e9 8d 56 00 00       	jmp    c00198db <Krnl::panic(char const*)>
c001424e:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014251:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014254:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c001425a:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014260:	5b                   	pop    ebx
c0014261:	5e                   	pop    esi
c0014262:	5f                   	pop    edi
c0014263:	c3                   	ret    

c0014264 <doubleFault(regs*, void*)>:
c0014264:	55                   	push   ebp
c0014265:	89 e5                	mov    ebp,esp
c0014267:	83 ec 08             	sub    esp,0x8
c001426a:	83 ec 0c             	sub    esp,0xc
c001426d:	68 07 96 02 c0       	push   0xc0029607
c0014272:	e8 64 56 00 00       	call   c00198db <Krnl::panic(char const*)>
c0014277:	83 c4 10             	add    esp,0x10
c001427a:	90                   	nop
c001427b:	c9                   	leave  
c001427c:	c3                   	ret    
c001427d:	90                   	nop

c001427e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001427e:	56                   	push   esi
c001427f:	53                   	push   ebx
c0014280:	50                   	push   eax
c0014281:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014285:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014289:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001428e:	75 35                	jne    c00142c5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014290:	8d 43 20             	lea    eax,[ebx+0x20]
c0014293:	31 d2                	xor    edx,edx
c0014295:	89 c1                	mov    ecx,eax
c0014297:	c1 e1 04             	shl    ecx,0x4
c001429a:	01 f1                	add    ecx,esi
c001429c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00142a4:	74 3e                	je     c00142e4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00142a6:	42                   	inc    edx
c00142a7:	83 fa 04             	cmp    edx,0x4
c00142aa:	75 f0                	jne    c001429c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00142ac:	83 ec 0c             	sub    esp,0xc
c00142af:	68 4c 96 02 c0       	push   0xc002964c
c00142b4:	e8 22 56 00 00       	call   c00198db <Krnl::panic(char const*)>
c00142b9:	83 c4 10             	add    esp,0x10
c00142bc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00142c1:	5a                   	pop    edx
c00142c2:	5b                   	pop    ebx
c00142c3:	5e                   	pop    esi
c00142c4:	c3                   	ret    
c00142c5:	83 ec 0c             	sub    esp,0xc
c00142c8:	56                   	push   esi
c00142c9:	e8 ce fb ff ff       	call   c0013e9c <Device::getName()>
c00142ce:	83 c4 10             	add    esp,0x10
c00142d1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00142d4:	75 ba                	jne    c0014290 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142d6:	83 fb 0f             	cmp    ebx,0xf
c00142d9:	7f 29                	jg     c0014304 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00142db:	0f b6 9b e0 bb 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd4420]
c00142e2:	eb ac                	jmp    c0014290 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00142e4:	8d 04 82             	lea    eax,[edx+eax*4]
c00142e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00142eb:	8d 04 86             	lea    eax,[esi+eax*4]
c00142ee:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00142f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00142f8:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00142fe:	89 d8                	mov    eax,ebx
c0014300:	5a                   	pop    edx
c0014301:	5b                   	pop    ebx
c0014302:	5e                   	pop    esi
c0014303:	c3                   	ret    
c0014304:	83 ec 0c             	sub    esp,0xc
c0014307:	68 14 96 02 c0       	push   0xc0029614
c001430c:	e8 ca 55 00 00       	call   c00198db <Krnl::panic(char const*)>
c0014311:	83 c4 10             	add    esp,0x10
c0014314:	e9 77 ff ff ff       	jmp    c0014290 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014319:	90                   	nop

c001431a <InterruptController::clearAllHandlers(int, bool)>:
c001431a:	56                   	push   esi
c001431b:	53                   	push   ebx
c001431c:	52                   	push   edx
c001431d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014321:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014325:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001432a:	75 61                	jne    c001438d <InterruptController::clearAllHandlers(int, bool)+0x73>
c001432c:	8d 46 20             	lea    eax,[esi+0x20]
c001432f:	c1 e6 04             	shl    esi,0x4
c0014332:	c1 e0 04             	shl    eax,0x4
c0014335:	01 de                	add    esi,ebx
c0014337:	01 d8                	add    eax,ebx
c0014339:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014343:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c001434d:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014357:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014361:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c001436b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014375:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001437f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014389:	58                   	pop    eax
c001438a:	5b                   	pop    ebx
c001438b:	5e                   	pop    esi
c001438c:	c3                   	ret    
c001438d:	83 ec 0c             	sub    esp,0xc
c0014390:	53                   	push   ebx
c0014391:	e8 06 fb ff ff       	call   c0013e9c <Device::getName()>
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001439c:	75 8e                	jne    c001432c <InterruptController::clearAllHandlers(int, bool)+0x12>
c001439e:	83 fe 0f             	cmp    esi,0xf
c00143a1:	7f 09                	jg     c00143ac <InterruptController::clearAllHandlers(int, bool)+0x92>
c00143a3:	0f b6 b6 e0 bb 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd4420]
c00143aa:	eb 80                	jmp    c001432c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143ac:	83 ec 0c             	sub    esp,0xc
c00143af:	68 88 96 02 c0       	push   0xc0029688
c00143b4:	e8 22 55 00 00       	call   c00198db <Krnl::panic(char const*)>
c00143b9:	83 c4 10             	add    esp,0x10
c00143bc:	e9 6b ff ff ff       	jmp    c001432c <InterruptController::clearAllHandlers(int, bool)+0x12>
c00143c1:	90                   	nop

c00143c2 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143c2:	56                   	push   esi
c00143c3:	53                   	push   ebx
c00143c4:	52                   	push   edx
c00143c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00143c9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00143cd:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00143d2:	75 3a                	jne    c001440e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00143d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00143d8:	8d 50 20             	lea    edx,[eax+0x20]
c00143db:	c1 e2 04             	shl    edx,0x4
c00143de:	8d 04 16             	lea    eax,[esi+edx*1]
c00143e1:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00143e5:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00143eb:	74 0b                	je     c00143f8 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00143ed:	83 c0 04             	add    eax,0x4
c00143f0:	39 d0                	cmp    eax,edx
c00143f2:	75 f1                	jne    c00143e5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00143f4:	58                   	pop    eax
c00143f5:	5b                   	pop    ebx
c00143f6:	5e                   	pop    esi
c00143f7:	c3                   	ret    
c00143f8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014402:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001440c:	eb df                	jmp    c00143ed <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001440e:	83 ec 0c             	sub    esp,0xc
c0014411:	56                   	push   esi
c0014412:	e8 85 fa ff ff       	call   c0013e9c <Device::getName()>
c0014417:	83 c4 10             	add    esp,0x10
c001441a:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001441d:	75 b5                	jne    c00143d4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001441f:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014424:	7f 11                	jg     c0014437 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014426:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001442a:	0f b6 80 e0 bb 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd4420]
c0014431:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014435:	eb 9d                	jmp    c00143d4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014437:	83 ec 0c             	sub    esp,0xc
c001443a:	68 88 96 02 c0       	push   0xc0029688
c001443f:	e8 97 54 00 00       	call   c00198db <Krnl::panic(char const*)>
c0014444:	83 c4 10             	add    esp,0x10
c0014447:	eb 8b                	jmp    c00143d4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014449 <nmiHandler(regs*, void*)>:
c0014449:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001444e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014452:	e9 c9 a7 ff ff       	jmp    c000ec20 <Computer::handleNMI()>

c0014457 <int_handler>:
c0014457:	55                   	push   ebp
c0014458:	57                   	push   edi
c0014459:	56                   	push   esi
c001445a:	53                   	push   ebx
c001445b:	83 ec 0c             	sub    esp,0xc
c001445e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014462:	80 3d c0 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d4c0,0x0
c0014469:	74 0b                	je     c0014476 <int_handler+0x1f>
c001446b:	fa                   	cli    
c001446c:	f4                   	hlt    
c001446d:	80 3d c0 d4 02 c0 00 	cmp    BYTE PTR ds:0xc002d4c0,0x0
c0014474:	75 f5                	jne    c001446b <int_handler+0x14>
c0014476:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001447b:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001447e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014484:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c001448a:	8d 43 e0             	lea    eax,[ebx-0x20]
c001448d:	83 f8 17             	cmp    eax,0x17
c0014490:	77 13                	ja     c00144a5 <int_handler+0x4e>
c0014492:	83 ec 08             	sub    esp,0x8
c0014495:	8b 17                	mov    edx,DWORD PTR [edi]
c0014497:	8d 43 e0             	lea    eax,[ebx-0x20]
c001449a:	0f b6 c0             	movzx  eax,al
c001449d:	50                   	push   eax
c001449e:	57                   	push   edi
c001449f:	ff 52 38             	call   DWORD PTR [edx+0x38]
c00144a2:	83 c4 10             	add    esp,0x10
c00144a5:	83 c3 15             	add    ebx,0x15
c00144a8:	c1 e3 04             	shl    ebx,0x4
c00144ab:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00144af:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00144b6:	31 db                	xor    ebx,ebx
c00144b8:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00144bc:	85 c0                	test   eax,eax
c00144be:	74 13                	je     c00144d3 <int_handler+0x7c>
c00144c0:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00144c3:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00144c7:	74 1c                	je     c00144e5 <int_handler+0x8e>
c00144c9:	83 ec 08             	sub    esp,0x8
c00144cc:	52                   	push   edx
c00144cd:	56                   	push   esi
c00144ce:	ff d0                	call   eax
c00144d0:	83 c4 10             	add    esp,0x10
c00144d3:	43                   	inc    ebx
c00144d4:	83 fb 04             	cmp    ebx,0x4
c00144d7:	75 df                	jne    c00144b8 <int_handler+0x61>
c00144d9:	83 c4 0c             	add    esp,0xc
c00144dc:	31 c0                	xor    eax,eax
c00144de:	5b                   	pop    ebx
c00144df:	31 d2                	xor    edx,edx
c00144e1:	5e                   	pop    esi
c00144e2:	5f                   	pop    edi
c00144e3:	5d                   	pop    ebp
c00144e4:	c3                   	ret    
c00144e5:	83 ec 08             	sub    esp,0x8
c00144e8:	52                   	push   edx
c00144e9:	56                   	push   esi
c00144ea:	ff d0                	call   eax
c00144ec:	83 c4 10             	add    esp,0x10
c00144ef:	83 c4 0c             	add    esp,0xc
c00144f2:	5b                   	pop    ebx
c00144f3:	5e                   	pop    esi
c00144f4:	5f                   	pop    edi
c00144f5:	5d                   	pop    ebp
c00144f6:	c3                   	ret    
c00144f7:	90                   	nop

c00144f8 <InterruptController::InterruptController(char const*)>:
c00144f8:	83 ec 1c             	sub    esp,0x1c
c00144fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144ff:	83 ec 08             	sub    esp,0x8
c0014502:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014506:	50                   	push   eax
c0014507:	e8 94 f8 ff ff       	call   c0013da0 <Device::Device(char const*)>
c001450c:	83 c4 10             	add    esp,0x10
c001450f:	ba bc 98 02 c0       	mov    edx,0xc00298bc
c0014514:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014518:	89 10                	mov    DWORD PTR [eax],edx
c001451a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451e:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014528:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014530:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014538:	7f 5e                	jg     c0014598 <InterruptController::InterruptController(char const*)+0xa0>
c001453a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014542:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014547:	7f 49                	jg     c0014592 <InterruptController::InterruptController(char const*)+0x9a>
c0014549:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001454d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014551:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014558:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001455c:	01 ca                	add    edx,ecx
c001455e:	83 c2 54             	add    edx,0x54
c0014561:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014569:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001456d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014571:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014578:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001457c:	01 ca                	add    edx,ecx
c001457e:	81 c2 54 04 00 00    	add    edx,0x454
c0014584:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001458c:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014590:	eb b0                	jmp    c0014542 <InterruptController::InterruptController(char const*)+0x4a>
c0014592:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014596:	eb 98                	jmp    c0014530 <InterruptController::InterruptController(char const*)+0x38>
c0014598:	90                   	nop
c0014599:	83 c4 1c             	add    esp,0x1c
c001459c:	c3                   	ret    
c001459d:	90                   	nop

c001459e <InterruptController::~InterruptController()>:
c001459e:	83 ec 0c             	sub    esp,0xc
c00145a1:	ba bc 98 02 c0       	mov    edx,0xc00298bc
c00145a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145aa:	89 10                	mov    DWORD PTR [eax],edx
c00145ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00145b0:	83 ec 0c             	sub    esp,0xc
c00145b3:	50                   	push   eax
c00145b4:	e8 c9 f4 ff ff       	call   c0013a82 <Device::~Device()>
c00145b9:	83 c4 10             	add    esp,0x10
c00145bc:	90                   	nop
c00145bd:	83 c4 0c             	add    esp,0xc
c00145c0:	c3                   	ret    
c00145c1:	90                   	nop

c00145c2 <InterruptController::~InterruptController()>:
c00145c2:	83 ec 0c             	sub    esp,0xc
c00145c5:	83 ec 0c             	sub    esp,0xc
c00145c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145cc:	e8 cd ff ff ff       	call   c001459e <InterruptController::~InterruptController()>
c00145d1:	83 c4 10             	add    esp,0x10
c00145d4:	83 ec 08             	sub    esp,0x8
c00145d7:	68 58 21 00 00       	push   0x2158
c00145dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145e0:	e8 fc e0 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00145e5:	83 c4 10             	add    esp,0x10
c00145e8:	83 c4 0c             	add    esp,0xc
c00145eb:	c3                   	ret    

c00145ec <displayDebugInfo(regs*)>:
c00145ec:	55                   	push   ebp
c00145ed:	57                   	push   edi
c00145ee:	56                   	push   esi
c00145ef:	53                   	push   ebx
c00145f0:	83 ec 24             	sub    esp,0x24
c00145f3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00145f7:	0f 20 c2             	mov    edx,cr0
c00145fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00145fe:	0f 20 d7             	mov    edi,cr2
c0014601:	0f 20 de             	mov    esi,cr3
c0014604:	0f 20 e5             	mov    ebp,cr4
c0014607:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001460a:	68 c2 96 02 c0       	push   0xc00296c2
c001460f:	e8 ad e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014614:	58                   	pop    eax
c0014615:	5a                   	pop    edx
c0014616:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014619:	68 cd 96 02 c0       	push   0xc00296cd
c001461e:	e8 9e e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014623:	59                   	pop    ecx
c0014624:	58                   	pop    eax
c0014625:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014628:	68 d8 96 02 c0       	push   0xc00296d8
c001462d:	e8 8f e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014632:	58                   	pop    eax
c0014633:	5a                   	pop    edx
c0014634:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014637:	68 e3 96 02 c0       	push   0xc00296e3
c001463c:	e8 80 e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014641:	59                   	pop    ecx
c0014642:	58                   	pop    eax
c0014643:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014646:	68 ee 96 02 c0       	push   0xc00296ee
c001464b:	e8 71 e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014650:	58                   	pop    eax
c0014651:	5a                   	pop    edx
c0014652:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014655:	68 f9 96 02 c0       	push   0xc00296f9
c001465a:	e8 62 e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001465f:	59                   	pop    ecx
c0014660:	58                   	pop    eax
c0014661:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014664:	68 04 97 02 c0       	push   0xc0029704
c0014669:	e8 53 e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001466e:	58                   	pop    eax
c001466f:	5a                   	pop    edx
c0014670:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014673:	68 0f 97 02 c0       	push   0xc002970f
c0014678:	e8 44 e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001467d:	59                   	pop    ecx
c001467e:	58                   	pop    eax
c001467f:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014682:	68 1a 97 02 c0       	push   0xc002971a
c0014687:	e8 35 e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001468c:	58                   	pop    eax
c001468d:	5a                   	pop    edx
c001468e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014691:	68 29 97 02 c0       	push   0xc0029729
c0014696:	e8 26 e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001469b:	59                   	pop    ecx
c001469c:	58                   	pop    eax
c001469d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00146a0:	68 34 97 02 c0       	push   0xc0029734
c00146a5:	e8 17 e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00146aa:	58                   	pop    eax
c00146ab:	5a                   	pop    edx
c00146ac:	57                   	push   edi
c00146ad:	68 3f 97 02 c0       	push   0xc002973f
c00146b2:	e8 0a e1 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00146b7:	59                   	pop    ecx
c00146b8:	58                   	pop    eax
c00146b9:	56                   	push   esi
c00146ba:	68 4a 97 02 c0       	push   0xc002974a
c00146bf:	e8 fd e0 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00146c4:	58                   	pop    eax
c00146c5:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00146ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146d0:	e8 ae c2 ff ff       	call   c0010983 <setActiveTerminal(VgaText*)>
c00146d5:	58                   	pop    eax
c00146d6:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00146d9:	5a                   	pop    edx
c00146da:	c1 e0 05             	shl    eax,0x5
c00146dd:	05 40 b9 02 c0       	add    eax,0xc002b940
c00146e2:	50                   	push   eax
c00146e3:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00146e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00146ee:	e8 af c6 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00146f3:	59                   	pop    ecx
c00146f4:	58                   	pop    eax
c00146f5:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00146fa:	68 55 97 02 c0       	push   0xc0029755
c00146ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014705:	e8 98 c6 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c001470a:	58                   	pop    eax
c001470b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014710:	5a                   	pop    edx
c0014711:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014714:	83 c0 0c             	add    eax,0xc
c0014717:	50                   	push   eax
c0014718:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001471d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014723:	e8 7a c6 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0014728:	59                   	pop    ecx
c0014729:	58                   	pop    eax
c001472a:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001472f:	68 5e 97 02 c0       	push   0xc002975e
c0014734:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001473a:	e8 63 c6 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c001473f:	58                   	pop    eax
c0014740:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0014745:	5a                   	pop    edx
c0014746:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014749:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001474f:	e8 74 c6 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0014754:	59                   	pop    ecx
c0014755:	58                   	pop    eax
c0014756:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001475b:	68 66 97 02 c0       	push   0xc0029766
c0014760:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014766:	e8 37 c6 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c001476b:	58                   	pop    eax
c001476c:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0014771:	5a                   	pop    edx
c0014772:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014775:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001477b:	e8 48 c6 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0014780:	59                   	pop    ecx
c0014781:	58                   	pop    eax
c0014782:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0014787:	68 6e 97 02 c0       	push   0xc002976e
c001478c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014792:	e8 0b c6 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0014797:	58                   	pop    eax
c0014798:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001479d:	5a                   	pop    edx
c001479e:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00147a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147a7:	e8 1c c6 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c00147ac:	59                   	pop    ecx
c00147ad:	58                   	pop    eax
c00147ae:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00147b3:	68 76 97 02 c0       	push   0xc0029776
c00147b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147be:	e8 df c5 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00147c3:	58                   	pop    eax
c00147c4:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00147c9:	5a                   	pop    edx
c00147ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00147cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147d3:	e8 f0 c5 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c00147d8:	59                   	pop    ecx
c00147d9:	58                   	pop    eax
c00147da:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00147df:	68 7e 97 02 c0       	push   0xc002977e
c00147e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ea:	e8 b3 c5 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00147ef:	58                   	pop    eax
c00147f0:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00147f5:	5a                   	pop    edx
c00147f6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00147f9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00147ff:	e8 c4 c5 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0014804:	59                   	pop    ecx
c0014805:	58                   	pop    eax
c0014806:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001480b:	68 86 97 02 c0       	push   0xc0029786
c0014810:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014816:	e8 87 c5 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c001481b:	58                   	pop    eax
c001481c:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0014821:	5a                   	pop    edx
c0014822:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014825:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001482b:	e8 98 c5 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0014830:	59                   	pop    ecx
c0014831:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0014836:	5b                   	pop    ebx
c0014837:	68 8e 97 02 c0       	push   0xc002978e
c001483c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014842:	e8 5b c5 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0014847:	58                   	pop    eax
c0014848:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001484d:	5a                   	pop    edx
c001484e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014852:	52                   	push   edx
c0014853:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014859:	e8 6a c5 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c001485e:	59                   	pop    ecx
c001485f:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0014864:	5b                   	pop    ebx
c0014865:	68 97 97 02 c0       	push   0xc0029797
c001486a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014870:	e8 2d c5 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0014875:	58                   	pop    eax
c0014876:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001487b:	5a                   	pop    edx
c001487c:	57                   	push   edi
c001487d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014883:	e8 40 c5 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0014888:	59                   	pop    ecx
c0014889:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001488e:	5b                   	pop    ebx
c001488f:	68 9f 97 02 c0       	push   0xc002979f
c0014894:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001489a:	e8 03 c5 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c001489f:	5f                   	pop    edi
c00148a0:	58                   	pop    eax
c00148a1:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00148a6:	56                   	push   esi
c00148a7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ad:	e8 16 c5 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c00148b2:	58                   	pop    eax
c00148b3:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00148b8:	5a                   	pop    edx
c00148b9:	68 a7 97 02 c0       	push   0xc00297a7
c00148be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148c4:	e8 d9 c4 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00148c9:	59                   	pop    ecx
c00148ca:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00148cf:	5b                   	pop    ebx
c00148d0:	55                   	push   ebp
c00148d1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148d7:	e8 ec c4 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c00148dc:	5e                   	pop    esi
c00148dd:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00148e2:	5f                   	pop    edi
c00148e3:	68 af 97 02 c0       	push   0xc00297af
c00148e8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00148ee:	e8 af c4 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00148f3:	0f 21 c0             	mov    eax,db0
c00148f6:	5d                   	pop    ebp
c00148f7:	5a                   	pop    edx
c00148f8:	50                   	push   eax
c00148f9:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00148fe:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014904:	e8 bf c4 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0014909:	59                   	pop    ecx
c001490a:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001490f:	5b                   	pop    ebx
c0014910:	68 b8 97 02 c0       	push   0xc00297b8
c0014915:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001491b:	e8 82 c4 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0014920:	0f 21 c8             	mov    eax,db1
c0014923:	5e                   	pop    esi
c0014924:	5f                   	pop    edi
c0014925:	50                   	push   eax
c0014926:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001492b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014931:	e8 92 c4 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0014936:	5d                   	pop    ebp
c0014937:	58                   	pop    eax
c0014938:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001493d:	68 c0 97 02 c0       	push   0xc00297c0
c0014942:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014948:	e8 55 c4 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c001494d:	0f 21 d0             	mov    eax,db2
c0014950:	5a                   	pop    edx
c0014951:	59                   	pop    ecx
c0014952:	50                   	push   eax
c0014953:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0014958:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001495e:	e8 65 c4 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0014963:	5b                   	pop    ebx
c0014964:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0014969:	5e                   	pop    esi
c001496a:	68 c8 97 02 c0       	push   0xc00297c8
c001496f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014975:	e8 28 c4 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c001497a:	0f 21 d8             	mov    eax,db3
c001497d:	5f                   	pop    edi
c001497e:	5d                   	pop    ebp
c001497f:	50                   	push   eax
c0014980:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0014985:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001498b:	e8 38 c4 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0014990:	58                   	pop    eax
c0014991:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0014996:	5a                   	pop    edx
c0014997:	68 d0 97 02 c0       	push   0xc00297d0
c001499c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149a2:	e8 fb c3 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00149a7:	0f 21 f0             	mov    eax,db6
c00149aa:	59                   	pop    ecx
c00149ab:	5b                   	pop    ebx
c00149ac:	50                   	push   eax
c00149ad:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00149b2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149b8:	e8 0b c4 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c00149bd:	5e                   	pop    esi
c00149be:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00149c3:	5f                   	pop    edi
c00149c4:	68 d8 97 02 c0       	push   0xc00297d8
c00149c9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149cf:	e8 ce c3 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00149d4:	0f 21 f8             	mov    eax,db7
c00149d7:	5d                   	pop    ebp
c00149d8:	5a                   	pop    edx
c00149d9:	50                   	push   eax
c00149da:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00149df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00149e5:	e8 de c3 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c00149ea:	fa                   	cli    
c00149eb:	f4                   	hlt    
c00149ec:	83 c4 10             	add    esp,0x10
c00149ef:	eb fe                	jmp    c00149ef <displayDebugInfo(regs*)+0x403>

c00149f1 <x87EmulHandler(regs*, void*)>:
c00149f1:	53                   	push   ebx
c00149f2:	83 ec 14             	sub    esp,0x14
c00149f5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00149f9:	53                   	push   ebx
c00149fa:	e8 ff 9f 00 00       	call   c001e9fe <Vm::x87Handler(regs*)>
c00149ff:	83 c4 10             	add    esp,0x10
c0014a02:	84 c0                	test   al,al
c0014a04:	74 05                	je     c0014a0b <x87EmulHandler(regs*, void*)+0x1a>
c0014a06:	83 c4 08             	add    esp,0x8
c0014a09:	5b                   	pop    ebx
c0014a0a:	c3                   	ret    
c0014a0b:	83 ec 0c             	sub    esp,0xc
c0014a0e:	68 e0 97 02 c0       	push   0xc00297e0
c0014a13:	e8 a9 dd ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014a18:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a1b:	e8 cc fb ff ff       	call   c00145ec <displayDebugInfo(regs*)>

c0014a20 <gpFault(regs*, void*)>:
c0014a20:	53                   	push   ebx
c0014a21:	83 ec 14             	sub    esp,0x14
c0014a24:	c7 05 30 cb 02 c0 7b dd 01 c0 	mov    DWORD PTR ds:0xc002cb30,0xc001dd7b
c0014a2e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014a32:	53                   	push   ebx
c0014a33:	e8 43 93 00 00       	call   c001dd7b <Vm::faultHandler(regs*)>
c0014a38:	83 c4 10             	add    esp,0x10
c0014a3b:	84 c0                	test   al,al
c0014a3d:	74 05                	je     c0014a44 <gpFault(regs*, void*)+0x24>
c0014a3f:	83 c4 08             	add    esp,0x8
c0014a42:	5b                   	pop    ebx
c0014a43:	c3                   	ret    
c0014a44:	83 ec 0c             	sub    esp,0xc
c0014a47:	68 f6 97 02 c0       	push   0xc00297f6
c0014a4c:	e8 70 dd ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014a51:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a54:	e8 93 fb ff ff       	call   c00145ec <displayDebugInfo(regs*)>

c0014a59 <pgFault(regs*, void*)>:
c0014a59:	83 ec 18             	sub    esp,0x18
c0014a5c:	68 11 98 02 c0       	push   0xc0029811
c0014a61:	e8 5b dd ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014a66:	58                   	pop    eax
c0014a67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a6b:	e8 7c fb ff ff       	call   c00145ec <displayDebugInfo(regs*)>

c0014a70 <otherISRHandler(regs*, void*)>:
c0014a70:	53                   	push   ebx
c0014a71:	83 ec 0c             	sub    esp,0xc
c0014a74:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a78:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014a7b:	50                   	push   eax
c0014a7c:	50                   	push   eax
c0014a7d:	68 1e 98 02 c0       	push   0xc002981e
c0014a82:	e8 3a dd ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014a87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a8a:	e8 5d fb ff ff       	call   c00145ec <displayDebugInfo(regs*)>

c0014a8f <opcodeFault(regs*, void*)>:
c0014a8f:	55                   	push   ebp
c0014a90:	89 e5                	mov    ebp,esp
c0014a92:	56                   	push   esi
c0014a93:	53                   	push   ebx
c0014a94:	83 ec 40             	sub    esp,0x40
c0014a97:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0014a9c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014aa2:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014aa8:	84 c0                	test   al,al
c0014aaa:	74 24                	je     c0014ad0 <opcodeFault(regs*, void*)+0x41>
c0014aac:	83 ec 0c             	sub    esp,0xc
c0014aaf:	68 3c 98 02 c0       	push   0xc002983c
c0014ab4:	e8 08 dd ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014ab9:	83 c4 10             	add    esp,0x10
c0014abc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ac2:	8d 50 19             	lea    edx,[eax+0x19]
c0014ac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ac8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014acb:	e9 77 05 00 00       	jmp    c0015047 <opcodeFault(regs*, void*)+0x5b8>
c0014ad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ad6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014ad9:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014add:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014ae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ae7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014aea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014aed:	8a 00                	mov    al,BYTE PTR [eax]
c0014aef:	3c f0                	cmp    al,0xf0
c0014af1:	75 17                	jne    c0014b0a <opcodeFault(regs*, void*)+0x7b>
c0014af3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014af6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014afc:	8d 50 01             	lea    edx,[eax+0x1]
c0014aff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b02:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b05:	e9 da 00 00 00       	jmp    c0014be4 <opcodeFault(regs*, void*)+0x155>
c0014b0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b0d:	8a 00                	mov    al,BYTE PTR [eax]
c0014b0f:	3c f2                	cmp    al,0xf2
c0014b11:	74 09                	je     c0014b1c <opcodeFault(regs*, void*)+0x8d>
c0014b13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b16:	8a 00                	mov    al,BYTE PTR [eax]
c0014b18:	3c f3                	cmp    al,0xf3
c0014b1a:	75 1b                	jne    c0014b37 <opcodeFault(regs*, void*)+0xa8>
c0014b1c:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b20:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b26:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b29:	8d 50 01             	lea    edx,[eax+0x1]
c0014b2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b2f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b32:	e9 ad 00 00 00       	jmp    c0014be4 <opcodeFault(regs*, void*)+0x155>
c0014b37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b3a:	8a 00                	mov    al,BYTE PTR [eax]
c0014b3c:	3c 66                	cmp    al,0x66
c0014b3e:	75 1f                	jne    c0014b5f <opcodeFault(regs*, void*)+0xd0>
c0014b40:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b44:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014b48:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b51:	8d 50 01             	lea    edx,[eax+0x1]
c0014b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b57:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b5a:	e9 85 00 00 00       	jmp    c0014be4 <opcodeFault(regs*, void*)+0x155>
c0014b5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b62:	8a 00                	mov    al,BYTE PTR [eax]
c0014b64:	3c 67                	cmp    al,0x67
c0014b66:	75 18                	jne    c0014b80 <opcodeFault(regs*, void*)+0xf1>
c0014b68:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b6c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b72:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b75:	8d 50 01             	lea    edx,[eax+0x1]
c0014b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b7b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014b7e:	eb 64                	jmp    c0014be4 <opcodeFault(regs*, void*)+0x155>
c0014b80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b83:	8a 00                	mov    al,BYTE PTR [eax]
c0014b85:	3c 2e                	cmp    al,0x2e
c0014b87:	74 09                	je     c0014b92 <opcodeFault(regs*, void*)+0x103>
c0014b89:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014b8c:	8a 00                	mov    al,BYTE PTR [eax]
c0014b8e:	3c 3e                	cmp    al,0x3e
c0014b90:	75 18                	jne    c0014baa <opcodeFault(regs*, void*)+0x11b>
c0014b92:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014b96:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014b99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014b9f:	8d 50 01             	lea    edx,[eax+0x1]
c0014ba2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ba5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014ba8:	eb 3a                	jmp    c0014be4 <opcodeFault(regs*, void*)+0x155>
c0014baa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bad:	8a 00                	mov    al,BYTE PTR [eax]
c0014baf:	3c 36                	cmp    al,0x36
c0014bb1:	74 1b                	je     c0014bce <opcodeFault(regs*, void*)+0x13f>
c0014bb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bb6:	8a 00                	mov    al,BYTE PTR [eax]
c0014bb8:	3c 26                	cmp    al,0x26
c0014bba:	74 12                	je     c0014bce <opcodeFault(regs*, void*)+0x13f>
c0014bbc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bbf:	8a 00                	mov    al,BYTE PTR [eax]
c0014bc1:	3c 64                	cmp    al,0x64
c0014bc3:	74 09                	je     c0014bce <opcodeFault(regs*, void*)+0x13f>
c0014bc5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bc8:	8a 00                	mov    al,BYTE PTR [eax]
c0014bca:	3c 65                	cmp    al,0x65
c0014bcc:	75 16                	jne    c0014be4 <opcodeFault(regs*, void*)+0x155>
c0014bce:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014bd2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014bd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014bdb:	8d 50 01             	lea    edx,[eax+0x1]
c0014bde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014be4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014be7:	8a 00                	mov    al,BYTE PTR [eax]
c0014be9:	3c 0f                	cmp    al,0xf
c0014beb:	0f 85 ad 00 00 00    	jne    c0014c9e <opcodeFault(regs*, void*)+0x20f>
c0014bf1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bf4:	40                   	inc    eax
c0014bf5:	8a 00                	mov    al,BYTE PTR [eax]
c0014bf7:	3c c2                	cmp    al,0xc2
c0014bf9:	74 0e                	je     c0014c09 <opcodeFault(regs*, void*)+0x17a>
c0014bfb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014bfe:	40                   	inc    eax
c0014bff:	8a 00                	mov    al,BYTE PTR [eax]
c0014c01:	3c c3                	cmp    al,0xc3
c0014c03:	0f 85 95 00 00 00    	jne    c0014c9e <opcodeFault(regs*, void*)+0x20f>
c0014c09:	83 ec 0c             	sub    esp,0xc
c0014c0c:	68 5f 98 02 c0       	push   0xc002985f
c0014c11:	e8 ab db ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014c16:	83 c4 10             	add    esp,0x10
c0014c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c1c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c1f:	8d 50 01             	lea    edx,[eax+0x1]
c0014c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c25:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014c2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c2e:	8a 00                	mov    al,BYTE PTR [eax]
c0014c30:	8d 50 fe             	lea    edx,[eax-0x2]
c0014c33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014c36:	88 10                	mov    BYTE PTR [eax],dl
c0014c38:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0014c3b:	50                   	push   eax
c0014c3c:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0014c3f:	50                   	push   eax
c0014c40:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0014c43:	50                   	push   eax
c0014c44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014c47:	e8 c0 44 00 00       	call   c001910c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014c4c:	83 c4 10             	add    esp,0x10
c0014c4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c52:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c55:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c58:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0014c5b:	01 d0                	add    eax,edx
c0014c5d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0014c60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014c66:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0014c69:	48                   	dec    eax
c0014c6a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0014c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c70:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0014c73:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c79:	83 ec 04             	sub    esp,0x4
c0014c7c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0014c7f:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0014c82:	50                   	push   eax
c0014c83:	e8 e1 b4 fe ff       	call   c0000169 <voodooXADD>
c0014c88:	83 c4 10             	add    esp,0x10
c0014c8b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0014c8e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0014c91:	01 c2                	add    edx,eax
c0014c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c96:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014c99:	e9 a9 03 00 00       	jmp    c0015047 <opcodeFault(regs*, void*)+0x5b8>
c0014c9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ca1:	8a 00                	mov    al,BYTE PTR [eax]
c0014ca3:	3c 0f                	cmp    al,0xf
c0014ca5:	0f 85 8b 01 00 00    	jne    c0014e36 <opcodeFault(regs*, void*)+0x3a7>
c0014cab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cae:	40                   	inc    eax
c0014caf:	8a 00                	mov    al,BYTE PTR [eax]
c0014cb1:	3c c7                	cmp    al,0xc7
c0014cb3:	0f 86 7d 01 00 00    	jbe    c0014e36 <opcodeFault(regs*, void*)+0x3a7>
c0014cb9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cbc:	40                   	inc    eax
c0014cbd:	8a 00                	mov    al,BYTE PTR [eax]
c0014cbf:	3c cf                	cmp    al,0xcf
c0014cc1:	0f 87 6f 01 00 00    	ja     c0014e36 <opcodeFault(regs*, void*)+0x3a7>
c0014cc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014cca:	40                   	inc    eax
c0014ccb:	8a 00                	mov    al,BYTE PTR [eax]
c0014ccd:	83 c0 38             	add    eax,0x38
c0014cd0:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0014cd3:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014cd7:	75 0b                	jne    c0014ce4 <opcodeFault(regs*, void*)+0x255>
c0014cd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cdc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014cdf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014ce2:	eb 75                	jmp    c0014d59 <opcodeFault(regs*, void*)+0x2ca>
c0014ce4:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014ce8:	75 0b                	jne    c0014cf5 <opcodeFault(regs*, void*)+0x266>
c0014cea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ced:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014cf0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014cf3:	eb 64                	jmp    c0014d59 <opcodeFault(regs*, void*)+0x2ca>
c0014cf5:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014cf9:	75 0b                	jne    c0014d06 <opcodeFault(regs*, void*)+0x277>
c0014cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cfe:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014d01:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d04:	eb 53                	jmp    c0014d59 <opcodeFault(regs*, void*)+0x2ca>
c0014d06:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014d0a:	75 0b                	jne    c0014d17 <opcodeFault(regs*, void*)+0x288>
c0014d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014d12:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d15:	eb 42                	jmp    c0014d59 <opcodeFault(regs*, void*)+0x2ca>
c0014d17:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014d1b:	75 0b                	jne    c0014d28 <opcodeFault(regs*, void*)+0x299>
c0014d1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d20:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d23:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d26:	eb 31                	jmp    c0014d59 <opcodeFault(regs*, void*)+0x2ca>
c0014d28:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014d2c:	75 0b                	jne    c0014d39 <opcodeFault(regs*, void*)+0x2aa>
c0014d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d31:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014d34:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d37:	eb 20                	jmp    c0014d59 <opcodeFault(regs*, void*)+0x2ca>
c0014d39:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014d3d:	75 0b                	jne    c0014d4a <opcodeFault(regs*, void*)+0x2bb>
c0014d3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d42:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014d45:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d48:	eb 0f                	jmp    c0014d59 <opcodeFault(regs*, void*)+0x2ca>
c0014d4a:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014d4e:	75 09                	jne    c0014d59 <opcodeFault(regs*, void*)+0x2ca>
c0014d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d53:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0014d56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d59:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0014d5d:	74 10                	je     c0014d6f <opcodeFault(regs*, void*)+0x2e0>
c0014d5f:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0014d66:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0014d6d:	eb 2d                	jmp    c0014d9c <opcodeFault(regs*, void*)+0x30d>
c0014d6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d72:	c1 e0 18             	shl    eax,0x18
c0014d75:	89 c2                	mov    edx,eax
c0014d77:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d7a:	c1 e0 08             	shl    eax,0x8
c0014d7d:	25 00 00 ff 00       	and    eax,0xff0000
c0014d82:	09 c2                	or     edx,eax
c0014d84:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d87:	c1 e8 08             	shr    eax,0x8
c0014d8a:	25 00 ff 00 00       	and    eax,0xff00
c0014d8f:	09 c2                	or     edx,eax
c0014d91:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0014d94:	c1 e8 18             	shr    eax,0x18
c0014d97:	09 d0                	or     eax,edx
c0014d99:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0014d9c:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0014da0:	75 0b                	jne    c0014dad <opcodeFault(regs*, void*)+0x31e>
c0014da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014da5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014da8:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014dab:	eb 75                	jmp    c0014e22 <opcodeFault(regs*, void*)+0x393>
c0014dad:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0014db1:	75 0b                	jne    c0014dbe <opcodeFault(regs*, void*)+0x32f>
c0014db3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014db9:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0014dbc:	eb 64                	jmp    c0014e22 <opcodeFault(regs*, void*)+0x393>
c0014dbe:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0014dc2:	75 0b                	jne    c0014dcf <opcodeFault(regs*, void*)+0x340>
c0014dc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dca:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014dcd:	eb 53                	jmp    c0014e22 <opcodeFault(regs*, void*)+0x393>
c0014dcf:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0014dd3:	75 0b                	jne    c0014de0 <opcodeFault(regs*, void*)+0x351>
c0014dd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dd8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014ddb:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0014dde:	eb 42                	jmp    c0014e22 <opcodeFault(regs*, void*)+0x393>
c0014de0:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0014de4:	75 0b                	jne    c0014df1 <opcodeFault(regs*, void*)+0x362>
c0014de6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014de9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dec:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0014def:	eb 31                	jmp    c0014e22 <opcodeFault(regs*, void*)+0x393>
c0014df1:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0014df5:	75 0b                	jne    c0014e02 <opcodeFault(regs*, void*)+0x373>
c0014df7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dfa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014dfd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0014e00:	eb 20                	jmp    c0014e22 <opcodeFault(regs*, void*)+0x393>
c0014e02:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0014e06:	75 0b                	jne    c0014e13 <opcodeFault(regs*, void*)+0x384>
c0014e08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e0b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e0e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0014e11:	eb 0f                	jmp    c0014e22 <opcodeFault(regs*, void*)+0x393>
c0014e13:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0014e17:	75 09                	jne    c0014e22 <opcodeFault(regs*, void*)+0x393>
c0014e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e1c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0014e1f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0014e22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e25:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e28:	8d 50 02             	lea    edx,[eax+0x2]
c0014e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e2e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e31:	e9 11 02 00 00       	jmp    c0015047 <opcodeFault(regs*, void*)+0x5b8>
c0014e36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e39:	8a 00                	mov    al,BYTE PTR [eax]
c0014e3b:	3c 0f                	cmp    al,0xf
c0014e3d:	0f 85 76 01 00 00    	jne    c0014fb9 <opcodeFault(regs*, void*)+0x52a>
c0014e43:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014e46:	40                   	inc    eax
c0014e47:	8a 00                	mov    al,BYTE PTR [eax]
c0014e49:	3c c7                	cmp    al,0xc7
c0014e4b:	0f 85 68 01 00 00    	jne    c0014fb9 <opcodeFault(regs*, void*)+0x52a>
c0014e51:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014e54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e57:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014e5a:	8d 50 01             	lea    edx,[eax+0x1]
c0014e5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e60:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014e63:	8d 45 ba             	lea    eax,[ebp-0x46]
c0014e66:	50                   	push   eax
c0014e67:	8d 45 bb             	lea    eax,[ebp-0x45]
c0014e6a:	50                   	push   eax
c0014e6b:	8d 45 bc             	lea    eax,[ebp-0x44]
c0014e6e:	50                   	push   eax
c0014e6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014e72:	e8 95 42 00 00       	call   c001910c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0014e77:	83 c4 10             	add    esp,0x10
c0014e7a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0014e7d:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0014e80:	83 f0 01             	xor    eax,0x1
c0014e83:	84 c0                	test   al,al
c0014e85:	0f 84 2e 01 00 00    	je     c0014fb9 <opcodeFault(regs*, void*)+0x52a>
c0014e8b:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0014e8e:	3c 01                	cmp    al,0x1
c0014e90:	0f 85 23 01 00 00    	jne    c0014fb9 <opcodeFault(regs*, void*)+0x52a>
c0014e96:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0014e99:	83 f0 01             	xor    eax,0x1
c0014e9c:	84 c0                	test   al,al
c0014e9e:	0f 84 15 01 00 00    	je     c0014fb9 <opcodeFault(regs*, void*)+0x52a>
c0014ea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ea7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0014eaa:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ead:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0014eb4:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014eb7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014eba:	89 c2                	mov    edx,eax
c0014ebc:	b8 00 00 00 00       	mov    eax,0x0
c0014ec1:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014ec4:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014ec7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014eca:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0014ecd:	ba 00 00 00 00       	mov    edx,0x0
c0014ed2:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0014ed5:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0014ed8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014edb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014ede:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ee1:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0014ee8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014eeb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014eee:	89 c2                	mov    edx,eax
c0014ef0:	b8 00 00 00 00       	mov    eax,0x0
c0014ef5:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0014ef8:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0014efb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014efe:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014f01:	ba 00 00 00 00       	mov    edx,0x0
c0014f06:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c0014f09:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0014f0c:	e8 59 7e 00 00       	call   c001cd6a <lockScheduler()>
c0014f11:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f14:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f19:	89 c1                	mov    ecx,eax
c0014f1b:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0014f1e:	89 cb                	mov    ebx,ecx
c0014f20:	89 d0                	mov    eax,edx
c0014f22:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c0014f25:	89 c6                	mov    esi,eax
c0014f27:	89 f0                	mov    eax,esi
c0014f29:	09 d8                	or     eax,ebx
c0014f2b:	85 c0                	test   eax,eax
c0014f2d:	75 21                	jne    c0014f50 <opcodeFault(regs*, void*)+0x4c1>
c0014f2f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0014f32:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0014f35:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0014f38:	89 01                	mov    DWORD PTR [ecx],eax
c0014f3a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0014f3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f40:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f43:	83 c8 40             	or     eax,0x40
c0014f46:	89 c2                	mov    edx,eax
c0014f48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f4e:	eb 3e                	jmp    c0014f8e <opcodeFault(regs*, void*)+0x4ff>
c0014f50:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0014f53:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0014f56:	8b 00                	mov    eax,DWORD PTR [eax]
c0014f58:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0014f5b:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0014f5e:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0014f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f64:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0014f67:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0014f6a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0014f6d:	89 d0                	mov    eax,edx
c0014f6f:	31 d2                	xor    edx,edx
c0014f71:	89 c3                	mov    ebx,eax
c0014f73:	89 d6                	mov    esi,edx
c0014f75:	89 da                	mov    edx,ebx
c0014f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7a:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0014f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f80:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f83:	83 e0 bf             	and    eax,0xffffffbf
c0014f86:	89 c2                	mov    edx,eax
c0014f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f8b:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0014f8e:	e8 d9 7d 00 00       	call   c001cd6c <unlockScheduler()>
c0014f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f96:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f99:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0014f9c:	01 c2                	add    edx,eax
c0014f9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fa1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fa4:	83 ec 0c             	sub    esp,0xc
c0014fa7:	68 6e 98 02 c0       	push   0xc002986e
c0014fac:	e8 10 d8 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014fb1:	83 c4 10             	add    esp,0x10
c0014fb4:	e9 8e 00 00 00       	jmp    c0015047 <opcodeFault(regs*, void*)+0x5b8>
c0014fb9:	83 ec 0c             	sub    esp,0xc
c0014fbc:	68 81 98 02 c0       	push   0xc0029881
c0014fc1:	e8 fb d7 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fcc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fd5:	c1 e0 04             	shl    eax,0x4
c0014fd8:	01 d0                	add    eax,edx
c0014fda:	83 c0 03             	add    eax,0x3
c0014fdd:	8a 00                	mov    al,BYTE PTR [eax]
c0014fdf:	0f b6 d8             	movzx  ebx,al
c0014fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fe5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014fe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014feb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014fee:	c1 e0 04             	shl    eax,0x4
c0014ff1:	01 d0                	add    eax,edx
c0014ff3:	83 c0 02             	add    eax,0x2
c0014ff6:	8a 00                	mov    al,BYTE PTR [eax]
c0014ff8:	0f b6 c8             	movzx  ecx,al
c0014ffb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ffe:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015004:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015007:	c1 e0 04             	shl    eax,0x4
c001500a:	01 d0                	add    eax,edx
c001500c:	40                   	inc    eax
c001500d:	8a 00                	mov    al,BYTE PTR [eax]
c001500f:	0f b6 d0             	movzx  edx,al
c0015012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015015:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0015018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001501b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001501e:	c1 e0 04             	shl    eax,0x4
c0015021:	01 f0                	add    eax,esi
c0015023:	8a 00                	mov    al,BYTE PTR [eax]
c0015025:	0f b6 c0             	movzx  eax,al
c0015028:	83 ec 0c             	sub    esp,0xc
c001502b:	53                   	push   ebx
c001502c:	51                   	push   ecx
c001502d:	52                   	push   edx
c001502e:	50                   	push   eax
c001502f:	68 94 98 02 c0       	push   0xc0029894
c0015034:	e8 88 d7 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0015039:	83 c4 20             	add    esp,0x20
c001503c:	83 ec 0c             	sub    esp,0xc
c001503f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015042:	e8 a5 f5 ff ff       	call   c00145ec <displayDebugInfo(regs*)>
c0015047:	8d 65 f8             	lea    esp,[ebp-0x8]
c001504a:	5b                   	pop    ebx
c001504b:	5e                   	pop    esi
c001504c:	5d                   	pop    ebp
c001504d:	c3                   	ret    

c001504e <displayProgramFault(char const*)>:
c001504e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015053:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015056:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001505c:	85 c0                	test   eax,eax
c001505e:	74 15                	je     c0015075 <displayProgramFault(char const*)+0x27>
c0015060:	83 ec 0c             	sub    esp,0xc
c0015063:	6a 04                	push   0x4
c0015065:	6a 0f                	push   0xf
c0015067:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001506b:	50                   	push   eax
c001506c:	e8 f3 b9 ff ff       	call   c0010a64 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015071:	83 c4 1c             	add    esp,0x1c
c0015074:	c3                   	ret    
c0015075:	c3                   	ret    

c0015076 <setupInterruptController()>:
c0015076:	55                   	push   ebp
c0015077:	89 e5                	mov    ebp,esp
c0015079:	53                   	push   ebx
c001507a:	83 ec 24             	sub    esp,0x24
c001507d:	b8 00 00 00 00       	mov    eax,0x0
c0015082:	85 c0                	test   eax,eax
c0015084:	0f 95 c0             	setne  al
c0015087:	84 c0                	test   al,al
c0015089:	74 5b                	je     c00150e6 <setupInterruptController()+0x70>
c001508b:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015092:	83 ec 0c             	sub    esp,0xc
c0015095:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015098:	e8 37 a4 ff ff       	call   c000f4d4 <malloc>
c001509d:	83 c4 10             	add    esp,0x10
c00150a0:	89 c3                	mov    ebx,eax
c00150a2:	83 ec 0c             	sub    esp,0xc
c00150a5:	53                   	push   ebx
c00150a6:	e8 c3 f2 00 00       	call   c002436e <APIC::APIC()>
c00150ab:	83 c4 10             	add    esp,0x10
c00150ae:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00150b1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00150b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00150b9:	83 c0 08             	add    eax,0x8
c00150bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00150be:	6a 00                	push   0x0
c00150c0:	6a 00                	push   0x0
c00150c2:	6a 00                	push   0x0
c00150c4:	52                   	push   edx
c00150c5:	ff d0                	call   eax
c00150c7:	83 c4 10             	add    esp,0x10
c00150ca:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00150cf:	83 ec 08             	sub    esp,0x8
c00150d2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00150d5:	50                   	push   eax
c00150d6:	e8 d5 ea ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c00150db:	83 c4 10             	add    esp,0x10
c00150de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00150e1:	e9 52 03 00 00       	jmp    c0015438 <setupInterruptController()+0x3c2>
c00150e6:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00150eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00150f1:	83 e0 01             	and    eax,0x1
c00150f4:	84 c0                	test   al,al
c00150f6:	0f 95 c0             	setne  al
c00150f9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00150fc:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015103:	83 ec 0c             	sub    esp,0xc
c0015106:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015109:	e8 c6 a3 ff ff       	call   c000f4d4 <malloc>
c001510e:	83 c4 10             	add    esp,0x10
c0015111:	89 c3                	mov    ebx,eax
c0015113:	83 ec 0c             	sub    esp,0xc
c0015116:	53                   	push   ebx
c0015117:	e8 aa f7 00 00       	call   c00248c6 <PIC::PIC()>
c001511c:	83 c4 10             	add    esp,0x10
c001511f:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015122:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015125:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015128:	8b 00                	mov    eax,DWORD PTR [eax]
c001512a:	83 c0 08             	add    eax,0x8
c001512d:	8b 00                	mov    eax,DWORD PTR [eax]
c001512f:	6a 00                	push   0x0
c0015131:	6a 00                	push   0x0
c0015133:	6a 00                	push   0x0
c0015135:	52                   	push   edx
c0015136:	ff d0                	call   eax
c0015138:	83 c4 10             	add    esp,0x10
c001513b:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001513f:	74 73                	je     c00151b4 <setupInterruptController()+0x13e>
c0015141:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015144:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015147:	8b 00                	mov    eax,DWORD PTR [eax]
c0015149:	83 c0 0c             	add    eax,0xc
c001514c:	8b 00                	mov    eax,DWORD PTR [eax]
c001514e:	6a 00                	push   0x0
c0015150:	6a 00                	push   0x0
c0015152:	6a 00                	push   0x0
c0015154:	52                   	push   edx
c0015155:	ff d0                	call   eax
c0015157:	83 c4 10             	add    esp,0x10
c001515a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001515e:	74 15                	je     c0015175 <setupInterruptController()+0xff>
c0015160:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015163:	8b 00                	mov    eax,DWORD PTR [eax]
c0015165:	83 c0 04             	add    eax,0x4
c0015168:	8b 00                	mov    eax,DWORD PTR [eax]
c001516a:	83 ec 0c             	sub    esp,0xc
c001516d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015170:	ff d0                	call   eax
c0015172:	83 c4 10             	add    esp,0x10
c0015175:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c001517c:	83 ec 0c             	sub    esp,0xc
c001517f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015182:	e8 4d a3 ff ff       	call   c000f4d4 <malloc>
c0015187:	83 c4 10             	add    esp,0x10
c001518a:	89 c3                	mov    ebx,eax
c001518c:	83 ec 0c             	sub    esp,0xc
c001518f:	53                   	push   ebx
c0015190:	e8 d9 f1 00 00       	call   c002436e <APIC::APIC()>
c0015195:	83 c4 10             	add    esp,0x10
c0015198:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001519b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001519e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a3:	83 c0 08             	add    eax,0x8
c00151a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151a8:	6a 00                	push   0x0
c00151aa:	6a 00                	push   0x0
c00151ac:	6a 00                	push   0x0
c00151ae:	52                   	push   edx
c00151af:	ff d0                	call   eax
c00151b1:	83 c4 10             	add    esp,0x10
c00151b4:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00151b9:	83 ec 08             	sub    esp,0x8
c00151bc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151bf:	50                   	push   eax
c00151c0:	e8 eb e9 ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c00151c5:	83 c4 10             	add    esp,0x10
c00151c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151cd:	83 c0 24             	add    eax,0x24
c00151d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00151d2:	6a 00                	push   0x0
c00151d4:	68 70 4a 01 c0       	push   0xc0014a70
c00151d9:	6a 00                	push   0x0
c00151db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151de:	ff d0                	call   eax
c00151e0:	83 c4 10             	add    esp,0x10
c00151e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00151e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00151e8:	83 c0 24             	add    eax,0x24
c00151eb:	8b 00                	mov    eax,DWORD PTR [eax]
c00151ed:	6a 00                	push   0x0
c00151ef:	68 70 4a 01 c0       	push   0xc0014a70
c00151f4:	6a 01                	push   0x1
c00151f6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00151f9:	ff d0                	call   eax
c00151fb:	83 c4 10             	add    esp,0x10
c00151fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015201:	8b 00                	mov    eax,DWORD PTR [eax]
c0015203:	83 c0 24             	add    eax,0x24
c0015206:	8b 00                	mov    eax,DWORD PTR [eax]
c0015208:	6a 00                	push   0x0
c001520a:	68 49 44 01 c0       	push   0xc0014449
c001520f:	6a 02                	push   0x2
c0015211:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015214:	ff d0                	call   eax
c0015216:	83 c4 10             	add    esp,0x10
c0015219:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001521c:	8b 00                	mov    eax,DWORD PTR [eax]
c001521e:	83 c0 24             	add    eax,0x24
c0015221:	8b 00                	mov    eax,DWORD PTR [eax]
c0015223:	6a 00                	push   0x0
c0015225:	68 70 4a 01 c0       	push   0xc0014a70
c001522a:	6a 03                	push   0x3
c001522c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001522f:	ff d0                	call   eax
c0015231:	83 c4 10             	add    esp,0x10
c0015234:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015237:	8b 00                	mov    eax,DWORD PTR [eax]
c0015239:	83 c0 24             	add    eax,0x24
c001523c:	8b 00                	mov    eax,DWORD PTR [eax]
c001523e:	6a 00                	push   0x0
c0015240:	68 70 4a 01 c0       	push   0xc0014a70
c0015245:	6a 04                	push   0x4
c0015247:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001524a:	ff d0                	call   eax
c001524c:	83 c4 10             	add    esp,0x10
c001524f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015252:	8b 00                	mov    eax,DWORD PTR [eax]
c0015254:	83 c0 24             	add    eax,0x24
c0015257:	8b 00                	mov    eax,DWORD PTR [eax]
c0015259:	6a 00                	push   0x0
c001525b:	68 70 4a 01 c0       	push   0xc0014a70
c0015260:	6a 05                	push   0x5
c0015262:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015265:	ff d0                	call   eax
c0015267:	83 c4 10             	add    esp,0x10
c001526a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001526d:	8b 00                	mov    eax,DWORD PTR [eax]
c001526f:	83 c0 24             	add    eax,0x24
c0015272:	8b 00                	mov    eax,DWORD PTR [eax]
c0015274:	6a 00                	push   0x0
c0015276:	68 8f 4a 01 c0       	push   0xc0014a8f
c001527b:	6a 06                	push   0x6
c001527d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015280:	ff d0                	call   eax
c0015282:	83 c4 10             	add    esp,0x10
c0015285:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015288:	8b 00                	mov    eax,DWORD PTR [eax]
c001528a:	83 c0 24             	add    eax,0x24
c001528d:	8b 00                	mov    eax,DWORD PTR [eax]
c001528f:	6a 00                	push   0x0
c0015291:	68 f1 49 01 c0       	push   0xc00149f1
c0015296:	6a 07                	push   0x7
c0015298:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001529b:	ff d0                	call   eax
c001529d:	83 c4 10             	add    esp,0x10
c00152a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a5:	83 c0 24             	add    eax,0x24
c00152a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00152aa:	6a 00                	push   0x0
c00152ac:	68 64 42 01 c0       	push   0xc0014264
c00152b1:	6a 08                	push   0x8
c00152b3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152b6:	ff d0                	call   eax
c00152b8:	83 c4 10             	add    esp,0x10
c00152bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152be:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c0:	83 c0 24             	add    eax,0x24
c00152c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00152c5:	6a 00                	push   0x0
c00152c7:	68 70 4a 01 c0       	push   0xc0014a70
c00152cc:	6a 09                	push   0x9
c00152ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152d1:	ff d0                	call   eax
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152db:	83 c0 24             	add    eax,0x24
c00152de:	8b 00                	mov    eax,DWORD PTR [eax]
c00152e0:	6a 00                	push   0x0
c00152e2:	68 70 4a 01 c0       	push   0xc0014a70
c00152e7:	6a 0a                	push   0xa
c00152e9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00152ec:	ff d0                	call   eax
c00152ee:	83 c4 10             	add    esp,0x10
c00152f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00152f6:	83 c0 24             	add    eax,0x24
c00152f9:	8b 00                	mov    eax,DWORD PTR [eax]
c00152fb:	6a 00                	push   0x0
c00152fd:	68 70 4a 01 c0       	push   0xc0014a70
c0015302:	6a 0b                	push   0xb
c0015304:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015307:	ff d0                	call   eax
c0015309:	83 c4 10             	add    esp,0x10
c001530c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001530f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015311:	83 c0 24             	add    eax,0x24
c0015314:	8b 00                	mov    eax,DWORD PTR [eax]
c0015316:	6a 00                	push   0x0
c0015318:	68 70 4a 01 c0       	push   0xc0014a70
c001531d:	6a 0c                	push   0xc
c001531f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015322:	ff d0                	call   eax
c0015324:	83 c4 10             	add    esp,0x10
c0015327:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001532a:	8b 00                	mov    eax,DWORD PTR [eax]
c001532c:	83 c0 24             	add    eax,0x24
c001532f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015331:	6a 00                	push   0x0
c0015333:	68 20 4a 01 c0       	push   0xc0014a20
c0015338:	6a 0d                	push   0xd
c001533a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001533d:	ff d0                	call   eax
c001533f:	83 c4 10             	add    esp,0x10
c0015342:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015345:	8b 00                	mov    eax,DWORD PTR [eax]
c0015347:	83 c0 24             	add    eax,0x24
c001534a:	8b 00                	mov    eax,DWORD PTR [eax]
c001534c:	6a 00                	push   0x0
c001534e:	68 59 4a 01 c0       	push   0xc0014a59
c0015353:	6a 0e                	push   0xe
c0015355:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015358:	ff d0                	call   eax
c001535a:	83 c4 10             	add    esp,0x10
c001535d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015360:	8b 00                	mov    eax,DWORD PTR [eax]
c0015362:	83 c0 24             	add    eax,0x24
c0015365:	8b 00                	mov    eax,DWORD PTR [eax]
c0015367:	6a 00                	push   0x0
c0015369:	68 70 4a 01 c0       	push   0xc0014a70
c001536e:	6a 0f                	push   0xf
c0015370:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015373:	ff d0                	call   eax
c0015375:	83 c4 10             	add    esp,0x10
c0015378:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537b:	8b 00                	mov    eax,DWORD PTR [eax]
c001537d:	83 c0 24             	add    eax,0x24
c0015380:	8b 00                	mov    eax,DWORD PTR [eax]
c0015382:	6a 00                	push   0x0
c0015384:	68 70 4a 01 c0       	push   0xc0014a70
c0015389:	6a 10                	push   0x10
c001538b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001538e:	ff d0                	call   eax
c0015390:	83 c4 10             	add    esp,0x10
c0015393:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015396:	8b 00                	mov    eax,DWORD PTR [eax]
c0015398:	83 c0 24             	add    eax,0x24
c001539b:	8b 00                	mov    eax,DWORD PTR [eax]
c001539d:	6a 00                	push   0x0
c001539f:	68 70 4a 01 c0       	push   0xc0014a70
c00153a4:	6a 11                	push   0x11
c00153a6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153a9:	ff d0                	call   eax
c00153ab:	83 c4 10             	add    esp,0x10
c00153ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b3:	83 c0 24             	add    eax,0x24
c00153b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00153b8:	6a 00                	push   0x0
c00153ba:	68 70 4a 01 c0       	push   0xc0014a70
c00153bf:	6a 12                	push   0x12
c00153c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153c4:	ff d0                	call   eax
c00153c6:	83 c4 10             	add    esp,0x10
c00153c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ce:	83 c0 24             	add    eax,0x24
c00153d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00153d3:	6a 00                	push   0x0
c00153d5:	68 70 4a 01 c0       	push   0xc0014a70
c00153da:	6a 13                	push   0x13
c00153dc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153df:	ff d0                	call   eax
c00153e1:	83 c4 10             	add    esp,0x10
c00153e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00153e9:	83 c0 24             	add    eax,0x24
c00153ec:	8b 00                	mov    eax,DWORD PTR [eax]
c00153ee:	6a 00                	push   0x0
c00153f0:	68 70 4a 01 c0       	push   0xc0014a70
c00153f5:	6a 14                	push   0x14
c00153f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00153fa:	ff d0                	call   eax
c00153fc:	83 c4 10             	add    esp,0x10
c00153ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015402:	8b 00                	mov    eax,DWORD PTR [eax]
c0015404:	83 c0 24             	add    eax,0x24
c0015407:	8b 00                	mov    eax,DWORD PTR [eax]
c0015409:	6a 00                	push   0x0
c001540b:	68 70 4a 01 c0       	push   0xc0014a70
c0015410:	6a 1e                	push   0x1e
c0015412:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015415:	ff d0                	call   eax
c0015417:	83 c4 10             	add    esp,0x10
c001541a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001541d:	8b 00                	mov    eax,DWORD PTR [eax]
c001541f:	83 c0 24             	add    eax,0x24
c0015422:	8b 00                	mov    eax,DWORD PTR [eax]
c0015424:	6a 00                	push   0x0
c0015426:	68 ff b6 01 c0       	push   0xc001b6ff
c001542b:	6a 60                	push   0x60
c001542d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015430:	ff d0                	call   eax
c0015432:	83 c4 10             	add    esp,0x10
c0015435:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015438:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001543b:	c9                   	leave  
c001543c:	c3                   	ret    
c001543d:	90                   	nop

c001543e <InterruptController::convertLegacyIRQNumber(int)>:
c001543e:	55                   	push   ebp
c001543f:	89 e5                	mov    ebp,esp
c0015441:	83 ec 08             	sub    esp,0x8
c0015444:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015447:	83 ec 0c             	sub    esp,0xc
c001544a:	50                   	push   eax
c001544b:	e8 4c ea ff ff       	call   c0013e9c <Device::getName()>
c0015450:	83 c4 10             	add    esp,0x10
c0015453:	8a 00                	mov    al,BYTE PTR [eax]
c0015455:	3c 41                	cmp    al,0x41
c0015457:	0f 94 c0             	sete   al
c001545a:	84 c0                	test   al,al
c001545c:	74 28                	je     c0015486 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001545e:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015462:	7f 12                	jg     c0015476 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015464:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015467:	05 e0 bb 02 c0       	add    eax,0xc002bbe0
c001546c:	8a 00                	mov    al,BYTE PTR [eax]
c001546e:	0f b6 c0             	movzx  eax,al
c0015471:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015474:	eb 10                	jmp    c0015486 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015476:	83 ec 0c             	sub    esp,0xc
c0015479:	68 14 96 02 c0       	push   0xc0029614
c001547e:	e8 58 44 00 00       	call   c00198db <Krnl::panic(char const*)>
c0015483:	83 c4 10             	add    esp,0x10
c0015486:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015489:	c9                   	leave  
c001548a:	c3                   	ret    
c001548b:	90                   	nop

c001548c <startGUI(void*)>:
c001548c:	55                   	push   ebp
c001548d:	89 e5                	mov    ebp,esp
c001548f:	53                   	push   ebx
c0015490:	83 ec 04             	sub    esp,0x4
c0015493:	e8 d4 78 00 00       	call   c001cd6c <unlockScheduler()>
c0015498:	8b 1d 88 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c988
c001549e:	83 ec 08             	sub    esp,0x8
c00154a1:	6a 01                	push   0x1
c00154a3:	68 fc 98 02 c0       	push   0xc00298fc
c00154a8:	e8 49 72 00 00       	call   c001c6f6 <Thr::loadDLL(char const*, bool)>
c00154ad:	83 c4 10             	add    esp,0x10
c00154b0:	83 ec 08             	sub    esp,0x8
c00154b3:	53                   	push   ebx
c00154b4:	50                   	push   eax
c00154b5:	e8 4b 74 00 00       	call   c001c905 <Thr::executeDLL(unsigned long, void*)>
c00154ba:	83 c4 10             	add    esp,0x10
c00154bd:	8b 1d 88 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c988
c00154c3:	83 ec 08             	sub    esp,0x8
c00154c6:	6a 01                	push   0x1
c00154c8:	68 16 99 02 c0       	push   0xc0029916
c00154cd:	e8 24 72 00 00       	call   c001c6f6 <Thr::loadDLL(char const*, bool)>
c00154d2:	83 c4 10             	add    esp,0x10
c00154d5:	83 ec 08             	sub    esp,0x8
c00154d8:	53                   	push   ebx
c00154d9:	50                   	push   eax
c00154da:	e8 26 74 00 00       	call   c001c905 <Thr::executeDLL(unsigned long, void*)>
c00154df:	83 c4 10             	add    esp,0x10
c00154e2:	90                   	nop
c00154e3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00154e6:	c9                   	leave  
c00154e7:	c3                   	ret    

c00154e8 <startGUIVESA(void*)>:
c00154e8:	55                   	push   ebp
c00154e9:	89 e5                	mov    ebp,esp
c00154eb:	53                   	push   ebx
c00154ec:	83 ec 04             	sub    esp,0x4
c00154ef:	e8 78 78 00 00       	call   c001cd6c <unlockScheduler()>
c00154f4:	8b 1d 88 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c988
c00154fa:	83 ec 08             	sub    esp,0x8
c00154fd:	6a 01                	push   0x1
c00154ff:	68 30 99 02 c0       	push   0xc0029930
c0015504:	e8 ed 71 00 00       	call   c001c6f6 <Thr::loadDLL(char const*, bool)>
c0015509:	83 c4 10             	add    esp,0x10
c001550c:	83 ec 08             	sub    esp,0x8
c001550f:	53                   	push   ebx
c0015510:	50                   	push   eax
c0015511:	e8 ef 73 00 00       	call   c001c905 <Thr::executeDLL(unsigned long, void*)>
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	8b 1d 88 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c988
c001551f:	83 ec 08             	sub    esp,0x8
c0015522:	6a 01                	push   0x1
c0015524:	68 16 99 02 c0       	push   0xc0029916
c0015529:	e8 c8 71 00 00       	call   c001c6f6 <Thr::loadDLL(char const*, bool)>
c001552e:	83 c4 10             	add    esp,0x10
c0015531:	83 ec 08             	sub    esp,0x8
c0015534:	53                   	push   ebx
c0015535:	50                   	push   eax
c0015536:	e8 ca 73 00 00       	call   c001c905 <Thr::executeDLL(unsigned long, void*)>
c001553b:	83 c4 10             	add    esp,0x10
c001553e:	90                   	nop
c001553f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015542:	c9                   	leave  
c0015543:	c3                   	ret    

c0015544 <sendKeyToTerminal(unsigned char)>:
c0015544:	55                   	push   ebp
c0015545:	89 e5                	mov    ebp,esp
c0015547:	83 ec 28             	sub    esp,0x28
c001554a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001554d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015550:	a1 64 ca 02 c0       	mov    eax,ds:0xc002ca64
c0015555:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015559:	83 ec 08             	sub    esp,0x8
c001555c:	52                   	push   edx
c001555d:	50                   	push   eax
c001555e:	e8 3d ba ff ff       	call   c0010fa0 <VgaText::receiveKey(unsigned char)>
c0015563:	83 c4 10             	add    esp,0x10
c0015566:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c001556a:	75 41                	jne    c00155ad <sendKeyToTerminal(unsigned char)+0x69>
c001556c:	e8 20 78 00 00       	call   c001cd91 <lockStuff()>
c0015571:	a1 40 cb 02 c0       	mov    eax,ds:0xc002cb40
c0015576:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015579:	c7 05 40 cb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cb40,0x0
c0015583:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015587:	74 1f                	je     c00155a8 <sendKeyToTerminal(unsigned char)+0x64>
c0015589:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001558c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001558f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015592:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015595:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015598:	83 ec 0c             	sub    esp,0xc
c001559b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c001559e:	e8 df 7d 00 00       	call   c001d382 <unblockTask(ThreadControlBlock*)>
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	eb db                	jmp    c0015583 <sendKeyToTerminal(unsigned char)+0x3f>
c00155a8:	e8 7e 7b 00 00       	call   c001d12b <unlockStuff()>
c00155ad:	90                   	nop
c00155ae:	c9                   	leave  
c00155af:	c3                   	ret    

c00155b0 <sendKeyboardToken(KeyboardToken)>:
c00155b0:	55                   	push   ebp
c00155b1:	89 e5                	mov    ebp,esp
c00155b3:	83 ec 18             	sub    esp,0x18
c00155b6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00155b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155bc:	0f b7 c0             	movzx  eax,ax
c00155bf:	83 f2 01             	xor    edx,0x1
c00155c2:	88 90 60 cb 02 c0    	mov    BYTE PTR [eax-0x3ffd34a0],dl
c00155c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cb:	66 3d 03 02          	cmp    ax,0x203
c00155cf:	75 07                	jne    c00155d8 <sendKeyboardToken(KeyboardToken)+0x28>
c00155d1:	a0 60 cc 02 c0       	mov    al,ds:0xc002cc60
c00155d6:	84 c0                	test   al,al
c00155d8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00155dc:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00155df:	a0 68 cf 02 c0       	mov    al,ds:0xc002cf68
c00155e4:	38 c2                	cmp    dl,al
c00155e6:	74 1c                	je     c0015604 <sendKeyboardToken(KeyboardToken)+0x54>
c00155e8:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00155eb:	a2 68 cf 02 c0       	mov    ds:0xc002cf68,al
c00155f0:	a0 68 cf 02 c0       	mov    al,ds:0xc002cf68
c00155f5:	0f b6 c0             	movzx  eax,al
c00155f8:	83 ec 0c             	sub    esp,0xc
c00155fb:	50                   	push   eax
c00155fc:	e8 57 ab ff ff       	call   c0010158 <setTerminalScrollLock(bool)>
c0015601:	83 c4 10             	add    esp,0x10
c0015604:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015607:	84 c0                	test   al,al
c0015609:	0f 84 ae 00 00 00    	je     c00156bd <sendKeyboardToken(KeyboardToken)+0x10d>
c001560f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015612:	66 3d 10 03          	cmp    ax,0x310
c0015616:	75 06                	jne    c001561e <sendKeyboardToken(KeyboardToken)+0x6e>
c0015618:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001561e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015621:	66 3d 11 03          	cmp    ax,0x311
c0015625:	75 06                	jne    c001562d <sendKeyboardToken(KeyboardToken)+0x7d>
c0015627:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001562d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015630:	66 3d 12 03          	cmp    ax,0x312
c0015634:	75 06                	jne    c001563c <sendKeyboardToken(KeyboardToken)+0x8c>
c0015636:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001563c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001563f:	66 3d 13 03          	cmp    ax,0x313
c0015643:	75 06                	jne    c001564b <sendKeyboardToken(KeyboardToken)+0x9b>
c0015645:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c001564b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001564e:	66 3d 14 03          	cmp    ax,0x314
c0015652:	75 06                	jne    c001565a <sendKeyboardToken(KeyboardToken)+0xaa>
c0015654:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c001565a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001565d:	66 3d 15 03          	cmp    ax,0x315
c0015661:	75 06                	jne    c0015669 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015663:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001566c:	66 3d 16 03          	cmp    ax,0x316
c0015670:	75 06                	jne    c0015678 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015672:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001567b:	66 3d 17 03          	cmp    ax,0x317
c001567f:	75 06                	jne    c0015687 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015681:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015687:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001568a:	66 3d 18 03          	cmp    ax,0x318
c001568e:	75 06                	jne    c0015696 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015690:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015699:	66 3d 19 03          	cmp    ax,0x319
c001569d:	75 06                	jne    c00156a5 <sendKeyboardToken(KeyboardToken)+0xf5>
c001569f:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00156a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156a8:	66 3d 1a 03          	cmp    ax,0x31a
c00156ac:	0f 85 c9 00 00 00    	jne    c001577b <sendKeyboardToken(KeyboardToken)+0x1cb>
c00156b2:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00156b8:	e9 be 00 00 00       	jmp    c001577b <sendKeyboardToken(KeyboardToken)+0x1cb>
c00156bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156c0:	66 3d 10 03          	cmp    ax,0x310
c00156c4:	75 0a                	jne    c00156d0 <sendKeyboardToken(KeyboardToken)+0x120>
c00156c6:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00156cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156d3:	66 3d 11 03          	cmp    ax,0x311
c00156d7:	75 0a                	jne    c00156e3 <sendKeyboardToken(KeyboardToken)+0x133>
c00156d9:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00156df:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156e6:	66 3d 12 03          	cmp    ax,0x312
c00156ea:	75 0a                	jne    c00156f6 <sendKeyboardToken(KeyboardToken)+0x146>
c00156ec:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00156f2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00156f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156f9:	66 3d 13 03          	cmp    ax,0x313
c00156fd:	75 0a                	jne    c0015709 <sendKeyboardToken(KeyboardToken)+0x159>
c00156ff:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015705:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015709:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570c:	66 3d 14 03          	cmp    ax,0x314
c0015710:	75 0a                	jne    c001571c <sendKeyboardToken(KeyboardToken)+0x16c>
c0015712:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015718:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001571c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571f:	66 3d 15 03          	cmp    ax,0x315
c0015723:	75 0a                	jne    c001572f <sendKeyboardToken(KeyboardToken)+0x17f>
c0015725:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001572b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001572f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015732:	66 3d 16 03          	cmp    ax,0x316
c0015736:	75 0a                	jne    c0015742 <sendKeyboardToken(KeyboardToken)+0x192>
c0015738:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001573e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015745:	66 3d 17 03          	cmp    ax,0x317
c0015749:	75 0a                	jne    c0015755 <sendKeyboardToken(KeyboardToken)+0x1a5>
c001574b:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015751:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015755:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015758:	66 3d 18 03          	cmp    ax,0x318
c001575c:	75 0a                	jne    c0015768 <sendKeyboardToken(KeyboardToken)+0x1b8>
c001575e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015764:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015768:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001576b:	66 3d 19 03          	cmp    ax,0x319
c001576f:	75 0a                	jne    c001577b <sendKeyboardToken(KeyboardToken)+0x1cb>
c0015771:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015777:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001577b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577e:	66 3d 00 02          	cmp    ax,0x200
c0015782:	75 2c                	jne    c00157b0 <sendKeyboardToken(KeyboardToken)+0x200>
c0015784:	a0 60 cf 02 c0       	mov    al,ds:0xc002cf60
c0015789:	83 f0 01             	xor    eax,0x1
c001578c:	84 c0                	test   al,al
c001578e:	74 20                	je     c00157b0 <sendKeyboardToken(KeyboardToken)+0x200>
c0015790:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0015795:	6a 01                	push   0x1
c0015797:	6a 00                	push   0x0
c0015799:	68 8c 54 01 c0       	push   0xc001548c
c001579e:	50                   	push   eax
c001579f:	e8 f8 76 00 00       	call   c001ce9c <Process::createThread(void (*)(void*), void*, int)>
c00157a4:	83 c4 10             	add    esp,0x10
c00157a7:	c6 05 60 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf60,0x1
c00157ae:	eb 33                	jmp    c00157e3 <sendKeyboardToken(KeyboardToken)+0x233>
c00157b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b3:	66 3d 01 02          	cmp    ax,0x201
c00157b7:	75 2a                	jne    c00157e3 <sendKeyboardToken(KeyboardToken)+0x233>
c00157b9:	a0 60 cf 02 c0       	mov    al,ds:0xc002cf60
c00157be:	83 f0 01             	xor    eax,0x1
c00157c1:	84 c0                	test   al,al
c00157c3:	74 1e                	je     c00157e3 <sendKeyboardToken(KeyboardToken)+0x233>
c00157c5:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00157ca:	6a 01                	push   0x1
c00157cc:	6a 00                	push   0x0
c00157ce:	68 e8 54 01 c0       	push   0xc00154e8
c00157d3:	50                   	push   eax
c00157d4:	e8 c3 76 00 00       	call   c001ce9c <Process::createThread(void (*)(void*), void*, int)>
c00157d9:	83 c4 10             	add    esp,0x10
c00157dc:	c6 05 60 cf 02 c0 01 	mov    BYTE PTR ds:0xc002cf60,0x1
c00157e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e6:	66 3d 1d 03          	cmp    ax,0x31d
c00157ea:	75 06                	jne    c00157f2 <sendKeyboardToken(KeyboardToken)+0x242>
c00157ec:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00157f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157f5:	66 3d 1c 03          	cmp    ax,0x31c
c00157f9:	75 06                	jne    c0015801 <sendKeyboardToken(KeyboardToken)+0x251>
c00157fb:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015801:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015804:	66 3d 1b 03          	cmp    ax,0x31b
c0015808:	75 06                	jne    c0015810 <sendKeyboardToken(KeyboardToken)+0x260>
c001580a:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015810:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015813:	66 3d 1e 03          	cmp    ax,0x31e
c0015817:	75 06                	jne    c001581f <sendKeyboardToken(KeyboardToken)+0x26f>
c0015819:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c001581f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015822:	66 3d 1f 03          	cmp    ax,0x31f
c0015826:	75 06                	jne    c001582e <sendKeyboardToken(KeyboardToken)+0x27e>
c0015828:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c001582e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015831:	66 3d 1a 03          	cmp    ax,0x31a
c0015835:	75 06                	jne    c001583d <sendKeyboardToken(KeyboardToken)+0x28d>
c0015837:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c001583d:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015841:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015844:	83 f0 01             	xor    eax,0x1
c0015847:	84 c0                	test   al,al
c0015849:	74 77                	je     c00158c2 <sendKeyboardToken(KeyboardToken)+0x312>
c001584b:	a0 61 cc 02 c0       	mov    al,ds:0xc002cc61
c0015850:	84 c0                	test   al,al
c0015852:	74 41                	je     c0015895 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0015854:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015858:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001585c:	74 2b                	je     c0015889 <sendKeyboardToken(KeyboardToken)+0x2d9>
c001585e:	8b 15 64 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf64
c0015864:	89 d0                	mov    eax,edx
c0015866:	c1 e0 02             	shl    eax,0x2
c0015869:	01 d0                	add    eax,edx
c001586b:	01 c0                	add    eax,eax
c001586d:	a3 64 cf 02 c0       	mov    ds:0xc002cf64,eax
c0015872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015875:	0f b7 c0             	movzx  eax,ax
c0015878:	8d 50 d0             	lea    edx,[eax-0x30]
c001587b:	a1 64 cf 02 c0       	mov    eax,ds:0xc002cf64
c0015880:	01 d0                	add    eax,edx
c0015882:	a3 64 cf 02 c0       	mov    ds:0xc002cf64,eax
c0015887:	eb 6d                	jmp    c00158f6 <sendKeyboardToken(KeyboardToken)+0x346>
c0015889:	c7 05 64 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf64,0x0
c0015893:	eb 61                	jmp    c00158f6 <sendKeyboardToken(KeyboardToken)+0x346>
c0015895:	a1 64 cf 02 c0       	mov    eax,ds:0xc002cf64
c001589a:	85 c0                	test   eax,eax
c001589c:	74 18                	je     c00158b6 <sendKeyboardToken(KeyboardToken)+0x306>
c001589e:	a1 64 cf 02 c0       	mov    eax,ds:0xc002cf64
c00158a3:	0f b6 c0             	movzx  eax,al
c00158a6:	83 ec 0c             	sub    esp,0xc
c00158a9:	50                   	push   eax
c00158aa:	e8 95 fc ff ff       	call   c0015544 <sendKeyToTerminal(unsigned char)>
c00158af:	83 c4 10             	add    esp,0x10
c00158b2:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158b6:	c7 05 64 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf64,0x0
c00158c0:	eb 34                	jmp    c00158f6 <sendKeyboardToken(KeyboardToken)+0x346>
c00158c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c5:	66 3d 01 01          	cmp    ax,0x101
c00158c9:	75 2b                	jne    c00158f6 <sendKeyboardToken(KeyboardToken)+0x346>
c00158cb:	a1 64 cf 02 c0       	mov    eax,ds:0xc002cf64
c00158d0:	85 c0                	test   eax,eax
c00158d2:	74 18                	je     c00158ec <sendKeyboardToken(KeyboardToken)+0x33c>
c00158d4:	a1 64 cf 02 c0       	mov    eax,ds:0xc002cf64
c00158d9:	0f b6 c0             	movzx  eax,al
c00158dc:	83 ec 0c             	sub    esp,0xc
c00158df:	50                   	push   eax
c00158e0:	e8 5f fc ff ff       	call   c0015544 <sendKeyToTerminal(unsigned char)>
c00158e5:	83 c4 10             	add    esp,0x10
c00158e8:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00158ec:	c7 05 64 cf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cf64,0x0
c00158f6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00158f9:	83 f0 01             	xor    eax,0x1
c00158fc:	84 c0                	test   al,al
c00158fe:	74 4c                	je     c001594c <sendKeyboardToken(KeyboardToken)+0x39c>
c0015900:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015903:	83 f0 01             	xor    eax,0x1
c0015906:	84 c0                	test   al,al
c0015908:	74 42                	je     c001594c <sendKeyboardToken(KeyboardToken)+0x39c>
c001590a:	a0 60 cc 02 c0       	mov    al,ds:0xc002cc60
c001590f:	83 f0 01             	xor    eax,0x1
c0015912:	84 c0                	test   al,al
c0015914:	74 36                	je     c001594c <sendKeyboardToken(KeyboardToken)+0x39c>
c0015916:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015919:	66 83 f8 1f          	cmp    ax,0x1f
c001591d:	76 09                	jbe    c0015928 <sendKeyboardToken(KeyboardToken)+0x378>
c001591f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015922:	66 83 f8 7e          	cmp    ax,0x7e
c0015926:	76 12                	jbe    c001593a <sendKeyboardToken(KeyboardToken)+0x38a>
c0015928:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001592b:	66 83 f8 0a          	cmp    ax,0xa
c001592f:	74 09                	je     c001593a <sendKeyboardToken(KeyboardToken)+0x38a>
c0015931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015934:	66 83 f8 08          	cmp    ax,0x8
c0015938:	75 12                	jne    c001594c <sendKeyboardToken(KeyboardToken)+0x39c>
c001593a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001593d:	0f b6 c0             	movzx  eax,al
c0015940:	83 ec 0c             	sub    esp,0xc
c0015943:	50                   	push   eax
c0015944:	e8 fb fb ff ff       	call   c0015544 <sendKeyToTerminal(unsigned char)>
c0015949:	83 c4 10             	add    esp,0x10
c001594c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c001594f:	83 f0 01             	xor    eax,0x1
c0015952:	84 c0                	test   al,al
c0015954:	74 4f                	je     c00159a5 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015956:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015959:	83 f0 01             	xor    eax,0x1
c001595c:	84 c0                	test   al,al
c001595e:	74 45                	je     c00159a5 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015960:	a0 60 cc 02 c0       	mov    al,ds:0xc002cc60
c0015965:	84 c0                	test   al,al
c0015967:	74 3c                	je     c00159a5 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001596c:	66 83 f8 3f          	cmp    ax,0x3f
c0015970:	76 33                	jbe    c00159a5 <sendKeyboardToken(KeyboardToken)+0x3f5>
c0015972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015975:	66 83 f8 7f          	cmp    ax,0x7f
c0015979:	77 2a                	ja     c00159a5 <sendKeyboardToken(KeyboardToken)+0x3f5>
c001597b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001597e:	88 c2                	mov    dl,al
c0015980:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015983:	66 83 f8 5f          	cmp    ax,0x5f
c0015987:	76 04                	jbe    c001598d <sendKeyboardToken(KeyboardToken)+0x3dd>
c0015989:	b0 20                	mov    al,0x20
c001598b:	eb 02                	jmp    c001598f <sendKeyboardToken(KeyboardToken)+0x3df>
c001598d:	b0 00                	mov    al,0x0
c001598f:	29 c2                	sub    edx,eax
c0015991:	88 d0                	mov    al,dl
c0015993:	83 e8 40             	sub    eax,0x40
c0015996:	0f b6 c0             	movzx  eax,al
c0015999:	83 ec 0c             	sub    esp,0xc
c001599c:	50                   	push   eax
c001599d:	e8 a2 fb ff ff       	call   c0015544 <sendKeyToTerminal(unsigned char)>
c00159a2:	83 c4 10             	add    esp,0x10
c00159a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159a8:	66 3d 00 03          	cmp    ax,0x300
c00159ac:	75 0f                	jne    c00159bd <sendKeyboardToken(KeyboardToken)+0x40d>
c00159ae:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00159b1:	83 f0 01             	xor    eax,0x1
c00159b4:	84 c0                	test   al,al
c00159b6:	74 05                	je     c00159bd <sendKeyboardToken(KeyboardToken)+0x40d>
c00159b8:	e8 78 b0 ff ff       	call   c0010a35 <doTerminalCycle()>
c00159bd:	90                   	nop
c00159be:	c9                   	leave  
c00159bf:	c3                   	ret    

c00159c0 <clearInternalKeybuffer(VgaText*)>:
c00159c0:	55                   	push   ebp
c00159c1:	89 e5                	mov    ebp,esp
c00159c3:	83 ec 08             	sub    esp,0x8
c00159c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00159c9:	05 34 11 00 00       	add    eax,0x1134
c00159ce:	83 ec 0c             	sub    esp,0xc
c00159d1:	50                   	push   eax
c00159d2:	e8 d1 ac fe ff       	call   c00006a8 <strlen>
c00159d7:	83 c4 10             	add    esp,0x10
c00159da:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00159dd:	81 c2 34 11 00 00    	add    edx,0x1134
c00159e3:	83 ec 04             	sub    esp,0x4
c00159e6:	50                   	push   eax
c00159e7:	6a 00                	push   0x0
c00159e9:	52                   	push   edx
c00159ea:	e8 9c ac fe ff       	call   c000068b <memset>
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	90                   	nop
c00159f3:	c9                   	leave  
c00159f4:	c3                   	ret    

c00159f5 <readKeyboard(VgaText*, char*, unsigned long)>:
c00159f5:	55                   	push   ebp
c00159f6:	89 e5                	mov    ebp,esp
c00159f8:	83 ec 18             	sub    esp,0x18
c00159fb:	fb                   	sti    
c00159fc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015a03:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015a07:	0f 84 8a 00 00 00    	je     c0015a97 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a10:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015a16:	84 c0                	test   al,al
c0015a18:	75 11                	jne    c0015a2b <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015a1a:	e8 4b 73 00 00       	call   c001cd6a <lockScheduler()>
c0015a1f:	e8 82 76 00 00       	call   c001d0a6 <schedule()>
c0015a24:	e8 43 73 00 00       	call   c001cd6c <unlockScheduler()>
c0015a29:	eb e2                	jmp    c0015a0d <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015a2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015a2e:	8d 50 01             	lea    edx,[eax+0x1]
c0015a31:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015a34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a37:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015a3d:	88 10                	mov    BYTE PTR [eax],dl
c0015a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a42:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015a48:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015a4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a4e:	05 34 11 00 00       	add    eax,0x1134
c0015a53:	83 ec 0c             	sub    esp,0xc
c0015a56:	50                   	push   eax
c0015a57:	e8 4c ac fe ff       	call   c00006a8 <strlen>
c0015a5c:	83 c4 10             	add    esp,0x10
c0015a5f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a62:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a68:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015a6b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015a6e:	81 c2 34 11 00 00    	add    edx,0x1134
c0015a74:	83 ec 04             	sub    esp,0x4
c0015a77:	50                   	push   eax
c0015a78:	51                   	push   ecx
c0015a79:	52                   	push   edx
c0015a7a:	e8 9e ab fe ff       	call   c000061d <memmove>
c0015a7f:	83 c4 10             	add    esp,0x10
c0015a82:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015a85:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015a88:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015a8c:	0f 85 71 ff ff ff    	jne    c0015a03 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015a92:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a95:	eb 03                	jmp    c0015a9a <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015a97:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9a:	c9                   	leave  
c0015a9b:	c3                   	ret    

c0015a9c <Keyboard::Keyboard(char const*)>:
c0015a9c:	83 ec 0c             	sub    esp,0xc
c0015a9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aa3:	83 ec 08             	sub    esp,0x8
c0015aa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015aaa:	50                   	push   eax
c0015aab:	e8 f0 e2 ff ff       	call   c0013da0 <Device::Device(char const*)>
c0015ab0:	83 c4 10             	add    esp,0x10
c0015ab3:	ba 54 99 02 c0       	mov    edx,0xc0029954
c0015ab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015abc:	89 10                	mov    DWORD PTR [eax],edx
c0015abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ac2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015acc:	c6 05 44 cb 02 c0 01 	mov    BYTE PTR ds:0xc002cb44,0x1
c0015ad3:	90                   	nop
c0015ad4:	83 c4 0c             	add    esp,0xc
c0015ad7:	c3                   	ret    

c0015ad8 <Keyboard::~Keyboard()>:
c0015ad8:	83 ec 0c             	sub    esp,0xc
c0015adb:	ba 54 99 02 c0       	mov    edx,0xc0029954
c0015ae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ae4:	89 10                	mov    DWORD PTR [eax],edx
c0015ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aea:	83 ec 0c             	sub    esp,0xc
c0015aed:	50                   	push   eax
c0015aee:	e8 8f df ff ff       	call   c0013a82 <Device::~Device()>
c0015af3:	83 c4 10             	add    esp,0x10
c0015af6:	90                   	nop
c0015af7:	83 c4 0c             	add    esp,0xc
c0015afa:	c3                   	ret    
c0015afb:	90                   	nop

c0015afc <Keyboard::~Keyboard()>:
c0015afc:	83 ec 0c             	sub    esp,0xc
c0015aff:	83 ec 0c             	sub    esp,0xc
c0015b02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b06:	e8 cd ff ff ff       	call   c0015ad8 <Keyboard::~Keyboard()>
c0015b0b:	83 c4 10             	add    esp,0x10
c0015b0e:	83 ec 08             	sub    esp,0x8
c0015b11:	68 5c 01 00 00       	push   0x15c
c0015b16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b1a:	e8 c2 cb ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0015b1f:	83 c4 10             	add    esp,0x10
c0015b22:	83 c4 0c             	add    esp,0xc
c0015b25:	c3                   	ret    

c0015b26 <LogicalDisk::close(int, int, void*)>:
c0015b26:	83 c8 ff             	or     eax,0xffffffff
c0015b29:	c3                   	ret    

c0015b2a <LogicalDisk::~LogicalDisk()>:
c0015b2a:	83 ec 0c             	sub    esp,0xc
c0015b2d:	ba 04 9a 02 c0       	mov    edx,0xc0029a04
c0015b32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b36:	89 10                	mov    DWORD PTR [eax],edx
c0015b38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b3c:	83 ec 0c             	sub    esp,0xc
c0015b3f:	50                   	push   eax
c0015b40:	e8 3d df ff ff       	call   c0013a82 <Device::~Device()>
c0015b45:	83 c4 10             	add    esp,0x10
c0015b48:	90                   	nop
c0015b49:	83 c4 0c             	add    esp,0xc
c0015b4c:	c3                   	ret    
c0015b4d:	90                   	nop

c0015b4e <LogicalDisk::~LogicalDisk()>:
c0015b4e:	83 ec 0c             	sub    esp,0xc
c0015b51:	83 ec 0c             	sub    esp,0xc
c0015b54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b58:	e8 cd ff ff ff       	call   c0015b2a <LogicalDisk::~LogicalDisk()>
c0015b5d:	83 c4 10             	add    esp,0x10
c0015b60:	83 ec 08             	sub    esp,0x8
c0015b63:	68 74 01 00 00       	push   0x174
c0015b68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b6c:	e8 70 cb ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0015b71:	83 c4 10             	add    esp,0x10
c0015b74:	83 c4 0c             	add    esp,0xc
c0015b77:	c3                   	ret    

c0015b78 <LogicalDisk::open(int, int, void*)>:
c0015b78:	83 ec 18             	sub    esp,0x18
c0015b7b:	68 80 99 02 c0       	push   0xc0029980
c0015b80:	e8 56 3d 00 00       	call   c00198db <Krnl::panic(char const*)>
c0015b85:	83 c8 ff             	or     eax,0xffffffff
c0015b88:	83 c4 1c             	add    esp,0x1c
c0015b8b:	c3                   	ret    

c0015b8c <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0015b8c:	53                   	push   ebx
c0015b8d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015b91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015b95:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b99:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0015b9f:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0015ba5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0015bab:	77 10                	ja     c0015bbd <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0015bad:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0015bb3:	89 d3                	mov    ebx,edx
c0015bb5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0015bbb:	72 05                	jb     c0015bc2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0015bbd:	83 c8 ff             	or     eax,0xffffffff
c0015bc0:	89 c2                	mov    edx,eax
c0015bc2:	5b                   	pop    ebx
c0015bc3:	c3                   	ret    

c0015bc4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0015bc4:	56                   	push   esi
c0015bc5:	83 c8 ff             	or     eax,0xffffffff
c0015bc8:	53                   	push   ebx
c0015bc9:	89 c2                	mov    edx,eax
c0015bcb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015bcf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015bd3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bd7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015bdd:	77 27                	ja     c0015c06 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bdf:	89 d8                	mov    eax,ebx
c0015be1:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015be7:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0015bed:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bf2:	89 c2                	mov    edx,eax
c0015bf4:	73 10                	jae    c0015c06 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015bf6:	89 c8                	mov    eax,ecx
c0015bf8:	89 da                	mov    edx,ebx
c0015bfa:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015c00:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015c06:	5b                   	pop    ebx
c0015c07:	5e                   	pop    esi
c0015c08:	c3                   	ret    
c0015c09:	90                   	nop

c0015c0a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015c0a:	83 ec 1c             	sub    esp,0x1c
c0015c0d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015c11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015c15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c19:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015c1d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c21:	89 04 24             	mov    DWORD PTR [esp],eax
c0015c24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015c28:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015c2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c30:	83 ec 08             	sub    esp,0x8
c0015c33:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c37:	50                   	push   eax
c0015c38:	e8 63 e1 ff ff       	call   c0013da0 <Device::Device(char const*)>
c0015c3d:	83 c4 10             	add    esp,0x10
c0015c40:	ba 04 9a 02 c0       	mov    edx,0xc0029a04
c0015c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c49:	89 10                	mov    DWORD PTR [eax],edx
c0015c4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c4f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c5a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015c61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c65:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0015c6f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015c77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015c7b:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0015c81:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0015c87:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015c8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0015c8e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015c92:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0015c98:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0015c9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ca6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0015cac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cb0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015cba:	90                   	nop
c0015cbb:	83 c4 1c             	add    esp,0x1c
c0015cbe:	c3                   	ret    
c0015cbf:	90                   	nop

c0015cc0 <LogicalDisk::assignDriveLetter()>:
c0015cc0:	55                   	push   ebp
c0015cc1:	57                   	push   edi
c0015cc2:	56                   	push   esi
c0015cc3:	53                   	push   ebx
c0015cc4:	83 ec 14             	sub    esp,0x14
c0015cc7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015ccb:	8b 3d 80 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf80
c0015cd1:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015cd7:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0015cdb:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015ce1:	8b 3d 84 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf84
c0015ce7:	3c 01                	cmp    al,0x1
c0015ce9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0015ced:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015cf1:	19 c0                	sbb    eax,eax
c0015cf3:	83 e0 02             	and    eax,0x2
c0015cf6:	83 c0 41             	add    eax,0x41
c0015cf9:	0f be e8             	movsx  ebp,al
c0015cfc:	3c 43                	cmp    al,0x43
c0015cfe:	75 10                	jne    c0015d10 <LogicalDisk::assignDriveLetter()+0x50>
c0015d00:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015d07:	75 5d                	jne    c0015d66 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d09:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0015d0e:	75 56                	jne    c0015d66 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d10:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015d13:	ba 01 00 00 00       	mov    edx,0x1
c0015d18:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0015d1c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015d20:	d3 e2                	shl    edx,cl
c0015d22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015d26:	89 d7                	mov    edi,edx
c0015d28:	89 d6                	mov    esi,edx
c0015d2a:	c1 ff 1f             	sar    edi,0x1f
c0015d2d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015d31:	21 f9                	and    ecx,edi
c0015d33:	09 d1                	or     ecx,edx
c0015d35:	75 2f                	jne    c0015d66 <LogicalDisk::assignDriveLetter()+0xa6>
c0015d37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015d3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015d3f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015d45:	09 f2                	or     edx,esi
c0015d47:	89 15 80 cf 02 c0    	mov    DWORD PTR ds:0xc002cf80,edx
c0015d4d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015d51:	09 fa                	or     edx,edi
c0015d53:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015d57:	89 15 84 cf 02 c0    	mov    DWORD PTR ds:0xc002cf84,edx
c0015d5d:	89 1c bd a0 cf 02 c0 	mov    DWORD PTR [edi*4-0x3ffd3060],ebx
c0015d64:	eb 08                	jmp    c0015d6e <LogicalDisk::assignDriveLetter()+0xae>
c0015d66:	45                   	inc    ebp
c0015d67:	40                   	inc    eax
c0015d68:	3c 5b                	cmp    al,0x5b
c0015d6a:	75 90                	jne    c0015cfc <LogicalDisk::assignDriveLetter()+0x3c>
c0015d6c:	31 c0                	xor    eax,eax
c0015d6e:	83 c4 14             	add    esp,0x14
c0015d71:	5b                   	pop    ebx
c0015d72:	5e                   	pop    esi
c0015d73:	5f                   	pop    edi
c0015d74:	5d                   	pop    ebp
c0015d75:	c3                   	ret    

c0015d76 <LogicalDisk::mount()>:
c0015d76:	56                   	push   esi
c0015d77:	53                   	push   ebx
c0015d78:	51                   	push   ecx
c0015d79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d7d:	8b 1d 08 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb08
c0015d83:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0015d8d:	85 db                	test   ebx,ebx
c0015d8f:	74 50                	je     c0015de1 <LogicalDisk::mount()+0x6b>
c0015d91:	e8 bf 6f 00 00       	call   c001cd55 <getIRQNestingLevel()>
c0015d96:	52                   	push   edx
c0015d97:	52                   	push   edx
c0015d98:	50                   	push   eax
c0015d99:	68 a4 99 02 c0       	push   0xc00299a4
c0015d9e:	e8 1e ca ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0015da3:	83 c4 0c             	add    esp,0xc
c0015da6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0015dad:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015daf:	83 e8 41             	sub    eax,0x41
c0015db2:	50                   	push   eax
c0015db3:	56                   	push   esi
c0015db4:	53                   	push   ebx
c0015db5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015db8:	83 c4 10             	add    esp,0x10
c0015dbb:	84 c0                	test   al,al
c0015dbd:	74 08                	je     c0015dc7 <LogicalDisk::mount()+0x51>
c0015dbf:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0015dc5:	eb 1c                	jmp    c0015de3 <LogicalDisk::mount()+0x6d>
c0015dc7:	e8 89 6f 00 00       	call   c001cd55 <getIRQNestingLevel()>
c0015dcc:	51                   	push   ecx
c0015dcd:	51                   	push   ecx
c0015dce:	50                   	push   eax
c0015dcf:	68 bf 99 02 c0       	push   0xc00299bf
c0015dd4:	e8 e8 c9 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0015dd9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ddc:	83 c4 10             	add    esp,0x10
c0015ddf:	eb ac                	jmp    c0015d8d <LogicalDisk::mount()+0x17>
c0015de1:	31 c0                	xor    eax,eax
c0015de3:	5a                   	pop    edx
c0015de4:	5b                   	pop    ebx
c0015de5:	5e                   	pop    esi
c0015de6:	c3                   	ret    
c0015de7:	90                   	nop

c0015de8 <LogicalDisk::unmount()>:
c0015de8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015dec:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015df6:	c3                   	ret    
c0015df7:	90                   	nop

c0015df8 <LogicalDisk::unassignDriveLetter()>:
c0015df8:	57                   	push   edi
c0015df9:	56                   	push   esi
c0015dfa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015dfe:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015e05:	84 c9                	test   cl,cl
c0015e07:	75 0f                	jne    c0015e18 <LogicalDisk::unassignDriveLetter()+0x20>
c0015e09:	c7 44 24 0c da 99 02 c0 	mov    DWORD PTR [esp+0xc],0xc00299da
c0015e11:	5e                   	pop    esi
c0015e12:	5f                   	pop    edi
c0015e13:	e9 c3 3a 00 00       	jmp    c00198db <Krnl::panic(char const*)>
c0015e18:	83 e9 41             	sub    ecx,0x41
c0015e1b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015e22:	b8 01 00 00 00       	mov    eax,0x1
c0015e27:	c7 04 8d a0 cf 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd3060],0x0
c0015e32:	d3 e0                	shl    eax,cl
c0015e34:	89 c7                	mov    edi,eax
c0015e36:	f7 d0                	not    eax
c0015e38:	c1 ff 1f             	sar    edi,0x1f
c0015e3b:	21 05 80 cf 02 c0    	and    DWORD PTR ds:0xc002cf80,eax
c0015e41:	89 fe                	mov    esi,edi
c0015e43:	f7 d6                	not    esi
c0015e45:	21 35 84 cf 02 c0    	and    DWORD PTR ds:0xc002cf84,esi
c0015e4b:	5e                   	pop    esi
c0015e4c:	5f                   	pop    edi
c0015e4d:	c3                   	ret    

c0015e4e <LogicalDisk::read(unsigned long long, int, void*)>:
c0015e4e:	57                   	push   edi
c0015e4f:	56                   	push   esi
c0015e50:	53                   	push   ebx
c0015e51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015e55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015e59:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015e5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e61:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015e67:	77 41                	ja     c0015eaa <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015e69:	99                   	cdq    
c0015e6a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015e70:	01 c8                	add    eax,ecx
c0015e72:	11 da                	adc    edx,ebx
c0015e74:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015e7a:	19 d7                	sbb    edi,edx
c0015e7c:	72 33                	jb     c0015eb1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0015e7e:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015e84:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015e8a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015e8e:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015e92:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015e98:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e9e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ea2:	5b                   	pop    ebx
c0015ea3:	5e                   	pop    esi
c0015ea4:	5f                   	pop    edi
c0015ea5:	e9 f8 09 00 00       	jmp    c00168a2 <VCache::read(unsigned long long, int, void*)>
c0015eaa:	b8 05 00 00 00       	mov    eax,0x5
c0015eaf:	eb 05                	jmp    c0015eb6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0015eb1:	b8 07 00 00 00       	mov    eax,0x7
c0015eb6:	5b                   	pop    ebx
c0015eb7:	5e                   	pop    esi
c0015eb8:	5f                   	pop    edi
c0015eb9:	c3                   	ret    

c0015eba <LogicalDisk::write(unsigned long long, int, void*)>:
c0015eba:	57                   	push   edi
c0015ebb:	56                   	push   esi
c0015ebc:	53                   	push   ebx
c0015ebd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015ec1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ec5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0015ec9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ecd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015ed3:	77 41                	ja     c0015f16 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015ed5:	99                   	cdq    
c0015ed6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0015edc:	01 c8                	add    eax,ecx
c0015ede:	11 da                	adc    edx,ebx
c0015ee0:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015ee6:	19 d7                	sbb    edi,edx
c0015ee8:	72 33                	jb     c0015f1d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0015eea:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015ef0:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015ef6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0015efa:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0015efe:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015f04:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015f0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015f0e:	5b                   	pop    ebx
c0015f0f:	5e                   	pop    esi
c0015f10:	5f                   	pop    edi
c0015f11:	e9 a8 08 00 00       	jmp    c00167be <VCache::write(unsigned long long, int, void*)>
c0015f16:	b8 05 00 00 00       	mov    eax,0x5
c0015f1b:	eb 05                	jmp    c0015f22 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c0015f1d:	b8 07 00 00 00       	mov    eax,0x7
c0015f22:	5b                   	pop    ebx
c0015f23:	5e                   	pop    esi
c0015f24:	5f                   	pop    edi
c0015f25:	c3                   	ret    

c0015f26 <Mouse::Mouse(char const*)>:
c0015f26:	83 ec 0c             	sub    esp,0xc
c0015f29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f2d:	83 ec 08             	sub    esp,0x8
c0015f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f34:	50                   	push   eax
c0015f35:	e8 66 de ff ff       	call   c0013da0 <Device::Device(char const*)>
c0015f3a:	83 c4 10             	add    esp,0x10
c0015f3d:	ba 30 9a 02 c0       	mov    edx,0xc0029a30
c0015f42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f46:	89 10                	mov    DWORD PTR [eax],edx
c0015f48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f4c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015f56:	90                   	nop
c0015f57:	83 c4 0c             	add    esp,0xc
c0015f5a:	c3                   	ret    
c0015f5b:	90                   	nop

c0015f5c <Mouse::~Mouse()>:
c0015f5c:	83 ec 0c             	sub    esp,0xc
c0015f5f:	ba 30 9a 02 c0       	mov    edx,0xc0029a30
c0015f64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f68:	89 10                	mov    DWORD PTR [eax],edx
c0015f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f6e:	83 ec 0c             	sub    esp,0xc
c0015f71:	50                   	push   eax
c0015f72:	e8 0b db ff ff       	call   c0013a82 <Device::~Device()>
c0015f77:	83 c4 10             	add    esp,0x10
c0015f7a:	90                   	nop
c0015f7b:	83 c4 0c             	add    esp,0xc
c0015f7e:	c3                   	ret    
c0015f7f:	90                   	nop

c0015f80 <Mouse::~Mouse()>:
c0015f80:	83 ec 0c             	sub    esp,0xc
c0015f83:	83 ec 0c             	sub    esp,0xc
c0015f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f8a:	e8 cd ff ff ff       	call   c0015f5c <Mouse::~Mouse()>
c0015f8f:	83 c4 10             	add    esp,0x10
c0015f92:	83 ec 08             	sub    esp,0x8
c0015f95:	68 58 01 00 00       	push   0x158
c0015f9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015f9e:	e8 3e c7 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0015fa3:	83 c4 10             	add    esp,0x10
c0015fa6:	83 c4 0c             	add    esp,0xc
c0015fa9:	c3                   	ret    

c0015faa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0015faa:	55                   	push   ebp
c0015fab:	57                   	push   edi
c0015fac:	56                   	push   esi
c0015fad:	53                   	push   ebx
c0015fae:	81 ec 28 01 00 00    	sub    esp,0x128
c0015fb4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015fbb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015fc2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0015fc9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015fd0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015fd4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015fd8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015fdf:	e8 b8 de ff ff       	call   c0013e9c <Device::getName()>
c0015fe4:	5a                   	pop    edx
c0015fe5:	59                   	pop    ecx
c0015fe6:	50                   	push   eax
c0015fe7:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0015feb:	55                   	push   ebp
c0015fec:	e8 39 a7 fe ff       	call   c000072a <strcpy>
c0015ff1:	5b                   	pop    ebx
c0015ff2:	58                   	pop    eax
c0015ff3:	68 54 9a 02 c0       	push   0xc0029a54
c0015ff8:	55                   	push   ebp
c0015ff9:	e8 e3 a7 fe ff       	call   c00007e1 <strcat>
c0015ffe:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016005:	e8 ca 94 ff ff       	call   c000f4d4 <malloc>
c001600a:	83 c4 0c             	add    esp,0xc
c001600d:	89 c3                	mov    ebx,eax
c001600f:	57                   	push   edi
c0016010:	56                   	push   esi
c0016011:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016015:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016019:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0016020:	55                   	push   ebp
c0016021:	50                   	push   eax
c0016022:	e8 e3 fb ff ff       	call   c0015c0a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016027:	83 c4 14             	add    esp,0x14
c001602a:	53                   	push   ebx
c001602b:	e8 90 fc ff ff       	call   c0015cc0 <LogicalDisk::assignDriveLetter()>
c0016030:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016033:	e8 3e fd ff ff       	call   c0015d76 <LogicalDisk::mount()>
c0016038:	58                   	pop    eax
c0016039:	5a                   	pop    edx
c001603a:	53                   	push   ebx
c001603b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016042:	e8 69 db ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c0016047:	81 c4 2c 01 00 00    	add    esp,0x12c
c001604d:	5b                   	pop    ebx
c001604e:	5e                   	pop    esi
c001604f:	5f                   	pop    edi
c0016050:	5d                   	pop    ebp
c0016051:	c3                   	ret    

c0016052 <createPartitionsForDisk(PhysicalDisk*)>:
c0016052:	55                   	push   ebp
c0016053:	57                   	push   edi
c0016054:	56                   	push   esi
c0016055:	53                   	push   ebx
c0016056:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001605c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016063:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016069:	3d 00 02 00 00       	cmp    eax,0x200
c001606e:	74 27                	je     c0016097 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016070:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016076:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001607c:	83 ec 10             	sub    esp,0x10
c001607f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016083:	99                   	cdq    
c0016084:	c1 e6 0a             	shl    esi,0xa
c0016087:	52                   	push   edx
c0016088:	89 fd                	mov    ebp,edi
c001608a:	50                   	push   eax
c001608b:	55                   	push   ebp
c001608c:	56                   	push   esi
c001608d:	e8 5a f3 00 00       	call   c00253ec <__udivdi3>
c0016092:	e9 b1 00 00 00       	jmp    c0016148 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016097:	83 ec 0c             	sub    esp,0xc
c001609a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001609c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00160a0:	56                   	push   esi
c00160a1:	6a 01                	push   0x1
c00160a3:	6a 00                	push   0x0
c00160a5:	6a 00                	push   0x0
c00160a7:	53                   	push   ebx
c00160a8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00160ab:	83 c4 20             	add    esp,0x20
c00160ae:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00160b6:	75 0a                	jne    c00160c2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00160b8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00160c0:	74 2c                	je     c00160ee <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00160c2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00160c8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00160ce:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00160d4:	83 ec 10             	sub    esp,0x10
c00160d7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00160db:	89 f7                	mov    edi,esi
c00160dd:	c1 e0 0a             	shl    eax,0xa
c00160e0:	c1 ff 1f             	sar    edi,0x1f
c00160e3:	57                   	push   edi
c00160e4:	56                   	push   esi
c00160e5:	52                   	push   edx
c00160e6:	50                   	push   eax
c00160e7:	e8 00 f3 00 00       	call   c00253ec <__udivdi3>
c00160ec:	eb 5a                	jmp    c0016148 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00160ee:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00160f5:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00160fc:	83 e1 7f             	and    ecx,0x7f
c00160ff:	83 e0 7f             	and    eax,0x7f
c0016102:	01 c1                	add    ecx,eax
c0016104:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001610b:	83 e0 7f             	and    eax,0x7f
c001610e:	01 c1                	add    ecx,eax
c0016110:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016117:	83 e0 7f             	and    eax,0x7f
c001611a:	00 c1                	add    cl,al
c001611c:	74 41                	je     c001615f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001611e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016124:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001612a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016130:	83 ec 10             	sub    esp,0x10
c0016133:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016137:	89 f7                	mov    edi,esi
c0016139:	c1 e0 0a             	shl    eax,0xa
c001613c:	c1 ff 1f             	sar    edi,0x1f
c001613f:	57                   	push   edi
c0016140:	56                   	push   esi
c0016141:	52                   	push   edx
c0016142:	50                   	push   eax
c0016143:	e8 a4 f2 00 00       	call   c00253ec <__udivdi3>
c0016148:	83 c4 14             	add    esp,0x14
c001614b:	52                   	push   edx
c001614c:	50                   	push   eax
c001614d:	6a 00                	push   0x0
c001614f:	6a 00                	push   0x0
c0016151:	53                   	push   ebx
c0016152:	e8 53 fe ff ff       	call   c0015faa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016157:	83 c4 20             	add    esp,0x20
c001615a:	e9 79 01 00 00       	jmp    c00162d8 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001615f:	89 f0                	mov    eax,esi
c0016161:	31 f6                	xor    esi,esi
c0016163:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001616a:	75 02                	jne    c001616e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001616c:	89 f1                	mov    ecx,esi
c001616e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016175:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001617c:	c1 e2 08             	shl    edx,0x8
c001617f:	c1 e7 10             	shl    edi,0x10
c0016182:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001618a:	09 fa                	or     edx,edi
c001618c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016194:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001619b:	83 c0 10             	add    eax,0x10
c001619e:	09 fa                	or     edx,edi
c00161a0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00161a7:	c1 e7 18             	shl    edi,0x18
c00161aa:	09 fa                	or     edx,edi
c00161ac:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00161b3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00161b7:	c1 e7 10             	shl    edi,0x10
c00161ba:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00161c1:	c1 e2 08             	shl    edx,0x8
c00161c4:	09 fa                	or     edx,edi
c00161c6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00161cd:	09 fa                	or     edx,edi
c00161cf:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00161d6:	c1 e7 18             	shl    edi,0x18
c00161d9:	09 fa                	or     edx,edi
c00161db:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00161df:	46                   	inc    esi
c00161e0:	83 fe 04             	cmp    esi,0x4
c00161e3:	0f 85 7a ff ff ff    	jne    c0016163 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00161e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161ed:	83 f0 01             	xor    eax,0x1
c00161f0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00161f4:	75 57                	jne    c001624d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00161f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00161fa:	83 f0 01             	xor    eax,0x1
c00161fd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016201:	75 4a                	jne    c001624d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016203:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001620f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016217:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001621d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016223:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016229:	0f a4 c2 0a          	shld   edx,eax,0xa
c001622d:	89 f7                	mov    edi,esi
c001622f:	c1 e0 0a             	shl    eax,0xa
c0016232:	c1 ff 1f             	sar    edi,0x1f
c0016235:	57                   	push   edi
c0016236:	56                   	push   esi
c0016237:	52                   	push   edx
c0016238:	50                   	push   eax
c0016239:	e8 ae f1 00 00       	call   c00253ec <__udivdi3>
c001623e:	83 c4 10             	add    esp,0x10
c0016241:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016245:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016249:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001624d:	84 c9                	test   cl,cl
c001624f:	74 53                	je     c00162a4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016251:	0f b6 c9             	movzx  ecx,cl
c0016254:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016258:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001625c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016260:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016264:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016268:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001626c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016270:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016274:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016278:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001627c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016280:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016284:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016288:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001628c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016290:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016294:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016298:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001629c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00162a0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00162a4:	31 ed                	xor    ebp,ebp
c00162a6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00162aa:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00162ae:	89 f8                	mov    eax,edi
c00162b0:	09 f0                	or     eax,esi
c00162b2:	74 1e                	je     c00162d2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162b4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00162b8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00162bc:	89 d1                	mov    ecx,edx
c00162be:	09 c1                	or     ecx,eax
c00162c0:	74 10                	je     c00162d2 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00162c2:	83 ec 0c             	sub    esp,0xc
c00162c5:	57                   	push   edi
c00162c6:	56                   	push   esi
c00162c7:	52                   	push   edx
c00162c8:	50                   	push   eax
c00162c9:	53                   	push   ebx
c00162ca:	e8 db fc ff ff       	call   c0015faa <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00162cf:	83 c4 20             	add    esp,0x20
c00162d2:	45                   	inc    ebp
c00162d3:	83 fd 04             	cmp    ebp,0x4
c00162d6:	75 ce                	jne    c00162a6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00162d8:	81 c4 5c 02 00 00    	add    esp,0x25c
c00162de:	5b                   	pop    ebx
c00162df:	5e                   	pop    esi
c00162e0:	5f                   	pop    edi
c00162e1:	5d                   	pop    ebp
c00162e2:	c3                   	ret    
c00162e3:	90                   	nop

c00162e4 <Serial::Serial(char const*)>:
c00162e4:	83 ec 0c             	sub    esp,0xc
c00162e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00162eb:	83 ec 08             	sub    esp,0x8
c00162ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00162f2:	50                   	push   eax
c00162f3:	e8 a8 da ff ff       	call   c0013da0 <Device::Device(char const*)>
c00162f8:	83 c4 10             	add    esp,0x10
c00162fb:	ba 68 9a 02 c0       	mov    edx,0xc0029a68
c0016300:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016304:	89 10                	mov    DWORD PTR [eax],edx
c0016306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001630a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016314:	90                   	nop
c0016315:	83 c4 0c             	add    esp,0xc
c0016318:	c3                   	ret    
c0016319:	90                   	nop

c001631a <Serial::~Serial()>:
c001631a:	83 ec 0c             	sub    esp,0xc
c001631d:	ba 68 9a 02 c0       	mov    edx,0xc0029a68
c0016322:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016326:	89 10                	mov    DWORD PTR [eax],edx
c0016328:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001632c:	83 ec 0c             	sub    esp,0xc
c001632f:	50                   	push   eax
c0016330:	e8 4d d7 ff ff       	call   c0013a82 <Device::~Device()>
c0016335:	83 c4 10             	add    esp,0x10
c0016338:	90                   	nop
c0016339:	83 c4 0c             	add    esp,0xc
c001633c:	c3                   	ret    
c001633d:	90                   	nop

c001633e <Serial::~Serial()>:
c001633e:	83 ec 0c             	sub    esp,0xc
c0016341:	83 ec 0c             	sub    esp,0xc
c0016344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016348:	e8 cd ff ff ff       	call   c001631a <Serial::~Serial()>
c001634d:	83 c4 10             	add    esp,0x10
c0016350:	83 ec 08             	sub    esp,0x8
c0016353:	68 58 01 00 00       	push   0x158
c0016358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001635c:	e8 80 c3 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0016361:	83 c4 10             	add    esp,0x10
c0016364:	83 c4 0c             	add    esp,0xc
c0016367:	c3                   	ret    

c0016368 <Timer::Timer(char const*)>:
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001636f:	83 ec 08             	sub    esp,0x8
c0016372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016376:	50                   	push   eax
c0016377:	e8 24 da ff ff       	call   c0013da0 <Device::Device(char const*)>
c001637c:	83 c4 10             	add    esp,0x10
c001637f:	ba ac 9a 02 c0       	mov    edx,0xc0029aac
c0016384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016388:	89 10                	mov    DWORD PTR [eax],edx
c001638a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001638e:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016398:	90                   	nop
c0016399:	83 c4 0c             	add    esp,0xc
c001639c:	c3                   	ret    
c001639d:	90                   	nop

c001639e <Timer::~Timer()>:
c001639e:	83 ec 0c             	sub    esp,0xc
c00163a1:	ba ac 9a 02 c0       	mov    edx,0xc0029aac
c00163a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163aa:	89 10                	mov    DWORD PTR [eax],edx
c00163ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163b0:	83 ec 0c             	sub    esp,0xc
c00163b3:	50                   	push   eax
c00163b4:	e8 c9 d6 ff ff       	call   c0013a82 <Device::~Device()>
c00163b9:	83 c4 10             	add    esp,0x10
c00163bc:	90                   	nop
c00163bd:	83 c4 0c             	add    esp,0xc
c00163c0:	c3                   	ret    
c00163c1:	90                   	nop

c00163c2 <Timer::~Timer()>:
c00163c2:	83 ec 0c             	sub    esp,0xc
c00163c5:	83 ec 0c             	sub    esp,0xc
c00163c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163cc:	e8 cd ff ff ff       	call   c001639e <Timer::~Timer()>
c00163d1:	83 c4 10             	add    esp,0x10
c00163d4:	83 ec 08             	sub    esp,0x8
c00163d7:	68 5c 01 00 00       	push   0x15c
c00163dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163e0:	e8 fc c2 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00163e5:	83 c4 10             	add    esp,0x10
c00163e8:	83 c4 0c             	add    esp,0xc
c00163eb:	c3                   	ret    

c00163ec <Timer::read()>:
c00163ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163f0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163f6:	c3                   	ret    

c00163f7 <timerHandler(unsigned long long)>:
c00163f7:	55                   	push   ebp
c00163f8:	57                   	push   edi
c00163f9:	56                   	push   esi
c00163fa:	53                   	push   ebx
c00163fb:	83 ec 0c             	sub    esp,0xc
c00163fe:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016402:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016406:	01 35 10 d0 02 c0    	add    DWORD PTR ds:0xc002d010,esi
c001640c:	11 3d 14 d0 02 c0    	adc    DWORD PTR ds:0xc002d014,edi
c0016412:	80 3d 8d c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c98d,0x0
c0016419:	0f 84 07 01 00 00    	je     c0016526 <timerHandler(unsigned long long)+0x12f>
c001641f:	e8 6d 69 00 00       	call   c001cd91 <lockStuff()>
c0016424:	83 ec 0c             	sub    esp,0xc
c0016427:	68 bc de 02 c0       	push   0xc002debc
c001642c:	e8 2d 10 01 00       	call   c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016431:	c7 04 24 bc de 02 c0 	mov    DWORD PTR [esp],0xc002debc
c0016438:	89 c3                	mov    ebx,eax
c001643a:	e8 27 10 01 00       	call   c0027466 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001643f:	83 c4 10             	add    esp,0x10
c0016442:	84 c0                	test   al,al
c0016444:	74 60                	je     c00164a6 <timerHandler(unsigned long long)+0xaf>
c0016446:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001644c:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c001644f:	85 c0                	test   eax,eax
c0016451:	0f 85 91 00 00 00    	jne    c00164e8 <timerHandler(unsigned long long)+0xf1>
c0016457:	e9 be 00 00 00       	jmp    c001651a <timerHandler(unsigned long long)+0x123>
c001645c:	83 ec 0c             	sub    esp,0xc
c001645f:	55                   	push   ebp
c0016460:	e8 1d 6f 00 00       	call   c001d382 <unblockTask(ThreadControlBlock*)>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	39 eb                	cmp    ebx,ebp
c001646a:	75 12                	jne    c001647e <timerHandler(unsigned long long)+0x87>
c001646c:	83 ec 0c             	sub    esp,0xc
c001646f:	68 bc de 02 c0       	push   0xc002debc
c0016474:	e8 e5 0f 01 00       	call   c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016479:	89 c3                	mov    ebx,eax
c001647b:	83 c4 10             	add    esp,0x10
c001647e:	83 ec 0c             	sub    esp,0xc
c0016481:	68 bc de 02 c0       	push   0xc002debc
c0016486:	e8 db 0f 01 00       	call   c0027466 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001648b:	83 c4 10             	add    esp,0x10
c001648e:	84 c0                	test   al,al
c0016490:	75 b4                	jne    c0016446 <timerHandler(unsigned long long)+0x4f>
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	68 bc de 02 c0       	push   0xc002debc
c001649a:	e8 bf 0f 01 00       	call   c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001649f:	83 c4 10             	add    esp,0x10
c00164a2:	39 d8                	cmp    eax,ebx
c00164a4:	74 a0                	je     c0016446 <timerHandler(unsigned long long)+0x4f>
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	68 bc de 02 c0       	push   0xc002debc
c00164ae:	e8 ab 0f 01 00       	call   c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00164b3:	c7 04 24 bc de 02 c0 	mov    DWORD PTR [esp],0xc002debc
c00164ba:	89 c5                	mov    ebp,eax
c00164bc:	e8 c1 0f 01 00       	call   c0027482 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00164c1:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00164c4:	83 c4 10             	add    esp,0x10
c00164c7:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00164ca:	39 15 10 d0 02 c0    	cmp    DWORD PTR ds:0xc002d010,edx
c00164d0:	a1 14 d0 02 c0       	mov    eax,ds:0xc002d014
c00164d5:	19 c8                	sbb    eax,ecx
c00164d7:	73 83                	jae    c001645c <timerHandler(unsigned long long)+0x65>
c00164d9:	50                   	push   eax
c00164da:	50                   	push   eax
c00164db:	55                   	push   ebp
c00164dc:	68 bc de 02 c0       	push   0xc002debc
c00164e1:	e8 4a 10 01 00       	call   c0027530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00164e6:	eb 93                	jmp    c001647b <timerHandler(unsigned long long)+0x84>
c00164e8:	80 3d 8c c9 02 c0 00 	cmp    BYTE PTR ds:0xc002c98c,0x0
c00164ef:	74 29                	je     c001651a <timerHandler(unsigned long long)+0x123>
c00164f1:	39 c6                	cmp    esi,eax
c00164f3:	bb 00 00 00 00       	mov    ebx,0x0
c00164f8:	19 df                	sbb    edi,ebx
c00164fa:	72 19                	jb     c0016515 <timerHandler(unsigned long long)+0x11e>
c00164fc:	e8 69 68 00 00       	call   c001cd6a <lockScheduler()>
c0016501:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016506:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016509:	e8 98 6b 00 00       	call   c001d0a6 <schedule()>
c001650e:	e8 59 68 00 00       	call   c001cd6c <unlockScheduler()>
c0016513:	eb 05                	jmp    c001651a <timerHandler(unsigned long long)+0x123>
c0016515:	29 f0                	sub    eax,esi
c0016517:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c001651a:	83 c4 0c             	add    esp,0xc
c001651d:	5b                   	pop    ebx
c001651e:	5e                   	pop    esi
c001651f:	5f                   	pop    edi
c0016520:	5d                   	pop    ebp
c0016521:	e9 05 6c 00 00       	jmp    c001d12b <unlockStuff()>
c0016526:	83 c4 0c             	add    esp,0xc
c0016529:	5b                   	pop    ebx
c001652a:	5e                   	pop    esi
c001652b:	5f                   	pop    edi
c001652c:	5d                   	pop    ebp
c001652d:	c3                   	ret    

c001652e <setupTimer(int)>:
c001652e:	57                   	push   edi
c001652f:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0016534:	56                   	push   esi
c0016535:	53                   	push   ebx
c0016536:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001653a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016540:	83 ec 0c             	sub    esp,0xc
c0016543:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016549:	e8 4e d9 ff ff       	call   c0013e9c <Device::getName()>
c001654e:	83 c4 10             	add    esp,0x10
c0016551:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016554:	0f 85 8d 00 00 00    	jne    c00165e7 <setupTimer(int)+0xb9>
c001655a:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001655f:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016566:	74 7f                	je     c00165e7 <setupTimer(int)+0xb9>
c0016568:	83 ec 0c             	sub    esp,0xc
c001656b:	68 5c 01 00 00       	push   0x15c
c0016570:	e8 5f 8f ff ff       	call   c000f4d4 <malloc>
c0016575:	89 04 24             	mov    DWORD PTR [esp],eax
c0016578:	89 c3                	mov    ebx,eax
c001657a:	e8 51 ea 00 00       	call   c0024fd0 <PIT::PIT()>
c001657f:	59                   	pop    ecx
c0016580:	5f                   	pop    edi
c0016581:	53                   	push   ebx
c0016582:	ff 35 88 c9 02 c0    	push   DWORD PTR ds:0xc002c988
c0016588:	e8 23 d6 ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c001658d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001658f:	6a 00                	push   0x0
c0016591:	6a 00                	push   0x0
c0016593:	56                   	push   esi
c0016594:	53                   	push   ebx
c0016595:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016598:	83 c4 14             	add    esp,0x14
c001659b:	68 60 01 00 00       	push   0x160
c00165a0:	e8 2f 8f ff ff       	call   c000f4d4 <malloc>
c00165a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00165a8:	89 c7                	mov    edi,eax
c00165aa:	e8 d1 e8 00 00       	call   c0024e80 <APICTimer::APICTimer()>
c00165af:	6a 00                	push   0x0
c00165b1:	6a 00                	push   0x0
c00165b3:	56                   	push   esi
c00165b4:	57                   	push   edi
c00165b5:	e8 c8 e7 00 00       	call   c0024d82 <APICTimer::open(int, int, void*)>
c00165ba:	83 c4 20             	add    esp,0x20
c00165bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165bf:	6a 00                	push   0x0
c00165c1:	6a 00                	push   0x0
c00165c3:	6a 00                	push   0x0
c00165c5:	53                   	push   ebx
c00165c6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00165c9:	58                   	pop    eax
c00165ca:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00165cf:	5a                   	pop    edx
c00165d0:	57                   	push   edi
c00165d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00165d7:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00165dd:	e8 ce d5 ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c00165e2:	83 c4 10             	add    esp,0x10
c00165e5:	eb 33                	jmp    c001661a <setupTimer(int)+0xec>
c00165e7:	83 ec 0c             	sub    esp,0xc
c00165ea:	68 5c 01 00 00       	push   0x15c
c00165ef:	e8 e0 8e ff ff       	call   c000f4d4 <malloc>
c00165f4:	89 04 24             	mov    DWORD PTR [esp],eax
c00165f7:	89 c3                	mov    ebx,eax
c00165f9:	e8 d2 e9 00 00       	call   c0024fd0 <PIT::PIT()>
c00165fe:	58                   	pop    eax
c00165ff:	5a                   	pop    edx
c0016600:	53                   	push   ebx
c0016601:	ff 35 88 c9 02 c0    	push   DWORD PTR ds:0xc002c988
c0016607:	e8 a4 d5 ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c001660c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001660e:	6a 00                	push   0x0
c0016610:	6a 00                	push   0x0
c0016612:	56                   	push   esi
c0016613:	53                   	push   ebx
c0016614:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016617:	83 c4 20             	add    esp,0x20
c001661a:	89 d8                	mov    eax,ebx
c001661c:	5b                   	pop    ebx
c001661d:	5e                   	pop    esi
c001661e:	5f                   	pop    edi
c001661f:	c3                   	ret    

c0016620 <VCache::VCache(PhysicalDisk*)>:
c0016620:	53                   	push   ebx
c0016621:	83 ec 18             	sub    esp,0x18
c0016624:	ba dc 9a 02 c0       	mov    edx,0xc0029adc
c0016629:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001662d:	89 10                	mov    DWORD PTR [eax],edx
c001662f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016633:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001663a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001663e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016649:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016650:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016657:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001665b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016662:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001666d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016678:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001667c:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016684:	83 ec 0c             	sub    esp,0xc
c0016687:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001668b:	e8 44 8e ff ff       	call   c000f4d4 <malloc>
c0016690:	83 c4 10             	add    esp,0x10
c0016693:	89 c3                	mov    ebx,eax
c0016695:	83 ec 0c             	sub    esp,0xc
c0016698:	53                   	push   ebx
c0016699:	e8 ec 67 00 00       	call   c001ce8a <Mutex::Mutex()>
c001669e:	83 c4 10             	add    esp,0x10
c00166a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166a5:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00166a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00166b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00166b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b7:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00166be:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166c2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00166c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166cc:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00166cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166d3:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00166d9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00166df:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00166e3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00166e6:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00166e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166ed:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00166f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00166f5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00166fb:	c1 e0 06             	shl    eax,0x6
c00166fe:	83 ec 0c             	sub    esp,0xc
c0016701:	50                   	push   eax
c0016702:	e8 cd 8d ff ff       	call   c000f4d4 <malloc>
c0016707:	83 c4 10             	add    esp,0x10
c001670a:	89 c2                	mov    edx,eax
c001670c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016710:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016713:	90                   	nop
c0016714:	83 c4 18             	add    esp,0x18
c0016717:	5b                   	pop    ebx
c0016718:	c3                   	ret    
c0016719:	90                   	nop

c001671a <VCache::writeWriteBuffer()>:
c001671a:	53                   	push   ebx
c001671b:	83 ec 14             	sub    esp,0x14
c001671e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016722:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016725:	8b 10                	mov    edx,DWORD PTR [eax]
c0016727:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001672a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001672d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016730:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016733:	50                   	push   eax
c0016734:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016737:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001673e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016745:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016749:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016750:	83 c4 28             	add    esp,0x28
c0016753:	5b                   	pop    ebx
c0016754:	c3                   	ret    
c0016755:	90                   	nop

c0016756 <VCache::~VCache()>:
c0016756:	83 ec 0c             	sub    esp,0xc
c0016759:	ba dc 9a 02 c0       	mov    edx,0xc0029adc
c001675e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016762:	89 10                	mov    DWORD PTR [eax],edx
c0016764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016768:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001676b:	84 c0                	test   al,al
c001676d:	74 0f                	je     c001677e <VCache::~VCache()+0x28>
c001676f:	83 ec 0c             	sub    esp,0xc
c0016772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016776:	e8 9f ff ff ff       	call   c001671a <VCache::writeWriteBuffer()>
c001677b:	83 c4 10             	add    esp,0x10
c001677e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016782:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016785:	83 ec 0c             	sub    esp,0xc
c0016788:	50                   	push   eax
c0016789:	e8 56 8d ff ff       	call   c000f4e4 <free>
c001678e:	83 c4 10             	add    esp,0x10
c0016791:	90                   	nop
c0016792:	83 c4 0c             	add    esp,0xc
c0016795:	c3                   	ret    

c0016796 <VCache::~VCache()>:
c0016796:	83 ec 0c             	sub    esp,0xc
c0016799:	83 ec 0c             	sub    esp,0xc
c001679c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167a0:	e8 b1 ff ff ff       	call   c0016756 <VCache::~VCache()>
c00167a5:	83 c4 10             	add    esp,0x10
c00167a8:	83 ec 08             	sub    esp,0x8
c00167ab:	6a 30                	push   0x30
c00167ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00167b1:	e8 2b bf ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00167b6:	83 c4 10             	add    esp,0x10
c00167b9:	83 c4 0c             	add    esp,0xc
c00167bc:	c3                   	ret    
c00167bd:	90                   	nop

c00167be <VCache::write(unsigned long long, int, void*)>:
c00167be:	55                   	push   ebp
c00167bf:	57                   	push   edi
c00167c0:	56                   	push   esi
c00167c1:	53                   	push   ebx
c00167c2:	83 ec 28             	sub    esp,0x28
c00167c5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00167c9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00167cd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00167d1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00167d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00167d8:	e8 0f 6b 00 00       	call   c001d2ec <Semaphore::acquire()>
c00167dd:	83 c4 10             	add    esp,0x10
c00167e0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00167e4:	74 66                	je     c001684c <VCache::write(unsigned long long, int, void*)+0x8e>
c00167e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167e9:	99                   	cdq    
c00167ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00167ee:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00167f1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00167f4:	89 c1                	mov    ecx,eax
c00167f6:	89 d0                	mov    eax,edx
c00167f8:	31 f1                	xor    ecx,esi
c00167fa:	31 f8                	xor    eax,edi
c00167fc:	89 ca                	mov    edx,ecx
c00167fe:	09 c2                	or     edx,eax
c0016800:	75 3e                	jne    c0016840 <VCache::write(unsigned long long, int, void*)+0x82>
c0016802:	83 fd 01             	cmp    ebp,0x1
c0016805:	75 39                	jne    c0016840 <VCache::write(unsigned long long, int, void*)+0x82>
c0016807:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001680a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016810:	51                   	push   ecx
c0016811:	50                   	push   eax
c0016812:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016816:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001681a:	0f af c8             	imul   ecx,eax
c001681d:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016820:	51                   	push   ecx
c0016821:	e8 2f 9e fe ff       	call   c0000655 <memcpy>
c0016826:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016829:	83 c4 10             	add    esp,0x10
c001682c:	40                   	inc    eax
c001682d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016830:	83 f8 40             	cmp    eax,0x40
c0016833:	75 57                	jne    c001688c <VCache::write(unsigned long long, int, void*)+0xce>
c0016835:	83 ec 0c             	sub    esp,0xc
c0016838:	53                   	push   ebx
c0016839:	e8 dc fe ff ff       	call   c001671a <VCache::writeWriteBuffer()>
c001683e:	eb 34                	jmp    c0016874 <VCache::write(unsigned long long, int, void*)+0xb6>
c0016840:	83 ec 0c             	sub    esp,0xc
c0016843:	53                   	push   ebx
c0016844:	e8 d1 fe ff ff       	call   c001671a <VCache::writeWriteBuffer()>
c0016849:	83 c4 10             	add    esp,0x10
c001684c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001684f:	83 fd 3f             	cmp    ebp,0x3f
c0016852:	7f 25                	jg     c0016879 <VCache::write(unsigned long long, int, void*)+0xbb>
c0016854:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016857:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001685a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001685d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016861:	52                   	push   edx
c0016862:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016868:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001686c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001686f:	e8 e1 9d fe ff       	call   c0000655 <memcpy>
c0016874:	83 c4 10             	add    esp,0x10
c0016877:	eb 13                	jmp    c001688c <VCache::write(unsigned long long, int, void*)+0xce>
c0016879:	83 ec 0c             	sub    esp,0xc
c001687c:	8b 10                	mov    edx,DWORD PTR [eax]
c001687e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016882:	55                   	push   ebp
c0016883:	57                   	push   edi
c0016884:	56                   	push   esi
c0016885:	50                   	push   eax
c0016886:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016889:	83 c4 20             	add    esp,0x20
c001688c:	83 ec 0c             	sub    esp,0xc
c001688f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016892:	e8 03 70 00 00       	call   c001d89a <Semaphore::release()>
c0016897:	83 c4 2c             	add    esp,0x2c
c001689a:	31 c0                	xor    eax,eax
c001689c:	5b                   	pop    ebx
c001689d:	5e                   	pop    esi
c001689e:	5f                   	pop    edi
c001689f:	5d                   	pop    ebp
c00168a0:	c3                   	ret    
c00168a1:	90                   	nop

c00168a2 <VCache::read(unsigned long long, int, void*)>:
c00168a2:	57                   	push   edi
c00168a3:	56                   	push   esi
c00168a4:	53                   	push   ebx
c00168a5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00168a9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00168ad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00168b1:	83 ec 0c             	sub    esp,0xc
c00168b4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168b7:	e8 30 6a 00 00       	call   c001d2ec <Semaphore::acquire()>
c00168bc:	83 c4 10             	add    esp,0x10
c00168bf:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00168c3:	74 0c                	je     c00168d1 <VCache::read(unsigned long long, int, void*)+0x2f>
c00168c5:	83 ec 0c             	sub    esp,0xc
c00168c8:	53                   	push   ebx
c00168c9:	e8 4c fe ff ff       	call   c001671a <VCache::writeWriteBuffer()>
c00168ce:	83 c4 10             	add    esp,0x10
c00168d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00168d4:	83 ec 0c             	sub    esp,0xc
c00168d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00168d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00168e1:	57                   	push   edi
c00168e2:	56                   	push   esi
c00168e3:	50                   	push   eax
c00168e4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00168e7:	83 c4 14             	add    esp,0x14
c00168ea:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00168ed:	e8 a8 6f 00 00       	call   c001d89a <Semaphore::release()>
c00168f2:	83 c4 10             	add    esp,0x10
c00168f5:	31 c0                	xor    eax,eax
c00168f7:	5b                   	pop    ebx
c00168f8:	5e                   	pop    esi
c00168f9:	5f                   	pop    edi
c00168fa:	c3                   	ret    
c00168fb:	90                   	nop

c00168fc <Video::putrect(int, int, int, int, unsigned int)>:
c00168fc:	55                   	push   ebp
c00168fd:	57                   	push   edi
c00168fe:	56                   	push   esi
c00168ff:	53                   	push   ebx
c0016900:	83 ec 1c             	sub    esp,0x1c
c0016903:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016907:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001690b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001690f:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016913:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016917:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001691b:	01 df                	add    edi,ebx
c001691d:	39 fb                	cmp    ebx,edi
c001691f:	7d 1f                	jge    c0016940 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016921:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016925:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016929:	7d 12                	jge    c001693d <Video::putrect(int, int, int, int, unsigned int)+0x41>
c001692b:	8b 16                	mov    edx,DWORD PTR [esi]
c001692d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016931:	53                   	push   ebx
c0016932:	55                   	push   ebp
c0016933:	45                   	inc    ebp
c0016934:	56                   	push   esi
c0016935:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016938:	83 c4 10             	add    esp,0x10
c001693b:	eb e8                	jmp    c0016925 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001693d:	43                   	inc    ebx
c001693e:	eb dd                	jmp    c001691d <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016940:	83 c4 1c             	add    esp,0x1c
c0016943:	5b                   	pop    ebx
c0016944:	5e                   	pop    esi
c0016945:	5f                   	pop    edi
c0016946:	5d                   	pop    ebp
c0016947:	c3                   	ret    

c0016948 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016948:	55                   	push   ebp
c0016949:	57                   	push   edi
c001694a:	31 ff                	xor    edi,edi
c001694c:	56                   	push   esi
c001694d:	53                   	push   ebx
c001694e:	83 ec 1c             	sub    esp,0x1c
c0016951:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016955:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016959:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016960:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016965:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016969:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001696d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016971:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016974:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016978:	01 f9                	add    ecx,edi
c001697a:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001697e:	7d 2f                	jge    c00169af <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016980:	31 f6                	xor    esi,esi
c0016982:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016986:	01 f2                	add    edx,esi
c0016988:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001698c:	7d 1a                	jge    c00169a8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001698e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016991:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0016994:	46                   	inc    esi
c0016995:	51                   	push   ecx
c0016996:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001699a:	52                   	push   edx
c001699b:	55                   	push   ebp
c001699c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001699f:	83 c4 10             	add    esp,0x10
c00169a2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00169a6:	eb da                	jmp    c0016982 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00169a8:	47                   	inc    edi
c00169a9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00169ad:	eb c5                	jmp    c0016974 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00169af:	83 c4 1c             	add    esp,0x1c
c00169b2:	5b                   	pop    ebx
c00169b3:	5e                   	pop    esi
c00169b4:	5f                   	pop    edi
c00169b5:	5d                   	pop    ebp
c00169b6:	c3                   	ret    
c00169b7:	90                   	nop

c00169b8 <Video::blit(unsigned int*, int, int, int, int)>:
c00169b8:	55                   	push   ebp
c00169b9:	57                   	push   edi
c00169ba:	56                   	push   esi
c00169bb:	53                   	push   ebx
c00169bc:	83 ec 1c             	sub    esp,0x1c
c00169bf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00169c3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00169c7:	85 c0                	test   eax,eax
c00169c9:	79 02                	jns    c00169cd <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00169cb:	31 c0                	xor    eax,eax
c00169cd:	c1 e0 02             	shl    eax,0x2
c00169d0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00169d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00169dc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00169e0:	39 d8                	cmp    eax,ebx
c00169e2:	7e 49                	jle    c0016a2d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169e4:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00169ea:	7c 41                	jl     c0016a2d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00169ec:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00169f0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00169f4:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00169f8:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00169fc:	39 f9                	cmp    ecx,edi
c00169fe:	7e 22                	jle    c0016a22 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0016a00:	83 c5 04             	add    ebp,0x4
c0016a03:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016a09:	7c 14                	jl     c0016a1f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0016a0b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016a0d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0016a10:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a14:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016a18:	56                   	push   esi
c0016a19:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0016a1c:	83 c4 10             	add    esp,0x10
c0016a1f:	47                   	inc    edi
c0016a20:	eb d2                	jmp    c00169f4 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0016a22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a26:	43                   	inc    ebx
c0016a27:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0016a2b:	eb ab                	jmp    c00169d8 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0016a2d:	83 c4 1c             	add    esp,0x1c
c0016a30:	5b                   	pop    ebx
c0016a31:	5e                   	pop    esi
c0016a32:	5f                   	pop    edi
c0016a33:	5d                   	pop    ebp
c0016a34:	c3                   	ret    
c0016a35:	90                   	nop

c0016a36 <Video::clearScreen(unsigned int)>:
c0016a36:	57                   	push   edi
c0016a37:	56                   	push   esi
c0016a38:	53                   	push   ebx
c0016a39:	31 db                	xor    ebx,ebx
c0016a3b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a3f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0016a45:	7e 1f                	jle    c0016a66 <Video::clearScreen(unsigned int)+0x30>
c0016a47:	31 ff                	xor    edi,edi
c0016a49:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0016a4f:	7e 12                	jle    c0016a63 <Video::clearScreen(unsigned int)+0x2d>
c0016a51:	8b 06                	mov    eax,DWORD PTR [esi]
c0016a53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a57:	53                   	push   ebx
c0016a58:	57                   	push   edi
c0016a59:	47                   	inc    edi
c0016a5a:	56                   	push   esi
c0016a5b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016a5e:	83 c4 10             	add    esp,0x10
c0016a61:	eb e6                	jmp    c0016a49 <Video::clearScreen(unsigned int)+0x13>
c0016a63:	43                   	inc    ebx
c0016a64:	eb d9                	jmp    c0016a3f <Video::clearScreen(unsigned int)+0x9>
c0016a66:	5b                   	pop    ebx
c0016a67:	5e                   	pop    esi
c0016a68:	5f                   	pop    edi
c0016a69:	c3                   	ret    

c0016a6a <Video::putpixel(int, int, unsigned int)>:
c0016a6a:	c7 44 24 04 e4 9a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0029ae4
c0016a72:	e9 64 2e 00 00       	jmp    c00198db <Krnl::panic(char const*)>
c0016a77:	90                   	nop

c0016a78 <Video::Video(char const*)>:
c0016a78:	83 ec 0c             	sub    esp,0xc
c0016a7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a7f:	83 ec 08             	sub    esp,0x8
c0016a82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a86:	50                   	push   eax
c0016a87:	e8 14 d3 ff ff       	call   c0013da0 <Device::Device(char const*)>
c0016a8c:	83 c4 10             	add    esp,0x10
c0016a8f:	ba 68 9b 02 c0       	mov    edx,0xc0029b68
c0016a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a98:	89 10                	mov    DWORD PTR [eax],edx
c0016a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a9e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0016aa8:	90                   	nop
c0016aa9:	83 c4 0c             	add    esp,0xc
c0016aac:	c3                   	ret    
c0016aad:	90                   	nop

c0016aae <Video::~Video()>:
c0016aae:	83 ec 0c             	sub    esp,0xc
c0016ab1:	ba 68 9b 02 c0       	mov    edx,0xc0029b68
c0016ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016aba:	89 10                	mov    DWORD PTR [eax],edx
c0016abc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016ac0:	83 ec 0c             	sub    esp,0xc
c0016ac3:	50                   	push   eax
c0016ac4:	e8 b9 cf ff ff       	call   c0013a82 <Device::~Device()>
c0016ac9:	83 c4 10             	add    esp,0x10
c0016acc:	90                   	nop
c0016acd:	83 c4 0c             	add    esp,0xc
c0016ad0:	c3                   	ret    
c0016ad1:	90                   	nop

c0016ad2 <Video::~Video()>:
c0016ad2:	83 ec 0c             	sub    esp,0xc
c0016ad5:	83 ec 0c             	sub    esp,0xc
c0016ad8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016adc:	e8 cd ff ff ff       	call   c0016aae <Video::~Video()>
c0016ae1:	83 c4 10             	add    esp,0x10
c0016ae4:	83 ec 08             	sub    esp,0x8
c0016ae7:	68 64 01 00 00       	push   0x164
c0016aec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016af0:	e8 ec bb ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0016af5:	83 c4 10             	add    esp,0x10
c0016af8:	83 c4 0c             	add    esp,0xc
c0016afb:	c3                   	ret    

c0016afc <Video::isMonochrome()>:
c0016afc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b00:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0016b06:	c3                   	ret    
c0016b07:	90                   	nop

c0016b08 <Video::getWidth()>:
c0016b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b0c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016b12:	c3                   	ret    
c0016b13:	90                   	nop

c0016b14 <Video::getHeight()>:
c0016b14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b18:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016b1e:	c3                   	ret    
c0016b1f:	90                   	nop

c0016b20 <Video::drawCursor(int, int, unsigned char*, int)>:
c0016b20:	55                   	push   ebp
c0016b21:	57                   	push   edi
c0016b22:	56                   	push   esi
c0016b23:	53                   	push   ebx
c0016b24:	83 ec 2c             	sub    esp,0x2c
c0016b27:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016b2b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016b2f:	83 f8 01             	cmp    eax,0x1
c0016b32:	19 c9                	sbb    ecx,ecx
c0016b34:	31 db                	xor    ebx,ebx
c0016b36:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0016b3a:	89 cd                	mov    ebp,ecx
c0016b3c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0016b44:	f7 d5                	not    ebp
c0016b46:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0016b4c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0016b50:	01 d8                	add    eax,ebx
c0016b52:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b56:	56                   	push   esi
c0016b57:	e8 b8 ff ff ff       	call   c0016b14 <Video::getHeight()>
c0016b5c:	59                   	pop    ecx
c0016b5d:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0016b61:	7e 70                	jle    c0016bd3 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0016b63:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b67:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016b6b:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0016b6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016b72:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0016b76:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0016b7d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016b81:	89 f8                	mov    eax,edi
c0016b83:	83 c0 20             	add    eax,0x20
c0016b86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016b8a:	56                   	push   esi
c0016b8b:	e8 78 ff ff ff       	call   c0016b08 <Video::getWidth()>
c0016b90:	5a                   	pop    edx
c0016b91:	39 c7                	cmp    edi,eax
c0016b93:	7d 34                	jge    c0016bc9 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0016b95:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0016b9a:	74 05                	je     c0016ba1 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0016b9c:	8b 06                	mov    eax,DWORD PTR [esi]
c0016b9e:	55                   	push   ebp
c0016b9f:	eb 0d                	jmp    c0016bae <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0016ba1:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0016ba6:	74 12                	je     c0016bba <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0016ba8:	8b 06                	mov    eax,DWORD PTR [esi]
c0016baa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bae:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016bb2:	57                   	push   edi
c0016bb3:	56                   	push   esi
c0016bb4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016bb7:	83 c4 10             	add    esp,0x10
c0016bba:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0016bbe:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0016bc2:	47                   	inc    edi
c0016bc3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0016bc7:	75 c1                	jne    c0016b8a <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0016bc9:	43                   	inc    ebx
c0016bca:	83 fb 20             	cmp    ebx,0x20
c0016bcd:	0f 85 79 ff ff ff    	jne    c0016b4c <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0016bd3:	83 c4 2c             	add    esp,0x2c
c0016bd6:	5b                   	pop    ebx
c0016bd7:	5e                   	pop    esi
c0016bd8:	5f                   	pop    edi
c0016bd9:	5d                   	pop    ebp
c0016bda:	c3                   	ret    
c0016bdb:	90                   	nop

c0016bdc <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0016bdc:	55                   	push   ebp
c0016bdd:	57                   	push   edi
c0016bde:	56                   	push   esi
c0016bdf:	53                   	push   ebx
c0016be0:	83 ec 28             	sub    esp,0x28
c0016be3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016be7:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0016beb:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c0016bef:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0016bf3:	c1 e7 08             	shl    edi,0x8
c0016bf6:	01 c7                	add    edi,eax
c0016bf8:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0016bfc:	c1 e0 08             	shl    eax,0x8
c0016bff:	01 d0                	add    eax,edx
c0016c01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016c09:	0f af c7             	imul   eax,edi
c0016c0c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0016c13:	50                   	push   eax
c0016c14:	e8 bb 88 ff ff       	call   c000f4d4 <malloc>
c0016c19:	83 c4 10             	add    esp,0x10
c0016c1c:	89 c5                	mov    ebp,eax
c0016c1e:	85 c0                	test   eax,eax
c0016c20:	75 15                	jne    c0016c37 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0016c22:	83 ec 0c             	sub    esp,0xc
c0016c25:	68 05 9b 02 c0       	push   0xc0029b05
c0016c2a:	e8 92 bb ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0016c2f:	83 c4 10             	add    esp,0x10
c0016c32:	e9 1c 01 00 00       	jmp    c0016d53 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016c37:	be 12 00 00 00       	mov    esi,0x12
c0016c3c:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c40:	74 11                	je     c0016c53 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0016c42:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0016c46:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0016c4a:	c1 fe 03             	sar    esi,0x3
c0016c4d:	0f af f0             	imul   esi,eax
c0016c50:	83 c6 12             	add    esi,0x12
c0016c53:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0016c57:	74 04                	je     c0016c5d <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0016c59:	85 ff                	test   edi,edi
c0016c5b:	75 12                	jne    c0016c6f <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0016c5d:	83 ec 0c             	sub    esp,0xc
c0016c60:	68 1c 9b 02 c0       	push   0xc0029b1c
c0016c65:	e8 57 bb ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0016c6a:	e9 ce 00 00 00       	jmp    c0016d3d <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c0016c6f:	52                   	push   edx
c0016c70:	52                   	push   edx
c0016c71:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0016c75:	50                   	push   eax
c0016c76:	68 31 9b 02 c0       	push   0xc0029b31
c0016c7b:	e8 41 bb ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0016c80:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0016c84:	83 c4 10             	add    esp,0x10
c0016c87:	80 fa 02             	cmp    dl,0x2
c0016c8a:	0f 85 98 00 00 00    	jne    c0016d28 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c0016c90:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0016c95:	75 10                	jne    c0016ca7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c97:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0016c9b:	75 0a                	jne    c0016ca7 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0016c9d:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0016ca0:	83 e8 18             	sub    eax,0x18
c0016ca3:	a8 f7                	test   al,0xf7
c0016ca5:	74 0a                	je     c0016cb1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0016ca7:	83 ec 0c             	sub    esp,0xc
c0016caa:	68 3e 9b 02 c0       	push   0xc0029b3e
c0016caf:	eb 7f                	jmp    c0016d30 <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c0016cb1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016cb9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016cc1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016cc5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016ccd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c0016cd1:	75 0c                	jne    c0016cdf <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c0016cd3:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0016cd8:	c1 e0 18             	shl    eax,0x18
c0016cdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016cdf:	41                   	inc    ecx
c0016ce0:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0016ce5:	c1 e2 10             	shl    edx,0x10
c0016ce8:	89 d0                	mov    eax,edx
c0016cea:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c0016cef:	c1 e2 08             	shl    edx,0x8
c0016cf2:	09 c2                	or     edx,eax
c0016cf4:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0016cf8:	09 c2                	or     edx,eax
c0016cfa:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c0016cfe:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0016d02:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0016d06:	c1 f8 03             	sar    eax,0x3
c0016d09:	01 c6                	add    esi,eax
c0016d0b:	89 c8                	mov    eax,ecx
c0016d0d:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0016d11:	39 c7                	cmp    edi,eax
c0016d13:	7f b0                	jg     c0016cc5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0016d15:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016d19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016d1d:	39 14 24             	cmp    DWORD PTR [esp],edx
c0016d20:	7e 22                	jle    c0016d44 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0016d22:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0016d26:	eb 99                	jmp    c0016cc1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0016d28:	50                   	push   eax
c0016d29:	50                   	push   eax
c0016d2a:	52                   	push   edx
c0016d2b:	68 4c 9b 02 c0       	push   0xc0029b4c
c0016d30:	e8 8c ba ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0016d35:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d38:	e8 a7 87 ff ff       	call   c000f4e4 <free>
c0016d3d:	83 c4 10             	add    esp,0x10
c0016d40:	31 ed                	xor    ebp,ebp
c0016d42:	eb 0f                	jmp    c0016d53 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0016d44:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016d48:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0016d4b:	89 38                	mov    DWORD PTR [eax],edi
c0016d4d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016d51:	89 08                	mov    DWORD PTR [eax],ecx
c0016d53:	83 c4 1c             	add    esp,0x1c
c0016d56:	89 e8                	mov    eax,ebp
c0016d58:	5b                   	pop    ebx
c0016d59:	5e                   	pop    esi
c0016d5a:	5f                   	pop    edi
c0016d5b:	5d                   	pop    ebp
c0016d5c:	c3                   	ret    
c0016d5d:	90                   	nop

c0016d5e <Video::putTGA(int, int, unsigned char*, int)>:
c0016d5e:	55                   	push   ebp
c0016d5f:	57                   	push   edi
c0016d60:	56                   	push   esi
c0016d61:	53                   	push   ebx
c0016d62:	83 ec 28             	sub    esp,0x28
c0016d65:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0016d69:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d6d:	50                   	push   eax
c0016d6e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d72:	50                   	push   eax
c0016d73:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d77:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016d7b:	56                   	push   esi
c0016d7c:	e8 5b fe ff ff       	call   c0016bdc <Video::tgaParse(unsigned char*, int, int*, int*)>
c0016d81:	83 c4 20             	add    esp,0x20
c0016d84:	85 c0                	test   eax,eax
c0016d86:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016d8a:	74 35                	je     c0016dc1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d8c:	89 c7                	mov    edi,eax
c0016d8e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d92:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0016d96:	39 d8                	cmp    eax,ebx
c0016d98:	7e 27                	jle    c0016dc1 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0016d9a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016d9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016da2:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016da6:	39 e8                	cmp    eax,ebp
c0016da8:	7e 14                	jle    c0016dbe <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0016daa:	8b 06                	mov    eax,DWORD PTR [esi]
c0016dac:	83 c7 04             	add    edi,0x4
c0016daf:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c0016db2:	53                   	push   ebx
c0016db3:	55                   	push   ebp
c0016db4:	45                   	inc    ebp
c0016db5:	56                   	push   esi
c0016db6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0016db9:	83 c4 10             	add    esp,0x10
c0016dbc:	eb e0                	jmp    c0016d9e <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0016dbe:	43                   	inc    ebx
c0016dbf:	eb cd                	jmp    c0016d8e <Video::putTGA(int, int, unsigned char*, int)+0x30>
c0016dc1:	83 c4 1c             	add    esp,0x1c
c0016dc4:	5b                   	pop    ebx
c0016dc5:	5e                   	pop    esi
c0016dc6:	5f                   	pop    edi
c0016dc7:	5d                   	pop    ebp
c0016dc8:	c3                   	ret    
c0016dc9:	90                   	nop

c0016dca <ACPI::close(int, int, void*)>:
c0016dca:	83 ec 1c             	sub    esp,0x1c
c0016dcd:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0016dd5:	74 0a                	je     c0016de1 <ACPI::close(int, int, void*)+0x17>
c0016dd7:	b8 00 00 00 00       	mov    eax,0x0
c0016ddc:	e9 9a 00 00 00       	jmp    c0016e7b <ACPI::close(int, int, void*)+0xb1>
c0016de1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016de6:	75 37                	jne    c0016e1f <ACPI::close(int, int, void*)+0x55>
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	68 a8 9b 02 c0       	push   0xc0029ba8
c0016df0:	e8 cc b9 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0016df5:	83 c4 10             	add    esp,0x10
c0016df8:	a1 28 d0 02 c0       	mov    eax,ds:0xc002d028
c0016dfd:	85 c0                	test   eax,eax
c0016dff:	74 07                	je     c0016e08 <ACPI::close(int, int, void*)+0x3e>
c0016e01:	a1 28 d0 02 c0       	mov    eax,ds:0xc002d028
c0016e06:	ff d0                	call   eax
c0016e08:	83 ec 0c             	sub    esp,0xc
c0016e0b:	68 7c 9c 02 c0       	push   0xc0029c7c
c0016e10:	e8 c6 2a 00 00       	call   c00198db <Krnl::panic(char const*)>
c0016e15:	83 c4 10             	add    esp,0x10
c0016e18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e1d:	eb 5c                	jmp    c0016e7b <ACPI::close(int, int, void*)+0xb1>
c0016e1f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0016e24:	75 50                	jne    c0016e76 <ACPI::close(int, int, void*)+0xac>
c0016e26:	a1 24 d0 02 c0       	mov    eax,ds:0xc002d024
c0016e2b:	85 c0                	test   eax,eax
c0016e2d:	74 07                	je     c0016e36 <ACPI::close(int, int, void*)+0x6c>
c0016e2f:	a1 24 d0 02 c0       	mov    eax,ds:0xc002d024
c0016e34:	ff d0                	call   eax
c0016e36:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0016e3b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0016e40:	83 e0 02             	and    eax,0x2
c0016e43:	74 1c                	je     c0016e61 <ACPI::close(int, int, void*)+0x97>
c0016e45:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0016e4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016e50:	89 c2                	mov    edx,eax
c0016e52:	ec                   	in     al,dx
c0016e53:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0016e57:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0016e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016e5f:	eb da                	jmp    c0016e3b <ACPI::close(int, int, void*)+0x71>
c0016e61:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0016e68:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0016e6d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0016e71:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016e75:	ee                   	out    dx,al
c0016e76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016e7b:	83 c4 1c             	add    esp,0x1c
c0016e7e:	c3                   	ret    

c0016e7f <findRSDP()>:
c0016e7f:	83 ec 1c             	sub    esp,0x1c
c0016e82:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0016e87:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016e8d:	83 e0 04             	and    eax,0x4
c0016e90:	84 c0                	test   al,al
c0016e92:	75 07                	jne    c0016e9b <findRSDP()+0x1c>
c0016e94:	b8 00 00 00 00       	mov    eax,0x0
c0016e99:	eb 6a                	jmp    c0016f05 <findRSDP()+0x86>
c0016e9b:	a1 d0 c9 02 c0       	mov    eax,ds:0xc002c9d0
c0016ea0:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016ea5:	7f 1b                	jg     c0016ec2 <findRSDP()+0x43>
c0016ea7:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0016eac:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016eb2:	83 e2 fb             	and    edx,0xfffffffb
c0016eb5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0016ebb:	b8 00 00 00 00       	mov    eax,0x0
c0016ec0:	eb 43                	jmp    c0016f05 <findRSDP()+0x86>
c0016ec2:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0016eca:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016ed2:	77 2c                	ja     c0016f00 <findRSDP()+0x81>
c0016ed4:	83 ec 04             	sub    esp,0x4
c0016ed7:	6a 08                	push   0x8
c0016ed9:	68 b5 9b 02 c0       	push   0xc0029bb5
c0016ede:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016ee2:	e8 0b 97 fe ff       	call   c00005f2 <memcmp>
c0016ee7:	83 c4 10             	add    esp,0x10
c0016eea:	85 c0                	test   eax,eax
c0016eec:	0f 94 c0             	sete   al
c0016eef:	84 c0                	test   al,al
c0016ef1:	74 06                	je     c0016ef9 <findRSDP()+0x7a>
c0016ef3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ef7:	eb 0c                	jmp    c0016f05 <findRSDP()+0x86>
c0016ef9:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016efe:	eb ca                	jmp    c0016eca <findRSDP()+0x4b>
c0016f00:	b8 00 00 00 00       	mov    eax,0x0
c0016f05:	83 c4 1c             	add    esp,0x1c
c0016f08:	c3                   	ret    

c0016f09 <loadACPITables(unsigned char*)>:
c0016f09:	56                   	push   esi
c0016f0a:	53                   	push   ebx
c0016f0b:	83 ec 44             	sub    esp,0x44
c0016f0e:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0016f13:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016f19:	83 e0 04             	and    eax,0x4
c0016f1c:	84 c0                	test   al,al
c0016f1e:	0f 84 05 02 00 00    	je     c0017129 <loadACPITables(unsigned char*)+0x220>
c0016f24:	a0 40 d2 02 c0       	mov    al,ds:0xc002d240
c0016f29:	84 c0                	test   al,al
c0016f2b:	74 75                	je     c0016fa2 <loadACPITables(unsigned char*)+0x99>
c0016f2d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f31:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016f35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016f39:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016f3c:	83 e8 24             	sub    eax,0x24
c0016f3f:	c1 e8 03             	shr    eax,0x3
c0016f42:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0016f46:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0016f4e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f52:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0016f56:	0f 8d b2 00 00 00    	jge    c001700e <loadACPITables(unsigned char*)+0x105>
c0016f5c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016f60:	83 c0 24             	add    eax,0x24
c0016f63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016f67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016f6b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016f6f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016f73:	c1 e0 03             	shl    eax,0x3
c0016f76:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0016f7a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016f7e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0016f81:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f83:	89 c1                	mov    ecx,eax
c0016f85:	a1 2c d0 02 c0       	mov    eax,ds:0xc002d02c
c0016f8a:	8d 50 01             	lea    edx,[eax+0x1]
c0016f8d:	89 15 2c d0 02 c0    	mov    DWORD PTR ds:0xc002d02c,edx
c0016f93:	89 ca                	mov    edx,ecx
c0016f95:	89 14 c5 44 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fbc],edx
c0016f9c:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016fa0:	eb ac                	jmp    c0016f4e <loadACPITables(unsigned char*)+0x45>
c0016fa2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016fa6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016faa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016fb1:	83 e8 24             	sub    eax,0x24
c0016fb4:	c1 e8 02             	shr    eax,0x2
c0016fb7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016fbb:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016fc3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fc7:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0016fcb:	7d 41                	jge    c001700e <loadACPITables(unsigned char*)+0x105>
c0016fcd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016fd1:	83 c0 24             	add    eax,0x24
c0016fd4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016fd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016fdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016fe0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016fe4:	c1 e0 02             	shl    eax,0x2
c0016fe7:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0016feb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016fef:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016ff1:	a1 2c d0 02 c0       	mov    eax,ds:0xc002d02c
c0016ff6:	8d 50 01             	lea    edx,[eax+0x1]
c0016ff9:	89 15 2c d0 02 c0    	mov    DWORD PTR ds:0xc002d02c,edx
c0016fff:	89 ca                	mov    edx,ecx
c0017001:	89 14 c5 44 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fbc],edx
c0017008:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001700c:	eb b5                	jmp    c0016fc3 <loadACPITables(unsigned char*)+0xba>
c001700e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017016:	a1 2c d0 02 c0       	mov    eax,ds:0xc002d02c
c001701b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001701f:	0f 8d 05 01 00 00    	jge    c001712a <loadACPITables(unsigned char*)+0x221>
c0017025:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017029:	8b 04 c5 44 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2fbc]
c0017030:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001703c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017040:	25 ff 0f 00 00       	and    eax,0xfff
c0017045:	89 c6                	mov    esi,eax
c0017047:	e8 15 a9 ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c001704c:	89 c3                	mov    ebx,eax
c001704e:	83 ec 0c             	sub    esp,0xc
c0017051:	6a 01                	push   0x1
c0017053:	e8 79 a7 ff ff       	call   c00117d1 <Virt::allocateKernelVirtualPages(int)>
c0017058:	83 c4 10             	add    esp,0x10
c001705b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001705f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017065:	83 ec 0c             	sub    esp,0xc
c0017068:	6a 01                	push   0x1
c001706a:	6a 01                	push   0x1
c001706c:	50                   	push   eax
c001706d:	52                   	push   edx
c001706e:	53                   	push   ebx
c001706f:	e8 1c b1 ff ff       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017074:	83 c4 20             	add    esp,0x20
c0017077:	09 f0                	or     eax,esi
c0017079:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001707d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017081:	c1 e0 03             	shl    eax,0x3
c0017084:	05 40 d0 02 c0       	add    eax,0xc002d040
c0017089:	83 ec 04             	sub    esp,0x4
c001708c:	6a 04                	push   0x4
c001708e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017092:	50                   	push   eax
c0017093:	e8 bd 95 fe ff       	call   c0000655 <memcpy>
c0017098:	83 c4 10             	add    esp,0x10
c001709b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001709f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00170a2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00170a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00170aa:	05 00 10 00 00       	add    eax,0x1000
c00170af:	c1 e8 0c             	shr    eax,0xc
c00170b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00170bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170c1:	25 ff 0f 00 00       	and    eax,0xfff
c00170c6:	89 c6                	mov    esi,eax
c00170c8:	e8 94 a8 ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c00170cd:	89 c3                	mov    ebx,eax
c00170cf:	83 ec 0c             	sub    esp,0xc
c00170d2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00170d6:	e8 f6 a6 ff ff       	call   c00117d1 <Virt::allocateKernelVirtualPages(int)>
c00170db:	83 c4 10             	add    esp,0x10
c00170de:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170e2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00170e8:	83 ec 0c             	sub    esp,0xc
c00170eb:	6a 01                	push   0x1
c00170ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170f1:	50                   	push   eax
c00170f2:	52                   	push   edx
c00170f3:	53                   	push   ebx
c00170f4:	e8 97 b0 ff ff       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00170f9:	83 c4 20             	add    esp,0x20
c00170fc:	09 f0                	or     eax,esi
c00170fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017102:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017105:	83 ec 0c             	sub    esp,0xc
c0017108:	50                   	push   eax
c0017109:	e8 27 aa ff ff       	call   c0011b35 <Virt::freeKernelVirtualPages(unsigned long)>
c001710e:	83 c4 10             	add    esp,0x10
c0017111:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017115:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017119:	89 14 c5 44 d0 02 c0 	mov    DWORD PTR [eax*8-0x3ffd2fbc],edx
c0017120:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017124:	e9 ed fe ff ff       	jmp    c0017016 <loadACPITables(unsigned char*)+0x10d>
c0017129:	90                   	nop
c001712a:	83 c4 44             	add    esp,0x44
c001712d:	5b                   	pop    ebx
c001712e:	5e                   	pop    esi
c001712f:	c3                   	ret    

c0017130 <findRSDT(unsigned char*)>:
c0017130:	56                   	push   esi
c0017131:	53                   	push   ebx
c0017132:	83 ec 44             	sub    esp,0x44
c0017135:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001713a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017140:	83 e0 04             	and    eax,0x4
c0017143:	84 c0                	test   al,al
c0017145:	75 0a                	jne    c0017151 <findRSDT(unsigned char*)+0x21>
c0017147:	b8 00 00 00 00       	mov    eax,0x0
c001714c:	e9 f7 00 00 00       	jmp    c0017248 <findRSDT(unsigned char*)+0x118>
c0017151:	83 ec 04             	sub    esp,0x4
c0017154:	6a 24                	push   0x24
c0017156:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001715a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001715e:	50                   	push   eax
c001715f:	e8 f1 94 fe ff       	call   c0000655 <memcpy>
c0017164:	83 c4 10             	add    esp,0x10
c0017167:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001716b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001716f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017177:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001717b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001717f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017183:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017187:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001718b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001718f:	25 ff 0f 00 00       	and    eax,0xfff
c0017194:	89 c6                	mov    esi,eax
c0017196:	e8 c6 a7 ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c001719b:	89 c3                	mov    ebx,eax
c001719d:	83 ec 0c             	sub    esp,0xc
c00171a0:	6a 02                	push   0x2
c00171a2:	e8 2a a6 ff ff       	call   c00117d1 <Virt::allocateKernelVirtualPages(int)>
c00171a7:	83 c4 10             	add    esp,0x10
c00171aa:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00171ae:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171b4:	83 ec 0c             	sub    esp,0xc
c00171b7:	6a 01                	push   0x1
c00171b9:	6a 02                	push   0x2
c00171bb:	50                   	push   eax
c00171bc:	52                   	push   edx
c00171bd:	53                   	push   ebx
c00171be:	e8 cd af ff ff       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00171c3:	83 c4 20             	add    esp,0x20
c00171c6:	09 f0                	or     eax,esi
c00171c8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00171cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00171d0:	25 ff 0f 00 00       	and    eax,0xfff
c00171d5:	89 c6                	mov    esi,eax
c00171d7:	e8 85 a7 ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c00171dc:	89 c3                	mov    ebx,eax
c00171de:	83 ec 0c             	sub    esp,0xc
c00171e1:	6a 02                	push   0x2
c00171e3:	e8 e9 a5 ff ff       	call   c00117d1 <Virt::allocateKernelVirtualPages(int)>
c00171e8:	83 c4 10             	add    esp,0x10
c00171eb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00171ef:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00171f5:	83 ec 0c             	sub    esp,0xc
c00171f8:	6a 01                	push   0x1
c00171fa:	6a 02                	push   0x2
c00171fc:	50                   	push   eax
c00171fd:	52                   	push   edx
c00171fe:	53                   	push   ebx
c00171ff:	e8 8c af ff ff       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017204:	83 c4 20             	add    esp,0x20
c0017207:	09 f0                	or     eax,esi
c0017209:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001720d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017212:	75 11                	jne    c0017225 <findRSDT(unsigned char*)+0xf5>
c0017214:	c6 05 40 d2 02 c0 00 	mov    BYTE PTR ds:0xc002d240,0x0
c001721b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001721f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017223:	eb 1f                	jmp    c0017244 <findRSDT(unsigned char*)+0x114>
c0017225:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001722a:	75 11                	jne    c001723d <findRSDT(unsigned char*)+0x10d>
c001722c:	c6 05 40 d2 02 c0 01 	mov    BYTE PTR ds:0xc002d240,0x1
c0017233:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017237:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001723b:	eb 07                	jmp    c0017244 <findRSDT(unsigned char*)+0x114>
c001723d:	b8 00 00 00 00       	mov    eax,0x0
c0017242:	eb 04                	jmp    c0017248 <findRSDT(unsigned char*)+0x118>
c0017244:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017248:	83 c4 44             	add    esp,0x44
c001724b:	5b                   	pop    ebx
c001724c:	5e                   	pop    esi
c001724d:	c3                   	ret    

c001724e <findDataTable(unsigned char*, char*)>:
c001724e:	83 ec 1c             	sub    esp,0x1c
c0017251:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0017256:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001725c:	83 e0 04             	and    eax,0x4
c001725f:	84 c0                	test   al,al
c0017261:	75 07                	jne    c001726a <findDataTable(unsigned char*, char*)+0x1c>
c0017263:	b8 00 00 00 00       	mov    eax,0x0
c0017268:	eb 7c                	jmp    c00172e6 <findDataTable(unsigned char*, char*)+0x98>
c001726a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017272:	a1 2c d0 02 c0       	mov    eax,ds:0xc002d02c
c0017277:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001727b:	7d 3a                	jge    c00172b7 <findDataTable(unsigned char*, char*)+0x69>
c001727d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017281:	c1 e0 03             	shl    eax,0x3
c0017284:	05 40 d0 02 c0       	add    eax,0xc002d040
c0017289:	83 ec 04             	sub    esp,0x4
c001728c:	6a 04                	push   0x4
c001728e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017292:	50                   	push   eax
c0017293:	e8 5a 93 fe ff       	call   c00005f2 <memcmp>
c0017298:	83 c4 10             	add    esp,0x10
c001729b:	85 c0                	test   eax,eax
c001729d:	0f 94 c0             	sete   al
c00172a0:	84 c0                	test   al,al
c00172a2:	74 0d                	je     c00172b1 <findDataTable(unsigned char*, char*)+0x63>
c00172a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00172a8:	8b 04 c5 44 d0 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd2fbc]
c00172af:	eb 35                	jmp    c00172e6 <findDataTable(unsigned char*, char*)+0x98>
c00172b1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00172b5:	eb bb                	jmp    c0017272 <findDataTable(unsigned char*, char*)+0x24>
c00172b7:	a0 40 d2 02 c0       	mov    al,ds:0xc002d240
c00172bc:	84 c0                	test   al,al
c00172be:	74 07                	je     c00172c7 <findDataTable(unsigned char*, char*)+0x79>
c00172c0:	b8 58 00 00 00       	mov    eax,0x58
c00172c5:	eb 05                	jmp    c00172cc <findDataTable(unsigned char*, char*)+0x7e>
c00172c7:	b8 52 00 00 00       	mov    eax,0x52
c00172cc:	83 ec 04             	sub    esp,0x4
c00172cf:	50                   	push   eax
c00172d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00172d4:	68 a0 9c 02 c0       	push   0xc0029ca0
c00172d9:	e8 e3 b4 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00172de:	83 c4 10             	add    esp,0x10
c00172e1:	b8 00 00 00 00       	mov    eax,0x0
c00172e6:	83 c4 1c             	add    esp,0x1c
c00172e9:	c3                   	ret    

c00172ea <scanMADT()>:
c00172ea:	53                   	push   ebx
c00172eb:	83 ec 38             	sub    esp,0x38
c00172ee:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00172f3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00172f9:	83 e0 04             	and    eax,0x4
c00172fc:	84 c0                	test   al,al
c00172fe:	0f 84 63 04 00 00    	je     c0017767 <scanMADT()+0x47d>
c0017304:	e8 76 fb ff ff       	call   c0016e7f <findRSDP()>
c0017309:	a3 4c d2 02 c0       	mov    ds:0xc002d24c,eax
c001730e:	a1 4c d2 02 c0       	mov    eax,ds:0xc002d24c
c0017313:	85 c0                	test   eax,eax
c0017315:	75 19                	jne    c0017330 <scanMADT()+0x46>
c0017317:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001731c:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017322:	83 e2 fb             	and    edx,0xfffffffb
c0017325:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001732b:	e9 3b 04 00 00       	jmp    c001776b <scanMADT()+0x481>
c0017330:	a1 4c d2 02 c0       	mov    eax,ds:0xc002d24c
c0017335:	83 ec 0c             	sub    esp,0xc
c0017338:	50                   	push   eax
c0017339:	e8 f2 fd ff ff       	call   c0017130 <findRSDT(unsigned char*)>
c001733e:	83 c4 10             	add    esp,0x10
c0017341:	a3 48 d2 02 c0       	mov    ds:0xc002d248,eax
c0017346:	a1 48 d2 02 c0       	mov    eax,ds:0xc002d248
c001734b:	85 c0                	test   eax,eax
c001734d:	75 19                	jne    c0017368 <scanMADT()+0x7e>
c001734f:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0017354:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001735a:	83 e2 fb             	and    edx,0xfffffffb
c001735d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017363:	e9 03 04 00 00       	jmp    c001776b <scanMADT()+0x481>
c0017368:	a1 48 d2 02 c0       	mov    eax,ds:0xc002d248
c001736d:	83 ec 0c             	sub    esp,0xc
c0017370:	50                   	push   eax
c0017371:	e8 93 fb ff ff       	call   c0016f09 <loadACPITables(unsigned char*)>
c0017376:	83 c4 10             	add    esp,0x10
c0017379:	a1 48 d2 02 c0       	mov    eax,ds:0xc002d248
c001737e:	83 ec 08             	sub    esp,0x8
c0017381:	68 be 9b 02 c0       	push   0xc0029bbe
c0017386:	50                   	push   eax
c0017387:	e8 c2 fe ff ff       	call   c001724e <findDataTable(unsigned char*, char*)>
c001738c:	83 c4 10             	add    esp,0x10
c001738f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017393:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017398:	75 19                	jne    c00173b3 <scanMADT()+0xc9>
c001739a:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001739f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00173a5:	83 e2 fe             	and    edx,0xfffffffe
c00173a8:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00173ae:	e9 b8 03 00 00       	jmp    c001776b <scanMADT()+0x481>
c00173b3:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00173bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00173bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00173c2:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c00173c6:	0f 87 9f 03 00 00    	ja     c001776b <scanMADT()+0x481>
c00173cc:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c00173d4:	0f 87 91 03 00 00    	ja     c001776b <scanMADT()+0x481>
c00173da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173de:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00173e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173e6:	8d 50 01             	lea    edx,[eax+0x1]
c00173e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00173ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00173f1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00173f5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00173f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00173fd:	8d 50 01             	lea    edx,[eax+0x1]
c0017400:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017404:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017408:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001740c:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017410:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017415:	0f 86 4f 03 00 00    	jbe    c001776a <scanMADT()+0x480>
c001741b:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017420:	75 57                	jne    c0017479 <scanMADT()+0x18f>
c0017422:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017426:	8d 50 01             	lea    edx,[eax+0x1]
c0017429:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001742d:	8a 15 40 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d440
c0017433:	0f b6 d2             	movzx  edx,dl
c0017436:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001743a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001743e:	88 82 80 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2b80],al
c0017444:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017448:	8d 50 01             	lea    edx,[eax+0x1]
c001744b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001744f:	8a 15 40 d4 02 c0    	mov    dl,BYTE PTR ds:0xc002d440
c0017455:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017458:	88 0d 40 d4 02 c0    	mov    BYTE PTR ds:0xc002d440,cl
c001745e:	0f b6 d2             	movzx  edx,dl
c0017461:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017465:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017469:	88 82 60 d4 02 c0    	mov    BYTE PTR [edx-0x3ffd2ba0],al
c001746f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017474:	e9 da 02 00 00       	jmp    c0017753 <scanMADT()+0x469>
c0017479:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c001747e:	0f 85 14 01 00 00    	jne    c0017598 <scanMADT()+0x2ae>
c0017484:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017488:	8d 50 01             	lea    edx,[eax+0x1]
c001748b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001748f:	8a 15 00 d3 02 c0    	mov    dl,BYTE PTR ds:0xc002d300
c0017495:	0f b6 d2             	movzx  edx,dl
c0017498:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001749c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00174a0:	88 82 20 d3 02 c0    	mov    BYTE PTR [edx-0x3ffd2ce0],al
c00174a6:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c00174aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00174ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174b2:	01 d0                	add    eax,edx
c00174b4:	83 c0 2c             	add    eax,0x2c
c00174b7:	8a 00                	mov    al,BYTE PTR [eax]
c00174b9:	0f b6 d0             	movzx  edx,al
c00174bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174c0:	8d 48 01             	lea    ecx,[eax+0x1]
c00174c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174c7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00174cb:	0f b6 c0             	movzx  eax,al
c00174ce:	c1 e0 08             	shl    eax,0x8
c00174d1:	89 d1                	mov    ecx,edx
c00174d3:	09 c1                	or     ecx,eax
c00174d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174d9:	8d 50 02             	lea    edx,[eax+0x2]
c00174dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174e0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174e4:	0f b6 c0             	movzx  eax,al
c00174e7:	c1 e0 10             	shl    eax,0x10
c00174ea:	09 c1                	or     ecx,eax
c00174ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00174f0:	8d 50 03             	lea    edx,[eax+0x3]
c00174f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00174f7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00174fb:	0f b6 c0             	movzx  eax,al
c00174fe:	c1 e0 18             	shl    eax,0x18
c0017501:	09 c1                	or     ecx,eax
c0017503:	89 ca                	mov    edx,ecx
c0017505:	a0 00 d3 02 c0       	mov    al,ds:0xc002d300
c001750a:	0f b6 c0             	movzx  eax,al
c001750d:	89 14 85 40 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2cc0],edx
c0017514:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017519:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001751d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017521:	01 d0                	add    eax,edx
c0017523:	83 c0 2c             	add    eax,0x2c
c0017526:	8a 00                	mov    al,BYTE PTR [eax]
c0017528:	0f b6 d0             	movzx  edx,al
c001752b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001752f:	8d 48 01             	lea    ecx,[eax+0x1]
c0017532:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017536:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001753a:	0f b6 c0             	movzx  eax,al
c001753d:	c1 e0 08             	shl    eax,0x8
c0017540:	89 d1                	mov    ecx,edx
c0017542:	09 c1                	or     ecx,eax
c0017544:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017548:	8d 50 02             	lea    edx,[eax+0x2]
c001754b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001754f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017553:	0f b6 c0             	movzx  eax,al
c0017556:	c1 e0 10             	shl    eax,0x10
c0017559:	09 c1                	or     ecx,eax
c001755b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001755f:	8d 50 03             	lea    edx,[eax+0x3]
c0017562:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017566:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001756a:	0f b6 c0             	movzx  eax,al
c001756d:	c1 e0 18             	shl    eax,0x18
c0017570:	09 c1                	or     ecx,eax
c0017572:	89 ca                	mov    edx,ecx
c0017574:	a0 00 d3 02 c0       	mov    al,ds:0xc002d300
c0017579:	0f b6 c0             	movzx  eax,al
c001757c:	89 14 85 c0 d3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2c40],edx
c0017583:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017588:	a0 00 d3 02 c0       	mov    al,ds:0xc002d300
c001758d:	40                   	inc    eax
c001758e:	a2 00 d3 02 c0       	mov    ds:0xc002d300,al
c0017593:	e9 bb 01 00 00       	jmp    c0017753 <scanMADT()+0x469>
c0017598:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c001759d:	0f 85 e9 00 00 00    	jne    c001768c <scanMADT()+0x3a2>
c00175a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175a7:	8d 50 01             	lea    edx,[eax+0x1]
c00175aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175ae:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175b2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175b6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00175ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175be:	8d 50 01             	lea    edx,[eax+0x1]
c00175c1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00175c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175c9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00175cd:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00175d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00175d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175d9:	01 d0                	add    eax,edx
c00175db:	83 c0 2c             	add    eax,0x2c
c00175de:	8a 00                	mov    al,BYTE PTR [eax]
c00175e0:	0f b6 d0             	movzx  edx,al
c00175e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00175e7:	8d 48 01             	lea    ecx,[eax+0x1]
c00175ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175ee:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00175f2:	0f b6 c0             	movzx  eax,al
c00175f5:	c1 e0 08             	shl    eax,0x8
c00175f8:	89 d1                	mov    ecx,edx
c00175fa:	09 c1                	or     ecx,eax
c00175fc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017600:	8d 50 02             	lea    edx,[eax+0x2]
c0017603:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017607:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001760b:	0f b6 c0             	movzx  eax,al
c001760e:	c1 e0 10             	shl    eax,0x10
c0017611:	09 c1                	or     ecx,eax
c0017613:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017617:	8d 50 03             	lea    edx,[eax+0x3]
c001761a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001761e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017622:	0f b6 c0             	movzx  eax,al
c0017625:	c1 e0 18             	shl    eax,0x18
c0017628:	09 c8                	or     eax,ecx
c001762a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001762e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017633:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017637:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001763b:	01 d0                	add    eax,edx
c001763d:	83 c0 2c             	add    eax,0x2c
c0017640:	8a 00                	mov    al,BYTE PTR [eax]
c0017642:	0f b6 c0             	movzx  eax,al
c0017645:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017649:	8d 4a 01             	lea    ecx,[edx+0x1]
c001764c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017650:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017654:	0f b6 d2             	movzx  edx,dl
c0017657:	c1 e2 08             	shl    edx,0x8
c001765a:	09 d0                	or     eax,edx
c001765c:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017661:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017666:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001766b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001766f:	88 90 e0 bb 02 c0    	mov    BYTE PTR [eax-0x3ffd4420],dl
c0017675:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c001767a:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001767f:	66 89 84 12 e0 d2 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd2d20],ax
c0017687:	e9 c7 00 00 00       	jmp    c0017753 <scanMADT()+0x469>
c001768c:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017691:	0f 85 b0 00 00 00    	jne    c0017747 <scanMADT()+0x45d>
c0017697:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001769b:	8d 50 01             	lea    edx,[eax+0x1]
c001769e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176a6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176aa:	0f b6 c0             	movzx  eax,al
c00176ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00176b1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176b9:	01 d0                	add    eax,edx
c00176bb:	83 c0 2c             	add    eax,0x2c
c00176be:	8a 00                	mov    al,BYTE PTR [eax]
c00176c0:	0f b6 d0             	movzx  edx,al
c00176c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176c7:	8d 48 01             	lea    ecx,[eax+0x1]
c00176ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00176ce:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00176d2:	0f b6 c0             	movzx  eax,al
c00176d5:	c1 e0 08             	shl    eax,0x8
c00176d8:	09 d0                	or     eax,edx
c00176da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176de:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00176e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00176e7:	8d 50 01             	lea    edx,[eax+0x1]
c00176ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00176ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00176f6:	0f b6 c0             	movzx  eax,al
c00176f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017701:	c1 e0 08             	shl    eax,0x8
c0017704:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017708:	89 c1                	mov    ecx,eax
c001770a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001770e:	c1 e0 18             	shl    eax,0x18
c0017711:	89 c3                	mov    ebx,eax
c0017713:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c0017718:	8d 50 01             	lea    edx,[eax+0x1]
c001771b:	89 15 50 d2 02 c0    	mov    DWORD PTR ds:0xc002d250,edx
c0017721:	09 d9                	or     ecx,ebx
c0017723:	89 ca                	mov    edx,ecx
c0017725:	89 14 85 60 d2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2da0],edx
c001772c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017730:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017738:	68 d0 9c 02 c0       	push   0xc0029cd0
c001773d:	e8 7f b0 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0017742:	83 c4 10             	add    esp,0x10
c0017745:	eb 0c                	jmp    c0017753 <scanMADT()+0x469>
c0017747:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c001774c:	75 05                	jne    c0017753 <scanMADT()+0x469>
c001774e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017753:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017758:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001775c:	01 d0                	add    eax,edx
c001775e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017762:	e9 54 fc ff ff       	jmp    c00173bb <scanMADT()+0xd1>
c0017767:	90                   	nop
c0017768:	eb 01                	jmp    c001776b <scanMADT()+0x481>
c001776a:	90                   	nop
c001776b:	83 c4 38             	add    esp,0x38
c001776e:	5b                   	pop    ebx
c001776f:	c3                   	ret    

c0017770 <ACPI::ACPI()>:
c0017770:	83 ec 0c             	sub    esp,0xc
c0017773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017777:	83 ec 08             	sub    esp,0x8
c001777a:	68 c3 9b 02 c0       	push   0xc0029bc3
c001777f:	50                   	push   eax
c0017780:	e8 1b c6 ff ff       	call   c0013da0 <Device::Device(char const*)>
c0017785:	83 c4 10             	add    esp,0x10
c0017788:	ba a8 9d 02 c0       	mov    edx,0xc0029da8
c001778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017791:	89 10                	mov    DWORD PTR [eax],edx
c0017793:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017797:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001779e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177a2:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00177ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177b0:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c00177ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00177be:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c00177c5:	e8 20 fb ff ff       	call   c00172ea <scanMADT()>
c00177ca:	90                   	nop
c00177cb:	83 c4 0c             	add    esp,0xc
c00177ce:	c3                   	ret    
c00177cf:	90                   	nop

c00177d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00177d0:	83 ec 2c             	sub    esp,0x2c
c00177d3:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00177d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00177db:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00177df:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00177e3:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00177e8:	88 d0                	mov    al,dl
c00177ea:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00177ee:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00177f3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00177fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177ff:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017805:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017809:	0f 8d 97 00 00 00    	jge    c00178a6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001780f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017813:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017817:	83 c2 2a             	add    edx,0x2a
c001781a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001781e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017823:	75 78                	jne    c001789d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017825:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017829:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001782d:	83 c2 2a             	add    edx,0x2a
c0017830:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017834:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017838:	75 63                	jne    c001789d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001783a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001783f:	74 3a                	je     c001787b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017841:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017845:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017849:	83 c2 2a             	add    edx,0x2a
c001784c:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017850:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017854:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017857:	39 c2                	cmp    edx,eax
c0017859:	74 10                	je     c001786b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c001785b:	83 ec 0c             	sub    esp,0xc
c001785e:	68 0c 9d 02 c0       	push   0xc0029d0c
c0017863:	e8 73 20 00 00       	call   c00198db <Krnl::panic(char const*)>
c0017868:	83 c4 10             	add    esp,0x10
c001786b:	83 ec 0c             	sub    esp,0xc
c001786e:	68 c8 9b 02 c0       	push   0xc0029bc8
c0017873:	e8 63 20 00 00       	call   c00198db <Krnl::panic(char const*)>
c0017878:	83 c4 10             	add    esp,0x10
c001787b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001787f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017883:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017887:	83 c2 2a             	add    edx,0x2a
c001788a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001788e:	8b 02                	mov    eax,DWORD PTR [edx]
c0017890:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017893:	89 01                	mov    DWORD PTR [ecx],eax
c0017895:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017898:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001789d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00178a1:	e9 55 ff ff ff       	jmp    c00177fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00178a6:	90                   	nop
c00178a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00178ab:	83 c4 2c             	add    esp,0x2c
c00178ae:	c2 04 00             	ret    0x4
c00178b1:	90                   	nop

c00178b2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00178b2:	56                   	push   esi
c00178b3:	53                   	push   ebx
c00178b4:	83 ec 14             	sub    esp,0x14
c00178b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00178bb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00178bf:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00178c3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00178c8:	88 c8                	mov    al,cl
c00178ca:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00178ce:	88 d0                	mov    al,dl
c00178d0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00178d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178d8:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00178de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178e2:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00178e8:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00178ed:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00178f2:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00178f7:	83 ec 04             	sub    esp,0x4
c00178fa:	56                   	push   esi
c00178fb:	53                   	push   ebx
c00178fc:	51                   	push   ecx
c00178fd:	52                   	push   edx
c00178fe:	50                   	push   eax
c00178ff:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017903:	68 3c 9d 02 c0       	push   0xc0029d3c
c0017908:	e8 b4 ae ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001790d:	83 c4 20             	add    esp,0x20
c0017910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017914:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001791a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001791e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017921:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017925:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017929:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001792d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017933:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017937:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001793a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001793e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017943:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017947:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001794d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017951:	8d 48 01             	lea    ecx,[eax+0x1]
c0017954:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017958:	83 c2 2a             	add    edx,0x2a
c001795b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001795f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017963:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0017969:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001796d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017970:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017974:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797c:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017982:	8d 50 01             	lea    edx,[eax+0x1]
c0017985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017989:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c001798f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017993:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0017999:	3d 00 08 00 00       	cmp    eax,0x800
c001799e:	75 10                	jne    c00179b0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c00179a0:	83 ec 0c             	sub    esp,0xc
c00179a3:	68 d7 9b 02 c0       	push   0xc0029bd7
c00179a8:	e8 2e 1f 00 00       	call   c00198db <Krnl::panic(char const*)>
c00179ad:	83 c4 10             	add    esp,0x10
c00179b0:	90                   	nop
c00179b1:	83 c4 14             	add    esp,0x14
c00179b4:	5b                   	pop    ebx
c00179b5:	5e                   	pop    esi
c00179b6:	c3                   	ret    
c00179b7:	90                   	nop

c00179b8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00179b8:	b8 00 00 00 00       	mov    eax,0x0
c00179bd:	c3                   	ret    

c00179be <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00179be:	83 ec 1c             	sub    esp,0x1c
c00179c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179c5:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00179c8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00179cc:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00179d1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00179d6:	83 ec 08             	sub    esp,0x8
c00179d9:	52                   	push   edx
c00179da:	50                   	push   eax
c00179db:	e8 0c 71 ff ff       	call   c000eaec <Computer::readCMOS(unsigned char)>
c00179e0:	83 c4 10             	add    esp,0x10
c00179e3:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00179e7:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00179ec:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00179f1:	83 ec 04             	sub    esp,0x4
c00179f4:	6a 01                	push   0x1
c00179f6:	52                   	push   edx
c00179f7:	50                   	push   eax
c00179f8:	e8 05 72 ff ff       	call   c000ec02 <Computer::writeCMOS(unsigned char, unsigned char)>
c00179fd:	83 c4 10             	add    esp,0x10
c0017a00:	90                   	nop
c0017a01:	83 c4 1c             	add    esp,0x1c
c0017a04:	c3                   	ret    
c0017a05:	90                   	nop

c0017a06 <ACPI::open(int, int, void*)>:
c0017a06:	53                   	push   ebx
c0017a07:	83 ec 28             	sub    esp,0x28
c0017a0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a0e:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0017a15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a19:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0017a1f:	84 c0                	test   al,al
c0017a21:	74 67                	je     c0017a8a <ACPI::open(int, int, void*)+0x84>
c0017a23:	c7 44 24 10 58 01 00 00 	mov    DWORD PTR [esp+0x10],0x158
c0017a2b:	83 ec 0c             	sub    esp,0xc
c0017a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a32:	e8 9d 7a ff ff       	call   c000f4d4 <malloc>
c0017a37:	83 c4 10             	add    esp,0x10
c0017a3a:	89 c3                	mov    ebx,eax
c0017a3c:	83 ec 0c             	sub    esp,0xc
c0017a3f:	53                   	push   ebx
c0017a40:	e8 47 9e 00 00       	call   c002188c <PCI::PCI()>
c0017a45:	83 c4 10             	add    esp,0x10
c0017a48:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0017a4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a50:	83 ec 08             	sub    esp,0x8
c0017a53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a57:	50                   	push   eax
c0017a58:	e8 53 c1 ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c0017a5d:	83 c4 10             	add    esp,0x10
c0017a60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017a64:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a66:	83 c0 08             	add    eax,0x8
c0017a69:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a6b:	6a 00                	push   0x0
c0017a6d:	6a 00                	push   0x0
c0017a6f:	6a 00                	push   0x0
c0017a71:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017a75:	ff d0                	call   eax
c0017a77:	83 c4 10             	add    esp,0x10
c0017a7a:	83 ec 0c             	sub    esp,0xc
c0017a7d:	68 f4 9b 02 c0       	push   0xc0029bf4
c0017a82:	e8 3a ad ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0017a87:	83 c4 10             	add    esp,0x10
c0017a8a:	83 ec 0c             	sub    esp,0xc
c0017a8d:	68 ff 9b 02 c0       	push   0xc0029bff
c0017a92:	e8 9f 41 00 00       	call   c001bc36 <Thr::loadKernelSymbolTable(char const*)>
c0017a97:	83 c4 10             	add    esp,0x10
c0017a9a:	8b 1d 88 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c988
c0017aa0:	83 ec 08             	sub    esp,0x8
c0017aa3:	6a 01                	push   0x1
c0017aa5:	68 1d 9c 02 c0       	push   0xc0029c1d
c0017aaa:	e8 47 4c 00 00       	call   c001c6f6 <Thr::loadDLL(char const*, bool)>
c0017aaf:	83 c4 10             	add    esp,0x10
c0017ab2:	83 ec 08             	sub    esp,0x8
c0017ab5:	53                   	push   ebx
c0017ab6:	50                   	push   eax
c0017ab7:	e8 49 4e 00 00       	call   c001c905 <Thr::executeDLL(unsigned long, void*)>
c0017abc:	83 c4 10             	add    esp,0x10
c0017abf:	8b 1d 88 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c988
c0017ac5:	83 ec 08             	sub    esp,0x8
c0017ac8:	6a 01                	push   0x1
c0017aca:	68 3a 9c 02 c0       	push   0xc0029c3a
c0017acf:	e8 22 4c 00 00       	call   c001c6f6 <Thr::loadDLL(char const*, bool)>
c0017ad4:	83 c4 10             	add    esp,0x10
c0017ad7:	83 ec 08             	sub    esp,0x8
c0017ada:	53                   	push   ebx
c0017adb:	50                   	push   eax
c0017adc:	e8 24 4e 00 00       	call   c001c905 <Thr::executeDLL(unsigned long, void*)>
c0017ae1:	83 c4 10             	add    esp,0x10
c0017ae4:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0017ae9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017aef:	83 e0 04             	and    eax,0x4
c0017af2:	84 c0                	test   al,al
c0017af4:	0f 84 d6 00 00 00    	je     c0017bd0 <ACPI::open(int, int, void*)+0x1ca>
c0017afa:	c7 44 24 0c 14 01 00 00 	mov    DWORD PTR [esp+0xc],0x114
c0017b02:	83 ec 0c             	sub    esp,0xc
c0017b05:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b09:	e8 c6 79 ff ff       	call   c000f4d4 <malloc>
c0017b0e:	83 c4 10             	add    esp,0x10
c0017b11:	89 c3                	mov    ebx,eax
c0017b13:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0017b18:	83 ec 04             	sub    esp,0x4
c0017b1b:	50                   	push   eax
c0017b1c:	68 57 9c 02 c0       	push   0xc0029c57
c0017b21:	53                   	push   ebx
c0017b22:	e8 c9 b1 ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c0017b27:	83 c4 10             	add    esp,0x10
c0017b2a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0017b2e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b33:	74 17                	je     c0017b4c <ACPI::open(int, int, void*)+0x146>
c0017b35:	83 ec 0c             	sub    esp,0xc
c0017b38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b3c:	e8 81 b4 ff ff       	call   c0012fc2 <File::exists()>
c0017b41:	83 c4 10             	add    esp,0x10
c0017b44:	84 c0                	test   al,al
c0017b46:	74 04                	je     c0017b4c <ACPI::open(int, int, void*)+0x146>
c0017b48:	b0 01                	mov    al,0x1
c0017b4a:	eb 02                	jmp    c0017b4e <ACPI::open(int, int, void*)+0x148>
c0017b4c:	b0 00                	mov    al,0x0
c0017b4e:	84 c0                	test   al,al
c0017b50:	74 25                	je     c0017b77 <ACPI::open(int, int, void*)+0x171>
c0017b52:	8b 1d 88 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c988
c0017b58:	83 ec 08             	sub    esp,0x8
c0017b5b:	6a 01                	push   0x1
c0017b5d:	68 57 9c 02 c0       	push   0xc0029c57
c0017b62:	e8 8f 4b 00 00       	call   c001c6f6 <Thr::loadDLL(char const*, bool)>
c0017b67:	83 c4 10             	add    esp,0x10
c0017b6a:	83 ec 08             	sub    esp,0x8
c0017b6d:	53                   	push   ebx
c0017b6e:	50                   	push   eax
c0017b6f:	e8 91 4d 00 00       	call   c001c905 <Thr::executeDLL(unsigned long, void*)>
c0017b74:	83 c4 10             	add    esp,0x10
c0017b77:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b7c:	74 1e                	je     c0017b9c <ACPI::open(int, int, void*)+0x196>
c0017b7e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017b83:	74 17                	je     c0017b9c <ACPI::open(int, int, void*)+0x196>
c0017b85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b8b:	83 c0 08             	add    eax,0x8
c0017b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b90:	83 ec 0c             	sub    esp,0xc
c0017b93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017b97:	ff d0                	call   eax
c0017b99:	83 c4 10             	add    esp,0x10
c0017b9c:	a1 48 d2 02 c0       	mov    eax,ds:0xc002d248
c0017ba1:	83 ec 08             	sub    esp,0x8
c0017ba4:	68 74 9c 02 c0       	push   0xc0029c74
c0017ba9:	50                   	push   eax
c0017baa:	e8 9f f6 ff ff       	call   c001724e <findDataTable(unsigned char*, char*)>
c0017baf:	83 c4 10             	add    esp,0x10
c0017bb2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017bb6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017bbb:	74 13                	je     c0017bd0 <ACPI::open(int, int, void*)+0x1ca>
c0017bbd:	83 ec 08             	sub    esp,0x8
c0017bc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017bc4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017bc8:	e8 f1 fd ff ff       	call   c00179be <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0017bcd:	83 c4 10             	add    esp,0x10
c0017bd0:	b8 00 00 00 00       	mov    eax,0x0
c0017bd5:	83 c4 28             	add    esp,0x28
c0017bd8:	5b                   	pop    ebx
c0017bd9:	c3                   	ret    

c0017bda <ACPI::sleep()>:
c0017bda:	83 ec 0c             	sub    esp,0xc
c0017bdd:	a1 20 d0 02 c0       	mov    eax,ds:0xc002d020
c0017be2:	85 c0                	test   eax,eax
c0017be4:	74 07                	je     c0017bed <ACPI::sleep()+0x13>
c0017be6:	a1 20 d0 02 c0       	mov    eax,ds:0xc002d020
c0017beb:	ff d0                	call   eax
c0017bed:	90                   	nop
c0017bee:	83 c4 0c             	add    esp,0xc
c0017bf1:	c3                   	ret    

c0017bf2 <CPU::close(int, int, void*)>:
c0017bf2:	31 c0                	xor    eax,eax
c0017bf4:	c3                   	ret    
c0017bf5:	90                   	nop

c0017bf6 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0017bf6:	55                   	push   ebp
c0017bf7:	57                   	push   edi
c0017bf8:	56                   	push   esi
c0017bf9:	53                   	push   ebx
c0017bfa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017bfe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017c02:	89 ce                	mov    esi,ecx
c0017c04:	89 d5                	mov    ebp,edx
c0017c06:	80 f9 04             	cmp    cl,0x4
c0017c09:	75 28                	jne    c0017c33 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0017c0b:	8d 42 f9             	lea    eax,[edx-0x7]
c0017c0e:	3c 03                	cmp    al,0x3
c0017c10:	0f 86 63 01 00 00    	jbe    c0017d79 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017c16:	80 fa 03             	cmp    dl,0x3
c0017c19:	0f 84 5a 01 00 00    	je     c0017d79 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0017c1f:	8d 7a f2             	lea    edi,[edx-0xe]
c0017c22:	b8 b0 bd 02 c0       	mov    eax,0xc002bdb0
c0017c27:	89 fb                	mov    ebx,edi
c0017c29:	80 fb 01             	cmp    bl,0x1
c0017c2c:	77 4e                	ja     c0017c7c <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0017c2e:	e9 52 01 00 00       	jmp    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c33:	80 f9 05             	cmp    cl,0x5
c0017c36:	75 4d                	jne    c0017c85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0017c38:	b8 c0 bd 02 c0       	mov    eax,0xc002bdc0
c0017c3d:	80 fa 03             	cmp    dl,0x3
c0017c40:	0f 86 3f 01 00 00    	jbe    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c46:	8d 7a fa             	lea    edi,[edx-0x6]
c0017c49:	b8 d0 bd 02 c0       	mov    eax,0xc002bdd0
c0017c4e:	89 fb                	mov    ebx,edi
c0017c50:	80 fb 01             	cmp    bl,0x1
c0017c53:	0f 86 2c 01 00 00    	jbe    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c59:	b8 e0 bd 02 c0       	mov    eax,0xc002bde0
c0017c5e:	80 fa 08             	cmp    dl,0x8
c0017c61:	0f 84 1e 01 00 00    	je     c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c67:	89 d7                	mov    edi,edx
c0017c69:	b8 f0 bd 02 c0       	mov    eax,0xc002bdf0
c0017c6e:	83 e7 fb             	and    edi,0xfffffffb
c0017c71:	89 fb                	mov    ebx,edi
c0017c73:	80 fb 09             	cmp    bl,0x9
c0017c76:	0f 84 09 01 00 00    	je     c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017c7c:	31 c0                	xor    eax,eax
c0017c7e:	89 eb                	mov    ebx,ebp
c0017c80:	0f b6 fb             	movzx  edi,bl
c0017c83:	eb 30                	jmp    c0017cb5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0017c85:	31 c0                	xor    eax,eax
c0017c87:	80 f9 06             	cmp    cl,0x6
c0017c8a:	75 f2                	jne    c0017c7e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c8c:	80 fa 0a             	cmp    dl,0xa
c0017c8f:	77 ed                	ja     c0017c7e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c91:	bf de 05 00 00       	mov    edi,0x5de
c0017c96:	0f a3 d7             	bt     edi,edx
c0017c99:	73 e3                	jae    c0017c7e <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0017c9b:	b8 00 be 02 c0       	mov    eax,0xc002be00
c0017ca0:	e9 e0 00 00 00       	jmp    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017ca5:	39 c7                	cmp    edi,eax
c0017ca7:	0f 84 d3 00 00 00    	je     c0017d80 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017cad:	40                   	inc    eax
c0017cae:	3d d0 00 00 00       	cmp    eax,0xd0
c0017cb3:	74 09                	je     c0017cbe <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0017cb5:	89 f3                	mov    ebx,esi
c0017cb7:	80 fb 0f             	cmp    bl,0xf
c0017cba:	75 f1                	jne    c0017cad <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0017cbc:	eb e7                	jmp    c0017ca5 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0017cbe:	80 f9 10             	cmp    cl,0x10
c0017cc1:	75 14                	jne    c0017cd7 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0017cc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0017cc6:	83 e0 fb             	and    eax,0xfffffffb
c0017cc9:	3c 02                	cmp    al,0x2
c0017ccb:	76 34                	jbe    c0017d01 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0017ccd:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017cd2:	80 fa 02             	cmp    dl,0x2
c0017cd5:	eb 24                	jmp    c0017cfb <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0017cd7:	80 f9 11             	cmp    cl,0x11
c0017cda:	75 13                	jne    c0017cef <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0017cdc:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017ce1:	80 fa 03             	cmp    dl,0x3
c0017ce4:	0f 85 9b 00 00 00    	jne    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017cea:	e9 91 00 00 00       	jmp    c0017d80 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0017cef:	80 f9 12             	cmp    cl,0x12
c0017cf2:	75 14                	jne    c0017d08 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0017cf4:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017cf9:	fe ca                	dec    dl
c0017cfb:	0f 85 84 00 00 00    	jne    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d01:	b8 20 be 02 c0       	mov    eax,0xc002be20
c0017d06:	eb 7d                	jmp    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d08:	80 f9 14             	cmp    cl,0x14
c0017d0b:	75 12                	jne    c0017d1f <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0017d0d:	4a                   	dec    edx
c0017d0e:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017d13:	80 fa 01             	cmp    dl,0x1
c0017d16:	77 6d                	ja     c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d18:	b8 30 be 02 c0       	mov    eax,0xc002be30
c0017d1d:	eb 66                	jmp    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d1f:	80 f9 15             	cmp    cl,0x15
c0017d22:	75 31                	jne    c0017d55 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0017d24:	b8 40 be 02 c0       	mov    eax,0xc002be40
c0017d29:	80 fa 01             	cmp    dl,0x1
c0017d2c:	74 57                	je     c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d2e:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017d33:	80 fa 13             	cmp    dl,0x13
c0017d36:	76 0c                	jbe    c0017d44 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0017d38:	80 fa 30             	cmp    dl,0x30
c0017d3b:	75 48                	jne    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d3d:	b8 60 be 02 c0       	mov    eax,0xc002be60
c0017d42:	eb 41                	jmp    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d44:	b9 04 00 09 00       	mov    ecx,0x90004
c0017d49:	0f a3 d1             	bt     ecx,edx
c0017d4c:	73 37                	jae    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d4e:	b8 50 be 02 c0       	mov    eax,0xc002be50
c0017d53:	eb 30                	jmp    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d55:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017d5a:	80 f9 16             	cmp    cl,0x16
c0017d5d:	75 26                	jne    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d5f:	b8 70 be 02 c0       	mov    eax,0xc002be70
c0017d64:	84 d2                	test   dl,dl
c0017d66:	74 1d                	je     c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d68:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017d6d:	80 fa 30             	cmp    dl,0x30
c0017d70:	75 13                	jne    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d72:	b8 80 be 02 c0       	mov    eax,0xc002be80
c0017d77:	eb 0c                	jmp    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d79:	b8 a0 bd 02 c0       	mov    eax,0xc002bda0
c0017d7e:	eb 05                	jmp    c0017d85 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0017d80:	b8 10 be 02 c0       	mov    eax,0xc002be10
c0017d85:	5b                   	pop    ebx
c0017d86:	5e                   	pop    esi
c0017d87:	5f                   	pop    edi
c0017d88:	5d                   	pop    ebp
c0017d89:	c3                   	ret    

c0017d8a <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0017d8a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017d8e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017d92:	80 f9 04             	cmp    cl,0x4
c0017d95:	75 6b                	jne    c0017e02 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0017d97:	b8 00 bc 02 c0       	mov    eax,0xc002bc00
c0017d9c:	80 fa 01             	cmp    dl,0x1
c0017d9f:	0f 86 92 02 00 00    	jbe    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017da5:	b8 10 bc 02 c0       	mov    eax,0xc002bc10
c0017daa:	80 fa 02             	cmp    dl,0x2
c0017dad:	0f 84 84 02 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017db3:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017db8:	80 fa 03             	cmp    dl,0x3
c0017dbb:	0f 84 76 02 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dc1:	b8 30 bc 02 c0       	mov    eax,0xc002bc30
c0017dc6:	80 fa 04             	cmp    dl,0x4
c0017dc9:	0f 84 68 02 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dcf:	b8 40 bc 02 c0       	mov    eax,0xc002bc40
c0017dd4:	80 fa 05             	cmp    dl,0x5
c0017dd7:	0f 84 5a 02 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ddd:	b8 20 bc 02 c0       	mov    eax,0xc002bc20
c0017de2:	80 fa 07             	cmp    dl,0x7
c0017de5:	0f 84 4c 02 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017deb:	83 ea 08             	sub    edx,0x8
c0017dee:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017df3:	80 fa 01             	cmp    dl,0x1
c0017df6:	0f 87 3b 02 00 00    	ja     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017dfc:	b8 50 bc 02 c0       	mov    eax,0xc002bc50
c0017e01:	c3                   	ret    
c0017e02:	80 f9 05             	cmp    cl,0x5
c0017e05:	75 45                	jne    c0017e4c <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0017e07:	8d 4a ff             	lea    ecx,[edx-0x1]
c0017e0a:	b8 60 bc 02 c0       	mov    eax,0xc002bc60
c0017e0f:	80 f9 02             	cmp    cl,0x2
c0017e12:	0f 86 1f 02 00 00    	jbe    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e18:	80 fa 04             	cmp    dl,0x4
c0017e1b:	0f 84 f3 01 00 00    	je     c0018014 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0017e21:	80 fa 07             	cmp    dl,0x7
c0017e24:	0f 84 0d 02 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e2a:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0017e2f:	80 fa 08             	cmp    dl,0x8
c0017e32:	0f 84 ff 01 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e38:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017e3d:	80 fa 09             	cmp    dl,0x9
c0017e40:	0f 85 f1 01 00 00    	jne    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e46:	b8 80 bc 02 c0       	mov    eax,0xc002bc80
c0017e4b:	c3                   	ret    
c0017e4c:	80 f9 06             	cmp    cl,0x6
c0017e4f:	0f 85 85 01 00 00    	jne    c0017fda <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0017e55:	b8 90 bc 02 c0       	mov    eax,0xc002bc90
c0017e5a:	80 fa 01             	cmp    dl,0x1
c0017e5d:	0f 84 d4 01 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e63:	8d 42 fb             	lea    eax,[edx-0x5]
c0017e66:	3c 01                	cmp    al,0x1
c0017e68:	0f 86 ac 01 00 00    	jbe    c001801a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e6e:	80 fa 03             	cmp    dl,0x3
c0017e71:	0f 84 a3 01 00 00    	je     c001801a <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0017e77:	8d 4a f9             	lea    ecx,[edx-0x7]
c0017e7a:	b8 b0 bc 02 c0       	mov    eax,0xc002bcb0
c0017e7f:	80 f9 01             	cmp    cl,0x1
c0017e82:	0f 86 af 01 00 00    	jbe    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e88:	80 fa 09             	cmp    dl,0x9
c0017e8b:	0f 84 8f 01 00 00    	je     c0018020 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0017e91:	8d 4a f6             	lea    ecx,[edx-0xa]
c0017e94:	80 f9 01             	cmp    cl,0x1
c0017e97:	0f 86 9a 01 00 00    	jbe    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017e9d:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017ea2:	80 fa 0d             	cmp    dl,0xd
c0017ea5:	0f 84 8c 01 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eab:	b8 d0 bc 02 c0       	mov    eax,0xc002bcd0
c0017eb0:	80 fa 0e             	cmp    dl,0xe
c0017eb3:	0f 84 7e 01 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017eb9:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017ebe:	80 fa 0f             	cmp    dl,0xf
c0017ec1:	0f 84 70 01 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ec7:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0017ecc:	80 fa 15             	cmp    dl,0x15
c0017ecf:	0f 84 62 01 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ed5:	8d 4a ea             	lea    ecx,[edx-0x16]
c0017ed8:	b8 e0 bc 02 c0       	mov    eax,0xc002bce0
c0017edd:	80 f9 01             	cmp    cl,0x1
c0017ee0:	0f 86 51 01 00 00    	jbe    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ee6:	80 fa 1a             	cmp    dl,0x1a
c0017ee9:	0f 84 37 01 00 00    	je     c0018026 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0017eef:	80 fa 1c             	cmp    dl,0x1c
c0017ef2:	0f 84 34 01 00 00    	je     c001802c <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0017ef8:	80 fa 1d             	cmp    dl,0x1d
c0017efb:	0f 84 36 01 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f01:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017f06:	80 fa 25             	cmp    dl,0x25
c0017f09:	0f 84 28 01 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f0f:	8d 4a da             	lea    ecx,[edx-0x26]
c0017f12:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017f17:	80 f9 01             	cmp    cl,0x1
c0017f1a:	0f 86 17 01 00 00    	jbe    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f20:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017f25:	80 fa 2a             	cmp    dl,0x2a
c0017f28:	0f 84 09 01 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f2e:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017f33:	80 fa 2c             	cmp    dl,0x2c
c0017f36:	0f 84 fb 00 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f3c:	b8 20 bd 02 c0       	mov    eax,0xc002bd20
c0017f41:	80 fa 2d             	cmp    dl,0x2d
c0017f44:	0f 84 ed 00 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f4a:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c0017f4f:	80 fa 2e             	cmp    dl,0x2e
c0017f52:	0f 84 df 00 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f58:	b8 10 bd 02 c0       	mov    eax,0xc002bd10
c0017f5d:	80 fa 2f             	cmp    dl,0x2f
c0017f60:	0f 84 d1 00 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f66:	8d 4a cb             	lea    ecx,[edx-0x35]
c0017f69:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0017f6e:	80 f9 01             	cmp    cl,0x1
c0017f71:	0f 86 c0 00 00 00    	jbe    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f77:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017f7c:	80 fa 37             	cmp    dl,0x37
c0017f7f:	0f 84 b2 00 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f85:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017f8a:	80 fa 3a             	cmp    dl,0x3a
c0017f8d:	0f 84 a4 00 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017f93:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0017f98:	80 fa 3c             	cmp    dl,0x3c
c0017f9b:	0f 84 96 00 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fa1:	b8 60 bd 02 c0       	mov    eax,0xc002bd60
c0017fa6:	80 fa 3d             	cmp    dl,0x3d
c0017fa9:	0f 84 88 00 00 00    	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017faf:	b8 40 bd 02 c0       	mov    eax,0xc002bd40
c0017fb4:	80 fa 3e             	cmp    dl,0x3e
c0017fb7:	74 7e                	je     c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fb9:	8d 42 bb             	lea    eax,[edx-0x45]
c0017fbc:	3c 01                	cmp    al,0x1
c0017fbe:	76 72                	jbe    c0018032 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017fc0:	80 fa 3f             	cmp    dl,0x3f
c0017fc3:	74 6d                	je     c0018032 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0017fc5:	80 fa 4a             	cmp    dl,0x4a
c0017fc8:	74 0a                	je     c0017fd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0017fca:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017fcf:	80 fa 4d             	cmp    dl,0x4d
c0017fd2:	75 63                	jne    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fd4:	b8 30 bd 02 c0       	mov    eax,0xc002bd30
c0017fd9:	c3                   	ret    
c0017fda:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0017fdf:	80 f9 0b             	cmp    cl,0xb
c0017fe2:	75 0a                	jne    c0017fee <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0017fe4:	fe ca                	dec    dl
c0017fe6:	75 4f                	jne    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017fe8:	b8 70 bd 02 c0       	mov    eax,0xc002bd70
c0017fed:	c3                   	ret    
c0017fee:	80 f9 0f             	cmp    cl,0xf
c0017ff1:	75 44                	jne    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ff3:	b8 80 bd 02 c0       	mov    eax,0xc002bd80
c0017ff8:	80 fa 02             	cmp    dl,0x2
c0017ffb:	76 3a                	jbe    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0017ffd:	8d 42 fd             	lea    eax,[edx-0x3]
c0018000:	3c 01                	cmp    al,0x1
c0018002:	76 0a                	jbe    c001800e <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018004:	b8 be a0 02 c0       	mov    eax,0xc002a0be
c0018009:	80 fa 06             	cmp    dl,0x6
c001800c:	75 29                	jne    c0018037 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001800e:	b8 90 bd 02 c0       	mov    eax,0xc002bd90
c0018013:	c3                   	ret    
c0018014:	b8 70 bc 02 c0       	mov    eax,0xc002bc70
c0018019:	c3                   	ret    
c001801a:	b8 a0 bc 02 c0       	mov    eax,0xc002bca0
c001801f:	c3                   	ret    
c0018020:	b8 c0 bc 02 c0       	mov    eax,0xc002bcc0
c0018025:	c3                   	ret    
c0018026:	b8 f0 bc 02 c0       	mov    eax,0xc002bcf0
c001802b:	c3                   	ret    
c001802c:	b8 00 bd 02 c0       	mov    eax,0xc002bd00
c0018031:	c3                   	ret    
c0018032:	b8 50 bd 02 c0       	mov    eax,0xc002bd50
c0018037:	c3                   	ret    

c0018038 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018038:	60                   	pusha  
c0018039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001803d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018041:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018045:	9c                   	pushf  
c0018046:	fa                   	cli    
c0018047:	0f 09                	wbinvd 
c0018049:	0f 30                	wrmsr  
c001804b:	9d                   	popf   
c001804c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018050:	89 02                	mov    DWORD PTR [edx],eax
c0018052:	61                   	popa   
c0018053:	c3                   	ret    

c0018054 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018054:	60                   	pusha  
c0018055:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018059:	9c                   	pushf  
c001805a:	fa                   	cli    
c001805b:	0f 09                	wbinvd 
c001805d:	31 c0                	xor    eax,eax
c001805f:	31 d2                	xor    edx,edx
c0018061:	0f 32                	rdmsr  
c0018063:	9d                   	popf   
c0018064:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018068:	89 02                	mov    DWORD PTR [edx],eax
c001806a:	61                   	popa   
c001806b:	c3                   	ret    

c001806c <CPU::AMD_K6_writeback(int, int, int)>:
c001806c:	56                   	push   esi
c001806d:	53                   	push   ebx
c001806e:	83 ec 10             	sub    esp,0x10
c0018071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018075:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001807a:	75 5d                	jne    c00180d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001807c:	83 f8 08             	cmp    eax,0x8
c001807f:	75 09                	jne    c001808a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018081:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018086:	7e 13                	jle    c001809b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018088:	eb 30                	jmp    c00180ba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001808a:	83 f8 06             	cmp    eax,0x6
c001808d:	7c 4a                	jl     c00180d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001808f:	83 f8 07             	cmp    eax,0x7
c0018092:	7e 07                	jle    c001809b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018094:	83 f8 09             	cmp    eax,0x9
c0018097:	74 21                	je     c00180ba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018099:	eb 3e                	jmp    c00180d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001809b:	89 e6                	mov    esi,esp
c001809d:	8b 1d c4 c9 02 c0    	mov    ebx,DWORD PTR ds:0xc002c9c4
c00180a3:	56                   	push   esi
c00180a4:	c1 eb 15             	shr    ebx,0x15
c00180a7:	68 82 00 00 c0       	push   0xc0000082
c00180ac:	83 e3 7e             	and    ebx,0x7e
c00180af:	e8 a0 ff ff ff       	call   c0018054 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00180b4:	56                   	push   esi
c00180b5:	6a 00                	push   0x0
c00180b7:	53                   	push   ebx
c00180b8:	eb 12                	jmp    c00180cc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00180ba:	89 e3                	mov    ebx,esp
c00180bc:	53                   	push   ebx
c00180bd:	68 82 00 00 c0       	push   0xc0000082
c00180c2:	e8 8d ff ff ff       	call   c0018054 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00180c7:	53                   	push   ebx
c00180c8:	6a 00                	push   0x0
c00180ca:	6a 00                	push   0x0
c00180cc:	68 82 00 00 c0       	push   0xc0000082
c00180d1:	e8 62 ff ff ff       	call   c0018038 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00180d6:	83 c4 18             	add    esp,0x18
c00180d9:	83 c4 10             	add    esp,0x10
c00180dc:	5b                   	pop    ebx
c00180dd:	5e                   	pop    esi
c00180de:	c3                   	ret    
c00180df:	90                   	nop

c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00180e0:	55                   	push   ebp
c00180e1:	57                   	push   edi
c00180e2:	56                   	push   esi
c00180e3:	53                   	push   ebx
c00180e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180e8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00180ec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00180f0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00180f4:	39 05 a0 be 02 c0    	cmp    DWORD PTR ds:0xc002bea0,eax
c00180fa:	75 23                	jne    c001811f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00180fc:	a1 ac d4 02 c0       	mov    eax,ds:0xc002d4ac
c0018101:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018105:	89 06                	mov    DWORD PTR [esi],eax
c0018107:	a1 a8 d4 02 c0       	mov    eax,ds:0xc002d4a8
c001810c:	89 07                	mov    DWORD PTR [edi],eax
c001810e:	a1 a4 d4 02 c0       	mov    eax,ds:0xc002d4a4
c0018113:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018116:	a1 a0 d4 02 c0       	mov    eax,ds:0xc002d4a0
c001811b:	89 02                	mov    DWORD PTR [edx],eax
c001811d:	eb 3f                	jmp    c001815e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001811f:	31 c9                	xor    ecx,ecx
c0018121:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018125:	0f a2                	cpuid  
c0018127:	89 06                	mov    DWORD PTR [esi],eax
c0018129:	89 1f                	mov    DWORD PTR [edi],ebx
c001812b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001812f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018132:	89 10                	mov    DWORD PTR [eax],edx
c0018134:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018138:	a3 a0 be 02 c0       	mov    ds:0xc002bea0,eax
c001813d:	8b 06                	mov    eax,DWORD PTR [esi]
c001813f:	a3 ac d4 02 c0       	mov    ds:0xc002d4ac,eax
c0018144:	8b 07                	mov    eax,DWORD PTR [edi]
c0018146:	a3 a8 d4 02 c0       	mov    ds:0xc002d4a8,eax
c001814b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001814e:	a3 a4 d4 02 c0       	mov    ds:0xc002d4a4,eax
c0018153:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018157:	8b 00                	mov    eax,DWORD PTR [eax]
c0018159:	a3 a0 d4 02 c0       	mov    ds:0xc002d4a0,eax
c001815e:	5b                   	pop    ebx
c001815f:	5e                   	pop    esi
c0018160:	5f                   	pop    edi
c0018161:	5d                   	pop    ebp
c0018162:	c3                   	ret    
c0018163:	90                   	nop

c0018164 <CPU::cpuidCheckEDX(unsigned int)>:
c0018164:	83 ec 10             	sub    esp,0x10
c0018167:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001816b:	50                   	push   eax
c001816c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018170:	50                   	push   eax
c0018171:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018175:	50                   	push   eax
c0018176:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001817a:	50                   	push   eax
c001817b:	6a 01                	push   0x1
c001817d:	e8 5e ff ff ff       	call   c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018182:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018186:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001818a:	0f 95 c0             	setne  al
c001818d:	83 c4 24             	add    esp,0x24
c0018190:	c3                   	ret    
c0018191:	90                   	nop

c0018192 <CPU::cpuidCheckECX(unsigned int)>:
c0018192:	83 ec 10             	sub    esp,0x10
c0018195:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018199:	50                   	push   eax
c001819a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001819e:	50                   	push   eax
c001819f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181a3:	50                   	push   eax
c00181a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181a8:	50                   	push   eax
c00181a9:	6a 01                	push   0x1
c00181ab:	e8 30 ff ff ff       	call   c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181b4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00181b8:	0f 95 c0             	setne  al
c00181bb:	83 c4 24             	add    esp,0x24
c00181be:	c3                   	ret    
c00181bf:	90                   	nop

c00181c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00181c0:	83 ec 10             	sub    esp,0x10
c00181c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181c7:	50                   	push   eax
c00181c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181cc:	50                   	push   eax
c00181cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181d1:	50                   	push   eax
c00181d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181d6:	50                   	push   eax
c00181d7:	6a 07                	push   0x7
c00181d9:	e8 02 ff ff ff       	call   c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00181de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181e2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00181e6:	0f 95 c0             	setne  al
c00181e9:	83 c4 24             	add    esp,0x24
c00181ec:	c3                   	ret    
c00181ed:	90                   	nop

c00181ee <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00181ee:	83 ec 10             	sub    esp,0x10
c00181f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181f5:	50                   	push   eax
c00181f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181fa:	50                   	push   eax
c00181fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00181ff:	50                   	push   eax
c0018200:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018204:	50                   	push   eax
c0018205:	6a 07                	push   0x7
c0018207:	e8 d4 fe ff ff       	call   c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001820c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018210:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018214:	0f 95 c0             	setne  al
c0018217:	83 c4 24             	add    esp,0x24
c001821a:	c3                   	ret    
c001821b:	90                   	nop

c001821c <CPU::CPU()>:
c001821c:	83 ec 0c             	sub    esp,0xc
c001821f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018223:	83 ec 08             	sub    esp,0x8
c0018226:	68 be a0 02 c0       	push   0xc002a0be
c001822b:	50                   	push   eax
c001822c:	e8 6f bb ff ff       	call   c0013da0 <Device::Device(char const*)>
c0018231:	83 c4 10             	add    esp,0x10
c0018234:	ba 98 a1 02 c0       	mov    edx,0xc002a198
c0018239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001823d:	89 10                	mov    DWORD PTR [eax],edx
c001823f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018243:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001824d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018251:	05 78 01 00 00       	add    eax,0x178
c0018256:	83 ec 0c             	sub    esp,0xc
c0018259:	50                   	push   eax
c001825a:	e8 8d 6a ff ff       	call   c000ecec <GDT::GDT()>
c001825f:	83 c4 10             	add    esp,0x10
c0018262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018266:	05 7c 09 00 00       	add    eax,0x97c
c001826b:	83 ec 0c             	sub    esp,0xc
c001826e:	50                   	push   eax
c001826f:	e8 da 6c ff ff       	call   c000ef4e <IDT::IDT()>
c0018274:	83 c4 10             	add    esp,0x10
c0018277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001827b:	05 7c 11 00 00       	add    eax,0x117c
c0018280:	83 ec 0c             	sub    esp,0xc
c0018283:	50                   	push   eax
c0018284:	e8 79 8e ff ff       	call   c0011102 <TSS::TSS()>
c0018289:	83 c4 10             	add    esp,0x10
c001828c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018290:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001829b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c00182a5:	90                   	nop
c00182a6:	83 c4 0c             	add    esp,0xc
c00182a9:	c3                   	ret    

c00182aa <CPU::displayFeatures()>:
c00182aa:	53                   	push   ebx
c00182ab:	83 ec 10             	sub    esp,0x10
c00182ae:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00182b2:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c00182b8:	68 cc 9d 02 c0       	push   0xc0029dcc
c00182bd:	e8 ff a4 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00182c2:	59                   	pop    ecx
c00182c3:	58                   	pop    eax
c00182c4:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c00182ca:	50                   	push   eax
c00182cb:	68 dd 9d 02 c0       	push   0xc0029ddd
c00182d0:	e8 ec a4 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00182d5:	58                   	pop    eax
c00182d6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182dc:	5a                   	pop    edx
c00182dd:	c1 e8 0e             	shr    eax,0xe
c00182e0:	0f b6 c0             	movzx  eax,al
c00182e3:	50                   	push   eax
c00182e4:	68 ee 9d 02 c0       	push   0xc0029dee
c00182e9:	e8 d3 a4 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00182ee:	59                   	pop    ecx
c00182ef:	58                   	pop    eax
c00182f0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00182f6:	66 c1 e8 06          	shr    ax,0x6
c00182fa:	0f b6 c0             	movzx  eax,al
c00182fd:	50                   	push   eax
c00182fe:	68 ff 9d 02 c0       	push   0xc0029dff
c0018303:	e8 b9 a4 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0018308:	c7 04 24 9b a2 02 c0 	mov    DWORD PTR [esp],0xc002a29b
c001830f:	e8 ad a4 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0018314:	83 c4 10             	add    esp,0x10
c0018317:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c001831c:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018323:	74 05                	je     c001832a <CPU::displayFeatures()+0x80>
c0018325:	b8 98 89 02 c0       	mov    eax,0xc0028998
c001832a:	52                   	push   edx
c001832b:	52                   	push   edx
c001832c:	50                   	push   eax
c001832d:	68 10 9e 02 c0       	push   0xc0029e10
c0018332:	e8 8a a4 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0018337:	83 c4 10             	add    esp,0x10
c001833a:	b8 98 89 02 c0       	mov    eax,0xc0028998
c001833f:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018346:	78 05                	js     c001834d <CPU::displayFeatures()+0xa3>
c0018348:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c001834d:	51                   	push   ecx
c001834e:	51                   	push   ecx
c001834f:	50                   	push   eax
c0018350:	68 27 9e 02 c0       	push   0xc0029e27
c0018355:	e8 67 a4 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001835a:	83 c4 10             	add    esp,0x10
c001835d:	b8 98 89 02 c0       	mov    eax,0xc0028998
c0018362:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018369:	75 05                	jne    c0018370 <CPU::displayFeatures()+0xc6>
c001836b:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c0018370:	52                   	push   edx
c0018371:	52                   	push   edx
c0018372:	50                   	push   eax
c0018373:	68 3e 9e 02 c0       	push   0xc0029e3e
c0018378:	e8 44 a4 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001837d:	83 c4 10             	add    esp,0x10
c0018380:	b8 98 89 02 c0       	mov    eax,0xc0028998
c0018385:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001838c:	75 05                	jne    c0018393 <CPU::displayFeatures()+0xe9>
c001838e:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c0018393:	51                   	push   ecx
c0018394:	51                   	push   ecx
c0018395:	50                   	push   eax
c0018396:	68 55 9e 02 c0       	push   0xc0029e55
c001839b:	e8 21 a4 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00183a0:	83 c4 10             	add    esp,0x10
c00183a3:	b8 98 89 02 c0       	mov    eax,0xc0028998
c00183a8:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00183af:	75 05                	jne    c00183b6 <CPU::displayFeatures()+0x10c>
c00183b1:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c00183b6:	52                   	push   edx
c00183b7:	52                   	push   edx
c00183b8:	50                   	push   eax
c00183b9:	68 6c 9e 02 c0       	push   0xc0029e6c
c00183be:	e8 fe a3 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00183c3:	83 c4 10             	add    esp,0x10
c00183c6:	b8 98 89 02 c0       	mov    eax,0xc0028998
c00183cb:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00183d2:	75 05                	jne    c00183d9 <CPU::displayFeatures()+0x12f>
c00183d4:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c00183d9:	51                   	push   ecx
c00183da:	51                   	push   ecx
c00183db:	50                   	push   eax
c00183dc:	68 83 9e 02 c0       	push   0xc0029e83
c00183e1:	e8 db a3 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00183e6:	83 c4 10             	add    esp,0x10
c00183e9:	b8 98 89 02 c0       	mov    eax,0xc0028998
c00183ee:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00183f5:	75 05                	jne    c00183fc <CPU::displayFeatures()+0x152>
c00183f7:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c00183fc:	52                   	push   edx
c00183fd:	52                   	push   edx
c00183fe:	50                   	push   eax
c00183ff:	68 9a 9e 02 c0       	push   0xc0029e9a
c0018404:	e8 b8 a3 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0018409:	83 c4 10             	add    esp,0x10
c001840c:	b8 98 89 02 c0       	mov    eax,0xc0028998
c0018411:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018418:	75 05                	jne    c001841f <CPU::displayFeatures()+0x175>
c001841a:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c001841f:	51                   	push   ecx
c0018420:	51                   	push   ecx
c0018421:	50                   	push   eax
c0018422:	68 b1 9e 02 c0       	push   0xc0029eb1
c0018427:	e8 95 a3 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001842c:	83 c4 10             	add    esp,0x10
c001842f:	b8 98 89 02 c0       	mov    eax,0xc0028998
c0018434:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001843b:	75 05                	jne    c0018442 <CPU::displayFeatures()+0x198>
c001843d:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c0018442:	52                   	push   edx
c0018443:	52                   	push   edx
c0018444:	50                   	push   eax
c0018445:	68 c8 9e 02 c0       	push   0xc0029ec8
c001844a:	e8 72 a3 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001844f:	83 c4 10             	add    esp,0x10
c0018452:	b8 98 89 02 c0       	mov    eax,0xc0028998
c0018457:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c001845e:	75 05                	jne    c0018465 <CPU::displayFeatures()+0x1bb>
c0018460:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c0018465:	51                   	push   ecx
c0018466:	51                   	push   ecx
c0018467:	50                   	push   eax
c0018468:	68 df 9e 02 c0       	push   0xc0029edf
c001846d:	e8 4f a3 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0018472:	83 c4 10             	add    esp,0x10
c0018475:	b8 98 89 02 c0       	mov    eax,0xc0028998
c001847a:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018481:	75 05                	jne    c0018488 <CPU::displayFeatures()+0x1de>
c0018483:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c0018488:	52                   	push   edx
c0018489:	52                   	push   edx
c001848a:	50                   	push   eax
c001848b:	68 f6 9e 02 c0       	push   0xc0029ef6
c0018490:	e8 2c a3 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0018495:	83 c4 10             	add    esp,0x10
c0018498:	b8 98 89 02 c0       	mov    eax,0xc0028998
c001849d:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00184a4:	75 05                	jne    c00184ab <CPU::displayFeatures()+0x201>
c00184a6:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c00184ab:	51                   	push   ecx
c00184ac:	51                   	push   ecx
c00184ad:	50                   	push   eax
c00184ae:	68 0d 9f 02 c0       	push   0xc0029f0d
c00184b3:	e8 09 a3 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00184b8:	83 c4 10             	add    esp,0x10
c00184bb:	b8 98 89 02 c0       	mov    eax,0xc0028998
c00184c0:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c00184c7:	75 05                	jne    c00184ce <CPU::displayFeatures()+0x224>
c00184c9:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c00184ce:	52                   	push   edx
c00184cf:	52                   	push   edx
c00184d0:	50                   	push   eax
c00184d1:	68 24 9f 02 c0       	push   0xc0029f24
c00184d6:	e8 e6 a2 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00184db:	83 c4 10             	add    esp,0x10
c00184de:	b8 98 89 02 c0       	mov    eax,0xc0028998
c00184e3:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00184ea:	78 05                	js     c00184f1 <CPU::displayFeatures()+0x247>
c00184ec:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c00184f1:	51                   	push   ecx
c00184f2:	51                   	push   ecx
c00184f3:	50                   	push   eax
c00184f4:	68 3b 9f 02 c0       	push   0xc0029f3b
c00184f9:	e8 c3 a2 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00184fe:	83 c4 10             	add    esp,0x10
c0018501:	b8 98 89 02 c0       	mov    eax,0xc0028998
c0018506:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c001850d:	75 05                	jne    c0018514 <CPU::displayFeatures()+0x26a>
c001850f:	b8 9c 89 02 c0       	mov    eax,0xc002899c
c0018514:	52                   	push   edx
c0018515:	52                   	push   edx
c0018516:	50                   	push   eax
c0018517:	68 52 9f 02 c0       	push   0xc0029f52
c001851c:	e8 a0 a2 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0018521:	83 c4 18             	add    esp,0x18
c0018524:	5b                   	pop    ebx
c0018525:	c3                   	ret    

c0018526 <CPU::detectFeatures()>:
c0018526:	55                   	push   ebp
c0018527:	57                   	push   edi
c0018528:	56                   	push   esi
c0018529:	53                   	push   ebx
c001852a:	83 ec 50             	sub    esp,0x50
c001852d:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018531:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c001853b:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018542:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018548:	6a 0d                	push   0xd
c001854a:	6a 00                	push   0x0
c001854c:	57                   	push   edi
c001854d:	e8 39 81 fe ff       	call   c000068b <memset>
c0018552:	83 c4 10             	add    esp,0x10
c0018555:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001855a:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018561:	0f 84 20 09 00 00    	je     c0018e87 <CPU::detectFeatures()+0x961>
c0018567:	83 ec 0c             	sub    esp,0xc
c001856a:	6a 10                	push   0x10
c001856c:	e8 f3 fb ff ff       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c0018571:	83 e0 01             	and    eax,0x1
c0018574:	8d 14 00             	lea    edx,[eax+eax*1]
c0018577:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001857d:	83 e0 fd             	and    eax,0xfffffffd
c0018580:	09 d0                	or     eax,edx
c0018582:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018588:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001858f:	e8 d0 fb ff ff       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c0018594:	83 e0 01             	and    eax,0x1
c0018597:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001859e:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185a4:	83 e0 fb             	and    eax,0xfffffffb
c00185a7:	09 d0                	or     eax,edx
c00185a9:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185af:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00185b6:	e8 a9 fb ff ff       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c00185bb:	83 e0 01             	and    eax,0x1
c00185be:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00185c5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185cb:	83 e0 f7             	and    eax,0xfffffff7
c00185ce:	09 d0                	or     eax,edx
c00185d0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185d6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00185dd:	e8 82 fb ff ff       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c00185e2:	83 e0 01             	and    eax,0x1
c00185e5:	c1 e0 04             	shl    eax,0x4
c00185e8:	88 c2                	mov    dl,al
c00185ea:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00185f0:	83 e0 ef             	and    eax,0xffffffef
c00185f3:	09 d0                	or     eax,edx
c00185f5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00185fb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018602:	e8 5d fb ff ff       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c0018607:	83 e0 01             	and    eax,0x1
c001860a:	c1 e0 05             	shl    eax,0x5
c001860d:	88 c2                	mov    dl,al
c001860f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018615:	83 e0 df             	and    eax,0xffffffdf
c0018618:	09 d0                	or     eax,edx
c001861a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018620:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018627:	e8 38 fb ff ff       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c001862c:	83 e0 01             	and    eax,0x1
c001862f:	8d 14 00             	lea    edx,[eax+eax*1]
c0018632:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018638:	83 e0 fd             	and    eax,0xfffffffd
c001863b:	09 d0                	or     eax,edx
c001863d:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018643:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001864a:	e8 15 fb ff ff       	call   c0018164 <CPU::cpuidCheckEDX(unsigned int)>
c001864f:	83 e0 01             	and    eax,0x1
c0018652:	c1 e0 06             	shl    eax,0x6
c0018655:	88 c2                	mov    dl,al
c0018657:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001865d:	83 e0 bf             	and    eax,0xffffffbf
c0018660:	09 d0                	or     eax,edx
c0018662:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018668:	58                   	pop    eax
c0018669:	8d 74 24 28          	lea    esi,[esp+0x28]
c001866d:	56                   	push   esi
c001866e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018672:	55                   	push   ebp
c0018673:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018677:	50                   	push   eax
c0018678:	8d 54 24 28          	lea    edx,[esp+0x28]
c001867c:	52                   	push   edx
c001867d:	6a 00                	push   0x0
c001867f:	e8 5c fa ff ff       	call   c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018684:	83 c4 1c             	add    esp,0x1c
c0018687:	6a 04                	push   0x4
c0018689:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001868d:	50                   	push   eax
c001868e:	57                   	push   edi
c001868f:	e8 c1 7f fe ff       	call   c0000655 <memcpy>
c0018694:	83 c4 0c             	add    esp,0xc
c0018697:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c001869d:	6a 04                	push   0x4
c001869f:	56                   	push   esi
c00186a0:	50                   	push   eax
c00186a1:	e8 af 7f fe ff       	call   c0000655 <memcpy>
c00186a6:	83 c4 0c             	add    esp,0xc
c00186a9:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00186af:	6a 04                	push   0x4
c00186b1:	55                   	push   ebp
c00186b2:	50                   	push   eax
c00186b3:	e8 9d 7f fe ff       	call   c0000655 <memcpy>
c00186b8:	58                   	pop    eax
c00186b9:	5a                   	pop    edx
c00186ba:	68 69 9f 02 c0       	push   0xc0029f69
c00186bf:	57                   	push   edi
c00186c0:	e8 b6 80 fe ff       	call   c000077b <strcmp>
c00186c5:	83 c4 10             	add    esp,0x10
c00186c8:	85 c0                	test   eax,eax
c00186ca:	75 0f                	jne    c00186db <CPU::detectFeatures()+0x1b5>
c00186cc:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00186d6:	e9 22 02 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c00186db:	50                   	push   eax
c00186dc:	50                   	push   eax
c00186dd:	68 76 9f 02 c0       	push   0xc0029f76
c00186e2:	57                   	push   edi
c00186e3:	e8 93 80 fe ff       	call   c000077b <strcmp>
c00186e8:	83 c4 10             	add    esp,0x10
c00186eb:	85 c0                	test   eax,eax
c00186ed:	74 dd                	je     c00186cc <CPU::detectFeatures()+0x1a6>
c00186ef:	51                   	push   ecx
c00186f0:	51                   	push   ecx
c00186f1:	68 83 9f 02 c0       	push   0xc0029f83
c00186f6:	57                   	push   edi
c00186f7:	e8 7f 80 fe ff       	call   c000077b <strcmp>
c00186fc:	83 c4 10             	add    esp,0x10
c00186ff:	85 c0                	test   eax,eax
c0018701:	74 2a                	je     c001872d <CPU::detectFeatures()+0x207>
c0018703:	52                   	push   edx
c0018704:	52                   	push   edx
c0018705:	68 90 9f 02 c0       	push   0xc0029f90
c001870a:	57                   	push   edi
c001870b:	e8 6b 80 fe ff       	call   c000077b <strcmp>
c0018710:	83 c4 10             	add    esp,0x10
c0018713:	85 c0                	test   eax,eax
c0018715:	74 16                	je     c001872d <CPU::detectFeatures()+0x207>
c0018717:	50                   	push   eax
c0018718:	50                   	push   eax
c0018719:	68 9d 9f 02 c0       	push   0xc0029f9d
c001871e:	57                   	push   edi
c001871f:	e8 57 80 fe ff       	call   c000077b <strcmp>
c0018724:	83 c4 10             	add    esp,0x10
c0018727:	85 c0                	test   eax,eax
c0018729:	74 48                	je     c0018773 <CPU::detectFeatures()+0x24d>
c001872b:	eb 0f                	jmp    c001873c <CPU::detectFeatures()+0x216>
c001872d:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018737:	e9 c1 01 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c001873c:	50                   	push   eax
c001873d:	50                   	push   eax
c001873e:	68 aa 9f 02 c0       	push   0xc0029faa
c0018743:	57                   	push   edi
c0018744:	e8 32 80 fe ff       	call   c000077b <strcmp>
c0018749:	83 c4 10             	add    esp,0x10
c001874c:	85 c0                	test   eax,eax
c001874e:	74 23                	je     c0018773 <CPU::detectFeatures()+0x24d>
c0018750:	50                   	push   eax
c0018751:	50                   	push   eax
c0018752:	68 b7 9f 02 c0       	push   0xc0029fb7
c0018757:	57                   	push   edi
c0018758:	e8 1e 80 fe ff       	call   c000077b <strcmp>
c001875d:	83 c4 10             	add    esp,0x10
c0018760:	85 c0                	test   eax,eax
c0018762:	75 1e                	jne    c0018782 <CPU::detectFeatures()+0x25c>
c0018764:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001876e:	e9 8a 01 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c0018773:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001877d:	e9 7b 01 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c0018782:	50                   	push   eax
c0018783:	50                   	push   eax
c0018784:	68 c4 9f 02 c0       	push   0xc0029fc4
c0018789:	57                   	push   edi
c001878a:	e8 ec 7f fe ff       	call   c000077b <strcmp>
c001878f:	83 c4 10             	add    esp,0x10
c0018792:	85 c0                	test   eax,eax
c0018794:	75 0f                	jne    c00187a5 <CPU::detectFeatures()+0x27f>
c0018796:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00187a0:	e9 58 01 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c00187a5:	50                   	push   eax
c00187a6:	50                   	push   eax
c00187a7:	68 83 9f 02 c0       	push   0xc0029f83
c00187ac:	57                   	push   edi
c00187ad:	e8 c9 7f fe ff       	call   c000077b <strcmp>
c00187b2:	83 c4 10             	add    esp,0x10
c00187b5:	85 c0                	test   eax,eax
c00187b7:	75 0f                	jne    c00187c8 <CPU::detectFeatures()+0x2a2>
c00187b9:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00187c3:	e9 35 01 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c00187c8:	50                   	push   eax
c00187c9:	50                   	push   eax
c00187ca:	68 d1 9f 02 c0       	push   0xc0029fd1
c00187cf:	57                   	push   edi
c00187d0:	e8 a6 7f fe ff       	call   c000077b <strcmp>
c00187d5:	83 c4 10             	add    esp,0x10
c00187d8:	85 c0                	test   eax,eax
c00187da:	75 0f                	jne    c00187eb <CPU::detectFeatures()+0x2c5>
c00187dc:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00187e6:	e9 12 01 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c00187eb:	51                   	push   ecx
c00187ec:	51                   	push   ecx
c00187ed:	68 de 9f 02 c0       	push   0xc0029fde
c00187f2:	57                   	push   edi
c00187f3:	e8 83 7f fe ff       	call   c000077b <strcmp>
c00187f8:	83 c4 10             	add    esp,0x10
c00187fb:	85 c0                	test   eax,eax
c00187fd:	75 0f                	jne    c001880e <CPU::detectFeatures()+0x2e8>
c00187ff:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018809:	e9 ef 00 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c001880e:	52                   	push   edx
c001880f:	52                   	push   edx
c0018810:	68 eb 9f 02 c0       	push   0xc0029feb
c0018815:	57                   	push   edi
c0018816:	e8 60 7f fe ff       	call   c000077b <strcmp>
c001881b:	83 c4 10             	add    esp,0x10
c001881e:	85 c0                	test   eax,eax
c0018820:	75 0f                	jne    c0018831 <CPU::detectFeatures()+0x30b>
c0018822:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001882c:	e9 cc 00 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c0018831:	50                   	push   eax
c0018832:	50                   	push   eax
c0018833:	68 f8 9f 02 c0       	push   0xc0029ff8
c0018838:	57                   	push   edi
c0018839:	e8 3d 7f fe ff       	call   c000077b <strcmp>
c001883e:	83 c4 10             	add    esp,0x10
c0018841:	85 c0                	test   eax,eax
c0018843:	75 0f                	jne    c0018854 <CPU::detectFeatures()+0x32e>
c0018845:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c001884f:	e9 a9 00 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c0018854:	50                   	push   eax
c0018855:	50                   	push   eax
c0018856:	68 05 a0 02 c0       	push   0xc002a005
c001885b:	57                   	push   edi
c001885c:	e8 1a 7f fe ff       	call   c000077b <strcmp>
c0018861:	83 c4 10             	add    esp,0x10
c0018864:	85 c0                	test   eax,eax
c0018866:	75 0f                	jne    c0018877 <CPU::detectFeatures()+0x351>
c0018868:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0018872:	e9 86 00 00 00       	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c0018877:	50                   	push   eax
c0018878:	50                   	push   eax
c0018879:	68 12 a0 02 c0       	push   0xc002a012
c001887e:	57                   	push   edi
c001887f:	e8 f7 7e fe ff       	call   c000077b <strcmp>
c0018884:	83 c4 10             	add    esp,0x10
c0018887:	85 c0                	test   eax,eax
c0018889:	75 0c                	jne    c0018897 <CPU::detectFeatures()+0x371>
c001888b:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0018895:	eb 66                	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c0018897:	50                   	push   eax
c0018898:	50                   	push   eax
c0018899:	68 1f a0 02 c0       	push   0xc002a01f
c001889e:	57                   	push   edi
c001889f:	e8 d7 7e fe ff       	call   c000077b <strcmp>
c00188a4:	83 c4 10             	add    esp,0x10
c00188a7:	85 c0                	test   eax,eax
c00188a9:	75 0c                	jne    c00188b7 <CPU::detectFeatures()+0x391>
c00188ab:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00188b5:	eb 46                	jmp    c00188fd <CPU::detectFeatures()+0x3d7>
c00188b7:	50                   	push   eax
c00188b8:	50                   	push   eax
c00188b9:	68 2c a0 02 c0       	push   0xc002a02c
c00188be:	57                   	push   edi
c00188bf:	e8 b7 7e fe ff       	call   c000077b <strcmp>
c00188c4:	83 c4 10             	add    esp,0x10
c00188c7:	85 c0                	test   eax,eax
c00188c9:	74 e0                	je     c00188ab <CPU::detectFeatures()+0x385>
c00188cb:	50                   	push   eax
c00188cc:	50                   	push   eax
c00188cd:	68 39 a0 02 c0       	push   0xc002a039
c00188d2:	57                   	push   edi
c00188d3:	e8 a3 7e fe ff       	call   c000077b <strcmp>
c00188d8:	83 c4 10             	add    esp,0x10
c00188db:	85 c0                	test   eax,eax
c00188dd:	74 cc                	je     c00188ab <CPU::detectFeatures()+0x385>
c00188df:	51                   	push   ecx
c00188e0:	51                   	push   ecx
c00188e1:	68 46 a0 02 c0       	push   0xc002a046
c00188e6:	57                   	push   edi
c00188e7:	e8 8f 7e fe ff       	call   c000077b <strcmp>
c00188ec:	83 c4 10             	add    esp,0x10
c00188ef:	85 c0                	test   eax,eax
c00188f1:	74 b8                	je     c00188ab <CPU::detectFeatures()+0x385>
c00188f3:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00188fd:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0018902:	0f 86 be 00 00 00    	jbe    c00189c6 <CPU::detectFeatures()+0x4a0>
c0018908:	83 ec 0c             	sub    esp,0xc
c001890b:	68 80 00 00 00       	push   0x80
c0018910:	e8 ab f8 ff ff       	call   c00181c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0018915:	83 e0 01             	and    eax,0x1
c0018918:	c1 e0 06             	shl    eax,0x6
c001891b:	88 c2                	mov    dl,al
c001891d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018923:	83 e0 bf             	and    eax,0xffffffbf
c0018926:	09 d0                	or     eax,edx
c0018928:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001892e:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0018935:	e8 86 f8 ff ff       	call   c00181c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001893a:	83 e0 01             	and    eax,0x1
c001893d:	c1 e0 04             	shl    eax,0x4
c0018940:	88 c2                	mov    dl,al
c0018942:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018948:	83 e0 ef             	and    eax,0xffffffef
c001894b:	09 d0                	or     eax,edx
c001894d:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018953:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001895a:	e8 61 f8 ff ff       	call   c00181c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001895f:	c1 e0 07             	shl    eax,0x7
c0018962:	88 c2                	mov    dl,al
c0018964:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001896a:	83 e0 7f             	and    eax,0x7f
c001896d:	09 d0                	or     eax,edx
c001896f:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018975:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001897c:	e8 6d f8 ff ff       	call   c00181ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c0018981:	83 e0 01             	and    eax,0x1
c0018984:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001898b:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018991:	83 e0 f7             	and    eax,0xfffffff7
c0018994:	09 d0                	or     eax,edx
c0018996:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001899c:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00189a3:	e8 46 f8 ff ff       	call   c00181ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c00189a8:	83 c4 10             	add    esp,0x10
c00189ab:	83 e0 01             	and    eax,0x1
c00189ae:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00189b5:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00189bb:	83 e0 fb             	and    eax,0xfffffffb
c00189be:	09 d0                	or     eax,edx
c00189c0:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00189c6:	83 ec 0c             	sub    esp,0xc
c00189c9:	56                   	push   esi
c00189ca:	55                   	push   ebp
c00189cb:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00189cf:	57                   	push   edi
c00189d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00189d4:	50                   	push   eax
c00189d5:	6a 01                	push   0x1
c00189d7:	e8 04 f7 ff ff       	call   c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00189e0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00189e6:	88 ca                	mov    dl,cl
c00189e8:	83 e0 f0             	and    eax,0xfffffff0
c00189eb:	83 e2 0f             	and    edx,0xf
c00189ee:	09 d0                	or     eax,edx
c00189f0:	88 ca                	mov    dl,cl
c00189f2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00189f8:	c0 ea 04             	shr    dl,0x4
c00189fb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00189ff:	0f b6 c2             	movzx  eax,dl
c0018a02:	83 c4 20             	add    esp,0x20
c0018a05:	c1 e0 06             	shl    eax,0x6
c0018a08:	89 c5                	mov    ebp,eax
c0018a0a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a10:	66 25 3f c0          	and    ax,0xc03f
c0018a14:	09 e8                	or     eax,ebp
c0018a16:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018a1d:	89 c8                	mov    eax,ecx
c0018a1f:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0018a25:	c1 e8 08             	shr    eax,0x8
c0018a28:	83 e2 3f             	and    edx,0x3f
c0018a2b:	83 e0 0f             	and    eax,0xf
c0018a2e:	89 c5                	mov    ebp,eax
c0018a30:	c1 e5 06             	shl    ebp,0x6
c0018a33:	09 d5                	or     ebp,edx
c0018a35:	89 ea                	mov    edx,ebp
c0018a37:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0018a3d:	88 c2                	mov    dl,al
c0018a3f:	c0 ea 02             	shr    dl,0x2
c0018a42:	89 d5                	mov    ebp,edx
c0018a44:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0018a4a:	83 e2 c0             	and    edx,0xffffffc0
c0018a4d:	09 d5                	or     ebp,edx
c0018a4f:	89 ea                	mov    edx,ebp
c0018a51:	89 cd                	mov    ebp,ecx
c0018a53:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0018a59:	c1 ed 0c             	shr    ebp,0xc
c0018a5c:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0018a62:	83 e5 03             	and    ebp,0x3
c0018a65:	83 e2 cf             	and    edx,0xffffffcf
c0018a68:	c1 e5 04             	shl    ebp,0x4
c0018a6b:	09 d5                	or     ebp,edx
c0018a6d:	3c 06                	cmp    al,0x6
c0018a6f:	89 ea                	mov    edx,ebp
c0018a71:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0018a77:	74 04                	je     c0018a7d <CPU::detectFeatures()+0x557>
c0018a79:	3c 0f                	cmp    al,0xf
c0018a7b:	75 5c                	jne    c0018ad9 <CPU::detectFeatures()+0x5b3>
c0018a7d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018a81:	89 cd                	mov    ebp,ecx
c0018a83:	c1 ed 10             	shr    ebp,0x10
c0018a86:	c1 e5 04             	shl    ebp,0x4
c0018a89:	09 ea                	or     edx,ebp
c0018a8b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0018a91:	0f b6 d2             	movzx  edx,dl
c0018a94:	66 81 e5 3f c0       	and    bp,0xc03f
c0018a99:	c1 e2 06             	shl    edx,0x6
c0018a9c:	09 ea                	or     edx,ebp
c0018a9e:	3c 0f                	cmp    al,0xf
c0018aa0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0018aa7:	75 30                	jne    c0018ad9 <CPU::detectFeatures()+0x5b3>
c0018aa9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0018aaf:	c1 e9 14             	shr    ecx,0x14
c0018ab2:	83 e0 3f             	and    eax,0x3f
c0018ab5:	83 c1 0f             	add    ecx,0xf
c0018ab8:	88 ca                	mov    dl,cl
c0018aba:	c0 e9 02             	shr    cl,0x2
c0018abd:	c1 e2 06             	shl    edx,0x6
c0018ac0:	09 d0                	or     eax,edx
c0018ac2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0018ac8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0018ace:	83 e0 c0             	and    eax,0xffffffc0
c0018ad1:	09 c1                	or     ecx,eax
c0018ad3:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0018ad9:	83 ec 0c             	sub    esp,0xc
c0018adc:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018ae3:	56                   	push   esi
c0018ae4:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018ae8:	50                   	push   eax
c0018ae9:	57                   	push   edi
c0018aea:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018aee:	55                   	push   ebp
c0018aef:	68 00 00 00 80       	push   0x80000000
c0018af4:	e8 e7 f5 ff ff       	call   c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018af9:	83 c4 20             	add    esp,0x20
c0018afc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0018b04:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b08:	76 1e                	jbe    c0018b28 <CPU::detectFeatures()+0x602>
c0018b0a:	83 ec 0c             	sub    esp,0xc
c0018b0d:	56                   	push   esi
c0018b0e:	50                   	push   eax
c0018b0f:	57                   	push   edi
c0018b10:	55                   	push   ebp
c0018b11:	68 01 00 00 80       	push   0x80000001
c0018b16:	e8 c5 f5 ff ff       	call   c00180e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018b1b:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0018b25:	83 c4 20             	add    esp,0x20
c0018b28:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0018b2e:	83 f8 01             	cmp    eax,0x1
c0018b31:	75 6f                	jne    c0018ba2 <CPU::detectFeatures()+0x67c>
c0018b33:	51                   	push   ecx
c0018b34:	51                   	push   ecx
c0018b35:	68 52 a0 02 c0       	push   0xc002a052
c0018b3a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018b3e:	56                   	push   esi
c0018b3f:	e8 e6 7b fe ff       	call   c000072a <strcpy>
c0018b44:	5f                   	pop    edi
c0018b45:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b4b:	5d                   	pop    ebp
c0018b4c:	66 c1 e8 06          	shr    ax,0x6
c0018b50:	0f b6 c0             	movzx  eax,al
c0018b53:	50                   	push   eax
c0018b54:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018b5a:	c1 e8 0e             	shr    eax,0xe
c0018b5d:	0f b6 c0             	movzx  eax,al
c0018b60:	50                   	push   eax
c0018b61:	e8 24 f2 ff ff       	call   c0017d8a <CPU::lookupIntelName(unsigned char, unsigned char)>
c0018b66:	5a                   	pop    edx
c0018b67:	59                   	pop    ecx
c0018b68:	50                   	push   eax
c0018b69:	56                   	push   esi
c0018b6a:	e8 72 7c fe ff       	call   c00007e1 <strcat>
c0018b6f:	5f                   	pop    edi
c0018b70:	5d                   	pop    ebp
c0018b71:	56                   	push   esi
c0018b72:	53                   	push   ebx
c0018b73:	e8 1a b2 ff ff       	call   c0013d92 <Device::setName(char const*)>
c0018b78:	58                   	pop    eax
c0018b79:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018b7f:	5a                   	pop    edx
c0018b80:	68 59 a0 02 c0       	push   0xc002a059
c0018b85:	50                   	push   eax
c0018b86:	e8 f0 7b fe ff       	call   c000077b <strcmp>
c0018b8b:	83 c4 10             	add    esp,0x10
c0018b8e:	85 c0                	test   eax,eax
c0018b90:	0f 85 71 03 00 00    	jne    c0018f07 <CPU::detectFeatures()+0x9e1>
c0018b96:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0018b9d:	e9 65 03 00 00       	jmp    c0018f07 <CPU::detectFeatures()+0x9e1>
c0018ba2:	83 f8 02             	cmp    eax,0x2
c0018ba5:	0f 85 b5 00 00 00    	jne    c0018c60 <CPU::detectFeatures()+0x73a>
c0018bab:	57                   	push   edi
c0018bac:	57                   	push   edi
c0018bad:	68 6b a0 02 c0       	push   0xc002a06b
c0018bb2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0018bb6:	56                   	push   esi
c0018bb7:	e8 6e 7b fe ff       	call   c000072a <strcpy>
c0018bbc:	5d                   	pop    ebp
c0018bbd:	58                   	pop    eax
c0018bbe:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bc4:	66 c1 e8 06          	shr    ax,0x6
c0018bc8:	0f b6 c0             	movzx  eax,al
c0018bcb:	50                   	push   eax
c0018bcc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018bd2:	c1 e8 0e             	shr    eax,0xe
c0018bd5:	0f b6 c0             	movzx  eax,al
c0018bd8:	50                   	push   eax
c0018bd9:	e8 18 f0 ff ff       	call   c0017bf6 <CPU::lookupAMDName(unsigned char, unsigned char)>
c0018bde:	5a                   	pop    edx
c0018bdf:	59                   	pop    ecx
c0018be0:	50                   	push   eax
c0018be1:	56                   	push   esi
c0018be2:	e8 fa 7b fe ff       	call   c00007e1 <strcat>
c0018be7:	5f                   	pop    edi
c0018be8:	5d                   	pop    ebp
c0018be9:	56                   	push   esi
c0018bea:	53                   	push   ebx
c0018beb:	e8 a2 b1 ff ff       	call   c0013d92 <Device::setName(char const*)>
c0018bf0:	58                   	pop    eax
c0018bf1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0018bf7:	5a                   	pop    edx
c0018bf8:	68 70 a0 02 c0       	push   0xc002a070
c0018bfd:	50                   	push   eax
c0018bfe:	e8 78 7b fe ff       	call   c000077b <strcmp>
c0018c03:	83 c4 10             	add    esp,0x10
c0018c06:	85 c0                	test   eax,eax
c0018c08:	75 20                	jne    c0018c2a <CPU::detectFeatures()+0x704>
c0018c0a:	8b 15 88 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c988
c0018c10:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0018c16:	a8 01                	test   al,0x1
c0018c18:	74 10                	je     c0018c2a <CPU::detectFeatures()+0x704>
c0018c1a:	83 e0 fe             	and    eax,0xfffffffe
c0018c1d:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0018c23:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0018c2a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c30:	c1 e8 0e             	shr    eax,0xe
c0018c33:	3c 05                	cmp    al,0x5
c0018c35:	0f 85 cc 02 00 00    	jne    c0018f07 <CPU::detectFeatures()+0x9e1>
c0018c3b:	56                   	push   esi
c0018c3c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0018c42:	83 e0 0f             	and    eax,0xf
c0018c45:	50                   	push   eax
c0018c46:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018c4c:	66 c1 e8 06          	shr    ax,0x6
c0018c50:	0f b6 c0             	movzx  eax,al
c0018c53:	50                   	push   eax
c0018c54:	6a 05                	push   0x5
c0018c56:	e8 11 f4 ff ff       	call   c001806c <CPU::AMD_K6_writeback(int, int, int)>
c0018c5b:	e9 1f 02 00 00       	jmp    c0018e7f <CPU::detectFeatures()+0x959>
c0018c60:	8d 50 fd             	lea    edx,[eax-0x3]
c0018c63:	83 fa 01             	cmp    edx,0x1
c0018c66:	76 09                	jbe    c0018c71 <CPU::detectFeatures()+0x74b>
c0018c68:	83 f8 06             	cmp    eax,0x6
c0018c6b:	0f 85 91 01 00 00    	jne    c0018e02 <CPU::detectFeatures()+0x8dc>
c0018c71:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c77:	c1 ea 0e             	shr    edx,0xe
c0018c7a:	80 fa 05             	cmp    dl,0x5
c0018c7d:	75 7b                	jne    c0018cfa <CPU::detectFeatures()+0x7d4>
c0018c7f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018c85:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018c8a:	66 81 fa 00 01       	cmp    dx,0x100
c0018c8f:	75 0c                	jne    c0018c9d <CPU::detectFeatures()+0x777>
c0018c91:	51                   	push   ecx
c0018c92:	51                   	push   ecx
c0018c93:	68 77 a0 02 c0       	push   0xc002a077
c0018c98:	e9 dc 01 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018c9d:	66 81 fa 00 02       	cmp    dx,0x200
c0018ca2:	75 0c                	jne    c0018cb0 <CPU::detectFeatures()+0x78a>
c0018ca4:	52                   	push   edx
c0018ca5:	52                   	push   edx
c0018ca6:	68 8a a0 02 c0       	push   0xc002a08a
c0018cab:	e9 c9 01 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018cb0:	66 81 fa 40 02       	cmp    dx,0x240
c0018cb5:	75 0c                	jne    c0018cc3 <CPU::detectFeatures()+0x79d>
c0018cb7:	50                   	push   eax
c0018cb8:	50                   	push   eax
c0018cb9:	68 9c a0 02 c0       	push   0xc002a09c
c0018cbe:	e9 b6 01 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018cc3:	83 f8 06             	cmp    eax,0x6
c0018cc6:	75 0c                	jne    c0018cd4 <CPU::detectFeatures()+0x7ae>
c0018cc8:	50                   	push   eax
c0018cc9:	50                   	push   eax
c0018cca:	68 ae a0 02 c0       	push   0xc002a0ae
c0018ccf:	e9 a5 01 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018cd4:	83 f8 04             	cmp    eax,0x4
c0018cd7:	75 0c                	jne    c0018ce5 <CPU::detectFeatures()+0x7bf>
c0018cd9:	50                   	push   eax
c0018cda:	50                   	push   eax
c0018cdb:	68 ba a0 02 c0       	push   0xc002a0ba
c0018ce0:	e9 94 01 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018ce5:	83 f8 03             	cmp    eax,0x3
c0018ce8:	0f 85 19 02 00 00    	jne    c0018f07 <CPU::detectFeatures()+0x9e1>
c0018cee:	50                   	push   eax
c0018cef:	50                   	push   eax
c0018cf0:	68 c2 a0 02 c0       	push   0xc002a0c2
c0018cf5:	e9 7f 01 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018cfa:	80 fa 06             	cmp    dl,0x6
c0018cfd:	0f 85 db 00 00 00    	jne    c0018dde <CPU::detectFeatures()+0x8b8>
c0018d03:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0018d09:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0018d0e:	66 81 fa 80 01       	cmp    dx,0x180
c0018d13:	75 0c                	jne    c0018d21 <CPU::detectFeatures()+0x7fb>
c0018d15:	50                   	push   eax
c0018d16:	50                   	push   eax
c0018d17:	68 cd a0 02 c0       	push   0xc002a0cd
c0018d1c:	e9 58 01 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018d21:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0018d27:	66 f7 c1 80 ff       	test   cx,0xff80
c0018d2c:	75 0c                	jne    c0018d3a <CPU::detectFeatures()+0x814>
c0018d2e:	50                   	push   eax
c0018d2f:	50                   	push   eax
c0018d30:	68 dd a0 02 c0       	push   0xc002a0dd
c0018d35:	e9 3f 01 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018d3a:	66 81 fa 40 02       	cmp    dx,0x240
c0018d3f:	75 0c                	jne    c0018d4d <CPU::detectFeatures()+0x827>
c0018d41:	55                   	push   ebp
c0018d42:	55                   	push   ebp
c0018d43:	68 e4 a0 02 c0       	push   0xc002a0e4
c0018d48:	e9 2c 01 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018d4d:	66 81 fa 80 02       	cmp    dx,0x280
c0018d52:	75 0c                	jne    c0018d60 <CPU::detectFeatures()+0x83a>
c0018d54:	57                   	push   edi
c0018d55:	57                   	push   edi
c0018d56:	68 ed a0 02 c0       	push   0xc002a0ed
c0018d5b:	e9 19 01 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018d60:	66 81 fa 40 03       	cmp    dx,0x340
c0018d65:	74 ed                	je     c0018d54 <CPU::detectFeatures()+0x82e>
c0018d67:	66 81 fa c0 03       	cmp    dx,0x3c0
c0018d6c:	75 0c                	jne    c0018d7a <CPU::detectFeatures()+0x854>
c0018d6e:	56                   	push   esi
c0018d6f:	56                   	push   esi
c0018d70:	68 f4 a0 02 c0       	push   0xc002a0f4
c0018d75:	e9 ff 00 00 00       	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018d7a:	83 f8 06             	cmp    eax,0x6
c0018d7d:	0f 84 45 ff ff ff    	je     c0018cc8 <CPU::detectFeatures()+0x7a2>
c0018d83:	83 f8 04             	cmp    eax,0x4
c0018d86:	0f 84 4d ff ff ff    	je     c0018cd9 <CPU::detectFeatures()+0x7b3>
c0018d8c:	83 f8 03             	cmp    eax,0x3
c0018d8f:	0f 85 72 01 00 00    	jne    c0018f07 <CPU::detectFeatures()+0x9e1>
c0018d95:	51                   	push   ecx
c0018d96:	51                   	push   ecx
c0018d97:	68 fd a0 02 c0       	push   0xc002a0fd
c0018d9c:	53                   	push   ebx
c0018d9d:	e8 f0 af ff ff       	call   c0013d92 <Device::setName(char const*)>
c0018da2:	b1 c1                	mov    cl,0xc1
c0018da4:	88 c8                	mov    al,cl
c0018da6:	e6 22                	out    0x22,al
c0018da8:	e4 23                	in     al,0x23
c0018daa:	88 c2                	mov    dl,al
c0018dac:	88 c8                	mov    al,cl
c0018dae:	e6 22                	out    0x22,al
c0018db0:	88 d0                	mov    al,dl
c0018db2:	83 c8 10             	or     eax,0x10
c0018db5:	e6 23                	out    0x23,al
c0018db7:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018dbe:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018dc1:	89 d0                	mov    eax,edx
c0018dc3:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0018dc9:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0018dcd:	40                   	inc    eax
c0018dce:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018dd4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018dd9:	e9 a1 00 00 00       	jmp    c0018e7f <CPU::detectFeatures()+0x959>
c0018dde:	83 f8 06             	cmp    eax,0x6
c0018de1:	0f 84 e1 fe ff ff    	je     c0018cc8 <CPU::detectFeatures()+0x7a2>
c0018de7:	83 f8 04             	cmp    eax,0x4
c0018dea:	0f 84 e9 fe ff ff    	je     c0018cd9 <CPU::detectFeatures()+0x7b3>
c0018df0:	83 f8 03             	cmp    eax,0x3
c0018df3:	0f 85 0e 01 00 00    	jne    c0018f07 <CPU::detectFeatures()+0x9e1>
c0018df9:	52                   	push   edx
c0018dfa:	52                   	push   edx
c0018dfb:	68 08 a1 02 c0       	push   0xc002a108
c0018e00:	eb 77                	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018e02:	83 f8 07             	cmp    eax,0x7
c0018e05:	75 09                	jne    c0018e10 <CPU::detectFeatures()+0x8ea>
c0018e07:	50                   	push   eax
c0018e08:	50                   	push   eax
c0018e09:	68 12 a1 02 c0       	push   0xc002a112
c0018e0e:	eb 69                	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018e10:	83 f8 0a             	cmp    eax,0xa
c0018e13:	75 09                	jne    c0018e1e <CPU::detectFeatures()+0x8f8>
c0018e15:	50                   	push   eax
c0018e16:	50                   	push   eax
c0018e17:	68 1d a1 02 c0       	push   0xc002a11d
c0018e1c:	eb 5b                	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018e1e:	83 f8 0b             	cmp    eax,0xb
c0018e21:	75 09                	jne    c0018e2c <CPU::detectFeatures()+0x906>
c0018e23:	50                   	push   eax
c0018e24:	50                   	push   eax
c0018e25:	68 25 a1 02 c0       	push   0xc002a125
c0018e2a:	eb 4d                	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018e2c:	83 f8 08             	cmp    eax,0x8
c0018e2f:	75 09                	jne    c0018e3a <CPU::detectFeatures()+0x914>
c0018e31:	50                   	push   eax
c0018e32:	50                   	push   eax
c0018e33:	68 2e a1 02 c0       	push   0xc002a12e
c0018e38:	eb 3f                	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018e3a:	83 f8 09             	cmp    eax,0x9
c0018e3d:	75 09                	jne    c0018e48 <CPU::detectFeatures()+0x922>
c0018e3f:	50                   	push   eax
c0018e40:	50                   	push   eax
c0018e41:	68 36 a1 02 c0       	push   0xc002a136
c0018e46:	eb 31                	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018e48:	83 f8 05             	cmp    eax,0x5
c0018e4b:	75 09                	jne    c0018e56 <CPU::detectFeatures()+0x930>
c0018e4d:	50                   	push   eax
c0018e4e:	50                   	push   eax
c0018e4f:	68 3e a1 02 c0       	push   0xc002a13e
c0018e54:	eb 23                	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018e56:	83 f8 0c             	cmp    eax,0xc
c0018e59:	75 09                	jne    c0018e64 <CPU::detectFeatures()+0x93e>
c0018e5b:	55                   	push   ebp
c0018e5c:	55                   	push   ebp
c0018e5d:	68 4c a1 02 c0       	push   0xc002a14c
c0018e62:	eb 15                	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018e64:	83 f8 0d             	cmp    eax,0xd
c0018e67:	75 09                	jne    c0018e72 <CPU::detectFeatures()+0x94c>
c0018e69:	57                   	push   edi
c0018e6a:	57                   	push   edi
c0018e6b:	68 57 a1 02 c0       	push   0xc002a157
c0018e70:	eb 07                	jmp    c0018e79 <CPU::detectFeatures()+0x953>
c0018e72:	56                   	push   esi
c0018e73:	56                   	push   esi
c0018e74:	68 6b a1 02 c0       	push   0xc002a16b
c0018e79:	53                   	push   ebx
c0018e7a:	e8 13 af ff ff       	call   c0013d92 <Device::setName(char const*)>
c0018e7f:	83 c4 10             	add    esp,0x10
c0018e82:	e9 80 00 00 00       	jmp    c0018f07 <CPU::detectFeatures()+0x9e1>
c0018e87:	51                   	push   ecx
c0018e88:	51                   	push   ecx
c0018e89:	68 b7 9f 02 c0       	push   0xc0029fb7
c0018e8e:	57                   	push   edi
c0018e8f:	e8 96 78 fe ff       	call   c000072a <strcpy>
c0018e94:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018e9e:	e8 c0 73 fe ff       	call   c0000263 <is486>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	85 c0                	test   eax,eax
c0018ea8:	74 2b                	je     c0018ed5 <CPU::detectFeatures()+0x9af>
c0018eaa:	52                   	push   edx
c0018eab:	52                   	push   edx
c0018eac:	68 77 a1 02 c0       	push   0xc002a177
c0018eb1:	53                   	push   ebx
c0018eb2:	e8 db ae ff ff       	call   c0013d92 <Device::setName(char const*)>
c0018eb7:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0018ebe:	0f 20 c0             	mov    eax,cr0
c0018ec1:	83 e0 14             	and    eax,0x14
c0018ec4:	83 c4 10             	add    esp,0x10
c0018ec7:	83 f8 04             	cmp    eax,0x4
c0018eca:	75 1f                	jne    c0018eeb <CPU::detectFeatures()+0x9c5>
c0018ecc:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0018ed3:	eb 32                	jmp    c0018f07 <CPU::detectFeatures()+0x9e1>
c0018ed5:	50                   	push   eax
c0018ed6:	50                   	push   eax
c0018ed7:	68 82 a1 02 c0       	push   0xc002a182
c0018edc:	53                   	push   ebx
c0018edd:	e8 b0 ae ff ff       	call   c0013d92 <Device::setName(char const*)>
c0018ee2:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0018ee9:	eb d3                	jmp    c0018ebe <CPU::detectFeatures()+0x998>
c0018eeb:	e8 4e 73 fe ff       	call   c000023e <hasLegacyFPU>
c0018ef0:	83 e0 01             	and    eax,0x1
c0018ef3:	8d 14 00             	lea    edx,[eax+eax*1]
c0018ef6:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018efc:	83 e0 fd             	and    eax,0xfffffffd
c0018eff:	09 d0                	or     eax,edx
c0018f01:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018f07:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0018f0e:	83 c4 4c             	add    esp,0x4c
c0018f11:	5b                   	pop    ebx
c0018f12:	5e                   	pop    esi
c0018f13:	5f                   	pop    edi
c0018f14:	5d                   	pop    ebp
c0018f15:	c3                   	ret    

c0018f16 <CPU::setupSMEP()>:
c0018f16:	0f 20 e0             	mov    eax,cr4
c0018f19:	0d 00 00 10 00       	or     eax,0x100000
c0018f1e:	0f 22 e0             	mov    cr4,eax
c0018f21:	c3                   	ret    

c0018f22 <CPU::setupUMIP()>:
c0018f22:	0f 20 e0             	mov    eax,cr4
c0018f25:	80 cc 08             	or     ah,0x8
c0018f28:	0f 22 e0             	mov    cr4,eax
c0018f2b:	c3                   	ret    

c0018f2c <CPU::setupTSC()>:
c0018f2c:	0f 20 e0             	mov    eax,cr4
c0018f2f:	83 c8 04             	or     eax,0x4
c0018f32:	0f 22 e0             	mov    cr4,eax
c0018f35:	c3                   	ret    

c0018f36 <CPU::setupLargePages()>:
c0018f36:	0f 20 e0             	mov    eax,cr4
c0018f39:	83 c8 10             	or     eax,0x10
c0018f3c:	0f 22 e0             	mov    cr4,eax
c0018f3f:	c3                   	ret    

c0018f40 <CPU::setupPAT()>:
c0018f40:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0018f45:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0018f4c:	74 2c                	je     c0018f7a <CPU::setupPAT()+0x3a>
c0018f4e:	53                   	push   ebx
c0018f4f:	83 ec 10             	sub    esp,0x10
c0018f52:	68 77 02 00 00       	push   0x277
c0018f57:	50                   	push   eax
c0018f58:	e8 1f 5b ff ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c0018f5d:	83 e2 f8             	and    edx,0xfffffff8
c0018f60:	83 ca 01             	or     edx,0x1
c0018f63:	52                   	push   edx
c0018f64:	50                   	push   eax
c0018f65:	68 77 02 00 00       	push   0x277
c0018f6a:	ff 35 88 c9 02 c0    	push   DWORD PTR ds:0xc002c988
c0018f70:	e8 33 5b ff ff       	call   c000eaa8 <Computer::wrmsr(unsigned int, unsigned long long)>
c0018f75:	83 c4 28             	add    esp,0x28
c0018f78:	5b                   	pop    ebx
c0018f79:	c3                   	ret    
c0018f7a:	c3                   	ret    
c0018f7b:	90                   	nop

c0018f7c <CPU::setupMTRR()>:
c0018f7c:	c3                   	ret    
c0018f7d:	90                   	nop

c0018f7e <CPU::setupGlobalPages()>:
c0018f7e:	0f 20 e0             	mov    eax,cr4
c0018f81:	0c 80                	or     al,0x80
c0018f83:	0f 22 e0             	mov    cr4,eax
c0018f86:	c3                   	ret    
c0018f87:	90                   	nop

c0018f88 <CPU::allowUsermodeDataAccess()>:
c0018f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f8c:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018f93:	74 03                	je     c0018f98 <CPU::allowUsermodeDataAccess()+0x10>
c0018f95:	0f 01 cb             	stac   
c0018f98:	c3                   	ret    
c0018f99:	90                   	nop

c0018f9a <CPU::prohibitUsermodeDataAccess()>:
c0018f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018f9e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0018fa5:	74 03                	je     c0018faa <CPU::prohibitUsermodeDataAccess()+0x10>
c0018fa7:	0f 01 ca             	clac   
c0018faa:	c3                   	ret    
c0018fab:	90                   	nop

c0018fac <CPU::setupSMAP()>:
c0018fac:	0f 20 e0             	mov    eax,cr4
c0018faf:	0d 00 00 20 00       	or     eax,0x200000
c0018fb4:	0f 22 e0             	mov    cr4,eax
c0018fb7:	eb e1                	jmp    c0018f9a <CPU::prohibitUsermodeDataAccess()>
c0018fb9:	90                   	nop

c0018fba <CPU::setupFeatures()>:
c0018fba:	83 ec 0c             	sub    esp,0xc
c0018fbd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fc1:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0018fc8:	74 07                	je     c0018fd1 <CPU::setupFeatures()+0x17>
c0018fca:	52                   	push   edx
c0018fcb:	e8 46 ff ff ff       	call   c0018f16 <CPU::setupSMEP()>
c0018fd0:	58                   	pop    eax
c0018fd1:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0018fd8:	74 07                	je     c0018fe1 <CPU::setupFeatures()+0x27>
c0018fda:	52                   	push   edx
c0018fdb:	e8 cc ff ff ff       	call   c0018fac <CPU::setupSMAP()>
c0018fe0:	58                   	pop    eax
c0018fe1:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0018fe8:	74 07                	je     c0018ff1 <CPU::setupFeatures()+0x37>
c0018fea:	52                   	push   edx
c0018feb:	e8 32 ff ff ff       	call   c0018f22 <CPU::setupUMIP()>
c0018ff0:	58                   	pop    eax
c0018ff1:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0018ff8:	74 07                	je     c0019001 <CPU::setupFeatures()+0x47>
c0018ffa:	52                   	push   edx
c0018ffb:	e8 2c ff ff ff       	call   c0018f2c <CPU::setupTSC()>
c0019000:	58                   	pop    eax
c0019001:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019008:	74 07                	je     c0019011 <CPU::setupFeatures()+0x57>
c001900a:	52                   	push   edx
c001900b:	e8 26 ff ff ff       	call   c0018f36 <CPU::setupLargePages()>
c0019010:	59                   	pop    ecx
c0019011:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019018:	74 07                	je     c0019021 <CPU::setupFeatures()+0x67>
c001901a:	52                   	push   edx
c001901b:	e8 5e ff ff ff       	call   c0018f7e <CPU::setupGlobalPages()>
c0019020:	58                   	pop    eax
c0019021:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019028:	74 0c                	je     c0019036 <CPU::setupFeatures()+0x7c>
c001902a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001902e:	83 c4 0c             	add    esp,0xc
c0019031:	e9 0a ff ff ff       	jmp    c0018f40 <CPU::setupPAT()>
c0019036:	83 c4 0c             	add    esp,0xc
c0019039:	c3                   	ret    

c001903a <CPU::open(int, int, void*)>:
c001903a:	57                   	push   edi
c001903b:	56                   	push   esi
c001903c:	53                   	push   ebx
c001903d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019041:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019045:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001904b:	83 ec 0c             	sub    esp,0xc
c001904e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019054:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001905a:	50                   	push   eax
c001905b:	e8 08 5d ff ff       	call   c000ed68 <GDT::setup()>
c0019060:	83 c4 0c             	add    esp,0xc
c0019063:	6a 00                	push   0x0
c0019065:	68 ef be ad de       	push   0xdeadbeef
c001906a:	57                   	push   edi
c001906b:	e8 d2 80 ff ff       	call   c0011142 <TSS::setup(unsigned long, unsigned long)>
c0019070:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019073:	e8 aa 80 ff ff       	call   c0011122 <TSS::flush()>
c0019078:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001907e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019081:	e8 3e 5f ff ff       	call   c000efc4 <IDT::setup()>
c0019086:	b8 00 04 00 00       	mov    eax,0x400
c001908b:	0f 23 f8             	mov    db7,eax
c001908e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019098:	e8 4b 6a ff ff       	call   c000fae8 <Phys::allocatePage()>
c001909d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00190a3:	89 30                	mov    DWORD PTR [eax],esi
c00190a5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00190ab:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00190ae:	58                   	pop    eax
c00190af:	5a                   	pop    edx
c00190b0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00190b6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00190ba:	e8 b5 90 ff ff       	call   c0012174 <VAS::setCPUSpecific(unsigned long)>
c00190bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190c2:	e8 5f f4 ff ff       	call   c0018526 <CPU::detectFeatures()>
c00190c7:	e8 aa bf ff ff       	call   c0015076 <setupInterruptController()>
c00190cc:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00190d2:	a1 a0 c9 02 c0       	mov    eax,ds:0xc002c9a0
c00190d7:	83 e0 10             	and    eax,0x10
c00190da:	83 f8 01             	cmp    eax,0x1
c00190dd:	19 c0                	sbb    eax,eax
c00190df:	83 e0 46             	and    eax,0x46
c00190e2:	83 c0 1e             	add    eax,0x1e
c00190e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00190e8:	e8 41 d4 ff ff       	call   c001652e <setupTimer(int)>
c00190ed:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00190f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190f6:	e8 bf fe ff ff       	call   c0018fba <CPU::setupFeatures()>
c00190fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00190fe:	e8 a7 f1 ff ff       	call   c00182aa <CPU::displayFeatures()>
c0019103:	83 c4 10             	add    esp,0x10
c0019106:	31 c0                	xor    eax,eax
c0019108:	5b                   	pop    ebx
c0019109:	5e                   	pop    esi
c001910a:	5f                   	pop    edi
c001910b:	c3                   	ret    

c001910c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c001910c:	57                   	push   edi
c001910d:	56                   	push   esi
c001910e:	53                   	push   ebx
c001910f:	51                   	push   ecx
c0019110:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019114:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019117:	0f 02 c0             	lar    eax,ax
c001911a:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c001911d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019121:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019124:	88 ca                	mov    dl,cl
c0019126:	c0 ea 06             	shr    dl,0x6
c0019129:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c001912d:	89 ca                	mov    edx,ecx
c001912f:	66 c1 ea 03          	shr    dx,0x3
c0019133:	83 e2 07             	and    edx,0x7
c0019136:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001913b:	88 17                	mov    BYTE PTR [edi],dl
c001913d:	0f 84 a6 01 00 00    	je     c00192e9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019143:	83 e1 07             	and    ecx,0x7
c0019146:	80 f9 04             	cmp    cl,0x4
c0019149:	0f 84 98 00 00 00    	je     c00191e7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c001914f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019154:	0f 95 c0             	setne  al
c0019157:	80 f9 05             	cmp    cl,0x5
c001915a:	0f 95 c2             	setne  dl
c001915d:	08 c2                	or     dl,al
c001915f:	74 79                	je     c00191da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019161:	84 c9                	test   cl,cl
c0019163:	75 05                	jne    c001916a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019165:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019168:	eb 3c                	jmp    c00191a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001916a:	80 f9 01             	cmp    cl,0x1
c001916d:	75 05                	jne    c0019174 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c001916f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019172:	eb 32                	jmp    c00191a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019174:	80 f9 02             	cmp    cl,0x2
c0019177:	75 05                	jne    c001917e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019179:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001917c:	eb 28                	jmp    c00191a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001917e:	31 c0                	xor    eax,eax
c0019180:	80 f9 03             	cmp    cl,0x3
c0019183:	75 05                	jne    c001918a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019185:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019188:	eb 1c                	jmp    c00191a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001918a:	80 f9 05             	cmp    cl,0x5
c001918d:	75 05                	jne    c0019194 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c001918f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019192:	eb 12                	jmp    c00191a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019194:	80 f9 06             	cmp    cl,0x6
c0019197:	75 05                	jne    c001919e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019199:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001919c:	eb 08                	jmp    c00191a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001919e:	80 f9 07             	cmp    cl,0x7
c00191a1:	75 03                	jne    c00191a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c00191a3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00191a6:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00191ab:	75 10                	jne    c00191bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c00191ad:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00191b1:	b9 03 00 00 00       	mov    ecx,0x3
c00191b6:	01 d0                	add    eax,edx
c00191b8:	e9 37 01 00 00       	jmp    c00192f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00191bd:	b9 02 00 00 00       	mov    ecx,0x2
c00191c2:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c00191c7:	0f 85 27 01 00 00    	jne    c00192f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00191cd:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00191d0:	b9 06 00 00 00       	mov    ecx,0x6
c00191d5:	e9 1a 01 00 00       	jmp    c00192f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00191da:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00191dd:	b9 06 00 00 00       	mov    ecx,0x6
c00191e2:	e9 0f 01 00 00       	jmp    c00192f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00191e7:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c00191ea:	88 ca                	mov    dl,cl
c00191ec:	c0 ea 06             	shr    dl,0x6
c00191ef:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c00191f3:	89 ca                	mov    edx,ecx
c00191f5:	66 c1 ea 03          	shr    dx,0x3
c00191f9:	83 e2 07             	and    edx,0x7
c00191fc:	80 e1 07             	and    cl,0x7
c00191ff:	75 05                	jne    c0019206 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019201:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019204:	eb 4c                	jmp    c0019252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019206:	80 f9 01             	cmp    cl,0x1
c0019209:	75 05                	jne    c0019210 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c001920b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c001920e:	eb 42                	jmp    c0019252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019210:	80 f9 02             	cmp    cl,0x2
c0019213:	75 05                	jne    c001921a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019215:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019218:	eb 38                	jmp    c0019252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001921a:	80 f9 03             	cmp    cl,0x3
c001921d:	75 05                	jne    c0019224 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c001921f:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019222:	eb 2e                	jmp    c0019252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019224:	80 f9 04             	cmp    cl,0x4
c0019227:	75 12                	jne    c001923b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019229:	f6 c4 60             	test   ah,0x60
c001922c:	75 08                	jne    c0019236 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c001922e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019231:	8d 78 14             	lea    edi,[eax+0x14]
c0019234:	eb 1c                	jmp    c0019252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019236:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019239:	eb 17                	jmp    c0019252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001923b:	80 f9 05             	cmp    cl,0x5
c001923e:	75 05                	jne    c0019245 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019240:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019243:	eb 0d                	jmp    c0019252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019245:	80 f9 06             	cmp    cl,0x6
c0019248:	75 05                	jne    c001924f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001924a:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001924d:	eb 03                	jmp    c0019252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001924f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019252:	84 d2                	test   dl,dl
c0019254:	75 05                	jne    c001925b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019256:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019259:	eb 3c                	jmp    c0019297 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001925b:	80 fa 01             	cmp    dl,0x1
c001925e:	75 05                	jne    c0019265 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019260:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019263:	eb 32                	jmp    c0019297 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019265:	80 fa 02             	cmp    dl,0x2
c0019268:	75 05                	jne    c001926f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001926a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001926d:	eb 28                	jmp    c0019297 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001926f:	80 fa 03             	cmp    dl,0x3
c0019272:	75 05                	jne    c0019279 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019274:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019277:	eb 1e                	jmp    c0019297 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019279:	31 c0                	xor    eax,eax
c001927b:	80 fa 04             	cmp    dl,0x4
c001927e:	74 17                	je     c0019297 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019280:	80 fa 05             	cmp    dl,0x5
c0019283:	75 05                	jne    c001928a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019285:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019288:	eb 0d                	jmp    c0019297 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001928a:	80 fa 06             	cmp    dl,0x6
c001928d:	75 05                	jne    c0019294 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001928f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019292:	eb 03                	jmp    c0019297 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019294:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019297:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001929c:	0f 94 c2             	sete   dl
c001929f:	80 f9 05             	cmp    cl,0x5
c00192a2:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c00192a6:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c00192ab:	d3 e0                	shl    eax,cl
c00192ad:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c00192b1:	74 0a                	je     c00192bd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c00192b3:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00192b6:	b9 07 00 00 00       	mov    ecx,0x7
c00192bb:	eb 37                	jmp    c00192f4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c00192bd:	01 f8                	add    eax,edi
c00192bf:	b9 03 00 00 00       	mov    ecx,0x3
c00192c4:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00192c9:	74 2b                	je     c00192f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192cb:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00192d0:	75 0d                	jne    c00192df <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00192d2:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00192d6:	01 c8                	add    eax,ecx
c00192d8:	b9 04 00 00 00       	mov    ecx,0x4
c00192dd:	eb 17                	jmp    c00192f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192df:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00192e2:	b9 07 00 00 00       	mov    ecx,0x7
c00192e7:	eb 0d                	jmp    c00192f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192e9:	b9 02 00 00 00       	mov    ecx,0x2
c00192ee:	b2 01                	mov    dl,0x1
c00192f0:	31 c0                	xor    eax,eax
c00192f2:	eb 02                	jmp    c00192f6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c00192f4:	31 d2                	xor    edx,edx
c00192f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00192fa:	89 0b                	mov    DWORD PTR [ebx],ecx
c00192fc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019300:	88 11                	mov    BYTE PTR [ecx],dl
c0019302:	5a                   	pop    edx
c0019303:	5b                   	pop    ebx
c0019304:	5e                   	pop    esi
c0019305:	5f                   	pop    edi
c0019306:	c3                   	ret    
c0019307:	90                   	nop

c0019308 <EnvVarContainer::getEnv(char const*)>:
c0019308:	57                   	push   edi
c0019309:	56                   	push   esi
c001930a:	53                   	push   ebx
c001930b:	31 db                	xor    ebx,ebx
c001930d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019311:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019313:	7e 2b                	jle    c0019340 <EnvVarContainer::getEnv(char const*)+0x38>
c0019315:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001931c:	50                   	push   eax
c001931d:	50                   	push   eax
c001931e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019321:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019324:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019328:	e8 4e 74 fe ff       	call   c000077b <strcmp>
c001932d:	83 c4 10             	add    esp,0x10
c0019330:	85 c0                	test   eax,eax
c0019332:	75 09                	jne    c001933d <EnvVarContainer::getEnv(char const*)+0x35>
c0019334:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019337:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001933b:	eb 05                	jmp    c0019342 <EnvVarContainer::getEnv(char const*)+0x3a>
c001933d:	43                   	inc    ebx
c001933e:	eb d1                	jmp    c0019311 <EnvVarContainer::getEnv(char const*)+0x9>
c0019340:	31 c0                	xor    eax,eax
c0019342:	5b                   	pop    ebx
c0019343:	5e                   	pop    esi
c0019344:	5f                   	pop    edi
c0019345:	c3                   	ret    

c0019346 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019346:	57                   	push   edi
c0019347:	56                   	push   esi
c0019348:	53                   	push   ebx
c0019349:	83 ec 1c             	sub    esp,0x1c
c001934c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019350:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019354:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019358:	57                   	push   edi
c0019359:	e8 4a 73 fe ff       	call   c00006a8 <strlen>
c001935e:	40                   	inc    eax
c001935f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019362:	e8 6d 61 ff ff       	call   c000f4d4 <malloc>
c0019367:	89 34 24             	mov    DWORD PTR [esp],esi
c001936a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001936e:	e8 35 73 fe ff       	call   c00006a8 <strlen>
c0019373:	40                   	inc    eax
c0019374:	89 04 24             	mov    DWORD PTR [esp],eax
c0019377:	e8 58 61 ff ff       	call   c000f4d4 <malloc>
c001937c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001937f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019383:	e8 20 73 fe ff       	call   c00006a8 <strlen>
c0019388:	83 c4 0c             	add    esp,0xc
c001938b:	40                   	inc    eax
c001938c:	50                   	push   eax
c001938d:	6a 00                	push   0x0
c001938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019393:	e8 f3 72 fe ff       	call   c000068b <memset>
c0019398:	89 3c 24             	mov    DWORD PTR [esp],edi
c001939b:	e8 08 73 fe ff       	call   c00006a8 <strlen>
c00193a0:	83 c4 0c             	add    esp,0xc
c00193a3:	40                   	inc    eax
c00193a4:	50                   	push   eax
c00193a5:	57                   	push   edi
c00193a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00193aa:	e8 a6 72 fe ff       	call   c0000655 <memcpy>
c00193af:	89 34 24             	mov    DWORD PTR [esp],esi
c00193b2:	e8 f1 72 fe ff       	call   c00006a8 <strlen>
c00193b7:	83 c4 0c             	add    esp,0xc
c00193ba:	40                   	inc    eax
c00193bb:	50                   	push   eax
c00193bc:	6a 00                	push   0x0
c00193be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193c2:	e8 c4 72 fe ff       	call   c000068b <memset>
c00193c7:	89 34 24             	mov    DWORD PTR [esp],esi
c00193ca:	e8 d9 72 fe ff       	call   c00006a8 <strlen>
c00193cf:	83 c4 0c             	add    esp,0xc
c00193d2:	40                   	inc    eax
c00193d3:	50                   	push   eax
c00193d4:	56                   	push   esi
c00193d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00193d9:	e8 77 72 fe ff       	call   c0000655 <memcpy>
c00193de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00193e0:	40                   	inc    eax
c00193e1:	89 03                	mov    DWORD PTR [ebx],eax
c00193e3:	c1 e0 03             	shl    eax,0x3
c00193e6:	5a                   	pop    edx
c00193e7:	59                   	pop    ecx
c00193e8:	50                   	push   eax
c00193e9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00193ec:	e8 cf 60 ff ff       	call   c000f4c0 <realloc>
c00193f1:	83 c4 0c             	add    esp,0xc
c00193f4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00193f7:	6a 08                	push   0x8
c00193f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00193fd:	52                   	push   edx
c00193fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019400:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019404:	50                   	push   eax
c0019405:	e8 4b 72 fe ff       	call   c0000655 <memcpy>
c001940a:	83 c4 20             	add    esp,0x20
c001940d:	5b                   	pop    ebx
c001940e:	5e                   	pop    esi
c001940f:	5f                   	pop    edi
c0019410:	c3                   	ret    
c0019411:	90                   	nop

c0019412 <EnvVarContainer::deleteEnv(char const*)>:
c0019412:	c3                   	ret    
c0019413:	90                   	nop

c0019414 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019414:	55                   	push   ebp
c0019415:	57                   	push   edi
c0019416:	56                   	push   esi
c0019417:	53                   	push   ebx
c0019418:	81 ec 38 01 00 00    	sub    esp,0x138
c001941e:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019425:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001942c:	68 14 01 00 00       	push   0x114
c0019431:	e8 9e 60 ff ff       	call   c000f4d4 <malloc>
c0019436:	83 c4 0c             	add    esp,0xc
c0019439:	89 c7                	mov    edi,eax
c001943b:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001943e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019445:	50                   	push   eax
c0019446:	e8 a5 98 ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001944b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001944e:	e8 6f 9b ff ff       	call   c0012fc2 <File::exists()>
c0019453:	83 c4 10             	add    esp,0x10
c0019456:	84 c0                	test   al,al
c0019458:	75 31                	jne    c001948b <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001945a:	51                   	push   ecx
c001945b:	51                   	push   ecx
c001945c:	6a 12                	push   0x12
c001945e:	57                   	push   edi
c001945f:	e8 f0 98 ff ff       	call   c0012d54 <File::open(FileOpenMode)>
c0019464:	8b 07                	mov    eax,DWORD PTR [edi]
c0019466:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019469:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001946c:	e8 37 72 fe ff       	call   c00006a8 <strlen>
c0019471:	5a                   	pop    edx
c0019472:	31 d2                	xor    edx,edx
c0019474:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019478:	51                   	push   ecx
c0019479:	55                   	push   ebp
c001947a:	52                   	push   edx
c001947b:	50                   	push   eax
c001947c:	57                   	push   edi
c001947d:	ff d3                	call   ebx
c001947f:	83 c4 14             	add    esp,0x14
c0019482:	57                   	push   edi
c0019483:	e8 2a 99 ff ff       	call   c0012db2 <File::close()>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	31 db                	xor    ebx,ebx
c001948d:	50                   	push   eax
c001948e:	31 ed                	xor    ebp,ebp
c0019490:	68 00 01 00 00       	push   0x100
c0019495:	6a 00                	push   0x0
c0019497:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001949b:	50                   	push   eax
c001949c:	e8 ea 71 fe ff       	call   c000068b <memset>
c00194a1:	58                   	pop    eax
c00194a2:	5a                   	pop    edx
c00194a3:	6a 01                	push   0x1
c00194a5:	57                   	push   edi
c00194a6:	e8 a9 98 ff ff       	call   c0012d54 <File::open(FileOpenMode)>
c00194ab:	83 c4 10             	add    esp,0x10
c00194ae:	83 ec 0c             	sub    esp,0xc
c00194b1:	8b 07                	mov    eax,DWORD PTR [edi]
c00194b3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00194b7:	51                   	push   ecx
c00194b8:	8d 54 24 23          	lea    edx,[esp+0x23]
c00194bc:	52                   	push   edx
c00194bd:	6a 00                	push   0x0
c00194bf:	6a 01                	push   0x1
c00194c1:	57                   	push   edi
c00194c2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00194c5:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c00194c9:	83 c4 20             	add    esp,0x20
c00194cc:	3c 0d                	cmp    al,0xd
c00194ce:	0f 84 12 01 00 00    	je     c00195e6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00194d4:	85 db                	test   ebx,ebx
c00194d6:	0f 84 fd 00 00 00    	je     c00195d9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194dc:	3c 0a                	cmp    al,0xa
c00194de:	74 13                	je     c00194f3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00194e0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00194e5:	74 0c                	je     c00194f3 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c00194e7:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c00194ed:	0f 8e e6 00 00 00    	jle    c00195d9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c00194f3:	83 ec 0c             	sub    esp,0xc
c00194f6:	8d 53 01             	lea    edx,[ebx+0x1]
c00194f9:	29 dd                	sub    ebp,ebx
c00194fb:	52                   	push   edx
c00194fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019500:	e8 cf 5f ff ff       	call   c000f4d4 <malloc>
c0019505:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019508:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001950c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001950f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019513:	e8 bc 5f ff ff       	call   c000f4d4 <malloc>
c0019518:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001951c:	83 c4 0c             	add    esp,0xc
c001951f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019523:	52                   	push   edx
c0019524:	6a 00                	push   0x0
c0019526:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001952a:	e8 5c 71 fe ff       	call   c000068b <memset>
c001952f:	83 c4 0c             	add    esp,0xc
c0019532:	53                   	push   ebx
c0019533:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019537:	55                   	push   ebp
c0019538:	01 eb                	add    ebx,ebp
c001953a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001953e:	e8 12 71 fe ff       	call   c0000655 <memcpy>
c0019543:	83 c4 0c             	add    esp,0xc
c0019546:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001954a:	51                   	push   ecx
c001954b:	6a 00                	push   0x0
c001954d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019551:	e8 35 71 fe ff       	call   c000068b <memset>
c0019556:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019559:	e8 4a 71 fe ff       	call   c00006a8 <strlen>
c001955e:	83 c4 0c             	add    esp,0xc
c0019561:	50                   	push   eax
c0019562:	53                   	push   ebx
c0019563:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019567:	e8 e9 70 fe ff       	call   c0000655 <memcpy>
c001956c:	5b                   	pop    ebx
c001956d:	58                   	pop    eax
c001956e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019572:	68 bc a1 02 c0       	push   0xc002a1bc
c0019577:	e8 45 92 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001957c:	8b 06                	mov    eax,DWORD PTR [esi]
c001957e:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019581:	40                   	inc    eax
c0019582:	83 c4 10             	add    esp,0x10
c0019585:	89 06                	mov    DWORD PTR [esi],eax
c0019587:	85 d2                	test   edx,edx
c0019589:	75 0c                	jne    c0019597 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001958b:	83 ec 0c             	sub    esp,0xc
c001958e:	6a 08                	push   0x8
c0019590:	e8 3f 5f ff ff       	call   c000f4d4 <malloc>
c0019595:	eb 0c                	jmp    c00195a3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019597:	c1 e0 03             	shl    eax,0x3
c001959a:	51                   	push   ecx
c001959b:	51                   	push   ecx
c001959c:	50                   	push   eax
c001959d:	52                   	push   edx
c001959e:	e8 1d 5f ff ff       	call   c000f4c0 <realloc>
c00195a3:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c00195a6:	83 c4 10             	add    esp,0x10
c00195a9:	31 db                	xor    ebx,ebx
c00195ab:	52                   	push   edx
c00195ac:	6a 08                	push   0x8
c00195ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00195b2:	50                   	push   eax
c00195b3:	8b 16                	mov    edx,DWORD PTR [esi]
c00195b5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00195b8:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c00195bc:	50                   	push   eax
c00195bd:	e8 93 70 fe ff       	call   c0000655 <memcpy>
c00195c2:	83 c4 0c             	add    esp,0xc
c00195c5:	68 00 01 00 00       	push   0x100
c00195ca:	6a 00                	push   0x0
c00195cc:	55                   	push   ebp
c00195cd:	31 ed                	xor    ebp,ebp
c00195cf:	e8 b7 70 fe ff       	call   c000068b <memset>
c00195d4:	83 c4 10             	add    esp,0x10
c00195d7:	eb 0d                	jmp    c00195e6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00195d9:	3c 3d                	cmp    al,0x3d
c00195db:	74 07                	je     c00195e4 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c00195dd:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c00195e1:	45                   	inc    ebp
c00195e2:	eb 02                	jmp    c00195e6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c00195e4:	89 eb                	mov    ebx,ebp
c00195e6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00195eb:	0f 85 bd fe ff ff    	jne    c00194ae <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c00195f1:	50                   	push   eax
c00195f2:	50                   	push   eax
c00195f3:	ff 36                	push   DWORD PTR [esi]
c00195f5:	68 ca a1 02 c0       	push   0xc002a1ca
c00195fa:	e8 c2 91 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00195ff:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019605:	5b                   	pop    ebx
c0019606:	5e                   	pop    esi
c0019607:	5f                   	pop    edi
c0019608:	5d                   	pop    ebp
c0019609:	c3                   	ret    

c001960a <EnvVarContainer::__loadSystem()>:
c001960a:	83 ec 10             	sub    esp,0x10
c001960d:	68 c0 be 02 c0       	push   0xc002bec0
c0019612:	68 f5 a1 02 c0       	push   0xc002a1f5
c0019617:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001961b:	e8 f4 fd ff ff       	call   c0019414 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019620:	83 c4 1c             	add    esp,0x1c
c0019623:	c3                   	ret    

c0019624 <EnvVarContainer::__loadUser()>:
c0019624:	c3                   	ret    
c0019625:	90                   	nop

c0019626 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019626:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001962a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019634:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019638:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001963b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001963f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019646:	90                   	nop
c0019647:	c3                   	ret    

c0019648 <EnvVarContainer::~EnvVarContainer()>:
c0019648:	83 ec 0c             	sub    esp,0xc
c001964b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001964f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019652:	85 c0                	test   eax,eax
c0019654:	74 1d                	je     c0019673 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001965a:	8b 00                	mov    eax,DWORD PTR [eax]
c001965c:	85 c0                	test   eax,eax
c001965e:	74 13                	je     c0019673 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019664:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019667:	83 ec 0c             	sub    esp,0xc
c001966a:	50                   	push   eax
c001966b:	e8 74 5e ff ff       	call   c000f4e4 <free>
c0019670:	83 c4 10             	add    esp,0x10
c0019673:	90                   	nop
c0019674:	83 c4 0c             	add    esp,0xc
c0019677:	c3                   	ret    

c0019678 <Krnl::getEnv(Process*, char const*)>:
c0019678:	53                   	push   ebx
c0019679:	83 ec 08             	sub    esp,0x8
c001967c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019680:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019684:	39 05 d4 de 02 c0    	cmp    DWORD PTR ds:0xc002ded4,eax
c001968a:	74 04                	je     c0019690 <Krnl::getEnv(Process*, char const*)+0x18>
c001968c:	85 c0                	test   eax,eax
c001968e:	75 0b                	jne    c001969b <Krnl::getEnv(Process*, char const*)+0x23>
c0019690:	a1 b0 d4 02 c0       	mov    eax,ds:0xc002d4b0
c0019695:	85 c0                	test   eax,eax
c0019697:	75 19                	jne    c00196b2 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019699:	eb 27                	jmp    c00196c2 <Krnl::getEnv(Process*, char const*)+0x4a>
c001969b:	52                   	push   edx
c001969c:	52                   	push   edx
c001969d:	53                   	push   ebx
c001969e:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c00196a4:	e8 5f fc ff ff       	call   c0019308 <EnvVarContainer::getEnv(char const*)>
c00196a9:	83 c4 10             	add    esp,0x10
c00196ac:	85 c0                	test   eax,eax
c00196ae:	75 28                	jne    c00196d8 <Krnl::getEnv(Process*, char const*)+0x60>
c00196b0:	eb de                	jmp    c0019690 <Krnl::getEnv(Process*, char const*)+0x18>
c00196b2:	52                   	push   edx
c00196b3:	52                   	push   edx
c00196b4:	53                   	push   ebx
c00196b5:	50                   	push   eax
c00196b6:	e8 4d fc ff ff       	call   c0019308 <EnvVarContainer::getEnv(char const*)>
c00196bb:	83 c4 10             	add    esp,0x10
c00196be:	85 c0                	test   eax,eax
c00196c0:	75 16                	jne    c00196d8 <Krnl::getEnv(Process*, char const*)+0x60>
c00196c2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00196c6:	a1 b4 d4 02 c0       	mov    eax,ds:0xc002d4b4
c00196cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00196cf:	83 c4 08             	add    esp,0x8
c00196d2:	5b                   	pop    ebx
c00196d3:	e9 30 fc ff ff       	jmp    c0019308 <EnvVarContainer::getEnv(char const*)>
c00196d8:	83 c4 08             	add    esp,0x8
c00196db:	5b                   	pop    ebx
c00196dc:	c3                   	ret    

c00196dd <Krnl::setEnvSystem(char const*, char const*)>:
c00196dd:	83 ec 10             	sub    esp,0x10
c00196e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196e4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196e8:	ff 35 b4 d4 02 c0    	push   DWORD PTR ds:0xc002d4b4
c00196ee:	e8 53 fc ff ff       	call   c0019346 <EnvVarContainer::setEnv(char const*, char const*)>
c00196f3:	83 c4 1c             	add    esp,0x1c
c00196f6:	c3                   	ret    

c00196f7 <Krnl::setEnvUser(char const*, char const*)>:
c00196f7:	a1 b0 d4 02 c0       	mov    eax,ds:0xc002d4b0
c00196fc:	85 c0                	test   eax,eax
c00196fe:	74 15                	je     c0019715 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c0019700:	83 ec 10             	sub    esp,0x10
c0019703:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019707:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001970b:	50                   	push   eax
c001970c:	e8 35 fc ff ff       	call   c0019346 <EnvVarContainer::setEnv(char const*, char const*)>
c0019711:	83 c4 1c             	add    esp,0x1c
c0019714:	c3                   	ret    
c0019715:	c3                   	ret    

c0019716 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c0019716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001971a:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c0019720:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019724:	e9 1d fc ff ff       	jmp    c0019346 <EnvVarContainer::setEnv(char const*, char const*)>

c0019729 <Krnl::deleteEnvSystem(char const*)>:
c0019729:	c3                   	ret    

c001972a <Krnl::deleteEnvUser(char const*)>:
c001972a:	c3                   	ret    

c001972b <Krnl::deleteEnvProcess(Process*, char const*)>:
c001972b:	c3                   	ret    

c001972c <Krnl::newProcessEnv(Process*)>:
c001972c:	83 ec 28             	sub    esp,0x28
c001972f:	6a 0c                	push   0xc
c0019731:	e8 9e 5d ff ff       	call   c000f4d4 <malloc>
c0019736:	5a                   	pop    edx
c0019737:	59                   	pop    ecx
c0019738:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001973c:	50                   	push   eax
c001973d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019741:	e8 e0 fe ff ff       	call   c0019626 <EnvVarContainer::EnvVarContainer(Process*)>
c0019746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001974a:	83 c4 2c             	add    esp,0x2c
c001974d:	c3                   	ret    

c001974e <Krnl::copyProcessEnv(Process*, Process*)>:
c001974e:	56                   	push   esi
c001974f:	53                   	push   ebx
c0019750:	83 ec 10             	sub    esp,0x10
c0019753:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019757:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001975d:	6a 0c                	push   0xc
c001975f:	e8 70 5d ff ff       	call   c000f4d4 <malloc>
c0019764:	89 c3                	mov    ebx,eax
c0019766:	58                   	pop    eax
c0019767:	5a                   	pop    edx
c0019768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001976c:	53                   	push   ebx
c001976d:	e8 b4 fe ff ff       	call   c0019626 <EnvVarContainer::EnvVarContainer(Process*)>
c0019772:	8b 06                	mov    eax,DWORD PTR [esi]
c0019774:	89 03                	mov    DWORD PTR [ebx],eax
c0019776:	c1 e0 03             	shl    eax,0x3
c0019779:	89 04 24             	mov    DWORD PTR [esp],eax
c001977c:	e8 53 5d ff ff       	call   c000f4d4 <malloc>
c0019781:	83 c4 0c             	add    esp,0xc
c0019784:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019787:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0019789:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c0019790:	52                   	push   edx
c0019791:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019794:	50                   	push   eax
c0019795:	e8 bb 6e fe ff       	call   c0000655 <memcpy>
c001979a:	89 d8                	mov    eax,ebx
c001979c:	83 c4 14             	add    esp,0x14
c001979f:	5b                   	pop    ebx
c00197a0:	5e                   	pop    esi
c00197a1:	c3                   	ret    

c00197a2 <Krnl::loadSystemEnv()>:
c00197a2:	53                   	push   ebx
c00197a3:	83 ec 14             	sub    esp,0x14
c00197a6:	6a 0c                	push   0xc
c00197a8:	e8 27 5d ff ff       	call   c000f4d4 <malloc>
c00197ad:	89 c3                	mov    ebx,eax
c00197af:	58                   	pop    eax
c00197b0:	5a                   	pop    edx
c00197b1:	ff 35 d4 de 02 c0    	push   DWORD PTR ds:0xc002ded4
c00197b7:	53                   	push   ebx
c00197b8:	e8 69 fe ff ff       	call   c0019626 <EnvVarContainer::EnvVarContainer(Process*)>
c00197bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00197c0:	89 1d b4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4b4,ebx
c00197c6:	e8 3f fe ff ff       	call   c001960a <EnvVarContainer::__loadSystem()>
c00197cb:	83 c4 18             	add    esp,0x18
c00197ce:	5b                   	pop    ebx
c00197cf:	c3                   	ret    

c00197d0 <Krnl::loadUserEnv()>:
c00197d0:	53                   	push   ebx
c00197d1:	83 ec 14             	sub    esp,0x14
c00197d4:	6a 0c                	push   0xc
c00197d6:	e8 f9 5c ff ff       	call   c000f4d4 <malloc>
c00197db:	89 c3                	mov    ebx,eax
c00197dd:	58                   	pop    eax
c00197de:	5a                   	pop    edx
c00197df:	ff 35 d4 de 02 c0    	push   DWORD PTR ds:0xc002ded4
c00197e5:	53                   	push   ebx
c00197e6:	e8 3b fe ff ff       	call   c0019626 <EnvVarContainer::EnvVarContainer(Process*)>
c00197eb:	89 1d b0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4b0,ebx
c00197f1:	83 c4 18             	add    esp,0x18
c00197f4:	5b                   	pop    ebx
c00197f5:	c3                   	ret    

c00197f6 <Krnl::flushEnv()>:
c00197f6:	c3                   	ret    

c00197f7 <Krnl::getProcessTotalEnvCount(Process*)>:
c00197f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00197fb:	8b 15 b0 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4b0
c0019801:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c0019807:	a1 b4 d4 02 c0       	mov    eax,ds:0xc002d4b4
c001980c:	8b 00                	mov    eax,DWORD PTR [eax]
c001980e:	03 01                	add    eax,DWORD PTR [ecx]
c0019810:	85 d2                	test   edx,edx
c0019812:	74 02                	je     c0019816 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0019814:	03 02                	add    eax,DWORD PTR [edx]
c0019816:	c3                   	ret    

c0019817 <Krnl::getProcessEnvPair(Process*, int)>:
c0019817:	57                   	push   edi
c0019818:	8b 0d b0 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4b0
c001981e:	56                   	push   esi
c001981f:	85 c9                	test   ecx,ecx
c0019821:	53                   	push   ebx
c0019822:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0019826:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001982a:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c0019830:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019834:	8b 02                	mov    eax,DWORD PTR [edx]
c0019836:	75 47                	jne    c001987f <Krnl::getProcessEnvPair(Process*, int)+0x68>
c0019838:	39 c3                	cmp    ebx,eax
c001983a:	7c 47                	jl     c0019883 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001983c:	8b 15 b4 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d4b4
c0019842:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019844:	01 c1                	add    ecx,eax
c0019846:	39 d9                	cmp    ecx,ebx
c0019848:	7e 6c                	jle    c00198b6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001984a:	51                   	push   ecx
c001984b:	89 d9                	mov    ecx,ebx
c001984d:	29 c1                	sub    ecx,eax
c001984f:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019852:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c0019856:	53                   	push   ebx
c0019857:	68 17 a2 02 c0       	push   0xc002a217
c001985c:	e8 60 8f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0019861:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c0019867:	2b 18                	sub    ebx,DWORD PTR [eax]
c0019869:	a1 b4 d4 02 c0       	mov    eax,ds:0xc002d4b4
c001986e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019871:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c0019875:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0019878:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001987b:	89 06                	mov    DWORD PTR [esi],eax
c001987d:	eb 51                	jmp    c00198d0 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001987f:	39 c3                	cmp    ebx,eax
c0019881:	7d 05                	jge    c0019888 <Krnl::getProcessEnvPair(Process*, int)+0x71>
c0019883:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019886:	eb 20                	jmp    c00198a8 <Krnl::getProcessEnvPair(Process*, int)+0x91>
c0019888:	8b 39                	mov    edi,DWORD PTR [ecx]
c001988a:	8d 14 07             	lea    edx,[edi+eax*1]
c001988d:	39 da                	cmp    edx,ebx
c001988f:	7e 04                	jle    c0019895 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c0019891:	29 c3                	sub    ebx,eax
c0019893:	eb 10                	jmp    c00198a5 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c0019895:	8b 0d b4 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4b4
c001989b:	03 11                	add    edx,DWORD PTR [ecx]
c001989d:	39 da                	cmp    edx,ebx
c001989f:	7e 15                	jle    c00198b6 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c00198a1:	29 c3                	sub    ebx,eax
c00198a3:	29 fb                	sub    ebx,edi
c00198a5:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00198a8:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c00198ac:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c00198af:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c00198b2:	89 06                	mov    DWORD PTR [esi],eax
c00198b4:	eb 1d                	jmp    c00198d3 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c00198b6:	83 ec 0c             	sub    esp,0xc
c00198b9:	68 2b a2 02 c0       	push   0xc002a22b
c00198be:	e8 18 00 00 00       	call   c00198db <Krnl::panic(char const*)>
c00198c3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00198c9:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00198d0:	83 c4 10             	add    esp,0x10
c00198d3:	89 f0                	mov    eax,esi
c00198d5:	5b                   	pop    ebx
c00198d6:	5e                   	pop    esi
c00198d7:	5f                   	pop    edi
c00198d8:	c2 04 00             	ret    0x4

c00198db <Krnl::panic(char const*)>:
c00198db:	55                   	push   ebp
c00198dc:	89 e5                	mov    ebp,esp
c00198de:	53                   	push   ebx
c00198df:	50                   	push   eax
c00198e0:	a1 bc d4 02 c0       	mov    eax,ds:0xc002d4bc
c00198e5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00198e8:	85 c0                	test   eax,eax
c00198ea:	74 02                	je     c00198ee <Krnl::panic(char const*)+0x13>
c00198ec:	ff d0                	call   eax
c00198ee:	fa                   	cli    
c00198ef:	c6 05 c0 d4 02 c0 01 	mov    BYTE PTR ds:0xc002d4c0,0x1
c00198f6:	83 ec 08             	sub    esp,0x8
c00198f9:	c6 05 c4 b8 02 c0 00 	mov    BYTE PTR ds:0xc002b8c4,0x0
c0019900:	53                   	push   ebx
c0019901:	68 45 a2 02 c0       	push   0xc002a245
c0019906:	e8 b6 8e ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001990b:	58                   	pop    eax
c001990c:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019911:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019917:	e8 67 70 ff ff       	call   c0010983 <setActiveTerminal(VgaText*)>
c001991c:	83 c4 0c             	add    esp,0xc
c001991f:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019924:	6a 01                	push   0x1
c0019926:	6a 0f                	push   0xf
c0019928:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001992e:	e8 d9 69 ff ff       	call   c001030c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019933:	5a                   	pop    edx
c0019934:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019939:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001993f:	e8 e0 72 ff ff       	call   c0010c24 <VgaText::clearScreen()>
c0019944:	59                   	pop    ecx
c0019945:	58                   	pop    eax
c0019946:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001994b:	68 5e a2 02 c0       	push   0xc002a25e
c0019950:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019956:	e8 47 74 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c001995b:	58                   	pop    eax
c001995c:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019961:	5a                   	pop    edx
c0019962:	68 04 a3 02 c0       	push   0xc002a304
c0019967:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001996d:	e8 30 74 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019972:	59                   	pop    ecx
c0019973:	58                   	pop    eax
c0019974:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019979:	68 7a a2 02 c0       	push   0xc002a27a
c001997e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019984:	e8 19 74 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019989:	58                   	pop    eax
c001998a:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001998f:	5a                   	pop    edx
c0019990:	53                   	push   ebx
c0019991:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019997:	e8 06 74 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c001999c:	59                   	pop    ecx
c001999d:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00199a2:	5b                   	pop    ebx
c00199a3:	68 9a a2 02 c0       	push   0xc002a29a
c00199a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199ae:	e8 ef 73 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00199b3:	58                   	pop    eax
c00199b4:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00199b9:	5a                   	pop    edx
c00199ba:	68 40 a3 02 c0       	push   0xc002a340
c00199bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199c5:	e8 d8 73 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00199ca:	59                   	pop    ecx
c00199cb:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00199d0:	5b                   	pop    ebx
c00199d1:	68 7a a2 02 c0       	push   0xc002a27a
c00199d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199dc:	e8 c1 73 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00199e1:	58                   	pop    eax
c00199e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00199e7:	5a                   	pop    edx
c00199e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00199eb:	83 c0 0c             	add    eax,0xc
c00199ee:	50                   	push   eax
c00199ef:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c00199f4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00199fa:	e8 a3 73 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c00199ff:	59                   	pop    ecx
c0019a00:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019a05:	5b                   	pop    ebx
c0019a06:	68 99 a2 02 c0       	push   0xc002a299
c0019a0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a11:	e8 8c 73 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019a16:	58                   	pop    eax
c0019a17:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019a1c:	5a                   	pop    edx
c0019a1d:	68 6c a3 02 c0       	push   0xc002a36c
c0019a22:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a28:	e8 75 73 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019a2d:	59                   	pop    ecx
c0019a2e:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019a33:	5b                   	pop    ebx
c0019a34:	68 ac a3 02 c0       	push   0xc002a3ac
c0019a39:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a3f:	e8 5e 73 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019a44:	58                   	pop    eax
c0019a45:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019a4a:	5a                   	pop    edx
c0019a4b:	68 85 a2 02 c0       	push   0xc002a285
c0019a50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019a56:	e8 47 73 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019a5b:	59                   	pop    ecx
c0019a5c:	5b                   	pop    ebx
c0019a5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019a60:	68 9d a2 02 c0       	push   0xc002a29d
c0019a65:	e8 57 8d ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0019a6a:	58                   	pop    eax
c0019a6b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a6e:	5a                   	pop    edx
c0019a6f:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a72:	68 a6 a2 02 c0       	push   0xc002a2a6
c0019a77:	e8 45 8d ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0019a7c:	59                   	pop    ecx
c0019a7d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0019a80:	5b                   	pop    ebx
c0019a81:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a83:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0019a86:	68 af a2 02 c0       	push   0xc002a2af
c0019a8b:	e8 31 8d ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0019a90:	58                   	pop    eax
c0019a91:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019a96:	5a                   	pop    edx
c0019a97:	68 f0 a3 02 c0       	push   0xc002a3f0
c0019a9c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019aa2:	e8 fb 72 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019aa7:	59                   	pop    ecx
c0019aa8:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019aad:	5b                   	pop    ebx
c0019aae:	68 b8 a2 02 c0       	push   0xc002a2b8
c0019ab3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ab9:	e8 e4 72 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019abe:	0f 20 c0             	mov    eax,cr0
c0019ac1:	5a                   	pop    edx
c0019ac2:	59                   	pop    ecx
c0019ac3:	50                   	push   eax
c0019ac4:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019ac9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019acf:	e8 f4 72 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0019ad4:	5b                   	pop    ebx
c0019ad5:	58                   	pop    eax
c0019ad6:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019adb:	68 c2 a2 02 c0       	push   0xc002a2c2
c0019ae0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019ae6:	e8 b7 72 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019aeb:	0f 20 d0             	mov    eax,cr2
c0019aee:	5a                   	pop    edx
c0019aef:	59                   	pop    ecx
c0019af0:	50                   	push   eax
c0019af1:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019af6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019afc:	e8 c7 72 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0019b01:	5b                   	pop    ebx
c0019b02:	58                   	pop    eax
c0019b03:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019b08:	68 cc a2 02 c0       	push   0xc002a2cc
c0019b0d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b13:	e8 8a 72 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019b18:	0f 20 d8             	mov    eax,cr3
c0019b1b:	5a                   	pop    edx
c0019b1c:	59                   	pop    ecx
c0019b1d:	50                   	push   eax
c0019b1e:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019b23:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b29:	e8 9a 72 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0019b2e:	5b                   	pop    ebx
c0019b2f:	58                   	pop    eax
c0019b30:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019b35:	68 df a2 02 c0       	push   0xc002a2df
c0019b3a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b40:	e8 5d 72 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019b45:	0f 20 e0             	mov    eax,cr4
c0019b48:	5a                   	pop    edx
c0019b49:	59                   	pop    ecx
c0019b4a:	50                   	push   eax
c0019b4b:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019b50:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b56:	e8 6d 72 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0019b5b:	5b                   	pop    ebx
c0019b5c:	58                   	pop    eax
c0019b5d:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019b62:	68 e9 a2 02 c0       	push   0xc002a2e9
c0019b67:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b6d:	e8 30 72 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019b72:	5a                   	pop    edx
c0019b73:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019b78:	59                   	pop    ecx
c0019b79:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019b7f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0019b82:	50                   	push   eax
c0019b83:	e8 40 72 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0019b88:	5b                   	pop    ebx
c0019b89:	58                   	pop    eax
c0019b8a:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019b8f:	68 00 a3 02 c0       	push   0xc002a300
c0019b94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019b9a:	e8 03 72 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019b9f:	5a                   	pop    edx
c0019ba0:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019ba5:	59                   	pop    ecx
c0019ba6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019bac:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019baf:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019bb2:	50                   	push   eax
c0019bb3:	e8 10 72 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0019bb8:	5b                   	pop    ebx
c0019bb9:	58                   	pop    eax
c0019bba:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019bbf:	68 00 a3 02 c0       	push   0xc002a300
c0019bc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0019bca:	e8 d3 71 ff ff       	call   c0010da2 <VgaText::puts(char const*)>
c0019bcf:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c0019bd4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019bd7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0019bdd:	8b 12                	mov    edx,DWORD PTR [edx]
c0019bdf:	59                   	pop    ecx
c0019be0:	5b                   	pop    ebx
c0019be1:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0019be4:	50                   	push   eax
c0019be5:	e8 de 71 ff ff       	call   c0010dc8 <VgaText::putx(unsigned int)>
c0019bea:	83 c4 10             	add    esp,0x10
c0019bed:	b2 fe                	mov    dl,0xfe
c0019bef:	e4 60                	in     al,0x60
c0019bf1:	3c 1c                	cmp    al,0x1c
c0019bf3:	74 04                	je     c0019bf9 <Krnl::panic(char const*)+0x31e>
c0019bf5:	3c 5a                	cmp    al,0x5a
c0019bf7:	75 f6                	jne    c0019bef <Krnl::panic(char const*)+0x314>
c0019bf9:	e4 64                	in     al,0x64
c0019bfb:	a8 02                	test   al,0x2
c0019bfd:	75 fa                	jne    c0019bf9 <Krnl::panic(char const*)+0x31e>
c0019bff:	88 d0                	mov    al,dl
c0019c01:	e6 64                	out    0x64,al
c0019c03:	fa                   	cli    
c0019c04:	f4                   	hlt    
c0019c05:	eb e8                	jmp    c0019bef <Krnl::panic(char const*)+0x314>

c0019c07 <Net::switchEndian16(unsigned short)>:
c0019c07:	83 ec 04             	sub    esp,0x4
c0019c0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c0e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0019c12:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019c16:	c1 f8 08             	sar    eax,0x8
c0019c19:	89 c2                	mov    edx,eax
c0019c1b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0019c1f:	c1 e0 08             	shl    eax,0x8
c0019c22:	09 d0                	or     eax,edx
c0019c24:	83 c4 04             	add    esp,0x4
c0019c27:	c3                   	ret    

c0019c28 <Net::switchEndian32(unsigned int)>:
c0019c28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c2c:	c1 e8 18             	shr    eax,0x18
c0019c2f:	89 c2                	mov    edx,eax
c0019c31:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c35:	c1 e0 08             	shl    eax,0x8
c0019c38:	25 00 00 ff 00       	and    eax,0xff0000
c0019c3d:	09 c2                	or     edx,eax
c0019c3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c43:	c1 e8 08             	shr    eax,0x8
c0019c46:	25 00 ff 00 00       	and    eax,0xff00
c0019c4b:	09 c2                	or     edx,eax
c0019c4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019c51:	c1 e0 18             	shl    eax,0x18
c0019c54:	09 d0                	or     eax,edx
c0019c56:	c3                   	ret    

c0019c57 <Net::crc32Calc(unsigned char*, int)>:
c0019c57:	83 ec 10             	sub    esp,0x10
c0019c5a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c5f:	75 07                	jne    c0019c68 <Net::crc32Calc(unsigned char*, int)+0x11>
c0019c61:	b8 00 00 00 00       	mov    eax,0x0
c0019c66:	eb 7c                	jmp    c0019ce4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c68:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0019c6d:	7f 07                	jg     c0019c76 <Net::crc32Calc(unsigned char*, int)+0x1f>
c0019c6f:	b8 00 00 00 00       	mov    eax,0x0
c0019c74:	eb 6e                	jmp    c0019ce4 <Net::crc32Calc(unsigned char*, int)+0x8d>
c0019c76:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0019c7e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c8a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0019c8e:	7d 4e                	jge    c0019cde <Net::crc32Calc(unsigned char*, int)+0x87>
c0019c90:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019c94:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c98:	01 d0                	add    eax,edx
c0019c9a:	8a 00                	mov    al,BYTE PTR [eax]
c0019c9c:	0f b6 c0             	movzx  eax,al
c0019c9f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0019ca3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cab:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0019cb0:	7f 26                	jg     c0019cd8 <Net::crc32Calc(unsigned char*, int)+0x81>
c0019cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cb6:	83 e0 01             	and    eax,0x1
c0019cb9:	74 0d                	je     c0019cc8 <Net::crc32Calc(unsigned char*, int)+0x71>
c0019cbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019cbf:	d1 e8                	shr    eax,1
c0019cc1:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0019cc6:	eb 06                	jmp    c0019cce <Net::crc32Calc(unsigned char*, int)+0x77>
c0019cc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ccc:	d1 e8                	shr    eax,1
c0019cce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019cd2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019cd6:	eb d3                	jmp    c0019cab <Net::crc32Calc(unsigned char*, int)+0x54>
c0019cd8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0019cdc:	eb a8                	jmp    c0019c86 <Net::crc32Calc(unsigned char*, int)+0x2f>
c0019cde:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ce2:	f7 d0                	not    eax
c0019ce4:	83 c4 10             	add    esp,0x10
c0019ce7:	c3                   	ret    

c0019ce8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0019ce8:	83 ec 1c             	sub    esp,0x1c
c0019ceb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019cef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019cf3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019cfb:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c0019d00:	7f 14                	jg     c0019d16 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c0019d02:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d06:	8d 50 01             	lea    edx,[eax+0x1]
c0019d09:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d0d:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c0019d10:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0019d14:	eb e5                	jmp    c0019cfb <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c0019d16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d1a:	8d 50 01             	lea    edx,[eax+0x1]
c0019d1d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d21:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c0019d24:	83 ec 04             	sub    esp,0x4
c0019d27:	6a 06                	push   0x6
c0019d29:	8d 44 24 36          	lea    eax,[esp+0x36]
c0019d2d:	50                   	push   eax
c0019d2e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d32:	e8 1e 69 fe ff       	call   c0000655 <memcpy>
c0019d37:	83 c4 10             	add    esp,0x10
c0019d3a:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d3f:	83 ec 04             	sub    esp,0x4
c0019d42:	6a 06                	push   0x6
c0019d44:	8d 44 24 30          	lea    eax,[esp+0x30]
c0019d48:	50                   	push   eax
c0019d49:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d4d:	e8 03 69 fe ff       	call   c0000655 <memcpy>
c0019d52:	83 c4 10             	add    esp,0x10
c0019d55:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c0019d5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019d5e:	0f b7 c0             	movzx  eax,ax
c0019d61:	c1 f8 08             	sar    eax,0x8
c0019d64:	89 c1                	mov    ecx,eax
c0019d66:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d6a:	8d 50 01             	lea    edx,[eax+0x1]
c0019d6d:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019d71:	88 ca                	mov    dl,cl
c0019d73:	88 10                	mov    BYTE PTR [eax],dl
c0019d75:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019d79:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019d7d:	8d 48 01             	lea    ecx,[eax+0x1]
c0019d80:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0019d84:	88 10                	mov    BYTE PTR [eax],dl
c0019d86:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019d8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d8e:	83 ec 04             	sub    esp,0x4
c0019d91:	52                   	push   edx
c0019d92:	50                   	push   eax
c0019d93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0019d97:	e8 b9 68 fe ff       	call   c0000655 <memcpy>
c0019d9c:	83 c4 10             	add    esp,0x10
c0019d9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019da3:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0019da7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dab:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0019daf:	83 ec 08             	sub    esp,0x8
c0019db2:	50                   	push   eax
c0019db3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019db7:	e8 9b fe ff ff       	call   c0019c57 <Net::crc32Calc(unsigned char*, int)>
c0019dbc:	83 c4 10             	add    esp,0x10
c0019dbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019dc7:	c1 e8 18             	shr    eax,0x18
c0019dca:	89 c1                	mov    ecx,eax
c0019dcc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019dd0:	8d 50 01             	lea    edx,[eax+0x1]
c0019dd3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019dd7:	88 ca                	mov    dl,cl
c0019dd9:	88 10                	mov    BYTE PTR [eax],dl
c0019ddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ddf:	c1 e8 10             	shr    eax,0x10
c0019de2:	89 c1                	mov    ecx,eax
c0019de4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019de8:	8d 50 01             	lea    edx,[eax+0x1]
c0019deb:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019def:	88 ca                	mov    dl,cl
c0019df1:	88 10                	mov    BYTE PTR [eax],dl
c0019df3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019df7:	c1 e8 08             	shr    eax,0x8
c0019dfa:	89 c1                	mov    ecx,eax
c0019dfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e00:	8d 50 01             	lea    edx,[eax+0x1]
c0019e03:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019e07:	88 ca                	mov    dl,cl
c0019e09:	88 10                	mov    BYTE PTR [eax],dl
c0019e0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e0f:	8d 50 01             	lea    edx,[eax+0x1]
c0019e12:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0019e16:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019e1a:	88 10                	mov    BYTE PTR [eax],dl
c0019e1c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019e20:	83 c4 1c             	add    esp,0x1c
c0019e23:	c3                   	ret    

c0019e24 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0019e24:	83 ec 2c             	sub    esp,0x2c
c0019e27:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e2f:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c0019e34:	83 ec 04             	sub    esp,0x4
c0019e37:	6a 06                	push   0x6
c0019e39:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e41:	83 c0 0e             	add    eax,0xe
c0019e44:	50                   	push   eax
c0019e45:	e8 0b 68 fe ff       	call   c0000655 <memcpy>
c0019e4a:	83 c4 10             	add    esp,0x10
c0019e4d:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e52:	83 ec 04             	sub    esp,0x4
c0019e55:	6a 06                	push   0x6
c0019e57:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e5b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e5f:	83 c0 08             	add    eax,0x8
c0019e62:	50                   	push   eax
c0019e63:	e8 ed 67 fe ff       	call   c0000655 <memcpy>
c0019e68:	83 c4 10             	add    esp,0x10
c0019e6b:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c0019e70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e74:	8d 50 01             	lea    edx,[eax+0x1]
c0019e77:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e7b:	8a 00                	mov    al,BYTE PTR [eax]
c0019e7d:	0f b6 c0             	movzx  eax,al
c0019e80:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0019e85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e89:	8d 50 01             	lea    edx,[eax+0x1]
c0019e8c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019e90:	8a 00                	mov    al,BYTE PTR [eax]
c0019e92:	0f b6 c0             	movzx  eax,al
c0019e95:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c0019e9a:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c0019e9f:	c1 e0 08             	shl    eax,0x8
c0019ea2:	89 c2                	mov    edx,eax
c0019ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019ea8:	09 d0                	or     eax,edx
c0019eaa:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019eae:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0019eb2:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c0019eb7:	75 3a                	jne    c0019ef3 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019eb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019ebd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019ec0:	66 3d dc 05          	cmp    ax,0x5dc
c0019ec4:	77 10                	ja     c0019ed6 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c0019ec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019eca:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0019ecd:	0f b7 c0             	movzx  eax,ax
c0019ed0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0019ed4:	eb 1d                	jmp    c0019ef3 <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c0019ed6:	83 ec 0c             	sub    esp,0xc
c0019ed9:	68 18 a4 02 c0       	push   0xc002a418
c0019ede:	e8 de 88 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0019ee3:	83 c4 10             	add    esp,0x10
c0019ee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019eea:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0019eee:	e9 c0 00 00 00       	jmp    c0019fb3 <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c0019ef3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019ef7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019efb:	8b 00                	mov    eax,DWORD PTR [eax]
c0019efd:	83 ec 04             	sub    esp,0x4
c0019f00:	52                   	push   edx
c0019f01:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019f05:	50                   	push   eax
c0019f06:	e8 4a 67 fe ff       	call   c0000655 <memcpy>
c0019f0b:	83 c4 10             	add    esp,0x10
c0019f0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019f12:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0019f16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f1a:	8d 50 01             	lea    edx,[eax+0x1]
c0019f1d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f21:	8a 00                	mov    al,BYTE PTR [eax]
c0019f23:	0f b6 c0             	movzx  eax,al
c0019f26:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019f2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f2e:	8d 50 01             	lea    edx,[eax+0x1]
c0019f31:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f35:	8a 00                	mov    al,BYTE PTR [eax]
c0019f37:	0f b6 c0             	movzx  eax,al
c0019f3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019f3e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f42:	8d 50 01             	lea    edx,[eax+0x1]
c0019f45:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f49:	8a 00                	mov    al,BYTE PTR [eax]
c0019f4b:	0f b6 c0             	movzx  eax,al
c0019f4e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f52:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f56:	8d 50 01             	lea    edx,[eax+0x1]
c0019f59:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019f5d:	8a 00                	mov    al,BYTE PTR [eax]
c0019f5f:	0f b6 c0             	movzx  eax,al
c0019f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f66:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019f6a:	c1 e0 18             	shl    eax,0x18
c0019f6d:	89 c2                	mov    edx,eax
c0019f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f73:	c1 e0 10             	shl    eax,0x10
c0019f76:	09 c2                	or     edx,eax
c0019f78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019f7c:	c1 e0 08             	shl    eax,0x8
c0019f7f:	09 d0                	or     eax,edx
c0019f81:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0019f85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019f8d:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0019f91:	83 e8 04             	sub    eax,0x4
c0019f94:	83 ec 08             	sub    esp,0x8
c0019f97:	50                   	push   eax
c0019f98:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019f9c:	e8 b6 fc ff ff       	call   c0019c57 <Net::crc32Calc(unsigned char*, int)>
c0019fa1:	83 c4 10             	add    esp,0x10
c0019fa4:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019fa8:	0f 94 c2             	sete   dl
c0019fab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019faf:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0019fb2:	90                   	nop
c0019fb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019fb7:	83 c4 2c             	add    esp,0x2c
c0019fba:	c2 04 00             	ret    0x4

c0019fbd <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0019fbd:	55                   	push   ebp
c0019fbe:	57                   	push   edi
c0019fbf:	56                   	push   esi
c0019fc0:	53                   	push   ebx
c0019fc1:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019fc7:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0019fce:	8a 1e                	mov    bl,BYTE PTR [esi]
c0019fd0:	8d 6e 01             	lea    ebp,[esi+0x1]
c0019fd3:	80 fb 40             	cmp    bl,0x40
c0019fd6:	75 1b                	jne    c0019ff3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0019fd8:	8a 16                	mov    dl,BYTE PTR [esi]
c0019fda:	84 d2                	test   dl,dl
c0019fdc:	0f 84 f1 00 00 00    	je     c001a0d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0019fe2:	8d 46 01             	lea    eax,[esi+0x1]
c0019fe5:	80 fa 3a             	cmp    dl,0x3a
c0019fe8:	74 04                	je     c0019fee <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0019fea:	89 c6                	mov    esi,eax
c0019fec:	eb ea                	jmp    c0019fd8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0019fee:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0019ff1:	89 c6                	mov    esi,eax
c0019ff3:	50                   	push   eax
c0019ff4:	6a 40                	push   0x40
c0019ff6:	6a 00                	push   0x0
c0019ff8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019ffc:	50                   	push   eax
c0019ffd:	e8 89 66 fe ff       	call   c000068b <memset>
c001a002:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a009:	31 c0                	xor    eax,eax
c001a00b:	83 c4 10             	add    esp,0x10
c001a00e:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a010:	84 c9                	test   cl,cl
c001a012:	0f 84 bb 00 00 00    	je     c001a0d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a018:	3d c7 00 00 00       	cmp    eax,0xc7
c001a01d:	0f 8f b0 00 00 00    	jg     c001a0d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a023:	80 f9 0a             	cmp    cl,0xa
c001a026:	0f 85 98 00 00 00    	jne    c001a0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a02c:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a031:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a035:	a8 df                	test   al,0xdf
c001a037:	0f 94 c1             	sete   cl
c001a03a:	3c 23                	cmp    al,0x23
c001a03c:	0f 94 c2             	sete   dl
c001a03f:	08 d1                	or     cl,dl
c001a041:	75 4a                	jne    c001a08d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a043:	8d 50 f7             	lea    edx,[eax-0x9]
c001a046:	80 fa 01             	cmp    dl,0x1
c001a049:	76 42                	jbe    c001a08d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a04b:	3c 5b                	cmp    al,0x5b
c001a04d:	75 42                	jne    c001a091 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a04f:	80 fb 40             	cmp    bl,0x40
c001a052:	75 39                	jne    c001a08d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a054:	83 ec 0c             	sub    esp,0xc
c001a057:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a05b:	52                   	push   edx
c001a05c:	e8 47 66 fe ff       	call   c00006a8 <strlen>
c001a061:	83 c4 10             	add    esp,0x10
c001a064:	83 f8 3f             	cmp    eax,0x3f
c001a067:	77 6a                	ja     c001a0d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a069:	50                   	push   eax
c001a06a:	50                   	push   eax
c001a06b:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a06f:	52                   	push   edx
c001a070:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a074:	52                   	push   edx
c001a075:	e8 b0 66 fe ff       	call   c000072a <strcpy>
c001a07a:	58                   	pop    eax
c001a07b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a07f:	52                   	push   edx
c001a080:	e8 23 66 fe ff       	call   c00006a8 <strlen>
c001a085:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001a08a:	83 c4 10             	add    esp,0x10
c001a08d:	31 d2                	xor    edx,edx
c001a08f:	eb 3a                	jmp    c001a0cb <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001a091:	80 fb 40             	cmp    bl,0x40
c001a094:	74 06                	je     c001a09c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001a096:	8d 44 24 58          	lea    eax,[esp+0x58]
c001a09a:	eb 20                	jmp    c001a0bc <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001a09c:	50                   	push   eax
c001a09d:	50                   	push   eax
c001a09e:	55                   	push   ebp
c001a09f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a0a3:	50                   	push   eax
c001a0a4:	e8 d2 66 fe ff       	call   c000077b <strcmp>
c001a0a9:	83 c4 10             	add    esp,0x10
c001a0ac:	85 c0                	test   eax,eax
c001a0ae:	75 dd                	jne    c001a08d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0b0:	eb e4                	jmp    c001a096 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001a0b2:	8d 50 01             	lea    edx,[eax+0x1]
c001a0b5:	80 f9 3d             	cmp    cl,0x3d
c001a0b8:	74 1d                	je     c001a0d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001a0ba:	89 d0                	mov    eax,edx
c001a0bc:	8a 08                	mov    cl,BYTE PTR [eax]
c001a0be:	84 c9                	test   cl,cl
c001a0c0:	75 f0                	jne    c001a0b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001a0c2:	eb 0f                	jmp    c001a0d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a0c4:	8d 50 01             	lea    edx,[eax+0x1]
c001a0c7:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001a0cb:	47                   	inc    edi
c001a0cc:	89 d0                	mov    eax,edx
c001a0ce:	e9 3b ff ff ff       	jmp    c001a00e <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001a0d3:	31 c0                	xor    eax,eax
c001a0d5:	eb 33                	jmp    c001a10a <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001a0d7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a0db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001a0de:	50                   	push   eax
c001a0df:	50                   	push   eax
c001a0e0:	8d 44 24 60          	lea    eax,[esp+0x60]
c001a0e4:	50                   	push   eax
c001a0e5:	56                   	push   esi
c001a0e6:	e8 90 66 fe ff       	call   c000077b <strcmp>
c001a0eb:	83 c4 10             	add    esp,0x10
c001a0ee:	85 c0                	test   eax,eax
c001a0f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a0f4:	75 97                	jne    c001a08d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a0f6:	51                   	push   ecx
c001a0f7:	51                   	push   ecx
c001a0f8:	52                   	push   edx
c001a0f9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001a100:	e8 25 66 fe ff       	call   c000072a <strcpy>
c001a105:	83 c4 10             	add    esp,0x10
c001a108:	b0 01                	mov    al,0x1
c001a10a:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a110:	5b                   	pop    ebx
c001a111:	5e                   	pop    esi
c001a112:	5f                   	pop    edi
c001a113:	5d                   	pop    ebp
c001a114:	c3                   	ret    

c001a115 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001a115:	57                   	push   edi
c001a116:	56                   	push   esi
c001a117:	53                   	push   ebx
c001a118:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a11e:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001a125:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a12c:	53                   	push   ebx
c001a12d:	e8 76 65 fe ff       	call   c00006a8 <strlen>
c001a132:	89 34 24             	mov    DWORD PTR [esp],esi
c001a135:	89 c7                	mov    edi,eax
c001a137:	e8 6c 65 fe ff       	call   c00006a8 <strlen>
c001a13c:	83 c4 10             	add    esp,0x10
c001a13f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001a143:	3d ff 00 00 00       	cmp    eax,0xff
c001a148:	0f 87 d3 00 00 00    	ja     c001a221 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a14e:	57                   	push   edi
c001a14f:	57                   	push   edi
c001a150:	56                   	push   esi
c001a151:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001a155:	56                   	push   esi
c001a156:	e8 cf 65 fe ff       	call   c000072a <strcpy>
c001a15b:	58                   	pop    eax
c001a15c:	5a                   	pop    edx
c001a15d:	68 c6 a7 02 c0       	push   0xc002a7c6
c001a162:	56                   	push   esi
c001a163:	e8 79 66 fe ff       	call   c00007e1 <strcat>
c001a168:	59                   	pop    ecx
c001a169:	5f                   	pop    edi
c001a16a:	53                   	push   ebx
c001a16b:	56                   	push   esi
c001a16c:	e8 70 66 fe ff       	call   c00007e1 <strcat>
c001a171:	58                   	pop    eax
c001a172:	5a                   	pop    edx
c001a173:	68 64 a4 02 c0       	push   0xc002a464
c001a178:	56                   	push   esi
c001a179:	e8 63 66 fe ff       	call   c00007e1 <strcat>
c001a17e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001a185:	e8 4a 53 ff ff       	call   c000f4d4 <malloc>
c001a18a:	83 c4 0c             	add    esp,0xc
c001a18d:	89 c3                	mov    ebx,eax
c001a18f:	ff 35 d4 de 02 c0    	push   DWORD PTR ds:0xc002ded4
c001a195:	56                   	push   esi
c001a196:	50                   	push   eax
c001a197:	e8 54 8b ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001a19c:	83 c4 10             	add    esp,0x10
c001a19f:	85 db                	test   ebx,ebx
c001a1a1:	74 7e                	je     c001a221 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001a1a3:	51                   	push   ecx
c001a1a4:	51                   	push   ecx
c001a1a5:	6a 01                	push   0x1
c001a1a7:	53                   	push   ebx
c001a1a8:	e8 a7 8b ff ff       	call   c0012d54 <File::open(FileOpenMode)>
c001a1ad:	83 c4 10             	add    esp,0x10
c001a1b0:	85 c0                	test   eax,eax
c001a1b2:	74 08                	je     c001a1bc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001a1b4:	83 ec 0c             	sub    esp,0xc
c001a1b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1b9:	53                   	push   ebx
c001a1ba:	eb 5f                	jmp    c001a21b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001a1bc:	52                   	push   edx
c001a1bd:	8d 44 24 17          	lea    eax,[esp+0x17]
c001a1c1:	50                   	push   eax
c001a1c2:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a1c6:	50                   	push   eax
c001a1c7:	53                   	push   ebx
c001a1c8:	e8 33 8e ff ff       	call   c0013000 <File::stat(unsigned long long*, bool*)>
c001a1cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a1d1:	83 c4 10             	add    esp,0x10
c001a1d4:	89 c1                	mov    ecx,eax
c001a1d6:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001a1da:	74 31                	je     c001a20d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a1dc:	83 ec 0c             	sub    esp,0xc
c001a1df:	50                   	push   eax
c001a1e0:	e8 ef 52 ff ff       	call   c000f4d4 <malloc>
c001a1e5:	89 c6                	mov    esi,eax
c001a1e7:	58                   	pop    eax
c001a1e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1ea:	8d 54 24 20          	lea    edx,[esp+0x20]
c001a1ee:	52                   	push   edx
c001a1ef:	56                   	push   esi
c001a1f0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1f8:	53                   	push   ebx
c001a1f9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a1fc:	83 c4 20             	add    esp,0x20
c001a1ff:	85 c0                	test   eax,eax
c001a201:	75 0a                	jne    c001a20d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001a203:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a207:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001a20b:	74 18                	je     c001a225 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001a20d:	83 ec 0c             	sub    esp,0xc
c001a210:	53                   	push   ebx
c001a211:	e8 9c 8b ff ff       	call   c0012db2 <File::close()>
c001a216:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a218:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a21b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a21e:	83 c4 10             	add    esp,0x10
c001a221:	31 c0                	xor    eax,eax
c001a223:	eb 3b                	jmp    c001a260 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001a225:	83 ec 0c             	sub    esp,0xc
c001a228:	53                   	push   ebx
c001a229:	e8 84 8b ff ff       	call   c0012db2 <File::close()>
c001a22e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a230:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a233:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a236:	83 c4 0c             	add    esp,0xc
c001a239:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a240:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a247:	56                   	push   esi
c001a248:	e8 70 fd ff ff       	call   c0019fbd <Reg::findLineFromLoadedData(char*, char*, char*)>
c001a24d:	89 34 24             	mov    DWORD PTR [esp],esi
c001a250:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001a254:	e8 8b 52 ff ff       	call   c000f4e4 <free>
c001a259:	83 c4 10             	add    esp,0x10
c001a25c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a260:	81 c4 20 01 00 00    	add    esp,0x120
c001a266:	5b                   	pop    ebx
c001a267:	5e                   	pop    esi
c001a268:	5f                   	pop    edi
c001a269:	c3                   	ret    

c001a26a <Reg::getLine(char*, char*, char*)>:
c001a26a:	57                   	push   edi
c001a26b:	56                   	push   esi
c001a26c:	53                   	push   ebx
c001a26d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a271:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a275:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a279:	57                   	push   edi
c001a27a:	56                   	push   esi
c001a27b:	53                   	push   ebx
c001a27c:	68 69 a4 02 c0       	push   0xc002a469
c001a281:	e8 8f fe ff ff       	call   c001a115 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a286:	83 c4 10             	add    esp,0x10
c001a289:	84 c0                	test   al,al
c001a28b:	75 10                	jne    c001a29d <Reg::getLine(char*, char*, char*)+0x33>
c001a28d:	57                   	push   edi
c001a28e:	56                   	push   esi
c001a28f:	53                   	push   ebx
c001a290:	68 8e a4 02 c0       	push   0xc002a48e
c001a295:	e8 7b fe ff ff       	call   c001a115 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001a29a:	83 c4 10             	add    esp,0x10
c001a29d:	5b                   	pop    ebx
c001a29e:	5e                   	pop    esi
c001a29f:	5f                   	pop    edi
c001a2a0:	c3                   	ret    

c001a2a1 <Reg::readInt(char*, char*, int*)>:
c001a2a1:	55                   	push   ebp
c001a2a2:	57                   	push   edi
c001a2a3:	56                   	push   esi
c001a2a4:	53                   	push   ebx
c001a2a5:	81 ec f0 00 00 00    	sub    esp,0xf0
c001a2ab:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a2af:	57                   	push   edi
c001a2b0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a2b7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001a2be:	e8 a7 ff ff ff       	call   c001a26a <Reg::getLine(char*, char*, char*)>
c001a2c3:	83 c4 10             	add    esp,0x10
c001a2c6:	84 c0                	test   al,al
c001a2c8:	0f 84 b3 00 00 00    	je     c001a381 <Reg::readInt(char*, char*, int*)+0xe0>
c001a2ce:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001a2d2:	80 fa 2b             	cmp    dl,0x2b
c001a2d5:	74 0c                	je     c001a2e3 <Reg::readInt(char*, char*, int*)+0x42>
c001a2d7:	80 fa 2d             	cmp    dl,0x2d
c001a2da:	75 0e                	jne    c001a2ea <Reg::readInt(char*, char*, int*)+0x49>
c001a2dc:	ba 01 00 00 00       	mov    edx,0x1
c001a2e1:	eb 0b                	jmp    c001a2ee <Reg::readInt(char*, char*, int*)+0x4d>
c001a2e3:	ba 01 00 00 00       	mov    edx,0x1
c001a2e8:	eb 02                	jmp    c001a2ec <Reg::readInt(char*, char*, int*)+0x4b>
c001a2ea:	31 d2                	xor    edx,edx
c001a2ec:	31 c0                	xor    eax,eax
c001a2ee:	be 0a 00 00 00       	mov    esi,0xa
c001a2f3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001a2f8:	75 20                	jne    c001a31a <Reg::readInt(char*, char*, int*)+0x79>
c001a2fa:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001a2fe:	80 f9 78             	cmp    cl,0x78
c001a301:	75 0a                	jne    c001a30d <Reg::readInt(char*, char*, int*)+0x6c>
c001a303:	83 c2 02             	add    edx,0x2
c001a306:	be 10 00 00 00       	mov    esi,0x10
c001a30b:	eb 0d                	jmp    c001a31a <Reg::readInt(char*, char*, int*)+0x79>
c001a30d:	80 f9 62             	cmp    cl,0x62
c001a310:	75 08                	jne    c001a31a <Reg::readInt(char*, char*, int*)+0x79>
c001a312:	83 c2 02             	add    edx,0x2
c001a315:	be 02 00 00 00       	mov    esi,0x2
c001a31a:	01 d7                	add    edi,edx
c001a31c:	31 d2                	xor    edx,edx
c001a31e:	8a 1f                	mov    bl,BYTE PTR [edi]
c001a320:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001a324:	80 fb 0d             	cmp    bl,0xd
c001a327:	0f 94 c3             	sete   bl
c001a32a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001a32f:	0f 94 c1             	sete   cl
c001a332:	08 cb                	or     bl,cl
c001a334:	75 3a                	jne    c001a370 <Reg::readInt(char*, char*, int*)+0xcf>
c001a336:	0f af d6             	imul   edx,esi
c001a339:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001a33e:	83 fe 10             	cmp    esi,0x10
c001a341:	75 26                	jne    c001a369 <Reg::readInt(char*, char*, int*)+0xc8>
c001a343:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a347:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001a34a:	89 e9                	mov    ecx,ebp
c001a34c:	80 f9 05             	cmp    cl,0x5
c001a34f:	77 06                	ja     c001a357 <Reg::readInt(char*, char*, int*)+0xb6>
c001a351:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001a355:	eb 16                	jmp    c001a36d <Reg::readInt(char*, char*, int*)+0xcc>
c001a357:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001a35b:	83 e9 61             	sub    ecx,0x61
c001a35e:	80 f9 05             	cmp    cl,0x5
c001a361:	77 06                	ja     c001a369 <Reg::readInt(char*, char*, int*)+0xc8>
c001a363:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001a367:	eb 04                	jmp    c001a36d <Reg::readInt(char*, char*, int*)+0xcc>
c001a369:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001a36d:	47                   	inc    edi
c001a36e:	eb ae                	jmp    c001a31e <Reg::readInt(char*, char*, int*)+0x7d>
c001a370:	84 c0                	test   al,al
c001a372:	74 02                	je     c001a376 <Reg::readInt(char*, char*, int*)+0xd5>
c001a374:	f7 da                	neg    edx
c001a376:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001a37d:	89 10                	mov    DWORD PTR [eax],edx
c001a37f:	88 d8                	mov    al,bl
c001a381:	81 c4 ec 00 00 00    	add    esp,0xec
c001a387:	5b                   	pop    ebx
c001a388:	5e                   	pop    esi
c001a389:	5f                   	pop    edi
c001a38a:	5d                   	pop    ebp
c001a38b:	c3                   	ret    

c001a38c <Reg::readString(char*, char*, char*, int)>:
c001a38c:	57                   	push   edi
c001a38d:	56                   	push   esi
c001a38e:	53                   	push   ebx
c001a38f:	81 ec d4 00 00 00    	sub    esp,0xd4
c001a395:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001a39c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001a3a0:	57                   	push   edi
c001a3a1:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a3a8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001a3af:	e8 b6 fe ff ff       	call   c001a26a <Reg::getLine(char*, char*, char*)>
c001a3b4:	83 c4 10             	add    esp,0x10
c001a3b7:	89 c6                	mov    esi,eax
c001a3b9:	84 c0                	test   al,al
c001a3bb:	74 44                	je     c001a401 <Reg::readString(char*, char*, char*, int)+0x75>
c001a3bd:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001a3c4:	31 c0                	xor    eax,eax
c001a3c6:	4a                   	dec    edx
c001a3c7:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001a3ca:	84 c9                	test   cl,cl
c001a3cc:	74 0f                	je     c001a3dd <Reg::readString(char*, char*, char*, int)+0x51>
c001a3ce:	39 c2                	cmp    edx,eax
c001a3d0:	7e 0b                	jle    c001a3dd <Reg::readString(char*, char*, char*, int)+0x51>
c001a3d2:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001a3d5:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001a3da:	40                   	inc    eax
c001a3db:	eb ea                	jmp    c001a3c7 <Reg::readString(char*, char*, char*, int)+0x3b>
c001a3dd:	83 ec 0c             	sub    esp,0xc
c001a3e0:	53                   	push   ebx
c001a3e1:	e8 c2 62 fe ff       	call   c00006a8 <strlen>
c001a3e6:	83 c4 10             	add    esp,0x10
c001a3e9:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001a3ee:	75 11                	jne    c001a401 <Reg::readString(char*, char*, char*, int)+0x75>
c001a3f0:	83 ec 0c             	sub    esp,0xc
c001a3f3:	53                   	push   ebx
c001a3f4:	e8 af 62 fe ff       	call   c00006a8 <strlen>
c001a3f9:	83 c4 10             	add    esp,0x10
c001a3fc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001a401:	81 c4 d0 00 00 00    	add    esp,0xd0
c001a407:	89 f0                	mov    eax,esi
c001a409:	5b                   	pop    ebx
c001a40a:	5e                   	pop    esi
c001a40b:	5f                   	pop    edi
c001a40c:	c3                   	ret    

c001a40d <Reg::readBool(char*, char*, bool*)>:
c001a40d:	83 ec 20             	sub    esp,0x20
c001a410:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a414:	50                   	push   eax
c001a415:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a419:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a41d:	e8 7f fe ff ff       	call   c001a2a1 <Reg::readInt(char*, char*, int*)>
c001a422:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a427:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a42b:	0f 95 02             	setne  BYTE PTR [edx]
c001a42e:	83 c4 2c             	add    esp,0x2c
c001a431:	c3                   	ret    

c001a432 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001a432:	53                   	push   ebx
c001a433:	83 ec 1c             	sub    esp,0x1c
c001a436:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001a43a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001a43e:	50                   	push   eax
c001a43f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a443:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a447:	e8 c1 ff ff ff       	call   c001a40d <Reg::readBool(char*, char*, bool*)>
c001a44c:	83 c4 10             	add    esp,0x10
c001a44f:	84 c0                	test   al,al
c001a451:	74 04                	je     c001a457 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001a453:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001a457:	88 d8                	mov    al,bl
c001a459:	83 c4 18             	add    esp,0x18
c001a45c:	5b                   	pop    ebx
c001a45d:	c3                   	ret    

c001a45e <Reg::readIntWithDefault(char*, char*, int)>:
c001a45e:	53                   	push   ebx
c001a45f:	83 ec 1c             	sub    esp,0x1c
c001a462:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a466:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a46a:	50                   	push   eax
c001a46b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a46f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a473:	e8 29 fe ff ff       	call   c001a2a1 <Reg::readInt(char*, char*, int*)>
c001a478:	83 c4 10             	add    esp,0x10
c001a47b:	84 c0                	test   al,al
c001a47d:	74 04                	je     c001a483 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001a47f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a483:	89 d8                	mov    eax,ebx
c001a485:	83 c4 18             	add    esp,0x18
c001a488:	5b                   	pop    ebx
c001a489:	c3                   	ret    

c001a48a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001a48a:	57                   	push   edi
c001a48b:	56                   	push   esi
c001a48c:	53                   	push   ebx
c001a48d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a491:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a495:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001a499:	56                   	push   esi
c001a49a:	53                   	push   ebx
c001a49b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a49f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4a3:	e8 e4 fe ff ff       	call   c001a38c <Reg::readString(char*, char*, char*, int)>
c001a4a8:	83 c4 10             	add    esp,0x10
c001a4ab:	84 c0                	test   al,al
c001a4ad:	75 1b                	jne    c001a4ca <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001a4af:	50                   	push   eax
c001a4b0:	56                   	push   esi
c001a4b1:	4e                   	dec    esi
c001a4b2:	6a 00                	push   0x0
c001a4b4:	53                   	push   ebx
c001a4b5:	e8 d1 61 fe ff       	call   c000068b <memset>
c001a4ba:	83 c4 0c             	add    esp,0xc
c001a4bd:	56                   	push   esi
c001a4be:	57                   	push   edi
c001a4bf:	53                   	push   ebx
c001a4c0:	89 fb                	mov    ebx,edi
c001a4c2:	e8 8e 61 fe ff       	call   c0000655 <memcpy>
c001a4c7:	83 c4 10             	add    esp,0x10
c001a4ca:	89 d8                	mov    eax,ebx
c001a4cc:	5b                   	pop    ebx
c001a4cd:	5e                   	pop    esi
c001a4ce:	5f                   	pop    edi
c001a4cf:	c3                   	ret    

c001a4d0 <Sys::exit(regs*)>:
c001a4d0:	83 ec 18             	sub    esp,0x18
c001a4d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4d7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4da:	e8 ce 32 00 00       	call   c001d7ad <terminateTask(int)>
c001a4df:	83 c8 ff             	or     eax,0xffffffff
c001a4e2:	83 c4 1c             	add    esp,0x1c
c001a4e5:	89 c2                	mov    edx,eax
c001a4e7:	c3                   	ret    

c001a4e8 <Sys::getCwd(regs*)>:
c001a4e8:	83 ec 10             	sub    esp,0x10
c001a4eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a4ef:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001a4f2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a4f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a4fa:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a4fd:	e8 5f 8b ff ff       	call   c0013061 <getcwd(Process*, char*, int)>
c001a502:	83 c4 1c             	add    esp,0x1c
c001a505:	99                   	cdq    
c001a506:	c3                   	ret    

c001a507 <Sys::getPID(regs*)>:
c001a507:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a50c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a50f:	8b 00                	mov    eax,DWORD PTR [eax]
c001a511:	99                   	cdq    
c001a512:	c3                   	ret    

c001a513 <Sys::loadDLL(regs*)>:
c001a513:	56                   	push   esi
c001a514:	53                   	push   ebx
c001a515:	31 d2                	xor    edx,edx
c001a517:	51                   	push   ecx
c001a518:	b8 01 00 00 00       	mov    eax,0x1
c001a51d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a521:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001a525:	0f 84 8c 00 00 00    	je     c001a5b7 <Sys::loadDLL(regs*)+0xa4>
c001a52b:	83 ec 0c             	sub    esp,0xc
c001a52e:	68 14 01 00 00       	push   0x114
c001a533:	e8 9c 4f ff ff       	call   c000f4d4 <malloc>
c001a538:	83 c4 0c             	add    esp,0xc
c001a53b:	89 c3                	mov    ebx,eax
c001a53d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a542:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a545:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a548:	53                   	push   ebx
c001a549:	e8 a2 87 ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001a54e:	83 c4 10             	add    esp,0x10
c001a551:	31 d2                	xor    edx,edx
c001a553:	b8 02 00 00 00       	mov    eax,0x2
c001a558:	85 db                	test   ebx,ebx
c001a55a:	74 5b                	je     c001a5b7 <Sys::loadDLL(regs*)+0xa4>
c001a55c:	83 ec 0c             	sub    esp,0xc
c001a55f:	53                   	push   ebx
c001a560:	e8 5d 8a ff ff       	call   c0012fc2 <File::exists()>
c001a565:	83 c4 10             	add    esp,0x10
c001a568:	84 c0                	test   al,al
c001a56a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a56c:	75 11                	jne    c001a57f <Sys::loadDLL(regs*)+0x6c>
c001a56e:	83 ec 0c             	sub    esp,0xc
c001a571:	53                   	push   ebx
c001a572:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a575:	83 c4 10             	add    esp,0x10
c001a578:	b8 03 00 00 00       	mov    eax,0x3
c001a57d:	eb 36                	jmp    c001a5b5 <Sys::loadDLL(regs*)+0xa2>
c001a57f:	83 ec 0c             	sub    esp,0xc
c001a582:	53                   	push   ebx
c001a583:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001a586:	58                   	pop    eax
c001a587:	5a                   	pop    edx
c001a588:	6a 00                	push   0x0
c001a58a:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001a58d:	e8 64 21 00 00       	call   c001c6f6 <Thr::loadDLL(char const*, bool)>
c001a592:	83 c4 10             	add    esp,0x10
c001a595:	89 c1                	mov    ecx,eax
c001a597:	31 d2                	xor    edx,edx
c001a599:	b8 04 00 00 00       	mov    eax,0x4
c001a59e:	85 c9                	test   ecx,ecx
c001a5a0:	74 15                	je     c001a5b7 <Sys::loadDLL(regs*)+0xa4>
c001a5a2:	53                   	push   ebx
c001a5a3:	53                   	push   ebx
c001a5a4:	ff 35 88 c9 02 c0    	push   DWORD PTR ds:0xc002c988
c001a5aa:	51                   	push   ecx
c001a5ab:	e8 55 23 00 00       	call   c001c905 <Thr::executeDLL(unsigned long, void*)>
c001a5b0:	83 c4 10             	add    esp,0x10
c001a5b3:	31 c0                	xor    eax,eax
c001a5b5:	31 d2                	xor    edx,edx
c001a5b7:	59                   	pop    ecx
c001a5b8:	5b                   	pop    ebx
c001a5b9:	5e                   	pop    esi
c001a5ba:	c3                   	ret    

c001a5bb <Sys::read(regs*)>:
c001a5bb:	57                   	push   edi
c001a5bc:	56                   	push   esi
c001a5bd:	53                   	push   ebx
c001a5be:	83 ec 10             	sub    esp,0x10
c001a5c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5c5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a5c8:	83 f8 02             	cmp    eax,0x2
c001a5cb:	77 10                	ja     c001a5dd <Sys::read(regs*)+0x22>
c001a5cd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a5d2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a5d5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a5db:	eb 0e                	jmp    c001a5eb <Sys::read(regs*)+0x30>
c001a5dd:	83 ec 0c             	sub    esp,0xc
c001a5e0:	50                   	push   eax
c001a5e1:	e8 95 70 ff ff       	call   c001167b <getFromFileDescriptor(int)>
c001a5e6:	83 c4 10             	add    esp,0x10
c001a5e9:	89 c1                	mov    ecx,eax
c001a5eb:	83 c8 ff             	or     eax,0xffffffff
c001a5ee:	85 c9                	test   ecx,ecx
c001a5f0:	89 c2                	mov    edx,eax
c001a5f2:	74 28                	je     c001a61c <Sys::read(regs*)+0x61>
c001a5f4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5fc:	31 ff                	xor    edi,edi
c001a5fe:	83 ec 0c             	sub    esp,0xc
c001a601:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a603:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a607:	52                   	push   edx
c001a608:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a60b:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a60e:	57                   	push   edi
c001a60f:	56                   	push   esi
c001a610:	51                   	push   ecx
c001a611:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a614:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a618:	83 c4 20             	add    esp,0x20
c001a61b:	99                   	cdq    
c001a61c:	83 c4 10             	add    esp,0x10
c001a61f:	5b                   	pop    ebx
c001a620:	5e                   	pop    esi
c001a621:	5f                   	pop    edi
c001a622:	c3                   	ret    

c001a623 <Sys::sbrk(regs*)>:
c001a623:	56                   	push   esi
c001a624:	53                   	push   ebx
c001a625:	50                   	push   eax
c001a626:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a62b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a62f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a632:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001a635:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001a63b:	85 db                	test   ebx,ebx
c001a63d:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001a640:	74 02                	je     c001a644 <Sys::sbrk(regs*)+0x21>
c001a642:	79 06                	jns    c001a64a <Sys::sbrk(regs*)+0x27>
c001a644:	89 f0                	mov    eax,esi
c001a646:	31 d2                	xor    edx,edx
c001a648:	eb 2a                	jmp    c001a674 <Sys::sbrk(regs*)+0x51>
c001a64a:	83 c8 ff             	or     eax,0xffffffff
c001a64d:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001a653:	89 c2                	mov    edx,eax
c001a655:	77 1d                	ja     c001a674 <Sys::sbrk(regs*)+0x51>
c001a657:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001a65d:	50                   	push   eax
c001a65e:	c1 ea 0c             	shr    edx,0xc
c001a661:	68 07 04 00 00       	push   0x407
c001a666:	52                   	push   edx
c001a667:	51                   	push   ecx
c001a668:	e8 2f 79 ff ff       	call   c0011f9c <VAS::allocatePages(int, int)>
c001a66d:	89 f0                	mov    eax,esi
c001a66f:	31 d2                	xor    edx,edx
c001a671:	83 c4 10             	add    esp,0x10
c001a674:	59                   	pop    ecx
c001a675:	5b                   	pop    ebx
c001a676:	5e                   	pop    esi
c001a677:	c3                   	ret    

c001a678 <Sys::setCwd(regs*)>:
c001a678:	83 ec 14             	sub    esp,0x14
c001a67b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a67f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001a682:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a687:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001a68a:	e8 fc 89 ff ff       	call   c001308b <setcwd(Process*, char*)>
c001a68f:	83 c4 1c             	add    esp,0x1c
c001a692:	99                   	cdq    
c001a693:	c3                   	ret    

c001a694 <Sys::write(regs*)>:
c001a694:	57                   	push   edi
c001a695:	56                   	push   esi
c001a696:	53                   	push   ebx
c001a697:	83 ec 10             	sub    esp,0x10
c001a69a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a69e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a6a1:	83 f8 02             	cmp    eax,0x2
c001a6a4:	77 10                	ja     c001a6b6 <Sys::write(regs*)+0x22>
c001a6a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a6ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a6ae:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001a6b4:	eb 0e                	jmp    c001a6c4 <Sys::write(regs*)+0x30>
c001a6b6:	83 ec 0c             	sub    esp,0xc
c001a6b9:	50                   	push   eax
c001a6ba:	e8 bc 6f ff ff       	call   c001167b <getFromFileDescriptor(int)>
c001a6bf:	83 c4 10             	add    esp,0x10
c001a6c2:	89 c1                	mov    ecx,eax
c001a6c4:	83 c8 ff             	or     eax,0xffffffff
c001a6c7:	85 c9                	test   ecx,ecx
c001a6c9:	89 c2                	mov    edx,eax
c001a6cb:	74 28                	je     c001a6f5 <Sys::write(regs*)+0x61>
c001a6cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a6d5:	31 ff                	xor    edi,edi
c001a6d7:	83 ec 0c             	sub    esp,0xc
c001a6da:	8b 01                	mov    eax,DWORD PTR [ecx]
c001a6dc:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a6e0:	52                   	push   edx
c001a6e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a6e4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001a6e7:	57                   	push   edi
c001a6e8:	56                   	push   esi
c001a6e9:	51                   	push   ecx
c001a6ea:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001a6ed:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a6f1:	83 c4 20             	add    esp,0x20
c001a6f4:	99                   	cdq    
c001a6f5:	83 c4 10             	add    esp,0x10
c001a6f8:	5b                   	pop    ebx
c001a6f9:	5e                   	pop    esi
c001a6fa:	5f                   	pop    edi
c001a6fb:	c3                   	ret    

c001a6fc <Sys::yield(regs*)>:
c001a6fc:	57                   	push   edi
c001a6fd:	56                   	push   esi
c001a6fe:	53                   	push   ebx
c001a6ff:	e8 66 26 00 00       	call   c001cd6a <lockScheduler()>
c001a704:	e8 9d 29 00 00       	call   c001d0a6 <schedule()>
c001a709:	e8 5e 26 00 00       	call   c001cd6c <unlockScheduler()>
c001a70e:	8b 35 10 d0 02 c0    	mov    esi,DWORD PTR ds:0xc002d010
c001a714:	8b 3d 14 d0 02 c0    	mov    edi,DWORD PTR ds:0xc002d014
c001a71a:	89 f0                	mov    eax,esi
c001a71c:	89 fb                	mov    ebx,edi
c001a71e:	89 f1                	mov    ecx,esi
c001a720:	c1 e0 07             	shl    eax,0x7
c001a723:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001a727:	25 80 30 0f 00       	and    eax,0xf3080
c001a72c:	c1 eb 17             	shr    ebx,0x17
c001a72f:	31 c8                	xor    eax,ecx
c001a731:	89 da                	mov    edx,ebx
c001a733:	5b                   	pop    ebx
c001a734:	5e                   	pop    esi
c001a735:	5f                   	pop    edi
c001a736:	c3                   	ret    

c001a737 <sysCallSeekDir(regs*)>:
c001a737:	31 c0                	xor    eax,eax
c001a739:	31 d2                	xor    edx,edx
c001a73b:	c3                   	ret    

c001a73c <sysCallTellDir(regs*)>:
c001a73c:	31 c0                	xor    eax,eax
c001a73e:	31 d2                	xor    edx,edx
c001a740:	c3                   	ret    

c001a741 <sysCallVerify(regs*)>:
c001a741:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a745:	31 d2                	xor    edx,edx
c001a747:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a74a:	c3                   	ret    

c001a74b <sysCallGetArgc(regs*)>:
c001a74b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a750:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a753:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001a759:	99                   	cdq    
c001a75a:	c3                   	ret    

c001a75b <sysFormatDisk(regs*)>:
c001a75b:	56                   	push   esi
c001a75c:	53                   	push   ebx
c001a75d:	53                   	push   ebx
c001a75e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a762:	8b 1d 08 cb 02 c0    	mov    ebx,DWORD PTR ds:0xc002cb08
c001a768:	eb 25                	jmp    c001a78f <sysFormatDisk(regs*)+0x34>
c001a76a:	83 ec 0c             	sub    esp,0xc
c001a76d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a770:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a772:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001a775:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001a778:	50                   	push   eax
c001a779:	ff 34 85 a0 cf 02 c0 	push   DWORD PTR [eax*4-0x3ffd3060]
c001a780:	53                   	push   ebx
c001a781:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001a784:	83 c4 20             	add    esp,0x20
c001a787:	83 f8 08             	cmp    eax,0x8
c001a78a:	75 12                	jne    c001a79e <sysFormatDisk(regs*)+0x43>
c001a78c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001a78f:	85 db                	test   ebx,ebx
c001a791:	75 d7                	jne    c001a76a <sysFormatDisk(regs*)+0xf>
c001a793:	59                   	pop    ecx
c001a794:	b8 03 00 00 00       	mov    eax,0x3
c001a799:	31 d2                	xor    edx,edx
c001a79b:	5b                   	pop    ebx
c001a79c:	5e                   	pop    esi
c001a79d:	c3                   	ret    
c001a79e:	85 c0                	test   eax,eax
c001a7a0:	74 1b                	je     c001a7bd <sysFormatDisk(regs*)+0x62>
c001a7a2:	83 f8 09             	cmp    eax,0x9
c001a7a5:	74 0b                	je     c001a7b2 <sysFormatDisk(regs*)+0x57>
c001a7a7:	59                   	pop    ecx
c001a7a8:	b8 02 00 00 00       	mov    eax,0x2
c001a7ad:	31 d2                	xor    edx,edx
c001a7af:	5b                   	pop    ebx
c001a7b0:	5e                   	pop    esi
c001a7b1:	c3                   	ret    
c001a7b2:	59                   	pop    ecx
c001a7b3:	b8 01 00 00 00       	mov    eax,0x1
c001a7b8:	31 d2                	xor    edx,edx
c001a7ba:	5b                   	pop    ebx
c001a7bb:	5e                   	pop    esi
c001a7bc:	c3                   	ret    
c001a7bd:	59                   	pop    ecx
c001a7be:	31 c0                	xor    eax,eax
c001a7c0:	31 d2                	xor    edx,edx
c001a7c2:	5b                   	pop    ebx
c001a7c3:	5e                   	pop    esi
c001a7c4:	c3                   	ret    

c001a7c5 <sysSetDiskVolumeLabel(regs*)>:
c001a7c5:	56                   	push   esi
c001a7c6:	53                   	push   ebx
c001a7c7:	53                   	push   ebx
c001a7c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a7cc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001a7cf:	83 f8 19             	cmp    eax,0x19
c001a7d2:	77 29                	ja     c001a7fd <sysSetDiskVolumeLabel(regs*)+0x38>
c001a7d4:	8b 0c 85 a0 cf 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd3060]
c001a7db:	85 c9                	test   ecx,ecx
c001a7dd:	74 1e                	je     c001a7fd <sysSetDiskVolumeLabel(regs*)+0x38>
c001a7df:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001a7e2:	85 d2                	test   edx,edx
c001a7e4:	74 17                	je     c001a7fd <sysSetDiskVolumeLabel(regs*)+0x38>
c001a7e6:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001a7ec:	8b 33                	mov    esi,DWORD PTR [ebx]
c001a7ee:	52                   	push   edx
c001a7ef:	50                   	push   eax
c001a7f0:	51                   	push   ecx
c001a7f1:	53                   	push   ebx
c001a7f2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001a7f5:	83 c4 10             	add    esp,0x10
c001a7f8:	99                   	cdq    
c001a7f9:	59                   	pop    ecx
c001a7fa:	5b                   	pop    ebx
c001a7fb:	5e                   	pop    esi
c001a7fc:	c3                   	ret    
c001a7fd:	59                   	pop    ecx
c001a7fe:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a803:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a808:	5b                   	pop    ebx
c001a809:	5e                   	pop    esi
c001a80a:	c3                   	ret    

c001a80b <sysGetDiskVolumeLabel(regs*)>:
c001a80b:	57                   	push   edi
c001a80c:	56                   	push   esi
c001a80d:	53                   	push   ebx
c001a80e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a812:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001a815:	83 fa 19             	cmp    edx,0x19
c001a818:	77 34                	ja     c001a84e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a81a:	8b 0c 95 a0 cf 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd3060]
c001a821:	85 c9                	test   ecx,ecx
c001a823:	74 29                	je     c001a84e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a825:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001a828:	85 db                	test   ebx,ebx
c001a82a:	74 22                	je     c001a84e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a82c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001a82f:	85 c0                	test   eax,eax
c001a831:	74 1b                	je     c001a84e <sysGetDiskVolumeLabel(regs*)+0x43>
c001a833:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001a839:	83 ec 0c             	sub    esp,0xc
c001a83c:	8b 3e                	mov    edi,DWORD PTR [esi]
c001a83e:	50                   	push   eax
c001a83f:	53                   	push   ebx
c001a840:	52                   	push   edx
c001a841:	51                   	push   ecx
c001a842:	56                   	push   esi
c001a843:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001a846:	83 c4 20             	add    esp,0x20
c001a849:	99                   	cdq    
c001a84a:	5b                   	pop    ebx
c001a84b:	5e                   	pop    esi
c001a84c:	5f                   	pop    edi
c001a84d:	c3                   	ret    
c001a84e:	5b                   	pop    ebx
c001a84f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001a854:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a859:	5e                   	pop    esi
c001a85a:	5f                   	pop    edi
c001a85b:	c3                   	ret    

c001a85c <sysShutdown(regs*)>:
c001a85c:	83 ec 0c             	sub    esp,0xc
c001a85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a863:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a866:	85 c0                	test   eax,eax
c001a868:	74 18                	je     c001a882 <sysShutdown(regs*)+0x26>
c001a86a:	83 f8 01             	cmp    eax,0x1
c001a86d:	74 38                	je     c001a8a7 <sysShutdown(regs*)+0x4b>
c001a86f:	83 f8 02             	cmp    eax,0x2
c001a872:	74 24                	je     c001a898 <sysShutdown(regs*)+0x3c>
c001a874:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a879:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a87e:	83 c4 0c             	add    esp,0xc
c001a881:	c3                   	ret    
c001a882:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001a887:	8b 10                	mov    edx,DWORD PTR [eax]
c001a889:	6a 00                	push   0x0
c001a88b:	6a 00                	push   0x0
c001a88d:	6a 00                	push   0x0
c001a88f:	50                   	push   eax
c001a890:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a893:	83 c4 10             	add    esp,0x10
c001a896:	eb dc                	jmp    c001a874 <sysShutdown(regs*)+0x18>
c001a898:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001a89d:	8b 10                	mov    edx,DWORD PTR [eax]
c001a89f:	6a 00                	push   0x0
c001a8a1:	6a 00                	push   0x0
c001a8a3:	6a 01                	push   0x1
c001a8a5:	eb e8                	jmp    c001a88f <sysShutdown(regs*)+0x33>
c001a8a7:	a1 20 d0 02 c0       	mov    eax,ds:0xc002d020
c001a8ac:	85 c0                	test   eax,eax
c001a8ae:	74 02                	je     c001a8b2 <sysShutdown(regs*)+0x56>
c001a8b0:	ff d0                	call   eax
c001a8b2:	31 c0                	xor    eax,eax
c001a8b4:	31 d2                	xor    edx,edx
c001a8b6:	83 c4 0c             	add    esp,0xc
c001a8b9:	c3                   	ret    

c001a8ba <sysCallRealpath(regs*)>:
c001a8ba:	83 ec 0c             	sub    esp,0xc
c001a8bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001a8c4:	85 d2                	test   edx,edx
c001a8c6:	74 07                	je     c001a8cf <sysCallRealpath(regs*)+0x15>
c001a8c8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a8cb:	85 c0                	test   eax,eax
c001a8cd:	75 0b                	jne    c001a8da <sysCallRealpath(regs*)+0x20>
c001a8cf:	b8 01 00 00 00       	mov    eax,0x1
c001a8d4:	31 d2                	xor    edx,edx
c001a8d6:	83 c4 0c             	add    esp,0xc
c001a8d9:	c3                   	ret    
c001a8da:	51                   	push   ecx
c001a8db:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001a8e1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001a8e4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001a8ea:	51                   	push   ecx
c001a8eb:	52                   	push   edx
c001a8ec:	50                   	push   eax
c001a8ed:	e8 54 82 ff ff       	call   c0012b46 <standardiseFiles(char*, char const*, char const*)>
c001a8f2:	83 c4 10             	add    esp,0x10
c001a8f5:	31 c0                	xor    eax,eax
c001a8f7:	31 d2                	xor    edx,edx
c001a8f9:	83 c4 0c             	add    esp,0xc
c001a8fc:	c3                   	ret    

c001a8fd <sysCallReadDir(regs*)>:
c001a8fd:	53                   	push   ebx
c001a8fe:	83 ec 18             	sub    esp,0x18
c001a901:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a905:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001a908:	83 f8 02             	cmp    eax,0x2
c001a90b:	76 53                	jbe    c001a960 <sysCallReadDir(regs*)+0x63>
c001a90d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001a910:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001a916:	77 4f                	ja     c001a967 <sysCallReadDir(regs*)+0x6a>
c001a918:	83 ec 0c             	sub    esp,0xc
c001a91b:	50                   	push   eax
c001a91c:	e8 5a 6d ff ff       	call   c001167b <getFromFileDescriptor(int)>
c001a921:	83 c4 10             	add    esp,0x10
c001a924:	85 c0                	test   eax,eax
c001a926:	74 50                	je     c001a978 <sysCallReadDir(regs*)+0x7b>
c001a928:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a930:	83 ec 0c             	sub    esp,0xc
c001a933:	8b 10                	mov    edx,DWORD PTR [eax]
c001a935:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001a939:	51                   	push   ecx
c001a93a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001a93d:	6a 00                	push   0x0
c001a93f:	68 10 01 00 00       	push   0x110
c001a944:	50                   	push   eax
c001a945:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001a948:	83 c4 20             	add    esp,0x20
c001a94b:	85 c0                	test   eax,eax
c001a94d:	74 38                	je     c001a987 <sysCallReadDir(regs*)+0x8a>
c001a94f:	83 f8 07             	cmp    eax,0x7
c001a952:	74 0c                	je     c001a960 <sysCallReadDir(regs*)+0x63>
c001a954:	b8 02 00 00 00       	mov    eax,0x2
c001a959:	31 d2                	xor    edx,edx
c001a95b:	83 c4 18             	add    esp,0x18
c001a95e:	5b                   	pop    ebx
c001a95f:	c3                   	ret    
c001a960:	b8 01 00 00 00       	mov    eax,0x1
c001a965:	eb f2                	jmp    c001a959 <sysCallReadDir(regs*)+0x5c>
c001a967:	83 ec 08             	sub    esp,0x8
c001a96a:	52                   	push   edx
c001a96b:	68 ac a4 02 c0       	push   0xc002a4ac
c001a970:	e8 4c 7e ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001a975:	83 c4 10             	add    esp,0x10
c001a978:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a97d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a982:	83 c4 18             	add    esp,0x18
c001a985:	5b                   	pop    ebx
c001a986:	c3                   	ret    
c001a987:	31 c0                	xor    eax,eax
c001a989:	eb ce                	jmp    c001a959 <sysCallReadDir(regs*)+0x5c>

c001a98b <sysCallIsATTY(regs*)>:
c001a98b:	83 ec 0c             	sub    esp,0xc
c001a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a992:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001a995:	83 f8 02             	cmp    eax,0x2
c001a998:	76 07                	jbe    c001a9a1 <sysCallIsATTY(regs*)+0x16>
c001a99a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001a99f:	75 26                	jne    c001a9c7 <sysCallIsATTY(regs*)+0x3c>
c001a9a1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a9a6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a9a9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9af:	85 c0                	test   eax,eax
c001a9b1:	74 24                	je     c001a9d7 <sysCallIsATTY(regs*)+0x4c>
c001a9b3:	83 ec 0c             	sub    esp,0xc
c001a9b6:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9b8:	50                   	push   eax
c001a9b9:	ff 12                	call   DWORD PTR [edx]
c001a9bb:	31 d2                	xor    edx,edx
c001a9bd:	0f b6 c0             	movzx  eax,al
c001a9c0:	83 c4 10             	add    esp,0x10
c001a9c3:	83 c4 0c             	add    esp,0xc
c001a9c6:	c3                   	ret    
c001a9c7:	83 ec 0c             	sub    esp,0xc
c001a9ca:	50                   	push   eax
c001a9cb:	e8 ab 6c ff ff       	call   c001167b <getFromFileDescriptor(int)>
c001a9d0:	83 c4 10             	add    esp,0x10
c001a9d3:	85 c0                	test   eax,eax
c001a9d5:	75 dc                	jne    c001a9b3 <sysCallIsATTY(regs*)+0x28>
c001a9d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a9dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c001a9e1:	83 c4 0c             	add    esp,0xc
c001a9e4:	c3                   	ret    

c001a9e5 <sysCallSeek(regs*)>:
c001a9e5:	53                   	push   ebx
c001a9e6:	83 ec 08             	sub    esp,0x8
c001a9e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001a9f0:	83 f8 02             	cmp    eax,0x2
c001a9f3:	76 4a                	jbe    c001aa3f <sysCallSeek(regs*)+0x5a>
c001a9f5:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001a9fa:	77 32                	ja     c001aa2e <sysCallSeek(regs*)+0x49>
c001a9fc:	83 ec 0c             	sub    esp,0xc
c001a9ff:	50                   	push   eax
c001aa00:	e8 76 6c ff ff       	call   c001167b <getFromFileDescriptor(int)>
c001aa05:	83 c4 0c             	add    esp,0xc
c001aa08:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001aa0b:	31 db                	xor    ebx,ebx
c001aa0d:	53                   	push   ebx
c001aa0e:	51                   	push   ecx
c001aa0f:	50                   	push   eax
c001aa10:	e8 fd 83 ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001aa15:	83 c4 10             	add    esp,0x10
c001aa18:	85 c0                	test   eax,eax
c001aa1a:	0f 95 c0             	setne  al
c001aa1d:	31 d2                	xor    edx,edx
c001aa1f:	0f b6 c0             	movzx  eax,al
c001aa22:	f7 d8                	neg    eax
c001aa24:	83 d2 00             	adc    edx,0x0
c001aa27:	83 c4 08             	add    esp,0x8
c001aa2a:	f7 da                	neg    edx
c001aa2c:	5b                   	pop    ebx
c001aa2d:	c3                   	ret    
c001aa2e:	83 ec 08             	sub    esp,0x8
c001aa31:	50                   	push   eax
c001aa32:	68 1b a5 02 c0       	push   0xc002a51b
c001aa37:	e8 85 7d ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001aa3c:	83 c4 10             	add    esp,0x10
c001aa3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aa44:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aa49:	83 c4 08             	add    esp,0x8
c001aa4c:	5b                   	pop    ebx
c001aa4d:	c3                   	ret    

c001aa4e <sysCallTell(regs*)>:
c001aa4e:	53                   	push   ebx
c001aa4f:	83 ec 08             	sub    esp,0x8
c001aa52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa56:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aa59:	83 f8 02             	cmp    eax,0x2
c001aa5c:	76 5e                	jbe    c001aabc <sysCallTell(regs*)+0x6e>
c001aa5e:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aa63:	77 2d                	ja     c001aa92 <sysCallTell(regs*)+0x44>
c001aa65:	83 ec 0c             	sub    esp,0xc
c001aa68:	50                   	push   eax
c001aa69:	e8 0d 6c ff ff       	call   c001167b <getFromFileDescriptor(int)>
c001aa6e:	5a                   	pop    edx
c001aa6f:	59                   	pop    ecx
c001aa70:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aa73:	50                   	push   eax
c001aa74:	e8 ef 83 ff ff       	call   c0012e68 <File::tell(unsigned long long*)>
c001aa79:	83 c4 10             	add    esp,0x10
c001aa7c:	85 c0                	test   eax,eax
c001aa7e:	0f 95 c0             	setne  al
c001aa81:	31 d2                	xor    edx,edx
c001aa83:	0f b6 c0             	movzx  eax,al
c001aa86:	f7 d8                	neg    eax
c001aa88:	83 d2 00             	adc    edx,0x0
c001aa8b:	83 c4 08             	add    esp,0x8
c001aa8e:	f7 da                	neg    edx
c001aa90:	5b                   	pop    ebx
c001aa91:	c3                   	ret    
c001aa92:	83 ec 08             	sub    esp,0x8
c001aa95:	50                   	push   eax
c001aa96:	68 35 a5 02 c0       	push   0xc002a535
c001aa9b:	e8 21 7d ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001aaa0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001aaa3:	83 c4 10             	add    esp,0x10
c001aaa6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001aaac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001aab3:	31 d2                	xor    edx,edx
c001aab5:	31 c0                	xor    eax,eax
c001aab7:	83 c4 08             	add    esp,0x8
c001aaba:	5b                   	pop    ebx
c001aabb:	c3                   	ret    
c001aabc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001aac1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001aac6:	83 c4 08             	add    esp,0x8
c001aac9:	5b                   	pop    ebx
c001aaca:	c3                   	ret    

c001aacb <sysCallSize(regs*)>:
c001aacb:	53                   	push   ebx
c001aacc:	83 ec 18             	sub    esp,0x18
c001aacf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001aad3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001aad6:	83 f8 02             	cmp    eax,0x2
c001aad9:	76 64                	jbe    c001ab3f <sysCallSize(regs*)+0x74>
c001aadb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001aae0:	77 33                	ja     c001ab15 <sysCallSize(regs*)+0x4a>
c001aae2:	83 ec 0c             	sub    esp,0xc
c001aae5:	50                   	push   eax
c001aae6:	e8 90 6b ff ff       	call   c001167b <getFromFileDescriptor(int)>
c001aaeb:	83 c4 0c             	add    esp,0xc
c001aaee:	8d 54 24 13          	lea    edx,[esp+0x13]
c001aaf2:	52                   	push   edx
c001aaf3:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001aaf6:	50                   	push   eax
c001aaf7:	e8 04 85 ff ff       	call   c0013000 <File::stat(unsigned long long*, bool*)>
c001aafc:	83 c4 10             	add    esp,0x10
c001aaff:	85 c0                	test   eax,eax
c001ab01:	0f 95 c0             	setne  al
c001ab04:	31 d2                	xor    edx,edx
c001ab06:	0f b6 c0             	movzx  eax,al
c001ab09:	f7 d8                	neg    eax
c001ab0b:	83 d2 00             	adc    edx,0x0
c001ab0e:	83 c4 18             	add    esp,0x18
c001ab11:	f7 da                	neg    edx
c001ab13:	5b                   	pop    ebx
c001ab14:	c3                   	ret    
c001ab15:	83 ec 08             	sub    esp,0x8
c001ab18:	50                   	push   eax
c001ab19:	68 4f a5 02 c0       	push   0xc002a54f
c001ab1e:	e8 9e 7c ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001ab23:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ab2f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ab36:	31 d2                	xor    edx,edx
c001ab38:	31 c0                	xor    eax,eax
c001ab3a:	83 c4 18             	add    esp,0x18
c001ab3d:	5b                   	pop    ebx
c001ab3e:	c3                   	ret    
c001ab3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ab44:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ab49:	83 c4 18             	add    esp,0x18
c001ab4c:	5b                   	pop    ebx
c001ab4d:	c3                   	ret    

c001ab4e <sysCallSizeFromFilename(regs*)>:
c001ab4e:	57                   	push   edi
c001ab4f:	56                   	push   esi
c001ab50:	53                   	push   ebx
c001ab51:	83 ec 20             	sub    esp,0x20
c001ab54:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ab58:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001ab5b:	83 fb 02             	cmp    ebx,0x2
c001ab5e:	0f 86 99 00 00 00    	jbe    c001abfd <sysCallSizeFromFilename(regs*)+0xaf>
c001ab64:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001ab6a:	77 65                	ja     c001abd1 <sysCallSizeFromFilename(regs*)+0x83>
c001ab6c:	83 ec 0c             	sub    esp,0xc
c001ab6f:	68 14 01 00 00       	push   0x114
c001ab74:	e8 5b 49 ff ff       	call   c000f4d4 <malloc>
c001ab79:	83 c4 0c             	add    esp,0xc
c001ab7c:	89 c6                	mov    esi,eax
c001ab7e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab83:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ab86:	53                   	push   ebx
c001ab87:	56                   	push   esi
c001ab88:	e8 63 81 ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001ab8d:	83 c4 0c             	add    esp,0xc
c001ab90:	8d 44 24 23          	lea    eax,[esp+0x23]
c001ab94:	50                   	push   eax
c001ab95:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001ab98:	56                   	push   esi
c001ab99:	e8 62 84 ff ff       	call   c0013000 <File::stat(unsigned long long*, bool*)>
c001ab9e:	83 c4 10             	add    esp,0x10
c001aba1:	85 f6                	test   esi,esi
c001aba3:	74 14                	je     c001abb9 <sysCallSizeFromFilename(regs*)+0x6b>
c001aba5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aba9:	8b 16                	mov    edx,DWORD PTR [esi]
c001abab:	83 ec 0c             	sub    esp,0xc
c001abae:	56                   	push   esi
c001abaf:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001abb2:	83 c4 10             	add    esp,0x10
c001abb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001abb9:	85 c0                	test   eax,eax
c001abbb:	0f 95 c0             	setne  al
c001abbe:	31 d2                	xor    edx,edx
c001abc0:	0f b6 c0             	movzx  eax,al
c001abc3:	f7 d8                	neg    eax
c001abc5:	83 d2 00             	adc    edx,0x0
c001abc8:	83 c4 20             	add    esp,0x20
c001abcb:	f7 da                	neg    edx
c001abcd:	5b                   	pop    ebx
c001abce:	5e                   	pop    esi
c001abcf:	5f                   	pop    edi
c001abd0:	c3                   	ret    
c001abd1:	83 ec 08             	sub    esp,0x8
c001abd4:	53                   	push   ebx
c001abd5:	68 4f a5 02 c0       	push   0xc002a54f
c001abda:	e8 e2 7b ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001abdf:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001abe2:	83 c4 10             	add    esp,0x10
c001abe5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001abeb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001abf2:	31 d2                	xor    edx,edx
c001abf4:	83 c4 20             	add    esp,0x20
c001abf7:	31 c0                	xor    eax,eax
c001abf9:	5b                   	pop    ebx
c001abfa:	5e                   	pop    esi
c001abfb:	5f                   	pop    edi
c001abfc:	c3                   	ret    
c001abfd:	83 c4 20             	add    esp,0x20
c001ac00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac05:	5b                   	pop    ebx
c001ac06:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac0b:	5e                   	pop    esi
c001ac0c:	5f                   	pop    edi
c001ac0d:	c3                   	ret    

c001ac0e <sysCallClose(regs*)>:
c001ac0e:	53                   	push   ebx
c001ac0f:	83 ec 08             	sub    esp,0x8
c001ac12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ac19:	83 f8 02             	cmp    eax,0x2
c001ac1c:	76 50                	jbe    c001ac6e <sysCallClose(regs*)+0x60>
c001ac1e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ac23:	74 58                	je     c001ac7d <sysCallClose(regs*)+0x6f>
c001ac25:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ac2a:	74 60                	je     c001ac8c <sysCallClose(regs*)+0x7e>
c001ac2c:	77 2f                	ja     c001ac5d <sysCallClose(regs*)+0x4f>
c001ac2e:	83 ec 0c             	sub    esp,0xc
c001ac31:	50                   	push   eax
c001ac32:	e8 44 6a ff ff       	call   c001167b <getFromFileDescriptor(int)>
c001ac37:	89 c3                	mov    ebx,eax
c001ac39:	89 04 24             	mov    DWORD PTR [esp],eax
c001ac3c:	e8 71 81 ff ff       	call   c0012db2 <File::close()>
c001ac41:	83 c4 10             	add    esp,0x10
c001ac44:	85 db                	test   ebx,ebx
c001ac46:	74 0c                	je     c001ac54 <sysCallClose(regs*)+0x46>
c001ac48:	83 ec 0c             	sub    esp,0xc
c001ac4b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ac4d:	53                   	push   ebx
c001ac4e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ac51:	83 c4 10             	add    esp,0x10
c001ac54:	31 c0                	xor    eax,eax
c001ac56:	31 d2                	xor    edx,edx
c001ac58:	83 c4 08             	add    esp,0x8
c001ac5b:	5b                   	pop    ebx
c001ac5c:	c3                   	ret    
c001ac5d:	83 ec 08             	sub    esp,0x8
c001ac60:	50                   	push   eax
c001ac61:	68 d0 a4 02 c0       	push   0xc002a4d0
c001ac66:	e8 56 7b ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001ac6b:	83 c4 10             	add    esp,0x10
c001ac6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ac73:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ac78:	83 c4 08             	add    esp,0x8
c001ac7b:	5b                   	pop    ebx
c001ac7c:	c3                   	ret    
c001ac7d:	83 ec 0c             	sub    esp,0xc
c001ac80:	68 6a a5 02 c0       	push   0xc002a56a
c001ac85:	e8 37 7b ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001ac8a:	eb c5                	jmp    c001ac51 <sysCallClose(regs*)+0x43>
c001ac8c:	83 ec 0c             	sub    esp,0xc
c001ac8f:	68 78 a5 02 c0       	push   0xc002a578
c001ac94:	eb ef                	jmp    c001ac85 <sysCallClose(regs*)+0x77>

c001ac96 <sysCallOpenDir(regs*)>:
c001ac96:	56                   	push   esi
c001ac97:	53                   	push   ebx
c001ac98:	53                   	push   ebx
c001ac99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac9d:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001aca0:	85 f6                	test   esi,esi
c001aca2:	74 59                	je     c001acfd <sysCallOpenDir(regs*)+0x67>
c001aca4:	83 ec 0c             	sub    esp,0xc
c001aca7:	68 14 01 00 00       	push   0x114
c001acac:	e8 23 48 ff ff       	call   c000f4d4 <malloc>
c001acb1:	83 c4 0c             	add    esp,0xc
c001acb4:	89 c6                	mov    esi,eax
c001acb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001acbb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001acbe:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001acc1:	56                   	push   esi
c001acc2:	e8 ff 84 ff ff       	call   c00131c6 <Directory::Directory(char const*, Process*)>
c001acc7:	83 c4 10             	add    esp,0x10
c001acca:	85 f6                	test   esi,esi
c001accc:	74 2f                	je     c001acfd <sysCallOpenDir(regs*)+0x67>
c001acce:	83 ec 0c             	sub    esp,0xc
c001acd1:	56                   	push   esi
c001acd2:	e8 53 85 ff ff       	call   c001322a <Directory::open()>
c001acd7:	83 c4 10             	add    esp,0x10
c001acda:	85 c0                	test   eax,eax
c001acdc:	75 1f                	jne    c001acfd <sysCallOpenDir(regs*)+0x67>
c001acde:	83 ec 0c             	sub    esp,0xc
c001ace1:	56                   	push   esi
c001ace2:	e8 9f 66 ff ff       	call   c0011386 <UnixFile::getFileDescriptor()>
c001ace7:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001acea:	83 c4 10             	add    esp,0x10
c001aced:	89 02                	mov    DWORD PTR [edx],eax
c001acef:	c1 f8 1f             	sar    eax,0x1f
c001acf2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001acf5:	31 c0                	xor    eax,eax
c001acf7:	59                   	pop    ecx
c001acf8:	31 d2                	xor    edx,edx
c001acfa:	5b                   	pop    ebx
c001acfb:	5e                   	pop    esi
c001acfc:	c3                   	ret    
c001acfd:	59                   	pop    ecx
c001acfe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad03:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad08:	5b                   	pop    ebx
c001ad09:	5e                   	pop    esi
c001ad0a:	c3                   	ret    

c001ad0b <sysCallCloseDir(regs*)>:
c001ad0b:	53                   	push   ebx
c001ad0c:	83 ec 08             	sub    esp,0x8
c001ad0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad13:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ad16:	83 f8 02             	cmp    eax,0x2
c001ad19:	76 47                	jbe    c001ad62 <sysCallCloseDir(regs*)+0x57>
c001ad1b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ad20:	77 2f                	ja     c001ad51 <sysCallCloseDir(regs*)+0x46>
c001ad22:	83 ec 0c             	sub    esp,0xc
c001ad25:	50                   	push   eax
c001ad26:	e8 50 69 ff ff       	call   c001167b <getFromFileDescriptor(int)>
c001ad2b:	89 c3                	mov    ebx,eax
c001ad2d:	89 04 24             	mov    DWORD PTR [esp],eax
c001ad30:	e8 51 85 ff ff       	call   c0013286 <Directory::close()>
c001ad35:	83 c4 10             	add    esp,0x10
c001ad38:	85 db                	test   ebx,ebx
c001ad3a:	74 0c                	je     c001ad48 <sysCallCloseDir(regs*)+0x3d>
c001ad3c:	83 ec 0c             	sub    esp,0xc
c001ad3f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad41:	53                   	push   ebx
c001ad42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ad45:	83 c4 10             	add    esp,0x10
c001ad48:	31 c0                	xor    eax,eax
c001ad4a:	31 d2                	xor    edx,edx
c001ad4c:	83 c4 08             	add    esp,0x8
c001ad4f:	5b                   	pop    ebx
c001ad50:	c3                   	ret    
c001ad51:	83 ec 08             	sub    esp,0x8
c001ad54:	50                   	push   eax
c001ad55:	68 f8 a4 02 c0       	push   0xc002a4f8
c001ad5a:	e8 62 7a ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001ad5f:	83 c4 10             	add    esp,0x10
c001ad62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ad67:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ad6c:	83 c4 08             	add    esp,0x8
c001ad6f:	5b                   	pop    ebx
c001ad70:	c3                   	ret    

c001ad71 <sysCallMakeDir(regs*)>:
c001ad71:	56                   	push   esi
c001ad72:	53                   	push   ebx
c001ad73:	83 ec 10             	sub    esp,0x10
c001ad76:	68 14 01 00 00       	push   0x114
c001ad7b:	e8 54 47 ff ff       	call   c000f4d4 <malloc>
c001ad80:	83 c4 0c             	add    esp,0xc
c001ad83:	89 c3                	mov    ebx,eax
c001ad85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ad8a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ad8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad91:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ad94:	53                   	push   ebx
c001ad95:	e8 2c 84 ff ff       	call   c00131c6 <Directory::Directory(char const*, Process*)>
c001ad9a:	83 c4 10             	add    esp,0x10
c001ad9d:	85 db                	test   ebx,ebx
c001ad9f:	74 32                	je     c001add3 <sysCallMakeDir(regs*)+0x62>
c001ada1:	83 ec 0c             	sub    esp,0xc
c001ada4:	53                   	push   ebx
c001ada5:	e8 60 86 ff ff       	call   c001340a <Directory::create()>
c001adaa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adad:	89 c6                	mov    esi,eax
c001adaf:	e8 d2 84 ff ff       	call   c0013286 <Directory::close()>
c001adb4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001adb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001adb9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001adbc:	83 c4 10             	add    esp,0x10
c001adbf:	31 c0                	xor    eax,eax
c001adc1:	59                   	pop    ecx
c001adc2:	85 f6                	test   esi,esi
c001adc4:	5b                   	pop    ebx
c001adc5:	0f 95 c0             	setne  al
c001adc8:	5e                   	pop    esi
c001adc9:	31 d2                	xor    edx,edx
c001adcb:	f7 d8                	neg    eax
c001adcd:	83 d2 00             	adc    edx,0x0
c001add0:	f7 da                	neg    edx
c001add2:	c3                   	ret    
c001add3:	59                   	pop    ecx
c001add4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001add9:	ba ff ff ff ff       	mov    edx,0xffffffff
c001adde:	5b                   	pop    ebx
c001addf:	5e                   	pop    esi
c001ade0:	c3                   	ret    

c001ade1 <sysCallWait(regs*)>:
c001ade1:	83 ec 10             	sub    esp,0x10
c001ade4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ade8:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001adeb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001adee:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001adf1:	e8 2b 24 00 00       	call   c001d221 <waitTask(int, int*, int)>
c001adf6:	83 c4 1c             	add    esp,0x1c
c001adf9:	99                   	cdq    
c001adfa:	c3                   	ret    

c001adfb <sysCallNotImpl(regs*)>:
c001adfb:	83 ec 18             	sub    esp,0x18
c001adfe:	68 86 a5 02 c0       	push   0xc002a586
c001ae03:	e8 d3 ea ff ff       	call   c00198db <Krnl::panic(char const*)>
c001ae08:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ae0d:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ae12:	83 c4 1c             	add    esp,0x1c
c001ae15:	c3                   	ret    

c001ae16 <sysPanic(regs*)>:
c001ae16:	83 ec 18             	sub    esp,0x18
c001ae19:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae1d:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ae20:	e8 b6 ea ff ff       	call   c00198db <Krnl::panic(char const*)>
c001ae25:	c7 04 24 a0 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5a0
c001ae2c:	e8 aa ea ff ff       	call   c00198db <Krnl::panic(char const*)>
c001ae31:	b8 01 00 00 00       	mov    eax,0x1
c001ae36:	31 d2                	xor    edx,edx
c001ae38:	83 c4 1c             	add    esp,0x1c
c001ae3b:	c3                   	ret    

c001ae3c <sysCallRmdir(regs*)>:
c001ae3c:	56                   	push   esi
c001ae3d:	53                   	push   ebx
c001ae3e:	83 ec 20             	sub    esp,0x20
c001ae41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae45:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ae48:	68 14 01 00 00       	push   0x114
c001ae4d:	e8 82 46 ff ff       	call   c000f4d4 <malloc>
c001ae52:	83 c4 0c             	add    esp,0xc
c001ae55:	89 c3                	mov    ebx,eax
c001ae57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ae5c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ae5f:	56                   	push   esi
c001ae60:	53                   	push   ebx
c001ae61:	e8 8a 7e ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001ae66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae69:	e8 5e 80 ff ff       	call   c0012ecc <File::unlink()>
c001ae6e:	83 c4 10             	add    esp,0x10
c001ae71:	85 db                	test   ebx,ebx
c001ae73:	74 14                	je     c001ae89 <sysCallRmdir(regs*)+0x4d>
c001ae75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ae79:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ae7b:	83 ec 0c             	sub    esp,0xc
c001ae7e:	53                   	push   ebx
c001ae7f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ae82:	83 c4 10             	add    esp,0x10
c001ae85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ae89:	85 c0                	test   eax,eax
c001ae8b:	0f 95 c0             	setne  al
c001ae8e:	31 d2                	xor    edx,edx
c001ae90:	0f b6 c0             	movzx  eax,al
c001ae93:	f7 d8                	neg    eax
c001ae95:	83 d2 00             	adc    edx,0x0
c001ae98:	83 c4 14             	add    esp,0x14
c001ae9b:	f7 da                	neg    edx
c001ae9d:	5b                   	pop    ebx
c001ae9e:	5e                   	pop    esi
c001ae9f:	c3                   	ret    

c001aea0 <sysCallUnlink(regs*)>:
c001aea0:	56                   	push   esi
c001aea1:	53                   	push   ebx
c001aea2:	83 ec 20             	sub    esp,0x20
c001aea5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001aea9:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001aeac:	68 14 01 00 00       	push   0x114
c001aeb1:	e8 1e 46 ff ff       	call   c000f4d4 <malloc>
c001aeb6:	83 c4 0c             	add    esp,0xc
c001aeb9:	89 c3                	mov    ebx,eax
c001aebb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aec0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aec3:	56                   	push   esi
c001aec4:	53                   	push   ebx
c001aec5:	e8 26 7e ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001aeca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001aecd:	e8 fa 7f ff ff       	call   c0012ecc <File::unlink()>
c001aed2:	83 c4 10             	add    esp,0x10
c001aed5:	85 db                	test   ebx,ebx
c001aed7:	74 14                	je     c001aeed <sysCallUnlink(regs*)+0x4d>
c001aed9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aedd:	8b 13                	mov    edx,DWORD PTR [ebx]
c001aedf:	83 ec 0c             	sub    esp,0xc
c001aee2:	53                   	push   ebx
c001aee3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001aee6:	83 c4 10             	add    esp,0x10
c001aee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aeed:	85 c0                	test   eax,eax
c001aeef:	0f 95 c0             	setne  al
c001aef2:	31 d2                	xor    edx,edx
c001aef4:	0f b6 c0             	movzx  eax,al
c001aef7:	f7 d8                	neg    eax
c001aef9:	83 d2 00             	adc    edx,0x0
c001aefc:	83 c4 14             	add    esp,0x14
c001aeff:	f7 da                	neg    edx
c001af01:	5b                   	pop    ebx
c001af02:	5e                   	pop    esi
c001af03:	c3                   	ret    

c001af04 <sysCallGetArgv(regs*)>:
c001af04:	83 ec 0c             	sub    esp,0xc
c001af07:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af0b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001af0e:	85 c0                	test   eax,eax
c001af10:	78 2b                	js     c001af3d <sysCallGetArgv(regs*)+0x39>
c001af12:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001af18:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001af1b:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001af21:	7d 1a                	jge    c001af3d <sysCallGetArgv(regs*)+0x39>
c001af23:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001af2a:	85 c0                	test   eax,eax
c001af2c:	74 17                	je     c001af45 <sysCallGetArgv(regs*)+0x41>
c001af2e:	83 ec 08             	sub    esp,0x8
c001af31:	50                   	push   eax
c001af32:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001af35:	e8 f0 57 fe ff       	call   c000072a <strcpy>
c001af3a:	83 c4 10             	add    esp,0x10
c001af3d:	31 c0                	xor    eax,eax
c001af3f:	31 d2                	xor    edx,edx
c001af41:	83 c4 0c             	add    esp,0xc
c001af44:	c3                   	ret    
c001af45:	b8 01 00 00 00       	mov    eax,0x1
c001af4a:	31 d2                	xor    edx,edx
c001af4c:	83 c4 0c             	add    esp,0xc
c001af4f:	c3                   	ret    

c001af50 <sysCallTTYName(regs*)>:
c001af50:	56                   	push   esi
c001af51:	53                   	push   ebx
c001af52:	53                   	push   ebx
c001af53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001af57:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001af5a:	85 c0                	test   eax,eax
c001af5c:	74 5f                	je     c001afbd <sysCallTTYName(regs*)+0x6d>
c001af5e:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001af61:	83 f8 02             	cmp    eax,0x2
c001af64:	77 3e                	ja     c001afa4 <sysCallTTYName(regs*)+0x54>
c001af66:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af6b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af6e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001af74:	85 db                	test   ebx,ebx
c001af76:	74 45                	je     c001afbd <sysCallTTYName(regs*)+0x6d>
c001af78:	83 ec 0c             	sub    esp,0xc
c001af7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af7d:	53                   	push   ebx
c001af7e:	ff 10                	call   DWORD PTR [eax]
c001af80:	83 c4 10             	add    esp,0x10
c001af83:	84 c0                	test   al,al
c001af85:	74 41                	je     c001afc8 <sysCallTTYName(regs*)+0x78>
c001af87:	83 ec 08             	sub    esp,0x8
c001af8a:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001af90:	53                   	push   ebx
c001af91:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001af94:	e8 91 57 fe ff       	call   c000072a <strcpy>
c001af99:	83 c4 10             	add    esp,0x10
c001af9c:	31 c0                	xor    eax,eax
c001af9e:	59                   	pop    ecx
c001af9f:	31 d2                	xor    edx,edx
c001afa1:	5b                   	pop    ebx
c001afa2:	5e                   	pop    esi
c001afa3:	c3                   	ret    
c001afa4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001afa9:	74 bb                	je     c001af66 <sysCallTTYName(regs*)+0x16>
c001afab:	83 ec 0c             	sub    esp,0xc
c001afae:	50                   	push   eax
c001afaf:	e8 c7 66 ff ff       	call   c001167b <getFromFileDescriptor(int)>
c001afb4:	83 c4 10             	add    esp,0x10
c001afb7:	89 c3                	mov    ebx,eax
c001afb9:	85 db                	test   ebx,ebx
c001afbb:	75 bb                	jne    c001af78 <sysCallTTYName(regs*)+0x28>
c001afbd:	59                   	pop    ecx
c001afbe:	b8 01 00 00 00       	mov    eax,0x1
c001afc3:	31 d2                	xor    edx,edx
c001afc5:	5b                   	pop    ebx
c001afc6:	5e                   	pop    esi
c001afc7:	c3                   	ret    
c001afc8:	59                   	pop    ecx
c001afc9:	b8 02 00 00 00       	mov    eax,0x2
c001afce:	31 d2                	xor    edx,edx
c001afd0:	5b                   	pop    ebx
c001afd1:	5e                   	pop    esi
c001afd2:	c3                   	ret    

c001afd3 <sysCallUSleep(regs*)>:
c001afd3:	83 ec 14             	sub    esp,0x14
c001afd6:	b8 e8 03 00 00       	mov    eax,0x3e8
c001afdb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001afdf:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001afe6:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001afe9:	01 ca                	add    edx,ecx
c001afeb:	52                   	push   edx
c001afec:	50                   	push   eax
c001afed:	e8 c8 22 00 00       	call   c001d2ba <nanoSleep(unsigned long long)>
c001aff2:	31 c0                	xor    eax,eax
c001aff4:	31 d2                	xor    edx,edx
c001aff6:	83 c4 1c             	add    esp,0x1c
c001aff9:	c3                   	ret    

c001affa <sysCallSpawn(regs*)>:
c001affa:	56                   	push   esi
c001affb:	53                   	push   ebx
c001affc:	53                   	push   ebx
c001affd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b001:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b004:	85 f6                	test   esi,esi
c001b006:	75 08                	jne    c001b010 <sysCallSpawn(regs*)+0x16>
c001b008:	59                   	pop    ecx
c001b009:	31 c0                	xor    eax,eax
c001b00b:	31 d2                	xor    edx,edx
c001b00d:	5b                   	pop    ebx
c001b00e:	5e                   	pop    esi
c001b00f:	c3                   	ret    
c001b010:	83 ec 0c             	sub    esp,0xc
c001b013:	68 3f 07 00 00       	push   0x73f
c001b018:	e8 b7 44 ff ff       	call   c000f4d4 <malloc>
c001b01d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b020:	89 c6                	mov    esi,eax
c001b022:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b027:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b02a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b02d:	56                   	push   esi
c001b02e:	e8 87 19 00 00       	call   c001c9ba <Process::Process(char const*, Process*, char**)>
c001b033:	83 c4 20             	add    esp,0x20
c001b036:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001b03d:	75 c9                	jne    c001b008 <sysCallSpawn(regs*)+0xe>
c001b03f:	83 ec 0c             	sub    esp,0xc
c001b042:	56                   	push   esi
c001b043:	e8 38 1f 00 00       	call   c001cf80 <Process::createUserThread()>
c001b048:	8b 06                	mov    eax,DWORD PTR [esi]
c001b04a:	83 c4 10             	add    esp,0x10
c001b04d:	99                   	cdq    
c001b04e:	59                   	pop    ecx
c001b04f:	5b                   	pop    ebx
c001b050:	5e                   	pop    esi
c001b051:	c3                   	ret    

c001b052 <sysCallGetEnv(regs*)>:
c001b052:	57                   	push   edi
c001b053:	56                   	push   esi
c001b054:	53                   	push   ebx
c001b055:	83 ec 1c             	sub    esp,0x1c
c001b058:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b05c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b061:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001b064:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001b067:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b06a:	e8 88 e7 ff ff       	call   c00197f7 <Krnl::getProcessTotalEnvCount(Process*)>
c001b06f:	83 c4 10             	add    esp,0x10
c001b072:	39 c7                	cmp    edi,eax
c001b074:	7c 14                	jl     c001b08a <sysCallGetEnv(regs*)+0x38>
c001b076:	85 f6                	test   esi,esi
c001b078:	75 0b                	jne    c001b085 <sysCallGetEnv(regs*)+0x33>
c001b07a:	83 c4 10             	add    esp,0x10
c001b07d:	31 c0                	xor    eax,eax
c001b07f:	5b                   	pop    ebx
c001b080:	31 d2                	xor    edx,edx
c001b082:	5e                   	pop    esi
c001b083:	5f                   	pop    edi
c001b084:	c3                   	ret    
c001b085:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b088:	eb f0                	jmp    c001b07a <sysCallGetEnv(regs*)+0x28>
c001b08a:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b08e:	52                   	push   edx
c001b08f:	57                   	push   edi
c001b090:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b096:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001b099:	50                   	push   eax
c001b09a:	e8 78 e7 ff ff       	call   c0019817 <Krnl::getProcessEnvPair(Process*, int)>
c001b09f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b0a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b0a6:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0aa:	83 c4 0c             	add    esp,0xc
c001b0ad:	85 c9                	test   ecx,ecx
c001b0af:	75 23                	jne    c001b0d4 <sysCallGetEnv(regs*)+0x82>
c001b0b1:	83 ec 0c             	sub    esp,0xc
c001b0b4:	50                   	push   eax
c001b0b5:	e8 ee 55 fe ff       	call   c00006a8 <strlen>
c001b0ba:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b0bd:	89 c3                	mov    ebx,eax
c001b0bf:	e8 e4 55 fe ff       	call   c00006a8 <strlen>
c001b0c4:	83 c4 10             	add    esp,0x10
c001b0c7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001b0cb:	83 c4 10             	add    esp,0x10
c001b0ce:	31 d2                	xor    edx,edx
c001b0d0:	5b                   	pop    ebx
c001b0d1:	5e                   	pop    esi
c001b0d2:	5f                   	pop    edi
c001b0d3:	c3                   	ret    
c001b0d4:	83 ec 08             	sub    esp,0x8
c001b0d7:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b0da:	50                   	push   eax
c001b0db:	56                   	push   esi
c001b0dc:	e8 49 56 fe ff       	call   c000072a <strcpy>
c001b0e1:	58                   	pop    eax
c001b0e2:	5a                   	pop    edx
c001b0e3:	68 af a5 02 c0       	push   0xc002a5af
c001b0e8:	56                   	push   esi
c001b0e9:	e8 f3 56 fe ff       	call   c00007e1 <strcat>
c001b0ee:	59                   	pop    ecx
c001b0ef:	5b                   	pop    ebx
c001b0f0:	57                   	push   edi
c001b0f1:	56                   	push   esi
c001b0f2:	e8 ea 56 fe ff       	call   c00007e1 <strcat>
c001b0f7:	83 c4 10             	add    esp,0x10
c001b0fa:	e9 7b ff ff ff       	jmp    c001b07a <sysCallGetEnv(regs*)+0x28>

c001b0ff <sysAppSettings(regs*)>:
c001b0ff:	53                   	push   ebx
c001b100:	83 ec 08             	sub    esp,0x8
c001b103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b107:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b10a:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001b110:	25 e0 1f 00 00       	and    eax,0x1fe0
c001b115:	66 3d c0 09          	cmp    ax,0x9c0
c001b119:	75 2f                	jne    c001b14a <sysAppSettings(regs*)+0x4b>
c001b11b:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001b121:	83 e0 1f             	and    eax,0x1f
c001b124:	3c 01                	cmp    al,0x1
c001b126:	74 2e                	je     c001b156 <sysAppSettings(regs*)+0x57>
c001b128:	3c 07                	cmp    al,0x7
c001b12a:	0f 84 bd 00 00 00    	je     c001b1ed <sysAppSettings(regs*)+0xee>
c001b130:	84 c0                	test   al,al
c001b132:	0f 84 dc 00 00 00    	je     c001b214 <sysAppSettings(regs*)+0x115>
c001b138:	3c 08                	cmp    al,0x8
c001b13a:	74 6d                	je     c001b1a9 <sysAppSettings(regs*)+0xaa>
c001b13c:	0f b6 c0             	movzx  eax,al
c001b13f:	83 c4 08             	add    esp,0x8
c001b142:	05 e8 03 00 00       	add    eax,0x3e8
c001b147:	5b                   	pop    ebx
c001b148:	99                   	cdq    
c001b149:	c3                   	ret    
c001b14a:	b8 01 00 00 00       	mov    eax,0x1
c001b14f:	31 d2                	xor    edx,edx
c001b151:	83 c4 08             	add    esp,0x8
c001b154:	5b                   	pop    ebx
c001b155:	c3                   	ret    
c001b156:	51                   	push   ecx
c001b157:	68 00 01 00 00       	push   0x100
c001b15c:	6a 00                	push   0x0
c001b15e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b163:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b166:	83 c0 0c             	add    eax,0xc
c001b169:	50                   	push   eax
c001b16a:	e8 1c 55 fe ff       	call   c000068b <memset>
c001b16f:	83 c4 0c             	add    esp,0xc
c001b172:	68 ff 00 00 00       	push   0xff
c001b177:	53                   	push   ebx
c001b178:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b17d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b180:	83 c0 0c             	add    eax,0xc
c001b183:	50                   	push   eax
c001b184:	e8 cc 54 fe ff       	call   c0000655 <memcpy>
c001b189:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b18e:	5b                   	pop    ebx
c001b18f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b192:	5a                   	pop    edx
c001b193:	8d 50 0c             	lea    edx,[eax+0xc]
c001b196:	52                   	push   edx
c001b197:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b19d:	e8 54 56 ff ff       	call   c00107f6 <VgaText::setTitle(char*)>
c001b1a2:	83 c4 10             	add    esp,0x10
c001b1a5:	31 c0                	xor    eax,eax
c001b1a7:	eb a6                	jmp    c001b14f <sysAppSettings(regs*)+0x50>
c001b1a9:	83 ec 08             	sub    esp,0x8
c001b1ac:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b1b2:	83 e0 0f             	and    eax,0xf
c001b1b5:	50                   	push   eax
c001b1b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1bb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1be:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b1c4:	e8 1d 56 ff ff       	call   c00107e6 <VgaText::setTitleColour(VgaColour)>
c001b1c9:	58                   	pop    eax
c001b1ca:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001b1d0:	5a                   	pop    edx
c001b1d1:	c1 e8 04             	shr    eax,0x4
c001b1d4:	83 e0 0f             	and    eax,0xf
c001b1d7:	50                   	push   eax
c001b1d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1e0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001b1e6:	e8 eb 55 ff ff       	call   c00107d6 <VgaText::setTitleTextColour(VgaColour)>
c001b1eb:	eb b5                	jmp    c001b1a2 <sysAppSettings(regs*)+0xa3>
c001b1ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b1f2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b1f5:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001b1fb:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001b201:	c0 e8 06             	shr    al,0x6
c001b204:	83 e0 01             	and    eax,0x1
c001b207:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001b20d:	31 c0                	xor    eax,eax
c001b20f:	e9 3b ff ff ff       	jmp    c001b14f <sysAppSettings(regs*)+0x50>
c001b214:	b8 02 00 00 00       	mov    eax,0x2
c001b219:	e9 31 ff ff ff       	jmp    c001b14f <sysAppSettings(regs*)+0x50>

c001b21e <sysSetFatAttrib(regs*)>:
c001b21e:	57                   	push   edi
c001b21f:	56                   	push   esi
c001b220:	53                   	push   ebx
c001b221:	83 ec 1c             	sub    esp,0x1c
c001b224:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b228:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001b22b:	68 14 01 00 00       	push   0x114
c001b230:	e8 9f 42 ff ff       	call   c000f4d4 <malloc>
c001b235:	83 c4 0c             	add    esp,0xc
c001b238:	89 c3                	mov    ebx,eax
c001b23a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b23f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b242:	57                   	push   edi
c001b243:	53                   	push   ebx
c001b244:	e8 a7 7a ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001b249:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001b24c:	83 c4 0c             	add    esp,0xc
c001b24f:	0f b6 d4             	movzx  edx,ah
c001b252:	0f b6 c0             	movzx  eax,al
c001b255:	52                   	push   edx
c001b256:	50                   	push   eax
c001b257:	53                   	push   ebx
c001b258:	e8 09 7d ff ff       	call   c0012f66 <File::chfatattr(unsigned char, unsigned char)>
c001b25d:	83 c4 10             	add    esp,0x10
c001b260:	85 db                	test   ebx,ebx
c001b262:	74 14                	je     c001b278 <sysSetFatAttrib(regs*)+0x5a>
c001b264:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b268:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b26a:	83 ec 0c             	sub    esp,0xc
c001b26d:	53                   	push   ebx
c001b26e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b271:	83 c4 10             	add    esp,0x10
c001b274:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b278:	85 c0                	test   eax,eax
c001b27a:	0f 95 c0             	setne  al
c001b27d:	31 d2                	xor    edx,edx
c001b27f:	0f b6 c0             	movzx  eax,al
c001b282:	f7 d8                	neg    eax
c001b284:	83 d2 00             	adc    edx,0x0
c001b287:	83 c4 10             	add    esp,0x10
c001b28a:	f7 da                	neg    edx
c001b28c:	5b                   	pop    ebx
c001b28d:	5e                   	pop    esi
c001b28e:	5f                   	pop    edi
c001b28f:	c3                   	ret    

c001b290 <sysPipe(regs*)>:
c001b290:	57                   	push   edi
c001b291:	56                   	push   esi
c001b292:	53                   	push   ebx
c001b293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b297:	83 ec 0c             	sub    esp,0xc
c001b29a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001b29d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001b2a0:	6a 20                	push   0x20
c001b2a2:	e8 2d 42 ff ff       	call   c000f4d4 <malloc>
c001b2a7:	89 c3                	mov    ebx,eax
c001b2a9:	58                   	pop    eax
c001b2aa:	5a                   	pop    edx
c001b2ab:	68 00 50 00 00       	push   0x5000
c001b2b0:	53                   	push   ebx
c001b2b1:	e8 c8 4d ff ff       	call   c001007e <Pipe::Pipe(int)>
c001b2b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2b9:	e8 c8 60 ff ff       	call   c0011386 <UnixFile::getFileDescriptor()>
c001b2be:	89 07                	mov    DWORD PTR [edi],eax
c001b2c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b2c3:	e8 be 60 ff ff       	call   c0011386 <UnixFile::getFileDescriptor()>
c001b2c8:	83 c4 10             	add    esp,0x10
c001b2cb:	89 06                	mov    DWORD PTR [esi],eax
c001b2cd:	31 d2                	xor    edx,edx
c001b2cf:	5b                   	pop    ebx
c001b2d0:	31 c0                	xor    eax,eax
c001b2d2:	5e                   	pop    esi
c001b2d3:	5f                   	pop    edi
c001b2d4:	c3                   	ret    

c001b2d5 <sysGetUnixTime(regs*)>:
c001b2d5:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001b2da:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b2e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b2e4:	e9 e3 83 ff ff       	jmp    c00136cc <Clock::timeInSecondsLocal()>

c001b2e9 <string_ends_with(char const*, char const*)>:
c001b2e9:	57                   	push   edi
c001b2ea:	56                   	push   esi
c001b2eb:	53                   	push   ebx
c001b2ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2f0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b2f4:	83 ec 0c             	sub    esp,0xc
c001b2f7:	53                   	push   ebx
c001b2f8:	e8 ab 53 fe ff       	call   c00006a8 <strlen>
c001b2fd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001b300:	89 c6                	mov    esi,eax
c001b302:	e8 a1 53 fe ff       	call   c00006a8 <strlen>
c001b307:	83 c4 10             	add    esp,0x10
c001b30a:	39 c6                	cmp    esi,eax
c001b30c:	7d 06                	jge    c001b314 <string_ends_with(char const*, char const*)+0x2b>
c001b30e:	5b                   	pop    ebx
c001b30f:	31 c0                	xor    eax,eax
c001b311:	5e                   	pop    esi
c001b312:	5f                   	pop    edi
c001b313:	c3                   	ret    
c001b314:	83 ec 08             	sub    esp,0x8
c001b317:	29 c6                	sub    esi,eax
c001b319:	57                   	push   edi
c001b31a:	01 f3                	add    ebx,esi
c001b31c:	53                   	push   ebx
c001b31d:	e8 59 54 fe ff       	call   c000077b <strcmp>
c001b322:	83 c4 10             	add    esp,0x10
c001b325:	85 c0                	test   eax,eax
c001b327:	5b                   	pop    ebx
c001b328:	0f 94 c0             	sete   al
c001b32b:	5e                   	pop    esi
c001b32c:	0f b6 c0             	movzx  eax,al
c001b32f:	5f                   	pop    edi
c001b330:	c3                   	ret    

c001b331 <sysCallOpen(regs*)>:
c001b331:	56                   	push   esi
c001b332:	53                   	push   ebx
c001b333:	81 ec 04 01 00 00    	sub    esp,0x104
c001b339:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001b340:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001b343:	85 c9                	test   ecx,ecx
c001b345:	0f 84 b3 00 00 00    	je     c001b3fe <sysCallOpen(regs*)+0xcd>
c001b34b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001b34e:	85 c0                	test   eax,eax
c001b350:	0f 84 a8 00 00 00    	je     c001b3fe <sysCallOpen(regs*)+0xcd>
c001b356:	52                   	push   edx
c001b357:	68 b1 a5 02 c0       	push   0xc002a5b1
c001b35c:	50                   	push   eax
c001b35d:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b361:	56                   	push   esi
c001b362:	e8 df 77 ff ff       	call   c0012b46 <standardiseFiles(char*, char const*, char const*)>
c001b367:	89 34 24             	mov    DWORD PTR [esp],esi
c001b36a:	e8 39 53 fe ff       	call   c00006a8 <strlen>
c001b36f:	83 c4 10             	add    esp,0x10
c001b372:	48                   	dec    eax
c001b373:	74 1d                	je     c001b392 <sysCallOpen(regs*)+0x61>
c001b375:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001b378:	eb 0f                	jmp    c001b389 <sysCallOpen(regs*)+0x58>
c001b37a:	80 fa 3a             	cmp    dl,0x3a
c001b37d:	74 0f                	je     c001b38e <sysCallOpen(regs*)+0x5d>
c001b37f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001b383:	48                   	dec    eax
c001b384:	74 0c                	je     c001b392 <sysCallOpen(regs*)+0x61>
c001b386:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001b389:	80 fa 2e             	cmp    dl,0x2e
c001b38c:	75 ec                	jne    c001b37a <sysCallOpen(regs*)+0x49>
c001b38e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001b392:	83 ec 08             	sub    esp,0x8
c001b395:	68 b5 a5 02 c0       	push   0xc002a5b5
c001b39a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b39d:	e8 47 ff ff ff       	call   c001b2e9 <string_ends_with(char const*, char const*)>
c001b3a2:	83 c4 10             	add    esp,0x10
c001b3a5:	85 c0                	test   eax,eax
c001b3a7:	75 17                	jne    c001b3c0 <sysCallOpen(regs*)+0x8f>
c001b3a9:	83 ec 08             	sub    esp,0x8
c001b3ac:	68 d6 a5 02 c0       	push   0xc002a5d6
c001b3b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b3b4:	e8 30 ff ff ff       	call   c001b2e9 <string_ends_with(char const*, char const*)>
c001b3b9:	83 c4 10             	add    esp,0x10
c001b3bc:	85 c0                	test   eax,eax
c001b3be:	74 51                	je     c001b411 <sysCallOpen(regs*)+0xe0>
c001b3c0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3c3:	83 ec 08             	sub    esp,0x8
c001b3c6:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001b3cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b3d3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b3d6:	ff 30                	push   DWORD PTR [eax]
c001b3d8:	68 ba a5 02 c0       	push   0xc002a5ba
c001b3dd:	e8 df 73 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001b3e2:	c7 04 24 c9 a5 02 c0 	mov    DWORD PTR [esp],0xc002a5c9
c001b3e9:	e8 d3 73 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001b3ee:	83 c4 10             	add    esp,0x10
c001b3f1:	81 c4 04 01 00 00    	add    esp,0x104
c001b3f7:	31 c0                	xor    eax,eax
c001b3f9:	31 d2                	xor    edx,edx
c001b3fb:	5b                   	pop    ebx
c001b3fc:	5e                   	pop    esi
c001b3fd:	c3                   	ret    
c001b3fe:	81 c4 04 01 00 00    	add    esp,0x104
c001b404:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b409:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b40e:	5b                   	pop    ebx
c001b40f:	5e                   	pop    esi
c001b410:	c3                   	ret    
c001b411:	83 ec 08             	sub    esp,0x8
c001b414:	68 b6 a5 02 c0       	push   0xc002a5b6
c001b419:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b41c:	e8 5a 53 fe ff       	call   c000077b <strcmp>
c001b421:	83 c4 10             	add    esp,0x10
c001b424:	85 c0                	test   eax,eax
c001b426:	74 98                	je     c001b3c0 <sysCallOpen(regs*)+0x8f>
c001b428:	83 ec 08             	sub    esp,0x8
c001b42b:	68 b5 a5 02 c0       	push   0xc002a5b5
c001b430:	56                   	push   esi
c001b431:	e8 b3 fe ff ff       	call   c001b2e9 <string_ends_with(char const*, char const*)>
c001b436:	83 c4 10             	add    esp,0x10
c001b439:	85 c0                	test   eax,eax
c001b43b:	75 83                	jne    c001b3c0 <sysCallOpen(regs*)+0x8f>
c001b43d:	83 ec 08             	sub    esp,0x8
c001b440:	68 db a5 02 c0       	push   0xc002a5db
c001b445:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b448:	e8 9c fe ff ff       	call   c001b2e9 <string_ends_with(char const*, char const*)>
c001b44d:	83 c4 10             	add    esp,0x10
c001b450:	85 c0                	test   eax,eax
c001b452:	0f 85 d9 00 00 00    	jne    c001b531 <sysCallOpen(regs*)+0x200>
c001b458:	83 ec 08             	sub    esp,0x8
c001b45b:	68 e0 a5 02 c0       	push   0xc002a5e0
c001b460:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b463:	e8 81 fe ff ff       	call   c001b2e9 <string_ends_with(char const*, char const*)>
c001b468:	83 c4 10             	add    esp,0x10
c001b46b:	85 c0                	test   eax,eax
c001b46d:	0f 85 be 00 00 00    	jne    c001b531 <sysCallOpen(regs*)+0x200>
c001b473:	83 ec 08             	sub    esp,0x8
c001b476:	68 dc a5 02 c0       	push   0xc002a5dc
c001b47b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b47e:	e8 f8 52 fe ff       	call   c000077b <strcmp>
c001b483:	83 c4 10             	add    esp,0x10
c001b486:	85 c0                	test   eax,eax
c001b488:	0f 84 a3 00 00 00    	je     c001b531 <sysCallOpen(regs*)+0x200>
c001b48e:	83 ec 08             	sub    esp,0x8
c001b491:	68 db a5 02 c0       	push   0xc002a5db
c001b496:	56                   	push   esi
c001b497:	e8 4d fe ff ff       	call   c001b2e9 <string_ends_with(char const*, char const*)>
c001b49c:	83 c4 10             	add    esp,0x10
c001b49f:	85 c0                	test   eax,eax
c001b4a1:	0f 85 8a 00 00 00    	jne    c001b531 <sysCallOpen(regs*)+0x200>
c001b4a7:	83 ec 0c             	sub    esp,0xc
c001b4aa:	68 14 01 00 00       	push   0x114
c001b4af:	e8 20 40 ff ff       	call   c000f4d4 <malloc>
c001b4b4:	83 c4 0c             	add    esp,0xc
c001b4b7:	89 c6                	mov    esi,eax
c001b4b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4be:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b4c1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b4c4:	56                   	push   esi
c001b4c5:	e8 26 78 ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001b4ca:	83 c4 10             	add    esp,0x10
c001b4cd:	85 f6                	test   esi,esi
c001b4cf:	0f 84 29 ff ff ff    	je     c001b3fe <sysCallOpen(regs*)+0xcd>
c001b4d5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001b4d8:	0f b6 c2             	movzx  eax,dl
c001b4db:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001b4de:	89 d0                	mov    eax,edx
c001b4e0:	83 e0 01             	and    eax,0x1
c001b4e3:	f6 c2 02             	test   dl,0x2
c001b4e6:	74 03                	je     c001b4eb <sysCallOpen(regs*)+0x1ba>
c001b4e8:	83 c8 02             	or     eax,0x2
c001b4eb:	f6 c2 04             	test   dl,0x4
c001b4ee:	74 03                	je     c001b4f3 <sysCallOpen(regs*)+0x1c2>
c001b4f0:	83 c8 04             	or     eax,0x4
c001b4f3:	f6 c2 08             	test   dl,0x8
c001b4f6:	74 03                	je     c001b4fb <sysCallOpen(regs*)+0x1ca>
c001b4f8:	83 c8 0a             	or     eax,0xa
c001b4fb:	83 e2 10             	and    edx,0x10
c001b4fe:	74 03                	je     c001b503 <sysCallOpen(regs*)+0x1d2>
c001b500:	83 c8 12             	or     eax,0x12
c001b503:	83 ec 08             	sub    esp,0x8
c001b506:	50                   	push   eax
c001b507:	56                   	push   esi
c001b508:	e8 47 78 ff ff       	call   c0012d54 <File::open(FileOpenMode)>
c001b50d:	83 c4 10             	add    esp,0x10
c001b510:	85 c0                	test   eax,eax
c001b512:	0f 85 e6 fe ff ff    	jne    c001b3fe <sysCallOpen(regs*)+0xcd>
c001b518:	83 ec 0c             	sub    esp,0xc
c001b51b:	56                   	push   esi
c001b51c:	e8 65 5e ff ff       	call   c0011386 <UnixFile::getFileDescriptor()>
c001b521:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b524:	89 02                	mov    DWORD PTR [edx],eax
c001b526:	c1 f8 1f             	sar    eax,0x1f
c001b529:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b52c:	e9 bd fe ff ff       	jmp    c001b3ee <sysCallOpen(regs*)+0xbd>
c001b531:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b534:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001b53a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b541:	e9 ab fe ff ff       	jmp    c001b3f1 <sysCallOpen(regs*)+0xc0>

c001b546 <setupSystemCalls()>:
c001b546:	c7 05 e0 d4 02 c0 fc a6 01 c0 	mov    DWORD PTR ds:0xc002d4e0,0xc001a6fc
c001b550:	c7 05 e4 d4 02 c0 d0 a4 01 c0 	mov    DWORD PTR ds:0xc002d4e4,0xc001a4d0
c001b55a:	c7 05 e8 d4 02 c0 23 a6 01 c0 	mov    DWORD PTR ds:0xc002d4e8,0xc001a623
c001b564:	c7 05 ec d4 02 c0 94 a6 01 c0 	mov    DWORD PTR ds:0xc002d4ec,0xc001a694
c001b56e:	c7 05 f0 d4 02 c0 bb a5 01 c0 	mov    DWORD PTR ds:0xc002d4f0,0xc001a5bb
c001b578:	c7 05 f4 d4 02 c0 07 a5 01 c0 	mov    DWORD PTR ds:0xc002d4f4,0xc001a507
c001b582:	c7 05 f8 d4 02 c0 e8 a4 01 c0 	mov    DWORD PTR ds:0xc002d4f8,0xc001a4e8
c001b58c:	c7 05 fc d4 02 c0 78 a6 01 c0 	mov    DWORD PTR ds:0xc002d4fc,0xc001a678
c001b596:	c7 05 04 d5 02 c0 0e ac 01 c0 	mov    DWORD PTR ds:0xc002d504,0xc001ac0e
c001b5a0:	c7 05 00 d5 02 c0 31 b3 01 c0 	mov    DWORD PTR ds:0xc002d500,0xc001b331
c001b5aa:	c7 05 08 d5 02 c0 96 ac 01 c0 	mov    DWORD PTR ds:0xc002d508,0xc001ac96
c001b5b4:	c7 05 0c d5 02 c0 fd a8 01 c0 	mov    DWORD PTR ds:0xc002d50c,0xc001a8fd
c001b5be:	c7 05 10 d5 02 c0 37 a7 01 c0 	mov    DWORD PTR ds:0xc002d510,0xc001a737
c001b5c8:	c7 05 14 d5 02 c0 3c a7 01 c0 	mov    DWORD PTR ds:0xc002d514,0xc001a73c
c001b5d2:	c7 05 18 d5 02 c0 71 ad 01 c0 	mov    DWORD PTR ds:0xc002d518,0xc001ad71
c001b5dc:	c7 05 1c d5 02 c0 0b ad 01 c0 	mov    DWORD PTR ds:0xc002d51c,0xc001ad0b
c001b5e6:	c7 05 20 d5 02 c0 e5 a9 01 c0 	mov    DWORD PTR ds:0xc002d520,0xc001a9e5
c001b5f0:	c7 05 24 d5 02 c0 4e aa 01 c0 	mov    DWORD PTR ds:0xc002d524,0xc001aa4e
c001b5fa:	c7 05 28 d5 02 c0 cb aa 01 c0 	mov    DWORD PTR ds:0xc002d528,0xc001aacb
c001b604:	c7 05 2c d5 02 c0 41 a7 01 c0 	mov    DWORD PTR ds:0xc002d52c,0xc001a741
c001b60e:	c7 05 30 d5 02 c0 e1 ad 01 c0 	mov    DWORD PTR ds:0xc002d530,0xc001ade1
c001b618:	c7 05 34 d5 02 c0 fb ad 01 c0 	mov    DWORD PTR ds:0xc002d534,0xc001adfb
c001b622:	c7 05 38 d5 02 c0 fb ad 01 c0 	mov    DWORD PTR ds:0xc002d538,0xc001adfb
c001b62c:	c7 05 3c d5 02 c0 3c ae 01 c0 	mov    DWORD PTR ds:0xc002d53c,0xc001ae3c
c001b636:	c7 05 40 d5 02 c0 a0 ae 01 c0 	mov    DWORD PTR ds:0xc002d540,0xc001aea0
c001b640:	c7 05 44 d5 02 c0 4b a7 01 c0 	mov    DWORD PTR ds:0xc002d544,0xc001a74b
c001b64a:	c7 05 48 d5 02 c0 04 af 01 c0 	mov    DWORD PTR ds:0xc002d548,0xc001af04
c001b654:	c7 05 4c d5 02 c0 ba a8 01 c0 	mov    DWORD PTR ds:0xc002d54c,0xc001a8ba
c001b65e:	c7 05 50 d5 02 c0 50 af 01 c0 	mov    DWORD PTR ds:0xc002d550,0xc001af50
c001b668:	c7 05 54 d5 02 c0 8b a9 01 c0 	mov    DWORD PTR ds:0xc002d554,0xc001a98b
c001b672:	c7 05 58 d5 02 c0 d3 af 01 c0 	mov    DWORD PTR ds:0xc002d558,0xc001afd3
c001b67c:	c7 05 5c d5 02 c0 4e ab 01 c0 	mov    DWORD PTR ds:0xc002d55c,0xc001ab4e
c001b686:	c7 05 60 d5 02 c0 fa af 01 c0 	mov    DWORD PTR ds:0xc002d560,0xc001affa
c001b690:	c7 05 64 d5 02 c0 52 b0 01 c0 	mov    DWORD PTR ds:0xc002d564,0xc001b052
c001b69a:	c7 05 68 d5 02 c0 ff b0 01 c0 	mov    DWORD PTR ds:0xc002d568,0xc001b0ff
c001b6a4:	c7 05 6c d5 02 c0 5b a7 01 c0 	mov    DWORD PTR ds:0xc002d56c,0xc001a75b
c001b6ae:	c7 05 70 d5 02 c0 c5 a7 01 c0 	mov    DWORD PTR ds:0xc002d570,0xc001a7c5
c001b6b8:	c7 05 74 d5 02 c0 0b a8 01 c0 	mov    DWORD PTR ds:0xc002d574,0xc001a80b
c001b6c2:	c7 05 78 d5 02 c0 1e b2 01 c0 	mov    DWORD PTR ds:0xc002d578,0xc001b21e
c001b6cc:	c7 05 7c d5 02 c0 16 ae 01 c0 	mov    DWORD PTR ds:0xc002d57c,0xc001ae16
c001b6d6:	c7 05 80 d5 02 c0 5c a8 01 c0 	mov    DWORD PTR ds:0xc002d580,0xc001a85c
c001b6e0:	c7 05 84 d5 02 c0 90 b2 01 c0 	mov    DWORD PTR ds:0xc002d584,0xc001b290
c001b6ea:	c7 05 88 d5 02 c0 d5 b2 01 c0 	mov    DWORD PTR ds:0xc002d588,0xc001b2d5
c001b6f4:	c7 05 8c d5 02 c0 13 a5 01 c0 	mov    DWORD PTR ds:0xc002d58c,0xc001a513
c001b6fe:	c3                   	ret    

c001b6ff <systemCall(regs*, void*)>:
c001b6ff:	53                   	push   ebx
c001b700:	83 ec 08             	sub    esp,0x8
c001b703:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b707:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001b70a:	83 f8 7f             	cmp    eax,0x7f
c001b70d:	77 16                	ja     c001b725 <systemCall(regs*, void*)+0x26>
c001b70f:	8b 14 85 e0 d4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2b20]
c001b716:	85 d2                	test   edx,edx
c001b718:	74 0b                	je     c001b725 <systemCall(regs*, void*)+0x26>
c001b71a:	83 ec 0c             	sub    esp,0xc
c001b71d:	53                   	push   ebx
c001b71e:	ff d2                	call   edx
c001b720:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001b723:	eb 0d                	jmp    c001b732 <systemCall(regs*, void*)+0x33>
c001b725:	52                   	push   edx
c001b726:	52                   	push   edx
c001b727:	50                   	push   eax
c001b728:	68 e5 a5 02 c0       	push   0xc002a5e5
c001b72d:	e8 8f 70 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001b732:	83 c4 10             	add    esp,0x10
c001b735:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b73a:	31 d2                	xor    edx,edx
c001b73c:	83 c4 08             	add    esp,0x8
c001b73f:	5b                   	pop    ebx
c001b740:	c3                   	ret    

c001b741 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001b741:	55                   	push   ebp
c001b742:	89 e5                	mov    ebp,esp
c001b744:	57                   	push   edi
c001b745:	56                   	push   esi
c001b746:	53                   	push   ebx
c001b747:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001b74d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001b750:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c001b753:	85 c0                	test   eax,eax
c001b755:	0f 95 c1             	setne  cl
c001b758:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001b75c:	0f 94 c2             	sete   dl
c001b75f:	84 d1                	test   cl,dl
c001b761:	74 26                	je     c001b789 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b763:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001b76a:	74 1d                	je     c001b789 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001b76c:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001b76f:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c001b775:	89 d6                	mov    esi,edx
c001b777:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001b77d:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c001b783:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001b786:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001b789:	83 ec 0c             	sub    esp,0xc
c001b78c:	05 ff 0f 00 00       	add    eax,0xfff
c001b791:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001b794:	6a 01                	push   0x1
c001b796:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001b79c:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c001b7a2:	e8 2a 60 ff ff       	call   c00117d1 <Virt::allocateKernelVirtualPages(int)>
c001b7a7:	83 c4 10             	add    esp,0x10
c001b7aa:	89 c6                	mov    esi,eax
c001b7ac:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c001b7b2:	0f 86 21 01 00 00    	jbe    c001b8d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001b7b8:	c1 eb 0c             	shr    ebx,0xc
c001b7bb:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c001b7c5:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001b7cb:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b7ce:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b7d1:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c001b7d7:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001b7da:	29 d8                	sub    eax,ebx
c001b7dc:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001b7e2:	0f 83 f4 00 00 00    	jae    c001b8dc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001b7e8:	83 ec 0c             	sub    esp,0xc
c001b7eb:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001b7f1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001b7f4:	3d 00 10 00 00       	cmp    eax,0x1000
c001b7f9:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001b7fb:	52                   	push   edx
c001b7fc:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001b802:	52                   	push   edx
c001b803:	76 05                	jbe    c001b80a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c001b805:	b8 00 10 00 00       	mov    eax,0x1000
c001b80a:	31 d2                	xor    edx,edx
c001b80c:	52                   	push   edx
c001b80d:	50                   	push   eax
c001b80e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001b811:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001b814:	83 c4 20             	add    esp,0x20
c001b817:	85 c0                	test   eax,eax
c001b819:	74 1f                	je     c001b83a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c001b81b:	51                   	push   ecx
c001b81c:	51                   	push   ecx
c001b81d:	50                   	push   eax
c001b81e:	68 f9 a5 02 c0       	push   0xc002a5f9
c001b823:	e8 99 6f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001b828:	89 34 24             	mov    DWORD PTR [esp],esi
c001b82b:	e8 05 63 ff ff       	call   c0011b35 <Virt::freeKernelVirtualPages(unsigned long)>
c001b830:	83 c4 10             	add    esp,0x10
c001b833:	31 c0                	xor    eax,eax
c001b835:	e9 7c 01 00 00       	jmp    c001b9b6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001b83a:	e8 2b 15 00 00       	call   c001cd6a <lockScheduler()>
c001b83f:	e8 a4 42 ff ff       	call   c000fae8 <Phys::allocatePage()>
c001b844:	6a 07                	push   0x7
c001b846:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c001b84c:	56                   	push   esi
c001b84d:	50                   	push   eax
c001b84e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b854:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b857:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b85d:	e8 3a 66 ff ff       	call   c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)>
c001b862:	83 c4 0c             	add    esp,0xc
c001b865:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b86b:	6a 00                	push   0x0
c001b86d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001b873:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c001b876:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001b87c:	e8 85 64 ff ff       	call   c0011d06 <VAS::mapOtherVASIn(bool, VAS*)>
c001b881:	58                   	pop    eax
c001b882:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001b888:	5a                   	pop    edx
c001b889:	68 07 04 00 00       	push   0x407
c001b88e:	53                   	push   ebx
c001b88f:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b895:	50                   	push   eax
c001b896:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b89c:	6a 00                	push   0x0
c001b89e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8a3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b8a6:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b8ac:	e8 a5 69 ff ff       	call   c0012256 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b8b1:	83 c4 1c             	add    esp,0x1c
c001b8b4:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001b8ba:	68 00 10 00 00       	push   0x1000
c001b8bf:	50                   	push   eax
c001b8c0:	56                   	push   esi
c001b8c1:	e8 8f 4d fe ff       	call   c0000655 <memcpy>
c001b8c6:	e8 a1 14 00 00       	call   c001cd6c <unlockScheduler()>
c001b8cb:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001b8d1:	83 c4 10             	add    esp,0x10
c001b8d4:	e9 f5 fe ff ff       	jmp    c001b7ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001b8d9:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001b8dc:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c001b8e6:	0f 86 bc 00 00 00    	jbe    c001b9a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001b8ec:	e8 79 14 00 00       	call   c001cd6a <lockScheduler()>
c001b8f1:	51                   	push   ecx
c001b8f2:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b8f8:	6a 00                	push   0x0
c001b8fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8ff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b902:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b908:	e8 f9 63 ff ff       	call   c0011d06 <VAS::mapOtherVASIn(bool, VAS*)>
c001b90d:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001b913:	83 c4 10             	add    esp,0x10
c001b916:	c1 e8 0c             	shr    eax,0xc
c001b919:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c001b923:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001b929:	e8 ba 41 ff ff       	call   c000fae8 <Phys::allocatePage()>
c001b92e:	6a 07                	push   0x7
c001b930:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001b936:	56                   	push   esi
c001b937:	50                   	push   eax
c001b938:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b93e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b941:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001b947:	e8 50 65 ff ff       	call   c0011e9c <VAS::mapPage(unsigned long, unsigned long, int)>
c001b94c:	58                   	pop    eax
c001b94d:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001b953:	5a                   	pop    edx
c001b954:	68 07 04 00 00       	push   0x407
c001b959:	53                   	push   ebx
c001b95a:	81 c3 00 10 00 00    	add    ebx,0x1000
c001b960:	50                   	push   eax
c001b961:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001b967:	6a 00                	push   0x0
c001b969:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b96e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b971:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b977:	e8 da 68 ff ff       	call   c0012256 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001b97c:	83 c4 1c             	add    esp,0x1c
c001b97f:	68 00 10 00 00       	push   0x1000
c001b984:	6a 00                	push   0x0
c001b986:	56                   	push   esi
c001b987:	e8 ff 4c fe ff       	call   c000068b <memset>
c001b98c:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c001b992:	83 c4 10             	add    esp,0x10
c001b995:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001b99b:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c001b9a1:	77 86                	ja     c001b929 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c001b9a3:	e8 c4 13 00 00       	call   c001cd6c <unlockScheduler()>
c001b9a8:	83 ec 0c             	sub    esp,0xc
c001b9ab:	56                   	push   esi
c001b9ac:	e8 84 61 ff ff       	call   c0011b35 <Virt::freeKernelVirtualPages(unsigned long)>
c001b9b1:	83 c4 10             	add    esp,0x10
c001b9b4:	b0 01                	mov    al,0x1
c001b9b6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b9b9:	5b                   	pop    ebx
c001b9ba:	5e                   	pop    esi
c001b9bb:	5f                   	pop    edi
c001b9bc:	5d                   	pop    ebp
c001b9bd:	c3                   	ret    

c001b9be <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001b9be:	55                   	push   ebp
c001b9bf:	57                   	push   edi
c001b9c0:	56                   	push   esi
c001b9c1:	53                   	push   ebx
c001b9c2:	83 ec 48             	sub    esp,0x48
c001b9c5:	68 14 01 00 00       	push   0x114
c001b9ca:	e8 05 3b ff ff       	call   c000f4d4 <malloc>
c001b9cf:	83 c4 0c             	add    esp,0xc
c001b9d2:	89 c6                	mov    esi,eax
c001b9d4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001b9d8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001b9dc:	50                   	push   eax
c001b9dd:	e8 0e 73 ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001b9e2:	58                   	pop    eax
c001b9e3:	5a                   	pop    edx
c001b9e4:	6a 01                	push   0x1
c001b9e6:	56                   	push   esi
c001b9e7:	e8 68 73 ff ff       	call   c0012d54 <File::open(FileOpenMode)>
c001b9ec:	83 c4 10             	add    esp,0x10
c001b9ef:	85 c0                	test   eax,eax
c001b9f1:	0f 85 47 01 00 00    	jne    c001bb3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001b9f7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b9ff:	83 ec 0c             	sub    esp,0xc
c001ba02:	6a 34                	push   0x34
c001ba04:	e8 cb 3a ff ff       	call   c000f4d4 <malloc>
c001ba09:	89 c3                	mov    ebx,eax
c001ba0b:	58                   	pop    eax
c001ba0c:	8b 06                	mov    eax,DWORD PTR [esi]
c001ba0e:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ba12:	57                   	push   edi
c001ba13:	53                   	push   ebx
c001ba14:	6a 00                	push   0x0
c001ba16:	6a 34                	push   0x34
c001ba18:	56                   	push   esi
c001ba19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ba1c:	83 c4 20             	add    esp,0x20
c001ba1f:	85 c0                	test   eax,eax
c001ba21:	0f 85 17 01 00 00    	jne    c001bb3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba27:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ba2d:	0f 85 0b 01 00 00    	jne    c001bb3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba33:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba36:	85 c0                	test   eax,eax
c001ba38:	0f 84 00 01 00 00    	je     c001bb3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba3e:	31 d2                	xor    edx,edx
c001ba40:	55                   	push   ebp
c001ba41:	52                   	push   edx
c001ba42:	50                   	push   eax
c001ba43:	56                   	push   esi
c001ba44:	e8 c9 73 ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001ba49:	83 c4 10             	add    esp,0x10
c001ba4c:	85 c0                	test   eax,eax
c001ba4e:	0f 85 ea 00 00 00    	jne    c001bb3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba54:	83 ec 0c             	sub    esp,0xc
c001ba57:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ba5a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba5e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ba62:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba66:	0f af c2             	imul   eax,edx
c001ba69:	50                   	push   eax
c001ba6a:	e8 65 3a ff ff       	call   c000f4d4 <malloc>
c001ba6f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ba71:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ba75:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ba78:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ba7c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ba80:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ba84:	0f af c2             	imul   eax,edx
c001ba87:	99                   	cdq    
c001ba88:	52                   	push   edx
c001ba89:	50                   	push   eax
c001ba8a:	56                   	push   esi
c001ba8b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ba8e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ba91:	83 c4 20             	add    esp,0x20
c001ba94:	85 c0                	test   eax,eax
c001ba96:	0f 84 a2 00 00 00    	je     c001bb3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ba9c:	31 d2                	xor    edx,edx
c001ba9e:	51                   	push   ecx
c001ba9f:	52                   	push   edx
c001baa0:	50                   	push   eax
c001baa1:	56                   	push   esi
c001baa2:	e8 6b 73 ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001baa7:	83 c4 10             	add    esp,0x10
c001baaa:	85 c0                	test   eax,eax
c001baac:	0f 85 8c 00 00 00    	jne    c001bb3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001bab2:	83 ec 0c             	sub    esp,0xc
c001bab5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bab9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001babd:	31 ed                	xor    ebp,ebp
c001babf:	0f af c2             	imul   eax,edx
c001bac2:	50                   	push   eax
c001bac3:	e8 0c 3a ff ff       	call   c000f4d4 <malloc>
c001bac8:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001baca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bace:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bad1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bad5:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001bad9:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001badd:	0f af c2             	imul   eax,edx
c001bae0:	99                   	cdq    
c001bae1:	52                   	push   edx
c001bae2:	50                   	push   eax
c001bae3:	56                   	push   esi
c001bae4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bae7:	83 c4 20             	add    esp,0x20
c001baea:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001baf2:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001baf6:	0f 86 80 00 00 00    	jbe    c001bb7c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001bafc:	0f b7 fd             	movzx  edi,bp
c001baff:	c1 e7 05             	shl    edi,0x5
c001bb02:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001bb06:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001bb09:	75 6b                	jne    c001bb76 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bb0b:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001bb0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb12:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001bb15:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bb19:	52                   	push   edx
c001bb1a:	31 d2                	xor    edx,edx
c001bb1c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001bb1f:	52                   	push   edx
c001bb20:	50                   	push   eax
c001bb21:	56                   	push   esi
c001bb22:	e8 eb 72 ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001bb27:	83 c4 10             	add    esp,0x10
c001bb2a:	85 c0                	test   eax,eax
c001bb2c:	74 17                	je     c001bb45 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001bb2e:	83 ec 0c             	sub    esp,0xc
c001bb31:	68 24 a6 02 c0       	push   0xc002a624
c001bb36:	e8 86 6c ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001bb3b:	83 c4 10             	add    esp,0x10
c001bb3e:	31 c0                	xor    eax,eax
c001bb40:	e9 87 00 00 00       	jmp    c001bbcc <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001bb45:	83 ec 0c             	sub    esp,0xc
c001bb48:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001bb4b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001bb4e:	50                   	push   eax
c001bb4f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bb53:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb57:	56                   	push   esi
c001bb58:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001bb5c:	e8 e0 fb ff ff       	call   c001b741 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001bb61:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001bb65:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001bb69:	83 c4 20             	add    esp,0x20
c001bb6c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb70:	73 04                	jae    c001bb76 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001bb72:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb76:	45                   	inc    ebp
c001bb77:	e9 76 ff ff ff       	jmp    c001baf2 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001bb7c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001bb80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001bb84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb88:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001bb8e:	83 ec 0c             	sub    esp,0xc
c001bb91:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001bb97:	25 00 f0 ff ff       	and    eax,0xfffff000
c001bb9c:	05 00 10 00 00       	add    eax,0x1000
c001bba1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bba8:	e8 37 39 ff ff       	call   c000f4e4 <free>
c001bbad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bbb0:	e8 2f 39 ff ff       	call   c000f4e4 <free>
c001bbb5:	58                   	pop    eax
c001bbb6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bbba:	e8 25 39 ff ff       	call   c000f4e4 <free>
c001bbbf:	89 34 24             	mov    DWORD PTR [esp],esi
c001bbc2:	e8 eb 71 ff ff       	call   c0012db2 <File::close()>
c001bbc7:	83 c4 10             	add    esp,0x10
c001bbca:	b0 01                	mov    al,0x1
c001bbcc:	83 c4 3c             	add    esp,0x3c
c001bbcf:	5b                   	pop    ebx
c001bbd0:	5e                   	pop    esi
c001bbd1:	5f                   	pop    edi
c001bbd2:	5d                   	pop    ebp
c001bbd3:	c3                   	ret    

c001bbd4 <Thr::runtimeReferenceHelper()>:
c001bbd4:	83 ec 18             	sub    esp,0x18
c001bbd7:	68 2c a6 02 c0       	push   0xc002a62c
c001bbdc:	e8 e0 6b ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001bbe1:	fa                   	cli    
c001bbe2:	83 c4 10             	add    esp,0x10
c001bbe5:	eb fe                	jmp    c001bbe5 <Thr::runtimeReferenceHelper()+0x11>

c001bbe7 <Thr::getAddressOfKernelSymbol(char const*)>:
c001bbe7:	57                   	push   edi
c001bbe8:	56                   	push   esi
c001bbe9:	53                   	push   ebx
c001bbea:	31 db                	xor    ebx,ebx
c001bbec:	39 1d 80 de 02 c0    	cmp    DWORD PTR ds:0xc002de80,ebx
c001bbf2:	7e 3c                	jle    c001bc30 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001bbf4:	8b 34 9d 00 de 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd2200]
c001bbfb:	31 ff                	xor    edi,edi
c001bbfd:	39 3c 9d 00 dd 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2300],edi
c001bc04:	7e 27                	jle    c001bc2d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001bc06:	50                   	push   eax
c001bc07:	50                   	push   eax
c001bc08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bc0c:	8b 06                	mov    eax,DWORD PTR [esi]
c001bc0e:	03 04 9d 80 dd 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2280]
c001bc15:	50                   	push   eax
c001bc16:	e8 60 4b fe ff       	call   c000077b <strcmp>
c001bc1b:	83 c4 10             	add    esp,0x10
c001bc1e:	85 c0                	test   eax,eax
c001bc20:	75 05                	jne    c001bc27 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001bc22:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001bc25:	eb 0b                	jmp    c001bc32 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001bc27:	83 c6 10             	add    esi,0x10
c001bc2a:	47                   	inc    edi
c001bc2b:	eb d0                	jmp    c001bbfd <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001bc2d:	43                   	inc    ebx
c001bc2e:	eb bc                	jmp    c001bbec <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001bc30:	31 c0                	xor    eax,eax
c001bc32:	5b                   	pop    ebx
c001bc33:	5e                   	pop    esi
c001bc34:	5f                   	pop    edi
c001bc35:	c3                   	ret    

c001bc36 <Thr::loadKernelSymbolTable(char const*)>:
c001bc36:	55                   	push   ebp
c001bc37:	57                   	push   edi
c001bc38:	56                   	push   esi
c001bc39:	53                   	push   ebx
c001bc3a:	83 ec 68             	sub    esp,0x68
c001bc3d:	8b 35 d4 de 02 c0    	mov    esi,DWORD PTR ds:0xc002ded4
c001bc43:	68 14 01 00 00       	push   0x114
c001bc48:	e8 87 38 ff ff       	call   c000f4d4 <malloc>
c001bc4d:	83 c4 0c             	add    esp,0xc
c001bc50:	89 c3                	mov    ebx,eax
c001bc52:	56                   	push   esi
c001bc53:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001bc57:	50                   	push   eax
c001bc58:	e8 93 70 ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001bc5d:	5e                   	pop    esi
c001bc5e:	5f                   	pop    edi
c001bc5f:	6a 01                	push   0x1
c001bc61:	53                   	push   ebx
c001bc62:	e8 ed 70 ff ff       	call   c0012d54 <File::open(FileOpenMode)>
c001bc67:	83 c4 10             	add    esp,0x10
c001bc6a:	31 d2                	xor    edx,edx
c001bc6c:	85 c0                	test   eax,eax
c001bc6e:	0f 85 74 02 00 00    	jne    c001bee8 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bc74:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001bc7c:	83 ec 0c             	sub    esp,0xc
c001bc7f:	6a 34                	push   0x34
c001bc81:	e8 4e 38 ff ff       	call   c000f4d4 <malloc>
c001bc86:	59                   	pop    ecx
c001bc87:	89 c7                	mov    edi,eax
c001bc89:	8d 74 24 34          	lea    esi,[esp+0x34]
c001bc8d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bc8f:	56                   	push   esi
c001bc90:	57                   	push   edi
c001bc91:	6a 00                	push   0x0
c001bc93:	6a 34                	push   0x34
c001bc95:	53                   	push   ebx
c001bc96:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bc99:	83 c4 20             	add    esp,0x20
c001bc9c:	85 c0                	test   eax,eax
c001bc9e:	74 17                	je     c001bcb7 <Thr::loadKernelSymbolTable(char const*)+0x81>
c001bca0:	83 ec 0c             	sub    esp,0xc
c001bca3:	68 4e a6 02 c0       	push   0xc002a64e
c001bca8:	e8 2e dc ff ff       	call   c00198db <Krnl::panic(char const*)>
c001bcad:	83 c4 10             	add    esp,0x10
c001bcb0:	31 d2                	xor    edx,edx
c001bcb2:	e9 31 02 00 00       	jmp    c001bee8 <Thr::loadKernelSymbolTable(char const*)+0x2b2>
c001bcb7:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bcbd:	75 e1                	jne    c001bca0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bcbf:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bcc2:	85 c0                	test   eax,eax
c001bcc4:	74 da                	je     c001bca0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bcc6:	52                   	push   edx
c001bcc7:	31 d2                	xor    edx,edx
c001bcc9:	52                   	push   edx
c001bcca:	50                   	push   eax
c001bccb:	53                   	push   ebx
c001bccc:	e8 41 71 ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001bcd1:	83 c4 10             	add    esp,0x10
c001bcd4:	85 c0                	test   eax,eax
c001bcd6:	75 c8                	jne    c001bca0 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001bcd8:	83 ec 0c             	sub    esp,0xc
c001bcdb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bcdf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bce3:	31 ed                	xor    ebp,ebp
c001bce5:	0f af c2             	imul   eax,edx
c001bce8:	50                   	push   eax
c001bce9:	e8 e6 37 ff ff       	call   c000f4d4 <malloc>
c001bcee:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001bcf0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bcf4:	89 34 24             	mov    DWORD PTR [esp],esi
c001bcf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bcfb:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bcff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bd03:	0f af c2             	imul   eax,edx
c001bd06:	99                   	cdq    
c001bd07:	52                   	push   edx
c001bd08:	50                   	push   eax
c001bd09:	53                   	push   ebx
c001bd0a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bd0d:	83 c4 20             	add    esp,0x20
c001bd10:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001bd18:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bd20:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bd28:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bd30:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001bd34:	0f 86 aa 00 00 00    	jbe    c001bde4 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c001bd3a:	0f b7 f5             	movzx  esi,bp
c001bd3d:	6b f6 28             	imul   esi,esi,0x28
c001bd40:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001bd44:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001bd47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bd4b:	50                   	push   eax
c001bd4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001bd50:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001bd54:	8b 16                	mov    edx,DWORD PTR [esi]
c001bd56:	6b c0 28             	imul   eax,eax,0x28
c001bd59:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001bd5d:	89 d0                	mov    eax,edx
c001bd5f:	31 d2                	xor    edx,edx
c001bd61:	52                   	push   edx
c001bd62:	50                   	push   eax
c001bd63:	53                   	push   ebx
c001bd64:	e8 a9 70 ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001bd69:	83 c4 0c             	add    esp,0xc
c001bd6c:	6a 20                	push   0x20
c001bd6e:	6a 00                	push   0x0
c001bd70:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd74:	52                   	push   edx
c001bd75:	e8 11 49 fe ff       	call   c000068b <memset>
c001bd7a:	58                   	pop    eax
c001bd7b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bd7d:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001bd81:	51                   	push   ecx
c001bd82:	8d 54 24 40          	lea    edx,[esp+0x40]
c001bd86:	52                   	push   edx
c001bd87:	6a 00                	push   0x0
c001bd89:	6a 1f                	push   0x1f
c001bd8b:	53                   	push   ebx
c001bd8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bd8f:	83 c4 18             	add    esp,0x18
c001bd92:	68 65 a6 02 c0       	push   0xc002a665
c001bd97:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001bd9b:	52                   	push   edx
c001bd9c:	e8 da 49 fe ff       	call   c000077b <strcmp>
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	85 c0                	test   eax,eax
c001bda6:	75 0f                	jne    c001bdb7 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001bda8:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bdab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bdaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdb3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bdb7:	50                   	push   eax
c001bdb8:	50                   	push   eax
c001bdb9:	68 6d a6 02 c0       	push   0xc002a66d
c001bdbe:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001bdc2:	50                   	push   eax
c001bdc3:	e8 b3 49 fe ff       	call   c000077b <strcmp>
c001bdc8:	83 c4 10             	add    esp,0x10
c001bdcb:	85 c0                	test   eax,eax
c001bdcd:	75 0f                	jne    c001bdde <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c001bdcf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001bdd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdd6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdda:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bdde:	45                   	inc    ebp
c001bddf:	e9 4c ff ff ff       	jmp    c001bd30 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c001bde4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bde9:	75 10                	jne    c001bdfb <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001bdeb:	83 ec 0c             	sub    esp,0xc
c001bdee:	68 75 a6 02 c0       	push   0xc002a675
c001bdf3:	e8 e3 da ff ff       	call   c00198db <Krnl::panic(char const*)>
c001bdf8:	83 c4 10             	add    esp,0x10
c001bdfb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001be00:	75 10                	jne    c001be12 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c001be02:	83 ec 0c             	sub    esp,0xc
c001be05:	68 75 a6 02 c0       	push   0xc002a675
c001be0a:	e8 cc da ff ff       	call   c00198db <Krnl::panic(char const*)>
c001be0f:	83 c4 10             	add    esp,0x10
c001be12:	31 d2                	xor    edx,edx
c001be14:	50                   	push   eax
c001be15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001be19:	52                   	push   edx
c001be1a:	50                   	push   eax
c001be1b:	53                   	push   ebx
c001be1c:	e8 f1 6f ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001be21:	5a                   	pop    edx
c001be22:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001be26:	e8 a9 36 ff ff       	call   c000f4d4 <malloc>
c001be2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be2f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001be33:	31 c9                	xor    ecx,ecx
c001be35:	5e                   	pop    esi
c001be36:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be38:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001be3c:	55                   	push   ebp
c001be3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be41:	51                   	push   ecx
c001be42:	52                   	push   edx
c001be43:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001be47:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001be4b:	53                   	push   ebx
c001be4c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be4f:	83 c4 14             	add    esp,0x14
c001be52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001be56:	e8 79 36 ff ff       	call   c000f4d4 <malloc>
c001be5b:	89 c6                	mov    esi,eax
c001be5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be62:	56                   	push   esi
c001be63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001be67:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001be6b:	51                   	push   ecx
c001be6c:	52                   	push   edx
c001be6d:	53                   	push   ebx
c001be6e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001be71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001be75:	8b 15 80 de 02 c0    	mov    edx,DWORD PTR ds:0xc002de80
c001be7b:	83 c4 1c             	add    esp,0x1c
c001be7e:	c1 e8 04             	shr    eax,0x4
c001be81:	89 04 95 00 dd 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2300],eax
c001be88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be8c:	31 d2                	xor    edx,edx
c001be8e:	52                   	push   edx
c001be8f:	50                   	push   eax
c001be90:	53                   	push   ebx
c001be91:	e8 7c 6f ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001be96:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001be98:	31 d2                	xor    edx,edx
c001be9a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be9d:	56                   	push   esi
c001be9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001bea2:	52                   	push   edx
c001bea3:	50                   	push   eax
c001bea4:	53                   	push   ebx
c001bea5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bea8:	83 c4 14             	add    esp,0x14
c001beab:	53                   	push   ebx
c001beac:	e8 01 6f ff ff       	call   c0012db2 <File::close()>
c001beb1:	5d                   	pop    ebp
c001beb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001beb6:	e8 29 36 ff ff       	call   c000f4e4 <free>
c001bebb:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bebe:	e8 21 36 ff ff       	call   c000f4e4 <free>
c001bec3:	a1 80 de 02 c0       	mov    eax,ds:0xc002de80
c001bec8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001becc:	8d 50 01             	lea    edx,[eax+0x1]
c001becf:	89 0c 85 00 de 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2200],ecx
c001bed6:	89 15 80 de 02 c0    	mov    DWORD PTR ds:0xc002de80,edx
c001bedc:	89 34 85 80 dd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2280],esi
c001bee3:	83 c4 10             	add    esp,0x10
c001bee6:	b2 01                	mov    dl,0x1
c001bee8:	83 c4 5c             	add    esp,0x5c
c001beeb:	88 d0                	mov    al,dl
c001beed:	5b                   	pop    ebx
c001beee:	5e                   	pop    esi
c001beef:	5f                   	pop    edi
c001bef0:	5d                   	pop    ebp
c001bef1:	c3                   	ret    

c001bef2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001bef2:	55                   	push   ebp
c001bef3:	57                   	push   edi
c001bef4:	56                   	push   esi
c001bef5:	53                   	push   ebx
c001bef6:	81 ec 68 03 00 00    	sub    esp,0x368
c001befc:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001bf03:	8b 1d d4 de 02 c0    	mov    ebx,DWORD PTR ds:0xc002ded4
c001bf09:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001bf0d:	68 14 01 00 00       	push   0x114
c001bf12:	e8 bd 35 ff ff       	call   c000f4d4 <malloc>
c001bf17:	83 c4 0c             	add    esp,0xc
c001bf1a:	89 c5                	mov    ebp,eax
c001bf1c:	53                   	push   ebx
c001bf1d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001bf24:	50                   	push   eax
c001bf25:	e8 c6 6d ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001bf2a:	58                   	pop    eax
c001bf2b:	5a                   	pop    edx
c001bf2c:	6a 01                	push   0x1
c001bf2e:	55                   	push   ebp
c001bf2f:	e8 20 6e ff ff       	call   c0012d54 <File::open(FileOpenMode)>
c001bf34:	83 c4 10             	add    esp,0x10
c001bf37:	85 c0                	test   eax,eax
c001bf39:	0f 85 f2 06 00 00    	jne    c001c631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf3f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bf47:	83 ec 0c             	sub    esp,0xc
c001bf4a:	6a 34                	push   0x34
c001bf4c:	e8 83 35 ff ff       	call   c000f4d4 <malloc>
c001bf51:	89 c7                	mov    edi,eax
c001bf53:	58                   	pop    eax
c001bf54:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bf57:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001bf5b:	53                   	push   ebx
c001bf5c:	57                   	push   edi
c001bf5d:	6a 00                	push   0x0
c001bf5f:	6a 34                	push   0x34
c001bf61:	55                   	push   ebp
c001bf62:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001bf65:	83 c4 20             	add    esp,0x20
c001bf68:	85 c0                	test   eax,eax
c001bf6a:	0f 85 c1 06 00 00    	jne    c001c631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf70:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001bf76:	0f 85 b5 06 00 00    	jne    c001c631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf7c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001bf7f:	85 c0                	test   eax,eax
c001bf81:	0f 84 aa 06 00 00    	je     c001c631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf87:	31 d2                	xor    edx,edx
c001bf89:	56                   	push   esi
c001bf8a:	52                   	push   edx
c001bf8b:	50                   	push   eax
c001bf8c:	55                   	push   ebp
c001bf8d:	e8 80 6e ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001bf92:	83 c4 10             	add    esp,0x10
c001bf95:	85 c0                	test   eax,eax
c001bf97:	0f 85 94 06 00 00    	jne    c001c631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bf9d:	83 ec 0c             	sub    esp,0xc
c001bfa0:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001bfa3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bfa7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001bfab:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bfaf:	0f af c2             	imul   eax,edx
c001bfb2:	50                   	push   eax
c001bfb3:	e8 1c 35 ff ff       	call   c000f4d4 <malloc>
c001bfb8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001bfbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bfbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bfc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bfc6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001bfca:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001bfce:	0f af c2             	imul   eax,edx
c001bfd1:	99                   	cdq    
c001bfd2:	52                   	push   edx
c001bfd3:	50                   	push   eax
c001bfd4:	55                   	push   ebp
c001bfd5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001bfd8:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001bfdb:	83 c4 20             	add    esp,0x20
c001bfde:	85 c0                	test   eax,eax
c001bfe0:	0f 84 4b 06 00 00    	je     c001c631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bfe6:	31 d2                	xor    edx,edx
c001bfe8:	51                   	push   ecx
c001bfe9:	52                   	push   edx
c001bfea:	50                   	push   eax
c001bfeb:	55                   	push   ebp
c001bfec:	e8 21 6e ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001bff1:	83 c4 10             	add    esp,0x10
c001bff4:	85 c0                	test   eax,eax
c001bff6:	0f 85 35 06 00 00    	jne    c001c631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001bffc:	83 ec 0c             	sub    esp,0xc
c001bfff:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c003:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c007:	31 f6                	xor    esi,esi
c001c009:	0f af c2             	imul   eax,edx
c001c00c:	50                   	push   eax
c001c00d:	e8 c2 34 ff ff       	call   c000f4d4 <malloc>
c001c012:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c015:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c019:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c01c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c020:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001c024:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001c028:	0f af c2             	imul   eax,edx
c001c02b:	99                   	cdq    
c001c02c:	52                   	push   edx
c001c02d:	50                   	push   eax
c001c02e:	55                   	push   ebp
c001c02f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c032:	83 c4 20             	add    esp,0x20
c001c035:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001c039:	0f 86 8a 00 00 00    	jbe    c001c0c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001c03f:	0f b7 de             	movzx  ebx,si
c001c042:	c1 e3 05             	shl    ebx,0x5
c001c045:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c001c049:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001c04c:	75 75                	jne    c001c0c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001c04e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c051:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c055:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c05c:	52                   	push   edx
c001c05d:	31 d2                	xor    edx,edx
c001c05f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001c062:	52                   	push   edx
c001c063:	50                   	push   eax
c001c064:	55                   	push   ebp
c001c065:	e8 a8 6d ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001c06a:	83 c4 10             	add    esp,0x10
c001c06d:	85 c0                	test   eax,eax
c001c06f:	0f 85 bc 05 00 00    	jne    c001c631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c075:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001c07c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c07f:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001c083:	31 d2                	xor    edx,edx
c001c085:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001c089:	83 ec 0c             	sub    esp,0xc
c001c08c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c090:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c097:	50                   	push   eax
c001c098:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c09c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0a0:	52                   	push   edx
c001c0a1:	50                   	push   eax
c001c0a2:	55                   	push   ebp
c001c0a3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c0a6:	83 c4 1c             	add    esp,0x1c
c001c0a9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c0ac:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001c0af:	50                   	push   eax
c001c0b0:	6a 00                	push   0x0
c001c0b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b6:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001c0ba:	50                   	push   eax
c001c0bb:	e8 cb 45 fe ff       	call   c000068b <memset>
c001c0c0:	83 c4 10             	add    esp,0x10
c001c0c3:	46                   	inc    esi
c001c0c4:	e9 6c ff ff ff       	jmp    c001c035 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001c0c9:	31 db                	xor    ebx,ebx
c001c0cb:	50                   	push   eax
c001c0cc:	68 00 01 00 00       	push   0x100
c001c0d1:	6a 00                	push   0x0
c001c0d3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001c0d7:	50                   	push   eax
c001c0d8:	e8 ae 45 fe ff       	call   c000068b <memset>
c001c0dd:	83 c4 0c             	add    esp,0xc
c001c0e0:	68 00 01 00 00       	push   0x100
c001c0e5:	6a 00                	push   0x0
c001c0e7:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001c0ee:	50                   	push   eax
c001c0ef:	e8 97 45 fe ff       	call   c000068b <memset>
c001c0f4:	83 c4 10             	add    esp,0x10
c001c0f7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c0ff:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c107:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c10f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c117:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c11f:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001c123:	0f 86 30 01 00 00    	jbe    c001c259 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001c129:	0f b7 f3             	movzx  esi,bx
c001c12c:	6b f6 28             	imul   esi,esi,0x28
c001c12f:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c001c133:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c136:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c13a:	50                   	push   eax
c001c13b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c13f:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001c143:	8b 06                	mov    eax,DWORD PTR [esi]
c001c145:	6b d2 28             	imul   edx,edx,0x28
c001c148:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001c14c:	31 d2                	xor    edx,edx
c001c14e:	52                   	push   edx
c001c14f:	50                   	push   eax
c001c150:	55                   	push   ebp
c001c151:	e8 bc 6c ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001c156:	83 c4 0c             	add    esp,0xc
c001c159:	6a 20                	push   0x20
c001c15b:	6a 00                	push   0x0
c001c15d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c164:	51                   	push   ecx
c001c165:	e8 21 45 fe ff       	call   c000068b <memset>
c001c16a:	58                   	pop    eax
c001c16b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c16e:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c172:	52                   	push   edx
c001c173:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001c17a:	51                   	push   ecx
c001c17b:	6a 00                	push   0x0
c001c17d:	6a 1f                	push   0x1f
c001c17f:	55                   	push   ebp
c001c180:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c183:	83 c4 1c             	add    esp,0x1c
c001c186:	6a 09                	push   0x9
c001c188:	68 8f a6 02 c0       	push   0xc002a68f
c001c18d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001c194:	51                   	push   ecx
c001c195:	e8 58 44 fe ff       	call   c00005f2 <memcmp>
c001c19a:	83 c4 10             	add    esp,0x10
c001c19d:	85 c0                	test   eax,eax
c001c19f:	75 21                	jne    c001c1c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001c1a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1a5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c1a9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1ad:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c1b1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1b4:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c1bb:	89 c8                	mov    eax,ecx
c001c1bd:	40                   	inc    eax
c001c1be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1c2:	50                   	push   eax
c001c1c3:	6a 09                	push   0x9
c001c1c5:	68 99 a6 02 c0       	push   0xc002a699
c001c1ca:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c1d1:	50                   	push   eax
c001c1d2:	e8 1b 44 fe ff       	call   c00005f2 <memcmp>
c001c1d7:	83 c4 10             	add    esp,0x10
c001c1da:	85 c0                	test   eax,eax
c001c1dc:	75 21                	jne    c001c1ff <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001c1de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c1e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001c1e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c1ea:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001c1ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c1f1:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c001c1f8:	89 c8                	mov    eax,ecx
c001c1fa:	40                   	inc    eax
c001c1fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c1ff:	50                   	push   eax
c001c200:	50                   	push   eax
c001c201:	68 65 a6 02 c0       	push   0xc002a665
c001c206:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c20d:	50                   	push   eax
c001c20e:	e8 68 45 fe ff       	call   c000077b <strcmp>
c001c213:	83 c4 10             	add    esp,0x10
c001c216:	85 c0                	test   eax,eax
c001c218:	75 0f                	jne    c001c229 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001c21a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c21d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c221:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c225:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c229:	50                   	push   eax
c001c22a:	50                   	push   eax
c001c22b:	68 6d a6 02 c0       	push   0xc002a66d
c001c230:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001c237:	50                   	push   eax
c001c238:	e8 3e 45 fe ff       	call   c000077b <strcmp>
c001c23d:	83 c4 10             	add    esp,0x10
c001c240:	85 c0                	test   eax,eax
c001c242:	75 0f                	jne    c001c253 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001c244:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c247:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c24b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c24f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c253:	43                   	inc    ebx
c001c254:	e9 c6 fe ff ff       	jmp    c001c11f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001c259:	31 d2                	xor    edx,edx
c001c25b:	50                   	push   eax
c001c25c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c260:	52                   	push   edx
c001c261:	50                   	push   eax
c001c262:	55                   	push   ebp
c001c263:	e8 aa 6b ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001c268:	5a                   	pop    edx
c001c269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c26d:	e8 62 32 ff ff       	call   c000f4d4 <malloc>
c001c272:	31 d2                	xor    edx,edx
c001c274:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001c278:	59                   	pop    ecx
c001c279:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c27c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001c280:	53                   	push   ebx
c001c281:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c285:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c289:	52                   	push   edx
c001c28a:	50                   	push   eax
c001c28b:	55                   	push   ebp
c001c28c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c28f:	83 c4 14             	add    esp,0x14
c001c292:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c296:	e8 39 32 ff ff       	call   c000f4d4 <malloc>
c001c29b:	31 d2                	xor    edx,edx
c001c29d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2a1:	83 c4 0c             	add    esp,0xc
c001c2a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2a8:	52                   	push   edx
c001c2a9:	50                   	push   eax
c001c2aa:	55                   	push   ebp
c001c2ab:	e8 62 6b ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001c2b0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c2b3:	31 d2                	xor    edx,edx
c001c2b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c2b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c2bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c2c0:	52                   	push   edx
c001c2c1:	50                   	push   eax
c001c2c2:	55                   	push   ebp
c001c2c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c2c6:	83 c4 20             	add    esp,0x20
c001c2c9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001c2d1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c2d5:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c001c2d9:	0f 84 56 03 00 00    	je     c001c635 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x743>
c001c2df:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c001c2e6:	31 d2                	xor    edx,edx
c001c2e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c2ec:	c1 e8 03             	shr    eax,0x3
c001c2ef:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001c2f3:	50                   	push   eax
c001c2f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c2f8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001c2fc:	52                   	push   edx
c001c2fd:	50                   	push   eax
c001c2fe:	55                   	push   ebp
c001c2ff:	e8 0e 6b ff ff       	call   c0012e12 <File::seek(unsigned long long)>
c001c304:	58                   	pop    eax
c001c305:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c309:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001c310:	e8 bf 31 ff ff       	call   c000f4d4 <malloc>
c001c315:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001c318:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c31c:	31 d2                	xor    edx,edx
c001c31e:	58                   	pop    eax
c001c31f:	8d 44 24 58          	lea    eax,[esp+0x58]
c001c323:	50                   	push   eax
c001c324:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c328:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c32c:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001c333:	52                   	push   edx
c001c334:	50                   	push   eax
c001c335:	55                   	push   ebp
c001c336:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c339:	83 c4 20             	add    esp,0x20
c001c33c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c344:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001c348:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c001c34c:	0f 8d c7 02 00 00    	jge    c001c619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x727>
c001c352:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c356:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c35a:	31 db                	xor    ebx,ebx
c001c35c:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c001c35f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c363:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c367:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c001c36b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c36f:	c1 e8 08             	shr    eax,0x8
c001c372:	89 c6                	mov    esi,eax
c001c374:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001c378:	c1 e6 04             	shl    esi,0x4
c001c37b:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c001c37f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c382:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c386:	85 c0                	test   eax,eax
c001c388:	0f 85 17 01 00 00    	jne    c001c4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c38e:	83 ec 0c             	sub    esp,0xc
c001c391:	b3 01                	mov    bl,0x1
c001c393:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c397:	03 06                	add    eax,DWORD PTR [esi]
c001c399:	50                   	push   eax
c001c39a:	e8 48 f8 ff ff       	call   c001bbe7 <Thr::getAddressOfKernelSymbol(char const*)>
c001c39f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c3a3:	83 c4 10             	add    esp,0x10
c001c3a6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001c3ab:	0f 85 f4 00 00 00    	jne    c001c4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c3b1:	50                   	push   eax
c001c3b2:	50                   	push   eax
c001c3b3:	68 a3 a6 02 c0       	push   0xc002a6a3
c001c3b8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3bc:	03 06                	add    eax,DWORD PTR [esi]
c001c3be:	50                   	push   eax
c001c3bf:	e8 b7 43 fe ff       	call   c000077b <strcmp>
c001c3c4:	83 c4 10             	add    esp,0x10
c001c3c7:	85 c0                	test   eax,eax
c001c3c9:	75 0a                	jne    c001c3d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c001c3cb:	b8 ec 53 02 c0       	mov    eax,0xc00253ec
c001c3d0:	e9 ca 00 00 00       	jmp    c001c49f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3d5:	50                   	push   eax
c001c3d6:	50                   	push   eax
c001c3d7:	68 ad a6 02 c0       	push   0xc002a6ad
c001c3dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c3e0:	03 06                	add    eax,DWORD PTR [esi]
c001c3e2:	50                   	push   eax
c001c3e3:	e8 93 43 fe ff       	call   c000077b <strcmp>
c001c3e8:	83 c4 10             	add    esp,0x10
c001c3eb:	85 c0                	test   eax,eax
c001c3ed:	75 0a                	jne    c001c3f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c001c3ef:	b8 20 51 02 c0       	mov    eax,0xc0025120
c001c3f4:	e9 a6 00 00 00       	jmp    c001c49f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c3f9:	53                   	push   ebx
c001c3fa:	53                   	push   ebx
c001c3fb:	68 b6 a6 02 c0       	push   0xc002a6b6
c001c400:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c404:	03 06                	add    eax,DWORD PTR [esi]
c001c406:	50                   	push   eax
c001c407:	e8 6f 43 fe ff       	call   c000077b <strcmp>
c001c40c:	83 c4 10             	add    esp,0x10
c001c40f:	85 c0                	test   eax,eax
c001c411:	75 0a                	jne    c001c41d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c001c413:	b8 ec 54 02 c0       	mov    eax,0xc00254ec
c001c418:	e9 82 00 00 00       	jmp    c001c49f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c001c41d:	51                   	push   ecx
c001c41e:	51                   	push   ecx
c001c41f:	68 c0 a6 02 c0       	push   0xc002a6c0
c001c424:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c428:	03 06                	add    eax,DWORD PTR [esi]
c001c42a:	50                   	push   eax
c001c42b:	e8 4b 43 fe ff       	call   c000077b <strcmp>
c001c430:	83 c4 10             	add    esp,0x10
c001c433:	85 c0                	test   eax,eax
c001c435:	74 63                	je     c001c49a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c001c437:	50                   	push   eax
c001c438:	50                   	push   eax
c001c439:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c43d:	03 06                	add    eax,DWORD PTR [esi]
c001c43f:	50                   	push   eax
c001c440:	68 c9 a6 02 c0       	push   0xc002a6c9
c001c445:	e8 77 63 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001c44a:	58                   	pop    eax
c001c44b:	5a                   	pop    edx
c001c44c:	68 e3 a6 02 c0       	push   0xc002a6e3
c001c451:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c001c458:	53                   	push   ebx
c001c459:	e8 cc 42 fe ff       	call   c000072a <strcpy>
c001c45e:	59                   	pop    ecx
c001c45f:	58                   	pop    eax
c001c460:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c464:	03 06                	add    eax,DWORD PTR [esi]
c001c466:	50                   	push   eax
c001c467:	53                   	push   ebx
c001c468:	e8 74 43 fe ff       	call   c00007e1 <strcat>
c001c46d:	58                   	pop    eax
c001c46e:	5a                   	pop    edx
c001c46f:	68 79 a7 02 c0       	push   0xc002a779
c001c474:	53                   	push   ebx
c001c475:	e8 67 43 fe ff       	call   c00007e1 <strcat>
c001c47a:	83 c4 10             	add    esp,0x10
c001c47d:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c482:	0f 84 4b 01 00 00    	je     c001c5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c488:	83 ec 0c             	sub    esp,0xc
c001c48b:	53                   	push   ebx
c001c48c:	e8 4a d4 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001c491:	83 c4 10             	add    esp,0x10
c001c494:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c001c498:	eb 0b                	jmp    c001c4a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c001c49a:	b8 6c 52 02 c0       	mov    eax,0xc002526c
c001c49f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c4a3:	b3 01                	mov    bl,0x1
c001c4a5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c001c4aa:	0f 85 80 00 00 00    	jne    c001c530 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c001c4b0:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001c4b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c4bb:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001c4bf:	01 ce                	add    esi,ecx
c001c4c1:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c4c9:	8b 06                	mov    eax,DWORD PTR [esi]
c001c4cb:	0f 94 c2             	sete   dl
c001c4ce:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c4d6:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001c4db:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001c4df:	84 db                	test   bl,bl
c001c4e1:	74 31                	je     c001c514 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c001c4e3:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c4e7:	01 c3                	add    ebx,eax
c001c4e9:	84 d2                	test   dl,dl
c001c4eb:	75 0a                	jne    c001c4f7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c001c4ed:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c4f1:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c4f5:	76 32                	jbe    c001c529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c4f7:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c4fc:	0f 84 d1 00 00 00    	je     c001c5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c502:	83 ec 0c             	sub    esp,0xc
c001c505:	68 fa a6 02 c0       	push   0xc002a6fa
c001c50a:	e8 cc d3 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001c50f:	83 c4 10             	add    esp,0x10
c001c512:	eb 15                	jmp    c001c529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c514:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c001c517:	84 d2                	test   dl,dl
c001c519:	75 0e                	jne    c001c529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c51b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c51f:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c523:	77 04                	ja     c001c529 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c001c525:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c001c529:	89 1e                	mov    DWORD PTR [esi],ebx
c001c52b:	e9 e0 00 00 00       	jmp    c001c610 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c530:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c001c535:	75 6e                	jne    c001c5a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b3>
c001c537:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001c53e:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c001c542:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c001c546:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001c54e:	74 17                	je     c001c567 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c550:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001c558:	74 0d                	je     c001c567 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x675>
c001c55a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c55e:	83 e8 04             	sub    eax,0x4
c001c561:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c001c565:	76 17                	jbe    c001c57e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x68c>
c001c567:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c56c:	74 65                	je     c001c5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c56e:	83 ec 0c             	sub    esp,0xc
c001c571:	68 16 a7 02 c0       	push   0xc002a716
c001c576:	e8 60 d3 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001c57b:	83 c4 10             	add    esp,0x10
c001c57e:	8b 16                	mov    edx,DWORD PTR [esi]
c001c580:	84 db                	test   bl,bl
c001c582:	74 13                	je     c001c597 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a5>
c001c584:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c588:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c001c58f:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c593:	01 d0                	add    eax,edx
c001c595:	eb 06                	jmp    c001c59d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c001c597:	89 d0                	mov    eax,edx
c001c599:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001c59d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001c5a1:	89 06                	mov    DWORD PTR [esi],eax
c001c5a3:	eb 6b                	jmp    c001c610 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c5a5:	50                   	push   eax
c001c5a6:	50                   	push   eax
c001c5a7:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001c5ac:	50                   	push   eax
c001c5ad:	68 32 a7 02 c0       	push   0xc002a732
c001c5b2:	e8 0a 62 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001c5b7:	83 c4 10             	add    esp,0x10
c001c5ba:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001c5bf:	74 12                	je     c001c5d3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6e1>
c001c5c1:	83 ec 0c             	sub    esp,0xc
c001c5c4:	68 3d a7 02 c0       	push   0xc002a73d
c001c5c9:	e8 0d d3 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001c5ce:	83 c4 10             	add    esp,0x10
c001c5d1:	eb 3d                	jmp    c001c610 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71e>
c001c5d3:	83 ec 0c             	sub    esp,0xc
c001c5d6:	55                   	push   ebp
c001c5d7:	e8 d6 67 ff ff       	call   c0012db2 <File::close()>
c001c5dc:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c5df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c5e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c5e5:	59                   	pop    ecx
c001c5e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c5ea:	e8 f5 2e ff ff       	call   c000f4e4 <free>
c001c5ef:	5b                   	pop    ebx
c001c5f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5f4:	e8 eb 2e ff ff       	call   c000f4e4 <free>
c001c5f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c5fc:	e8 e3 2e ff ff       	call   c000f4e4 <free>
c001c601:	5e                   	pop    esi
c001c602:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c606:	e8 d9 2e ff ff       	call   c000f4e4 <free>
c001c60b:	83 c4 10             	add    esp,0x10
c001c60e:	eb 21                	jmp    c001c631 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73f>
c001c610:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c001c614:	e9 2b fd ff ff       	jmp    c001c344 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001c619:	83 ec 0c             	sub    esp,0xc
c001c61c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c620:	e8 bf 2e ff ff       	call   c000f4e4 <free>
c001c625:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c001c629:	83 c4 10             	add    esp,0x10
c001c62c:	e9 a0 fc ff ff       	jmp    c001c2d1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001c631:	31 c0                	xor    eax,eax
c001c633:	eb 33                	jmp    c001c668 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x776>
c001c635:	83 ec 0c             	sub    esp,0xc
c001c638:	55                   	push   ebp
c001c639:	e8 74 67 ff ff       	call   c0012db2 <File::close()>
c001c63e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c641:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c644:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c647:	58                   	pop    eax
c001c648:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c64c:	e8 93 2e ff ff       	call   c000f4e4 <free>
c001c651:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c654:	e8 8b 2e ff ff       	call   c000f4e4 <free>
c001c659:	5a                   	pop    edx
c001c65a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c65e:	e8 81 2e ff ff       	call   c000f4e4 <free>
c001c663:	83 c4 10             	add    esp,0x10
c001c666:	b0 01                	mov    al,0x1
c001c668:	81 c4 5c 03 00 00    	add    esp,0x35c
c001c66e:	5b                   	pop    ebx
c001c66f:	5e                   	pop    esi
c001c670:	5f                   	pop    edi
c001c671:	5d                   	pop    ebp
c001c672:	c3                   	ret    

c001c673 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001c673:	56                   	push   esi
c001c674:	31 d2                	xor    edx,edx
c001c676:	53                   	push   ebx
c001c677:	8b 1d e0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6e0
c001c67d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c681:	39 d3                	cmp    ebx,edx
c001c683:	7e 1b                	jle    c001c6a0 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001c685:	8b 04 95 00 d9 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2700]
c001c68c:	39 c8                	cmp    eax,ecx
c001c68e:	77 0d                	ja     c001c69d <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001c690:	8b 34 95 00 d7 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd2900]
c001c697:	01 c6                	add    esi,eax
c001c699:	39 ce                	cmp    esi,ecx
c001c69b:	77 05                	ja     c001c6a2 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001c69d:	42                   	inc    edx
c001c69e:	eb e1                	jmp    c001c681 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001c6a0:	31 c0                	xor    eax,eax
c001c6a2:	5b                   	pop    ebx
c001c6a3:	5e                   	pop    esi
c001c6a4:	c3                   	ret    

c001c6a5 <Thr::getDriverNameFromAddress(unsigned long)>:
c001c6a5:	53                   	push   ebx
c001c6a6:	31 c0                	xor    eax,eax
c001c6a8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c6ac:	8b 1d e0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6e0
c001c6b2:	39 c3                	cmp    ebx,eax
c001c6b4:	7e 22                	jle    c001c6d8 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001c6b6:	8b 14 85 00 d9 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2700]
c001c6bd:	39 ca                	cmp    edx,ecx
c001c6bf:	77 14                	ja     c001c6d5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c6c1:	03 14 85 00 d7 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd2900]
c001c6c8:	39 ca                	cmp    edx,ecx
c001c6ca:	76 09                	jbe    c001c6d5 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001c6cc:	8b 04 85 00 db 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2500]
c001c6d3:	eb 05                	jmp    c001c6da <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001c6d5:	40                   	inc    eax
c001c6d6:	eb da                	jmp    c001c6b2 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001c6d8:	31 c0                	xor    eax,eax
c001c6da:	5b                   	pop    ebx
c001c6db:	c3                   	ret    

c001c6dc <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001c6dc:	53                   	push   ebx
c001c6dd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001c6e1:	53                   	push   ebx
c001c6e2:	e8 8c ff ff ff       	call   c001c673 <Thr::getDriverBaseFromAddress(unsigned long)>
c001c6e7:	5a                   	pop    edx
c001c6e8:	31 d2                	xor    edx,edx
c001c6ea:	85 c0                	test   eax,eax
c001c6ec:	74 04                	je     c001c6f2 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001c6ee:	89 da                	mov    edx,ebx
c001c6f0:	29 c2                	sub    edx,eax
c001c6f2:	89 d0                	mov    eax,edx
c001c6f4:	5b                   	pop    ebx
c001c6f5:	c3                   	ret    

c001c6f6 <Thr::loadDLL(char const*, bool)>:
c001c6f6:	55                   	push   ebp
c001c6f7:	57                   	push   edi
c001c6f8:	56                   	push   esi
c001c6f9:	53                   	push   ebx
c001c6fa:	81 ec 34 01 00 00    	sub    esp,0x134
c001c700:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001c707:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001c70e:	56                   	push   esi
c001c70f:	68 55 a7 02 c0       	push   0xc002a755
c001c714:	e8 a8 60 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001c719:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001c720:	e8 af 2d ff ff       	call   c000f4d4 <malloc>
c001c725:	83 c4 0c             	add    esp,0xc
c001c728:	89 c3                	mov    ebx,eax
c001c72a:	ff 35 d4 de 02 c0    	push   DWORD PTR ds:0xc002ded4
c001c730:	56                   	push   esi
c001c731:	50                   	push   eax
c001c732:	e8 b9 65 ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001c737:	83 c4 10             	add    esp,0x10
c001c73a:	85 db                	test   ebx,ebx
c001c73c:	75 3c                	jne    c001c77a <Thr::loadDLL(char const*, bool)+0x84>
c001c73e:	89 e8                	mov    eax,ebp
c001c740:	84 c0                	test   al,al
c001c742:	0f 84 b0 01 00 00    	je     c001c8f8 <Thr::loadDLL(char const*, bool)+0x202>
c001c748:	50                   	push   eax
c001c749:	50                   	push   eax
c001c74a:	68 66 a7 02 c0       	push   0xc002a766
c001c74f:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001c753:	57                   	push   edi
c001c754:	e8 d1 3f fe ff       	call   c000072a <strcpy>
c001c759:	58                   	pop    eax
c001c75a:	5a                   	pop    edx
c001c75b:	56                   	push   esi
c001c75c:	57                   	push   edi
c001c75d:	e8 7f 40 fe ff       	call   c00007e1 <strcat>
c001c762:	59                   	pop    ecx
c001c763:	58                   	pop    eax
c001c764:	68 79 a7 02 c0       	push   0xc002a779
c001c769:	57                   	push   edi
c001c76a:	e8 72 40 fe ff       	call   c00007e1 <strcat>
c001c76f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c772:	e8 64 d1 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001c777:	83 c4 10             	add    esp,0x10
c001c77a:	50                   	push   eax
c001c77b:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001c77f:	50                   	push   eax
c001c780:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c784:	50                   	push   eax
c001c785:	53                   	push   ebx
c001c786:	e8 75 68 ff ff       	call   c0013000 <File::stat(unsigned long long*, bool*)>
c001c78b:	83 c4 10             	add    esp,0x10
c001c78e:	85 db                	test   ebx,ebx
c001c790:	74 0c                	je     c001c79e <Thr::loadDLL(char const*, bool)+0xa8>
c001c792:	83 ec 0c             	sub    esp,0xc
c001c795:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c797:	53                   	push   ebx
c001c798:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c79b:	83 c4 10             	add    esp,0x10
c001c79e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001c7a3:	75 0a                	jne    c001c7af <Thr::loadDLL(char const*, bool)+0xb9>
c001c7a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c7a9:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001c7ad:	75 3c                	jne    c001c7eb <Thr::loadDLL(char const*, bool)+0xf5>
c001c7af:	89 e8                	mov    eax,ebp
c001c7b1:	84 c0                	test   al,al
c001c7b3:	0f 84 3d 01 00 00    	je     c001c8f6 <Thr::loadDLL(char const*, bool)+0x200>
c001c7b9:	50                   	push   eax
c001c7ba:	50                   	push   eax
c001c7bb:	68 66 a7 02 c0       	push   0xc002a766
c001c7c0:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001c7c4:	53                   	push   ebx
c001c7c5:	e8 60 3f fe ff       	call   c000072a <strcpy>
c001c7ca:	58                   	pop    eax
c001c7cb:	5a                   	pop    edx
c001c7cc:	56                   	push   esi
c001c7cd:	53                   	push   ebx
c001c7ce:	e8 0e 40 fe ff       	call   c00007e1 <strcat>
c001c7d3:	59                   	pop    ecx
c001c7d4:	5f                   	pop    edi
c001c7d5:	68 79 a7 02 c0       	push   0xc002a779
c001c7da:	53                   	push   ebx
c001c7db:	e8 01 40 fe ff       	call   c00007e1 <strcat>
c001c7e0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7e3:	e8 f3 d0 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001c7e8:	83 c4 10             	add    esp,0x10
c001c7eb:	e8 71 51 ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c001c7f0:	51                   	push   ecx
c001c7f1:	6a 03                	push   0x3
c001c7f3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001c7f7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c7fb:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001c801:	83 d3 00             	adc    ebx,0x0
c001c804:	89 ca                	mov    edx,ecx
c001c806:	89 d1                	mov    ecx,edx
c001c808:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001c80c:	51                   	push   ecx
c001c80d:	50                   	push   eax
c001c80e:	e8 89 57 ff ff       	call   c0011f9c <VAS::allocatePages(int, int)>
c001c813:	89 34 24             	mov    DWORD PTR [esp],esi
c001c816:	89 c3                	mov    ebx,eax
c001c818:	e8 8b 3e fe ff       	call   c00006a8 <strlen>
c001c81d:	8b 3d e0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6e0
c001c823:	40                   	inc    eax
c001c824:	89 04 24             	mov    DWORD PTR [esp],eax
c001c827:	e8 a8 2c ff ff       	call   c000f4d4 <malloc>
c001c82c:	89 04 bd 00 db 02 c0 	mov    DWORD PTR [edi*4-0x3ffd2500],eax
c001c833:	5f                   	pop    edi
c001c834:	58                   	pop    eax
c001c835:	a1 e0 d6 02 c0       	mov    eax,ds:0xc002d6e0
c001c83a:	56                   	push   esi
c001c83b:	ff 34 85 00 db 02 c0 	push   DWORD PTR [eax*4-0x3ffd2500]
c001c842:	e8 e3 3e fe ff       	call   c000072a <strcpy>
c001c847:	a1 e0 d6 02 c0       	mov    eax,ds:0xc002d6e0
c001c84c:	8d 50 01             	lea    edx,[eax+0x1]
c001c84f:	89 1c 85 00 d9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2700],ebx
c001c856:	89 15 e0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6e0,edx
c001c85c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001c860:	83 c4 0c             	add    esp,0xc
c001c863:	89 14 85 00 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2900],edx
c001c86a:	6a 01                	push   0x1
c001c86c:	53                   	push   ebx
c001c86d:	56                   	push   esi
c001c86e:	e8 7f f6 ff ff       	call   c001bef2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001c873:	83 c4 10             	add    esp,0x10
c001c876:	89 c7                	mov    edi,eax
c001c878:	fe c8                	dec    al
c001c87a:	74 16                	je     c001c892 <Thr::loadDLL(char const*, bool)+0x19c>
c001c87c:	89 e8                	mov    eax,ebp
c001c87e:	84 c0                	test   al,al
c001c880:	74 10                	je     c001c892 <Thr::loadDLL(char const*, bool)+0x19c>
c001c882:	83 ec 0c             	sub    esp,0xc
c001c885:	68 7b a7 02 c0       	push   0xc002a77b
c001c88a:	e8 4c d0 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001c88f:	83 c4 10             	add    esp,0x10
c001c892:	31 f6                	xor    esi,esi
c001c894:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c898:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c89c:	05 ff 0f 00 00       	add    eax,0xfff
c001c8a1:	83 d2 00             	adc    edx,0x0
c001c8a4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001c8a8:	c1 ea 0c             	shr    edx,0xc
c001c8ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8af:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c8b3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001c8b7:	ba 00 00 00 00       	mov    edx,0x0
c001c8bc:	89 d0                	mov    eax,edx
c001c8be:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001c8c2:	73 2c                	jae    c001c8f0 <Thr::loadDLL(char const*, bool)+0x1fa>
c001c8c4:	e8 98 50 ff ff       	call   c0011961 <Virt::getAKernelVAS()>
c001c8c9:	89 f5                	mov    ebp,esi
c001c8cb:	c1 e5 0c             	shl    ebp,0xc
c001c8ce:	52                   	push   edx
c001c8cf:	01 dd                	add    ebp,ebx
c001c8d1:	52                   	push   edx
c001c8d2:	55                   	push   ebp
c001c8d3:	50                   	push   eax
c001c8d4:	e8 3d 52 ff ff       	call   c0011b16 <VAS::getPageTableEntry(unsigned long)>
c001c8d9:	83 c4 10             	add    esp,0x10
c001c8dc:	f6 00 60             	test   BYTE PTR [eax],0x60
c001c8df:	75 0c                	jne    c001c8ed <Thr::loadDLL(char const*, bool)+0x1f7>
c001c8e1:	83 ec 0c             	sub    esp,0xc
c001c8e4:	55                   	push   ebp
c001c8e5:	e8 74 31 ff ff       	call   c000fa5e <Phys::freePage(unsigned long)>
c001c8ea:	83 c4 10             	add    esp,0x10
c001c8ed:	46                   	inc    esi
c001c8ee:	eb a4                	jmp    c001c894 <Thr::loadDLL(char const*, bool)+0x19e>
c001c8f0:	89 f8                	mov    eax,edi
c001c8f2:	84 c0                	test   al,al
c001c8f4:	75 02                	jne    c001c8f8 <Thr::loadDLL(char const*, bool)+0x202>
c001c8f6:	31 db                	xor    ebx,ebx
c001c8f8:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c8fe:	89 d8                	mov    eax,ebx
c001c900:	5b                   	pop    ebx
c001c901:	5e                   	pop    esi
c001c902:	5f                   	pop    edi
c001c903:	5d                   	pop    ebp
c001c904:	c3                   	ret    

c001c905 <Thr::executeDLL(unsigned long, void*)>:
c001c905:	56                   	push   esi
c001c906:	53                   	push   ebx
c001c907:	51                   	push   ecx
c001c908:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c90c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c910:	85 db                	test   ebx,ebx
c001c912:	75 10                	jne    c001c924 <Thr::executeDLL(unsigned long, void*)+0x1f>
c001c914:	83 ec 0c             	sub    esp,0xc
c001c917:	68 9a a7 02 c0       	push   0xc002a79a
c001c91c:	e8 ba cf ff ff       	call   c00198db <Krnl::panic(char const*)>
c001c921:	83 c4 10             	add    esp,0x10
c001c924:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001c928:	89 d8                	mov    eax,ebx
c001c92a:	5a                   	pop    edx
c001c92b:	5b                   	pop    ebx
c001c92c:	5e                   	pop    esi
c001c92d:	ff e0                	jmp    eax
c001c92f:	90                   	nop

c001c930 <changeTSS>:
c001c930:	83 ec 14             	sub    esp,0x14
c001c933:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c938:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001c93b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001c940:	c1 e2 15             	shl    edx,0x15
c001c943:	29 d0                	sub    eax,edx
c001c945:	50                   	push   eax
c001c946:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001c94b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c951:	05 7c 11 00 00       	add    eax,0x117c
c001c956:	50                   	push   eax
c001c957:	e8 b4 47 ff ff       	call   c0011110 <TSS::setESP(unsigned long)>
c001c95c:	83 c4 1c             	add    esp,0x1c
c001c95f:	c3                   	ret    

c001c960 <Process::addArgs(char**)>:
c001c960:	57                   	push   edi
c001c961:	56                   	push   esi
c001c962:	53                   	push   ebx
c001c963:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c967:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c96b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001c975:	85 ff                	test   edi,edi
c001c977:	74 3d                	je     c001c9b6 <Process::addArgs(char**)+0x56>
c001c979:	8b 07                	mov    eax,DWORD PTR [edi]
c001c97b:	85 c0                	test   eax,eax
c001c97d:	74 37                	je     c001c9b6 <Process::addArgs(char**)+0x56>
c001c97f:	31 db                	xor    ebx,ebx
c001c981:	83 ec 0c             	sub    esp,0xc
c001c984:	50                   	push   eax
c001c985:	e8 1e 3d fe ff       	call   c00006a8 <strlen>
c001c98a:	40                   	inc    eax
c001c98b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c98e:	e8 41 2b ff ff       	call   c000f4d4 <malloc>
c001c993:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001c99a:	5a                   	pop    edx
c001c99b:	59                   	pop    ecx
c001c99c:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001c99f:	43                   	inc    ebx
c001c9a0:	50                   	push   eax
c001c9a1:	e8 84 3d fe ff       	call   c000072a <strcpy>
c001c9a6:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001c9ac:	83 c4 10             	add    esp,0x10
c001c9af:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c9b2:	85 c0                	test   eax,eax
c001c9b4:	75 cb                	jne    c001c981 <Process::addArgs(char**)+0x21>
c001c9b6:	5b                   	pop    ebx
c001c9b7:	5e                   	pop    esi
c001c9b8:	5f                   	pop    edi
c001c9b9:	c3                   	ret    

c001c9ba <Process::Process(char const*, Process*, char**)>:
c001c9ba:	56                   	push   esi
c001c9bb:	53                   	push   ebx
c001c9bc:	83 ec 14             	sub    esp,0x14
c001c9bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9c3:	05 0c 02 00 00       	add    eax,0x20c
c001c9c8:	bb 07 00 00 00       	mov    ebx,0x7
c001c9cd:	89 c6                	mov    esi,eax
c001c9cf:	85 db                	test   ebx,ebx
c001c9d1:	78 12                	js     c001c9e5 <Process::Process(char const*, Process*, char**)+0x2b>
c001c9d3:	83 ec 0c             	sub    esp,0xc
c001c9d6:	56                   	push   esi
c001c9d7:	e8 c6 ac 00 00       	call   c00276a2 <ThreadControlBlock::ThreadControlBlock()>
c001c9dc:	83 c4 10             	add    esp,0x10
c001c9df:	83 c6 63             	add    esi,0x63
c001c9e2:	4b                   	dec    ebx
c001c9e3:	eb ea                	jmp    c001c9cf <Process::Process(char const*, Process*, char**)+0x15>
c001c9e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c9e9:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001c9f0:	83 ec 0c             	sub    esp,0xc
c001c9f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c9f7:	e8 30 cd ff ff       	call   c001972c <Krnl::newProcessEnv(Process*)>
c001c9fc:	83 c4 10             	add    esp,0x10
c001c9ff:	89 c2                	mov    edx,eax
c001ca01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca05:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001ca0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca0f:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001ca18:	a1 10 bf 02 c0       	mov    eax,ds:0xc002bf10
c001ca1d:	8d 50 01             	lea    edx,[eax+0x1]
c001ca20:	89 15 10 bf 02 c0    	mov    DWORD PTR ds:0xc002bf10,edx
c001ca26:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ca2a:	89 02                	mov    DWORD PTR [edx],eax
c001ca2c:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001ca34:	83 ec 0c             	sub    esp,0xc
c001ca37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ca3b:	e8 94 2a ff ff       	call   c000f4d4 <malloc>
c001ca40:	83 c4 10             	add    esp,0x10
c001ca43:	89 c3                	mov    ebx,eax
c001ca45:	83 ec 08             	sub    esp,0x8
c001ca48:	6a 00                	push   0x0
c001ca4a:	53                   	push   ebx
c001ca4b:	e8 f4 58 ff ff       	call   c0012344 <VAS::VAS(bool)>
c001ca50:	83 c4 10             	add    esp,0x10
c001ca53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca57:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001ca5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca61:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ca6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001ca73:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001ca79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca7d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca83:	85 c0                	test   eax,eax
c001ca85:	74 42                	je     c001cac9 <Process::Process(char const*, Process*, char**)+0x10f>
c001ca87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca8b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ca91:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ca97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ca9b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001caa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caa5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001caab:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cab5:	05 0c 01 00 00       	add    eax,0x10c
c001caba:	83 ec 08             	sub    esp,0x8
c001cabd:	52                   	push   edx
c001cabe:	50                   	push   eax
c001cabf:	e8 66 3c fe ff       	call   c000072a <strcpy>
c001cac4:	83 c4 10             	add    esp,0x10
c001cac7:	eb 63                	jmp    c001cb2c <Process::Process(char const*, Process*, char**)+0x172>
c001cac9:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001cad1:	83 ec 0c             	sub    esp,0xc
c001cad4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cad8:	e8 f7 29 ff ff       	call   c000f4d4 <malloc>
c001cadd:	83 c4 10             	add    esp,0x10
c001cae0:	89 c3                	mov    ebx,eax
c001cae2:	83 ec 08             	sub    esp,0x8
c001cae5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cae9:	53                   	push   ebx
c001caea:	e8 1f 43 ff ff       	call   c0010e0e <VgaText::VgaText(char const*)>
c001caef:	83 c4 10             	add    esp,0x10
c001caf2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001caf6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001cafc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb00:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001cb06:	83 ec 0c             	sub    esp,0xc
c001cb09:	50                   	push   eax
c001cb0a:	e8 4a 36 ff ff       	call   c0010159 <addToTerminalCycle(VgaText*)>
c001cb0f:	83 c4 10             	add    esp,0x10
c001cb12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb16:	05 0c 01 00 00       	add    eax,0x10c
c001cb1b:	83 ec 08             	sub    esp,0x8
c001cb1e:	68 c4 a7 02 c0       	push   0xc002a7c4
c001cb23:	50                   	push   eax
c001cb24:	e8 01 3c fe ff       	call   c000072a <strcpy>
c001cb29:	83 c4 10             	add    esp,0x10
c001cb2c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb30:	83 c0 0c             	add    eax,0xc
c001cb33:	83 ec 08             	sub    esp,0x8
c001cb36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb3a:	50                   	push   eax
c001cb3b:	e8 ea 3b fe ff       	call   c000072a <strcpy>
c001cb40:	83 c4 10             	add    esp,0x10
c001cb43:	83 ec 08             	sub    esp,0x8
c001cb46:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001cb4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb4e:	e8 0d fe ff ff       	call   c001c960 <Process::addArgs(char**)>
c001cb53:	83 c4 10             	add    esp,0x10
c001cb56:	83 ec 08             	sub    esp,0x8
c001cb59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb5d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb61:	e8 58 ee ff ff       	call   c001b9be <Thr::loadProgramIntoMemory(Process*, char const*)>
c001cb66:	83 c4 10             	add    esp,0x10
c001cb69:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001cb6d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001cb71:	83 f0 01             	xor    eax,0x1
c001cb74:	88 c2                	mov    dl,al
c001cb76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb7a:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001cb80:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001cb85:	83 ec 08             	sub    esp,0x8
c001cb88:	50                   	push   eax
c001cb89:	68 c0 a8 02 c0       	push   0xc002a8c0
c001cb8e:	e8 2e 5c ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001cb93:	83 c4 10             	add    esp,0x10
c001cb96:	90                   	nop
c001cb97:	83 c4 14             	add    esp,0x14
c001cb9a:	5b                   	pop    ebx
c001cb9b:	5e                   	pop    esi
c001cb9c:	c3                   	ret    
c001cb9d:	90                   	nop

c001cb9e <Process::Process(bool, char const*, Process*, char**)>:
c001cb9e:	56                   	push   esi
c001cb9f:	53                   	push   ebx
c001cba0:	83 ec 24             	sub    esp,0x24
c001cba3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cba7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001cbab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbaf:	05 0c 02 00 00       	add    eax,0x20c
c001cbb4:	bb 07 00 00 00       	mov    ebx,0x7
c001cbb9:	89 c6                	mov    esi,eax
c001cbbb:	85 db                	test   ebx,ebx
c001cbbd:	78 12                	js     c001cbd1 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001cbbf:	83 ec 0c             	sub    esp,0xc
c001cbc2:	56                   	push   esi
c001cbc3:	e8 da aa 00 00       	call   c00276a2 <ThreadControlBlock::ThreadControlBlock()>
c001cbc8:	83 c4 10             	add    esp,0x10
c001cbcb:	83 c6 63             	add    esi,0x63
c001cbce:	4b                   	dec    ebx
c001cbcf:	eb ea                	jmp    c001cbbb <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001cbd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbd5:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001cbdc:	83 ec 0c             	sub    esp,0xc
c001cbdf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbe3:	e8 44 cb ff ff       	call   c001972c <Krnl::newProcessEnv(Process*)>
c001cbe8:	83 c4 10             	add    esp,0x10
c001cbeb:	89 c2                	mov    edx,eax
c001cbed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbf1:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001cbf7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cbfb:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001cc04:	a1 10 bf 02 c0       	mov    eax,ds:0xc002bf10
c001cc09:	8d 50 01             	lea    edx,[eax+0x1]
c001cc0c:	89 15 10 bf 02 c0    	mov    DWORD PTR ds:0xc002bf10,edx
c001cc12:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc16:	89 02                	mov    DWORD PTR [edx],eax
c001cc18:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001cc20:	83 ec 0c             	sub    esp,0xc
c001cc23:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cc27:	e8 a8 28 ff ff       	call   c000f4d4 <malloc>
c001cc2c:	83 c4 10             	add    esp,0x10
c001cc2f:	89 c3                	mov    ebx,eax
c001cc31:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001cc36:	83 ec 08             	sub    esp,0x8
c001cc39:	50                   	push   eax
c001cc3a:	53                   	push   ebx
c001cc3b:	e8 04 57 ff ff       	call   c0012344 <VAS::VAS(bool)>
c001cc40:	83 c4 10             	add    esp,0x10
c001cc43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc47:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001cc4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc51:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001cc5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cc63:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001cc69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc6d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc73:	85 c0                	test   eax,eax
c001cc75:	74 42                	je     c001ccb9 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001cc77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc7b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc81:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001cc87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc8b:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001cc91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cc95:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001cc9b:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001cca1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cca5:	05 0c 01 00 00       	add    eax,0x10c
c001ccaa:	83 ec 08             	sub    esp,0x8
c001ccad:	52                   	push   edx
c001ccae:	50                   	push   eax
c001ccaf:	e8 76 3a fe ff       	call   c000072a <strcpy>
c001ccb4:	83 c4 10             	add    esp,0x10
c001ccb7:	eb 63                	jmp    c001cd1c <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001ccb9:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001ccc1:	83 ec 0c             	sub    esp,0xc
c001ccc4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ccc8:	e8 07 28 ff ff       	call   c000f4d4 <malloc>
c001cccd:	83 c4 10             	add    esp,0x10
c001ccd0:	89 c3                	mov    ebx,eax
c001ccd2:	83 ec 08             	sub    esp,0x8
c001ccd5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001ccd9:	53                   	push   ebx
c001ccda:	e8 2f 41 ff ff       	call   c0010e0e <VgaText::VgaText(char const*)>
c001ccdf:	83 c4 10             	add    esp,0x10
c001cce2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cce6:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001ccec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ccf0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ccf6:	83 ec 0c             	sub    esp,0xc
c001ccf9:	50                   	push   eax
c001ccfa:	e8 5a 34 ff ff       	call   c0010159 <addToTerminalCycle(VgaText*)>
c001ccff:	83 c4 10             	add    esp,0x10
c001cd02:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd06:	05 0c 01 00 00       	add    eax,0x10c
c001cd0b:	83 ec 08             	sub    esp,0x8
c001cd0e:	68 c4 a7 02 c0       	push   0xc002a7c4
c001cd13:	50                   	push   eax
c001cd14:	e8 11 3a fe ff       	call   c000072a <strcpy>
c001cd19:	83 c4 10             	add    esp,0x10
c001cd1c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001cd20:	83 c0 0c             	add    eax,0xc
c001cd23:	83 ec 08             	sub    esp,0x8
c001cd26:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001cd2a:	50                   	push   eax
c001cd2b:	e8 fa 39 fe ff       	call   c000072a <strcpy>
c001cd30:	83 c4 10             	add    esp,0x10
c001cd33:	83 ec 08             	sub    esp,0x8
c001cd36:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001cd3a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd3e:	e8 1d fc ff ff       	call   c001c960 <Process::addArgs(char**)>
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	90                   	nop
c001cd47:	83 c4 24             	add    esp,0x24
c001cd4a:	5b                   	pop    ebx
c001cd4b:	5e                   	pop    esi
c001cd4c:	c3                   	ret    

c001cd4d <disableIRQs()>:
c001cd4d:	fa                   	cli    
c001cd4e:	ff 05 ac de 02 c0    	inc    DWORD PTR ds:0xc002deac
c001cd54:	c3                   	ret    

c001cd55 <getIRQNestingLevel()>:
c001cd55:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c001cd5a:	c3                   	ret    

c001cd5b <enableIRQs()>:
c001cd5b:	a1 ac de 02 c0       	mov    eax,ds:0xc002deac
c001cd60:	48                   	dec    eax
c001cd61:	a3 ac de 02 c0       	mov    ds:0xc002deac,eax
c001cd66:	75 01                	jne    c001cd69 <enableIRQs()+0xe>
c001cd68:	fb                   	sti    
c001cd69:	c3                   	ret    

c001cd6a <lockScheduler()>:
c001cd6a:	eb e1                	jmp    c001cd4d <disableIRQs()>

c001cd6c <unlockScheduler()>:
c001cd6c:	eb ed                	jmp    c001cd5b <enableIRQs()>

c001cd6e <userModeEntryPoint(void*)>:
c001cd6e:	83 ec 0c             	sub    esp,0xc
c001cd71:	e8 f6 ff ff ff       	call   c001cd6c <unlockScheduler()>
c001cd76:	fb                   	sti    
c001cd77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd7c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd7f:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001cd85:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd89:	83 c4 0c             	add    esp,0xc
c001cd8c:	e9 4e 35 fe ff       	jmp    c00002df <goToUsermode>

c001cd91 <lockStuff()>:
c001cd91:	e8 b7 ff ff ff       	call   c001cd4d <disableIRQs()>
c001cd96:	ff 05 a8 de 02 c0    	inc    DWORD PTR ds:0xc002dea8
c001cd9c:	c3                   	ret    

c001cd9d <taskStartupFunction>:
c001cd9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cda2:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001cda5:	c3                   	ret    

c001cda6 <updateTimeUsed()>:
c001cda6:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c001cdab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001cdb1:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001cdb8:	74 50                	je     c001ce0a <updateTimeUsed()+0x64>
c001cdba:	57                   	push   edi
c001cdbb:	56                   	push   esi
c001cdbc:	53                   	push   ebx
c001cdbd:	0f 31                	rdtsc  
c001cdbf:	89 c1                	mov    ecx,eax
c001cdc1:	a3 e8 de 02 c0       	mov    ds:0xc002dee8,eax
c001cdc6:	2b 0d d8 de 02 c0    	sub    ecx,DWORD PTR ds:0xc002ded8
c001cdcc:	89 d3                	mov    ebx,edx
c001cdce:	89 0d e0 de 02 c0    	mov    DWORD PTR ds:0xc002dee0,ecx
c001cdd4:	1b 1d dc de 02 c0    	sbb    ebx,DWORD PTR ds:0xc002dedc
c001cdda:	a3 d8 de 02 c0       	mov    ds:0xc002ded8,eax
c001cddf:	89 1d e4 de 02 c0    	mov    DWORD PTR ds:0xc002dee4,ebx
c001cde5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cdea:	89 15 ec de 02 c0    	mov    DWORD PTR ds:0xc002deec,edx
c001cdf0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001cdf3:	89 15 dc de 02 c0    	mov    DWORD PTR ds:0xc002dedc,edx
c001cdf9:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001cdfc:	01 f1                	add    ecx,esi
c001cdfe:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001ce01:	11 fb                	adc    ebx,edi
c001ce03:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001ce06:	5b                   	pop    ebx
c001ce07:	5e                   	pop    esi
c001ce08:	5f                   	pop    edi
c001ce09:	c3                   	ret    
c001ce0a:	c3                   	ret    

c001ce0b <switchToThread(ThreadControlBlock*)>:
c001ce0b:	53                   	push   ebx
c001ce0c:	83 ec 08             	sub    esp,0x8
c001ce0f:	a1 a8 de 02 c0       	mov    eax,ds:0xc002dea8
c001ce14:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ce18:	85 c0                	test   eax,eax
c001ce1a:	75 30                	jne    c001ce4c <switchToThread(ThreadControlBlock*)+0x41>
c001ce1c:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001ce1f:	3c ff                	cmp    al,0xff
c001ce21:	74 25                	je     c001ce48 <switchToThread(ThreadControlBlock*)+0x3d>
c001ce23:	0f b6 d0             	movzx  edx,al
c001ce26:	b8 84 03 00 00       	mov    eax,0x384
c001ce2b:	29 d0                	sub    eax,edx
c001ce2d:	c1 e0 10             	shl    eax,0x10
c001ce30:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001ce33:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001ce36:	e8 6b ff ff ff       	call   c001cda6 <updateTimeUsed()>
c001ce3b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ce3f:	83 c4 08             	add    esp,0x8
c001ce42:	5b                   	pop    ebx
c001ce43:	e9 cf 34 fe ff       	jmp    c0000317 <switchToThreadASM>
c001ce48:	31 c0                	xor    eax,eax
c001ce4a:	eb e7                	jmp    c001ce33 <switchToThread(ThreadControlBlock*)+0x28>
c001ce4c:	c7 05 a4 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002dea4,0x1
c001ce56:	83 c4 08             	add    esp,0x8
c001ce59:	5b                   	pop    ebx
c001ce5a:	c3                   	ret    
c001ce5b:	90                   	nop

c001ce5c <Semaphore::Semaphore(int)>:
c001ce5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ce64:	89 10                	mov    DWORD PTR [eax],edx
c001ce66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce6a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ce71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce75:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ce7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce80:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ce87:	90                   	nop
c001ce88:	c3                   	ret    
c001ce89:	90                   	nop

c001ce8a <Mutex::Mutex()>:
c001ce8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce8e:	6a 01                	push   0x1
c001ce90:	50                   	push   eax
c001ce91:	e8 c6 ff ff ff       	call   c001ce5c <Semaphore::Semaphore(int)>
c001ce96:	83 c4 08             	add    esp,0x8
c001ce99:	90                   	nop
c001ce9a:	c3                   	ret    
c001ce9b:	90                   	nop

c001ce9c <Process::createThread(void (*)(void*), void*, int)>:
c001ce9c:	55                   	push   ebp
c001ce9d:	31 c9                	xor    ecx,ecx
c001ce9f:	57                   	push   edi
c001cea0:	56                   	push   esi
c001cea1:	53                   	push   ebx
c001cea2:	83 ec 1c             	sub    esp,0x1c
c001cea5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cea9:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001ceb0:	89 f2                	mov    edx,esi
c001ceb2:	0f b7 c2             	movzx  eax,dx
c001ceb5:	83 e2 01             	and    edx,0x1
c001ceb8:	74 14                	je     c001cece <Process::createThread(void (*)(void*), void*, int)+0x32>
c001ceba:	d1 f8                	sar    eax,1
c001cebc:	41                   	inc    ecx
c001cebd:	89 c2                	mov    edx,eax
c001cebf:	83 f9 10             	cmp    ecx,0x10
c001cec2:	75 ee                	jne    c001ceb2 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001cec4:	83 c4 1c             	add    esp,0x1c
c001cec7:	31 c0                	xor    eax,eax
c001cec9:	5b                   	pop    ebx
c001ceca:	5e                   	pop    esi
c001cecb:	5f                   	pop    edi
c001cecc:	5d                   	pop    ebp
c001cecd:	c3                   	ret    
c001cece:	83 ec 08             	sub    esp,0x8
c001ced1:	b8 01 00 00 00       	mov    eax,0x1
c001ced6:	d3 e0                	shl    eax,cl
c001ced8:	09 c6                	or     esi,eax
c001ceda:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001cee0:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001cee7:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001ceea:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001ceed:	01 ce                	add    esi,ecx
c001ceef:	89 f0                	mov    eax,esi
c001cef1:	c1 e0 05             	shl    eax,0x5
c001cef4:	01 c6                	add    esi,eax
c001cef6:	8d 04 33             	lea    eax,[ebx+esi*1]
c001cef9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001ceff:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001cf05:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001cf09:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001cf0f:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001cf15:	89 ca                	mov    edx,ecx
c001cf17:	f7 da                	neg    edx
c001cf19:	c1 e2 15             	shl    edx,0x15
c001cf1c:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001cf22:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001cf28:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001cf2c:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001cf36:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001cf3c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001cf40:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001cf46:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001cf50:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001cf5a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001cf61:	50                   	push   eax
c001cf62:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf66:	68 c8 de 02 c0       	push   0xc002dec8
c001cf6b:	e8 c0 a5 00 00       	call   c0027530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001cf70:	83 c4 10             	add    esp,0x10
c001cf73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf77:	83 c4 1c             	add    esp,0x1c
c001cf7a:	5b                   	pop    ebx
c001cf7b:	5e                   	pop    esi
c001cf7c:	5f                   	pop    edi
c001cf7d:	5d                   	pop    ebp
c001cf7e:	c3                   	ret    
c001cf7f:	90                   	nop

c001cf80 <Process::createUserThread()>:
c001cf80:	83 ec 0c             	sub    esp,0xc
c001cf83:	68 80 00 00 00       	push   0x80
c001cf88:	6a 00                	push   0x0
c001cf8a:	68 6e cd 01 c0       	push   0xc001cd6e
c001cf8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf93:	e8 04 ff ff ff       	call   c001ce9c <Process::createThread(void (*)(void*), void*, int)>
c001cf98:	83 c4 1c             	add    esp,0x1c
c001cf9b:	c3                   	ret    

c001cf9c <setupMultitasking(void (*)())>:
c001cf9c:	56                   	push   esi
c001cf9d:	53                   	push   ebx
c001cf9e:	53                   	push   ebx
c001cf9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cfa3:	eb 10                	jmp    c001cfb5 <setupMultitasking(void (*)())+0x19>
c001cfa5:	83 ec 0c             	sub    esp,0xc
c001cfa8:	68 c8 de 02 c0       	push   0xc002dec8
c001cfad:	e8 d0 a4 00 00       	call   c0027482 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001cfb2:	83 c4 10             	add    esp,0x10
c001cfb5:	83 ec 0c             	sub    esp,0xc
c001cfb8:	68 c8 de 02 c0       	push   0xc002dec8
c001cfbd:	e8 a4 a4 00 00       	call   c0027466 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001cfc2:	83 c4 10             	add    esp,0x10
c001cfc5:	84 c0                	test   al,al
c001cfc7:	74 dc                	je     c001cfa5 <setupMultitasking(void (*)())+0x9>
c001cfc9:	83 ec 0c             	sub    esp,0xc
c001cfcc:	68 3f 07 00 00       	push   0x73f
c001cfd1:	e8 fe 24 ff ff       	call   c000f4d4 <malloc>
c001cfd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001cfdd:	89 c3                	mov    ebx,eax
c001cfdf:	6a 00                	push   0x0
c001cfe1:	68 c8 a7 02 c0       	push   0xc002a7c8
c001cfe6:	6a 01                	push   0x1
c001cfe8:	50                   	push   eax
c001cfe9:	e8 b0 fb ff ff       	call   c001cb9e <Process::Process(bool, char const*, Process*, char**)>
c001cfee:	83 c4 18             	add    esp,0x18
c001cff1:	89 1d d4 de 02 c0    	mov    DWORD PTR ds:0xc002ded4,ebx
c001cff7:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001cffd:	68 e8 a8 02 c0       	push   0xc002a8e8
c001d002:	e8 ba 57 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d007:	58                   	pop    eax
c001d008:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001d00e:	e8 70 39 ff ff       	call   c0010983 <setActiveTerminal(VgaText*)>
c001d013:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001d01b:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001d021:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001d024:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001d02e:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001d034:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001d03a:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001d044:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001d04e:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001d058:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001d05e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001d064:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001d06e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001d074:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001d07e:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001d084:	5a                   	pop    edx
c001d085:	59                   	pop    ecx
c001d086:	68 c4 a7 02 c0       	push   0xc002a7c4
c001d08b:	50                   	push   eax
c001d08c:	e8 99 36 fe ff       	call   c000072a <strcpy>
c001d091:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001d098:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d09c:	83 c4 14             	add    esp,0x14
c001d09f:	5b                   	pop    ebx
c001d0a0:	5e                   	pop    esi
c001d0a1:	e9 63 32 fe ff       	jmp    c0000309 <switchToThreadASMFirstTime>

c001d0a6 <schedule()>:
c001d0a6:	a1 a8 de 02 c0       	mov    eax,ds:0xc002dea8
c001d0ab:	85 c0                	test   eax,eax
c001d0ad:	74 0b                	je     c001d0ba <schedule()+0x14>
c001d0af:	c7 05 a4 de 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002dea4,0x1
c001d0b9:	c3                   	ret    
c001d0ba:	53                   	push   ebx
c001d0bb:	83 ec 14             	sub    esp,0x14
c001d0be:	68 c8 de 02 c0       	push   0xc002dec8
c001d0c3:	e8 9e a3 00 00       	call   c0027466 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d0c8:	83 c4 10             	add    esp,0x10
c001d0cb:	84 c0                	test   al,al
c001d0cd:	75 38                	jne    c001d107 <schedule()+0x61>
c001d0cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d0d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d0d7:	4a                   	dec    edx
c001d0d8:	74 32                	je     c001d10c <schedule()+0x66>
c001d0da:	83 ec 0c             	sub    esp,0xc
c001d0dd:	68 c8 de 02 c0       	push   0xc002dec8
c001d0e2:	e8 77 a3 00 00       	call   c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d0e7:	c7 04 24 c8 de 02 c0 	mov    DWORD PTR [esp],0xc002dec8
c001d0ee:	89 c3                	mov    ebx,eax
c001d0f0:	e8 8d a3 00 00       	call   c0027482 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d0f5:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001d0fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d0ff:	e8 07 fd ff ff       	call   c001ce0b <switchToThread(ThreadControlBlock*)>
c001d104:	83 c4 10             	add    esp,0x10
c001d107:	83 c4 08             	add    esp,0x8
c001d10a:	5b                   	pop    ebx
c001d10b:	c3                   	ret    
c001d10c:	83 ec 08             	sub    esp,0x8
c001d10f:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001d116:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d11c:	68 c8 de 02 c0       	push   0xc002dec8
c001d121:	e8 0a a4 00 00       	call   c0027530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d126:	83 c4 10             	add    esp,0x10
c001d129:	eb af                	jmp    c001d0da <schedule()+0x34>

c001d12b <unlockStuff()>:
c001d12b:	a1 a8 de 02 c0       	mov    eax,ds:0xc002dea8
c001d130:	48                   	dec    eax
c001d131:	a3 a8 de 02 c0       	mov    ds:0xc002dea8,eax
c001d136:	75 09                	jne    c001d141 <unlockStuff()+0x16>
c001d138:	a1 a4 de 02 c0       	mov    eax,ds:0xc002dea4
c001d13d:	85 c0                	test   eax,eax
c001d13f:	75 05                	jne    c001d146 <unlockStuff()+0x1b>
c001d141:	e9 15 fc ff ff       	jmp    c001cd5b <enableIRQs()>
c001d146:	83 ec 0c             	sub    esp,0xc
c001d149:	c7 05 a4 de 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dea4,0x0
c001d153:	e8 4e ff ff ff       	call   c001d0a6 <schedule()>
c001d158:	83 c4 0c             	add    esp,0xc
c001d15b:	e9 fb fb ff ff       	jmp    c001cd5b <enableIRQs()>

c001d160 <Semaphore::tryAcquire()>:
c001d160:	83 ec 0c             	sub    esp,0xc
c001d163:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d167:	e8 25 fc ff ff       	call   c001cd91 <lockStuff()>
c001d16c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d16f:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d171:	7c 0b                	jl     c001d17e <Semaphore::tryAcquire()+0x1e>
c001d173:	e8 b3 ff ff ff       	call   c001d12b <unlockStuff()>
c001d178:	31 c0                	xor    eax,eax
c001d17a:	83 c4 0c             	add    esp,0xc
c001d17d:	c3                   	ret    
c001d17e:	42                   	inc    edx
c001d17f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d182:	e8 a4 ff ff ff       	call   c001d12b <unlockStuff()>
c001d187:	b0 01                	mov    al,0x1
c001d189:	83 c4 0c             	add    esp,0xc
c001d18c:	c3                   	ret    
c001d18d:	90                   	nop

c001d18e <Semaphore::assertLocked(char const*)>:
c001d18e:	83 ec 0c             	sub    esp,0xc
c001d191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d195:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d199:	e8 f3 fb ff ff       	call   c001cd91 <lockStuff()>
c001d19e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d1a0:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001d1a3:	7c 05                	jl     c001d1aa <Semaphore::assertLocked(char const*)+0x1c>
c001d1a5:	83 c4 0c             	add    esp,0xc
c001d1a8:	eb 81                	jmp    c001d12b <unlockStuff()>
c001d1aa:	83 ec 0c             	sub    esp,0xc
c001d1ad:	52                   	push   edx
c001d1ae:	e8 28 c7 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001d1b3:	83 c4 10             	add    esp,0x10
c001d1b6:	83 c4 0c             	add    esp,0xc
c001d1b9:	e9 6d ff ff ff       	jmp    c001d12b <unlockStuff()>

c001d1be <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001d1be:	83 ec 0c             	sub    esp,0xc
c001d1c1:	e8 8f fb ff ff       	call   c001cd55 <getIRQNestingLevel()>
c001d1c6:	83 ec 08             	sub    esp,0x8
c001d1c9:	50                   	push   eax
c001d1ca:	68 1c a9 02 c0       	push   0xc002a91c
c001d1cf:	e8 ed 55 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d1d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d1dd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d1e0:	e8 c1 fe ff ff       	call   c001d0a6 <schedule()>
c001d1e5:	e8 82 fb ff ff       	call   c001cd6c <unlockScheduler()>
c001d1ea:	e8 66 fb ff ff       	call   c001cd55 <getIRQNestingLevel()>
c001d1ef:	5a                   	pop    edx
c001d1f0:	59                   	pop    ecx
c001d1f1:	50                   	push   eax
c001d1f2:	68 50 a9 02 c0       	push   0xc002a950
c001d1f7:	e8 c5 55 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d1fc:	83 c4 1c             	add    esp,0x1c
c001d1ff:	c3                   	ret    

c001d200 <blockTask(TaskState)>:
c001d200:	83 ec 0c             	sub    esp,0xc
c001d203:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d207:	e8 5e fb ff ff       	call   c001cd6a <lockScheduler()>
c001d20c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d211:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d214:	e8 8d fe ff ff       	call   c001d0a6 <schedule()>
c001d219:	83 c4 0c             	add    esp,0xc
c001d21c:	e9 4b fb ff ff       	jmp    c001cd6c <unlockScheduler()>

c001d221 <waitTask(int, int*, int)>:
c001d221:	83 ec 18             	sub    esp,0x18
c001d224:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d229:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d22d:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001d230:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d234:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d239:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001d23c:	6a 07                	push   0x7
c001d23e:	e8 bd ff ff ff       	call   c001d200 <blockTask(TaskState)>
c001d243:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d248:	83 c4 10             	add    esp,0x10
c001d24b:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001d24e:	85 d2                	test   edx,edx
c001d250:	74 0a                	je     c001d25c <waitTask(int, int*, int)+0x3b>
c001d252:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001d255:	89 02                	mov    DWORD PTR [edx],eax
c001d257:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d25c:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001d25f:	83 c4 0c             	add    esp,0xc
c001d262:	c3                   	ret    

c001d263 <nanoSleepUntil(unsigned long long)>:
c001d263:	83 ec 0c             	sub    esp,0xc
c001d266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d26a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d26e:	3b 05 10 d0 02 c0    	cmp    eax,DWORD PTR ds:0xc002d010
c001d274:	89 d1                	mov    ecx,edx
c001d276:	1b 0d 14 d0 02 c0    	sbb    ecx,DWORD PTR ds:0xc002d014
c001d27c:	73 04                	jae    c001d282 <nanoSleepUntil(unsigned long long)+0x1f>
c001d27e:	83 c4 0c             	add    esp,0xc
c001d281:	c3                   	ret    
c001d282:	e8 0a fb ff ff       	call   c001cd91 <lockStuff()>
c001d287:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d28d:	83 ec 08             	sub    esp,0x8
c001d290:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001d293:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001d296:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001d29c:	68 bc de 02 c0       	push   0xc002debc
c001d2a1:	e8 8a a2 00 00       	call   c0027530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d2a6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001d2ad:	e8 4e ff ff ff       	call   c001d200 <blockTask(TaskState)>
c001d2b2:	83 c4 1c             	add    esp,0x1c
c001d2b5:	e9 71 fe ff ff       	jmp    c001d12b <unlockStuff()>

c001d2ba <nanoSleep(unsigned long long)>:
c001d2ba:	a1 10 d0 02 c0       	mov    eax,ds:0xc002d010
c001d2bf:	8b 15 14 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d014
c001d2c5:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001d2c9:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001d2cd:	eb 94                	jmp    c001d263 <nanoSleepUntil(unsigned long long)>

c001d2cf <sleep(unsigned long long)>:
c001d2cf:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001d2d7:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001d2dc:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001d2e0:	01 ca                	add    edx,ecx
c001d2e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d2e6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d2ea:	eb ce                	jmp    c001d2ba <nanoSleep(unsigned long long)>

c001d2ec <Semaphore::acquire()>:
c001d2ec:	83 ec 0c             	sub    esp,0xc
c001d2ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2f3:	e8 99 fa ff ff       	call   c001cd91 <lockStuff()>
c001d2f8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001d2fb:	3b 10                	cmp    edx,DWORD PTR [eax]
c001d2fd:	7d 0c                	jge    c001d30b <Semaphore::acquire()+0x1f>
c001d2ff:	42                   	inc    edx
c001d300:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001d303:	83 c4 0c             	add    esp,0xc
c001d306:	e9 20 fe ff ff       	jmp    c001d12b <unlockStuff()>
c001d30b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d311:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001d318:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d31b:	85 d2                	test   edx,edx
c001d31d:	74 2a                	je     c001d349 <Semaphore::acquire()+0x5d>
c001d31f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001d322:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001d328:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001d32b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d331:	83 ec 0c             	sub    esp,0xc
c001d334:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001d337:	6a 05                	push   0x5
c001d339:	e8 c2 fe ff ff       	call   c001d200 <blockTask(TaskState)>
c001d33e:	83 c4 10             	add    esp,0x10
c001d341:	83 c4 0c             	add    esp,0xc
c001d344:	e9 e2 fd ff ff       	jmp    c001d12b <unlockStuff()>
c001d349:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001d34f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001d352:	eb d7                	jmp    c001d32b <Semaphore::acquire()+0x3f>

c001d354 <taskReturned>:
c001d354:	83 ec 18             	sub    esp,0x18
c001d357:	68 84 a9 02 c0       	push   0xc002a984
c001d35c:	e8 7a c5 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001d361:	83 c4 10             	add    esp,0x10
c001d364:	83 ec 0c             	sub    esp,0xc
c001d367:	6a 02                	push   0x2
c001d369:	e8 92 fe ff ff       	call   c001d200 <blockTask(TaskState)>
c001d36e:	e8 f7 f9 ff ff       	call   c001cd6a <lockScheduler()>
c001d373:	e8 2e fd ff ff       	call   c001d0a6 <schedule()>
c001d378:	e8 ef f9 ff ff       	call   c001cd6c <unlockScheduler()>
c001d37d:	83 c4 10             	add    esp,0x10
c001d380:	eb e2                	jmp    c001d364 <taskReturned+0x10>

c001d382 <unblockTask(ThreadControlBlock*)>:
c001d382:	53                   	push   ebx
c001d383:	83 ec 08             	sub    esp,0x8
c001d386:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d38a:	e8 db f9 ff ff       	call   c001cd6a <lockScheduler()>
c001d38f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d392:	85 c0                	test   eax,eax
c001d394:	74 5c                	je     c001d3f2 <unblockTask(ThreadControlBlock*)+0x70>
c001d396:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001d399:	48                   	dec    eax
c001d39a:	74 31                	je     c001d3cd <unblockTask(ThreadControlBlock*)+0x4b>
c001d39c:	83 ec 0c             	sub    esp,0xc
c001d39f:	68 c8 de 02 c0       	push   0xc002dec8
c001d3a4:	e8 b5 a0 00 00       	call   c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d3a9:	83 c4 10             	add    esp,0x10
c001d3ac:	85 c0                	test   eax,eax
c001d3ae:	75 17                	jne    c001d3c7 <unblockTask(ThreadControlBlock*)+0x45>
c001d3b0:	eb 65                	jmp    c001d417 <unblockTask(ThreadControlBlock*)+0x95>
c001d3b2:	83 ec 08             	sub    esp,0x8
c001d3b5:	50                   	push   eax
c001d3b6:	68 c8 de 02 c0       	push   0xc002dec8
c001d3bb:	e8 78 a3 00 00       	call   c0027738 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001d3c0:	83 c4 10             	add    esp,0x10
c001d3c3:	85 c0                	test   eax,eax
c001d3c5:	74 50                	je     c001d417 <unblockTask(ThreadControlBlock*)+0x95>
c001d3c7:	39 c3                	cmp    ebx,eax
c001d3c9:	75 e7                	jne    c001d3b2 <unblockTask(ThreadControlBlock*)+0x30>
c001d3cb:	eb 1c                	jmp    c001d3e9 <unblockTask(ThreadControlBlock*)+0x67>
c001d3cd:	83 ec 0c             	sub    esp,0xc
c001d3d0:	68 74 aa 02 c0       	push   0xc002aa74
c001d3d5:	e8 e7 53 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d3da:	c7 04 24 00 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa00
c001d3e1:	e8 db 53 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d3e6:	83 c4 10             	add    esp,0x10
c001d3e9:	83 c4 08             	add    esp,0x8
c001d3ec:	5b                   	pop    ebx
c001d3ed:	e9 7a f9 ff ff       	jmp    c001cd6c <unlockScheduler()>
c001d3f2:	83 ec 0c             	sub    esp,0xc
c001d3f5:	68 b8 a9 02 c0       	push   0xc002a9b8
c001d3fa:	e8 c2 53 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d3ff:	c7 04 24 00 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa00
c001d406:	e8 b6 53 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d40b:	83 c4 10             	add    esp,0x10
c001d40e:	83 c4 08             	add    esp,0x8
c001d411:	5b                   	pop    ebx
c001d412:	e9 55 f9 ff ff       	jmp    c001cd6c <unlockScheduler()>
c001d417:	83 ec 08             	sub    esp,0x8
c001d41a:	53                   	push   ebx
c001d41b:	68 c8 de 02 c0       	push   0xc002dec8
c001d420:	e8 0b a1 00 00       	call   c0027530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d425:	83 c4 10             	add    esp,0x10
c001d428:	83 c4 08             	add    esp,0x8
c001d42b:	5b                   	pop    ebx
c001d42c:	e9 3b f9 ff ff       	jmp    c001cd6c <unlockScheduler()>

c001d431 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001d431:	55                   	push   ebp
c001d432:	57                   	push   edi
c001d433:	56                   	push   esi
c001d434:	53                   	push   ebx
c001d435:	83 ec 1c             	sub    esp,0x1c
c001d438:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d43c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d43f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001d445:	85 ff                	test   edi,edi
c001d447:	7e 20                	jle    c001d469 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001d449:	31 f6                	xor    esi,esi
c001d44b:	83 ec 0c             	sub    esp,0xc
c001d44e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001d455:	46                   	inc    esi
c001d456:	e8 89 20 ff ff       	call   c000f4e4 <free>
c001d45b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d45e:	83 c4 10             	add    esp,0x10
c001d461:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001d467:	7f e2                	jg     c001d44b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001d469:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d473:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001d478:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001d47b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001d47e:	d3 c0                	rol    eax,cl
c001d480:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001d487:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d48a:	89 f7                	mov    edi,esi
c001d48c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001d494:	0f 85 74 01 00 00    	jne    c001d60e <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001d49a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001d4a0:	85 ed                	test   ebp,ebp
c001d4a2:	74 1b                	je     c001d4bf <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001d4a4:	83 ec 0c             	sub    esp,0xc
c001d4a7:	55                   	push   ebp
c001d4a8:	e8 9b c1 ff ff       	call   c0019648 <EnvVarContainer::~EnvVarContainer()>
c001d4ad:	59                   	pop    ecx
c001d4ae:	5e                   	pop    esi
c001d4af:	6a 0c                	push   0xc
c001d4b1:	55                   	push   ebp
c001d4b2:	e8 2a 52 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c001d4b7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d4ba:	83 c4 10             	add    esp,0x10
c001d4bd:	89 f7                	mov    edi,esi
c001d4bf:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d4c5:	85 c0                	test   eax,eax
c001d4c7:	0f 84 aa 00 00 00    	je     c001d577 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d4cd:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001d4d0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001d4d4:	31 c9                	xor    ecx,ecx
c001d4d6:	eb 10                	jmp    c001d4e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001d4d8:	41                   	inc    ecx
c001d4d9:	83 f9 10             	cmp    ecx,0x10
c001d4dc:	0f 84 95 00 00 00    	je     c001d577 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001d4e2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d4e8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001d4ef:	d3 fa                	sar    edx,cl
c001d4f1:	83 e2 01             	and    edx,0x1
c001d4f4:	74 e2                	je     c001d4d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d4f6:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001d4f9:	01 ca                	add    edx,ecx
c001d4fb:	89 d5                	mov    ebp,edx
c001d4fd:	c1 e5 05             	shl    ebp,0x5
c001d500:	01 ea                	add    edx,ebp
c001d502:	01 d0                	add    eax,edx
c001d504:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001d50a:	83 fd 07             	cmp    ebp,0x7
c001d50d:	75 c9                	jne    c001d4d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d50f:	05 40 02 00 00       	add    eax,0x240
c001d514:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001d517:	83 fd ff             	cmp    ebp,0xffffffff
c001d51a:	0f 8c 08 01 00 00    	jl     c001d628 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001d520:	0f 84 b9 01 00 00    	je     c001d6df <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001d526:	85 ed                	test   ebp,ebp
c001d528:	0f 84 a0 01 00 00    	je     c001d6ce <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001d52e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001d530:	75 a6                	jne    c001d4d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d532:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001d538:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d53c:	01 d0                	add    eax,edx
c001d53e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001d542:	83 ec 0c             	sub    esp,0xc
c001d545:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001d54b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d54e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d554:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001d55b:	50                   	push   eax
c001d55c:	e8 21 fe ff ff       	call   c001d382 <unblockTask(ThreadControlBlock*)>
c001d561:	83 c4 10             	add    esp,0x10
c001d564:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d567:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d56b:	89 f7                	mov    edi,esi
c001d56d:	41                   	inc    ecx
c001d56e:	83 f9 10             	cmp    ecx,0x10
c001d571:	0f 85 6b ff ff ff    	jne    c001d4e2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001d577:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001d57d:	85 c0                	test   eax,eax
c001d57f:	74 5d                	je     c001d5de <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d581:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001d587:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001d58d:	74 4f                	je     c001d5de <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001d58f:	83 ec 0c             	sub    esp,0xc
c001d592:	68 c8 de 02 c0       	push   0xc002dec8
c001d597:	e8 c2 9e 00 00       	call   c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d59c:	c7 04 24 c8 de 02 c0 	mov    DWORD PTR [esp],0xc002dec8
c001d5a3:	89 c7                	mov    edi,eax
c001d5a5:	e8 bc 9e 00 00       	call   c0027466 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d5aa:	83 c4 10             	add    esp,0x10
c001d5ad:	84 c0                	test   al,al
c001d5af:	0f 84 e4 00 00 00    	je     c001d699 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001d5b5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5b8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d5be:	85 d2                	test   edx,edx
c001d5c0:	74 0f                	je     c001d5d1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001d5c2:	83 ec 0c             	sub    esp,0xc
c001d5c5:	8b 02                	mov    eax,DWORD PTR [edx]
c001d5c7:	52                   	push   edx
c001d5c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d5cb:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d5ce:	83 c4 10             	add    esp,0x10
c001d5d1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001d5db:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001d5de:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001d5e4:	85 db                	test   ebx,ebx
c001d5e6:	74 16                	je     c001d5fe <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001d5e8:	83 ec 0c             	sub    esp,0xc
c001d5eb:	53                   	push   ebx
c001d5ec:	e8 3f 47 ff ff       	call   c0011d30 <VAS::~VAS()>
c001d5f1:	58                   	pop    eax
c001d5f2:	5a                   	pop    edx
c001d5f3:	6a 10                	push   0x10
c001d5f5:	53                   	push   ebx
c001d5f6:	e8 e6 50 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c001d5fb:	83 c4 10             	add    esp,0x10
c001d5fe:	83 ec 0c             	sub    esp,0xc
c001d601:	68 cf a7 02 c0       	push   0xc002a7cf
c001d606:	e8 b6 51 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d60b:	83 c4 10             	add    esp,0x10
c001d60e:	83 ec 08             	sub    esp,0x8
c001d611:	68 3f 07 00 00       	push   0x73f
c001d616:	68 dd a7 02 c0       	push   0xc002a7dd
c001d61b:	e8 a1 51 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d620:	83 c4 2c             	add    esp,0x2c
c001d623:	5b                   	pop    ebx
c001d624:	5e                   	pop    esi
c001d625:	5f                   	pop    edi
c001d626:	5d                   	pop    ebp
c001d627:	c3                   	ret    
c001d628:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d62c:	83 ec 0c             	sub    esp,0xc
c001d62f:	68 b8 aa 02 c0       	push   0xc002aab8
c001d634:	e8 a2 c2 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001d639:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001d63c:	83 c4 10             	add    esp,0x10
c001d63f:	89 f7                	mov    edi,esi
c001d641:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d645:	e9 8e fe ff ff       	jmp    c001d4d8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001d64a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d650:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001d656:	75 1c                	jne    c001d674 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d658:	83 ec 0c             	sub    esp,0xc
c001d65b:	68 20 ab 02 c0       	push   0xc002ab20
c001d660:	e8 5c 51 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d665:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d66c:	e8 8f fb ff ff       	call   c001d200 <blockTask(TaskState)>
c001d671:	83 c4 10             	add    esp,0x10
c001d674:	83 ec 08             	sub    esp,0x8
c001d677:	56                   	push   esi
c001d678:	68 c8 de 02 c0       	push   0xc002dec8
c001d67d:	e8 ae 9e 00 00       	call   c0027530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d682:	c7 04 24 c8 de 02 c0 	mov    DWORD PTR [esp],0xc002dec8
c001d689:	e8 d0 9d 00 00       	call   c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d68e:	83 c4 10             	add    esp,0x10
c001d691:	39 f8                	cmp    eax,edi
c001d693:	0f 84 1c ff ff ff    	je     c001d5b5 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001d699:	83 ec 0c             	sub    esp,0xc
c001d69c:	68 c8 de 02 c0       	push   0xc002dec8
c001d6a1:	e8 b8 9d 00 00       	call   c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d6a6:	c7 04 24 c8 de 02 c0 	mov    DWORD PTR [esp],0xc002dec8
c001d6ad:	89 c6                	mov    esi,eax
c001d6af:	e8 ce 9d 00 00       	call   c0027482 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d6b4:	83 c4 10             	add    esp,0x10
c001d6b7:	39 f3                	cmp    ebx,esi
c001d6b9:	74 b9                	je     c001d674 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d6bb:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001d6be:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d6c1:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001d6c7:	75 ab                	jne    c001d674 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001d6c9:	e9 7c ff ff ff       	jmp    c001d64a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001d6ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d6d2:	83 ec 0c             	sub    esp,0xc
c001d6d5:	68 ec aa 02 c0       	push   0xc002aaec
c001d6da:	e9 55 ff ff ff       	jmp    c001d634 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001d6df:	8b 36                	mov    esi,DWORD PTR [esi]
c001d6e1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d6e5:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001d6e8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001d6eb:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001d6f1:	01 d7                	add    edi,edx
c001d6f3:	89 f8                	mov    eax,edi
c001d6f5:	e9 44 fe ff ff       	jmp    c001d53e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001d6fa <cleanerTaskFunction(void*)>:
c001d6fa:	53                   	push   ebx
c001d6fb:	83 ec 08             	sub    esp,0x8
c001d6fe:	e8 69 f6 ff ff       	call   c001cd6c <unlockScheduler()>
c001d703:	e8 62 f6 ff ff       	call   c001cd6a <lockScheduler()>
c001d708:	80 3d 8c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de8c,0x0
c001d70f:	0f 85 8e 00 00 00    	jne    c001d7a3 <cleanerTaskFunction(void*)+0xa9>
c001d715:	83 ec 0c             	sub    esp,0xc
c001d718:	6a 02                	push   0x2
c001d71a:	e8 9f fa ff ff       	call   c001d1be <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001d71f:	83 c4 10             	add    esp,0x10
c001d722:	c6 05 8c de 02 c0 00 	mov    BYTE PTR ds:0xc002de8c,0x0
c001d729:	e8 63 f6 ff ff       	call   c001cd91 <lockStuff()>
c001d72e:	e8 37 f6 ff ff       	call   c001cd6a <lockScheduler()>
c001d733:	83 ec 0c             	sub    esp,0xc
c001d736:	68 b0 de 02 c0       	push   0xc002deb0
c001d73b:	e8 26 9d 00 00       	call   c0027466 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001d740:	83 c4 10             	add    esp,0x10
c001d743:	84 c0                	test   al,al
c001d745:	75 40                	jne    c001d787 <cleanerTaskFunction(void*)+0x8d>
c001d747:	83 ec 0c             	sub    esp,0xc
c001d74a:	68 b0 de 02 c0       	push   0xc002deb0
c001d74f:	e8 0a 9d 00 00       	call   c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001d754:	c7 04 24 b0 de 02 c0 	mov    DWORD PTR [esp],0xc002deb0
c001d75b:	89 c3                	mov    ebx,eax
c001d75d:	e8 20 9d 00 00       	call   c0027482 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001d762:	c7 04 24 f3 a7 02 c0 	mov    DWORD PTR [esp],0xc002a7f3
c001d769:	e8 53 50 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d76e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d771:	e8 bb fc ff ff       	call   c001d431 <cleanupTerminatedTask(ThreadControlBlock*)>
c001d776:	c7 04 24 0c a8 02 c0 	mov    DWORD PTR [esp],0xc002a80c
c001d77d:	e8 3f 50 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d782:	83 c4 10             	add    esp,0x10
c001d785:	eb ac                	jmp    c001d733 <cleanerTaskFunction(void*)+0x39>
c001d787:	e8 e0 f5 ff ff       	call   c001cd6c <unlockScheduler()>
c001d78c:	e8 9a f9 ff ff       	call   c001d12b <unlockStuff()>
c001d791:	e8 d4 f5 ff ff       	call   c001cd6a <lockScheduler()>
c001d796:	80 3d 8c de 02 c0 00 	cmp    BYTE PTR ds:0xc002de8c,0x0
c001d79d:	0f 84 72 ff ff ff    	je     c001d715 <cleanerTaskFunction(void*)+0x1b>
c001d7a3:	e8 c4 f5 ff ff       	call   c001cd6c <unlockScheduler()>
c001d7a8:	e9 75 ff ff ff       	jmp    c001d722 <cleanerTaskFunction(void*)+0x28>

c001d7ad <terminateTask(int)>:
c001d7ad:	83 ec 14             	sub    esp,0x14
c001d7b0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001d7b8:	83 c0 0c             	add    eax,0xc
c001d7bb:	50                   	push   eax
c001d7bc:	68 48 ab 02 c0       	push   0xc002ab48
c001d7c1:	e8 fb 4f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d7c6:	e8 c6 f5 ff ff       	call   c001cd91 <lockStuff()>
c001d7cb:	e8 9a f5 ff ff       	call   c001cd6a <lockScheduler()>
c001d7d0:	c7 04 24 1f a8 02 c0 	mov    DWORD PTR [esp],0xc002a81f
c001d7d7:	e8 e5 4f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d7dc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d7e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7e5:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001d7e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d7ed:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001d7f0:	5a                   	pop    edx
c001d7f1:	59                   	pop    ecx
c001d7f2:	50                   	push   eax
c001d7f3:	68 b0 de 02 c0       	push   0xc002deb0
c001d7f8:	e8 33 9d 00 00       	call   c0027530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001d7fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d802:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001d809:	c7 04 24 39 a8 02 c0 	mov    DWORD PTR [esp],0xc002a839
c001d810:	e8 ac 4f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d815:	83 c4 10             	add    esp,0x10
c001d818:	a1 88 de 02 c0       	mov    eax,ds:0xc002de88
c001d81d:	85 c0                	test   eax,eax
c001d81f:	74 5a                	je     c001d87b <terminateTask(int)+0xce>
c001d821:	83 ec 0c             	sub    esp,0xc
c001d824:	68 53 a8 02 c0       	push   0xc002a853
c001d829:	e8 93 4f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d82e:	58                   	pop    eax
c001d82f:	c6 05 8c de 02 c0 01 	mov    BYTE PTR ds:0xc002de8c,0x1
c001d836:	ff 35 88 de 02 c0    	push   DWORD PTR ds:0xc002de88
c001d83c:	e8 41 fb ff ff       	call   c001d382 <unblockTask(ThreadControlBlock*)>
c001d841:	c7 04 24 6d a8 02 c0 	mov    DWORD PTR [esp],0xc002a86d
c001d848:	e8 74 4f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d84d:	83 c4 10             	add    esp,0x10
c001d850:	e8 17 f5 ff ff       	call   c001cd6c <unlockScheduler()>
c001d855:	e8 d1 f8 ff ff       	call   c001d12b <unlockStuff()>
c001d85a:	83 ec 0c             	sub    esp,0xc
c001d85d:	68 a5 a8 02 c0       	push   0xc002a8a5
c001d862:	e8 5a 4f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d867:	83 c4 10             	add    esp,0x10
c001d86a:	e8 fb f4 ff ff       	call   c001cd6a <lockScheduler()>
c001d86f:	e8 32 f8 ff ff       	call   c001d0a6 <schedule()>
c001d874:	e8 f3 f4 ff ff       	call   c001cd6c <unlockScheduler()>
c001d879:	eb ef                	jmp    c001d86a <terminateTask(int)+0xbd>
c001d87b:	83 ec 0c             	sub    esp,0xc
c001d87e:	68 87 a8 02 c0       	push   0xc002a887
c001d883:	e8 39 4f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d888:	83 c4 10             	add    esp,0x10
c001d88b:	eb c3                	jmp    c001d850 <terminateTask(int)+0xa3>

c001d88d <Thr::terminateFromIRQ(int)>:
c001d88d:	83 ec 18             	sub    esp,0x18
c001d890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d894:	e8 14 ff ff ff       	call   c001d7ad <terminateTask(int)>
c001d899:	90                   	nop

c001d89a <Semaphore::release()>:
c001d89a:	83 ec 0c             	sub    esp,0xc
c001d89d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d8a1:	e8 eb f4 ff ff       	call   c001cd91 <lockStuff()>
c001d8a6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d8a9:	85 d2                	test   edx,edx
c001d8ab:	74 1a                	je     c001d8c7 <Semaphore::release()+0x2d>
c001d8ad:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001d8b0:	83 ec 0c             	sub    esp,0xc
c001d8b3:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001d8b6:	52                   	push   edx
c001d8b7:	e8 c6 fa ff ff       	call   c001d382 <unblockTask(ThreadControlBlock*)>
c001d8bc:	83 c4 10             	add    esp,0x10
c001d8bf:	83 c4 0c             	add    esp,0xc
c001d8c2:	e9 64 f8 ff ff       	jmp    c001d12b <unlockStuff()>
c001d8c7:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001d8ca:	83 c4 0c             	add    esp,0xc
c001d8cd:	e9 59 f8 ff ff       	jmp    c001d12b <unlockStuff()>

c001d8d2 <__static_initialization_and_destruction_0(int, int)>:
c001d8d2:	83 ec 0c             	sub    esp,0xc
c001d8d5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001d8da:	0f 85 88 00 00 00    	jne    c001d968 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d8e0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001d8e8:	75 7e                	jne    c001d968 <__static_initialization_and_destruction_0(int, int)+0x96>
c001d8ea:	83 ec 0c             	sub    esp,0xc
c001d8ed:	68 c8 de 02 c0       	push   0xc002dec8
c001d8f2:	e8 e9 9d 00 00       	call   c00276e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d8f7:	83 c4 10             	add    esp,0x10
c001d8fa:	83 ec 04             	sub    esp,0x4
c001d8fd:	68 a8 b8 02 c0       	push   0xc002b8a8
c001d902:	68 c8 de 02 c0       	push   0xc002dec8
c001d907:	68 a0 76 02 c0       	push   0xc00276a0
c001d90c:	e8 4a 4d ff ff       	call   c001265b <__cxa_atexit>
c001d911:	83 c4 10             	add    esp,0x10
c001d914:	83 ec 0c             	sub    esp,0xc
c001d917:	68 bc de 02 c0       	push   0xc002debc
c001d91c:	e8 bf 9d 00 00       	call   c00276e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d921:	83 c4 10             	add    esp,0x10
c001d924:	83 ec 04             	sub    esp,0x4
c001d927:	68 a8 b8 02 c0       	push   0xc002b8a8
c001d92c:	68 bc de 02 c0       	push   0xc002debc
c001d931:	68 a0 76 02 c0       	push   0xc00276a0
c001d936:	e8 20 4d ff ff       	call   c001265b <__cxa_atexit>
c001d93b:	83 c4 10             	add    esp,0x10
c001d93e:	83 ec 0c             	sub    esp,0xc
c001d941:	68 b0 de 02 c0       	push   0xc002deb0
c001d946:	e8 95 9d 00 00       	call   c00276e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001d94b:	83 c4 10             	add    esp,0x10
c001d94e:	83 ec 04             	sub    esp,0x4
c001d951:	68 a8 b8 02 c0       	push   0xc002b8a8
c001d956:	68 b0 de 02 c0       	push   0xc002deb0
c001d95b:	68 a0 76 02 c0       	push   0xc00276a0
c001d960:	e8 f6 4c ff ff       	call   c001265b <__cxa_atexit>
c001d965:	83 c4 10             	add    esp,0x10
c001d968:	90                   	nop
c001d969:	83 c4 0c             	add    esp,0xc
c001d96c:	c3                   	ret    

c001d96d <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001d96d:	83 ec 0c             	sub    esp,0xc
c001d970:	83 ec 08             	sub    esp,0x8
c001d973:	68 ff ff 00 00       	push   0xffff
c001d978:	6a 01                	push   0x1
c001d97a:	e8 53 ff ff ff       	call   c001d8d2 <__static_initialization_and_destruction_0(int, int)>
c001d97f:	83 c4 10             	add    esp,0x10
c001d982:	83 c4 0c             	add    esp,0xc
c001d985:	c3                   	ret    

c001d986 <Vm::inbv(unsigned short)>:
c001d986:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d98a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d98f:	75 06                	jne    c001d997 <Vm::inbv(unsigned short)+0x11>
c001d991:	a0 0c df 02 c0       	mov    al,ds:0xc002df0c
c001d996:	c3                   	ret    
c001d997:	ec                   	in     al,dx
c001d998:	c3                   	ret    

c001d999 <Vm::outbv(unsigned short, unsigned char)>:
c001d999:	53                   	push   ebx
c001d99a:	83 ec 08             	sub    esp,0x8
c001d99d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d9a1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d9a5:	66 81 fa fe fe       	cmp    dx,0xfefe
c001d9aa:	75 38                	jne    c001d9e4 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001d9ac:	0f b6 c3             	movzx  eax,bl
c001d9af:	51                   	push   ecx
c001d9b0:	51                   	push   ecx
c001d9b1:	50                   	push   eax
c001d9b2:	68 67 ab 02 c0       	push   0xc002ab67
c001d9b7:	e8 05 4e ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001d9bc:	8b 15 0c df 02 c0    	mov    edx,DWORD PTR ds:0xc002df0c
c001d9c2:	83 c4 10             	add    esp,0x10
c001d9c5:	8d 42 01             	lea    eax,[edx+0x1]
c001d9c8:	88 9a 20 df 02 c0    	mov    BYTE PTR [edx-0x3ffd20e0],bl
c001d9ce:	a3 0c df 02 c0       	mov    ds:0xc002df0c,eax
c001d9d3:	83 f8 20             	cmp    eax,0x20
c001d9d6:	75 0f                	jne    c001d9e7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d9d8:	c7 05 0c df 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002df0c,0x1f
c001d9e2:	eb 03                	jmp    c001d9e7 <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001d9e4:	88 d8                	mov    al,bl
c001d9e6:	ee                   	out    dx,al
c001d9e7:	83 c4 08             	add    esp,0x8
c001d9ea:	5b                   	pop    ebx
c001d9eb:	c3                   	ret    

c001d9ec <Vm::realToLinear(unsigned short, unsigned short)>:
c001d9ec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001d9f1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001d9f6:	c1 e0 04             	shl    eax,0x4
c001d9f9:	01 d0                	add    eax,edx
c001d9fb:	c3                   	ret    

c001d9fc <Vm::getSegment(unsigned int)>:
c001d9fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da00:	c1 e8 10             	shr    eax,0x10
c001da03:	c3                   	ret    

c001da04 <Vm::getOffset(unsigned int)>:
c001da04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001da08:	c3                   	ret    

c001da09 <Vm::mainloop2()>:
c001da09:	83 ec 0c             	sub    esp,0xc
c001da0c:	e8 59 f3 ff ff       	call   c001cd6a <lockScheduler()>
c001da11:	83 ec 0c             	sub    esp,0xc
c001da14:	c6 05 05 df 02 c0 01 	mov    BYTE PTR ds:0xc002df05,0x1
c001da1b:	6a 02                	push   0x2
c001da1d:	e8 9c f7 ff ff       	call   c001d1be <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001da22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da27:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001da2b:	52                   	push   edx
c001da2c:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001da30:	52                   	push   edx
c001da31:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001da35:	52                   	push   edx
c001da36:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001da3a:	50                   	push   eax
c001da3b:	e8 6f 28 fe ff       	call   c00002af <goToVM86>
c001da40:	83 c4 2c             	add    esp,0x2c
c001da43:	c3                   	ret    

c001da44 <Vm::mainVm8086Loop(void*)>:
c001da44:	83 ec 0c             	sub    esp,0xc
c001da47:	e8 20 f3 ff ff       	call   c001cd6c <unlockScheduler()>
c001da4c:	83 c4 0c             	add    esp,0xc
c001da4f:	eb b8                	jmp    c001da09 <Vm::mainloop2()>

c001da51 <Vm::mainloop3(unsigned long)>:
c001da51:	53                   	push   ebx
c001da52:	83 ec 08             	sub    esp,0x8
c001da55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da59:	e8 0c f3 ff ff       	call   c001cd6a <lockScheduler()>
c001da5e:	83 ec 0c             	sub    esp,0xc
c001da61:	89 1d 00 df 02 c0    	mov    DWORD PTR ds:0xc002df00,ebx
c001da67:	6a 02                	push   0x2
c001da69:	c6 05 04 df 02 c0 01 	mov    BYTE PTR ds:0xc002df04,0x1
c001da70:	e8 49 f7 ff ff       	call   c001d1be <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001da75:	83 c4 18             	add    esp,0x18
c001da78:	5b                   	pop    ebx
c001da79:	eb 8e                	jmp    c001da09 <Vm::mainloop2()>

c001da7b <Vm::initialise8086()>:
c001da7b:	83 ec 0c             	sub    esp,0xc
c001da7e:	68 80 00 00 00       	push   0x80
c001da83:	6a 00                	push   0x0
c001da85:	68 44 da 01 c0       	push   0xc001da44
c001da8a:	ff 35 d4 de 02 c0    	push   DWORD PTR ds:0xc002ded4
c001da90:	e8 07 f4 ff ff       	call   c001ce9c <Process::createThread(void (*)(void*), void*, int)>
c001da95:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001da9c:	a3 08 df 02 c0       	mov    ds:0xc002df08,eax
c001daa1:	68 00 01 00 00       	push   0x100
c001daa6:	a1 d4 de 02 c0       	mov    eax,ds:0xc002ded4
c001daab:	6a 00                	push   0x0
c001daad:	6a 00                	push   0x0
c001daaf:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001dab5:	e8 d6 46 ff ff       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001daba:	83 c4 2c             	add    esp,0x2c
c001dabd:	c3                   	ret    

c001dabe <Vm::finish8086()>:
c001dabe:	53                   	push   ebx
c001dabf:	83 ec 08             	sub    esp,0x8
c001dac2:	e8 a3 f2 ff ff       	call   c001cd6a <lockScheduler()>
c001dac7:	80 3d 04 df 02 c0 00 	cmp    BYTE PTR ds:0xc002df04,0x0
c001dace:	75 0c                	jne    c001dadc <Vm::finish8086()+0x1e>
c001dad0:	e8 d1 f5 ff ff       	call   c001d0a6 <schedule()>
c001dad5:	e8 92 f2 ff ff       	call   c001cd6c <unlockScheduler()>
c001dada:	eb e6                	jmp    c001dac2 <Vm::finish8086()+0x4>
c001dadc:	83 ec 0c             	sub    esp,0xc
c001dadf:	8b 1d 00 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df00
c001dae5:	ff 35 08 df 02 c0    	push   DWORD PTR ds:0xc002df08
c001daeb:	c6 05 04 df 02 c0 00 	mov    BYTE PTR ds:0xc002df04,0x0
c001daf2:	e8 8b f8 ff ff       	call   c001d382 <unblockTask(ThreadControlBlock*)>
c001daf7:	e8 70 f2 ff ff       	call   c001cd6c <unlockScheduler()>
c001dafc:	89 d8                	mov    eax,ebx
c001dafe:	83 c4 18             	add    esp,0x18
c001db01:	5b                   	pop    ebx
c001db02:	c3                   	ret    

c001db03 <Vm::getOutput8086(unsigned char*)>:
c001db03:	83 ec 10             	sub    esp,0x10
c001db06:	ff 35 0c df 02 c0    	push   DWORD PTR ds:0xc002df0c
c001db0c:	68 20 df 02 c0       	push   0xc002df20
c001db11:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001db15:	e8 3b 2b fe ff       	call   c0000655 <memcpy>
c001db1a:	a1 0c df 02 c0       	mov    eax,ds:0xc002df0c
c001db1f:	c7 05 0c df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df0c,0x0
c001db29:	83 c4 1c             	add    esp,0x1c
c001db2c:	c3                   	ret    

c001db2d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001db2d:	55                   	push   ebp
c001db2e:	57                   	push   edi
c001db2f:	56                   	push   esi
c001db30:	53                   	push   ebx
c001db31:	83 ec 2c             	sub    esp,0x2c
c001db34:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001db38:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001db3c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001db40:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001db44:	e8 21 f2 ff ff       	call   c001cd6a <lockScheduler()>
c001db49:	a0 05 df 02 c0       	mov    al,ds:0xc002df05
c001db4e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001db52:	84 c0                	test   al,al
c001db54:	75 0c                	jne    c001db62 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001db56:	e8 4b f5 ff ff       	call   c001d0a6 <schedule()>
c001db5b:	e8 0c f2 ff ff       	call   c001cd6c <unlockScheduler()>
c001db60:	eb e2                	jmp    c001db44 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001db62:	a1 08 df 02 c0       	mov    eax,ds:0xc002df08
c001db67:	c7 05 0c df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df0c,0x0
c001db71:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001db75:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001db79:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001db7d:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001db81:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001db85:	50                   	push   eax
c001db86:	6a 20                	push   0x20
c001db88:	6a 00                	push   0x0
c001db8a:	68 20 df 02 c0       	push   0xc002df20
c001db8f:	e8 f7 2a fe ff       	call   c000068b <memset>
c001db94:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001db9b:	e8 34 19 ff ff       	call   c000f4d4 <malloc>
c001dba0:	83 c4 0c             	add    esp,0xc
c001dba3:	89 c7                	mov    edi,eax
c001dba5:	ff 35 d4 de 02 c0    	push   DWORD PTR ds:0xc002ded4
c001dbab:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001dbaf:	50                   	push   eax
c001dbb0:	e8 3b 51 ff ff       	call   c0012cf0 <File::File(char const*, Process*)>
c001dbb5:	83 c4 10             	add    esp,0x10
c001dbb8:	85 ff                	test   edi,edi
c001dbba:	75 0a                	jne    c001dbc6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001dbbc:	83 ec 0c             	sub    esp,0xc
c001dbbf:	68 83 ab 02 c0       	push   0xc002ab83
c001dbc4:	eb 27                	jmp    c001dbed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001dbc6:	50                   	push   eax
c001dbc7:	8d 44 24 17          	lea    eax,[esp+0x17]
c001dbcb:	50                   	push   eax
c001dbcc:	8d 44 24 20          	lea    eax,[esp+0x20]
c001dbd0:	50                   	push   eax
c001dbd1:	57                   	push   edi
c001dbd2:	e8 29 54 ff ff       	call   c0013000 <File::stat(unsigned long long*, bool*)>
c001dbd7:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001dbdc:	83 c4 10             	add    esp,0x10
c001dbdf:	89 e8                	mov    eax,ebp
c001dbe1:	84 c0                	test   al,al
c001dbe3:	74 19                	je     c001dbfe <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001dbe5:	83 ec 0c             	sub    esp,0xc
c001dbe8:	68 97 ab 02 c0       	push   0xc002ab97
c001dbed:	e8 e9 bc ff ff       	call   c00198db <Krnl::panic(char const*)>
c001dbf2:	31 ed                	xor    ebp,ebp
c001dbf4:	e8 73 f1 ff ff       	call   c001cd6c <unlockScheduler()>
c001dbf9:	83 c4 10             	add    esp,0x10
c001dbfc:	eb 75                	jmp    c001dc73 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dbfe:	50                   	push   eax
c001dbff:	50                   	push   eax
c001dc00:	6a 01                	push   0x1
c001dc02:	57                   	push   edi
c001dc03:	e8 4c 51 ff ff       	call   c0012d54 <File::open(FileOpenMode)>
c001dc08:	83 c4 10             	add    esp,0x10
c001dc0b:	85 c0                	test   eax,eax
c001dc0d:	74 17                	je     c001dc26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001dc0f:	83 ec 0c             	sub    esp,0xc
c001dc12:	68 b0 ab 02 c0       	push   0xc002abb0
c001dc17:	e8 bf bc ff ff       	call   c00198db <Krnl::panic(char const*)>
c001dc1c:	e8 4b f1 ff ff       	call   c001cd6c <unlockScheduler()>
c001dc21:	83 c4 10             	add    esp,0x10
c001dc24:	eb 4d                	jmp    c001dc73 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001dc26:	0f b7 f6             	movzx  esi,si
c001dc29:	50                   	push   eax
c001dc2a:	0f b7 db             	movzx  ebx,bx
c001dc2d:	50                   	push   eax
c001dc2e:	56                   	push   esi
c001dc2f:	53                   	push   ebx
c001dc30:	e8 b7 fd ff ff       	call   c001d9ec <Vm::realToLinear(unsigned short, unsigned short)>
c001dc35:	5a                   	pop    edx
c001dc36:	8b 17                	mov    edx,DWORD PTR [edi]
c001dc38:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001dc3c:	51                   	push   ecx
c001dc3d:	50                   	push   eax
c001dc3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dc42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001dc46:	57                   	push   edi
c001dc47:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001dc4a:	83 c4 14             	add    esp,0x14
c001dc4d:	57                   	push   edi
c001dc4e:	e8 5f 51 ff ff       	call   c0012db2 <File::close()>
c001dc53:	c6 05 05 df 02 c0 00 	mov    BYTE PTR ds:0xc002df05,0x0
c001dc5a:	e8 0d f1 ff ff       	call   c001cd6c <unlockScheduler()>
c001dc5f:	59                   	pop    ecx
c001dc60:	ff 35 08 df 02 c0    	push   DWORD PTR ds:0xc002df08
c001dc66:	e8 17 f7 ff ff       	call   c001d382 <unblockTask(ThreadControlBlock*)>
c001dc6b:	83 c4 10             	add    esp,0x10
c001dc6e:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001dc73:	83 c4 2c             	add    esp,0x2c
c001dc76:	89 e8                	mov    eax,ebp
c001dc78:	5b                   	pop    ebx
c001dc79:	5e                   	pop    esi
c001dc7a:	5f                   	pop    edi
c001dc7b:	5d                   	pop    ebp
c001dc7c:	c3                   	ret    

c001dc7d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001dc7d:	57                   	push   edi
c001dc7e:	56                   	push   esi
c001dc7f:	53                   	push   ebx
c001dc80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc88:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001dc8c:	83 e8 06             	sub    eax,0x6
c001dc8f:	0f b7 c0             	movzx  eax,ax
c001dc92:	50                   	push   eax
c001dc93:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001dc98:	50                   	push   eax
c001dc99:	e8 4e fd ff ff       	call   c001d9ec <Vm::realToLinear(unsigned short, unsigned short)>
c001dc9e:	5a                   	pop    edx
c001dc9f:	5e                   	pop    esi
c001dca0:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001dca3:	8d 56 fa             	lea    edx,[esi-0x6]
c001dca6:	81 e2 ff ff 00 00    	and    edx,0xffff
c001dcac:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001dcaf:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001dcb2:	83 c2 02             	add    edx,0x2
c001dcb5:	66 89 10             	mov    WORD PTR [eax],dx
c001dcb8:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001dcbb:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001dcbf:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001dcc2:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001dcc6:	89 d6                	mov    esi,edx
c001dcc8:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001dcce:	66 81 e6 ff fd       	and    si,0xfdff
c001dcd3:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001dcd7:	74 07                	je     c001dce0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001dcd9:	89 d6                	mov    esi,edx
c001dcdb:	66 81 ce 00 02       	or     si,0x200
c001dce0:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001dce4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dce9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001dced:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001dcf5:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001dcf8:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001dd00:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dd03:	5b                   	pop    ebx
c001dd04:	5e                   	pop    esi
c001dd05:	5f                   	pop    edi
c001dd06:	c3                   	ret    

c001dd07 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001dd07:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd0c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd11:	c1 e0 04             	shl    eax,0x4
c001dd14:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001dd17:	c3                   	ret    

c001dd18 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001dd18:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd1d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd22:	c1 e0 04             	shl    eax,0x4
c001dd25:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001dd29:	c3                   	ret    

c001dd2a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001dd2a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd2f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd34:	c1 e0 04             	shl    eax,0x4
c001dd37:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001dd3a:	c3                   	ret    

c001dd3b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001dd3b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd40:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd45:	c1 e0 04             	shl    eax,0x4
c001dd48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd4c:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001dd4f:	c3                   	ret    

c001dd50 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001dd50:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd55:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd5a:	c1 e0 04             	shl    eax,0x4
c001dd5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd61:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001dd65:	c3                   	ret    

c001dd66 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001dd66:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001dd6b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001dd70:	c1 e0 04             	shl    eax,0x4
c001dd73:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dd77:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001dd7a:	c3                   	ret    

c001dd7b <Vm::faultHandler(regs*)>:
c001dd7b:	55                   	push   ebp
c001dd7c:	57                   	push   edi
c001dd7d:	56                   	push   esi
c001dd7e:	53                   	push   ebx
c001dd7f:	83 ec 1c             	sub    esp,0x1c
c001dd82:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001dd86:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001dd89:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001dd8c:	0f b7 c1             	movzx  eax,cx
c001dd8f:	50                   	push   eax
c001dd90:	0f b7 c3             	movzx  eax,bx
c001dd93:	c1 e3 04             	shl    ebx,0x4
c001dd96:	50                   	push   eax
c001dd97:	e8 50 fc ff ff       	call   c001d9ec <Vm::realToLinear(unsigned short, unsigned short)>
c001dd9c:	5a                   	pop    edx
c001dd9d:	89 c5                	mov    ebp,eax
c001dd9f:	5e                   	pop    esi
c001dda0:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001dda4:	50                   	push   eax
c001dda5:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001dda9:	50                   	push   eax
c001ddaa:	e8 3d fc ff ff       	call   c001d9ec <Vm::realToLinear(unsigned short, unsigned short)>
c001ddaf:	01 cb                	add    ebx,ecx
c001ddb1:	89 c6                	mov    esi,eax
c001ddb3:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ddb7:	50                   	push   eax
c001ddb8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ddbc:	50                   	push   eax
c001ddbd:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ddc1:	50                   	push   eax
c001ddc2:	55                   	push   ebp
c001ddc3:	53                   	push   ebx
c001ddc4:	b3 06                	mov    bl,0x6
c001ddc6:	68 c9 ab 02 c0       	push   0xc002abc9
c001ddcb:	e8 f1 49 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001ddd0:	83 c4 20             	add    esp,0x20
c001ddd3:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ddd8:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001dddd:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001dde1:	3c 9d                	cmp    al,0x9d
c001dde3:	0f 84 d7 02 00 00    	je     c001e0c0 <Vm::faultHandler(regs*)+0x345>
c001dde9:	0f 87 a3 00 00 00    	ja     c001de92 <Vm::faultHandler(regs*)+0x117>
c001ddef:	3c 66                	cmp    al,0x66
c001ddf1:	0f 84 15 02 00 00    	je     c001e00c <Vm::faultHandler(regs*)+0x291>
c001ddf7:	77 5f                	ja     c001de58 <Vm::faultHandler(regs*)+0xdd>
c001ddf9:	3c 36                	cmp    al,0x36
c001ddfb:	0f 84 f1 01 00 00    	je     c001dff2 <Vm::faultHandler(regs*)+0x277>
c001de01:	77 28                	ja     c001de2b <Vm::faultHandler(regs*)+0xb0>
c001de03:	3c 26                	cmp    al,0x26
c001de05:	0f 84 99 01 00 00    	je     c001dfa4 <Vm::faultHandler(regs*)+0x229>
c001de0b:	3c 2e                	cmp    al,0x2e
c001de0d:	0f 85 3b 07 00 00    	jne    c001e54e <Vm::faultHandler(regs*)+0x7d3>
c001de13:	83 ec 0c             	sub    esp,0xc
c001de16:	31 db                	xor    ebx,ebx
c001de18:	68 de ab 02 c0       	push   0xc002abde
c001de1d:	e8 9f 49 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001de22:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de25:	83 c4 10             	add    esp,0x10
c001de28:	45                   	inc    ebp
c001de29:	eb b2                	jmp    c001dddd <Vm::faultHandler(regs*)+0x62>
c001de2b:	3c 64                	cmp    al,0x64
c001de2d:	0f 84 8b 01 00 00    	je     c001dfbe <Vm::faultHandler(regs*)+0x243>
c001de33:	0f 87 9f 01 00 00    	ja     c001dfd8 <Vm::faultHandler(regs*)+0x25d>
c001de39:	3c 3e                	cmp    al,0x3e
c001de3b:	0f 85 0d 07 00 00    	jne    c001e54e <Vm::faultHandler(regs*)+0x7d3>
c001de41:	83 ec 0c             	sub    esp,0xc
c001de44:	b3 01                	mov    bl,0x1
c001de46:	68 e2 ab 02 c0       	push   0xc002abe2
c001de4b:	e8 71 49 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001de50:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001de53:	83 c4 10             	add    esp,0x10
c001de56:	eb d0                	jmp    c001de28 <Vm::faultHandler(regs*)+0xad>
c001de58:	3c 6d                	cmp    al,0x6d
c001de5a:	0f 84 af 03 00 00    	je     c001e20f <Vm::faultHandler(regs*)+0x494>
c001de60:	77 15                	ja     c001de77 <Vm::faultHandler(regs*)+0xfc>
c001de62:	3c 67                	cmp    al,0x67
c001de64:	0f 84 bf 01 00 00    	je     c001e029 <Vm::faultHandler(regs*)+0x2ae>
c001de6a:	3c 6c                	cmp    al,0x6c
c001de6c:	0f 84 3f 03 00 00    	je     c001e1b1 <Vm::faultHandler(regs*)+0x436>
c001de72:	e9 d7 06 00 00       	jmp    c001e54e <Vm::faultHandler(regs*)+0x7d3>
c001de77:	3c 6f                	cmp    al,0x6f
c001de79:	0f 84 a4 04 00 00    	je     c001e323 <Vm::faultHandler(regs*)+0x5a8>
c001de7f:	0f 82 11 04 00 00    	jb     c001e296 <Vm::faultHandler(regs*)+0x51b>
c001de85:	3c 9c                	cmp    al,0x9c
c001de87:	0f 84 ba 01 00 00    	je     c001e047 <Vm::faultHandler(regs*)+0x2cc>
c001de8d:	e9 bc 06 00 00       	jmp    c001e54e <Vm::faultHandler(regs*)+0x7d3>
c001de92:	3c ec                	cmp    al,0xec
c001de94:	0f 84 24 06 00 00    	je     c001e4be <Vm::faultHandler(regs*)+0x743>
c001de9a:	0f 87 93 00 00 00    	ja     c001df33 <Vm::faultHandler(regs*)+0x1b8>
c001dea0:	3c e4                	cmp    al,0xe4
c001dea2:	0f 84 5c 05 00 00    	je     c001e404 <Vm::faultHandler(regs*)+0x689>
c001dea8:	77 6a                	ja     c001df14 <Vm::faultHandler(regs*)+0x199>
c001deaa:	3c cd                	cmp    al,0xcd
c001deac:	0f 84 7e 02 00 00    	je     c001e130 <Vm::faultHandler(regs*)+0x3b5>
c001deb2:	3c cf                	cmp    al,0xcf
c001deb4:	0f 85 94 06 00 00    	jne    c001e54e <Vm::faultHandler(regs*)+0x7d3>
c001deba:	83 ec 0c             	sub    esp,0xc
c001debd:	68 26 ac 02 c0       	push   0xc002ac26
c001dec2:	e8 fa 48 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001dec7:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001deca:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001decd:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001ded1:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001ded4:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001ded8:	0d 00 02 02 00       	or     eax,0x20200
c001dedd:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001dee0:	56                   	push   esi
c001dee1:	53                   	push   ebx
c001dee2:	52                   	push   edx
c001dee3:	68 2c ac 02 c0       	push   0xc002ac2c
c001dee8:	e8 d4 48 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001deed:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001def1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001def7:	66 c1 e8 09          	shr    ax,0x9
c001defb:	83 e0 01             	and    eax,0x1
c001defe:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001df01:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001df04:	83 c0 06             	add    eax,0x6
c001df07:	25 ff ff 00 00       	and    eax,0xffff
c001df0c:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001df0f:	e9 95 02 00 00       	jmp    c001e1a9 <Vm::faultHandler(regs*)+0x42e>
c001df14:	3c e6                	cmp    al,0xe6
c001df16:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001df1a:	0f 84 4e 05 00 00    	je     c001e46e <Vm::faultHandler(regs*)+0x6f3>
c001df20:	0f 82 0a 05 00 00    	jb     c001e430 <Vm::faultHandler(regs*)+0x6b5>
c001df26:	3c e7                	cmp    al,0xe7
c001df28:	0f 84 69 05 00 00    	je     c001e497 <Vm::faultHandler(regs*)+0x71c>
c001df2e:	e9 1b 06 00 00       	jmp    c001e54e <Vm::faultHandler(regs*)+0x7d3>
c001df33:	3c ef                	cmp    al,0xef
c001df35:	0f 84 e6 05 00 00    	je     c001e521 <Vm::faultHandler(regs*)+0x7a6>
c001df3b:	77 37                	ja     c001df74 <Vm::faultHandler(regs*)+0x1f9>
c001df3d:	3c ed                	cmp    al,0xed
c001df3f:	0f 84 a3 05 00 00    	je     c001e4e8 <Vm::faultHandler(regs*)+0x76d>
c001df45:	3c ee                	cmp    al,0xee
c001df47:	0f 85 01 06 00 00    	jne    c001e54e <Vm::faultHandler(regs*)+0x7d3>
c001df4d:	52                   	push   edx
c001df4e:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001df51:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001df54:	68 c7 ac 02 c0       	push   0xc002acc7
c001df59:	e8 63 48 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001df5e:	59                   	pop    ecx
c001df5f:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001df63:	5b                   	pop    ebx
c001df64:	50                   	push   eax
c001df65:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001df69:	50                   	push   eax
c001df6a:	e8 2a fa ff ff       	call   c001d999 <Vm::outbv(unsigned short, unsigned char)>
c001df6f:	e9 a5 05 00 00       	jmp    c001e519 <Vm::faultHandler(regs*)+0x79e>
c001df74:	3c fa                	cmp    al,0xfa
c001df76:	0f 84 f7 01 00 00    	je     c001e173 <Vm::faultHandler(regs*)+0x3f8>
c001df7c:	3c fb                	cmp    al,0xfb
c001df7e:	0f 84 0a 02 00 00    	je     c001e18e <Vm::faultHandler(regs*)+0x413>
c001df84:	3c f3                	cmp    al,0xf3
c001df86:	0f 85 c2 05 00 00    	jne    c001e54e <Vm::faultHandler(regs*)+0x7d3>
c001df8c:	83 ec 0c             	sub    esp,0xc
c001df8f:	68 ff ab 02 c0       	push   0xc002abff
c001df94:	e8 28 48 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001df99:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001df9c:	83 c4 10             	add    esp,0x10
c001df9f:	e9 84 fe ff ff       	jmp    c001de28 <Vm::faultHandler(regs*)+0xad>
c001dfa4:	83 ec 0c             	sub    esp,0xc
c001dfa7:	b3 02                	mov    bl,0x2
c001dfa9:	68 da ab 02 c0       	push   0xc002abda
c001dfae:	e8 0e 48 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001dfb3:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfb6:	83 c4 10             	add    esp,0x10
c001dfb9:	e9 6a fe ff ff       	jmp    c001de28 <Vm::faultHandler(regs*)+0xad>
c001dfbe:	83 ec 0c             	sub    esp,0xc
c001dfc1:	b3 03                	mov    bl,0x3
c001dfc3:	68 e6 ab 02 c0       	push   0xc002abe6
c001dfc8:	e8 f4 47 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001dfcd:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfd0:	83 c4 10             	add    esp,0x10
c001dfd3:	e9 50 fe ff ff       	jmp    c001de28 <Vm::faultHandler(regs*)+0xad>
c001dfd8:	83 ec 0c             	sub    esp,0xc
c001dfdb:	b3 04                	mov    bl,0x4
c001dfdd:	68 ea ab 02 c0       	push   0xc002abea
c001dfe2:	e8 da 47 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001dfe7:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001dfea:	83 c4 10             	add    esp,0x10
c001dfed:	e9 36 fe ff ff       	jmp    c001de28 <Vm::faultHandler(regs*)+0xad>
c001dff2:	83 ec 0c             	sub    esp,0xc
c001dff5:	b3 05                	mov    bl,0x5
c001dff7:	68 ee ab 02 c0       	push   0xc002abee
c001dffc:	e8 c0 47 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e001:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e004:	83 c4 10             	add    esp,0x10
c001e007:	e9 1c fe ff ff       	jmp    c001de28 <Vm::faultHandler(regs*)+0xad>
c001e00c:	83 ec 0c             	sub    esp,0xc
c001e00f:	68 f2 ab 02 c0       	push   0xc002abf2
c001e014:	e8 a8 47 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e019:	83 c4 10             	add    esp,0x10
c001e01c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e01f:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e024:	e9 ff fd ff ff       	jmp    c001de28 <Vm::faultHandler(regs*)+0xad>
c001e029:	50                   	push   eax
c001e02a:	50                   	push   eax
c001e02b:	6a 01                	push   0x1
c001e02d:	68 f7 ab 02 c0       	push   0xc002abf7
c001e032:	e8 8a 47 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e037:	83 c4 10             	add    esp,0x10
c001e03a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e03d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001e042:	e9 e1 fd ff ff       	jmp    c001de28 <Vm::faultHandler(regs*)+0xad>
c001e047:	83 ec 0c             	sub    esp,0xc
c001e04a:	68 05 ac 02 c0       	push   0xc002ac05
c001e04f:	e8 6d 47 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e054:	83 c4 10             	add    esp,0x10
c001e057:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001e05a:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e05f:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001e062:	74 2f                	je     c001e093 <Vm::faultHandler(regs*)+0x318>
c001e064:	83 ea 04             	sub    edx,0x4
c001e067:	25 ff 0d 00 00       	and    eax,0xdff
c001e06c:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e072:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e075:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e078:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e07e:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e082:	0f 84 bf 04 00 00    	je     c001e547 <Vm::faultHandler(regs*)+0x7cc>
c001e088:	80 cc 02             	or     ah,0x2
c001e08b:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001e08e:	e9 b4 04 00 00       	jmp    c001e547 <Vm::faultHandler(regs*)+0x7cc>
c001e093:	83 ea 02             	sub    edx,0x2
c001e096:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e09c:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001e09f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e0a3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0a9:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001e0ad:	74 05                	je     c001e0b4 <Vm::faultHandler(regs*)+0x339>
c001e0af:	80 cc 02             	or     ah,0x2
c001e0b2:	eb 03                	jmp    c001e0b7 <Vm::faultHandler(regs*)+0x33c>
c001e0b4:	80 e4 fd             	and    ah,0xfd
c001e0b7:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001e0bb:	e9 87 04 00 00       	jmp    c001e547 <Vm::faultHandler(regs*)+0x7cc>
c001e0c0:	83 ec 0c             	sub    esp,0xc
c001e0c3:	68 0c ac 02 c0       	push   0xc002ac0c
c001e0c8:	e8 f4 46 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e0cd:	83 c4 10             	add    esp,0x10
c001e0d0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e0d5:	74 28                	je     c001e0ff <Vm::faultHandler(regs*)+0x384>
c001e0d7:	8b 06                	mov    eax,DWORD PTR [esi]
c001e0d9:	25 ff 0d 00 00       	and    eax,0xdff
c001e0de:	0d 00 02 02 00       	or     eax,0x20200
c001e0e3:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e0e6:	8b 06                	mov    eax,DWORD PTR [esi]
c001e0e8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e0ee:	c1 e8 09             	shr    eax,0x9
c001e0f1:	83 e0 01             	and    eax,0x1
c001e0f4:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e0f7:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e0fa:	83 c0 04             	add    eax,0x4
c001e0fd:	eb 24                	jmp    c001e123 <Vm::faultHandler(regs*)+0x3a8>
c001e0ff:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001e102:	0d 00 02 02 00       	or     eax,0x20200
c001e107:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001e10a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e10d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e113:	66 c1 e8 09          	shr    ax,0x9
c001e117:	83 e0 01             	and    eax,0x1
c001e11a:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001e11d:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001e120:	83 c0 02             	add    eax,0x2
c001e123:	25 ff ff 00 00       	and    eax,0xffff
c001e128:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001e12b:	e9 17 04 00 00       	jmp    c001e547 <Vm::faultHandler(regs*)+0x7cc>
c001e130:	53                   	push   ebx
c001e131:	53                   	push   ebx
c001e132:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e136:	50                   	push   eax
c001e137:	68 12 ac 02 c0       	push   0xc002ac12
c001e13c:	e8 80 46 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e141:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e145:	83 c4 10             	add    esp,0x10
c001e148:	3c ee                	cmp    al,0xee
c001e14a:	75 10                	jne    c001e15c <Vm::faultHandler(regs*)+0x3e1>
c001e14c:	83 ec 0c             	sub    esp,0xc
c001e14f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e152:	e8 fa f8 ff ff       	call   c001da51 <Vm::mainloop3(unsigned long)>
c001e157:	e9 c0 03 00 00       	jmp    c001e51c <Vm::faultHandler(regs*)+0x7a1>
c001e15c:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001e160:	83 ec 0c             	sub    esp,0xc
c001e163:	53                   	push   ebx
c001e164:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001e168:	53                   	push   ebx
c001e169:	55                   	push   ebp
c001e16a:	50                   	push   eax
c001e16b:	57                   	push   edi
c001e16c:	e8 0c fb ff ff       	call   c001dc7d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001e171:	eb 36                	jmp    c001e1a9 <Vm::faultHandler(regs*)+0x42e>
c001e173:	83 ec 0c             	sub    esp,0xc
c001e176:	68 1c ac 02 c0       	push   0xc002ac1c
c001e17b:	e8 41 46 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e180:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e185:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e189:	e9 8b 03 00 00       	jmp    c001e519 <Vm::faultHandler(regs*)+0x79e>
c001e18e:	83 ec 0c             	sub    esp,0xc
c001e191:	68 21 ac 02 c0       	push   0xc002ac21
c001e196:	e8 26 46 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e19b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1a0:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001e1a4:	e9 70 03 00 00       	jmp    c001e519 <Vm::faultHandler(regs*)+0x79e>
c001e1a9:	83 c4 20             	add    esp,0x20
c001e1ac:	e9 99 03 00 00       	jmp    c001e54a <Vm::faultHandler(regs*)+0x7cf>
c001e1b1:	83 ec 0c             	sub    esp,0xc
c001e1b4:	68 5f ac 02 c0       	push   0xc002ac5f
c001e1b9:	e8 03 46 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e1be:	83 c4 10             	add    esp,0x10
c001e1c1:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e1c4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e1c9:	74 0d                	je     c001e1d8 <Vm::faultHandler(regs*)+0x45d>
c001e1cb:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e1d2:	0f 87 9e 01 00 00    	ja     c001e376 <Vm::faultHandler(regs*)+0x5fb>
c001e1d8:	83 ec 0c             	sub    esp,0xc
c001e1db:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e1df:	0f b7 db             	movzx  ebx,bx
c001e1e2:	50                   	push   eax
c001e1e3:	e8 9e f7 ff ff       	call   c001d986 <Vm::inbv(unsigned short)>
c001e1e8:	83 c4 0c             	add    esp,0xc
c001e1eb:	0f b6 c0             	movzx  eax,al
c001e1ee:	50                   	push   eax
c001e1ef:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001e1f3:	50                   	push   eax
c001e1f4:	53                   	push   ebx
c001e1f5:	e8 41 fb ff ff       	call   c001dd3b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001e1fa:	83 c4 10             	add    esp,0x10
c001e1fd:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e200:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e204:	74 03                	je     c001e209 <Vm::faultHandler(regs*)+0x48e>
c001e206:	48                   	dec    eax
c001e207:	eb 01                	jmp    c001e20a <Vm::faultHandler(regs*)+0x48f>
c001e209:	40                   	inc    eax
c001e20a:	0f b7 c0             	movzx  eax,ax
c001e20d:	eb 7f                	jmp    c001e28e <Vm::faultHandler(regs*)+0x513>
c001e20f:	83 ec 0c             	sub    esp,0xc
c001e212:	68 91 ac 02 c0       	push   0xc002ac91
c001e217:	e8 a5 45 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e21c:	83 c4 10             	add    esp,0x10
c001e21f:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001e222:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e227:	74 0d                	je     c001e236 <Vm::faultHandler(regs*)+0x4bb>
c001e229:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001e230:	0f 87 40 01 00 00    	ja     c001e376 <Vm::faultHandler(regs*)+0x5fb>
c001e236:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e239:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001e23d:	0f b7 db             	movzx  ebx,bx
c001e240:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e245:	74 20                	je     c001e267 <Vm::faultHandler(regs*)+0x4ec>
c001e247:	ed                   	in     eax,dx
c001e248:	51                   	push   ecx
c001e249:	50                   	push   eax
c001e24a:	56                   	push   esi
c001e24b:	53                   	push   ebx
c001e24c:	e8 15 fb ff ff       	call   c001dd66 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001e251:	83 c4 10             	add    esp,0x10
c001e254:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e257:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e25b:	74 05                	je     c001e262 <Vm::faultHandler(regs*)+0x4e7>
c001e25d:	83 e8 04             	sub    eax,0x4
c001e260:	eb 27                	jmp    c001e289 <Vm::faultHandler(regs*)+0x50e>
c001e262:	83 c0 04             	add    eax,0x4
c001e265:	eb 22                	jmp    c001e289 <Vm::faultHandler(regs*)+0x50e>
c001e267:	66 ed                	in     ax,dx
c001e269:	0f b7 c0             	movzx  eax,ax
c001e26c:	52                   	push   edx
c001e26d:	50                   	push   eax
c001e26e:	56                   	push   esi
c001e26f:	53                   	push   ebx
c001e270:	e8 db fa ff ff       	call   c001dd50 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001e275:	83 c4 10             	add    esp,0x10
c001e278:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001e27b:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e27f:	74 05                	je     c001e286 <Vm::faultHandler(regs*)+0x50b>
c001e281:	83 e8 02             	sub    eax,0x2
c001e284:	eb 03                	jmp    c001e289 <Vm::faultHandler(regs*)+0x50e>
c001e286:	83 c0 02             	add    eax,0x2
c001e289:	25 ff ff 00 00       	and    eax,0xffff
c001e28e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001e291:	e9 b1 02 00 00       	jmp    c001e547 <Vm::faultHandler(regs*)+0x7cc>
c001e296:	83 ec 0c             	sub    esp,0xc
c001e299:	4b                   	dec    ebx
c001e29a:	68 97 ac 02 c0       	push   0xc002ac97
c001e29f:	e8 1d 45 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e2a4:	83 c4 10             	add    esp,0x10
c001e2a7:	80 fb 05             	cmp    bl,0x5
c001e2aa:	77 0a                	ja     c001e2b6 <Vm::faultHandler(regs*)+0x53b>
c001e2ac:	0f b6 db             	movzx  ebx,bl
c001e2af:	ff 24 9d 08 ad 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd52f8]
c001e2b6:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e2ba:	eb 1b                	jmp    c001e2d7 <Vm::faultHandler(regs*)+0x55c>
c001e2bc:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e2c0:	eb 15                	jmp    c001e2d7 <Vm::faultHandler(regs*)+0x55c>
c001e2c2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e2c6:	eb 0f                	jmp    c001e2d7 <Vm::faultHandler(regs*)+0x55c>
c001e2c8:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e2cc:	eb 09                	jmp    c001e2d7 <Vm::faultHandler(regs*)+0x55c>
c001e2ce:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e2d1:	eb 04                	jmp    c001e2d7 <Vm::faultHandler(regs*)+0x55c>
c001e2d3:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e2d7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e2dc:	74 0d                	je     c001e2eb <Vm::faultHandler(regs*)+0x570>
c001e2de:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001e2e5:	0f 87 8b 00 00 00    	ja     c001e376 <Vm::faultHandler(regs*)+0x5fb>
c001e2eb:	53                   	push   ebx
c001e2ec:	53                   	push   ebx
c001e2ed:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001e2f1:	52                   	push   edx
c001e2f2:	50                   	push   eax
c001e2f3:	e8 0f fa ff ff       	call   c001dd07 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001e2f8:	5e                   	pop    esi
c001e2f9:	0f b6 c0             	movzx  eax,al
c001e2fc:	5d                   	pop    ebp
c001e2fd:	50                   	push   eax
c001e2fe:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e302:	50                   	push   eax
c001e303:	e8 91 f6 ff ff       	call   c001d999 <Vm::outbv(unsigned short, unsigned char)>
c001e308:	83 c4 10             	add    esp,0x10
c001e30b:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001e30e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001e312:	74 03                	je     c001e317 <Vm::faultHandler(regs*)+0x59c>
c001e314:	48                   	dec    eax
c001e315:	eb 01                	jmp    c001e318 <Vm::faultHandler(regs*)+0x59d>
c001e317:	40                   	inc    eax
c001e318:	0f b7 c0             	movzx  eax,ax
c001e31b:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001e31e:	e9 24 02 00 00       	jmp    c001e547 <Vm::faultHandler(regs*)+0x7cc>
c001e323:	83 ec 0c             	sub    esp,0xc
c001e326:	4b                   	dec    ebx
c001e327:	68 97 ac 02 c0       	push   0xc002ac97
c001e32c:	e8 90 44 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e331:	83 c4 10             	add    esp,0x10
c001e334:	80 fb 05             	cmp    bl,0x5
c001e337:	77 0a                	ja     c001e343 <Vm::faultHandler(regs*)+0x5c8>
c001e339:	0f b6 db             	movzx  ebx,bl
c001e33c:	ff 24 9d 20 ad 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd52e0]
c001e343:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001e347:	eb 1b                	jmp    c001e364 <Vm::faultHandler(regs*)+0x5e9>
c001e349:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001e34d:	eb 15                	jmp    c001e364 <Vm::faultHandler(regs*)+0x5e9>
c001e34f:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001e353:	eb 0f                	jmp    c001e364 <Vm::faultHandler(regs*)+0x5e9>
c001e355:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001e359:	eb 09                	jmp    c001e364 <Vm::faultHandler(regs*)+0x5e9>
c001e35b:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001e35e:	eb 04                	jmp    c001e364 <Vm::faultHandler(regs*)+0x5e9>
c001e360:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001e364:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001e367:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e36c:	74 39                	je     c001e3a7 <Vm::faultHandler(regs*)+0x62c>
c001e36e:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001e374:	76 31                	jbe    c001e3a7 <Vm::faultHandler(regs*)+0x62c>
c001e376:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e37a:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001e37e:	51                   	push   ecx
c001e37f:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e383:	51                   	push   ecx
c001e384:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e388:	51                   	push   ecx
c001e389:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e38d:	51                   	push   ecx
c001e38e:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e392:	52                   	push   edx
c001e393:	50                   	push   eax
c001e394:	50                   	push   eax
c001e395:	68 64 ac 02 c0       	push   0xc002ac64
c001e39a:	e8 22 44 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e39f:	83 c4 20             	add    esp,0x20
c001e3a2:	e9 fb 01 00 00       	jmp    c001e5a2 <Vm::faultHandler(regs*)+0x827>
c001e3a7:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001e3aa:	0f b7 d3             	movzx  edx,bx
c001e3ad:	81 e6 00 04 00 00    	and    esi,0x400
c001e3b3:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001e3b6:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e3bb:	74 1d                	je     c001e3da <Vm::faultHandler(regs*)+0x65f>
c001e3bd:	51                   	push   ecx
c001e3be:	51                   	push   ecx
c001e3bf:	52                   	push   edx
c001e3c0:	50                   	push   eax
c001e3c1:	e8 64 f9 ff ff       	call   c001dd2a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001e3c6:	83 c4 10             	add    esp,0x10
c001e3c9:	89 ea                	mov    edx,ebp
c001e3cb:	ef                   	out    dx,eax
c001e3cc:	85 f6                	test   esi,esi
c001e3ce:	74 05                	je     c001e3d5 <Vm::faultHandler(regs*)+0x65a>
c001e3d0:	83 eb 04             	sub    ebx,0x4
c001e3d3:	eb 21                	jmp    c001e3f6 <Vm::faultHandler(regs*)+0x67b>
c001e3d5:	83 c3 04             	add    ebx,0x4
c001e3d8:	eb 1c                	jmp    c001e3f6 <Vm::faultHandler(regs*)+0x67b>
c001e3da:	51                   	push   ecx
c001e3db:	51                   	push   ecx
c001e3dc:	52                   	push   edx
c001e3dd:	50                   	push   eax
c001e3de:	e8 35 f9 ff ff       	call   c001dd18 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001e3e3:	83 c4 10             	add    esp,0x10
c001e3e6:	89 ea                	mov    edx,ebp
c001e3e8:	66 ef                	out    dx,ax
c001e3ea:	85 f6                	test   esi,esi
c001e3ec:	74 05                	je     c001e3f3 <Vm::faultHandler(regs*)+0x678>
c001e3ee:	83 eb 02             	sub    ebx,0x2
c001e3f1:	eb 03                	jmp    c001e3f6 <Vm::faultHandler(regs*)+0x67b>
c001e3f3:	83 c3 02             	add    ebx,0x2
c001e3f6:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001e3fc:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001e3ff:	e9 43 01 00 00       	jmp    c001e547 <Vm::faultHandler(regs*)+0x7cc>
c001e404:	53                   	push   ebx
c001e405:	53                   	push   ebx
c001e406:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e40a:	50                   	push   eax
c001e40b:	68 9d ac 02 c0       	push   0xc002ac9d
c001e410:	e8 ac 43 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e415:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e41c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e420:	89 04 24             	mov    DWORD PTR [esp],eax
c001e423:	e8 5e f5 ff ff       	call   c001d986 <Vm::inbv(unsigned short)>
c001e428:	0f b6 c0             	movzx  eax,al
c001e42b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e42e:	eb 5e                	jmp    c001e48e <Vm::faultHandler(regs*)+0x713>
c001e430:	51                   	push   ecx
c001e431:	51                   	push   ecx
c001e432:	53                   	push   ebx
c001e433:	68 a3 ac 02 c0       	push   0xc002aca3
c001e438:	e8 84 43 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e43d:	83 c4 10             	add    esp,0x10
c001e440:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e445:	74 07                	je     c001e44e <Vm::faultHandler(regs*)+0x6d3>
c001e447:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e44b:	ed                   	in     eax,dx
c001e44c:	eb 14                	jmp    c001e462 <Vm::faultHandler(regs*)+0x6e7>
c001e44e:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001e451:	66 31 db             	xor    bx,bx
c001e454:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001e457:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e45b:	66 ed                	in     ax,dx
c001e45d:	0f b7 c0             	movzx  eax,ax
c001e460:	09 d8                	or     eax,ebx
c001e462:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e465:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e469:	e9 dc 00 00 00       	jmp    c001e54a <Vm::faultHandler(regs*)+0x7cf>
c001e46e:	50                   	push   eax
c001e46f:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e472:	53                   	push   ebx
c001e473:	68 a9 ac 02 c0       	push   0xc002aca9
c001e478:	e8 44 43 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e47d:	58                   	pop    eax
c001e47e:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001e482:	5a                   	pop    edx
c001e483:	50                   	push   eax
c001e484:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001e488:	50                   	push   eax
c001e489:	e8 0b f5 ff ff       	call   c001d999 <Vm::outbv(unsigned short, unsigned char)>
c001e48e:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001e492:	e9 85 00 00 00       	jmp    c001e51c <Vm::faultHandler(regs*)+0x7a1>
c001e497:	50                   	push   eax
c001e498:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e49b:	53                   	push   ebx
c001e49c:	68 b2 ac 02 c0       	push   0xc002acb2
c001e4a1:	e8 1b 43 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e4a6:	83 c4 10             	add    esp,0x10
c001e4a9:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e4ad:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e4b2:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e4b5:	74 03                	je     c001e4ba <Vm::faultHandler(regs*)+0x73f>
c001e4b7:	ef                   	out    dx,eax
c001e4b8:	eb ab                	jmp    c001e465 <Vm::faultHandler(regs*)+0x6ea>
c001e4ba:	66 ef                	out    dx,ax
c001e4bc:	eb a7                	jmp    c001e465 <Vm::faultHandler(regs*)+0x6ea>
c001e4be:	55                   	push   ebp
c001e4bf:	55                   	push   ebp
c001e4c0:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e4c3:	68 bb ac 02 c0       	push   0xc002acbb
c001e4c8:	e8 f4 42 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e4cd:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001e4d4:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001e4d8:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4db:	e8 a6 f4 ff ff       	call   c001d986 <Vm::inbv(unsigned short)>
c001e4e0:	0f b6 c0             	movzx  eax,al
c001e4e3:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001e4e6:	eb 31                	jmp    c001e519 <Vm::faultHandler(regs*)+0x79e>
c001e4e8:	56                   	push   esi
c001e4e9:	56                   	push   esi
c001e4ea:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e4ed:	68 c1 ac 02 c0       	push   0xc002acc1
c001e4f2:	e8 ca 42 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e4f7:	83 c4 10             	add    esp,0x10
c001e4fa:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e4fd:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e502:	74 03                	je     c001e507 <Vm::faultHandler(regs*)+0x78c>
c001e504:	ed                   	in     eax,dx
c001e505:	eb 0d                	jmp    c001e514 <Vm::faultHandler(regs*)+0x799>
c001e507:	66 ed                	in     ax,dx
c001e509:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001e50c:	0f b7 c0             	movzx  eax,ax
c001e50f:	66 31 d2             	xor    dx,dx
c001e512:	09 d0                	or     eax,edx
c001e514:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001e517:	eb 2e                	jmp    c001e547 <Vm::faultHandler(regs*)+0x7cc>
c001e519:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e51c:	83 c4 10             	add    esp,0x10
c001e51f:	eb 29                	jmp    c001e54a <Vm::faultHandler(regs*)+0x7cf>
c001e521:	50                   	push   eax
c001e522:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001e525:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001e528:	68 d0 ac 02 c0       	push   0xc002acd0
c001e52d:	e8 8f 42 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e532:	83 c4 10             	add    esp,0x10
c001e535:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001e538:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e53d:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001e540:	74 03                	je     c001e545 <Vm::faultHandler(regs*)+0x7ca>
c001e542:	ef                   	out    dx,eax
c001e543:	eb 02                	jmp    c001e547 <Vm::faultHandler(regs*)+0x7cc>
c001e545:	66 ef                	out    dx,ax
c001e547:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001e54a:	b0 01                	mov    al,0x1
c001e54c:	eb 56                	jmp    c001e5a4 <Vm::faultHandler(regs*)+0x829>
c001e54e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001e552:	51                   	push   ecx
c001e553:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001e557:	51                   	push   ecx
c001e558:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001e55c:	51                   	push   ecx
c001e55d:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001e561:	51                   	push   ecx
c001e562:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001e566:	52                   	push   edx
c001e567:	50                   	push   eax
c001e568:	50                   	push   eax
c001e569:	68 d9 ac 02 c0       	push   0xc002acd9
c001e56e:	e8 4e 42 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001e573:	83 c4 20             	add    esp,0x20
c001e576:	83 ec 0c             	sub    esp,0xc
c001e579:	6a 60                	push   0x60
c001e57b:	e8 06 f4 ff ff       	call   c001d986 <Vm::inbv(unsigned short)>
c001e580:	83 c4 10             	add    esp,0x10
c001e583:	3c 1c                	cmp    al,0x1c
c001e585:	74 04                	je     c001e58b <Vm::faultHandler(regs*)+0x810>
c001e587:	3c 5a                	cmp    al,0x5a
c001e589:	75 eb                	jne    c001e576 <Vm::faultHandler(regs*)+0x7fb>
c001e58b:	3c 1c                	cmp    al,0x1c
c001e58d:	74 04                	je     c001e593 <Vm::faultHandler(regs*)+0x818>
c001e58f:	3c 5a                	cmp    al,0x5a
c001e591:	75 0f                	jne    c001e5a2 <Vm::faultHandler(regs*)+0x827>
c001e593:	83 ec 0c             	sub    esp,0xc
c001e596:	6a 60                	push   0x60
c001e598:	e8 e9 f3 ff ff       	call   c001d986 <Vm::inbv(unsigned short)>
c001e59d:	83 c4 10             	add    esp,0x10
c001e5a0:	eb e9                	jmp    c001e58b <Vm::faultHandler(regs*)+0x810>
c001e5a2:	31 c0                	xor    eax,eax
c001e5a4:	83 c4 1c             	add    esp,0x1c
c001e5a7:	5b                   	pop    ebx
c001e5a8:	5e                   	pop    esi
c001e5a9:	5f                   	pop    edi
c001e5aa:	5d                   	pop    ebp
c001e5ab:	c3                   	ret    

c001e5ac <Vm::fpuInternalTo32(unsigned long long)>:
c001e5ac:	57                   	push   edi
c001e5ad:	56                   	push   esi
c001e5ae:	53                   	push   ebx
c001e5af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e5b7:	89 d6                	mov    esi,edx
c001e5b9:	89 d7                	mov    edi,edx
c001e5bb:	89 c1                	mov    ecx,eax
c001e5bd:	c1 ef 14             	shr    edi,0x14
c001e5c0:	89 d3                	mov    ebx,edx
c001e5c2:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001e5c8:	31 d2                	xor    edx,edx
c001e5ca:	89 f8                	mov    eax,edi
c001e5cc:	81 e6 00 00 00 80    	and    esi,0x80000000
c001e5d2:	bf ff 00 00 00       	mov    edi,0xff
c001e5d7:	05 80 fc ff ff       	add    eax,0xfffffc80
c001e5dc:	83 d2 ff             	adc    edx,0xffffffff
c001e5df:	39 c7                	cmp    edi,eax
c001e5e1:	bf 00 00 00 00       	mov    edi,0x0
c001e5e6:	19 d7                	sbb    edi,edx
c001e5e8:	72 15                	jb     c001e5ff <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001e5ea:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001e5ee:	c1 e0 17             	shl    eax,0x17
c001e5f1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001e5f7:	09 f1                	or     ecx,esi
c001e5f9:	09 c1                	or     ecx,eax
c001e5fb:	89 cf                	mov    edi,ecx
c001e5fd:	eb 02                	jmp    c001e601 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001e5ff:	31 ff                	xor    edi,edi
c001e601:	89 f8                	mov    eax,edi
c001e603:	5b                   	pop    ebx
c001e604:	5e                   	pop    esi
c001e605:	5f                   	pop    edi
c001e606:	c3                   	ret    

c001e607 <Vm::fpuInternalTo64(unsigned long long)>:
c001e607:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e60b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e60f:	c3                   	ret    

c001e610 <Vm::fpu32ToInternal(unsigned int)>:
c001e610:	57                   	push   edi
c001e611:	31 ff                	xor    edi,edi
c001e613:	56                   	push   esi
c001e614:	53                   	push   ebx
c001e615:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e619:	89 cb                	mov    ebx,ecx
c001e61b:	89 ce                	mov    esi,ecx
c001e61d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001e623:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001e629:	c1 e9 17             	shr    ecx,0x17
c001e62c:	89 f0                	mov    eax,esi
c001e62e:	0f b6 d1             	movzx  edx,cl
c001e631:	81 c2 80 03 00 00    	add    edx,0x380
c001e637:	89 d1                	mov    ecx,edx
c001e639:	89 fa                	mov    edx,edi
c001e63b:	c1 e1 14             	shl    ecx,0x14
c001e63e:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001e642:	c1 e0 1d             	shl    eax,0x1d
c001e645:	89 d7                	mov    edi,edx
c001e647:	89 c6                	mov    esi,eax
c001e649:	89 ca                	mov    edx,ecx
c001e64b:	89 f0                	mov    eax,esi
c001e64d:	09 fa                	or     edx,edi
c001e64f:	09 da                	or     edx,ebx
c001e651:	5b                   	pop    ebx
c001e652:	5e                   	pop    esi
c001e653:	5f                   	pop    edi
c001e654:	c3                   	ret    

c001e655 <Vm::fpu64ToInternal(unsigned long long)>:
c001e655:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e659:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e65d:	c3                   	ret    

c001e65e <Vm::fpuFloatToLong(unsigned long long)>:
c001e65e:	57                   	push   edi
c001e65f:	31 c0                	xor    eax,eax
c001e661:	56                   	push   esi
c001e662:	31 d2                	xor    edx,edx
c001e664:	53                   	push   ebx
c001e665:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e669:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e66d:	89 d9                	mov    ecx,ebx
c001e66f:	c1 e9 14             	shr    ecx,0x14
c001e672:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001e678:	89 cf                	mov    edi,ecx
c001e67a:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001e680:	78 33                	js     c001e6b5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e682:	89 d9                	mov    ecx,ebx
c001e684:	89 f0                	mov    eax,esi
c001e686:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e68c:	81 c9 00 00 10 00    	or     ecx,0x100000
c001e692:	89 ca                	mov    edx,ecx
c001e694:	b9 34 00 00 00       	mov    ecx,0x34
c001e699:	29 f9                	sub    ecx,edi
c001e69b:	0f ad d0             	shrd   eax,edx,cl
c001e69e:	d3 fa                	sar    edx,cl
c001e6a0:	f6 c1 20             	test   cl,0x20
c001e6a3:	74 05                	je     c001e6aa <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001e6a5:	89 d0                	mov    eax,edx
c001e6a7:	c1 fa 1f             	sar    edx,0x1f
c001e6aa:	85 db                	test   ebx,ebx
c001e6ac:	79 07                	jns    c001e6b5 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001e6ae:	f7 d8                	neg    eax
c001e6b0:	83 d2 00             	adc    edx,0x0
c001e6b3:	f7 da                	neg    edx
c001e6b5:	5b                   	pop    ebx
c001e6b6:	5e                   	pop    esi
c001e6b7:	5f                   	pop    edi
c001e6b8:	c3                   	ret    

c001e6b9 <Vm::fpuULongToFloat(unsigned long long)>:
c001e6b9:	57                   	push   edi
c001e6ba:	31 c9                	xor    ecx,ecx
c001e6bc:	56                   	push   esi
c001e6bd:	53                   	push   ebx
c001e6be:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e6c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001e6c6:	0f ba e7 14          	bt     edi,0x14
c001e6ca:	72 07                	jb     c001e6d3 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001e6cc:	01 f6                	add    esi,esi
c001e6ce:	11 ff                	adc    edi,edi
c001e6d0:	41                   	inc    ecx
c001e6d1:	eb f3                	jmp    c001e6c6 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001e6d3:	89 fa                	mov    edx,edi
c001e6d5:	89 f0                	mov    eax,esi
c001e6d7:	bb 33 04 00 00       	mov    ebx,0x433
c001e6dc:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001e6e2:	29 cb                	sub    ebx,ecx
c001e6e4:	89 d9                	mov    ecx,ebx
c001e6e6:	5b                   	pop    ebx
c001e6e7:	c1 e1 14             	shl    ecx,0x14
c001e6ea:	5e                   	pop    esi
c001e6eb:	09 ca                	or     edx,ecx
c001e6ed:	5f                   	pop    edi
c001e6ee:	c3                   	ret    

c001e6ef <Vm::fpuLongToFloat(long long)>:
c001e6ef:	56                   	push   esi
c001e6f0:	31 c0                	xor    eax,eax
c001e6f2:	53                   	push   ebx
c001e6f3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e6f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e6fb:	39 c8                	cmp    eax,ecx
c001e6fd:	19 d8                	sbb    eax,ebx
c001e6ff:	7d 04                	jge    c001e705 <Vm::fpuLongToFloat(long long)+0x16>
c001e701:	31 f6                	xor    esi,esi
c001e703:	eb 0c                	jmp    c001e711 <Vm::fpuLongToFloat(long long)+0x22>
c001e705:	f7 d9                	neg    ecx
c001e707:	be 01 00 00 00       	mov    esi,0x1
c001e70c:	83 d3 00             	adc    ebx,0x0
c001e70f:	f7 db                	neg    ebx
c001e711:	31 c0                	xor    eax,eax
c001e713:	0f ba e3 14          	bt     ebx,0x14
c001e717:	72 07                	jb     c001e720 <Vm::fpuLongToFloat(long long)+0x31>
c001e719:	01 c9                	add    ecx,ecx
c001e71b:	11 db                	adc    ebx,ebx
c001e71d:	40                   	inc    eax
c001e71e:	eb f3                	jmp    c001e713 <Vm::fpuLongToFloat(long long)+0x24>
c001e720:	ba 33 04 00 00       	mov    edx,0x433
c001e725:	29 c2                	sub    edx,eax
c001e727:	89 c8                	mov    eax,ecx
c001e729:	c1 e2 14             	shl    edx,0x14
c001e72c:	89 d9                	mov    ecx,ebx
c001e72e:	89 f3                	mov    ebx,esi
c001e730:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001e736:	09 ca                	or     edx,ecx
c001e738:	84 db                	test   bl,bl
c001e73a:	74 06                	je     c001e742 <Vm::fpuLongToFloat(long long)+0x53>
c001e73c:	81 ca 00 00 00 80    	or     edx,0x80000000
c001e742:	5b                   	pop    ebx
c001e743:	5e                   	pop    esi
c001e744:	c3                   	ret    

c001e745 <Vm::fpuGet0()>:
c001e745:	31 c0                	xor    eax,eax
c001e747:	31 d2                	xor    edx,edx
c001e749:	c3                   	ret    

c001e74a <Vm::fpuGet1()>:
c001e74a:	b8 01 00 00 00       	mov    eax,0x1
c001e74f:	31 d2                	xor    edx,edx
c001e751:	c3                   	ret    

c001e752 <Vm::fpuGetPi()>:
c001e752:	b8 03 00 00 00       	mov    eax,0x3
c001e757:	31 d2                	xor    edx,edx
c001e759:	c3                   	ret    

c001e75a <Vm::fpuGetLog2E()>:
c001e75a:	83 ec 18             	sub    esp,0x18
c001e75d:	68 38 ad 02 c0       	push   0xc002ad38
c001e762:	e8 74 b1 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001e767:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e76c:	31 d2                	xor    edx,edx
c001e76e:	83 c4 1c             	add    esp,0x1c
c001e771:	c3                   	ret    

c001e772 <Vm::fpuGetLogE2()>:
c001e772:	83 ec 18             	sub    esp,0x18
c001e775:	68 44 ad 02 c0       	push   0xc002ad44
c001e77a:	e8 5c b1 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001e77f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e784:	31 d2                	xor    edx,edx
c001e786:	83 c4 1c             	add    esp,0x1c
c001e789:	c3                   	ret    

c001e78a <Vm::fpuGetLog210()>:
c001e78a:	83 ec 18             	sub    esp,0x18
c001e78d:	68 50 ad 02 c0       	push   0xc002ad50
c001e792:	e8 44 b1 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001e797:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e79c:	31 d2                	xor    edx,edx
c001e79e:	83 c4 1c             	add    esp,0x1c
c001e7a1:	c3                   	ret    

c001e7a2 <Vm::fpuGetLog102()>:
c001e7a2:	83 ec 18             	sub    esp,0x18
c001e7a5:	68 5d ad 02 c0       	push   0xc002ad5d
c001e7aa:	e8 2c b1 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001e7af:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001e7b4:	31 d2                	xor    edx,edx
c001e7b6:	83 c4 1c             	add    esp,0x1c
c001e7b9:	c3                   	ret    

c001e7ba <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001e7ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7be:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001e7c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e7c6:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001e7ca:	0f 92 c0             	setb   al
c001e7cd:	c3                   	ret    

c001e7ce <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001e7ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e7d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7d6:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001e7da:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001e7de:	09 c2                	or     edx,eax
c001e7e0:	0f 94 c0             	sete   al
c001e7e3:	c3                   	ret    

c001e7e4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001e7e4:	57                   	push   edi
c001e7e5:	56                   	push   esi
c001e7e6:	53                   	push   ebx
c001e7e7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e7ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001e7f3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001e7f7:	57                   	push   edi
c001e7f8:	56                   	push   esi
c001e7f9:	53                   	push   ebx
c001e7fa:	51                   	push   ecx
c001e7fb:	e8 ce ff ff ff       	call   c001e7ce <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001e800:	83 c4 10             	add    esp,0x10
c001e803:	88 c2                	mov    dl,al
c001e805:	31 c0                	xor    eax,eax
c001e807:	84 d2                	test   dl,dl
c001e809:	75 0c                	jne    c001e817 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001e80b:	57                   	push   edi
c001e80c:	56                   	push   esi
c001e80d:	53                   	push   ebx
c001e80e:	51                   	push   ecx
c001e80f:	e8 a6 ff ff ff       	call   c001e7ba <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001e814:	83 c4 10             	add    esp,0x10
c001e817:	83 e0 01             	and    eax,0x1
c001e81a:	5b                   	pop    ebx
c001e81b:	88 c1                	mov    cl,al
c001e81d:	83 e2 01             	and    edx,0x1
c001e820:	a0 41 df 02 c0       	mov    al,ds:0xc002df41
c001e825:	c1 e2 06             	shl    edx,0x6
c001e828:	83 e0 ba             	and    eax,0xffffffba
c001e82b:	5e                   	pop    esi
c001e82c:	09 c8                	or     eax,ecx
c001e82e:	5f                   	pop    edi
c001e82f:	09 d0                	or     eax,edx
c001e831:	a2 41 df 02 c0       	mov    ds:0xc002df41,al
c001e836:	c3                   	ret    

c001e837 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001e837:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e83b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e83f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001e843:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001e847:	c3                   	ret    

c001e848 <Vm::fpuAbs(unsigned long long)>:
c001e848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e84c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e850:	c3                   	ret    

c001e851 <Vm::fpuChs(unsigned long long)>:
c001e851:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e855:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e859:	f7 d8                	neg    eax
c001e85b:	83 d2 00             	adc    edx,0x0
c001e85e:	f7 da                	neg    edx
c001e860:	c3                   	ret    

c001e861 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001e861:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001e865:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001e86a:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001e86e:	eb c7                	jmp    c001e837 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001e870 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001e870:	53                   	push   ebx
c001e871:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e875:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e879:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e87d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e881:	0f af ca             	imul   ecx,edx
c001e884:	0f af d8             	imul   ebx,eax
c001e887:	f7 e2                	mul    edx
c001e889:	01 d9                	add    ecx,ebx
c001e88b:	5b                   	pop    ebx
c001e88c:	01 ca                	add    edx,ecx
c001e88e:	c3                   	ret    

c001e88f <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001e88f:	83 ec 0c             	sub    esp,0xc
c001e892:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e896:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e89a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e89e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e8a2:	e8 45 6b 00 00       	call   c00253ec <__udivdi3>
c001e8a7:	83 c4 1c             	add    esp,0x1c
c001e8aa:	c3                   	ret    

c001e8ab <Vm::fpuSquare(unsigned long long)>:
c001e8ab:	50                   	push   eax
c001e8ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e8b4:	52                   	push   edx
c001e8b5:	50                   	push   eax
c001e8b6:	52                   	push   edx
c001e8b7:	50                   	push   eax
c001e8b8:	e8 b3 ff ff ff       	call   c001e870 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001e8bd:	83 c4 14             	add    esp,0x14
c001e8c0:	c3                   	ret    

c001e8c1 <Vm::fpuGetReg(int)>:
c001e8c1:	83 ec 0c             	sub    esp,0xc
c001e8c4:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e8c9:	76 10                	jbe    c001e8db <Vm::fpuGetReg(int)+0x1a>
c001e8cb:	83 ec 0c             	sub    esp,0xc
c001e8ce:	68 6a ad 02 c0       	push   0xc002ad6a
c001e8d3:	e8 03 b0 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001e8d8:	83 c4 10             	add    esp,0x10
c001e8db:	a0 41 df 02 c0       	mov    al,ds:0xc002df41
c001e8e0:	b9 08 00 00 00       	mov    ecx,0x8
c001e8e5:	c0 e8 03             	shr    al,0x3
c001e8e8:	83 e0 07             	and    eax,0x7
c001e8eb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e8ef:	99                   	cdq    
c001e8f0:	f7 f9                	idiv   ecx
c001e8f2:	8b 04 d5 44 df 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd20bc]
c001e8f9:	8b 14 d5 48 df 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd20b8]
c001e900:	83 c4 0c             	add    esp,0xc
c001e903:	c3                   	ret    

c001e904 <Vm::fpuSetReg(int, unsigned long long)>:
c001e904:	57                   	push   edi
c001e905:	56                   	push   esi
c001e906:	52                   	push   edx
c001e907:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001e90b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e90f:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001e914:	76 10                	jbe    c001e926 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001e916:	83 ec 0c             	sub    esp,0xc
c001e919:	68 7d ad 02 c0       	push   0xc002ad7d
c001e91e:	e8 b8 af ff ff       	call   c00198db <Krnl::panic(char const*)>
c001e923:	83 c4 10             	add    esp,0x10
c001e926:	a0 41 df 02 c0       	mov    al,ds:0xc002df41
c001e92b:	b9 08 00 00 00       	mov    ecx,0x8
c001e930:	c0 e8 03             	shr    al,0x3
c001e933:	83 e0 07             	and    eax,0x7
c001e936:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e93a:	99                   	cdq    
c001e93b:	f7 f9                	idiv   ecx
c001e93d:	89 34 d5 44 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd20bc],esi
c001e944:	89 3c d5 48 df 02 c0 	mov    DWORD PTR [edx*8-0x3ffd20b8],edi
c001e94b:	58                   	pop    eax
c001e94c:	5e                   	pop    esi
c001e94d:	5f                   	pop    edi
c001e94e:	c3                   	ret    

c001e94f <Vm::fpuPush(unsigned long long)>:
c001e94f:	a0 41 df 02 c0       	mov    al,ds:0xc002df41
c001e954:	c0 e8 03             	shr    al,0x3
c001e957:	83 e0 07             	and    eax,0x7
c001e95a:	83 c0 07             	add    eax,0x7
c001e95d:	88 c2                	mov    dl,al
c001e95f:	83 e0 07             	and    eax,0x7
c001e962:	83 e2 07             	and    edx,0x7
c001e965:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001e96c:	8a 15 41 df 02 c0    	mov    dl,BYTE PTR ds:0xc002df41
c001e972:	83 e2 c7             	and    edx,0xffffffc7
c001e975:	09 ca                	or     edx,ecx
c001e977:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e97b:	88 15 41 df 02 c0    	mov    BYTE PTR ds:0xc002df41,dl
c001e981:	89 0c c5 48 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20b8],ecx
c001e988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e98c:	89 14 c5 44 df 02 c0 	mov    DWORD PTR [eax*8-0x3ffd20bc],edx
c001e993:	a1 84 df 02 c0       	mov    eax,ds:0xc002df84
c001e998:	83 f8 08             	cmp    eax,0x8
c001e99b:	75 08                	jne    c001e9a5 <Vm::fpuPush(unsigned long long)+0x56>
c001e99d:	80 0d 40 df 02 c0 40 	or     BYTE PTR ds:0xc002df40,0x40
c001e9a4:	c3                   	ret    
c001e9a5:	40                   	inc    eax
c001e9a6:	a3 84 df 02 c0       	mov    ds:0xc002df84,eax
c001e9ab:	c3                   	ret    

c001e9ac <Vm::fpuPop()>:
c001e9ac:	8a 0d 41 df 02 c0    	mov    cl,BYTE PTR ds:0xc002df41
c001e9b2:	53                   	push   ebx
c001e9b3:	c0 e9 03             	shr    cl,0x3
c001e9b6:	8a 1d 41 df 02 c0    	mov    bl,BYTE PTR ds:0xc002df41
c001e9bc:	83 e1 07             	and    ecx,0x7
c001e9bf:	83 e3 c7             	and    ebx,0xffffffc7
c001e9c2:	8b 04 cd 44 df 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd20bc]
c001e9c9:	8b 14 cd 48 df 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd20b8]
c001e9d0:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001e9d7:	83 e1 38             	and    ecx,0x38
c001e9da:	09 d9                	or     ecx,ebx
c001e9dc:	88 0d 41 df 02 c0    	mov    BYTE PTR ds:0xc002df41,cl
c001e9e2:	8b 0d 84 df 02 c0    	mov    ecx,DWORD PTR ds:0xc002df84
c001e9e8:	85 c9                	test   ecx,ecx
c001e9ea:	74 09                	je     c001e9f5 <Vm::fpuPop()+0x49>
c001e9ec:	49                   	dec    ecx
c001e9ed:	89 0d 84 df 02 c0    	mov    DWORD PTR ds:0xc002df84,ecx
c001e9f3:	eb 07                	jmp    c001e9fc <Vm::fpuPop()+0x50>
c001e9f5:	80 0d 40 df 02 c0 40 	or     BYTE PTR ds:0xc002df40,0x40
c001e9fc:	5b                   	pop    ebx
c001e9fd:	c3                   	ret    

c001e9fe <Vm::x87Handler(regs*)>:
c001e9fe:	55                   	push   ebp
c001e9ff:	57                   	push   edi
c001ea00:	56                   	push   esi
c001ea01:	53                   	push   ebx
c001ea02:	83 ec 1c             	sub    esp,0x1c
c001ea05:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea09:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001ea0e:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001ea11:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001ea19:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001ea1d:	50                   	push   eax
c001ea1e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001ea22:	50                   	push   eax
c001ea23:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ea27:	50                   	push   eax
c001ea28:	53                   	push   ebx
c001ea29:	e8 de a6 ff ff       	call   c001910c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001ea2e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001ea31:	83 c4 10             	add    esp,0x10
c001ea34:	89 c6                	mov    esi,eax
c001ea36:	80 fa d9             	cmp    dl,0xd9
c001ea39:	0f 85 52 01 00 00    	jne    c001eb91 <Vm::x87Handler(regs*)+0x193>
c001ea3f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea43:	8d 50 20             	lea    edx,[eax+0x20]
c001ea46:	80 fa 0e             	cmp    dl,0xe
c001ea49:	0f 87 86 00 00 00    	ja     c001ead5 <Vm::x87Handler(regs*)+0xd7>
c001ea4f:	0f b6 d2             	movzx  edx,dl
c001ea52:	ff 24 95 90 ad 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5270]
c001ea59:	e8 e7 fc ff ff       	call   c001e745 <Vm::fpuGet0()>
c001ea5e:	eb 05                	jmp    c001ea65 <Vm::x87Handler(regs*)+0x67>
c001ea60:	e8 e5 fc ff ff       	call   c001e74a <Vm::fpuGet1()>
c001ea65:	57                   	push   edi
c001ea66:	57                   	push   edi
c001ea67:	52                   	push   edx
c001ea68:	50                   	push   eax
c001ea69:	e8 e1 fe ff ff       	call   c001e94f <Vm::fpuPush(unsigned long long)>
c001ea6e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001ea72:	83 c4 10             	add    esp,0x10
c001ea75:	b0 01                	mov    al,0x1
c001ea77:	e9 e3 09 00 00       	jmp    c001f45f <Vm::x87Handler(regs*)+0xa61>
c001ea7c:	83 ec 0c             	sub    esp,0xc
c001ea7f:	6a 00                	push   0x0
c001ea81:	e8 3b fe ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ea86:	59                   	pop    ecx
c001ea87:	5e                   	pop    esi
c001ea88:	52                   	push   edx
c001ea89:	50                   	push   eax
c001ea8a:	e8 c2 fd ff ff       	call   c001e851 <Vm::fpuChs(unsigned long long)>
c001ea8f:	eb 13                	jmp    c001eaa4 <Vm::x87Handler(regs*)+0xa6>
c001ea91:	83 ec 0c             	sub    esp,0xc
c001ea94:	6a 00                	push   0x0
c001ea96:	e8 26 fe ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ea9b:	5f                   	pop    edi
c001ea9c:	5d                   	pop    ebp
c001ea9d:	52                   	push   edx
c001ea9e:	50                   	push   eax
c001ea9f:	e8 a4 fd ff ff       	call   c001e848 <Vm::fpuAbs(unsigned long long)>
c001eaa4:	83 c4 0c             	add    esp,0xc
c001eaa7:	52                   	push   edx
c001eaa8:	50                   	push   eax
c001eaa9:	6a 00                	push   0x0
c001eaab:	e8 54 fe ff ff       	call   c001e904 <Vm::fpuSetReg(int, unsigned long long)>
c001eab0:	eb bc                	jmp    c001ea6e <Vm::x87Handler(regs*)+0x70>
c001eab2:	e8 d3 fc ff ff       	call   c001e78a <Vm::fpuGetLog210()>
c001eab7:	eb ac                	jmp    c001ea65 <Vm::x87Handler(regs*)+0x67>
c001eab9:	e8 9c fc ff ff       	call   c001e75a <Vm::fpuGetLog2E()>
c001eabe:	eb a5                	jmp    c001ea65 <Vm::x87Handler(regs*)+0x67>
c001eac0:	e8 8d fc ff ff       	call   c001e752 <Vm::fpuGetPi()>
c001eac5:	eb 9e                	jmp    c001ea65 <Vm::x87Handler(regs*)+0x67>
c001eac7:	e8 d6 fc ff ff       	call   c001e7a2 <Vm::fpuGetLog102()>
c001eacc:	eb 97                	jmp    c001ea65 <Vm::x87Handler(regs*)+0x67>
c001eace:	e8 9f fc ff ff       	call   c001e772 <Vm::fpuGetLogE2()>
c001ead3:	eb 90                	jmp    c001ea65 <Vm::x87Handler(regs*)+0x67>
c001ead5:	8d 50 40             	lea    edx,[eax+0x40]
c001ead8:	80 fa 07             	cmp    dl,0x7
c001eadb:	77 15                	ja     c001eaf2 <Vm::x87Handler(regs*)+0xf4>
c001eadd:	83 ec 0c             	sub    esp,0xc
c001eae0:	2d c0 00 00 00       	sub    eax,0xc0
c001eae5:	50                   	push   eax
c001eae6:	e8 d6 fd ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001eaeb:	59                   	pop    ecx
c001eaec:	5e                   	pop    esi
c001eaed:	e9 75 ff ff ff       	jmp    c001ea67 <Vm::x87Handler(regs*)+0x69>
c001eaf2:	8d 50 38             	lea    edx,[eax+0x38]
c001eaf5:	80 fa 07             	cmp    dl,0x7
c001eaf8:	77 3c                	ja     c001eb36 <Vm::x87Handler(regs*)+0x138>
c001eafa:	83 ec 0c             	sub    esp,0xc
c001eafd:	2d c8 00 00 00       	sub    eax,0xc8
c001eb02:	50                   	push   eax
c001eb03:	e8 b9 fd ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001eb08:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eb0f:	89 c6                	mov    esi,eax
c001eb11:	89 d7                	mov    edi,edx
c001eb13:	e8 a9 fd ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001eb18:	83 c4 0c             	add    esp,0xc
c001eb1b:	52                   	push   edx
c001eb1c:	50                   	push   eax
c001eb1d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eb21:	2d c8 00 00 00       	sub    eax,0xc8
c001eb26:	50                   	push   eax
c001eb27:	e8 d8 fd ff ff       	call   c001e904 <Vm::fpuSetReg(int, unsigned long long)>
c001eb2c:	83 c4 0c             	add    esp,0xc
c001eb2f:	57                   	push   edi
c001eb30:	56                   	push   esi
c001eb31:	e9 73 ff ff ff       	jmp    c001eaa9 <Vm::x87Handler(regs*)+0xab>
c001eb36:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001eb3a:	84 d2                	test   dl,dl
c001eb3c:	75 0f                	jne    c001eb4d <Vm::x87Handler(regs*)+0x14f>
c001eb3e:	83 ec 0c             	sub    esp,0xc
c001eb41:	ff 36                	push   DWORD PTR [esi]
c001eb43:	e8 c8 fa ff ff       	call   c001e610 <Vm::fpu32ToInternal(unsigned int)>
c001eb48:	e9 bf 00 00 00       	jmp    c001ec0c <Vm::x87Handler(regs*)+0x20e>
c001eb4d:	80 fa 03             	cmp    dl,0x3
c001eb50:	75 13                	jne    c001eb65 <Vm::x87Handler(regs*)+0x167>
c001eb52:	e8 55 fe ff ff       	call   c001e9ac <Vm::fpuPop()>
c001eb57:	55                   	push   ebp
c001eb58:	55                   	push   ebp
c001eb59:	52                   	push   edx
c001eb5a:	50                   	push   eax
c001eb5b:	e8 4c fa ff ff       	call   c001e5ac <Vm::fpuInternalTo32(unsigned long long)>
c001eb60:	e9 88 00 00 00       	jmp    c001ebed <Vm::x87Handler(regs*)+0x1ef>
c001eb65:	80 fa 05             	cmp    dl,0x5
c001eb68:	75 0e                	jne    c001eb78 <Vm::x87Handler(regs*)+0x17a>
c001eb6a:	66 8b 06             	mov    ax,WORD PTR [esi]
c001eb6d:	66 a3 42 df 02 c0    	mov    ds:0xc002df42,ax
c001eb73:	e9 df 00 00 00       	jmp    c001ec57 <Vm::x87Handler(regs*)+0x259>
c001eb78:	31 c0                	xor    eax,eax
c001eb7a:	80 fa 07             	cmp    dl,0x7
c001eb7d:	0f 85 dc 08 00 00    	jne    c001f45f <Vm::x87Handler(regs*)+0xa61>
c001eb83:	66 a1 42 df 02 c0    	mov    ax,ds:0xc002df42
c001eb89:	66 89 06             	mov    WORD PTR [esi],ax
c001eb8c:	e9 c6 00 00 00       	jmp    c001ec57 <Vm::x87Handler(regs*)+0x259>
c001eb91:	80 fa d8             	cmp    dl,0xd8
c001eb94:	0f 84 c9 00 00 00    	je     c001ec63 <Vm::x87Handler(regs*)+0x265>
c001eb9a:	80 fa dc             	cmp    dl,0xdc
c001eb9d:	0f 84 0d 02 00 00    	je     c001edb0 <Vm::x87Handler(regs*)+0x3b2>
c001eba3:	80 fa de             	cmp    dl,0xde
c001eba6:	0f 84 cd 02 00 00    	je     c001ee79 <Vm::x87Handler(regs*)+0x47b>
c001ebac:	80 fa dd             	cmp    dl,0xdd
c001ebaf:	0f 84 5f 04 00 00    	je     c001f014 <Vm::x87Handler(regs*)+0x616>
c001ebb5:	80 fa da             	cmp    dl,0xda
c001ebb8:	0f 84 24 05 00 00    	je     c001f0e2 <Vm::x87Handler(regs*)+0x6e4>
c001ebbe:	80 fa df             	cmp    dl,0xdf
c001ebc1:	0f 84 68 05 00 00    	je     c001f12f <Vm::x87Handler(regs*)+0x731>
c001ebc7:	31 c0                	xor    eax,eax
c001ebc9:	80 fa db             	cmp    dl,0xdb
c001ebcc:	0f 85 8d 08 00 00    	jne    c001f45f <Vm::x87Handler(regs*)+0xa61>
c001ebd2:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ebd6:	80 fa 03             	cmp    dl,0x3
c001ebd9:	0f 85 70 06 00 00    	jne    c001f24f <Vm::x87Handler(regs*)+0x851>
c001ebdf:	e8 c8 fd ff ff       	call   c001e9ac <Vm::fpuPop()>
c001ebe4:	55                   	push   ebp
c001ebe5:	55                   	push   ebp
c001ebe6:	52                   	push   edx
c001ebe7:	50                   	push   eax
c001ebe8:	e8 71 fa ff ff       	call   c001e65e <Vm::fpuFloatToLong(unsigned long long)>
c001ebed:	83 c4 10             	add    esp,0x10
c001ebf0:	89 06                	mov    DWORD PTR [esi],eax
c001ebf2:	eb 63                	jmp    c001ec57 <Vm::x87Handler(regs*)+0x259>
c001ebf4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ebf8:	84 d2                	test   dl,dl
c001ebfa:	0f 85 e6 05 00 00    	jne    c001f1e6 <Vm::x87Handler(regs*)+0x7e8>
c001ec00:	57                   	push   edi
c001ec01:	57                   	push   edi
c001ec02:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ec05:	ff 36                	push   DWORD PTR [esi]
c001ec07:	e8 49 fa ff ff       	call   c001e655 <Vm::fpu64ToInternal(unsigned long long)>
c001ec0c:	5e                   	pop    esi
c001ec0d:	5f                   	pop    edi
c001ec0e:	52                   	push   edx
c001ec0f:	50                   	push   eax
c001ec10:	e8 3a fd ff ff       	call   c001e94f <Vm::fpuPush(unsigned long long)>
c001ec15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ec19:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ec1c:	e9 51 fe ff ff       	jmp    c001ea72 <Vm::x87Handler(regs*)+0x74>
c001ec21:	80 fa 03             	cmp    dl,0x3
c001ec24:	0f 85 d7 06 00 00    	jne    c001f301 <Vm::x87Handler(regs*)+0x903>
c001ec2a:	57                   	push   edi
c001ec2b:	57                   	push   edi
c001ec2c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ec2f:	ff 36                	push   DWORD PTR [esi]
c001ec31:	e8 1f fa ff ff       	call   c001e655 <Vm::fpu64ToInternal(unsigned long long)>
c001ec36:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec3d:	89 c6                	mov    esi,eax
c001ec3f:	89 d7                	mov    edi,edx
c001ec41:	e8 7b fc ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ec46:	57                   	push   edi
c001ec47:	56                   	push   esi
c001ec48:	52                   	push   edx
c001ec49:	50                   	push   eax
c001ec4a:	e8 95 fb ff ff       	call   c001e7e4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ec4f:	83 c4 20             	add    esp,0x20
c001ec52:	e8 55 fd ff ff       	call   c001e9ac <Vm::fpuPop()>
c001ec57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ec5b:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ec5e:	e9 12 fe ff ff       	jmp    c001ea75 <Vm::x87Handler(regs*)+0x77>
c001ec63:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ec67:	8d 50 40             	lea    edx,[eax+0x40]
c001ec6a:	80 fa 07             	cmp    dl,0x7
c001ec6d:	77 29                	ja     c001ec98 <Vm::x87Handler(regs*)+0x29a>
c001ec6f:	83 ec 0c             	sub    esp,0xc
c001ec72:	2d c0 00 00 00       	sub    eax,0xc0
c001ec77:	50                   	push   eax
c001ec78:	e8 44 fc ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ec7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ec84:	89 c6                	mov    esi,eax
c001ec86:	89 d7                	mov    edi,edx
c001ec88:	e8 34 fc ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ec8d:	57                   	push   edi
c001ec8e:	56                   	push   esi
c001ec8f:	52                   	push   edx
c001ec90:	50                   	push   eax
c001ec91:	e8 a1 fb ff ff       	call   c001e837 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ec96:	eb 2f                	jmp    c001ecc7 <Vm::x87Handler(regs*)+0x2c9>
c001ec98:	8d 50 38             	lea    edx,[eax+0x38]
c001ec9b:	80 fa 07             	cmp    dl,0x7
c001ec9e:	77 2f                	ja     c001eccf <Vm::x87Handler(regs*)+0x2d1>
c001eca0:	83 ec 0c             	sub    esp,0xc
c001eca3:	2d c8 00 00 00       	sub    eax,0xc8
c001eca8:	50                   	push   eax
c001eca9:	e8 13 fc ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ecae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ecb5:	89 c6                	mov    esi,eax
c001ecb7:	89 d7                	mov    edi,edx
c001ecb9:	e8 03 fc ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ecbe:	57                   	push   edi
c001ecbf:	56                   	push   esi
c001ecc0:	52                   	push   edx
c001ecc1:	50                   	push   eax
c001ecc2:	e8 a9 fb ff ff       	call   c001e870 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ecc7:	83 c4 1c             	add    esp,0x1c
c001ecca:	e9 d8 fd ff ff       	jmp    c001eaa7 <Vm::x87Handler(regs*)+0xa9>
c001eccf:	8d 50 30             	lea    edx,[eax+0x30]
c001ecd2:	80 fa 07             	cmp    dl,0x7
c001ecd5:	77 0d                	ja     c001ece4 <Vm::x87Handler(regs*)+0x2e6>
c001ecd7:	83 ec 0c             	sub    esp,0xc
c001ecda:	2d d0 00 00 00       	sub    eax,0xd0
c001ecdf:	e9 99 03 00 00       	jmp    c001f07d <Vm::x87Handler(regs*)+0x67f>
c001ece4:	8d 50 28             	lea    edx,[eax+0x28]
c001ece7:	80 fa 07             	cmp    dl,0x7
c001ecea:	77 0d                	ja     c001ecf9 <Vm::x87Handler(regs*)+0x2fb>
c001ecec:	83 ec 0c             	sub    esp,0xc
c001ecef:	2d d8 00 00 00       	sub    eax,0xd8
c001ecf4:	e9 c0 03 00 00       	jmp    c001f0b9 <Vm::x87Handler(regs*)+0x6bb>
c001ecf9:	8d 50 20             	lea    edx,[eax+0x20]
c001ecfc:	80 fa 07             	cmp    dl,0x7
c001ecff:	77 1b                	ja     c001ed1c <Vm::x87Handler(regs*)+0x31e>
c001ed01:	83 ec 0c             	sub    esp,0xc
c001ed04:	2d e0 00 00 00       	sub    eax,0xe0
c001ed09:	50                   	push   eax
c001ed0a:	e8 b2 fb ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ed0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed16:	89 c6                	mov    esi,eax
c001ed18:	89 d7                	mov    edi,edx
c001ed1a:	eb 22                	jmp    c001ed3e <Vm::x87Handler(regs*)+0x340>
c001ed1c:	8d 50 18             	lea    edx,[eax+0x18]
c001ed1f:	80 fa 07             	cmp    dl,0x7
c001ed22:	77 2d                	ja     c001ed51 <Vm::x87Handler(regs*)+0x353>
c001ed24:	83 ec 0c             	sub    esp,0xc
c001ed27:	6a 00                	push   0x0
c001ed29:	e8 93 fb ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ed2e:	89 c6                	mov    esi,eax
c001ed30:	89 d7                	mov    edi,edx
c001ed32:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed36:	2d e8 00 00 00       	sub    eax,0xe8
c001ed3b:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed3e:	e8 7e fb ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ed43:	57                   	push   edi
c001ed44:	56                   	push   esi
c001ed45:	52                   	push   edx
c001ed46:	50                   	push   eax
c001ed47:	e8 15 fb ff ff       	call   c001e861 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ed4c:	e9 76 ff ff ff       	jmp    c001ecc7 <Vm::x87Handler(regs*)+0x2c9>
c001ed51:	8d 50 10             	lea    edx,[eax+0x10]
c001ed54:	80 fa 07             	cmp    dl,0x7
c001ed57:	77 1b                	ja     c001ed74 <Vm::x87Handler(regs*)+0x376>
c001ed59:	83 ec 0c             	sub    esp,0xc
c001ed5c:	2d f0 00 00 00       	sub    eax,0xf0
c001ed61:	50                   	push   eax
c001ed62:	e8 5a fb ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ed67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ed6e:	89 c6                	mov    esi,eax
c001ed70:	89 d7                	mov    edi,edx
c001ed72:	eb 22                	jmp    c001ed96 <Vm::x87Handler(regs*)+0x398>
c001ed74:	3c f7                	cmp    al,0xf7
c001ed76:	0f 86 d1 03 00 00    	jbe    c001f14d <Vm::x87Handler(regs*)+0x74f>
c001ed7c:	83 ec 0c             	sub    esp,0xc
c001ed7f:	6a 00                	push   0x0
c001ed81:	e8 3b fb ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ed86:	89 c6                	mov    esi,eax
c001ed88:	89 d7                	mov    edi,edx
c001ed8a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ed8e:	2d f8 00 00 00       	sub    eax,0xf8
c001ed93:	89 04 24             	mov    DWORD PTR [esp],eax
c001ed96:	e8 26 fb ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ed9b:	57                   	push   edi
c001ed9c:	56                   	push   esi
c001ed9d:	52                   	push   edx
c001ed9e:	50                   	push   eax
c001ed9f:	e8 eb fa ff ff       	call   c001e88f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001eda4:	83 c4 1c             	add    esp,0x1c
c001eda7:	52                   	push   edx
c001eda8:	50                   	push   eax
c001eda9:	6a 00                	push   0x0
c001edab:	e9 51 02 00 00       	jmp    c001f001 <Vm::x87Handler(regs*)+0x603>
c001edb0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edb4:	8d 50 40             	lea    edx,[eax+0x40]
c001edb7:	80 fa 07             	cmp    dl,0x7
c001edba:	77 37                	ja     c001edf3 <Vm::x87Handler(regs*)+0x3f5>
c001edbc:	83 ec 0c             	sub    esp,0xc
c001edbf:	2d c0 00 00 00       	sub    eax,0xc0
c001edc4:	50                   	push   eax
c001edc5:	e8 f7 fa ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001edca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001edd1:	89 c6                	mov    esi,eax
c001edd3:	89 d7                	mov    edi,edx
c001edd5:	e8 e7 fa ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001edda:	57                   	push   edi
c001eddb:	56                   	push   esi
c001eddc:	52                   	push   edx
c001eddd:	50                   	push   eax
c001edde:	e8 54 fa ff ff       	call   c001e837 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ede3:	83 c4 1c             	add    esp,0x1c
c001ede6:	52                   	push   edx
c001ede7:	50                   	push   eax
c001ede8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edec:	2d c0 00 00 00       	sub    eax,0xc0
c001edf1:	eb 3d                	jmp    c001ee30 <Vm::x87Handler(regs*)+0x432>
c001edf3:	8d 50 38             	lea    edx,[eax+0x38]
c001edf6:	80 fa 07             	cmp    dl,0x7
c001edf9:	77 3b                	ja     c001ee36 <Vm::x87Handler(regs*)+0x438>
c001edfb:	83 ec 0c             	sub    esp,0xc
c001edfe:	2d c8 00 00 00       	sub    eax,0xc8
c001ee03:	50                   	push   eax
c001ee04:	e8 b8 fa ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ee09:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee10:	89 c6                	mov    esi,eax
c001ee12:	89 d7                	mov    edi,edx
c001ee14:	e8 a8 fa ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ee19:	57                   	push   edi
c001ee1a:	56                   	push   esi
c001ee1b:	52                   	push   edx
c001ee1c:	50                   	push   eax
c001ee1d:	e8 4e fa ff ff       	call   c001e870 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ee22:	83 c4 1c             	add    esp,0x1c
c001ee25:	52                   	push   edx
c001ee26:	50                   	push   eax
c001ee27:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee2b:	2d c8 00 00 00       	sub    eax,0xc8
c001ee30:	50                   	push   eax
c001ee31:	e9 75 fc ff ff       	jmp    c001eaab <Vm::x87Handler(regs*)+0xad>
c001ee36:	83 c0 18             	add    eax,0x18
c001ee39:	3c 07                	cmp    al,0x7
c001ee3b:	0f 87 3b 04 00 00    	ja     c001f27c <Vm::x87Handler(regs*)+0x87e>
c001ee41:	83 ec 0c             	sub    esp,0xc
c001ee44:	6a 00                	push   0x0
c001ee46:	e8 76 fa ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ee4b:	89 c6                	mov    esi,eax
c001ee4d:	89 d7                	mov    edi,edx
c001ee4f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee53:	2d e8 00 00 00       	sub    eax,0xe8
c001ee58:	89 04 24             	mov    DWORD PTR [esp],eax
c001ee5b:	e8 61 fa ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ee60:	57                   	push   edi
c001ee61:	56                   	push   esi
c001ee62:	52                   	push   edx
c001ee63:	50                   	push   eax
c001ee64:	e8 f8 f9 ff ff       	call   c001e861 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ee69:	83 c4 1c             	add    esp,0x1c
c001ee6c:	52                   	push   edx
c001ee6d:	50                   	push   eax
c001ee6e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee72:	2d e8 00 00 00       	sub    eax,0xe8
c001ee77:	eb b7                	jmp    c001ee30 <Vm::x87Handler(regs*)+0x432>
c001ee79:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ee7d:	8d 50 40             	lea    edx,[eax+0x40]
c001ee80:	80 fa 07             	cmp    dl,0x7
c001ee83:	77 3a                	ja     c001eebf <Vm::x87Handler(regs*)+0x4c1>
c001ee85:	83 ec 0c             	sub    esp,0xc
c001ee88:	2d c0 00 00 00       	sub    eax,0xc0
c001ee8d:	50                   	push   eax
c001ee8e:	e8 2e fa ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ee93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ee9a:	89 c6                	mov    esi,eax
c001ee9c:	89 d7                	mov    edi,edx
c001ee9e:	e8 1e fa ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001eea3:	57                   	push   edi
c001eea4:	56                   	push   esi
c001eea5:	52                   	push   edx
c001eea6:	50                   	push   eax
c001eea7:	e8 8b f9 ff ff       	call   c001e837 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001eeac:	83 c4 1c             	add    esp,0x1c
c001eeaf:	52                   	push   edx
c001eeb0:	50                   	push   eax
c001eeb1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eeb5:	2d c0 00 00 00       	sub    eax,0xc0
c001eeba:	e9 9e 01 00 00       	jmp    c001f05d <Vm::x87Handler(regs*)+0x65f>
c001eebf:	8d 50 20             	lea    edx,[eax+0x20]
c001eec2:	80 fa 07             	cmp    dl,0x7
c001eec5:	77 3a                	ja     c001ef01 <Vm::x87Handler(regs*)+0x503>
c001eec7:	83 ec 0c             	sub    esp,0xc
c001eeca:	2d e0 00 00 00       	sub    eax,0xe0
c001eecf:	50                   	push   eax
c001eed0:	e8 ec f9 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001eed5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001eedc:	89 c6                	mov    esi,eax
c001eede:	89 d7                	mov    edi,edx
c001eee0:	e8 dc f9 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001eee5:	57                   	push   edi
c001eee6:	56                   	push   esi
c001eee7:	52                   	push   edx
c001eee8:	50                   	push   eax
c001eee9:	e8 73 f9 ff ff       	call   c001e861 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001eeee:	83 c4 1c             	add    esp,0x1c
c001eef1:	52                   	push   edx
c001eef2:	50                   	push   eax
c001eef3:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eef7:	2d e0 00 00 00       	sub    eax,0xe0
c001eefc:	e9 5c 01 00 00       	jmp    c001f05d <Vm::x87Handler(regs*)+0x65f>
c001ef01:	8d 50 18             	lea    edx,[eax+0x18]
c001ef04:	80 fa 07             	cmp    dl,0x7
c001ef07:	77 3b                	ja     c001ef44 <Vm::x87Handler(regs*)+0x546>
c001ef09:	83 ec 0c             	sub    esp,0xc
c001ef0c:	6a 00                	push   0x0
c001ef0e:	e8 ae f9 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ef13:	89 c6                	mov    esi,eax
c001ef15:	89 d7                	mov    edi,edx
c001ef17:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef1b:	2d e8 00 00 00       	sub    eax,0xe8
c001ef20:	89 04 24             	mov    DWORD PTR [esp],eax
c001ef23:	e8 99 f9 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ef28:	57                   	push   edi
c001ef29:	56                   	push   esi
c001ef2a:	52                   	push   edx
c001ef2b:	50                   	push   eax
c001ef2c:	e8 30 f9 ff ff       	call   c001e861 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ef31:	83 c4 1c             	add    esp,0x1c
c001ef34:	52                   	push   edx
c001ef35:	50                   	push   eax
c001ef36:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef3a:	2d e8 00 00 00       	sub    eax,0xe8
c001ef3f:	e9 19 01 00 00       	jmp    c001f05d <Vm::x87Handler(regs*)+0x65f>
c001ef44:	8d 50 38             	lea    edx,[eax+0x38]
c001ef47:	80 fa 07             	cmp    dl,0x7
c001ef4a:	77 37                	ja     c001ef83 <Vm::x87Handler(regs*)+0x585>
c001ef4c:	83 ec 0c             	sub    esp,0xc
c001ef4f:	2d c8 00 00 00       	sub    eax,0xc8
c001ef54:	50                   	push   eax
c001ef55:	e8 67 f9 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ef5a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ef61:	89 c6                	mov    esi,eax
c001ef63:	89 d7                	mov    edi,edx
c001ef65:	e8 57 f9 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ef6a:	57                   	push   edi
c001ef6b:	56                   	push   esi
c001ef6c:	52                   	push   edx
c001ef6d:	50                   	push   eax
c001ef6e:	e8 fd f8 ff ff       	call   c001e870 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ef73:	83 c4 1c             	add    esp,0x1c
c001ef76:	52                   	push   edx
c001ef77:	50                   	push   eax
c001ef78:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef7c:	2d c8 00 00 00       	sub    eax,0xc8
c001ef81:	eb 7d                	jmp    c001f000 <Vm::x87Handler(regs*)+0x602>
c001ef83:	3c f7                	cmp    al,0xf7
c001ef85:	76 38                	jbe    c001efbf <Vm::x87Handler(regs*)+0x5c1>
c001ef87:	83 ec 0c             	sub    esp,0xc
c001ef8a:	6a 00                	push   0x0
c001ef8c:	e8 30 f9 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001ef91:	89 c6                	mov    esi,eax
c001ef93:	89 d7                	mov    edi,edx
c001ef95:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ef99:	2d f8 00 00 00       	sub    eax,0xf8
c001ef9e:	89 04 24             	mov    DWORD PTR [esp],eax
c001efa1:	e8 1b f9 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001efa6:	57                   	push   edi
c001efa7:	56                   	push   esi
c001efa8:	52                   	push   edx
c001efa9:	50                   	push   eax
c001efaa:	e8 e0 f8 ff ff       	call   c001e88f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001efaf:	83 c4 1c             	add    esp,0x1c
c001efb2:	52                   	push   edx
c001efb3:	50                   	push   eax
c001efb4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001efb8:	2d f8 00 00 00       	sub    eax,0xf8
c001efbd:	eb 41                	jmp    c001f000 <Vm::x87Handler(regs*)+0x602>
c001efbf:	8d 50 10             	lea    edx,[eax+0x10]
c001efc2:	80 fa 07             	cmp    dl,0x7
c001efc5:	0f 87 5a 01 00 00    	ja     c001f125 <Vm::x87Handler(regs*)+0x727>
c001efcb:	83 ec 0c             	sub    esp,0xc
c001efce:	2d f0 00 00 00       	sub    eax,0xf0
c001efd3:	50                   	push   eax
c001efd4:	e8 e8 f8 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001efd9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001efe0:	89 c6                	mov    esi,eax
c001efe2:	89 d7                	mov    edi,edx
c001efe4:	e8 d8 f8 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001efe9:	57                   	push   edi
c001efea:	56                   	push   esi
c001efeb:	52                   	push   edx
c001efec:	50                   	push   eax
c001efed:	e8 9d f8 ff ff       	call   c001e88f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001eff2:	83 c4 1c             	add    esp,0x1c
c001eff5:	52                   	push   edx
c001eff6:	50                   	push   eax
c001eff7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001effb:	2d f0 00 00 00       	sub    eax,0xf0
c001f000:	50                   	push   eax
c001f001:	e8 fe f8 ff ff       	call   c001e904 <Vm::fpuSetReg(int, unsigned long long)>
c001f006:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f00a:	e8 9d f9 ff ff       	call   c001e9ac <Vm::fpuPop()>
c001f00f:	e9 5e fa ff ff       	jmp    c001ea72 <Vm::x87Handler(regs*)+0x74>
c001f014:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f018:	8d 50 30             	lea    edx,[eax+0x30]
c001f01b:	80 fa 07             	cmp    dl,0x7
c001f01e:	77 1d                	ja     c001f03d <Vm::x87Handler(regs*)+0x63f>
c001f020:	83 ec 0c             	sub    esp,0xc
c001f023:	6a 00                	push   0x0
c001f025:	e8 97 f8 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f02a:	83 c4 0c             	add    esp,0xc
c001f02d:	52                   	push   edx
c001f02e:	50                   	push   eax
c001f02f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f033:	2d d0 00 00 00       	sub    eax,0xd0
c001f038:	e9 f3 fd ff ff       	jmp    c001ee30 <Vm::x87Handler(regs*)+0x432>
c001f03d:	8d 50 28             	lea    edx,[eax+0x28]
c001f040:	80 fa 07             	cmp    dl,0x7
c001f043:	77 28                	ja     c001f06d <Vm::x87Handler(regs*)+0x66f>
c001f045:	83 ec 0c             	sub    esp,0xc
c001f048:	6a 00                	push   0x0
c001f04a:	e8 72 f8 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f04f:	83 c4 0c             	add    esp,0xc
c001f052:	52                   	push   edx
c001f053:	50                   	push   eax
c001f054:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f058:	2d d8 00 00 00       	sub    eax,0xd8
c001f05d:	50                   	push   eax
c001f05e:	e8 a1 f8 ff ff       	call   c001e904 <Vm::fpuSetReg(int, unsigned long long)>
c001f063:	e8 44 f9 ff ff       	call   c001e9ac <Vm::fpuPop()>
c001f068:	e9 01 fa ff ff       	jmp    c001ea6e <Vm::x87Handler(regs*)+0x70>
c001f06d:	8d 50 20             	lea    edx,[eax+0x20]
c001f070:	80 fa 07             	cmp    dl,0x7
c001f073:	77 30                	ja     c001f0a5 <Vm::x87Handler(regs*)+0x6a7>
c001f075:	83 ec 0c             	sub    esp,0xc
c001f078:	2d e0 00 00 00       	sub    eax,0xe0
c001f07d:	50                   	push   eax
c001f07e:	e8 3e f8 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f083:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f08a:	89 c6                	mov    esi,eax
c001f08c:	89 d7                	mov    edi,edx
c001f08e:	e8 2e f8 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f093:	57                   	push   edi
c001f094:	56                   	push   esi
c001f095:	52                   	push   edx
c001f096:	50                   	push   eax
c001f097:	e8 48 f7 ff ff       	call   c001e7e4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f09c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f0a0:	e9 54 02 00 00       	jmp    c001f2f9 <Vm::x87Handler(regs*)+0x8fb>
c001f0a5:	8d 50 18             	lea    edx,[eax+0x18]
c001f0a8:	80 fa 07             	cmp    dl,0x7
c001f0ab:	0f 87 43 fb ff ff    	ja     c001ebf4 <Vm::x87Handler(regs*)+0x1f6>
c001f0b1:	83 ec 0c             	sub    esp,0xc
c001f0b4:	2d e8 00 00 00       	sub    eax,0xe8
c001f0b9:	50                   	push   eax
c001f0ba:	e8 02 f8 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f0bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0c6:	89 c6                	mov    esi,eax
c001f0c8:	89 d7                	mov    edi,edx
c001f0ca:	e8 f2 f7 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f0cf:	57                   	push   edi
c001f0d0:	56                   	push   esi
c001f0d1:	52                   	push   edx
c001f0d2:	50                   	push   eax
c001f0d3:	e8 0c f7 ff ff       	call   c001e7e4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f0d8:	83 c4 20             	add    esp,0x20
c001f0db:	e8 cc f8 ff ff       	call   c001e9ac <Vm::fpuPop()>
c001f0e0:	eb 62                	jmp    c001f144 <Vm::x87Handler(regs*)+0x746>
c001f0e2:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001f0e6:	0f 85 0f 01 00 00    	jne    c001f1fb <Vm::x87Handler(regs*)+0x7fd>
c001f0ec:	83 ec 0c             	sub    esp,0xc
c001f0ef:	6a 01                	push   0x1
c001f0f1:	e8 cb f7 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f0f6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f0fd:	89 c6                	mov    esi,eax
c001f0ff:	89 d7                	mov    edi,edx
c001f101:	e8 bb f7 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f106:	57                   	push   edi
c001f107:	56                   	push   esi
c001f108:	52                   	push   edx
c001f109:	50                   	push   eax
c001f10a:	e8 d5 f6 ff ff       	call   c001e7e4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f10f:	83 c4 20             	add    esp,0x20
c001f112:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f116:	e8 91 f8 ff ff       	call   c001e9ac <Vm::fpuPop()>
c001f11b:	e8 8c f8 ff ff       	call   c001e9ac <Vm::fpuPop()>
c001f120:	e9 50 f9 ff ff       	jmp    c001ea75 <Vm::x87Handler(regs*)+0x77>
c001f125:	3c d9                	cmp    al,0xd9
c001f127:	0f 85 b5 02 00 00    	jne    c001f3e2 <Vm::x87Handler(regs*)+0x9e4>
c001f12d:	eb bd                	jmp    c001f0ec <Vm::x87Handler(regs*)+0x6ee>
c001f12f:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001f133:	0f 85 ea 02 00 00    	jne    c001f423 <Vm::x87Handler(regs*)+0xa25>
c001f139:	0f b7 05 40 df 02 c0 	movzx  eax,WORD PTR ds:0xc002df40
c001f140:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001f144:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f148:	e9 28 f9 ff ff       	jmp    c001ea75 <Vm::x87Handler(regs*)+0x77>
c001f14d:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f151:	84 d2                	test   dl,dl
c001f153:	75 0f                	jne    c001f164 <Vm::x87Handler(regs*)+0x766>
c001f155:	83 ec 0c             	sub    esp,0xc
c001f158:	ff 36                	push   DWORD PTR [esi]
c001f15a:	e8 b1 f4 ff ff       	call   c001e610 <Vm::fpu32ToInternal(unsigned int)>
c001f15f:	e9 2c 01 00 00       	jmp    c001f290 <Vm::x87Handler(regs*)+0x892>
c001f164:	80 fa 01             	cmp    dl,0x1
c001f167:	75 0f                	jne    c001f178 <Vm::x87Handler(regs*)+0x77a>
c001f169:	83 ec 0c             	sub    esp,0xc
c001f16c:	ff 36                	push   DWORD PTR [esi]
c001f16e:	e8 9d f4 ff ff       	call   c001e610 <Vm::fpu32ToInternal(unsigned int)>
c001f173:	e9 81 02 00 00       	jmp    c001f3f9 <Vm::x87Handler(regs*)+0x9fb>
c001f178:	80 fa 04             	cmp    dl,0x4
c001f17b:	75 0f                	jne    c001f18c <Vm::x87Handler(regs*)+0x78e>
c001f17d:	83 ec 0c             	sub    esp,0xc
c001f180:	ff 36                	push   DWORD PTR [esi]
c001f182:	e8 89 f4 ff ff       	call   c001e610 <Vm::fpu32ToInternal(unsigned int)>
c001f187:	e9 86 01 00 00       	jmp    c001f312 <Vm::x87Handler(regs*)+0x914>
c001f18c:	80 fa 05             	cmp    dl,0x5
c001f18f:	75 1b                	jne    c001f1ac <Vm::x87Handler(regs*)+0x7ae>
c001f191:	83 ec 0c             	sub    esp,0xc
c001f194:	6a 00                	push   0x0
c001f196:	e8 26 f7 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f19b:	89 c7                	mov    edi,eax
c001f19d:	89 d5                	mov    ebp,edx
c001f19f:	58                   	pop    eax
c001f1a0:	ff 36                	push   DWORD PTR [esi]
c001f1a2:	e8 69 f4 ff ff       	call   c001e610 <Vm::fpu32ToInternal(unsigned int)>
c001f1a7:	e9 a3 01 00 00       	jmp    c001f34f <Vm::x87Handler(regs*)+0x951>
c001f1ac:	80 fa 06             	cmp    dl,0x6
c001f1af:	75 0f                	jne    c001f1c0 <Vm::x87Handler(regs*)+0x7c2>
c001f1b1:	83 ec 0c             	sub    esp,0xc
c001f1b4:	ff 36                	push   DWORD PTR [esi]
c001f1b6:	e8 55 f4 ff ff       	call   c001e610 <Vm::fpu32ToInternal(unsigned int)>
c001f1bb:	e9 ae 01 00 00       	jmp    c001f36e <Vm::x87Handler(regs*)+0x970>
c001f1c0:	31 c0                	xor    eax,eax
c001f1c2:	80 fa 07             	cmp    dl,0x7
c001f1c5:	0f 85 94 02 00 00    	jne    c001f45f <Vm::x87Handler(regs*)+0xa61>
c001f1cb:	83 ec 0c             	sub    esp,0xc
c001f1ce:	6a 00                	push   0x0
c001f1d0:	e8 ec f6 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f1d5:	89 c7                	mov    edi,eax
c001f1d7:	89 d5                	mov    ebp,edx
c001f1d9:	58                   	pop    eax
c001f1da:	ff 36                	push   DWORD PTR [esi]
c001f1dc:	e8 2f f4 ff ff       	call   c001e610 <Vm::fpu32ToInternal(unsigned int)>
c001f1e1:	e9 cb 01 00 00       	jmp    c001f3b1 <Vm::x87Handler(regs*)+0x9b3>
c001f1e6:	80 fa 03             	cmp    dl,0x3
c001f1e9:	0f 85 d3 01 00 00    	jne    c001f3c2 <Vm::x87Handler(regs*)+0x9c4>
c001f1ef:	e8 b8 f7 ff ff       	call   c001e9ac <Vm::fpuPop()>
c001f1f4:	51                   	push   ecx
c001f1f5:	51                   	push   ecx
c001f1f6:	e9 de 01 00 00       	jmp    c001f3d9 <Vm::x87Handler(regs*)+0x9db>
c001f1fb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f1ff:	80 fa 01             	cmp    dl,0x1
c001f202:	75 09                	jne    c001f20d <Vm::x87Handler(regs*)+0x80f>
c001f204:	57                   	push   edi
c001f205:	57                   	push   edi
c001f206:	8b 06                	mov    eax,DWORD PTR [esi]
c001f208:	e9 e3 01 00 00       	jmp    c001f3f0 <Vm::x87Handler(regs*)+0x9f2>
c001f20d:	80 fa 04             	cmp    dl,0x4
c001f210:	75 12                	jne    c001f224 <Vm::x87Handler(regs*)+0x826>
c001f212:	31 d2                	xor    edx,edx
c001f214:	51                   	push   ecx
c001f215:	51                   	push   ecx
c001f216:	8b 06                	mov    eax,DWORD PTR [esi]
c001f218:	52                   	push   edx
c001f219:	50                   	push   eax
c001f21a:	e8 d0 f4 ff ff       	call   c001e6ef <Vm::fpuLongToFloat(long long)>
c001f21f:	e9 ee 00 00 00       	jmp    c001f312 <Vm::x87Handler(regs*)+0x914>
c001f224:	31 c0                	xor    eax,eax
c001f226:	80 fa 07             	cmp    dl,0x7
c001f229:	0f 85 30 02 00 00    	jne    c001f45f <Vm::x87Handler(regs*)+0xa61>
c001f22f:	83 ec 0c             	sub    esp,0xc
c001f232:	6a 00                	push   0x0
c001f234:	e8 88 f6 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f239:	89 c7                	mov    edi,eax
c001f23b:	89 d5                	mov    ebp,edx
c001f23d:	58                   	pop    eax
c001f23e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f240:	5a                   	pop    edx
c001f241:	31 d2                	xor    edx,edx
c001f243:	52                   	push   edx
c001f244:	50                   	push   eax
c001f245:	e8 a5 f4 ff ff       	call   c001e6ef <Vm::fpuLongToFloat(long long)>
c001f24a:	e9 62 01 00 00       	jmp    c001f3b1 <Vm::x87Handler(regs*)+0x9b3>
c001f24f:	84 d2                	test   dl,dl
c001f251:	75 0d                	jne    c001f260 <Vm::x87Handler(regs*)+0x862>
c001f253:	31 d2                	xor    edx,edx
c001f255:	55                   	push   ebp
c001f256:	55                   	push   ebp
c001f257:	8b 06                	mov    eax,DWORD PTR [esi]
c001f259:	52                   	push   edx
c001f25a:	50                   	push   eax
c001f25b:	e9 d3 01 00 00       	jmp    c001f433 <Vm::x87Handler(regs*)+0xa35>
c001f260:	31 c0                	xor    eax,eax
c001f262:	80 fa 02             	cmp    dl,0x2
c001f265:	0f 85 f4 01 00 00    	jne    c001f45f <Vm::x87Handler(regs*)+0xa61>
c001f26b:	83 ec 0c             	sub    esp,0xc
c001f26e:	6a 00                	push   0x0
c001f270:	e8 4c f6 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f275:	59                   	pop    ecx
c001f276:	5f                   	pop    edi
c001f277:	e9 6a f9 ff ff       	jmp    c001ebe6 <Vm::x87Handler(regs*)+0x1e8>
c001f27c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f280:	84 d2                	test   dl,dl
c001f282:	75 2a                	jne    c001f2ae <Vm::x87Handler(regs*)+0x8b0>
c001f284:	50                   	push   eax
c001f285:	50                   	push   eax
c001f286:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f289:	ff 36                	push   DWORD PTR [esi]
c001f28b:	e8 c5 f3 ff ff       	call   c001e655 <Vm::fpu64ToInternal(unsigned long long)>
c001f290:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f297:	89 c6                	mov    esi,eax
c001f299:	89 d7                	mov    edi,edx
c001f29b:	e8 21 f6 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f2a0:	57                   	push   edi
c001f2a1:	56                   	push   esi
c001f2a2:	52                   	push   edx
c001f2a3:	50                   	push   eax
c001f2a4:	e8 8e f5 ff ff       	call   c001e837 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f2a9:	e9 64 01 00 00       	jmp    c001f412 <Vm::x87Handler(regs*)+0xa14>
c001f2ae:	80 fa 01             	cmp    dl,0x1
c001f2b1:	75 11                	jne    c001f2c4 <Vm::x87Handler(regs*)+0x8c6>
c001f2b3:	50                   	push   eax
c001f2b4:	50                   	push   eax
c001f2b5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2b8:	ff 36                	push   DWORD PTR [esi]
c001f2ba:	e8 96 f3 ff ff       	call   c001e655 <Vm::fpu64ToInternal(unsigned long long)>
c001f2bf:	e9 35 01 00 00       	jmp    c001f3f9 <Vm::x87Handler(regs*)+0x9fb>
c001f2c4:	80 fa 02             	cmp    dl,0x2
c001f2c7:	0f 85 54 f9 ff ff    	jne    c001ec21 <Vm::x87Handler(regs*)+0x223>
c001f2cd:	55                   	push   ebp
c001f2ce:	55                   	push   ebp
c001f2cf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f2d2:	ff 36                	push   DWORD PTR [esi]
c001f2d4:	e8 7c f3 ff ff       	call   c001e655 <Vm::fpu64ToInternal(unsigned long long)>
c001f2d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f2e0:	89 c6                	mov    esi,eax
c001f2e2:	89 d7                	mov    edi,edx
c001f2e4:	e8 d8 f5 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f2e9:	57                   	push   edi
c001f2ea:	56                   	push   esi
c001f2eb:	52                   	push   edx
c001f2ec:	50                   	push   eax
c001f2ed:	e8 f2 f4 ff ff       	call   c001e7e4 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f2f2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f2f6:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f2f9:	83 c4 20             	add    esp,0x20
c001f2fc:	e9 74 f7 ff ff       	jmp    c001ea75 <Vm::x87Handler(regs*)+0x77>
c001f301:	80 fa 04             	cmp    dl,0x4
c001f304:	75 2a                	jne    c001f330 <Vm::x87Handler(regs*)+0x932>
c001f306:	51                   	push   ecx
c001f307:	51                   	push   ecx
c001f308:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f30b:	ff 36                	push   DWORD PTR [esi]
c001f30d:	e8 43 f3 ff ff       	call   c001e655 <Vm::fpu64ToInternal(unsigned long long)>
c001f312:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f319:	89 c6                	mov    esi,eax
c001f31b:	89 d7                	mov    edi,edx
c001f31d:	e8 9f f5 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f322:	57                   	push   edi
c001f323:	56                   	push   esi
c001f324:	52                   	push   edx
c001f325:	50                   	push   eax
c001f326:	e8 36 f5 ff ff       	call   c001e861 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f32b:	e9 e2 00 00 00       	jmp    c001f412 <Vm::x87Handler(regs*)+0xa14>
c001f330:	80 fa 05             	cmp    dl,0x5
c001f333:	75 28                	jne    c001f35d <Vm::x87Handler(regs*)+0x95f>
c001f335:	83 ec 0c             	sub    esp,0xc
c001f338:	6a 00                	push   0x0
c001f33a:	e8 82 f5 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f33f:	89 c7                	mov    edi,eax
c001f341:	89 d5                	mov    ebp,edx
c001f343:	58                   	pop    eax
c001f344:	5a                   	pop    edx
c001f345:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f348:	ff 36                	push   DWORD PTR [esi]
c001f34a:	e8 06 f3 ff ff       	call   c001e655 <Vm::fpu64ToInternal(unsigned long long)>
c001f34f:	83 c4 10             	add    esp,0x10
c001f352:	55                   	push   ebp
c001f353:	57                   	push   edi
c001f354:	52                   	push   edx
c001f355:	50                   	push   eax
c001f356:	e8 06 f5 ff ff       	call   c001e861 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f35b:	eb 60                	jmp    c001f3bd <Vm::x87Handler(regs*)+0x9bf>
c001f35d:	80 fa 06             	cmp    dl,0x6
c001f360:	75 2a                	jne    c001f38c <Vm::x87Handler(regs*)+0x98e>
c001f362:	51                   	push   ecx
c001f363:	51                   	push   ecx
c001f364:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f367:	ff 36                	push   DWORD PTR [esi]
c001f369:	e8 e7 f2 ff ff       	call   c001e655 <Vm::fpu64ToInternal(unsigned long long)>
c001f36e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f375:	89 c6                	mov    esi,eax
c001f377:	89 d7                	mov    edi,edx
c001f379:	e8 43 f5 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f37e:	57                   	push   edi
c001f37f:	56                   	push   esi
c001f380:	52                   	push   edx
c001f381:	50                   	push   eax
c001f382:	e8 08 f5 ff ff       	call   c001e88f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f387:	e9 86 00 00 00       	jmp    c001f412 <Vm::x87Handler(regs*)+0xa14>
c001f38c:	31 c0                	xor    eax,eax
c001f38e:	80 fa 07             	cmp    dl,0x7
c001f391:	0f 85 c8 00 00 00    	jne    c001f45f <Vm::x87Handler(regs*)+0xa61>
c001f397:	83 ec 0c             	sub    esp,0xc
c001f39a:	6a 00                	push   0x0
c001f39c:	e8 20 f5 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f3a1:	89 c7                	mov    edi,eax
c001f3a3:	89 d5                	mov    ebp,edx
c001f3a5:	58                   	pop    eax
c001f3a6:	5a                   	pop    edx
c001f3a7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f3aa:	ff 36                	push   DWORD PTR [esi]
c001f3ac:	e8 a4 f2 ff ff       	call   c001e655 <Vm::fpu64ToInternal(unsigned long long)>
c001f3b1:	83 c4 10             	add    esp,0x10
c001f3b4:	55                   	push   ebp
c001f3b5:	57                   	push   edi
c001f3b6:	52                   	push   edx
c001f3b7:	50                   	push   eax
c001f3b8:	e8 d2 f4 ff ff       	call   c001e88f <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001f3bd:	83 c4 0c             	add    esp,0xc
c001f3c0:	eb 53                	jmp    c001f415 <Vm::x87Handler(regs*)+0xa17>
c001f3c2:	31 c0                	xor    eax,eax
c001f3c4:	80 fa 02             	cmp    dl,0x2
c001f3c7:	0f 85 92 00 00 00    	jne    c001f45f <Vm::x87Handler(regs*)+0xa61>
c001f3cd:	83 ec 0c             	sub    esp,0xc
c001f3d0:	6a 00                	push   0x0
c001f3d2:	e8 ea f4 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f3d7:	59                   	pop    ecx
c001f3d8:	5f                   	pop    edi
c001f3d9:	52                   	push   edx
c001f3da:	50                   	push   eax
c001f3db:	e8 27 f2 ff ff       	call   c001e607 <Vm::fpuInternalTo64(unsigned long long)>
c001f3e0:	eb 70                	jmp    c001f452 <Vm::x87Handler(regs*)+0xa54>
c001f3e2:	31 c0                	xor    eax,eax
c001f3e4:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001f3e9:	75 74                	jne    c001f45f <Vm::x87Handler(regs*)+0xa61>
c001f3eb:	50                   	push   eax
c001f3ec:	50                   	push   eax
c001f3ed:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f3f0:	31 d2                	xor    edx,edx
c001f3f2:	52                   	push   edx
c001f3f3:	50                   	push   eax
c001f3f4:	e8 f6 f2 ff ff       	call   c001e6ef <Vm::fpuLongToFloat(long long)>
c001f3f9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f400:	89 c6                	mov    esi,eax
c001f402:	89 d7                	mov    edi,edx
c001f404:	e8 b8 f4 ff ff       	call   c001e8c1 <Vm::fpuGetReg(int)>
c001f409:	57                   	push   edi
c001f40a:	56                   	push   esi
c001f40b:	52                   	push   edx
c001f40c:	50                   	push   eax
c001f40d:	e8 5e f4 ff ff       	call   c001e870 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f412:	83 c4 1c             	add    esp,0x1c
c001f415:	52                   	push   edx
c001f416:	50                   	push   eax
c001f417:	6a 00                	push   0x0
c001f419:	e8 e6 f4 ff ff       	call   c001e904 <Vm::fpuSetReg(int, unsigned long long)>
c001f41e:	e9 f2 f7 ff ff       	jmp    c001ec15 <Vm::x87Handler(regs*)+0x217>
c001f423:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f427:	80 fa 05             	cmp    dl,0x5
c001f42a:	75 11                	jne    c001f43d <Vm::x87Handler(regs*)+0xa3f>
c001f42c:	55                   	push   ebp
c001f42d:	55                   	push   ebp
c001f42e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f431:	ff 36                	push   DWORD PTR [esi]
c001f433:	e8 81 f2 ff ff       	call   c001e6b9 <Vm::fpuULongToFloat(unsigned long long)>
c001f438:	e9 cf f7 ff ff       	jmp    c001ec0c <Vm::x87Handler(regs*)+0x20e>
c001f43d:	31 c0                	xor    eax,eax
c001f43f:	80 fa 07             	cmp    dl,0x7
c001f442:	75 1b                	jne    c001f45f <Vm::x87Handler(regs*)+0xa61>
c001f444:	e8 63 f5 ff ff       	call   c001e9ac <Vm::fpuPop()>
c001f449:	51                   	push   ecx
c001f44a:	51                   	push   ecx
c001f44b:	52                   	push   edx
c001f44c:	50                   	push   eax
c001f44d:	e8 0c f2 ff ff       	call   c001e65e <Vm::fpuFloatToLong(unsigned long long)>
c001f452:	83 c4 10             	add    esp,0x10
c001f455:	89 06                	mov    DWORD PTR [esi],eax
c001f457:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001f45a:	e9 f8 f7 ff ff       	jmp    c001ec57 <Vm::x87Handler(regs*)+0x259>
c001f45f:	83 c4 1c             	add    esp,0x1c
c001f462:	5b                   	pop    ebx
c001f463:	5e                   	pop    esi
c001f464:	5f                   	pop    edi
c001f465:	5d                   	pop    ebp
c001f466:	c3                   	ret    

c001f467 <__static_initialization_and_destruction_0(int, int)>:
c001f467:	83 ec 0c             	sub    esp,0xc
c001f46a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001f46f:	75 1a                	jne    c001f48b <__static_initialization_and_destruction_0(int, int)+0x24>
c001f471:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001f479:	75 10                	jne    c001f48b <__static_initialization_and_destruction_0(int, int)+0x24>
c001f47b:	83 ec 0c             	sub    esp,0xc
c001f47e:	68 40 df 02 c0       	push   0xc002df40
c001f483:	e8 b8 82 00 00       	call   c0027740 <Vm::_FPUState::_FPUState()>
c001f488:	83 c4 10             	add    esp,0x10
c001f48b:	90                   	nop
c001f48c:	83 c4 0c             	add    esp,0xc
c001f48f:	c3                   	ret    

c001f490 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001f490:	83 ec 0c             	sub    esp,0xc
c001f493:	83 ec 08             	sub    esp,0x8
c001f496:	68 ff ff 00 00       	push   0xffff
c001f49b:	6a 01                	push   0x1
c001f49d:	e8 c5 ff ff ff       	call   c001f467 <__static_initialization_and_destruction_0(int, int)>
c001f4a2:	83 c4 10             	add    esp,0x10
c001f4a5:	83 c4 0c             	add    esp,0xc
c001f4a8:	c3                   	ret    
c001f4a9:	90                   	nop

c001f4aa <FAT::getName()>:
c001f4aa:	b8 cc ad 02 c0       	mov    eax,0xc002adcc
c001f4af:	c3                   	ret    

c001f4b0 <FAT::tell(void*, unsigned long long*)>:
c001f4b0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f4b5:	75 06                	jne    c001f4bd <FAT::tell(void*, unsigned long long*)+0xd>
c001f4b7:	b8 04 00 00 00       	mov    eax,0x4
c001f4bc:	c3                   	ret    
c001f4bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f4c2:	75 06                	jne    c001f4ca <FAT::tell(void*, unsigned long long*)+0x1a>
c001f4c4:	b8 04 00 00 00       	mov    eax,0x4
c001f4c9:	c3                   	ret    
c001f4ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f4ce:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001f4d1:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001f4d4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f4d8:	89 01                	mov    DWORD PTR [ecx],eax
c001f4da:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f4dd:	b8 00 00 00 00       	mov    eax,0x0
c001f4e2:	c3                   	ret    
c001f4e3:	90                   	nop

c001f4e4 <FAT::stat(void*, unsigned long long*)>:
c001f4e4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f4e9:	75 06                	jne    c001f4f1 <FAT::stat(void*, unsigned long long*)+0xd>
c001f4eb:	b8 04 00 00 00       	mov    eax,0x4
c001f4f0:	c3                   	ret    
c001f4f1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f4f6:	75 06                	jne    c001f4fe <FAT::stat(void*, unsigned long long*)+0x1a>
c001f4f8:	b8 04 00 00 00       	mov    eax,0x4
c001f4fd:	c3                   	ret    
c001f4fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f502:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001f505:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f508:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f50c:	89 01                	mov    DWORD PTR [ecx],eax
c001f50e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001f511:	b8 00 00 00 00       	mov    eax,0x0
c001f516:	c3                   	ret    
c001f517:	90                   	nop

c001f518 <FAT::~FAT()>:
c001f518:	83 ec 0c             	sub    esp,0xc
c001f51b:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c001f520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f524:	89 10                	mov    DWORD PTR [eax],edx
c001f526:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f52a:	83 ec 0c             	sub    esp,0xc
c001f52d:	50                   	push   eax
c001f52e:	e8 b7 35 ff ff       	call   c0012aea <Filesystem::~Filesystem()>
c001f533:	83 c4 10             	add    esp,0x10
c001f536:	90                   	nop
c001f537:	83 c4 0c             	add    esp,0xc
c001f53a:	c3                   	ret    
c001f53b:	90                   	nop

c001f53c <FAT::~FAT()>:
c001f53c:	83 ec 0c             	sub    esp,0xc
c001f53f:	83 ec 0c             	sub    esp,0xc
c001f542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f546:	e8 cd ff ff ff       	call   c001f518 <FAT::~FAT()>
c001f54b:	83 c4 10             	add    esp,0x10
c001f54e:	83 ec 08             	sub    esp,0x8
c001f551:	6a 08                	push   0x8
c001f553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f557:	e8 85 31 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c001f55c:	83 c4 10             	add    esp,0x10
c001f55f:	83 c4 0c             	add    esp,0xc
c001f562:	c3                   	ret    
c001f563:	90                   	nop

c001f564 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001f564:	83 ec 1c             	sub    esp,0x1c
c001f567:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001f56e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001f573:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f577:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c001f57e:	83 f8 ff             	cmp    eax,0xffffffff
c001f581:	75 34                	jne    c001f5b7 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001f583:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f587:	88 c2                	mov    dl,al
c001f589:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c001f58e:	01 d0                	add    eax,edx
c001f590:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f594:	8b 15 a0 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfa0
c001f59a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f59e:	89 14 85 c0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2040],edx
c001f5a5:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c001f5aa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001f5ae:	89 14 85 40 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fc0],edx
c001f5b5:	eb 17                	jmp    c001f5ce <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001f5b7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f5bb:	88 c2                	mov    dl,al
c001f5bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f5c1:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c001f5c8:	01 d0                	add    eax,edx
c001f5ca:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f5ce:	83 ec 04             	sub    esp,0x4
c001f5d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f5d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001f5d9:	8d 44 24 15          	lea    eax,[esp+0x15]
c001f5dd:	50                   	push   eax
c001f5de:	e8 05 75 fe ff       	call   c0006ae8 <f_getlabel>
c001f5e3:	83 c4 10             	add    esp,0x10
c001f5e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5ea:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001f5ef:	75 07                	jne    c001f5f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001f5f1:	b8 00 00 00 00       	mov    eax,0x0
c001f5f6:	eb 05                	jmp    c001f5fd <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001f5f8:	b8 01 00 00 00       	mov    eax,0x1
c001f5fd:	83 c4 1c             	add    esp,0x1c
c001f600:	c3                   	ret    
c001f601:	90                   	nop

c001f602 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001f602:	57                   	push   edi
c001f603:	83 ec 58             	sub    esp,0x58
c001f606:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001f60e:	8d 54 24 10          	lea    edx,[esp+0x10]
c001f612:	b9 0f 00 00 00       	mov    ecx,0xf
c001f617:	b8 00 00 00 00       	mov    eax,0x0
c001f61c:	fc                   	cld    
c001f61d:	89 d7                	mov    edi,edx
c001f61f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f621:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f625:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c001f62c:	83 f8 ff             	cmp    eax,0xffffffff
c001f62f:	75 34                	jne    c001f665 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001f631:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f635:	88 c2                	mov    dl,al
c001f637:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c001f63c:	01 d0                	add    eax,edx
c001f63e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f642:	8b 15 a0 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfa0
c001f648:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f64c:	89 14 85 c0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2040],edx
c001f653:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c001f658:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001f65c:	89 14 85 40 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fc0],edx
c001f663:	eb 17                	jmp    c001f67c <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001f665:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001f669:	88 c2                	mov    dl,al
c001f66b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f66f:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c001f676:	01 d0                	add    eax,edx
c001f678:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001f67c:	83 ec 08             	sub    esp,0x8
c001f67f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001f683:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f687:	50                   	push   eax
c001f688:	e8 54 11 fe ff       	call   c00007e1 <strcat>
c001f68d:	83 c4 10             	add    esp,0x10
c001f690:	83 ec 0c             	sub    esp,0xc
c001f693:	8d 44 24 18          	lea    eax,[esp+0x18]
c001f697:	50                   	push   eax
c001f698:	e8 39 76 fe ff       	call   c0006cd6 <f_setlabel>
c001f69d:	83 c4 10             	add    esp,0x10
c001f6a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001f6a4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001f6a9:	75 07                	jne    c001f6b2 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001f6ab:	b8 00 00 00 00       	mov    eax,0x0
c001f6b0:	eb 05                	jmp    c001f6b7 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001f6b2:	b8 01 00 00 00       	mov    eax,0x1
c001f6b7:	83 c4 58             	add    esp,0x58
c001f6ba:	5f                   	pop    edi
c001f6bb:	c3                   	ret    

c001f6bc <FAT::format(LogicalDisk*, int, char const*, int)>:
c001f6bc:	83 ec 2c             	sub    esp,0x2c
c001f6bf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001f6c7:	83 ec 08             	sub    esp,0x8
c001f6ca:	68 f0 ad 02 c0       	push   0xc002adf0
c001f6cf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6d3:	e8 a3 10 fe ff       	call   c000077b <strcmp>
c001f6d8:	83 c4 10             	add    esp,0x10
c001f6db:	85 c0                	test   eax,eax
c001f6dd:	0f 94 c0             	sete   al
c001f6e0:	84 c0                	test   al,al
c001f6e2:	74 0d                	je     c001f6f1 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001f6e4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f6ec:	e9 a6 00 00 00       	jmp    c001f797 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f6f1:	83 ec 08             	sub    esp,0x8
c001f6f4:	68 e2 ad 02 c0       	push   0xc002ade2
c001f6f9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f6fd:	e8 79 10 fe ff       	call   c000077b <strcmp>
c001f702:	83 c4 10             	add    esp,0x10
c001f705:	85 c0                	test   eax,eax
c001f707:	0f 94 c0             	sete   al
c001f70a:	84 c0                	test   al,al
c001f70c:	74 0a                	je     c001f718 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001f70e:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f716:	eb 7f                	jmp    c001f797 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f718:	83 ec 08             	sub    esp,0x8
c001f71b:	68 e8 ad 02 c0       	push   0xc002ade8
c001f720:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f724:	e8 52 10 fe ff       	call   c000077b <strcmp>
c001f729:	83 c4 10             	add    esp,0x10
c001f72c:	85 c0                	test   eax,eax
c001f72e:	0f 94 c0             	sete   al
c001f731:	84 c0                	test   al,al
c001f733:	74 0a                	je     c001f73f <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001f735:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001f73d:	eb 58                	jmp    c001f797 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f73f:	83 ec 08             	sub    esp,0x8
c001f742:	68 4c 7e 02 c0       	push   0xc0027e4c
c001f747:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f74b:	e8 2b 10 fe ff       	call   c000077b <strcmp>
c001f750:	83 c4 10             	add    esp,0x10
c001f753:	85 c0                	test   eax,eax
c001f755:	0f 94 c0             	sete   al
c001f758:	84 c0                	test   al,al
c001f75a:	74 0a                	je     c001f766 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001f75c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001f764:	eb 31                	jmp    c001f797 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f766:	83 ec 08             	sub    esp,0x8
c001f769:	68 ee ad 02 c0       	push   0xc002adee
c001f76e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f772:	e8 04 10 fe ff       	call   c000077b <strcmp>
c001f777:	83 c4 10             	add    esp,0x10
c001f77a:	85 c0                	test   eax,eax
c001f77c:	0f 94 c0             	sete   al
c001f77f:	84 c0                	test   al,al
c001f781:	74 0a                	je     c001f78d <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001f783:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001f78b:	eb 0a                	jmp    c001f797 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001f78d:	b8 08 00 00 00       	mov    eax,0x8
c001f792:	e9 04 01 00 00       	jmp    c001f89b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f797:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001f79e:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001f7a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7a7:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c001f7ae:	83 f8 ff             	cmp    eax,0xffffffff
c001f7b1:	75 34                	jne    c001f7e7 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001f7b3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f7b7:	88 c2                	mov    dl,al
c001f7b9:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c001f7be:	01 d0                	add    eax,edx
c001f7c0:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f7c4:	8b 15 a0 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfa0
c001f7ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7ce:	89 14 85 c0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2040],edx
c001f7d5:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c001f7da:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001f7de:	89 14 85 40 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fc0],edx
c001f7e5:	eb 17                	jmp    c001f7fe <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001f7e7:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001f7eb:	88 c2                	mov    dl,al
c001f7ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7f1:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c001f7f8:	01 d0                	add    eax,edx
c001f7fa:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001f7fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f802:	88 04 24             	mov    BYTE PTR [esp],al
c001f805:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001f809:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f80d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001f815:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001f81a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f822:	83 ec 0c             	sub    esp,0xc
c001f825:	68 00 20 00 00       	push   0x2000
c001f82a:	e8 a5 fc fe ff       	call   c000f4d4 <malloc>
c001f82f:	83 c4 10             	add    esp,0x10
c001f832:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f836:	68 00 20 00 00       	push   0x2000
c001f83b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f83f:	8d 44 24 08          	lea    eax,[esp+0x8]
c001f843:	50                   	push   eax
c001f844:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001f848:	50                   	push   eax
c001f849:	e8 d3 78 fe ff       	call   c0007121 <f_mkfs>
c001f84e:	83 c4 10             	add    esp,0x10
c001f851:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f855:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f85a:	75 07                	jne    c001f863 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001f85c:	b8 00 00 00 00       	mov    eax,0x0
c001f861:	eb 38                	jmp    c001f89b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f863:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001f868:	75 17                	jne    c001f881 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001f86a:	83 ec 0c             	sub    esp,0xc
c001f86d:	68 20 ae 02 c0       	push   0xc002ae20
c001f872:	e8 4a 2f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001f877:	83 c4 10             	add    esp,0x10
c001f87a:	b8 09 00 00 00       	mov    eax,0x9
c001f87f:	eb 1a                	jmp    c001f89b <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001f881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f885:	83 ec 08             	sub    esp,0x8
c001f888:	50                   	push   eax
c001f889:	68 f4 ad 02 c0       	push   0xc002adf4
c001f88e:	e8 2e 2f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c001f893:	83 c4 10             	add    esp,0x10
c001f896:	b8 01 00 00 00       	mov    eax,0x1
c001f89b:	83 c4 2c             	add    esp,0x2c
c001f89e:	c3                   	ret    
c001f89f:	90                   	nop

c001f8a0 <FAT::tryMount(LogicalDisk*, int)>:
c001f8a0:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001f8a6:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c001f8ab:	83 f8 14             	cmp    eax,0x14
c001f8ae:	75 17                	jne    c001f8c7 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001f8b0:	83 ec 0c             	sub    esp,0xc
c001f8b3:	68 06 ae 02 c0       	push   0xc002ae06
c001f8b8:	e8 1e a0 ff ff       	call   c00198db <Krnl::panic(char const*)>
c001f8bd:	83 c4 10             	add    esp,0x10
c001f8c0:	b0 00                	mov    al,0x0
c001f8c2:	e9 d7 01 00 00       	jmp    c001fa9e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f8c7:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001f8ce:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001f8d4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001f8da:	3d 00 02 00 00       	cmp    eax,0x200
c001f8df:	74 07                	je     c001f8e8 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001f8e1:	b0 00                	mov    al,0x0
c001f8e3:	e9 b6 01 00 00       	jmp    c001fa9e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f8e8:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001f8f0:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f8f7:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c001f8fe:	83 f8 ff             	cmp    eax,0xffffffff
c001f901:	74 07                	je     c001f90a <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001f903:	b0 01                	mov    al,0x1
c001f905:	e9 94 01 00 00       	jmp    c001fa9e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f90a:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001f914:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001f91c:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001f923:	88 c2                	mov    dl,al
c001f925:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c001f92a:	01 d0                	add    eax,edx
c001f92c:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001f933:	8b 15 a0 df 02 c0    	mov    edx,DWORD PTR ds:0xc002dfa0
c001f939:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001f940:	89 14 85 c0 df 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2040],edx
c001f947:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c001f94c:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001f953:	89 14 85 40 e0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1fc0],edx
c001f95a:	83 ec 0c             	sub    esp,0xc
c001f95d:	68 54 02 00 00       	push   0x254
c001f962:	e8 6d fb fe ff       	call   c000f4d4 <malloc>
c001f967:	83 c4 10             	add    esp,0x10
c001f96a:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001f971:	83 ec 04             	sub    esp,0x4
c001f974:	6a 00                	push   0x0
c001f976:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f97d:	50                   	push   eax
c001f97e:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f985:	e8 55 53 fe ff       	call   c0004cdf <f_mount>
c001f98a:	83 c4 10             	add    esp,0x10
c001f98d:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001f994:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001f99c:	74 19                	je     c001f9b7 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001f99e:	83 ec 0c             	sub    esp,0xc
c001f9a1:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001f9a8:	e8 47 fb fe ff       	call   c000f4f4 <rfree>
c001f9ad:	83 c4 10             	add    esp,0x10
c001f9b0:	b0 00                	mov    al,0x0
c001f9b2:	e9 e7 00 00 00       	jmp    c001fa9e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001f9b7:	83 ec 04             	sub    esp,0x4
c001f9ba:	68 00 01 00 00       	push   0x100
c001f9bf:	6a 00                	push   0x0
c001f9c1:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f9c8:	50                   	push   eax
c001f9c9:	e8 bd 0c fe ff       	call   c000068b <memset>
c001f9ce:	83 c4 10             	add    esp,0x10
c001f9d1:	83 ec 08             	sub    esp,0x8
c001f9d4:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001f9db:	50                   	push   eax
c001f9dc:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f9e3:	50                   	push   eax
c001f9e4:	e8 f8 0d fe ff       	call   c00007e1 <strcat>
c001f9e9:	83 c4 10             	add    esp,0x10
c001f9ec:	83 ec 08             	sub    esp,0x8
c001f9ef:	68 14 ae 02 c0       	push   0xc002ae14
c001f9f4:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001f9fb:	50                   	push   eax
c001f9fc:	e8 e0 0d fe ff       	call   c00007e1 <strcat>
c001fa01:	83 c4 10             	add    esp,0x10
c001fa04:	83 ec 04             	sub    esp,0x4
c001fa07:	6a 01                	push   0x1
c001fa09:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001fa10:	50                   	push   eax
c001fa11:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa15:	50                   	push   eax
c001fa16:	e8 26 53 fe ff       	call   c0004d41 <f_open>
c001fa1b:	83 c4 10             	add    esp,0x10
c001fa1e:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001fa25:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001fa2c:	85 c0                	test   eax,eax
c001fa2e:	74 0a                	je     c001fa3a <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001fa30:	78 2d                	js     c001fa5f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fa32:	83 e8 04             	sub    eax,0x4
c001fa35:	83 f8 01             	cmp    eax,0x1
c001fa38:	77 25                	ja     c001fa5f <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001fa3a:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001fa42:	83 ec 0c             	sub    esp,0xc
c001fa45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fa49:	50                   	push   eax
c001fa4a:	e8 44 5e fe ff       	call   c0005893 <f_close>
c001fa4f:	83 c4 10             	add    esp,0x10
c001fa52:	90                   	nop
c001fa53:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001fa5b:	74 3a                	je     c001fa97 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001fa5d:	eb 2d                	jmp    c001fa8c <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001fa5f:	83 ec 0c             	sub    esp,0xc
c001fa62:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001fa69:	e8 86 fa fe ff       	call   c000f4f4 <rfree>
c001fa6e:	83 c4 10             	add    esp,0x10
c001fa71:	83 ec 04             	sub    esp,0x4
c001fa74:	6a 00                	push   0x0
c001fa76:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001fa7d:	50                   	push   eax
c001fa7e:	6a 00                	push   0x0
c001fa80:	e8 5a 52 fe ff       	call   c0004cdf <f_mount>
c001fa85:	83 c4 10             	add    esp,0x10
c001fa88:	b0 00                	mov    al,0x0
c001fa8a:	eb 12                	jmp    c001fa9e <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001fa8c:	a1 a0 df 02 c0       	mov    eax,ds:0xc002dfa0
c001fa91:	40                   	inc    eax
c001fa92:	a3 a0 df 02 c0       	mov    ds:0xc002dfa0,eax
c001fa97:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001fa9e:	81 c4 6c 03 00 00    	add    esp,0x36c
c001faa4:	c3                   	ret    
c001faa5:	90                   	nop

c001faa6 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001faa6:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001faac:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001fab4:	74 0a                	je     c001fac0 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001fab6:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001fabe:	75 0a                	jne    c001faca <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001fac0:	b8 04 00 00 00       	mov    eax,0x4
c001fac5:	e9 db 00 00 00       	jmp    c001fba5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001faca:	83 ec 08             	sub    esp,0x8
c001facd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fad4:	50                   	push   eax
c001fad5:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001fadc:	e8 bc 63 fe ff       	call   c0005e9d <f_readdir>
c001fae1:	83 c4 10             	add    esp,0x10
c001fae4:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001faeb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001faf1:	83 ec 0c             	sub    esp,0xc
c001faf4:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001fafb:	83 c0 1a             	add    eax,0x1a
c001fafe:	50                   	push   eax
c001faff:	e8 a4 0b fe ff       	call   c00006a8 <strlen>
c001fb04:	83 c4 10             	add    esp,0x10
c001fb07:	ba 00 00 00 00       	mov    edx,0x0
c001fb0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fb10:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fb14:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001fb1b:	0f b6 c0             	movzx  eax,al
c001fb1e:	83 e0 10             	and    eax,0x10
c001fb21:	74 07                	je     c001fb2a <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c001fb23:	b8 02 00 00 00       	mov    eax,0x2
c001fb28:	eb 05                	jmp    c001fb2f <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c001fb2a:	b8 01 00 00 00       	mov    eax,0x1
c001fb2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb33:	83 ec 08             	sub    esp,0x8
c001fb36:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001fb3d:	83 c0 1a             	add    eax,0x1a
c001fb40:	50                   	push   eax
c001fb41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001fb45:	83 c0 10             	add    eax,0x10
c001fb48:	50                   	push   eax
c001fb49:	e8 dc 0b fe ff       	call   c000072a <strcpy>
c001fb4e:	83 c4 10             	add    esp,0x10
c001fb51:	83 ec 04             	sub    esp,0x4
c001fb54:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001fb5b:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fb5f:	50                   	push   eax
c001fb60:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001fb67:	e8 e9 0a fe ff       	call   c0000655 <memcpy>
c001fb6c:	83 c4 10             	add    esp,0x10
c001fb6f:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001fb76:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001fb7c:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001fb83:	84 c0                	test   al,al
c001fb85:	75 07                	jne    c001fb8e <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c001fb87:	b8 07 00 00 00       	mov    eax,0x7
c001fb8c:	eb 17                	jmp    c001fba5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fb8e:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001fb95:	85 c0                	test   eax,eax
c001fb97:	75 07                	jne    c001fba0 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c001fb99:	b8 00 00 00 00       	mov    eax,0x0
c001fb9e:	eb 05                	jmp    c001fba5 <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c001fba0:	b8 01 00 00 00       	mov    eax,0x1
c001fba5:	81 c4 3c 02 00 00    	add    esp,0x23c
c001fbab:	c3                   	ret    

c001fbac <FAT::read(void*, unsigned long, void*, int*)>:
c001fbac:	83 ec 1c             	sub    esp,0x1c
c001fbaf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fbb4:	74 07                	je     c001fbbd <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001fbb6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fbbb:	75 07                	jne    c001fbc4 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001fbbd:	b8 04 00 00 00       	mov    eax,0x4
c001fbc2:	eb 3d                	jmp    c001fc01 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fbc4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fbc8:	50                   	push   eax
c001fbc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fbcd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fbd1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fbd5:	e8 a3 55 fe ff       	call   c000517d <f_read>
c001fbda:	83 c4 10             	add    esp,0x10
c001fbdd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbe1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fbe5:	89 c2                	mov    edx,eax
c001fbe7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fbeb:	89 10                	mov    DWORD PTR [eax],edx
c001fbed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbf1:	85 c0                	test   eax,eax
c001fbf3:	75 07                	jne    c001fbfc <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001fbf5:	b8 00 00 00 00       	mov    eax,0x0
c001fbfa:	eb 05                	jmp    c001fc01 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001fbfc:	b8 01 00 00 00       	mov    eax,0x1
c001fc01:	83 c4 1c             	add    esp,0x1c
c001fc04:	c3                   	ret    
c001fc05:	90                   	nop

c001fc06 <FAT::write(void*, unsigned long, void*, int*)>:
c001fc06:	83 ec 1c             	sub    esp,0x1c
c001fc09:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc0e:	74 07                	je     c001fc17 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001fc10:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001fc15:	75 07                	jne    c001fc1e <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001fc17:	b8 04 00 00 00       	mov    eax,0x4
c001fc1c:	eb 3d                	jmp    c001fc5b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fc1e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001fc22:	50                   	push   eax
c001fc23:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001fc27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001fc2b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc2f:	e8 c9 57 fe ff       	call   c00053fd <f_write>
c001fc34:	83 c4 10             	add    esp,0x10
c001fc37:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fc3f:	89 c2                	mov    edx,eax
c001fc41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001fc45:	89 10                	mov    DWORD PTR [eax],edx
c001fc47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc4b:	85 c0                	test   eax,eax
c001fc4d:	75 07                	jne    c001fc56 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001fc4f:	b8 00 00 00 00       	mov    eax,0x0
c001fc54:	eb 05                	jmp    c001fc5b <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001fc56:	b8 01 00 00 00       	mov    eax,0x1
c001fc5b:	83 c4 1c             	add    esp,0x1c
c001fc5e:	c3                   	ret    
c001fc5f:	90                   	nop

c001fc60 <FAT::close(void*)>:
c001fc60:	83 ec 1c             	sub    esp,0x1c
c001fc63:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fc68:	75 07                	jne    c001fc71 <FAT::close(void*)+0x11>
c001fc6a:	b8 04 00 00 00       	mov    eax,0x4
c001fc6f:	eb 36                	jmp    c001fca7 <FAT::close(void*)+0x47>
c001fc71:	83 ec 0c             	sub    esp,0xc
c001fc74:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc78:	e8 16 5c fe ff       	call   c0005893 <f_close>
c001fc7d:	83 c4 10             	add    esp,0x10
c001fc80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fc84:	83 ec 0c             	sub    esp,0xc
c001fc87:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fc8b:	e8 54 f8 fe ff       	call   c000f4e4 <free>
c001fc90:	83 c4 10             	add    esp,0x10
c001fc93:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fc97:	85 c0                	test   eax,eax
c001fc99:	75 07                	jne    c001fca2 <FAT::close(void*)+0x42>
c001fc9b:	b8 00 00 00 00       	mov    eax,0x0
c001fca0:	eb 05                	jmp    c001fca7 <FAT::close(void*)+0x47>
c001fca2:	b8 01 00 00 00       	mov    eax,0x1
c001fca7:	83 c4 1c             	add    esp,0x1c
c001fcaa:	c3                   	ret    
c001fcab:	90                   	nop

c001fcac <FAT::closeDir(void*)>:
c001fcac:	83 ec 1c             	sub    esp,0x1c
c001fcaf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001fcb4:	75 07                	jne    c001fcbd <FAT::closeDir(void*)+0x11>
c001fcb6:	b8 04 00 00 00       	mov    eax,0x4
c001fcbb:	eb 36                	jmp    c001fcf3 <FAT::closeDir(void*)+0x47>
c001fcbd:	83 ec 0c             	sub    esp,0xc
c001fcc0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fcc4:	e8 b2 61 fe ff       	call   c0005e7b <f_closedir>
c001fcc9:	83 c4 10             	add    esp,0x10
c001fccc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fcd0:	83 ec 0c             	sub    esp,0xc
c001fcd3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fcd7:	e8 08 f8 fe ff       	call   c000f4e4 <free>
c001fcdc:	83 c4 10             	add    esp,0x10
c001fcdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fce3:	85 c0                	test   eax,eax
c001fce5:	75 07                	jne    c001fcee <FAT::closeDir(void*)+0x42>
c001fce7:	b8 00 00 00 00       	mov    eax,0x0
c001fcec:	eb 05                	jmp    c001fcf3 <FAT::closeDir(void*)+0x47>
c001fcee:	b8 01 00 00 00       	mov    eax,0x1
c001fcf3:	83 c4 1c             	add    esp,0x1c
c001fcf6:	c3                   	ret    
c001fcf7:	90                   	nop

c001fcf8 <FAT::seek(void*, unsigned long long)>:
c001fcf8:	83 ec 2c             	sub    esp,0x2c
c001fcfb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fcff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fd03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fd07:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fd0b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001fd10:	75 07                	jne    c001fd19 <FAT::seek(void*, unsigned long long)+0x21>
c001fd12:	b8 04 00 00 00       	mov    eax,0x4
c001fd17:	eb 2f                	jmp    c001fd48 <FAT::seek(void*, unsigned long long)+0x50>
c001fd19:	83 ec 04             	sub    esp,0x4
c001fd1c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fd20:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001fd24:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fd28:	e8 95 5b fe ff       	call   c00058c2 <f_lseek>
c001fd2d:	83 c4 10             	add    esp,0x10
c001fd30:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fd34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd38:	85 c0                	test   eax,eax
c001fd3a:	75 07                	jne    c001fd43 <FAT::seek(void*, unsigned long long)+0x4b>
c001fd3c:	b8 00 00 00 00       	mov    eax,0x0
c001fd41:	eb 05                	jmp    c001fd48 <FAT::seek(void*, unsigned long long)+0x50>
c001fd43:	b8 01 00 00 00       	mov    eax,0x1
c001fd48:	83 c4 2c             	add    esp,0x2c
c001fd4b:	c3                   	ret    

c001fd4c <fatWrapperReadDisk>:
c001fd4c:	83 ec 1c             	sub    esp,0x1c
c001fd4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd53:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fd5b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fd5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd62:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fd66:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fd6b:	8b 04 85 a0 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3060]
c001fd72:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fd76:	83 ec 0c             	sub    esp,0xc
c001fd79:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fd7d:	52                   	push   edx
c001fd7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fd86:	50                   	push   eax
c001fd87:	e8 c2 60 ff ff       	call   c0015e4e <LogicalDisk::read(unsigned long long, int, void*)>
c001fd8c:	83 c4 20             	add    esp,0x20
c001fd8f:	83 c4 1c             	add    esp,0x1c
c001fd92:	c3                   	ret    

c001fd93 <fatWrapperWriteDisk>:
c001fd93:	83 ec 1c             	sub    esp,0x1c
c001fd96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fd9a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001fd9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001fda2:	89 04 24             	mov    DWORD PTR [esp],eax
c001fda5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fda9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001fdad:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fdb2:	8b 04 85 a0 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3060]
c001fdb9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fdbd:	83 ec 0c             	sub    esp,0xc
c001fdc0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001fdc4:	52                   	push   edx
c001fdc5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdc9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdcd:	50                   	push   eax
c001fdce:	e8 e7 60 ff ff       	call   c0015eba <LogicalDisk::write(unsigned long long, int, void*)>
c001fdd3:	83 c4 20             	add    esp,0x20
c001fdd6:	83 c4 1c             	add    esp,0x1c
c001fdd9:	c3                   	ret    

c001fdda <fatWrapperIoctl>:
c001fdda:	53                   	push   ebx
c001fddb:	83 ec 28             	sub    esp,0x28
c001fdde:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001fde2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001fde6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001fdea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001fdee:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001fdf3:	75 31                	jne    c001fe26 <fatWrapperIoctl+0x4c>
c001fdf5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fdf9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001fdfd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fe02:	8b 04 85 a0 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3060]
c001fe09:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fe0f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fe15:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fe19:	66 89 02             	mov    WORD PTR [edx],ax
c001fe1c:	b8 00 00 00 00       	mov    eax,0x0
c001fe21:	e9 b2 00 00 00       	jmp    c001fed8 <fatWrapperIoctl+0xfe>
c001fe26:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001fe2b:	75 6a                	jne    c001fe97 <fatWrapperIoctl+0xbd>
c001fe2d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001fe31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe35:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001fe3a:	8b 04 85 a0 cf 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3060]
c001fe41:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001fe47:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001fe4d:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001fe53:	89 c8                	mov    eax,ecx
c001fe55:	89 da                	mov    edx,ebx
c001fe57:	0f a4 c2 0a          	shld   edx,eax,0xa
c001fe5b:	c1 e0 0a             	shl    eax,0xa
c001fe5e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001fe63:	8b 0c 8d a0 cf 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd3060]
c001fe6a:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001fe70:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001fe76:	89 cb                	mov    ebx,ecx
c001fe78:	c1 fb 1f             	sar    ebx,0x1f
c001fe7b:	53                   	push   ebx
c001fe7c:	51                   	push   ecx
c001fe7d:	52                   	push   edx
c001fe7e:	50                   	push   eax
c001fe7f:	e8 68 55 00 00       	call   c00253ec <__udivdi3>
c001fe84:	83 c4 10             	add    esp,0x10
c001fe87:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001fe8b:	89 01                	mov    DWORD PTR [ecx],eax
c001fe8d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001fe90:	b8 00 00 00 00       	mov    eax,0x0
c001fe95:	eb 41                	jmp    c001fed8 <fatWrapperIoctl+0xfe>
c001fe97:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001fe9c:	75 07                	jne    c001fea5 <fatWrapperIoctl+0xcb>
c001fe9e:	b8 00 00 00 00       	mov    eax,0x0
c001fea3:	eb 33                	jmp    c001fed8 <fatWrapperIoctl+0xfe>
c001fea5:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001feaa:	75 19                	jne    c001fec5 <fatWrapperIoctl+0xeb>
c001feac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001feb0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001feb4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001feb8:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001febe:	b8 00 00 00 00       	mov    eax,0x0
c001fec3:	eb 13                	jmp    c001fed8 <fatWrapperIoctl+0xfe>
c001fec5:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001feca:	75 07                	jne    c001fed3 <fatWrapperIoctl+0xf9>
c001fecc:	b8 00 00 00 00       	mov    eax,0x0
c001fed1:	eb 05                	jmp    c001fed8 <fatWrapperIoctl+0xfe>
c001fed3:	b8 04 00 00 00       	mov    eax,0x4
c001fed8:	83 c4 28             	add    esp,0x28
c001fedb:	5b                   	pop    ebx
c001fedc:	c3                   	ret    
c001fedd:	90                   	nop

c001fede <FAT::FAT()>:
c001fede:	83 ec 1c             	sub    esp,0x1c
c001fee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fee5:	83 ec 0c             	sub    esp,0xc
c001fee8:	50                   	push   eax
c001fee9:	e8 d8 2b ff ff       	call   c0012ac6 <Filesystem::Filesystem()>
c001feee:	83 c4 10             	add    esp,0x10
c001fef1:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c001fef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001fefa:	89 10                	mov    DWORD PTR [eax],edx
c001fefc:	c7 05 a0 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002dfa0,0x0
c001ff06:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ff0e:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001ff13:	7f 15                	jg     c001ff2a <FAT::FAT()+0x4c>
c001ff15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff19:	c7 04 85 c0 df 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2040],0xffffffff
c001ff24:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ff28:	eb e4                	jmp    c001ff0e <FAT::FAT()+0x30>
c001ff2a:	90                   	nop
c001ff2b:	83 c4 1c             	add    esp,0x1c
c001ff2e:	c3                   	ret    
c001ff2f:	90                   	nop

c001ff30 <FAT::fixFilepath(char*)>:
c001ff30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff34:	8a 00                	mov    al,BYTE PTR [eax]
c001ff36:	3c 40                	cmp    al,0x40
c001ff38:	7e 2c                	jle    c001ff66 <FAT::fixFilepath(char*)+0x36>
c001ff3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff3e:	8a 00                	mov    al,BYTE PTR [eax]
c001ff40:	83 e8 41             	sub    eax,0x41
c001ff43:	88 c2                	mov    dl,al
c001ff45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff49:	88 10                	mov    BYTE PTR [eax],dl
c001ff4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff4f:	8a 00                	mov    al,BYTE PTR [eax]
c001ff51:	0f be c0             	movsx  eax,al
c001ff54:	8b 04 85 c0 df 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2040]
c001ff5b:	83 c0 30             	add    eax,0x30
c001ff5e:	88 c2                	mov    dl,al
c001ff60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff64:	88 10                	mov    BYTE PTR [eax],dl
c001ff66:	90                   	nop
c001ff67:	c3                   	ret    

c001ff68 <FAT::open(char const*, void**, FileOpenMode)>:
c001ff68:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ff6e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ff76:	74 0a                	je     c001ff82 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001ff78:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ff80:	75 0a                	jne    c001ff8c <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001ff82:	b8 04 00 00 00       	mov    eax,0x4
c001ff87:	e9 fd 00 00 00       	jmp    c0020089 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001ff8c:	83 ec 08             	sub    esp,0x8
c001ff8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ff96:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ff9a:	50                   	push   eax
c001ff9b:	e8 8a 07 fe ff       	call   c000072a <strcpy>
c001ffa0:	83 c4 10             	add    esp,0x10
c001ffa3:	83 ec 08             	sub    esp,0x8
c001ffa6:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ffaa:	50                   	push   eax
c001ffab:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ffb2:	e8 79 ff ff ff       	call   c001ff30 <FAT::fixFilepath(char*)>
c001ffb7:	83 c4 10             	add    esp,0x10
c001ffba:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001ffc2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffc9:	83 e0 01             	and    eax,0x1
c001ffcc:	74 08                	je     c001ffd6 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001ffce:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001ffd6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001ffdd:	83 e0 04             	and    eax,0x4
c001ffe0:	74 10                	je     c001fff2 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001ffe2:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001ffea:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001fff2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001fff9:	83 e0 02             	and    eax,0x2
c001fffc:	74 08                	je     c0020006 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001fffe:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020006:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c002000d:	83 e0 08             	and    eax,0x8
c0020010:	74 08                	je     c002001a <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020012:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c002001a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020021:	83 e0 10             	and    eax,0x10
c0020024:	74 08                	je     c002002e <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020026:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c002002e:	83 ec 0c             	sub    esp,0xc
c0020031:	68 50 02 00 00       	push   0x250
c0020036:	e8 99 f4 fe ff       	call   c000f4d4 <malloc>
c002003b:	83 c4 10             	add    esp,0x10
c002003e:	89 c2                	mov    edx,eax
c0020040:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020047:	89 10                	mov    DWORD PTR [eax],edx
c0020049:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020051:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020058:	8b 00                	mov    eax,DWORD PTR [eax]
c002005a:	83 ec 04             	sub    esp,0x4
c002005d:	52                   	push   edx
c002005e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020062:	52                   	push   edx
c0020063:	50                   	push   eax
c0020064:	e8 d8 4c fe ff       	call   c0004d41 <f_open>
c0020069:	83 c4 10             	add    esp,0x10
c002006c:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020073:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c002007b:	74 07                	je     c0020084 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c002007d:	b8 01 00 00 00       	mov    eax,0x1
c0020082:	eb 05                	jmp    c0020089 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020084:	b8 00 00 00 00       	mov    eax,0x0
c0020089:	81 c4 1c 01 00 00    	add    esp,0x11c
c002008f:	c3                   	ret    

c0020090 <FAT::openDir(char const*, void**)>:
c0020090:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020096:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002009e:	74 0a                	je     c00200aa <FAT::openDir(char const*, void**)+0x1a>
c00200a0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00200a8:	75 07                	jne    c00200b1 <FAT::openDir(char const*, void**)+0x21>
c00200aa:	b8 04 00 00 00       	mov    eax,0x4
c00200af:	eb 7d                	jmp    c002012e <FAT::openDir(char const*, void**)+0x9e>
c00200b1:	83 ec 08             	sub    esp,0x8
c00200b4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00200bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00200bf:	50                   	push   eax
c00200c0:	e8 65 06 fe ff       	call   c000072a <strcpy>
c00200c5:	83 c4 10             	add    esp,0x10
c00200c8:	83 ec 08             	sub    esp,0x8
c00200cb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00200cf:	50                   	push   eax
c00200d0:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00200d7:	e8 54 fe ff ff       	call   c001ff30 <FAT::fixFilepath(char*)>
c00200dc:	83 c4 10             	add    esp,0x10
c00200df:	83 ec 0c             	sub    esp,0xc
c00200e2:	6a 4c                	push   0x4c
c00200e4:	e8 eb f3 fe ff       	call   c000f4d4 <malloc>
c00200e9:	83 c4 10             	add    esp,0x10
c00200ec:	89 c2                	mov    edx,eax
c00200ee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200f5:	89 10                	mov    DWORD PTR [eax],edx
c00200f7:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00200fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0020100:	83 ec 08             	sub    esp,0x8
c0020103:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020107:	52                   	push   edx
c0020108:	50                   	push   eax
c0020109:	e8 6b 5c fe ff       	call   c0005d79 <f_opendir>
c002010e:	83 c4 10             	add    esp,0x10
c0020111:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020118:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020120:	74 07                	je     c0020129 <FAT::openDir(char const*, void**)+0x99>
c0020122:	b8 01 00 00 00       	mov    eax,0x1
c0020127:	eb 05                	jmp    c002012e <FAT::openDir(char const*, void**)+0x9e>
c0020129:	b8 00 00 00 00       	mov    eax,0x0
c002012e:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020134:	c3                   	ret    
c0020135:	90                   	nop

c0020136 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020136:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002013c:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020144:	75 0a                	jne    c0020150 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020146:	b8 04 00 00 00       	mov    eax,0x4
c002014b:	e9 c9 00 00 00       	jmp    c0020219 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020150:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020158:	75 0a                	jne    c0020164 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c002015a:	b8 04 00 00 00       	mov    eax,0x4
c002015f:	e9 b5 00 00 00       	jmp    c0020219 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020164:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c002016c:	75 0a                	jne    c0020178 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c002016e:	b8 04 00 00 00       	mov    eax,0x4
c0020173:	e9 a1 00 00 00       	jmp    c0020219 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020178:	83 ec 08             	sub    esp,0x8
c002017b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020182:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020189:	50                   	push   eax
c002018a:	e8 9b 05 fe ff       	call   c000072a <strcpy>
c002018f:	83 c4 10             	add    esp,0x10
c0020192:	83 ec 08             	sub    esp,0x8
c0020195:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c002019c:	50                   	push   eax
c002019d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00201a4:	e8 87 fd ff ff       	call   c001ff30 <FAT::fixFilepath(char*)>
c00201a9:	83 c4 10             	add    esp,0x10
c00201ac:	83 ec 08             	sub    esp,0x8
c00201af:	8d 44 24 08          	lea    eax,[esp+0x8]
c00201b3:	50                   	push   eax
c00201b4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00201bb:	50                   	push   eax
c00201bc:	e8 77 5d fe ff       	call   c0005f38 <f_stat>
c00201c1:	83 c4 10             	add    esp,0x10
c00201c4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00201cb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00201d2:	85 c0                	test   eax,eax
c00201d4:	74 07                	je     c00201dd <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00201d6:	83 f8 04             	cmp    eax,0x4
c00201d9:	74 32                	je     c002020d <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00201db:	eb 37                	jmp    c0020214 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00201dd:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00201e1:	0f b6 c0             	movzx  eax,al
c00201e4:	83 e0 10             	and    eax,0x10
c00201e7:	0f 95 c2             	setne  dl
c00201ea:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00201f1:	88 10                	mov    BYTE PTR [eax],dl
c00201f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00201f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00201fa:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020201:	89 01                	mov    DWORD PTR [ecx],eax
c0020203:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020206:	b8 00 00 00 00       	mov    eax,0x0
c002020b:	eb 0c                	jmp    c0020219 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002020d:	b8 02 00 00 00       	mov    eax,0x2
c0020212:	eb 05                	jmp    c0020219 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020214:	b8 01 00 00 00       	mov    eax,0x1
c0020219:	81 c4 2c 02 00 00    	add    esp,0x22c
c002021f:	c3                   	ret    

c0020220 <FAT::unlink(char const*)>:
c0020220:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020226:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002022e:	75 07                	jne    c0020237 <FAT::unlink(char const*)+0x17>
c0020230:	b8 04 00 00 00       	mov    eax,0x4
c0020235:	eb 5c                	jmp    c0020293 <FAT::unlink(char const*)+0x73>
c0020237:	83 ec 08             	sub    esp,0x8
c002023a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020241:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020245:	50                   	push   eax
c0020246:	e8 df 04 fe ff       	call   c000072a <strcpy>
c002024b:	83 c4 10             	add    esp,0x10
c002024e:	83 ec 08             	sub    esp,0x8
c0020251:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020255:	50                   	push   eax
c0020256:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002025d:	e8 ce fc ff ff       	call   c001ff30 <FAT::fixFilepath(char*)>
c0020262:	83 c4 10             	add    esp,0x10
c0020265:	83 ec 0c             	sub    esp,0xc
c0020268:	8d 44 24 18          	lea    eax,[esp+0x18]
c002026c:	50                   	push   eax
c002026d:	e8 18 60 fe ff       	call   c000628a <f_unlink>
c0020272:	83 c4 10             	add    esp,0x10
c0020275:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002027c:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020283:	85 c0                	test   eax,eax
c0020285:	75 07                	jne    c002028e <FAT::unlink(char const*)+0x6e>
c0020287:	b8 00 00 00 00       	mov    eax,0x0
c002028c:	eb 05                	jmp    c0020293 <FAT::unlink(char const*)+0x73>
c002028e:	b8 01 00 00 00       	mov    eax,0x1
c0020293:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020299:	c3                   	ret    

c002029a <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c002029a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00202a0:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00202a7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00202ae:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00202b2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00202b6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00202be:	75 0a                	jne    c00202ca <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00202c0:	b8 04 00 00 00       	mov    eax,0x4
c00202c5:	e9 1c 01 00 00       	jmp    c00203e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00202ca:	83 ec 08             	sub    esp,0x8
c00202cd:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00202d4:	8d 44 24 24          	lea    eax,[esp+0x24]
c00202d8:	50                   	push   eax
c00202d9:	e8 4c 04 fe ff       	call   c000072a <strcpy>
c00202de:	83 c4 10             	add    esp,0x10
c00202e1:	83 ec 08             	sub    esp,0x8
c00202e4:	8d 44 24 20          	lea    eax,[esp+0x20]
c00202e8:	50                   	push   eax
c00202e9:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00202f0:	e8 3b fc ff ff       	call   c001ff30 <FAT::fixFilepath(char*)>
c00202f5:	83 c4 10             	add    esp,0x10
c00202f8:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020300:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020308:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002030d:	83 e0 01             	and    eax,0x1
c0020310:	74 08                	je     c002031a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020312:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c002031a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002031f:	83 e0 02             	and    eax,0x2
c0020322:	74 08                	je     c002032c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020324:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c002032c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020331:	83 e0 04             	and    eax,0x4
c0020334:	74 08                	je     c002033e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020336:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c002033e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020343:	83 e0 08             	and    eax,0x8
c0020346:	74 08                	je     c0020350 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020348:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020350:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020355:	83 e0 01             	and    eax,0x1
c0020358:	74 08                	je     c0020362 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c002035a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0020362:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020367:	83 e0 02             	and    eax,0x2
c002036a:	74 08                	je     c0020374 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c002036c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0020374:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020379:	83 e0 04             	and    eax,0x4
c002037c:	74 08                	je     c0020386 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c002037e:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0020386:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002038b:	83 e0 08             	and    eax,0x8
c002038e:	74 08                	je     c0020398 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0020390:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0020398:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c002039f:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00203a6:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00203ae:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00203b6:	83 ec 04             	sub    esp,0x4
c00203b9:	52                   	push   edx
c00203ba:	50                   	push   eax
c00203bb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00203bf:	50                   	push   eax
c00203c0:	e8 67 65 fe ff       	call   c000692c <f_chmod>
c00203c5:	83 c4 10             	add    esp,0x10
c00203c8:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00203cf:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00203d6:	85 c0                	test   eax,eax
c00203d8:	75 07                	jne    c00203e1 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c00203da:	b8 00 00 00 00       	mov    eax,0x0
c00203df:	eb 05                	jmp    c00203e6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00203e1:	b8 01 00 00 00       	mov    eax,0x1
c00203e6:	81 c4 2c 01 00 00    	add    esp,0x12c
c00203ec:	c3                   	ret    
c00203ed:	90                   	nop

c00203ee <FAT::rename(char const*, char const*)>:
c00203ee:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00203f4:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00203fc:	74 0a                	je     c0020408 <FAT::rename(char const*, char const*)+0x1a>
c00203fe:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0020406:	75 0a                	jne    c0020412 <FAT::rename(char const*, char const*)+0x24>
c0020408:	b8 04 00 00 00       	mov    eax,0x4
c002040d:	e9 98 00 00 00       	jmp    c00204aa <FAT::rename(char const*, char const*)+0xbc>
c0020412:	83 ec 08             	sub    esp,0x8
c0020415:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002041c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020423:	50                   	push   eax
c0020424:	e8 01 03 fe ff       	call   c000072a <strcpy>
c0020429:	83 c4 10             	add    esp,0x10
c002042c:	83 ec 08             	sub    esp,0x8
c002042f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0020436:	50                   	push   eax
c0020437:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002043e:	e8 ed fa ff ff       	call   c001ff30 <FAT::fixFilepath(char*)>
c0020443:	83 c4 10             	add    esp,0x10
c0020446:	83 ec 08             	sub    esp,0x8
c0020449:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0020450:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020454:	50                   	push   eax
c0020455:	e8 d0 02 fe ff       	call   c000072a <strcpy>
c002045a:	83 c4 10             	add    esp,0x10
c002045d:	83 ec 08             	sub    esp,0x8
c0020460:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020464:	50                   	push   eax
c0020465:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c002046c:	e8 bf fa ff ff       	call   c001ff30 <FAT::fixFilepath(char*)>
c0020471:	83 c4 10             	add    esp,0x10
c0020474:	83 ec 08             	sub    esp,0x8
c0020477:	8d 44 24 14          	lea    eax,[esp+0x14]
c002047b:	50                   	push   eax
c002047c:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020483:	50                   	push   eax
c0020484:	e8 b0 61 fe ff       	call   c0006639 <f_rename>
c0020489:	83 c4 10             	add    esp,0x10
c002048c:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0020493:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c002049a:	85 c0                	test   eax,eax
c002049c:	75 07                	jne    c00204a5 <FAT::rename(char const*, char const*)+0xb7>
c002049e:	b8 00 00 00 00       	mov    eax,0x0
c00204a3:	eb 05                	jmp    c00204aa <FAT::rename(char const*, char const*)+0xbc>
c00204a5:	b8 01 00 00 00       	mov    eax,0x1
c00204aa:	81 c4 1c 02 00 00    	add    esp,0x21c
c00204b0:	c3                   	ret    
c00204b1:	90                   	nop

c00204b2 <FAT::mkdir(char const*)>:
c00204b2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00204b8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00204c0:	75 07                	jne    c00204c9 <FAT::mkdir(char const*)+0x17>
c00204c2:	b8 04 00 00 00       	mov    eax,0x4
c00204c7:	eb 5c                	jmp    c0020525 <FAT::mkdir(char const*)+0x73>
c00204c9:	83 ec 08             	sub    esp,0x8
c00204cc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204d7:	50                   	push   eax
c00204d8:	e8 4d 02 fe ff       	call   c000072a <strcpy>
c00204dd:	83 c4 10             	add    esp,0x10
c00204e0:	83 ec 08             	sub    esp,0x8
c00204e3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00204e7:	50                   	push   eax
c00204e8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00204ef:	e8 3c fa ff ff       	call   c001ff30 <FAT::fixFilepath(char*)>
c00204f4:	83 c4 10             	add    esp,0x10
c00204f7:	83 ec 0c             	sub    esp,0xc
c00204fa:	8d 44 24 18          	lea    eax,[esp+0x18]
c00204fe:	50                   	push   eax
c00204ff:	e8 09 5f fe ff       	call   c000640d <f_mkdir>
c0020504:	83 c4 10             	add    esp,0x10
c0020507:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c002050e:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020515:	85 c0                	test   eax,eax
c0020517:	75 07                	jne    c0020520 <FAT::mkdir(char const*)+0x6e>
c0020519:	b8 00 00 00 00       	mov    eax,0x0
c002051e:	eb 05                	jmp    c0020525 <FAT::mkdir(char const*)+0x73>
c0020520:	b8 01 00 00 00       	mov    eax,0x1
c0020525:	81 c4 1c 01 00 00    	add    esp,0x11c
c002052b:	c3                   	ret    

c002052c <FAT::exists(char const*)>:
c002052c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020532:	83 ec 08             	sub    esp,0x8
c0020535:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002053c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020540:	50                   	push   eax
c0020541:	e8 e4 01 fe ff       	call   c000072a <strcpy>
c0020546:	83 c4 10             	add    esp,0x10
c0020549:	83 ec 08             	sub    esp,0x8
c002054c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020550:	50                   	push   eax
c0020551:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020558:	e8 d3 f9 ff ff       	call   c001ff30 <FAT::fixFilepath(char*)>
c002055d:	83 c4 10             	add    esp,0x10
c0020560:	83 ec 08             	sub    esp,0x8
c0020563:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c002056a:	50                   	push   eax
c002056b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002056f:	50                   	push   eax
c0020570:	e8 c3 59 fe ff       	call   c0005f38 <f_stat>
c0020575:	83 c4 10             	add    esp,0x10
c0020578:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c002057f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020586:	85 c0                	test   eax,eax
c0020588:	75 04                	jne    c002058e <FAT::exists(char const*)+0x62>
c002058a:	b0 01                	mov    al,0x1
c002058c:	eb 02                	jmp    c0020590 <FAT::exists(char const*)+0x64>
c002058e:	b0 00                	mov    al,0x0
c0020590:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020596:	c3                   	ret    
c0020597:	90                   	nop

c0020598 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0020598:	b8 08 00 00 00       	mov    eax,0x8
c002059d:	c3                   	ret    

c002059e <ISO9660::seek(void*, unsigned long long)>:
c002059e:	53                   	push   ebx
c002059f:	b8 04 00 00 00       	mov    eax,0x4
c00205a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00205a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00205ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00205b0:	85 d2                	test   edx,edx
c00205b2:	74 17                	je     c00205cb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00205b4:	89 c8                	mov    eax,ecx
c00205b6:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00205b9:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00205bc:	b8 01 00 00 00       	mov    eax,0x1
c00205c1:	73 08                	jae    c00205cb <ISO9660::seek(void*, unsigned long long)+0x2d>
c00205c3:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00205c6:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00205c9:	31 c0                	xor    eax,eax
c00205cb:	5b                   	pop    ebx
c00205cc:	c3                   	ret    
c00205cd:	90                   	nop

c00205ce <ISO9660::tell(void*, unsigned long long*)>:
c00205ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00205d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00205d6:	85 d2                	test   edx,edx
c00205d8:	74 12                	je     c00205ec <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00205da:	85 c0                	test   eax,eax
c00205dc:	74 0e                	je     c00205ec <ISO9660::tell(void*, unsigned long long*)+0x1e>
c00205de:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c00205e1:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c00205e4:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00205e7:	89 10                	mov    DWORD PTR [eax],edx
c00205e9:	31 c0                	xor    eax,eax
c00205eb:	c3                   	ret    
c00205ec:	b8 04 00 00 00       	mov    eax,0x4
c00205f1:	c3                   	ret    

c00205f2 <ISO9660::getName()>:
c00205f2:	b8 ac ae 02 c0       	mov    eax,0xc002aeac
c00205f7:	c3                   	ret    

c00205f8 <ISO9660::stat(void*, unsigned long long*)>:
c00205f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00205fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020600:	85 d2                	test   edx,edx
c0020602:	74 12                	je     c0020616 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020604:	85 c0                	test   eax,eax
c0020606:	74 0e                	je     c0020616 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0020608:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c002060b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c002060e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0020611:	89 10                	mov    DWORD PTR [eax],edx
c0020613:	31 c0                	xor    eax,eax
c0020615:	c3                   	ret    
c0020616:	b8 04 00 00 00       	mov    eax,0x4
c002061b:	c3                   	ret    

c002061c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c002061c:	b8 01 00 00 00       	mov    eax,0x1
c0020621:	c3                   	ret    

c0020622 <ISO9660::unlink(char const*)>:
c0020622:	b8 01 00 00 00       	mov    eax,0x1
c0020627:	c3                   	ret    

c0020628 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0020628:	b8 01 00 00 00       	mov    eax,0x1
c002062d:	c3                   	ret    

c002062e <ISO9660::rename(char const*, char const*)>:
c002062e:	b8 01 00 00 00       	mov    eax,0x1
c0020633:	c3                   	ret    

c0020634 <ISO9660::mkdir(char const*)>:
c0020634:	b8 01 00 00 00       	mov    eax,0x1
c0020639:	c3                   	ret    

c002063a <ISO9660::close(void*)>:
c002063a:	83 ec 0c             	sub    esp,0xc
c002063d:	b8 04 00 00 00       	mov    eax,0x4
c0020642:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020646:	85 d2                	test   edx,edx
c0020648:	74 0e                	je     c0020658 <ISO9660::close(void*)+0x1e>
c002064a:	83 ec 0c             	sub    esp,0xc
c002064d:	52                   	push   edx
c002064e:	e8 91 ee fe ff       	call   c000f4e4 <free>
c0020653:	83 c4 10             	add    esp,0x10
c0020656:	31 c0                	xor    eax,eax
c0020658:	83 c4 0c             	add    esp,0xc
c002065b:	c3                   	ret    

c002065c <ISO9660::closeDir(void*)>:
c002065c:	83 ec 0c             	sub    esp,0xc
c002065f:	b8 04 00 00 00       	mov    eax,0x4
c0020664:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020668:	85 d2                	test   edx,edx
c002066a:	74 0e                	je     c002067a <ISO9660::closeDir(void*)+0x1e>
c002066c:	83 ec 0c             	sub    esp,0xc
c002066f:	52                   	push   edx
c0020670:	e8 6f ee fe ff       	call   c000f4e4 <free>
c0020675:	83 c4 10             	add    esp,0x10
c0020678:	31 c0                	xor    eax,eax
c002067a:	83 c4 0c             	add    esp,0xc
c002067d:	c3                   	ret    

c002067e <ISO9660::~ISO9660()>:
c002067e:	83 ec 0c             	sub    esp,0xc
c0020681:	ba 00 af 02 c0       	mov    edx,0xc002af00
c0020686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002068a:	89 10                	mov    DWORD PTR [eax],edx
c002068c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020690:	83 ec 0c             	sub    esp,0xc
c0020693:	50                   	push   eax
c0020694:	e8 51 24 ff ff       	call   c0012aea <Filesystem::~Filesystem()>
c0020699:	83 c4 10             	add    esp,0x10
c002069c:	90                   	nop
c002069d:	83 c4 0c             	add    esp,0xc
c00206a0:	c3                   	ret    
c00206a1:	90                   	nop

c00206a2 <ISO9660::~ISO9660()>:
c00206a2:	83 ec 0c             	sub    esp,0xc
c00206a5:	83 ec 0c             	sub    esp,0xc
c00206a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ac:	e8 cd ff ff ff       	call   c002067e <ISO9660::~ISO9660()>
c00206b1:	83 c4 10             	add    esp,0x10
c00206b4:	83 ec 08             	sub    esp,0x8
c00206b7:	6a 08                	push   0x8
c00206b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206bd:	e8 1f 20 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00206c2:	83 c4 10             	add    esp,0x10
c00206c5:	83 c4 0c             	add    esp,0xc
c00206c8:	c3                   	ret    

c00206c9 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00206c9:	55                   	push   ebp
c00206ca:	31 c9                	xor    ecx,ecx
c00206cc:	57                   	push   edi
c00206cd:	56                   	push   esi
c00206ce:	53                   	push   ebx
c00206cf:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00206d3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00206d7:	89 eb                	mov    ebx,ebp
c00206d9:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c00206dd:	39 ce                	cmp    esi,ecx
c00206df:	7e 17                	jle    c00206f8 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c00206e1:	31 d2                	xor    edx,edx
c00206e3:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c00206e7:	7d 13                	jge    c00206fc <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c00206e9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00206ed:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00206f0:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c00206f3:	75 0d                	jne    c0020702 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c00206f5:	42                   	inc    edx
c00206f6:	eb eb                	jmp    c00206e3 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00206f8:	31 c0                	xor    eax,eax
c00206fa:	eb 0a                	jmp    c0020706 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00206fc:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0020700:	eb 04                	jmp    c0020706 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0020702:	41                   	inc    ecx
c0020703:	43                   	inc    ebx
c0020704:	eb d7                	jmp    c00206dd <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0020706:	5b                   	pop    ebx
c0020707:	5e                   	pop    esi
c0020708:	5f                   	pop    edi
c0020709:	5d                   	pop    ebp
c002070a:	c3                   	ret    

c002070b <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c002070b:	56                   	push   esi
c002070c:	53                   	push   ebx
c002070d:	52                   	push   edx
c002070e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020712:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0020716:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002071a:	39 0d a0 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0a0,ecx
c0020720:	75 08                	jne    c002072a <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0020722:	38 05 14 bf 02 c0    	cmp    BYTE PTR ds:0xc002bf14,al
c0020728:	74 2b                	je     c0020755 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c002072a:	83 ec 0c             	sub    esp,0xc
c002072d:	a2 14 bf 02 c0       	mov    ds:0xc002bf14,al
c0020732:	68 c0 e0 02 c0       	push   0xc002e0c0
c0020737:	0f be c0             	movsx  eax,al
c002073a:	6a 01                	push   0x1
c002073c:	89 0d a0 e0 02 c0    	mov    DWORD PTR ds:0xc002e0a0,ecx
c0020742:	31 db                	xor    ebx,ebx
c0020744:	53                   	push   ebx
c0020745:	51                   	push   ecx
c0020746:	ff 34 85 9c ce 02 c0 	push   DWORD PTR [eax*4-0x3ffd3164]
c002074d:	e8 fc 56 ff ff       	call   c0015e4e <LogicalDisk::read(unsigned long long, int, void*)>
c0020752:	83 c4 20             	add    esp,0x20
c0020755:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c002075d:	c7 44 24 14 c0 e0 02 c0 	mov    DWORD PTR [esp+0x14],0xc002e0c0
c0020765:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0020769:	58                   	pop    eax
c002076a:	5b                   	pop    ebx
c002076b:	5e                   	pop    esi
c002076c:	e9 e4 fe fd ff       	jmp    c0000655 <memcpy>
c0020771:	90                   	nop

c0020772 <ISO9660::tryMount(LogicalDisk*, int)>:
c0020772:	81 ec 10 08 00 00    	sub    esp,0x810
c0020778:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c002077f:	83 c0 41             	add    eax,0x41
c0020782:	0f be c0             	movsx  eax,al
c0020785:	50                   	push   eax
c0020786:	8d 44 24 08          	lea    eax,[esp+0x8]
c002078a:	50                   	push   eax
c002078b:	6a 10                	push   0x10
c002078d:	e8 79 ff ff ff       	call   c002070b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020792:	83 c4 10             	add    esp,0x10
c0020795:	31 c0                	xor    eax,eax
c0020797:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c002079c:	75 1d                	jne    c00207bb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002079e:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00207a3:	75 16                	jne    c00207bb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00207a5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00207aa:	75 0f                	jne    c00207bb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00207ac:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00207b1:	75 08                	jne    c00207bb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00207b3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00207b8:	0f 94 c0             	sete   al
c00207bb:	81 c4 0c 08 00 00    	add    esp,0x80c
c00207c1:	c3                   	ret    

c00207c2 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00207c2:	55                   	push   ebp
c00207c3:	57                   	push   edi
c00207c4:	56                   	push   esi
c00207c5:	53                   	push   ebx
c00207c6:	81 ec 34 08 00 00    	sub    esp,0x834
c00207cc:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c00207d3:	55                   	push   ebp
c00207d4:	68 c7 ae 02 c0       	push   0xc002aec7
c00207d9:	e8 e3 1f ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00207de:	83 c4 10             	add    esp,0x10
c00207e1:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c00207e9:	0f 84 06 02 00 00    	je     c00209f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00207ef:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c00207f7:	0f 84 f8 01 00 00    	je     c00209f5 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c00207fd:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0020804:	b8 01 00 00 00       	mov    eax,0x1
c0020809:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c002080d:	0f 85 e7 01 00 00    	jne    c00209fa <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0020813:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0020816:	31 d2                	xor    edx,edx
c0020818:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c002081b:	89 e9                	mov    ecx,ebp
c002081d:	89 d3                	mov    ebx,edx
c002081f:	01 f1                	add    ecx,esi
c0020821:	11 fb                	adc    ebx,edi
c0020823:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020827:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002082b:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c0020832:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0020835:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0020838:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002083c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0020840:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020844:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020848:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c002084c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0020850:	72 19                	jb     c002086b <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0020852:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002085a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002085e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0020861:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020865:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020869:	eb 13                	jmp    c002087e <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c002086b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002086f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0020873:	29 f0                	sub    eax,esi
c0020875:	19 fa                	sbb    edx,edi
c0020877:	89 04 24             	mov    DWORD PTR [esp],eax
c002087a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002087e:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0020885:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0020888:	8b 00                	mov    eax,DWORD PTR [eax]
c002088a:	53                   	push   ebx
c002088b:	0f a4 c2 0b          	shld   edx,eax,0xb
c002088f:	c1 e0 0b             	shl    eax,0xb
c0020892:	01 c6                	add    esi,eax
c0020894:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002089b:	11 d7                	adc    edi,edx
c002089d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c00208a1:	89 fa                	mov    edx,edi
c00208a3:	50                   	push   eax
c00208a4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00208a8:	50                   	push   eax
c00208a9:	89 f0                	mov    eax,esi
c00208ab:	0f ac d0 0b          	shrd   eax,edx,0xb
c00208af:	50                   	push   eax
c00208b0:	e8 56 fe ff ff       	call   c002070b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00208b5:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c00208bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00208c0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00208c3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00208c7:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00208cd:	83 c4 10             	add    esp,0x10
c00208d0:	b8 00 08 00 00       	mov    eax,0x800
c00208d5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00208d9:	29 d0                	sub    eax,edx
c00208db:	39 c1                	cmp    ecx,eax
c00208dd:	83 db 00             	sbb    ebx,0x0
c00208e0:	7d 19                	jge    c00208fb <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c00208e2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00208e7:	75 16                	jne    c00208ff <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c00208e9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00208f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00208f6:	e9 f6 00 00 00       	jmp    c00209f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c00208fb:	89 c5                	mov    ebp,eax
c00208fd:	eb 03                	jmp    c0020902 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c00208ff:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0020902:	51                   	push   ecx
c0020903:	55                   	push   ebp
c0020904:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c0020908:	50                   	push   eax
c0020909:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c0020910:	e8 40 fd fd ff       	call   c0000655 <memcpy>
c0020915:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020919:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c002091d:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c0020924:	01 e8                	add    eax,ebp
c0020926:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002092a:	89 e8                	mov    eax,ebp
c002092c:	99                   	cdq    
c002092d:	01 ee                	add    esi,ebp
c002092f:	11 d7                	adc    edi,edx
c0020931:	29 e9                	sub    ecx,ebp
c0020933:	19 d3                	sbb    ebx,edx
c0020935:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0020939:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c002093d:	83 c4 10             	add    esp,0x10
c0020940:	b8 ff 07 00 00       	mov    eax,0x7ff
c0020945:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0020948:	b8 00 00 00 00       	mov    eax,0x0
c002094d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020951:	7d 3f                	jge    c0020992 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0020953:	52                   	push   edx
c0020954:	89 fa                	mov    edx,edi
c0020956:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c002095d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0020961:	50                   	push   eax
c0020962:	89 f0                	mov    eax,esi
c0020964:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020968:	0f ac d0 0b          	shrd   eax,edx,0xb
c002096c:	50                   	push   eax
c002096d:	e8 99 fd ff ff       	call   c002070b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020972:	81 c6 00 08 00 00    	add    esi,0x800
c0020978:	83 d7 00             	adc    edi,0x0
c002097b:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0020983:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c002098b:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0020990:	eb ab                	jmp    c002093d <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c0020992:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020996:	0b 04 24             	or     eax,DWORD PTR [esp]
c0020999:	74 34                	je     c00209cf <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c002099b:	89 fa                	mov    edx,edi
c002099d:	50                   	push   eax
c002099e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00209a5:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c00209a9:	50                   	push   eax
c00209aa:	89 f0                	mov    eax,esi
c00209ac:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00209b0:	0f ac d0 0b          	shrd   eax,edx,0xb
c00209b4:	55                   	push   ebp
c00209b5:	50                   	push   eax
c00209b6:	e8 50 fd ff ff       	call   c002070b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00209bb:	83 c4 0c             	add    esp,0xc
c00209be:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00209c2:	55                   	push   ebp
c00209c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00209c7:	e8 89 fc fd ff       	call   c0000655 <memcpy>
c00209cc:	83 c4 10             	add    esp,0x10
c00209cf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00209d6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00209da:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00209de:	89 38                	mov    DWORD PTR [eax],edi
c00209e0:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c00209e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00209eb:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c00209ee:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c00209f1:	31 c0                	xor    eax,eax
c00209f3:	eb 05                	jmp    c00209fa <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c00209f5:	b8 04 00 00 00       	mov    eax,0x4
c00209fa:	81 c4 2c 08 00 00    	add    esp,0x82c
c0020a00:	5b                   	pop    ebx
c0020a01:	5e                   	pop    esi
c0020a02:	5f                   	pop    edi
c0020a03:	5d                   	pop    ebp
c0020a04:	c3                   	ret    
c0020a05:	90                   	nop

c0020a06 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0020a06:	55                   	push   ebp
c0020a07:	57                   	push   edi
c0020a08:	56                   	push   esi
c0020a09:	53                   	push   ebx
c0020a0a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0020a10:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0020a17:	85 f6                	test   esi,esi
c0020a19:	0f 84 64 02 00 00    	je     c0020c83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020a1f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0020a27:	0f 84 56 02 00 00    	je     c0020c83 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0020a2d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0020a30:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0020a33:	75 0a                	jne    c0020a3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0020a35:	b8 07 00 00 00       	mov    eax,0x7
c0020a3a:	e9 49 02 00 00       	jmp    c0020c88 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020a3f:	50                   	push   eax
c0020a40:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020a44:	50                   	push   eax
c0020a45:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020a4c:	53                   	push   ebx
c0020a4d:	8b 06                	mov    eax,DWORD PTR [esi]
c0020a4f:	c1 e0 0b             	shl    eax,0xb
c0020a52:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0020a55:	c1 e8 0b             	shr    eax,0xb
c0020a58:	50                   	push   eax
c0020a59:	e8 ad fc ff ff       	call   c002070b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020a5e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020a61:	83 c4 10             	add    esp,0x10
c0020a64:	89 c1                	mov    ecx,eax
c0020a66:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0020a69:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0020a6f:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0020a72:	84 db                	test   bl,bl
c0020a74:	0f 85 90 00 00 00    	jne    c0020b0a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0020a7a:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0020a80:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020a86:	29 c7                	sub    edi,eax
c0020a88:	89 fb                	mov    ebx,edi
c0020a8a:	c1 fb 1f             	sar    ebx,0x1f
c0020a8d:	01 f8                	add    eax,edi
c0020a8f:	11 da                	adc    edx,ebx
c0020a91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020a95:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020a99:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0020a9c:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0020a9f:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020aa2:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020aa5:	89 04 24             	mov    DWORD PTR [esp],eax
c0020aa8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020aac:	89 d8                	mov    eax,ebx
c0020aae:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020ab1:	ba 00 00 00 00       	mov    edx,0x0
c0020ab6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0020aba:	b8 00 00 00 00       	mov    eax,0x0
c0020abf:	73 0b                	jae    c0020acc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0020ac1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020ac4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020ac8:	29 f8                	sub    eax,edi
c0020aca:	19 da                	sbb    edx,ebx
c0020acc:	89 d3                	mov    ebx,edx
c0020ace:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020ad1:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020ad4:	09 c3                	or     ebx,eax
c0020ad6:	0f 84 59 ff ff ff    	je     c0020a35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0020adc:	55                   	push   ebp
c0020add:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0020ae1:	50                   	push   eax
c0020ae2:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0020ae9:	53                   	push   ebx
c0020aea:	8b 06                	mov    eax,DWORD PTR [esi]
c0020aec:	c1 e0 0b             	shl    eax,0xb
c0020aef:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0020af3:	c1 e8 0b             	shr    eax,0xb
c0020af6:	50                   	push   eax
c0020af7:	e8 0f fc ff ff       	call   c002070b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020afc:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020aff:	83 c4 10             	add    esp,0x10
c0020b02:	25 ff 07 00 00       	and    eax,0x7ff
c0020b07:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0020b0a:	57                   	push   edi
c0020b0b:	6a 28                	push   0x28
c0020b0d:	6a 00                	push   0x0
c0020b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020b13:	50                   	push   eax
c0020b14:	e8 72 fb fd ff       	call   c000068b <memset>
c0020b19:	31 d2                	xor    edx,edx
c0020b1b:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0020b1e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0020b24:	89 f8                	mov    eax,edi
c0020b26:	83 c0 21             	add    eax,0x21
c0020b29:	83 d2 00             	adc    edx,0x0
c0020b2c:	89 c7                	mov    edi,eax
c0020b2e:	89 d5                	mov    ebp,edx
c0020b30:	83 c4 10             	add    esp,0x10
c0020b33:	31 c9                	xor    ecx,ecx
c0020b35:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0020b3c:	83 f9 28             	cmp    ecx,0x28
c0020b3f:	88 04 24             	mov    BYTE PTR [esp],al
c0020b42:	0f 94 c2             	sete   dl
c0020b45:	88 d0                	mov    al,dl
c0020b47:	ba ff 07 00 00       	mov    edx,0x7ff
c0020b4c:	39 fa                	cmp    edx,edi
c0020b4e:	ba 00 00 00 00       	mov    edx,0x0
c0020b53:	19 ea                	sbb    edx,ebp
c0020b55:	0f 92 c2             	setb   dl
c0020b58:	09 c2                	or     edx,eax
c0020b5a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0020b5e:	0f 94 c0             	sete   al
c0020b61:	08 d0                	or     al,dl
c0020b63:	75 16                	jne    c0020b7b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b65:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0020b69:	74 10                	je     c0020b7b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0020b6b:	8a 04 24             	mov    al,BYTE PTR [esp]
c0020b6e:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0020b72:	41                   	inc    ecx
c0020b73:	83 c7 01             	add    edi,0x1
c0020b76:	83 d5 00             	adc    ebp,0x0
c0020b79:	eb ba                	jmp    c0020b35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0020b7b:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0020b82:	83 ec 0c             	sub    esp,0xc
c0020b85:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0020b89:	57                   	push   edi
c0020b8a:	e8 19 fb fd ff       	call   c00006a8 <strlen>
c0020b8f:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0020b97:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020b9b:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0020ba2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0020ba5:	5a                   	pop    edx
c0020ba6:	25 ff 07 00 00       	and    eax,0x7ff
c0020bab:	01 c8                	add    eax,ecx
c0020bad:	59                   	pop    ecx
c0020bae:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0020bb4:	83 e0 02             	and    eax,0x2
c0020bb7:	3c 01                	cmp    al,0x1
c0020bb9:	19 c0                	sbb    eax,eax
c0020bbb:	83 c0 02             	add    eax,0x2
c0020bbe:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0020bc2:	57                   	push   edi
c0020bc3:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0020bc7:	50                   	push   eax
c0020bc8:	e8 5d fb fd ff       	call   c000072a <strcpy>
c0020bcd:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0020bd1:	83 c4 10             	add    esp,0x10
c0020bd4:	84 c0                	test   al,al
c0020bd6:	75 21                	jne    c0020bf9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0020bd8:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0020be0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020be8:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020bf0:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0020bf7:	eb 28                	jmp    c0020c21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020bf9:	fe c8                	dec    al
c0020bfb:	75 24                	jne    c0020c21 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0020bfd:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0020c05:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0020c0d:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0020c15:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0020c1c:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0020c21:	0f b6 fb             	movzx  edi,bl
c0020c24:	31 db                	xor    ebx,ebx
c0020c26:	50                   	push   eax
c0020c27:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0020c2e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0020c32:	50                   	push   eax
c0020c33:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0020c3a:	e8 16 fa fd ff       	call   c0000655 <memcpy>
c0020c3f:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0020c46:	89 f9                	mov    ecx,edi
c0020c48:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020c4e:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0020c51:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0020c54:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0020c57:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0020c5a:	83 c4 10             	add    esp,0x10
c0020c5d:	39 c7                	cmp    edi,eax
c0020c5f:	89 df                	mov    edi,ebx
c0020c61:	19 d7                	sbb    edi,edx
c0020c63:	72 10                	jb     c0020c75 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0020c65:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0020c6c:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0020c73:	eb 0a                	jmp    c0020c7f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0020c75:	29 c8                	sub    eax,ecx
c0020c77:	19 da                	sbb    edx,ebx
c0020c79:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0020c7c:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0020c7f:	31 c0                	xor    eax,eax
c0020c81:	eb 05                	jmp    c0020c88 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0020c83:	b8 04 00 00 00       	mov    eax,0x4
c0020c88:	81 c4 5c 09 00 00    	add    esp,0x95c
c0020c8e:	5b                   	pop    ebx
c0020c8f:	5e                   	pop    esi
c0020c90:	5f                   	pop    edi
c0020c91:	5d                   	pop    ebp
c0020c92:	c3                   	ret    

c0020c93 <readRoot(unsigned int*, unsigned int*, char)>:
c0020c93:	81 ec 40 08 00 00    	sub    esp,0x840
c0020c99:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0020ca1:	50                   	push   eax
c0020ca2:	8d 44 24 38          	lea    eax,[esp+0x38]
c0020ca6:	50                   	push   eax
c0020ca7:	6a 10                	push   0x10
c0020ca9:	e8 5d fa ff ff       	call   c002070b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020cae:	83 c4 0c             	add    esp,0xc
c0020cb1:	6a 22                	push   0x22
c0020cb3:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0020cba:	50                   	push   eax
c0020cbb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0020cbf:	50                   	push   eax
c0020cc0:	e8 90 f9 fd ff       	call   c0000655 <memcpy>
c0020cc5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0020ccc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0020cd0:	89 10                	mov    DWORD PTR [eax],edx
c0020cd2:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0020cd9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020cdd:	89 10                	mov    DWORD PTR [eax],edx
c0020cdf:	b0 01                	mov    al,0x1
c0020ce1:	81 c4 4c 08 00 00    	add    esp,0x84c
c0020ce7:	c3                   	ret    

c0020ce8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0020ce8:	55                   	push   ebp
c0020ce9:	57                   	push   edi
c0020cea:	56                   	push   esi
c0020ceb:	53                   	push   ebx
c0020cec:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020cf2:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0020cf9:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0020d00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020d04:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0020d08:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0020d0c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d10:	75 03                	jne    c0020d15 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020d12:	83 c3 02             	add    ebx,0x2
c0020d15:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0020d18:	75 03                	jne    c0020d1d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0020d1a:	43                   	inc    ebx
c0020d1b:	eb f8                	jmp    c0020d15 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0020d1d:	51                   	push   ecx
c0020d1e:	68 00 01 00 00       	push   0x100
c0020d23:	6a 00                	push   0x0
c0020d25:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020d29:	50                   	push   eax
c0020d2a:	e8 5c f9 fd ff       	call   c000068b <memset>
c0020d2f:	83 c4 10             	add    esp,0x10
c0020d32:	31 d2                	xor    edx,edx
c0020d34:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0020d37:	84 c0                	test   al,al
c0020d39:	74 21                	je     c0020d5c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0020d3b:	3c 2f                	cmp    al,0x2f
c0020d3d:	75 0b                	jne    c0020d4a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0020d3f:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0020d43:	bd 01 00 00 00       	mov    ebp,0x1
c0020d48:	eb 14                	jmp    c0020d5e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0020d4a:	8d 48 9f             	lea    ecx,[eax-0x61]
c0020d4d:	80 f9 19             	cmp    cl,0x19
c0020d50:	77 03                	ja     c0020d55 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020d52:	83 e8 20             	sub    eax,0x20
c0020d55:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0020d59:	42                   	inc    edx
c0020d5a:	eb d8                	jmp    c0020d34 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0020d5c:	31 ed                	xor    ebp,ebp
c0020d5e:	83 ec 0c             	sub    esp,0xc
c0020d61:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0020d68:	e8 67 e7 fe ff       	call   c000f4d4 <malloc>
c0020d6d:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0020d74:	89 c6                	mov    esi,eax
c0020d76:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0020d7c:	c1 ef 0b             	shr    edi,0xb
c0020d7f:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0020d86:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0020d8a:	83 c4 10             	add    esp,0x10
c0020d8d:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0020d92:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d96:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0020d9d:	74 28                	je     c0020dc7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0020d9f:	52                   	push   edx
c0020da0:	57                   	push   edi
c0020da1:	50                   	push   eax
c0020da2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020da6:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0020dad:	e8 59 f9 ff ff       	call   c002070b <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0020db2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020db6:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0020dbd:	05 00 08 00 00       	add    eax,0x800
c0020dc2:	83 c4 10             	add    esp,0x10
c0020dc5:	eb cb                	jmp    c0020d92 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0020dc7:	83 ec 0c             	sub    esp,0xc
c0020dca:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0020dce:	57                   	push   edi
c0020dcf:	e8 d4 f8 fd ff       	call   c00006a8 <strlen>
c0020dd4:	50                   	push   eax
c0020dd5:	57                   	push   edi
c0020dd6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0020ddd:	56                   	push   esi
c0020dde:	e8 e6 f8 ff ff       	call   c00206c9 <__memmem(unsigned char*, int, unsigned char*, int)>
c0020de3:	83 c4 20             	add    esp,0x20
c0020de6:	85 c0                	test   eax,eax
c0020de8:	75 13                	jne    c0020dfd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0020dea:	83 ec 0c             	sub    esp,0xc
c0020ded:	56                   	push   esi
c0020dee:	e8 f1 e6 fe ff       	call   c000f4e4 <free>
c0020df3:	83 c4 10             	add    esp,0x10
c0020df6:	31 c0                	xor    eax,eax
c0020df8:	e9 b3 00 00 00       	jmp    c0020eb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020dfd:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0020e01:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0020e05:	c1 e7 08             	shl    edi,0x8
c0020e08:	c1 e2 10             	shl    edx,0x10
c0020e0b:	09 d7                	or     edi,edx
c0020e0d:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0020e11:	09 d7                	or     edi,edx
c0020e13:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0020e17:	c1 e2 18             	shl    edx,0x18
c0020e1a:	09 d7                	or     edi,edx
c0020e1c:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0020e20:	89 d1                	mov    ecx,edx
c0020e22:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0020e26:	c1 e1 08             	shl    ecx,0x8
c0020e29:	c1 e2 10             	shl    edx,0x10
c0020e2c:	09 ca                	or     edx,ecx
c0020e2e:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0020e32:	09 ca                	or     edx,ecx
c0020e34:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0020e38:	c1 e1 18             	shl    ecx,0x18
c0020e3b:	09 ca                	or     edx,ecx
c0020e3d:	89 e9                	mov    ecx,ebp
c0020e3f:	84 c9                	test   cl,cl
c0020e41:	74 3c                	je     c0020e7f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0020e43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020e47:	83 ec 0c             	sub    esp,0xc
c0020e4a:	56                   	push   esi
c0020e4b:	e8 94 e6 fe ff       	call   c000f4e4 <free>
c0020e50:	83 c4 0c             	add    esp,0xc
c0020e53:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e5a:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0020e5f:	50                   	push   eax
c0020e60:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e67:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0020e6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020e72:	52                   	push   edx
c0020e73:	57                   	push   edi
c0020e74:	53                   	push   ebx
c0020e75:	e8 6e fe ff ff       	call   c0020ce8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020e7a:	83 c4 20             	add    esp,0x20
c0020e7d:	eb 31                	jmp    c0020eb0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0020e7f:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0020e82:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0020e89:	d0 e8                	shr    al,1
c0020e8b:	89 3b                	mov    DWORD PTR [ebx],edi
c0020e8d:	83 e0 01             	and    eax,0x1
c0020e90:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0020e97:	83 ec 0c             	sub    esp,0xc
c0020e9a:	89 13                	mov    DWORD PTR [ebx],edx
c0020e9c:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0020ea3:	89 03                	mov    DWORD PTR [ebx],eax
c0020ea5:	56                   	push   esi
c0020ea6:	e8 39 e6 fe ff       	call   c000f4e4 <free>
c0020eab:	83 c4 10             	add    esp,0x10
c0020eae:	b0 01                	mov    al,0x1
c0020eb0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020eb6:	5b                   	pop    ebx
c0020eb7:	5e                   	pop    esi
c0020eb8:	5f                   	pop    edi
c0020eb9:	5d                   	pop    ebp
c0020eba:	c3                   	ret    

c0020ebb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0020ebb:	55                   	push   ebp
c0020ebc:	57                   	push   edi
c0020ebd:	56                   	push   esi
c0020ebe:	53                   	push   ebx
c0020ebf:	83 ec 20             	sub    esp,0x20
c0020ec2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0020ec6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0020eca:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0020ece:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020ed6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020ede:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0020ee3:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0020ee9:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0020eef:	57                   	push   edi
c0020ef0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ef4:	50                   	push   eax
c0020ef5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020ef9:	50                   	push   eax
c0020efa:	e8 94 fd ff ff       	call   c0020c93 <readRoot(unsigned int*, unsigned int*, char)>
c0020eff:	5a                   	pop    edx
c0020f00:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0020f04:	e8 9f f7 fd ff       	call   c00006a8 <strlen>
c0020f09:	83 c4 10             	add    esp,0x10
c0020f0c:	83 f8 03             	cmp    eax,0x3
c0020f0f:	77 17                	ja     c0020f28 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0020f11:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020f15:	89 03                	mov    DWORD PTR [ebx],eax
c0020f17:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f1b:	89 06                	mov    DWORD PTR [esi],eax
c0020f1d:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0020f24:	b0 01                	mov    al,0x1
c0020f26:	eb 19                	jmp    c0020f41 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0020f28:	50                   	push   eax
c0020f29:	55                   	push   ebp
c0020f2a:	57                   	push   edi
c0020f2b:	56                   	push   esi
c0020f2c:	53                   	push   ebx
c0020f2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020f31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0020f35:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0020f39:	e8 aa fd ff ff       	call   c0020ce8 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0020f3e:	83 c4 20             	add    esp,0x20
c0020f41:	83 c4 1c             	add    esp,0x1c
c0020f44:	5b                   	pop    ebx
c0020f45:	5e                   	pop    esi
c0020f46:	5f                   	pop    edi
c0020f47:	5d                   	pop    ebp
c0020f48:	c3                   	ret    
c0020f49:	90                   	nop

c0020f4a <ISO9660::open(char const*, void**, FileOpenMode)>:
c0020f4a:	57                   	push   edi
c0020f4b:	56                   	push   esi
c0020f4c:	53                   	push   ebx
c0020f4d:	83 ec 10             	sub    esp,0x10
c0020f50:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0020f54:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0020f58:	85 ff                	test   edi,edi
c0020f5a:	74 7b                	je     c0020fd7 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020f5c:	85 f6                	test   esi,esi
c0020f5e:	74 77                	je     c0020fd7 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c0020f60:	83 ec 0c             	sub    esp,0xc
c0020f63:	6a 1c                	push   0x1c
c0020f65:	e8 6a e5 fe ff       	call   c000f4d4 <malloc>
c0020f6a:	89 07                	mov    DWORD PTR [edi],eax
c0020f6c:	89 c3                	mov    ebx,eax
c0020f6e:	58                   	pop    eax
c0020f6f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f73:	50                   	push   eax
c0020f74:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0020f77:	50                   	push   eax
c0020f78:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f7c:	50                   	push   eax
c0020f7d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0020f81:	50                   	push   eax
c0020f82:	56                   	push   esi
c0020f83:	e8 33 ff ff ff       	call   c0020ebb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0020f88:	83 c4 20             	add    esp,0x20
c0020f8b:	84 c0                	test   al,al
c0020f8d:	74 07                	je     c0020f96 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c0020f8f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020f94:	74 0b                	je     c0020fa1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0020f96:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0020f9a:	b8 01 00 00 00       	mov    eax,0x1
c0020f9f:	eb 3b                	jmp    c0020fdc <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020fa1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020fa5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0020fa9:	89 03                	mov    DWORD PTR [ebx],eax
c0020fab:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0020fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020fb6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0020fbd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0020fc4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0020fc7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0020fce:	8a 06                	mov    al,BYTE PTR [esi]
c0020fd0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0020fd3:	31 c0                	xor    eax,eax
c0020fd5:	eb 05                	jmp    c0020fdc <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c0020fd7:	b8 04 00 00 00       	mov    eax,0x4
c0020fdc:	83 c4 10             	add    esp,0x10
c0020fdf:	5b                   	pop    ebx
c0020fe0:	5e                   	pop    esi
c0020fe1:	5f                   	pop    edi
c0020fe2:	c3                   	ret    
c0020fe3:	90                   	nop

c0020fe4 <ISO9660::exists(char const*)>:
c0020fe4:	83 ec 28             	sub    esp,0x28
c0020fe7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020feb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0020fef:	52                   	push   edx
c0020ff0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0020ff3:	52                   	push   edx
c0020ff4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020ff8:	52                   	push   edx
c0020ff9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0020ffd:	52                   	push   edx
c0020ffe:	50                   	push   eax
c0020fff:	e8 b7 fe ff ff       	call   c0020ebb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021004:	83 c4 3c             	add    esp,0x3c
c0021007:	c3                   	ret    

c0021008 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021008:	56                   	push   esi
c0021009:	53                   	push   ebx
c002100a:	83 ec 14             	sub    esp,0x14
c002100d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021011:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021015:	85 db                	test   ebx,ebx
c0021017:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c002101b:	0f 94 c2             	sete   dl
c002101e:	85 f6                	test   esi,esi
c0021020:	0f 94 c0             	sete   al
c0021023:	08 c2                	or     dl,al
c0021025:	75 68                	jne    c002108f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021027:	85 c9                	test   ecx,ecx
c0021029:	74 64                	je     c002108f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c002102b:	83 ec 0c             	sub    esp,0xc
c002102e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021031:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021035:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c002103b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021042:	50                   	push   eax
c0021043:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021046:	50                   	push   eax
c0021047:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002104b:	50                   	push   eax
c002104c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021050:	50                   	push   eax
c0021051:	51                   	push   ecx
c0021052:	e8 64 fe ff ff       	call   c0020ebb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021057:	83 c4 20             	add    esp,0x20
c002105a:	ba 01 00 00 00       	mov    edx,0x1
c002105f:	84 c0                	test   al,al
c0021061:	74 31                	je     c0021094 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021063:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021067:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002106e:	89 03                	mov    DWORD PTR [ebx],eax
c0021070:	ba 00 00 00 00       	mov    edx,0x0
c0021075:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021079:	85 c0                	test   eax,eax
c002107b:	0f 95 06             	setne  BYTE PTR [esi]
c002107e:	74 14                	je     c0021094 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021080:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021086:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002108d:	eb 05                	jmp    c0021094 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002108f:	ba 04 00 00 00       	mov    edx,0x4
c0021094:	83 c4 14             	add    esp,0x14
c0021097:	89 d0                	mov    eax,edx
c0021099:	5b                   	pop    ebx
c002109a:	5e                   	pop    esi
c002109b:	c3                   	ret    

c002109c <ISO9660::openDir(char const*, void**)>:
c002109c:	57                   	push   edi
c002109d:	56                   	push   esi
c002109e:	53                   	push   ebx
c002109f:	83 ec 10             	sub    esp,0x10
c00210a2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00210a6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00210aa:	85 ff                	test   edi,edi
c00210ac:	0f 84 95 00 00 00    	je     c0021147 <ISO9660::openDir(char const*, void**)+0xab>
c00210b2:	85 f6                	test   esi,esi
c00210b4:	0f 84 8d 00 00 00    	je     c0021147 <ISO9660::openDir(char const*, void**)+0xab>
c00210ba:	83 ec 0c             	sub    esp,0xc
c00210bd:	6a 1c                	push   0x1c
c00210bf:	e8 10 e4 fe ff       	call   c000f4d4 <malloc>
c00210c4:	89 07                	mov    DWORD PTR [edi],eax
c00210c6:	89 c3                	mov    ebx,eax
c00210c8:	59                   	pop    ecx
c00210c9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210cd:	50                   	push   eax
c00210ce:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00210d1:	50                   	push   eax
c00210d2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210d6:	50                   	push   eax
c00210d7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00210db:	50                   	push   eax
c00210dc:	56                   	push   esi
c00210dd:	e8 d9 fd ff ff       	call   c0020ebb <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00210e2:	83 c4 20             	add    esp,0x20
c00210e5:	84 c0                	test   al,al
c00210e7:	74 07                	je     c00210f0 <ISO9660::openDir(char const*, void**)+0x54>
c00210e9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00210ee:	75 21                	jne    c0021111 <ISO9660::openDir(char const*, void**)+0x75>
c00210f0:	0f b6 c0             	movzx  eax,al
c00210f3:	52                   	push   edx
c00210f4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00210f8:	50                   	push   eax
c00210f9:	68 da ae 02 c0       	push   0xc002aeda
c00210fe:	e8 be 16 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0021103:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021107:	83 c4 10             	add    esp,0x10
c002110a:	b8 01 00 00 00       	mov    eax,0x1
c002110f:	eb 3b                	jmp    c002114c <ISO9660::openDir(char const*, void**)+0xb0>
c0021111:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021115:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021119:	89 03                	mov    DWORD PTR [ebx],eax
c002111b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021122:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021126:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002112d:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021134:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021137:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002113e:	8a 06                	mov    al,BYTE PTR [esi]
c0021140:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021143:	31 c0                	xor    eax,eax
c0021145:	eb 05                	jmp    c002114c <ISO9660::openDir(char const*, void**)+0xb0>
c0021147:	b8 04 00 00 00       	mov    eax,0x4
c002114c:	83 c4 10             	add    esp,0x10
c002114f:	5b                   	pop    ebx
c0021150:	5e                   	pop    esi
c0021151:	5f                   	pop    edi
c0021152:	c3                   	ret    
c0021153:	90                   	nop

c0021154 <ISO9660::ISO9660()>:
c0021154:	83 ec 0c             	sub    esp,0xc
c0021157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002115b:	83 ec 0c             	sub    esp,0xc
c002115e:	50                   	push   eax
c002115f:	e8 62 19 ff ff       	call   c0012ac6 <Filesystem::Filesystem()>
c0021164:	83 c4 10             	add    esp,0x10
c0021167:	ba 00 af 02 c0       	mov    edx,0xc002af00
c002116c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021170:	89 10                	mov    DWORD PTR [eax],edx
c0021172:	90                   	nop
c0021173:	83 c4 0c             	add    esp,0xc
c0021176:	c3                   	ret    
c0021177:	90                   	nop

c0021178 <SoundChannel::~SoundChannel()>:
c0021178:	83 ec 0c             	sub    esp,0xc
c002117b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002117f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021182:	83 ec 0c             	sub    esp,0xc
c0021185:	50                   	push   eax
c0021186:	e8 59 e3 fe ff       	call   c000f4e4 <free>
c002118b:	83 c4 10             	add    esp,0x10
c002118e:	90                   	nop
c002118f:	83 c4 0c             	add    esp,0xc
c0021192:	c3                   	ret    
c0021193:	90                   	nop

c0021194 <SoundChannel::setSpeed(float)>:
c0021194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021198:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002119c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002119f:	c3                   	ret    

c00211a0 <SoundChannel::getSpeed()>:
c00211a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211a4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00211a7:	c3                   	ret    

c00211a8 <SoundChannel::setVolume(int)>:
c00211a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00211ac:	83 f8 64             	cmp    eax,0x64
c00211af:	7e 05                	jle    c00211b6 <SoundChannel::setVolume(int)+0xe>
c00211b1:	b8 64 00 00 00       	mov    eax,0x64
c00211b6:	85 c0                	test   eax,eax
c00211b8:	79 02                	jns    c00211bc <SoundChannel::setVolume(int)+0x14>
c00211ba:	31 c0                	xor    eax,eax
c00211bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00211c0:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00211c3:	c3                   	ret    

c00211c4 <SoundChannel::getVolume()>:
c00211c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211c8:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00211cb:	c3                   	ret    

c00211cc <SoundChannel::pause()>:
c00211cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211d0:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00211d4:	c3                   	ret    
c00211d5:	90                   	nop

c00211d6 <SoundChannel::SoundChannel(int, int, int, int)>:
c00211d6:	83 ec 1c             	sub    esp,0x1c
c00211d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00211dd:	e8 ea ff ff ff       	call   c00211cc <SoundChannel::pause()>
c00211e2:	83 c4 04             	add    esp,0x4
c00211e5:	6a 50                	push   0x50
c00211e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00211eb:	e8 b8 ff ff ff       	call   c00211a8 <SoundChannel::setVolume(int)>
c00211f0:	83 c4 08             	add    esp,0x8
c00211f3:	a1 78 af 02 c0       	mov    eax,ds:0xc002af78
c00211f8:	50                   	push   eax
c00211f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00211fd:	e8 92 ff ff ff       	call   c0021194 <SoundChannel::setSpeed(float)>
c0021202:	83 c4 08             	add    esp,0x8
c0021205:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021209:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002120d:	89 10                	mov    DWORD PTR [eax],edx
c002120f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021213:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021217:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002121a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002121e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021222:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021225:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c002122a:	75 23                	jne    c002124f <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c002122c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021230:	8b 10                	mov    edx,DWORD PTR [eax]
c0021232:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021236:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021239:	0f af c2             	imul   eax,edx
c002123c:	85 c0                	test   eax,eax
c002123e:	79 03                	jns    c0021243 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021240:	83 c0 03             	add    eax,0x3
c0021243:	c1 f8 02             	sar    eax,0x2
c0021246:	05 a0 0f 00 00       	add    eax,0xfa0
c002124b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c002124f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021253:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021257:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c002125a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002125e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021265:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021269:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021274:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021277:	c1 e0 02             	shl    eax,0x2
c002127a:	83 ec 0c             	sub    esp,0xc
c002127d:	50                   	push   eax
c002127e:	e8 51 e2 fe ff       	call   c000f4d4 <malloc>
c0021283:	83 c4 10             	add    esp,0x10
c0021286:	89 c2                	mov    edx,eax
c0021288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002128c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c002128f:	83 ec 04             	sub    esp,0x4
c0021292:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021296:	50                   	push   eax
c0021297:	6a 01                	push   0x1
c0021299:	6a 04                	push   0x4
c002129b:	e8 af 76 fe ff       	call   c000894f <src_new>
c00212a0:	83 c4 10             	add    esp,0x10
c00212a3:	89 c2                	mov    edx,eax
c00212a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00212a9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00212ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212b0:	85 c0                	test   eax,eax
c00212b2:	74 10                	je     c00212c4 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00212b4:	83 ec 0c             	sub    esp,0xc
c00212b7:	68 5c af 02 c0       	push   0xc002af5c
c00212bc:	e8 1a 86 ff ff       	call   c00198db <Krnl::panic(char const*)>
c00212c1:	83 c4 10             	add    esp,0x10
c00212c4:	a0 c0 ec 02 c0       	mov    al,ds:0xc002ecc0
c00212c9:	83 f0 01             	xor    eax,0x1
c00212cc:	84 c0                	test   al,al
c00212ce:	74 57                	je     c0021327 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00212d0:	a1 7c af 02 c0       	mov    eax,ds:0xc002af7c
c00212d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00212d9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00212e1:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00212e9:	7f 35                	jg     c0021320 <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00212eb:	83 ec 0c             	sub    esp,0xc
c00212ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00212f2:	e8 20 4a 00 00       	call   c0025d17 <__floatsisf>
c00212f7:	83 c4 10             	add    esp,0x10
c00212fa:	8b 15 7c af 02 c0    	mov    edx,DWORD PTR ds:0xc002af7c
c0021300:	83 ec 08             	sub    esp,0x8
c0021303:	52                   	push   edx
c0021304:	50                   	push   eax
c0021305:	e8 1f 46 00 00       	call   c0025929 <__mulsf3>
c002130a:	83 c4 10             	add    esp,0x10
c002130d:	89 c2                	mov    edx,eax
c002130f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021313:	89 14 85 c0 e8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1740],edx
c002131a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002131e:	eb c1                	jmp    c00212e1 <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021320:	c6 05 c0 ec 02 c0 01 	mov    BYTE PTR ds:0xc002ecc0,0x1
c0021327:	90                   	nop
c0021328:	83 c4 1c             	add    esp,0x1c
c002132b:	c3                   	ret    

c002132c <SoundChannel::play()>:
c002132c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021330:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021334:	c3                   	ret    
c0021335:	90                   	nop

c0021336 <SoundChannel::paused()>:
c0021336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002133a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c002133d:	c3                   	ret    

c002133e <SoundChannel::getSampleRate()>:
c002133e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021342:	8b 00                	mov    eax,DWORD PTR [eax]
c0021344:	c3                   	ret    
c0021345:	90                   	nop

c0021346 <SoundChannel::getBits()>:
c0021346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002134a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002134d:	c3                   	ret    

c002134e <SoundChannel::getBufferUsed()>:
c002134e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021352:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021355:	c3                   	ret    

c0021356 <SoundChannel::getBufferSize()>:
c0021356:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002135a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c002135d:	c3                   	ret    

c002135e <SoundChannel::unbuffer(float*, int, int)>:
c002135e:	56                   	push   esi
c002135f:	53                   	push   ebx
c0021360:	83 ec 40             	sub    esp,0x40
c0021363:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021367:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c002136a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002136e:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021371:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021375:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0021379:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002137d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0021381:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0021385:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0021389:	e8 89 49 00 00       	call   c0025d17 <__floatsisf>
c002138e:	5a                   	pop    edx
c002138f:	89 c6                	mov    esi,eax
c0021391:	ff 33                	push   DWORD PTR [ebx]
c0021393:	e8 7f 49 00 00       	call   c0025d17 <__floatsisf>
c0021398:	59                   	pop    ecx
c0021399:	5a                   	pop    edx
c002139a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c002139d:	50                   	push   eax
c002139e:	e8 86 45 00 00       	call   c0025929 <__mulsf3>
c00213a3:	59                   	pop    ecx
c00213a4:	5a                   	pop    edx
c00213a5:	50                   	push   eax
c00213a6:	56                   	push   esi
c00213a7:	e8 40 47 00 00       	call   c0025aec <__divsf3>
c00213ac:	89 04 24             	mov    DWORD PTR [esp],eax
c00213af:	e8 33 5c 00 00       	call   c0026fe7 <__extendsfdf2>
c00213b4:	59                   	pop    ecx
c00213b5:	5e                   	pop    esi
c00213b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00213ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00213be:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00213c6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00213ca:	50                   	push   eax
c00213cb:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00213ce:	e8 71 71 fe ff       	call   c0008544 <src_process>
c00213d3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00213d7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00213da:	83 c4 0c             	add    esp,0xc
c00213dd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00213e0:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00213e3:	29 d0                	sub    eax,edx
c00213e5:	c1 e0 02             	shl    eax,0x2
c00213e8:	50                   	push   eax
c00213e9:	8d 04 91             	lea    eax,[ecx+edx*4]
c00213ec:	50                   	push   eax
c00213ed:	51                   	push   ecx
c00213ee:	e8 2a f2 fd ff       	call   c000061d <memmove>
c00213f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213f7:	83 c4 44             	add    esp,0x44
c00213fa:	5b                   	pop    ebx
c00213fb:	5e                   	pop    esi
c00213fc:	c3                   	ret    
c00213fd:	90                   	nop

c00213fe <SoundChannel::buffer8(unsigned char*, int)>:
c00213fe:	55                   	push   ebp
c00213ff:	57                   	push   edi
c0021400:	56                   	push   esi
c0021401:	53                   	push   ebx
c0021402:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021406:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c002140a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002140d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021411:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021414:	74 7a                	je     c0021490 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0021416:	85 ff                	test   edi,edi
c0021418:	7e 76                	jle    c0021490 <SoundChannel::buffer8(unsigned char*, int)+0x92>
c002141a:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c002141e:	8d 70 01             	lea    esi,[eax+0x1]
c0021421:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021424:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021427:	8b 1c 9d c0 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1740]
c002142e:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021431:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0021434:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0021437:	74 5e                	je     c0021497 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0021439:	83 ff 01             	cmp    edi,0x1
c002143c:	74 4b                	je     c0021489 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c002143e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0021442:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0021445:	8d 70 01             	lea    esi,[eax+0x1]
c0021448:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002144b:	8b 1c 9d c0 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1740]
c0021452:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0021455:	b8 02 00 00 00       	mov    eax,0x2
c002145a:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002145d:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021460:	75 23                	jne    c0021485 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0021462:	eb 27                	jmp    c002148b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021464:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0021469:	8d 71 01             	lea    esi,[ecx+0x1]
c002146c:	40                   	inc    eax
c002146d:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0021470:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0021473:	8b 1c 9d c0 e8 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1740]
c002147a:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c002147d:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0021480:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0021483:	74 06                	je     c002148b <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0021485:	39 c7                	cmp    edi,eax
c0021487:	75 db                	jne    c0021464 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0021489:	89 f8                	mov    eax,edi
c002148b:	5b                   	pop    ebx
c002148c:	5e                   	pop    esi
c002148d:	5f                   	pop    edi
c002148e:	5d                   	pop    ebp
c002148f:	c3                   	ret    
c0021490:	5b                   	pop    ebx
c0021491:	31 c0                	xor    eax,eax
c0021493:	5e                   	pop    esi
c0021494:	5f                   	pop    edi
c0021495:	5d                   	pop    ebp
c0021496:	c3                   	ret    
c0021497:	b8 01 00 00 00       	mov    eax,0x1
c002149c:	eb ed                	jmp    c002148b <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c002149e <SoundDevice::SoundDevice(char const*)>:
c002149e:	83 ec 1c             	sub    esp,0x1c
c00214a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214a5:	83 ec 08             	sub    esp,0x8
c00214a8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00214ac:	50                   	push   eax
c00214ad:	e8 ee 28 ff ff       	call   c0013da0 <Device::Device(char const*)>
c00214b2:	83 c4 10             	add    esp,0x10
c00214b5:	ba 88 af 02 c0       	mov    edx,0xc002af88
c00214ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214be:	89 10                	mov    DWORD PTR [eax],edx
c00214c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214c4:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00214ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214d2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00214dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00214e4:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00214e9:	7f 19                	jg     c0021504 <SoundDevice::SoundDevice(char const*)+0x66>
c00214eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00214ef:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214f3:	83 c2 54             	add    edx,0x54
c00214f6:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c00214fe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021502:	eb e0                	jmp    c00214e4 <SoundDevice::SoundDevice(char const*)+0x46>
c0021504:	90                   	nop
c0021505:	83 c4 1c             	add    esp,0x1c
c0021508:	c3                   	ret    
c0021509:	90                   	nop

c002150a <SoundDevice::~SoundDevice()>:
c002150a:	53                   	push   ebx
c002150b:	83 ec 18             	sub    esp,0x18
c002150e:	ba 88 af 02 c0       	mov    edx,0xc002af88
c0021513:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021517:	89 10                	mov    DWORD PTR [eax],edx
c0021519:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021521:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0021526:	7f 46                	jg     c002156e <SoundDevice::~SoundDevice()+0x64>
c0021528:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002152c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021530:	83 c2 54             	add    edx,0x54
c0021533:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0021537:	85 c0                	test   eax,eax
c0021539:	74 2d                	je     c0021568 <SoundDevice::~SoundDevice()+0x5e>
c002153b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002153f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021543:	83 c2 54             	add    edx,0x54
c0021546:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c002154a:	85 db                	test   ebx,ebx
c002154c:	74 1a                	je     c0021568 <SoundDevice::~SoundDevice()+0x5e>
c002154e:	83 ec 0c             	sub    esp,0xc
c0021551:	53                   	push   ebx
c0021552:	e8 21 fc ff ff       	call   c0021178 <SoundChannel::~SoundChannel()>
c0021557:	83 c4 10             	add    esp,0x10
c002155a:	83 ec 08             	sub    esp,0x8
c002155d:	6a 2c                	push   0x2c
c002155f:	53                   	push   ebx
c0021560:	e8 7c 11 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0021565:	83 c4 10             	add    esp,0x10
c0021568:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002156c:	eb b3                	jmp    c0021521 <SoundDevice::~SoundDevice()+0x17>
c002156e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021572:	83 ec 0c             	sub    esp,0xc
c0021575:	50                   	push   eax
c0021576:	e8 07 25 ff ff       	call   c0013a82 <Device::~Device()>
c002157b:	83 c4 10             	add    esp,0x10
c002157e:	90                   	nop
c002157f:	83 c4 18             	add    esp,0x18
c0021582:	5b                   	pop    ebx
c0021583:	c3                   	ret    

c0021584 <SoundDevice::~SoundDevice()>:
c0021584:	83 ec 0c             	sub    esp,0xc
c0021587:	83 ec 0c             	sub    esp,0xc
c002158a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002158e:	e8 77 ff ff ff       	call   c002150a <SoundDevice::~SoundDevice()>
c0021593:	83 c4 10             	add    esp,0x10
c0021596:	83 ec 08             	sub    esp,0x8
c0021599:	68 e4 01 00 00       	push   0x1e4
c002159e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215a2:	e8 3a 11 ff ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00215a7:	83 c4 10             	add    esp,0x10
c00215aa:	83 c4 0c             	add    esp,0xc
c00215ad:	c3                   	ret    

c00215ae <SoundDevice::getFreeChannelNum()>:
c00215ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00215b2:	31 c0                	xor    eax,eax
c00215b4:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00215bc:	74 09                	je     c00215c7 <SoundDevice::getFreeChannelNum()+0x19>
c00215be:	40                   	inc    eax
c00215bf:	83 f8 20             	cmp    eax,0x20
c00215c2:	75 f0                	jne    c00215b4 <SoundDevice::getFreeChannelNum()+0x6>
c00215c4:	83 c8 ff             	or     eax,0xffffffff
c00215c7:	c3                   	ret    

c00215c8 <SoundDevice::addChannel(SoundChannel*)>:
c00215c8:	56                   	push   esi
c00215c9:	53                   	push   ebx
c00215ca:	51                   	push   ecx
c00215cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00215cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00215d3:	53                   	push   ebx
c00215d4:	e8 d5 ff ff ff       	call   c00215ae <SoundDevice::getFreeChannelNum()>
c00215d9:	5a                   	pop    edx
c00215da:	83 f8 ff             	cmp    eax,0xffffffff
c00215dd:	74 51                	je     c0021630 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00215df:	85 f6                	test   esi,esi
c00215e1:	74 4d                	je     c0021630 <SoundDevice::addChannel(SoundChannel*)+0x68>
c00215e3:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00215ea:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00215f1:	75 30                	jne    c0021623 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00215f3:	83 ec 0c             	sub    esp,0xc
c00215f6:	56                   	push   esi
c00215f7:	e8 42 fd ff ff       	call   c002133e <SoundChannel::getSampleRate()>
c00215fc:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0021602:	89 34 24             	mov    DWORD PTR [esp],esi
c0021605:	e8 3c fd ff ff       	call   c0021346 <SoundChannel::getBits()>
c002160a:	83 c4 0c             	add    esp,0xc
c002160d:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0021613:	8b 13                	mov    edx,DWORD PTR [ebx]
c0021615:	50                   	push   eax
c0021616:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c002161c:	53                   	push   ebx
c002161d:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0021620:	83 c4 10             	add    esp,0x10
c0021623:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0021629:	b8 01 00 00 00       	mov    eax,0x1
c002162e:	eb 03                	jmp    c0021633 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0021630:	83 c8 ff             	or     eax,0xffffffff
c0021633:	5a                   	pop    edx
c0021634:	5b                   	pop    ebx
c0021635:	5e                   	pop    esi
c0021636:	c3                   	ret    
c0021637:	90                   	nop

c0021638 <SoundDevice::removeChannel(int)>:
c0021638:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002163c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021640:	83 fa 1f             	cmp    edx,0x1f
c0021643:	77 23                	ja     c0021668 <SoundDevice::removeChannel(int)+0x30>
c0021645:	8d 14 90             	lea    edx,[eax+edx*4]
c0021648:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c002164f:	74 17                	je     c0021668 <SoundDevice::removeChannel(int)+0x30>
c0021651:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c002165b:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0021661:	75 05                	jne    c0021668 <SoundDevice::removeChannel(int)+0x30>
c0021663:	8b 00                	mov    eax,DWORD PTR [eax]
c0021665:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0021668:	c3                   	ret    
c0021669:	90                   	nop

c002166a <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c002166a:	57                   	push   edi
c002166b:	56                   	push   esi
c002166c:	53                   	push   ebx
c002166d:	31 db                	xor    ebx,ebx
c002166f:	83 ec 10             	sub    esp,0x10
c0021672:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0021676:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c002167a:	0f 8d cb 00 00 00    	jge    c002174b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0021680:	83 ec 0c             	sub    esp,0xc
c0021683:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021687:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c002168a:	e8 58 59 00 00       	call   c0026fe7 <__extendsfdf2>
c002168f:	83 c4 10             	add    esp,0x10
c0021692:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021696:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002169a:	68 00 00 f0 3f       	push   0x3ff00000
c002169f:	6a 00                	push   0x0
c00216a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216a9:	e8 c5 48 00 00       	call   c0025f73 <__adddf3>
c00216ae:	83 c4 10             	add    esp,0x10
c00216b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216b5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00216b9:	68 00 00 e0 3f       	push   0x3fe00000
c00216be:	6a 00                	push   0x0
c00216c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216c8:	e8 23 4f 00 00       	call   c00265f0 <__muldf3>
c00216cd:	83 c4 10             	add    esp,0x10
c00216d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00216d8:	68 00 00 60 40       	push   0x40600000
c00216dd:	6a 00                	push   0x0
c00216df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216e7:	e8 04 4f 00 00       	call   c00265f0 <__muldf3>
c00216ec:	59                   	pop    ecx
c00216ed:	5f                   	pop    edi
c00216ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00216f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00216f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00216fe:	e8 c0 57 00 00       	call   c0026ec3 <__truncdfsf2>
c0021703:	5a                   	pop    edx
c0021704:	89 c7                	mov    edi,eax
c0021706:	59                   	pop    ecx
c0021707:	68 00 00 fe 42       	push   0x42fe0000
c002170c:	50                   	push   eax
c002170d:	e8 5b 48 00 00       	call   c0025f6d <__gesf2>
c0021712:	83 c4 10             	add    esp,0x10
c0021715:	85 c0                	test   eax,eax
c0021717:	78 06                	js     c002171f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0021719:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c002171d:	eb 26                	jmp    c0021745 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c002171f:	50                   	push   eax
c0021720:	50                   	push   eax
c0021721:	6a 00                	push   0x0
c0021723:	57                   	push   edi
c0021724:	e8 48 48 00 00       	call   c0025f71 <__lesf2>
c0021729:	83 c4 10             	add    esp,0x10
c002172c:	85 c0                	test   eax,eax
c002172e:	7f 06                	jg     c0021736 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0021730:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0021734:	eb 0f                	jmp    c0021745 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0021736:	83 ec 0c             	sub    esp,0xc
c0021739:	57                   	push   edi
c002173a:	e8 3d 59 00 00       	call   c002707c <lrintf>
c002173f:	83 c4 10             	add    esp,0x10
c0021742:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0021745:	43                   	inc    ebx
c0021746:	e9 2b ff ff ff       	jmp    c0021676 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c002174b:	83 c4 10             	add    esp,0x10
c002174e:	5b                   	pop    ebx
c002174f:	5e                   	pop    esi
c0021750:	5f                   	pop    edi
c0021751:	c3                   	ret    

c0021752 <SoundDevice::getAudio(int, float*, float*)>:
c0021752:	55                   	push   ebp
c0021753:	57                   	push   edi
c0021754:	56                   	push   esi
c0021755:	53                   	push   ebx
c0021756:	31 db                	xor    ebx,ebx
c0021758:	83 ec 20             	sub    esp,0x20
c002175b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002175f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021763:	c1 e0 02             	shl    eax,0x2
c0021766:	50                   	push   eax
c0021767:	6a 00                	push   0x0
c0021769:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002176d:	e8 19 ef fd ff       	call   c000068b <memset>
c0021772:	83 c4 10             	add    esp,0x10
c0021775:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0021779:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0021780:	85 c0                	test   eax,eax
c0021782:	0f 84 d7 00 00 00    	je     c002185f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0021788:	83 ec 0c             	sub    esp,0xc
c002178b:	50                   	push   eax
c002178c:	e8 a5 fb ff ff       	call   c0021336 <SoundChannel::paused()>
c0021791:	83 c4 10             	add    esp,0x10
c0021794:	84 c0                	test   al,al
c0021796:	0f 85 c3 00 00 00    	jne    c002185f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002179c:	83 ec 0c             	sub    esp,0xc
c002179f:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00217a6:	e8 19 fa ff ff       	call   c00211c4 <SoundChannel::getVolume()>
c00217ab:	83 c4 10             	add    esp,0x10
c00217ae:	85 c0                	test   eax,eax
c00217b0:	0f 84 a9 00 00 00    	je     c002185f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00217b6:	83 ec 0c             	sub    esp,0xc
c00217b9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00217c0:	e8 ff f9 ff ff       	call   c00211c4 <SoundChannel::getVolume()>
c00217c5:	83 ec 0c             	sub    esp,0xc
c00217c8:	50                   	push   eax
c00217c9:	e8 49 45 00 00       	call   c0025d17 <__floatsisf>
c00217ce:	59                   	pop    ecx
c00217cf:	5d                   	pop    ebp
c00217d0:	31 ed                	xor    ebp,ebp
c00217d2:	68 00 00 c8 42       	push   0x42c80000
c00217d7:	50                   	push   eax
c00217d8:	e8 0f 43 00 00       	call   c0025aec <__divsf3>
c00217dd:	83 c4 10             	add    esp,0x10
c00217e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00217e4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00217e8:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00217ee:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00217f2:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00217f9:	e8 60 fb ff ff       	call   c002135e <SoundChannel::unbuffer(float*, int, int)>
c00217fe:	83 c4 20             	add    esp,0x20
c0021801:	89 c1                	mov    ecx,eax
c0021803:	39 cd                	cmp    ebp,ecx
c0021805:	7d 52                	jge    c0021859 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0021807:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002180b:	50                   	push   eax
c002180c:	50                   	push   eax
c002180d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0021811:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021814:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021818:	e8 0c 41 00 00       	call   c0025929 <__mulsf3>
c002181d:	5a                   	pop    edx
c002181e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021822:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0021828:	e8 ea 44 00 00       	call   c0025d17 <__floatsisf>
c002182d:	59                   	pop    ecx
c002182e:	5a                   	pop    edx
c002182f:	50                   	push   eax
c0021830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021834:	e8 b3 42 00 00       	call   c0025aec <__divsf3>
c0021839:	59                   	pop    ecx
c002183a:	5a                   	pop    edx
c002183b:	50                   	push   eax
c002183c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021840:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0021843:	e8 be 3d 00 00       	call   c0025606 <__addsf3>
c0021848:	83 c4 10             	add    esp,0x10
c002184b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002184f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021853:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0021856:	45                   	inc    ebp
c0021857:	eb aa                	jmp    c0021803 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0021859:	39 cf                	cmp    edi,ecx
c002185b:	7e 02                	jle    c002185f <SoundDevice::getAudio(int, float*, float*)+0x10d>
c002185d:	89 cf                	mov    edi,ecx
c002185f:	43                   	inc    ebx
c0021860:	83 fb 20             	cmp    ebx,0x20
c0021863:	0f 85 10 ff ff ff    	jne    c0021779 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0021869:	83 c4 1c             	add    esp,0x1c
c002186c:	89 f8                	mov    eax,edi
c002186e:	5b                   	pop    ebx
c002186f:	5e                   	pop    esi
c0021870:	5f                   	pop    edi
c0021871:	5d                   	pop    ebp
c0021872:	c3                   	ret    
c0021873:	90                   	nop

c0021874 <PCI::open(int, int, void*)>:
c0021874:	83 ec 18             	sub    esp,0x18
c0021877:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002187b:	8b 10                	mov    edx,DWORD PTR [eax]
c002187d:	50                   	push   eax
c002187e:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0021881:	31 c0                	xor    eax,eax
c0021883:	83 c4 1c             	add    esp,0x1c
c0021886:	c3                   	ret    
c0021887:	90                   	nop

c0021888 <PCI::close(int, int, void*)>:
c0021888:	31 c0                	xor    eax,eax
c002188a:	c3                   	ret    
c002188b:	90                   	nop

c002188c <PCI::PCI()>:
c002188c:	83 ec 0c             	sub    esp,0xc
c002188f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021893:	83 ec 08             	sub    esp,0x8
c0021896:	68 b8 af 02 c0       	push   0xc002afb8
c002189b:	50                   	push   eax
c002189c:	e8 bb 1b ff ff       	call   c001345c <Bus::Bus(char const*)>
c00218a1:	83 c4 10             	add    esp,0x10
c00218a4:	ba 24 b0 02 c0       	mov    edx,0xc002b024
c00218a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218ad:	89 10                	mov    DWORD PTR [eax],edx
c00218af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218b3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218b9:	0f b6 d0             	movzx  edx,al
c00218bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218c0:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00218c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218cb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218d1:	0f b6 d0             	movzx  edx,al
c00218d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d8:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00218dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218e1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00218e7:	8d 50 01             	lea    edx,[eax+0x1]
c00218ea:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00218ee:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00218f4:	0f b6 d0             	movzx  edx,al
c00218f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218fb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00218ff:	83 c9 c0             	or     ecx,0xffffffc0
c0021902:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0021906:	90                   	nop
c0021907:	83 c4 0c             	add    esp,0xc
c002190a:	c3                   	ret    
c002190b:	90                   	nop

c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c002190c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021910:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021915:	89 ca                	mov    edx,ecx
c0021917:	c1 e0 10             	shl    eax,0x10
c002191a:	81 e2 fc 00 00 00    	and    edx,0xfc
c0021920:	09 d0                	or     eax,edx
c0021922:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0021927:	c1 e2 08             	shl    edx,0x8
c002192a:	09 d0                	or     eax,edx
c002192c:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0021931:	c1 e2 0b             	shl    edx,0xb
c0021934:	09 d0                	or     eax,edx
c0021936:	ba f8 0c 00 00       	mov    edx,0xcf8
c002193b:	0d 00 00 00 80       	or     eax,0x80000000
c0021940:	ef                   	out    dx,eax
c0021941:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021946:	ed                   	in     eax,dx
c0021947:	83 e1 02             	and    ecx,0x2
c002194a:	0f b6 c9             	movzx  ecx,cl
c002194d:	c1 e1 03             	shl    ecx,0x3
c0021950:	d3 e8                	shr    eax,cl
c0021952:	c3                   	ret    
c0021953:	90                   	nop

c0021954 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0021954:	6a 00                	push   0x0
c0021956:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002195b:	50                   	push   eax
c002195c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021961:	50                   	push   eax
c0021962:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021967:	50                   	push   eax
c0021968:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002196c:	e8 9b ff ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021971:	83 c4 14             	add    esp,0x14
c0021974:	c3                   	ret    
c0021975:	90                   	nop

c0021976 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0021976:	6a 0e                	push   0xe
c0021978:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002197d:	50                   	push   eax
c002197e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021983:	50                   	push   eax
c0021984:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021989:	50                   	push   eax
c002198a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002198e:	e8 79 ff ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021993:	83 c4 14             	add    esp,0x14
c0021996:	0f b6 c0             	movzx  eax,al
c0021999:	c3                   	ret    

c002199a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c002199a:	55                   	push   ebp
c002199b:	57                   	push   edi
c002199c:	56                   	push   esi
c002199d:	53                   	push   ebx
c002199e:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00219a3:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00219a8:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00219ad:	6a 0a                	push   0xa
c00219af:	56                   	push   esi
c00219b0:	55                   	push   ebp
c00219b1:	57                   	push   edi
c00219b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00219b6:	e8 51 ff ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219bb:	6a 0a                	push   0xa
c00219bd:	89 c3                	mov    ebx,eax
c00219bf:	56                   	push   esi
c00219c0:	0f b6 db             	movzx  ebx,bl
c00219c3:	55                   	push   ebp
c00219c4:	57                   	push   edi
c00219c5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00219c9:	e8 3e ff ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219ce:	83 c4 28             	add    esp,0x28
c00219d1:	25 00 ff 00 00       	and    eax,0xff00
c00219d6:	09 d8                	or     eax,ebx
c00219d8:	5b                   	pop    ebx
c00219d9:	5e                   	pop    esi
c00219da:	5f                   	pop    edi
c00219db:	5d                   	pop    ebp
c00219dc:	c3                   	ret    
c00219dd:	90                   	nop

c00219de <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c00219de:	6a 08                	push   0x8
c00219e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219e5:	50                   	push   eax
c00219e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219eb:	50                   	push   eax
c00219ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00219f1:	50                   	push   eax
c00219f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00219f6:	e8 11 ff ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00219fb:	83 c4 14             	add    esp,0x14
c00219fe:	0f b6 c4             	movzx  eax,ah
c0021a01:	c3                   	ret    

c0021a02 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0021a02:	6a 08                	push   0x8
c0021a04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a09:	50                   	push   eax
c0021a0a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a0f:	50                   	push   eax
c0021a10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a15:	50                   	push   eax
c0021a16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a1a:	e8 ed fe ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a1f:	83 c4 14             	add    esp,0x14
c0021a22:	c3                   	ret    
c0021a23:	90                   	nop

c0021a24 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0021a24:	6a 3c                	push   0x3c
c0021a26:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a2b:	50                   	push   eax
c0021a2c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a31:	50                   	push   eax
c0021a32:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a37:	50                   	push   eax
c0021a38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a3c:	e8 cb fe ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a41:	83 c4 14             	add    esp,0x14
c0021a44:	c3                   	ret    
c0021a45:	90                   	nop

c0021a46 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0021a46:	6a 18                	push   0x18
c0021a48:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a4d:	50                   	push   eax
c0021a4e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a53:	50                   	push   eax
c0021a54:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021a59:	50                   	push   eax
c0021a5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0021a5e:	e8 a9 fe ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021a63:	83 c4 14             	add    esp,0x14
c0021a66:	0f b6 c4             	movzx  eax,ah
c0021a69:	c3                   	ret    

c0021a6a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0021a6a:	55                   	push   ebp
c0021a6b:	57                   	push   edi
c0021a6c:	56                   	push   esi
c0021a6d:	53                   	push   ebx
c0021a6e:	50                   	push   eax
c0021a6f:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0021a73:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0021a78:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021a7d:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0021a82:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0021a89:	8d 43 12             	lea    eax,[ebx+0x12]
c0021a8c:	83 c3 10             	add    ebx,0x10
c0021a8f:	0f b6 c0             	movzx  eax,al
c0021a92:	0f b6 db             	movzx  ebx,bl
c0021a95:	50                   	push   eax
c0021a96:	51                   	push   ecx
c0021a97:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021a9b:	57                   	push   edi
c0021a9c:	55                   	push   ebp
c0021a9d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021aa1:	e8 66 fe ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021aa6:	53                   	push   ebx
c0021aa7:	89 c6                	mov    esi,eax
c0021aa9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021aad:	c1 e6 10             	shl    esi,0x10
c0021ab0:	51                   	push   ecx
c0021ab1:	57                   	push   edi
c0021ab2:	55                   	push   ebp
c0021ab3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021ab7:	e8 50 fe ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021abc:	83 c4 2c             	add    esp,0x2c
c0021abf:	0f b7 c0             	movzx  eax,ax
c0021ac2:	5b                   	pop    ebx
c0021ac3:	09 f0                	or     eax,esi
c0021ac5:	5e                   	pop    esi
c0021ac6:	5f                   	pop    edi
c0021ac7:	5d                   	pop    ebp
c0021ac8:	c3                   	ret    
c0021ac9:	90                   	nop

c0021aca <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0021aca:	53                   	push   ebx
c0021acb:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021ad0:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0021ad5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ad9:	c1 e1 10             	shl    ecx,0x10
c0021adc:	25 fc 00 00 00       	and    eax,0xfc
c0021ae1:	09 c1                	or     ecx,eax
c0021ae3:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0021ae8:	c1 e0 08             	shl    eax,0x8
c0021aeb:	09 c1                	or     ecx,eax
c0021aed:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0021af2:	c1 e0 0b             	shl    eax,0xb
c0021af5:	09 c1                	or     ecx,eax
c0021af7:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0021afd:	89 c8                	mov    eax,ecx
c0021aff:	ef                   	out    dx,eax
c0021b00:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021b05:	ed                   	in     eax,dx
c0021b06:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0021b0b:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0021b10:	74 0a                	je     c0021b1c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0021b12:	0f b7 d8             	movzx  ebx,ax
c0021b15:	89 d0                	mov    eax,edx
c0021b17:	c1 e0 10             	shl    eax,0x10
c0021b1a:	eb 05                	jmp    c0021b21 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0021b1c:	66 31 c0             	xor    ax,ax
c0021b1f:	89 d3                	mov    ebx,edx
c0021b21:	09 c3                	or     ebx,eax
c0021b23:	ba f8 0c 00 00       	mov    edx,0xcf8
c0021b28:	89 c8                	mov    eax,ecx
c0021b2a:	ef                   	out    dx,eax
c0021b2b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0021b30:	89 d8                	mov    eax,ebx
c0021b32:	ef                   	out    dx,eax
c0021b33:	5b                   	pop    ebx
c0021b34:	c3                   	ret    
c0021b35:	90                   	nop

c0021b36 <PCI::checkBus(unsigned char)>:
c0021b36:	56                   	push   esi
c0021b37:	53                   	push   ebx
c0021b38:	31 db                	xor    ebx,ebx
c0021b3a:	51                   	push   ecx
c0021b3b:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0021b40:	52                   	push   edx
c0021b41:	53                   	push   ebx
c0021b42:	43                   	inc    ebx
c0021b43:	56                   	push   esi
c0021b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b48:	e8 2b 03 00 00       	call   c0021e78 <PCI::checkDevice(unsigned char, unsigned char)>
c0021b4d:	83 c4 10             	add    esp,0x10
c0021b50:	83 fb 20             	cmp    ebx,0x20
c0021b53:	75 eb                	jne    c0021b40 <PCI::checkBus(unsigned char)+0xa>
c0021b55:	58                   	pop    eax
c0021b56:	5b                   	pop    ebx
c0021b57:	5e                   	pop    esi
c0021b58:	c3                   	ret    
c0021b59:	90                   	nop

c0021b5a <PCI::foundDevice(PCIDeviceInfo)>:
c0021b5a:	55                   	push   ebp
c0021b5b:	57                   	push   edi
c0021b5c:	56                   	push   esi
c0021b5d:	53                   	push   ebx
c0021b5e:	83 ec 1c             	sub    esp,0x1c
c0021b61:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0021b65:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0021b6b:	0f 84 52 01 00 00    	je     c0021cc3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021b71:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0021b75:	66 81 f9 06 04       	cmp    cx,0x406
c0021b7a:	75 2c                	jne    c0021ba8 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0021b7c:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0021b81:	50                   	push   eax
c0021b82:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0021b87:	50                   	push   eax
c0021b88:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0021b8d:	50                   	push   eax
c0021b8e:	56                   	push   esi
c0021b8f:	e8 b2 fe ff ff       	call   c0021a46 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0021b94:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0021b98:	0f b6 c0             	movzx  eax,al
c0021b9b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0021b9f:	83 c4 2c             	add    esp,0x2c
c0021ba2:	5b                   	pop    ebx
c0021ba3:	5e                   	pop    esi
c0021ba4:	5f                   	pop    edi
c0021ba5:	5d                   	pop    ebp
c0021ba6:	eb 8e                	jmp    c0021b36 <PCI::checkBus(unsigned char)>
c0021ba8:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021bac:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0021bb2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021bb6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0021bba:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0021bbe:	88 d3                	mov    bl,dl
c0021bc0:	85 c0                	test   eax,eax
c0021bc2:	74 33                	je     c0021bf7 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0021bc4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0021bc7:	85 d2                	test   edx,edx
c0021bc9:	74 28                	je     c0021bf3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021bcb:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0021bd1:	31 ef                	xor    edi,ebp
c0021bd3:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0021bd9:	75 18                	jne    c0021bf3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021bdb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021bdf:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0021be5:	75 0c                	jne    c0021bf3 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0021be7:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0021bed:	0f 84 d0 00 00 00    	je     c0021cc3 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0021bf3:	8b 00                	mov    eax,DWORD PTR [eax]
c0021bf5:	eb c9                	jmp    c0021bc0 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0021bf7:	66 81 f9 01 06       	cmp    cx,0x601
c0021bfc:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0021c00:	75 19                	jne    c0021c1b <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0021c02:	83 ec 0c             	sub    esp,0xc
c0021c05:	68 64 01 00 00       	push   0x164
c0021c0a:	e8 c5 d8 fe ff       	call   c000f4d4 <malloc>
c0021c0f:	89 c5                	mov    ebp,eax
c0021c11:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c14:	e8 95 0f 00 00       	call   c0022bae <SATABus::SATABus()>
c0021c19:	eb 1e                	jmp    c0021c39 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0021c1b:	66 81 f9 01 01       	cmp    cx,0x101
c0021c20:	75 60                	jne    c0021c82 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0021c22:	83 ec 0c             	sub    esp,0xc
c0021c25:	68 70 02 00 00       	push   0x270
c0021c2a:	e8 a5 d8 fe ff       	call   c000f4d4 <malloc>
c0021c2f:	89 c5                	mov    ebp,eax
c0021c31:	89 04 24             	mov    DWORD PTR [esp],eax
c0021c34:	e8 03 03 00 00       	call   c0021f3c <IDE::IDE()>
c0021c39:	58                   	pop    eax
c0021c3a:	5a                   	pop    edx
c0021c3b:	55                   	push   ebp
c0021c3c:	56                   	push   esi
c0021c3d:	e8 6e 1f ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c0021c42:	83 ec 1c             	sub    esp,0x1c
c0021c45:	b9 09 00 00 00       	mov    ecx,0x9
c0021c4a:	fc                   	cld    
c0021c4b:	89 e7                	mov    edi,esp
c0021c4d:	89 de                	mov    esi,ebx
c0021c4f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021c51:	55                   	push   ebp
c0021c52:	e8 63 1e ff ff       	call   c0013aba <Device::preOpenPCI(PCIDeviceInfo)>
c0021c57:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021c5a:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0021c5e:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0021c66:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0021c6e:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0021c76:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021c79:	83 c4 4c             	add    esp,0x4c
c0021c7c:	5b                   	pop    ebx
c0021c7d:	5e                   	pop    esi
c0021c7e:	5f                   	pop    edi
c0021c7f:	5d                   	pop    ebp
c0021c80:	ff e0                	jmp    eax
c0021c82:	83 ec 0c             	sub    esp,0xc
c0021c85:	68 58 01 00 00       	push   0x158
c0021c8a:	e8 45 d8 fe ff       	call   c000f4d4 <malloc>
c0021c8f:	89 c5                	mov    ebp,eax
c0021c91:	58                   	pop    eax
c0021c92:	5a                   	pop    edx
c0021c93:	68 c0 af 02 c0       	push   0xc002afc0
c0021c98:	55                   	push   ebp
c0021c99:	e8 08 22 ff ff       	call   c0013ea6 <DriverlessDevice::DriverlessDevice(char const*)>
c0021c9e:	59                   	pop    ecx
c0021c9f:	5f                   	pop    edi
c0021ca0:	55                   	push   ebp
c0021ca1:	56                   	push   esi
c0021ca2:	e8 09 1f ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c0021ca7:	b9 09 00 00 00       	mov    ecx,0x9
c0021cac:	fc                   	cld    
c0021cad:	89 df                	mov    edi,ebx
c0021caf:	89 de                	mov    esi,ebx
c0021cb1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021cb3:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0021cb7:	83 c4 2c             	add    esp,0x2c
c0021cba:	5b                   	pop    ebx
c0021cbb:	5e                   	pop    esi
c0021cbc:	5f                   	pop    edi
c0021cbd:	5d                   	pop    ebp
c0021cbe:	e9 f7 1d ff ff       	jmp    c0013aba <Device::preOpenPCI(PCIDeviceInfo)>
c0021cc3:	83 c4 1c             	add    esp,0x1c
c0021cc6:	5b                   	pop    ebx
c0021cc7:	5e                   	pop    esi
c0021cc8:	5f                   	pop    edi
c0021cc9:	5d                   	pop    ebp
c0021cca:	c3                   	ret    
c0021ccb:	90                   	nop

c0021ccc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0021ccc:	55                   	push   ebp
c0021ccd:	57                   	push   edi
c0021cce:	56                   	push   esi
c0021ccf:	53                   	push   ebx
c0021cd0:	83 ec 5c             	sub    esp,0x5c
c0021cd3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0021cd7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0021cdb:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0021cdf:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0021ce4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0021ce8:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0021cec:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0021cf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021cf5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0021cfa:	6a 0c                	push   0xc
c0021cfc:	55                   	push   ebp
c0021cfd:	53                   	push   ebx
c0021cfe:	57                   	push   edi
c0021cff:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0021d06:	e8 01 fc ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d0b:	55                   	push   ebp
c0021d0c:	53                   	push   ebx
c0021d0d:	57                   	push   edi
c0021d0e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021d15:	e8 80 fc ff ff       	call   c002199a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0021d1a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0021d1f:	83 c4 24             	add    esp,0x24
c0021d22:	55                   	push   ebp
c0021d23:	53                   	push   ebx
c0021d24:	57                   	push   edi
c0021d25:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021d29:	e8 f6 fc ff ff       	call   c0021a24 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0021d2e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0021d32:	6a 3c                	push   0x3c
c0021d34:	55                   	push   ebp
c0021d35:	53                   	push   ebx
c0021d36:	57                   	push   edi
c0021d37:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0021d3e:	e8 c9 fb ff ff       	call   c002190c <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021d43:	0f b6 c4             	movzx  eax,ah
c0021d46:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021d4a:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0021d4e:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0021d52:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0021d57:	83 c4 24             	add    esp,0x24
c0021d5a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0021d60:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c0021d67:	74 6c                	je     c0021dd5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d69:	31 f6                	xor    esi,esi
c0021d6b:	8b 15 88 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c988
c0021d71:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021d77:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c0021d7d:	7e 56                	jle    c0021dd5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0021d7f:	8d 14 f2             	lea    edx,[edx+esi*8]
c0021d82:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0021d89:	39 cb                	cmp    ebx,ecx
c0021d8b:	75 45                	jne    c0021dd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d8d:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0021d94:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0021d98:	75 38                	jne    c0021dd2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0021d9a:	83 ec 0c             	sub    esp,0xc
c0021d9d:	68 da af 02 c0       	push   0xc002afda
c0021da2:	e8 1a 0a ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0021da7:	8b 15 88 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c988
c0021dad:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0021db3:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0021dbb:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0021dbf:	52                   	push   edx
c0021dc0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021dc4:	53                   	push   ebx
c0021dc5:	68 ff af 02 c0       	push   0xc002afff
c0021dca:	e8 f2 09 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0021dcf:	83 c4 20             	add    esp,0x20
c0021dd2:	46                   	inc    esi
c0021dd3:	eb 96                	jmp    c0021d6b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0021dd5:	31 d2                	xor    edx,edx
c0021dd7:	83 ec 0c             	sub    esp,0xc
c0021dda:	55                   	push   ebp
c0021ddb:	53                   	push   ebx
c0021ddc:	57                   	push   edi
c0021ddd:	52                   	push   edx
c0021dde:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0021de2:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021de9:	e8 7c fc ff ff       	call   c0021a6a <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0021dee:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0021df2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021df6:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0021dfa:	42                   	inc    edx
c0021dfb:	83 c4 20             	add    esp,0x20
c0021dfe:	83 fa 06             	cmp    edx,0x6
c0021e01:	75 d4                	jne    c0021dd7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0021e03:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0021e07:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0021e0b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0021e0f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0021e13:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0021e17:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0021e1b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0021e20:	86 e0                	xchg   al,ah
c0021e22:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0021e27:	55                   	push   ebp
c0021e28:	53                   	push   ebx
c0021e29:	57                   	push   edi
c0021e2a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0021e2e:	e8 ab fb ff ff       	call   c00219de <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0021e33:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0021e37:	55                   	push   ebp
c0021e38:	53                   	push   ebx
c0021e39:	57                   	push   edi
c0021e3a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0021e41:	e8 0e fb ff ff       	call   c0021954 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e46:	83 ec 0c             	sub    esp,0xc
c0021e49:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0021e4e:	b9 09 00 00 00       	mov    ecx,0x9
c0021e53:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0021e57:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0021e5b:	fc                   	cld    
c0021e5c:	89 e7                	mov    edi,esp
c0021e5e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0021e60:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0021e67:	e8 ee fc ff ff       	call   c0021b5a <PCI::foundDevice(PCIDeviceInfo)>
c0021e6c:	81 c4 8c 00 00 00    	add    esp,0x8c
c0021e72:	5b                   	pop    ebx
c0021e73:	5e                   	pop    esi
c0021e74:	5f                   	pop    edi
c0021e75:	5d                   	pop    ebp
c0021e76:	c3                   	ret    
c0021e77:	90                   	nop

c0021e78 <PCI::checkDevice(unsigned char, unsigned char)>:
c0021e78:	55                   	push   ebp
c0021e79:	57                   	push   edi
c0021e7a:	56                   	push   esi
c0021e7b:	53                   	push   ebx
c0021e7c:	83 ec 0c             	sub    esp,0xc
c0021e7f:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0021e83:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0021e88:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0021e8d:	6a 00                	push   0x0
c0021e8f:	56                   	push   esi
c0021e90:	57                   	push   edi
c0021e91:	55                   	push   ebp
c0021e92:	e8 bd fa ff ff       	call   c0021954 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021e97:	6a 00                	push   0x0
c0021e99:	56                   	push   esi
c0021e9a:	57                   	push   edi
c0021e9b:	55                   	push   ebp
c0021e9c:	e8 2b fe ff ff       	call   c0021ccc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021ea1:	83 c4 20             	add    esp,0x20
c0021ea4:	6a 00                	push   0x0
c0021ea6:	56                   	push   esi
c0021ea7:	57                   	push   edi
c0021ea8:	55                   	push   ebp
c0021ea9:	e8 c8 fa ff ff       	call   c0021976 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021eae:	83 c4 10             	add    esp,0x10
c0021eb1:	84 c0                	test   al,al
c0021eb3:	79 27                	jns    c0021edc <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0021eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0021eba:	53                   	push   ebx
c0021ebb:	56                   	push   esi
c0021ebc:	57                   	push   edi
c0021ebd:	55                   	push   ebp
c0021ebe:	e8 91 fa ff ff       	call   c0021954 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021ec3:	83 c4 10             	add    esp,0x10
c0021ec6:	66 40                	inc    ax
c0021ec8:	74 0c                	je     c0021ed6 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0021eca:	53                   	push   ebx
c0021ecb:	56                   	push   esi
c0021ecc:	57                   	push   edi
c0021ecd:	55                   	push   ebp
c0021ece:	e8 f9 fd ff ff       	call   c0021ccc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0021ed3:	83 c4 10             	add    esp,0x10
c0021ed6:	43                   	inc    ebx
c0021ed7:	83 fb 08             	cmp    ebx,0x8
c0021eda:	75 de                	jne    c0021eba <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0021edc:	83 c4 0c             	add    esp,0xc
c0021edf:	5b                   	pop    ebx
c0021ee0:	5e                   	pop    esi
c0021ee1:	5f                   	pop    edi
c0021ee2:	5d                   	pop    ebp
c0021ee3:	c3                   	ret    

c0021ee4 <PCI::detect()>:
c0021ee4:	56                   	push   esi
c0021ee5:	53                   	push   ebx
c0021ee6:	53                   	push   ebx
c0021ee7:	31 db                	xor    ebx,ebx
c0021ee9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0021eed:	6a 00                	push   0x0
c0021eef:	6a 00                	push   0x0
c0021ef1:	6a 00                	push   0x0
c0021ef3:	56                   	push   esi
c0021ef4:	e8 7d fa ff ff       	call   c0021976 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0021ef9:	83 c4 10             	add    esp,0x10
c0021efc:	a8 80                	test   al,0x80
c0021efe:	75 21                	jne    c0021f21 <PCI::detect()+0x3d>
c0021f00:	51                   	push   ecx
c0021f01:	51                   	push   ecx
c0021f02:	6a 00                	push   0x0
c0021f04:	56                   	push   esi
c0021f05:	e8 2c fc ff ff       	call   c0021b36 <PCI::checkBus(unsigned char)>
c0021f0a:	83 c4 10             	add    esp,0x10
c0021f0d:	eb 24                	jmp    c0021f33 <PCI::detect()+0x4f>
c0021f0f:	52                   	push   edx
c0021f10:	52                   	push   edx
c0021f11:	53                   	push   ebx
c0021f12:	43                   	inc    ebx
c0021f13:	56                   	push   esi
c0021f14:	e8 1d fc ff ff       	call   c0021b36 <PCI::checkBus(unsigned char)>
c0021f19:	83 c4 10             	add    esp,0x10
c0021f1c:	83 fb 08             	cmp    ebx,0x8
c0021f1f:	74 12                	je     c0021f33 <PCI::detect()+0x4f>
c0021f21:	53                   	push   ebx
c0021f22:	6a 00                	push   0x0
c0021f24:	6a 00                	push   0x0
c0021f26:	56                   	push   esi
c0021f27:	e8 28 fa ff ff       	call   c0021954 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0021f2c:	83 c4 10             	add    esp,0x10
c0021f2f:	66 40                	inc    ax
c0021f31:	74 dc                	je     c0021f0f <PCI::detect()+0x2b>
c0021f33:	58                   	pop    eax
c0021f34:	5b                   	pop    ebx
c0021f35:	5e                   	pop    esi
c0021f36:	c3                   	ret    
c0021f37:	90                   	nop

c0021f38 <IDE::close(int, int, void*)>:
c0021f38:	83 c8 ff             	or     eax,0xffffffff
c0021f3b:	c3                   	ret    

c0021f3c <IDE::IDE()>:
c0021f3c:	83 ec 0c             	sub    esp,0xc
c0021f3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f43:	83 ec 08             	sub    esp,0x8
c0021f46:	68 48 b0 02 c0       	push   0xc002b048
c0021f4b:	50                   	push   eax
c0021f4c:	e8 eb 1f ff ff       	call   c0013f3c <HardDiskController::HardDiskController(char const*)>
c0021f51:	83 c4 10             	add    esp,0x10
c0021f54:	ba 88 b2 02 c0       	mov    edx,0xc002b288
c0021f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f5d:	89 10                	mov    DWORD PTR [eax],edx
c0021f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f63:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0021f6a:	90                   	nop
c0021f6b:	83 c4 0c             	add    esp,0xc
c0021f6e:	c3                   	ret    
c0021f6f:	90                   	nop

c0021f70 <IDE::prepareInterrupt(unsigned char)>:
c0021f70:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021f75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021f79:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0021f81:	c3                   	ret    

c0021f82 <selectDrive(unsigned char, unsigned char)>:
c0021f82:	c3                   	ret    
c0021f83:	90                   	nop

c0021f84 <IDE::getBase(unsigned char)>:
c0021f84:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0021f89:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f8d:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0021f95:	c3                   	ret    

c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0021f96:	55                   	push   ebp
c0021f97:	57                   	push   edi
c0021f98:	56                   	push   esi
c0021f99:	53                   	push   ebx
c0021f9a:	83 ec 1c             	sub    esp,0x1c
c0021f9d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021fa1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0021fa5:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0021fa8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0021fac:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0021fb0:	80 f9 03             	cmp    cl,0x3
c0021fb3:	77 51                	ja     c0022006 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0021fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021fb9:	0f b6 f2             	movzx  esi,dl
c0021fbc:	0f b6 db             	movzx  ebx,bl
c0021fbf:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0021fc2:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0021fc6:	83 ca 80             	or     edx,0xffffff80
c0021fc9:	0f b6 d2             	movzx  edx,dl
c0021fcc:	52                   	push   edx
c0021fcd:	6a 0c                	push   0xc
c0021fcf:	56                   	push   esi
c0021fd0:	57                   	push   edi
c0021fd1:	e8 c0 ff ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0021fd6:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0021fdb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021fdf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0021fe3:	ee                   	out    dx,al
c0021fe4:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0021fe9:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0021fed:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0021ff1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0021ff5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0021ffd:	83 c4 2c             	add    esp,0x2c
c0022000:	5b                   	pop    ebx
c0022001:	5e                   	pop    esi
c0022002:	5f                   	pop    edi
c0022003:	5d                   	pop    ebp
c0022004:	eb 90                	jmp    c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022006:	80 fb 07             	cmp    bl,0x7
c0022009:	77 12                	ja     c002201d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002200b:	0f b6 d2             	movzx  edx,dl
c002200e:	0f b6 db             	movzx  ebx,bl
c0022011:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022019:	89 da                	mov    edx,ebx
c002201b:	eb 2f                	jmp    c002204c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002201d:	80 fb 0d             	cmp    bl,0xd
c0022020:	77 13                	ja     c0022035 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022022:	0f b6 d2             	movzx  edx,dl
c0022025:	0f b6 db             	movzx  ebx,bl
c0022028:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002202f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022033:	eb 17                	jmp    c002204c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022035:	80 fb 15             	cmp    bl,0x15
c0022038:	77 13                	ja     c002204d <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002203a:	0f b6 d2             	movzx  edx,dl
c002203d:	0f b6 db             	movzx  ebx,bl
c0022040:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022048:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c002204c:	ee                   	out    dx,al
c002204d:	83 c4 1c             	add    esp,0x1c
c0022050:	5b                   	pop    ebx
c0022051:	5e                   	pop    esi
c0022052:	5f                   	pop    edi
c0022053:	5d                   	pop    ebp
c0022054:	c3                   	ret    
c0022055:	90                   	nop

c0022056 <IDE::read(unsigned char, unsigned char)>:
c0022056:	55                   	push   ebp
c0022057:	57                   	push   edi
c0022058:	56                   	push   esi
c0022059:	53                   	push   ebx
c002205a:	83 ec 1c             	sub    esp,0x1c
c002205d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022061:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022065:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022068:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002206c:	3c 03                	cmp    al,0x3
c002206e:	77 43                	ja     c00220b3 <IDE::read(unsigned char, unsigned char)+0x5d>
c0022070:	0f b6 f2             	movzx  esi,dl
c0022073:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022076:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c002207a:	83 c8 80             	or     eax,0xffffff80
c002207d:	0f b6 c0             	movzx  eax,al
c0022080:	50                   	push   eax
c0022081:	6a 0c                	push   0xc
c0022083:	56                   	push   esi
c0022084:	57                   	push   edi
c0022085:	e8 0c ff ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002208a:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c002208f:	0f b6 c3             	movzx  eax,bl
c0022092:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022096:	ec                   	in     al,dx
c0022097:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c002209b:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00220a0:	52                   	push   edx
c00220a1:	6a 0c                	push   0xc
c00220a3:	56                   	push   esi
c00220a4:	57                   	push   edi
c00220a5:	e8 ec fe ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00220aa:	83 c4 20             	add    esp,0x20
c00220ad:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00220b1:	eb 49                	jmp    c00220fc <IDE::read(unsigned char, unsigned char)+0xa6>
c00220b3:	80 fb 07             	cmp    bl,0x7
c00220b6:	77 12                	ja     c00220ca <IDE::read(unsigned char, unsigned char)+0x74>
c00220b8:	0f b6 d2             	movzx  edx,dl
c00220bb:	0f b6 c3             	movzx  eax,bl
c00220be:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00220c6:	89 c2                	mov    edx,eax
c00220c8:	eb 31                	jmp    c00220fb <IDE::read(unsigned char, unsigned char)+0xa5>
c00220ca:	80 fb 0d             	cmp    bl,0xd
c00220cd:	77 13                	ja     c00220e2 <IDE::read(unsigned char, unsigned char)+0x8c>
c00220cf:	0f b6 d2             	movzx  edx,dl
c00220d2:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00220d9:	0f b6 d3             	movzx  edx,bl
c00220dc:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00220e0:	eb 19                	jmp    c00220fb <IDE::read(unsigned char, unsigned char)+0xa5>
c00220e2:	31 c0                	xor    eax,eax
c00220e4:	80 fb 15             	cmp    bl,0x15
c00220e7:	77 13                	ja     c00220fc <IDE::read(unsigned char, unsigned char)+0xa6>
c00220e9:	0f b6 d2             	movzx  edx,dl
c00220ec:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00220f4:	0f b6 d3             	movzx  edx,bl
c00220f7:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c00220fb:	ec                   	in     al,dx
c00220fc:	83 c4 1c             	add    esp,0x1c
c00220ff:	5b                   	pop    ebx
c0022100:	5e                   	pop    esi
c0022101:	5f                   	pop    edi
c0022102:	5d                   	pop    ebp
c0022103:	c3                   	ret    

c0022104 <IDE::waitInterrupt(unsigned char)>:
c0022104:	55                   	push   ebp
c0022105:	57                   	push   edi
c0022106:	56                   	push   esi
c0022107:	53                   	push   ebx
c0022108:	31 db                	xor    ebx,ebx
c002210a:	83 ec 0c             	sub    esp,0xc
c002210d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022111:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022116:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002211e:	89 e8                	mov    eax,ebp
c0022120:	84 c0                	test   al,al
c0022122:	75 34                	jne    c0022158 <IDE::waitInterrupt(unsigned char)+0x54>
c0022124:	52                   	push   edx
c0022125:	6a 0c                	push   0xc
c0022127:	56                   	push   esi
c0022128:	57                   	push   edi
c0022129:	e8 28 ff ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c002212e:	83 c4 10             	add    esp,0x10
c0022131:	a8 01                	test   al,0x1
c0022133:	75 2b                	jne    c0022160 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022135:	f6 c3 04             	test   bl,0x4
c0022138:	75 16                	jne    c0022150 <IDE::waitInterrupt(unsigned char)+0x4c>
c002213a:	83 fb 32             	cmp    ebx,0x32
c002213d:	7e 11                	jle    c0022150 <IDE::waitInterrupt(unsigned char)+0x4c>
c002213f:	50                   	push   eax
c0022140:	50                   	push   eax
c0022141:	6a 00                	push   0x0
c0022143:	68 80 96 98 00       	push   0x989680
c0022148:	e8 6d b1 ff ff       	call   c001d2ba <nanoSleep(unsigned long long)>
c002214d:	83 c4 10             	add    esp,0x10
c0022150:	83 fb 3c             	cmp    ebx,0x3c
c0022153:	74 0b                	je     c0022160 <IDE::waitInterrupt(unsigned char)+0x5c>
c0022155:	43                   	inc    ebx
c0022156:	eb be                	jmp    c0022116 <IDE::waitInterrupt(unsigned char)+0x12>
c0022158:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022160:	83 c4 0c             	add    esp,0xc
c0022163:	89 e8                	mov    eax,ebp
c0022165:	5b                   	pop    ebx
c0022166:	5e                   	pop    esi
c0022167:	5f                   	pop    edi
c0022168:	5d                   	pop    ebp
c0022169:	c3                   	ret    

c002216a <ideChannel0IRQHandler(regs*, void*)>:
c002216a:	83 ec 10             	sub    esp,0x10
c002216d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022171:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022178:	6a 07                	push   0x7
c002217a:	6a 00                	push   0x0
c002217c:	50                   	push   eax
c002217d:	e8 d4 fe ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022182:	83 c4 1c             	add    esp,0x1c
c0022185:	c3                   	ret    

c0022186 <ideChannel1IRQHandler(regs*, void*)>:
c0022186:	83 ec 10             	sub    esp,0x10
c0022189:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002218d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022194:	6a 07                	push   0x7
c0022196:	6a 01                	push   0x1
c0022198:	50                   	push   eax
c0022199:	e8 b8 fe ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c002219e:	83 c4 1c             	add    esp,0x1c
c00221a1:	c3                   	ret    

c00221a2 <IDE::enableIRQs(unsigned char, bool)>:
c00221a2:	57                   	push   edi
c00221a3:	56                   	push   esi
c00221a4:	be 04 00 00 00       	mov    esi,0x4
c00221a9:	53                   	push   ebx
c00221aa:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00221af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00221b3:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00221b8:	0f 94 c0             	sete   al
c00221bb:	d1 e0                	shl    eax,1
c00221bd:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00221c4:	0f b6 c0             	movzx  eax,al
c00221c7:	50                   	push   eax
c00221c8:	6a 0c                	push   0xc
c00221ca:	57                   	push   edi
c00221cb:	53                   	push   ebx
c00221cc:	e8 c5 fd ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00221d1:	83 c4 10             	add    esp,0x10
c00221d4:	50                   	push   eax
c00221d5:	6a 0c                	push   0xc
c00221d7:	57                   	push   edi
c00221d8:	53                   	push   ebx
c00221d9:	e8 78 fe ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c00221de:	83 c4 10             	add    esp,0x10
c00221e1:	4e                   	dec    esi
c00221e2:	75 f0                	jne    c00221d4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c00221e4:	5b                   	pop    ebx
c00221e5:	5e                   	pop    esi
c00221e6:	5f                   	pop    edi
c00221e7:	c3                   	ret    

c00221e8 <IDE::open(int, int, void*)>:
c00221e8:	55                   	push   ebp
c00221e9:	57                   	push   edi
c00221ea:	56                   	push   esi
c00221eb:	53                   	push   ebx
c00221ec:	83 ec 1c             	sub    esp,0x1c
c00221ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00221f3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c00221fc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022205:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c002220c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022213:	0f 85 b0 02 00 00    	jne    c00224c9 <IDE::open(int, int, void*)+0x2e1>
c0022219:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c002221f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022223:	83 e0 7f             	and    eax,0x7f
c0022226:	3c 05                	cmp    al,0x5
c0022228:	74 04                	je     c002222e <IDE::open(int, int, void*)+0x46>
c002222a:	3c 0f                	cmp    al,0xf
c002222c:	75 32                	jne    c0022260 <IDE::open(int, int, void*)+0x78>
c002222e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022234:	83 e0 fc             	and    eax,0xfffffffc
c0022237:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c002223e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022244:	83 e0 fc             	and    eax,0xfffffffc
c0022247:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c002224e:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022254:	83 e0 fc             	and    eax,0xfffffffc
c0022257:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c002225e:	eb 14                	jmp    c0022274 <IDE::open(int, int, void*)+0x8c>
c0022260:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002226a:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022274:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c002227b:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022282:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022286:	89 c6                	mov    esi,eax
c0022288:	bf f8 0c 00 00       	mov    edi,0xcf8
c002228d:	c1 e6 10             	shl    esi,0x10
c0022290:	89 e8                	mov    eax,ebp
c0022292:	89 fa                	mov    edx,edi
c0022294:	c1 e0 0b             	shl    eax,0xb
c0022297:	09 f0                	or     eax,esi
c0022299:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00222a0:	c1 e6 08             	shl    esi,0x8
c00222a3:	09 c6                	or     esi,eax
c00222a5:	89 f0                	mov    eax,esi
c00222a7:	0d 08 00 00 80       	or     eax,0x80000008
c00222ac:	ef                   	out    dx,eax
c00222ad:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00222b2:	89 ca                	mov    edx,ecx
c00222b4:	ed                   	in     eax,dx
c00222b5:	c1 e8 10             	shr    eax,0x10
c00222b8:	3d ff ff 00 00       	cmp    eax,0xffff
c00222bd:	0f 84 f5 00 00 00    	je     c00223b8 <IDE::open(int, int, void*)+0x1d0>
c00222c3:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00222c9:	89 fa                	mov    edx,edi
c00222cb:	89 f0                	mov    eax,esi
c00222cd:	ef                   	out    dx,eax
c00222ce:	b0 fe                	mov    al,0xfe
c00222d0:	89 ca                	mov    edx,ecx
c00222d2:	ee                   	out    dx,al
c00222d3:	89 f0                	mov    eax,esi
c00222d5:	89 fa                	mov    edx,edi
c00222d7:	ef                   	out    dx,eax
c00222d8:	89 ca                	mov    edx,ecx
c00222da:	ed                   	in     eax,dx
c00222db:	3c fe                	cmp    al,0xfe
c00222dd:	0f 85 a9 00 00 00    	jne    c002238c <IDE::open(int, int, void*)+0x1a4>
c00222e3:	8b 15 88 c9 02 c0    	mov    edx,DWORD PTR ds:0xc002c988
c00222e9:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00222f0:	74 33                	je     c0022325 <IDE::open(int, int, void*)+0x13d>
c00222f2:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c00222f8:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c00222fc:	40                   	inc    eax
c00222fd:	83 ec 0c             	sub    esp,0xc
c0022300:	0f b6 c0             	movzx  eax,al
c0022303:	50                   	push   eax
c0022304:	55                   	push   ebp
c0022305:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022309:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c002230f:	51                   	push   ecx
c0022310:	e8 bb 54 ff ff       	call   c00177d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022315:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c002231a:	83 c4 1c             	add    esp,0x1c
c002231d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022323:	eb 0a                	jmp    c002232f <IDE::open(int, int, void*)+0x147>
c0022325:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c002232f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022336:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c002233d:	c1 e1 10             	shl    ecx,0x10
c0022340:	c1 e0 08             	shl    eax,0x8
c0022343:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022348:	09 c1                	or     ecx,eax
c002234a:	89 fa                	mov    edx,edi
c002234c:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022353:	c1 e0 0b             	shl    eax,0xb
c0022356:	09 c1                	or     ecx,eax
c0022358:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c002235e:	89 c8                	mov    eax,ecx
c0022360:	ef                   	out    dx,eax
c0022361:	be fc 0c 00 00       	mov    esi,0xcfc
c0022366:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c002236c:	89 f2                	mov    edx,esi
c002236e:	ee                   	out    dx,al
c002236f:	89 c8                	mov    eax,ecx
c0022371:	89 fa                	mov    edx,edi
c0022373:	ef                   	out    dx,eax
c0022374:	89 f2                	mov    edx,esi
c0022376:	ed                   	in     eax,dx
c0022377:	0f b6 c0             	movzx  eax,al
c002237a:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0022380:	74 46                	je     c00223c8 <IDE::open(int, int, void*)+0x1e0>
c0022382:	83 ec 0c             	sub    esp,0xc
c0022385:	68 60 b0 02 c0       	push   0xc002b060
c002238a:	eb 34                	jmp    c00223c0 <IDE::open(int, int, void*)+0x1d8>
c002238c:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0022395:	75 17                	jne    c00223ae <IDE::open(int, int, void*)+0x1c6>
c0022397:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c002239c:	74 07                	je     c00223a5 <IDE::open(int, int, void*)+0x1bd>
c002239e:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00223a3:	75 09                	jne    c00223ae <IDE::open(int, int, void*)+0x1c6>
c00223a5:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00223ac:	eb 1a                	jmp    c00223c8 <IDE::open(int, int, void*)+0x1e0>
c00223ae:	83 ec 0c             	sub    esp,0xc
c00223b1:	68 68 b0 02 c0       	push   0xc002b068
c00223b6:	eb 08                	jmp    c00223c0 <IDE::open(int, int, void*)+0x1d8>
c00223b8:	83 ec 0c             	sub    esp,0xc
c00223bb:	68 99 b0 02 c0       	push   0xc002b099
c00223c0:	e8 16 75 ff ff       	call   c00198db <Krnl::panic(char const*)>
c00223c5:	83 c4 10             	add    esp,0x10
c00223c8:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00223cf:	79 1a                	jns    c00223eb <IDE::open(int, int, void*)+0x203>
c00223d1:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00223d7:	83 e0 fc             	and    eax,0xfffffffc
c00223da:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00223e1:	83 c0 08             	add    eax,0x8
c00223e4:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00223eb:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00223f1:	89 c2                	mov    edx,eax
c00223f3:	83 e2 0f             	and    edx,0xf
c00223f6:	66 83 fa 08          	cmp    dx,0x8
c00223fa:	75 0a                	jne    c0022406 <IDE::open(int, int, void*)+0x21e>
c00223fc:	83 e8 02             	sub    eax,0x2
c00223ff:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022406:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c002240c:	89 c2                	mov    edx,eax
c002240e:	83 e2 0f             	and    edx,0xf
c0022411:	66 83 fa 08          	cmp    dx,0x8
c0022415:	75 0a                	jne    c0022421 <IDE::open(int, int, void*)+0x239>
c0022417:	83 e8 02             	sub    eax,0x2
c002241a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0022421:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0022428:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c002242f:	89 d0                	mov    eax,edx
c0022431:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0022434:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022438:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c002243c:	8d 4a 01             	lea    ecx,[edx+0x1]
c002243f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0022444:	0f b6 c9             	movzx  ecx,cl
c0022447:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c002244e:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022451:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0022455:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0022459:	8d 50 02             	lea    edx,[eax+0x2]
c002245c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0022461:	0f b6 d2             	movzx  edx,dl
c0022464:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c002246a:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002246d:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0022471:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0022475:	8d 48 03             	lea    ecx,[eax+0x3]
c0022478:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002247d:	0f b6 c9             	movzx  ecx,cl
c0022480:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0022486:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0022489:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002248d:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0022491:	8d 50 04             	lea    edx,[eax+0x4]
c0022494:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c002249a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002249f:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00224a6:	66 85 f6             	test   si,si
c00224a9:	74 3e                	je     c00224e9 <IDE::open(int, int, void*)+0x301>
c00224ab:	0f b6 d2             	movzx  edx,dl
c00224ae:	83 c0 05             	add    eax,0x5
c00224b1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00224b4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00224b8:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00224bc:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00224c2:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00224c7:	eb 20                	jmp    c00224e9 <IDE::open(int, int, void*)+0x301>
c00224c9:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00224d3:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00224dd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00224e4:	e9 02 ff ff ff       	jmp    c00223eb <IDE::open(int, int, void*)+0x203>
c00224e9:	52                   	push   edx
c00224ea:	52                   	push   edx
c00224eb:	6a 00                	push   0x0
c00224ed:	53                   	push   ebx
c00224ee:	e8 7d fa ff ff       	call   c0021f70 <IDE::prepareInterrupt(unsigned char)>
c00224f3:	59                   	pop    ecx
c00224f4:	5e                   	pop    esi
c00224f5:	6a 01                	push   0x1
c00224f7:	53                   	push   ebx
c00224f8:	e8 73 fa ff ff       	call   c0021f70 <IDE::prepareInterrupt(unsigned char)>
c00224fd:	83 c4 0c             	add    esp,0xc
c0022500:	6a 00                	push   0x0
c0022502:	6a 00                	push   0x0
c0022504:	53                   	push   ebx
c0022505:	e8 98 fc ff ff       	call   c00221a2 <IDE::enableIRQs(unsigned char, bool)>
c002250a:	83 c4 0c             	add    esp,0xc
c002250d:	6a 00                	push   0x0
c002250f:	6a 01                	push   0x1
c0022511:	53                   	push   ebx
c0022512:	e8 8b fc ff ff       	call   c00221a2 <IDE::enableIRQs(unsigned char, bool)>
c0022517:	83 c4 10             	add    esp,0x10
c002251a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0022521:	74 40                	je     c0022563 <IDE::open(int, int, void*)+0x37b>
c0022523:	83 ec 0c             	sub    esp,0xc
c0022526:	68 c3 b0 02 c0       	push   0xc002b0c3
c002252b:	e8 91 02 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022530:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022533:	6a 01                	push   0x1
c0022535:	68 6a 21 02 c0       	push   0xc002216a
c002253a:	6a 0e                	push   0xe
c002253c:	53                   	push   ebx
c002253d:	e8 f2 15 ff ff       	call   c0013b34 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022542:	83 c4 14             	add    esp,0x14
c0022545:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002254b:	53                   	push   ebx
c002254c:	6a 01                	push   0x1
c002254e:	68 86 21 02 c0       	push   0xc0022186
c0022553:	6a 0f                	push   0xf
c0022555:	53                   	push   ebx
c0022556:	e8 d9 15 ff ff       	call   c0013b34 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002255b:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0022561:	eb 4a                	jmp    c00225ad <IDE::open(int, int, void*)+0x3c5>
c0022563:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c002256d:	50                   	push   eax
c002256e:	6a 0f                	push   0xf
c0022570:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022576:	68 df b0 02 c0       	push   0xc002b0df
c002257b:	e8 41 02 ff ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022580:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0022583:	6a 00                	push   0x0
c0022585:	68 6a 21 02 c0       	push   0xc002216a
c002258a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0022590:	53                   	push   ebx
c0022591:	e8 9e 15 ff ff       	call   c0013b34 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0022596:	83 c4 14             	add    esp,0x14
c0022599:	53                   	push   ebx
c002259a:	6a 00                	push   0x0
c002259c:	68 86 21 02 c0       	push   0xc0022186
c00225a1:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00225a7:	53                   	push   ebx
c00225a8:	e8 87 15 ff ff       	call   c0013b34 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00225ad:	8b 03                	mov    eax,DWORD PTR [ebx]
c00225af:	83 c4 20             	add    esp,0x20
c00225b2:	83 ec 0c             	sub    esp,0xc
c00225b5:	53                   	push   ebx
c00225b6:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00225b9:	83 c4 0c             	add    esp,0xc
c00225bc:	6a 07                	push   0x7
c00225be:	6a 00                	push   0x0
c00225c0:	53                   	push   ebx
c00225c1:	e8 90 fa ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c00225c6:	83 c4 0c             	add    esp,0xc
c00225c9:	6a 07                	push   0x7
c00225cb:	6a 01                	push   0x1
c00225cd:	53                   	push   ebx
c00225ce:	e8 83 fa ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c00225d3:	83 c4 0c             	add    esp,0xc
c00225d6:	6a 01                	push   0x1
c00225d8:	6a 00                	push   0x0
c00225da:	53                   	push   ebx
c00225db:	e8 c2 fb ff ff       	call   c00221a2 <IDE::enableIRQs(unsigned char, bool)>
c00225e0:	83 c4 0c             	add    esp,0xc
c00225e3:	6a 01                	push   0x1
c00225e5:	6a 01                	push   0x1
c00225e7:	53                   	push   ebx
c00225e8:	e8 b5 fb ff ff       	call   c00221a2 <IDE::enableIRQs(unsigned char, bool)>
c00225ed:	83 c4 2c             	add    esp,0x2c
c00225f0:	31 c0                	xor    eax,eax
c00225f2:	5b                   	pop    ebx
c00225f3:	5e                   	pop    esi
c00225f4:	5f                   	pop    edi
c00225f5:	5d                   	pop    ebp
c00225f6:	c3                   	ret    
c00225f7:	90                   	nop

c00225f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c00225f8:	55                   	push   ebp
c00225f9:	57                   	push   edi
c00225fa:	56                   	push   esi
c00225fb:	53                   	push   ebx
c00225fc:	83 ec 1c             	sub    esp,0x1c
c00225ff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022603:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022607:	8d 50 f8             	lea    edx,[eax-0x8]
c002260a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002260e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0022612:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0022616:	80 fa 03             	cmp    dl,0x3
c0022619:	77 5d                	ja     c0022678 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c002261b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c002261f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022623:	0f b6 db             	movzx  ebx,bl
c0022626:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0022629:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c002262d:	83 ca 80             	or     edx,0xffffff80
c0022630:	0f b6 d2             	movzx  edx,dl
c0022633:	52                   	push   edx
c0022634:	6a 0c                	push   0xc
c0022636:	53                   	push   ebx
c0022637:	56                   	push   esi
c0022638:	e8 59 f9 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002263d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0022642:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022646:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002264a:	0f b6 c0             	movzx  eax,al
c002264d:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0022651:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0022653:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0022658:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c002265c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022660:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022664:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002266c:	83 c4 2c             	add    esp,0x2c
c002266f:	5b                   	pop    ebx
c0022670:	5e                   	pop    esi
c0022671:	5f                   	pop    edi
c0022672:	5d                   	pop    ebp
c0022673:	e9 1e f9 ff ff       	jmp    c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022678:	3c 07                	cmp    al,0x7
c002267a:	77 10                	ja     c002268c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c002267c:	0f b6 db             	movzx  ebx,bl
c002267f:	0f b6 d0             	movzx  edx,al
c0022682:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c002268a:	eb 2d                	jmp    c00226b9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002268c:	3c 0d                	cmp    al,0xd
c002268e:	77 13                	ja     c00226a3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0022690:	0f b6 db             	movzx  ebx,bl
c0022693:	0f b6 c0             	movzx  eax,al
c0022696:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c002269d:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00226a1:	eb 16                	jmp    c00226b9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00226a3:	3c 15                	cmp    al,0x15
c00226a5:	77 14                	ja     c00226bb <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00226a7:	0f b6 db             	movzx  ebx,bl
c00226aa:	0f b6 c0             	movzx  eax,al
c00226ad:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00226b5:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00226b9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00226bb:	83 c4 1c             	add    esp,0x1c
c00226be:	5b                   	pop    ebx
c00226bf:	5e                   	pop    esi
c00226c0:	5f                   	pop    edi
c00226c1:	5d                   	pop    ebp
c00226c2:	c3                   	ret    
c00226c3:	90                   	nop

c00226c4 <IDE::detect()>:
c00226c4:	55                   	push   ebp
c00226c5:	57                   	push   edi
c00226c6:	56                   	push   esi
c00226c7:	53                   	push   ebx
c00226c8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00226ce:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00226d5:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00226dc:	0f 85 be 02 00 00    	jne    c00229a0 <IDE::detect()+0x2dc>
c00226e2:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00226e9:	31 f6                	xor    esi,esi
c00226eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00226f3:	31 ed                	xor    ebp,ebp
c00226f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00226f9:	c1 e0 06             	shl    eax,0x6
c00226fc:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0022704:	89 e8                	mov    eax,ebp
c0022706:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c002270a:	c1 e0 04             	shl    eax,0x4
c002270d:	83 c8 a0             	or     eax,0xffffffa0
c0022710:	0f b6 c0             	movzx  eax,al
c0022713:	50                   	push   eax
c0022714:	6a 06                	push   0x6
c0022716:	56                   	push   esi
c0022717:	53                   	push   ebx
c0022718:	e8 79 f8 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002271d:	83 c4 0c             	add    esp,0xc
c0022720:	6a 0c                	push   0xc
c0022722:	56                   	push   esi
c0022723:	53                   	push   ebx
c0022724:	e8 2d f9 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022729:	83 c4 0c             	add    esp,0xc
c002272c:	6a 0c                	push   0xc
c002272e:	56                   	push   esi
c002272f:	53                   	push   ebx
c0022730:	e8 21 f9 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022735:	83 c4 0c             	add    esp,0xc
c0022738:	6a 0c                	push   0xc
c002273a:	56                   	push   esi
c002273b:	53                   	push   ebx
c002273c:	e8 15 f9 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022741:	83 c4 0c             	add    esp,0xc
c0022744:	6a 0c                	push   0xc
c0022746:	56                   	push   esi
c0022747:	53                   	push   ebx
c0022748:	e8 09 f9 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c002274d:	68 ec 00 00 00       	push   0xec
c0022752:	6a 07                	push   0x7
c0022754:	56                   	push   esi
c0022755:	53                   	push   ebx
c0022756:	e8 3b f8 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002275b:	83 c4 1c             	add    esp,0x1c
c002275e:	6a 0c                	push   0xc
c0022760:	56                   	push   esi
c0022761:	53                   	push   ebx
c0022762:	e8 ef f8 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022767:	83 c4 0c             	add    esp,0xc
c002276a:	6a 0c                	push   0xc
c002276c:	56                   	push   esi
c002276d:	53                   	push   ebx
c002276e:	e8 e3 f8 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022773:	83 c4 0c             	add    esp,0xc
c0022776:	6a 0c                	push   0xc
c0022778:	56                   	push   esi
c0022779:	53                   	push   ebx
c002277a:	e8 d7 f8 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c002277f:	83 c4 0c             	add    esp,0xc
c0022782:	6a 0c                	push   0xc
c0022784:	56                   	push   esi
c0022785:	53                   	push   ebx
c0022786:	e8 cb f8 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c002278b:	83 c4 0c             	add    esp,0xc
c002278e:	6a 0c                	push   0xc
c0022790:	56                   	push   esi
c0022791:	53                   	push   ebx
c0022792:	e8 bf f8 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022797:	83 c4 10             	add    esp,0x10
c002279a:	84 c0                	test   al,al
c002279c:	0f 84 8b 01 00 00    	je     c002292d <IDE::detect()+0x269>
c00227a2:	31 ff                	xor    edi,edi
c00227a4:	50                   	push   eax
c00227a5:	6a 0c                	push   0xc
c00227a7:	56                   	push   esi
c00227a8:	53                   	push   ebx
c00227a9:	e8 a8 f8 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c00227ae:	83 c4 10             	add    esp,0x10
c00227b1:	a8 01                	test   al,0x1
c00227b3:	0f 85 8e 01 00 00    	jne    c0022947 <IDE::detect()+0x283>
c00227b9:	84 c0                	test   al,al
c00227bb:	78 04                	js     c00227c1 <IDE::detect()+0xfd>
c00227bd:	a8 08                	test   al,0x8
c00227bf:	75 27                	jne    c00227e8 <IDE::detect()+0x124>
c00227c1:	47                   	inc    edi
c00227c2:	81 ff 17 01 00 00    	cmp    edi,0x117
c00227c8:	7e da                	jle    c00227a4 <IDE::detect()+0xe0>
c00227ca:	50                   	push   eax
c00227cb:	50                   	push   eax
c00227cc:	6a 00                	push   0x0
c00227ce:	68 40 4b 4c 00       	push   0x4c4b40
c00227d3:	e8 e2 aa ff ff       	call   c001d2ba <nanoSleep(unsigned long long)>
c00227d8:	83 c4 10             	add    esp,0x10
c00227db:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00227e1:	75 c1                	jne    c00227a4 <IDE::detect()+0xe0>
c00227e3:	e9 5f 01 00 00       	jmp    c0022947 <IDE::detect()+0x283>
c00227e8:	31 c9                	xor    ecx,ecx
c00227ea:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00227ee:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00227f2:	83 ec 0c             	sub    esp,0xc
c00227f5:	68 80 00 00 00       	push   0x80
c00227fa:	57                   	push   edi
c00227fb:	6a 00                	push   0x0
c00227fd:	56                   	push   esi
c00227fe:	53                   	push   ebx
c00227ff:	e8 f4 fd ff ff       	call   c00225f8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0022804:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0022809:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002280d:	89 d1                	mov    ecx,edx
c002280f:	c1 e0 06             	shl    eax,0x6
c0022812:	01 d8                	add    eax,ebx
c0022814:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002281b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0022822:	89 f2                	mov    edx,esi
c0022824:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002282a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002282e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0022834:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022838:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002283f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0022847:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c002284e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0022856:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c002285c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0022863:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0022869:	8d 54 24 58          	lea    edx,[esp+0x58]
c002286d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022871:	83 c4 20             	add    esp,0x20
c0022874:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0022877:	83 c0 02             	add    eax,0x2
c002287a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0022880:	83 c7 02             	add    edi,0x2
c0022883:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0022886:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c002288c:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0022890:	75 e2                	jne    c0022874 <IDE::detect()+0x1b0>
c0022892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022896:	c1 e0 06             	shl    eax,0x6
c0022899:	01 d8                	add    eax,ebx
c002289b:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00228a1:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00228a8:	66 c1 ea 09          	shr    dx,0x9
c00228ac:	83 e2 01             	and    edx,0x1
c00228af:	84 c9                	test   cl,cl
c00228b1:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00228b7:	75 2f                	jne    c00228e8 <IDE::detect()+0x224>
c00228b9:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00228bf:	85 c0                	test   eax,eax
c00228c1:	74 66                	je     c0022929 <IDE::detect()+0x265>
c00228c3:	50                   	push   eax
c00228c4:	55                   	push   ebp
c00228c5:	56                   	push   esi
c00228c6:	68 fb b0 02 c0       	push   0xc002b0fb
c00228cb:	e8 f1 fe fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00228d0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00228d7:	e8 f8 cb fe ff       	call   c000f4d4 <malloc>
c00228dc:	89 c7                	mov    edi,eax
c00228de:	89 04 24             	mov    DWORD PTR [esp],eax
c00228e1:	e8 62 06 00 00       	call   c0022f48 <ATA::ATA()>
c00228e6:	eb 28                	jmp    c0022910 <IDE::detect()+0x24c>
c00228e8:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00228ee:	55                   	push   ebp
c00228ef:	56                   	push   esi
c00228f0:	68 2a b1 02 c0       	push   0xc002b12a
c00228f5:	e8 c7 fe fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00228fa:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0022901:	e8 ce cb fe ff       	call   c000f4d4 <malloc>
c0022906:	89 c7                	mov    edi,eax
c0022908:	89 04 24             	mov    DWORD PTR [esp],eax
c002290b:	e8 68 0c 00 00       	call   c0023578 <ATAPI::ATAPI()>
c0022910:	5a                   	pop    edx
c0022911:	59                   	pop    ecx
c0022912:	57                   	push   edi
c0022913:	53                   	push   ebx
c0022914:	e8 97 12 ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c0022919:	8b 07                	mov    eax,DWORD PTR [edi]
c002291b:	53                   	push   ebx
c002291c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022920:	6a 00                	push   0x0
c0022922:	57                   	push   edi
c0022923:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022926:	83 c4 20             	add    esp,0x20
c0022929:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002292d:	4d                   	dec    ebp
c002292e:	74 0a                	je     c002293a <IDE::detect()+0x276>
c0022930:	bd 01 00 00 00       	mov    ebp,0x1
c0022935:	e9 bb fd ff ff       	jmp    c00226f5 <IDE::detect()+0x31>
c002293a:	4e                   	dec    esi
c002293b:	74 63                	je     c00229a0 <IDE::detect()+0x2dc>
c002293d:	be 01 00 00 00       	mov    esi,0x1
c0022942:	e9 ac fd ff ff       	jmp    c00226f3 <IDE::detect()+0x2f>
c0022947:	50                   	push   eax
c0022948:	6a 04                	push   0x4
c002294a:	56                   	push   esi
c002294b:	53                   	push   ebx
c002294c:	e8 05 f7 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022951:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022955:	83 c4 0c             	add    esp,0xc
c0022958:	6a 05                	push   0x5
c002295a:	56                   	push   esi
c002295b:	53                   	push   ebx
c002295c:	e8 f5 f6 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022961:	83 c4 10             	add    esp,0x10
c0022964:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0022968:	80 fa 14             	cmp    dl,0x14
c002296b:	75 04                	jne    c0022971 <IDE::detect()+0x2ad>
c002296d:	3c eb                	cmp    al,0xeb
c002296f:	eb 07                	jmp    c0022978 <IDE::detect()+0x2b4>
c0022971:	3c 96                	cmp    al,0x96
c0022973:	75 b8                	jne    c002292d <IDE::detect()+0x269>
c0022975:	80 fa 69             	cmp    dl,0x69
c0022978:	75 b3                	jne    c002292d <IDE::detect()+0x269>
c002297a:	68 a1 00 00 00       	push   0xa1
c002297f:	6a 07                	push   0x7
c0022981:	56                   	push   esi
c0022982:	53                   	push   ebx
c0022983:	e8 0e f6 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022988:	5f                   	pop    edi
c0022989:	58                   	pop    eax
c002298a:	6a 00                	push   0x0
c002298c:	68 40 42 0f 00       	push   0xf4240
c0022991:	e8 24 a9 ff ff       	call   c001d2ba <nanoSleep(unsigned long long)>
c0022996:	83 c4 10             	add    esp,0x10
c0022999:	b1 01                	mov    cl,0x1
c002299b:	e9 4a fe ff ff       	jmp    c00227ea <IDE::detect()+0x126>
c00229a0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00229a6:	5b                   	pop    ebx
c00229a7:	5e                   	pop    esi
c00229a8:	5f                   	pop    edi
c00229a9:	5d                   	pop    ebp
c00229aa:	c3                   	ret    
c00229ab:	90                   	nop

c00229ac <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00229ac:	55                   	push   ebp
c00229ad:	57                   	push   edi
c00229ae:	56                   	push   esi
c00229af:	53                   	push   ebx
c00229b0:	83 ec 1c             	sub    esp,0x1c
c00229b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00229b7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00229bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00229bf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00229c3:	88 c3                	mov    bl,al
c00229c5:	84 c0                	test   al,al
c00229c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00229cb:	0f 84 67 01 00 00    	je     c0022b38 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c00229d1:	83 ec 0c             	sub    esp,0xc
c00229d4:	68 5b b1 02 c0       	push   0xc002b15b
c00229d9:	e8 e3 fd fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00229de:	83 c4 10             	add    esp,0x10
c00229e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00229e5:	3c 01                	cmp    al,0x1
c00229e7:	75 17                	jne    c0022a00 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c00229e9:	83 ec 0c             	sub    esp,0xc
c00229ec:	b3 13                	mov    bl,0x13
c00229ee:	68 67 b1 02 c0       	push   0xc002b167
c00229f3:	e8 c9 fd fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00229f8:	83 c4 10             	add    esp,0x10
c00229fb:	e9 25 01 00 00       	jmp    c0022b25 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022a00:	3c 02                	cmp    al,0x2
c0022a02:	0f 85 ef 00 00 00    	jne    c0022af7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0022a08:	d1 e6                	shl    esi,1
c0022a0a:	09 ee                	or     esi,ebp
c0022a0c:	52                   	push   edx
c0022a0d:	89 f0                	mov    eax,esi
c0022a0f:	6a 01                	push   0x1
c0022a11:	0f b6 f0             	movzx  esi,al
c0022a14:	c1 e6 06             	shl    esi,0x6
c0022a17:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0022a1f:	50                   	push   eax
c0022a20:	57                   	push   edi
c0022a21:	e8 30 f6 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022a26:	83 c4 10             	add    esp,0x10
c0022a29:	89 c6                	mov    esi,eax
c0022a2b:	a8 01                	test   al,0x1
c0022a2d:	74 12                	je     c0022a41 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0022a2f:	83 ec 0c             	sub    esp,0xc
c0022a32:	b3 07                	mov    bl,0x7
c0022a34:	68 7c b1 02 c0       	push   0xc002b17c
c0022a39:	e8 83 fd fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022a3e:	83 c4 10             	add    esp,0x10
c0022a41:	f7 c6 02 00 00 00    	test   esi,0x2
c0022a47:	74 12                	je     c0022a5b <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0022a49:	83 ec 0c             	sub    esp,0xc
c0022a4c:	b3 03                	mov    bl,0x3
c0022a4e:	68 9a b1 02 c0       	push   0xc002b19a
c0022a53:	e8 69 fd fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022a58:	83 c4 10             	add    esp,0x10
c0022a5b:	f7 c6 04 00 00 00    	test   esi,0x4
c0022a61:	74 12                	je     c0022a75 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0022a63:	83 ec 0c             	sub    esp,0xc
c0022a66:	b3 14                	mov    bl,0x14
c0022a68:	68 ba b1 02 c0       	push   0xc002b1ba
c0022a6d:	e8 4f fd fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022a72:	83 c4 10             	add    esp,0x10
c0022a75:	f7 c6 08 00 00 00    	test   esi,0x8
c0022a7b:	74 12                	je     c0022a8f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0022a7d:	83 ec 0c             	sub    esp,0xc
c0022a80:	b3 03                	mov    bl,0x3
c0022a82:	68 9a b1 02 c0       	push   0xc002b19a
c0022a87:	e8 35 fd fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022a8c:	83 c4 10             	add    esp,0x10
c0022a8f:	f7 c6 10 00 00 00    	test   esi,0x10
c0022a95:	74 12                	je     c0022aa9 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0022a97:	83 ec 0c             	sub    esp,0xc
c0022a9a:	b3 15                	mov    bl,0x15
c0022a9c:	68 d2 b1 02 c0       	push   0xc002b1d2
c0022aa1:	e8 1b fd fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022aa6:	83 c4 10             	add    esp,0x10
c0022aa9:	f7 c6 20 00 00 00    	test   esi,0x20
c0022aaf:	74 12                	je     c0022ac3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0022ab1:	83 ec 0c             	sub    esp,0xc
c0022ab4:	b3 03                	mov    bl,0x3
c0022ab6:	68 9a b1 02 c0       	push   0xc002b19a
c0022abb:	e8 01 fd fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022ac0:	83 c4 10             	add    esp,0x10
c0022ac3:	f7 c6 40 00 00 00    	test   esi,0x40
c0022ac9:	74 12                	je     c0022add <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0022acb:	83 ec 0c             	sub    esp,0xc
c0022ace:	b3 16                	mov    bl,0x16
c0022ad0:	68 ec b1 02 c0       	push   0xc002b1ec
c0022ad5:	e8 e7 fc fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022ada:	83 c4 10             	add    esp,0x10
c0022add:	89 f0                	mov    eax,esi
c0022adf:	84 c0                	test   al,al
c0022ae1:	79 42                	jns    c0022b25 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022ae3:	83 ec 0c             	sub    esp,0xc
c0022ae6:	b3 0d                	mov    bl,0xd
c0022ae8:	68 0d b2 02 c0       	push   0xc002b20d
c0022aed:	e8 cf fc fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022af2:	83 c4 10             	add    esp,0x10
c0022af5:	eb 2e                	jmp    c0022b25 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022af7:	3c 03                	cmp    al,0x3
c0022af9:	75 14                	jne    c0022b0f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0022afb:	83 ec 0c             	sub    esp,0xc
c0022afe:	b3 17                	mov    bl,0x17
c0022b00:	68 21 b2 02 c0       	push   0xc002b221
c0022b05:	e8 b7 fc fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022b0a:	83 c4 10             	add    esp,0x10
c0022b0d:	eb 16                	jmp    c0022b25 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b0f:	3c 04                	cmp    al,0x4
c0022b11:	75 12                	jne    c0022b25 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0022b13:	83 ec 0c             	sub    esp,0xc
c0022b16:	b3 08                	mov    bl,0x8
c0022b18:	68 37 b2 02 c0       	push   0xc002b237
c0022b1d:	e8 9f fc fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022b22:	83 c4 10             	add    esp,0x10
c0022b25:	50                   	push   eax
c0022b26:	50                   	push   eax
c0022b27:	0f b6 c3             	movzx  eax,bl
c0022b2a:	50                   	push   eax
c0022b2b:	68 4f b2 02 c0       	push   0xc002b24f
c0022b30:	e8 8c fc fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022b35:	83 c4 10             	add    esp,0x10
c0022b38:	83 c4 1c             	add    esp,0x1c
c0022b3b:	88 d8                	mov    al,bl
c0022b3d:	5b                   	pop    ebx
c0022b3e:	5e                   	pop    esi
c0022b3f:	5f                   	pop    edi
c0022b40:	5d                   	pop    ebp
c0022b41:	c3                   	ret    

c0022b42 <IDE::polling(unsigned char, unsigned int)>:
c0022b42:	57                   	push   edi
c0022b43:	56                   	push   esi
c0022b44:	53                   	push   ebx
c0022b45:	bb 04 00 00 00       	mov    ebx,0x4
c0022b4a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022b4e:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022b53:	52                   	push   edx
c0022b54:	6a 0c                	push   0xc
c0022b56:	56                   	push   esi
c0022b57:	57                   	push   edi
c0022b58:	e8 f9 f4 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022b5d:	83 c4 10             	add    esp,0x10
c0022b60:	4b                   	dec    ebx
c0022b61:	75 f0                	jne    c0022b53 <IDE::polling(unsigned char, unsigned int)+0x11>
c0022b63:	bb a0 86 01 00       	mov    ebx,0x186a0
c0022b68:	50                   	push   eax
c0022b69:	6a 0c                	push   0xc
c0022b6b:	56                   	push   esi
c0022b6c:	57                   	push   edi
c0022b6d:	e8 e4 f4 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022b72:	83 c4 10             	add    esp,0x10
c0022b75:	a8 01                	test   al,0x1
c0022b77:	74 12                	je     c0022b8b <IDE::polling(unsigned char, unsigned int)+0x49>
c0022b79:	83 ec 0c             	sub    esp,0xc
c0022b7c:	68 69 b2 02 c0       	push   0xc002b269
c0022b81:	e8 3b fc fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022b86:	83 c4 10             	add    esp,0x10
c0022b89:	eb 17                	jmp    c0022ba2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b8b:	a8 20                	test   al,0x20
c0022b8d:	75 0f                	jne    c0022b9e <IDE::polling(unsigned char, unsigned int)+0x5c>
c0022b8f:	4b                   	dec    ebx
c0022b90:	74 10                	je     c0022ba2 <IDE::polling(unsigned char, unsigned int)+0x60>
c0022b92:	84 c0                	test   al,al
c0022b94:	78 d2                	js     c0022b68 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b96:	a8 08                	test   al,0x8
c0022b98:	74 ce                	je     c0022b68 <IDE::polling(unsigned char, unsigned int)+0x26>
c0022b9a:	31 c0                	xor    eax,eax
c0022b9c:	eb 06                	jmp    c0022ba4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022b9e:	b0 01                	mov    al,0x1
c0022ba0:	eb 02                	jmp    c0022ba4 <IDE::polling(unsigned char, unsigned int)+0x62>
c0022ba2:	b0 02                	mov    al,0x2
c0022ba4:	5b                   	pop    ebx
c0022ba5:	5e                   	pop    esi
c0022ba6:	5f                   	pop    edi
c0022ba7:	c3                   	ret    

c0022ba8 <SATABus::close(int, int, void*)>:
c0022ba8:	31 c0                	xor    eax,eax
c0022baa:	c3                   	ret    
c0022bab:	90                   	nop

c0022bac <SATABus::detect()>:
c0022bac:	c3                   	ret    
c0022bad:	90                   	nop

c0022bae <SATABus::SATABus()>:
c0022bae:	83 ec 0c             	sub    esp,0xc
c0022bb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bb5:	83 ec 08             	sub    esp,0x8
c0022bb8:	68 ac b2 02 c0       	push   0xc002b2ac
c0022bbd:	50                   	push   eax
c0022bbe:	e8 79 13 ff ff       	call   c0013f3c <HardDiskController::HardDiskController(char const*)>
c0022bc3:	83 c4 10             	add    esp,0x10
c0022bc6:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c0022bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bcf:	89 10                	mov    DWORD PTR [eax],edx
c0022bd1:	83 ec 0c             	sub    esp,0xc
c0022bd4:	6a 50                	push   0x50
c0022bd6:	e8 d5 cf fe ff       	call   c000fbb0 <Phys::allocateContiguousPages(int)>
c0022bdb:	83 c4 10             	add    esp,0x10
c0022bde:	89 c2                	mov    edx,eax
c0022be0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0022bea:	83 ec 0c             	sub    esp,0xc
c0022bed:	6a 50                	push   0x50
c0022bef:	e8 dd eb fe ff       	call   c00117d1 <Virt::allocateKernelVirtualPages(int)>
c0022bf4:	83 c4 10             	add    esp,0x10
c0022bf7:	89 c2                	mov    edx,eax
c0022bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bfd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0022c03:	e8 59 ed fe ff       	call   c0011961 <Virt::getAKernelVAS()>
c0022c08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022c0c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0022c12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0022c16:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0022c1c:	83 ec 0c             	sub    esp,0xc
c0022c1f:	6a 03                	push   0x3
c0022c21:	6a 50                	push   0x50
c0022c23:	51                   	push   ecx
c0022c24:	52                   	push   edx
c0022c25:	50                   	push   eax
c0022c26:	e8 65 f5 fe ff       	call   c0012190 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0022c2b:	83 c4 20             	add    esp,0x20
c0022c2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c32:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0022c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c3c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0022c42:	83 ec 04             	sub    esp,0x4
c0022c45:	52                   	push   edx
c0022c46:	50                   	push   eax
c0022c47:	68 d0 b2 02 c0       	push   0xc002b2d0
c0022c4c:	e8 70 fb fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022c51:	83 c4 10             	add    esp,0x10
c0022c54:	90                   	nop
c0022c55:	83 c4 0c             	add    esp,0xc
c0022c58:	c3                   	ret    
c0022c59:	90                   	nop

c0022c5a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0022c5a:	83 ec 0c             	sub    esp,0xc
c0022c5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0022c61:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0022c64:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0022c67:	09 c2                	or     edx,eax
c0022c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022c6d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0022c73:	8b 08                	mov    ecx,DWORD PTR [eax]
c0022c75:	31 c0                	xor    eax,eax
c0022c77:	c1 e9 08             	shr    ecx,0x8
c0022c7a:	83 e1 0f             	and    ecx,0xf
c0022c7d:	39 c8                	cmp    eax,ecx
c0022c7f:	74 0a                	je     c0022c8b <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0022c81:	f6 c2 01             	test   dl,0x1
c0022c84:	74 18                	je     c0022c9e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0022c86:	d1 ea                	shr    edx,1
c0022c88:	40                   	inc    eax
c0022c89:	eb f2                	jmp    c0022c7d <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0022c8b:	83 ec 0c             	sub    esp,0xc
c0022c8e:	68 f4 b2 02 c0       	push   0xc002b2f4
c0022c93:	e8 43 6c ff ff       	call   c00198db <Krnl::panic(char const*)>
c0022c98:	83 c4 10             	add    esp,0x10
c0022c9b:	83 c8 ff             	or     eax,0xffffffff
c0022c9e:	83 c4 0c             	add    esp,0xc
c0022ca1:	c3                   	ret    

c0022ca2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0022ca2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0022ca6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0022ca9:	89 c2                	mov    edx,eax
c0022cab:	c1 ea 08             	shr    edx,0x8
c0022cae:	83 e2 0f             	and    edx,0xf
c0022cb1:	fe ca                	dec    dl
c0022cb3:	75 31                	jne    c0022ce6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022cb5:	83 e0 0f             	and    eax,0xf
c0022cb8:	3c 03                	cmp    al,0x3
c0022cba:	75 2a                	jne    c0022ce6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0022cbc:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0022cbf:	b8 02 00 00 00       	mov    eax,0x2
c0022cc4:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0022cca:	74 1c                	je     c0022ce8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022ccc:	b8 04 00 00 00       	mov    eax,0x4
c0022cd1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0022cd7:	74 0f                	je     c0022ce8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0022cd9:	31 c0                	xor    eax,eax
c0022cdb:	83 fa 03             	cmp    edx,0x3
c0022cde:	0f 94 c0             	sete   al
c0022ce1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0022ce5:	c3                   	ret    
c0022ce6:	31 c0                	xor    eax,eax
c0022ce8:	c3                   	ret    
c0022ce9:	90                   	nop

c0022cea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0022cea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022cee:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cf1:	0f ba e2 0f          	bt     edx,0xf
c0022cf5:	72 f7                	jb     c0022cee <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0022cf7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022cfa:	83 ca 10             	or     edx,0x10
c0022cfd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d00:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d03:	83 ca 01             	or     edx,0x1
c0022d06:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d09:	c3                   	ret    

c0022d0a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0022d0a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022d0e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d11:	83 e2 fe             	and    edx,0xfffffffe
c0022d14:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d17:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d1a:	83 e2 ef             	and    edx,0xffffffef
c0022d1d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0022d20:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d23:	0f ba e2 0e          	bt     edx,0xe
c0022d27:	72 f7                	jb     c0022d20 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022d29:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0022d2c:	0f ba e2 0f          	bt     edx,0xf
c0022d30:	72 ee                	jb     c0022d20 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0022d32:	c3                   	ret    
c0022d33:	90                   	nop

c0022d34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0022d34:	55                   	push   ebp
c0022d35:	57                   	push   edi
c0022d36:	56                   	push   esi
c0022d37:	53                   	push   ebx
c0022d38:	83 ec 1c             	sub    esp,0x1c
c0022d3b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0022d3f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022d43:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0022d47:	53                   	push   ebx
c0022d48:	89 fd                	mov    ebp,edi
c0022d4a:	56                   	push   esi
c0022d4b:	c1 e5 0a             	shl    ebp,0xa
c0022d4e:	e8 b7 ff ff ff       	call   c0022d0a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0022d53:	83 ec 0c             	sub    esp,0xc
c0022d56:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0022d5c:	01 e8                	add    eax,ebp
c0022d5e:	89 03                	mov    DWORD PTR [ebx],eax
c0022d60:	8b 03                	mov    eax,DWORD PTR [ebx]
c0022d62:	68 00 04 00 00       	push   0x400
c0022d67:	6a 00                	push   0x0
c0022d69:	50                   	push   eax
c0022d6a:	e8 1c d9 fd ff       	call   c000068b <memset>
c0022d6f:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0022d75:	89 fa                	mov    edx,edi
c0022d77:	01 e8                	add    eax,ebp
c0022d79:	c1 e7 0d             	shl    edi,0xd
c0022d7c:	89 03                	mov    DWORD PTR [ebx],eax
c0022d7e:	c1 e2 08             	shl    edx,0x8
c0022d81:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022d88:	81 c2 00 80 00 00    	add    edx,0x8000
c0022d8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0022d92:	89 d0                	mov    eax,edx
c0022d94:	83 c4 1c             	add    esp,0x1c
c0022d97:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022d9d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022da0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0022da3:	68 00 01 00 00       	push   0x100
c0022da8:	6a 00                	push   0x0
c0022daa:	50                   	push   eax
c0022dab:	e8 db d8 fd ff       	call   c000068b <memset>
c0022db0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0022db4:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0022dba:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0022dc0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022dc4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0022dc7:	83 c4 10             	add    esp,0x10
c0022dca:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022dd1:	31 ff                	xor    edi,edi
c0022dd3:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0022dd9:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0022ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022de3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0022de9:	83 c5 20             	add    ebp,0x20
c0022dec:	01 f8                	add    eax,edi
c0022dee:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022df1:	52                   	push   edx
c0022df2:	68 00 01 00 00       	push   0x100
c0022df7:	6a 00                	push   0x0
c0022df9:	50                   	push   eax
c0022dfa:	e8 8c d8 fd ff       	call   c000068b <memset>
c0022dff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022e03:	83 c4 10             	add    esp,0x10
c0022e06:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0022e0c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0022e13:	01 f8                	add    eax,edi
c0022e15:	81 c7 00 01 00 00    	add    edi,0x100
c0022e1b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0022e1e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0022e24:	75 b3                	jne    c0022dd9 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0022e26:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0022e2a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0022e2e:	83 c4 1c             	add    esp,0x1c
c0022e31:	5b                   	pop    ebx
c0022e32:	5e                   	pop    esi
c0022e33:	5f                   	pop    edi
c0022e34:	5d                   	pop    ebp
c0022e35:	e9 b0 fe ff ff       	jmp    c0022cea <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0022e3a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0022e3a:	55                   	push   ebp
c0022e3b:	57                   	push   edi
c0022e3c:	56                   	push   esi
c0022e3d:	53                   	push   ebx
c0022e3e:	31 db                	xor    ebx,ebx
c0022e40:	83 ec 0c             	sub    esp,0xc
c0022e43:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0022e47:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0022e4b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0022e4e:	f7 c7 01 00 00 00    	test   edi,0x1
c0022e54:	0f 84 94 00 00 00    	je     c0022eee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022e5a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022e5e:	89 d8                	mov    eax,ebx
c0022e60:	c1 e0 07             	shl    eax,0x7
c0022e63:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0022e6a:	55                   	push   ebp
c0022e6b:	56                   	push   esi
c0022e6c:	e8 31 fe ff ff       	call   c0022ca2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0022e71:	59                   	pop    ecx
c0022e72:	83 f8 01             	cmp    eax,0x1
c0022e75:	5a                   	pop    edx
c0022e76:	75 47                	jne    c0022ebf <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x85>
c0022e78:	51                   	push   ecx
c0022e79:	51                   	push   ecx
c0022e7a:	53                   	push   ebx
c0022e7b:	68 19 b3 02 c0       	push   0xc002b319
c0022e80:	e8 3c f9 fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022e85:	83 c4 0c             	add    esp,0xc
c0022e88:	53                   	push   ebx
c0022e89:	55                   	push   ebp
c0022e8a:	56                   	push   esi
c0022e8b:	e8 a4 fe ff ff       	call   c0022d34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022e90:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0022e97:	e8 38 c6 fe ff       	call   c000f4d4 <malloc>
c0022e9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0022e9f:	89 c5                	mov    ebp,eax
c0022ea1:	e8 de 0c 00 00       	call   c0023b84 <SATA::SATA()>
c0022ea6:	58                   	pop    eax
c0022ea7:	5a                   	pop    edx
c0022ea8:	55                   	push   ebp
c0022ea9:	56                   	push   esi
c0022eaa:	e8 01 0d ff ff       	call   c0013bb0 <Device::addChild(Device*)>
c0022eaf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022eb2:	56                   	push   esi
c0022eb3:	6a 00                	push   0x0
c0022eb5:	53                   	push   ebx
c0022eb6:	55                   	push   ebp
c0022eb7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0022eba:	83 c4 20             	add    esp,0x20
c0022ebd:	eb 2f                	jmp    c0022eee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb4>
c0022ebf:	83 f8 04             	cmp    eax,0x4
c0022ec2:	75 1a                	jne    c0022ede <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa4>
c0022ec4:	52                   	push   edx
c0022ec5:	52                   	push   edx
c0022ec6:	53                   	push   ebx
c0022ec7:	68 30 b3 02 c0       	push   0xc002b330
c0022ecc:	e8 f0 f8 fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022ed1:	83 c4 0c             	add    esp,0xc
c0022ed4:	53                   	push   ebx
c0022ed5:	55                   	push   ebp
c0022ed6:	56                   	push   esi
c0022ed7:	e8 58 fe ff ff       	call   c0022d34 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0022edc:	eb 0d                	jmp    c0022eeb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xb1>
c0022ede:	50                   	push   eax
c0022edf:	50                   	push   eax
c0022ee0:	53                   	push   ebx
c0022ee1:	68 49 b3 02 c0       	push   0xc002b349
c0022ee6:	e8 d6 f8 fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0022eeb:	83 c4 10             	add    esp,0x10
c0022eee:	d1 ef                	shr    edi,1
c0022ef0:	43                   	inc    ebx
c0022ef1:	83 fb 20             	cmp    ebx,0x20
c0022ef4:	0f 85 54 ff ff ff    	jne    c0022e4e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0022efa:	83 c4 0c             	add    esp,0xc
c0022efd:	5b                   	pop    ebx
c0022efe:	5e                   	pop    esi
c0022eff:	5f                   	pop    edi
c0022f00:	5d                   	pop    ebp
c0022f01:	c3                   	ret    

c0022f02 <SATABus::open(int, int, void*)>:
c0022f02:	83 ec 14             	sub    esp,0x14
c0022f05:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022f09:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0022f0f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0022f15:	52                   	push   edx
c0022f16:	50                   	push   eax
c0022f17:	e8 1e ff ff ff       	call   c0022e3a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0022f1c:	31 c0                	xor    eax,eax
c0022f1e:	83 c4 1c             	add    esp,0x1c
c0022f21:	c3                   	ret    

c0022f22 <ATA::close(int, int, void*)>:
c0022f22:	83 ec 0c             	sub    esp,0xc
c0022f25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f29:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0022f2f:	85 c0                	test   eax,eax
c0022f31:	74 0c                	je     c0022f3f <ATA::close(int, int, void*)+0x1d>
c0022f33:	83 ec 0c             	sub    esp,0xc
c0022f36:	8b 10                	mov    edx,DWORD PTR [eax]
c0022f38:	50                   	push   eax
c0022f39:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0022f3c:	83 c4 10             	add    esp,0x10
c0022f3f:	31 c0                	xor    eax,eax
c0022f41:	83 c4 0c             	add    esp,0xc
c0022f44:	c3                   	ret    
c0022f45:	90                   	nop

c0022f46 <ATA::powerSaving(PowerSavingLevel)>:
c0022f46:	c3                   	ret    
c0022f47:	90                   	nop

c0022f48 <ATA::ATA()>:
c0022f48:	83 ec 0c             	sub    esp,0xc
c0022f4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f4f:	83 ec 04             	sub    esp,0x4
c0022f52:	68 00 02 00 00       	push   0x200
c0022f57:	68 5c b4 02 c0       	push   0xc002b45c
c0022f5c:	50                   	push   eax
c0022f5d:	e8 5e 10 ff ff       	call   c0013fc0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0022f62:	83 c4 10             	add    esp,0x10
c0022f65:	ba a8 b3 02 c0       	mov    edx,0xc002b3a8
c0022f6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022f6e:	89 10                	mov    DWORD PTR [eax],edx
c0022f70:	90                   	nop
c0022f71:	83 c4 0c             	add    esp,0xc
c0022f74:	c3                   	ret    
c0022f75:	90                   	nop

c0022f76 <ATA::flush(bool)>:
c0022f76:	53                   	push   ebx
c0022f77:	83 ec 08             	sub    esp,0x8
c0022f7a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0022f7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022f83:	19 c0                	sbb    eax,eax
c0022f85:	83 e0 fd             	and    eax,0xfffffffd
c0022f88:	05 ea 00 00 00       	add    eax,0xea
c0022f8d:	50                   	push   eax
c0022f8e:	6a 07                	push   0x7
c0022f90:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022f97:	50                   	push   eax
c0022f98:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022f9e:	e8 f3 ef ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022fa3:	83 c4 0c             	add    esp,0xc
c0022fa6:	6a 00                	push   0x0
c0022fa8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0022faf:	50                   	push   eax
c0022fb0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0022fb6:	e8 87 fb ff ff       	call   c0022b42 <IDE::polling(unsigned char, unsigned int)>
c0022fbb:	83 c4 18             	add    esp,0x18
c0022fbe:	5b                   	pop    ebx
c0022fbf:	c3                   	ret    

c0022fc0 <ATA::readyForCommand()>:
c0022fc0:	56                   	push   esi
c0022fc1:	53                   	push   ebx
c0022fc2:	31 db                	xor    ebx,ebx
c0022fc4:	50                   	push   eax
c0022fc5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022fc9:	50                   	push   eax
c0022fca:	6a 0c                	push   0xc
c0022fcc:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0022fd3:	50                   	push   eax
c0022fd4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0022fda:	e8 77 f0 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c0022fdf:	83 c4 10             	add    esp,0x10
c0022fe2:	a8 88                	test   al,0x88
c0022fe4:	74 23                	je     c0023009 <ATA::readyForCommand()+0x49>
c0022fe6:	43                   	inc    ebx
c0022fe7:	83 fb 63             	cmp    ebx,0x63
c0022fea:	7e dd                	jle    c0022fc9 <ATA::readyForCommand()+0x9>
c0022fec:	51                   	push   ecx
c0022fed:	51                   	push   ecx
c0022fee:	6a 00                	push   0x0
c0022ff0:	68 40 42 0f 00       	push   0xf4240
c0022ff5:	e8 c0 a2 ff ff       	call   c001d2ba <nanoSleep(unsigned long long)>
c0022ffa:	83 c4 10             	add    esp,0x10
c0022ffd:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023003:	75 c4                	jne    c0022fc9 <ATA::readyForCommand()+0x9>
c0023005:	31 c0                	xor    eax,eax
c0023007:	eb 02                	jmp    c002300b <ATA::readyForCommand()+0x4b>
c0023009:	b0 01                	mov    al,0x1
c002300b:	5a                   	pop    edx
c002300c:	5b                   	pop    ebx
c002300d:	5e                   	pop    esi
c002300e:	c3                   	ret    
c002300f:	90                   	nop

c0023010 <ATA::access(unsigned long long, int, void*, bool)>:
c0023010:	55                   	push   ebp
c0023011:	57                   	push   edi
c0023012:	56                   	push   esi
c0023013:	53                   	push   ebx
c0023014:	83 ec 2c             	sub    esp,0x2c
c0023017:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002301b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002301f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023023:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023027:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002302b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002302f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023033:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023039:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002303d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023043:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023047:	c1 e0 06             	shl    eax,0x6
c002304a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023052:	74 5d                	je     c00230b1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023054:	89 fa                	mov    edx,edi
c0023056:	89 f0                	mov    eax,esi
c0023058:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002305c:	c1 ea 1c             	shr    edx,0x1c
c002305f:	89 d1                	mov    ecx,edx
c0023061:	09 c1                	or     ecx,eax
c0023063:	74 25                	je     c002308a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023065:	31 ed                	xor    ebp,ebp
c0023067:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002306e:	89 fa                	mov    edx,edi
c0023070:	89 f0                	mov    eax,esi
c0023072:	0f ad d0             	shrd   eax,edx,cl
c0023075:	d3 ea                	shr    edx,cl
c0023077:	f6 c1 20             	test   cl,0x20
c002307a:	74 02                	je     c002307e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002307c:	89 d0                	mov    eax,edx
c002307e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023082:	45                   	inc    ebp
c0023083:	83 fd 06             	cmp    ebp,0x6
c0023086:	75 df                	jne    c0023067 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023088:	eb 76                	jmp    c0023100 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c002308a:	89 f0                	mov    eax,esi
c002308c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023091:	89 fa                	mov    edx,edi
c0023093:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c002309a:	0f ac d0 10          	shrd   eax,edx,0x10
c002309e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00230a3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00230a7:	c1 ee 18             	shr    esi,0x18
c00230aa:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00230af:	eb 56                	jmp    c0023107 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00230b1:	6a 00                	push   0x0
c00230b3:	6a 3f                	push   0x3f
c00230b5:	57                   	push   edi
c00230b6:	56                   	push   esi
c00230b7:	e8 30 24 00 00       	call   c00254ec <__umoddi3>
c00230bc:	83 c4 10             	add    esp,0x10
c00230bf:	40                   	inc    eax
c00230c0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00230c4:	6a 00                	push   0x0
c00230c6:	68 f0 03 00 00       	push   0x3f0
c00230cb:	57                   	push   edi
c00230cc:	56                   	push   esi
c00230cd:	e8 1a 23 00 00       	call   c00253ec <__udivdi3>
c00230d2:	83 c4 10             	add    esp,0x10
c00230d5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00230da:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00230e1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00230e6:	6a 00                	push   0x0
c00230e8:	6a 3f                	push   0x3f
c00230ea:	57                   	push   edi
c00230eb:	56                   	push   esi
c00230ec:	e8 fb 22 00 00       	call   c00253ec <__udivdi3>
c00230f1:	83 c4 10             	add    esp,0x10
c00230f4:	89 c6                	mov    esi,eax
c00230f6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c00230fb:	83 e6 0f             	and    esi,0xf
c00230fe:	eb 07                	jmp    c0023107 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023100:	31 f6                	xor    esi,esi
c0023102:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023107:	bf 01 00 00 00       	mov    edi,0x1
c002310c:	50                   	push   eax
c002310d:	6a 00                	push   0x0
c002310f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023116:	50                   	push   eax
c0023117:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002311b:	e8 82 f0 ff ff       	call   c00221a2 <IDE::enableIRQs(unsigned char, bool)>
c0023120:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023123:	e8 98 fe ff ff       	call   c0022fc0 <ATA::readyForCommand()>
c0023128:	83 c4 10             	add    esp,0x10
c002312b:	84 c0                	test   al,al
c002312d:	0f 84 50 02 00 00    	je     c0023383 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c0023133:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023139:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002313f:	c1 e0 04             	shl    eax,0x4
c0023142:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023149:	09 c6                	or     esi,eax
c002314b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023150:	75 05                	jne    c0023157 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023152:	83 ce a0             	or     esi,0xffffffa0
c0023155:	eb 03                	jmp    c002315a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023157:	83 ce e0             	or     esi,0xffffffe0
c002315a:	89 f0                	mov    eax,esi
c002315c:	0f b6 f0             	movzx  esi,al
c002315f:	56                   	push   esi
c0023160:	6a 06                	push   0x6
c0023162:	51                   	push   ecx
c0023163:	52                   	push   edx
c0023164:	e8 2d ee ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023169:	83 c4 10             	add    esp,0x10
c002316c:	6a 00                	push   0x0
c002316e:	6a 01                	push   0x1
c0023170:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023177:	50                   	push   eax
c0023178:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002317e:	e8 13 ee ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023183:	83 c4 10             	add    esp,0x10
c0023186:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c002318b:	75 6e                	jne    c00231fb <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c002318d:	6a 00                	push   0x0
c002318f:	6a 08                	push   0x8
c0023191:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023198:	50                   	push   eax
c0023199:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002319f:	e8 f2 ed ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231a4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00231a9:	50                   	push   eax
c00231aa:	6a 09                	push   0x9
c00231ac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231b3:	50                   	push   eax
c00231b4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231ba:	e8 d7 ed ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231bf:	83 c4 20             	add    esp,0x20
c00231c2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00231c7:	50                   	push   eax
c00231c8:	6a 0a                	push   0xa
c00231ca:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231d1:	50                   	push   eax
c00231d2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231d8:	e8 b9 ed ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231dd:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c00231e2:	50                   	push   eax
c00231e3:	6a 0b                	push   0xb
c00231e5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00231ec:	50                   	push   eax
c00231ed:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00231f3:	e8 9e ed ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231f8:	83 c4 20             	add    esp,0x20
c00231fb:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023200:	50                   	push   eax
c0023201:	6a 02                	push   0x2
c0023203:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002320a:	50                   	push   eax
c002320b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023211:	e8 80 ed ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023216:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002321b:	50                   	push   eax
c002321c:	6a 03                	push   0x3
c002321e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023225:	50                   	push   eax
c0023226:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002322c:	e8 65 ed ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023231:	83 c4 20             	add    esp,0x20
c0023234:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023239:	50                   	push   eax
c002323a:	6a 04                	push   0x4
c002323c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023243:	50                   	push   eax
c0023244:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002324a:	e8 47 ed ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002324f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023254:	50                   	push   eax
c0023255:	6a 05                	push   0x5
c0023257:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002325e:	50                   	push   eax
c002325f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023265:	e8 2c ed ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002326a:	83 c4 20             	add    esp,0x20
c002326d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023272:	0f 94 c0             	sete   al
c0023275:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002327a:	74 09                	je     c0023285 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002327c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023283:	eb 07                	jmp    c002328c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023285:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c002328c:	0f b6 c0             	movzx  eax,al
c002328f:	50                   	push   eax
c0023290:	6a 07                	push   0x7
c0023292:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023299:	50                   	push   eax
c002329a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232a0:	e8 f1 ec ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232a5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00232a9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c00232ad:	83 c4 10             	add    esp,0x10
c00232b0:	85 f6                	test   esi,esi
c00232b2:	0f 84 ac 00 00 00    	je     c0023364 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c00232b8:	50                   	push   eax
c00232b9:	6a 01                	push   0x1
c00232bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00232c2:	50                   	push   eax
c00232c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232c9:	e8 74 f8 ff ff       	call   c0022b42 <IDE::polling(unsigned char, unsigned int)>
c00232ce:	83 c4 10             	add    esp,0x10
c00232d1:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00232d7:	84 c0                	test   al,al
c00232d9:	74 20                	je     c00232fb <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c00232db:	0f b6 f8             	movzx  edi,al
c00232de:	0f b6 d2             	movzx  edx,dl
c00232e1:	57                   	push   edi
c00232e2:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c00232e9:	50                   	push   eax
c00232ea:	52                   	push   edx
c00232eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00232f1:	e8 b6 f6 ff ff       	call   c00229ac <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00232f6:	e9 85 00 00 00       	jmp    c0023380 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c00232fb:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023300:	74 41                	je     c0023343 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c0023302:	31 c9                	xor    ecx,ecx
c0023304:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c0023308:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002330c:	50                   	push   eax
c002330d:	50                   	push   eax
c002330e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023315:	50                   	push   eax
c0023316:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002331c:	e8 63 ec ff ff       	call   c0021f84 <IDE::getBase(unsigned char)>
c0023321:	89 c2                	mov    edx,eax
c0023323:	89 e8                	mov    eax,ebp
c0023325:	66 ef                	out    dx,ax
c0023327:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c002332b:	83 c4 10             	add    esp,0x10
c002332e:	41                   	inc    ecx
c002332f:	81 f9 00 01 00 00    	cmp    ecx,0x100
c0023335:	75 cd                	jne    c0023304 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c0023337:	4e                   	dec    esi
c0023338:	81 c7 00 02 00 00    	add    edi,0x200
c002333e:	e9 6d ff ff ff       	jmp    c00232b0 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c0023343:	0f b6 d2             	movzx  edx,dl
c0023346:	51                   	push   ecx
c0023347:	51                   	push   ecx
c0023348:	52                   	push   edx
c0023349:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002334f:	e8 30 ec ff ff       	call   c0021f84 <IDE::getBase(unsigned char)>
c0023354:	b9 00 01 00 00       	mov    ecx,0x100
c0023359:	89 c2                	mov    edx,eax
c002335b:	fc                   	cld    
c002335c:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002335f:	83 c4 10             	add    esp,0x10
c0023362:	eb d3                	jmp    c0023337 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c0023364:	31 ff                	xor    edi,edi
c0023366:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002336b:	74 16                	je     c0023383 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c002336d:	50                   	push   eax
c002336e:	50                   	push   eax
c002336f:	31 c0                	xor    eax,eax
c0023371:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0023376:	0f 94 c0             	sete   al
c0023379:	50                   	push   eax
c002337a:	53                   	push   ebx
c002337b:	e8 f6 fb ff ff       	call   c0022f76 <ATA::flush(bool)>
c0023380:	83 c4 10             	add    esp,0x10
c0023383:	83 c4 2c             	add    esp,0x2c
c0023386:	89 f8                	mov    eax,edi
c0023388:	5b                   	pop    ebx
c0023389:	5e                   	pop    esi
c002338a:	5f                   	pop    edi
c002338b:	5d                   	pop    ebp
c002338c:	c3                   	ret    
c002338d:	90                   	nop

c002338e <ATA::read(unsigned long long, int, void*)>:
c002338e:	57                   	push   edi
c002338f:	b8 04 00 00 00       	mov    eax,0x4
c0023394:	56                   	push   esi
c0023395:	53                   	push   ebx
c0023396:	83 ec 10             	sub    esp,0x10
c0023399:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002339d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00233a1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00233a4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00233a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00233ac:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00233b2:	77 3b                	ja     c00233ef <ATA::read(unsigned long long, int, void*)+0x61>
c00233b4:	b8 06 00 00 00       	mov    eax,0x6
c00233b9:	85 d2                	test   edx,edx
c00233bb:	74 32                	je     c00233ef <ATA::read(unsigned long long, int, void*)+0x61>
c00233bd:	50                   	push   eax
c00233be:	50                   	push   eax
c00233bf:	6a 00                	push   0x0
c00233c1:	52                   	push   edx
c00233c2:	53                   	push   ebx
c00233c3:	57                   	push   edi
c00233c4:	56                   	push   esi
c00233c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00233c9:	e8 42 fc ff ff       	call   c0023010 <ATA::access(unsigned long long, int, void*, bool)>
c00233ce:	83 c4 20             	add    esp,0x20
c00233d1:	85 c0                	test   eax,eax
c00233d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00233d7:	75 11                	jne    c00233ea <ATA::read(unsigned long long, int, void*)+0x5c>
c00233d9:	01 1d c8 ec 02 c0    	add    DWORD PTR ds:0xc002ecc8,ebx
c00233df:	e8 ca d1 fe ff       	call   c00105ae <VgaText::updateDiskUsage()>
c00233e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00233e8:	eb 05                	jmp    c00233ef <ATA::read(unsigned long long, int, void*)+0x61>
c00233ea:	b8 01 00 00 00       	mov    eax,0x1
c00233ef:	83 c4 10             	add    esp,0x10
c00233f2:	5b                   	pop    ebx
c00233f3:	5e                   	pop    esi
c00233f4:	5f                   	pop    edi
c00233f5:	c3                   	ret    

c00233f6 <ATA::write(unsigned long long, int, void*)>:
c00233f6:	57                   	push   edi
c00233f7:	b8 04 00 00 00       	mov    eax,0x4
c00233fc:	56                   	push   esi
c00233fd:	53                   	push   ebx
c00233fe:	83 ec 10             	sub    esp,0x10
c0023401:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023405:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023409:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002340c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023410:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023414:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002341a:	77 3b                	ja     c0023457 <ATA::write(unsigned long long, int, void*)+0x61>
c002341c:	b8 06 00 00 00       	mov    eax,0x6
c0023421:	85 d2                	test   edx,edx
c0023423:	74 32                	je     c0023457 <ATA::write(unsigned long long, int, void*)+0x61>
c0023425:	50                   	push   eax
c0023426:	50                   	push   eax
c0023427:	6a 01                	push   0x1
c0023429:	52                   	push   edx
c002342a:	53                   	push   ebx
c002342b:	57                   	push   edi
c002342c:	56                   	push   esi
c002342d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023431:	e8 da fb ff ff       	call   c0023010 <ATA::access(unsigned long long, int, void*, bool)>
c0023436:	83 c4 20             	add    esp,0x20
c0023439:	85 c0                	test   eax,eax
c002343b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002343f:	75 11                	jne    c0023452 <ATA::write(unsigned long long, int, void*)+0x5c>
c0023441:	01 1d c4 ec 02 c0    	add    DWORD PTR ds:0xc002ecc4,ebx
c0023447:	e8 62 d1 fe ff       	call   c00105ae <VgaText::updateDiskUsage()>
c002344c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023450:	eb 05                	jmp    c0023457 <ATA::write(unsigned long long, int, void*)+0x61>
c0023452:	b8 01 00 00 00       	mov    eax,0x1
c0023457:	83 c4 10             	add    esp,0x10
c002345a:	5b                   	pop    ebx
c002345b:	5e                   	pop    esi
c002345c:	5f                   	pop    edi
c002345d:	c3                   	ret    

c002345e <ATA::detectCHS()>:
c002345e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023462:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0023468:	c1 e0 06             	shl    eax,0x6
c002346b:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0023471:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c002347b:	c7 44 24 04 8c b3 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b38c
c0023483:	e9 53 64 ff ff       	jmp    c00198db <Krnl::panic(char const*)>

c0023488 <ATA::open(int, int, void*)>:
c0023488:	53                   	push   ebx
c0023489:	83 ec 08             	sub    esp,0x8
c002348c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023490:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023494:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023498:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c002349e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00234a4:	c1 e0 06             	shl    eax,0x6
c00234a7:	01 d0                	add    eax,edx
c00234a9:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00234b0:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00234b6:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00234bd:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00234c7:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00234cd:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c00234d4:	75 0c                	jne    c00234e2 <ATA::open(int, int, void*)+0x5a>
c00234d6:	83 ec 0c             	sub    esp,0xc
c00234d9:	53                   	push   ebx
c00234da:	e8 7f ff ff ff       	call   c002345e <ATA::detectCHS()>
c00234df:	83 c4 10             	add    esp,0x10
c00234e2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00234e8:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00234ee:	c1 e0 06             	shl    eax,0x6
c00234f1:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00234f8:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023502:	d1 e8                	shr    eax,1
c0023504:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002350a:	6a 04                	push   0x4
c002350c:	6a 0c                	push   0xc
c002350e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023515:	50                   	push   eax
c0023516:	52                   	push   edx
c0023517:	e8 7a ea ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002351c:	90                   	nop
c002351d:	90                   	nop
c002351e:	6a 00                	push   0x0
c0023520:	6a 0c                	push   0xc
c0023522:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023529:	50                   	push   eax
c002352a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023530:	e8 61 ea ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023535:	83 c4 14             	add    esp,0x14
c0023538:	53                   	push   ebx
c0023539:	e8 ea 0a ff ff       	call   c0014028 <PhysicalDisk::startCache()>
c002353e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023541:	e8 0c 2b ff ff       	call   c0016052 <createPartitionsForDisk(PhysicalDisk*)>
c0023546:	31 c0                	xor    eax,eax
c0023548:	83 c4 18             	add    esp,0x18
c002354b:	5b                   	pop    ebx
c002354c:	c3                   	ret    
c002354d:	90                   	nop

c002354e <ATAPI::write(unsigned long long, int, void*)>:
c002354e:	b8 03 00 00 00       	mov    eax,0x3
c0023553:	c3                   	ret    

c0023554 <ATAPI::close(int, int, void*)>:
c0023554:	83 ec 0c             	sub    esp,0xc
c0023557:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002355b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023561:	85 c0                	test   eax,eax
c0023563:	74 0c                	je     c0023571 <ATAPI::close(int, int, void*)+0x1d>
c0023565:	83 ec 0c             	sub    esp,0xc
c0023568:	8b 10                	mov    edx,DWORD PTR [eax]
c002356a:	50                   	push   eax
c002356b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002356e:	83 c4 10             	add    esp,0x10
c0023571:	31 c0                	xor    eax,eax
c0023573:	83 c4 0c             	add    esp,0xc
c0023576:	c3                   	ret    
c0023577:	90                   	nop

c0023578 <ATAPI::ATAPI()>:
c0023578:	83 ec 0c             	sub    esp,0xc
c002357b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002357f:	83 ec 04             	sub    esp,0x4
c0023582:	68 00 08 00 00       	push   0x800
c0023587:	68 d4 b3 02 c0       	push   0xc002b3d4
c002358c:	50                   	push   eax
c002358d:	e8 2e 0a ff ff       	call   c0013fc0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023592:	83 c4 10             	add    esp,0x10
c0023595:	ba 14 b4 02 c0       	mov    edx,0xc002b414
c002359a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002359e:	89 10                	mov    DWORD PTR [eax],edx
c00235a0:	90                   	nop
c00235a1:	83 c4 0c             	add    esp,0xc
c00235a4:	c3                   	ret    
c00235a5:	90                   	nop

c00235a6 <ATAPI::readyForCommand()>:
c00235a6:	56                   	push   esi
c00235a7:	53                   	push   ebx
c00235a8:	31 db                	xor    ebx,ebx
c00235aa:	50                   	push   eax
c00235ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00235af:	50                   	push   eax
c00235b0:	6a 0c                	push   0xc
c00235b2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00235b9:	50                   	push   eax
c00235ba:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00235c0:	e8 91 ea ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c00235c5:	83 c4 10             	add    esp,0x10
c00235c8:	a8 88                	test   al,0x88
c00235ca:	74 23                	je     c00235ef <ATAPI::readyForCommand()+0x49>
c00235cc:	43                   	inc    ebx
c00235cd:	83 fb 63             	cmp    ebx,0x63
c00235d0:	7e dd                	jle    c00235af <ATAPI::readyForCommand()+0x9>
c00235d2:	51                   	push   ecx
c00235d3:	51                   	push   ecx
c00235d4:	6a 00                	push   0x0
c00235d6:	68 40 42 0f 00       	push   0xf4240
c00235db:	e8 da 9c ff ff       	call   c001d2ba <nanoSleep(unsigned long long)>
c00235e0:	83 c4 10             	add    esp,0x10
c00235e3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00235e9:	75 c4                	jne    c00235af <ATAPI::readyForCommand()+0x9>
c00235eb:	31 c0                	xor    eax,eax
c00235ed:	eb 02                	jmp    c00235f1 <ATAPI::readyForCommand()+0x4b>
c00235ef:	b0 01                	mov    al,0x1
c00235f1:	5a                   	pop    edx
c00235f2:	5b                   	pop    ebx
c00235f3:	5e                   	pop    esi
c00235f4:	c3                   	ret    
c00235f5:	90                   	nop

c00235f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00235f6:	55                   	push   ebp
c00235f7:	57                   	push   edi
c00235f8:	56                   	push   esi
c00235f9:	53                   	push   ebx
c00235fa:	83 ec 20             	sub    esp,0x20
c00235fd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0023601:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0023605:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0023609:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002360d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0023611:	6a 01                	push   0x1
c0023613:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002361a:	50                   	push   eax
c002361b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023621:	e8 7c eb ff ff       	call   c00221a2 <IDE::enableIRQs(unsigned char, bool)>
c0023626:	5e                   	pop    esi
c0023627:	58                   	pop    eax
c0023628:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002362f:	50                   	push   eax
c0023630:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023636:	e8 35 e9 ff ff       	call   c0021f70 <IDE::prepareInterrupt(unsigned char)>
c002363b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002363e:	e8 63 ff ff ff       	call   c00235a6 <ATAPI::readyForCommand()>
c0023643:	83 c4 10             	add    esp,0x10
c0023646:	84 c0                	test   al,al
c0023648:	75 0a                	jne    c0023654 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002364a:	bb 01 00 00 00       	mov    ebx,0x1
c002364f:	e9 57 02 00 00       	jmp    c00238ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023654:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002365a:	c1 e0 04             	shl    eax,0x4
c002365d:	0f b6 c0             	movzx  eax,al
c0023660:	50                   	push   eax
c0023661:	6a 06                	push   0x6
c0023663:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002366a:	50                   	push   eax
c002366b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023671:	e8 20 e9 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023676:	6a 00                	push   0x0
c0023678:	6a 01                	push   0x1
c002367a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023681:	50                   	push   eax
c0023682:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023688:	e8 09 e9 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002368d:	83 c4 20             	add    esp,0x20
c0023690:	0f b6 c3             	movzx  eax,bl
c0023693:	0f b6 df             	movzx  ebx,bh
c0023696:	50                   	push   eax
c0023697:	6a 04                	push   0x4
c0023699:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236a0:	50                   	push   eax
c00236a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236a7:	e8 ea e8 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236ac:	53                   	push   ebx
c00236ad:	6a 05                	push   0x5
c00236af:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236b6:	50                   	push   eax
c00236b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236bd:	e8 d4 e8 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236c2:	83 c4 20             	add    esp,0x20
c00236c5:	68 a0 00 00 00       	push   0xa0
c00236ca:	6a 07                	push   0x7
c00236cc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236d3:	50                   	push   eax
c00236d4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236da:	e8 b7 e8 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00236df:	83 c4 0c             	add    esp,0xc
c00236e2:	6a 01                	push   0x1
c00236e4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00236eb:	50                   	push   eax
c00236ec:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00236f2:	e8 4b f4 ff ff       	call   c0022b42 <IDE::polling(unsigned char, unsigned int)>
c00236f7:	83 c4 10             	add    esp,0x10
c00236fa:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0023700:	84 c0                	test   al,al
c0023702:	74 23                	je     c0023727 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0023704:	0f b6 d8             	movzx  ebx,al
c0023707:	0f b6 d2             	movzx  edx,dl
c002370a:	53                   	push   ebx
c002370b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0023712:	50                   	push   eax
c0023713:	52                   	push   edx
c0023714:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002371a:	e8 8d f2 ff ff       	call   c00229ac <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002371f:	83 c4 10             	add    esp,0x10
c0023722:	e9 84 01 00 00       	jmp    c00238ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0023727:	0f b6 d2             	movzx  edx,dl
c002372a:	53                   	push   ebx
c002372b:	53                   	push   ebx
c002372c:	52                   	push   edx
c002372d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023733:	e8 4c e8 ff ff       	call   c0021f84 <IDE::getBase(unsigned char)>
c0023738:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002373c:	b9 06 00 00 00       	mov    ecx,0x6
c0023741:	89 c2                	mov    edx,eax
c0023743:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0023746:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002374a:	83 c4 10             	add    esp,0x10
c002374d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023753:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002375a:	85 db                	test   ebx,ebx
c002375c:	0f 84 ec 00 00 00    	je     c002384e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0023762:	51                   	push   ecx
c0023763:	51                   	push   ecx
c0023764:	52                   	push   edx
c0023765:	50                   	push   eax
c0023766:	e8 99 e9 ff ff       	call   c0022104 <IDE::waitInterrupt(unsigned char)>
c002376b:	83 c4 10             	add    esp,0x10
c002376e:	84 c0                	test   al,al
c0023770:	0f 84 d4 fe ff ff    	je     c002364a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023776:	56                   	push   esi
c0023777:	56                   	push   esi
c0023778:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002377f:	50                   	push   eax
c0023780:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023786:	e8 e5 e7 ff ff       	call   c0021f70 <IDE::prepareInterrupt(unsigned char)>
c002378b:	83 c4 0c             	add    esp,0xc
c002378e:	6a 04                	push   0x4
c0023790:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023797:	50                   	push   eax
c0023798:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002379e:	e8 b3 e8 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c00237a3:	83 c4 0c             	add    esp,0xc
c00237a6:	89 c6                	mov    esi,eax
c00237a8:	6a 05                	push   0x5
c00237aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00237b1:	50                   	push   eax
c00237b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00237b8:	e8 99 e8 ff ff       	call   c0022056 <IDE::read(unsigned char, unsigned char)>
c00237bd:	89 f1                	mov    ecx,esi
c00237bf:	0f b6 c0             	movzx  eax,al
c00237c2:	0f b6 f1             	movzx  esi,cl
c00237c5:	c1 e0 08             	shl    eax,0x8
c00237c8:	09 c6                	or     esi,eax
c00237ca:	d1 fe                	sar    esi,1
c00237cc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00237d0:	83 c4 10             	add    esp,0x10
c00237d3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00237d8:	74 41                	je     c002381b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c00237da:	31 c9                	xor    ecx,ecx
c00237dc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00237e2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00237e9:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c00237ed:	75 0a                	jne    c00237f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c00237ef:	01 c9                	add    ecx,ecx
c00237f1:	01 cd                	add    ebp,ecx
c00237f3:	4b                   	dec    ebx
c00237f4:	e9 54 ff ff ff       	jmp    c002374d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00237f9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00237fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023802:	51                   	push   ecx
c0023803:	51                   	push   ecx
c0023804:	52                   	push   edx
c0023805:	50                   	push   eax
c0023806:	e8 79 e7 ff ff       	call   c0021f84 <IDE::getBase(unsigned char)>
c002380b:	89 c2                	mov    edx,eax
c002380d:	89 f0                	mov    eax,esi
c002380f:	66 ef                	out    dx,ax
c0023811:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023815:	83 c4 10             	add    esp,0x10
c0023818:	41                   	inc    ecx
c0023819:	eb c1                	jmp    c00237dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002381b:	31 f6                	xor    esi,esi
c002381d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0023823:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002382a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002382e:	75 06                	jne    c0023836 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0023830:	01 f6                	add    esi,esi
c0023832:	01 f5                	add    ebp,esi
c0023834:	eb bd                	jmp    c00237f3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0023836:	51                   	push   ecx
c0023837:	51                   	push   ecx
c0023838:	52                   	push   edx
c0023839:	50                   	push   eax
c002383a:	e8 45 e7 ff ff       	call   c0021f84 <IDE::getBase(unsigned char)>
c002383f:	89 c2                	mov    edx,eax
c0023841:	66 ed                	in     ax,dx
c0023843:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0023848:	83 c4 10             	add    esp,0x10
c002384b:	46                   	inc    esi
c002384c:	eb cf                	jmp    c002381d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002384e:	51                   	push   ecx
c002384f:	51                   	push   ecx
c0023850:	52                   	push   edx
c0023851:	50                   	push   eax
c0023852:	e8 ad e8 ff ff       	call   c0022104 <IDE::waitInterrupt(unsigned char)>
c0023857:	83 c4 10             	add    esp,0x10
c002385a:	84 c0                	test   al,al
c002385c:	0f 84 e8 fd ff ff    	je     c002364a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0023862:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023867:	52                   	push   edx
c0023868:	52                   	push   edx
c0023869:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023870:	50                   	push   eax
c0023871:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0023877:	e8 f4 e6 ff ff       	call   c0021f70 <IDE::prepareInterrupt(unsigned char)>
c002387c:	83 c4 10             	add    esp,0x10
c002387f:	50                   	push   eax
c0023880:	50                   	push   eax
c0023881:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0023888:	50                   	push   eax
c0023889:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002388f:	e8 f0 e6 ff ff       	call   c0021f84 <IDE::getBase(unsigned char)>
c0023894:	8d 50 07             	lea    edx,[eax+0x7]
c0023897:	ec                   	in     al,dx
c0023898:	83 c4 10             	add    esp,0x10
c002389b:	a8 88                	test   al,0x88
c002389d:	74 0a                	je     c00238a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002389f:	4b                   	dec    ebx
c00238a0:	75 dd                	jne    c002387f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00238a2:	bb 02 00 00 00       	mov    ebx,0x2
c00238a7:	eb 02                	jmp    c00238ab <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00238a9:	31 db                	xor    ebx,ebx
c00238ab:	83 c4 1c             	add    esp,0x1c
c00238ae:	89 d8                	mov    eax,ebx
c00238b0:	5b                   	pop    ebx
c00238b1:	5e                   	pop    esi
c00238b2:	5f                   	pop    edi
c00238b3:	5d                   	pop    ebp
c00238b4:	c3                   	ret    
c00238b5:	90                   	nop

c00238b6 <ATAPI::diskRemoved()>:
c00238b6:	83 ec 18             	sub    esp,0x18
c00238b9:	68 df b3 02 c0       	push   0xc002b3df
c00238be:	e8 fe ee fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00238c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00238c7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00238ce:	83 c4 1c             	add    esp,0x1c
c00238d1:	c3                   	ret    

c00238d2 <ATAPI::eject()>:
c00238d2:	57                   	push   edi
c00238d3:	b9 03 00 00 00       	mov    ecx,0x3
c00238d8:	53                   	push   ebx
c00238d9:	83 ec 14             	sub    esp,0x14
c00238dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00238e0:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00238e4:	fc                   	cld    
c00238e5:	31 c0                	xor    eax,eax
c00238e7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00238e9:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00238ee:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00238f3:	50                   	push   eax
c00238f4:	50                   	push   eax
c00238f5:	6a 00                	push   0x0
c00238f7:	6a 00                	push   0x0
c00238f9:	6a 00                	push   0x0
c00238fb:	6a 02                	push   0x2
c00238fd:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023901:	50                   	push   eax
c0023902:	53                   	push   ebx
c0023903:	e8 ee fc ff ff       	call   c00235f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023908:	83 c4 14             	add    esp,0x14
c002390b:	53                   	push   ebx
c002390c:	e8 a5 ff ff ff       	call   c00238b6 <ATAPI::diskRemoved()>
c0023911:	83 c4 24             	add    esp,0x24
c0023914:	5b                   	pop    ebx
c0023915:	5f                   	pop    edi
c0023916:	c3                   	ret    
c0023917:	90                   	nop

c0023918 <ATAPI::diskInserted()>:
c0023918:	53                   	push   ebx
c0023919:	83 ec 14             	sub    esp,0x14
c002391c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023920:	68 f5 b3 02 c0       	push   0xc002b3f5
c0023925:	e8 97 ee fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c002392a:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0023931:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023934:	e8 ef 06 ff ff       	call   c0014028 <PhysicalDisk::startCache()>
c0023939:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002393d:	83 c4 18             	add    esp,0x18
c0023940:	5b                   	pop    ebx
c0023941:	e9 0c 27 ff ff       	jmp    c0016052 <createPartitionsForDisk(PhysicalDisk*)>

c0023946 <ATAPI::detectMedia()>:
c0023946:	56                   	push   esi
c0023947:	53                   	push   ebx
c0023948:	83 ec 28             	sub    esp,0x28
c002394b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002394f:	6a 0c                	push   0xc
c0023951:	6a 00                	push   0x0
c0023953:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0023957:	56                   	push   esi
c0023958:	e8 2e cd fd ff       	call   c000068b <memset>
c002395d:	58                   	pop    eax
c002395e:	5a                   	pop    edx
c002395f:	6a 00                	push   0x0
c0023961:	6a 00                	push   0x0
c0023963:	6a 00                	push   0x0
c0023965:	6a 00                	push   0x0
c0023967:	56                   	push   esi
c0023968:	53                   	push   ebx
c0023969:	e8 88 fc ff ff       	call   c00235f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002396e:	83 c4 1c             	add    esp,0x1c
c0023971:	6a 0c                	push   0xc
c0023973:	6a 00                	push   0x0
c0023975:	56                   	push   esi
c0023976:	e8 10 cd fd ff       	call   c000068b <memset>
c002397b:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0023980:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0023985:	59                   	pop    ecx
c0023986:	58                   	pop    eax
c0023987:	6a 01                	push   0x1
c0023989:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002398d:	50                   	push   eax
c002398e:	6a 00                	push   0x0
c0023990:	6a 12                	push   0x12
c0023992:	56                   	push   esi
c0023993:	53                   	push   ebx
c0023994:	e8 5d fc ff ff       	call   c00235f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023999:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002399d:	83 c4 20             	add    esp,0x20
c00239a0:	83 e0 7f             	and    eax,0x7f
c00239a3:	3c 70                	cmp    al,0x70
c00239a5:	74 15                	je     c00239bc <ATAPI::detectMedia()+0x76>
c00239a7:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00239ae:	75 0c                	jne    c00239bc <ATAPI::detectMedia()+0x76>
c00239b0:	83 ec 0c             	sub    esp,0xc
c00239b3:	53                   	push   ebx
c00239b4:	e8 5f ff ff ff       	call   c0023918 <ATAPI::diskInserted()>
c00239b9:	83 c4 10             	add    esp,0x10
c00239bc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00239c0:	83 e0 0f             	and    eax,0xf
c00239c3:	3c 02                	cmp    al,0x2
c00239c5:	75 1b                	jne    c00239e2 <ATAPI::detectMedia()+0x9c>
c00239c7:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c00239cc:	75 2d                	jne    c00239fb <ATAPI::detectMedia()+0xb5>
c00239ce:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00239d5:	74 24                	je     c00239fb <ATAPI::detectMedia()+0xb5>
c00239d7:	83 ec 0c             	sub    esp,0xc
c00239da:	53                   	push   ebx
c00239db:	e8 d6 fe ff ff       	call   c00238b6 <ATAPI::diskRemoved()>
c00239e0:	eb 16                	jmp    c00239f8 <ATAPI::detectMedia()+0xb2>
c00239e2:	84 c0                	test   al,al
c00239e4:	75 15                	jne    c00239fb <ATAPI::detectMedia()+0xb5>
c00239e6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c00239ed:	75 0c                	jne    c00239fb <ATAPI::detectMedia()+0xb5>
c00239ef:	83 ec 0c             	sub    esp,0xc
c00239f2:	53                   	push   ebx
c00239f3:	e8 20 ff ff ff       	call   c0023918 <ATAPI::diskInserted()>
c00239f8:	83 c4 10             	add    esp,0x10
c00239fb:	83 c4 24             	add    esp,0x24
c00239fe:	5b                   	pop    ebx
c00239ff:	5e                   	pop    esi
c0023a00:	c3                   	ret    
c0023a01:	90                   	nop

c0023a02 <ATAPI::open(int, int, void*)>:
c0023a02:	53                   	push   ebx
c0023a03:	83 ec 08             	sub    esp,0x8
c0023a06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023a0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023a0e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a12:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0023a18:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0023a1e:	c1 e0 06             	shl    eax,0x6
c0023a21:	01 d0                	add    eax,edx
c0023a23:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0023a2a:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0023a30:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0023a37:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0023a41:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0023a47:	6a 04                	push   0x4
c0023a49:	6a 0c                	push   0xc
c0023a4b:	51                   	push   ecx
c0023a4c:	52                   	push   edx
c0023a4d:	e8 44 e5 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a52:	90                   	nop
c0023a53:	90                   	nop
c0023a54:	6a 00                	push   0x0
c0023a56:	6a 0c                	push   0xc
c0023a58:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023a5f:	50                   	push   eax
c0023a60:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023a66:	e8 2b e5 ff ff       	call   c0021f96 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a6b:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0023a72:	83 c4 14             	add    esp,0x14
c0023a75:	53                   	push   ebx
c0023a76:	e8 cb fe ff ff       	call   c0023946 <ATAPI::detectMedia()>
c0023a7b:	31 c0                	xor    eax,eax
c0023a7d:	83 c4 18             	add    esp,0x18
c0023a80:	5b                   	pop    ebx
c0023a81:	c3                   	ret    

c0023a82 <ATAPI::read(unsigned long long, int, void*)>:
c0023a82:	55                   	push   ebp
c0023a83:	57                   	push   edi
c0023a84:	56                   	push   esi
c0023a85:	53                   	push   ebx
c0023a86:	83 ec 1c             	sub    esp,0x1c
c0023a89:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023a8d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023a91:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0023a95:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023a9c:	74 41                	je     c0023adf <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0023a9e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0023aa2:	b9 03 00 00 00       	mov    ecx,0x3
c0023aa7:	fc                   	cld    
c0023aa8:	31 c0                	xor    eax,eax
c0023aaa:	86 fb                	xchg   bl,bh
c0023aac:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0023aae:	c1 c3 10             	rol    ebx,0x10
c0023ab1:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0023ab6:	89 e8                	mov    eax,ebp
c0023ab8:	86 fb                	xchg   bl,bh
c0023aba:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0023abe:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0023ac2:	50                   	push   eax
c0023ac3:	50                   	push   eax
c0023ac4:	55                   	push   ebp
c0023ac5:	c1 e5 0b             	shl    ebp,0xb
c0023ac8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0023acc:	6a 00                	push   0x0
c0023ace:	55                   	push   ebp
c0023acf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0023ad3:	50                   	push   eax
c0023ad4:	56                   	push   esi
c0023ad5:	e8 1c fb ff ff       	call   c00235f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0023ada:	83 c4 20             	add    esp,0x20
c0023add:	eb 1a                	jmp    c0023af9 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0023adf:	83 ec 0c             	sub    esp,0xc
c0023ae2:	56                   	push   esi
c0023ae3:	e8 5e fe ff ff       	call   c0023946 <ATAPI::detectMedia()>
c0023ae8:	83 c4 10             	add    esp,0x10
c0023aeb:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0023af2:	75 aa                	jne    c0023a9e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0023af4:	b8 02 00 00 00       	mov    eax,0x2
c0023af9:	83 c4 1c             	add    esp,0x1c
c0023afc:	5b                   	pop    ebx
c0023afd:	5e                   	pop    esi
c0023afe:	5f                   	pop    edi
c0023aff:	5d                   	pop    ebp
c0023b00:	c3                   	ret    
c0023b01:	90                   	nop

c0023b02 <SATA::close(int, int, void*)>:
c0023b02:	83 ec 0c             	sub    esp,0xc
c0023b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b09:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023b0f:	85 c0                	test   eax,eax
c0023b11:	74 0c                	je     c0023b1f <SATA::close(int, int, void*)+0x1d>
c0023b13:	83 ec 0c             	sub    esp,0xc
c0023b16:	8b 10                	mov    edx,DWORD PTR [eax]
c0023b18:	50                   	push   eax
c0023b19:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023b1c:	83 c4 10             	add    esp,0x10
c0023b1f:	31 c0                	xor    eax,eax
c0023b21:	83 c4 0c             	add    esp,0xc
c0023b24:	c3                   	ret    
c0023b25:	90                   	nop

c0023b26 <SATA::powerSaving(PowerSavingLevel)>:
c0023b26:	c3                   	ret    
c0023b27:	90                   	nop

c0023b28 <SATA::open(int, int, void*)>:
c0023b28:	53                   	push   ebx
c0023b29:	83 ec 14             	sub    esp,0x14
c0023b2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0023b30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0023b34:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0023b3e:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0023b44:	c7 83 60 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x160],0x0
c0023b4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0023b52:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0023b5c:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0023b62:	68 40 b4 02 c0       	push   0xc002b440
c0023b67:	e8 55 ec fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0023b6c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b6f:	e8 b4 04 ff ff       	call   c0014028 <PhysicalDisk::startCache()>
c0023b74:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023b77:	e8 d6 24 ff ff       	call   c0016052 <createPartitionsForDisk(PhysicalDisk*)>
c0023b7c:	31 c0                	xor    eax,eax
c0023b7e:	83 c4 18             	add    esp,0x18
c0023b81:	5b                   	pop    ebx
c0023b82:	c3                   	ret    
c0023b83:	90                   	nop

c0023b84 <SATA::SATA()>:
c0023b84:	83 ec 0c             	sub    esp,0xc
c0023b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023b8b:	83 ec 04             	sub    esp,0x4
c0023b8e:	68 00 02 00 00       	push   0x200
c0023b93:	68 5b b4 02 c0       	push   0xc002b45b
c0023b98:	50                   	push   eax
c0023b99:	e8 22 04 ff ff       	call   c0013fc0 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023b9e:	83 c4 10             	add    esp,0x10
c0023ba1:	ba 38 b5 02 c0       	mov    edx,0xc002b538
c0023ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023baa:	89 10                	mov    DWORD PTR [eax],edx
c0023bac:	90                   	nop
c0023bad:	83 c4 0c             	add    esp,0xc
c0023bb0:	c3                   	ret    
c0023bb1:	90                   	nop

c0023bb2 <SATA::access(unsigned long long, int, void*, bool)>:
c0023bb2:	55                   	push   ebp
c0023bb3:	57                   	push   edi
c0023bb4:	56                   	push   esi
c0023bb5:	53                   	push   ebx
c0023bb6:	81 ec 2c 04 00 00    	sub    esp,0x42c
c0023bbc:	8b 84 24 48 04 00 00 	mov    eax,DWORD PTR [esp+0x448]
c0023bc3:	8b bc 24 4c 04 00 00 	mov    edi,DWORD PTR [esp+0x44c]
c0023bca:	8b 9c 24 40 04 00 00 	mov    ebx,DWORD PTR [esp+0x440]
c0023bd1:	8b b4 24 44 04 00 00 	mov    esi,DWORD PTR [esp+0x444]
c0023bd8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023bdc:	83 ff 08             	cmp    edi,0x8
c0023bdf:	7e 10                	jle    c0023bf1 <SATA::access(unsigned long long, int, void*, bool)+0x3f>
c0023be1:	83 ec 0c             	sub    esp,0xc
c0023be4:	68 6b b4 02 c0       	push   0xc002b46b
c0023be9:	e8 ed 5c ff ff       	call   c00198db <Krnl::panic(char const*)>
c0023bee:	83 c4 10             	add    esp,0x10
c0023bf1:	51                   	push   ecx
c0023bf2:	68 00 02 00 00       	push   0x200
c0023bf7:	68 ee 00 00 00       	push   0xee
c0023bfc:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0023c00:	55                   	push   ebp
c0023c01:	e8 85 ca fd ff       	call   c000068b <memset>
c0023c06:	83 c4 0c             	add    esp,0xc
c0023c09:	68 00 02 00 00       	push   0x200
c0023c0e:	68 ee 00 00 00       	push   0xee
c0023c13:	8d 84 24 2c 02 00 00 	lea    eax,[esp+0x22c]
c0023c1a:	50                   	push   eax
c0023c1b:	e8 6b ca fd ff       	call   c000068b <memset>
c0023c20:	55                   	push   ebp
c0023c21:	57                   	push   edi
c0023c22:	56                   	push   esi
c0023c23:	68 9d b4 02 c0       	push   0xc002b49d
c0023c28:	e8 94 eb fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0023c2d:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023c33:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023c39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0023c3d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023c43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0023c47:	c1 e0 07             	shl    eax,0x7
c0023c4a:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
c0023c4e:	83 c4 18             	add    esp,0x18
c0023c51:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0023c5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023c5f:	8d 50 02             	lea    edx,[eax+0x2]
c0023c62:	c1 e2 07             	shl    edx,0x7
c0023c65:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c0023c69:	52                   	push   edx
c0023c6a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023c6e:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0023c74:	e8 e1 ef ff ff       	call   c0022c5a <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0023c79:	89 c1                	mov    ecx,eax
c0023c7b:	58                   	pop    eax
c0023c7c:	5a                   	pop    edx
c0023c7d:	51                   	push   ecx
c0023c7e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0023c82:	68 d2 b4 02 c0       	push   0xc002b4d2
c0023c87:	e8 35 eb fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0023c8c:	83 c4 10             	add    esp,0x10
c0023c8f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023c93:	83 f9 ff             	cmp    ecx,0xffffffff
c0023c96:	0f 84 9a 01 00 00    	je     c0023e36 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023c9c:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c0023ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ca6:	8b 12                	mov    edx,DWORD PTR [edx]
c0023ca8:	2b 90 5c 01 00 00    	sub    edx,DWORD PTR [eax+0x15c]
c0023cae:	03 90 58 01 00 00    	add    edx,DWORD PTR [eax+0x158]
c0023cb4:	89 c8                	mov    eax,ecx
c0023cb6:	c1 e0 05             	shl    eax,0x5
c0023cb9:	01 c2                	add    edx,eax
c0023cbb:	8a 02                	mov    al,BYTE PTR [edx]
c0023cbd:	83 e0 a0             	and    eax,0xffffffa0
c0023cc0:	83 c8 05             	or     eax,0x5
c0023cc3:	88 02                	mov    BYTE PTR [edx],al
c0023cc5:	8d 47 ff             	lea    eax,[edi-0x1]
c0023cc8:	c1 f8 04             	sar    eax,0x4
c0023ccb:	40                   	inc    eax
c0023ccc:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0023cd0:	0f b7 c0             	movzx  eax,ax
c0023cd3:	8b 9b 70 01 00 00    	mov    ebx,DWORD PTR [ebx+0x170]
c0023cd9:	83 c0 08             	add    eax,0x8
c0023cdc:	8b 8b 58 01 00 00    	mov    ecx,DWORD PTR [ebx+0x158]
c0023ce2:	c1 e0 04             	shl    eax,0x4
c0023ce5:	2b 8b 5c 01 00 00    	sub    ecx,DWORD PTR [ebx+0x15c]
c0023ceb:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
c0023cee:	01 cb                	add    ebx,ecx
c0023cf0:	52                   	push   edx
c0023cf1:	50                   	push   eax
c0023cf2:	6a 00                	push   0x0
c0023cf4:	53                   	push   ebx
c0023cf5:	e8 91 c9 fd ff       	call   c000068b <memset>
c0023cfa:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0023d00:	83 c4 10             	add    esp,0x10
c0023d03:	89 ab 80 00 00 00    	mov    DWORD PTR [ebx+0x80],ebp
c0023d09:	25 00 00 c0 7f       	and    eax,0x7fc00000
c0023d0e:	8d ac 24 20 02 00 00 	lea    ebp,[esp+0x220]
c0023d15:	0d ff 01 00 80       	or     eax,0x800001ff
c0023d1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0023d1e:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0023d24:	b8 01 00 00 00       	mov    eax,0x1
c0023d29:	89 c2                	mov    edx,eax
c0023d2b:	c1 e2 04             	shl    edx,0x4
c0023d2e:	89 ac 13 80 00 00 00 	mov    DWORD PTR [ebx+edx*1+0x80],ebp
c0023d35:	8d 50 08             	lea    edx,[eax+0x8]
c0023d38:	40                   	inc    eax
c0023d39:	c1 e2 04             	shl    edx,0x4
c0023d3c:	81 64 13 0c 00 00 c0 7f 	and    DWORD PTR [ebx+edx*1+0xc],0x7fc00000
c0023d44:	83 f8 10             	cmp    eax,0x10
c0023d47:	75 e0                	jne    c0023d29 <SATA::access(unsigned long long, int, void*, bool)+0x177>
c0023d49:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0023d4c:	c6 43 02 25          	mov    BYTE PTR [ebx+0x2],0x25
c0023d50:	66 25 00 7f          	and    ax,0x7f00
c0023d54:	66 89 73 04          	mov    WORD PTR [ebx+0x4],si
c0023d58:	66 0d 27 80          	or     ax,0x8027
c0023d5c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0023d60:	66 89 03             	mov    WORD PTR [ebx],ax
c0023d63:	66 89 7b 0c          	mov    WORD PTR [ebx+0xc],di
c0023d67:	89 f0                	mov    eax,esi
c0023d69:	31 d2                	xor    edx,edx
c0023d6b:	c1 e8 10             	shr    eax,0x10
c0023d6e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0023d71:	89 f0                	mov    eax,esi
c0023d73:	c1 e8 18             	shr    eax,0x18
c0023d76:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0023d79:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0023d7d:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0023d80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d84:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0023d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d8b:	c1 e0 07             	shl    eax,0x7
c0023d8e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0023d92:	8b 98 20 01 00 00    	mov    ebx,DWORD PTR [eax+0x120]
c0023d98:	80 e3 88             	and    bl,0x88
c0023d9b:	74 0b                	je     c0023da8 <SATA::access(unsigned long long, int, void*, bool)+0x1f6>
c0023d9d:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023da3:	74 0b                	je     c0023db0 <SATA::access(unsigned long long, int, void*, bool)+0x1fe>
c0023da5:	42                   	inc    edx
c0023da6:	eb ea                	jmp    c0023d92 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c0023da8:	81 fa 40 42 0f 00    	cmp    edx,0xf4240
c0023dae:	75 0a                	jne    c0023dba <SATA::access(unsigned long long, int, void*, bool)+0x208>
c0023db0:	83 ec 0c             	sub    esp,0xc
c0023db3:	68 db b4 02 c0       	push   0xc002b4db
c0023db8:	eb 60                	jmp    c0023e1a <SATA::access(unsigned long long, int, void*, bool)+0x268>
c0023dba:	be 01 00 00 00       	mov    esi,0x1
c0023dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023dc3:	d3 e6                	shl    esi,cl
c0023dc5:	c1 e3 07             	shl    ebx,0x7
c0023dc8:	89 b0 38 01 00 00    	mov    DWORD PTR [eax+0x138],esi
c0023dce:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0023dd2:	83 ec 0c             	sub    esp,0xc
c0023dd5:	68 e9 b4 02 c0       	push   0xc002b4e9
c0023dda:	e8 e2 e9 fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0023ddf:	8b 83 38 01 00 00    	mov    eax,DWORD PTR [ebx+0x138]
c0023de5:	83 c4 10             	add    esp,0x10
c0023de8:	85 c6                	test   esi,eax
c0023dea:	8b 83 10 01 00 00    	mov    eax,DWORD PTR [ebx+0x110]
c0023df0:	74 1a                	je     c0023e0c <SATA::access(unsigned long long, int, void*, bool)+0x25a>
c0023df2:	0f ba e0 1e          	bt     eax,0x1e
c0023df6:	73 da                	jae    c0023dd2 <SATA::access(unsigned long long, int, void*, bool)+0x220>
c0023df8:	83 ec 0c             	sub    esp,0xc
c0023dfb:	68 f6 b4 02 c0       	push   0xc002b4f6
c0023e00:	e8 d6 5a ff ff       	call   c00198db <Krnl::panic(char const*)>
c0023e05:	83 c4 10             	add    esp,0x10
c0023e08:	31 c0                	xor    eax,eax
c0023e0a:	eb 2f                	jmp    c0023e3b <SATA::access(unsigned long long, int, void*, bool)+0x289>
c0023e0c:	0f ba e0 1e          	bt     eax,0x1e
c0023e10:	73 12                	jae    c0023e24 <SATA::access(unsigned long long, int, void*, bool)+0x272>
c0023e12:	83 ec 0c             	sub    esp,0xc
c0023e15:	68 f6 b4 02 c0       	push   0xc002b4f6
c0023e1a:	e8 bc 5a ff ff       	call   c00198db <Krnl::panic(char const*)>
c0023e1f:	83 c4 10             	add    esp,0x10
c0023e22:	eb 12                	jmp    c0023e36 <SATA::access(unsigned long long, int, void*, bool)+0x284>
c0023e24:	83 ec 0c             	sub    esp,0xc
c0023e27:	68 07 b5 02 c0       	push   0xc002b507
c0023e2c:	e8 aa 5a ff ff       	call   c00198db <Krnl::panic(char const*)>
c0023e31:	83 c4 10             	add    esp,0x10
c0023e34:	eb fe                	jmp    c0023e34 <SATA::access(unsigned long long, int, void*, bool)+0x282>
c0023e36:	b8 01 00 00 00       	mov    eax,0x1
c0023e3b:	81 c4 2c 04 00 00    	add    esp,0x42c
c0023e41:	5b                   	pop    ebx
c0023e42:	5e                   	pop    esi
c0023e43:	5f                   	pop    edi
c0023e44:	5d                   	pop    ebp
c0023e45:	c3                   	ret    

c0023e46 <SATA::read(unsigned long long, int, void*)>:
c0023e46:	57                   	push   edi
c0023e47:	b8 04 00 00 00       	mov    eax,0x4
c0023e4c:	56                   	push   esi
c0023e4d:	53                   	push   ebx
c0023e4e:	83 ec 10             	sub    esp,0x10
c0023e51:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023e55:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023e59:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023e5c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023e60:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023e64:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023e6a:	77 3b                	ja     c0023ea7 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e6c:	b8 06 00 00 00       	mov    eax,0x6
c0023e71:	85 d2                	test   edx,edx
c0023e73:	74 32                	je     c0023ea7 <SATA::read(unsigned long long, int, void*)+0x61>
c0023e75:	50                   	push   eax
c0023e76:	50                   	push   eax
c0023e77:	6a 00                	push   0x0
c0023e79:	52                   	push   edx
c0023e7a:	53                   	push   ebx
c0023e7b:	57                   	push   edi
c0023e7c:	56                   	push   esi
c0023e7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023e81:	e8 2c fd ff ff       	call   c0023bb2 <SATA::access(unsigned long long, int, void*, bool)>
c0023e86:	83 c4 20             	add    esp,0x20
c0023e89:	85 c0                	test   eax,eax
c0023e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023e8f:	75 11                	jne    c0023ea2 <SATA::read(unsigned long long, int, void*)+0x5c>
c0023e91:	01 1d c8 ec 02 c0    	add    DWORD PTR ds:0xc002ecc8,ebx
c0023e97:	e8 12 c7 fe ff       	call   c00105ae <VgaText::updateDiskUsage()>
c0023e9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023ea0:	eb 05                	jmp    c0023ea7 <SATA::read(unsigned long long, int, void*)+0x61>
c0023ea2:	b8 01 00 00 00       	mov    eax,0x1
c0023ea7:	83 c4 10             	add    esp,0x10
c0023eaa:	5b                   	pop    ebx
c0023eab:	5e                   	pop    esi
c0023eac:	5f                   	pop    edi
c0023ead:	c3                   	ret    

c0023eae <SATA::write(unsigned long long, int, void*)>:
c0023eae:	57                   	push   edi
c0023eaf:	b8 04 00 00 00       	mov    eax,0x4
c0023eb4:	56                   	push   esi
c0023eb5:	53                   	push   ebx
c0023eb6:	83 ec 10             	sub    esp,0x10
c0023eb9:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0023ebd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0023ec1:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0023ec4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0023ec8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023ecc:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0023ed2:	77 3b                	ja     c0023f0f <SATA::write(unsigned long long, int, void*)+0x61>
c0023ed4:	b8 06 00 00 00       	mov    eax,0x6
c0023ed9:	85 d2                	test   edx,edx
c0023edb:	74 32                	je     c0023f0f <SATA::write(unsigned long long, int, void*)+0x61>
c0023edd:	50                   	push   eax
c0023ede:	50                   	push   eax
c0023edf:	6a 01                	push   0x1
c0023ee1:	52                   	push   edx
c0023ee2:	53                   	push   ebx
c0023ee3:	57                   	push   edi
c0023ee4:	56                   	push   esi
c0023ee5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0023ee9:	e8 c4 fc ff ff       	call   c0023bb2 <SATA::access(unsigned long long, int, void*, bool)>
c0023eee:	83 c4 20             	add    esp,0x20
c0023ef1:	85 c0                	test   eax,eax
c0023ef3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ef7:	75 11                	jne    c0023f0a <SATA::write(unsigned long long, int, void*)+0x5c>
c0023ef9:	01 1d c4 ec 02 c0    	add    DWORD PTR ds:0xc002ecc4,ebx
c0023eff:	e8 aa c6 fe ff       	call   c00105ae <VgaText::updateDiskUsage()>
c0023f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023f08:	eb 05                	jmp    c0023f0f <SATA::write(unsigned long long, int, void*)+0x61>
c0023f0a:	b8 01 00 00 00       	mov    eax,0x1
c0023f0f:	83 c4 10             	add    esp,0x10
c0023f12:	5b                   	pop    ebx
c0023f13:	5e                   	pop    esi
c0023f14:	5f                   	pop    edi
c0023f15:	c3                   	ret    

c0023f16 <AVX::open(int, int, void*)>:
c0023f16:	83 ec 0c             	sub    esp,0xc
c0023f19:	e8 3a 11 00 00       	call   c0025058 <avxInit>
c0023f1e:	b8 00 00 00 00       	mov    eax,0x0
c0023f23:	83 c4 0c             	add    esp,0xc
c0023f26:	c3                   	ret    
c0023f27:	90                   	nop

c0023f28 <AVX::close(int, int, void*)>:
c0023f28:	83 ec 0c             	sub    esp,0xc
c0023f2b:	e8 29 11 00 00       	call   c0025059 <avxClose>
c0023f30:	b8 00 00 00 00       	mov    eax,0x0
c0023f35:	83 c4 0c             	add    esp,0xc
c0023f38:	c3                   	ret    
c0023f39:	90                   	nop

c0023f3a <AVX::available()>:
c0023f3a:	83 ec 0c             	sub    esp,0xc
c0023f3d:	e8 0e 11 00 00       	call   c0025050 <avxDetect>
c0023f42:	85 c0                	test   eax,eax
c0023f44:	0f 95 c0             	setne  al
c0023f47:	83 c4 0c             	add    esp,0xc
c0023f4a:	c3                   	ret    
c0023f4b:	90                   	nop

c0023f4c <AVX::save(void*)>:
c0023f4c:	83 ec 0c             	sub    esp,0xc
c0023f4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f53:	83 ec 0c             	sub    esp,0xc
c0023f56:	50                   	push   eax
c0023f57:	e8 fa 10 00 00       	call   c0025056 <avxSave>
c0023f5c:	83 c4 10             	add    esp,0x10
c0023f5f:	90                   	nop
c0023f60:	83 c4 0c             	add    esp,0xc
c0023f63:	c3                   	ret    

c0023f64 <AVX::load(void*)>:
c0023f64:	83 ec 0c             	sub    esp,0xc
c0023f67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023f6b:	83 ec 0c             	sub    esp,0xc
c0023f6e:	50                   	push   eax
c0023f6f:	e8 e3 10 00 00       	call   c0025057 <avxLoad>
c0023f74:	83 c4 10             	add    esp,0x10
c0023f77:	90                   	nop
c0023f78:	83 c4 0c             	add    esp,0xc
c0023f7b:	c3                   	ret    

c0023f7c <AVX::AVX()>:
c0023f7c:	83 ec 0c             	sub    esp,0xc
c0023f7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f83:	83 ec 08             	sub    esp,0x8
c0023f86:	68 64 b5 02 c0       	push   0xc002b564
c0023f8b:	50                   	push   eax
c0023f8c:	e8 0d 01 ff ff       	call   c001409e <FPU::FPU(char const*)>
c0023f91:	83 c4 10             	add    esp,0x10
c0023f94:	ba 74 b5 02 c0       	mov    edx,0xc002b574
c0023f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023f9d:	89 10                	mov    DWORD PTR [eax],edx
c0023f9f:	90                   	nop
c0023fa0:	83 c4 0c             	add    esp,0xc
c0023fa3:	c3                   	ret    

c0023fa4 <MMX::available()>:
c0023fa4:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0023fa9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0023faf:	83 e0 20             	and    eax,0x20
c0023fb2:	84 c0                	test   al,al
c0023fb4:	0f 95 c0             	setne  al
c0023fb7:	c3                   	ret    

c0023fb8 <MMX::open(int, int, void*)>:
c0023fb8:	83 ec 0c             	sub    esp,0xc
c0023fbb:	e8 1c 11 00 00       	call   c00250dc <x87Init>
c0023fc0:	b8 00 00 00 00       	mov    eax,0x0
c0023fc5:	83 c4 0c             	add    esp,0xc
c0023fc8:	c3                   	ret    
c0023fc9:	90                   	nop

c0023fca <MMX::close(int, int, void*)>:
c0023fca:	83 ec 0c             	sub    esp,0xc
c0023fcd:	e8 24 11 00 00       	call   c00250f6 <x87Close>
c0023fd2:	b8 00 00 00 00       	mov    eax,0x0
c0023fd7:	83 c4 0c             	add    esp,0xc
c0023fda:	c3                   	ret    
c0023fdb:	90                   	nop

c0023fdc <MMX::save(void*)>:
c0023fdc:	83 ec 0c             	sub    esp,0xc
c0023fdf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023fe3:	83 ec 0c             	sub    esp,0xc
c0023fe6:	50                   	push   eax
c0023fe7:	e8 e5 10 00 00       	call   c00250d1 <x87Save>
c0023fec:	83 c4 10             	add    esp,0x10
c0023fef:	90                   	nop
c0023ff0:	83 c4 0c             	add    esp,0xc
c0023ff3:	c3                   	ret    

c0023ff4 <MMX::load(void*)>:
c0023ff4:	83 ec 0c             	sub    esp,0xc
c0023ff7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023ffb:	83 ec 0c             	sub    esp,0xc
c0023ffe:	50                   	push   eax
c0023fff:	e8 d3 10 00 00       	call   c00250d7 <x87Load>
c0024004:	83 c4 10             	add    esp,0x10
c0024007:	90                   	nop
c0024008:	83 c4 0c             	add    esp,0xc
c002400b:	c3                   	ret    

c002400c <MMX::MMX()>:
c002400c:	83 ec 0c             	sub    esp,0xc
c002400f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024013:	83 ec 08             	sub    esp,0x8
c0024016:	68 a4 b5 02 c0       	push   0xc002b5a4
c002401b:	50                   	push   eax
c002401c:	e8 7d 00 ff ff       	call   c001409e <FPU::FPU(char const*)>
c0024021:	83 c4 10             	add    esp,0x10
c0024024:	ba b4 b5 02 c0       	mov    edx,0xc002b5b4
c0024029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002402d:	89 10                	mov    DWORD PTR [eax],edx
c002402f:	90                   	nop
c0024030:	83 c4 0c             	add    esp,0xc
c0024033:	c3                   	ret    

c0024034 <SSE::open(int, int, void*)>:
c0024034:	83 ec 0c             	sub    esp,0xc
c0024037:	e8 58 10 00 00       	call   c0025094 <sseInit>
c002403c:	b8 00 00 00 00       	mov    eax,0x0
c0024041:	83 c4 0c             	add    esp,0xc
c0024044:	c3                   	ret    
c0024045:	90                   	nop

c0024046 <SSE::close(int, int, void*)>:
c0024046:	83 ec 0c             	sub    esp,0xc
c0024049:	e8 56 10 00 00       	call   c00250a4 <sseClose>
c002404e:	b8 00 00 00 00       	mov    eax,0x0
c0024053:	83 c4 0c             	add    esp,0xc
c0024056:	c3                   	ret    
c0024057:	90                   	nop

c0024058 <SSE::available()>:
c0024058:	83 ec 1c             	sub    esp,0x1c
c002405b:	e8 10 10 00 00       	call   c0025070 <absolutelyNoChanceInHell>
c0024060:	85 c0                	test   eax,eax
c0024062:	0f 95 c0             	setne  al
c0024065:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024069:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c002406d:	83 c4 1c             	add    esp,0x1c
c0024070:	c3                   	ret    
c0024071:	90                   	nop

c0024072 <SSE::save(void*)>:
c0024072:	83 ec 0c             	sub    esp,0xc
c0024075:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024079:	83 ec 0c             	sub    esp,0xc
c002407c:	50                   	push   eax
c002407d:	e8 06 10 00 00       	call   c0025088 <sseSave>
c0024082:	83 c4 10             	add    esp,0x10
c0024085:	90                   	nop
c0024086:	83 c4 0c             	add    esp,0xc
c0024089:	c3                   	ret    

c002408a <SSE::load(void*)>:
c002408a:	83 ec 0c             	sub    esp,0xc
c002408d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024091:	83 ec 0c             	sub    esp,0xc
c0024094:	50                   	push   eax
c0024095:	e8 f4 0f 00 00       	call   c002508e <sseLoad>
c002409a:	83 c4 10             	add    esp,0x10
c002409d:	90                   	nop
c002409e:	83 c4 0c             	add    esp,0xc
c00240a1:	c3                   	ret    

c00240a2 <SSE::SSE()>:
c00240a2:	83 ec 0c             	sub    esp,0xc
c00240a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240a9:	83 ec 08             	sub    esp,0x8
c00240ac:	68 e4 b5 02 c0       	push   0xc002b5e4
c00240b1:	50                   	push   eax
c00240b2:	e8 e7 ff fe ff       	call   c001409e <FPU::FPU(char const*)>
c00240b7:	83 c4 10             	add    esp,0x10
c00240ba:	ba f4 b5 02 c0       	mov    edx,0xc002b5f4
c00240bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00240c3:	89 10                	mov    DWORD PTR [eax],edx
c00240c5:	90                   	nop
c00240c6:	83 c4 0c             	add    esp,0xc
c00240c9:	c3                   	ret    

c00240ca <x87::open(int, int, void*)>:
c00240ca:	83 ec 0c             	sub    esp,0xc
c00240cd:	e8 0a 10 00 00       	call   c00250dc <x87Init>
c00240d2:	b8 00 00 00 00       	mov    eax,0x0
c00240d7:	83 c4 0c             	add    esp,0xc
c00240da:	c3                   	ret    
c00240db:	90                   	nop

c00240dc <x87::close(int, int, void*)>:
c00240dc:	83 ec 0c             	sub    esp,0xc
c00240df:	e8 12 10 00 00       	call   c00250f6 <x87Close>
c00240e4:	b8 00 00 00 00       	mov    eax,0x0
c00240e9:	83 c4 0c             	add    esp,0xc
c00240ec:	c3                   	ret    
c00240ed:	90                   	nop

c00240ee <x87::available()>:
c00240ee:	83 ec 0c             	sub    esp,0xc
c00240f1:	e8 c0 0f 00 00       	call   c00250b6 <x87Detect>
c00240f6:	85 c0                	test   eax,eax
c00240f8:	0f 95 c0             	setne  al
c00240fb:	83 c4 0c             	add    esp,0xc
c00240fe:	c3                   	ret    
c00240ff:	90                   	nop

c0024100 <x87::save(void*)>:
c0024100:	83 ec 0c             	sub    esp,0xc
c0024103:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024107:	83 ec 0c             	sub    esp,0xc
c002410a:	50                   	push   eax
c002410b:	e8 c1 0f 00 00       	call   c00250d1 <x87Save>
c0024110:	83 c4 10             	add    esp,0x10
c0024113:	90                   	nop
c0024114:	83 c4 0c             	add    esp,0xc
c0024117:	c3                   	ret    

c0024118 <x87::load(void*)>:
c0024118:	83 ec 0c             	sub    esp,0xc
c002411b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002411f:	83 ec 0c             	sub    esp,0xc
c0024122:	50                   	push   eax
c0024123:	e8 af 0f 00 00       	call   c00250d7 <x87Load>
c0024128:	83 c4 10             	add    esp,0x10
c002412b:	90                   	nop
c002412c:	83 c4 0c             	add    esp,0xc
c002412f:	c3                   	ret    

c0024130 <x87::x87()>:
c0024130:	83 ec 0c             	sub    esp,0xc
c0024133:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024137:	83 ec 08             	sub    esp,0x8
c002413a:	68 24 b6 02 c0       	push   0xc002b624
c002413f:	50                   	push   eax
c0024140:	e8 59 ff fe ff       	call   c001409e <FPU::FPU(char const*)>
c0024145:	83 c4 10             	add    esp,0x10
c0024148:	ba 34 b6 02 c0       	mov    edx,0xc002b634
c002414d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024151:	89 10                	mov    DWORD PTR [eax],edx
c0024153:	90                   	nop
c0024154:	83 c4 0c             	add    esp,0xc
c0024157:	c3                   	ret    

c0024158 <APIC::disable()>:
c0024158:	90                   	nop
c0024159:	c3                   	ret    

c002415a <APIC::close(int, int, void*)>:
c002415a:	55                   	push   ebp
c002415b:	89 e5                	mov    ebp,esp
c002415d:	83 ec 08             	sub    esp,0x8
c0024160:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024163:	8b 00                	mov    eax,DWORD PTR [eax]
c0024165:	83 c0 3c             	add    eax,0x3c
c0024168:	8b 00                	mov    eax,DWORD PTR [eax]
c002416a:	83 ec 0c             	sub    esp,0xc
c002416d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024170:	ff d0                	call   eax
c0024172:	83 c4 10             	add    esp,0x10
c0024175:	b8 00 00 00 00       	mov    eax,0x0
c002417a:	c9                   	leave  
c002417b:	c3                   	ret    

c002417c <IOAPIC::close(int, int, void*)>:
c002417c:	b8 00 00 00 00       	mov    eax,0x0
c0024181:	c3                   	ret    

c0024182 <APIC::io_wait()>:
c0024182:	eb 00                	jmp    c0024184 <APIC::io_wait()+0x2>
c0024184:	eb 00                	jmp    c0024186 <APIC::io_wait()+0x4>
c0024186:	90                   	nop
c0024187:	c3                   	ret    

c0024188 <APIC::getBase()>:
c0024188:	55                   	push   ebp
c0024189:	89 e5                	mov    ebp,esp
c002418b:	83 ec 18             	sub    esp,0x18
c002418e:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0024193:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0024199:	83 e0 08             	and    eax,0x8
c002419c:	84 c0                	test   al,al
c002419e:	75 07                	jne    c00241a7 <APIC::getBase()+0x1f>
c00241a0:	b8 00 00 00 00       	mov    eax,0x0
c00241a5:	eb 21                	jmp    c00241c8 <APIC::getBase()+0x40>
c00241a7:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00241ac:	83 ec 08             	sub    esp,0x8
c00241af:	6a 1b                	push   0x1b
c00241b1:	50                   	push   eax
c00241b2:	e8 c5 a8 fe ff       	call   c000ea7c <Computer::rdmsr(unsigned int)>
c00241b7:	83 c4 10             	add    esp,0x10
c00241ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00241bd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00241c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00241c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00241c8:	c9                   	leave  
c00241c9:	c3                   	ret    

c00241ca <APIC::eoi(unsigned char)>:
c00241ca:	55                   	push   ebp
c00241cb:	89 e5                	mov    ebp,esp
c00241cd:	83 ec 28             	sub    esp,0x28
c00241d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00241d3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00241d6:	83 ec 0c             	sub    esp,0xc
c00241d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00241dc:	e8 a7 ff ff ff       	call   c0024188 <APIC::getBase()>
c00241e1:	83 c4 10             	add    esp,0x10
c00241e4:	05 b0 00 00 00       	add    eax,0xb0
c00241e9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00241ec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00241ef:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00241f5:	90                   	nop
c00241f6:	c9                   	leave  
c00241f7:	c3                   	ret    

c00241f8 <APIC::open(int, int, void*)>:
c00241f8:	55                   	push   ebp
c00241f9:	89 e5                	mov    ebp,esp
c00241fb:	57                   	push   edi
c00241fc:	56                   	push   esi
c00241fd:	53                   	push   ebx
c00241fe:	83 ec 2c             	sub    esp,0x2c
c0024201:	83 ec 0c             	sub    esp,0xc
c0024204:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024207:	e8 7c ff ff ff       	call   c0024188 <APIC::getBase()>
c002420c:	83 c4 10             	add    esp,0x10
c002420f:	89 c2                	mov    edx,eax
c0024211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024214:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002421a:	0f b6 f8             	movzx  edi,al
c002421d:	89 d0                	mov    eax,edx
c002421f:	ba 00 00 00 00       	mov    edx,0x0
c0024224:	89 c1                	mov    ecx,eax
c0024226:	80 e5 ff             	and    ch,0xff
c0024229:	89 cb                	mov    ebx,ecx
c002422b:	0f b6 f2             	movzx  esi,dl
c002422e:	89 d8                	mov    eax,ebx
c0024230:	89 f2                	mov    edx,esi
c0024232:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024235:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024238:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002423c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024240:	83 e0 00             	and    eax,0x0
c0024243:	09 d0                	or     eax,edx
c0024245:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002424c:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024252:	8d 50 01             	lea    edx,[eax+0x1]
c0024255:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024258:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002425e:	0f b6 d0             	movzx  edx,al
c0024261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024264:	83 c2 08             	add    edx,0x8
c0024267:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002426b:	0f b6 c9             	movzx  ecx,cl
c002426e:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024274:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024278:	83 ec 0c             	sub    esp,0xc
c002427b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002427e:	e8 05 ff ff ff       	call   c0024188 <APIC::getBase()>
c0024283:	83 c4 10             	add    esp,0x10
c0024286:	05 f0 00 00 00       	add    eax,0xf0
c002428b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002428e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024291:	8b 00                	mov    eax,DWORD PTR [eax]
c0024293:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0024296:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c002429d:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00242a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00242a7:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00242aa:	89 10                	mov    DWORD PTR [eax],edx
c00242ac:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00242b3:	a1 50 d2 02 c0       	mov    eax,ds:0xc002d250
c00242b8:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00242bb:	7d 7c                	jge    c0024339 <APIC::open(int, int, void*)+0x141>
c00242bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00242c0:	8b 04 85 60 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2da0]
c00242c7:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00242ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00242cd:	8b 04 85 60 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2da0]
c00242d4:	c1 e8 08             	shr    eax,0x8
c00242d7:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00242db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00242de:	8b 04 85 60 d2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2da0]
c00242e5:	c1 e8 18             	shr    eax,0x18
c00242e8:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00242eb:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00242ef:	75 40                	jne    c0024331 <APIC::open(int, int, void*)+0x139>
c00242f1:	83 ec 0c             	sub    esp,0xc
c00242f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00242f7:	e8 8c fe ff ff       	call   c0024188 <APIC::getBase()>
c00242fc:	83 c4 10             	add    esp,0x10
c00242ff:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c0024303:	75 07                	jne    c002430c <APIC::open(int, int, void*)+0x114>
c0024305:	ba 60 03 00 00       	mov    edx,0x360
c002430a:	eb 05                	jmp    c0024311 <APIC::open(int, int, void*)+0x119>
c002430c:	ba 50 03 00 00       	mov    edx,0x350
c0024311:	01 d0                	add    eax,edx
c0024313:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024316:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0024319:	8b 00                	mov    eax,DWORD PTR [eax]
c002431b:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002431e:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0024325:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0024329:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002432c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002432f:	89 10                	mov    DWORD PTR [eax],edx
c0024331:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0024334:	e9 7a ff ff ff       	jmp    c00242b3 <APIC::open(int, int, void*)+0xbb>
c0024339:	b8 00 00 00 00       	mov    eax,0x0
c002433e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024341:	5b                   	pop    ebx
c0024342:	5e                   	pop    esi
c0024343:	5f                   	pop    edi
c0024344:	5d                   	pop    ebp
c0024345:	c3                   	ret    

c0024346 <IOAPIC::IOAPIC()>:
c0024346:	83 ec 0c             	sub    esp,0xc
c0024349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002434d:	83 ec 08             	sub    esp,0x8
c0024350:	68 64 b6 02 c0       	push   0xc002b664
c0024355:	50                   	push   eax
c0024356:	e8 45 fa fe ff       	call   c0013da0 <Device::Device(char const*)>
c002435b:	83 c4 10             	add    esp,0x10
c002435e:	ba 8c b7 02 c0       	mov    edx,0xc002b78c
c0024363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024367:	89 10                	mov    DWORD PTR [eax],edx
c0024369:	90                   	nop
c002436a:	83 c4 0c             	add    esp,0xc
c002436d:	c3                   	ret    

c002436e <APIC::APIC()>:
c002436e:	53                   	push   ebx
c002436f:	83 ec 18             	sub    esp,0x18
c0024372:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024376:	83 ec 08             	sub    esp,0x8
c0024379:	68 6c b6 02 c0       	push   0xc002b66c
c002437e:	50                   	push   eax
c002437f:	e8 74 01 ff ff       	call   c00144f8 <InterruptController::InterruptController(char const*)>
c0024384:	83 c4 10             	add    esp,0x10
c0024387:	ba 44 b7 02 c0       	mov    edx,0xc002b744
c002438c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024390:	89 10                	mov    DWORD PTR [eax],edx
c0024392:	a0 20 ed 02 c0       	mov    al,ds:0xc002ed20
c0024397:	83 f0 01             	xor    eax,0x1
c002439a:	84 c0                	test   al,al
c002439c:	0f 84 a1 00 00 00    	je     c0024443 <APIC::APIC()+0xd5>
c00243a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00243a7:	a0 00 d3 02 c0       	mov    al,ds:0xc002d300
c00243ac:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00243b0:	0f 83 86 00 00 00    	jae    c002443c <APIC::APIC()+0xce>
c00243b6:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00243be:	83 ec 0c             	sub    esp,0xc
c00243c1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00243c5:	e8 0a b1 fe ff       	call   c000f4d4 <malloc>
c00243ca:	83 c4 10             	add    esp,0x10
c00243cd:	89 c3                	mov    ebx,eax
c00243cf:	83 ec 0c             	sub    esp,0xc
c00243d2:	53                   	push   ebx
c00243d3:	e8 6e ff ff ff       	call   c0024346 <IOAPIC::IOAPIC()>
c00243d8:	83 c4 10             	add    esp,0x10
c00243db:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00243df:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00243e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00243e8:	89 14 85 00 ed 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1300],edx
c00243ef:	a1 e0 ec 02 c0       	mov    eax,ds:0xc002ece0
c00243f4:	40                   	inc    eax
c00243f5:	a3 e0 ec 02 c0       	mov    ds:0xc002ece0,eax
c00243fa:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c00243ff:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0024405:	83 ec 08             	sub    esp,0x8
c0024408:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c002440c:	50                   	push   eax
c002440d:	e8 9e f7 fe ff       	call   c0013bb0 <Device::addChild(Device*)>
c0024412:	83 c4 10             	add    esp,0x10
c0024415:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024419:	8b 00                	mov    eax,DWORD PTR [eax]
c002441b:	83 c0 08             	add    eax,0x8
c002441e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024420:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0024425:	6a 00                	push   0x0
c0024427:	6a 00                	push   0x0
c0024429:	52                   	push   edx
c002442a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002442e:	ff d0                	call   eax
c0024430:	83 c4 10             	add    esp,0x10
c0024433:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0024437:	e9 6b ff ff ff       	jmp    c00243a7 <APIC::APIC()+0x39>
c002443c:	c6 05 20 ed 02 c0 01 	mov    BYTE PTR ds:0xc002ed20,0x1
c0024443:	90                   	nop
c0024444:	83 c4 18             	add    esp,0x18
c0024447:	5b                   	pop    ebx
c0024448:	c3                   	ret    
c0024449:	90                   	nop

c002444a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c002444a:	55                   	push   ebp
c002444b:	89 e5                	mov    ebp,esp
c002444d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024450:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024456:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024459:	72 1d                	jb     c0024478 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002445b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002445e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0024464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024467:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002446d:	01 d0                	add    eax,edx
c002446f:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0024472:	73 04                	jae    c0024478 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0024474:	b0 01                	mov    al,0x1
c0024476:	eb 02                	jmp    c002447a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0024478:	b0 00                	mov    al,0x0
c002447a:	5d                   	pop    ebp
c002447b:	c3                   	ret    

c002447c <IOAPIC::read(int)>:
c002447c:	55                   	push   ebp
c002447d:	89 e5                	mov    ebp,esp
c002447f:	83 ec 10             	sub    esp,0x10
c0024482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024485:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002448b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002448e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024491:	0f b6 d0             	movzx  edx,al
c0024494:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024497:	89 10                	mov    DWORD PTR [eax],edx
c0024499:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002449c:	83 c0 10             	add    eax,0x10
c002449f:	8b 00                	mov    eax,DWORD PTR [eax]
c00244a1:	c9                   	leave  
c00244a2:	c3                   	ret    
c00244a3:	90                   	nop

c00244a4 <IOAPIC::open(int, int, void*)>:
c00244a4:	55                   	push   ebp
c00244a5:	89 e5                	mov    ebp,esp
c00244a7:	57                   	push   edi
c00244a8:	56                   	push   esi
c00244a9:	53                   	push   ebx
c00244aa:	83 ec 0c             	sub    esp,0xc
c00244ad:	83 ec 0c             	sub    esp,0xc
c00244b0:	68 97 b6 02 c0       	push   0xc002b697
c00244b5:	e8 07 e3 fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c00244ba:	83 c4 10             	add    esp,0x10
c00244bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244c0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00244c3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00244c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244cc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00244d2:	8b 14 85 40 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2cc0]
c00244d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244dc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00244e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00244eb:	8b 14 85 c0 d3 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2c40]
c00244f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244f5:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00244fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00244fe:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0024504:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024507:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002450d:	0f b6 f8             	movzx  edi,al
c0024510:	89 d0                	mov    eax,edx
c0024512:	ba 00 00 00 00       	mov    edx,0x0
c0024517:	89 c1                	mov    ecx,eax
c0024519:	80 e5 ff             	and    ch,0xff
c002451c:	89 cb                	mov    ebx,ecx
c002451e:	0f b6 f2             	movzx  esi,dl
c0024521:	89 d8                	mov    eax,ebx
c0024523:	89 f2                	mov    edx,esi
c0024525:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0024528:	8d 5f 08             	lea    ebx,[edi+0x8]
c002452b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002452f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024533:	83 e0 00             	and    eax,0x0
c0024536:	09 d0                	or     eax,edx
c0024538:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c002453c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002453f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024545:	8d 50 01             	lea    edx,[eax+0x1]
c0024548:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002454b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024551:	0f b6 d0             	movzx  edx,al
c0024554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024557:	83 c2 08             	add    edx,0x8
c002455a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002455e:	0f b6 c9             	movzx  ecx,cl
c0024561:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0024567:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002456b:	83 ec 08             	sub    esp,0x8
c002456e:	6a 01                	push   0x1
c0024570:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024573:	e8 04 ff ff ff       	call   c002447c <IOAPIC::read(int)>
c0024578:	83 c4 10             	add    esp,0x10
c002457b:	c1 f8 10             	sar    eax,0x10
c002457e:	0f b6 c0             	movzx  eax,al
c0024581:	8d 50 01             	lea    edx,[eax+0x1]
c0024584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024587:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c002458d:	b8 00 00 00 00       	mov    eax,0x0
c0024592:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024595:	5b                   	pop    ebx
c0024596:	5e                   	pop    esi
c0024597:	5f                   	pop    edi
c0024598:	5d                   	pop    ebp
c0024599:	c3                   	ret    

c002459a <IOAPIC::write(int, int)>:
c002459a:	55                   	push   ebp
c002459b:	89 e5                	mov    ebp,esp
c002459d:	83 ec 10             	sub    esp,0x10
c00245a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00245a3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00245a9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00245ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245af:	0f b6 d0             	movzx  edx,al
c00245b2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00245b5:	89 10                	mov    DWORD PTR [eax],edx
c00245b7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00245ba:	8d 50 10             	lea    edx,[eax+0x10]
c00245bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00245c0:	89 02                	mov    DWORD PTR [edx],eax
c00245c2:	90                   	nop
c00245c3:	c9                   	leave  
c00245c4:	c3                   	ret    
c00245c5:	90                   	nop

c00245c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00245c6:	55                   	push   ebp
c00245c7:	89 e5                	mov    ebp,esp
c00245c9:	53                   	push   ebx
c00245ca:	83 ec 2c             	sub    esp,0x2c
c00245cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00245d0:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00245d3:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00245d6:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00245d9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00245dc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00245df:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00245e2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00245e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00245e8:	88 d8                	mov    al,bl
c00245ea:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00245ed:	88 c8                	mov    al,cl
c00245ef:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00245f2:	88 d0                	mov    al,dl
c00245f4:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00245f7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00245fb:	83 c0 08             	add    eax,0x8
c00245fe:	01 c0                	add    eax,eax
c0024600:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0024603:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0024607:	83 c0 08             	add    eax,0x8
c002460a:	01 c0                	add    eax,eax
c002460c:	40                   	inc    eax
c002460d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0024610:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024613:	50                   	push   eax
c0024614:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024617:	e8 60 fe ff ff       	call   c002447c <IOAPIC::read(int)>
c002461c:	83 c4 08             	add    esp,0x8
c002461f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024622:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0024629:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002462c:	c1 e0 18             	shl    eax,0x18
c002462f:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0024632:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024635:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0024638:	52                   	push   edx
c0024639:	50                   	push   eax
c002463a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002463d:	e8 58 ff ff ff       	call   c002459a <IOAPIC::write(int, int)>
c0024642:	83 c4 0c             	add    esp,0xc
c0024645:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024648:	50                   	push   eax
c0024649:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002464c:	e8 2b fe ff ff       	call   c002447c <IOAPIC::read(int)>
c0024651:	83 c4 08             	add    esp,0x8
c0024654:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0024657:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002465e:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0024665:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c002466c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0024670:	74 09                	je     c002467b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0024672:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0024679:	eb 07                	jmp    c0024682 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c002467b:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0024682:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0024686:	74 09                	je     c0024691 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0024688:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002468f:	eb 07                	jmp    c0024698 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0024691:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0024698:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002469f:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00246a3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00246a6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00246a9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00246ac:	52                   	push   edx
c00246ad:	50                   	push   eax
c00246ae:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00246b1:	e8 e4 fe ff ff       	call   c002459a <IOAPIC::write(int, int)>
c00246b6:	83 c4 0c             	add    esp,0xc
c00246b9:	90                   	nop
c00246ba:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00246bd:	c9                   	leave  
c00246be:	c3                   	ret    
c00246bf:	90                   	nop

c00246c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00246c0:	55                   	push   ebp
c00246c1:	89 e5                	mov    ebp,esp
c00246c3:	57                   	push   edi
c00246c4:	56                   	push   esi
c00246c5:	53                   	push   ebx
c00246c6:	83 ec 2c             	sub    esp,0x2c
c00246c9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00246cc:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00246cf:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00246d3:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00246d7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00246db:	74 5a                	je     c0024737 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00246dd:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00246e1:	7f 44                	jg     c0024727 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00246e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246e6:	05 e0 bb 02 c0       	add    eax,0xc002bbe0
c00246eb:	8a 00                	mov    al,BYTE PTR [eax]
c00246ed:	0f b6 c0             	movzx  eax,al
c00246f0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00246f3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00246f6:	66 8b 84 00 e0 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2d20]
c00246fe:	0f b7 c0             	movzx  eax,ax
c0024701:	83 e0 02             	and    eax,0x2
c0024704:	85 c0                	test   eax,eax
c0024706:	74 04                	je     c002470c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0024708:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c002470c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002470f:	66 8b 84 00 e0 d2 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd2d20]
c0024717:	0f b7 c0             	movzx  eax,ax
c002471a:	83 e0 08             	and    eax,0x8
c002471d:	85 c0                	test   eax,eax
c002471f:	74 16                	je     c0024737 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024721:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0024725:	eb 10                	jmp    c0024737 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0024727:	83 ec 0c             	sub    esp,0xc
c002472a:	68 a8 b6 02 c0       	push   0xc002b6a8
c002472f:	e8 a7 51 ff ff       	call   c00198db <Krnl::panic(char const*)>
c0024734:	83 c4 10             	add    esp,0x10
c0024737:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c002473b:	a1 e0 ec 02 c0       	mov    eax,ds:0xc002ece0
c0024740:	83 ec 08             	sub    esp,0x8
c0024743:	50                   	push   eax
c0024744:	68 e0 b6 02 c0       	push   0xc002b6e0
c0024749:	e8 73 e0 fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c002474e:	83 c4 10             	add    esp,0x10
c0024751:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0024758:	a1 e0 ec 02 c0       	mov    eax,ds:0xc002ece0
c002475d:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0024760:	7d 67                	jge    c00247c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0024762:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024765:	8b 04 85 00 ed 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1300]
c002476c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002476f:	83 ec 08             	sub    esp,0x8
c0024772:	52                   	push   edx
c0024773:	50                   	push   eax
c0024774:	e8 d1 fc ff ff       	call   c002444a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0024779:	83 c4 10             	add    esp,0x10
c002477c:	84 c0                	test   al,al
c002477e:	74 44                	je     c00247c4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0024780:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0024783:	8b 1c 85 00 ed 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd1300]
c002478a:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002478e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0024791:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0024795:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024798:	83 c0 20             	add    eax,0x20
c002479b:	0f b6 f0             	movzx  esi,al
c002479e:	b8 00 00 00 00       	mov    eax,0x0
c00247a3:	99                   	cdq    
c00247a4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00247a7:	0f b6 c9             	movzx  ecx,cl
c00247aa:	83 ec 04             	sub    esp,0x4
c00247ad:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00247b0:	57                   	push   edi
c00247b1:	56                   	push   esi
c00247b2:	52                   	push   edx
c00247b3:	50                   	push   eax
c00247b4:	51                   	push   ecx
c00247b5:	53                   	push   ebx
c00247b6:	e8 0b fe ff ff       	call   c00245c6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00247bb:	83 c4 20             	add    esp,0x20
c00247be:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00247c2:	eb 05                	jmp    c00247c9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00247c4:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00247c7:	eb 8f                	jmp    c0024758 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00247c9:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00247cc:	83 f0 01             	xor    eax,0x1
c00247cf:	84 c0                	test   al,al
c00247d1:	74 10                	je     c00247e3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00247d3:	83 ec 0c             	sub    esp,0xc
c00247d6:	68 f7 b6 02 c0       	push   0xc002b6f7
c00247db:	e8 fb 50 ff ff       	call   c00198db <Krnl::panic(char const*)>
c00247e0:	83 c4 10             	add    esp,0x10
c00247e3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00247e7:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00247ee:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00247f2:	7f 65                	jg     c0024859 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00247f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00247f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00247fa:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0024801:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024804:	01 ca                	add    edx,ecx
c0024806:	83 c2 54             	add    edx,0x54
c0024809:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c002480d:	85 c0                	test   eax,eax
c002480f:	75 43                	jne    c0024854 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0024811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024814:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024817:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002481e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024821:	01 ca                	add    edx,ecx
c0024823:	8d 4a 54             	lea    ecx,[edx+0x54]
c0024826:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0024829:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002482d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0024830:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0024833:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c002483a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002483d:	01 ca                	add    edx,ecx
c002483f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0024845:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0024848:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c002484c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002484f:	83 e8 20             	sub    eax,0x20
c0024852:	eb 1a                	jmp    c002486e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0024854:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0024857:	eb 95                	jmp    c00247ee <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0024859:	83 ec 0c             	sub    esp,0xc
c002485c:	68 04 b7 02 c0       	push   0xc002b704
c0024861:	e8 75 50 ff ff       	call   c00198db <Krnl::panic(char const*)>
c0024866:	83 c4 10             	add    esp,0x10
c0024869:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002486e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0024871:	5b                   	pop    ebx
c0024872:	5e                   	pop    esi
c0024873:	5f                   	pop    edi
c0024874:	5d                   	pop    ebp
c0024875:	c3                   	ret    

c0024876 <PIC::disable()>:
c0024876:	55                   	push   ebp
c0024877:	89 e5                	mov    ebp,esp
c0024879:	83 ec 10             	sub    esp,0x10
c002487c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0024882:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0024886:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024889:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c002488d:	ee                   	out    dx,al
c002488e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0024894:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0024898:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c002489b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002489f:	ee                   	out    dx,al
c00248a0:	90                   	nop
c00248a1:	c9                   	leave  
c00248a2:	c3                   	ret    
c00248a3:	90                   	nop

c00248a4 <PIC::close(int, int, void*)>:
c00248a4:	55                   	push   ebp
c00248a5:	89 e5                	mov    ebp,esp
c00248a7:	83 ec 08             	sub    esp,0x8
c00248aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00248ad:	8b 00                	mov    eax,DWORD PTR [eax]
c00248af:	83 c0 3c             	add    eax,0x3c
c00248b2:	8b 00                	mov    eax,DWORD PTR [eax]
c00248b4:	83 ec 0c             	sub    esp,0xc
c00248b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00248ba:	ff d0                	call   eax
c00248bc:	83 c4 10             	add    esp,0x10
c00248bf:	b8 00 00 00 00       	mov    eax,0x0
c00248c4:	c9                   	leave  
c00248c5:	c3                   	ret    

c00248c6 <PIC::PIC()>:
c00248c6:	83 ec 0c             	sub    esp,0xc
c00248c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248cd:	83 ec 08             	sub    esp,0x8
c00248d0:	68 b0 b7 02 c0       	push   0xc002b7b0
c00248d5:	50                   	push   eax
c00248d6:	e8 1d fc fe ff       	call   c00144f8 <InterruptController::InterruptController(char const*)>
c00248db:	83 c4 10             	add    esp,0x10
c00248de:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c00248e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248e7:	89 10                	mov    DWORD PTR [eax],edx
c00248e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248ed:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00248f3:	0f b6 d0             	movzx  edx,al
c00248f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248fa:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0024901:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024905:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002490b:	0f b6 d0             	movzx  edx,al
c002490e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024912:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0024917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002491b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024921:	8d 50 01             	lea    edx,[eax+0x1]
c0024924:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024928:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002492e:	0f b6 d0             	movzx  edx,al
c0024931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024935:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024939:	83 e1 3f             	and    ecx,0x3f
c002493c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024944:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002494a:	0f b6 d0             	movzx  edx,al
c002494d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024951:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0024958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002495c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024962:	0f b6 d0             	movzx  edx,al
c0024965:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024969:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002496e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024972:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024978:	8d 50 01             	lea    edx,[eax+0x1]
c002497b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002497f:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0024985:	0f b6 d0             	movzx  edx,al
c0024988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002498c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0024990:	83 e1 3f             	and    ecx,0x3f
c0024993:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0024997:	90                   	nop
c0024998:	83 c4 0c             	add    esp,0xc
c002499b:	c3                   	ret    

c002499c <PIC::ioWait()>:
c002499c:	eb 00                	jmp    c002499e <PIC::ioWait()+0x2>
c002499e:	eb 00                	jmp    c00249a0 <PIC::ioWait()+0x4>
c00249a0:	90                   	nop
c00249a1:	c3                   	ret    

c00249a2 <PIC::getIRQReg(int)>:
c00249a2:	55                   	push   ebp
c00249a3:	89 e5                	mov    ebp,esp
c00249a5:	83 ec 10             	sub    esp,0x10
c00249a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249ab:	0f b6 c0             	movzx  eax,al
c00249ae:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c00249b4:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c00249b7:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00249ba:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00249be:	ee                   	out    dx,al
c00249bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00249c2:	0f b6 c0             	movzx  eax,al
c00249c5:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00249cb:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c00249ce:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00249d1:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00249d5:	ee                   	out    dx,al
c00249d6:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00249dc:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00249e0:	89 c2                	mov    edx,eax
c00249e2:	ec                   	in     al,dx
c00249e3:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00249e6:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00249e9:	0f b6 c0             	movzx  eax,al
c00249ec:	c1 e0 08             	shl    eax,0x8
c00249ef:	89 c1                	mov    ecx,eax
c00249f1:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00249f7:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00249fb:	89 c2                	mov    edx,eax
c00249fd:	ec                   	in     al,dx
c00249fe:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0024a01:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0024a04:	0f b6 c0             	movzx  eax,al
c0024a07:	09 c8                	or     eax,ecx
c0024a09:	c9                   	leave  
c0024a0a:	c3                   	ret    
c0024a0b:	90                   	nop

c0024a0c <PIC::eoi(unsigned char)>:
c0024a0c:	55                   	push   ebp
c0024a0d:	89 e5                	mov    ebp,esp
c0024a0f:	83 ec 14             	sub    esp,0x14
c0024a12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0024a15:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0024a18:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024a1c:	75 1e                	jne    c0024a3c <PIC::eoi(unsigned char)+0x30>
c0024a1e:	6a 0b                	push   0xb
c0024a20:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a23:	e8 7a ff ff ff       	call   c00249a2 <PIC::getIRQReg(int)>
c0024a28:	83 c4 08             	add    esp,0x8
c0024a2b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0024a2f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0024a33:	25 80 00 00 00       	and    eax,0x80
c0024a38:	85 c0                	test   eax,eax
c0024a3a:	74 5f                	je     c0024a9b <PIC::eoi(unsigned char)+0x8f>
c0024a3c:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0024a40:	75 2d                	jne    c0024a6f <PIC::eoi(unsigned char)+0x63>
c0024a42:	6a 0b                	push   0xb
c0024a44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024a47:	e8 56 ff ff ff       	call   c00249a2 <PIC::getIRQReg(int)>
c0024a4c:	83 c4 08             	add    esp,0x8
c0024a4f:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0024a53:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0024a56:	66 85 c0             	test   ax,ax
c0024a59:	78 14                	js     c0024a6f <PIC::eoi(unsigned char)+0x63>
c0024a5b:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0024a61:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0024a65:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0024a68:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0024a6c:	ee                   	out    dx,al
c0024a6d:	eb 2d                	jmp    c0024a9c <PIC::eoi(unsigned char)+0x90>
c0024a6f:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0024a73:	76 12                	jbe    c0024a87 <PIC::eoi(unsigned char)+0x7b>
c0024a75:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0024a7b:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0024a7f:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024a82:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024a86:	ee                   	out    dx,al
c0024a87:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0024a8d:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0024a91:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024a94:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024a98:	ee                   	out    dx,al
c0024a99:	eb 01                	jmp    c0024a9c <PIC::eoi(unsigned char)+0x90>
c0024a9b:	90                   	nop
c0024a9c:	c9                   	leave  
c0024a9d:	c3                   	ret    

c0024a9e <PIC::remap()>:
c0024a9e:	55                   	push   ebp
c0024a9f:	89 e5                	mov    ebp,esp
c0024aa1:	83 ec 48             	sub    esp,0x48
c0024aa4:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0024aab:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0024ab2:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0024ab8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0024abb:	89 c2                	mov    edx,eax
c0024abd:	ec                   	in     al,dx
c0024abe:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0024ac1:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0024ac4:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0024ac7:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0024acd:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0024ad0:	89 c2                	mov    edx,eax
c0024ad2:	ec                   	in     al,dx
c0024ad3:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0024ad6:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0024ad9:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0024adc:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0024ae2:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0024ae6:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0024ae9:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0024aec:	ee                   	out    dx,al
c0024aed:	83 ec 0c             	sub    esp,0xc
c0024af0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024af3:	e8 a4 fe ff ff       	call   c002499c <PIC::ioWait()>
c0024af8:	83 c4 10             	add    esp,0x10
c0024afb:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0024b01:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0024b05:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0024b08:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0024b0b:	ee                   	out    dx,al
c0024b0c:	83 ec 0c             	sub    esp,0xc
c0024b0f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b12:	e8 85 fe ff ff       	call   c002499c <PIC::ioWait()>
c0024b17:	83 c4 10             	add    esp,0x10
c0024b1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0024b1d:	0f b6 c0             	movzx  eax,al
c0024b20:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0024b26:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0024b29:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0024b2c:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0024b2f:	ee                   	out    dx,al
c0024b30:	83 ec 0c             	sub    esp,0xc
c0024b33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b36:	e8 61 fe ff ff       	call   c002499c <PIC::ioWait()>
c0024b3b:	83 c4 10             	add    esp,0x10
c0024b3e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0024b41:	0f b6 c0             	movzx  eax,al
c0024b44:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0024b4a:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0024b4d:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0024b50:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0024b53:	ee                   	out    dx,al
c0024b54:	83 ec 0c             	sub    esp,0xc
c0024b57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b5a:	e8 3d fe ff ff       	call   c002499c <PIC::ioWait()>
c0024b5f:	83 c4 10             	add    esp,0x10
c0024b62:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0024b68:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0024b6c:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0024b6f:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0024b72:	ee                   	out    dx,al
c0024b73:	83 ec 0c             	sub    esp,0xc
c0024b76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b79:	e8 1e fe ff ff       	call   c002499c <PIC::ioWait()>
c0024b7e:	83 c4 10             	add    esp,0x10
c0024b81:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0024b87:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0024b8b:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0024b8e:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0024b91:	ee                   	out    dx,al
c0024b92:	83 ec 0c             	sub    esp,0xc
c0024b95:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024b98:	e8 ff fd ff ff       	call   c002499c <PIC::ioWait()>
c0024b9d:	83 c4 10             	add    esp,0x10
c0024ba0:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0024ba6:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0024baa:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0024bad:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0024bb0:	ee                   	out    dx,al
c0024bb1:	83 ec 0c             	sub    esp,0xc
c0024bb4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024bb7:	e8 e0 fd ff ff       	call   c002499c <PIC::ioWait()>
c0024bbc:	83 c4 10             	add    esp,0x10
c0024bbf:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0024bc5:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0024bc9:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0024bcc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0024bcf:	ee                   	out    dx,al
c0024bd0:	83 ec 0c             	sub    esp,0xc
c0024bd3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024bd6:	e8 c1 fd ff ff       	call   c002499c <PIC::ioWait()>
c0024bdb:	83 c4 10             	add    esp,0x10
c0024bde:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0024be2:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0024be8:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0024beb:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0024bee:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0024bf1:	ee                   	out    dx,al
c0024bf2:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0024bf6:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0024bfc:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0024bff:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0024c02:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0024c05:	ee                   	out    dx,al
c0024c06:	90                   	nop
c0024c07:	c9                   	leave  
c0024c08:	c3                   	ret    
c0024c09:	90                   	nop

c0024c0a <PIC::open(int, int, void*)>:
c0024c0a:	55                   	push   ebp
c0024c0b:	89 e5                	mov    ebp,esp
c0024c0d:	83 ec 18             	sub    esp,0x18
c0024c10:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0024c16:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0024c1a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0024c1d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0024c21:	ee                   	out    dx,al
c0024c22:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0024c28:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0024c2c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0024c2f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0024c33:	ee                   	out    dx,al
c0024c34:	83 ec 0c             	sub    esp,0xc
c0024c37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0024c3a:	e8 5f fe ff ff       	call   c0024a9e <PIC::remap()>
c0024c3f:	83 c4 10             	add    esp,0x10
c0024c42:	b8 00 00 00 00       	mov    eax,0x0
c0024c47:	c9                   	leave  
c0024c48:	c3                   	ret    
c0024c49:	90                   	nop

c0024c4a <APICTimer::close(int, int, void*)>:
c0024c4a:	b8 00 00 00 00       	mov    eax,0x0
c0024c4f:	c3                   	ret    

c0024c50 <apicTimerHandler(regs*, void*)>:
c0024c50:	83 ec 0c             	sub    esp,0xc
c0024c53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0024c59:	99                   	cdq    
c0024c5a:	52                   	push   edx
c0024c5b:	50                   	push   eax
c0024c5c:	6a 00                	push   0x0
c0024c5e:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024c63:	e8 84 07 00 00       	call   c00253ec <__udivdi3>
c0024c68:	83 c4 10             	add    esp,0x10
c0024c6b:	83 ec 08             	sub    esp,0x8
c0024c6e:	52                   	push   edx
c0024c6f:	50                   	push   eax
c0024c70:	e8 82 17 ff ff       	call   c00163f7 <timerHandler(unsigned long long)>
c0024c75:	83 c4 10             	add    esp,0x10
c0024c78:	90                   	nop
c0024c79:	83 c4 0c             	add    esp,0xc
c0024c7c:	c3                   	ret    
c0024c7d:	90                   	nop

c0024c7e <APICTimer::write(int)>:
c0024c7e:	53                   	push   ebx
c0024c7f:	83 ec 28             	sub    esp,0x28
c0024c82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024c86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0024c8a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024c90:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0024c95:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024c9b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024ca1:	83 ec 0c             	sub    esp,0xc
c0024ca4:	50                   	push   eax
c0024ca5:	e8 de f4 ff ff       	call   c0024188 <APIC::getBase()>
c0024caa:	83 c4 10             	add    esp,0x10
c0024cad:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024cb1:	a1 10 d0 02 c0       	mov    eax,ds:0xc002d010
c0024cb6:	8b 15 14 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d014
c0024cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cc0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0024cc4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cc8:	05 e0 03 00 00       	add    eax,0x3e0
c0024ccd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024cd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024cd7:	05 80 03 00 00       	add    eax,0x380
c0024cdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0024ce2:	fb                   	sti    
c0024ce3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ce7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0024ceb:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0024cf0:	83 d2 00             	adc    edx,0x0
c0024cf3:	89 c1                	mov    ecx,eax
c0024cf5:	89 d3                	mov    ebx,edx
c0024cf7:	a1 10 d0 02 c0       	mov    eax,ds:0xc002d010
c0024cfc:	8b 15 14 d0 02 c0    	mov    edx,DWORD PTR ds:0xc002d014
c0024d02:	39 c8                	cmp    eax,ecx
c0024d04:	89 d0                	mov    eax,edx
c0024d06:	19 d8                	sbb    eax,ebx
c0024d08:	73 02                	jae    c0024d0c <APICTimer::write(int)+0x8e>
c0024d0a:	eb d7                	jmp    c0024ce3 <APICTimer::write(int)+0x65>
c0024d0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d10:	05 20 03 00 00       	add    eax,0x320
c0024d15:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0024d1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d1f:	05 90 03 00 00       	add    eax,0x390
c0024d24:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d26:	f7 d0                	not    eax
c0024d28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d2c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024d30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024d34:	ba 00 00 00 00       	mov    edx,0x0
c0024d39:	f7 f3                	div    ebx
c0024d3b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024d3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0024d43:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0024d49:	0d 00 00 02 00       	or     eax,0x20000
c0024d4e:	89 c2                	mov    edx,eax
c0024d50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d54:	05 20 03 00 00       	add    eax,0x320
c0024d59:	89 10                	mov    DWORD PTR [eax],edx
c0024d5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d5f:	05 e0 03 00 00       	add    eax,0x3e0
c0024d64:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0024d6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024d6e:	05 80 03 00 00       	add    eax,0x380
c0024d73:	89 c2                	mov    edx,eax
c0024d75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024d79:	89 02                	mov    DWORD PTR [edx],eax
c0024d7b:	90                   	nop
c0024d7c:	83 c4 28             	add    esp,0x28
c0024d7f:	5b                   	pop    ebx
c0024d80:	c3                   	ret    
c0024d81:	90                   	nop

c0024d82 <APICTimer::open(int, int, void*)>:
c0024d82:	57                   	push   edi
c0024d83:	56                   	push   esi
c0024d84:	53                   	push   ebx
c0024d85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d89:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d8b:	83 c0 24             	add    eax,0x24
c0024d8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024d90:	83 ec 08             	sub    esp,0x8
c0024d93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024d9b:	ff d0                	call   eax
c0024d9d:	83 c4 10             	add    esp,0x10
c0024da0:	a1 88 c9 02 c0       	mov    eax,ds:0xc002c988
c0024da5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024dab:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0024db1:	83 ec 0c             	sub    esp,0xc
c0024db4:	50                   	push   eax
c0024db5:	e8 ce f3 ff ff       	call   c0024188 <APIC::getBase()>
c0024dba:	83 c4 10             	add    esp,0x10
c0024dbd:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0024dc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024dc7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024dcd:	0f b6 f8             	movzx  edi,al
c0024dd0:	89 d0                	mov    eax,edx
c0024dd2:	ba 00 00 00 00       	mov    edx,0x0
c0024dd7:	89 c1                	mov    ecx,eax
c0024dd9:	80 e5 ff             	and    ch,0xff
c0024ddc:	89 cb                	mov    ebx,ecx
c0024dde:	0f b6 f2             	movzx  esi,dl
c0024de1:	89 d8                	mov    eax,ebx
c0024de3:	89 f2                	mov    edx,esi
c0024de5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024de9:	8d 5f 08             	lea    ebx,[edi+0x8]
c0024dec:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0024df0:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0024df4:	83 e0 00             	and    eax,0x0
c0024df7:	09 d0                	or     eax,edx
c0024df9:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0024dfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e01:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0024e07:	8d 50 01             	lea    edx,[eax+0x1]
c0024e0a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0024e0e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0024e14:	0f b6 d0             	movzx  edx,al
c0024e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e1b:	83 c2 08             	add    edx,0x8
c0024e1e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0024e22:	0f b6 c9             	movzx  ecx,cl
c0024e25:	81 c9 00 00 01 00    	or     ecx,0x10000
c0024e2b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0024e2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e33:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024e37:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0024e3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e41:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e45:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0024e4b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024e4f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0024e55:	83 ec 0c             	sub    esp,0xc
c0024e58:	51                   	push   ecx
c0024e59:	6a 01                	push   0x1
c0024e5b:	68 50 4c 02 c0       	push   0xc0024c50
c0024e60:	52                   	push   edx
c0024e61:	50                   	push   eax
c0024e62:	e8 cd ec fe ff       	call   c0013b34 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024e67:	83 c4 20             	add    esp,0x20
c0024e6a:	89 c2                	mov    edx,eax
c0024e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e70:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024e76:	b8 00 00 00 00       	mov    eax,0x0
c0024e7b:	5b                   	pop    ebx
c0024e7c:	5e                   	pop    esi
c0024e7d:	5f                   	pop    edi
c0024e7e:	c3                   	ret    
c0024e7f:	90                   	nop

c0024e80 <APICTimer::APICTimer()>:
c0024e80:	83 ec 0c             	sub    esp,0xc
c0024e83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e87:	83 ec 08             	sub    esp,0x8
c0024e8a:	68 1c b8 02 c0       	push   0xc002b81c
c0024e8f:	50                   	push   eax
c0024e90:	e8 d3 14 ff ff       	call   c0016368 <Timer::Timer(char const*)>
c0024e95:	83 c4 10             	add    esp,0x10
c0024e98:	ba 30 b8 02 c0       	mov    edx,0xc002b830
c0024e9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ea1:	89 10                	mov    DWORD PTR [eax],edx
c0024ea3:	90                   	nop
c0024ea4:	83 c4 0c             	add    esp,0xc
c0024ea7:	c3                   	ret    

c0024ea8 <PIT::write(int)>:
c0024ea8:	83 ec 10             	sub    esp,0x10
c0024eab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024eaf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0024eb3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024eb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024ebd:	a3 24 ed 02 c0       	mov    ds:0xc002ed24,eax
c0024ec2:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0024ec7:	99                   	cdq    
c0024ec8:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0024ecc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024ed0:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0024ed7:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0024edc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0024ee0:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0024ee5:	ee                   	out    dx,al
c0024ee6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024eea:	0f b6 c0             	movzx  eax,al
c0024eed:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0024ef4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0024ef8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0024efc:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0024f01:	ee                   	out    dx,al
c0024f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024f06:	c1 f8 08             	sar    eax,0x8
c0024f09:	0f b6 c0             	movzx  eax,al
c0024f0c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0024f13:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0024f17:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0024f1b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0024f20:	ee                   	out    dx,al
c0024f21:	90                   	nop
c0024f22:	83 c4 10             	add    esp,0x10
c0024f25:	c3                   	ret    

c0024f26 <pitHandler(regs*, void*)>:
c0024f26:	83 ec 0c             	sub    esp,0xc
c0024f29:	a1 24 ed 02 c0       	mov    eax,ds:0xc002ed24
c0024f2e:	99                   	cdq    
c0024f2f:	52                   	push   edx
c0024f30:	50                   	push   eax
c0024f31:	6a 00                	push   0x0
c0024f33:	68 00 ca 9a 3b       	push   0x3b9aca00
c0024f38:	e8 af 04 00 00       	call   c00253ec <__udivdi3>
c0024f3d:	83 c4 10             	add    esp,0x10
c0024f40:	83 ec 08             	sub    esp,0x8
c0024f43:	52                   	push   edx
c0024f44:	50                   	push   eax
c0024f45:	e8 ad 14 ff ff       	call   c00163f7 <timerHandler(unsigned long long)>
c0024f4a:	83 c4 10             	add    esp,0x10
c0024f4d:	90                   	nop
c0024f4e:	83 c4 0c             	add    esp,0xc
c0024f51:	c3                   	ret    

c0024f52 <PIT::open(int, int, void*)>:
c0024f52:	83 ec 0c             	sub    esp,0xc
c0024f55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f59:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f5b:	83 c0 24             	add    eax,0x24
c0024f5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0024f60:	83 ec 08             	sub    esp,0x8
c0024f63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f6b:	ff d0                	call   eax
c0024f6d:	83 c4 10             	add    esp,0x10
c0024f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f74:	83 ec 0c             	sub    esp,0xc
c0024f77:	6a 00                	push   0x0
c0024f79:	6a 01                	push   0x1
c0024f7b:	68 26 4f 02 c0       	push   0xc0024f26
c0024f80:	6a 00                	push   0x0
c0024f82:	50                   	push   eax
c0024f83:	e8 ac eb fe ff       	call   c0013b34 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0024f88:	83 c4 20             	add    esp,0x20
c0024f8b:	89 c2                	mov    edx,eax
c0024f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024f91:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0024f97:	b8 00 00 00 00       	mov    eax,0x0
c0024f9c:	83 c4 0c             	add    esp,0xc
c0024f9f:	c3                   	ret    

c0024fa0 <PIT::close(int, int, void*)>:
c0024fa0:	83 ec 0c             	sub    esp,0xc
c0024fa3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fa7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0024fb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fb5:	6a 01                	push   0x1
c0024fb7:	68 26 4f 02 c0       	push   0xc0024f26
c0024fbc:	6a 00                	push   0x0
c0024fbe:	50                   	push   eax
c0024fbf:	e8 ae eb fe ff       	call   c0013b72 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0024fc4:	83 c4 10             	add    esp,0x10
c0024fc7:	b8 00 00 00 00       	mov    eax,0x0
c0024fcc:	83 c4 0c             	add    esp,0xc
c0024fcf:	c3                   	ret    

c0024fd0 <PIT::PIT()>:
c0024fd0:	83 ec 0c             	sub    esp,0xc
c0024fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024fd7:	83 ec 08             	sub    esp,0x8
c0024fda:	68 58 b8 02 c0       	push   0xc002b858
c0024fdf:	50                   	push   eax
c0024fe0:	e8 83 13 ff ff       	call   c0016368 <Timer::Timer(char const*)>
c0024fe5:	83 c4 10             	add    esp,0x10
c0024fe8:	ba 80 b8 02 c0       	mov    edx,0xc002b880
c0024fed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ff1:	89 10                	mov    DWORD PTR [eax],edx
c0024ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024ff7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0024ffd:	0f b6 d0             	movzx  edx,al
c0025000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025004:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c002500b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002500f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025015:	0f b6 d0             	movzx  edx,al
c0025018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002501c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0025021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025025:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002502b:	8d 50 01             	lea    edx,[eax+0x1]
c002502e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025032:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025038:	0f b6 d0             	movzx  edx,al
c002503b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002503f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025043:	83 e1 3f             	and    ecx,0x3f
c0025046:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002504a:	90                   	nop
c002504b:	83 c4 0c             	add    esp,0xc
c002504e:	c3                   	ret    
c002504f:	90                   	nop

c0025050 <avxDetect>:
c0025050:	b8 00 00 00 00       	mov    eax,0x0
c0025055:	c3                   	ret    

c0025056 <avxSave>:
c0025056:	c3                   	ret    

c0025057 <avxLoad>:
c0025057:	c3                   	ret    

c0025058 <avxInit>:
c0025058:	c3                   	ret    

c0025059 <avxClose>:
c0025059:	c3                   	ret    

c002505a <wouldSheSayYes>:
c002505a:	c3                   	ret    
c002505b:	49                   	dec    ecx
c002505c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0025060:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0025064:	75 20                	jne    c0025086 <sseDetect.noSSE+0x1>
c0025066:	4e                   	dec    esi
c0025067:	79 61                	jns    c00250ca <x87Detect+0x14>
c0025069:	68 2e 2e 2e 00       	push   0x2e2e2e
c002506e:	66 90                	xchg   ax,ax

c0025070 <absolutelyNoChanceInHell>:
c0025070:	b8 01 00 00 00       	mov    eax,0x1
c0025075:	0f a2                	cpuid  
c0025077:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002507d:	74 06                	je     c0025085 <sseDetect.noSSE>
c002507f:	b8 01 00 00 00       	mov    eax,0x1
c0025084:	c3                   	ret    

c0025085 <sseDetect.noSSE>:
c0025085:	31 c0                	xor    eax,eax
c0025087:	c3                   	ret    

c0025088 <sseSave>:
c0025088:	0f ae 44 24 08       	fxsave [esp+0x8]
c002508d:	c3                   	ret    

c002508e <sseLoad>:
c002508e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0025093:	c3                   	ret    

c0025094 <sseInit>:
c0025094:	e8 43 00 00 00       	call   c00250dc <x87Init>
c0025099:	0f 20 e0             	mov    eax,cr4
c002509c:	66 0d 00 06          	or     ax,0x600
c00250a0:	0f 22 e0             	mov    cr4,eax
c00250a3:	c3                   	ret    

c00250a4 <sseClose>:
c00250a4:	c3                   	ret    
c00250a5:	66 90                	xchg   ax,ax
c00250a7:	66 90                	xchg   ax,ax
c00250a9:	66 90                	xchg   ax,ax
c00250ab:	66 90                	xchg   ax,ax
c00250ad:	66 90                	xchg   ax,ax
c00250af:	90                   	nop

c00250b0 <value_37F>:
c00250b0:	7f 03                	jg     c00250b5 <value_37A+0x1>

c00250b2 <value_37E>:
c00250b2:	7e 03                	jle    c00250b7 <x87Detect+0x1>

c00250b4 <value_37A>:
c00250b4:	7a 03                	jp     c00250b9 <x87Detect+0x3>

c00250b6 <x87Detect>:
c00250b6:	b8 01 00 00 00       	mov    eax,0x1
c00250bb:	0f a2                	cpuid  
c00250bd:	f7 c2 01 00 00 00    	test   edx,0x1
c00250c3:	74 06                	je     c00250cb <x87Detect.nox87>
c00250c5:	b8 01 00 00 00       	mov    eax,0x1
c00250ca:	c3                   	ret    

c00250cb <x87Detect.nox87>:
c00250cb:	b8 00 00 00 00       	mov    eax,0x0
c00250d0:	c3                   	ret    

c00250d1 <x87Save>:
c00250d1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00250d6:	c3                   	ret    

c00250d7 <x87Load>:
c00250d7:	dd 64 24 08          	frstor [esp+0x8]
c00250db:	c3                   	ret    

c00250dc <x87Init>:
c00250dc:	9b db e3             	finit  
c00250df:	0f 20 c0             	mov    eax,cr0
c00250e2:	66 25 fb ff          	and    ax,0xfffb
c00250e6:	66 0d 22 00          	or     ax,0x22
c00250ea:	0f 22 c0             	mov    cr0,eax
c00250ed:	0f 06                	clts   
c00250ef:	d9 2d b4 50 02 c0    	fldcw  WORD PTR ds:0xc00250b4
c00250f5:	c3                   	ret    

c00250f6 <x87Close>:
c00250f6:	c3                   	ret    
c00250f7:	90                   	nop

c00250f8 <__do_global_ctors_aux>:
c00250f8:	a1 ec 7b 02 c0       	mov    eax,ds:0xc0027bec
c00250fd:	83 f8 ff             	cmp    eax,0xffffffff
c0025100:	74 1a                	je     c002511c <__do_global_ctors_aux+0x24>
c0025102:	55                   	push   ebp
c0025103:	89 e5                	mov    ebp,esp
c0025105:	53                   	push   ebx
c0025106:	52                   	push   edx
c0025107:	bb ec 7b 02 c0       	mov    ebx,0xc0027bec
c002510c:	ff d0                	call   eax
c002510e:	83 eb 04             	sub    ebx,0x4
c0025111:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025113:	83 f8 ff             	cmp    eax,0xffffffff
c0025116:	75 f4                	jne    c002510c <__do_global_ctors_aux+0x14>
c0025118:	58                   	pop    eax
c0025119:	5b                   	pop    ebx
c002511a:	5d                   	pop    ebp
c002511b:	c3                   	ret    
c002511c:	c3                   	ret    
c002511d:	66 90                	xchg   ax,ax
c002511f:	90                   	nop

c0025120 <__divdi3>:
c0025120:	55                   	push   ebp
c0025121:	57                   	push   edi
c0025122:	56                   	push   esi
c0025123:	53                   	push   ebx
c0025124:	83 ec 1c             	sub    esp,0x1c
c0025127:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002512b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002512f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0025132:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0025136:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002513a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002513e:	85 db                	test   ebx,ebx
c0025140:	0f 88 8e 00 00 00    	js     c00251d4 <__divdi3+0xb4>
c0025146:	89 dd                	mov    ebp,ebx
c0025148:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0025150:	89 d3                	mov    ebx,edx
c0025152:	85 d2                	test   edx,edx
c0025154:	79 0d                	jns    c0025163 <__divdi3+0x43>
c0025156:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002515a:	f7 d8                	neg    eax
c002515c:	83 d2 00             	adc    edx,0x0
c002515f:	f7 da                	neg    edx
c0025161:	89 d3                	mov    ebx,edx
c0025163:	89 c7                	mov    edi,eax
c0025165:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0025168:	85 db                	test   ebx,ebx
c002516a:	75 48                	jne    c00251b4 <__divdi3+0x94>
c002516c:	39 ef                	cmp    edi,ebp
c002516e:	76 24                	jbe    c0025194 <__divdi3+0x74>
c0025170:	89 ea                	mov    edx,ebp
c0025172:	f7 f7                	div    edi
c0025174:	89 c1                	mov    ecx,eax
c0025176:	31 f6                	xor    esi,esi
c0025178:	89 c8                	mov    eax,ecx
c002517a:	89 f2                	mov    edx,esi
c002517c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025180:	85 c9                	test   ecx,ecx
c0025182:	74 07                	je     c002518b <__divdi3+0x6b>
c0025184:	f7 d8                	neg    eax
c0025186:	83 d2 00             	adc    edx,0x0
c0025189:	f7 da                	neg    edx
c002518b:	83 c4 1c             	add    esp,0x1c
c002518e:	5b                   	pop    ebx
c002518f:	5e                   	pop    esi
c0025190:	5f                   	pop    edi
c0025191:	5d                   	pop    ebp
c0025192:	c3                   	ret    
c0025193:	90                   	nop
c0025194:	85 ff                	test   edi,edi
c0025196:	75 0b                	jne    c00251a3 <__divdi3+0x83>
c0025198:	b8 01 00 00 00       	mov    eax,0x1
c002519d:	31 d2                	xor    edx,edx
c002519f:	f7 f3                	div    ebx
c00251a1:	89 c7                	mov    edi,eax
c00251a3:	31 d2                	xor    edx,edx
c00251a5:	89 e8                	mov    eax,ebp
c00251a7:	f7 f7                	div    edi
c00251a9:	89 c6                	mov    esi,eax
c00251ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00251ae:	f7 f7                	div    edi
c00251b0:	89 c1                	mov    ecx,eax
c00251b2:	eb c4                	jmp    c0025178 <__divdi3+0x58>
c00251b4:	39 eb                	cmp    ebx,ebp
c00251b6:	77 3c                	ja     c00251f4 <__divdi3+0xd4>
c00251b8:	0f bd f3             	bsr    esi,ebx
c00251bb:	83 f6 1f             	xor    esi,0x1f
c00251be:	75 40                	jne    c0025200 <__divdi3+0xe0>
c00251c0:	39 eb                	cmp    ebx,ebp
c00251c2:	72 09                	jb     c00251cd <__divdi3+0xad>
c00251c4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00251c7:	0f 87 97 00 00 00    	ja     c0025264 <__divdi3+0x144>
c00251cd:	b9 01 00 00 00       	mov    ecx,0x1
c00251d2:	eb a4                	jmp    c0025178 <__divdi3+0x58>
c00251d4:	f7 d9                	neg    ecx
c00251d6:	83 d3 00             	adc    ebx,0x0
c00251d9:	f7 db                	neg    ebx
c00251db:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00251de:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00251e2:	89 dd                	mov    ebp,ebx
c00251e4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00251ec:	e9 5f ff ff ff       	jmp    c0025150 <__divdi3+0x30>
c00251f1:	8d 76 00             	lea    esi,[esi+0x0]
c00251f4:	31 f6                	xor    esi,esi
c00251f6:	31 c9                	xor    ecx,ecx
c00251f8:	e9 7b ff ff ff       	jmp    c0025178 <__divdi3+0x58>
c00251fd:	8d 76 00             	lea    esi,[esi+0x0]
c0025200:	b8 20 00 00 00       	mov    eax,0x20
c0025205:	29 f0                	sub    eax,esi
c0025207:	89 f1                	mov    ecx,esi
c0025209:	d3 e3                	shl    ebx,cl
c002520b:	89 fa                	mov    edx,edi
c002520d:	88 c1                	mov    cl,al
c002520f:	d3 ea                	shr    edx,cl
c0025211:	09 da                	or     edx,ebx
c0025213:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025217:	89 f1                	mov    ecx,esi
c0025219:	d3 e7                	shl    edi,cl
c002521b:	89 eb                	mov    ebx,ebp
c002521d:	88 c1                	mov    cl,al
c002521f:	d3 eb                	shr    ebx,cl
c0025221:	89 f1                	mov    ecx,esi
c0025223:	d3 e5                	shl    ebp,cl
c0025225:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0025228:	88 c1                	mov    cl,al
c002522a:	d3 ea                	shr    edx,cl
c002522c:	09 d5                	or     ebp,edx
c002522e:	89 e8                	mov    eax,ebp
c0025230:	89 da                	mov    edx,ebx
c0025232:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0025236:	89 d3                	mov    ebx,edx
c0025238:	89 c5                	mov    ebp,eax
c002523a:	f7 e7                	mul    edi
c002523c:	39 d3                	cmp    ebx,edx
c002523e:	72 18                	jb     c0025258 <__divdi3+0x138>
c0025240:	74 0a                	je     c002524c <__divdi3+0x12c>
c0025242:	89 e9                	mov    ecx,ebp
c0025244:	31 f6                	xor    esi,esi
c0025246:	e9 2d ff ff ff       	jmp    c0025178 <__divdi3+0x58>
c002524b:	90                   	nop
c002524c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002524f:	89 f1                	mov    ecx,esi
c0025251:	d3 e7                	shl    edi,cl
c0025253:	39 c7                	cmp    edi,eax
c0025255:	73 eb                	jae    c0025242 <__divdi3+0x122>
c0025257:	90                   	nop
c0025258:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002525b:	31 f6                	xor    esi,esi
c002525d:	e9 16 ff ff ff       	jmp    c0025178 <__divdi3+0x58>
c0025262:	66 90                	xchg   ax,ax
c0025264:	31 c9                	xor    ecx,ecx
c0025266:	e9 0d ff ff ff       	jmp    c0025178 <__divdi3+0x58>
c002526b:	90                   	nop

c002526c <__moddi3>:
c002526c:	55                   	push   ebp
c002526d:	57                   	push   edi
c002526e:	56                   	push   esi
c002526f:	53                   	push   ebx
c0025270:	83 ec 2c             	sub    esp,0x2c
c0025273:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0025277:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002527b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002527f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0025283:	85 db                	test   ebx,ebx
c0025285:	0f 88 85 00 00 00    	js     c0025310 <__moddi3+0xa4>
c002528b:	89 de                	mov    esi,ebx
c002528d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0025295:	89 d7                	mov    edi,edx
c0025297:	85 d2                	test   edx,edx
c0025299:	79 09                	jns    c00252a4 <__moddi3+0x38>
c002529b:	f7 d8                	neg    eax
c002529d:	83 d2 00             	adc    edx,0x0
c00252a0:	f7 da                	neg    edx
c00252a2:	89 d7                	mov    edi,edx
c00252a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252a8:	89 cd                	mov    ebp,ecx
c00252aa:	85 ff                	test   edi,edi
c00252ac:	75 52                	jne    c0025300 <__moddi3+0x94>
c00252ae:	89 c3                	mov    ebx,eax
c00252b0:	39 f0                	cmp    eax,esi
c00252b2:	76 24                	jbe    c00252d8 <__moddi3+0x6c>
c00252b4:	89 c8                	mov    eax,ecx
c00252b6:	89 f2                	mov    edx,esi
c00252b8:	f7 f3                	div    ebx
c00252ba:	89 d6                	mov    esi,edx
c00252bc:	89 f0                	mov    eax,esi
c00252be:	31 d2                	xor    edx,edx
c00252c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00252c4:	85 c9                	test   ecx,ecx
c00252c6:	74 07                	je     c00252cf <__moddi3+0x63>
c00252c8:	f7 d8                	neg    eax
c00252ca:	83 d2 00             	adc    edx,0x0
c00252cd:	f7 da                	neg    edx
c00252cf:	83 c4 2c             	add    esp,0x2c
c00252d2:	5b                   	pop    ebx
c00252d3:	5e                   	pop    esi
c00252d4:	5f                   	pop    edi
c00252d5:	5d                   	pop    ebp
c00252d6:	c3                   	ret    
c00252d7:	90                   	nop
c00252d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00252dc:	85 db                	test   ebx,ebx
c00252de:	75 0d                	jne    c00252ed <__moddi3+0x81>
c00252e0:	b8 01 00 00 00       	mov    eax,0x1
c00252e5:	31 d2                	xor    edx,edx
c00252e7:	f7 f7                	div    edi
c00252e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00252ed:	89 f0                	mov    eax,esi
c00252ef:	31 d2                	xor    edx,edx
c00252f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00252f5:	f7 f7                	div    edi
c00252f7:	89 e8                	mov    eax,ebp
c00252f9:	f7 f7                	div    edi
c00252fb:	89 d6                	mov    esi,edx
c00252fd:	eb bd                	jmp    c00252bc <__moddi3+0x50>
c00252ff:	90                   	nop
c0025300:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0025304:	39 f7                	cmp    edi,esi
c0025306:	76 20                	jbe    c0025328 <__moddi3+0xbc>
c0025308:	89 c8                	mov    eax,ecx
c002530a:	89 f2                	mov    edx,esi
c002530c:	eb b2                	jmp    c00252c0 <__moddi3+0x54>
c002530e:	66 90                	xchg   ax,ax
c0025310:	f7 d9                	neg    ecx
c0025312:	83 d3 00             	adc    ebx,0x0
c0025315:	f7 db                	neg    ebx
c0025317:	89 de                	mov    esi,ebx
c0025319:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0025321:	e9 6f ff ff ff       	jmp    c0025295 <__moddi3+0x29>
c0025326:	66 90                	xchg   ax,ax
c0025328:	0f bd c7             	bsr    eax,edi
c002532b:	83 f0 1f             	xor    eax,0x1f
c002532e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0025332:	75 24                	jne    c0025358 <__moddi3+0xec>
c0025334:	39 f7                	cmp    edi,esi
c0025336:	72 06                	jb     c002533e <__moddi3+0xd2>
c0025338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002533c:	77 0c                	ja     c002534a <__moddi3+0xde>
c002533e:	89 e9                	mov    ecx,ebp
c0025340:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0025344:	19 fe                	sbb    esi,edi
c0025346:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002534a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002534e:	89 f2                	mov    edx,esi
c0025350:	e9 6b ff ff ff       	jmp    c00252c0 <__moddi3+0x54>
c0025355:	8d 76 00             	lea    esi,[esi+0x0]
c0025358:	b8 20 00 00 00       	mov    eax,0x20
c002535d:	89 c2                	mov    edx,eax
c002535f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0025363:	29 da                	sub    edx,ebx
c0025365:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0025369:	88 d9                	mov    cl,bl
c002536b:	d3 e7                	shl    edi,cl
c002536d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025371:	88 d1                	mov    cl,dl
c0025373:	d3 e8                	shr    eax,cl
c0025375:	09 c7                	or     edi,eax
c0025377:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002537b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002537f:	89 d8                	mov    eax,ebx
c0025381:	88 d9                	mov    cl,bl
c0025383:	d3 e7                	shl    edi,cl
c0025385:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0025389:	89 f3                	mov    ebx,esi
c002538b:	88 d1                	mov    cl,dl
c002538d:	d3 eb                	shr    ebx,cl
c002538f:	89 c7                	mov    edi,eax
c0025391:	88 c1                	mov    cl,al
c0025393:	d3 e6                	shl    esi,cl
c0025395:	89 e8                	mov    eax,ebp
c0025397:	88 d1                	mov    cl,dl
c0025399:	d3 e8                	shr    eax,cl
c002539b:	09 f0                	or     eax,esi
c002539d:	89 f9                	mov    ecx,edi
c002539f:	d3 e5                	shl    ebp,cl
c00253a1:	89 da                	mov    edx,ebx
c00253a3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00253a7:	89 d3                	mov    ebx,edx
c00253a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00253ad:	89 c6                	mov    esi,eax
c00253af:	89 d1                	mov    ecx,edx
c00253b1:	39 d3                	cmp    ebx,edx
c00253b3:	72 27                	jb     c00253dc <__moddi3+0x170>
c00253b5:	74 21                	je     c00253d8 <__moddi3+0x16c>
c00253b7:	29 f5                	sub    ebp,esi
c00253b9:	19 cb                	sbb    ebx,ecx
c00253bb:	89 de                	mov    esi,ebx
c00253bd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00253c1:	d3 e6                	shl    esi,cl
c00253c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00253c7:	89 f9                	mov    ecx,edi
c00253c9:	d3 ed                	shr    ebp,cl
c00253cb:	09 ee                	or     esi,ebp
c00253cd:	89 f0                	mov    eax,esi
c00253cf:	d3 eb                	shr    ebx,cl
c00253d1:	89 da                	mov    edx,ebx
c00253d3:	e9 e8 fe ff ff       	jmp    c00252c0 <__moddi3+0x54>
c00253d8:	39 c5                	cmp    ebp,eax
c00253da:	73 db                	jae    c00253b7 <__moddi3+0x14b>
c00253dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00253e0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00253e4:	89 d1                	mov    ecx,edx
c00253e6:	89 c6                	mov    esi,eax
c00253e8:	eb cd                	jmp    c00253b7 <__moddi3+0x14b>
c00253ea:	66 90                	xchg   ax,ax

c00253ec <__udivdi3>:
c00253ec:	55                   	push   ebp
c00253ed:	57                   	push   edi
c00253ee:	56                   	push   esi
c00253ef:	53                   	push   ebx
c00253f0:	83 ec 1c             	sub    esp,0x1c
c00253f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00253f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00253fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00253ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0025403:	85 d2                	test   edx,edx
c0025405:	75 41                	jne    c0025448 <__udivdi3+0x5c>
c0025407:	39 f7                	cmp    edi,esi
c0025409:	76 15                	jbe    c0025420 <__udivdi3+0x34>
c002540b:	89 e8                	mov    eax,ebp
c002540d:	89 f2                	mov    edx,esi
c002540f:	f7 f7                	div    edi
c0025411:	31 db                	xor    ebx,ebx
c0025413:	89 da                	mov    edx,ebx
c0025415:	83 c4 1c             	add    esp,0x1c
c0025418:	5b                   	pop    ebx
c0025419:	5e                   	pop    esi
c002541a:	5f                   	pop    edi
c002541b:	5d                   	pop    ebp
c002541c:	c3                   	ret    
c002541d:	8d 76 00             	lea    esi,[esi+0x0]
c0025420:	89 f9                	mov    ecx,edi
c0025422:	85 ff                	test   edi,edi
c0025424:	75 0b                	jne    c0025431 <__udivdi3+0x45>
c0025426:	b8 01 00 00 00       	mov    eax,0x1
c002542b:	31 d2                	xor    edx,edx
c002542d:	f7 f7                	div    edi
c002542f:	89 c1                	mov    ecx,eax
c0025431:	31 d2                	xor    edx,edx
c0025433:	89 f0                	mov    eax,esi
c0025435:	f7 f1                	div    ecx
c0025437:	89 c3                	mov    ebx,eax
c0025439:	89 e8                	mov    eax,ebp
c002543b:	f7 f1                	div    ecx
c002543d:	89 da                	mov    edx,ebx
c002543f:	83 c4 1c             	add    esp,0x1c
c0025442:	5b                   	pop    ebx
c0025443:	5e                   	pop    esi
c0025444:	5f                   	pop    edi
c0025445:	5d                   	pop    ebp
c0025446:	c3                   	ret    
c0025447:	90                   	nop
c0025448:	39 f2                	cmp    edx,esi
c002544a:	77 1c                	ja     c0025468 <__udivdi3+0x7c>
c002544c:	0f bd da             	bsr    ebx,edx
c002544f:	83 f3 1f             	xor    ebx,0x1f
c0025452:	75 24                	jne    c0025478 <__udivdi3+0x8c>
c0025454:	39 f2                	cmp    edx,esi
c0025456:	72 08                	jb     c0025460 <__udivdi3+0x74>
c0025458:	39 ef                	cmp    edi,ebp
c002545a:	0f 87 84 00 00 00    	ja     c00254e4 <__udivdi3+0xf8>
c0025460:	b8 01 00 00 00       	mov    eax,0x1
c0025465:	eb ac                	jmp    c0025413 <__udivdi3+0x27>
c0025467:	90                   	nop
c0025468:	31 db                	xor    ebx,ebx
c002546a:	31 c0                	xor    eax,eax
c002546c:	89 da                	mov    edx,ebx
c002546e:	83 c4 1c             	add    esp,0x1c
c0025471:	5b                   	pop    ebx
c0025472:	5e                   	pop    esi
c0025473:	5f                   	pop    edi
c0025474:	5d                   	pop    ebp
c0025475:	c3                   	ret    
c0025476:	66 90                	xchg   ax,ax
c0025478:	b8 20 00 00 00       	mov    eax,0x20
c002547d:	29 d8                	sub    eax,ebx
c002547f:	88 d9                	mov    cl,bl
c0025481:	d3 e2                	shl    edx,cl
c0025483:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0025487:	89 fa                	mov    edx,edi
c0025489:	88 c1                	mov    cl,al
c002548b:	d3 ea                	shr    edx,cl
c002548d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025491:	09 d1                	or     ecx,edx
c0025493:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025497:	88 d9                	mov    cl,bl
c0025499:	d3 e7                	shl    edi,cl
c002549b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002549f:	89 f7                	mov    edi,esi
c00254a1:	88 c1                	mov    cl,al
c00254a3:	d3 ef                	shr    edi,cl
c00254a5:	88 d9                	mov    cl,bl
c00254a7:	d3 e6                	shl    esi,cl
c00254a9:	89 ea                	mov    edx,ebp
c00254ab:	88 c1                	mov    cl,al
c00254ad:	d3 ea                	shr    edx,cl
c00254af:	09 d6                	or     esi,edx
c00254b1:	89 f0                	mov    eax,esi
c00254b3:	89 fa                	mov    edx,edi
c00254b5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00254b9:	89 d7                	mov    edi,edx
c00254bb:	89 c6                	mov    esi,eax
c00254bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00254c1:	39 d7                	cmp    edi,edx
c00254c3:	72 13                	jb     c00254d8 <__udivdi3+0xec>
c00254c5:	74 09                	je     c00254d0 <__udivdi3+0xe4>
c00254c7:	89 f0                	mov    eax,esi
c00254c9:	31 db                	xor    ebx,ebx
c00254cb:	e9 43 ff ff ff       	jmp    c0025413 <__udivdi3+0x27>
c00254d0:	88 d9                	mov    cl,bl
c00254d2:	d3 e5                	shl    ebp,cl
c00254d4:	39 c5                	cmp    ebp,eax
c00254d6:	73 ef                	jae    c00254c7 <__udivdi3+0xdb>
c00254d8:	8d 46 ff             	lea    eax,[esi-0x1]
c00254db:	31 db                	xor    ebx,ebx
c00254dd:	e9 31 ff ff ff       	jmp    c0025413 <__udivdi3+0x27>
c00254e2:	66 90                	xchg   ax,ax
c00254e4:	31 c0                	xor    eax,eax
c00254e6:	e9 28 ff ff ff       	jmp    c0025413 <__udivdi3+0x27>
c00254eb:	90                   	nop

c00254ec <__umoddi3>:
c00254ec:	55                   	push   ebp
c00254ed:	57                   	push   edi
c00254ee:	56                   	push   esi
c00254ef:	53                   	push   ebx
c00254f0:	83 ec 1c             	sub    esp,0x1c
c00254f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00254f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00254ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0025503:	89 da                	mov    edx,ebx
c0025505:	85 c0                	test   eax,eax
c0025507:	75 37                	jne    c0025540 <__umoddi3+0x54>
c0025509:	39 df                	cmp    edi,ebx
c002550b:	76 13                	jbe    c0025520 <__umoddi3+0x34>
c002550d:	89 f0                	mov    eax,esi
c002550f:	f7 f7                	div    edi
c0025511:	89 d0                	mov    eax,edx
c0025513:	31 d2                	xor    edx,edx
c0025515:	83 c4 1c             	add    esp,0x1c
c0025518:	5b                   	pop    ebx
c0025519:	5e                   	pop    esi
c002551a:	5f                   	pop    edi
c002551b:	5d                   	pop    ebp
c002551c:	c3                   	ret    
c002551d:	8d 76 00             	lea    esi,[esi+0x0]
c0025520:	89 fd                	mov    ebp,edi
c0025522:	85 ff                	test   edi,edi
c0025524:	75 0b                	jne    c0025531 <__umoddi3+0x45>
c0025526:	b8 01 00 00 00       	mov    eax,0x1
c002552b:	31 d2                	xor    edx,edx
c002552d:	f7 f7                	div    edi
c002552f:	89 c5                	mov    ebp,eax
c0025531:	89 d8                	mov    eax,ebx
c0025533:	31 d2                	xor    edx,edx
c0025535:	f7 f5                	div    ebp
c0025537:	89 f0                	mov    eax,esi
c0025539:	f7 f5                	div    ebp
c002553b:	89 d0                	mov    eax,edx
c002553d:	eb d4                	jmp    c0025513 <__umoddi3+0x27>
c002553f:	90                   	nop
c0025540:	89 f1                	mov    ecx,esi
c0025542:	39 d8                	cmp    eax,ebx
c0025544:	76 0a                	jbe    c0025550 <__umoddi3+0x64>
c0025546:	89 f0                	mov    eax,esi
c0025548:	83 c4 1c             	add    esp,0x1c
c002554b:	5b                   	pop    ebx
c002554c:	5e                   	pop    esi
c002554d:	5f                   	pop    edi
c002554e:	5d                   	pop    ebp
c002554f:	c3                   	ret    
c0025550:	0f bd e8             	bsr    ebp,eax
c0025553:	83 f5 1f             	xor    ebp,0x1f
c0025556:	75 1c                	jne    c0025574 <__umoddi3+0x88>
c0025558:	39 d8                	cmp    eax,ebx
c002555a:	72 04                	jb     c0025560 <__umoddi3+0x74>
c002555c:	39 f7                	cmp    edi,esi
c002555e:	77 08                	ja     c0025568 <__umoddi3+0x7c>
c0025560:	89 da                	mov    edx,ebx
c0025562:	29 fe                	sub    esi,edi
c0025564:	19 c2                	sbb    edx,eax
c0025566:	89 f1                	mov    ecx,esi
c0025568:	89 c8                	mov    eax,ecx
c002556a:	83 c4 1c             	add    esp,0x1c
c002556d:	5b                   	pop    ebx
c002556e:	5e                   	pop    esi
c002556f:	5f                   	pop    edi
c0025570:	5d                   	pop    ebp
c0025571:	c3                   	ret    
c0025572:	66 90                	xchg   ax,ax
c0025574:	ba 20 00 00 00       	mov    edx,0x20
c0025579:	29 ea                	sub    edx,ebp
c002557b:	89 e9                	mov    ecx,ebp
c002557d:	d3 e0                	shl    eax,cl
c002557f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025583:	89 f8                	mov    eax,edi
c0025585:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0025589:	88 d1                	mov    cl,dl
c002558b:	d3 e8                	shr    eax,cl
c002558d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0025591:	09 c1                	or     ecx,eax
c0025593:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0025597:	89 e9                	mov    ecx,ebp
c0025599:	d3 e7                	shl    edi,cl
c002559b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002559f:	89 d8                	mov    eax,ebx
c00255a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00255a5:	88 d1                	mov    cl,dl
c00255a7:	d3 e8                	shr    eax,cl
c00255a9:	89 c7                	mov    edi,eax
c00255ab:	89 e9                	mov    ecx,ebp
c00255ad:	d3 e3                	shl    ebx,cl
c00255af:	89 f0                	mov    eax,esi
c00255b1:	88 d1                	mov    cl,dl
c00255b3:	d3 e8                	shr    eax,cl
c00255b5:	09 d8                	or     eax,ebx
c00255b7:	89 e9                	mov    ecx,ebp
c00255b9:	d3 e6                	shl    esi,cl
c00255bb:	89 f3                	mov    ebx,esi
c00255bd:	89 fa                	mov    edx,edi
c00255bf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00255c3:	89 d1                	mov    ecx,edx
c00255c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00255c9:	89 c6                	mov    esi,eax
c00255cb:	89 d7                	mov    edi,edx
c00255cd:	39 d1                	cmp    ecx,edx
c00255cf:	72 27                	jb     c00255f8 <__umoddi3+0x10c>
c00255d1:	74 21                	je     c00255f4 <__umoddi3+0x108>
c00255d3:	89 ca                	mov    edx,ecx
c00255d5:	29 f3                	sub    ebx,esi
c00255d7:	19 fa                	sbb    edx,edi
c00255d9:	89 d0                	mov    eax,edx
c00255db:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00255df:	d3 e0                	shl    eax,cl
c00255e1:	89 e9                	mov    ecx,ebp
c00255e3:	d3 eb                	shr    ebx,cl
c00255e5:	09 d8                	or     eax,ebx
c00255e7:	d3 ea                	shr    edx,cl
c00255e9:	83 c4 1c             	add    esp,0x1c
c00255ec:	5b                   	pop    ebx
c00255ed:	5e                   	pop    esi
c00255ee:	5f                   	pop    edi
c00255ef:	5d                   	pop    ebp
c00255f0:	c3                   	ret    
c00255f1:	8d 76 00             	lea    esi,[esi+0x0]
c00255f4:	39 c3                	cmp    ebx,eax
c00255f6:	73 db                	jae    c00255d3 <__umoddi3+0xe7>
c00255f8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00255fc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0025600:	89 d7                	mov    edi,edx
c0025602:	89 c6                	mov    esi,eax
c0025604:	eb cd                	jmp    c00255d3 <__umoddi3+0xe7>

c0025606 <__addsf3>:
c0025606:	55                   	push   ebp
c0025607:	89 e5                	mov    ebp,esp
c0025609:	57                   	push   edi
c002560a:	56                   	push   esi
c002560b:	53                   	push   ebx
c002560c:	83 ec 08             	sub    esp,0x8
c002560f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025612:	89 fa                	mov    edx,edi
c0025614:	89 f8                	mov    eax,edi
c0025616:	c1 f8 17             	sar    eax,0x17
c0025619:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002561c:	c1 e2 08             	shl    edx,0x8
c002561f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025625:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025628:	89 de                	mov    esi,ebx
c002562a:	c1 fe 17             	sar    esi,0x17
c002562d:	c1 e3 08             	shl    ebx,0x8
c0025630:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025636:	31 f0                	xor    eax,esi
c0025638:	0f 88 3b 01 00 00    	js     c0025779 <__addsf3+0x173>
c002563e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0025641:	29 f1                	sub    ecx,esi
c0025643:	85 c9                	test   ecx,ecx
c0025645:	7e 54                	jle    c002569b <__addsf3+0x95>
c0025647:	89 f0                	mov    eax,esi
c0025649:	84 c0                	test   al,al
c002564b:	75 10                	jne    c002565d <__addsf3+0x57>
c002564d:	85 db                	test   ebx,ebx
c002564f:	0f 84 aa 02 00 00    	je     c00258ff <__addsf3+0x2f9>
c0025655:	49                   	dec    ecx
c0025656:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0025659:	74 38                	je     c0025693 <__addsf3+0x8d>
c002565b:	eb 13                	jmp    c0025670 <__addsf3+0x6a>
c002565d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025660:	f7 d0                	not    eax
c0025662:	84 c0                	test   al,al
c0025664:	0f 84 95 02 00 00    	je     c00258ff <__addsf3+0x2f9>
c002566a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025670:	83 f9 1f             	cmp    ecx,0x1f
c0025673:	0f 8f 86 02 00 00    	jg     c00258ff <__addsf3+0x2f9>
c0025679:	89 de                	mov    esi,ebx
c002567b:	d3 ee                	shr    esi,cl
c002567d:	b8 20 00 00 00       	mov    eax,0x20
c0025682:	29 c8                	sub    eax,ecx
c0025684:	89 c1                	mov    ecx,eax
c0025686:	d3 e3                	shl    ebx,cl
c0025688:	31 c0                	xor    eax,eax
c002568a:	85 db                	test   ebx,ebx
c002568c:	0f 95 c0             	setne  al
c002568f:	09 f0                	or     eax,esi
c0025691:	01 d0                	add    eax,edx
c0025693:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0025696:	e9 b6 00 00 00       	jmp    c0025751 <__addsf3+0x14b>
c002569b:	74 5c                	je     c00256f9 <__addsf3+0xf3>
c002569d:	89 f1                	mov    ecx,esi
c002569f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00256a2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00256a5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00256a9:	75 14                	jne    c00256bf <__addsf3+0xb9>
c00256ab:	85 d2                	test   edx,edx
c00256ad:	0f 84 4c 02 00 00    	je     c00258ff <__addsf3+0x2f9>
c00256b3:	49                   	dec    ecx
c00256b4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00256b7:	0f 84 94 00 00 00    	je     c0025751 <__addsf3+0x14b>
c00256bd:	eb 12                	jmp    c00256d1 <__addsf3+0xcb>
c00256bf:	89 f0                	mov    eax,esi
c00256c1:	f7 d0                	not    eax
c00256c3:	84 c0                	test   al,al
c00256c5:	0f 84 34 02 00 00    	je     c00258ff <__addsf3+0x2f9>
c00256cb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00256d1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00256d4:	83 f9 1f             	cmp    ecx,0x1f
c00256d7:	0f 8f 22 02 00 00    	jg     c00258ff <__addsf3+0x2f9>
c00256dd:	89 d7                	mov    edi,edx
c00256df:	d3 ef                	shr    edi,cl
c00256e1:	b8 20 00 00 00       	mov    eax,0x20
c00256e6:	29 c8                	sub    eax,ecx
c00256e8:	89 c1                	mov    ecx,eax
c00256ea:	d3 e2                	shl    edx,cl
c00256ec:	31 c0                	xor    eax,eax
c00256ee:	85 d2                	test   edx,edx
c00256f0:	0f 95 c0             	setne  al
c00256f3:	09 f8                	or     eax,edi
c00256f5:	01 d8                	add    eax,ebx
c00256f7:	eb 58                	jmp    c0025751 <__addsf3+0x14b>
c00256f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00256fc:	8d 70 01             	lea    esi,[eax+0x1]
c00256ff:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0025705:	75 32                	jne    c0025739 <__addsf3+0x133>
c0025707:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002570b:	75 1f                	jne    c002572c <__addsf3+0x126>
c002570d:	85 d2                	test   edx,edx
c002570f:	0f 84 e0 01 00 00    	je     c00258f5 <__addsf3+0x2ef>
c0025715:	85 db                	test   ebx,ebx
c0025717:	0f 84 e2 01 00 00    	je     c00258ff <__addsf3+0x2f9>
c002571d:	89 d0                	mov    eax,edx
c002571f:	01 d8                	add    eax,ebx
c0025721:	0f 89 a9 01 00 00    	jns    c00258d0 <__addsf3+0x2ca>
c0025727:	e9 9d 01 00 00       	jmp    c00258c9 <__addsf3+0x2c3>
c002572c:	85 d2                	test   edx,edx
c002572e:	0f 85 cb 01 00 00    	jne    c00258ff <__addsf3+0x2f9>
c0025734:	e9 bc 01 00 00       	jmp    c00258f5 <__addsf3+0x2ef>
c0025739:	31 c0                	xor    eax,eax
c002573b:	89 f1                	mov    ecx,esi
c002573d:	f7 d1                	not    ecx
c002573f:	84 c9                	test   cl,cl
c0025741:	0f 84 90 01 00 00    	je     c00258d7 <__addsf3+0x2d1>
c0025747:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002574a:	d1 e8                	shr    eax,1
c002574c:	e9 86 01 00 00       	jmp    c00258d7 <__addsf3+0x2d1>
c0025751:	85 c0                	test   eax,eax
c0025753:	0f 89 7e 01 00 00    	jns    c00258d7 <__addsf3+0x2d1>
c0025759:	46                   	inc    esi
c002575a:	89 f2                	mov    edx,esi
c002575c:	f7 d2                	not    edx
c002575e:	84 d2                	test   dl,dl
c0025760:	0f 84 6f 01 00 00    	je     c00258d5 <__addsf3+0x2cf>
c0025766:	89 c2                	mov    edx,eax
c0025768:	83 e2 01             	and    edx,0x1
c002576b:	d1 e8                	shr    eax,1
c002576d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0025772:	09 d0                	or     eax,edx
c0025774:	e9 5e 01 00 00       	jmp    c00258d7 <__addsf3+0x2d1>
c0025779:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002577d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025780:	89 f0                	mov    eax,esi
c0025782:	0f b6 c0             	movzx  eax,al
c0025785:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0025788:	29 c1                	sub    ecx,eax
c002578a:	85 c9                	test   ecx,ecx
c002578c:	7e 55                	jle    c00257e3 <__addsf3+0x1dd>
c002578e:	85 c0                	test   eax,eax
c0025790:	75 11                	jne    c00257a3 <__addsf3+0x19d>
c0025792:	85 db                	test   ebx,ebx
c0025794:	0f 84 65 01 00 00    	je     c00258ff <__addsf3+0x2f9>
c002579a:	49                   	dec    ecx
c002579b:	75 19                	jne    c00257b6 <__addsf3+0x1b0>
c002579d:	89 d0                	mov    eax,edx
c002579f:	29 d8                	sub    eax,ebx
c00257a1:	eb 38                	jmp    c00257db <__addsf3+0x1d5>
c00257a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00257a6:	f7 d0                	not    eax
c00257a8:	84 c0                	test   al,al
c00257aa:	0f 84 4f 01 00 00    	je     c00258ff <__addsf3+0x2f9>
c00257b0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00257b6:	83 f9 1f             	cmp    ecx,0x1f
c00257b9:	0f 8f 40 01 00 00    	jg     c00258ff <__addsf3+0x2f9>
c00257bf:	89 de                	mov    esi,ebx
c00257c1:	d3 ee                	shr    esi,cl
c00257c3:	b8 20 00 00 00       	mov    eax,0x20
c00257c8:	29 c8                	sub    eax,ecx
c00257ca:	89 c1                	mov    ecx,eax
c00257cc:	d3 e3                	shl    ebx,cl
c00257ce:	31 c0                	xor    eax,eax
c00257d0:	85 db                	test   ebx,ebx
c00257d2:	0f 95 c0             	setne  al
c00257d5:	09 f0                	or     eax,esi
c00257d7:	29 c2                	sub    edx,eax
c00257d9:	89 d0                	mov    eax,edx
c00257db:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00257de:	e9 af 00 00 00       	jmp    c0025892 <__addsf3+0x28c>
c00257e3:	74 5c                	je     c0025841 <__addsf3+0x23b>
c00257e5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00257e8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00257eb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00257ef:	75 14                	jne    c0025805 <__addsf3+0x1ff>
c00257f1:	85 d2                	test   edx,edx
c00257f3:	0f 84 06 01 00 00    	je     c00258ff <__addsf3+0x2f9>
c00257f9:	48                   	dec    eax
c00257fa:	75 1b                	jne    c0025817 <__addsf3+0x211>
c00257fc:	89 d8                	mov    eax,ebx
c00257fe:	29 d0                	sub    eax,edx
c0025800:	e9 8d 00 00 00       	jmp    c0025892 <__addsf3+0x28c>
c0025805:	89 f1                	mov    ecx,esi
c0025807:	f7 d1                	not    ecx
c0025809:	84 c9                	test   cl,cl
c002580b:	0f 84 ee 00 00 00    	je     c00258ff <__addsf3+0x2f9>
c0025811:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025817:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002581a:	83 f8 1f             	cmp    eax,0x1f
c002581d:	0f 8f dc 00 00 00    	jg     c00258ff <__addsf3+0x2f9>
c0025823:	89 d7                	mov    edi,edx
c0025825:	88 c1                	mov    cl,al
c0025827:	d3 ef                	shr    edi,cl
c0025829:	b9 20 00 00 00       	mov    ecx,0x20
c002582e:	29 c1                	sub    ecx,eax
c0025830:	d3 e2                	shl    edx,cl
c0025832:	31 c0                	xor    eax,eax
c0025834:	85 d2                	test   edx,edx
c0025836:	0f 95 c0             	setne  al
c0025839:	09 f8                	or     eax,edi
c002583b:	29 c3                	sub    ebx,eax
c002583d:	89 d8                	mov    eax,ebx
c002583f:	eb 51                	jmp    c0025892 <__addsf3+0x28c>
c0025841:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025844:	40                   	inc    eax
c0025845:	a8 fe                	test   al,0xfe
c0025847:	75 3d                	jne    c0025886 <__addsf3+0x280>
c0025849:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c002584d:	0f 85 a7 00 00 00    	jne    c00258fa <__addsf3+0x2f4>
c0025853:	85 d2                	test   edx,edx
c0025855:	75 12                	jne    c0025869 <__addsf3+0x263>
c0025857:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002585a:	85 db                	test   ebx,ebx
c002585c:	0f 85 9d 00 00 00    	jne    c00258ff <__addsf3+0x2f9>
c0025862:	31 ff                	xor    edi,edi
c0025864:	e9 96 00 00 00       	jmp    c00258ff <__addsf3+0x2f9>
c0025869:	85 db                	test   ebx,ebx
c002586b:	0f 84 8e 00 00 00    	je     c00258ff <__addsf3+0x2f9>
c0025871:	89 d0                	mov    eax,edx
c0025873:	29 d8                	sub    eax,ebx
c0025875:	79 06                	jns    c002587d <__addsf3+0x277>
c0025877:	89 d8                	mov    eax,ebx
c0025879:	29 d0                	sub    eax,edx
c002587b:	eb 5a                	jmp    c00258d7 <__addsf3+0x2d1>
c002587d:	bf 00 00 00 00       	mov    edi,0x0
c0025882:	74 7b                	je     c00258ff <__addsf3+0x2f9>
c0025884:	eb 4a                	jmp    c00258d0 <__addsf3+0x2ca>
c0025886:	89 d0                	mov    eax,edx
c0025888:	29 d8                	sub    eax,ebx
c002588a:	79 12                	jns    c002589e <__addsf3+0x298>
c002588c:	89 d8                	mov    eax,ebx
c002588e:	29 d0                	sub    eax,edx
c0025890:	eb 09                	jmp    c002589b <__addsf3+0x295>
c0025892:	85 c0                	test   eax,eax
c0025894:	79 41                	jns    c00258d7 <__addsf3+0x2d1>
c0025896:	25 ff ff ff 7f       	and    eax,0x7fffffff
c002589b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c002589e:	31 f6                	xor    esi,esi
c00258a0:	85 c0                	test   eax,eax
c00258a2:	74 33                	je     c00258d7 <__addsf3+0x2d1>
c00258a4:	0f bd c8             	bsr    ecx,eax
c00258a7:	83 f1 1f             	xor    ecx,0x1f
c00258aa:	d3 e0                	shl    eax,cl
c00258ac:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c00258b0:	39 ca                	cmp    edx,ecx
c00258b2:	7f 10                	jg     c00258c4 <__addsf3+0x2be>
c00258b4:	29 d1                	sub    ecx,edx
c00258b6:	41                   	inc    ecx
c00258b7:	d3 e8                	shr    eax,cl
c00258b9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00258bc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c00258c2:	eb 13                	jmp    c00258d7 <__addsf3+0x2d1>
c00258c4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00258c7:	29 ce                	sub    esi,ecx
c00258c9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00258ce:	eb 07                	jmp    c00258d7 <__addsf3+0x2d1>
c00258d0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00258d3:	eb 02                	jmp    c00258d7 <__addsf3+0x2d1>
c00258d5:	31 c0                	xor    eax,eax
c00258d7:	89 c2                	mov    edx,eax
c00258d9:	c1 ea 08             	shr    edx,0x8
c00258dc:	a8 7f                	test   al,0x7f
c00258de:	0f 95 c1             	setne  cl
c00258e1:	09 d1                	or     ecx,edx
c00258e3:	83 e1 01             	and    ecx,0x1
c00258e6:	c1 e8 07             	shr    eax,0x7
c00258e9:	21 c8                	and    eax,ecx
c00258eb:	c1 e6 17             	shl    esi,0x17
c00258ee:	09 d6                	or     esi,edx
c00258f0:	8d 3c 30             	lea    edi,[eax+esi*1]
c00258f3:	eb 0a                	jmp    c00258ff <__addsf3+0x2f9>
c00258f5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00258f8:	eb 05                	jmp    c00258ff <__addsf3+0x2f9>
c00258fa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00258ff:	89 f8                	mov    eax,edi
c0025901:	5a                   	pop    edx
c0025902:	59                   	pop    ecx
c0025903:	5b                   	pop    ebx
c0025904:	5e                   	pop    esi
c0025905:	5f                   	pop    edi
c0025906:	5d                   	pop    ebp
c0025907:	c3                   	ret    

c0025908 <__subsf3>:
c0025908:	55                   	push   ebp
c0025909:	89 e5                	mov    ebp,esp
c002590b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002590e:	05 00 00 00 80       	add    eax,0x80000000
c0025913:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025916:	5d                   	pop    ebp
c0025917:	e9 ea fc ff ff       	jmp    c0025606 <__addsf3>

c002591c <__negsf2>:
c002591c:	55                   	push   ebp
c002591d:	89 e5                	mov    ebp,esp
c002591f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025922:	05 00 00 00 80       	add    eax,0x80000000
c0025927:	5d                   	pop    ebp
c0025928:	c3                   	ret    

c0025929 <__mulsf3>:
c0025929:	55                   	push   ebp
c002592a:	89 e5                	mov    ebp,esp
c002592c:	57                   	push   edi
c002592d:	56                   	push   esi
c002592e:	53                   	push   ebx
c002592f:	83 ec 1c             	sub    esp,0x1c
c0025932:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0025935:	89 f0                	mov    eax,esi
c0025937:	89 f1                	mov    ecx,esi
c0025939:	c1 f9 17             	sar    ecx,0x17
c002593c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c002593f:	c1 e0 08             	shl    eax,0x8
c0025942:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025947:	89 c1                	mov    ecx,eax
c0025949:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002594c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002594f:	89 c7                	mov    edi,eax
c0025951:	c1 ff 17             	sar    edi,0x17
c0025954:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025958:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002595b:	89 f8                	mov    eax,edi
c002595d:	0f b6 c0             	movzx  eax,al
c0025960:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0025963:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0025967:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002596a:	42                   	inc    edx
c002596b:	80 e2 fe             	and    dl,0xfe
c002596e:	75 7b                	jne    c00259eb <__mulsf3+0xc2>
c0025970:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025974:	74 54                	je     c00259ca <__mulsf3+0xa1>
c0025976:	85 c9                	test   ecx,ecx
c0025978:	0f 85 64 01 00 00    	jne    c0025ae2 <__mulsf3+0x1b9>
c002597e:	8d 57 01             	lea    edx,[edi+0x1]
c0025981:	80 e2 fe             	and    dl,0xfe
c0025984:	75 1f                	jne    c00259a5 <__mulsf3+0x7c>
c0025986:	85 c0                	test   eax,eax
c0025988:	b8 00 00 00 00       	mov    eax,0x0
c002598d:	74 29                	je     c00259b8 <__mulsf3+0x8f>
c002598f:	53                   	push   ebx
c0025990:	53                   	push   ebx
c0025991:	50                   	push   eax
c0025992:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025995:	e8 96 05 00 00       	call   c0025f30 <__nesf2>
c002599a:	83 c4 10             	add    esp,0x10
c002599d:	85 c0                	test   eax,eax
c002599f:	0f 85 3a 01 00 00    	jne    c0025adf <__mulsf3+0x1b6>
c00259a5:	85 ff                	test   edi,edi
c00259a7:	0f 89 35 01 00 00    	jns    c0025ae2 <__mulsf3+0x1b9>
c00259ad:	81 c6 00 00 00 80    	add    esi,0x80000000
c00259b3:	e9 2a 01 00 00       	jmp    c0025ae2 <__mulsf3+0x1b9>
c00259b8:	51                   	push   ecx
c00259b9:	51                   	push   ecx
c00259ba:	50                   	push   eax
c00259bb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00259be:	e8 6d 05 00 00       	call   c0025f30 <__nesf2>
c00259c3:	83 c4 10             	add    esp,0x10
c00259c6:	85 c0                	test   eax,eax
c00259c8:	eb 15                	jmp    c00259df <__mulsf3+0xb6>
c00259ca:	85 c9                	test   ecx,ecx
c00259cc:	74 0b                	je     c00259d9 <__mulsf3+0xb0>
c00259ce:	8d 53 ff             	lea    edx,[ebx-0x1]
c00259d1:	01 c9                	add    ecx,ecx
c00259d3:	78 16                	js     c00259eb <__mulsf3+0xc2>
c00259d5:	89 d3                	mov    ebx,edx
c00259d7:	eb f5                	jmp    c00259ce <__mulsf3+0xa5>
c00259d9:	89 f8                	mov    eax,edi
c00259db:	f7 d0                	not    eax
c00259dd:	84 c0                	test   al,al
c00259df:	75 c4                	jne    c00259a5 <__mulsf3+0x7c>
c00259e1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00259e6:	e9 f7 00 00 00       	jmp    c0025ae2 <__mulsf3+0x1b9>
c00259eb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00259ee:	c1 e6 08             	shl    esi,0x8
c00259f1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00259f7:	8d 57 01             	lea    edx,[edi+0x1]
c00259fa:	80 e2 fe             	and    dl,0xfe
c00259fd:	75 63                	jne    c0025a62 <__mulsf3+0x139>
c00259ff:	85 c0                	test   eax,eax
c0025a01:	74 2f                	je     c0025a32 <__mulsf3+0x109>
c0025a03:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025a07:	0f 89 d2 00 00 00    	jns    c0025adf <__mulsf3+0x1b6>
c0025a0d:	52                   	push   edx
c0025a0e:	52                   	push   edx
c0025a0f:	6a 00                	push   0x0
c0025a11:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a14:	e8 dc 04 00 00       	call   c0025ef5 <__eqsf2>
c0025a19:	83 c4 10             	add    esp,0x10
c0025a1c:	85 c0                	test   eax,eax
c0025a1e:	0f 85 bb 00 00 00    	jne    c0025adf <__mulsf3+0x1b6>
c0025a24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a27:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0025a2d:	e9 b0 00 00 00       	jmp    c0025ae2 <__mulsf3+0x1b9>
c0025a32:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025a35:	50                   	push   eax
c0025a36:	50                   	push   eax
c0025a37:	6a 00                	push   0x0
c0025a39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025a3c:	e8 b4 04 00 00       	call   c0025ef5 <__eqsf2>
c0025a41:	83 c4 10             	add    esp,0x10
c0025a44:	85 c0                	test   eax,eax
c0025a46:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025a49:	75 0c                	jne    c0025a57 <__mulsf3+0x12e>
c0025a4b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0025a4f:	0f 89 8a 00 00 00    	jns    c0025adf <__mulsf3+0x1b6>
c0025a55:	eb cd                	jmp    c0025a24 <__mulsf3+0xfb>
c0025a57:	8d 43 ff             	lea    eax,[ebx-0x1]
c0025a5a:	01 f6                	add    esi,esi
c0025a5c:	78 04                	js     c0025a62 <__mulsf3+0x139>
c0025a5e:	89 c3                	mov    ebx,eax
c0025a60:	eb f5                	jmp    c0025a57 <__mulsf3+0x12e>
c0025a62:	89 c8                	mov    eax,ecx
c0025a64:	0d 00 00 00 80       	or     eax,0x80000000
c0025a69:	81 ce 00 00 00 80    	or     esi,0x80000000
c0025a6f:	f7 e6                	mul    esi
c0025a71:	85 c0                	test   eax,eax
c0025a73:	0f 95 c0             	setne  al
c0025a76:	0f b6 c0             	movzx  eax,al
c0025a79:	09 c2                	or     edx,eax
c0025a7b:	78 03                	js     c0025a80 <__mulsf3+0x157>
c0025a7d:	01 d2                	add    edx,edx
c0025a7f:	4b                   	dec    ebx
c0025a80:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0025a86:	7f 22                	jg     c0025aaa <__mulsf3+0x181>
c0025a88:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025a8e:	85 db                	test   ebx,ebx
c0025a90:	7f 23                	jg     c0025ab5 <__mulsf3+0x18c>
c0025a92:	83 fb e9             	cmp    ebx,0xffffffe9
c0025a95:	7c 1a                	jl     c0025ab1 <__mulsf3+0x188>
c0025a97:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025a9d:	b9 01 00 00 00       	mov    ecx,0x1
c0025aa2:	29 d9                	sub    ecx,ebx
c0025aa4:	d3 ea                	shr    edx,cl
c0025aa6:	31 db                	xor    ebx,ebx
c0025aa8:	eb 0b                	jmp    c0025ab5 <__mulsf3+0x18c>
c0025aaa:	bb ff 00 00 00       	mov    ebx,0xff
c0025aaf:	eb 02                	jmp    c0025ab3 <__mulsf3+0x18a>
c0025ab1:	31 db                	xor    ebx,ebx
c0025ab3:	31 d2                	xor    edx,edx
c0025ab5:	89 d0                	mov    eax,edx
c0025ab7:	c1 e8 08             	shr    eax,0x8
c0025aba:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025abd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025ac3:	09 fb                	or     ebx,edi
c0025ac5:	c1 e3 17             	shl    ebx,0x17
c0025ac8:	09 c3                	or     ebx,eax
c0025aca:	f6 c2 7f             	test   dl,0x7f
c0025acd:	0f 95 c1             	setne  cl
c0025ad0:	09 c8                	or     eax,ecx
c0025ad2:	83 e0 01             	and    eax,0x1
c0025ad5:	c1 ea 07             	shr    edx,0x7
c0025ad8:	21 c2                	and    edx,eax
c0025ada:	8d 34 13             	lea    esi,[ebx+edx*1]
c0025add:	eb 03                	jmp    c0025ae2 <__mulsf3+0x1b9>
c0025adf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0025ae2:	89 f0                	mov    eax,esi
c0025ae4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ae7:	5b                   	pop    ebx
c0025ae8:	5e                   	pop    esi
c0025ae9:	5f                   	pop    edi
c0025aea:	5d                   	pop    ebp
c0025aeb:	c3                   	ret    

c0025aec <__divsf3>:
c0025aec:	55                   	push   ebp
c0025aed:	89 e5                	mov    ebp,esp
c0025aef:	57                   	push   edi
c0025af0:	56                   	push   esi
c0025af1:	53                   	push   ebx
c0025af2:	83 ec 1c             	sub    esp,0x1c
c0025af5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0025af8:	89 d8                	mov    eax,ebx
c0025afa:	89 d9                	mov    ecx,ebx
c0025afc:	c1 f9 17             	sar    ecx,0x17
c0025aff:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0025b02:	c1 e0 08             	shl    eax,0x8
c0025b05:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025b0a:	89 c1                	mov    ecx,eax
c0025b0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b0f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025b12:	89 c7                	mov    edi,eax
c0025b14:	c1 ff 17             	sar    edi,0x17
c0025b17:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025b1b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0025b1e:	89 f8                	mov    eax,edi
c0025b20:	0f b6 c0             	movzx  eax,al
c0025b23:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025b26:	29 c6                	sub    esi,eax
c0025b28:	83 c6 7f             	add    esi,0x7f
c0025b2b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025b2e:	42                   	inc    edx
c0025b2f:	80 e2 fe             	and    dl,0xfe
c0025b32:	0f 85 9c 00 00 00    	jne    c0025bd4 <__divsf3+0xe8>
c0025b38:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0025b3c:	74 33                	je     c0025b71 <__divsf3+0x85>
c0025b3e:	85 c9                	test   ecx,ecx
c0025b40:	0f 85 c7 01 00 00    	jne    c0025d0d <__divsf3+0x221>
c0025b46:	8d 57 01             	lea    edx,[edi+0x1]
c0025b49:	80 e2 fe             	and    dl,0xfe
c0025b4c:	75 2f                	jne    c0025b7d <__divsf3+0x91>
c0025b4e:	85 c0                	test   eax,eax
c0025b50:	74 2b                	je     c0025b7d <__divsf3+0x91>
c0025b52:	51                   	push   ecx
c0025b53:	51                   	push   ecx
c0025b54:	6a 00                	push   0x0
c0025b56:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025b59:	e8 d2 03 00 00       	call   c0025f30 <__nesf2>
c0025b5e:	83 c4 10             	add    esp,0x10
c0025b61:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025b64:	85 c0                	test   eax,eax
c0025b66:	0f 85 a1 01 00 00    	jne    c0025d0d <__divsf3+0x221>
c0025b6c:	e9 92 01 00 00       	jmp    c0025d03 <__divsf3+0x217>
c0025b71:	85 c9                	test   ecx,ecx
c0025b73:	75 1b                	jne    c0025b90 <__divsf3+0xa4>
c0025b75:	8d 57 01             	lea    edx,[edi+0x1]
c0025b78:	80 e2 fe             	and    dl,0xfe
c0025b7b:	74 1e                	je     c0025b9b <__divsf3+0xaf>
c0025b7d:	85 ff                	test   edi,edi
c0025b7f:	0f 89 88 01 00 00    	jns    c0025d0d <__divsf3+0x221>
c0025b85:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0025b8b:	e9 7d 01 00 00       	jmp    c0025d0d <__divsf3+0x221>
c0025b90:	8d 56 ff             	lea    edx,[esi-0x1]
c0025b93:	01 c9                	add    ecx,ecx
c0025b95:	78 3d                	js     c0025bd4 <__divsf3+0xe8>
c0025b97:	89 d6                	mov    esi,edx
c0025b99:	eb f5                	jmp    c0025b90 <__divsf3+0xa4>
c0025b9b:	85 c0                	test   eax,eax
c0025b9d:	b8 00 00 00 00       	mov    eax,0x0
c0025ba2:	74 18                	je     c0025bbc <__divsf3+0xd0>
c0025ba4:	52                   	push   edx
c0025ba5:	52                   	push   edx
c0025ba6:	50                   	push   eax
c0025ba7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025baa:	e8 81 03 00 00       	call   c0025f30 <__nesf2>
c0025baf:	83 c4 10             	add    esp,0x10
c0025bb2:	85 c0                	test   eax,eax
c0025bb4:	0f 85 50 01 00 00    	jne    c0025d0a <__divsf3+0x21e>
c0025bba:	eb c1                	jmp    c0025b7d <__divsf3+0x91>
c0025bbc:	56                   	push   esi
c0025bbd:	56                   	push   esi
c0025bbe:	50                   	push   eax
c0025bbf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bc2:	e8 69 03 00 00       	call   c0025f30 <__nesf2>
c0025bc7:	83 c4 10             	add    esp,0x10
c0025bca:	85 c0                	test   eax,eax
c0025bcc:	0f 84 31 01 00 00    	je     c0025d03 <__divsf3+0x217>
c0025bd2:	eb a9                	jmp    c0025b7d <__divsf3+0x91>
c0025bd4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0025bd7:	c1 e3 08             	shl    ebx,0x8
c0025bda:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025be0:	8d 57 01             	lea    edx,[edi+0x1]
c0025be3:	80 e2 fe             	and    dl,0xfe
c0025be6:	75 71                	jne    c0025c59 <__divsf3+0x16d>
c0025be8:	85 c0                	test   eax,eax
c0025bea:	ba 00 00 00 00       	mov    edx,0x0
c0025bef:	74 2f                	je     c0025c20 <__divsf3+0x134>
c0025bf1:	51                   	push   ecx
c0025bf2:	51                   	push   ecx
c0025bf3:	52                   	push   edx
c0025bf4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025bf7:	e8 f9 02 00 00       	call   c0025ef5 <__eqsf2>
c0025bfc:	83 c4 10             	add    esp,0x10
c0025bff:	85 c0                	test   eax,eax
c0025c01:	0f 85 03 01 00 00    	jne    c0025d0a <__divsf3+0x21e>
c0025c07:	31 d2                	xor    edx,edx
c0025c09:	89 d3                	mov    ebx,edx
c0025c0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025c0e:	31 f8                	xor    eax,edi
c0025c10:	0f 89 f7 00 00 00    	jns    c0025d0d <__divsf3+0x221>
c0025c16:	bb 00 00 00 80       	mov    ebx,0x80000000
c0025c1b:	e9 ed 00 00 00       	jmp    c0025d0d <__divsf3+0x221>
c0025c20:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0025c23:	50                   	push   eax
c0025c24:	50                   	push   eax
c0025c25:	52                   	push   edx
c0025c26:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025c29:	e8 c7 02 00 00       	call   c0025ef5 <__eqsf2>
c0025c2e:	83 c4 10             	add    esp,0x10
c0025c31:	85 c0                	test   eax,eax
c0025c33:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0025c36:	75 16                	jne    c0025c4e <__divsf3+0x162>
c0025c38:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025c3b:	31 fb                	xor    ebx,edi
c0025c3d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0025c43:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0025c49:	e9 bf 00 00 00       	jmp    c0025d0d <__divsf3+0x221>
c0025c4e:	8d 46 01             	lea    eax,[esi+0x1]
c0025c51:	01 db                	add    ebx,ebx
c0025c53:	78 04                	js     c0025c59 <__divsf3+0x16d>
c0025c55:	89 c6                	mov    esi,eax
c0025c57:	eb f5                	jmp    c0025c4e <__divsf3+0x162>
c0025c59:	89 c8                	mov    eax,ecx
c0025c5b:	0d 00 00 00 80       	or     eax,0x80000000
c0025c60:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0025c66:	31 d2                	xor    edx,edx
c0025c68:	39 d8                	cmp    eax,ebx
c0025c6a:	72 07                	jb     c0025c73 <__divsf3+0x187>
c0025c6c:	29 d8                	sub    eax,ebx
c0025c6e:	ba 01 00 00 00       	mov    edx,0x1
c0025c73:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0025c7a:	01 d2                	add    edx,edx
c0025c7c:	89 c1                	mov    ecx,eax
c0025c7e:	01 c0                	add    eax,eax
c0025c80:	85 c9                	test   ecx,ecx
c0025c82:	78 04                	js     c0025c88 <__divsf3+0x19c>
c0025c84:	39 c3                	cmp    ebx,eax
c0025c86:	77 05                	ja     c0025c8d <__divsf3+0x1a1>
c0025c88:	29 d8                	sub    eax,ebx
c0025c8a:	83 ca 01             	or     edx,0x1
c0025c8d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0025c90:	75 e8                	jne    c0025c7a <__divsf3+0x18e>
c0025c92:	85 c0                	test   eax,eax
c0025c94:	0f 95 c0             	setne  al
c0025c97:	0f b6 c0             	movzx  eax,al
c0025c9a:	c1 e2 06             	shl    edx,0x6
c0025c9d:	09 c2                	or     edx,eax
c0025c9f:	78 03                	js     c0025ca4 <__divsf3+0x1b8>
c0025ca1:	01 d2                	add    edx,edx
c0025ca3:	4e                   	dec    esi
c0025ca4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025caa:	7f 22                	jg     c0025cce <__divsf3+0x1e2>
c0025cac:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0025cb2:	85 f6                	test   esi,esi
c0025cb4:	7f 23                	jg     c0025cd9 <__divsf3+0x1ed>
c0025cb6:	83 fe e9             	cmp    esi,0xffffffe9
c0025cb9:	7c 1a                	jl     c0025cd5 <__divsf3+0x1e9>
c0025cbb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0025cc1:	b9 01 00 00 00       	mov    ecx,0x1
c0025cc6:	29 f1                	sub    ecx,esi
c0025cc8:	d3 ea                	shr    edx,cl
c0025cca:	31 f6                	xor    esi,esi
c0025ccc:	eb 0b                	jmp    c0025cd9 <__divsf3+0x1ed>
c0025cce:	be ff 00 00 00       	mov    esi,0xff
c0025cd3:	eb 02                	jmp    c0025cd7 <__divsf3+0x1eb>
c0025cd5:	31 f6                	xor    esi,esi
c0025cd7:	31 d2                	xor    edx,edx
c0025cd9:	89 d0                	mov    eax,edx
c0025cdb:	c1 e8 08             	shr    eax,0x8
c0025cde:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0025ce1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0025ce7:	09 fe                	or     esi,edi
c0025ce9:	c1 e6 17             	shl    esi,0x17
c0025cec:	09 c6                	or     esi,eax
c0025cee:	f6 c2 7f             	test   dl,0x7f
c0025cf1:	0f 95 c1             	setne  cl
c0025cf4:	09 c8                	or     eax,ecx
c0025cf6:	83 e0 01             	and    eax,0x1
c0025cf9:	c1 ea 07             	shr    edx,0x7
c0025cfc:	21 c2                	and    edx,eax
c0025cfe:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0025d01:	eb 0a                	jmp    c0025d0d <__divsf3+0x221>
c0025d03:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0025d08:	eb 03                	jmp    c0025d0d <__divsf3+0x221>
c0025d0a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0025d0d:	89 d8                	mov    eax,ebx
c0025d0f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025d12:	5b                   	pop    ebx
c0025d13:	5e                   	pop    esi
c0025d14:	5f                   	pop    edi
c0025d15:	5d                   	pop    ebp
c0025d16:	c3                   	ret    

c0025d17 <__floatsisf>:
c0025d17:	55                   	push   ebp
c0025d18:	89 e5                	mov    ebp,esp
c0025d1a:	53                   	push   ebx
c0025d1b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d1e:	85 d2                	test   edx,edx
c0025d20:	7e 2b                	jle    c0025d4d <__floatsisf+0x36>
c0025d22:	0f bd ca             	bsr    ecx,edx
c0025d25:	83 f1 1f             	xor    ecx,0x1f
c0025d28:	d3 e2                	shl    edx,cl
c0025d2a:	89 d0                	mov    eax,edx
c0025d2c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d31:	89 c3                	mov    ebx,eax
c0025d33:	c1 eb 08             	shr    ebx,0x8
c0025d36:	80 e2 7f             	and    dl,0x7f
c0025d39:	0f 95 c2             	setne  dl
c0025d3c:	09 da                	or     edx,ebx
c0025d3e:	83 e2 01             	and    edx,0x1
c0025d41:	c1 e8 07             	shr    eax,0x7
c0025d44:	21 c2                	and    edx,eax
c0025d46:	b8 9e 00 00 00       	mov    eax,0x9e
c0025d4b:	eb 32                	jmp    c0025d7f <__floatsisf+0x68>
c0025d4d:	b8 00 00 00 00       	mov    eax,0x0
c0025d52:	74 34                	je     c0025d88 <__floatsisf+0x71>
c0025d54:	f7 da                	neg    edx
c0025d56:	0f bd ca             	bsr    ecx,edx
c0025d59:	83 f1 1f             	xor    ecx,0x1f
c0025d5c:	d3 e2                	shl    edx,cl
c0025d5e:	89 d0                	mov    eax,edx
c0025d60:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025d65:	89 c3                	mov    ebx,eax
c0025d67:	c1 eb 08             	shr    ebx,0x8
c0025d6a:	80 e2 7f             	and    dl,0x7f
c0025d6d:	0f 95 c2             	setne  dl
c0025d70:	09 da                	or     edx,ebx
c0025d72:	83 e2 01             	and    edx,0x1
c0025d75:	c1 e8 07             	shr    eax,0x7
c0025d78:	21 c2                	and    edx,eax
c0025d7a:	b8 9e 01 00 00       	mov    eax,0x19e
c0025d7f:	29 c8                	sub    eax,ecx
c0025d81:	c1 e0 17             	shl    eax,0x17
c0025d84:	09 d8                	or     eax,ebx
c0025d86:	01 d0                	add    eax,edx
c0025d88:	5b                   	pop    ebx
c0025d89:	5d                   	pop    ebp
c0025d8a:	c3                   	ret    

c0025d8b <__floatunsisf>:
c0025d8b:	55                   	push   ebp
c0025d8c:	89 e5                	mov    ebp,esp
c0025d8e:	53                   	push   ebx
c0025d8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025d92:	31 c0                	xor    eax,eax
c0025d94:	85 d2                	test   edx,edx
c0025d96:	74 32                	je     c0025dca <__floatunsisf+0x3f>
c0025d98:	0f bd ca             	bsr    ecx,edx
c0025d9b:	83 f1 1f             	xor    ecx,0x1f
c0025d9e:	d3 e2                	shl    edx,cl
c0025da0:	89 d0                	mov    eax,edx
c0025da2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0025da7:	89 c3                	mov    ebx,eax
c0025da9:	c1 eb 08             	shr    ebx,0x8
c0025dac:	80 e2 7f             	and    dl,0x7f
c0025daf:	0f 95 c2             	setne  dl
c0025db2:	09 da                	or     edx,ebx
c0025db4:	83 e2 01             	and    edx,0x1
c0025db7:	c1 e8 07             	shr    eax,0x7
c0025dba:	21 c2                	and    edx,eax
c0025dbc:	b8 9e 00 00 00       	mov    eax,0x9e
c0025dc1:	29 c8                	sub    eax,ecx
c0025dc3:	c1 e0 17             	shl    eax,0x17
c0025dc6:	09 d8                	or     eax,ebx
c0025dc8:	01 d0                	add    eax,edx
c0025dca:	5b                   	pop    ebx
c0025dcb:	5d                   	pop    ebp
c0025dcc:	c3                   	ret    

c0025dcd <__fixsfsi>:
c0025dcd:	55                   	push   ebp
c0025dce:	89 e5                	mov    ebp,esp
c0025dd0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025dd3:	89 d1                	mov    ecx,edx
c0025dd5:	c1 e1 08             	shl    ecx,0x8
c0025dd8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0025dde:	c1 fa 17             	sar    edx,0x17
c0025de1:	78 1c                	js     c0025dff <__fixsfsi+0x32>
c0025de3:	83 ea 7f             	sub    edx,0x7f
c0025de6:	31 c0                	xor    eax,eax
c0025de8:	83 fa 1e             	cmp    edx,0x1e
c0025deb:	77 40                	ja     c0025e2d <__fixsfsi+0x60>
c0025ded:	89 c8                	mov    eax,ecx
c0025def:	0d 00 00 00 80       	or     eax,0x80000000
c0025df4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025df9:	29 d1                	sub    ecx,edx
c0025dfb:	d3 e8                	shr    eax,cl
c0025dfd:	eb 2e                	jmp    c0025e2d <__fixsfsi+0x60>
c0025dff:	31 c0                	xor    eax,eax
c0025e01:	81 c2 81 00 00 00    	add    edx,0x81
c0025e07:	78 24                	js     c0025e2d <__fixsfsi+0x60>
c0025e09:	83 fa 1e             	cmp    edx,0x1e
c0025e0c:	7e 09                	jle    c0025e17 <__fixsfsi+0x4a>
c0025e0e:	83 fa 1f             	cmp    edx,0x1f
c0025e11:	75 18                	jne    c0025e2b <__fixsfsi+0x5e>
c0025e13:	85 c9                	test   ecx,ecx
c0025e15:	75 14                	jne    c0025e2b <__fixsfsi+0x5e>
c0025e17:	89 c8                	mov    eax,ecx
c0025e19:	0d 00 00 00 80       	or     eax,0x80000000
c0025e1e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e23:	29 d1                	sub    ecx,edx
c0025e25:	d3 e8                	shr    eax,cl
c0025e27:	f7 d8                	neg    eax
c0025e29:	eb 02                	jmp    c0025e2d <__fixsfsi+0x60>
c0025e2b:	31 c0                	xor    eax,eax
c0025e2d:	5d                   	pop    ebp
c0025e2e:	c3                   	ret    

c0025e2f <__fixunssfsi>:
c0025e2f:	55                   	push   ebp
c0025e30:	89 e5                	mov    ebp,esp
c0025e32:	53                   	push   ebx
c0025e33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0025e36:	89 d3                	mov    ebx,edx
c0025e38:	c1 fb 17             	sar    ebx,0x17
c0025e3b:	83 eb 7f             	sub    ebx,0x7f
c0025e3e:	31 c0                	xor    eax,eax
c0025e40:	83 fb 1f             	cmp    ebx,0x1f
c0025e43:	77 18                	ja     c0025e5d <__fixunssfsi+0x2e>
c0025e45:	89 d0                	mov    eax,edx
c0025e47:	c1 e0 08             	shl    eax,0x8
c0025e4a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025e4f:	0d 00 00 00 80       	or     eax,0x80000000
c0025e54:	b9 1f 00 00 00       	mov    ecx,0x1f
c0025e59:	29 d9                	sub    ecx,ebx
c0025e5b:	d3 e8                	shr    eax,cl
c0025e5d:	5b                   	pop    ebx
c0025e5e:	5d                   	pop    ebp
c0025e5f:	c3                   	ret    

c0025e60 <__cmpsf2>:
c0025e60:	55                   	push   ebp
c0025e61:	89 e5                	mov    ebp,esp
c0025e63:	57                   	push   edi
c0025e64:	56                   	push   esi
c0025e65:	53                   	push   ebx
c0025e66:	83 ec 24             	sub    esp,0x24
c0025e69:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025e6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e6f:	e8 4f 10 00 00       	call   c0026ec3 <__truncdfsf2>
c0025e74:	5a                   	pop    edx
c0025e75:	59                   	pop    ecx
c0025e76:	89 c3                	mov    ebx,eax
c0025e78:	c1 e8 17             	shr    eax,0x17
c0025e7b:	0f b6 f0             	movzx  esi,al
c0025e7e:	89 d8                	mov    eax,ebx
c0025e80:	c1 e8 1f             	shr    eax,0x1f
c0025e83:	31 c6                	xor    esi,eax
c0025e85:	c1 e3 08             	shl    ebx,0x8
c0025e88:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0025e8b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0025e8e:	e8 30 10 00 00       	call   c0026ec3 <__truncdfsf2>
c0025e93:	83 c4 10             	add    esp,0x10
c0025e96:	89 c1                	mov    ecx,eax
c0025e98:	c1 e9 17             	shr    ecx,0x17
c0025e9b:	0f b6 c9             	movzx  ecx,cl
c0025e9e:	89 c7                	mov    edi,eax
c0025ea0:	c1 ef 1f             	shr    edi,0x1f
c0025ea3:	89 ca                	mov    edx,ecx
c0025ea5:	31 fa                	xor    edx,edi
c0025ea7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0025eaa:	c1 e0 08             	shl    eax,0x8
c0025ead:	89 c2                	mov    edx,eax
c0025eaf:	89 d8                	mov    eax,ebx
c0025eb1:	09 d0                	or     eax,edx
c0025eb3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0025eb8:	09 f0                	or     eax,esi
c0025eba:	75 08                	jne    c0025ec4 <__cmpsf2+0x64>
c0025ebc:	31 c0                	xor    eax,eax
c0025ebe:	39 f9                	cmp    ecx,edi
c0025ec0:	75 0c                	jne    c0025ece <__cmpsf2+0x6e>
c0025ec2:	eb 29                	jmp    c0025eed <__cmpsf2+0x8d>
c0025ec4:	b8 01 00 00 00       	mov    eax,0x1
c0025ec9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025ecc:	7f 1f                	jg     c0025eed <__cmpsf2+0x8d>
c0025ece:	83 c8 ff             	or     eax,0xffffffff
c0025ed1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0025ed4:	7c 17                	jl     c0025eed <__cmpsf2+0x8d>
c0025ed6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0025edc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0025ee2:	b8 01 00 00 00       	mov    eax,0x1
c0025ee7:	39 d3                	cmp    ebx,edx
c0025ee9:	77 02                	ja     c0025eed <__cmpsf2+0x8d>
c0025eeb:	19 c0                	sbb    eax,eax
c0025eed:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025ef0:	5b                   	pop    ebx
c0025ef1:	5e                   	pop    esi
c0025ef2:	5f                   	pop    edi
c0025ef3:	5d                   	pop    ebp
c0025ef4:	c3                   	ret    

c0025ef5 <__eqsf2>:
c0025ef5:	55                   	push   ebp
c0025ef6:	89 e5                	mov    ebp,esp
c0025ef8:	83 ec 24             	sub    esp,0x24
c0025efb:	6a 01                	push   0x1
c0025efd:	83 ec 0c             	sub    esp,0xc
c0025f00:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f03:	e8 df 10 00 00       	call   c0026fe7 <__extendsfdf2>
c0025f08:	83 c4 10             	add    esp,0x10
c0025f0b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f0e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f11:	52                   	push   edx
c0025f12:	50                   	push   eax
c0025f13:	50                   	push   eax
c0025f14:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f17:	e8 cb 10 00 00       	call   c0026fe7 <__extendsfdf2>
c0025f1c:	59                   	pop    ecx
c0025f1d:	59                   	pop    ecx
c0025f1e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f21:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f24:	52                   	push   edx
c0025f25:	50                   	push   eax
c0025f26:	e8 35 ff ff ff       	call   c0025e60 <__cmpsf2>
c0025f2b:	83 c4 20             	add    esp,0x20
c0025f2e:	c9                   	leave  
c0025f2f:	c3                   	ret    

c0025f30 <__nesf2>:
c0025f30:	eb c3                	jmp    c0025ef5 <__eqsf2>

c0025f32 <__gtsf2>:
c0025f32:	55                   	push   ebp
c0025f33:	89 e5                	mov    ebp,esp
c0025f35:	83 ec 24             	sub    esp,0x24
c0025f38:	6a ff                	push   0xffffffff
c0025f3a:	83 ec 0c             	sub    esp,0xc
c0025f3d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0025f40:	e8 a2 10 00 00       	call   c0026fe7 <__extendsfdf2>
c0025f45:	83 c4 10             	add    esp,0x10
c0025f48:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f4b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f4e:	52                   	push   edx
c0025f4f:	50                   	push   eax
c0025f50:	50                   	push   eax
c0025f51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f54:	e8 8e 10 00 00       	call   c0026fe7 <__extendsfdf2>
c0025f59:	59                   	pop    ecx
c0025f5a:	59                   	pop    ecx
c0025f5b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f5e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f61:	52                   	push   edx
c0025f62:	50                   	push   eax
c0025f63:	e8 f8 fe ff ff       	call   c0025e60 <__cmpsf2>
c0025f68:	83 c4 20             	add    esp,0x20
c0025f6b:	c9                   	leave  
c0025f6c:	c3                   	ret    

c0025f6d <__gesf2>:
c0025f6d:	eb c3                	jmp    c0025f32 <__gtsf2>

c0025f6f <__ltsf2>:
c0025f6f:	eb 84                	jmp    c0025ef5 <__eqsf2>

c0025f71 <__lesf2>:
c0025f71:	eb 82                	jmp    c0025ef5 <__eqsf2>

c0025f73 <__adddf3>:
c0025f73:	55                   	push   ebp
c0025f74:	89 e5                	mov    ebp,esp
c0025f76:	57                   	push   edi
c0025f77:	56                   	push   esi
c0025f78:	53                   	push   ebx
c0025f79:	83 ec 24             	sub    esp,0x24
c0025f7c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0025f7f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025f82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025f85:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025f88:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025f8b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025f8e:	89 c8                	mov    eax,ecx
c0025f90:	89 ce                	mov    esi,ecx
c0025f92:	c1 fe 14             	sar    esi,0x14
c0025f95:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0025f98:	89 fb                	mov    ebx,edi
c0025f9a:	89 fa                	mov    edx,edi
c0025f9c:	c1 e2 0b             	shl    edx,0xb
c0025f9f:	c1 e0 0b             	shl    eax,0xb
c0025fa2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0025fa7:	c1 eb 15             	shr    ebx,0x15
c0025faa:	09 d8                	or     eax,ebx
c0025fac:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0025faf:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0025fb2:	c1 fe 14             	sar    esi,0x14
c0025fb5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0025fb8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0025fbb:	89 f3                	mov    ebx,esi
c0025fbd:	c1 e3 0b             	shl    ebx,0xb
c0025fc0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0025fc3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0025fc6:	c1 e3 0b             	shl    ebx,0xb
c0025fc9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0025fcf:	c1 ee 15             	shr    esi,0x15
c0025fd2:	09 f3                	or     ebx,esi
c0025fd4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0025fd7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0025fda:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0025fdd:	0f 88 5f 02 00 00    	js     c0026242 <__adddf3+0x2cf>
c0025fe3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0025fe6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0025fe9:	85 db                	test   ebx,ebx
c0025feb:	0f 8e c7 00 00 00    	jle    c00260b8 <__adddf3+0x145>
c0025ff1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0025ff8:	75 1a                	jne    c0026014 <__adddf3+0xa1>
c0025ffa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0025ffd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0026000:	0f 84 b2 05 00 00    	je     c00265b8 <__adddf3+0x645>
c0026006:	4b                   	dec    ebx
c0026007:	75 23                	jne    c002602c <__adddf3+0xb9>
c0026009:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002600c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002600f:	e9 99 00 00 00       	jmp    c00260ad <__adddf3+0x13a>
c0026014:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026017:	f7 d6                	not    esi
c0026019:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002601f:	0f 84 93 05 00 00    	je     c00265b8 <__adddf3+0x645>
c0026025:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002602c:	83 fb 1f             	cmp    ebx,0x1f
c002602f:	7e 42                	jle    c0026073 <__adddf3+0x100>
c0026031:	83 fb 3f             	cmp    ebx,0x3f
c0026034:	0f 8f 7e 05 00 00    	jg     c00265b8 <__adddf3+0x645>
c002603a:	83 e3 1f             	and    ebx,0x1f
c002603d:	89 d9                	mov    ecx,ebx
c002603f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026042:	d3 ef                	shr    edi,cl
c0026044:	31 db                	xor    ebx,ebx
c0026046:	85 c9                	test   ecx,ecx
c0026048:	74 15                	je     c002605f <__adddf3+0xec>
c002604a:	be 20 00 00 00       	mov    esi,0x20
c002604f:	29 ce                	sub    esi,ecx
c0026051:	89 f1                	mov    ecx,esi
c0026053:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026056:	d3 e6                	shl    esi,cl
c0026058:	31 db                	xor    ebx,ebx
c002605a:	85 f6                	test   esi,esi
c002605c:	0f 95 c3             	setne  bl
c002605f:	31 c9                	xor    ecx,ecx
c0026061:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026065:	0f 95 c1             	setne  cl
c0026068:	09 cf                	or     edi,ecx
c002606a:	09 fb                	or     ebx,edi
c002606c:	01 da                	add    edx,ebx
c002606e:	83 d0 00             	adc    eax,0x0
c0026071:	eb 3a                	jmp    c00260ad <__adddf3+0x13a>
c0026073:	bf 20 00 00 00       	mov    edi,0x20
c0026078:	29 df                	sub    edi,ebx
c002607a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002607d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026080:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0026083:	d3 e6                	shl    esi,cl
c0026085:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026088:	88 d9                	mov    cl,bl
c002608a:	d3 ef                	shr    edi,cl
c002608c:	09 fe                	or     esi,edi
c002608e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026091:	88 d9                	mov    cl,bl
c0026093:	d3 ef                	shr    edi,cl
c0026095:	89 fb                	mov    ebx,edi
c0026097:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002609a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002609d:	d3 e7                	shl    edi,cl
c002609f:	85 ff                	test   edi,edi
c00260a1:	0f 95 c1             	setne  cl
c00260a4:	0f b6 c9             	movzx  ecx,cl
c00260a7:	09 ce                	or     esi,ecx
c00260a9:	01 f2                	add    edx,esi
c00260ab:	11 d8                	adc    eax,ebx
c00260ad:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00260b0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00260b3:	e9 52 01 00 00       	jmp    c002620a <__adddf3+0x297>
c00260b8:	0f 84 d5 00 00 00    	je     c0026193 <__adddf3+0x220>
c00260be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00260c1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00260c4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00260c7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00260ca:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00260d1:	75 20                	jne    c00260f3 <__adddf3+0x180>
c00260d3:	89 d6                	mov    esi,edx
c00260d5:	09 c6                	or     esi,eax
c00260d7:	0f 84 db 04 00 00    	je     c00265b8 <__adddf3+0x645>
c00260dd:	4b                   	dec    ebx
c00260de:	75 29                	jne    c0026109 <__adddf3+0x196>
c00260e0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00260e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00260e6:	01 d1                	add    ecx,edx
c00260e8:	11 c6                	adc    esi,eax
c00260ea:	89 f0                	mov    eax,esi
c00260ec:	89 ca                	mov    edx,ecx
c00260ee:	e9 17 01 00 00       	jmp    c002620a <__adddf3+0x297>
c00260f3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00260f6:	f7 d6                	not    esi
c00260f8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00260fe:	0f 84 b4 04 00 00    	je     c00265b8 <__adddf3+0x645>
c0026104:	0d 00 00 00 80       	or     eax,0x80000000
c0026109:	83 fb 1f             	cmp    ebx,0x1f
c002610c:	7e 48                	jle    c0026156 <__adddf3+0x1e3>
c002610e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026111:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026114:	83 fb 3f             	cmp    ebx,0x3f
c0026117:	0f 8f 9b 04 00 00    	jg     c00265b8 <__adddf3+0x645>
c002611d:	83 e3 1f             	and    ebx,0x1f
c0026120:	89 d9                	mov    ecx,ebx
c0026122:	89 c7                	mov    edi,eax
c0026124:	d3 ef                	shr    edi,cl
c0026126:	31 db                	xor    ebx,ebx
c0026128:	85 c9                	test   ecx,ecx
c002612a:	74 12                	je     c002613e <__adddf3+0x1cb>
c002612c:	be 20 00 00 00       	mov    esi,0x20
c0026131:	29 ce                	sub    esi,ecx
c0026133:	89 f1                	mov    ecx,esi
c0026135:	d3 e0                	shl    eax,cl
c0026137:	31 db                	xor    ebx,ebx
c0026139:	85 c0                	test   eax,eax
c002613b:	0f 95 c3             	setne  bl
c002613e:	31 c0                	xor    eax,eax
c0026140:	85 d2                	test   edx,edx
c0026142:	0f 95 c0             	setne  al
c0026145:	09 c7                	or     edi,eax
c0026147:	09 fb                	or     ebx,edi
c0026149:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002614c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002614f:	01 da                	add    edx,ebx
c0026151:	83 d6 00             	adc    esi,0x0
c0026154:	eb 39                	jmp    c002618f <__adddf3+0x21c>
c0026156:	be 20 00 00 00       	mov    esi,0x20
c002615b:	29 de                	sub    esi,ebx
c002615d:	89 c7                	mov    edi,eax
c002615f:	89 f1                	mov    ecx,esi
c0026161:	d3 e7                	shl    edi,cl
c0026163:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0026166:	89 d7                	mov    edi,edx
c0026168:	88 d9                	mov    cl,bl
c002616a:	d3 ef                	shr    edi,cl
c002616c:	89 f9                	mov    ecx,edi
c002616e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026171:	09 cf                	or     edi,ecx
c0026173:	88 d9                	mov    cl,bl
c0026175:	d3 e8                	shr    eax,cl
c0026177:	89 f1                	mov    ecx,esi
c0026179:	d3 e2                	shl    edx,cl
c002617b:	85 d2                	test   edx,edx
c002617d:	0f 95 c2             	setne  dl
c0026180:	0f b6 d2             	movzx  edx,dl
c0026183:	09 d7                	or     edi,edx
c0026185:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026188:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002618b:	01 fa                	add    edx,edi
c002618d:	11 c6                	adc    esi,eax
c002618f:	89 f0                	mov    eax,esi
c0026191:	eb 77                	jmp    c002620a <__adddf3+0x297>
c0026193:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026196:	46                   	inc    esi
c0026197:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002619a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00261a0:	75 41                	jne    c00261e3 <__adddf3+0x270>
c00261a2:	89 d3                	mov    ebx,edx
c00261a4:	09 c3                	or     ebx,eax
c00261a6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00261ad:	75 27                	jne    c00261d6 <__adddf3+0x263>
c00261af:	85 db                	test   ebx,ebx
c00261b1:	0f 84 fb 03 00 00    	je     c00265b2 <__adddf3+0x63f>
c00261b7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00261ba:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00261bd:	0f 84 f5 03 00 00    	je     c00265b8 <__adddf3+0x645>
c00261c3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00261c6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00261c9:	85 c0                	test   eax,eax
c00261cb:	0f 89 91 03 00 00    	jns    c0026562 <__adddf3+0x5ef>
c00261d1:	e9 85 03 00 00       	jmp    c002655b <__adddf3+0x5e8>
c00261d6:	85 db                	test   ebx,ebx
c00261d8:	0f 85 da 03 00 00    	jne    c00265b8 <__adddf3+0x645>
c00261de:	e9 cf 03 00 00       	jmp    c00265b2 <__adddf3+0x63f>
c00261e3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00261e6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00261e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00261ec:	f7 d1                	not    ecx
c00261ee:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00261f4:	0f 84 70 03 00 00    	je     c002656a <__adddf3+0x5f7>
c00261fa:	d1 ea                	shr    edx,1
c00261fc:	89 c1                	mov    ecx,eax
c00261fe:	c1 e1 1f             	shl    ecx,0x1f
c0026201:	09 ca                	or     edx,ecx
c0026203:	d1 e8                	shr    eax,1
c0026205:	e9 6f 03 00 00       	jmp    c0026579 <__adddf3+0x606>
c002620a:	85 c0                	test   eax,eax
c002620c:	0f 89 67 03 00 00    	jns    c0026579 <__adddf3+0x606>
c0026212:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0026215:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026218:	f7 d1                	not    ecx
c002621a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0026220:	0f 84 44 03 00 00    	je     c002656a <__adddf3+0x5f7>
c0026226:	89 d1                	mov    ecx,edx
c0026228:	d1 e9                	shr    ecx,1
c002622a:	83 e2 01             	and    edx,0x1
c002622d:	09 ca                	or     edx,ecx
c002622f:	89 c1                	mov    ecx,eax
c0026231:	c1 e1 1f             	shl    ecx,0x1f
c0026234:	09 ca                	or     edx,ecx
c0026236:	d1 e8                	shr    eax,1
c0026238:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002623d:	e9 37 03 00 00       	jmp    c0026579 <__adddf3+0x606>
c0026242:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0026245:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002624b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002624e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026251:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026257:	29 de                	sub    esi,ebx
c0026259:	85 f6                	test   esi,esi
c002625b:	0f 8e bd 00 00 00    	jle    c002631e <__adddf3+0x3ab>
c0026261:	85 db                	test   ebx,ebx
c0026263:	75 17                	jne    c002627c <__adddf3+0x309>
c0026265:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026268:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002626b:	0f 84 47 03 00 00    	je     c00265b8 <__adddf3+0x645>
c0026271:	4e                   	dec    esi
c0026272:	75 20                	jne    c0026294 <__adddf3+0x321>
c0026274:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026277:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002627a:	eb 5b                	jmp    c00262d7 <__adddf3+0x364>
c002627c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002627f:	f7 d3                	not    ebx
c0026281:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026287:	0f 84 2b 03 00 00    	je     c00265b8 <__adddf3+0x645>
c002628d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0026294:	83 fe 1f             	cmp    esi,0x1f
c0026297:	7e 49                	jle    c00262e2 <__adddf3+0x36f>
c0026299:	83 fe 3f             	cmp    esi,0x3f
c002629c:	0f 8f 16 03 00 00    	jg     c00265b8 <__adddf3+0x645>
c00262a2:	83 e6 1f             	and    esi,0x1f
c00262a5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00262a8:	89 f1                	mov    ecx,esi
c00262aa:	d3 ef                	shr    edi,cl
c00262ac:	31 db                	xor    ebx,ebx
c00262ae:	85 f6                	test   esi,esi
c00262b0:	74 13                	je     c00262c5 <__adddf3+0x352>
c00262b2:	b9 20 00 00 00       	mov    ecx,0x20
c00262b7:	29 f1                	sub    ecx,esi
c00262b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00262bc:	d3 e6                	shl    esi,cl
c00262be:	31 db                	xor    ebx,ebx
c00262c0:	85 f6                	test   esi,esi
c00262c2:	0f 95 c3             	setne  bl
c00262c5:	31 c9                	xor    ecx,ecx
c00262c7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00262cb:	0f 95 c1             	setne  cl
c00262ce:	09 cf                	or     edi,ecx
c00262d0:	09 fb                	or     ebx,edi
c00262d2:	29 da                	sub    edx,ebx
c00262d4:	83 d8 00             	sbb    eax,0x0
c00262d7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00262da:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00262dd:	e9 aa 01 00 00       	jmp    c002648c <__adddf3+0x519>
c00262e2:	bf 20 00 00 00       	mov    edi,0x20
c00262e7:	29 f7                	sub    edi,esi
c00262e9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00262ec:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00262ef:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00262f2:	d3 e3                	shl    ebx,cl
c00262f4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00262f7:	89 f1                	mov    ecx,esi
c00262f9:	d3 ef                	shr    edi,cl
c00262fb:	09 fb                	or     ebx,edi
c00262fd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0026300:	89 f1                	mov    ecx,esi
c0026302:	d3 ef                	shr    edi,cl
c0026304:	89 fe                	mov    esi,edi
c0026306:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026309:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002630c:	d3 e7                	shl    edi,cl
c002630e:	85 ff                	test   edi,edi
c0026310:	0f 95 c1             	setne  cl
c0026313:	0f b6 c9             	movzx  ecx,cl
c0026316:	09 cb                	or     ebx,ecx
c0026318:	29 da                	sub    edx,ebx
c002631a:	19 f0                	sbb    eax,esi
c002631c:	eb b9                	jmp    c00262d7 <__adddf3+0x364>
c002631e:	0f 84 cd 00 00 00    	je     c00263f1 <__adddf3+0x47e>
c0026324:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0026327:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002632a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002632d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026331:	75 1b                	jne    c002634e <__adddf3+0x3db>
c0026333:	89 d6                	mov    esi,edx
c0026335:	09 c6                	or     esi,eax
c0026337:	0f 84 7b 02 00 00    	je     c00265b8 <__adddf3+0x645>
c002633d:	4b                   	dec    ebx
c002633e:	75 24                	jne    c0026364 <__adddf3+0x3f1>
c0026340:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026343:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026346:	29 d1                	sub    ecx,edx
c0026348:	19 c6                	sbb    esi,eax
c002634a:	89 ca                	mov    edx,ecx
c002634c:	eb 61                	jmp    c00263af <__adddf3+0x43c>
c002634e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0026351:	f7 d6                	not    esi
c0026353:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026359:	0f 84 59 02 00 00    	je     c00265b8 <__adddf3+0x645>
c002635f:	0d 00 00 00 80       	or     eax,0x80000000
c0026364:	83 fb 1f             	cmp    ebx,0x1f
c0026367:	7e 4d                	jle    c00263b6 <__adddf3+0x443>
c0026369:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002636c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002636f:	83 fb 3f             	cmp    ebx,0x3f
c0026372:	0f 8f 40 02 00 00    	jg     c00265b8 <__adddf3+0x645>
c0026378:	83 e3 1f             	and    ebx,0x1f
c002637b:	89 d9                	mov    ecx,ebx
c002637d:	89 c7                	mov    edi,eax
c002637f:	d3 ef                	shr    edi,cl
c0026381:	31 db                	xor    ebx,ebx
c0026383:	85 c9                	test   ecx,ecx
c0026385:	74 12                	je     c0026399 <__adddf3+0x426>
c0026387:	be 20 00 00 00       	mov    esi,0x20
c002638c:	29 ce                	sub    esi,ecx
c002638e:	89 f1                	mov    ecx,esi
c0026390:	d3 e0                	shl    eax,cl
c0026392:	31 db                	xor    ebx,ebx
c0026394:	85 c0                	test   eax,eax
c0026396:	0f 95 c3             	setne  bl
c0026399:	31 c0                	xor    eax,eax
c002639b:	85 d2                	test   edx,edx
c002639d:	0f 95 c0             	setne  al
c00263a0:	09 c7                	or     edi,eax
c00263a2:	09 fb                	or     ebx,edi
c00263a4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00263a7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00263aa:	29 da                	sub    edx,ebx
c00263ac:	83 de 00             	sbb    esi,0x0
c00263af:	89 f0                	mov    eax,esi
c00263b1:	e9 d6 00 00 00       	jmp    c002648c <__adddf3+0x519>
c00263b6:	be 20 00 00 00       	mov    esi,0x20
c00263bb:	29 de                	sub    esi,ebx
c00263bd:	89 c7                	mov    edi,eax
c00263bf:	89 f1                	mov    ecx,esi
c00263c1:	d3 e7                	shl    edi,cl
c00263c3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00263c6:	89 d7                	mov    edi,edx
c00263c8:	88 d9                	mov    cl,bl
c00263ca:	d3 ef                	shr    edi,cl
c00263cc:	89 f9                	mov    ecx,edi
c00263ce:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00263d1:	09 cf                	or     edi,ecx
c00263d3:	88 d9                	mov    cl,bl
c00263d5:	d3 e8                	shr    eax,cl
c00263d7:	89 f1                	mov    ecx,esi
c00263d9:	d3 e2                	shl    edx,cl
c00263db:	85 d2                	test   edx,edx
c00263dd:	0f 95 c2             	setne  dl
c00263e0:	0f b6 d2             	movzx  edx,dl
c00263e3:	09 d7                	or     edi,edx
c00263e5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00263e8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00263eb:	29 fa                	sub    edx,edi
c00263ed:	19 c6                	sbb    esi,eax
c00263ef:	eb be                	jmp    c00263af <__adddf3+0x43c>
c00263f1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00263f4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00263f7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00263fd:	75 6a                	jne    c0026469 <__adddf3+0x4f6>
c00263ff:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026403:	75 58                	jne    c002645d <__adddf3+0x4ea>
c0026405:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026408:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002640b:	89 d6                	mov    esi,edx
c002640d:	09 c6                	or     esi,eax
c002640f:	75 17                	jne    c0026428 <__adddf3+0x4b5>
c0026411:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0026414:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0026417:	85 db                	test   ebx,ebx
c0026419:	0f 85 99 01 00 00    	jne    c00265b8 <__adddf3+0x645>
c002641f:	31 ff                	xor    edi,edi
c0026421:	31 c9                	xor    ecx,ecx
c0026423:	e9 90 01 00 00       	jmp    c00265b8 <__adddf3+0x645>
c0026428:	85 db                	test   ebx,ebx
c002642a:	0f 84 88 01 00 00    	je     c00265b8 <__adddf3+0x645>
c0026430:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0026433:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0026436:	85 c0                	test   eax,eax
c0026438:	79 10                	jns    c002644a <__adddf3+0x4d7>
c002643a:	31 c9                	xor    ecx,ecx
c002643c:	f7 da                	neg    edx
c002643e:	0f 95 c1             	setne  cl
c0026441:	01 c8                	add    eax,ecx
c0026443:	f7 d8                	neg    eax
c0026445:	e9 2f 01 00 00       	jmp    c0026579 <__adddf3+0x606>
c002644a:	31 ff                	xor    edi,edi
c002644c:	31 c9                	xor    ecx,ecx
c002644e:	89 c3                	mov    ebx,eax
c0026450:	09 d3                	or     ebx,edx
c0026452:	0f 84 60 01 00 00    	je     c00265b8 <__adddf3+0x645>
c0026458:	e9 05 01 00 00       	jmp    c0026562 <__adddf3+0x5ef>
c002645d:	31 ff                	xor    edi,edi
c002645f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026464:	e9 4f 01 00 00       	jmp    c00265b8 <__adddf3+0x645>
c0026469:	89 c1                	mov    ecx,eax
c002646b:	89 d0                	mov    eax,edx
c002646d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0026470:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0026473:	89 ca                	mov    edx,ecx
c0026475:	85 c9                	test   ecx,ecx
c0026477:	79 2c                	jns    c00264a5 <__adddf3+0x532>
c0026479:	31 c9                	xor    ecx,ecx
c002647b:	f7 d8                	neg    eax
c002647d:	0f 95 c1             	setne  cl
c0026480:	01 ca                	add    edx,ecx
c0026482:	f7 da                	neg    edx
c0026484:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026487:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002648a:	eb 19                	jmp    c00264a5 <__adddf3+0x532>
c002648c:	85 c0                	test   eax,eax
c002648e:	0f 89 e5 00 00 00    	jns    c0026579 <__adddf3+0x606>
c0026494:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026499:	89 c1                	mov    ecx,eax
c002649b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002649e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00264a1:	89 d0                	mov    eax,edx
c00264a3:	89 ca                	mov    edx,ecx
c00264a5:	85 d2                	test   edx,edx
c00264a7:	74 59                	je     c0026502 <__adddf3+0x58f>
c00264a9:	0f bd da             	bsr    ebx,edx
c00264ac:	83 f3 1f             	xor    ebx,0x1f
c00264af:	88 d9                	mov    cl,bl
c00264b1:	d3 e2                	shl    edx,cl
c00264b3:	bf 20 00 00 00       	mov    edi,0x20
c00264b8:	89 f9                	mov    ecx,edi
c00264ba:	29 d9                	sub    ecx,ebx
c00264bc:	89 c6                	mov    esi,eax
c00264be:	d3 ee                	shr    esi,cl
c00264c0:	09 d6                	or     esi,edx
c00264c2:	88 d9                	mov    cl,bl
c00264c4:	d3 e0                	shl    eax,cl
c00264c6:	89 c2                	mov    edx,eax
c00264c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264cb:	25 ff 07 00 00       	and    eax,0x7ff
c00264d0:	39 d8                	cmp    eax,ebx
c00264d2:	7f 22                	jg     c00264f6 <__adddf3+0x583>
c00264d4:	29 c3                	sub    ebx,eax
c00264d6:	43                   	inc    ebx
c00264d7:	88 d9                	mov    cl,bl
c00264d9:	d3 ea                	shr    edx,cl
c00264db:	29 df                	sub    edi,ebx
c00264dd:	89 f9                	mov    ecx,edi
c00264df:	89 f0                	mov    eax,esi
c00264e1:	d3 e0                	shl    eax,cl
c00264e3:	09 c2                	or     edx,eax
c00264e5:	89 f0                	mov    eax,esi
c00264e7:	88 d9                	mov    cl,bl
c00264e9:	d3 e8                	shr    eax,cl
c00264eb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00264ee:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00264f4:	eb 6f                	jmp    c0026565 <__adddf3+0x5f2>
c00264f6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00264f9:	29 d8                	sub    eax,ebx
c00264fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00264fe:	89 f0                	mov    eax,esi
c0026500:	eb 59                	jmp    c002655b <__adddf3+0x5e8>
c0026502:	85 c0                	test   eax,eax
c0026504:	74 6a                	je     c0026570 <__adddf3+0x5fd>
c0026506:	0f bd c8             	bsr    ecx,eax
c0026509:	83 f1 1f             	xor    ecx,0x1f
c002650c:	d3 e0                	shl    eax,cl
c002650e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026511:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026517:	83 c1 20             	add    ecx,0x20
c002651a:	39 cb                	cmp    ebx,ecx
c002651c:	7f 35                	jg     c0026553 <__adddf3+0x5e0>
c002651e:	29 d9                	sub    ecx,ebx
c0026520:	8d 71 01             	lea    esi,[ecx+0x1]
c0026523:	83 fe 1f             	cmp    esi,0x1f
c0026526:	7e 09                	jle    c0026531 <__adddf3+0x5be>
c0026528:	83 e9 1f             	sub    ecx,0x1f
c002652b:	d3 e8                	shr    eax,cl
c002652d:	89 c3                	mov    ebx,eax
c002652f:	eb 11                	jmp    c0026542 <__adddf3+0x5cf>
c0026531:	b9 20 00 00 00       	mov    ecx,0x20
c0026536:	29 f1                	sub    ecx,esi
c0026538:	89 c3                	mov    ebx,eax
c002653a:	d3 e3                	shl    ebx,cl
c002653c:	89 f1                	mov    ecx,esi
c002653e:	d3 e8                	shr    eax,cl
c0026540:	89 c2                	mov    edx,eax
c0026542:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026545:	25 00 f8 ff ff       	and    eax,0xfffff800
c002654a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002654d:	89 d0                	mov    eax,edx
c002654f:	89 da                	mov    edx,ebx
c0026551:	eb 26                	jmp    c0026579 <__adddf3+0x606>
c0026553:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026556:	29 cf                	sub    edi,ecx
c0026558:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002655b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026560:	eb 17                	jmp    c0026579 <__adddf3+0x606>
c0026562:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026565:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026568:	eb 0f                	jmp    c0026579 <__adddf3+0x606>
c002656a:	31 d2                	xor    edx,edx
c002656c:	31 c0                	xor    eax,eax
c002656e:	eb 09                	jmp    c0026579 <__adddf3+0x606>
c0026570:	89 c2                	mov    edx,eax
c0026572:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0026579:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002657c:	c1 e1 14             	shl    ecx,0x14
c002657f:	89 c3                	mov    ebx,eax
c0026581:	c1 eb 0b             	shr    ebx,0xb
c0026584:	09 d9                	or     ecx,ebx
c0026586:	89 d3                	mov    ebx,edx
c0026588:	c1 eb 0b             	shr    ebx,0xb
c002658b:	c1 e0 15             	shl    eax,0x15
c002658e:	09 d8                	or     eax,ebx
c0026590:	89 c7                	mov    edi,eax
c0026592:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0026598:	0f 95 c0             	setne  al
c002659b:	89 c6                	mov    esi,eax
c002659d:	09 f3                	or     ebx,esi
c002659f:	83 e3 01             	and    ebx,0x1
c00265a2:	c1 ea 0a             	shr    edx,0xa
c00265a5:	21 da                	and    edx,ebx
c00265a7:	89 f8                	mov    eax,edi
c00265a9:	01 d0                	add    eax,edx
c00265ab:	83 d1 00             	adc    ecx,0x0
c00265ae:	89 c7                	mov    edi,eax
c00265b0:	eb 06                	jmp    c00265b8 <__adddf3+0x645>
c00265b2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00265b5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00265b8:	89 f8                	mov    eax,edi
c00265ba:	89 ca                	mov    edx,ecx
c00265bc:	83 c4 24             	add    esp,0x24
c00265bf:	5b                   	pop    ebx
c00265c0:	5e                   	pop    esi
c00265c1:	5f                   	pop    edi
c00265c2:	5d                   	pop    ebp
c00265c3:	c3                   	ret    

c00265c4 <__subdf3>:
c00265c4:	55                   	push   ebp
c00265c5:	89 e5                	mov    ebp,esp
c00265c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00265ca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00265cd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00265d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00265d6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00265d9:	5d                   	pop    ebp
c00265da:	e9 94 f9 ff ff       	jmp    c0025f73 <__adddf3>

c00265df <__negdf2>:
c00265df:	55                   	push   ebp
c00265e0:	89 e5                	mov    ebp,esp
c00265e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265e5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00265e8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00265ee:	5d                   	pop    ebp
c00265ef:	c3                   	ret    

c00265f0 <__muldf3>:
c00265f0:	55                   	push   ebp
c00265f1:	89 e5                	mov    ebp,esp
c00265f3:	57                   	push   edi
c00265f4:	56                   	push   esi
c00265f5:	53                   	push   ebx
c00265f6:	83 ec 24             	sub    esp,0x24
c00265f9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00265fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00265ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026602:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0026605:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0026608:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002660b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002660e:	89 c8                	mov    eax,ecx
c0026610:	c1 f8 14             	sar    eax,0x14
c0026613:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026616:	89 f8                	mov    eax,edi
c0026618:	89 fb                	mov    ebx,edi
c002661a:	c1 e3 0b             	shl    ebx,0xb
c002661d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0026620:	c1 e1 0b             	shl    ecx,0xb
c0026623:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026629:	c1 e8 15             	shr    eax,0x15
c002662c:	09 c1                	or     ecx,eax
c002662e:	89 d6                	mov    esi,edx
c0026630:	89 d0                	mov    eax,edx
c0026632:	c1 f8 14             	sar    eax,0x14
c0026635:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0026638:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002663b:	89 c3                	mov    ebx,eax
c002663d:	c1 e3 0b             	shl    ebx,0xb
c0026640:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0026643:	c1 e6 0b             	shl    esi,0xb
c0026646:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002664c:	c1 e8 15             	shr    eax,0x15
c002664f:	09 c6                	or     esi,eax
c0026651:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026654:	25 ff 07 00 00       	and    eax,0x7ff
c0026659:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002665c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002665f:	25 ff 07 00 00       	and    eax,0x7ff
c0026664:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0026667:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002666a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002666d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0026674:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026677:	40                   	inc    eax
c0026678:	a9 fe 07 00 00       	test   eax,0x7fe
c002667d:	0f 85 8d 00 00 00    	jne    c0026710 <__muldf3+0x120>
c0026683:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026686:	09 c8                	or     eax,ecx
c0026688:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002668c:	74 44                	je     c00266d2 <__muldf3+0xe2>
c002668e:	85 c0                	test   eax,eax
c0026690:	0f 85 31 02 00 00    	jne    c00268c7 <__muldf3+0x2d7>
c0026696:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026699:	40                   	inc    eax
c002669a:	a9 fe 07 00 00       	test   eax,0x7fe
c002669f:	75 13                	jne    c00266b4 <__muldf3+0xc4>
c00266a1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00266a4:	09 f1                	or     ecx,esi
c00266a6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00266aa:	74 22                	je     c00266ce <__muldf3+0xde>
c00266ac:	85 c9                	test   ecx,ecx
c00266ae:	0f 85 0d 02 00 00    	jne    c00268c1 <__muldf3+0x2d1>
c00266b4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00266b8:	0f 89 09 02 00 00    	jns    c00268c7 <__muldf3+0x2d7>
c00266be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00266c1:	05 00 00 00 80       	add    eax,0x80000000
c00266c6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00266c9:	e9 f9 01 00 00       	jmp    c00268c7 <__muldf3+0x2d7>
c00266ce:	85 c9                	test   ecx,ecx
c00266d0:	eb 2e                	jmp    c0026700 <__muldf3+0x110>
c00266d2:	85 c0                	test   eax,eax
c00266d4:	74 20                	je     c00266f6 <__muldf3+0x106>
c00266d6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00266d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00266dc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00266df:	c1 ef 1f             	shr    edi,0x1f
c00266e2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00266e5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00266e8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00266eb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00266ee:	09 f9                	or     ecx,edi
c00266f0:	78 1e                	js     c0026710 <__muldf3+0x120>
c00266f2:	89 c3                	mov    ebx,eax
c00266f4:	eb e0                	jmp    c00266d6 <__muldf3+0xe6>
c00266f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00266f9:	f7 d0                	not    eax
c00266fb:	a9 ff 07 00 00       	test   eax,0x7ff
c0026700:	75 b2                	jne    c00266b4 <__muldf3+0xc4>
c0026702:	31 ff                	xor    edi,edi
c0026704:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002670b:	e9 b7 01 00 00       	jmp    c00268c7 <__muldf3+0x2d7>
c0026710:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026713:	40                   	inc    eax
c0026714:	a9 fe 07 00 00       	test   eax,0x7fe
c0026719:	75 57                	jne    c0026772 <__muldf3+0x182>
c002671b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002671e:	09 f0                	or     eax,esi
c0026720:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0026724:	74 23                	je     c0026749 <__muldf3+0x159>
c0026726:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002672a:	0f 89 91 01 00 00    	jns    c00268c1 <__muldf3+0x2d1>
c0026730:	85 c0                	test   eax,eax
c0026732:	0f 85 89 01 00 00    	jne    c00268c1 <__muldf3+0x2d1>
c0026738:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002673b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0026741:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026744:	e9 7e 01 00 00       	jmp    c00268c7 <__muldf3+0x2d7>
c0026749:	85 c0                	test   eax,eax
c002674b:	75 0c                	jne    c0026759 <__muldf3+0x169>
c002674d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0026751:	0f 89 6a 01 00 00    	jns    c00268c1 <__muldf3+0x2d1>
c0026757:	eb df                	jmp    c0026738 <__muldf3+0x148>
c0026759:	01 f6                	add    esi,esi
c002675b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002675e:	c1 ea 1f             	shr    edx,0x1f
c0026761:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0026764:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0026767:	8d 43 ff             	lea    eax,[ebx-0x1]
c002676a:	09 d6                	or     esi,edx
c002676c:	78 04                	js     c0026772 <__muldf3+0x182>
c002676e:	89 c3                	mov    ebx,eax
c0026770:	eb e7                	jmp    c0026759 <__muldf3+0x169>
c0026772:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0026778:	81 ce 00 00 00 80    	or     esi,0x80000000
c002677e:	89 c8                	mov    eax,ecx
c0026780:	f7 e6                	mul    esi
c0026782:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0026785:	89 c7                	mov    edi,eax
c0026787:	89 c8                	mov    eax,ecx
c0026789:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002678c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002678f:	89 c1                	mov    ecx,eax
c0026791:	89 f0                	mov    eax,esi
c0026793:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0026796:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0026799:	89 c6                	mov    esi,eax
c002679b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002679e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00267a1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00267a4:	31 c0                	xor    eax,eax
c00267a6:	01 f1                	add    ecx,esi
c00267a8:	0f 92 c0             	setb   al
c00267ab:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00267ae:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00267b1:	83 d6 00             	adc    esi,0x0
c00267b4:	01 c7                	add    edi,eax
c00267b6:	83 d6 00             	adc    esi,0x0
c00267b9:	01 ca                	add    edx,ecx
c00267bb:	0f 92 c1             	setb   cl
c00267be:	0f b6 c9             	movzx  ecx,cl
c00267c1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00267c4:	83 d6 00             	adc    esi,0x0
c00267c7:	01 cf                	add    edi,ecx
c00267c9:	83 d6 00             	adc    esi,0x0
c00267cc:	31 c9                	xor    ecx,ecx
c00267ce:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00267d1:	0f 95 c1             	setne  cl
c00267d4:	09 cf                	or     edi,ecx
c00267d6:	85 f6                	test   esi,esi
c00267d8:	78 0c                	js     c00267e6 <__muldf3+0x1f6>
c00267da:	01 f6                	add    esi,esi
c00267dc:	89 f8                	mov    eax,edi
c00267de:	c1 e8 1f             	shr    eax,0x1f
c00267e1:	09 c6                	or     esi,eax
c00267e3:	01 ff                	add    edi,edi
c00267e5:	4b                   	dec    ebx
c00267e6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00267ec:	0f 8f 85 00 00 00    	jg     c0026877 <__muldf3+0x287>
c00267f2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00267f8:	85 db                	test   ebx,ebx
c00267fa:	0f 8f 84 00 00 00    	jg     c0026884 <__muldf3+0x294>
c0026800:	83 fb cc             	cmp    ebx,0xffffffcc
c0026803:	7c 79                	jl     c002687e <__muldf3+0x28e>
c0026805:	ba 01 00 00 00       	mov    edx,0x1
c002680a:	29 da                	sub    edx,ebx
c002680c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026812:	83 fa 1f             	cmp    edx,0x1f
c0026815:	7e 30                	jle    c0026847 <__muldf3+0x257>
c0026817:	83 fa 20             	cmp    edx,0x20
c002681a:	75 0b                	jne    c0026827 <__muldf3+0x237>
c002681c:	31 c0                	xor    eax,eax
c002681e:	85 ff                	test   edi,edi
c0026820:	0f 95 c0             	setne  al
c0026823:	89 c7                	mov    edi,eax
c0026825:	eb 1a                	jmp    c0026841 <__muldf3+0x251>
c0026827:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c002682a:	89 f0                	mov    eax,esi
c002682c:	d3 e0                	shl    eax,cl
c002682e:	09 f8                	or     eax,edi
c0026830:	0f 95 c0             	setne  al
c0026833:	0f b6 c0             	movzx  eax,al
c0026836:	89 c7                	mov    edi,eax
c0026838:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002683d:	29 d9                	sub    ecx,ebx
c002683f:	d3 ee                	shr    esi,cl
c0026841:	09 f7                	or     edi,esi
c0026843:	31 db                	xor    ebx,ebx
c0026845:	eb 3b                	jmp    c0026882 <__muldf3+0x292>
c0026847:	83 c3 1f             	add    ebx,0x1f
c002684a:	89 f0                	mov    eax,esi
c002684c:	88 d9                	mov    cl,bl
c002684e:	d3 e0                	shl    eax,cl
c0026850:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026853:	89 f8                	mov    eax,edi
c0026855:	88 d1                	mov    cl,dl
c0026857:	d3 e8                	shr    eax,cl
c0026859:	89 c1                	mov    ecx,eax
c002685b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002685e:	09 c8                	or     eax,ecx
c0026860:	88 d9                	mov    cl,bl
c0026862:	d3 e7                	shl    edi,cl
c0026864:	31 db                	xor    ebx,ebx
c0026866:	85 ff                	test   edi,edi
c0026868:	0f 95 c3             	setne  bl
c002686b:	89 df                	mov    edi,ebx
c002686d:	09 c7                	or     edi,eax
c002686f:	88 d1                	mov    cl,dl
c0026871:	d3 ee                	shr    esi,cl
c0026873:	31 db                	xor    ebx,ebx
c0026875:	eb 0d                	jmp    c0026884 <__muldf3+0x294>
c0026877:	bb ff 07 00 00       	mov    ebx,0x7ff
c002687c:	eb 02                	jmp    c0026880 <__muldf3+0x290>
c002687e:	31 db                	xor    ebx,ebx
c0026880:	31 ff                	xor    edi,edi
c0026882:	31 f6                	xor    esi,esi
c0026884:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026887:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c002688a:	25 00 f8 ff ff       	and    eax,0xfffff800
c002688f:	09 c3                	or     ebx,eax
c0026891:	c1 e3 14             	shl    ebx,0x14
c0026894:	89 f0                	mov    eax,esi
c0026896:	c1 e8 0b             	shr    eax,0xb
c0026899:	09 c3                	or     ebx,eax
c002689b:	89 f8                	mov    eax,edi
c002689d:	c1 e8 0b             	shr    eax,0xb
c00268a0:	c1 e6 15             	shl    esi,0x15
c00268a3:	09 c6                	or     esi,eax
c00268a5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c00268ab:	0f 95 c1             	setne  cl
c00268ae:	09 c8                	or     eax,ecx
c00268b0:	83 e0 01             	and    eax,0x1
c00268b3:	c1 ef 0a             	shr    edi,0xa
c00268b6:	21 c7                	and    edi,eax
c00268b8:	01 f7                	add    edi,esi
c00268ba:	83 d3 00             	adc    ebx,0x0
c00268bd:	89 da                	mov    edx,ebx
c00268bf:	eb 03                	jmp    c00268c4 <__muldf3+0x2d4>
c00268c1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c00268c4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00268c7:	89 f8                	mov    eax,edi
c00268c9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00268cc:	83 c4 24             	add    esp,0x24
c00268cf:	5b                   	pop    ebx
c00268d0:	5e                   	pop    esi
c00268d1:	5f                   	pop    edi
c00268d2:	5d                   	pop    ebp
c00268d3:	c3                   	ret    

c00268d4 <__divdf3>:
c00268d4:	55                   	push   ebp
c00268d5:	89 e5                	mov    ebp,esp
c00268d7:	57                   	push   edi
c00268d8:	56                   	push   esi
c00268d9:	53                   	push   ebx
c00268da:	83 ec 2c             	sub    esp,0x2c
c00268dd:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00268e0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00268e3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00268e6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00268e9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00268ec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00268ef:	89 ce                	mov    esi,ecx
c00268f1:	89 c8                	mov    eax,ecx
c00268f3:	c1 f8 14             	sar    eax,0x14
c00268f6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00268f9:	89 f8                	mov    eax,edi
c00268fb:	89 fb                	mov    ebx,edi
c00268fd:	c1 e3 0b             	shl    ebx,0xb
c0026900:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0026903:	c1 e6 0b             	shl    esi,0xb
c0026906:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002690c:	c1 e8 15             	shr    eax,0x15
c002690f:	09 c6                	or     esi,eax
c0026911:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0026914:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0026917:	89 c2                	mov    edx,eax
c0026919:	c1 fa 14             	sar    edx,0x14
c002691c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002691f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0026922:	89 de                	mov    esi,ebx
c0026924:	c1 e6 0b             	shl    esi,0xb
c0026927:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c002692a:	c1 e0 0b             	shl    eax,0xb
c002692d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026932:	c1 eb 15             	shr    ebx,0x15
c0026935:	09 d8                	or     eax,ebx
c0026937:	89 c2                	mov    edx,eax
c0026939:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002693c:	25 ff 07 00 00       	and    eax,0x7ff
c0026941:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0026944:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026947:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002694d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0026950:	29 d8                	sub    eax,ebx
c0026952:	05 ff 03 00 00       	add    eax,0x3ff
c0026957:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002695a:	46                   	inc    esi
c002695b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0026961:	0f 85 a5 00 00 00    	jne    c0026a0c <__divdf3+0x138>
c0026967:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c002696a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c002696d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0026971:	74 2a                	je     c002699d <__divdf3+0xc9>
c0026973:	85 f6                	test   esi,esi
c0026975:	0f 85 cc 02 00 00    	jne    c0026c47 <__divdf3+0x373>
c002697b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002697e:	40                   	inc    eax
c002697f:	a9 fe 07 00 00       	test   eax,0x7fe
c0026984:	75 26                	jne    c00269ac <__divdf3+0xd8>
c0026986:	85 db                	test   ebx,ebx
c0026988:	74 22                	je     c00269ac <__divdf3+0xd8>
c002698a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002698d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026990:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0026993:	09 d0                	or     eax,edx
c0026995:	0f 85 ac 02 00 00    	jne    c0026c47 <__divdf3+0x373>
c002699b:	eb 63                	jmp    c0026a00 <__divdf3+0x12c>
c002699d:	85 f6                	test   esi,esi
c002699f:	75 22                	jne    c00269c3 <__divdf3+0xef>
c00269a1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00269a4:	40                   	inc    eax
c00269a5:	a9 fe 07 00 00       	test   eax,0x7fe
c00269aa:	74 36                	je     c00269e2 <__divdf3+0x10e>
c00269ac:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00269b0:	0f 89 91 02 00 00    	jns    c0026c47 <__divdf3+0x373>
c00269b6:	89 f8                	mov    eax,edi
c00269b8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00269be:	e9 80 02 00 00       	jmp    c0026c43 <__divdf3+0x36f>
c00269c3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00269c6:	01 f6                	add    esi,esi
c00269c8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00269cb:	c1 ef 1f             	shr    edi,0x1f
c00269ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00269d1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00269d4:	8d 48 ff             	lea    ecx,[eax-0x1]
c00269d7:	09 f7                	or     edi,esi
c00269d9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00269dc:	78 2e                	js     c0026a0c <__divdf3+0x138>
c00269de:	89 c8                	mov    eax,ecx
c00269e0:	eb e1                	jmp    c00269c3 <__divdf3+0xef>
c00269e2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00269e5:	09 d0                	or     eax,edx
c00269e7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00269eb:	74 0f                	je     c00269fc <__divdf3+0x128>
c00269ed:	85 c0                	test   eax,eax
c00269ef:	74 bb                	je     c00269ac <__divdf3+0xd8>
c00269f1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00269f4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00269f7:	e9 4b 02 00 00       	jmp    c0026c47 <__divdf3+0x373>
c00269fc:	85 c0                	test   eax,eax
c00269fe:	75 ac                	jne    c00269ac <__divdf3+0xd8>
c0026a00:	31 ff                	xor    edi,edi
c0026a02:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0026a07:	e9 3b 02 00 00       	jmp    c0026c47 <__divdf3+0x373>
c0026a0c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0026a0f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0026a12:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0026a18:	75 6b                	jne    c0026a85 <__divdf3+0x1b1>
c0026a1a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026a1d:	09 d6                	or     esi,edx
c0026a1f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0026a23:	74 28                	je     c0026a4d <__divdf3+0x179>
c0026a25:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0026a28:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0026a2b:	85 f6                	test   esi,esi
c0026a2d:	0f 85 14 02 00 00    	jne    c0026c47 <__divdf3+0x373>
c0026a33:	31 ff                	xor    edi,edi
c0026a35:	31 c9                	xor    ecx,ecx
c0026a37:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a3a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026a3d:	0f 89 04 02 00 00    	jns    c0026c47 <__divdf3+0x373>
c0026a43:	b9 00 00 00 80       	mov    ecx,0x80000000
c0026a48:	e9 fa 01 00 00       	jmp    c0026c47 <__divdf3+0x373>
c0026a4d:	85 f6                	test   esi,esi
c0026a4f:	75 1b                	jne    c0026a6c <__divdf3+0x198>
c0026a51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0026a54:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0026a57:	25 00 00 00 80       	and    eax,0x80000000
c0026a5c:	31 c9                	xor    ecx,ecx
c0026a5e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0026a63:	89 cf                	mov    edi,ecx
c0026a65:	89 c1                	mov    ecx,eax
c0026a67:	e9 db 01 00 00       	jmp    c0026c47 <__divdf3+0x373>
c0026a6c:	01 d2                	add    edx,edx
c0026a6e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026a71:	c1 eb 1f             	shr    ebx,0x1f
c0026a74:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0026a77:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0026a7a:	8d 48 01             	lea    ecx,[eax+0x1]
c0026a7d:	09 da                	or     edx,ebx
c0026a7f:	78 04                	js     c0026a85 <__divdf3+0x1b1>
c0026a81:	89 c8                	mov    eax,ecx
c0026a83:	eb e7                	jmp    c0026a6c <__divdf3+0x198>
c0026a85:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026a88:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026a8e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a94:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0026a97:	39 d6                	cmp    esi,edx
c0026a99:	77 0d                	ja     c0026aa8 <__divdf3+0x1d4>
c0026a9b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026a9e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0026aa1:	72 1b                	jb     c0026abe <__divdf3+0x1ea>
c0026aa3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0026aa6:	75 16                	jne    c0026abe <__divdf3+0x1ea>
c0026aa8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026aab:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0026aae:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0026ab1:	83 de 00             	sbb    esi,0x0
c0026ab4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0026ab7:	ba 01 00 00 00       	mov    edx,0x1
c0026abc:	eb 02                	jmp    c0026ac0 <__divdf3+0x1ec>
c0026abe:	31 d2                	xor    edx,edx
c0026ac0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0026ac7:	31 ff                	xor    edi,edi
c0026ac9:	01 ff                	add    edi,edi
c0026acb:	89 d1                	mov    ecx,edx
c0026acd:	c1 e9 1f             	shr    ecx,0x1f
c0026ad0:	09 cf                	or     edi,ecx
c0026ad2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0026ad5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0026ad8:	89 da                	mov    edx,ebx
c0026ada:	89 f3                	mov    ebx,esi
c0026adc:	8d 34 36             	lea    esi,[esi+esi*1]
c0026adf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026ae2:	c1 e9 1f             	shr    ecx,0x1f
c0026ae5:	09 ce                	or     esi,ecx
c0026ae7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026aea:	01 c9                	add    ecx,ecx
c0026aec:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0026aef:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026af2:	85 db                	test   ebx,ebx
c0026af4:	78 29                	js     c0026b1f <__divdf3+0x24b>
c0026af6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0026af9:	72 07                	jb     c0026b02 <__divdf3+0x22e>
c0026afb:	75 3c                	jne    c0026b39 <__divdf3+0x265>
c0026afd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026b00:	77 37                	ja     c0026b39 <__divdf3+0x265>
c0026b02:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026b05:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0026b08:	31 d2                	xor    edx,edx
c0026b0a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0026b0d:	0f 97 c2             	seta   dl
c0026b10:	29 d6                	sub    esi,edx
c0026b12:	89 d9                	mov    ecx,ebx
c0026b14:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0026b17:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0026b1a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0026b1d:	eb 17                	jmp    c0026b36 <__divdf3+0x262>
c0026b1f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0026b22:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026b25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026b28:	0f 97 c1             	seta   cl
c0026b2b:	0f b6 c9             	movzx  ecx,cl
c0026b2e:	29 ce                	sub    esi,ecx
c0026b30:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0026b33:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0026b36:	83 ca 01             	or     edx,0x1
c0026b39:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0026b3c:	75 8b                	jne    c0026ac9 <__divdf3+0x1f5>
c0026b3e:	c1 e7 09             	shl    edi,0x9
c0026b41:	89 d1                	mov    ecx,edx
c0026b43:	c1 e9 17             	shr    ecx,0x17
c0026b46:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026b49:	09 f3                	or     ebx,esi
c0026b4b:	0f 95 c3             	setne  bl
c0026b4e:	0f b6 db             	movzx  ebx,bl
c0026b51:	c1 e2 09             	shl    edx,0x9
c0026b54:	09 d3                	or     ebx,edx
c0026b56:	89 ca                	mov    edx,ecx
c0026b58:	09 fa                	or     edx,edi
c0026b5a:	78 0c                	js     c0026b68 <__divdf3+0x294>
c0026b5c:	01 d2                	add    edx,edx
c0026b5e:	89 d9                	mov    ecx,ebx
c0026b60:	c1 e9 1f             	shr    ecx,0x1f
c0026b63:	09 ca                	or     edx,ecx
c0026b65:	01 db                	add    ebx,ebx
c0026b67:	48                   	dec    eax
c0026b68:	3d fe 07 00 00       	cmp    eax,0x7fe
c0026b6d:	0f 8f 83 00 00 00    	jg     c0026bf6 <__divdf3+0x322>
c0026b73:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026b79:	85 c0                	test   eax,eax
c0026b7b:	0f 8f 82 00 00 00    	jg     c0026c03 <__divdf3+0x32f>
c0026b81:	83 f8 cc             	cmp    eax,0xffffffcc
c0026b84:	7c 77                	jl     c0026bfd <__divdf3+0x329>
c0026b86:	be 01 00 00 00       	mov    esi,0x1
c0026b8b:	29 c6                	sub    esi,eax
c0026b8d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026b93:	83 fe 1f             	cmp    esi,0x1f
c0026b96:	7e 2f                	jle    c0026bc7 <__divdf3+0x2f3>
c0026b98:	83 fe 20             	cmp    esi,0x20
c0026b9b:	75 0a                	jne    c0026ba7 <__divdf3+0x2d3>
c0026b9d:	85 db                	test   ebx,ebx
c0026b9f:	0f 95 c3             	setne  bl
c0026ba2:	0f b6 db             	movzx  ebx,bl
c0026ba5:	eb 1a                	jmp    c0026bc1 <__divdf3+0x2ed>
c0026ba7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0026baa:	89 d7                	mov    edi,edx
c0026bac:	d3 e7                	shl    edi,cl
c0026bae:	89 f9                	mov    ecx,edi
c0026bb0:	09 d9                	or     ecx,ebx
c0026bb2:	0f 95 c3             	setne  bl
c0026bb5:	0f b6 db             	movzx  ebx,bl
c0026bb8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0026bbd:	29 c1                	sub    ecx,eax
c0026bbf:	d3 ea                	shr    edx,cl
c0026bc1:	09 d3                	or     ebx,edx
c0026bc3:	31 c0                	xor    eax,eax
c0026bc5:	eb 3a                	jmp    c0026c01 <__divdf3+0x32d>
c0026bc7:	83 c0 1f             	add    eax,0x1f
c0026bca:	89 d7                	mov    edi,edx
c0026bcc:	88 c1                	mov    cl,al
c0026bce:	d3 e7                	shl    edi,cl
c0026bd0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026bd3:	89 df                	mov    edi,ebx
c0026bd5:	89 f1                	mov    ecx,esi
c0026bd7:	d3 ef                	shr    edi,cl
c0026bd9:	89 f9                	mov    ecx,edi
c0026bdb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0026bde:	09 cf                	or     edi,ecx
c0026be0:	88 c1                	mov    cl,al
c0026be2:	d3 e3                	shl    ebx,cl
c0026be4:	85 db                	test   ebx,ebx
c0026be6:	0f 95 c3             	setne  bl
c0026be9:	0f b6 db             	movzx  ebx,bl
c0026bec:	09 fb                	or     ebx,edi
c0026bee:	89 f1                	mov    ecx,esi
c0026bf0:	d3 ea                	shr    edx,cl
c0026bf2:	31 c0                	xor    eax,eax
c0026bf4:	eb 0d                	jmp    c0026c03 <__divdf3+0x32f>
c0026bf6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0026bfb:	eb 02                	jmp    c0026bff <__divdf3+0x32b>
c0026bfd:	31 c0                	xor    eax,eax
c0026bff:	31 db                	xor    ebx,ebx
c0026c01:	31 d2                	xor    edx,edx
c0026c03:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0026c06:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0026c09:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0026c0f:	09 c8                	or     eax,ecx
c0026c11:	c1 e0 14             	shl    eax,0x14
c0026c14:	89 d1                	mov    ecx,edx
c0026c16:	c1 e9 0b             	shr    ecx,0xb
c0026c19:	09 c8                	or     eax,ecx
c0026c1b:	89 c6                	mov    esi,eax
c0026c1d:	89 d9                	mov    ecx,ebx
c0026c1f:	c1 e9 0b             	shr    ecx,0xb
c0026c22:	c1 e2 15             	shl    edx,0x15
c0026c25:	09 ca                	or     edx,ecx
c0026c27:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0026c2d:	0f 95 c0             	setne  al
c0026c30:	09 c1                	or     ecx,eax
c0026c32:	83 e1 01             	and    ecx,0x1
c0026c35:	c1 eb 0a             	shr    ebx,0xa
c0026c38:	21 cb                	and    ebx,ecx
c0026c3a:	01 d3                	add    ebx,edx
c0026c3c:	89 d8                	mov    eax,ebx
c0026c3e:	83 d6 00             	adc    esi,0x0
c0026c41:	89 f2                	mov    edx,esi
c0026c43:	89 c7                	mov    edi,eax
c0026c45:	89 d1                	mov    ecx,edx
c0026c47:	89 f8                	mov    eax,edi
c0026c49:	89 ca                	mov    edx,ecx
c0026c4b:	83 c4 2c             	add    esp,0x2c
c0026c4e:	5b                   	pop    ebx
c0026c4f:	5e                   	pop    esi
c0026c50:	5f                   	pop    edi
c0026c51:	5d                   	pop    ebp
c0026c52:	c3                   	ret    

c0026c53 <__floatsidf>:
c0026c53:	55                   	push   ebp
c0026c54:	89 e5                	mov    ebp,esp
c0026c56:	56                   	push   esi
c0026c57:	53                   	push   ebx
c0026c58:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026c5b:	85 db                	test   ebx,ebx
c0026c5d:	7e 15                	jle    c0026c74 <__floatsidf+0x21>
c0026c5f:	0f bd cb             	bsr    ecx,ebx
c0026c62:	83 f1 1f             	xor    ecx,0x1f
c0026c65:	d3 e3                	shl    ebx,cl
c0026c67:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c6d:	b8 1e 04 00 00       	mov    eax,0x41e
c0026c72:	eb 21                	jmp    c0026c95 <__floatsidf+0x42>
c0026c74:	b8 00 00 00 00       	mov    eax,0x0
c0026c79:	ba 00 00 00 00       	mov    edx,0x0
c0026c7e:	74 2a                	je     c0026caa <__floatsidf+0x57>
c0026c80:	f7 db                	neg    ebx
c0026c82:	0f bd cb             	bsr    ecx,ebx
c0026c85:	83 f1 1f             	xor    ecx,0x1f
c0026c88:	d3 e3                	shl    ebx,cl
c0026c8a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026c90:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0026c95:	29 c8                	sub    eax,ecx
c0026c97:	c1 e0 14             	shl    eax,0x14
c0026c9a:	89 c1                	mov    ecx,eax
c0026c9c:	89 de                	mov    esi,ebx
c0026c9e:	c1 ee 0b             	shr    esi,0xb
c0026ca1:	09 f1                	or     ecx,esi
c0026ca3:	89 ca                	mov    edx,ecx
c0026ca5:	c1 e3 15             	shl    ebx,0x15
c0026ca8:	89 d8                	mov    eax,ebx
c0026caa:	5b                   	pop    ebx
c0026cab:	5e                   	pop    esi
c0026cac:	5d                   	pop    ebp
c0026cad:	c3                   	ret    

c0026cae <__floatunsidf>:
c0026cae:	55                   	push   ebp
c0026caf:	89 e5                	mov    ebp,esp
c0026cb1:	56                   	push   esi
c0026cb2:	53                   	push   ebx
c0026cb3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026cb6:	85 db                	test   ebx,ebx
c0026cb8:	74 2a                	je     c0026ce4 <__floatunsidf+0x36>
c0026cba:	0f bd cb             	bsr    ecx,ebx
c0026cbd:	83 f1 1f             	xor    ecx,0x1f
c0026cc0:	d3 e3                	shl    ebx,cl
c0026cc2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0026cc8:	b8 1e 04 00 00       	mov    eax,0x41e
c0026ccd:	29 c8                	sub    eax,ecx
c0026ccf:	c1 e0 14             	shl    eax,0x14
c0026cd2:	89 c1                	mov    ecx,eax
c0026cd4:	89 de                	mov    esi,ebx
c0026cd6:	c1 ee 0b             	shr    esi,0xb
c0026cd9:	09 f1                	or     ecx,esi
c0026cdb:	89 ca                	mov    edx,ecx
c0026cdd:	c1 e3 15             	shl    ebx,0x15
c0026ce0:	89 d8                	mov    eax,ebx
c0026ce2:	eb 04                	jmp    c0026ce8 <__floatunsidf+0x3a>
c0026ce4:	31 c0                	xor    eax,eax
c0026ce6:	31 d2                	xor    edx,edx
c0026ce8:	5b                   	pop    ebx
c0026ce9:	5e                   	pop    esi
c0026cea:	5d                   	pop    ebp
c0026ceb:	c3                   	ret    

c0026cec <__fixdfsi>:
c0026cec:	55                   	push   ebp
c0026ced:	89 e5                	mov    ebp,esp
c0026cef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026cf2:	89 d1                	mov    ecx,edx
c0026cf4:	c1 e1 0b             	shl    ecx,0xb
c0026cf7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026cfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026d00:	c1 e8 15             	shr    eax,0x15
c0026d03:	09 c1                	or     ecx,eax
c0026d05:	c1 fa 14             	sar    edx,0x14
c0026d08:	78 1f                	js     c0026d29 <__fixdfsi+0x3d>
c0026d0a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0026d10:	31 c0                	xor    eax,eax
c0026d12:	83 fa 1e             	cmp    edx,0x1e
c0026d15:	77 40                	ja     c0026d57 <__fixdfsi+0x6b>
c0026d17:	89 c8                	mov    eax,ecx
c0026d19:	0d 00 00 00 80       	or     eax,0x80000000
c0026d1e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d23:	29 d1                	sub    ecx,edx
c0026d25:	d3 e8                	shr    eax,cl
c0026d27:	eb 2e                	jmp    c0026d57 <__fixdfsi+0x6b>
c0026d29:	31 c0                	xor    eax,eax
c0026d2b:	81 c2 01 04 00 00    	add    edx,0x401
c0026d31:	78 24                	js     c0026d57 <__fixdfsi+0x6b>
c0026d33:	83 fa 1e             	cmp    edx,0x1e
c0026d36:	7e 09                	jle    c0026d41 <__fixdfsi+0x55>
c0026d38:	83 fa 1f             	cmp    edx,0x1f
c0026d3b:	75 18                	jne    c0026d55 <__fixdfsi+0x69>
c0026d3d:	85 c9                	test   ecx,ecx
c0026d3f:	75 14                	jne    c0026d55 <__fixdfsi+0x69>
c0026d41:	89 c8                	mov    eax,ecx
c0026d43:	0d 00 00 00 80       	or     eax,0x80000000
c0026d48:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d4d:	29 d1                	sub    ecx,edx
c0026d4f:	d3 e8                	shr    eax,cl
c0026d51:	f7 d8                	neg    eax
c0026d53:	eb 02                	jmp    c0026d57 <__fixdfsi+0x6b>
c0026d55:	31 c0                	xor    eax,eax
c0026d57:	5d                   	pop    ebp
c0026d58:	c3                   	ret    

c0026d59 <__fixunsdfsi>:
c0026d59:	55                   	push   ebp
c0026d5a:	89 e5                	mov    ebp,esp
c0026d5c:	53                   	push   ebx
c0026d5d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026d60:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026d63:	89 d3                	mov    ebx,edx
c0026d65:	c1 fb 14             	sar    ebx,0x14
c0026d68:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0026d6e:	31 c0                	xor    eax,eax
c0026d70:	83 fb 1f             	cmp    ebx,0x1f
c0026d73:	77 1d                	ja     c0026d92 <__fixunsdfsi+0x39>
c0026d75:	89 d0                	mov    eax,edx
c0026d77:	c1 e0 0b             	shl    eax,0xb
c0026d7a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026d7f:	c1 e9 15             	shr    ecx,0x15
c0026d82:	09 c8                	or     eax,ecx
c0026d84:	0d 00 00 00 80       	or     eax,0x80000000
c0026d89:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026d8e:	29 d9                	sub    ecx,ebx
c0026d90:	d3 e8                	shr    eax,cl
c0026d92:	5b                   	pop    ebx
c0026d93:	5d                   	pop    ebp
c0026d94:	c3                   	ret    

c0026d95 <__cmpdf2>:
c0026d95:	55                   	push   ebp
c0026d96:	89 e5                	mov    ebp,esp
c0026d98:	57                   	push   edi
c0026d99:	56                   	push   esi
c0026d9a:	53                   	push   ebx
c0026d9b:	83 ec 0c             	sub    esp,0xc
c0026d9e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0026da1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026da4:	89 ca                	mov    edx,ecx
c0026da6:	c1 ea 14             	shr    edx,0x14
c0026da9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0026daf:	89 cb                	mov    ebx,ecx
c0026db1:	c1 fb 1f             	sar    ebx,0x1f
c0026db4:	31 da                	xor    edx,ebx
c0026db6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026db9:	89 df                	mov    edi,ebx
c0026dbb:	c1 e7 0b             	shl    edi,0xb
c0026dbe:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0026dc1:	c1 e1 0b             	shl    ecx,0xb
c0026dc4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026dca:	c1 eb 15             	shr    ebx,0x15
c0026dcd:	09 d9                	or     ecx,ebx
c0026dcf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0026dd2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0026dd5:	89 ce                	mov    esi,ecx
c0026dd7:	c1 ee 14             	shr    esi,0x14
c0026dda:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0026de0:	89 cb                	mov    ebx,ecx
c0026de2:	c1 fb 1f             	sar    ebx,0x1f
c0026de5:	31 de                	xor    esi,ebx
c0026de7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0026dea:	89 df                	mov    edi,ebx
c0026dec:	c1 e7 0b             	shl    edi,0xb
c0026def:	c1 e1 0b             	shl    ecx,0xb
c0026df2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0026df8:	c1 eb 15             	shr    ebx,0x15
c0026dfb:	09 d9                	or     ecx,ebx
c0026dfd:	89 d3                	mov    ebx,edx
c0026dff:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026e05:	43                   	inc    ebx
c0026e06:	83 fb 01             	cmp    ebx,0x1
c0026e09:	77 08                	ja     c0026e13 <__cmpdf2+0x7e>
c0026e0b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0026e0e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0026e11:	75 68                	jne    c0026e7b <__cmpdf2+0xe6>
c0026e13:	89 f3                	mov    ebx,esi
c0026e15:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0026e1b:	43                   	inc    ebx
c0026e1c:	83 fb 01             	cmp    ebx,0x1
c0026e1f:	77 06                	ja     c0026e27 <__cmpdf2+0x92>
c0026e21:	89 fb                	mov    ebx,edi
c0026e23:	09 cb                	or     ebx,ecx
c0026e25:	75 54                	jne    c0026e7b <__cmpdf2+0xe6>
c0026e27:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026e2a:	09 f8                	or     eax,edi
c0026e2c:	09 c8                	or     eax,ecx
c0026e2e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0026e31:	75 12                	jne    c0026e45 <__cmpdf2+0xb0>
c0026e33:	8d 42 01             	lea    eax,[edx+0x1]
c0026e36:	83 f8 01             	cmp    eax,0x1
c0026e39:	77 0a                	ja     c0026e45 <__cmpdf2+0xb0>
c0026e3b:	8d 5e 01             	lea    ebx,[esi+0x1]
c0026e3e:	31 c0                	xor    eax,eax
c0026e40:	83 fb 01             	cmp    ebx,0x1
c0026e43:	76 36                	jbe    c0026e7b <__cmpdf2+0xe6>
c0026e45:	b8 01 00 00 00       	mov    eax,0x1
c0026e4a:	39 f2                	cmp    edx,esi
c0026e4c:	7f 2d                	jg     c0026e7b <__cmpdf2+0xe6>
c0026e4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0026e53:	7c 26                	jl     c0026e7b <__cmpdf2+0xe6>
c0026e55:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0026e58:	77 07                	ja     c0026e61 <__cmpdf2+0xcc>
c0026e5a:	72 16                	jb     c0026e72 <__cmpdf2+0xdd>
c0026e5c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0026e5f:	76 0a                	jbe    c0026e6b <__cmpdf2+0xd6>
c0026e61:	89 d0                	mov    eax,edx
c0026e63:	c1 f8 1f             	sar    eax,0x1f
c0026e66:	83 c8 01             	or     eax,0x1
c0026e69:	eb 10                	jmp    c0026e7b <__cmpdf2+0xe6>
c0026e6b:	b8 00 00 00 00       	mov    eax,0x0
c0026e70:	73 09                	jae    c0026e7b <__cmpdf2+0xe6>
c0026e72:	89 d0                	mov    eax,edx
c0026e74:	c1 f8 1f             	sar    eax,0x1f
c0026e77:	83 e0 02             	and    eax,0x2
c0026e7a:	48                   	dec    eax
c0026e7b:	83 c4 0c             	add    esp,0xc
c0026e7e:	5b                   	pop    ebx
c0026e7f:	5e                   	pop    esi
c0026e80:	5f                   	pop    edi
c0026e81:	5d                   	pop    ebp
c0026e82:	c3                   	ret    

c0026e83 <__eqdf2>:
c0026e83:	55                   	push   ebp
c0026e84:	89 e5                	mov    ebp,esp
c0026e86:	50                   	push   eax
c0026e87:	6a 01                	push   0x1
c0026e89:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026e8c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026e8f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e92:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026e95:	e8 fb fe ff ff       	call   c0026d95 <__cmpdf2>
c0026e9a:	83 c4 18             	add    esp,0x18
c0026e9d:	c9                   	leave  
c0026e9e:	c3                   	ret    

c0026e9f <__nedf2>:
c0026e9f:	eb e2                	jmp    c0026e83 <__eqdf2>

c0026ea1 <__gtdf2>:
c0026ea1:	55                   	push   ebp
c0026ea2:	89 e5                	mov    ebp,esp
c0026ea4:	50                   	push   eax
c0026ea5:	6a ff                	push   0xffffffff
c0026ea7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0026eaa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0026ead:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026eb0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026eb3:	e8 dd fe ff ff       	call   c0026d95 <__cmpdf2>
c0026eb8:	83 c4 18             	add    esp,0x18
c0026ebb:	c9                   	leave  
c0026ebc:	c3                   	ret    

c0026ebd <__gedf2>:
c0026ebd:	eb e2                	jmp    c0026ea1 <__gtdf2>

c0026ebf <__ltdf2>:
c0026ebf:	eb c2                	jmp    c0026e83 <__eqdf2>

c0026ec1 <__ledf2>:
c0026ec1:	eb c0                	jmp    c0026e83 <__eqdf2>

c0026ec3 <__truncdfsf2>:
c0026ec3:	55                   	push   ebp
c0026ec4:	89 e5                	mov    ebp,esp
c0026ec6:	57                   	push   edi
c0026ec7:	56                   	push   esi
c0026ec8:	53                   	push   ebx
c0026ec9:	83 ec 0c             	sub    esp,0xc
c0026ecc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0026ecf:	89 d1                	mov    ecx,edx
c0026ed1:	c1 f9 14             	sar    ecx,0x14
c0026ed4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026ed7:	89 df                	mov    edi,ebx
c0026ed9:	c1 e7 0b             	shl    edi,0xb
c0026edc:	89 d0                	mov    eax,edx
c0026ede:	c1 e0 0b             	shl    eax,0xb
c0026ee1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0026ee6:	c1 eb 15             	shr    ebx,0x15
c0026ee9:	09 d8                	or     eax,ebx
c0026eeb:	89 cb                	mov    ebx,ecx
c0026eed:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0026ef3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0026ef9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0026eff:	0f 86 9e 00 00 00    	jbe    c0026fa3 <__truncdfsf2+0xe0>
c0026f05:	85 db                	test   ebx,ebx
c0026f07:	75 0a                	jne    c0026f13 <__truncdfsf2+0x50>
c0026f09:	c1 fa 17             	sar    edx,0x17
c0026f0c:	30 d2                	xor    dl,dl
c0026f0e:	e9 84 00 00 00       	jmp    c0026f97 <__truncdfsf2+0xd4>
c0026f13:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0026f19:	83 fe 83             	cmp    esi,0xffffff83
c0026f1c:	7d 4b                	jge    c0026f69 <__truncdfsf2+0xa6>
c0026f1e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0026f23:	29 f1                	sub    ecx,esi
c0026f25:	83 f9 1f             	cmp    ecx,0x1f
c0026f28:	7f 6b                	jg     c0026f95 <__truncdfsf2+0xd2>
c0026f2a:	0d 00 00 00 80       	or     eax,0x80000000
c0026f2f:	89 c3                	mov    ebx,eax
c0026f31:	d3 eb                	shr    ebx,cl
c0026f33:	be 01 00 00 00       	mov    esi,0x1
c0026f38:	d3 e6                	shl    esi,cl
c0026f3a:	4e                   	dec    esi
c0026f3b:	21 f0                	and    eax,esi
c0026f3d:	09 f8                	or     eax,edi
c0026f3f:	0f 95 c0             	setne  al
c0026f42:	0f b6 c0             	movzx  eax,al
c0026f45:	09 c3                	or     ebx,eax
c0026f47:	89 d9                	mov    ecx,ebx
c0026f49:	c1 e9 08             	shr    ecx,0x8
c0026f4c:	f6 c3 7f             	test   bl,0x7f
c0026f4f:	0f 95 c0             	setne  al
c0026f52:	09 c8                	or     eax,ecx
c0026f54:	83 e0 01             	and    eax,0x1
c0026f57:	c1 eb 07             	shr    ebx,0x7
c0026f5a:	21 c3                	and    ebx,eax
c0026f5c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0026f62:	09 d1                	or     ecx,edx
c0026f64:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0026f67:	eb 76                	jmp    c0026fdf <__truncdfsf2+0x11c>
c0026f69:	83 c6 80             	add    esi,0xffffff80
c0026f6c:	7e 1d                	jle    c0026f8b <__truncdfsf2+0xc8>
c0026f6e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0026f74:	75 0b                	jne    c0026f81 <__truncdfsf2+0xbe>
c0026f76:	09 f8                	or     eax,edi
c0026f78:	74 09                	je     c0026f83 <__truncdfsf2+0xc0>
c0026f7a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0026f7f:	eb 02                	jmp    c0026f83 <__truncdfsf2+0xc0>
c0026f81:	31 c0                	xor    eax,eax
c0026f83:	c1 fa 17             	sar    edx,0x17
c0026f86:	80 ca ff             	or     dl,0xff
c0026f89:	eb 0e                	jmp    c0026f99 <__truncdfsf2+0xd6>
c0026f8b:	c1 fa 1f             	sar    edx,0x1f
c0026f8e:	c1 e2 08             	shl    edx,0x8
c0026f91:	09 ca                	or     edx,ecx
c0026f93:	eb 04                	jmp    c0026f99 <__truncdfsf2+0xd6>
c0026f95:	31 d2                	xor    edx,edx
c0026f97:	31 c0                	xor    eax,eax
c0026f99:	c1 e2 17             	shl    edx,0x17
c0026f9c:	c1 e8 08             	shr    eax,0x8
c0026f9f:	09 d0                	or     eax,edx
c0026fa1:	eb 3c                	jmp    c0026fdf <__truncdfsf2+0x11c>
c0026fa3:	81 e9 80 03 00 00    	sub    ecx,0x380
c0026fa9:	89 ca                	mov    edx,ecx
c0026fab:	c1 fa 0b             	sar    edx,0xb
c0026fae:	c1 e2 08             	shl    edx,0x8
c0026fb1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0026fb4:	31 db                	xor    ebx,ebx
c0026fb6:	85 ff                	test   edi,edi
c0026fb8:	0f 95 c3             	setne  bl
c0026fbb:	09 d8                	or     eax,ebx
c0026fbd:	89 c3                	mov    ebx,eax
c0026fbf:	c1 eb 08             	shr    ebx,0x8
c0026fc2:	a8 7f                	test   al,0x7f
c0026fc4:	0f 95 c2             	setne  dl
c0026fc7:	89 d6                	mov    esi,edx
c0026fc9:	09 de                	or     esi,ebx
c0026fcb:	83 e6 01             	and    esi,0x1
c0026fce:	c1 e8 07             	shr    eax,0x7
c0026fd1:	21 f0                	and    eax,esi
c0026fd3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026fd6:	09 ca                	or     edx,ecx
c0026fd8:	c1 e2 17             	shl    edx,0x17
c0026fdb:	09 da                	or     edx,ebx
c0026fdd:	01 d0                	add    eax,edx
c0026fdf:	83 c4 0c             	add    esp,0xc
c0026fe2:	5b                   	pop    ebx
c0026fe3:	5e                   	pop    esi
c0026fe4:	5f                   	pop    edi
c0026fe5:	5d                   	pop    ebp
c0026fe6:	c3                   	ret    

c0026fe7 <__extendsfdf2>:
c0026fe7:	55                   	push   ebp
c0026fe8:	89 e5                	mov    ebp,esp
c0026fea:	57                   	push   edi
c0026feb:	56                   	push   esi
c0026fec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fef:	89 d1                	mov    ecx,edx
c0026ff1:	c1 f9 17             	sar    ecx,0x17
c0026ff4:	c1 e2 08             	shl    edx,0x8
c0026ff7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ffd:	89 c8                	mov    eax,ecx
c0026fff:	80 e4 f8             	and    ah,0xf8
c0027002:	8d 71 01             	lea    esi,[ecx+0x1]
c0027005:	81 e6 fe 00 00 00    	and    esi,0xfe
c002700b:	75 27                	jne    c0027034 <__extendsfdf2+0x4d>
c002700d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0027013:	75 18                	jne    c002702d <__extendsfdf2+0x46>
c0027015:	85 d2                	test   edx,edx
c0027017:	74 20                	je     c0027039 <__extendsfdf2+0x52>
c0027019:	41                   	inc    ecx
c002701a:	01 d2                	add    edx,edx
c002701c:	79 fb                	jns    c0027019 <__extendsfdf2+0x32>
c002701e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027024:	29 c8                	sub    eax,ecx
c0027026:	05 81 03 00 00       	add    eax,0x381
c002702b:	eb 0c                	jmp    c0027039 <__extendsfdf2+0x52>
c002702d:	05 00 07 00 00       	add    eax,0x700
c0027032:	eb 05                	jmp    c0027039 <__extendsfdf2+0x52>
c0027034:	05 80 03 00 00       	add    eax,0x380
c0027039:	c1 e0 14             	shl    eax,0x14
c002703c:	89 c1                	mov    ecx,eax
c002703e:	89 d0                	mov    eax,edx
c0027040:	c1 e8 0b             	shr    eax,0xb
c0027043:	09 c1                	or     ecx,eax
c0027045:	c1 e2 15             	shl    edx,0x15
c0027048:	89 d0                	mov    eax,edx
c002704a:	89 ca                	mov    edx,ecx
c002704c:	5e                   	pop    esi
c002704d:	5f                   	pop    edi
c002704e:	5d                   	pop    ebp
c002704f:	c3                   	ret    

c0027050 <fabs>:
c0027050:	83 ec 0c             	sub    esp,0xc
c0027053:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027057:	89 04 24             	mov    DWORD PTR [esp],eax
c002705a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002705e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027063:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0027067:	dd 04 24             	fld    QWORD PTR [esp]
c002706a:	83 c4 0c             	add    esp,0xc
c002706d:	c3                   	ret    
c002706e:	66 90                	xchg   ax,ax

c0027070 <lrint>:
c0027070:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0027074:	83 ec 04             	sub    esp,0x4
c0027077:	db 1c 24             	fistp  DWORD PTR [esp]
c002707a:	58                   	pop    eax
c002707b:	c3                   	ret    

c002707c <lrintf>:
c002707c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0027080:	83 ec 04             	sub    esp,0x4
c0027083:	db 1c 24             	fistp  DWORD PTR [esp]
c0027086:	58                   	pop    eax
c0027087:	c3                   	ret    

Disassembly of section .init:

c0027088 <_init>:
c0027088:	55                   	push   ebp
c0027089:	89 e5                	mov    ebp,esp
c002708b:	e8 88 90 fd ff       	call   c0000118 <frame_dummy>
c0027090:	e8 63 e0 ff ff       	call   c00250f8 <__do_global_ctors_aux>
c0027095:	5d                   	pop    ebp
c0027096:	c3                   	ret    

Disassembly of section .fini:

c0027097 <_fini>:
c0027097:	55                   	push   ebp
c0027098:	89 e5                	mov    ebp,esp
c002709a:	e8 09 90 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002709f:	5d                   	pop    ebp
c00270a0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00270a2 <Computer::~Computer()>:
c00270a2:	83 ec 0c             	sub    esp,0xc
c00270a5:	ba 30 8b 02 c0       	mov    edx,0xc0028b30
c00270aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270ae:	89 10                	mov    DWORD PTR [eax],edx
c00270b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00270b4:	83 ec 0c             	sub    esp,0xc
c00270b7:	50                   	push   eax
c00270b8:	e8 c5 c9 fe ff       	call   c0013a82 <Device::~Device()>
c00270bd:	83 c4 10             	add    esp,0x10
c00270c0:	90                   	nop
c00270c1:	83 c4 0c             	add    esp,0xc
c00270c4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00270c6 <Computer::~Computer()>:
c00270c6:	83 ec 0c             	sub    esp,0xc
c00270c9:	83 ec 0c             	sub    esp,0xc
c00270cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270d0:	e8 cd ff ff ff       	call   c00270a2 <Computer::~Computer()>
c00270d5:	83 c4 10             	add    esp,0x10
c00270d8:	83 ec 08             	sub    esp,0x8
c00270db:	68 ec 01 00 00       	push   0x1ec
c00270e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00270e4:	e8 f8 b5 fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00270e9:	83 c4 10             	add    esp,0x10
c00270ec:	83 c4 0c             	add    esp,0xc
c00270ef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00270f0 <idleCommon()>:
c00270f0:	83 ec 0c             	sub    esp,0xc
c00270f3:	e8 72 5c ff ff       	call   c001cd6a <lockScheduler()>
c00270f8:	e8 a9 5f ff ff       	call   c001d0a6 <schedule()>
c00270fd:	83 c4 0c             	add    esp,0xc
c0027100:	e9 67 5c ff ff       	jmp    c001cd6c <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0027106 <LinkedList<UnixFile>::~LinkedList()>:
c0027106:	90                   	nop
c0027107:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0027108 <LinkedList<UnixFile>::LinkedList()>:
c0027108:	83 ec 0c             	sub    esp,0xc
c002710b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002710f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027119:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027124:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002712f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027135:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027139:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027144:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002714b:	83 ec 0c             	sub    esp,0xc
c002714e:	68 a6 8d 02 c0       	push   0xc0028da6
c0027153:	e8 69 b6 fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0027158:	83 c4 10             	add    esp,0x10
c002715b:	90                   	nop
c002715c:	83 c4 0c             	add    esp,0xc
c002715f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0027160 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0027160:	83 ec 0c             	sub    esp,0xc
c0027163:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027168:	75 10                	jne    c002717a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002716a:	83 ec 0c             	sub    esp,0xc
c002716d:	68 c0 8d 02 c0       	push   0xc0028dc0
c0027172:	e8 64 27 ff ff       	call   c00198db <Krnl::panic(char const*)>
c0027177:	83 c4 10             	add    esp,0x10
c002717a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002717e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027180:	85 c0                	test   eax,eax
c0027182:	74 34                	je     c00271b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0027184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027188:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002718b:	85 c0                	test   eax,eax
c002718d:	74 29                	je     c00271b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002718f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027193:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027196:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002719a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002719d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00271a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00271a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00271b6:	eb 65                	jmp    c002721d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00271be:	85 c0                	test   eax,eax
c00271c0:	75 4b                	jne    c002720d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00271c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271c9:	85 c0                	test   eax,eax
c00271cb:	75 40                	jne    c002720d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00271cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00271d5:	89 10                	mov    DWORD PTR [eax],edx
c00271d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00271df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00271e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00271e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00271f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00271f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00271f7:	85 c0                	test   eax,eax
c00271f9:	74 22                	je     c002721d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00271fb:	83 ec 0c             	sub    esp,0xc
c00271fe:	68 e2 8d 02 c0       	push   0xc0028de2
c0027203:	e8 d3 26 ff ff       	call   c00198db <Krnl::panic(char const*)>
c0027208:	83 c4 10             	add    esp,0x10
c002720b:	eb 10                	jmp    c002721d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002720d:	83 ec 0c             	sub    esp,0xc
c0027210:	68 ec 8d 02 c0       	push   0xc0028dec
c0027215:	e8 c1 26 ff ff       	call   c00198db <Krnl::panic(char const*)>
c002721a:	83 c4 10             	add    esp,0x10
c002721d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027221:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027224:	8d 50 01             	lea    edx,[eax+0x1]
c0027227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002722b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002722e:	90                   	nop
c002722f:	83 c4 0c             	add    esp,0xc
c0027232:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0027234 <LinkedList<UnixFile>::getFirstElement()>:
c0027234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027238:	8b 00                	mov    eax,DWORD PTR [eax]
c002723a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002723c <LinkedList<UnixFile>::removeFirst()>:
c002723c:	83 ec 0c             	sub    esp,0xc
c002723f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027243:	8b 00                	mov    eax,DWORD PTR [eax]
c0027245:	85 c0                	test   eax,eax
c0027247:	75 12                	jne    c002725b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0027249:	83 ec 0c             	sub    esp,0xc
c002724c:	68 f8 8d 02 c0       	push   0xc0028df8
c0027251:	e8 85 26 ff ff       	call   c00198db <Krnl::panic(char const*)>
c0027256:	83 c4 10             	add    esp,0x10
c0027259:	eb 7e                	jmp    c00272d9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002725b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002725f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027262:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027265:	85 c0                	test   eax,eax
c0027267:	74 10                	je     c0027279 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0027269:	83 ec 0c             	sub    esp,0xc
c002726c:	68 43 8e 02 c0       	push   0xc0028e43
c0027271:	e8 65 26 ff ff       	call   c00198db <Krnl::panic(char const*)>
c0027276:	83 c4 10             	add    esp,0x10
c0027279:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002727d:	8b 00                	mov    eax,DWORD PTR [eax]
c002727f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027282:	85 c0                	test   eax,eax
c0027284:	75 33                	jne    c00272b9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0027286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002728a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027294:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002729b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002729f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272a2:	83 f8 01             	cmp    eax,0x1
c00272a5:	74 21                	je     c00272c8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00272a7:	83 ec 0c             	sub    esp,0xc
c00272aa:	68 1c 8e 02 c0       	push   0xc0028e1c
c00272af:	e8 27 26 ff ff       	call   c00198db <Krnl::panic(char const*)>
c00272b4:	83 c4 10             	add    esp,0x10
c00272b7:	eb 0f                	jmp    c00272c8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00272b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00272bf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00272c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272c6:	89 10                	mov    DWORD PTR [eax],edx
c00272c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272cf:	8d 50 ff             	lea    edx,[eax-0x1]
c00272d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00272d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00272d9:	83 c4 0c             	add    esp,0xc
c00272dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00272de <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00272de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00272e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00272e5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00272e6 <DriverlessDevice::~DriverlessDevice()>:
c00272e6:	ba 04 95 02 c0       	mov    edx,0xc0029504
c00272eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00272ef:	89 10                	mov    DWORD PTR [eax],edx
c00272f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00272f5:	50                   	push   eax
c00272f6:	e8 87 c7 fe ff       	call   c0013a82 <Device::~Device()>
c00272fb:	83 c4 04             	add    esp,0x4
c00272fe:	90                   	nop
c00272ff:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0027300 <DriverlessDevice::~DriverlessDevice()>:
c0027300:	83 ec 0c             	sub    esp,0xc
c0027303:	83 ec 0c             	sub    esp,0xc
c0027306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002730a:	e8 d7 ff ff ff       	call   c00272e6 <DriverlessDevice::~DriverlessDevice()>
c002730f:	83 c4 10             	add    esp,0x10
c0027312:	83 ec 08             	sub    esp,0x8
c0027315:	68 58 01 00 00       	push   0x158
c002731a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002731e:	e8 be b3 fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027323:	83 c4 10             	add    esp,0x10
c0027326:	83 c4 0c             	add    esp,0xc
c0027329:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002732a <LinkedList<Device>::addElement(Device*)>:
c002732a:	83 ec 0c             	sub    esp,0xc
c002732d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027332:	75 10                	jne    c0027344 <LinkedList<Device>::addElement(Device*)+0x1a>
c0027334:	83 ec 0c             	sub    esp,0xc
c0027337:	68 c0 8d 02 c0       	push   0xc0028dc0
c002733c:	e8 9a 25 ff ff       	call   c00198db <Krnl::panic(char const*)>
c0027341:	83 c4 10             	add    esp,0x10
c0027344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027348:	8b 00                	mov    eax,DWORD PTR [eax]
c002734a:	85 c0                	test   eax,eax
c002734c:	74 3a                	je     c0027388 <LinkedList<Device>::addElement(Device*)+0x5e>
c002734e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027352:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027355:	85 c0                	test   eax,eax
c0027357:	74 2f                	je     c0027388 <LinkedList<Device>::addElement(Device*)+0x5e>
c0027359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002735d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027360:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027364:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002736a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002736e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027372:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027379:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002737c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0027386:	eb 68                	jmp    c00273f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0027388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002738c:	8b 00                	mov    eax,DWORD PTR [eax]
c002738e:	85 c0                	test   eax,eax
c0027390:	75 4e                	jne    c00273e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0027392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027396:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027399:	85 c0                	test   eax,eax
c002739b:	75 43                	jne    c00273e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002739d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273a5:	89 10                	mov    DWORD PTR [eax],edx
c00273a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00273af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00273b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00273b9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00273c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273ca:	85 c0                	test   eax,eax
c00273cc:	74 22                	je     c00273f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00273ce:	83 ec 0c             	sub    esp,0xc
c00273d1:	68 e2 8d 02 c0       	push   0xc0028de2
c00273d6:	e8 00 25 ff ff       	call   c00198db <Krnl::panic(char const*)>
c00273db:	83 c4 10             	add    esp,0x10
c00273de:	eb 10                	jmp    c00273f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00273e0:	83 ec 0c             	sub    esp,0xc
c00273e3:	68 ec 8d 02 c0       	push   0xc0028dec
c00273e8:	e8 ee 24 ff ff       	call   c00198db <Krnl::panic(char const*)>
c00273ed:	83 c4 10             	add    esp,0x10
c00273f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00273f7:	8d 50 01             	lea    edx,[eax+0x1]
c00273fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00273fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0027401:	90                   	nop
c0027402:	83 c4 0c             	add    esp,0xc
c0027405:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0027406 <LinkedList<Device>::LinkedList()>:
c0027406:	83 ec 0c             	sub    esp,0xc
c0027409:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002740d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027417:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002741e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027422:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002742d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0027433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027437:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002743e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027442:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027449:	83 ec 0c             	sub    esp,0xc
c002744c:	68 a6 8d 02 c0       	push   0xc0028da6
c0027451:	e8 6b b3 fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0027456:	83 c4 10             	add    esp,0x10
c0027459:	90                   	nop
c002745a:	83 c4 0c             	add    esp,0xc
c002745d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002745e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002745e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027462:	8b 00                	mov    eax,DWORD PTR [eax]
c0027464:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0027466 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0027466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002746a:	8b 00                	mov    eax,DWORD PTR [eax]
c002746c:	85 c0                	test   eax,eax
c002746e:	75 0e                	jne    c002747e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0027470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027474:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027477:	85 c0                	test   eax,eax
c0027479:	75 03                	jne    c002747e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002747b:	b0 01                	mov    al,0x1
c002747d:	c3                   	ret    
c002747e:	b0 00                	mov    al,0x0
c0027480:	90                   	nop
c0027481:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0027482 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0027482:	83 ec 0c             	sub    esp,0xc
c0027485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027489:	8b 00                	mov    eax,DWORD PTR [eax]
c002748b:	85 c0                	test   eax,eax
c002748d:	75 15                	jne    c00274a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002748f:	83 ec 0c             	sub    esp,0xc
c0027492:	68 f8 8d 02 c0       	push   0xc0028df8
c0027497:	e8 3f 24 ff ff       	call   c00198db <Krnl::panic(char const*)>
c002749c:	83 c4 10             	add    esp,0x10
c002749f:	e9 88 00 00 00       	jmp    c002752c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00274a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00274ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00274ae:	85 c0                	test   eax,eax
c00274b0:	0f 95 c0             	setne  al
c00274b3:	84 c0                	test   al,al
c00274b5:	74 10                	je     c00274c7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00274b7:	83 ec 0c             	sub    esp,0xc
c00274ba:	68 43 8e 02 c0       	push   0xc0028e43
c00274bf:	e8 17 24 ff ff       	call   c00198db <Krnl::panic(char const*)>
c00274c4:	83 c4 10             	add    esp,0x10
c00274c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00274cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00274d0:	85 c0                	test   eax,eax
c00274d2:	0f 94 c0             	sete   al
c00274d5:	84 c0                	test   al,al
c00274d7:	74 33                	je     c002750c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00274d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00274e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00274ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00274f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00274f5:	83 f8 01             	cmp    eax,0x1
c00274f8:	74 21                	je     c002751b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00274fa:	83 ec 0c             	sub    esp,0xc
c00274fd:	68 1c 8e 02 c0       	push   0xc0028e1c
c0027502:	e8 d4 23 ff ff       	call   c00198db <Krnl::panic(char const*)>
c0027507:	83 c4 10             	add    esp,0x10
c002750a:	eb 0f                	jmp    c002751b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002750c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027510:	8b 00                	mov    eax,DWORD PTR [eax]
c0027512:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0027515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027519:	89 10                	mov    DWORD PTR [eax],edx
c002751b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002751f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0027522:	8d 50 ff             	lea    edx,[eax-0x1]
c0027525:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027529:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002752c:	83 c4 0c             	add    esp,0xc
c002752f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0027530 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0027530:	83 ec 0c             	sub    esp,0xc
c0027533:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0027538:	75 10                	jne    c002754a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002753a:	83 ec 0c             	sub    esp,0xc
c002753d:	68 c0 8d 02 c0       	push   0xc0028dc0
c0027542:	e8 94 23 ff ff       	call   c00198db <Krnl::panic(char const*)>
c0027547:	83 c4 10             	add    esp,0x10
c002754a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002754e:	8b 00                	mov    eax,DWORD PTR [eax]
c0027550:	85 c0                	test   eax,eax
c0027552:	74 34                	je     c0027588 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0027554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027558:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002755b:	85 c0                	test   eax,eax
c002755d:	74 29                	je     c0027588 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002755f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027563:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027566:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002756a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002756d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027571:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0027575:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0027578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002757c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002757f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0027586:	eb 65                	jmp    c00275ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0027588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002758c:	8b 00                	mov    eax,DWORD PTR [eax]
c002758e:	85 c0                	test   eax,eax
c0027590:	75 4b                	jne    c00275dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0027592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027596:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0027599:	85 c0                	test   eax,eax
c002759b:	75 40                	jne    c00275dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002759d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275a5:	89 10                	mov    DWORD PTR [eax],edx
c00275a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00275af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00275b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00275b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00275c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275c7:	85 c0                	test   eax,eax
c00275c9:	74 22                	je     c00275ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00275cb:	83 ec 0c             	sub    esp,0xc
c00275ce:	68 e2 8d 02 c0       	push   0xc0028de2
c00275d3:	e8 03 23 ff ff       	call   c00198db <Krnl::panic(char const*)>
c00275d8:	83 c4 10             	add    esp,0x10
c00275db:	eb 10                	jmp    c00275ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00275dd:	83 ec 0c             	sub    esp,0xc
c00275e0:	68 ec 8d 02 c0       	push   0xc0028dec
c00275e5:	e8 f1 22 ff ff       	call   c00198db <Krnl::panic(char const*)>
c00275ea:	83 c4 10             	add    esp,0x10
c00275ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00275f4:	8d 50 01             	lea    edx,[eax+0x1]
c00275f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00275fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00275fe:	90                   	nop
c00275ff:	83 c4 0c             	add    esp,0xc
c0027602:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0027604 <ACPI::~ACPI()>:
c0027604:	83 ec 0c             	sub    esp,0xc
c0027607:	ba a8 9d 02 c0       	mov    edx,0xc0029da8
c002760c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027610:	89 10                	mov    DWORD PTR [eax],edx
c0027612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027616:	83 ec 0c             	sub    esp,0xc
c0027619:	50                   	push   eax
c002761a:	e8 63 c4 fe ff       	call   c0013a82 <Device::~Device()>
c002761f:	83 c4 10             	add    esp,0x10
c0027622:	90                   	nop
c0027623:	83 c4 0c             	add    esp,0xc
c0027626:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0027628 <ACPI::~ACPI()>:
c0027628:	83 ec 0c             	sub    esp,0xc
c002762b:	83 ec 0c             	sub    esp,0xc
c002762e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027632:	e8 cd ff ff ff       	call   c0027604 <ACPI::~ACPI()>
c0027637:	83 c4 10             	add    esp,0x10
c002763a:	83 ec 08             	sub    esp,0x8
c002763d:	68 68 22 00 00       	push   0x2268
c0027642:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027646:	e8 96 b0 fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c002764b:	83 c4 10             	add    esp,0x10
c002764e:	83 c4 0c             	add    esp,0xc
c0027651:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0027652 <CPU::~CPU()>:
c0027652:	83 ec 0c             	sub    esp,0xc
c0027655:	ba 98 a1 02 c0       	mov    edx,0xc002a198
c002765a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002765e:	89 10                	mov    DWORD PTR [eax],edx
c0027660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027664:	83 ec 0c             	sub    esp,0xc
c0027667:	50                   	push   eax
c0027668:	e8 15 c4 fe ff       	call   c0013a82 <Device::~Device()>
c002766d:	83 c4 10             	add    esp,0x10
c0027670:	90                   	nop
c0027671:	83 c4 0c             	add    esp,0xc
c0027674:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0027676 <CPU::~CPU()>:
c0027676:	83 ec 0c             	sub    esp,0xc
c0027679:	83 ec 0c             	sub    esp,0xc
c002767c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027680:	e8 cd ff ff ff       	call   c0027652 <CPU::~CPU()>
c0027685:	83 c4 10             	add    esp,0x10
c0027688:	83 ec 08             	sub    esp,0x8
c002768b:	68 98 11 00 00       	push   0x1198
c0027690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027694:	e8 48 b0 fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027699:	83 c4 10             	add    esp,0x10
c002769c:	83 c4 0c             	add    esp,0xc
c002769f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00276a0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00276a0:	90                   	nop
c00276a1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00276a2 <ThreadControlBlock::ThreadControlBlock()>:
c00276a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276a6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00276ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276b1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00276b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276bc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00276c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276c7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00276ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276d2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00276d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00276da:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00276de:	90                   	nop
c00276df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00276e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00276e0:	83 ec 0c             	sub    esp,0xc
c00276e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00276ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00276f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00276fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027707:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002770d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027711:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0027718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002771c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0027723:	83 ec 0c             	sub    esp,0xc
c0027726:	68 a6 8d 02 c0       	push   0xc0028da6
c002772b:	e8 91 b0 fe ff       	call   c00127c1 <Dbg::kprintf(char const*, ...)>
c0027730:	83 c4 10             	add    esp,0x10
c0027733:	90                   	nop
c0027734:	83 c4 0c             	add    esp,0xc
c0027737:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0027738 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0027738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002773c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002773f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0027740 <Vm::_FPUState::_FPUState()>:
c0027740:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0027744:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002774b:	90                   	nop
c002774c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002774e <PCI::~PCI()>:
c002774e:	83 ec 0c             	sub    esp,0xc
c0027751:	ba 24 b0 02 c0       	mov    edx,0xc002b024
c0027756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002775a:	89 10                	mov    DWORD PTR [eax],edx
c002775c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027760:	83 ec 0c             	sub    esp,0xc
c0027763:	50                   	push   eax
c0027764:	e8 29 bd fe ff       	call   c0013492 <Bus::~Bus()>
c0027769:	83 c4 10             	add    esp,0x10
c002776c:	90                   	nop
c002776d:	83 c4 0c             	add    esp,0xc
c0027770:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0027772 <PCI::~PCI()>:
c0027772:	83 ec 0c             	sub    esp,0xc
c0027775:	83 ec 0c             	sub    esp,0xc
c0027778:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002777c:	e8 cd ff ff ff       	call   c002774e <PCI::~PCI()>
c0027781:	83 c4 10             	add    esp,0x10
c0027784:	83 ec 08             	sub    esp,0x8
c0027787:	68 58 01 00 00       	push   0x158
c002778c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027790:	e8 4c af fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027795:	83 c4 10             	add    esp,0x10
c0027798:	83 c4 0c             	add    esp,0xc
c002779b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002779c <IDE::~IDE()>:
c002779c:	83 ec 0c             	sub    esp,0xc
c002779f:	ba 88 b2 02 c0       	mov    edx,0xc002b288
c00277a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277a8:	89 10                	mov    DWORD PTR [eax],edx
c00277aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277ae:	83 ec 0c             	sub    esp,0xc
c00277b1:	50                   	push   eax
c00277b2:	e8 bb c7 fe ff       	call   c0013f72 <HardDiskController::~HardDiskController()>
c00277b7:	83 c4 10             	add    esp,0x10
c00277ba:	90                   	nop
c00277bb:	83 c4 0c             	add    esp,0xc
c00277be:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00277c0 <IDE::~IDE()>:
c00277c0:	83 ec 0c             	sub    esp,0xc
c00277c3:	83 ec 0c             	sub    esp,0xc
c00277c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277ca:	e8 cd ff ff ff       	call   c002779c <IDE::~IDE()>
c00277cf:	83 c4 10             	add    esp,0x10
c00277d2:	83 ec 08             	sub    esp,0x8
c00277d5:	68 70 02 00 00       	push   0x270
c00277da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00277de:	e8 fe ae fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00277e3:	83 c4 10             	add    esp,0x10
c00277e6:	83 c4 0c             	add    esp,0xc
c00277e9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00277ea <SATABus::~SATABus()>:
c00277ea:	83 ec 0c             	sub    esp,0xc
c00277ed:	ba 68 b3 02 c0       	mov    edx,0xc002b368
c00277f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277f6:	89 10                	mov    DWORD PTR [eax],edx
c00277f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00277fc:	83 ec 0c             	sub    esp,0xc
c00277ff:	50                   	push   eax
c0027800:	e8 6d c7 fe ff       	call   c0013f72 <HardDiskController::~HardDiskController()>
c0027805:	83 c4 10             	add    esp,0x10
c0027808:	90                   	nop
c0027809:	83 c4 0c             	add    esp,0xc
c002780c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002780e <SATABus::~SATABus()>:
c002780e:	83 ec 0c             	sub    esp,0xc
c0027811:	83 ec 0c             	sub    esp,0xc
c0027814:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027818:	e8 cd ff ff ff       	call   c00277ea <SATABus::~SATABus()>
c002781d:	83 c4 10             	add    esp,0x10
c0027820:	83 ec 08             	sub    esp,0x8
c0027823:	68 64 01 00 00       	push   0x164
c0027828:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002782c:	e8 b0 ae fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027831:	83 c4 10             	add    esp,0x10
c0027834:	83 c4 0c             	add    esp,0xc
c0027837:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0027838 <ATA::~ATA()>:
c0027838:	83 ec 0c             	sub    esp,0xc
c002783b:	ba a8 b3 02 c0       	mov    edx,0xc002b3a8
c0027840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027844:	89 10                	mov    DWORD PTR [eax],edx
c0027846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002784a:	83 ec 0c             	sub    esp,0xc
c002784d:	50                   	push   eax
c002784e:	e8 fd c7 fe ff       	call   c0014050 <PhysicalDisk::~PhysicalDisk()>
c0027853:	83 c4 10             	add    esp,0x10
c0027856:	90                   	nop
c0027857:	83 c4 0c             	add    esp,0xc
c002785a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002785c <ATA::~ATA()>:
c002785c:	83 ec 0c             	sub    esp,0xc
c002785f:	83 ec 0c             	sub    esp,0xc
c0027862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027866:	e8 cd ff ff ff       	call   c0027838 <ATA::~ATA()>
c002786b:	83 c4 10             	add    esp,0x10
c002786e:	83 ec 08             	sub    esp,0x8
c0027871:	68 7c 01 00 00       	push   0x17c
c0027876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002787a:	e8 62 ae fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c002787f:	83 c4 10             	add    esp,0x10
c0027882:	83 c4 0c             	add    esp,0xc
c0027885:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0027886 <ATAPI::~ATAPI()>:
c0027886:	83 ec 0c             	sub    esp,0xc
c0027889:	ba 14 b4 02 c0       	mov    edx,0xc002b414
c002788e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027892:	89 10                	mov    DWORD PTR [eax],edx
c0027894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027898:	83 ec 0c             	sub    esp,0xc
c002789b:	50                   	push   eax
c002789c:	e8 af c7 fe ff       	call   c0014050 <PhysicalDisk::~PhysicalDisk()>
c00278a1:	83 c4 10             	add    esp,0x10
c00278a4:	90                   	nop
c00278a5:	83 c4 0c             	add    esp,0xc
c00278a8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00278aa <ATAPI::~ATAPI()>:
c00278aa:	83 ec 0c             	sub    esp,0xc
c00278ad:	83 ec 0c             	sub    esp,0xc
c00278b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278b4:	e8 cd ff ff ff       	call   c0027886 <ATAPI::~ATAPI()>
c00278b9:	83 c4 10             	add    esp,0x10
c00278bc:	83 ec 08             	sub    esp,0x8
c00278bf:	68 80 01 00 00       	push   0x180
c00278c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00278c8:	e8 14 ae fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00278cd:	83 c4 10             	add    esp,0x10
c00278d0:	83 c4 0c             	add    esp,0xc
c00278d3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00278d4 <SATA::~SATA()>:
c00278d4:	83 ec 0c             	sub    esp,0xc
c00278d7:	ba 38 b5 02 c0       	mov    edx,0xc002b538
c00278dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278e0:	89 10                	mov    DWORD PTR [eax],edx
c00278e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00278e6:	83 ec 0c             	sub    esp,0xc
c00278e9:	50                   	push   eax
c00278ea:	e8 61 c7 fe ff       	call   c0014050 <PhysicalDisk::~PhysicalDisk()>
c00278ef:	83 c4 10             	add    esp,0x10
c00278f2:	90                   	nop
c00278f3:	83 c4 0c             	add    esp,0xc
c00278f6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00278f8 <SATA::~SATA()>:
c00278f8:	83 ec 0c             	sub    esp,0xc
c00278fb:	83 ec 0c             	sub    esp,0xc
c00278fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027902:	e8 cd ff ff ff       	call   c00278d4 <SATA::~SATA()>
c0027907:	83 c4 10             	add    esp,0x10
c002790a:	83 ec 08             	sub    esp,0x8
c002790d:	68 74 01 00 00       	push   0x174
c0027912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027916:	e8 c6 ad fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c002791b:	83 c4 10             	add    esp,0x10
c002791e:	83 c4 0c             	add    esp,0xc
c0027921:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0027922 <AVX::~AVX()>:
c0027922:	83 ec 0c             	sub    esp,0xc
c0027925:	ba 74 b5 02 c0       	mov    edx,0xc002b574
c002792a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002792e:	89 10                	mov    DWORD PTR [eax],edx
c0027930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027934:	83 ec 0c             	sub    esp,0xc
c0027937:	50                   	push   eax
c0027938:	e8 97 c7 fe ff       	call   c00140d4 <FPU::~FPU()>
c002793d:	83 c4 10             	add    esp,0x10
c0027940:	90                   	nop
c0027941:	83 c4 0c             	add    esp,0xc
c0027944:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0027946 <AVX::~AVX()>:
c0027946:	83 ec 0c             	sub    esp,0xc
c0027949:	83 ec 0c             	sub    esp,0xc
c002794c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027950:	e8 cd ff ff ff       	call   c0027922 <AVX::~AVX()>
c0027955:	83 c4 10             	add    esp,0x10
c0027958:	83 ec 08             	sub    esp,0x8
c002795b:	68 58 01 00 00       	push   0x158
c0027960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027964:	e8 78 ad fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027969:	83 c4 10             	add    esp,0x10
c002796c:	83 c4 0c             	add    esp,0xc
c002796f:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0027970 <MMX::~MMX()>:
c0027970:	83 ec 0c             	sub    esp,0xc
c0027973:	ba b4 b5 02 c0       	mov    edx,0xc002b5b4
c0027978:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002797c:	89 10                	mov    DWORD PTR [eax],edx
c002797e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027982:	83 ec 0c             	sub    esp,0xc
c0027985:	50                   	push   eax
c0027986:	e8 49 c7 fe ff       	call   c00140d4 <FPU::~FPU()>
c002798b:	83 c4 10             	add    esp,0x10
c002798e:	90                   	nop
c002798f:	83 c4 0c             	add    esp,0xc
c0027992:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0027994 <MMX::~MMX()>:
c0027994:	83 ec 0c             	sub    esp,0xc
c0027997:	83 ec 0c             	sub    esp,0xc
c002799a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002799e:	e8 cd ff ff ff       	call   c0027970 <MMX::~MMX()>
c00279a3:	83 c4 10             	add    esp,0x10
c00279a6:	83 ec 08             	sub    esp,0x8
c00279a9:	68 58 01 00 00       	push   0x158
c00279ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279b2:	e8 2a ad fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c00279b7:	83 c4 10             	add    esp,0x10
c00279ba:	83 c4 0c             	add    esp,0xc
c00279bd:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00279be <SSE::~SSE()>:
c00279be:	83 ec 0c             	sub    esp,0xc
c00279c1:	ba f4 b5 02 c0       	mov    edx,0xc002b5f4
c00279c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279ca:	89 10                	mov    DWORD PTR [eax],edx
c00279cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00279d0:	83 ec 0c             	sub    esp,0xc
c00279d3:	50                   	push   eax
c00279d4:	e8 fb c6 fe ff       	call   c00140d4 <FPU::~FPU()>
c00279d9:	83 c4 10             	add    esp,0x10
c00279dc:	90                   	nop
c00279dd:	83 c4 0c             	add    esp,0xc
c00279e0:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00279e2 <SSE::~SSE()>:
c00279e2:	83 ec 0c             	sub    esp,0xc
c00279e5:	83 ec 0c             	sub    esp,0xc
c00279e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00279ec:	e8 cd ff ff ff       	call   c00279be <SSE::~SSE()>
c00279f1:	83 c4 10             	add    esp,0x10
c00279f4:	83 ec 08             	sub    esp,0x8
c00279f7:	68 58 01 00 00       	push   0x158
c00279fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a00:	e8 dc ac fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027a05:	83 c4 10             	add    esp,0x10
c0027a08:	83 c4 0c             	add    esp,0xc
c0027a0b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0027a0c <x87::~x87()>:
c0027a0c:	83 ec 0c             	sub    esp,0xc
c0027a0f:	ba 34 b6 02 c0       	mov    edx,0xc002b634
c0027a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a18:	89 10                	mov    DWORD PTR [eax],edx
c0027a1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a1e:	83 ec 0c             	sub    esp,0xc
c0027a21:	50                   	push   eax
c0027a22:	e8 ad c6 fe ff       	call   c00140d4 <FPU::~FPU()>
c0027a27:	83 c4 10             	add    esp,0x10
c0027a2a:	90                   	nop
c0027a2b:	83 c4 0c             	add    esp,0xc
c0027a2e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0027a30 <x87::~x87()>:
c0027a30:	83 ec 0c             	sub    esp,0xc
c0027a33:	83 ec 0c             	sub    esp,0xc
c0027a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a3a:	e8 cd ff ff ff       	call   c0027a0c <x87::~x87()>
c0027a3f:	83 c4 10             	add    esp,0x10
c0027a42:	83 ec 08             	sub    esp,0x8
c0027a45:	68 58 01 00 00       	push   0x158
c0027a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a4e:	e8 8e ac fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027a53:	83 c4 10             	add    esp,0x10
c0027a56:	83 c4 0c             	add    esp,0xc
c0027a59:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0027a5a <IOAPIC::~IOAPIC()>:
c0027a5a:	83 ec 0c             	sub    esp,0xc
c0027a5d:	ba 8c b7 02 c0       	mov    edx,0xc002b78c
c0027a62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a66:	89 10                	mov    DWORD PTR [eax],edx
c0027a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027a6c:	83 ec 0c             	sub    esp,0xc
c0027a6f:	50                   	push   eax
c0027a70:	e8 0d c0 fe ff       	call   c0013a82 <Device::~Device()>
c0027a75:	83 c4 10             	add    esp,0x10
c0027a78:	90                   	nop
c0027a79:	83 c4 0c             	add    esp,0xc
c0027a7c:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0027a7e <IOAPIC::~IOAPIC()>:
c0027a7e:	83 ec 0c             	sub    esp,0xc
c0027a81:	83 ec 0c             	sub    esp,0xc
c0027a84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a88:	e8 cd ff ff ff       	call   c0027a5a <IOAPIC::~IOAPIC()>
c0027a8d:	83 c4 10             	add    esp,0x10
c0027a90:	83 ec 08             	sub    esp,0x8
c0027a93:	68 68 01 00 00       	push   0x168
c0027a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027a9c:	e8 40 ac fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027aa1:	83 c4 10             	add    esp,0x10
c0027aa4:	83 c4 0c             	add    esp,0xc
c0027aa7:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0027aa8 <APIC::~APIC()>:
c0027aa8:	83 ec 0c             	sub    esp,0xc
c0027aab:	ba 44 b7 02 c0       	mov    edx,0xc002b744
c0027ab0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ab4:	89 10                	mov    DWORD PTR [eax],edx
c0027ab6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027aba:	83 ec 0c             	sub    esp,0xc
c0027abd:	50                   	push   eax
c0027abe:	e8 db ca fe ff       	call   c001459e <InterruptController::~InterruptController()>
c0027ac3:	83 c4 10             	add    esp,0x10
c0027ac6:	90                   	nop
c0027ac7:	83 c4 0c             	add    esp,0xc
c0027aca:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0027acc <APIC::~APIC()>:
c0027acc:	83 ec 0c             	sub    esp,0xc
c0027acf:	83 ec 0c             	sub    esp,0xc
c0027ad2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027ad6:	e8 cd ff ff ff       	call   c0027aa8 <APIC::~APIC()>
c0027adb:	83 c4 10             	add    esp,0x10
c0027ade:	83 ec 08             	sub    esp,0x8
c0027ae1:	68 58 21 00 00       	push   0x2158
c0027ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027aea:	e8 f2 ab fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027aef:	83 c4 10             	add    esp,0x10
c0027af2:	83 c4 0c             	add    esp,0xc
c0027af5:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0027af6 <PIC::~PIC()>:
c0027af6:	83 ec 0c             	sub    esp,0xc
c0027af9:	ba dc b7 02 c0       	mov    edx,0xc002b7dc
c0027afe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b02:	89 10                	mov    DWORD PTR [eax],edx
c0027b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b08:	83 ec 0c             	sub    esp,0xc
c0027b0b:	50                   	push   eax
c0027b0c:	e8 8d ca fe ff       	call   c001459e <InterruptController::~InterruptController()>
c0027b11:	83 c4 10             	add    esp,0x10
c0027b14:	90                   	nop
c0027b15:	83 c4 0c             	add    esp,0xc
c0027b18:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0027b1a <PIC::~PIC()>:
c0027b1a:	83 ec 0c             	sub    esp,0xc
c0027b1d:	83 ec 0c             	sub    esp,0xc
c0027b20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b24:	e8 cd ff ff ff       	call   c0027af6 <PIC::~PIC()>
c0027b29:	83 c4 10             	add    esp,0x10
c0027b2c:	83 ec 08             	sub    esp,0x8
c0027b2f:	68 58 21 00 00       	push   0x2158
c0027b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b38:	e8 a4 ab fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027b3d:	83 c4 10             	add    esp,0x10
c0027b40:	83 c4 0c             	add    esp,0xc
c0027b43:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0027b44 <APICTimer::~APICTimer()>:
c0027b44:	83 ec 0c             	sub    esp,0xc
c0027b47:	ba 30 b8 02 c0       	mov    edx,0xc002b830
c0027b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b50:	89 10                	mov    DWORD PTR [eax],edx
c0027b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b56:	83 ec 0c             	sub    esp,0xc
c0027b59:	50                   	push   eax
c0027b5a:	e8 3f e8 fe ff       	call   c001639e <Timer::~Timer()>
c0027b5f:	83 c4 10             	add    esp,0x10
c0027b62:	90                   	nop
c0027b63:	83 c4 0c             	add    esp,0xc
c0027b66:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0027b68 <APICTimer::~APICTimer()>:
c0027b68:	83 ec 0c             	sub    esp,0xc
c0027b6b:	83 ec 0c             	sub    esp,0xc
c0027b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b72:	e8 cd ff ff ff       	call   c0027b44 <APICTimer::~APICTimer()>
c0027b77:	83 c4 10             	add    esp,0x10
c0027b7a:	83 ec 08             	sub    esp,0x8
c0027b7d:	68 60 01 00 00       	push   0x160
c0027b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027b86:	e8 56 ab fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027b8b:	83 c4 10             	add    esp,0x10
c0027b8e:	83 c4 0c             	add    esp,0xc
c0027b91:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0027b92 <PIT::~PIT()>:
c0027b92:	83 ec 0c             	sub    esp,0xc
c0027b95:	ba 80 b8 02 c0       	mov    edx,0xc002b880
c0027b9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027b9e:	89 10                	mov    DWORD PTR [eax],edx
c0027ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0027ba4:	83 ec 0c             	sub    esp,0xc
c0027ba7:	50                   	push   eax
c0027ba8:	e8 f1 e7 fe ff       	call   c001639e <Timer::~Timer()>
c0027bad:	83 c4 10             	add    esp,0x10
c0027bb0:	90                   	nop
c0027bb1:	83 c4 0c             	add    esp,0xc
c0027bb4:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0027bb6 <PIT::~PIT()>:
c0027bb6:	83 ec 0c             	sub    esp,0xc
c0027bb9:	83 ec 0c             	sub    esp,0xc
c0027bbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bc0:	e8 cd ff ff ff       	call   c0027b92 <PIT::~PIT()>
c0027bc5:	83 c4 10             	add    esp,0x10
c0027bc8:	83 ec 08             	sub    esp,0x8
c0027bcb:	68 5c 01 00 00       	push   0x15c
c0027bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0027bd4:	e8 08 ab fe ff       	call   c00126e1 <operator delete(void*, unsigned long)>
c0027bd9:	83 c4 10             	add    esp,0x10
c0027bdc:	83 c4 0c             	add    esp,0xc
c0027bdf:	c3                   	ret    
